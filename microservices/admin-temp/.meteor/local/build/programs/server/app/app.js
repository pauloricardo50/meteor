var require = meteorInstall({"imports":{"core":{"api":{"adminActions":{"server":{"methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/adminActions/server/methods.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  insertAdminAction: function insertAdminAction() {
    return _insertAdminAction;
  },
  completeAction: function completeAction() {
    return _completeAction;
  },
  completeActionByType: function completeActionByType() {
    return _completeActionByType;
  },
  removeParentLoan: function removeParentLoan() {
    return _removeParentLoan;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _ValidatedMethod = void 0;

module.watch(require("meteor/mdg:validated-method"), {
  ValidatedMethod: function ValidatedMethod(v) {
    _ValidatedMethod = v;
  }
}, 1);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 2);

var _check = void 0,
    _Match = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  },
  Match: function Match(v) {
    _Match = v;
  }
}, 3);
exports.insertAdminAction = _insertAdminAction;

var _CallPromiseMixin = void 0;

module.watch(require("meteor/didericis:callpromise-mixin"), {
  CallPromiseMixin: function CallPromiseMixin(v) {
    _CallPromiseMixin = v;
  }
}, 4);
var rateLimit = void 0;
module.watch(require("../../../utils/rate-limit.js"), {
  default: function _default(v) {
    rateLimit = v;
  }
}, 5);
var AdminActions = void 0;
module.watch(require("../adminActions"), {
  default: function _default(v) {
    AdminActions = v;
  }
}, 6);

var _ADMIN_ACTION_STATUS = void 0;

module.watch(require("../adminActionConstants"), {
  ADMIN_ACTION_STATUS: function ADMIN_ACTION_STATUS(v) {
    _ADMIN_ACTION_STATUS = v;
  }
}, 7);

var _insertAdminAction = new _ValidatedMethod({
  name: 'insertAdminAction',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref) {
    var loanId = _ref.loanId,
        type = _ref.type;

    _check(loanId, String);

    _check(type, String);
  },
  run: function run(_ref2) {
    var loanId = _ref2.loanId,
        type = _ref2.type;
    // Make sure there isn't an action active with the same ID
    var existingAction = AdminActions.findOne({
      type: type,
      loanId: loanId,
      status: _ADMIN_ACTION_STATUS.ACTIVE
    });

    if (existingAction) {
      throw new _Meteor.Error('duplicate active admin action');
    }

    return AdminActions.insert({
      type: type,
      loanId: loanId
    });
  }
});

var _completeAction = new _ValidatedMethod({
  name: 'completeAction',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref3) {
    var id = _ref3.id;

    _check(id, String);
  },
  run: function run(_ref4) {
    var id = _ref4.id;
    var action = AdminActions.findOne(id);

    if (action.status === _ADMIN_ACTION_STATUS.COMPLETED) {
      throw new _Meteor.Error('action is already completed');
    }

    return AdminActions.update(id, {
      $set: {
        status: _ADMIN_ACTION_STATUS.COMPLETED,
        completedAt: new Date()
      }
    });
  }
});

var _completeActionByType = new _ValidatedMethod({
  name: 'completeActionByType',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref5) {
    var loanId = _ref5.loanId,
        type = _ref5.type,
        newStatus = _ref5.newStatus;

    _check(loanId, String);

    _check(type, String);

    _check(newStatus, _Match.Optional(String));
  },
  run: function run(_ref6) {
    var loanId = _ref6.loanId,
        type = _ref6.type,
        newStatus = _ref6.newStatus;
    var action = AdminActions.findOne({
      loanId: loanId,
      type: type,
      status: _ADMIN_ACTION_STATUS.ACTIVE
    });

    if (!action) {
      throw new _Meteor.Error("action couldn't be found");
    }

    return AdminActions.update(action._id, {
      $set: {
        status: newStatus || _ADMIN_ACTION_STATUS.COMPLETED,
        completedAt: new Date()
      }
    });
  }
});

var _removeParentLoan = new _ValidatedMethod({
  name: 'removeParentLoan',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref7) {
    var loanId = _ref7.loanId;

    _check(loanId, String);
  },
  run: function run(_ref8) {
    var loanId = _ref8.loanId;
    return AdminActions.update({
      loanId: loanId
    }, {
      $set: {
        status: _ADMIN_ACTION_STATUS.PARENT_DELETED
      }
    }, {
      multi: true
    });
  }
});

rateLimit({
  methods: [_insertAdminAction, _completeAction]
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publications.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/adminActions/server/publications.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 1);
var AdminActions = void 0;
module.watch(require("../adminActions"), {
  default: function _default(v) {
    AdminActions = v;
  }
}, 2);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 3);

_Meteor.publish('allAdminActions', function publish() {
  // Verify if user is an admin
  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    // Return all
    return AdminActions.find();
  }

  return this.ready();
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"adminActionConstants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/adminActions/adminActionConstants.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  ADMIN_ACTION_TYPE: function ADMIN_ACTION_TYPE() {
    return _ADMIN_ACTION_TYPE;
  },
  ADMIN_ACTION_STATUS: function ADMIN_ACTION_STATUS() {
    return _ADMIN_ACTION_STATUS;
  }
});
exports.ADMIN_ACTION_TYPE = _ADMIN_ACTION_TYPE;
var _ADMIN_ACTION_TYPE = {
  VERIFY: 'VERIFY',
  AUCTION: 'AUCTION',
  LENDER_CHOSEN: 'LENDER_CHOSEN'
};
var _ADMIN_ACTION_STATUS = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  PARENT_DELETED: 'PARENT_DELETED',
  CANCELLED: 'CANCELLED'
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"adminActions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/adminActions/adminActions.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Mongo = void 0;

module.watch(require("meteor/mongo"), {
  Mongo: function Mongo(v) {
    _Mongo = v;
  }
}, 0);
var SimpleSchema = void 0;
module.watch(require("simpl-schema"), {
  default: function _default(v) {
    SimpleSchema = v;
  }
}, 1);

var _ADMIN_ACTION_TYPE = void 0,
    _ADMIN_ACTION_STATUS = void 0;

module.watch(require("./adminActionConstants"), {
  ADMIN_ACTION_TYPE: function ADMIN_ACTION_TYPE(v) {
    _ADMIN_ACTION_TYPE = v;
  },
  ADMIN_ACTION_STATUS: function ADMIN_ACTION_STATUS(v) {
    _ADMIN_ACTION_STATUS = v;
  }
}, 2);
var AdminActions = new _Mongo.Collection('adminActions'); // Action types
// 'verify'
// 'auction'
// 'lenderChosen'
// Prevent all client side modifications of mongoDB

AdminActions.deny({
  insert: function insert() {
    return true;
  },
  update: function update() {
    return true;
  },
  remove: function remove() {
    return true;
  }
});
AdminActions.allow({
  insert: function insert() {
    return false;
  },
  update: function update() {
    return false;
  },
  remove: function remove() {
    return false;
  }
});
var AdminActionSchema = new SimpleSchema({
  createdAt: {
    type: Date,
    autoValue: function autoValue() {
      if (this.isInsert) {
        return new Date();
      }
    }
  },
  status: {
    type: String,
    defaultValue: _ADMIN_ACTION_STATUS.ACTIVE,
    allowedValues: Object.values(_ADMIN_ACTION_STATUS)
  },
  completedAt: {
    type: Date,
    optional: true
  },
  type: {
    type: String,
    allowedValues: Object.values(_ADMIN_ACTION_TYPE)
  },
  loanId: String,
  staffId: {
    type: String,
    optional: true
  },
  extra: {
    type: Object,
    optional: true,
    blackbox: true
  },
  notes: {
    type: String,
    optional: true
  }
});
AdminActions.attachSchema(AdminActionSchema);
module.exportDefault(AdminActions);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/adminActions/index.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./adminActions"), {
  default: function _default(v) {
    exports.default = v;
  }
}, 0);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"borrowers":{"queries":{"borrowersList.expose.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/queries/borrowersList.expose.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var SecurityService = void 0;
module.watch(require("../../security"), {
  default: function _default(v) {
    SecurityService = v;
  }
}, 0);
var query = void 0;
module.watch(require("./borrowersList"), {
  default: function _default(v) {
    query = v;
  }
}, 1);
query.expose({
  firewall: function firewall(userId) {
    SecurityService.checkCurrentUserIsAdmin();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"borrowersList.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/queries/borrowersList.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var Borrowers = void 0;
module.watch(require(".."), {
  default: function _default(v) {
    Borrowers = v;
  }
}, 0);

var _BORROWER_QUERIES = void 0;

module.watch(require("../borrowerConstants"), {
  BORROWER_QUERIES: function BORROWER_QUERIES(v) {
    _BORROWER_QUERIES = v;
  }
}, 1);
module.exportDefault(Borrowers.createQuery(_BORROWER_QUERIES.ADMIN_BORROWERS, {
  $options: {
    sort: {
      createdAt: -1
    }
  },
  firstName: 1,
  lastName: 1,
  createdAt: 1,
  updatedAt: 1
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"exposures.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/queries/exposures.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./borrowersList.expose"));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"server":{"methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/server/methods.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertBorrower = undefined;

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  insertBorrower: function insertBorrower() {
    return _insertBorrower;
  },
  updateBorrower: function updateBorrower() {
    return _updateBorrower;
  },
  pushBorrowerValue: function pushBorrowerValue() {
    return _pushBorrowerValue;
  },
  popBorrowerValue: function popBorrowerValue() {
    return _popBorrowerValue;
  },
  deleteBorrower: function deleteBorrower() {
    return _deleteBorrower;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _ValidatedMethod = void 0;

module.watch(require("meteor/mdg:validated-method"), {
  ValidatedMethod: function ValidatedMethod(v) {
    _ValidatedMethod = v;
  }
}, 1);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 2);

var _Roles = void 0;

exports.insertBorrower = _insertBorrower;
module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 3);

var _CallPromiseMixin = void 0;

module.watch(require("meteor/didericis:callpromise-mixin"), {
  CallPromiseMixin: function CallPromiseMixin(v) {
    _CallPromiseMixin = v;
  }
}, 4);
var rateLimit = void 0;
module.watch(require("../../../utils/rate-limit.js"), {
  default: function _default(v) {
    rateLimit = v;
  }
}, 5);
var Borrowers = void 0;
module.watch(require("../borrowers"), {
  default: function _default(v) {
    Borrowers = v;
  }
}, 6);

var _insertBorrower = new _ValidatedMethod({
  name: 'insertBorrower',
  mixins: [_CallPromiseMixin],
  validate: function validate() {},
  run: function run(_ref) {
    var object = _ref.object,
        userId = _ref.userId;
    return Borrowers.insert((0, _extends3.default)({}, object, {
      // Allow null as userId
      userId: userId === undefined ? _Meteor.userId() : userId
    }));
  }
}); // Lets you set an entire object in the document


var _updateBorrower = new _ValidatedMethod({
  name: 'updateBorrower',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref2) {
    var id = _ref2.id;

    _check(id, String);
  },
  run: function run(_ref3) {
    var object = _ref3.object,
        id = _ref3.id;
    return Borrowers.update(id, {
      $set: object
    });
  }
});

var _pushBorrowerValue = new _ValidatedMethod({
  name: 'pushBorrowerValue',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref4) {
    var id = _ref4.id;

    _check(id, String);
  },
  run: function run(_ref5) {
    var object = _ref5.object,
        id = _ref5.id;
    return Borrowers.update(id, {
      $push: object
    });
  }
});

var _popBorrowerValue = new _ValidatedMethod({
  name: 'popBorrowerValue',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref6) {
    var id = _ref6.id;

    _check(id, String);
  },
  run: function run(_ref7) {
    var object = _ref7.object,
        id = _ref7.id;
    return Borrowers.update(id, {
      $pop: object
    }, {
      getAutoValues: false
    });
  }
});

var _deleteBorrower = new _ValidatedMethod({
  name: 'deleteBorrower',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref8) {
    var id = _ref8.id;

    _check(id, String);
  },
  run: function run(_ref9) {
    var id = _ref9.id;

    if (_Roles.userIsInRole(_Meteor.userId(), 'dev')) {
      return Borrowers.remove(id);
    }

    return false;
  }
});

rateLimit({
  methods: [_insertBorrower, _updateBorrower, _pushBorrowerValue, _popBorrowerValue, _deleteBorrower]
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/server/mutations.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _SecurityService = void 0,
    _createMutator = void 0;

module.watch(require("../.."), {
  SecurityService: function SecurityService(v) {
    _SecurityService = v;
  },
  createMutator: function createMutator(v) {
    _createMutator = v;
  }
}, 1);
var BorrowerService = void 0;
module.watch(require("../BorrowerService"), {
  default: function _default(v) {
    BorrowerService = v;
  }
}, 2);
var defs = void 0;
module.watch(require("../mutationDefinitions"), {
  "*": function _(v) {
    defs = v;
  }
}, 3);

_createMutator(defs.BORROWER_INSERT, function (_ref) {
  var borrower = _ref.borrower,
      userId = _ref.userId;
  var userIdIsDefined = userId !== undefined;

  if (userIdIsDefined) {
    _SecurityService.checkCurrentUserIsAdmin();
  } else {
    _SecurityService.borrowers.isAllowedToInsert();
  }

  return BorrowerService.insert({
    borrower: borrower,
    userId: userIdIsDefined ? userId : _Meteor.userId()
  });
});

_createMutator(defs.BORROWER_UPDATE, function (_ref2) {
  var borrowerId = _ref2.borrowerId,
      borrower = _ref2.borrower;

  _SecurityService.borrowers.isAllowedToUpdate(borrowerId);

  return BorrowerService.update({
    borrowerId: borrowerId,
    borrower: borrower
  });
});

_createMutator(defs.BORROWER_DELETE, function (_ref3) {
  var borrowerId = _ref3.borrowerId;

  _SecurityService.borrowers.isAllowedToDelete(borrowerId);

  return BorrowerService.remove({
    borrowerId: borrowerId
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publications.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/server/publications.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 1);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 2);
var Borrowers = void 0;
module.watch(require("../borrowers"), {
  default: function _default(v) {
    Borrowers = v;
  }
}, 3);

// Publish a specific loan with an ID
_Meteor.publish('borrower', function publish(id) {
  // Verify if user is logged In
  if (!_Meteor.userId()) {
    return this.ready();
  }

  _check(id, String);

  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    return Borrowers.find({
      _id: id
    });
  }

  return Borrowers.find({
    userId: _Meteor.userId(),
    _id: id
  });
}); // Publish all borrowers from the current user


_Meteor.publish('borrowers', function publish() {
  // Verify if user is logged In
  if (!_Meteor.userId()) {
    return this.ready();
  }

  var borrowers = Borrowers.find({
    userId: _Meteor.userId()
  });
  return borrowers;
}); // Publish all borrowers for a user


_Meteor.publish('userBorrowers', function publish(userId) {
  _check(userId, String); // Verify if user is logged In


  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    // Return all users
    return Borrowers.find({
      userId: userId
    });
  }

  return this.ready();
}); // Publish all borrowers in the database for admins


_Meteor.publish('allBorrowers', function publish() {
  // Verify if user is logged In
  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    // Return all users
    return Borrowers.find();
  }

  return this.ready();
}); // Publish all borrowers for a loan for admins


_Meteor.publish('loanBorrowers', function publish(borrowerIds) {
  _check(borrowerIds, [String]); // Verify if user is an admin


  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    // Return all borrowers
    return Borrowers.find({
      _id: {
        $in: borrowerIds
      }
    });
  }

  return this.ready();
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"BorrowerService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/BorrowerService.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  default: function _default() {
    return _class;
  }
});
var Borrowers = void 0;
module.watch(require("../borrowers"), {
  default: function _default(v) {
    Borrowers = v;
  }
}, 0);

var _class = function _class() {
  (0, _classCallCheck3.default)(this, _class);
};

_class.update = function (_ref) {
  var borrowerId = _ref.borrowerId,
      borrower = _ref.borrower;
  return Borrowers.update(borrowerId, {
    $set: borrower
  });
};

_class.insert = function (_ref2) {
  var borrower = _ref2.borrower,
      userId = _ref2.userId;
  return Borrowers.insert((0, _extends3.default)({}, borrower, {
    userId: userId
  }));
};

_class.remove = function (_ref3) {
  var borrowerId = _ref3.borrowerId;
  return Borrowers.remove(borrowerId);
};

_class.pushValue = function (_ref4) {
  var borrowerId = _ref4.borrowerId,
      borrower = _ref4.borrower;
  return Borrowers.update(borrowerId, {
    $push: borrower
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"borrowerConstants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/borrowerConstants.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  RESIDENCY_PERMIT: function RESIDENCY_PERMIT() {
    return _RESIDENCY_PERMIT;
  },
  GENDER: function GENDER() {
    return _GENDER;
  },
  CIVIL_STATUS: function CIVIL_STATUS() {
    return _CIVIL_STATUS;
  },
  OTHER_FORTUNE: function OTHER_FORTUNE() {
    return _OTHER_FORTUNE;
  },
  OTHER_INCOME: function OTHER_INCOME() {
    return _OTHER_INCOME;
  },
  EXPENSES: function EXPENSES() {
    return _EXPENSES;
  },
  REAL_ESTATE: function REAL_ESTATE() {
    return _REAL_ESTATE;
  },
  BORROWER_QUERIES: function BORROWER_QUERIES() {
    return _BORROWER_QUERIES;
  }
});
exports.RESIDENCY_PERMIT = _RESIDENCY_PERMIT;
var _RESIDENCY_PERMIT = {
  B: 'b',
  C: 'c',
  CI: 'ci',
  F: 'f',
  G: 'g',
  L: 'l',
  N: 'n',
  S: 's',
  NONE: 'none'
};
var _GENDER = {
  M: 'M',
  F: 'F',
  OTHER: 'OTHER'
};
var _CIVIL_STATUS = {
  MARRIED: 'MARRIED',
  SINGLE: 'SINGLE',
  PACSED: 'PACSED',
  DIVORCED: 'DIVORCED'
};
var _OTHER_FORTUNE = {
  ART: 'ART',
  CARS: 'CARS',
  BOATS: 'BOATS',
  AIRPLANES: 'AIRPLANES',
  JEWELRY: 'JEWELRY'
};
var _OTHER_INCOME = {
  WELFARE: 'WELFARE',
  PENSION: 'PENSION',
  RENT: 'RENT',
  REAL_ESTATE: 'REAL_ESTATE',
  INVESTMENT: 'INVESTMENT',
  OTHER: 'OTHER'
};
var _EXPENSES = {
  LEASING: 'LEASING',
  RENT: 'RENT',
  PERSONAL_LOAN: 'PERSONAL_LOAN',
  MORTGAGE_LOAN: 'MORTGAGE_LOAN',
  PENSIONS: 'PENSIONS',
  OTHER: 'OTHER'
};
var _REAL_ESTATE = {
  PRIMARY: 'PRIMARY',
  SECONDARY: 'SECONDARY',
  INVESTMENT: 'INVESTMENT'
};
var _BORROWER_QUERIES = {
  ADMIN_BORROWERS: 'ADMIN_BORROWERS'
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"borrowers.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/borrowers.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  BorrowerSchema: function BorrowerSchema() {
    return _BorrowerSchema;
  }
});

var _Mongo = void 0;

module.watch(require("meteor/mongo"), {
  Mongo: function Mongo(v) {
    _Mongo = v;
  }
}, 0);
var SimpleSchema = void 0;
module.watch(require("simpl-schema"), {
  default: function _default(v) {
    SimpleSchema = v;
  }
}, 1);

var _getFileSchema = void 0;

module.watch(require("../files/files"), {
  getFileSchema: function getFileSchema(v) {
    _getFileSchema = v;
  }
}, 2);

var _RESIDENCY_PERMIT = void 0,
    _GENDER = void 0,
    _CIVIL_STATUS = void 0,
    _OTHER_FORTUNE = void 0,
    _OTHER_INCOME = void 0,
    _EXPENSES = void 0,
    _REAL_ESTATE = void 0;

module.watch(require("./borrowerConstants"), {
  RESIDENCY_PERMIT: function RESIDENCY_PERMIT(v) {
    _RESIDENCY_PERMIT = v;
  },
  GENDER: function GENDER(v) {
    _GENDER = v;
  },
  CIVIL_STATUS: function CIVIL_STATUS(v) {
    _CIVIL_STATUS = v;
  },
  OTHER_FORTUNE: function OTHER_FORTUNE(v) {
    _OTHER_FORTUNE = v;
  },
  OTHER_INCOME: function OTHER_INCOME(v) {
    _OTHER_INCOME = v;
  },
  EXPENSES: function EXPENSES(v) {
    _EXPENSES = v;
  },
  REAL_ESTATE: function REAL_ESTATE(v) {
    _REAL_ESTATE = v;
  }
}, 3);
var Borrowers = new _Mongo.Collection('borrowers'); // Prevent all client side modifications of mongoDB

exports.BorrowerSchema = _BorrowerSchema;
Borrowers.deny({
  insert: function insert() {
    return true;
  },
  update: function update() {
    return true;
  },
  remove: function remove() {
    return true;
  }
});
Borrowers.allow({
  insert: function insert() {
    return false;
  },
  update: function update() {
    return false;
  },
  remove: function remove() {
    return false;
  }
});
var BorrowerFilesSchema = new SimpleSchema(_getFileSchema('borrower'));
var LogicSchema = new SimpleSchema({
  financeEthics: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  hasValidatedFinances: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  adminValidated: {
    type: Boolean,
    defaultValue: false
  }
}); // Documentation is in the google drive dev/MongoDB Schemas

var _BorrowerSchema = new SimpleSchema({
  userId: {
    type: String,
    optional: true
  },
  createdAt: {
    type: Date,
    autoValue: function autoValue() {
      if (this.isInsert) {
        return new Date();
      }
    }
  },
  updatedAt: {
    type: Date,
    autoValue: function autoValue() {
      // Verify the update is from the user owning this doc, ignoring admin/partner updates
      var doc = Borrowers.findOne(this.docId, {
        fields: {
          userId: 1
        }
      });

      if (this.isInsert) {
        return new Date();
      } else if (this.isUpdate && doc && this.userId === doc.userId) {
        return new Date();
      }
    }
  },
  // Personal Information
  firstName: {
    type: String,
    optional: true
  },
  lastName: {
    type: String,
    optional: true
  },
  gender: {
    type: String,
    optional: true,
    allowedValues: Object.values(_GENDER)
  },
  age: {
    type: SimpleSchema.Integer,
    optional: true,
    min: 18,
    max: 120
  },
  address1: {
    type: String,
    optional: true
  },
  address2: {
    type: String,
    optional: true
  },
  zipCode: {
    type: Number,
    optional: true,
    min: 1000,
    max: 9999
  },
  city: {
    type: String,
    optional: true
  },
  sameAddress: {
    type: Boolean,
    optional: true
  },
  isSwiss: {
    type: Boolean,
    optional: true
  },
  residencyPermit: {
    type: String,
    optional: true,
    allowedValues: Object.values(_RESIDENCY_PERMIT)
  },
  birthDate: {
    type: String,
    optional: true,
    regEx: '/^d{4}[/-](0?[1-9]|1[012])[/-](0?[1-9]|[12][0-9]|3[01])$/' // YYYY-MM-DD

  },
  birthPlace: {
    type: String,
    optional: true
  },
  citizenship: {
    type: String,
    optional: true
  },
  isUSPerson: {
    type: Boolean,
    optional: true
  },
  civilStatus: {
    type: String,
    defaultValue: _CIVIL_STATUS.SINGLE,
    allowedValues: Object.values(_CIVIL_STATUS)
  },
  childrenCount: {
    type: Number,
    optional: true,
    min: 0,
    max: 20
  },
  company: {
    type: String,
    optional: true
  },
  worksForOwnCompany: {
    type: Boolean,
    optional: true
  },
  salary: {
    type: Number,
    optional: true,
    min: 0,
    max: 100000000
  },
  bonusExists: {
    type: Boolean,
    defaultValue: false
  },
  bonus: {
    type: Object,
    defaultValue: {}
  },
  'bonus.bonus2014': {
    // oldest
    type: Number,
    min: 0,
    max: 100000000,
    optional: true
  },
  'bonus.bonus2015': {
    type: Number,
    min: 0,
    max: 100000000,
    optional: true
  },
  'bonus.bonus2016': {
    type: Number,
    min: 0,
    max: 100000000,
    optional: true
  },
  'bonus.bonus2017': {
    // most recent
    type: Number,
    min: 0,
    max: 100000000,
    optional: true
  },
  otherIncome: {
    type: Array,
    optional: true,
    defaultValue: []
  },
  'otherIncome.$': Object,
  'otherIncome.$.value': {
    type: Number,
    min: 0,
    max: 100000000
  },
  'otherIncome.$.description': {
    type: String,
    allowedValues: Object.values(_OTHER_INCOME)
  },
  otherFortune: {
    type: Array,
    optional: true,
    defaultValue: []
  },
  'otherFortune.$': Object,
  'otherFortune.$.value': {
    type: Number,
    min: 0,
    max: 100000000
  },
  'otherFortune.$.description': {
    type: String,
    allowedValues: Object.values(_OTHER_FORTUNE)
  },
  expenses: {
    type: Array,
    optional: true,
    defaultValue: []
  },
  'expenses.$': Object,
  'expenses.$.value': {
    type: Number,
    min: 0,
    max: 100000000
  },
  'expenses.$.description': {
    type: String,
    allowedValues: Object.values(_EXPENSES)
  },
  bankFortune: {
    type: Number,
    min: 0,
    max: 100000000,
    optional: true
  },
  realEstate: {
    type: Array,
    optional: true,
    defaultValue: []
  },
  'realEstate.$': Object,
  'realEstate.$.value': {
    type: Number,
    min: 0,
    max: 100000000
  },
  'realEstate.$.loan': {
    type: Number,
    min: 0,
    max: 100000000
  },
  'realEstate.$.description': {
    type: String,
    allowedValues: Object.values(_REAL_ESTATE)
  },
  personalBank: {
    type: String,
    optional: true
  },
  corporateBankExists: {
    type: Boolean,
    defaultValue: false
  },
  corporateBank: {
    type: String,
    optional: true
  },
  insuranceSecondPillar: {
    type: Number,
    optional: true,
    min: 0,
    max: 100000000
  },
  insuranceThirdPillar: {
    type: Number,
    optional: true,
    min: 0,
    max: 100000000
  },
  insurance3B: {
    type: Number,
    optional: true,
    min: 0,
    max: 100000000
  },
  files: {
    type: BorrowerFilesSchema,
    defaultValue: {}
  },
  // business logic and admin
  logic: {
    type: LogicSchema,
    defaultValue: {}
  },
  admin: {
    // TODO
    type: Object,
    optional: true
  },
  adminValidation: {
    type: Object,
    defaultValue: {},
    blackbox: true
  }
});

Borrowers.attachSchema(_BorrowerSchema);
module.exportDefault(Borrowers);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  borrowerMutations: function borrowerMutations() {
    return _borrowerMutations;
  }
});
module.watch(require("./borrowers"), {
  default: function _default(v) {
    exports.default = v;
  }
}, 1);
var mutationDefinitions = void 0;
exports.borrowerMutations = _borrowerMutations;
module.watch(require("./mutationDefinitions"), {
  "*": function _(v) {
    mutationDefinitions = v;
  }
}, 0);
var _borrowerMutations = mutationDefinitions;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutationDefinitions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/borrowers/mutationDefinitions.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  BORROWER_INSERT: function BORROWER_INSERT() {
    return _BORROWER_INSERT;
  },
  BORROWER_UPDATE: function BORROWER_UPDATE() {
    return _BORROWER_UPDATE;
  },
  BORROWER_DELETE: function BORROWER_DELETE() {
    return _BORROWER_DELETE;
  }
});
exports.BORROWER_INSERT = _BORROWER_INSERT;
var _BORROWER_INSERT = {
  name: 'BORROWER_INSERT',
  params: {
    borrower: {
      type: Object
    },
    userId: {
      type: String,
      optional: true
    }
  }
};
var _BORROWER_UPDATE = {
  name: 'BORROWER_UPDATE',
  params: {
    borrowerId: {
      type: String
    },
    object: {
      type: Object
    }
  }
};
var _BORROWER_DELETE = {
  name: 'BORROWER_DELETE',
  params: {
    borrowerId: {
      type: String
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"comparators":{"server":{"methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/comparators/server/methods.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  insertComparator: function insertComparator() {
    return _insertComparator;
  },
  updateComparator: function updateComparator() {
    return _updateComparator;
  },
  addComparatorField: function addComparatorField() {
    return _addComparatorField;
  },
  removeComparatorField: function removeComparatorField() {
    return _removeComparatorField;
  },
  toggleHiddenField: function toggleHiddenField() {
    return _toggleHiddenField;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _ValidatedMethod = void 0;

module.watch(require("meteor/mdg:validated-method"), {
  ValidatedMethod: function ValidatedMethod(v) {
    _ValidatedMethod = v;
  }
}, 1);

var _check = void 0,
    _Match = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  },
  Match: function Match(v) {
    _Match = v;
  }
}, 2);

var _Roles = void 0;

exports.insertComparator = _insertComparator;
module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 3);

var _CallPromiseMixin = void 0;

module.watch(require("meteor/didericis:callpromise-mixin"), {
  CallPromiseMixin: function CallPromiseMixin(v) {
    _CallPromiseMixin = v;
  }
}, 4);
var rateLimit = void 0;
module.watch(require("../../../utils/rate-limit.js"), {
  default: function _default(v) {
    rateLimit = v;
  }
}, 5);
var Comparators = void 0;
module.watch(require("../comparators"), {
  default: function _default(v) {
    Comparators = v;
  }
}, 6);

var _insertComparator = new _ValidatedMethod({
  name: 'insertComparator',
  mixins: [_CallPromiseMixin],
  validate: function validate() {},
  run: function run() {
    var userId = _Meteor.userId();

    var userComparators = Comparators.find({
      userId: userId
    }).count();

    if (userComparators > 0) {
      throw new _Meteor.Error("Can't have more than one comparator per user");
    }

    return Comparators.insert({
      userId: userId
    });
  }
});

var _updateComparator = new _ValidatedMethod({
  name: 'updateComparator',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref) {
    var object = _ref.object,
        id = _ref.id;

    _check(object, Object);

    _check(id, String);
  },
  run: function run(_ref2) {
    var object = _ref2.object,
        id = _ref2.id;
    return Comparators.update(id, {
      $set: object
    });
  }
});

var _addComparatorField = new _ValidatedMethod({
  name: 'addComparatorField',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref3) {
    var object = _ref3.object,
        id = _ref3.id;
    var name = object.name,
        type = object.type;

    _check(id, String);

    _check(name, String);

    _check(type, String);
  },
  run: function run(_ref4) {
    var object = _ref4.object,
        id = _ref4.id;
    var name = object.name,
        type = object.type;
    var comparator = Comparators.findOne(id);
    return Comparators.update(id, {
      $inc: {
        customFieldCount: 1
      },
      $push: {
        customFields: {
          id: "custom" + comparator.customFieldCount,
          name: name,
          type: type
        }
      }
    });
  }
});

var _removeComparatorField = new _ValidatedMethod({
  name: 'removeComparatorField',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref5) {
    var object = _ref5.object,
        id = _ref5.id;

    _check(id, String);

    _check(object, Object);

    _check(object.fieldId, String);
  },
  run: function run(_ref6) {
    var object = _ref6.object,
        id = _ref6.id;
    var fieldId = object.fieldId;
    return Comparators.update(id, {
      $pull: {
        customFields: {
          id: fieldId
        }
      }
    });
  }
});

var _toggleHiddenField = new _ValidatedMethod({
  name: 'toggleHiddenField',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref7) {
    var object = _ref7.object,
        id = _ref7.id;

    _check(id, String);

    _check(object, Object);

    _check(object.fieldId, String);
  },
  run: function run(_ref8) {
    var object = _ref8.object,
        id = _ref8.id;
    var fieldId = object.fieldId;
    var comparator = Comparators.findOne(id);

    if (comparator.hiddenFields.indexOf(fieldId) >= 0) {
      // Field is currently hidden
      return Comparators.update(id, {
        $pull: {
          hiddenFields: fieldId
        }
      });
    }

    return Comparators.update(id, {
      $push: {
        hiddenFields: fieldId
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publications.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/comparators/server/publications.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var Comparators = void 0;
module.watch(require("../comparators"), {
  default: function _default(v) {
    Comparators = v;
  }
}, 1);

// Get all comparators for the current user
_Meteor.publish('userComparators', function publish() {
  // Verify if user is logged In
  if (!_Meteor.userId()) {
    return this.ready();
  }

  return Comparators.find({
    userId: _Meteor.userId()
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"comparators.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/comparators/comparators.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  ComparatorSchema: function ComparatorSchema() {
    return _ComparatorSchema;
  }
});

var _Mongo = void 0;

module.watch(require("meteor/mongo"), {
  Mongo: function Mongo(v) {
    _Mongo = v;
  }
}, 0);
var SimpleSchema = void 0;
module.watch(require("simpl-schema"), {
  default: function _default(v) {
    SimpleSchema = v;
  }
}, 1);
var Comparators = new _Mongo.Collection('comparators'); // Prevent all client side modifications of mongoDB

exports.ComparatorSchema = _ComparatorSchema;
Comparators.deny({
  insert: function insert() {
    return true;
  },
  update: function update() {
    return true;
  },
  remove: function remove() {
    return true;
  }
});
Comparators.allow({
  insert: function insert() {
    return false;
  },
  update: function update() {
    return false;
  },
  remove: function remove() {
    return false;
  }
});

var _ComparatorSchema = new SimpleSchema({
  userId: {
    type: String
  },
  createdAt: {
    type: Date,
    autoValue: function autoValue() {
      if (this.isInsert) {
        return new Date();
      }
    }
  },
  updatedAt: {
    type: Date,
    autoValue: function autoValue() {
      if (this.isInsert || this.isUpdate) {
        return new Date();
      }
    }
  },
  useBorrowers: {
    type: Boolean,
    defaultValue: false
  },
  income: {
    type: Number,
    defaultValue: 100000,
    optional: true
  },
  fortune: {
    type: Number,
    defaultValue: 100000,
    optional: true
  },
  interestRate: {
    type: Number,
    defaultValue: 0.0125,
    optional: true
  },
  borrowRatio: {
    type: Number,
    defaultValue: 0.8,
    optional: true
  },
  usageType: {
    type: String,
    defaultValue: 'primary'
  },
  customFields: {
    type: Array,
    defaultValue: []
  },
  'customFields.$': Object,
  'customFields.$.id': String,
  'customFields.$.name': String,
  'customFields.$.type': String,
  customFieldCount: {
    type: Number,
    defaultValue: 0
  },
  hiddenFields: {
    type: Array,
    defaultValue: ['realBorrowRatio', 'incomeRatio', 'theoreticalMonthly']
  },
  'hiddenFields.$': String,
  borrowers: {
    type: Array,
    defaultValue: []
  },
  'borrowers.$': String
}); // Attach schema


Comparators.attachSchema(_ComparatorSchema);
module.exportDefault(Comparators);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/comparators/index.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./comparators"), {
  default: function _default(v) {
    exports.default = v;
  }
}, 0);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"email":{"server":{"EmailService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/email/server/EmailService.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var emailConfigs = void 0;
module.watch(require("./emailConfigs"), {
  default: function _default(v) {
    emailConfigs = v;
  }
}, 1);

var _getEmailContent = void 0,
    _getEmailPart = void 0;

module.watch(require("./emailHelpers"), {
  getEmailContent: function getEmailContent(v) {
    _getEmailContent = v;
  },
  getEmailPart: function getEmailPart(v) {
    _getEmailPart = v;
  }
}, 2);

var _sendMandrillTemplate = void 0,
    _getMandrillTemplate = void 0,
    _getSimpleMandrillTemplate = void 0,
    _renderMandrillTemplate = void 0;

module.watch(require("./mandrill"), {
  sendMandrillTemplate: function sendMandrillTemplate(v) {
    _sendMandrillTemplate = v;
  },
  getMandrillTemplate: function getMandrillTemplate(v) {
    _getMandrillTemplate = v;
  },
  getSimpleMandrillTemplate: function getSimpleMandrillTemplate(v) {
    _getSimpleMandrillTemplate = v;
  },
  renderMandrillTemplate: function renderMandrillTemplate(v) {
    _renderMandrillTemplate = v;
  }
}, 3);

var _FROM_NAME = void 0,
    _FROM_EMAIL = void 0;

module.watch(require("../emailConstants"), {
  FROM_NAME: function FROM_NAME(v) {
    _FROM_NAME = v;
  },
  FROM_EMAIL: function FROM_EMAIL(v) {
    _FROM_EMAIL = v;
  }
}, 4);

var EmailService = function EmailService() {
  var _this = this;

  (0, _classCallCheck3.default)(this, EmailService);

  this.sendEmail = function (emailId, address, params) {
    var templateOptions = _this.createTemplateOptions({
      emailId: emailId,
      address: address,
      params: params
    });

    var template = _this.getTemplate(templateOptions);

    if (_Meteor.isDevelopment || _Meteor.isTest) {
      _this.emailLogger({
        emailId: emailId,
        address: address,
        template: template
      });
    } else {
      _sendMandrillTemplate(template);
    }
  };

  this.sendEmailToUser = function (emailId, userId, params) {
    var user = _Meteor.users.findOne(userId);

    var emailAddress = user && user.emails[0].address;

    _this.sendEmail(emailId, emailAddress, params);
  };

  this.sendEmailToLoggedInUser = function (emailId, params) {
    _this.sendEmailToUser(emailId, _Meteor.userId(), params);
  };

  this.getEmailConfig = function (emailId) {
    return emailConfigs[emailId];
  };

  this.createTemplateOptions = function (_ref) {
    var emailId = _ref.emailId,
        address = _ref.address,
        params = _ref.params;

    var emailConfig = _this.getEmailConfig(emailId);

    var mandrillId = emailConfig.template.mandrillId,
        createIntlValues = emailConfig.createIntlValues;
    var intlValues = createIntlValues(params);

    var emailContent = _getEmailContent(emailId, intlValues); // Make sure you call `createOverrides` from emailConfig, to preserve `this`
    // See: https://github.com/Microsoft/vscode/issues/43930


    var _emailConfig$createOv = emailConfig.createOverrides(params, emailContent),
        variables = _emailConfig$createOv.variables,
        allowUnsubscribe = _emailConfig$createOv.allowUnsubscribe;

    return {
      templateName: mandrillId,
      allowUnsubscribe: allowUnsubscribe,
      variables: variables,
      recipientAddress: address,
      senderAddress: _FROM_EMAIL,
      senderName: _FROM_NAME,
      subject: emailContent.subject,
      sendAt: undefined
    };
  };

  this.getAccountsTemplate = function (emailId) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var templateOptions = _this.createTemplateOptions({
      emailId: emailId,
      params: params
    });

    return _getSimpleMandrillTemplate(templateOptions);
  };

  this.getTemplate = function (templateOptions) {
    return _getMandrillTemplate(templateOptions);
  };

  this.getEmailPart = function (emailId, part) {
    return _getEmailPart({
      emailId: emailId,
      part: part
    });
  };

  this.renderTemplate = function (templateOptions, emailId) {
    var result = void 0;

    _this.emailLogger({
      emailId: emailId,
      template: templateOptions
    });

    try {
      result = _renderMandrillTemplate(templateOptions);
    } catch (error) {
      throw new _Meteor.Error('MANDRILL_ERROR', "Error while rendering mandrill template for " + emailId, error.reason || error.message || error);
    }

    return result;
  };

  this.emailLogger = function (_ref2) {
    var emailId = _ref2.emailId,
        address = _ref2.address,
        template = _ref2.template;

    if (_Meteor.isDevelopment || _Meteor.isTest) {
      if (address) {
        console.log("EmailService dev: Would've sent " + emailId + " to " + address + " with this template:");
      } else {
        console.log("EmailService dev: Would've sent " + emailId + " with this template:");
      }

      console.log(JSON.stringify(template, null, 2));
    }
  };
};

module.exportDefault(new EmailService());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"accountsEmails.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/email/server/accountsEmails.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Accounts = void 0;

module.watch(require("meteor/accounts-base"), {
  Accounts: function Accounts(v) {
    _Accounts = v;
  }
}, 0);

var _FROM_DEFAULT = void 0,
    _EMAIL_IDS = void 0,
    _EMAIL_PARTS = void 0;

module.watch(require("../emailConstants"), {
  FROM_DEFAULT: function FROM_DEFAULT(v) {
    _FROM_DEFAULT = v;
  },
  EMAIL_IDS: function EMAIL_IDS(v) {
    _EMAIL_IDS = v;
  },
  EMAIL_PARTS: function EMAIL_PARTS(v) {
    _EMAIL_PARTS = v;
  }
}, 1);
var EmailService = void 0;
module.watch(require("./EmailService"), {
  default: function _default(v) {
    EmailService = v;
  }
}, 2);
// Meteor default emails
// https://themeteorchef.com/tutorials/sign-up-with-email-verification
_Accounts.emailTemplates.siteName = 'e-Potek';
_Accounts.emailTemplates.from = _FROM_DEFAULT;

_Accounts.emailTemplates.verifyEmail = function () {
  var emailId = _EMAIL_IDS.VERIFY_EMAIL;
  return {
    subject: function subject() {
      return EmailService.getEmailPart(emailId, _EMAIL_PARTS.SUBJECT);
    },
    html: function html(user, url) {
      // TODO: Make sure this doesn't block
      var template = EmailService.getAccountsTemplate(emailId, {
        user: user,
        url: url
      });
      var result = EmailService.renderTemplate(template, emailId);
      return result.data.html;
    }
  };
}();

_Accounts.emailTemplates.resetPassword = function () {
  var emailId = _EMAIL_IDS.RESET_PASSWORD;
  return {
    subject: function subject() {
      return EmailService.getEmailPart(emailId, _EMAIL_PARTS.SUBJECT);
    },
    html: function html(user, url) {
      // TODO: Make sure this doesn't block
      var template = EmailService.getAccountsTemplate(emailId, {
        user: user,
        url: url
      });
      var result = EmailService.renderTemplate(template, emailId);
      return result.data.html;
    }
  };
}();

_Accounts.emailTemplates.enrollAccount = function () {
  var emailId = _EMAIL_IDS.ENROLL_ACCOUNT;
  return {
    subject: function subject() {
      return EmailService.getEmailPart(emailId, _EMAIL_PARTS.SUBJECT);
    },
    html: function html(user, url) {
      // TODO: Make sure this doesn't block
      var template = EmailService.getAccountsTemplate(emailId, {
        user: user,
        url: url
      });
      var result = EmailService.renderTemplate(template, emailId);
      return result.data.html;
    }
  };
}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"email-methods.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/email/server/email-methods.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// import { Meteor } from 'meteor/meteor';
// import { Mandrill } from 'meteor/wylio:mandrill';
// import { ValidatedMethod } from 'meteor/mdg:validated-method';
// import { check, Match } from 'meteor/check';
// import { CallPromiseMixin } from 'meteor/didericis:callpromise-mixin';
// import rateLimit from 'core/utils/rate-limit.js';
// import {
//   from,
//   fromEmail,
//   defaultCTA_URL,
//   emailFooter,
//   getEmailContent,
// } from '../email-defaults';
// import { addEmail, modifyEmail } from 'core/api/loans/server/methods';
// export const sendEmail = new ValidatedMethod({
//   name: 'sendEmail',
//   mixins: [CallPromiseMixin],
//   validate({
//     emailId,
//     loanId,
//     template = 'notification',
//     CTA_URL,
//     sendAt,
//     userId,
//     intlValues,
//   }) {
//     check(emailId, String);
//     check(loanId, String);
//     check(template, Match.Optional(String));
//     check(CTA_URL, Match.Optional(String));
//     check(sendAt, Match.Optional(Date));
//     check(userId, Match.Optional(String));
//     check(intlValues, Match.Optional(Object));
//   },
//   run({
//     emailId,
//     loanId,
//     template = 'notification',
//     CTA_URL,
//     sendAt,
//     userId,
//     intlValues,
//   }) {
//     const { email, subject, title, body, CTA } = getEmailContent(
//       emailId,
//       intlValues,
//     );
//     let toEmail;
//     // When this is sent by an admin, use the userId to find the email to whom this should be sent to
//     if (userId) {
//       toEmail = Meteor.users.findOne(userId).emails[0].address;
//     }
//     toEmail = toEmail || email;
//     // If this is a demo site, do not send emails
//     if (
//       this.connection &&
//       this.connection.httpHeaders &&
//       this.connection.httpHeaders.host.indexOf('demo') !== -1
//     ) {
//       return false;
//     }
//     const options = {
//       template_name: template,
//       template_content: [{ name: 'footer', content: emailFooter() }],
//       message: {
//         from_email: fromEmail,
//         from_name: from,
//         subject,
//         to: [
//           {
//             email: toEmail,
//             // name: 'Jon Snow',
//             type: 'to',
//           },
//         ],
//         merge_vars: [
//           {
//             rcpt: toEmail,
//             vars: [
//               { name: 'title', content: title },
//               { name: 'body', content: body },
//               { name: 'CTA', content: CTA },
//               { name: 'CTA_URL', content: CTA_URL || defaultCTA_URL }, // overrides the global_merge_vars if it is set}
//             ],
//           },
//         ],
//         metadata: [{ userId: Meteor.userId(), loanId }],
//       },
//     };
//     if (sendAt) {
//       options.send_at = sendAt.toISOString();
//     }
//     // FIXME Mandrill can't be tested currently
//     // https://github.com/Wylio/meteor-mandrill/issues/23
//     if (Meteor.isTest) {
//       return;
//     }
//     this.unblock();
//     Mandrill.messages.sendTemplate(options, (error, result) => {
//       if (error) {
//         throw new Meteor.Error(error);
//       }
//       const content = JSON.parse(result.content)[0];
//       return addEmail.call(
//         {
//           loanId,
//           emailId,
//           _id: content._id,
//           status: content.status,
//           sendAt,
//         },
//         (err) => {
//           throw new Meteor.Error(err);
//         },
//       );
//     });
//   },
// });
// export const cancelScheduledEmail = new ValidatedMethod({
//   name: 'cancelScheduledEmail',
//   mixins: [CallPromiseMixin],
//   validate({ id, loanId }) {
//     check(id, String);
//     check(loanId, String);
//   },
//   run({ id, loanId }) {
//     this.unblock();
//     Mandrill.messages.cancelScheduled({ id }, (error, result) => {
//       if (error) {
//         throw new Meteor.Error(error);
//       }
//       const content = JSON.parse(result.content);
//       return modifyEmail.call(
//         { loanId, _id: content._id, status: 'cancelled' },
//         (err) => {
//           throw new Meteor.Error(err);
//         },
//       );
//     });
//   },
// });
// export const rescheduleEmail = new ValidatedMethod({
//   name: 'rescheduleEmail',
//   mixins: [CallPromiseMixin],
//   validate({ id, loanId, date }) {
//     check(id, String);
//     check(loanId, String);
//     check(date, Date);
//   },
//   run({ id, loanId, date }) {
//     this.unblock();
//     Mandrill.messages.reschedule(
//       { id, send_at: date.toISOString() },
//       (error, result) => {
//         if (error) {
//           throw new Meteor.Error(error);
//         }
//         const content = JSON.parse(result.content);
//         return modifyEmail.call({ loanId, _id: content._id, sendAt }, (err) => {
//           throw new Meteor.Error(err);
//         });
//       },
//     );
//   },
// });
// // Send max 1 email per second
// rateLimit({
//   methods: [sendEmail, cancelScheduledEmail, rescheduleEmail],
//   limit: 1,
//   timeRange: 1000,
// });
"use strict";
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"emailConfigs.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/email/server/emailConfigs.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _EMAIL_TEMPLATES = void 0,
    _EMAIL_IDS = void 0,
    _CTA_URL_DEFAULT = void 0;

module.watch(require("../emailConstants"), {
  EMAIL_TEMPLATES: function EMAIL_TEMPLATES(v) {
    _EMAIL_TEMPLATES = v;
  },
  EMAIL_IDS: function EMAIL_IDS(v) {
    _EMAIL_IDS = v;
  },
  CTA_URL_DEFAULT: function CTA_URL_DEFAULT(v) {
    _CTA_URL_DEFAULT = v;
  }
}, 0);

var _getEnrollmentUrl = void 0,
    _notificationTemplateDefaultOverride = void 0,
    _notificationAndCtaTemplateDefaultOverride = void 0;

module.watch(require("./emailHelpers"), {
  getEnrollmentUrl: function getEnrollmentUrl(v) {
    _getEnrollmentUrl = v;
  },
  notificationTemplateDefaultOverride: function notificationTemplateDefaultOverride(v) {
    _notificationTemplateDefaultOverride = v;
  },
  notificationAndCtaTemplateDefaultOverride: function notificationAndCtaTemplateDefaultOverride(v) {
    _notificationAndCtaTemplateDefaultOverride = v;
  }
}, 1);
var emailConfigs = {};
var emailDefaults = {
  allowUnsubscribe: false,
  createIntlValues: function createIntlValues() {
    return {
      variables: []
    };
  }
}; /**
    * addEmailConfig - A function that creates a config for a given emailId
    *
    * @param {String} emailId A unique id representing the email, from EMAIL_IDS
    * @param {Object} config A config object that can have the following keys:
    * {Object} template A template object from EMAIL_TEMPLATES
    * {Boolean} allowUnsubscribe Defines whether the email will be rendered with
    * a footer that allows the user to unsubscribe to notifications.
    * default is `false`
    * {Function} createOverrides A function that takes the user's values and
    * returns an object with overrides for the email template
    * {Function} createIntlValues A function that takes the user's values and
    * returns an object with intl values that need to be injected inside of the
    * i18n strings
    */

var addEmailConfig = function addEmailConfig(emailId, config) {
  if (config.template === _EMAIL_TEMPLATES.NOTIFICATION) {
    emailConfigs[emailId] = (0, _extends3.default)({
      createOverrides: _notificationTemplateDefaultOverride
    }, emailDefaults, config);
  } else if (config.template === _EMAIL_TEMPLATES.NOTIFICATION_AND_CTA) {
    emailConfigs[emailId] = (0, _extends3.default)({
      createOverrides: _notificationAndCtaTemplateDefaultOverride
    }, emailDefaults, config);
  } else {
    emailConfigs[emailId] = (0, _extends3.default)({}, emailDefaults, config);
  }
};

var verifyConfig = {
  template: _EMAIL_TEMPLATES.WELCOME,
  createOverrides: function createOverrides(_ref) {
    var user = _ref.user,
        url = _ref.url;
    var variables = this.template.variables;
    var urlWithoutHash = url.replace('#/', '');
    return {
      variables: [{
        name: variables.VERIFICATION_URL,
        content: urlWithoutHash
      }]
    };
  }
};
addEmailConfig(_EMAIL_IDS.VERIFY_EMAIL, verifyConfig);
addEmailConfig(_EMAIL_IDS.RESET_PASSWORD, {
  template: _EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,
  createOverrides: function createOverrides(_ref2, _ref3) {
    var user = _ref2.user,
        url = _ref2.url;
    var title = _ref3.title,
        body = _ref3.body,
        cta = _ref3.cta;
    var variables = this.template.variables;
    var urlWithoutHash = url.replace('#/', '');
    return {
      variables: [{
        name: variables.TITLE,
        content: title
      }, {
        name: variables.BODY,
        content: body
      }, {
        name: variables.CTA,
        content: cta
      }, {
        name: variables.CTA_URL,
        content: urlWithoutHash || _CTA_URL_DEFAULT
      }]
    };
  }
});
addEmailConfig(_EMAIL_IDS.ENROLL_ACCOUNT, {
  template: _EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,
  createOverrides: function createOverrides(_ref4, _ref5) {
    var user = _ref4.user,
        url = _ref4.url;
    var title = _ref5.title,
        body = _ref5.body,
        cta = _ref5.cta;
    var variables = this.template.variables;

    var enrollUrl = _getEnrollmentUrl(user, url);

    return {
      variables: [{
        name: variables.TITLE,
        content: title
      }, {
        name: variables.BODY,
        content: body
      }, {
        name: variables.CTA,
        content: cta
      }, {
        name: variables.CTA_URL,
        content: enrollUrl || _CTA_URL_DEFAULT
      }]
    };
  }
});
addEmailConfig(_EMAIL_IDS.VERIFICATION_REQUESTED, {
  template: _EMAIL_TEMPLATES.NOTIFICATION
});
addEmailConfig(_EMAIL_IDS.VERIFICATION_ERROR, {
  template: _EMAIL_TEMPLATES.NOTIFICATION_AND_CTA
});
addEmailConfig(_EMAIL_IDS.VERIFICATION_PASSED, {
  template: _EMAIL_TEMPLATES.NOTIFICATION_AND_CTA
});
addEmailConfig(_EMAIL_IDS.AUCTION_STARTED, {
  template: _EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,
  createIntlValues: function createIntlValues(_ref6) {
    var auctionEndTime = _ref6.auctionEndTime;
    return {
      date: auctionEndTime
    };
  }
});
addEmailConfig(_EMAIL_IDS.AUCTION_ENDED, {
  template: _EMAIL_TEMPLATES.NOTIFICATION_AND_CTA
});
addEmailConfig(_EMAIL_IDS.AUCTION_CANCELLED, {
  template: _EMAIL_TEMPLATES.NOTIFICATION_AND_CTA
});
module.exportDefault(emailConfigs);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"emailHelpers.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/email/server/emailHelpers.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notificationAndCtaTemplateDefaultOverride = exports.notificationTemplateDefaultOverride = exports.getEmailFooter = undefined;

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  getEmailFooter: function getEmailFooter() {
    return _getEmailFooter;
  },
  getEmailPart: function getEmailPart() {
    return _getEmailPart;
  },
  getEmailContent: function getEmailContent() {
    return _getEmailContent;
  },
  getEnrollmentUrl: function getEnrollmentUrl() {
    return _getEnrollmentUrl;
  },
  notificationTemplateDefaultOverride: function notificationTemplateDefaultOverride() {
    return _notificationTemplateDefaultOverride;
  },
  notificationAndCtaTemplateDefaultOverride: function notificationAndCtaTemplateDefaultOverride() {
    return _notificationAndCtaTemplateDefaultOverride;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var formatMessage = void 0;
module.watch(require("../../../utils/intl"), {
  default: function _default(v) {
    formatMessage = v;
  }
}, 1);

var _FROM_DEFAULT = void 0,
    _CTA_URL_DEFAULT = void 0,
    _EMAIL_I18N_NAMESPACE = void 0,
    _EMAIL_PARTS = void 0;

exports.getEmailFooter = _getEmailFooter;
module.watch(require("../emailConstants"), {
  FROM_DEFAULT: function FROM_DEFAULT(v) {
    _FROM_DEFAULT = v;
  },
  CTA_URL_DEFAULT: function CTA_URL_DEFAULT(v) {
    _CTA_URL_DEFAULT = v;
  },
  EMAIL_I18N_NAMESPACE: function EMAIL_I18N_NAMESPACE(v) {
    _EMAIL_I18N_NAMESPACE = v;
  },
  EMAIL_PARTS: function EMAIL_PARTS(v) {
    _EMAIL_PARTS = v;
  }
}, 2);
var WWW_URL = _Meteor.settings.public.subdomains.www;
var APP_URL = _Meteor.settings.public.subdomains.app; /**
                                                       * emailFooter - Returns the default email footer for all emails
                                                       *
                                                       * @param {boolean} [unsubscribe=true] Whether to show an unsubscribe line or not
                                                       *
                                                       * @return {type} a HTML string
                                                       */

var _getEmailFooter = function _getEmailFooter() {
  var allowUnsubscribe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return formatMessage('emails.footer', {
    copyright: '<em>&copy; *|CURRENT_YEAR|* e-Potek</em><br /><br />',
    url: "<a href=\"" + WWW_URL + "\" target=\"_blank\">e-potek.ch</a><br />",
    unsubscribe: allowUnsubscribe ? "<a href=\"*|UNSUB|*\">" + formatMessage('emails.unsubscribe') + "</a>" : ''
  });
};

exports.notificationTemplateDefaultOverride = _notificationTemplateDefaultOverride;

var _getEmailPart = function _getEmailPart(_ref) {
  var emailId = _ref.emailId,
      part = _ref.part,
      _ref$intlValues = _ref.intlValues,
      intlValues = _ref$intlValues === undefined ? {} : _ref$intlValues,
      _ref$intlFallback = _ref.intlFallback,
      intlFallback = _ref$intlFallback === undefined ? '' : _ref$intlFallback;
  return formatMessage(_EMAIL_I18N_NAMESPACE + "." + emailId + "." + part, intlValues, intlFallback);
};

exports.notificationAndCtaTemplateDefaultOverride = _notificationAndCtaTemplateDefaultOverride;

var _getEmailContent = function _getEmailContent(emailId, intlValues) {
  var subject = _getEmailPart({
    emailId: emailId,
    part: _EMAIL_PARTS.SUBJECT
  });

  var title = _getEmailPart({
    emailId: emailId,
    part: _EMAIL_PARTS.TITLE
  });

  var body = _getEmailPart({
    emailId: emailId,
    part: _EMAIL_PARTS.BODY,
    intlValues: (0, _extends3.default)({
      verticalSpace: '<span><br/><br/></span>'
    }, intlValues)
  });

  var cta = _getEmailPart({
    emailId: emailId,
    part: _EMAIL_PARTS.CTA,
    intlValues: intlValues,
    intlFallback: _CTA_URL_DEFAULT
  });

  var customFrom = _getEmailPart({
    emailId: emailId,
    part: _EMAIL_PARTS.FROM,
    intlValues: intlValues,
    intlFallback: _FROM_DEFAULT
  });

  return {
    subject: subject,
    title: title,
    body: body,
    cta: cta,
    from: customFrom
  };
};

var _getEnrollmentUrl = function _getEnrollmentUrl(user, url) {
  if (user.roles === 'user' || user.roles.indexOf('user') >= 0) {
    var enrollToken = url.split('/enroll-account/')[1];
    return APP_URL + "/enroll-account/" + enrollToken;
  }

  return url;
};

/**
 * This is a default override function for the NOTIFICATION template
 *
 * @export
 * @param {Object} params The params passed by the mutation
 * @param {Object} { title, body } The strings extracted from i18n files
 * @returns a template override object
 */function _notificationTemplateDefaultOverride(params, _ref2) {
  var title = _ref2.title,
      body = _ref2.body;
  var variables = this.template.variables;
  return {
    variables: [{
      name: variables.TITLE,
      content: title
    }, {
      name: variables.BODY,
      content: body
    }]
  };
} /**
   * This is a default override function for the NOTIFICATION_AND_CTA template
   *
   * @export
   * @param {Object} params The params passed by the mutation
   * @param {Object} { title, body, cta } The strings extracted from i18n files
   * @returns a template override object
   */

function _notificationAndCtaTemplateDefaultOverride(params, _ref3) {
  var title = _ref3.title,
      body = _ref3.body,
      cta = _ref3.cta;
  var variables = this.template.variables;
  return {
    variables: [{
      name: variables.TITLE,
      content: title
    }, {
      name: variables.BODY,
      content: body
    }, {
      name: variables.CTA,
      content: cta
    }, {
      name: variables.CTA_URL,
      content: _CTA_URL_DEFAULT
    }]
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"emailListeners.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/email/server/emailListeners.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var moment = void 0;
module.watch(require("moment"), {
  default: function _default(v) {
    moment = v;
  }
}, 0);
var EventService = void 0;
module.watch(require("../../events"), {
  default: function _default(v) {
    EventService = v;
  }
}, 1);

var _mutations = void 0;

module.watch(require("../../mutations"), {
  mutations: function mutations(v) {
    _mutations = v;
  }
}, 2);

var _Loans = void 0;

module.watch(require("../.."), {
  Loans: function Loans(v) {
    _Loans = v;
  }
}, 3);

var _EMAIL_IDS = void 0;

module.watch(require("../emailConstants"), {
  EMAIL_IDS: function EMAIL_IDS(v) {
    _EMAIL_IDS = v;
  }
}, 4);

var _sendEmail = void 0;

module.watch(require("./emailMethods"), {
  sendEmail: function sendEmail(v) {
    _sendEmail = v;
  }
}, 5);

var _getAuctionEndTime = void 0;

module.watch(require("../../../utils/loanFunctions"), {
  getAuctionEndTime: function getAuctionEndTime(v) {
    _getAuctionEndTime = v;
  }
}, 6);
EventService.addMutationListener(_mutations.REQUEST_LOAN_VERIFICATION, function (params) {
  var loanId = params.loanId;

  var _Loans$findOne = _Loans.findOne(loanId),
      userId = _Loans$findOne.userId;

  return _sendEmail({
    emailId: _EMAIL_IDS.VERIFICATION_REQUESTED,
    userId: userId,
    params: params
  });
});
EventService.addMutationListener(_mutations.START_AUCTION, function (params) {
  var loanId = params.loanId;

  var _Loans$findOne2 = _Loans.findOne(loanId),
      userId = _Loans$findOne2.userId;

  return _sendEmail({
    emailId: _EMAIL_IDS.AUCTION_STARTED,
    userId: userId,
    params: (0, _extends3.default)({}, params, {
      auctionEndTime: _getAuctionEndTime(moment())
    })
  });
});
EventService.addMutationListener(_mutations.END_AUCTION, function (params) {
  var loanId = params.loanId;

  var _Loans$findOne3 = _Loans.findOne(loanId),
      userId = _Loans$findOne3.userId;

  return _sendEmail({
    emailId: _EMAIL_IDS.AUCTION_ENDED,
    userId: userId,
    params: params
  });
});
EventService.addMutationListener(_mutations.CANCEL_AUCTION, function (params) {
  var loanId = params.loanId;

  var _Loans$findOne4 = _Loans.findOne(loanId),
      userId = _Loans$findOne4.userId;

  return _sendEmail({
    emailId: _EMAIL_IDS.AUCTION_CANCELLED,
    userId: userId,
    params: params
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"emailMethods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/email/server/emailMethods.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sendEmail = undefined;

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  sendEmail: function sendEmail() {
    return _sendEmail;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var EmailService = void 0;
module.watch(require("./EmailService"), {
  default: function _default(v) {
    EmailService = v;
  }
}, 1);
exports.sendEmail = _sendEmail;
var SEND_EMAIL = 'SEND_EMAIL';

_Meteor.methods((0, _defineProperty3.default)({}, SEND_EMAIL, function (_ref) {
  var emailId = _ref.emailId,
      userId = _ref.userId,
      params = _ref.params;
  this.unblock();

  try {
    EmailService.sendEmailToUser(emailId, userId, params);
  } catch (error) {
    throw error;
  }
}));

var _sendEmail = function _sendEmail(params) {
  return _Meteor.call(SEND_EMAIL, params);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/email/server/index.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./accountsEmails"));
module.watch(require("./emailMethods"));

var _setupMandrill = void 0;

module.watch(require("./mandrill"), {
  setupMandrill: function setupMandrill(v) {
    _setupMandrill = v;
  }
}, 0);

_setupMandrill();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mandrill.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/email/server/mandrill.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  setupMandrill: function setupMandrill() {
    return _setupMandrill;
  },
  getSimpleMandrillTemplate: function getSimpleMandrillTemplate() {
    return _getSimpleMandrillTemplate;
  },
  getMandrillTemplate: function getMandrillTemplate() {
    return _getMandrillTemplate;
  },
  renderMandrillTemplate: function renderMandrillTemplate() {
    return _renderMandrillTemplate;
  },
  sendMandrillTemplate: function sendMandrillTemplate() {
    return _sendMandrillTemplate;
  }
});

var _Mandrill = void 0;

module.watch(require("meteor/wylio:mandrill"), {
  Mandrill: function Mandrill(v) {
    _Mandrill = v;
  }
}, 0);

var _Meteor = void 0;

exports.setupMandrill = _setupMandrill;
module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 1);

var _getEmailFooter = void 0;

module.watch(require("./emailHelpers"), {
  getEmailFooter: function getEmailFooter(v) {
    _getEmailFooter = v;
  }
}, 2);

var _setupMandrill = function _setupMandrill() {
  var key = '';

  if (_Meteor.isTest) {
    key = _Meteor.settings.MANDRILL_API_KEY_TEST;
  } else {
    key = _Meteor.settings.MANDRILL_API_KEY;
  }

  _Mandrill.config({
    username: _Meteor.settings.MANDRILL_LOGIN,
    // the email address you log into Mandrill with. Only used to set MAIL_URL.
    key: key,
    // get your Mandrill key from https://mandrillapp.com/settings/index
    port: 587,
    // defaults to 465 for SMTP over TLS
    host: 'smtps.mandrillapp.com' // the SMTP host
    // baseUrl: 'https://mandrillapp.com/api/1.0/'  // update this in case Mandrill changes its API endpoint URL or version

  });
}; // Used for Meteor Accounts emails


var _getSimpleMandrillTemplate = function _getSimpleMandrillTemplate(options) {
  var templateName = options.templateName,
      allowUnsubscribe = options.allowUnsubscribe,
      variables = options.variables;
  return {
    template_name: templateName,
    template_content: [{
      name: 'footer',
      content: _getEmailFooter(allowUnsubscribe)
    }],
    merge_vars: variables
  };
};

var _getMandrillTemplate = function _getMandrillTemplate(_ref) {
  var templateName = _ref.templateName,
      allowUnsubscribe = _ref.allowUnsubscribe,
      variables = _ref.variables,
      recipientAddress = _ref.recipientAddress,
      senderAddress = _ref.senderAddress,
      senderName = _ref.senderName,
      subject = _ref.subject,
      sendAt = _ref.sendAt;
  return {
    template_name: templateName,
    template_content: [{
      name: 'footer',
      content: _getEmailFooter(allowUnsubscribe)
    }],
    message: {
      from_email: senderAddress,
      from_name: senderName,
      subject: subject,
      to: [{
        email: recipientAddress,
        type: 'to'
      }],
      merge_vars: [{
        rcpt: recipientAddress,
        vars: variables
      }]
    },
    send_at: sendAt ? sendAt.toISOString() : undefined
  };
};

var _renderMandrillTemplate = function _renderMandrillTemplate(mandrillTemplate) {
  return _Mandrill.templates.render(mandrillTemplate);
};

var _sendMandrillTemplate = function _sendMandrillTemplate(mandrillTemplate) {
  return new Promise(function (resolve, reject) {
    _Mandrill.messages.sendTemplate(mandrillTemplate, function (error, result) {
      if (error) {
        reject(error);
      }

      var content = JSON.parse(result.content)[0];
      resolve(content);
    });
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"emailConstants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/email/emailConstants.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  FROM_NAME: function FROM_NAME() {
    return _FROM_NAME;
  },
  FROM_EMAIL: function FROM_EMAIL() {
    return _FROM_EMAIL;
  },
  FROM_DEFAULT: function FROM_DEFAULT() {
    return _FROM_DEFAULT;
  },
  CTA_URL_DEFAULT: function CTA_URL_DEFAULT() {
    return _CTA_URL_DEFAULT;
  },
  EMAIL_I18N_NAMESPACE: function EMAIL_I18N_NAMESPACE() {
    return _EMAIL_I18N_NAMESPACE;
  },
  EMAIL_PARTS: function EMAIL_PARTS() {
    return _EMAIL_PARTS;
  },
  EMAIL_TEMPLATES: function EMAIL_TEMPLATES() {
    return _EMAIL_TEMPLATES;
  },
  EMAIL_IDS: function EMAIL_IDS() {
    return _EMAIL_IDS;
  }
});

var _Meteor = void 0;

exports.FROM_NAME = _FROM_NAME;
module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var _FROM_NAME = "Yannis d'e-Potek";
var _FROM_EMAIL = 'info@e-potek.ch';

var _FROM_DEFAULT = _FROM_NAME + " <" + _FROM_EMAIL + ">";

var _CTA_URL_DEFAULT = _Meteor.settings.public.subdomains.app;
var _EMAIL_I18N_NAMESPACE = 'emails';
var _EMAIL_PARTS = {
  SUBJECT: 'SUBJECT',
  TITLE: 'TITLE',
  BODY: 'BODY',
  CTA: 'CTA',
  FROM: 'FROM'
};
var _EMAIL_TEMPLATES = {
  WELCOME: {
    name: 'WELCOME',
    mandrillId: 'welcome',
    variables: {
      VERIFICATION_URL: 'VERIFICATION_URL'
    }
  },
  NOTIFICATION: {
    name: 'NOTIFICATION',
    mandrillId: 'notification',
    variables: {
      TITLE: 'TITLE',
      BODY: 'BODY'
    }
  },
  NOTIFICATION_AND_CTA: {
    name: 'NOTIFICATION_AND_CTA',
    mandrillId: 'notification-cta',
    variables: {
      TITLE: 'TITLE',
      BODY: 'BODY',
      CTA: 'CTA',
      CTA_URL: 'CTA_URL'
    }
  }
};
var _EMAIL_IDS = {
  VERIFY_EMAIL: 'VERIFY_EMAIL',
  RESET_PASSWORD: 'RESET_PASSWORD',
  ENROLL_ACCOUNT: 'ENROLL_ACCOUNT',
  VERIFICATION_REQUESTED: 'VERIFICATION_REQUESTED',
  VERIFICATION_ERROR: 'VERIFICATION_ERROR',
  VERIFICATION_PASSED: 'VERIFICATION_PASSED',
  AUCTION_STARTED: 'AUCTION_STARTED',
  AUCTION_ENDED: 'AUCTION_ENDED',
  AUCTION_CANCELLED: 'AUCTION_CANCELLED'
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"files":{"server":{"methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/files/server/methods.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  isAllowed: function isAllowed() {
    return _isAllowed;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var AWS = void 0;
module.watch(require("aws-sdk"), {
  default: function _default(v) {
    AWS = v;
  }
}, 1);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 2);

var _Roles = void 0;

exports.isAllowed = _isAllowed;
module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 3);
var rateLimit = void 0;
module.watch(require("../../../utils/rate-limit.js"), {
  default: function _default(v) {
    rateLimit = v;
  }
}, 4);
var Loans = void 0;
module.watch(require("../../loans/loans"), {
  default: function _default(v) {
    Loans = v;
  }
}, 5);
var Borrowers = void 0;
module.watch(require("../../borrowers/borrowers"), {
  default: function _default(v) {
    Borrowers = v;
  }
}, 6);

/* eslint import/prefer-default-export: 0 */var _isAllowed = function _isAllowed(key) {
  // Check if this user is the owner of the document he's trying to delete a
  // file from
  var keyId = key.split('/')[0];
  var loanFound = !!Loans.findOne({
    _id: keyId,
    userId: _Meteor.userId()
  });
  var borrowerFound = !!Borrowers.findOne({
    _id: keyId,
    userId: _Meteor.userId()
  });

  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    return true;
  } else if (!(loanFound || borrowerFound)) {
    throw new _Meteor.Error('unauthorized email');
  }

  return true;
};

var setupS3 = function setupS3() {
  AWS.config.update({
    accessKeyId: _Meteor.settings.AWS.users.accessKeyId,
    secretAccessKey: _Meteor.settings.AWS.users.secretAccesskey
  });
  return new AWS.S3({
    signatureVersion: 'v4'
  });
};

_Meteor.methods({
  deleteFile: function deleteFile(key) {
    _check(key, String);

    _isAllowed(key);

    var s3 = setupS3();
    var params = {
      Bucket: _Meteor.settings.S3Bucket,
      Key: key
    }; // bind s3 to avoid an error of context 'makeLoan is not a function'

    var async = _Meteor.wrapAsync(s3.deleteObject.bind(s3));

    return async(params);
  },
  downloadFile: function downloadFile(key) {
    _check(key, String);

    _isAllowed(key);

    var s3 = setupS3();
    var params = {
      Bucket: _Meteor.settings.S3Bucket,
      Key: key
    }; // Don't ask me why this works...
    // https://gist.github.com/rclai/b9331afd2fbabadb0074

    var async = _Meteor.wrapAsync(function (parameters, callback) {
      return s3.getObject(parameters, function (error, data) {
        callback(error, data);
      });
    });

    return async(params);
  }
});

rateLimit({
  methods: ['deleteFile', 'downloadFile']
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"fileConstants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/files/fileConstants.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  FILE_STATUS: function FILE_STATUS() {
    return _FILE_STATUS;
  }
});
exports.FILE_STATUS = _FILE_STATUS;
var _FILE_STATUS = {
  UNVERIFIED: 'UNVERIFIED',
  VALID: 'VALID',
  ERROR: 'ERROR'
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"files.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/files/files.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

module.export({
  borrowerFiles: function borrowerFiles() {
    return _borrowerFiles;
  },
  loanFiles: function loanFiles() {
    return _loanFiles;
  },
  propertyFiles: function propertyFiles() {
    return _propertyFiles;
  },
  getFileIDs: function getFileIDs() {
    return _getFileIDs;
  },
  FileSchema: function FileSchema() {
    return _FileSchema;
  },
  getFileSchema: function getFileSchema() {
    return _getFileSchema;
  },
  fakeFile: function fakeFile() {
    return _fakeFile;
  },
  getFileCount: function getFileCount() {
    return _getFileCount;
  }
});
var SimpleSchema = void 0;
module.watch(require("simpl-schema"), {
  default: function _default(v) {
    SimpleSchema = v;
  }
}, 0);
exports.borrowerFiles = _borrowerFiles;

var _FILE_STATUS = void 0,
    _PURCHASE_TYPE = void 0,
    _USAGE_TYPE = void 0;

module.watch(require("../constants"), {
  FILE_STATUS: function FILE_STATUS(v) {
    _FILE_STATUS = v;
  },
  PURCHASE_TYPE: function PURCHASE_TYPE(v) {
    _PURCHASE_TYPE = v;
  },
  USAGE_TYPE: function USAGE_TYPE(v) {
    _USAGE_TYPE = v;
  }
}, 1);

var _borrowerFiles = function _borrowerFiles() {
  var b = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    auction: [{
      id: 'identity'
    }, {
      id: 'residencyPermit',
      condition: !b.isSwiss
    }, {
      id: 'taxes' // condition: true, //TODO: implement married couple logic

    }, {
      id: 'salaryCertificate'
    }, {
      id: 'bonus',
      condition: !!b.bonus && Object.keys(b.bonus).length > 0
    }, {
      id: 'otherIncome',
      condition: b.otherIncome && !!(b.otherIncome.length > 0)
    }, {
      id: 'ownCompanyFinancialStatements',
      condition: !!b.worksForOwnCompany
    }, {
      id: 'divorceJudgment',
      condition: !b.civilStatus === 'divorced',
      noTooltips: true
    }, {
      id: 'expenses',
      condition: !!b.otherIncome && !!(b.otherIncome.length > 0)
    }],
    contract: [{
      id: 'nonPursuitExtract',
      doubleTooltip: true
    }, {
      id: 'lastSalaries',
      noTooltips: true
    }, {
      id: 'currentMortgages',
      condition: !!b.realEstate && !!b.realEstate.length > 0
    }, {
      id: 'bankAssetsChange',
      condition: b.fortuneChange
    }, {
      id: 'pensionFundYearlyStatement',
      condition: b.insuranceSecondPillar > 0,
      doubleTooltip: true
    }, {
      id: 'retirementInsurancePlan',
      condition: b.insuranceThirdPillar > 0,
      // TODO, separate from insurance and other below
      doubleTooltip: true
    }, {
      id: 'retirementPlanOther',
      // condition: true, TODO
      condition: false,
      doubleTooltip: true
    }],
    closing: [],
    all: function all() {
      return [].concat(_toConsumableArray(this.auction), _toConsumableArray(this.contract), _toConsumableArray(this.closing));
    }
  };
};

var _loanFiles = function _loanFiles() {
  var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    auction: [// {
      //   id: 'plans',
      // },
      // {
      //   id: 'cubage',
      //   doubleTooltip: true,
      //   condition: r.propertyId && r.propertyId.style === 'villa',
      // },
      // {
      //   id: 'pictures',
      // },
      // {
      //   id: 'marketingBrochure',
      //   condition: !!r.general && r.general.purchaseType === 'acquisition',
      //   required: false,
      // },
    ],
    contract: [{
      id: 'buyersContract',
      tooltipSuffix: !!r.general && r.general.purchaseType === 'refinancing' ? 'a' : 'b'
    }, {
      id: 'reimbursementStatement',
      condition: !!r.general && r.general.purchaseType === 'refinancing'
    }, {
      id: 'rent',
      condition: !!r.general && r.general.usageType === 'investment',
      doubleTooltip: true
    }, {
      id: 'coownershipAllocationAgreement',
      condition: !!r.propertyId && !!r.propertyId.isCoproperty,
      doubleTooltip: true
    }, {
      id: 'coownershipAgreement',
      condition: !!r.propertyId && !!r.propertyId.isCoproperty,
      doubleTooltip: true
    }, {
      id: 'fireAndWaterInsurance',
      condition: !!(r.propertyId && r.propertyId.isNew)
    }],
    closing: [],
    // closing: [
    //   {
    //     id: 'retirementWithdrawalStatement',
    //     label: 'Attestation LPP - après retrait',
    //     help1: 'Certificat émis sur votre demande par votre caisse de pension démontrant votre situation LPP après retrait',
    //     help2: 'Vous pouvez obtenir ce document, sur demande, auprès de votre caisse de pension',
    //     condition: !!r.logic && r.insuranceUsePreset === 'withdrawal',
    //   },
    // ],
    other: [{
      id: 'upload0'
    }, {
      id: 'upload1'
    }, {
      id: 'upload2'
    }, {
      id: 'upload3'
    }, {
      id: 'upload4'
    }],
    admin: [{
      id: 'contract'
    }, {
      id: 'signedContract'
    }],
    all: function all() {
      return [].concat(_toConsumableArray(this.auction), _toConsumableArray(this.contract), _toConsumableArray(this.closing), _toConsumableArray(this.admin), _toConsumableArray(this.other));
    }
  };
};

var _propertyFiles = function _propertyFiles() {
  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var loan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return {
    auction: [{
      id: 'plans'
    }, {
      id: 'cubage',
      doubleTooltip: true,
      condition: property.style === 'villa'
    }, {
      id: 'pictures'
    }, {
      id: 'marketingBrochure',
      condition: !!(loan && loan.general && loan.general.purchaseType === _PURCHASE_TYPE.ACQUISITION),
      required: false
    }],
    contract: [{
      id: 'rent',
      condition: !!loan.general && loan.general.usageType === _USAGE_TYPE.INVESTMENT,
      doubleTooltip: true
    }, {
      id: 'landRegisterExtract',
      doubleTooltip: true
    }],
    all: function all() {
      return [].concat(_toConsumableArray(this.auction), _toConsumableArray(this.contract));
    }
  };
};

var _getFileIDs = function _getFileIDs(list) {
  var files = void 0;
  var ids = [];

  switch (list) {
    case 'borrower':
      files = _borrowerFiles();
      break;

    case 'loan':
      files = _loanFiles();
      break;

    case 'property':
      files = _propertyFiles();
      break;

    default:
      throw new Error('invalid file list');
  }

  files.all().forEach(function (f) {
    return ids.push(f.id);
  });
  return ids;
};

var _FileSchema = new SimpleSchema({
  name: String,
  initialName: String,
  size: Number,
  type: String,
  url: {
    type: String,
    regEx: SimpleSchema.RegEx.Url
  },
  key: String,
  fileCount: Number,
  status: {
    type: String,
    allowedValues: Object.values(_FILE_STATUS)
  },
  error: {
    optional: true,
    type: String
  }
});

var _getFileSchema = function _getFileSchema(list) {
  var schema = {};

  var arr = _getFileIDs(list);

  arr.forEach(function (id) {
    schema[id] = {
      type: Array,
      optional: true,
      maxCount: 100
    };
    schema[id + ".$"] = _FileSchema;
  });
  return schema;
};

var _fakeFile = {
  name: 'fakeFile.pdf',
  initialName: 'fakeFile.pdf',
  size: 10000,
  type: 'application/pdf',
  url: 'https://www.fake-url.com',
  key: 'asdf/fakeKey/fakeFile.pdf',
  fileCount: 0,
  status: _FILE_STATUS.VALID,
  error: ''
};

var _getFileCount = function _getFileCount(currentValue) {
  var fileCountString = '00';
  var fileCount = 0;

  if (currentValue && currentValue.length > 0) {
    // If something goes wrong, minimum should be -1 + 1 = 0
    fileCount = Math.max.apply(Math, _toConsumableArray(currentValue.map(function (f) {
      return f.fileCount;
    })).concat([-1])) + 1;
    fileCountString = fileCount < 10 ? "0" + fileCount : "" + fileCount;
  }

  return {
    fileCount: fileCount,
    fileCountString: fileCountString
  };
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"meteor-slingshot-server.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/files/meteor-slingshot-server.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Slingshot = void 0;

module.watch(require("meteor/edgee:slingshot"), {
  Slingshot: function Slingshot(v) {
    _Slingshot = v;
  }
}, 1);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 2);
var Loans = void 0;
module.watch(require("../loans/loans"), {
  default: function _default(v) {
    Loans = v;
  }
}, 3);
var Borrowers = void 0;
module.watch(require("../borrowers/borrowers"), {
  default: function _default(v) {
    Borrowers = v;
  }
}, 4);

var _getFileCount = void 0;

module.watch(require("./files"), {
  getFileCount: function getFileCount(v) {
    _getFileCount = v;
  }
}, 5);
module.watch(require("./meteor-slingshot"));

_Slingshot.createDirective('myFileUploads', _Slingshot.S3Storage, {
  authorize: function authorize(file, _ref) {
    var collection = _ref.collection,
        docId = _ref.docId;

    // Don't use arrow function, this is the current object here
    // Check for devs and admins
    if (_Roles.userIsInRole(this.userId, 'admin') || _Roles.userIsInRole(this.userId, 'dev')) {
      return true;
    } // Deny uploads if user is not logged in.


    if (!this.userId) {
      throw new _Meteor.Error('Login Required', 'Please login before uploading files');
    } // Make sure this user is the owner of the document


    if (collection === 'borrowers') {
      var doc = Borrowers.findOne(docId);

      if (doc.userId !== this.userId) {
        throw new _Meteor.Error('Invalid user', "You're not allowed to do this");
      }
    } else if (collection === 'loans') {
      var _doc = Loans.findOne(docId);

      if (_doc.userId !== this.userId) {
        throw new _Meteor.Error('Invalid user', "You're not allowed to do this");
      }
    } else {
      throw new _Meteor.Error('Invalid collection', "Collection doesn't exist");
    }

    return true;
  },
  key: function key(file, _ref2) {
    var currentValue = _ref2.currentValue,
        docId = _ref2.docId,
        id = _ref2.id;

    var _getFileCount2 = _getFileCount(currentValue),
        fileCountString = _getFileCount2.fileCountString;

    return docId + "/" + id + "/" + fileCountString + file.name;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"meteor-slingshot.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/files/meteor-slingshot.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  allowedFileTypes: function allowedFileTypes() {
    return _allowedFileTypes;
  },
  maxSize: function maxSize() {
    return _maxSize;
  }
});

var _Slingshot = void 0;

exports.allowedFileTypes = _allowedFileTypes;
module.watch(require("meteor/edgee:slingshot"), {
  Slingshot: function Slingshot(v) {
    _Slingshot = v;
  }
}, 0);
var _allowedFileTypes = ['image/png', 'image/jpeg', 'application/pdf'];

var _maxSize = 50 * 1024 * 1024;

// 50 MB (use null for unlimited).
_Slingshot.fileRestrictions('myFileUploads', {
  allowedFileTypes: _allowedFileTypes,
  maxSize: _maxSize
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"jobs":{"server":{"JobService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/jobs/server/JobService.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Job = void 0;

module.watch(require("meteor/vsivsi:job-collection"), {
  Job: function Job(v) {
    _Job = v;
  }
}, 0);
var Jobs = void 0;
module.watch(require("./jobs"), {
  default: function _default(v) {
    Jobs = v;
  }
}, 1);

var _SCHEDULE_METHOD = void 0;

module.watch(require("./jobConstants"), {
  SCHEDULE_METHOD: function SCHEDULE_METHOD(v) {
    _SCHEDULE_METHOD = v;
  }
}, 2);

var JobService = function JobService() {
  var _this = this;

  (0, _classCallCheck3.default)(this, JobService);

  this.scheduleMethod = function (_ref) {
    var method = _ref.method,
        params = _ref.params,
        date = _ref.date;
    var jobId = new _Job(Jobs, _SCHEDULE_METHOD, {
      method: method,
      params: params
    }).after(date).save();
    return jobId;
  };

  this.scheduleMutation = function (_ref2) {
    var name = _ref2.mutation.name,
        params = _ref2.params,
        date = _ref2.date;
    return _this.scheduleMethod({
      method: name,
      params: params,
      date: date
    });
  };

  this.cancelJob = function (_ref3) {
    var jobId = _ref3.jobId;
    return Jobs.cancelJobs([jobId]);
  };

  this.removeJob = function (_ref4) {
    var jobId = _ref4.jobId;
    return Jobs.removeJobs([jobId]);
  };

  this.cancelExistingJob = function (_ref5) {
    var method = _ref5.method,
        params = _ref5.params;
    var job = Jobs.findOne({
      'data.method': method,
      'data.params': params
    });

    if (job && job._id) {
      _this.cancelJob({
        jobId: job._id
      });
    }
  };

  this.cancelExistingMutationJob = function (_ref6) {
    var name = _ref6.mutation.name,
        params = _ref6.params;

    _this.cancelExistingJob({
      method: name,
      params: params
    });
  };
};

module.exportDefault(new JobService());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/jobs/server/index.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./jobs"), {
  default: function _default(v) {
    exports.default = v;
  }
}, 0);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"jobConstants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/jobs/server/jobConstants.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  SCHEDULE_METHOD: function SCHEDULE_METHOD() {
    return _SCHEDULE_METHOD;
  },
  CANCEL_JOB: function CANCEL_JOB() {
    return _CANCEL_JOB;
  },
  REMOVE_JOB: function REMOVE_JOB() {
    return _REMOVE_JOB;
  }
});
exports.SCHEDULE_METHOD = _SCHEDULE_METHOD;
var _SCHEDULE_METHOD = 'SCHEDULE_METHOD';
var _CANCEL_JOB = 'CANCEL_JOB';
var _REMOVE_JOB = 'REMOVE_JOB';
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"jobListeners.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/jobs/server/jobListeners.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var moment = void 0;
module.watch(require("moment"), {
  default: function _default(v) {
    moment = v;
  }
}, 0);
var EventService = void 0;
module.watch(require("../../events"), {
  default: function _default(v) {
    EventService = v;
  }
}, 1);

var _mutations = void 0;

module.watch(require("../../mutations"), {
  mutations: function mutations(v) {
    _mutations = v;
  }
}, 2);
var JobService = void 0;
module.watch(require("./JobService"), {
  default: function _default(v) {
    JobService = v;
  }
}, 3);

var _getAuctionEndTime = void 0;

module.watch(require("../../../utils/loanFunctions"), {
  getAuctionEndTime: function getAuctionEndTime(v) {
    _getAuctionEndTime = v;
  }
}, 4);
EventService.addMutationListener(_mutations.START_AUCTION, function (params) {
  JobService.cancelExistingMutationJob({
    mutation: _mutations.END_AUCTION,
    params: params
  });
  JobService.scheduleMutation({
    mutation: _mutations.END_AUCTION,
    params: params,
    date: _getAuctionEndTime(moment())
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"jobs.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/jobs/server/jobs.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _JobCollection = void 0;

module.watch(require("meteor/vsivsi:job-collection"), {
  JobCollection: function JobCollection(v) {
    _JobCollection = v;
  }
}, 1);

var _SCHEDULE_METHOD = void 0;

module.watch(require("./jobConstants"), {
  SCHEDULE_METHOD: function SCHEDULE_METHOD(v) {
    _SCHEDULE_METHOD = v;
  }
}, 2);
var Jobs = new _JobCollection('jobs');
var jobList = [{
  type: _SCHEDULE_METHOD,
  options: {
    pollInterval: 5000
  },
  run: function run(data, callback) {
    var _Meteor2;

    console.log('calling scheduled method..');
    var method = data.method,
        params = data.params;

    if (typeof method !== 'string') {
      throw new Error('invalid method name');
    }

    (_Meteor2 = _Meteor).call.apply(_Meteor2, [method].concat(_toConsumableArray(params), [function (err, result) {
      if (err) {
        callback(err, undefined);
      } else {
        callback(err, result);
      }
    }]));
  }
}];
jobList.forEach(function (jobObject) {
  Jobs.processJobs(jobObject.type, (0, _extends3.default)({
    pollInterval: 5000
  }, jobObject.options), function (job, callback) {
    var type = job.type,
        data = job.data,
        done = job.done,
        fail = job.fail;

    try {
      jobObject.run(data, function (err, result) {
        if (err) {
          fail(err);
        } else {
          done(result);
        }

        callback();
      });
    } catch (error) {
      fail(error);
      callback();
    }
  });
});
module.exportDefault(Jobs);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"loans":{"queries":{"adminLoanView.expose.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/queries/adminLoanView.expose.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var SecurityService = void 0;
module.watch(require("../../security"), {
  default: function _default(v) {
    SecurityService = v;
  }
}, 0);
var query = void 0;
module.watch(require("./adminLoanView"), {
  default: function _default(v) {
    query = v;
  }
}, 1);
query.expose({
  firewall: function firewall(userId) {
    SecurityService.checkCurrentUserIsAdmin();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"adminLoanView.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/queries/adminLoanView.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Loans = void 0;

module.watch(require("../../"), {
  Loans: function Loans(v) {
    _Loans = v;
  }
}, 0);

var _LOAN_QUERIES = void 0;

module.watch(require("../loanConstants"), {
  LOAN_QUERIES: function LOAN_QUERIES(v) {
    _LOAN_QUERIES = v;
  }
}, 1);
module.exportDefault(_Loans.createQuery(_LOAN_QUERIES.ADMIN_LOAN, {
  $filter: function $filter(_ref) {
    var filters = _ref.filters,
        params = _ref.params;
    filters._id = params._id;
  },
  userId: 1,
  name: 1,
  logic: 1,
  general: 1,
  createdAt: 1,
  updatedAt: 1,
  adminNote: 1,
  files: 1,
  property: {
    userId: 1,
    createdAt: 1,
    updatedAt: 1,
    status: 1,
    value: 1,
    propertyWork: 1,
    usageType: 1,
    investmentRent: 1,
    style: 1,
    address: 1,
    address1: 1,
    address2: 1,
    zipCode: 1,
    city: 1,
    constructionYear: 1,
    renovationYear: 1,
    insideArea: 1,
    landArea: 1,
    balconyArea: 1,
    terraceArea: 1,
    roomCount: 1,
    bathroomCount: 1,
    toiletCount: 1,
    volume: 1,
    volumeNorm: 1,
    parking: 1,
    minergie: 1,
    isCoproperty: 1,
    isNew: 1,
    copropertyPercentage: 1,
    cityPlacementQuality: 1,
    buildingPlacementQuality: 1,
    buildingQuality: 1,
    flatQuality: 1,
    materialsQuality: 1,
    otherNotes: 1,
    pictures: 1,
    name: 1,
    latitude: 1,
    longitude: 1,
    nearestBusStation: 1,
    nearestTrainStation: 1,
    customFields: 1,
    adminValidation: 1,
    files: 1
  },
  borrowers: {
    firstName: 1,
    lastName: 1,
    gender: 1,
    address1: 1,
    zipCode: 1,
    city: 1,
    age: 1,
    birthPlace: 1,
    civilStatus: 1,
    childrenCount: 1,
    company: 1,
    personalBank: 1,
    isSwiss: 1,
    isUSPerson: 1,
    worksForOwnCompany: 1,
    sameAddress: 1,
    salary: 1,
    bonusExists: 1,
    bonus: 1,
    otherIncome: 1,
    expenses: 1,
    realEstate: 1,
    bankFortune: 1,
    insuranceSecondPillar: 1,
    insuranceThirdPillar: 1,
    files: 1,
    logic: 1,
    otherFortune: 1,
    corporateBankExists: 1,
    adminValidation: 1
  },
  tasks: {
    status: 1,
    createdAt: 1,
    updatedAt: 1,
    dueAt: 1,
    assignedUser: {
      emails: 1,
      roles: 1
    }
  }
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"adminLoansList.expose.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/queries/adminLoansList.expose.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var SecurityService = void 0;
module.watch(require("../../security"), {
  default: function _default(v) {
    SecurityService = v;
  }
}, 0);
var query = void 0;
module.watch(require("./adminLoansList"), {
  default: function _default(v) {
    query = v;
  }
}, 1);
query.expose({
  firewall: function firewall(userId) {
    SecurityService.checkCurrentUserIsAdmin();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"adminLoansList.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/queries/adminLoansList.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var Loans = void 0;
module.watch(require(".."), {
  default: function _default(v) {
    Loans = v;
  }
}, 0);

var _LOAN_QUERIES = void 0;

module.watch(require("../loanConstants"), {
  LOAN_QUERIES: function LOAN_QUERIES(v) {
    _LOAN_QUERIES = v;
  }
}, 1);
module.exportDefault(Loans.createQuery(_LOAN_QUERIES.ADMIN_LOANS, {
  $options: {
    sort: {
      createdAt: -1
    }
  },
  name: 1,
  logic: 1,
  general: 1,
  createdAt: 1,
  updatedAt: 1,
  property: {
    value: 1
  },
  borrowers: {
    firstName: 1
  }
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"exposures.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/queries/exposures.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./adminLoansList.expose"));
module.watch(require("./adminLoanView.expose"));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"server":{"methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/server/methods.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertLoan = undefined;

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _this = undefined;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  insertLoan: function insertLoan() {
    return _insertLoan;
  },
  updateLoan: function updateLoan() {
    return _updateLoan;
  },
  incrementStep: function incrementStep() {
    return _incrementStep;
  },
  startAuction: function startAuction() {
    return _startAuction;
  },
  pushLoanValue: function pushLoanValue() {
    return _pushLoanValue;
  },
  popLoanValue: function popLoanValue() {
    return _popLoanValue;
  },
  loanVerification: function loanVerification() {
    return _loanVerification;
  },
  deleteLoan: function deleteLoan() {
    return _deleteLoan;
  },
  endAuction: function endAuction() {
    return _endAuction;
  },
  cancelAuction: function cancelAuction() {
    return _cancelAuction;
  },
  confirmClosing: function confirmClosing() {
    return _confirmClosing;
  },
  addEmail: function addEmail() {
    return _addEmail;
  },
  modifyEmail: function modifyEmail() {
    return _modifyEmail;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _ValidatedMethod = void 0;

module.watch(require("meteor/mdg:validated-method"), {
  ValidatedMethod: function ValidatedMethod(v) {
    _ValidatedMethod = v;
  }
}, 1);

var _check = void 0,
    _Match = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  },
  Match: function Match(v) {
    _Match = v;
  }
}, 2);
var moment = void 0;
module.watch(require("moment"), {
  default: function _default(v) {
    moment = v;
  }
}, 3);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 4);

var _CallPromiseMixin = void 0;

module.watch(require("meteor/didericis:callpromise-mixin"), {
  CallPromiseMixin: function CallPromiseMixin(v) {
    _CallPromiseMixin = v;
  }
}, 5);
var rateLimit = void 0;
exports.insertLoan = _insertLoan;
module.watch(require("../../../utils/rate-limit.js"), {
  default: function _default(v) {
    rateLimit = v;
  }
}, 6);

var _getAuctionEndTime = void 0;

module.watch(require("../../../utils/loanFunctions"), {
  getAuctionEndTime: function getAuctionEndTime(v) {
    _getAuctionEndTime = v;
  }
}, 7);

var _insertAdminAction = void 0,
    _completeActionByType = void 0,
    _removeParentLoan = void 0;

module.watch(require("../../adminActions/server/methods"), {
  insertAdminAction: function insertAdminAction(v) {
    _insertAdminAction = v;
  },
  completeActionByType: function completeActionByType(v) {
    _completeActionByType = v;
  },
  removeParentLoan: function removeParentLoan(v) {
    _removeParentLoan = v;
  }
}, 8);
var Loans = void 0;
module.watch(require("../loans"), {
  default: function _default(v) {
    Loans = v;
  }
}, 9);

var _ADMIN_ACTION_TYPE = void 0,
    _ADMIN_ACTION_STATUS = void 0,
    _LOAN_STATUS = void 0,
    _AUCTION_STATUS = void 0;

module.watch(require("../../constants"), {
  ADMIN_ACTION_TYPE: function ADMIN_ACTION_TYPE(v) {
    _ADMIN_ACTION_TYPE = v;
  },
  ADMIN_ACTION_STATUS: function ADMIN_ACTION_STATUS(v) {
    _ADMIN_ACTION_STATUS = v;
  },
  LOAN_STATUS: function LOAN_STATUS(v) {
    _LOAN_STATUS = v;
  },
  AUCTION_STATUS: function AUCTION_STATUS(v) {
    _AUCTION_STATUS = v;
  }
}, 10);

var importServerMethods = function importServerMethods() {
  if (_Meteor.isServer || !!_this && !_this.isSimulation) {
    var _require = require("../../jobs/server/methods"),
        scheduleMethod = _require.scheduleMethod,
        rescheduleJob = _require.rescheduleJob;

    var _require2 = require("../../email/server/email-methods"),
        sendEmail = _require2.sendEmail,
        cancelScheduledEmail = _require2.cancelScheduledEmail,
        rescheduleEmail = _require2.rescheduleEmail;

    return {
      scheduleMethod: scheduleMethod,
      sendEmail: sendEmail,
      cancelScheduledEmail: cancelScheduledEmail,
      rescheduleEmail: rescheduleEmail
    };
  }
};

var _insertLoan = new _ValidatedMethod({
  name: 'insertLoan',
  mixins: [_CallPromiseMixin],
  validate: function validate() {},
  run: function run(_ref) {
    var object = _ref.object,
        userId = _ref.userId;
    // const loanCount = Loans.find({ userId: Meteor.userId() }).count();
    //
    // if (loanCount > 3) {
    //   throw new Meteor.Error(
    //     'maxLoans',
    //     'Vous ne pouvez pas avoir plus de 3 requêtes à la fois',
    //   );
    // }
    //
    // console.log(object);
    // Allow adding a userId for testing purposes
    return Loans.insert((0, _extends3.default)({}, object, {
      // Do this to allow userId to be null
      userId: userId === undefined ? _Meteor.userId() : userId
    }));
  }
}); // Lets you set an entire object in the document


var _updateLoan = new _ValidatedMethod({
  name: 'updateLoan',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref2) {
    var id = _ref2.id;

    _check(id, String);
  },
  run: function run(_ref3) {
    var object = _ref3.object,
        id = _ref3.id;
    return Loans.update(id, {
      $set: object
    });
  }
});

var _incrementStep = new _ValidatedMethod({
  name: 'incrementStep',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref4) {
    var id = _ref4.id;

    _check(id, String);
  },
  run: function run(_ref5) {
    var id = _ref5.id;
    var loan = Loans.findOne(id);
    var currentStep = loan.logic.step;
    return Loans.update(id, {
      $set: {
        'logic.step': currentStep + 1
      }
    });
  }
});

var _startAuction = new _ValidatedMethod({
  name: 'startAuction',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref6) {
    var id = _ref6.id,
        object = _ref6.object;

    _check(id, String);

    _check(object, _Match.Optional(Object));
  },
  run: function run(_ref7) {
    var object = _ref7.object,
        id = _ref7.id;
    var auctionEndTime = void 0; // object parameter only contains the isDemo value

    if (object.isDemo) {
      auctionEndTime = moment().add(30, 's').toDate();
      console.log("Temps de fin r\xE9el: " + _getAuctionEndTime(moment()));
    } else {
      auctionEndTime = _getAuctionEndTime(moment());
    }

    var auctionObject = {
      'logic.auction.status': _AUCTION_STATUS.STARTED,
      'logic.auction.startTime': moment().toDate(),
      'logic.auction.endTime': auctionEndTime
    };

    if (_Meteor.isServer) {
      var _importServerMethods = importServerMethods(),
          scheduleMethod = _importServerMethods.scheduleMethod,
          sendEmail = _importServerMethods.sendEmail;

      Loans.update(id, {
        $set: auctionObject
      });
      return _insertAdminAction.callPromise({
        loanId: id,
        type: _ADMIN_ACTION_TYPE.AUCTION,
        extra: {
          auctionEndTime: auctionEndTime
        }
      }).then(function () {
        return sendEmail.callPromise({
          emailId: 'auctionStarted',
          loanId: id,
          intlValues: {
            date: auctionEndTime
          }
        });
      }).then(function () {
        return scheduleMethod.callPromise({
          method: 'loans.endAuction',
          params: [{
            id: id
          }],
          date: auctionEndTime
        });
      }).then(function () {
        return 'success';
      }).catch(function (e) {
        throw e;
      });
    }
  }
});

var _pushLoanValue = new _ValidatedMethod({
  name: 'pushLoanValue',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref8) {
    var id = _ref8.id;

    _check(id, String);
  },
  run: function run(_ref9) {
    var object = _ref9.object,
        id = _ref9.id;
    var result = Loans.update(id, {
      $push: object
    });
    return result;
  }
});

var _popLoanValue = new _ValidatedMethod({
  name: 'popLoanValue',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref10) {
    var id = _ref10.id;

    _check(id, String);
  },
  run: function run(_ref11) {
    var object = _ref11.object,
        id = _ref11.id;
    return Loans.update(id, {
      $pop: object
    });
  }
});

var _loanVerification = new _ValidatedMethod({
  name: 'loanVerification',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref12) {
    var id = _ref12.id;

    _check(id, String);
  },
  run: function run(_ref13) {
    var id = _ref13.id;
    var loan = Loans.findOne(id);

    if (loan.logic.verification.requested) {
      // Don't do anything if this loan is already in requested mode
      return false;
    } // Insert an admin action and set the proper keys in the loan


    Loans.update(id, {
      $set: {
        'logic.verification.requested': true,
        'logic.verification.requestedTime': new Date()
      }
    }, function (err) {
      if (!err && _Meteor.isServer) {
        var _importServerMethods2 = importServerMethods(),
            scheduleMethod = _importServerMethods2.scheduleMethod,
            sendEmail = _importServerMethods2.sendEmail,
            cancelScheduledEmail = _importServerMethods2.cancelScheduledEmail,
            rescheduleEmail = _importServerMethods2.rescheduleEmail;

        sendEmail.call({
          emailId: 'verificationRequested',
          loanId: id
        });
      }
    });
    return _Meteor.wrapAsync(_insertAdminAction.call({
      type: _ADMIN_ACTION_TYPE.VERIFY,
      loanId: id
    }));
  }
});

var _deleteLoan = new _ValidatedMethod({
  name: 'deleteLoan',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref14) {
    var id = _ref14.id;

    _check(id, String);
  },
  run: function run(_ref15) {
    var id = _ref15.id;

    if (_Roles.userIsInRole(_Meteor.userId(), 'dev') || _Roles.userIsInRole(_Meteor.userId(), 'admin')) {
      return Loans.remove(id, function (err) {
        if (!err) {
          _removeParentLoan.call({
            loanId: id
          });
        }
      });
    }

    throw new _Meteor.Error('not authorized');
  }
});

var _endAuction = new _ValidatedMethod({
  name: 'endAuction',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref16) {
    var id = _ref16.id;

    _check(id, String);
  },
  run: function run(_ref17) {
    var id = _ref17.id;
    console.log('ending loan..');
    var loan = Loans.findOne(id); // This method is called in the future, so make sure that it isn't
    // executed again if this has already been done

    if (!loan || loan.logic.auction.status === _AUCTION_STATUS.ENDED) {
      return;
    }

    Loans.update(id, {
      $set: {
        'logic.auction.status': _AUCTION_STATUS.ENDED,
        'logic.auction.endTime': new Date()
      }
    });

    _completeActionByType.call({
      loanId: id,
      type: _ADMIN_ACTION_TYPE.AUCTION
    });

    if (_Meteor.isServer) {
      var _importServerMethods3 = importServerMethods(),
          scheduleMethod = _importServerMethods3.scheduleMethod,
          sendEmail = _importServerMethods3.sendEmail,
          cancelScheduledEmail = _importServerMethods3.cancelScheduledEmail,
          rescheduleEmail = _importServerMethods3.rescheduleEmail;

      var _loan = Loans.findOne(id);

      var email = _loan.emails.find(function (e) {
        return e && e.emailId === 'auctionEnded' && e.scheduledAt >= new Date();
      });

      if (email) {
        cancelScheduledEmail.call('email.cancelScheduled', {
          id: email._id,
          loanId: id,
          template: 'notification+CTA'
        });
      }
    }
  }
});

var _cancelAuction = new _ValidatedMethod({
  name: 'cancelAuction',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref18) {
    var id = _ref18.id;

    _check(id, String);
  },
  run: function run(_ref19) {
    var id = _ref19.id;

    if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
      return Loans.update(id, {
        $set: {
          'logic.auction.endTime': undefined,
          'logic.auction.status': '',
          'logic.auction.startTime': undefined
        }
      }, function (error) {
        if (!error && _Meteor.isServer) {
          var _importServerMethods4 = importServerMethods(),
              scheduleMethod = _importServerMethods4.scheduleMethod,
              sendEmail = _importServerMethods4.sendEmail,
              cancelScheduledEmail = _importServerMethods4.cancelScheduledEmail,
              rescheduleEmail = _importServerMethods4.rescheduleEmail;

          var loan = Loans.findOne(id);
          var email = loan.emails.find(function (e) {
            return e && e.emailId === 'auctionEnded' && e.scheduledAt >= new Date();
          });

          if (email) {
            cancelScheduledEmail.call('email.cancelScheduled', {
              id: email._id,
              loanId: id
            });
          }
        }

        _completeActionByType.call({
          loanId: id,
          type: _ADMIN_ACTION_TYPE.AUCTION,
          newStatus: _ADMIN_ACTION_STATUS.CANCELLED
        });
      });
    }

    throw new _Meteor.Error('not authorized');
  }
});

var _confirmClosing = new _ValidatedMethod({
  name: 'confirmClosing',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref20) {
    var id = _ref20.id;

    _check(id, String);
  },
  run: function run(_ref21) {
    var id = _ref21.id,
        object = _ref21.object;

    // TODO: Send email to user, clean up, etc.
    if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
      return Loans.update(id, {
        $set: (0, _extends3.default)({
          status: _LOAN_STATUS.DONE
        }, object)
      });
    }

    throw new _Meteor.Error('not authorized');
  }
});

var _addEmail = new _ValidatedMethod({
  name: 'addEmail',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref22) {
    var loanId = _ref22.loanId,
        emailId = _ref22.emailId,
        _id = _ref22._id,
        status = _ref22.status,
        sendAt = _ref22.sendAt;

    _check(loanId, String);

    _check(emailId, String);

    _check(_id, String);

    _check(status, String);

    _check(sendAt, _Match.Optional(Date));
  },
  run: function run(_ref23) {
    var loanId = _ref23.loanId,
        emailId = _ref23.emailId,
        _id = _ref23._id,
        status = _ref23.status,
        sendAt = _ref23.sendAt;
    var object = {
      emailId: emailId,
      _id: _id,
      status: status,
      updatedAt: new Date()
    };

    if (sendAt) {
      object.scheduledAt = sendAt;
    }

    return Loans.update(loanId, {
      $push: {
        emails: object
      }
    });
  }
});

var _modifyEmail = new _ValidatedMethod({
  name: 'modifyEmail',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref24) {
    var loanId = _ref24.loanId,
        _id = _ref24._id,
        status = _ref24.status,
        sendAt = _ref24.sendAt;

    _check(loanId, String);

    _check(_id, String);

    _check(status, _Match.Optional(String));

    _check(sendAt, _Match.Optional(Date));
  },
  run: function run(_ref25) {
    var loanId = _ref25.loanId,
        _id = _ref25._id,
        status = _ref25.status,
        sendAt = _ref25.sendAt;
    var object = {
      'emails.$.status': status,
      'emails.$.updatedAt': new Date()
    };

    if (sendAt) {
      object['emails.$.scheduledAt'] = sendAt;
    }

    return Loans.update({
      _id: loanId,
      'emails._id': _id
    }, {
      $set: object
    });
  }
});

rateLimit({
  methods: [_insertLoan, _updateLoan, _incrementStep, _startAuction, _pushLoanValue, _popLoanValue, _loanVerification, // deleteLoan,
  _cancelAuction, _confirmClosing, _addEmail, _modifyEmail]
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/server/mutations.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var SecurityService = void 0;
module.watch(require("../../security"), {
  default: function _default(v) {
    SecurityService = v;
  }
}, 1);

var _createMutator = void 0;

module.watch(require("../../mutations"), {
  createMutator: function createMutator(v) {
    _createMutator = v;
  }
}, 2);
var LoanService = void 0;
module.watch(require("../LoanService"), {
  default: function _default(v) {
    LoanService = v;
  }
}, 3);
var defs = void 0;
module.watch(require("../mutationDefinitions"), {
  "*": function _(v) {
    defs = v;
  }
}, 4);

_createMutator(defs.LOAN_INSERT, function (_ref) {
  var object = _ref.object,
      userId = _ref.userId;
  var userIdIsDefined = userId !== undefined;

  if (userIdIsDefined) {
    SecurityService.checkCurrentUserIsAdmin();
  } else {
    SecurityService.loans.isAllowedToInsert();
  }

  return LoanService.insert({
    object: object,
    userId: userIdIsDefined ? userId : _Meteor.userId()
  });
});

_createMutator(defs.LOAN_UPDATE, function (_ref2) {
  var loanId = _ref2.loanId,
      loan = _ref2.loan;
  SecurityService.loans.isAllowedToUpdate(loanId);
  return LoanService.update({
    loanId: loanId,
    loan: loan
  });
});

_createMutator(defs.LOAN_DELETE, function (_ref3) {
  var loanId = _ref3.loanId;
  SecurityService.loans.isAllowedToDelete(loanId);
  return LoanService.delete({
    loanId: loanId
  });
});

_createMutator(defs.INCREMENT_LOAN_STEP, function (_ref4) {
  var loanId = _ref4.loanId;
  SecurityService.loans.isAllowedToUpdate(loanId);
  return LoanService.incrementStep({
    loanId: loanId
  });
});

_createMutator(defs.REQUEST_LOAN_VERIFICATION, function (_ref5) {
  var loanId = _ref5.loanId;
  SecurityService.loans.isAllowedToUpdate(loanId);
  return LoanService.askVerification({
    loanId: loanId
  });
});

_createMutator(defs.START_AUCTION, function (_ref6) {
  var loanId = _ref6.loanId;
  SecurityService.loans.isAllowedToUpdate(loanId);
  return LoanService.startAuction({
    loanId: loanId
  });
});

_createMutator(defs.END_AUCTION, function (_ref7) {
  var loanId = _ref7.loanId;
  SecurityService.checkCurrentUserIsAdmin();
  return LoanService.startAuction({
    loanId: loanId
  });
});

_createMutator(defs.CANCEL_AUCTION, function (_ref8) {
  var loanId = _ref8.loanId;
  SecurityService.checkCurrentUserIsAdmin();
  return LoanService.startAuction({
    loanId: loanId
  });
});

_createMutator(defs.CONFIRM_CLOSING, function (_ref9) {
  var loanId = _ref9.loanId,
      object = _ref9.object;
  SecurityService.checkCurrentUserIsAdmin();
  return LoanService.confirmClosing({
    loanId: loanId,
    object: object
  });
});

_createMutator(defs.LOAN_CHANGE_ADMIN_NOTE, function (_ref10) {
  var loanId = _ref10.loanId,
      adminNote = _ref10.adminNote;
  SecurityService.checkCurrentUserIsAdmin();
  return LoanService.update({
    loanId: loanId,
    loan: {
      adminNote: adminNote
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publications.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/server/publications.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _this = undefined;

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 1);
var Loans = void 0;
module.watch(require("../loans"), {
  default: function _default(v) {
    Loans = v;
  }
}, 2);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 3);

// Publish a specific loan with an ID
_Meteor.publish('loan', function publish(id) {
  // Verify if user is logged In
  if (!_Meteor.userId()) {
    return this.ready();
  }

  _check(id, String);

  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    return Loans.find({
      _id: id
    });
  }

  return Loans.find({
    userId: _Meteor.userId(),
    _id: id
  }); // Throw unauthorized error
}); // Publish all loans from the current user


_Meteor.publish('loans', function publish() {
  // Verify if user is logged In
  if (!_Meteor.userId()) {
    return this.ready();
  }

  return Loans.find({
    userId: _Meteor.userId()
  });
}); // Publish all loans for a user


_Meteor.publish('userLoans', function (userId) {
  _check(userId, String); // Verify if user is logged In


  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    // Return all users
    return Loans.find({
      userId: userId
    });
  }

  return _this.ready();
}); // Publish all loans in the database for admins


_Meteor.publish('allLoans', function publish() {
  // Verify if user is logged In
  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    // Return all users
    return Loans.find();
  }

  return this.ready();
}); // The fields visible to partners


var partnerVisibleFields = function partnerVisibleFields(organization) {
  return {
    // TODO: Complete this
    'general.purchaseType': 1,
    'general.usageType': 1,
    'general.fortuneUsed': 1,
    'general.insuranceFortuneUsed': 1,
    'general.incomeUsed': 1,
    'borrowers.age': 1,
    'borrowers.gender': 1,
    'borrowers.birthDate': 1,
    'borrowers.grossIncome': 1,
    'borrowers.bonusExists': 1,
    'borrowers.bonus': 1,
    'borrowers.otherIncome': 1,
    'borrowers.currentRentExists': 1,
    'borrowers.currentRent': 1,
    'borrowers.realEstateFortune': 1,
    'borrowers.cashAndSecurities': 1,
    'borrowers.existingDebt': 1,
    'borrowers.otherFortune': 1,
    'borrowers.insuranceLpp': 1,
    'borrowers.insurance3A': 1,
    'borrowers.insurance3B': 1,
    'borrowers.insurancePureRisk': 1,
    property: 1,
    // partnerOffers: {
    //   $elemMatch: { $eq: { name: organization } },
    // },
    'logic.step': 1,
    'logic.uploadTaxesLater': 1,
    'logic.auction.status': 1,
    'logic.auction.startTime': 1,
    'logic.auction.endTime': 1
  };
}; // Publish all loans this partner has access to


_Meteor.publish('partnerLoansAuction', function publish() {
  if (_Roles.userIsInRole(_Meteor.userId(), 'partner')) {
    var user = _Meteor.users.findOne(_Meteor.userId()); // Show loans where the canton matches this partner's cantons
    // and the auction has started
    // and the auctionEndTime is greater than this date
    // and this partner's organization is not in the partnersToAvoid


    return Loans.find({
      $and: [{
        'general.canton': {
          $in: user.profile.cantons
        }
      }, {
        'logic.auction.status': 'started'
      }, {
        $or: [{
          'general.partnersToAvoidExists': false
        }, {
          'general.partnersToAvoid.0': {
            $ne: user.profile.organization
          }
        }]
      }]
    }, {
      fields: partnerVisibleFields(user.profile.organization)
    });
  }

  return this.ready();
}); // Publish all loans this partner has access to


_Meteor.publish('partnerLoansCompleted', function publish() {
  if (_Roles.userIsInRole(_Meteor.userId(), 'partner')) {
    // Get the current partner user
    var user = _Meteor.users.findOne(_Meteor.userId()); // Return the loans where this partner has been selected


    return Loans.find({
      'general.selectedPartner': user.profile.organization
    }, {
      fields: partnerVisibleFields(user.profile.organization)
    });
  }

  return this.ready();
}); // Publish the loan with a specific ID, and only show the fields for an anonymous offer


_Meteor.publish('partnerSingleLoan', function publish(id) {
  _check(id, String); // Verify if this is a partner account


  if (_Roles.userIsInRole(_Meteor.userId(), 'partner')) {
    var user = _Meteor.users.findOne(_Meteor.userId());

    return Loans.find({
      $and: [{
        _id: id
      }, {
        'general.canton': {
          $in: user.profile.cantons
        }
      }, {
        'logic.auction.status': 'started'
      }, {
        $or: [{
          'general.partnersToAvoidExists': false
        }, {
          'general.partnersToAvoid.0': {
            $ne: user.profile.organization
          }
        }]
      }]
    }, {
      fields: partnerVisibleFields(user.profile.organization)
    });
  }

  return this.ready();
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"LoanService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/LoanService.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  LoanServiceModel: function LoanServiceModel() {
    return _LoanServiceModel;
  }
});
var moment = void 0;
module.watch(require("moment"), {
  default: function _default(v) {
    moment = v;
  }
}, 0);
var Loans = void 0;
module.watch(require("../loans"), {
  default: function _default(v) {
    Loans = v;
  }
}, 1);

var _LOAN_STATUS = void 0,
    _AUCTION_STATUS = void 0;

module.watch(require("../constants"), {
  LOAN_STATUS: function LOAN_STATUS(v) {
    _LOAN_STATUS = v;
  },
  AUCTION_STATUS: function AUCTION_STATUS(v) {
    _AUCTION_STATUS = v;
  }
}, 2);

var _getAuctionEndTime = void 0;

module.watch(require("../../utils/loanFunctions"), {
  getAuctionEndTime: function getAuctionEndTime(v) {
    _getAuctionEndTime = v;
  }
}, 3);

var _LoanServiceModel = function _LoanServiceModel() {
  var _this = this;

  (0, _classCallCheck3.default)(this, _LoanServiceModel);

  this.insert = function (_ref) {
    var loan = _ref.loan,
        userId = _ref.userId;
    return Loans.insert((0, _extends3.default)({}, loan, {
      // Do this to allow userId to be null
      userId: userId
    }));
  };

  this.update = function (_ref2) {
    var loanId = _ref2.loanId,
        loan = _ref2.loan;
    return Loans.update(loanId, {
      $set: loan
    });
  };

  this.remove = function (_ref3) {
    var loanId = _ref3.loanId;
    return Loans.remove(loanId);
  };

  this.incrementStep = function (_ref4) {
    var loanId = _ref4.loanId;
    return Loans.update(loanId, {
      $inc: {
        'logic.step': 1
      }
    });
  };

  this.askVerification = function (_ref5) {
    var loanId = _ref5.loanId;
    var loan = Loans.findOne(loanId);

    if (loan.logic.verification.requested) {
      // Don't do anything if this loan is already in requested mode
      return false;
    }

    return Loans.update(loanId, {
      $set: {
        'logic.verification.requested': true,
        'logic.verification.requestedTime': new Date()
      }
    });
  };

  this.startAuction = function (_ref6) {
    var loanId = _ref6.loanId;
    var loan = Loans.findOne(loanId);

    if (loan.logic.auction.status !== _AUCTION_STATUS.NONE) {
      // Don't do anything if this auction has already started or ended
      return false;
    }

    return Loans.update(loanId, {
      $set: {
        'logic.auction.status': _AUCTION_STATUS.STARTED,
        'logic.auction.startTime': moment().toDate(),
        'logic.auction.endTime': _getAuctionEndTime(moment())
      }
    });
  };

  this.endAuction = function (_ref7) {
    var loanId = _ref7.loanId;
    var loan = Loans.findOne(loanId); // This method is called in the future (through a job),
    // so only call this if the auction is ongoing

    if (!loan || loan.logic.auction.status !== _AUCTION_STATUS.STARTED) {
      return false;
    }

    return Loans.update(id, {
      $set: {
        'logic.auction.status': _AUCTION_STATUS.ENDED,
        'logic.auction.endTime': new Date()
      }
    });
  };

  this.cancelAuction = function (_ref8) {
    var loanId = _ref8.loanId;
    return _this.update(loanId, {
      $set: {
        'logic.auction.endTime': undefined,
        'logic.auction.status': '',
        'logic.auction.startTime': undefined
      }
    });
  };

  this.confirmClosing = function (_ref9) {
    var loanId = _ref9.loanId,
        object = _ref9.object;
    return Loans.update(loanId, {
      $set: (0, _extends3.default)({
        status: _LOAN_STATUS.DONE
      }, object)
    });
  };
} // TODO: make sure step is really done
;

var LoanService = new _LoanServiceModel({});
module.exportDefault(LoanService);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"additionalSchemas.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/additionalSchemas.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  GeneralSchema: function GeneralSchema() {
    return _GeneralSchema;
  },
  LogicSchema: function LogicSchema() {
    return _LogicSchema;
  }
});
var SimpleSchema = void 0;
module.watch(require("simpl-schema"), {
  default: function _default(v) {
    SimpleSchema = v;
  }
}, 0);
exports.GeneralSchema = _GeneralSchema;

var _PURCHASE_TYPE = void 0,
    _INTEREST_RATES = void 0,
    _OWNER = void 0,
    _CANTONS = void 0,
    _AUCTION_STATUS = void 0,
    _OFFER_TYPE = void 0,
    _CLOSING_STEPS_TYPE = void 0,
    _CLOSING_STEPS_STATUS = void 0,
    _AUCTION_MOST_IMPORTANT = void 0,
    _INSURANCE_USE_PRESET = void 0,
    _LOAN_STRATEGY_PRESET = void 0,
    _AMORTIZATION_STRATEGY_PRESET = void 0,
    _PAYMENT_SCHEDULES = void 0,
    _GENDER = void 0,
    _USAGE_TYPE = void 0;

module.watch(require("../constants"), {
  PURCHASE_TYPE: function PURCHASE_TYPE(v) {
    _PURCHASE_TYPE = v;
  },
  INTEREST_RATES: function INTEREST_RATES(v) {
    _INTEREST_RATES = v;
  },
  OWNER: function OWNER(v) {
    _OWNER = v;
  },
  CANTONS: function CANTONS(v) {
    _CANTONS = v;
  },
  AUCTION_STATUS: function AUCTION_STATUS(v) {
    _AUCTION_STATUS = v;
  },
  OFFER_TYPE: function OFFER_TYPE(v) {
    _OFFER_TYPE = v;
  },
  CLOSING_STEPS_TYPE: function CLOSING_STEPS_TYPE(v) {
    _CLOSING_STEPS_TYPE = v;
  },
  CLOSING_STEPS_STATUS: function CLOSING_STEPS_STATUS(v) {
    _CLOSING_STEPS_STATUS = v;
  },
  AUCTION_MOST_IMPORTANT: function AUCTION_MOST_IMPORTANT(v) {
    _AUCTION_MOST_IMPORTANT = v;
  },
  INSURANCE_USE_PRESET: function INSURANCE_USE_PRESET(v) {
    _INSURANCE_USE_PRESET = v;
  },
  LOAN_STRATEGY_PRESET: function LOAN_STRATEGY_PRESET(v) {
    _LOAN_STRATEGY_PRESET = v;
  },
  AMORTIZATION_STRATEGY_PRESET: function AMORTIZATION_STRATEGY_PRESET(v) {
    _AMORTIZATION_STRATEGY_PRESET = v;
  },
  PAYMENT_SCHEDULES: function PAYMENT_SCHEDULES(v) {
    _PAYMENT_SCHEDULES = v;
  },
  GENDER: function GENDER(v) {
    _GENDER = v;
  },
  USAGE_TYPE: function USAGE_TYPE(v) {
    _USAGE_TYPE = v;
  }
}, 1);

var _GeneralSchema = new SimpleSchema({
  purchaseType: {
    type: String,
    defaultValue: _PURCHASE_TYPE.ACQUISITION,
    allowedValues: Object.values(_PURCHASE_TYPE)
  },
  usageType: {
    type: String,
    defaultValue: _USAGE_TYPE.PRIMARY,
    allowedValues: Object.values(_USAGE_TYPE)
  },
  fortuneUsed: {
    type: Number,
    min: 0,
    max: 100000000,
    defaultValue: 0
  },
  insuranceFortuneUsed: {
    type: Number,
    min: 0,
    max: 100000000,
    optional: true
  },
  propertyWork: {
    type: Number,
    min: 0,
    max: 100000000,
    defaultValue: 0
  },
  oldestAge: {
    type: SimpleSchema.Integer,
    optional: true,
    min: 18,
    max: 120
  },
  oldestGender: {
    type: String,
    optional: true,
    allowedValues: Object.values(_GENDER)
  },
  partnersToAvoidExists: {
    type: Boolean,
    defaultValue: false
  },
  partnersToAvoid: {
    type: Array,
    defaultValue: []
  },
  'partnersToAvoid.$': String,
  selectedPartner: {
    type: String,
    optional: true
  },
  canton: {
    type: String,
    optional: true,
    allowedValues: Object.keys(_CANTONS)
  },
  loanTranches: {
    type: Array,
    // minCount: 1,
    defaultValue: [{
      type: _INTEREST_RATES.LIBOR,
      value: 100000
    }]
  },
  'loanTranches.$': Object,
  'loanTranches.$.type': {
    type: String,
    optional: true,
    allowedValues: Object.values(_INTEREST_RATES)
  },
  'loanTranches.$.value': {
    type: Number,
    optional: true,
    min: 0,
    max: 100000000
  },
  currentOwner: {
    type: String,
    defaultValue: _OWNER.FIRST,
    allowedValues: Object.values(_OWNER)
  },
  futureOwner: {
    type: String,
    defaultValue: _OWNER.FIRST,
    allowedValues: Object.values(_OWNER)
  },
  otherOwner: {
    type: String,
    optional: true
  },
  wantedClosingDate: {
    type: Date,
    optional: true
  },
  auctionMostImportant: {
    type: String,
    optional: true,
    allowedValues: Object.values(_AUCTION_MOST_IMPORTANT)
  }
}); // All logic fields required by the app to trigger the right things at the right time


var _LogicSchema = new SimpleSchema({
  step: {
    type: Number,
    defaultValue: 1,
    min: 1,
    max: 5
  },
  verification: {
    type: Object,
    defaultValue: {}
  },
  'verification.requested': {
    type: Boolean,
    optional: true
  },
  'verification.requestedTime': {
    type: Date,
    optional: true
  },
  'verification.validated': {
    type: Boolean,
    optional: true
  },
  'verification.comments': {
    type: Array,
    defaultValue: []
  },
  'verification.comments.$': String,
  expertiseRequired: {
    type: Boolean,
    defaultValue: true
  },
  expertiseDone: {
    type: Boolean,
    defaultValue: false
  },
  expertiseValid: {
    type: Boolean,
    defaultValue: false
  },
  auction: {
    type: Object,
    defaultValue: {}
  },
  'auction.status': {
    type: String,
    optional: true,
    defaultValue: _AUCTION_STATUS.NONE,
    allowedValues: Object.values(_AUCTION_STATUS)
  },
  'auction.startTime': {
    type: Date,
    optional: true
  },
  'auction.endTime': {
    type: Date,
    optional: true
  },
  hasValidatedStructure: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  insuranceUsePreset: {
    type: String,
    // defaultValue: '',
    optional: true,
    allowedValues: Object.values(_INSURANCE_USE_PRESET)
  },
  loanStrategyPreset: {
    type: String,
    // defaultValue: '',
    optional: true,
    allowedValues: Object.values(_LOAN_STRATEGY_PRESET)
  },
  amortizationStrategyPreset: {
    type: String,
    // defaultValue: '',
    optional: true,
    allowedValues: Object.values(_AMORTIZATION_STRATEGY_PRESET)
  },
  lender: {
    type: Object,
    defaultValue: {}
  },
  'lender.type': {
    type: String,
    optional: true,
    allowedValues: Object.values(_OFFER_TYPE)
  },
  'lender.offerId': {
    type: String,
    optional: true
  },
  'lender.chosenTime': {
    type: Date,
    optional: true
  },
  'lender.contacted': {
    type: Boolean,
    defaultValue: false
  },
  'lender.nextSteps': {
    type: Array,
    defaultValue: []
  },
  'lender.nextSteps.$': String,
  'lender.contractRequested': {
    type: Boolean,
    defaultValue: false
  },
  'lender.contractLoanSent': {
    type: Boolean,
    defaultValue: false
  },
  'lender.contract': {
    type: String,
    defaultValue: '',
    optional: true
  },
  acceptedClosing: {
    type: Boolean,
    defaultValue: false
  },
  recommendationCode: {
    type: String,
    defaultValue: '',
    optional: true
  },
  firstPaymentDate: {
    type: Date,
    optional: true
  },
  paymentSchedule: {
    type: String,
    optional: true,
    allowedValues: Object.values(_PAYMENT_SCHEDULES)
  },
  closingSteps: {
    type: Array,
    defaultValue: []
  },
  'closingSteps.$': Object,
  'closingSteps.$.id': String,
  'closingSteps.$.type': {
    type: String,
    allowedValues: Object.values(_CLOSING_STEPS_TYPE)
  },
  'closingSteps.$.title': String,
  'closingSteps.$.description': {
    type: String,
    optional: true
  },
  'closingSteps.$.status': {
    type: String,
    optional: true,
    allowedValues: Object.values(_CLOSING_STEPS_STATUS)
  },
  'closingSteps.$.error': {
    type: String,
    optional: true
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  loanMutations: function loanMutations() {
    return _loanMutations;
  }
});
module.watch(require("./loans"), {
  default: function _default(v) {
    exports.default = v;
  }
}, 1);
var mutations = void 0;
exports.loanMutations = _loanMutations;
module.watch(require("./mutationDefinitions"), {
  "*": function _(v) {
    mutations = v;
  }
}, 0);
var _loanMutations = mutations;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"links.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/links.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Loans = void 0,
    _Properties = void 0,
    _Borrowers = void 0,
    _Users = void 0,
    _Tasks = void 0;

module.watch(require("../"), {
  Loans: function Loans(v) {
    _Loans = v;
  },
  Properties: function Properties(v) {
    _Properties = v;
  },
  Borrowers: function Borrowers(v) {
    _Borrowers = v;
  },
  Users: function Users(v) {
    _Users = v;
  },
  Tasks: function Tasks(v) {
    _Tasks = v;
  }
}, 0);

_Loans.addLinks({
  property: {
    field: 'propertyId',
    collection: _Properties,
    type: 'one'
  },
  borrowers: {
    field: 'borrowerIds',
    collection: _Borrowers,
    type: 'many'
  },
  user: {
    field: 'userId',
    collection: _Users,
    type: 'one'
  },
  tasks: {
    collection: _Tasks,
    inversedBy: 'loan'
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"loanConstants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/loanConstants.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  LOAN_STATUS: function LOAN_STATUS() {
    return _LOAN_STATUS;
  },
  PURCHASE_TYPE: function PURCHASE_TYPE() {
    return _PURCHASE_TYPE;
  },
  CANTONS: function CANTONS() {
    return _CANTONS;
  },
  INTEREST_RATES: function INTEREST_RATES() {
    return _INTEREST_RATES;
  },
  OWNER: function OWNER() {
    return _OWNER;
  },
  AUCTION_STATUS: function AUCTION_STATUS() {
    return _AUCTION_STATUS;
  },
  CLOSING_STEPS_TYPE: function CLOSING_STEPS_TYPE() {
    return _CLOSING_STEPS_TYPE;
  },
  CLOSING_STEPS_STATUS: function CLOSING_STEPS_STATUS() {
    return _CLOSING_STEPS_STATUS;
  },
  AUCTION_MOST_IMPORTANT: function AUCTION_MOST_IMPORTANT() {
    return _AUCTION_MOST_IMPORTANT;
  },
  INSURANCE_USE_PRESET: function INSURANCE_USE_PRESET() {
    return _INSURANCE_USE_PRESET;
  },
  LOAN_STRATEGY_PRESET: function LOAN_STRATEGY_PRESET() {
    return _LOAN_STRATEGY_PRESET;
  },
  AMORTIZATION_STRATEGY_PRESET: function AMORTIZATION_STRATEGY_PRESET() {
    return _AMORTIZATION_STRATEGY_PRESET;
  },
  PAYMENT_SCHEDULES: function PAYMENT_SCHEDULES() {
    return _PAYMENT_SCHEDULES;
  },
  LOAN_QUERIES: function LOAN_QUERIES() {
    return _LOAN_QUERIES;
  }
});
exports.LOAN_STATUS = _LOAN_STATUS;
var _LOAN_STATUS = {
  ACTIVE: 'ACTIVE',
  DONE: 'DONE'
};
var _PURCHASE_TYPE = {
  ACQUISITION: 'ACQUISITION',
  REFINANCING: 'REFINANCING',
  CONSTRUCTION: 'CONSTRUCTION'
};
var _CANTONS = {
  AG: 'Aargau',
  AR: 'Appenzell Ausserrhoden',
  AI: 'Appenzell Innerrhoden',
  BL: 'Basel-Land',
  BS: 'Basel-Stadt',
  BE: 'Bern',
  FR: 'Fribourg',
  GE: 'Genève',
  GL: 'Glarus',
  GR: 'Graubünden',
  JU: 'Jura',
  LU: 'Luzern',
  NE: 'Neuchâtel',
  NW: 'Nidwalden',
  OW: 'Obwalden',
  SG: 'St. Gallen',
  SH: 'Schaffhausen',
  SZ: 'Schwyz',
  SO: 'Solothurn',
  TG: 'Thurgau',
  TI: 'Ticino',
  UR: 'Uri',
  VD: 'Vaud',
  VS: 'Valais',
  ZG: 'Zug',
  ZH: 'Zürich'
};
var _INTEREST_RATES = {
  LIBOR: 'interestLibor',
  YEARS_1: 'interest1',
  YEARS_2: 'interest2',
  YEARS_5: 'interest5',
  YEARS_10: 'interest10',
  YEARS_15: 'interest15'
};
var _OWNER = {
  FIRST: '0',
  SECOND: '1',
  BOTH: 'BOTH',
  OTHER: 'OTHER'
};
var _AUCTION_STATUS = {
  NONE: '',
  STARTED: 'STARTED',
  ENDED: 'ENDED'
};
var _CLOSING_STEPS_TYPE = {
  TODO: 'TODO',
  UPLOAD: 'UPLOAD'
};
var _CLOSING_STEPS_STATUS = {
  UNVERIFIED: 'UNVERIFIED',
  VALID: 'VALID',
  ERROR: 'ERROR'
};
var _AUCTION_MOST_IMPORTANT = {
  SPEED: 'SPEED',
  PRICE: 'PRICE',
  NOTHING: 'NOTHING'
};
var _INSURANCE_USE_PRESET = {
  WITHDRAWAL: 'WITHDRAWAL',
  COLLATERAL: 'COLLATERAL'
};
var _LOAN_STRATEGY_PRESET = {
  FIXED: 'FIXED',
  MANUAL: 'MANUAL'
};
var _AMORTIZATION_STRATEGY_PRESET = {
  INDIRECT: 'INDIRECT',
  DIRECT: 'DIRECT'
};
var _PAYMENT_SCHEDULES = {
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY',
  SEMESTERLY: 'SEMESTERLY'
};
var _LOAN_QUERIES = {
  ADMIN_LOAN: 'ADMIN_LOAN',
  ADMIN_LOANS: 'ADMIN_LOANS'
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"loans.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/loans.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Mongo = void 0;

module.watch(require("meteor/mongo"), {
  Mongo: function Mongo(v) {
    _Mongo = v;
  }
}, 0);
var SimpleSchema = void 0;
module.watch(require("simpl-schema"), {
  default: function _default(v) {
    SimpleSchema = v;
  }
}, 1);

var _getFileSchema = void 0;

module.watch(require("../files/files"), {
  getFileSchema: function getFileSchema(v) {
    _getFileSchema = v;
  }
}, 2);

var _GeneralSchema = void 0,
    _PropertySchema = void 0,
    _LogicSchema = void 0;

module.watch(require("./additionalSchemas"), {
  GeneralSchema: function GeneralSchema(v) {
    _GeneralSchema = v;
  },
  PropertySchema: function PropertySchema(v) {
    _PropertySchema = v;
  },
  LogicSchema: function LogicSchema(v) {
    _LogicSchema = v;
  }
}, 3);

var _LOAN_STATUS = void 0;

module.watch(require("./loanConstants"), {
  LOAN_STATUS: function LOAN_STATUS(v) {
    _LOAN_STATUS = v;
  }
}, 4);
var Loans = new _Mongo.Collection('loans');
var LoanFilesSchema = new SimpleSchema(_getFileSchema('loan')); // Prevent all client side modifications of mongoDB

Loans.deny({
  insert: function insert() {
    return true;
  },
  update: function update() {
    return true;
  },
  remove: function remove() {
    return true;
  }
});
Loans.allow({
  insert: function insert() {
    return true;
  },
  update: function update() {
    return false;
  },
  remove: function remove() {
    return false;
  }
}); // Documentation is in the google drive dev/MongoDB Schemas

var LoanSchema = new SimpleSchema({
  userId: {
    type: String,
    optional: true
  },
  createdAt: {
    type: Date,
    autoValue: function autoValue() {
      if (this.isInsert) {
        return new Date();
      }
    }
  },
  updatedAt: {
    type: Date,
    autoValue: function autoValue() {
      // Verify the update is from the user owning this doc, ignoring admin/partner updates
      var doc = Loans.findOne({
        _id: this.docId
      }, {
        fields: {
          userId: 1
        }
      });

      if (this.isInsert) {
        return new Date();
      } else if (this.isUpdate && doc && this.userId === doc.userId) {
        return new Date();
      }
    }
  },
  status: {
    type: String,
    defaultValue: _LOAN_STATUS.ACTIVE,
    allowedValues: Object.values(_LOAN_STATUS)
  },
  name: {
    type: String,
    optional: true,
    defaultValue: ''
  },
  general: {
    type: _GeneralSchema,
    defaultValue: {}
  },
  borrowerIds: {
    type: Array,
    defaultValue: []
  },
  'borrowerIds.$': String,
  // property: PropertySchema,
  propertyId: {
    type: String
  },
  files: {
    type: LoanFilesSchema,
    defaultValue: {}
  },
  logic: {
    type: _LogicSchema,
    defaultValue: {}
  },
  adminValidation: {
    type: Object,
    defaultValue: {},
    blackbox: true
  },
  adminNote: {
    type: String,
    defaultValue: '',
    optional: true
  },
  emails: {
    type: Array,
    defaultValue: []
  },
  'emails.$': Object,
  'emails.$._id': String,
  'emails.$.emailId': String,
  'emails.$.status': String,
  'emails.$.updatedAt': Date,
  'emails.$.scheduledAt': {
    type: Date,
    optional: true
  }
}); // Finally, attach schema to the Mongo collection and export

Loans.attachSchema(LoanSchema);
module.exportDefault(Loans);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutationDefinitions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/mutationDefinitions.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  LOAN_INSERT: function LOAN_INSERT() {
    return _LOAN_INSERT;
  },
  LOAN_UPDATE: function LOAN_UPDATE() {
    return _LOAN_UPDATE;
  },
  LOAN_DELETE: function LOAN_DELETE() {
    return _LOAN_DELETE;
  },
  INCREMENT_LOAN_STEP: function INCREMENT_LOAN_STEP() {
    return _INCREMENT_LOAN_STEP;
  },
  REQUEST_LOAN_VERIFICATION: function REQUEST_LOAN_VERIFICATION() {
    return _REQUEST_LOAN_VERIFICATION;
  },
  START_AUCTION: function START_AUCTION() {
    return _START_AUCTION;
  },
  END_AUCTION: function END_AUCTION() {
    return _END_AUCTION;
  },
  CANCEL_AUCTION: function CANCEL_AUCTION() {
    return _CANCEL_AUCTION;
  },
  CONFIRM_CLOSING: function CONFIRM_CLOSING() {
    return _CONFIRM_CLOSING;
  },
  LOAN_CHANGE_ADMIN_NOTE: function LOAN_CHANGE_ADMIN_NOTE() {
    return _LOAN_CHANGE_ADMIN_NOTE;
  }
});
exports.LOAN_INSERT = _LOAN_INSERT;
var _LOAN_INSERT = {
  name: 'LOAN_INSERT',
  params: {
    loan: {
      type: Object
    },
    userId: {
      type: String,
      optional: true
    }
  }
};
var _LOAN_UPDATE = {
  name: 'LOAN_UPDATE',
  params: {
    loanId: {
      type: String
    },
    loan: {
      type: Object
    }
  }
};
var _LOAN_DELETE = {
  name: 'LOAN_DELETE',
  params: {
    loanId: {
      type: String
    }
  }
};
var _INCREMENT_LOAN_STEP = {
  name: 'INCREMENT_LOAN_STEP',
  params: {
    loanId: {
      type: String
    }
  }
};
var _REQUEST_LOAN_VERIFICATION = {
  name: 'REQUEST_LOAN_VERIFICATION',
  params: {
    loanId: {
      type: String
    }
  }
};
var _START_AUCTION = {
  name: 'START_AUCTION',
  params: {
    loanId: {
      type: String
    }
  }
};
var _END_AUCTION = {
  name: 'END_AUCTION',
  params: {
    loanId: {
      type: String
    }
  }
};
var _CANCEL_AUCTION = {
  name: 'CANCEL_AUCTION',
  params: {
    loanId: {
      type: String
    }
  }
};
var _CONFIRM_CLOSING = {
  name: 'CONFIRM_CLOSING',
  params: {
    loanId: {
      type: String
    },
    object: {
      type: Object
    }
  }
};
var _LOAN_CHANGE_ADMIN_NOTE = {
  name: 'LOAN_CHANGE_ADMIN_NOTE',
  params: {
    loanId: {
      type: String
    },
    adminNote: {
      type: String
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"pdf.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/loans/pdf.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  AnonymousLoanPDF: function AnonymousLoanPDF() {
    return _AnonymousLoanPDF;
  },
  LoanPDF: function LoanPDF() {
    return _LoanPDF;
  }
});
var React = void 0;
module.watch(require("react"), {
  default: function _default(v) {
    React = v;
  }
}, 0);
exports.AnonymousLoanPDF = _AnonymousLoanPDF;
var InlineCss = void 0;
module.watch(require("react-inline-css"), {
  default: function _default(v) {
    InlineCss = v;
  }
}, 1);

var _AnonymousLoanPDF = function _AnonymousLoanPDF(loan, borrowers) {
  return React.createElement(
    InlineCss,
    {
      stylesheet: "\n      .Document {\n        font-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n      }\n\n      h1 {\n        color: red;\n      }"
    },
    React.createElement(
      "div",
      {
        className: "Document"
      },
      React.createElement(
        "h1",
        null,
        "Hello Yannis! (Anonymis\xE9)"
      )
    )
  );
};

var _LoanPDF = function _LoanPDF(loan, borrowers) {
  return React.createElement(
    InlineCss,
    {
      stylesheet: "\n      .Document {\n        font-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n      }\n\n      h1 {\n        color: red;\n      }"
    },
    React.createElement(
      "div",
      {
        className: "Document"
      },
      React.createElement(
        "h1",
        null,
        "Hello Yannis!"
      )
    )
  );
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"server":{"compoundMethods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/methods/server/compoundMethods.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 1);
var Loans = void 0;
module.watch(require("../../loans/loans"), {
  default: function _default(v) {
    Loans = v;
  }
}, 2);
var Borrowers = void 0;
module.watch(require("../../borrowers/borrowers"), {
  default: function _default(v) {
    Borrowers = v;
  }
}, 3);

_Meteor.methods({
  setUserToLoan: function setUserToLoan(_ref) {
    var loanId = _ref.loanId;

    _check(loanId, String);

    if (!_Meteor.userId()) {
      throw new _Meteor.Error('not authorized');
    }

    var loan = Loans.findOne(loanId);
    var borrowers = loan.borrowers;
    Loans.update(loanId, {
      $set: {
        userId: _Meteor.userId()
      }
    });
    borrowers.forEach(function (borrowerId) {
      Borrowers.update(borrowerId, {
        $set: {
          userId: _Meteor.userId()
        }
      });
    });
    return true;
  },
  addBorrower: function addBorrower(_ref2) {
    var loanId = _ref2.loanId;
    // TODO: Secure this
    var loan = Loans.findOne(loanId); // A loan can't have more than 2 borrowers at the moment

    if (loan.borrowerIds.length >= 2) {
      return false;
    }

    var newBorrowerId = Borrowers.insert({
      userId: _Meteor.userId()
    });
    return Loans.update(loanId, {
      $push: {
        borrowerIds: newBorrowerId
      }
    });
  },
  removeBorrower: function removeBorrower(_ref3) {
    var loanId = _ref3.loanId,
        borrowerId = _ref3.borrowerId;
    // TODO: Secure this
    var loan = Loans.findOne(loanId); // A loan has to have at least 1 borrower

    if (loan.borrowerIds.length <= 1) {
      return false;
    }

    Borrowers.remove(borrowerId);
    return Loans.update(loanId, {
      $pull: {
        borrowerIds: borrowerId
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createUserAndLoan.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/methods/server/createUserAndLoan.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Accounts = void 0;

module.watch(require("meteor/accounts-base"), {
  Accounts: function Accounts(v) {
    _Accounts = v;
  }
}, 1);
var saveStartForm = void 0;
module.watch(require("../../../utils/saveStartForm"), {
  default: function _default(v) {
    saveStartForm = v;
  }
}, 2);

var _addUserTracking = void 0;

module.watch(require("../../../utils/analytics"), {
  addUserTracking: function addUserTracking(v) {
    _addUserTracking = v;
  }
}, 3);

_Meteor.methods({
  createUserAndLoan: function createUserAndLoan(_ref) {
    var email = _ref.email,
        formState = _ref.formState;
    console.log('creating user and loan...', email, formState); // Create the new user without a password

    var newUserId = void 0;

    try {
      newUserId = _Accounts.createUser({
        email: email
      });
    } catch (e) {
      throw new _Meteor.Error("Couldn't create new user", e);
    } // Send an enrollment email


    _Accounts.sendEnrollmentEmail(newUserId); // Insert the formdata to loan and borrower(s)


    return saveStartForm(formState, newUserId);
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/methods/server/index.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./compoundMethods"), {
  "*": module.makeNsSetter()
}, 0);
module.watch(require("./createUserAndLoan"), {
  "*": module.makeNsSetter()
}, 1);
module.watch(require("./miscellaneous"), {
  "*": module.makeNsSetter()
}, 2);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"miscellaneous.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/methods/server/miscellaneous.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  downloadPDF: function downloadPDF() {
    return _downloadPDF;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 1);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 2);

var _ValidatedMethod = void 0;

module.watch(require("meteor/mdg:validated-method"), {
  ValidatedMethod: function ValidatedMethod(v) {
    _ValidatedMethod = v;
  }
}, 3);
var Loans = void 0;
module.watch(require("../../loans/loans"), {
  default: function _default(v) {
    Loans = v;
  }
}, 4);
exports.downloadPDF = _downloadPDF;
var Borrowers = void 0;
module.watch(require("../../borrowers/borrowers"), {
  default: function _default(v) {
    Borrowers = v;
  }
}, 5);

var _generateComponentAsPDF = void 0;

module.watch(require("../../../utils/generate-pdf"), {
  generateComponentAsPDF: function generateComponentAsPDF(v) {
    _generateComponentAsPDF = v;
  }
}, 6);

var _LoanPDF = void 0,
    _AnonymousLoanPDF = void 0;

module.watch(require("../../loans/pdf.js"), {
  LoanPDF: function LoanPDF(v) {
    _LoanPDF = v;
  },
  AnonymousLoanPDF: function AnonymousLoanPDF(v) {
    _AnonymousLoanPDF = v;
  }
}, 7);
var rateLimit = void 0;
module.watch(require("../../../utils/rate-limit.js"), {
  default: function _default(v) {
    rateLimit = v;
  }
}, 8);

_Meteor.methods({
  getServerTime: function getServerTime() {
    return new Date();
  },
  getMixpanelAuthorization: function getMixpanelAuthorization() {
    if (_Roles.userIsInRole(_Meteor.userId(), 'dev') || _Roles.userIsInRole(_Meteor.userId(), 'admin')) {
      var btoa = require('btoa');

      var API_KEY = _Meteor.settings.MIXPANEL_API_KEY;
      var API_SECRET = _Meteor.settings.MIXPANEL_API_SECRET;
      return "Basic " + btoa(API_SECRET + ":" + API_KEY);
    }

    throw new _Meteor.Error('Unauthorized access to getMixpanelAuthorization');
  }
});

var _downloadPDF = new _ValidatedMethod({
  name: 'downloadPDF',
  validate: function validate(_ref) {
    var loanId = _ref.loanId,
        type = _ref.type;

    _check(loanId, String);

    _check(type, String);
  },
  run: function run(_ref2) {
    var loanId = _ref2.loanId,
        type = _ref2.type;
    var loan = Loans.findOne(loanId);
    var borrowers = Borrowers.find({
      _id: {
        $in: loan.borrowerIds
      }
    });
    var prefix = type === 'anonymous' ? 'Anonyme' : 'Complet';
    var fileName = prefix + " " + loan.propertyId.address1 + ".pdf"; // If type is anonymous, loan the anonymous pdf

    var component = type === 'anonymous' ? _AnonymousLoanPDF : _LoanPDF;
    return _generateComponentAsPDF({
      component: component,
      props: {
        loan: loan,
        borrowers: borrowers
      },
      fileName: fileName
    }).then(function (result) {
      return result;
    }).catch(function (error) {
      throw new _Meteor.Error('500', error);
    });
  }
});

rateLimit({
  methods: [_downloadPDF]
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"mutations":{"server":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/mutations/server/index.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("../../users/server/mutations"));
module.watch(require("../../loans/server/mutations"));
module.watch(require("../../offers/server/mutations"));
module.watch(require("../../properties/server/mutations"));
module.watch(require("../../borrowers/server/mutations"));
module.watch(require("../../tasks/server/mutations"));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"callMutation.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/mutations/callMutation.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var module1 = module;

var _Meteor = void 0;

module1.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Bert = void 0;

module1.watch(require("meteor/themeteorchef:bert"), {
  Bert: function Bert(v) {
    _Bert = v;
  }
}, 1);

var _checkParams = void 0;

module1.watch(require("./createMutator"), {
  checkParams: function checkParams(v) {
    _checkParams = v;
  }
}, 2);

var handleError = function handleError(error, mutationName) {
  if (_Meteor.isClient) {
    _Bert.defaults.hideDelay = 7500;

    _Bert.alert({
      title: 'Misère, une erreur!',
      message: "<h3 class=\"bert\">" + error.message + " in " + mutationName + "</h3>",
      type: 'danger',
      style: 'fixed-top'
    });
  }

  console.log('callMutation error:', error); // Throw the error again so that it can be catched again via promise chaining
  // All uses of this module should catch and implement proper fail-safe logic

  throw error;
};

var callMutation = function callMutation(mutationOptions) {
  var callParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var name = mutationOptions.name,
      params = mutationOptions.params;

  _checkParams(callParams, params);

  return new Promise(function (resolve, reject) {
    _Meteor.call(name, callParams, function (error, result) {
      if (error) {
        reject(handleError(error, name));
      } else {
        resolve(result);
      }
    });
  });
};

module1.exportDefault(callMutation);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createMutator.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/mutations/createMutator.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.beforeLogger = undefined;

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends3 = require("babel-runtime/helpers/extends");

var _extends4 = _interopRequireDefault(_extends3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  beforeLogger: function beforeLogger() {
    return _beforeLogger;
  },
  afterLogger: function afterLogger() {
    return _afterLogger;
  },
  validateMutationOptions: function validateMutationOptions() {
    return _validateMutationOptions;
  },
  checkParams: function checkParams() {
    return _checkParams;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _check = void 0,
    _Match = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  },
  Match: function Match(v) {
    _Match = v;
  }
}, 1);
var EventService = void 0;
exports.beforeLogger = _beforeLogger;
module.watch(require("../events"), {
  default: function _default(v) {
    EventService = v;
  }
}, 2);
var INVALID_MUTATION_OPTIONS = 'INVALID_MUTATION_OPTIONS';
var MUTATION_ERROR = 'MUTATION_ERROR';

var _beforeLogger = function _beforeLogger(callParameters, name) {
  if (_Meteor.isDevelopment && !_Meteor.isTest) {
    console.log("Executing method " + name + " with the following params:");
    console.log(callParameters);
  }
};

var _afterLogger = function _afterLogger(result, name) {
  if (_Meteor.isDevelopment && !_Meteor.isTest) {
    console.log("Executed " + name + " and got result:");
    console.log(result);
  }
};

var _validateMutationOptions = function _validateMutationOptions(_ref) {
  var name = _ref.name,
      params = _ref.params;

  if (!name || typeof name !== 'string') {
    throw new _Meteor.Error(INVALID_MUTATION_OPTIONS, 'name has to be a string');
  }

  if (params) {
    Object.keys(params).forEach(function (param) {
      var type = params[param].type;

      if (!type) {
        throw new _Meteor.Error(INVALID_MUTATION_OPTIONS, "you have to provide a type for parameter: \"" + param + "\" in " + name);
      }
    });
  }
};

var _checkParams = function _checkParams(callParameters, params) {
  _check(callParameters, Object.keys(params).reduce(function (matchPattern, param) {
    var _params$param = params[param],
        optional = _params$param.optional,
        type = _params$param.type; // Return a Match Pattern and check for optionals

    return (0, _extends4.default)({}, matchPattern, (0, _defineProperty3.default)({}, param, optional ? _Match.Optional(type) : type));
  }, {}));
};

var createMutator = function createMutator(options, functionBody) {
  _validateMutationOptions(options);

  var name = options.name,
      params = options.params;

  _Meteor.methods((0, _defineProperty3.default)({}, name, function (callParameters) {
    _beforeLogger(callParameters, name);

    _checkParams(callParameters, params, name);

    var result = void 0;

    try {
      result = functionBody(callParameters);
      EventService.emitMutation(options, callParameters);
    } catch (error) {
      throw error;
    }

    _afterLogger(result, name);

    return result;
  }));
};

module.exportDefault(createMutator);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/mutations/index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mutations = undefined;

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  mutations: function mutations() {
    return _mutations;
  }
});
module.watch(require("./createMutator"), {
  default: function _default(v) {
    exports.createMutator = v;
  }
}, 6);
module.watch(require("./callMutation"), {
  default: function _default(v) {
    exports.callMutation = v;
  }
}, 7);

var _userMutations = void 0;

module.watch(require("../users"), {
  userMutations: function userMutations(v) {
    _userMutations = v;
  }
}, 0);

var _loanMutations = void 0;

module.watch(require("../loans"), {
  loanMutations: function loanMutations(v) {
    _loanMutations = v;
  }
}, 1);

var _borrowerMutations = void 0;

module.watch(require("../borrowers"), {
  borrowerMutations: function borrowerMutations(v) {
    _borrowerMutations = v;
  }
}, 2);
exports.mutations = _mutations;

var _offerMutations = void 0;

module.watch(require("../offers"), {
  offerMutations: function offerMutations(v) {
    _offerMutations = v;
  }
}, 3);

var _propertyMutations = void 0;

module.watch(require("../properties"), {
  propertyMutations: function propertyMutations(v) {
    _propertyMutations = v;
  }
}, 4);

var _taskMutations = void 0;

module.watch(require("../tasks"), {
  taskMutations: function taskMutations(v) {
    _taskMutations = v;
  }
}, 5);

// Export all mutation definitions here
var _mutations = (0, _extends3.default)({}, _loanMutations, _borrowerMutations, _offerMutations, _propertyMutations, _userMutations, _taskMutations);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"offers":{"server":{"methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/offers/server/methods.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertOffer = undefined;

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  insertOffer: function insertOffer() {
    return _insertOffer;
  },
  insertAdminOffer: function insertAdminOffer() {
    return _insertAdminOffer;
  },
  updateOffer: function updateOffer() {
    return _updateOffer;
  },
  insertFakeOffer: function insertFakeOffer() {
    return _insertFakeOffer;
  },
  deleteOffer: function deleteOffer() {
    return _deleteOffer;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _ValidatedMethod = void 0;

module.watch(require("meteor/mdg:validated-method"), {
  ValidatedMethod: function ValidatedMethod(v) {
    _ValidatedMethod = v;
  }
}, 1);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 2);

var _check = void 0,
    _Match = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  },
  Match: function Match(v) {
    _Match = v;
  }
}, 3);
exports.insertOffer = _insertOffer;

var _CallPromiseMixin = void 0;

module.watch(require("meteor/didericis:callpromise-mixin"), {
  CallPromiseMixin: function CallPromiseMixin(v) {
    _CallPromiseMixin = v;
  }
}, 4);
var rateLimit = void 0;
module.watch(require("../../../utils/rate-limit.js"), {
  default: function _default(v) {
    rateLimit = v;
  }
}, 5);
var Loans = void 0;
module.watch(require("../../loans"), {
  default: function _default(v) {
    Loans = v;
  }
}, 6);
var Offers = void 0;
module.watch(require("../offers"), {
  default: function _default(v) {
    Offers = v;
  }
}, 7);

// Insert a new offer
var _insertOffer = new _ValidatedMethod({
  name: 'insertOffer',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref) {
    var object = _ref.object,
        userId = _ref.userId;

    _check(object, Object);

    _check(userId, _Match.Optional(String));
  },
  run: function run(_ref2) {
    var object = _ref2.object,
        userId = _ref2.userId;

    // Make sure there isn't already an offer for this loan
    var user = _Meteor.user();

    var offer = Offers.findOne({
      loanId: object.loanId,
      organization: user.profile.organization
    });

    if (offer) {
      throw new _Meteor.Error('noTwoOffers', 'Your organization has already made an offer on this loan');
    }

    var loan = Loans.findOne(object.loanId);
    object.userId = userId || _Meteor.userId();
    object.organization = user.profile.organization;
    object.canton = user.profile.cantons[0];
    object.auctionEndTime = loan.logic.auction.endTime;
    return Offers.insert(object);
  }
});

var _insertAdminOffer = new _ValidatedMethod({
  name: 'insertAdminOffer',
  mixins: [_CallPromiseMixin],
  validate: null,
  run: function run(_ref3) {
    var object = _ref3.object;

    if (!(_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev'))) {
      return false;
    }

    var loan = Loans.findOne(object.loanId);
    return Offers.insert((0, _extends3.default)({}, object, {
      userId: _Meteor.userId(),
      isAdmin: true,
      auctionEndTime: loan.logic.auction.endTime,
      // this doesn't update when the loan is ended prematurely by an admin
      canton: 'GE'
    }));
  }
});

var _updateOffer = new _ValidatedMethod({
  name: 'updateOffer',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref4) {
    var id = _ref4.id,
        object = _ref4.object;

    _check(id, String);

    _check(object, Object);
  },
  run: function run(_ref5) {
    var id = _ref5.id,
        object = _ref5.object;
    return Offers.update(id, {
      $set: object
    });
  }
});

var _insertFakeOffer = new _ValidatedMethod({
  name: 'insertFakeOffer',
  mixins: [_CallPromiseMixin],
  validate: null,
  run: function run(_ref6) {
    var object = _ref6.object;
    return Offers.insert((0, _extends3.default)({}, object, {
      userId: _Meteor.userId()
    }));
  }
});

var _deleteOffer = new _ValidatedMethod({
  name: 'deleteOffer',
  mixins: [_CallPromiseMixin],
  validate: function validate() {},
  run: function run(_ref7) {
    var id = _ref7.id;

    if (_Roles.userIsInRole(_Meteor.userId(), 'dev') || _Roles.userIsInRole(_Meteor.userId(), 'admin')) {
      return Offers.remove(id);
    }

    return false;
  }
});

rateLimit({
  methods: [_insertOffer, _insertAdminOffer, _updateOffer, _insertFakeOffer]
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/offers/server/mutations.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _SecurityService = void 0,
    _createMutator = void 0;

module.watch(require("../.."), {
  SecurityService: function SecurityService(v) {
    _SecurityService = v;
  },
  createMutator: function createMutator(v) {
    _createMutator = v;
  }
}, 1);
var OfferService = void 0;
module.watch(require("../OfferService"), {
  default: function _default(v) {
    OfferService = v;
  }
}, 2);
var defs = void 0;
module.watch(require("../mutationDefinitions"), {
  "*": function _(v) {
    defs = v;
  }
}, 3);

_createMutator(defs.OFFER_INSERT, function (_ref) {
  var offer = _ref.offer,
      userId = _ref.userId;
  var userIdIsDefined = userId !== undefined;

  if (userIdIsDefined) {
    _SecurityService.checkCurrentUserIsAdmin();
  } else {
    _SecurityService.offers.isAllowedToInsert();
  }

  return OfferService.insert({
    offer: offer,
    userId: userIdIsDefined ? userId : _Meteor.userId()
  });
});

_createMutator(defs.OFFER_INSERT_ADMIN, function (_ref2) {
  var offer = _ref2.offer,
      loan = _ref2.loan;

  _SecurityService.checkLoggedIn();

  if (_SecurityService.currentUserIsAdmin()) {
    return OfferService.insertAdminOffer({
      offer: offer,
      loan: loan
    });
  }

  return null;
});

_createMutator(defs.OFFER_UPDATE, function (_ref3) {
  var offerId = _ref3.offerId,
      offer = _ref3.offer;

  _SecurityService.offers.isAllowedToUpdate(offerId);

  return OfferService.update({
    offerId: offerId,
    offer: offer
  });
});

_createMutator(defs.OFFER_DELETE, function (_ref4) {
  var offerId = _ref4.offerId;

  _SecurityService.offers.isAllowedToDelete(offerId);

  return OfferService.remove({
    offerId: offerId
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publications.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/offers/server/publications.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 1);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 2);
var Offers = void 0;
module.watch(require("../offers"), {
  default: function _default(v) {
    Offers = v;
  }
}, 3);
var Loans = void 0;
module.watch(require("../../loans/loans"), {
  default: function _default(v) {
    Loans = v;
  }
}, 4);

// Get all offers for the currently active loan
_Meteor.publish('activeOffers', function () {
  var activeLoan = Loans.findOne({
    userId: _Meteor.userId(),
    active: true
  });
  return Offers.find({
    loanId: activeLoan._id
  });
}); // Get all offers for the currently active loan


_Meteor.publish('userOffers', function () {
  var loans = Loans.find({
    userId: _Meteor.userId()
  });
  var IDs = loans.map(function (r) {
    return r._id;
  });
  return Offers.find({
    loanId: {
      $in: IDs
    }
  });
}); // Get all offers the partner has made


_Meteor.publish('partnerOffers', function publish() {
  var user = _Meteor.users.findOne(_Meteor.userId());

  if (_Roles.userIsInRole(_Meteor.userId(), 'partner')) {
    return Offers.find({
      organization: user.profile && user.profile.organization // auctionEndTime: { $lt: new Date() },

    });
  }

  return this.ready();
}); // Publish all offers in the database for admins


_Meteor.publish('allOffers', function publish() {
  // Verify if user is logged In
  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    // Return all users
    return Offers.find();
  }

  return this.ready();
}); // Publish all offers for a loan for admins


_Meteor.publish('loanOffers', function publish(loanId) {
  _check(loanId, String); // Verify if user is logged In


  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    return Offers.find({
      loanId: loanId
    });
  }

  return this.ready();
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"OfferService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/offers/OfferService.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  default: function _default() {
    return _class;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Offers = void 0;

module.watch(require(".."), {
  Offers: function Offers(v) {
    _Offers = v;
  }
}, 1);

var _class = function _class() {
  (0, _classCallCheck3.default)(this, _class);
};

_class.update = function (_ref) {
  var offerId = _ref.offerId,
      offer = _ref.offer;
  return _Offers.update(offerId, {
    $set: offer
  });
};

_class.insert = function (_ref2) {
  var offer = _ref2.offer,
      userId = _ref2.userId;
  return _Offers.insert((0, _extends3.default)({}, offer, {
    userId: userId
  }));
};

_class.insertAdminOffer = function (_ref3) {
  var offer = _ref3.offer,
      loan = _ref3.loan;
  return _Offers.insert((0, _extends3.default)({}, offer, {
    userId: _Meteor.userId(),
    isAdmin: true,
    auctionEndTime: loan.logic.auction.endTime,
    // this doesn't update when the loan is ended prematurely by an admin
    canton: 'GE'
  }));
};

_class.remove = function (_ref4) {
  var offerId = _ref4.offerId;
  return _Offers.remove(offerId);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fakes.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/offers/fakes.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  getRandomOffer: function getRandomOffer() {
    return _getRandomOffer;
  }
});

var _getLoanValue = void 0,
    _getPropAndWork = void 0;

module.watch(require("../../utils/loanFunctions"), {
  getLoanValue: function getLoanValue(v) {
    _getLoanValue = v;
  },
  getPropAndWork: function getPropAndWork(v) {
    _getPropAndWork = v;
  }
}, 0);

var getRandomCondition = function getRandomCondition() {
  var conditions = ['Expertise additionelle requise', '', '', '', '', '', '', '', ''];
  return conditions[Math.floor(Math.random() * conditions.length)];
};

var getRandomCounterpart = function getRandomCounterpart() {
  var counterparts = ['Gestion de toute la fortune', 'Souscrire à une assurance vie', "Gestion de CHF 100'000 de patrimoine minimum", 'Souscrire à une assurance voiture', '', '', '', '', '', '', '', ''];
  return counterparts[Math.floor(Math.random() * counterparts.length)];
};

var round = function round(v) {
  return Math.round(v * 10000) / 10000;
};

exports.getRandomOffer = _getRandomOffer;

var rand = function rand(min, max) {
  return round(Math.random() * (max - min) + min);
};

var _getRandomOffer = function _getRandomOffer(_ref) {
  var loan = _ref.loan,
      property = _ref.property;
  var matchLoanWanted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var rate1 = rand(0.007, 0.012);
  var rate2 = rand(0.005, 0.009); // Randomly add rank 1 offers 25% of the time

  var loanWanted = Math.random() > 0.75 && !matchLoanWanted ? 0.65 * _getPropAndWork({
    loan: loan,
    property: property
  }) : _getLoanValue({
    loan: loan,
    property: property
  });
  var maxAmountLimited = loanWanted > 100000000 ? 100000000 : loanWanted;
  var counterpart = getRandomCounterpart();
  var condition = getRandomCondition();
  return {
    organization: 'fake',
    canton: 'GE',
    loanId: loan._id,
    auctionEndTime: new Date(),
    isSwiss: true,
    worksForOwnCompany: true,
    standardOffer: {
      maxAmount: maxAmountLimited,
      amortization: 0.01,
      interestLibor: rate1,
      interest1: round(rate1 + rand(0.0004, 0.0016)),
      interest2: round(rate1 + rand(0.0016, 0.004)),
      interest5: round(rate1 + rand(0.004, 0.006)),
      interest10: round(rate1 + rand(0.006, 0.01))
    },
    counterpartOffer: {
      maxAmount: maxAmountLimited,
      amortization: 0.01,
      interestLibor: rate2,
      interest1: round(rate2 + rand(0.0004, 0.0016)),
      interest2: round(rate2 + rand(0.0016, 0.004)),
      interest5: round(rate2 + rand(0.004, 0.006)),
      interest10: round(rate2 + rand(0.006, 0.01))
    },
    counterparts: counterpart ? [counterpart] : [],
    conditions: condition ? [condition] : []
  };
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/offers/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  offerMutations: function offerMutations() {
    return _offerMutations;
  }
});
module.watch(require("./offers"), {
  default: function _default(v) {
    exports.default = v;
  }
}, 1);
var mutationDefinitions = void 0;
exports.offerMutations = _offerMutations;
module.watch(require("./mutationDefinitions"), {
  "*": function _(v) {
    mutationDefinitions = v;
  }
}, 0);
var _offerMutations = mutationDefinitions;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutationDefinitions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/offers/mutationDefinitions.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  OFFER_INSERT: function OFFER_INSERT() {
    return _OFFER_INSERT;
  },
  OFFER_INSERT_ADMIN: function OFFER_INSERT_ADMIN() {
    return _OFFER_INSERT_ADMIN;
  },
  OFFER_UPDATE: function OFFER_UPDATE() {
    return _OFFER_UPDATE;
  },
  OFFER_DELETE: function OFFER_DELETE() {
    return _OFFER_DELETE;
  }
});
exports.OFFER_INSERT = _OFFER_INSERT;
var _OFFER_INSERT = {
  name: 'OFFER_INSERT',
  params: {
    offer: {
      type: Object
    },
    userId: {
      type: String,
      optional: true
    },
    loanId: {
      type: String
    }
  }
};
var _OFFER_INSERT_ADMIN = {
  name: 'OFFER_INSERT_ADMIN',
  params: {
    offer: {
      type: Object
    },
    loan: {
      type: Object
    }
  }
};
var _OFFER_UPDATE = {
  name: 'OFFER_UPDATE',
  params: {
    offerId: {
      type: String
    },
    offer: {
      type: Object
    }
  }
};
var _OFFER_DELETE = {
  name: 'OFFER_DELETE',
  params: {
    offerId: {
      type: String
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"offerConstants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/offers/offerConstants.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  OFFER_TYPE: function OFFER_TYPE() {
    return _OFFER_TYPE;
  }
});
exports.OFFER_TYPE = _OFFER_TYPE;
var _OFFER_TYPE = {
  STANDARD: 'STANDARD',
  COUNTERPARTS: 'COUNTERPARTS'
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"offers.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/offers/offers.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OfferSchema = undefined;

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends3 = require("babel-runtime/helpers/extends");

var _extends4 = _interopRequireDefault(_extends3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  OfferSchema: function OfferSchema() {
    return _OfferSchema;
  }
});

var _Mongo = void 0;

module.watch(require("meteor/mongo"), {
  Mongo: function Mongo(v) {
    _Mongo = v;
  }
}, 0);
var SimpleSchema = void 0;
module.watch(require("simpl-schema"), {
  default: function _default(v) {
    SimpleSchema = v;
  }
}, 1);

var _INTEREST_RATES = void 0,
    _CANTONS = void 0;

module.watch(require("../constants"), {
  INTEREST_RATES: function INTEREST_RATES(v) {
    _INTEREST_RATES = v;
  },
  CANTONS: function CANTONS(v) {
    _CANTONS = v;
  }
}, 2);
var Offers = new _Mongo.Collection('offers'); // Prevent all client side modifications of mongoDB

exports.OfferSchema = _OfferSchema;
Offers.deny({
  insert: function insert() {
    return true;
  },
  update: function update() {
    return true;
  },
  remove: function remove() {
    return true;
  }
});
Offers.allow({
  insert: function insert() {
    return false;
  },
  update: function update() {
    return false;
  },
  remove: function remove() {
    return false;
  }
});
var singleOffer = new SimpleSchema((0, _extends4.default)({
  maxAmount: {
    type: Number,
    min: 0,
    max: 100000000
  },
  amortization: {
    type: Number
  }
}, Object.values(_INTEREST_RATES).reduce(function (object, interestKey) {
  return (0, _extends4.default)({}, object, (0, _defineProperty3.default)({}, interestKey, {
    type: Number,
    min: 0,
    max: 100,
    optional: true
  }));
}, {})));

var _OfferSchema = new SimpleSchema({
  loanId: {
    type: String
  },
  userId: {
    type: String
  },
  createdAt: {
    type: Date,
    autoValue: function autoValue() {
      if (this.isInsert) {
        return new Date();
      }
    }
  },
  updatedAt: {
    type: Date,
    autoValue: function autoValue() {
      if (this.isInsert || this.isUpdate) {
        return new Date();
      }
    }
  },
  isAdmin: {
    type: Boolean,
    defaultValue: false
  },
  organization: String,
  canton: {
    type: String,
    allowedValues: Object.keys(_CANTONS)
  },
  auctionEndTime: {
    type: Date,
    optional: true
  },
  standardOffer: {
    type: singleOffer
  },
  counterpartOffer: {
    type: singleOffer,
    optional: true
  },
  counterparts: {
    type: Array,
    defaultValue: [],
    optional: true
  },
  'counterparts.$': String,
  conditions: {
    type: Array,
    defaultValue: []
  },
  'conditions.$': String
}); // Attach schema


Offers.attachSchema(_OfferSchema);
module.exportDefault(Offers);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"properties":{"server":{"methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/properties/server/methods.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertProperty = undefined;

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  insertProperty: function insertProperty() {
    return _insertProperty;
  },
  deleteProperty: function deleteProperty() {
    return _deleteProperty;
  },
  updateProperty: function updateProperty() {
    return _updateProperty;
  },
  pushPropertyValue: function pushPropertyValue() {
    return _pushPropertyValue;
  },
  popPropertyValue: function popPropertyValue() {
    return _popPropertyValue;
  },
  setPropertyField: function setPropertyField() {
    return _setPropertyField;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _ValidatedMethod = void 0;

module.watch(require("meteor/mdg:validated-method"), {
  ValidatedMethod: function ValidatedMethod(v) {
    _ValidatedMethod = v;
  }
}, 1);

var _check = void 0,
    _Match = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  },
  Match: function Match(v) {
    _Match = v;
  }
}, 2);
exports.insertProperty = _insertProperty;

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 3);

var _CallPromiseMixin = void 0;

module.watch(require("meteor/didericis:callpromise-mixin"), {
  CallPromiseMixin: function CallPromiseMixin(v) {
    _CallPromiseMixin = v;
  }
}, 4);
var Properties = void 0;
module.watch(require("../properties"), {
  default: function _default(v) {
    Properties = v;
  }
}, 5);

var _insertProperty = new _ValidatedMethod({
  name: 'insertProperty',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref) {
    var object = _ref.object,
        userId = _ref.userId;

    _check(object, Object);

    if (userId) {
      _check(userId, String);
    }
  },
  run: function run(_ref2) {
    var object = _ref2.object,
        userId = _ref2.userId;
    return Properties.insert((0, _extends3.default)({}, object, {
      userId: userId === undefined ? _Meteor.userId() : userId
    }));
  }
});

var _deleteProperty = new _ValidatedMethod({
  name: 'deleteProperty',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref3) {
    var id = _ref3.id;

    _check(id, String);
  },
  run: function run(_ref4) {
    var id = _ref4.id;
    return Properties.remove(id);
  }
});

var _updateProperty = new _ValidatedMethod({
  name: 'updateProperty',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref5) {
    var id = _ref5.id,
        object = _ref5.object;

    _check(id, String);

    _check(object, Object);
  },
  run: function run(_ref6) {
    var id = _ref6.id,
        object = _ref6.object;
    return Properties.update(id, {
      $set: object
    });
  }
});

var _pushPropertyValue = new _ValidatedMethod({
  name: 'pushPropertyValue',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref7) {
    var id = _ref7.id;

    _check(id, String);
  },
  run: function run(_ref8) {
    var object = _ref8.object,
        id = _ref8.id;
    return Properties.update(id, {
      $push: object
    });
  }
});

var _popPropertyValue = new _ValidatedMethod({
  name: 'popPropertyValue',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref9) {
    var id = _ref9.id;

    _check(id, String);
  },
  run: function run(_ref10) {
    var object = _ref10.object,
        id = _ref10.id;
    return Properties.update(id, {
      $pop: object
    }, {
      getAutoValues: false
    });
  }
});

var _setPropertyField = new _ValidatedMethod({
  name: 'setPropertyField',
  mixins: [_CallPromiseMixin],
  validate: function validate(_ref11) {
    var id = _ref11.id,
        key = _ref11.key;

    _check(id, String);

    _check(key, String);
  },
  run: function run(_ref12) {
    var id = _ref12.id,
        key = _ref12.key,
        value = _ref12.value;
    return Properties.update(id, {
      $set: (0, _defineProperty3.default)({}, "fields." + key, value)
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/properties/server/mutations.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var SecurityService = void 0;
module.watch(require("../../security"), {
  default: function _default(v) {
    SecurityService = v;
  }
}, 1);

var _createMutator = void 0;

module.watch(require("../../mutations"), {
  createMutator: function createMutator(v) {
    _createMutator = v;
  }
}, 2);
var PropertyService = void 0;
module.watch(require("../PropertyService"), {
  default: function _default(v) {
    PropertyService = v;
  }
}, 3);
var defs = void 0;
module.watch(require("../mutationDefinitions"), {
  "*": function _(v) {
    defs = v;
  }
}, 4);

_createMutator(defs.PROPERTY_INSERT, function (_ref) {
  var object = _ref.object,
      userId = _ref.userId;
  var userIdIsDefined = userId !== undefined;

  if (userIdIsDefined) {
    SecurityService.checkCurrentUserIsAdmin();
  } else {
    SecurityService.properties.isAllowedToInsert();
  }

  return PropertyService.insert({
    object: object,
    userId: userIdIsDefined ? userId : _Meteor.userId()
  });
});

_createMutator(defs.PROPERTY_UPDATE, function (_ref2) {
  var propertyId = _ref2.propertyId,
      object = _ref2.object;
  SecurityService.properties.isAllowedToUpdate(propertyId);
  return PropertyService.update({
    propertyId: propertyId,
    object: object
  });
});

_createMutator(defs.PROPERTY_DELETE, function (_ref3) {
  var propertyId = _ref3.propertyId;
  SecurityService.properties.isAllowedToDelete(propertyId);
  return PropertyService.remove({
    propertyId: propertyId
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publications.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/properties/server/publications.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 1);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 2);
var Properties = void 0;
module.watch(require("../properties"), {
  default: function _default(v) {
    Properties = v;
  }
}, 3);

// Get all properties for the current user
_Meteor.publish('properties', function publish() {
  // Verify if user is logged In
  if (!_Meteor.userId()) {
    return this.ready();
  }

  return Properties.find({
    userId: _Meteor.userId()
  });
}); // Get all properties for the current user


_Meteor.publish('userProperties', function publish(userId, propertyIds) {
  _check(userId, String);

  _check(propertyIds, [String]);

  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    // Return all properties owned by this user, or pointed at by a loan
    return Properties.find({
      $or: [{
        userId: userId
      }, {
        _id: {
          $in: propertyIds
        }
      }]
    });
  } // Return an empy cursor if not logged in


  return this.ready();
}); // Get a property


_Meteor.publish('property', function publish(propertyId) {
  _check(propertyId, String);

  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    return Properties.find({
      _id: propertyId
    });
  } // Return an empy cursor if not logged in


  return this.ready();
});

_Meteor.publish('allProperties', function publish() {
  // Verify if user is an admin
  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    // Return all
    return Properties.find();
  }

  return this.ready();
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"PropertyService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/properties/PropertyService.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  default: function _default() {
    return _class;
  }
});
var Properties = void 0;
module.watch(require("../properties"), {
  default: function _default(v) {
    Properties = v;
  }
}, 0);

var _class = function _class() {
  (0, _classCallCheck3.default)(this, _class);
};

_class.update = function (_ref) {
  var propertyId = _ref.propertyId,
      property = _ref.property;
  return Properties.update(propertyId, {
    $set: property
  });
};

_class.insert = function (_ref2) {
  var property = _ref2.property,
      userId = _ref2.userId;
  return Properties.insert((0, _extends3.default)({}, property, {
    userId: userId
  }));
};

_class.remove = function (_ref3) {
  var propertyId = _ref3.propertyId;
  return Properties.remove(propertyId);
};

_class.pushValue = function (_ref4) {
  var propertyId = _ref4.propertyId,
      property = _ref4.property;
  return Properties.update(propertyId, {
    $push: property
  });
};

_class.popValue = function (_ref5) {
  var propertyId = _ref5.propertyId,
      property = _ref5.property;
  return Properties.update(propertyId, {
    $pop: property
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/properties/index.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  propertyMutations: function propertyMutations() {
    return _propertyMutations;
  }
});
module.watch(require("./properties"), {
  default: function _default(v) {
    exports.default = v;
  }
}, 1);
var mutations = void 0;
exports.propertyMutations = _propertyMutations;
module.watch(require("./mutationDefinitions"), {
  "*": function _(v) {
    mutations = v;
  }
}, 0);
var _propertyMutations = mutations;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutationDefinitions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/properties/mutationDefinitions.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  PROPERTY_INSERT: function PROPERTY_INSERT() {
    return _PROPERTY_INSERT;
  },
  PROPERTY_UPDATE: function PROPERTY_UPDATE() {
    return _PROPERTY_UPDATE;
  },
  PROPERTY_DELETE: function PROPERTY_DELETE() {
    return _PROPERTY_DELETE;
  }
});
exports.PROPERTY_INSERT = _PROPERTY_INSERT;
var _PROPERTY_INSERT = {
  name: 'PROPERTY_INSERT',
  params: {
    property: {
      type: Object
    },
    userId: {
      type: String,
      optional: true
    }
  }
};
var _PROPERTY_UPDATE = {
  name: 'PROPERTY_UPDATE',
  params: {
    propertyId: {
      type: String
    },
    property: {
      type: Object
    }
  }
};
var _PROPERTY_DELETE = {
  name: 'PROPERTY_DELETE',
  params: {
    propertyId: {
      type: String
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"properties.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/properties/properties.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  PropertySchema: function PropertySchema() {
    return _PropertySchema;
  }
});

var _Mongo = void 0;

module.watch(require("meteor/mongo"), {
  Mongo: function Mongo(v) {
    _Mongo = v;
  }
}, 0);
var SimpleSchema = void 0;
module.watch(require("simpl-schema"), {
  default: function _default(v) {
    SimpleSchema = v;
  }
}, 1);

var _getFileSchema = void 0;

module.watch(require("../files/files"), {
  getFileSchema: function getFileSchema(v) {
    _getFileSchema = v;
  }
}, 2);

var _PROPERTY_STATUS = void 0,
    _USAGE_TYPE = void 0,
    _PROPERTY_STYLE = void 0,
    _VOLUME_NORM = void 0;

module.watch(require("./propertyConstants"), {
  PROPERTY_STATUS: function PROPERTY_STATUS(v) {
    _PROPERTY_STATUS = v;
  },
  USAGE_TYPE: function USAGE_TYPE(v) {
    _USAGE_TYPE = v;
  },
  PROPERTY_STYLE: function PROPERTY_STYLE(v) {
    _PROPERTY_STYLE = v;
  },
  VOLUME_NORM: function VOLUME_NORM(v) {
    _VOLUME_NORM = v;
  }
}, 3);
exports.PropertySchema = _PropertySchema;
var Properties = new _Mongo.Collection('properties'); // Prevent all client side modifications of mongoDB

Properties.deny({
  insert: function insert() {
    return true;
  },
  update: function update() {
    return true;
  },
  remove: function remove() {
    return true;
  }
});
Properties.allow({
  insert: function insert() {
    return false;
  },
  update: function update() {
    return false;
  },
  remove: function remove() {
    return false;
  }
});
var PropertyFilesSchema = new SimpleSchema(_getFileSchema('property'));

var _PropertySchema = new SimpleSchema({
  userId: {
    type: String,
    optional: true
  },
  createdAt: {
    type: Date,
    autoValue: function autoValue() {
      if (this.isInsert) {
        return new Date();
      }
    }
  },
  updatedAt: {
    type: Date,
    autoValue: function autoValue() {
      if (this.isInsert || this.isUpdate) {
        return new Date();
      }
    }
  },
  status: {
    type: String,
    defaultValue: _PROPERTY_STATUS.FOR_SALE,
    allowedValues: Object.values(_PROPERTY_STATUS)
  },
  value: {
    // Cost of the property
    type: Number,
    min: 0,
    max: 100000000,
    optional: true
  },
  propertyWork: {
    // Additional work on property
    type: Number,
    min: 0,
    max: 100000000,
    optional: true
  },
  usageType: {
    type: String,
    defaultValue: _USAGE_TYPE.PRIMARY,
    allowedValues: Object.values(_USAGE_TYPE)
  },
  investmentRent: {
    // Rent of property if investment
    type: Number,
    optional: true,
    min: 0,
    max: 100000000
  },
  style: {
    type: String,
    optional: true,
    defaultValue: _PROPERTY_STYLE.FLAT,
    allowedValues: Object.values(_PROPERTY_STYLE)
  },
  address: {
    // For condensed, google places addresses
    type: String,
    optional: true
  },
  address1: {
    type: String,
    optional: true
  },
  address2: {
    type: String,
    optional: true
  },
  zipCode: {
    type: Number,
    optional: true,
    min: 1000,
    max: 9999
  },
  city: {
    type: String,
    optional: true
  },
  constructionYear: {
    type: Number,
    min: 0,
    max: 2030,
    optional: true
  },
  renovationYear: {
    type: Number,
    min: 0,
    max: 2030,
    optional: true
  },
  insideArea: {
    type: Number,
    optional: true,
    min: 0
  },
  landArea: {
    type: Number,
    optional: true,
    min: 0
  },
  balconyArea: {
    type: Number,
    optional: true,
    min: 0
  },
  terraceArea: {
    type: Number,
    optional: true,
    min: 0
  },
  roomCount: {
    type: Number,
    optional: true,
    min: 0,
    max: 100
  },
  bathroomCount: {
    type: Number,
    optional: true,
    min: 0,
    max: 100
  },
  toiletCount: {
    type: Number,
    optional: true,
    min: 0,
    max: 100
  },
  volume: {
    type: Number,
    optional: true,
    min: 0,
    max: 5000
  },
  volumeNorm: {
    type: String,
    defaultValue: _VOLUME_NORM.SIA,
    allowedValues: Object.keys(_VOLUME_NORM)
  },
  parking: {
    type: Object,
    defaultValue: {}
  },
  'parking.box': {
    type: Number,
    optional: true,
    min: 0,
    max: 100
  },
  'parking.inside': {
    type: Number,
    optional: true,
    min: 0,
    max: 100
  },
  'parking.outside': {
    type: Number,
    optional: true,
    min: 0,
    max: 100
  },
  minergie: {
    type: Boolean,
    defaultValue: false
  },
  isCoproperty: {
    type: Boolean,
    defaultValue: false
  },
  isNew: {
    type: Boolean,
    defaultValue: false
  },
  copropertyPercentage: {
    type: Number,
    min: 0,
    max: 1000,
    optional: true
  },
  cityPlacementQuality: {
    type: Number,
    min: 0,
    max: 5,
    optional: true
  },
  buildingPlacementQuality: {
    type: Number,
    min: 0,
    max: 5,
    optional: true
  },
  buildingQuality: {
    type: Number,
    min: 0,
    max: 5,
    optional: true
  },
  flatQuality: {
    type: Number,
    min: 0,
    max: 5,
    optional: true
  },
  materialsQuality: {
    type: Number,
    min: 0,
    max: 5,
    optional: true
  },
  otherNotes: {
    type: String,
    optional: true
  },
  name: {
    type: String,
    optional: true
  },
  latitude: {
    type: Number,
    optional: true,
    min: -90,
    max: 90
  },
  longitude: {
    type: Number,
    optional: true,
    min: -180,
    max: 180
  },
  nearestBusStation: {
    type: Object,
    blackbox: true,
    optional: true
  },
  nearestTrainStation: {
    type: Object,
    blackbox: true,
    optional: true
  },
  customFields: {
    // Allows storing custom fields that aren't allowed by the default schema
    type: Object,
    blackbox: true,
    defaultValue: {}
  },
  adminValidation: {
    type: Object,
    defaultValue: {},
    blackbox: true
  },
  files: {
    type: PropertyFilesSchema,
    defaultValue: {}
  }
}); // Attach schema


Properties.attachSchema(_PropertySchema);
module.exportDefault(Properties);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"propertyConstants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/properties/propertyConstants.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  PROPERTY_STATUS: function PROPERTY_STATUS() {
    return _PROPERTY_STATUS;
  },
  USAGE_TYPE: function USAGE_TYPE() {
    return _USAGE_TYPE;
  },
  PROPERTY_STYLE: function PROPERTY_STYLE() {
    return _PROPERTY_STYLE;
  },
  VOLUME_NORM: function VOLUME_NORM() {
    return _VOLUME_NORM;
  },
  EXPERTISE_RATING: function EXPERTISE_RATING() {
    return _EXPERTISE_RATING;
  }
});
exports.PROPERTY_STATUS = _PROPERTY_STATUS;
var _PROPERTY_STATUS = {
  SOLD: 'SOLD',
  FOR_SALE: 'FOR_SALE'
};
var _USAGE_TYPE = {
  PRIMARY: 'PRIMARY',
  SECONDARY: 'SECONDARY',
  INVESTMENT: 'INVESTMENT'
};
var _PROPERTY_STYLE = {
  FLAT: 'FLAT',
  VILLA: 'VILLA'
};
var _VOLUME_NORM = {
  SIA: 'SIA'
};
var _EXPERTISE_RATING = {
  0: 0,
  1: 1,
  2: 2,
  3: 3
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"security":{"collections":{"BorrowerSecurity.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/security/collections/BorrowerSecurity.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Security = void 0;
module.watch(require("../Security"), {
  default: function _default(v) {
    Security = v;
  }
}, 0);

var _Borrowers = void 0;

module.watch(require("../.."), {
  Borrowers: function Borrowers(v) {
    _Borrowers = v;
  }
}, 1);

var BorrowerSecurity = function () {
  function BorrowerSecurity() {
    (0, _classCallCheck3.default)(this, BorrowerSecurity);
  }

  (0, _createClass3.default)(BorrowerSecurity, null, [{
    key: "isAllowedToInsert",
    value: function isAllowedToInsert() {
      Security.checkLoggedIn();
    }
  }, {
    key: "isAllowedToUpdate",
    value: function isAllowedToUpdate(loanId) {
      if (Security.currentUserIsAdmin()) {
        return;
      }

      var loan = _Borrowers.findOne(loanId);

      Security.checkOwnership(loan);
    }
  }, {
    key: "isAllowedToDelete",
    value: function isAllowedToDelete() {
      Security.checkCurrentUserIsAdmin();
    }
  }]);
  return BorrowerSecurity;
}();

module.exportDefault(BorrowerSecurity);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"LoanSecurity.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/security/collections/LoanSecurity.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Security = void 0;
module.watch(require("../Security"), {
  default: function _default(v) {
    Security = v;
  }
}, 0);

var _Loans = void 0;

module.watch(require("../.."), {
  Loans: function Loans(v) {
    _Loans = v;
  }
}, 1);

var LoanSecurity = function () {
  function LoanSecurity() {
    (0, _classCallCheck3.default)(this, LoanSecurity);
  }

  (0, _createClass3.default)(LoanSecurity, null, [{
    key: "isAllowedToInsert",
    value: function isAllowedToInsert() {
      Security.checkLoggedIn();
    }
  }, {
    key: "isAllowedToUpdate",
    value: function isAllowedToUpdate(loanId) {
      if (Security.currentUserIsAdmin()) {
        return;
      }

      var loan = _Loans.findOne(loanId);

      Security.checkOwnership(loan);
    }
  }, {
    key: "isAllowedToDelete",
    value: function isAllowedToDelete() {
      Security.checkCurrentUserIsAdmin();
    }
  }]);
  return LoanSecurity;
}();

module.exportDefault(LoanSecurity);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"OfferSecurity.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/security/collections/OfferSecurity.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Security = void 0;
module.watch(require("../Security"), {
  default: function _default(v) {
    Security = v;
  }
}, 0);

var _Offers = void 0;

module.watch(require("../.."), {
  Offers: function Offers(v) {
    _Offers = v;
  }
}, 1);

var OfferSecurity = function () {
  function OfferSecurity() {
    (0, _classCallCheck3.default)(this, OfferSecurity);
  }

  (0, _createClass3.default)(OfferSecurity, null, [{
    key: "isAllowedToInsert",
    value: function isAllowedToInsert() {
      Security.checkLoggedIn();
    }
  }, {
    key: "isAllowedToUpdate",
    value: function isAllowedToUpdate(loanId) {
      if (Security.currentUserIsAdmin()) {
        return;
      }

      var loan = _Offers.findOne(loanId);

      Security.checkOwnership(loan);
    }
  }, {
    key: "isAllowedToDelete",
    value: function isAllowedToDelete() {
      Security.checkCurrentUserIsAdmin();
    }
  }]);
  return OfferSecurity;
}();

module.exportDefault(OfferSecurity);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"PropertySecurity.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/security/collections/PropertySecurity.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Security = void 0;
module.watch(require("../Security"), {
  default: function _default(v) {
    Security = v;
  }
}, 0);

var _Properties = void 0;

module.watch(require("../.."), {
  Properties: function Properties(v) {
    _Properties = v;
  }
}, 1);

var PropertySecurity = function () {
  function PropertySecurity() {
    (0, _classCallCheck3.default)(this, PropertySecurity);
  }

  (0, _createClass3.default)(PropertySecurity, null, [{
    key: "isAllowedToInsert",
    value: function isAllowedToInsert() {
      Security.checkLoggedIn();
    }
  }, {
    key: "isAllowedToUpdate",
    value: function isAllowedToUpdate(loanId) {
      if (Security.currentUserIsAdmin()) {
        return;
      }

      var loan = _Properties.findOne(loanId);

      Security.checkOwnership(loan);
    }
  }, {
    key: "isAllowedToDelete",
    value: function isAllowedToDelete() {
      Security.checkCurrentUserIsAdmin();
    }
  }]);
  return PropertySecurity;
}();

module.exportDefault(PropertySecurity);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"TaskSecurity.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/security/collections/TaskSecurity.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Security = void 0;
module.watch(require("../Security"), {
  default: function _default(v) {
    Security = v;
  }
}, 0);

var _Tasks = void 0;

module.watch(require("../.."), {
  Tasks: function Tasks(v) {
    _Tasks = v;
  }
}, 1);

var TaskSecurity = function () {
  function TaskSecurity() {
    (0, _classCallCheck3.default)(this, TaskSecurity);
  }

  (0, _createClass3.default)(TaskSecurity, null, [{
    key: "isAllowedToInsert",
    value: function isAllowedToInsert() {
      Security.checkLoggedIn();
    }
  }, {
    key: "isAllowedToUpdate",
    value: function isAllowedToUpdate() {
      Security.checkCurrentUserIsAdmin();
    }
  }, {
    key: "isAllowedToDelete",
    value: function isAllowedToDelete() {
      Security.checkCurrentUserIsAdmin();
    }
  }]);
  return TaskSecurity;
}();

module.exportDefault(TaskSecurity);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/security/collections/index.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./LoanSecurity"), {
  default: function _default(v) {
    exports.LoanSecurity = v;
  }
}, 0);
module.watch(require("./OfferSecurity"), {
  default: function _default(v) {
    exports.OfferSecurity = v;
  }
}, 1);
module.watch(require("./BorrowerSecurity"), {
  default: function _default(v) {
    exports.BorrowerSecurity = v;
  }
}, 2);
module.watch(require("./PropertySecurity"), {
  default: function _default(v) {
    exports.PropertySecurity = v;
  }
}, 3);
module.watch(require("./TaskSecurity"), {
  default: function _default(v) {
    exports.TaskSecurity = v;
  }
}, 4);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"Security.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/security/Security.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SECURITY_ERROR = undefined;

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  SECURITY_ERROR: function SECURITY_ERROR() {
    return _SECURITY_ERROR;
  },
  default: function _default() {
    return Security;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Roles = void 0;

exports.SECURITY_ERROR = _SECURITY_ERROR;
module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 1);

var _ROLES = void 0;

module.watch(require("../constants"), {
  ROLES: function ROLES(v) {
    _ROLES = v;
  }
}, 2);
var _SECURITY_ERROR = 'NOT_AUTHORIZED';

var Security = function () {
  function Security() {
    (0, _classCallCheck3.default)(this, Security);
  }

  (0, _createClass3.default)(Security, null, [{
    key: "hasRole",
    value: function hasRole(userId, role) {
      return _Roles.userIsInRole(userId, role);
    }
  }, {
    key: "handleUnauthorized",
    value: function handleUnauthorized(message) {
      throw new _Meteor.Error(_SECURITY_ERROR, message);
    }
  }, {
    key: "checkRole",
    value: function checkRole(userId, role) {
      if (!this.hasRole(userId, role)) {
        this.handleUnauthorized("Checking role: " + role);
      }
    }
  }, {
    key: "checkLoggedIn",
    value: function checkLoggedIn() {
      if (!_Meteor.userId()) {
        this.handleUnauthorized('Checking if logged in');
      }
    }
  }, {
    key: "currentUserHasRole",
    value: function currentUserHasRole(role) {
      return this.hasRole(_Meteor.userId(), role);
    }
  }, {
    key: "currentUserIsAdmin",
    value: function currentUserIsAdmin() {
      return this.hasRole(_Meteor.userId(), _ROLES.ADMIN) || this.hasRole(_Meteor.userId(), _ROLES.DEV);
    }
  }, {
    key: "checkCurrentUserIsAdmin",
    value: function checkCurrentUserIsAdmin() {
      if (!this.currentUserIsAdmin()) {
        this.handleUnauthorized('Checking if current user is admin');
      }
    }
  }, {
    key: "checkOwnership",
    value: function checkOwnership(doc) {
      if (_Meteor.userId() !== doc.userId) {
        this.handleUnauthorized('Checking ownership');
      }
    }
  }]);
  return Security;
}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/security/index.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.watch(require("./Security"), {
  SECURITY_ERROR: function SECURITY_ERROR(v) {
    exports.SECURITY_ERROR = v;
  }
}, 2);
var Security = void 0;
module.watch(require("./Security"), {
  default: function _default(v) {
    Security = v;
  }
}, 0);

var _LoanSecurity = void 0,
    _OfferSecurity = void 0,
    _BorrowerSecurity = void 0,
    _PropertySecurity = void 0,
    _TaskSecurity = void 0;

module.watch(require("./collections"), {
  LoanSecurity: function LoanSecurity(v) {
    _LoanSecurity = v;
  },
  OfferSecurity: function OfferSecurity(v) {
    _OfferSecurity = v;
  },
  BorrowerSecurity: function BorrowerSecurity(v) {
    _BorrowerSecurity = v;
  },
  PropertySecurity: function PropertySecurity(v) {
    _PropertySecurity = v;
  },
  TaskSecurity: function TaskSecurity(v) {
    _TaskSecurity = v;
  }
}, 1);

var SecurityService = function (_Security) {
  (0, _inherits3.default)(SecurityService, _Security);

  function SecurityService() {
    (0, _classCallCheck3.default)(this, SecurityService);
    return (0, _possibleConstructorReturn3.default)(this, (SecurityService.__proto__ || Object.getPrototypeOf(SecurityService)).apply(this, arguments));
  }

  (0, _createClass3.default)(SecurityService, null, [{
    key: "loans",
    get: function get() {
      return _LoanSecurity;
    }
  }, {
    key: "offers",
    get: function get() {
      return _OfferSecurity;
    }
  }, {
    key: "properties",
    get: function get() {
      return _PropertySecurity;
    }
  }, {
    key: "borrowers",
    get: function get() {
      return _BorrowerSecurity;
    }
  }, {
    key: "tasks",
    get: function get() {
      return _TaskSecurity;
    }
  }]);
  return SecurityService;
}(Security);

module.exportDefault(SecurityService);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"tasks":{"queries":{"exposures.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/queries/exposures.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./tasksList.expose"));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tasksList.expose.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/queries/tasksList.expose.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var SecurityService = void 0;
module.watch(require("../../security"), {
  default: function _default(v) {
    SecurityService = v;
  }
}, 0);
var query = void 0;
module.watch(require("./tasksList"), {
  default: function _default(v) {
    query = v;
  }
}, 1);
query.expose({
  firewall: function firewall(userId) {
    SecurityService.checkCurrentUserIsAdmin();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tasksList.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/queries/tasksList.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Tasks = void 0;

module.watch(require("../../"), {
  Tasks: function Tasks(v) {
    _Tasks = v;
  }
}, 0);

var _TASK_QUERIES = void 0;

module.watch(require("../tasksConstants"), {
  TASK_QUERIES: function TASK_QUERIES(v) {
    _TASK_QUERIES = v;
  }
}, 1);
module.exportDefault(_Tasks.createQuery(_TASK_QUERIES.TASKS, {
  $filter: function $filter(_ref) {
    var filters = _ref.filters,
        options = _ref.options,
        params = _ref.params;

    if (params.userId) {
      filters.userId = params.userId;
    } // filters.assignedUser.roles = {$in: ['admin']};

  },
  $options: {
    sort: {
      createdAt: -1
    }
  },
  $paginate: true,
  status: 1,
  createdAt: 1,
  updatedAt: 1,
  dueAt: 1,
  assignedUser: {
    emails: 1,
    roles: 1
  }
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"server":{"mutations.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/server/mutations.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _SecurityService = void 0,
    _createMutator = void 0;

module.watch(require("../.."), {
  SecurityService: function SecurityService(v) {
    _SecurityService = v;
  },
  createMutator: function createMutator(v) {
    _createMutator = v;
  }
}, 0);
var TaskService = void 0;
module.watch(require("../TaskService"), {
  default: function _default(v) {
    TaskService = v;
  }
}, 1);
var defs = void 0;
module.watch(require("../mutationDefinitions"), {
  "*": function _(v) {
    defs = v;
  }
}, 2);

_createMutator(defs.TASK_INSERT, function (_ref) {
  var type = _ref.type,
      loanId = _ref.loanId;

  _SecurityService.tasks.isAllowedToInsert();

  return TaskService.insert({
    type: type,
    loanId: loanId
  });
});

_createMutator(defs.TASK_UPDATE, function (_ref2) {
  var taskId = _ref2.taskId,
      task = _ref2.task;

  _SecurityService.tasks.isAllowedToUpdate();

  return TaskService.insert({
    taskId: taskId,
    task: task
  });
});

_createMutator(defs.TASK_COMPLETE, function (_ref3) {
  var taskId = _ref3.taskId;

  _SecurityService.tasks.isAllowedToUpdate(taskId);

  return TaskService.complete({
    taskId: taskId
  });
});

_createMutator(defs.TASK_COMPLETE_BY_TYPE, function (_ref4) {
  var type = _ref4.type,
      loanId = _ref4.loanId,
      newStatus = _ref4.newStatus;

  _SecurityService.tasks.isAllowedToUpdate();

  return TaskService.completeByType({
    type: type,
    loanId: loanId,
    newStatus: newStatus
  });
});

_createMutator(defs.TASK_CHANGE_STATUS, function (_ref5) {
  var taskId = _ref5.taskId,
      newStatus = _ref5.newStatus;

  _SecurityService.tasks.isAllowedToUpdate(taskId);

  return TaskService.changeStatus({
    taskId: taskId,
    newStatus: newStatus
  });
});

_createMutator(defs.TASK_CHANGE_USER, function (_ref6) {
  var taskId = _ref6.taskId,
      newUser = _ref6.newUser;

  _SecurityService.tasks.isAllowedToUpdate(taskId);

  return TaskService.changeUser({
    taskId: taskId,
    newUser: newUser
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"taskListeners.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/server/taskListeners.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var EventService = void 0;
module.watch(require("../../events"), {
  default: function _default(v) {
    EventService = v;
  }
}, 0);

var _mutations = void 0;

module.watch(require("../../mutations"), {
  mutations: function mutations(v) {
    _mutations = v;
  }
}, 1);
var TaskService = void 0;
module.watch(require("../TaskService"), {
  default: function _default(v) {
    TaskService = v;
  }
}, 2);
EventService.addMutationListener(_mutations.LOAN_DELETE, function (params) {// TODO: remove parent loan for these tasks
});
EventService.addMutationListener(_mutations.REQUEST_LOAN_VERIFICATION, function (params) {// TODO: ADMIN_ACTION_TYPE.VERIFY
});
EventService.addMutationListener(_mutations.START_AUCTION, function (params) {// TODO: ADMIN_ACTION_TYPE.AUCTION
});
EventService.addMutationListener(_mutations.END_AUCTION, function (params) {// TODO: complete auction task
});
EventService.addMutationListener(_mutations.CANCEL_AUCTION, function (params) {// TODO: remove auction task
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"TaskService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/TaskService.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var Tasks = void 0;
module.watch(require("../tasks"), {
  default: function _default(v) {
    Tasks = v;
  }
}, 1);

var _TASK_STATUS = void 0;

module.watch(require("./tasksConstants"), {
  TASK_STATUS: function TASK_STATUS(v) {
    _TASK_STATUS = v;
  }
}, 2);

var TaskService = function TaskService() {
  var _this = this;

  (0, _classCallCheck3.default)(this, TaskService);

  this.insert = function (_ref) {
    var type = _ref.type,
        loanId = _ref.loanId,
        assignedTo = _ref.assignedTo,
        createdBy = _ref.createdBy;
    var existingTask = Tasks.findOne({
      type: type,
      loanId: loanId,
      status: _TASK_STATUS.ACTIVE
    });

    if (existingTask) {
      throw new _Meteor.Error('duplicate active task');
    }

    return Tasks.insert({
      type: type,
      loanId: loanId,
      assignedTo: assignedTo,
      createdBy: createdBy
    });
  };

  this.remove = function (_ref2) {
    var taskId = _ref2.taskId;
    return Tasks.remove(taskId);
  };

  this.update = function (_ref3) {
    var taskId = _ref3.taskId,
        task = _ref3.task;
    return Tasks.update(taskId, {
      $set: task
    });
  };

  this.complete = function (_ref4) {
    var taskId = _ref4.taskId;
    return _this.update({
      taskId: taskId,
      task: {
        status: _TASK_STATUS.COMPLETED,
        completedAt: new Date()
      }
    });
  };

  this.completeByType = function (_ref5) {
    var type = _ref5.type,
        loanId = _ref5.loanId,
        newStatus = _ref5.newStatus;
    var taskToComplete = Tasks.findOne({
      loanId: loanId,
      type: type,
      status: _TASK_STATUS.ACTIVE
    });

    if (!taskToComplete) {
      throw new _Meteor.Error("task couldn't be found");
    }

    return _this.update({
      taskId: taskToComplete._id,
      task: {
        status: newStatus || _TASK_STATUS.COMPLETED,
        completedAt: new Date()
      }
    });
  };

  this.changeStatus = function (_ref6) {
    var taskId = _ref6.taskId,
        newStatus = _ref6.newStatus;
    return _this.update({
      taskId: taskId,
      task: {
        status: newStatus
      }
    });
  };

  this.changeUser = function (_ref7) {
    var taskId = _ref7.taskId,
        newUser = _ref7.newUser;
    return _this.update({
      taskId: taskId,
      task: {
        userId: newUser
      }
    });
  };
};

module.exportDefault(new TaskService());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  taskMutations: function taskMutations() {
    return _taskMutations;
  }
});
module.watch(require("./tasks"), {
  default: function _default(v) {
    exports.default = v;
  }
}, 1);
var mutationDefinitions = void 0;
exports.taskMutations = _taskMutations;
module.watch(require("./mutationDefinitions"), {
  "*": function _(v) {
    mutationDefinitions = v;
  }
}, 0);
var _taskMutations = mutationDefinitions;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"links.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/links.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Tasks = void 0,
    _Users = void 0,
    _Loans = void 0,
    _Borrowers = void 0,
    _Properties = void 0;

module.watch(require("../"), {
  Tasks: function Tasks(v) {
    _Tasks = v;
  },
  Users: function Users(v) {
    _Users = v;
  },
  Loans: function Loans(v) {
    _Loans = v;
  },
  Borrowers: function Borrowers(v) {
    _Borrowers = v;
  },
  Properties: function Properties(v) {
    _Properties = v;
  }
}, 0);

_Tasks.addLinks({
  assignedUser: {
    field: 'assignedTo',
    collection: _Users,
    type: 'one'
  }
});

_Tasks.addLinks({
  loan: {
    field: 'loanId',
    collection: _Loans,
    type: 'one'
  }
});

_Tasks.addLinks({
  property: {
    field: 'propertyId',
    collection: _Properties,
    type: 'one'
  }
});

_Tasks.addLinks({
  borrowers: {
    field: 'borrowerIds',
    collection: _Borrowers,
    type: 'many'
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutationDefinitions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/mutationDefinitions.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  TASK_INSERT: function TASK_INSERT() {
    return _TASK_INSERT;
  },
  TASK_UPDATE: function TASK_UPDATE() {
    return _TASK_UPDATE;
  },
  TASK_COMPLETE: function TASK_COMPLETE() {
    return _TASK_COMPLETE;
  },
  TASK_COMPLETE_BY_TYPE: function TASK_COMPLETE_BY_TYPE() {
    return _TASK_COMPLETE_BY_TYPE;
  },
  TASK_CHANGE_STATUS: function TASK_CHANGE_STATUS() {
    return _TASK_CHANGE_STATUS;
  },
  TASK_CHANGE_USER: function TASK_CHANGE_USER() {
    return _TASK_CHANGE_USER;
  }
});
exports.TASK_INSERT = _TASK_INSERT;
var _TASK_INSERT = {
  name: 'TASK_INSERT',
  params: {
    loanId: {
      type: String
    },
    type: {
      type: String
    }
  }
};
var _TASK_UPDATE = {
  name: 'TASK_UPDATE',
  params: {
    taskId: {
      type: String
    },
    task: {
      type: Object
    }
  }
};
var _TASK_COMPLETE = {
  name: 'TASK_COMPLETE',
  params: {
    taskId: {
      type: String
    }
  }
};
var _TASK_COMPLETE_BY_TYPE = {
  name: 'TASK_COMPLETE_BY_TYPE',
  params: {
    type: {
      type: String
    },
    loanId: {
      type: String
    },
    newStatus: {
      type: String,
      optional: true
    }
  }
};
var _TASK_CHANGE_STATUS = {
  name: 'TASK_CHANGE_STATUS',
  params: {
    taskId: {
      type: String
    },
    newStatus: {
      type: String
    }
  }
};
var _TASK_CHANGE_USER = {
  name: 'TASK_CHANGE_USER',
  params: {
    taskId: {
      type: String
    },
    newUser: {
      type: String
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tasks.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/tasks.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Mongo = void 0;

module.watch(require("meteor/mongo"), {
  Mongo: function Mongo(v) {
    _Mongo = v;
  }
}, 0);
var SimpleSchema = void 0;
module.watch(require("simpl-schema"), {
  default: function _default(v) {
    SimpleSchema = v;
  }
}, 1);

var _TASK_STATUS = void 0,
    _TASK_TYPE = void 0;

module.watch(require("./tasksConstants"), {
  TASK_STATUS: function TASK_STATUS(v) {
    _TASK_STATUS = v;
  },
  TASK_TYPE: function TASK_TYPE(v) {
    _TASK_TYPE = v;
  }
}, 2);
var Tasks = new _Mongo.Collection('tasks'); // Prevent all client side modifications of mongoDB

Tasks.deny({
  insert: function insert() {
    return true;
  },
  update: function update() {
    return true;
  },
  remove: function remove() {
    return true;
  }
});
Tasks.allow({
  insert: function insert() {
    return false;
  },
  update: function update() {
    return false;
  },
  remove: function remove() {
    return false;
  }
});
var TasksSchema = new SimpleSchema({
  createdAt: {
    type: Date,
    autoValue: function autoValue() {
      if (this.isInsert) {
        return new Date();
      }
    }
  },
  updatedAt: {
    type: Date,
    optional: true
  },
  status: {
    type: String,
    defaultValue: _TASK_STATUS.ACTIVE,
    allowedValues: Object.values(_TASK_STATUS)
  },
  completedAt: {
    type: Date,
    optional: true
  },
  dueAt: {
    type: Date,
    optional: true
  },
  createdBy: {
    type: String,
    optional: true
  },
  assignedTo: {
    type: String,
    optional: true
  },
  type: {
    type: String,
    allowedValues: Object.values(_TASK_TYPE),
    optional: true
  },
  title: {
    type: String,
    optional: true
  },
  description: {
    type: String,
    optional: true
  },
  loanId: {
    type: String,
    optional: true
  },
  propertyId: {
    type: String,
    optional: true
  },
  borrowerId: {
    type: String,
    optional: true
  }
});
Tasks.attachSchema(TasksSchema);
module.exportDefault(Tasks);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tasksConstants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/tasks/tasksConstants.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  TASK_STATUS: function TASK_STATUS() {
    return _TASK_STATUS;
  },
  TASK_TYPE: function TASK_TYPE() {
    return _TASK_TYPE;
  },
  TASK_QUERIES: function TASK_QUERIES() {
    return _TASK_QUERIES;
  }
});
exports.TASK_STATUS = _TASK_STATUS;
var _TASK_STATUS = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};
var _TASK_TYPE = {
  VERIFY: 'VERIFY',
  AUCTION: 'AUCTION',
  LENDER_CHOSEN: 'LENDER_CHOSEN',
  CUSTOM: 'CUSTOM'
};
var _TASK_QUERIES = {
  TASKS: 'TASKS'
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"users":{"queries":{"adminUserView.expose.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/queries/adminUserView.expose.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var SecurityService = void 0;
module.watch(require("../../security"), {
  default: function _default(v) {
    SecurityService = v;
  }
}, 0);
var query = void 0;
module.watch(require("./adminUserView"), {
  default: function _default(v) {
    query = v;
  }
}, 1);
query.expose({
  firewall: function firewall(userId) {
    SecurityService.checkCurrentUserIsAdmin();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"adminUserView.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/queries/adminUserView.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Users = void 0;

module.watch(require("../../"), {
  Users: function Users(v) {
    _Users = v;
  }
}, 0);

var _USER_QUERIES = void 0;

module.watch(require("../userConstants"), {
  USER_QUERIES: function USER_QUERIES(v) {
    _USER_QUERIES = v;
  }
}, 1);
module.exportDefault(_Users.createQuery(_USER_QUERIES.ADMIN_USER, {
  $filter: function $filter(_ref) {
    var filters = _ref.filters,
        options = _ref.options,
        params = _ref.params;
    filters._id = params._id;
  },
  $options: {
    sort: {
      createdAt: -1
    }
  },
  emails: 1,
  createdAt: 1,
  loans: {
    logic: {
      step: 1
    },
    createdAt: 1,
    updatedAt: 1,
    general: {
      insuranceFortuneUsed: 1,
      fortuneUsed: 1
    },
    property: {
      value: 1,
      address1: 1
    },
    borrowers: {
      firstName: 1,
      lastName: 1
    }
  }
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"adminUsersList.expose.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/queries/adminUsersList.expose.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var SecurityService = void 0;
module.watch(require("../../security"), {
  default: function _default(v) {
    SecurityService = v;
  }
}, 0);
var query = void 0;
module.watch(require("./adminUsersList"), {
  default: function _default(v) {
    query = v;
  }
}, 1);
query.expose({
  firewall: function firewall(userId) {
    SecurityService.checkCurrentUserIsAdmin();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"adminUsersList.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/queries/adminUsersList.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Users = void 0;

module.watch(require("../../"), {
  Users: function Users(v) {
    _Users = v;
  }
}, 0);

var _USER_QUERIES = void 0;

module.watch(require("../userConstants"), {
  USER_QUERIES: function USER_QUERIES(v) {
    _USER_QUERIES = v;
  }
}, 1);
module.exportDefault(_Users.createQuery(_USER_QUERIES.ADMIN_USERS, {
  $options: {
    sort: {
      createdAt: -1
    }
  },
  emails: 1,
  createdAt: 1,
  roles: 1
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"admins.expose.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/queries/admins.expose.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var SecurityService = void 0;
module.watch(require("../../security"), {
  default: function _default(v) {
    SecurityService = v;
  }
}, 0);
var query = void 0;
module.watch(require("./admins"), {
  default: function _default(v) {
    query = v;
  }
}, 1);
query.expose({
  firewall: function firewall(userId) {
    SecurityService.checkCurrentUserIsAdmin();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"admins.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/queries/admins.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Users = void 0;

module.watch(require("../../"), {
  Users: function Users(v) {
    _Users = v;
  }
}, 0);

var _USER_QUERIES = void 0;

module.watch(require("../userConstants"), {
  USER_QUERIES: function USER_QUERIES(v) {
    _USER_QUERIES = v;
  }
}, 1);
module.exportDefault(_Users.createQuery(_USER_QUERIES.ADMINS, {
  $filter: function $filter(_ref) {
    var filters = _ref.filters,
        options = _ref.options,
        params = _ref.params;
    filters.roles = {
      $in: ['admin']
    };
  },
  $options: {
    sort: {
      createdAt: -1
    }
  },
  emails: 1
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"exposures.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/queries/exposures.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./adminUsersList.expose"));
module.watch(require("./adminUserView.expose"));
module.watch(require("./admins.expose"));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"server":{"accounts-server-config.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/server/accounts-server-config.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Accounts = void 0;

module.watch(require("meteor/accounts-base"), {
  Accounts: function Accounts(v) {
    _Accounts = v;
  }
}, 1);

_Accounts.onCreateUser(function (options, user) {
  var newUser = user;

  if (_Meteor.isDevelopment) {
    newUser.roles = 'dev';
  } else {
    newUser.roles = 'user';
  }

  return newUser;
});

_Accounts.config({
  forbidClientAccountCreation: false
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/server/mutations.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Accounts = void 0;

module.watch(require("meteor/accounts-base"), {
  Accounts: function Accounts(v) {
    _Accounts = v;
  }
}, 1);

var _SecurityService = void 0,
    _createMutator = void 0;

module.watch(require("../.."), {
  SecurityService: function SecurityService(v) {
    _SecurityService = v;
  },
  createMutator: function createMutator(v) {
    _createMutator = v;
  }
}, 2);
var defs = void 0;
module.watch(require("../mutationDefinitions"), {
  "*": function _(v) {
    defs = v;
  }
}, 3);

_createMutator(defs.DOES_USER_EXIST, function (_ref) {
  var email = _ref.email;
  return _Accounts.findUserByEmail(email) != null;
});

_createMutator(defs.SEND_VERIFICATION_LINK, function (_ref2) {
  var userId = _ref2.userId;

  if (userId) {
    _SecurityService.checkCurrentUserIsAdmin();
  } else {
    _SecurityService.checkLoggedIn();
  }

  var id = userId || _Meteor.userId();

  if (_Meteor.isDevelopment) {
    console.log("Not sending verification link in development for userId: " + id);
    return false;
  }

  return _Accounts.sendVerificationEmail(id);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publications.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/server/publications.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 1);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 2);

_Meteor.publish('allUsers', function publish() {
  // Verify if the current user is an admin
  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    // Return all users
    return _Meteor.users.find();
  }

  return this.ready();
});

_Meteor.publish('currentUser', function publish() {
  if (_Meteor.userId()) {
    return _Meteor.users.find({
      _id: _Meteor.userId()
    });
  } // Return an empy cursor if not logged in


  return this.ready();
});

_Meteor.publish('user', function publish(userId) {
  _check(userId, String);

  if (_Roles.userIsInRole(_Meteor.userId(), 'admin') || _Roles.userIsInRole(_Meteor.userId(), 'dev')) {
    return _Meteor.users.find({
      _id: userId
    });
  } // Return an empy cursor if not logged in


  return this.ready();
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  userMutations: function userMutations() {
    return _userMutations;
  }
});
module.watch(require("./users"), {
  default: function _default(v) {
    exports.default = v;
  }
}, 1);
exports.userMutations = _userMutations;
var mutationDefinitions = void 0;
module.watch(require("./mutationDefinitions"), {
  "*": function _(v) {
    mutationDefinitions = v;
  }
}, 0);
var _userMutations = mutationDefinitions;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"links.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/links.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Loans = void 0,
    _Users = void 0,
    _Borrowers = void 0;

module.watch(require("../"), {
  Loans: function Loans(v) {
    _Loans = v;
  },
  Users: function Users(v) {
    _Users = v;
  },
  Borrowers: function Borrowers(v) {
    _Borrowers = v;
  }
}, 0);

_Users.addLinks({
  loans: {
    collection: _Loans,
    inversedBy: 'user'
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutationDefinitions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/mutationDefinitions.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  DOES_USER_EXIST: function DOES_USER_EXIST() {
    return _DOES_USER_EXIST;
  },
  SEND_VERIFICATION_LINK: function SEND_VERIFICATION_LINK() {
    return _SEND_VERIFICATION_LINK;
  },
  CREATE_USER: function CREATE_USER() {
    return _CREATE_USER;
  },
  USER_UPDATE: function USER_UPDATE() {
    return _USER_UPDATE;
  },
  USER_REMOVE: function USER_REMOVE() {
    return _USER_REMOVE;
  }
});
exports.DOES_USER_EXIST = _DOES_USER_EXIST;
var _DOES_USER_EXIST = {
  name: 'DOES_USER_EXIST',
  params: {
    email: {
      type: String
    }
  }
};
var _SEND_VERIFICATION_LINK = {
  name: 'SEND_VERIFICATION_LINK',
  params: {
    userId: {
      type: String,
      optional: true
    }
  }
};
var _CREATE_USER = {
  name: 'USER_INSERT',
  params: {
    user: {
      type: Object
    },
    userId: {
      type: String,
      optional: true
    }
  }
};
var _USER_UPDATE = {
  name: 'USER_UPDATE',
  params: {
    userId: {
      type: String
    },
    object: {
      type: Object
    }
  }
};
var _USER_REMOVE = {
  name: 'USER_REMOVE',
  params: {
    userId: {
      type: String
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userConstants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/userConstants.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  ROLES: function ROLES() {
    return _ROLES;
  },
  USER_QUERIES: function USER_QUERIES() {
    return _USER_QUERIES;
  }
});
exports.ROLES = _ROLES;
var _ROLES = {
  USER: 'user',
  ADMIN: 'admin',
  DEV: 'dev',
  LENDER: 'lender'
};
var _USER_QUERIES = {
  ADMIN_USERS: 'ADMIN_USERS',
  ADMIN_USER: 'ADMIN_USER',
  ADMINS: 'ADMINS'
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"users.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/users/users.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var SimpleSchema = void 0;
module.watch(require("simpl-schema"), {
  default: function _default(v) {
    SimpleSchema = v;
  }
}, 0);

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 1);

var _ROLES = void 0;

module.watch(require("./userConstants"), {
  ROLES: function ROLES(v) {
    _ROLES = v;
  }
}, 2);
var UserSchema = new SimpleSchema({
  username: {
    type: String,
    // For accounts-password, either emails or username is required, but not both. It is OK to make this
    // optional here because the accounts-password package does its own validation.
    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.
    optional: true
  },
  emails: {
    type: Array,
    // For accounts-password, either emails or username is required, but not both. It is OK to make this
    // optional here because the accounts-password package does its own validation.
    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.
    optional: true
  },
  'emails.$': {
    type: Object
  },
  'emails.$.address': {
    type: String,
    regEx: SimpleSchema.RegEx.Email
  },
  'emails.$.verified': {
    type: Boolean
  },
  createdAt: {
    type: Date
  },
  // Make sure this services field is in your schema if you're using any of the accounts packages
  services: {
    type: Object,
    optional: true,
    blackbox: true
  },
  // Add `roles` to your schema if you use the meteor-roles package.
  // Option 1: Object type
  // If you specify that type as Object, you must also specify the
  // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.
  // Example:
  // Roles.addUsersToRoles(userId, ["admin"], Roles.GLOBAL_GROUP);
  // You can't mix and match adding with and without a group since
  // you will fail validation in some cases.
  // roles: {
  //   type: Object,
  //   optional: true,
  //   blackbox: true,
  // },
  // Option 2: [String] type
  // If you are sure you will never need to use role groups, then
  // you can specify [String] as the type
  roles: {
    type: Array,
    optional: true
  },
  'roles.$': {
    type: String,
    allowedValues: Object.values(_ROLES)
  },
  // In order to avoid an 'Exception in setInterval callback' from Meteor
  heartbeat: {
    type: Date,
    optional: true
  }
});

_Meteor.users.attachSchema(UserSchema);

var Users = _Meteor.users;
module.exportDefault(Users);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"events":{"EventService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/events/EventService.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventService = undefined;

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  EventService: function EventService() {
    return _EventService;
  }
});

var _EventEmitter = void 0;

module.watch(require("events"), {
  EventEmitter: function EventEmitter(v) {
    _EventEmitter = v;
  }
}, 0);

var _Meteor = void 0;

exports.EventService = _EventService;
module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 1);
var IS_LOGGING = true;

var _EventService = function () {
  function _EventService(_ref) {
    var emmitter = _ref.emmitter;
    (0, _classCallCheck3.default)(this, _EventService);
    this.emmitter = emmitter;
    this.addErrorListener();
  }

  (0, _createClass3.default)(_EventService, [{
    key: "emit",
    value: function emit(eventName, params) {
      this.logEmittedEvent(eventName, params);
      this.emmitter.emit(eventName, params);
    }
  }, {
    key: "emitMutation",
    value: function emitMutation(_ref2, params) {
      var name = _ref2.name;
      this.emit(name, params);
    }
  }, {
    key: "addListener",
    value: function addListener(eventName, listenerFunction) {
      var _this = this;

      this.emmitter.addListener(eventName, function (params) {
        _this.logListener(eventName, params);

        listenerFunction(params);
      });
    }
  }, {
    key: "addMutationListener",
    value: function addMutationListener(_ref3, listenerFunction) {
      var name = _ref3.name;
      this.addListener(name, listenerFunction);
    }
  }, {
    key: "addErrorListener",
    value: function addErrorListener() {
      this.addListener('error', function (error) {
        console.log('An error occured in an event listener:');
        console.log(error);
        throw error;
      });
    }
  }, {
    key: "logEmittedEvent",
    value: function logEmittedEvent(eventName, params) {
      if (IS_LOGGING && _Meteor.isDevelopment && !_Meteor.isTest) {
        console.log("Event \"" + eventName + "\" triggered with params:");
        console.log(params);
      }
    }
  }, {
    key: "logListener",
    value: function logListener(eventName, params) {
      if (IS_LOGGING && _Meteor.isDevelopment && !_Meteor.isTest) {
        console.log("Event \"" + eventName + "\" listened to with params:");
        console.log(params);
      }
    }
  }]);
  return _EventService;
}();

var defaultEmmitter = new _EventEmitter();
module.exportDefault(new _EventService({
  emmitter: defaultEmmitter
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/events/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./EventService"), {
  default: function _default(v) {
    exports.default = v;
  }
}, 0);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"registerListeners.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/events/registerListeners.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("../email/server/emailListeners"));
module.watch(require("../tasks/server/taskListeners"));
module.watch(require("../jobs/server/jobListeners"));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"api-server.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/api-server.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("../fixtures/methods"));
module.watch(require("./adminActions/server/publications"));
module.watch(require("./adminActions/server/methods"));
module.watch(require("./borrowers/server/publications"));
module.watch(require("./borrowers/server/methods"));
module.watch(require("./comparators/server/publications"));
module.watch(require("./comparators/server/methods"));
module.watch(require("./loans/server/publications"));
module.watch(require("./loans/server/methods"));
module.watch(require("./offers/server/publications"));
module.watch(require("./offers/server/methods"));
module.watch(require("./properties/server/publications"));
module.watch(require("./properties/server/methods"));
module.watch(require("./users/server/publications"));
module.watch(require("./users/server/accounts-server-config"));
module.watch(require("./methods/server"));
module.watch(require("./factories"));
module.watch(require("./jobs/server"));
module.watch(require("./files/server/methods"));
module.watch(require("./files/meteor-slingshot-server"));
module.watch(require("../utils/logismata/methods"));
module.watch(require("./email/server"));
module.watch(require("./mutations/server"));
module.watch(require("./events/registerListeners"));
module.watch(require("./links"));
module.watch(require("./loans/queries/exposures"));
module.watch(require("./users/queries/exposures"));
module.watch(require("./tasks/queries/exposures"));
module.watch(require("./borrowers/queries/exposures"));

var _Loans = void 0,
    _Borrowers = void 0,
    _Offers = void 0,
    _Properties = void 0;

module.watch(require("."), {
  Loans: function Loans(v) {
    _Loans = v;
  },
  Borrowers: function Borrowers(v) {
    _Borrowers = v;
  },
  Offers: function Offers(v) {
    _Offers = v;
  },
  Properties: function Properties(v) {
    _Properties = v;
  }
}, 0);

_Loans._ensureIndex({
  userId: 1
});

_Borrowers._ensureIndex({
  userId: 1
});

_Offers._ensureIndex({
  loanId: 1
});

_Properties._ensureIndex({
  userId: 1
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/api.js                                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./factories"));
module.watch(require("./files/meteor-slingshot"));
module.watch(require("./links"));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cleanMethods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/cleanMethods.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var module1 = module;

var _Meteor = void 0;

module1.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Bert = void 0;

module1.watch(require("meteor/themeteorchef:bert"), {
  Bert: function Bert(v) {
    _Bert = v;
  }
}, 1);

// Passed to all methods, shows a Bert error when it happens
var handleResult = function handleResult(result, bertObject) {
  if (_Meteor.isClient && !!bertObject) {
    var delay = bertObject.delay,
        title = bertObject.title,
        message = bertObject.message,
        type = bertObject.type,
        style = bertObject.style;

    if (delay) {
      _Bert.defaults.hideDelay = delay;
    }

    _Bert.alert({
      title: title || "C'est réussi",
      message: message === undefined ? '<h3 class="bert">Bien joué!</h3>' : message,
      type: type || 'success',
      style: style || 'growl-top-right'
    });
  }

  return result;
}; // Passed to all methods, shows a bert alert


var handleError = function handleError(error) {
  if (_Meteor.isClient) {
    _Bert.defaults.hideDelay = 7500;

    _Bert.alert({
      title: 'Misère, une erreur!',
      message: "<h3 class=\"bert\">" + error.message + "</h3>",
      type: 'danger',
      style: 'fixed-top'
    });
  }

  console.log(error); // Throw the error again so that it can be catched again via promise chaining
  // All uses of this module should catch and implement proper fail-safe logic

  throw error;
}; // A wrapper method that displays an error if it occurs


var cleanMethod = function cleanMethod(name, params, bertObject) {
  console.log('cleanmethod!', name, params);
  return new Promise(function (resolve, reject) {
    _Meteor.call(name, params, function (error, result) {
      if (error) {
        reject(handleError(error));
      } else {
        resolve(handleResult(result, bertObject));
      }
    });
  });
};

module1.exportDefault(cleanMethod);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"constants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/constants.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./adminActions/adminActionConstants"), {
  "*": module.makeNsSetter()
}, 0);
module.watch(require("./borrowers/borrowerConstants"), {
  "*": module.makeNsSetter()
}, 1);
module.watch(require("./loans/loanConstants"), {
  "*": module.makeNsSetter()
}, 2);
module.watch(require("./offers/offerConstants"), {
  "*": module.makeNsSetter()
}, 3);
module.watch(require("./users/userConstants"), {
  "*": module.makeNsSetter()
}, 4);
module.watch(require("./properties/propertyConstants"), {
  "*": module.makeNsSetter()
}, 5);
module.watch(require("./files/fileConstants"), {
  "*": module.makeNsSetter()
}, 6);
module.watch(require("./tasks/tasksConstants"), {
  "*": module.makeNsSetter()
}, 7);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"factories.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/factories.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Factory = void 0;

module.watch(require("meteor/dburles:factory"), {
  Factory: function Factory(v) {
    _Factory = v;
  }
}, 1);

var _Loans = void 0,
    _Borrowers = void 0,
    _Offers = void 0,
    _Comparators = void 0,
    _Properties = void 0,
    _AdminActions = void 0;

module.watch(require("."), {
  Loans: function Loans(v) {
    _Loans = v;
  },
  Borrowers: function Borrowers(v) {
    _Borrowers = v;
  },
  Offers: function Offers(v) {
    _Offers = v;
  },
  Comparators: function Comparators(v) {
    _Comparators = v;
  },
  Properties: function Properties(v) {
    _Properties = v;
  },
  AdminActions: function AdminActions(v) {
    _AdminActions = v;
  }
}, 2);
var TEST_EMAIL = 'test@test.com';

_Factory.define('user', _Meteor.users, {
  roles: function roles() {
    return 'user';
  },
  emails: function emails() {
    return [{
      address: TEST_EMAIL,
      verified: false
    }];
  },
  profile: {}
});

_Factory.define('dev', _Meteor.users, {
  roles: function roles() {
    return 'dev';
  },
  emails: function emails() {
    return [{
      address: TEST_EMAIL,
      verified: false
    }];
  },
  profile: {}
});

_Factory.define('admin', _Meteor.users, {
  roles: function roles() {
    return 'admin';
  },
  emails: function emails() {
    return [{
      address: TEST_EMAIL,
      verified: false
    }];
  },
  profile: {}
});

_Factory.define('lender', _Meteor.users, {
  roles: function roles() {
    return 'lender';
  },
  emails: function emails() {
    return [{
      address: TEST_EMAIL,
      verified: false
    }];
  },
  profile: function profile() {
    return {
      organization: 'bankName',
      cantons: ['GE']
    };
  }
});

_Factory.define('borrower', _Borrowers, {
  createdAt: function createdAt() {
    return new Date();
  },
  expenses: function expenses() {
    return [{
      description: 'test',
      value: 1
    }];
  },
  files: function files() {
    return {};
  },
  logic: function logic() {
    return {};
  },
  age: 18
});

_Factory.define('loan', _Loans, {
  createdAt: function createdAt() {
    return new Date();
  },
  general: function general() {
    return {
      fortuneUsed: 250000,
      insuranceFortuneUsed: 0,
      partnersToAvoid: ['joe', 'john']
    };
  },
  borrowers: [],
  status: 'ACTIVE',
  files: function files() {
    return {};
  },
  logic: function logic() {
    return {
      auction: {},
      lender: {},
      verification: {},
      step: 1
    };
  },
  name: function name() {
    return 'loan name';
  },
  emails: function emails() {
    return [];
  }
});

_Factory.define('property', _Properties, {
  value: 1000000,
  files: function files() {
    return {};
  }
});

_Factory.define('offer', _Offers, {
  createdAt: function createdAt() {
    return new Date();
  },
  organization: 'bankName',
  canton: 'GE',
  auctionEndTime: function auctionEndTime() {
    return new Date();
  },
  standardOffer: function standardOffer() {
    return {
      maxAmount: 800000,
      amortization: 0.01,
      interestLibor: 0.01,
      interest1: 0.01,
      interest2: 0.01,
      interest5: 0.01,
      interest10: 0.01
    };
  }
});

_Factory.define('adminAction', _AdminActions, {
  type: 'test',
  status: 'ACTIVE'
});

_Factory.define('comparator', _Comparators, {
  customFields: [],
  customFieldCount: 0,
  hiddenFields: [],
  borrowRatio: 0.8
});

_Factory.define('comparatorProperty', _Properties, {
  name: 'testName',
  address: 'testAddress',
  value: 100000,
  latitude: 10,
  longitude: 20
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/index.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  constants: function constants() {
    return _constants2;
  }
});
module.watch(require("./loans"), {
  default: function _default(v) {
    exports.Loans = v;
  }
}, 1);
module.watch(require("./borrowers"), {
  default: function _default(v) {
    exports.Borrowers = v;
  }
}, 2);
module.watch(require("./offers"), {
  default: function _default(v) {
    exports.Offers = v;
  }
}, 3);
module.watch(require("./properties"), {
  default: function _default(v) {
    exports.Properties = v;
  }
}, 4);
module.watch(require("./comparators"), {
  default: function _default(v) {
    exports.Comparators = v;
  }
}, 5);
module.watch(require("./adminActions"), {
  default: function _default(v) {
    exports.AdminActions = v;
  }
}, 6);
module.watch(require("./users"), {
  default: function _default(v) {
    exports.Users = v;
  }
}, 7);
module.watch(require("./tasks"), {
  default: function _default(v) {
    exports.Tasks = v;
  }
}, 8);
module.watch(require("./security"), {
  default: function _default(v) {
    exports.SecurityService = v;
  }
}, 9);
module.watch(require("./events"), {
  default: function _default(v) {
    exports.EventService = v;
  }
}, 10);
module.watch(require("./mutations"), {
  "*": module.makeNsSetter()
}, 11);

var _constants = void 0;

exports.constants = _constants2;
module.watch(require("./constants"), {
  "*": function _(v) {
    _constants = v;
  }
}, 0);
// Do this for autocompletion...
var _constants2 = _constants;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"links.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/api/links.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./loans/links"));
module.watch(require("./users/links"));
module.watch(require("./tasks/links"));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"utils":{"testHelpers":{"wallaby":{"wallabyDefaults.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/testHelpers/wallaby/wallabyDefaults.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Use old-school javascript in this file to make it work nicely
var packageStubs = [{
  expose: 'meteor',
  src: 'imports/core/utils/testHelpers/meteorStubs'
}];

function setWallabyConfig(name) {
  var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function setupWallaby(wallaby) {
    return (0, _extends3.default)({
      name: name,
      // debug: true, // Use this if things go wrong
      testFramework: 'mocha',
      files: [// load all files in imports
      'imports/**/**.js*', // Don't load node_modules twice
      '!imports/core/node_modules/**', // Don't import unnecessary folders
      '!imports/core/assets/**', // Don't load tests here, but in the next variable
      '!imports/**/*.spec.js*', // For a weird reason wallaby fucks up on .json files
      '!**/*.json'],
      tests: ['imports/**/*.spec.js*', '!imports/core/node_modules/**'],
      compilers: {
        '**/*.js*': wallaby.compilers.babel({
          presets: ['env', 'react', 'stage-0'],
          plugins: [['module-alias', [{
            src: 'imports/core',
            expose: 'core'
          }].concat(packageStubs)]]
        })
      },
      env: {
        type: 'node'
      },
      setup: function setup() {
        global.IS_WALLABY = true;
        global.fetch = require('node-fetch');
      }
    }, overrides);
  };
}

module.exports = setWallabyConfig;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"logismata":{"api.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/logismata/api.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleResponse = undefined;

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

module.export({
  handleResponse: function handleResponse() {
    return _handleResponse;
  },
  getAuthToken: function getAuthToken() {
    return _getAuthToken;
  },
  setToken: function setToken() {
    return _setToken;
  },
  convertParamsToLogismata: function convertParamsToLogismata() {
    return _convertParamsToLogismata;
  },
  convertToLogismataTaxBase: function convertToLogismataTaxBase() {
    return _convertToLogismataTaxBase;
  },
  getParamsArray: function getParamsArray() {
    return _getParamsArray;
  },
  getTaxBase: function getTaxBase() {
    return _getTaxBase;
  },
  callApi: function callApi() {
    return _callApi;
  },
  getLocationId: function getLocationId() {
    return _getLocationId;
  },
  getIndirectAmortization: function getIndirectAmortization() {
    return _getIndirectAmortization;
  },
  getDirectAmortization: function getDirectAmortization() {
    return _getDirectAmortization;
  }
});

var _2 = void 0;

module.watch(require("lodash"), {
  _: function _(v) {
    _2 = v;
  }
}, 0);

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 1);

var constants = void 0,
    _logismataValues = void 0;

module.watch(require("./constants"), {
  default: function _default(v) {
    constants = v;
  },
  logismataValues: function logismataValues(v) {
    _logismataValues = v;
  }
}, 2);
exports.handleResponse = _handleResponse;
var fetch = void 0;

if (_Meteor.isServer) {
  fetch = require('node-fetch');
} else {
  fetch = global.fetch;
}

// Where the current token will be stored
var token = void 0;

var _handleResponse = function _handleResponse(response) {
  if (response.status !== 200) {
    throw response;
  }

  return response.json();
}; /**
    * getAuthToken - verifies if the token exists, and fetches a new one if not
    *
    * @param {String} testKey an optional string used for testing
    *
    * @return {String} The authentication token
    */

var _getAuthToken = function _getAuthToken(testKey) {
  return token ? Promise.resolve(token) : fetch(constants.authUrl(testKey), {
    method: 'GET'
  }).then(_handleResponse).then(function (body) {
    token = body.authToken;
    return body.authToken;
  });
};

var _setToken = function _setToken(authToken) {
  return Promise.resolve(authToken).then(function () {
    token = authToken;
  });
};

var _convertParamsToLogismata = function _convertParamsToLogismata() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var newParams = (0, _extends3.default)({}, params);
  Object.keys(_logismataValues).forEach(function (key) {
    if (params[key] !== undefined) {
      var newValue = _2.findKey(_logismataValues[key], function (val) {
        return val === params[key];
      });

      if (!newValue) {
        throw new Error('invalid logismata value provided');
      }

      newParams[key] = Number(newValue);
    } else {
      newParams[key] = _logismataValues[key].default;
    }
  });
  return newParams;
};

var _convertToLogismataTaxBase = function _convertToLogismataTaxBase(taxBase) {
  var params = _convertParamsToLogismata(taxBase);

  return {
    age: params.age,
    children: params.childrenCount,
    civil: params.civilStatus,
    confession: params.confession,
    gross_fortune: params.grossFortune,
    gross_income: params.grossIncome,
    income_type: params.incomeBase,
    locationid: params.locationId,
    sex: params.sex
  };
};

var _getParamsArray = function _getParamsArray(method, params) {
  var logismataParams = _convertParamsToLogismata(params);

  switch (method) {
    case 'getLocationInfo':
      return [logismataParams.locationId];

    case 'searchLocations':
      return [logismataParams.search, logismataParams.language, logismataParams.country];

    case 'calcTaxableIncomeState': // Same as calcTaxableIncomeCountry

    case 'calcTaxableIncomeCountry':
      return [logismataParams.locationId, logismataParams.age, logismataParams.civilStatus, logismataParams.confession, logismataParams.childrenCount, logismataParams.grossIncome, logismataParams.isEmployee];

    case 'calcTaxableFortune':
      return [logismataParams.locationId, logismataParams.age, logismataParams.civilStatus, logismataParams.childrenCount, logismataParams.grossFortune];

    case 'calcDirectAmortization':
      return ['', // customization
      _convertToLogismataTaxBase(params.taxBase), {
        amortization_goal: logismataParams.amortizationGoal,
        duration: logismataParams.duration,
        has_detailed_amortization: logismataParams.isDetailed,
        rental_value: logismataParams.rentalValue,
        maintenance_costs: logismataParams.maintenanceCosts,
        mortgages: logismataParams.mortgages,
        new_mortgages: logismataParams.newMortgages
      }];

    case 'calcIndirectAmortization':
      return ['', // customization
      _convertToLogismataTaxBase(params.taxBase), {
        amortization_goal: logismataParams.amortizationGoal,
        duration: logismataParams.duration,
        saving_type: logismataParams.savingType,
        saving_interestrate: logismataParams.savingRate,
        saving_amount_manual: false,
        saving_amount: logismataParams.savingAmount,
        rental_value: logismataParams.rentalValue,
        maintenance_costs: logismataParams.maintenanceCosts,
        mortgages: logismataParams.mortgages,
        new_mortgages: logismataParams.newMortgages
      }];

    default:
      throw new Error('invalid logismata method name');
  }
};

var _getTaxBase = function _getTaxBase(data) {};

var _callApi = function _callApi(method, params) {
  var data = JSON.stringify({
    authToken: token,
    loan: {
      method: method,
      // Stringify objects in the array, do not stringify strings once again
      params: [].concat(_toConsumableArray(_getParamsArray(method, params).map(function (i) {
        return (typeof i === "undefined" ? "undefined" : (0, _typeof3.default)(i)) === 'object' ? JSON.stringify(i) : i;
      })))
    }
  });
  return fetch(constants.calcUrl(), {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
      Accept: '*/*'
    },
    body: data
  }).then(function (response) {
    return response.json();
  });
};

var _getLocationId = function _getLocationId(search) {
  return _callApi('searchLocations', {
    search: search,
    country: 'CH',
    language: 'all'
  }).then(function (result) {
    if (result.response && result.response.length) {
      return result.response[result.response.length - 1].id;
    }

    throw new Error('Could not find locationId through logismata');
  });
};

var _getIndirectAmortization = function _getIndirectAmortization() {};

var _getDirectAmortization = function _getDirectAmortization() {};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_key.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/logismata/api_key.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.exportDefault('standard');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"constants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/logismata/constants.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  logismataValues: function logismataValues() {
    return _logismataValues;
  }
});
var api_key = void 0;
module.watch(require("./api_key"), {
  default: function _default(v) {
    api_key = v;
  }
}, 0);
var key = api_key;
exports.logismataValues = _logismataValues;
module.exportDefault({
  host: 'https://uat.logismata.ch',
  authUrl: function authUrl(testKey) {
    return this.host + "/puma/authentication/" + (testKey || key) + "/createToken";
  },
  calcUrl: function calcUrl() {
    return this.host + "/puma/calculator/onlinetax/calculate";
  },
  calcUrl2: function calcUrl2() {
    return 'https://hookb.in/vLNmVA3y';
  }
});
var _logismataValues = {
  civilStatus: {
    default: 2,
    2: 'single',
    3: 'concubinage',
    4: 'married',
    7: 'registered partnership'
  },
  confession: {
    default: 'other',
    1: 'reformed',
    2: 'roman catholic',
    3: 'christian catholic',
    4: 'undenominational',
    5: 'other'
  },
  incomeBase: {
    default: 1,
    1: 'gross income',
    2: 'taxable income'
  },
  sex: {
    default: 1,
    1: 'male',
    2: 'female'
  },
  country: {
    default: 0,
    0: 'all',
    756: 'CH',
    438: 'LI'
  },
  language: {
    default: 0,
    0: 'all',
    1: 'german',
    2: 'french',
    3: 'italien'
  },
  mortgageType: {
    default: 2,
    1: 'Variable Rate',
    2: 'Fixed Rate',
    3: 'Libor'
  },
  savingType: {
    default: 1,
    1: 'Saving 3a',
    2: 'Saving 3b/Assets'
  },
  existingOrNew: {
    default: 1,
    0: 'existing',
    1: 'new'
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/logismata/methods.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  getLogismataToken: function getLogismataToken() {
    return _getLogismataToken;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _ValidatedMethod = void 0;

module.watch(require("meteor/mdg:validated-method"), {
  ValidatedMethod: function ValidatedMethod(v) {
    _ValidatedMethod = v;
  }
}, 1);
exports.getLogismataToken = _getLogismataToken;

var _CallPromiseMixin = void 0;

module.watch(require("meteor/didericis:callpromise-mixin"), {
  CallPromiseMixin: function CallPromiseMixin(v) {
    _CallPromiseMixin = v;
  }
}, 2);

var _getAuthToken = void 0;

module.watch(require("./api"), {
  getAuthToken: function getAuthToken(v) {
    _getAuthToken = v;
  }
}, 3);

var _getLogismataToken = new _ValidatedMethod({
  name: 'getLogismataToken',
  mixins: [_CallPromiseMixin],
  validate: null,
  run: function run() {
    return _Meteor.isServer && _getAuthToken();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"analytics.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/analytics.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  allowTracking: function allowTracking() {
    return _allowTracking;
  },
  addUserTracking: function addUserTracking() {
    return _addUserTracking;
  },
  trackOncePerSession: function trackOncePerSession() {
    return _trackOncePerSession;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _analytics = void 0;

exports.allowTracking = _allowTracking;
module.watch(require("meteor/okgrow:analytics"), {
  analytics: function analytics(v) {
    _analytics = v;
  }
}, 1);

var _storageAvailable = void 0,
    _isDemo = void 0;

module.watch(require("./browserFunctions"), {
  storageAvailable: function storageAvailable(v) {
    _storageAvailable = v;
  },
  isDemo: function isDemo(v) {
    _isDemo = v;
  }
}, 2);

/**
 * allowTracking - Prevents tracking during tests and on a demo website
 *
 * @return {Boolean}
 */var _allowTracking = function _allowTracking() {
  if (_isDemo()) {
    return false;
  } else if (_Meteor.isTest) {
    return false;
  }

  return true;
};

var _addUserTracking = function _addUserTracking(userId, metadata) {
  if (!userId) {
    throw new Error('no tracking identification userId provided');
  }

  if (_allowTracking()) {
    _analytics.identify(userId, metadata);
  }
};

var track = function track(eventName, metadata) {
  if (!eventName) {
    throw new Error('no tracking eventName provided');
  }

  if (_allowTracking()) {
    _analytics.track(eventName, metadata);
  }
};

module.exportDefault(track);

var _trackOncePerSession = function _trackOncePerSession(eventName, metadata) {
  var localId = "epotek-tracking." + eventName; // Make sure we can use sessionStorage

  if (_storageAvailable('sessionStorage')) {
    var localTracked = sessionStorage.getItem(localId);

    if (!localTracked) {
      // If this id has never been tracked in localStorage, track
      track(eventName, metadata);
      sessionStorage.setItem(localId, eventName);
    } else {
      return false;
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"borrowerFunctions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/borrowerFunctions.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

module.export({
  getFortune: function getFortune() {
    return _getFortune;
  },
  getInsuranceFortune: function getInsuranceFortune() {
    return _getInsuranceFortune;
  },
  getBorrowerCompletion: function getBorrowerCompletion() {
    return _getBorrowerCompletion;
  },
  getBonusIncome: function getBonusIncome() {
    return _getBonusIncome;
  },
  getArrayValues: function getArrayValues() {
    return _getArrayValues;
  },
  getOtherIncome: function getOtherIncome() {
    return _getOtherIncome;
  },
  getExpenses: function getExpenses() {
    return _getExpenses;
  },
  getBorrowerIncome: function getBorrowerIncome() {
    return _getBorrowerIncome;
  },
  getTotalFortune: function getTotalFortune() {
    return _getTotalFortune;
  },
  getRealEstateFortune: function getRealEstateFortune() {
    return _getRealEstateFortune;
  },
  getRealEstateValue: function getRealEstateValue() {
    return _getRealEstateValue;
  },
  getRealEstateDebt: function getRealEstateDebt() {
    return _getRealEstateDebt;
  },
  getBorrowerSalary: function getBorrowerSalary() {
    return _getBorrowerSalary;
  }
});

var _personalInfoPercent = void 0,
    _filesPercent = void 0;

module.watch(require("../arrays/steps"), {
  personalInfoPercent: function personalInfoPercent(v) {
    _personalInfoPercent = v;
  },
  filesPercent: function filesPercent(v) {
    _filesPercent = v;
  }
}, 0);

var _borrowerFiles = void 0;

exports.getFortune = _getFortune;
module.watch(require("../api/files/files"), {
  borrowerFiles: function borrowerFiles(v) {
    _borrowerFiles = v;
  }
}, 1);

var _arrayify = void 0;

module.watch(require("./general"), {
  arrayify: function arrayify(v) {
    _arrayify = v;
  }
}, 2);

var _getFortune = function _getFortune(_ref) {
  var borrowers = _ref.borrowers;
  var array = [];

  _arrayify(borrowers).forEach(function (b) {
    array.push(b.bankFortune);
  });

  return array.reduce(function (tot, val) {
    return val > 0 && tot + val || tot;
  }, 0);
};

var _getInsuranceFortune = function _getInsuranceFortune(_ref2) {
  var borrowers = _ref2.borrowers;
  var array = [];

  _arrayify(borrowers).forEach(function (b) {
    array.push(b.insuranceSecondPillar);
    array.push(b.insuranceThirdPillar);
  });

  return array.reduce(function (tot, val) {
    return val > 0 && tot + val || tot;
  }, 0);
};

var _getBorrowerCompletion = function _getBorrowerCompletion(_ref3) {
  var borrower = _ref3.borrower;
  return (_filesPercent([borrower], _borrowerFiles, 'auction') + _personalInfoPercent([borrower]) + (borrower.logic.hasValidatedFinances ? 1 : 0)) / 3;
};

var _getBonusIncome = function _getBonusIncome(_ref4) {
  var borrowers = _ref4.borrowers;
  var total = 0;

  _arrayify(borrowers).forEach(function (borrower) {
    if (borrower.bonus) {
      var arr = Object.keys(borrower.bonus).map(function (key) {
        return borrower.bonus[key];
      });

      if (arr.length < 1) {
        return;
      } else if (arr.length > 4) {
        throw new Error('too many bonuses provided');
      }

      arr = arr.map(function (v) {
        return v || 0;
      }); // Sum all values, remove the lowest one, and return 50% of their average

      var sum = arr.reduce(function (tot, val) {
        return tot + val;
      }, 0);

      if (arr.length > 3) {
        sum -= Math.min.apply(Math, _toConsumableArray(arr));
      }

      total = 0.5 * (sum / Math.min(3, arr.length)) || 0;
    }
  });

  return Math.max(0, Math.round(total));
};

var _getArrayValues = function _getArrayValues(_ref5, key, mapFunc) {
  var borrowers = _ref5.borrowers;
  var sum = 0;

  _arrayify(borrowers).forEach(function (borrower) {
    if (!borrower[key]) {
      return 0;
    }

    sum += [].concat(_toConsumableArray(borrower[key] ? borrower[key].map(mapFunc || function (i) {
      return i.value;
    }) : [])).reduce(function (tot, val) {
      return val > 0 && tot + val || tot;
    }, 0);
  });

  return Math.max(0, Math.round(sum));
};

var _getOtherIncome = function _getOtherIncome(_ref6) {
  var borrowers = _ref6.borrowers;
  return _getArrayValues({
    borrowers: borrowers
  }, 'otherIncome');
};

var _getExpenses = function _getExpenses(_ref7) {
  var borrowers = _ref7.borrowers;
  return _getArrayValues({
    borrowers: borrowers
  }, 'expenses');
};

var _getBorrowerIncome = function _getBorrowerIncome(_ref8) {
  var borrowers = _ref8.borrowers;
  var sum = 0;

  _arrayify(borrowers).forEach(function (borrower) {
    sum += borrower.salary || 0;
    sum += _getBonusIncome({
      borrowers: borrower
    }) || 0;
    sum += _getOtherIncome({
      borrowers: borrower
    }) || 0;
    sum -= _getExpenses({
      borrowers: borrower
    }) || 0;
  });

  return Math.max(sum, 0);
};

var _getTotalFortune = function _getTotalFortune(_ref9) {
  var borrowers = _ref9.borrowers;
  var sum = 0;

  _arrayify(borrowers).forEach(function (borrower) {
    sum += borrower.bankFortune || 0;
    sum += borrower.insuranceSecondPillar || 0;
    sum += borrower.insuranceThirdPillar || 0; // TODO: Complete with all fortune fields !!
  });

  return Math.max(0, Math.round(sum));
};

var _getRealEstateFortune = function _getRealEstateFortune(_ref10) {
  var borrowers = _ref10.borrowers;
  return _getArrayValues({
    borrowers: borrowers
  }, 'realEstate', function (i) {
    return i.value - i.loan;
  });
};

var _getRealEstateValue = function _getRealEstateValue(_ref11) {
  var borrowers = _ref11.borrowers;
  return _getArrayValues({
    borrowers: borrowers
  }, 'realEstate');
};

var _getRealEstateDebt = function _getRealEstateDebt(_ref12) {
  var borrowers = _ref12.borrowers;
  return _getArrayValues({
    borrowers: borrowers
  }, 'realEstate', function (i) {
    return i.loan;
  });
};

var _getBorrowerSalary = function _getBorrowerSalary(_ref13) {
  var borrowers = _ref13.borrowers;
  return _arrayify(borrowers).reduce(function (t, b) {
    return t + (b.salary || 0);
  }, 0);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"browserFunctions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/browserFunctions.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  getWidth: function getWidth() {
    return _getWidth;
  },
  isDemo: function isDemo() {
    return _isDemo;
  },
  isWww: function isWww() {
    return _isWww;
  },
  isApp: function isApp() {
    return _isApp;
  },
  isAdmin: function isAdmin() {
    return _isAdmin;
  },
  isLender: function isLender() {
    return _isLender;
  },
  storageAvailable: function storageAvailable() {
    return _storageAvailable;
  },
  easeOut: function easeOut() {
    return _easeOut;
  }
});
exports.getWidth = _getWidth;

var _getWidth = function _getWidth() {
  if (global.window) {
    var w = window;
    var d = document;
    var documentElement = d.documentElement;
    var body = d.getElementsByTagName('body')[0];
    return w.innerWidth || documentElement.clientWidth || body.clientWidth;
  }
};

var getSubdomain = function getSubdomain() {
  if (global.window) {
    var fullPath = window.location.host; // window.location.host is subdomain.domain.com

    return fullPath.split('.')[0];
  }
};

var _isDemo = function _isDemo() {
  return getSubdomain() === 'demo';
};

var _isWww = function _isWww() {
  return getSubdomain() === 'www';
};

var _isApp = function _isApp() {
  return getSubdomain() === 'app';
};

var _isAdmin = function _isAdmin() {
  return getSubdomain() === 'admin';
};

var _isLender = function _isLender() {
  return getSubdomain() === 'lender';
};

var _storageAvailable = function _storageAvailable(type) {
  try {
    var storage = window[type];
    var x = '__storage_test__';
    storage.setItem(x, x);
    storage.removeItem(x);
    return true;
  } catch (e) {
    return false;
  }
};

var _easeOut = function _easeOut(min, max, intervals) {
  var diff = 1 / intervals;
  var difference = max - min;
  var curve = [];

  for (var i = diff; i <= 1; i += diff) {
    curve.push(min + difference * Math.pow(i, 0.48));
  }

  return curve;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"finance-math.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/finance-math.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  getYearsToRetirement: function getYearsToRetirement() {
    return _getYearsToRetirement;
  },
  getAmortization: function getAmortization() {
    return _getAmortization;
  },
  getInterests: function getInterests() {
    return _getInterests;
  },
  getMonthlyPayment: function getMonthlyPayment() {
    return _getMonthlyPayment;
  },
  getTheoreticalMonthly: function getTheoreticalMonthly() {
    return _getTheoreticalMonthly;
  },
  getIncomeRatio: function getIncomeRatio() {
    return _getIncomeRatio;
  },
  canAffordRank1: function canAffordRank1() {
    return _canAffordRank;
  }
});

var _GENDER = void 0,
    _USAGE_TYPE = void 0;

module.watch(require("../api/constants"), {
  GENDER: function GENDER(v) {
    _GENDER = v;
  },
  USAGE_TYPE: function USAGE_TYPE(v) {
    _USAGE_TYPE = v;
  }
}, 0);
var constants = void 0;
module.watch(require("../config/constants"), {
  default: function _default(v) {
    constants = v;
  }
}, 1);

var _getLoanValue = void 0,
    _getPropAndWork = void 0,
    _getMaintenance = void 0,
    _getFees = void 0;

exports.getYearsToRetirement = _getYearsToRetirement;
module.watch(require("./loanFunctions"), {
  getLoanValue: function getLoanValue(v) {
    _getLoanValue = v;
  },
  getPropAndWork: function getPropAndWork(v) {
    _getPropAndWork = v;
  },
  getMaintenance: function getMaintenance(v) {
    _getMaintenance = v;
  },
  getFees: function getFees(v) {
    _getFees = v;
  }
}, 2);

var _getFortune = void 0,
    _getInsuranceFortune = void 0,
    _getTotalFortune = void 0,
    _getBorrowerIncome = void 0;

module.watch(require("./borrowerFunctions"), {
  getFortune: function getFortune(v) {
    _getFortune = v;
  },
  getInsuranceFortune: function getInsuranceFortune(v) {
    _getInsuranceFortune = v;
  },
  getTotalFortune: function getTotalFortune(v) {
    _getTotalFortune = v;
  },
  getBorrowerIncome: function getBorrowerIncome(v) {
    _getBorrowerIncome = v;
  }
}, 3);

var _arrayify = void 0;

module.watch(require("./general"), {
  arrayify: function arrayify(v) {
    _arrayify = v;
  }
}, 4);

// Determine retirement age depending on the gender of the borrowers
// Return a positive value only, negative values rounded to 0
var _getYearsToRetirement = function _getYearsToRetirement(age1, age2, gender1, gender2) {
  var retirement1 = gender1 === _GENDER.F ? 64 : 65;
  var retirement2 = null;

  if (gender2) {
    retirement2 = gender2 === _GENDER.F ? 64 : 65;
  } // Substract age to determine remaining time to retirement for both borrowers


  var toRetirement1 = retirement1 - age1;
  var toRetirement2 = void 0;

  if (retirement2 && age2) {
    toRetirement2 = retirement2 - age2;
  } // Get the most limiting time to retirement for both borrowers, in years


  var yearsToRetirement = void 0;

  if (toRetirement2) {
    yearsToRetirement = Math.min(toRetirement1, toRetirement2);
  } else {
    yearsToRetirement = toRetirement1;
  }

  return Math.max(yearsToRetirement, 0);
}; // get monthly amortization for a loan loan


var _getAmortization = function _getAmortization(_ref) {
  var loan = _ref.loan,
      borrowers = _ref.borrowers,
      property = _ref.property;

  var loanValue = _getLoanValue({
    loan: loan,
    property: property
  });

  var propAndWork = _getPropAndWork({
    loan: loan,
    property: property
  });

  var safeBorrowers = _arrayify(borrowers);

  var yearsToRetirement = _getYearsToRetirement(safeBorrowers[0] ? Number(safeBorrowers[0].age) : undefined, safeBorrowers[1] && safeBorrowers[1].age ? Number(safeBorrowers[1].age) : 0, safeBorrowers[0] ? safeBorrowers[0].gender : undefined, safeBorrowers[1] && safeBorrowers[1].gender); // fallback if the loan is smaller than 0


  if (loanValue <= 0) {
    return 0;
  }

  var loanPercent = loanValue / propAndWork;
  var yearlyAmortization = 0;
  var remainingYears = Math.min(yearsToRetirement, 15);

  if (loanPercent > 0.65) {
    // The loan has to be below 65% before 15 years or before retirement,
    // whichever comes first
    var amountToAmortize = (loanPercent - 0.65) * propAndWork; // Make sure we don't create a black hole, or use negative values by error

    if (remainingYears > 0) {
      // Amortization is the amount to amortize divided by the amount
      // of years before the deadline
      yearlyAmortization = amountToAmortize / remainingYears;
    }
  } else {// For projects below 65%, stop amortizing
    // yearlyAmortization = propAndWork * constants.amortization;
  }

  return {
    amortization: yearlyAmortization / 12,
    years: remainingYears
  };
};

var _getInterests = function _getInterests(_ref2, rate, loanValue) {
  var loan = _ref2.loan,
      property = _ref2.property;
  loanValue = loanValue || _getLoanValue({
    loan: loan,
    property: property
  });

  if (loanValue <= 0) {
    throw new Error('negative loan');
  } // Use a base interest rate of 1.5%


  var interests = rate || 0.015;
  return loanValue * interests / 12;
};

var _getMonthlyPayment = function _getMonthlyPayment(_ref3) {
  var loan = _ref3.loan,
      borrowers = _ref3.borrowers,
      property = _ref3.property;

  var interests = _getInterests({
    loan: loan,
    property: property
  });

  var _getAmortization2 = _getAmortization({
    loan: loan,
    borrowers: borrowers,
    property: property
  }),
      amortization = _getAmortization2.amortization;

  var maintenance = _getMaintenance({
    loan: loan,
    property: property
  });

  return {
    total: amortization + interests + maintenance,
    amortization: amortization,
    interests: interests,
    maintenance: maintenance
  };
};

var _getTheoreticalMonthly = function _getTheoreticalMonthly(_ref4) {
  var loan = _ref4.loan,
      borrowers = _ref4.borrowers,
      property = _ref4.property;
  var maintenance = _getPropAndWork({
    loan: loan,
    property: property
  }) * constants.maintenance / 12;

  var loanValue = _getLoanValue({
    loan: loan,
    property: property
  });

  var interests = loanValue * constants.interests / 12;

  var _getAmortization3 = _getAmortization({
    loan: loan,
    borrowers: borrowers,
    property: property
  }),
      amortization = _getAmortization3.amortization;

  return {
    total: amortization + interests + maintenance,
    amortization: amortization,
    interests: interests,
    maintenance: maintenance
  };
};

var _getIncomeRatio = function _getIncomeRatio(_ref5) {
  var loan = _ref5.loan,
      borrowers = _ref5.borrowers,
      property = _ref5.property;

  var monthlyPayment = _getTheoreticalMonthly({
    loan: loan,
    borrowers: borrowers,
    property: property
  }).total;

  var borrowerIncome = _getBorrowerIncome({
    borrowers: borrowers
  }) / 12; // Add infinity check

  if (borrowerIncome > 0) {
    return monthlyPayment / borrowerIncome;
  }

  return '-';
};

var _canAffordRank = function _canAffordRank(_ref6) {
  var loan = _ref6.loan,
      borrowers = _ref6.borrowers,
      property = _ref6.property;

  var propAndWork = _getPropAndWork({
    loan: loan,
    property: property
  });

  var totalFortune = _getTotalFortune({
    borrowers: borrowers
  });

  var fortune = _getFortune({
    borrowers: borrowers
  });

  var insuranceFortune = _getInsuranceFortune({
    borrowers: borrowers
  });

  var fortuneRequired = 0.35 * propAndWork + property.value * constants.notaryFees;

  if (fortune >= fortuneRequired) {
    return true;
  }

  if (loan.general && loan.general.usageType === _USAGE_TYPE.PRIMARY) {
    if (fortune + insuranceFortune >= fortuneRequired) {
      // ignore lppFees
      return true;
    }
  }

  return false;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"general.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/general.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  arrayify: function arrayify() {
    return _arrayify;
  }
});
var isArray = void 0;
exports.arrayify = _arrayify;
module.watch(require("lodash/isArray"), {
  default: function _default(v) {
    isArray = v;
  }
}, 0);

var _arrayify = function _arrayify(value) {
  return value ? isArray(value) ? value : [value] : [];
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"generate-pdf.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/generate-pdf.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  generateComponentAsPDF: function generateComponentAsPDF() {
    return _generateComponentAsPDF;
  }
});
var ReactDOMServer = void 0;
module.watch(require("react-dom/server"), {
  default: function _default(v) {
    ReactDOMServer = v;
  }
}, 0);
var pdf = void 0;
module.watch(require("html-pdf"), {
  default: function _default(v) {
    pdf = v;
  }
}, 1);
var fs = void 0;
module.watch(require("fs"), {
  default: function _default(v) {
    fs = v;
  }
}, 2);
var thisModule = void 0;

var getBase64String = function getBase64String(path) {
  try {
    var file = fs.readFileSync(path);
    return new Buffer(file).toString('base64');
  } catch (exception) {
    thisModule.reject(exception);
  }
};

exports.generateComponentAsPDF = _generateComponentAsPDF;

var generatePDF = function generatePDF(html, fileName) {
  try {
    pdf.create(html, {
      format: 'A4',
      border: {
        top: '1in',
        right: '1in',
        bottom: '1in',
        left: '1in'
      }
    }).toFile("./tmp/" + fileName, function (error, response) {
      if (error) {
        thisModule.reject(error);
      } else {
        thisModule.resolve({
          fileName: fileName,
          base64: getBase64String(response.filename)
        });
        fs.unlink(response.filename);
      }
    });
  } catch (exception) {
    thisModule.reject(exception);
  }
};

var getComponentAsHTML = function getComponentAsHTML(component, props) {
  try {
    return ReactDOMServer.renderToStaticMarkup(component(props));
  } catch (exception) {
    thisModule.reject(exception);
  }
};

var handler = function handler(_ref, promise) {
  var component = _ref.component,
      props = _ref.props,
      fileName = _ref.fileName;
  thisModule = promise;
  var html = getComponentAsHTML(component, props);

  if (html && fileName) {
    generatePDF(html, fileName);
  }
};

var _generateComponentAsPDF = function _generateComponentAsPDF(options) {
  return new Promise(function (resolve, reject) {
    return handler(options, {
      resolve: resolve,
      reject: reject
    });
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"intl.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/intl.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var IntlMessageFormat = void 0;
module.watch(require("intl-messageformat"), {
  default: function _default(v) {
    IntlMessageFormat = v;
  }
}, 0);

var _getUserLocale = void 0,
    _getFormats = void 0;

module.watch(require("./localization"), {
  getUserLocale: function getUserLocale(v) {
    _getUserLocale = v;
  },
  getFormats: function getFormats(v) {
    _getFormats = v;
  }
}, 1);
var messagesFR = void 0;
module.watch(require("../lang/fr.json"), {
  default: function _default(v) {
    messagesFR = v;
  }
}, 2);

/**
 * formatMessage - A server-side method to use the intl package
 *
 * @param {type}   id          the id of the message
 * @param {object} [values={}] any additional values you want to use in the
 * string
 *
 * @return {type} The formatted string
 */var formatMessage = function formatMessage(id) {
  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var customFallback = arguments[2];

  if (id === undefined) {
    throw new Error('an id is required in formatMessage');
  }

  var message = new IntlMessageFormat(messagesFR[id] || (customFallback !== undefined ? customFallback : id), _getUserLocale());
  return message.format(values);
};

module.exportDefault(formatMessage);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"loadable.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/loadable.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  default: function _default() {
    return MyLoadable;
  }
});
var Loadable = void 0;
module.watch(require("react-loadable"), {
  default: function _default(v) {
    Loadable = v;
  }
}, 0);

var _LoadingComponent = void 0;

module.watch(require("../components/Loading"), {
  LoadingComponent: function LoadingComponent(v) {
    _LoadingComponent = v;
  }
}, 1);

function MyLoadable(options) {
  return Loadable((0, _extends3.default)({
    loading: _LoadingComponent,
    delay: 200
  }, options));
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"loanFunctions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/loanFunctions.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getProjectValue = undefined;

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  getProjectValue: function getProjectValue() {
    return _getProjectValue;
  },
  getLoanValue: function getLoanValue() {
    return _getLoanValue;
  },
  loanStrategySuccess: function loanStrategySuccess() {
    return _loanStrategySuccess;
  },
  strategiesChosen: function strategiesChosen() {
    return _strategiesChosen;
  },
  getInterestsWithOffer: function getInterestsWithOffer() {
    return _getInterestsWithOffer;
  },
  getMonthlyWithOffer: function getMonthlyWithOffer() {
    return _getMonthlyWithOffer;
  },
  getMonthlyWithExtractedOffer: function getMonthlyWithExtractedOffer() {
    return _getMonthlyWithExtractedOffer;
  },
  getPropAndWork: function getPropAndWork() {
    return _getPropAndWork;
  },
  getTotalUsed: function getTotalUsed() {
    return _getTotalUsed;
  },
  getBorrowRatio: function getBorrowRatio() {
    return _getBorrowRatio;
  },
  getLenderCount: function getLenderCount() {
    return _getLenderCount;
  },
  disableForms: function disableForms() {
    return _disableForms;
  },
  getFees: function getFees() {
    return _getFees;
  },
  isLoanValid: function isLoanValid() {
    return _isLoanValid;
  },
  getPropertyCompletion: function getPropertyCompletion() {
    return _getPropertyCompletion;
  },
  validateRatios: function validateRatios() {
    return _validateRatios;
  },
  validateRatiosCompletely: function validateRatiosCompletely() {
    return _validateRatiosCompletely;
  },
  getMaintenance: function getMaintenance() {
    return _getMaintenance;
  },
  strategyDone: function strategyDone() {
    return _strategyDone;
  },
  getAuctionEndTime: function getAuctionEndTime() {
    return _getAuctionEndTime;
  }
});
var moment = void 0;
module.watch(require("moment"), {
  default: function _default(v) {
    moment = v;
  }
}, 0);
var constants = void 0;
module.watch(require("../config/constants"), {
  default: function _default(v) {
    constants = v;
  }
}, 1);

var _USAGE_TYPE = void 0,
    _LOAN_STRATEGY_PRESET = void 0,
    _OFFER_TYPE = void 0;

module.watch(require("../api/constants"), {
  USAGE_TYPE: function USAGE_TYPE(v) {
    _USAGE_TYPE = v;
  },
  LOAN_STRATEGY_PRESET: function LOAN_STRATEGY_PRESET(v) {
    _LOAN_STRATEGY_PRESET = v;
  },
  OFFER_TYPE: function OFFER_TYPE(v) {
    _OFFER_TYPE = v;
  }
}, 2);
exports.getProjectValue = _getProjectValue;

var _getIncomeRatio = void 0;

module.watch(require("./finance-math"), {
  getIncomeRatio: function getIncomeRatio(v) {
    _getIncomeRatio = v;
  }
}, 3);

var _propertyPercent = void 0,
    _filesPercent = void 0;

module.watch(require("../arrays/steps"), {
  propertyPercent: function propertyPercent(v) {
    _propertyPercent = v;
  },
  filesPercent: function filesPercent(v) {
    _filesPercent = v;
  }
}, 4);

var _loanFiles = void 0,
    _propertyFiles = void 0;

module.watch(require("../api/files/files"), {
  loanFiles: function loanFiles(v) {
    _loanFiles = v;
  },
  propertyFiles: function propertyFiles(v) {
    _propertyFiles = v;
  }
}, 5);

var _getProjectValue = function _getProjectValue(_ref) {
  var loan = _ref.loan,
      property = _ref.property;

  if (!property || !property.value) {
    return 0;
  } else if (property.value <= 0) {
    return 0;
  }

  var value = property.value * (1 + constants.notaryFees) + (loan.general.propertyWork || 0);

  if (loan.general.usageType === _USAGE_TYPE.PRIMARY) {
    value += (loan.general.insuranceFortuneUsed || 0) * constants.lppFees;
  }

  return Math.max(0, Math.round(value));
};

var _getLoanValue = function _getLoanValue(_ref2, roundedTo10000) {
  var loan = _ref2.loan,
      property = _ref2.property;

  if (!loan || !loan.general) {
    return 0;
  }

  var value = _getProjectValue({
    loan: loan,
    property: property
  }) - (loan.general.fortuneUsed || 0);

  if (loan.general.usageType === _USAGE_TYPE.PRIMARY) {
    value -= loan.general.insuranceFortuneUsed || 0;
  } // Do this when picking tranches


  if (roundedTo10000) {
    value = Math.round(value / 10000) * 10000;
  } // Check negative values


  return Math.max(0, Math.round(value));
};

var _loanStrategySuccess = function _loanStrategySuccess() {
  var loanTranches = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var loanValue = arguments[1];

  if (!Number.isInteger(loanValue)) {
    throw new Error('loanValue must be an integer');
  }

  if (loanTranches.length < 1) {
    return false;
  } // User has to choose a preset


  var trancheSum = loanTranches.reduce(function (tot, tranche) {
    return tranche.value + tot;
  }, 0);

  if (trancheSum === loanValue) {
    // If the sum of all tranches is equal to the loan, success!
    return true;
  }

  return false;
};

var _strategiesChosen = function _strategiesChosen(_ref3) {
  var loan = _ref3.loan,
      property = _ref3.property;
  return _loanStrategySuccess(loan.general.loanTranches, _getLoanValue({
    loan: loan,
    property: property
  })) && loan.logic.amortizationStrategyPreset && loan.logic.hasValidatedCashStrategy;
};

var _getInterestsWithOffer = function _getInterestsWithOffer(_ref4) {
  var loan = _ref4.loan,
      offer = _ref4.offer;
  var isStandard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (!offer) {
    return 0;
  }

  var tranches = loan.general.loanTranches;
  var interestRates = isStandard ? offer.standardOffer : offer.counterpartOffer;
  var interests = 0;
  tranches.every(function (tranche) {
    var rate = interestRates[tranche.type]; // If the lender doesn't have this interest rate, return false

    if (!rate) {
      interests = -1; // break loop

      return false;
    }

    interests += tranche.value * rate;
    return true;
  });
  return interests >= 0 ? Math.round(interests / 12) : interests;
};

var _getMonthlyWithOffer = function _getMonthlyWithOffer(_ref5) {
  var loan = _ref5.loan,
      property = _ref5.property,
      offer = _ref5.offer;
  var isStandard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var fortuneUsed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var insuranceFortuneUsed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

  // Return undefined if the counterpartOffer doesn't exist
  if (!isStandard && !offer.counterpartOffer) {
    return undefined;
  } // Make a copy of the loan


  var r = (0, _extends3.default)({}, loan, {
    general: (0, _extends3.default)({}, loan.general, {
      fortuneUsed: fortuneUsed || loan.general.fortuneUsed,
      insuranceFortuneUsed: insuranceFortuneUsed || loan.general.insuranceFortuneUsed
    })
  }); // Modify it to include additional parameters
  // r.general.fortuneUsed = fortuneUsed || r.general.fortuneUsed;
  // r.general.insuranceFortuneUsed =
  //   insuranceFortuneUsed || r.general.insuranceFortuneUsed;

  var loanValue = _getLoanValue({
    loan: r,
    property: property
  });

  var maintenance = constants.maintenanceReal * (property.value + (r.general.propertyWork || 0));
  var amortization = isStandard ? offer.standardOffer.amortization : offer.counterpartOffer.amortization;
  amortization = amortization || constants.amortization;

  var interests = _getInterestsWithOffer({
    loan: r,
    offer: offer
  }, isStandard);

  return interests >= 0 ? Math.round((maintenance + loanValue * amortization + interests) / 12) || 0 : 0;
};

var _getMonthlyWithExtractedOffer = function _getMonthlyWithExtractedOffer(_ref6) {
  var loan = _ref6.loan,
      offer = _ref6.offer,
      property = _ref6.property;
  return _getMonthlyWithOffer({
    loan: loan,
    property: property,
    offer: (0, _defineProperty3.default)({}, offer.type === _OFFER_TYPE.STANDARD ? 'standardOffer' : 'counterpartOffer', offer)
  }, offer.type === _OFFER_TYPE.STANDARD);
};

var _getPropAndWork = function _getPropAndWork(_ref7) {
  var loan = _ref7.loan,
      property = _ref7.property;
  return property && property.value + (loan && loan.general && loan.general.propertyWork || 0) || 0;
};

var _getTotalUsed = function _getTotalUsed(_ref8) {
  var loan = _ref8.loan;
  return Math.round(loan.general.fortuneUsed + (loan.general.insuranceFortuneUsed || 0));
};

var _getBorrowRatio = function _getBorrowRatio(_ref9) {
  var loan = _ref9.loan,
      property = _ref9.property;

  var loanValue = _getLoanValue({
    loan: loan,
    property: property
  });

  var propAndWork = _getPropAndWork({
    loan: loan,
    property: property
  });

  return loanValue / propAndWork;
};

var _getLenderCount = function _getLenderCount(_ref10) {
  var loan = _ref10.loan,
      borrowers = _ref10.borrowers,
      property = _ref10.property;

  var incomeRatio = _getIncomeRatio({
    loan: loan,
    borrowers: borrowers,
    property: property
  });

  var borrowRatio = _getBorrowRatio({
    loan: loan,
    property: property
  });

  if (incomeRatio > 0.38) {
    return 0;
  } else if (incomeRatio > 1 / 3) {
    return 4;
  } else if (borrowRatio <= 0.65) {
    return 20;
  } else if (borrowRatio > 0.65 && borrowRatio <= 0.9) {
    return 10;
  }

  return 0;
};

var _disableForms = function _disableForms(_ref11) {
  var loan = _ref11.loan;
  return !!(loan.logic && (loan.logic.step > 1 || loan.logic.verification && (loan.logic.verification.requested || loan.logic.verification.validated !== undefined)));
};

var _getFees = function _getFees(_ref12) {
  var loan = _ref12.loan,
      property = _ref12.property;
  var notaryFees = property.value * constants.notaryFees;
  var insuranceFees = 0;

  if (loan.general.usageType === _USAGE_TYPE.PRIMARY) {
    insuranceFees = loan.general.insuranceFortuneUsed * constants.lppFees;
  }

  return notaryFees + (insuranceFees || 0);
};

var _isLoanValid = function _isLoanValid(_ref13) {
  var loan = _ref13.loan,
      borrowers = _ref13.borrowers,
      property = _ref13.property;

  var incomeRatio = _getIncomeRatio({
    loan: loan,
    borrowers: borrowers,
    property: property
  });

  var borrowRatio = _getBorrowRatio({
    loan: loan,
    borrowers: borrowers,
    property: property
  });

  var fees = _getFees({
    loan: loan,
    property: property
  });

  var propAndWork = _getPropAndWork({
    loan: loan,
    property: property
  });

  var cashRequired = constants.minCash * propAndWork + fees;

  if (incomeRatio > 0.38) {
    throw new Error('income');
  } else if (loan.general.fortuneUsed < cashRequired) {
    throw new Error('cash');
  } else if (borrowRatio > 0.8) {
    throw new Error('ownFunds');
  }

  return true;
};

var _getPropertyCompletion = function _getPropertyCompletion(_ref14) {
  var loan = _ref14.loan,
      borrowers = _ref14.borrowers,
      property = _ref14.property;

  var formsProgress = _propertyPercent(loan, borrowers, property);

  var filesProgress = _filesPercent(property, _propertyFiles, 'auction');

  return (formsProgress + filesProgress) / 2;
};

var _validateRatios = function _validateRatios(incomeRatio, borrowRatio) {
  var allowInsurance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var borrowRatioWanted = arguments[3];
  // To prevent rounding errors
  var incomeRatioSafe = incomeRatio - 0.001;
  var borrowRatioSafe = borrowRatio - 0.001;

  if (borrowRatioWanted && borrowRatioWanted !== 0.8) {
    if (borrowRatioSafe > borrowRatioWanted) {
      throw new Error('fortune');
    }
  }

  if (incomeRatioSafe > 0.38) {
    throw new Error('income');
  } else if (!allowInsurance && borrowRatioSafe > 0.8) {
    throw new Error('fortune');
  } else if (borrowRatioSafe > 0.9) {
    throw new Error('fortune');
  } else if (incomeRatioSafe > 1 / 3) {
    throw new Error('incomeTight');
  } else if (borrowRatioSafe > 0.8) {
    throw new Error('fortuneTight');
  }

  return true;
};

var _validateRatiosCompletely = function _validateRatiosCompletely(incomeRatio, borrowRatio) {
  var allowInsurance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var borrowRatioWanted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.9;

  try {
    _validateRatios(incomeRatio, borrowRatio, borrowRatioWanted, allowInsurance);

    return {
      isValid: true,
      message: 'valid',
      message2: '',
      icon: 'check',
      className: 'success'
    };
  } catch (error) {
    var isTight = error.message.indexOf('Tight') >= 0;
    return {
      isValid: false,
      message: "" + error.message,
      message2: error.message + "2",
      icon: isTight ? 'warning' : 'close',
      className: isTight ? 'warning' : 'error'
    };
  }
};

var _getMaintenance = function _getMaintenance(_ref15) {
  var property = _ref15.property;
  return property.value * 0.01 / 12;
};

var _strategyDone = function _strategyDone(_ref16) {
  var loan = _ref16.loan,
      property = _ref16.property;
  var general = loan.general,
      logic = loan.logic;

  if (general.insuranceFortuneUsed > 0 && !logic.insuranceUsePreset) {
    return false;
  }

  if (!logic.amortizationStrategyPreset) {
    return false;
  }

  if (!logic.loanStrategyPreset) {
    return false;
  }

  if (logic.loanStrategyPreset === _LOAN_STRATEGY_PRESET.MANUAL && !_loanStrategySuccess(general.loanTranches, _getLoanValue({
    loan: loan,
    property: property
  }, true))) {
    return false;
  }

  return true;
};

var _getAuctionEndTime = function _getAuctionEndTime(startTime) {
  var time = moment(startTime);

  if (time.isoWeekday() === 6) {
    // On saturdays, go to Tuesday
    time.add(3, 'd');
  } else if (time.isoWeekday() === 7) {
    // On saturdays, go to Tuesday
    time.add(2, 'd');
  } else if (time.hour() >= 0 && time.hour() < 7) {
    // If the start time is between midnight and 7:00,
    // set endtime to be tomorrow night
    time.add(1, 'd');
  } else {
    // Else, set endtime in 2 days from now
    time.add(2, 'd');
  } // Skip weekends


  if (time.isoWeekday() === 6 || time.isoWeekday() === 7) {
    // Saturday or Sunday
    time.add(2, 'd');
  } // Auctions always end at midnight


  time.hours(23);
  time.minutes(59);
  time.seconds(59);
  time.milliseconds(0);
  return time.toDate();
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"localization.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/localization.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  getUserLocale: function getUserLocale() {
    return _getUserLocale;
  },
  getFormats: function getFormats() {
    return _getFormats;
  },
  localizationStartup: function localizationStartup() {
    return _localizationStartup;
  }
});

var _addLocaleData = void 0;

module.watch(require("react-intl"), {
  addLocaleData: function addLocaleData(v) {
    _addLocaleData = v;
  }
}, 0);

var _T9n = void 0;

module.watch(require("meteor/softwarerero:accounts-t9n"), {
  T9n: function T9n(v) {
    _T9n = v;
  }
}, 1);
var moment = void 0;
exports.getUserLocale = _getUserLocale;
module.watch(require("moment"), {
  default: function _default(v) {
    moment = v;
  }
}, 2);
var Loadable = void 0;
module.watch(require("./loadable"), {
  default: function _default(v) {
    Loadable = v;
  }
}, 3);
var fr = void 0;
module.watch(require("react-intl/locale-data/fr"), {
  default: function _default(v) {
    fr = v;
  }
}, 4);

var _getUserLocale = function _getUserLocale() {
  return 'fr-CH';
};

var _getFormats = function _getFormats() {
  return {
    number: {
      money: {
        style: 'currency',
        currency: 'CHF',
        maximumFractionDigits: 0,
        minimumFractionDigits: 0
      },
      moneyWithoutCurrency: {
        style: 'decimal',
        useGrouping: true,
        maximumFractionDigits: 0,
        minimumFractionDigits: 0
      },
      percentage: {
        style: 'percent',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      },
      percentageRounded: {
        style: 'percent',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }
    }
  };
};

var _localizationStartup = function _localizationStartup() {
  // Add locales used in app here
  _addLocaleData(fr);

  _T9n.setLanguage('fr');

  setupMoment();
  moment.locale('fr');
};

var setupMoment = function setupMoment() {
  moment.locale('fr', {
    months: 'Janvier_Février_Mars_Avril_Mai_Juin_Juillet_Août_Septembre_Octobre_Novembre_Décembre'.split('_'),
    monthsShort: 'Janv._Févr._Mars_Avr._Mai_Juin_Juil._Août_Sept._Oct._Nov._Déc.'.split('_'),
    monthsParseExact: true,
    weekdays: 'Dimanche_Lundi_Mardi_Mercredi_Jeudi_Vendredi_Samedi'.split('_'),
    weekdaysShort: 'Dim._Lun._Mar._Mer._Jeu._Ven._Sam.'.split('_'),
    weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact: true,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm'
    },
    calendar: {
      sameDay: '[Aujourd’hui à] LT',
      nextDay: '[Demain à] LT',
      nextWeek: 'dddd [à] LT',
      lastDay: '[Hier à] LT',
      lastWeek: 'dddd [dernier à] LT',
      sameElse: 'L'
    },
    relativeTime: {
      future: 'dans %s',
      past: 'il y a %s',
      s: 'quelques secondes',
      m: 'une minute',
      mm: '%d minutes',
      h: 'une heure',
      hh: '%d heures',
      d: 'un jour',
      dd: '%d jours',
      M: 'un mois',
      MM: '%d mois',
      y: 'un an',
      yy: '%d ans'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
    ordinal: function ordinal(number) {
      return number + (number === 1 ? 'er' : 'e');
    },
    meridiemParse: /PD|MD/,
    isPM: function isPM(input) {
      return input.charAt(0) === 'M';
    },
    // In case the meridiem units are not separated around 12, then implement
    // this function (look at locale/id.js for an example).
    // meridiemHour : function (hour, meridiem) {
    //     return /* 0-23 hour, given meridiem token and hour 1-12 */ ;
    // },
    meridiem: function meridiem(hours, minutes, isLower) {
      return hours < 12 ? 'PD' : 'MD';
    },
    week: {
      dow: 1,
      // Monday is the first day of the week.
      doy: 4 // The week that contains Jan 4th is the first week of the year.

    }
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"rate-limit.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/rate-limit.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.export({
  default: function _default() {
    return rateLimit;
  }
});

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _DDPRateLimiter = void 0;

module.watch(require("meteor/ddp-rate-limiter"), {
  DDPRateLimiter: function DDPRateLimiter(v) {
    _DDPRateLimiter = v;
  }
}, 1);

var _2 = void 0;

module.watch(require("meteor/underscore"), {
  _: function _(v) {
    _2 = v;
  }
}, 2);

// DDPRateLimiter.setErrorMessage(({ timeToReset }) => {
//   const time = Math.ceil(timeToReset / 1000);
//   const seconds = time === 1 ? 'second' : 'seconds';
//   return `Easy on the gas, buddy. Too many loans. Try again in ${time} ${seconds}.`;
// });
var fetchMethodNames = function fetchMethodNames(methods) {
  return _2.pluck(methods, 'name');
};

var assignLimits = function assignLimits(_ref) {
  var methods = _ref.methods,
      _ref$limit = _ref.limit,
      limit = _ref$limit === undefined ? 5 : _ref$limit,
      _ref$timeRange = _ref.timeRange,
      timeRange = _ref$timeRange === undefined ? 1000 : _ref$timeRange;
  var methodNames = fetchMethodNames(methods);

  if (_Meteor.isServer) {
    _DDPRateLimiter.addRule({
      name: function name(_name) {
        return _2.contains(methodNames, _name);
      },
      connectionId: function connectionId() {
        return true;
      }
    }, limit, timeRange);
  }
};

function rateLimit(options) {
  return assignLimits(options);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveStartForm.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/utils/saveStartForm.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var cleanMethod = void 0;
module.watch(require("../api/cleanMethods"), {
  default: function _default(v) {
    cleanMethod = v;
  }
}, 0);

// The final function that inserts the documents once the form is finished
var saveStartForm = function saveStartForm(f, userId) {
  var multiple = f.borrowerCount > 1;
  var borrowerOne = {
    age: f.age,
    gender: f.gender,
    salary: f.income1,
    bonusExists: f.bonusExists,
    bonus: {
      bonus2014: f.bonus11,
      bonus2015: f.bonus21,
      bonus2016: f.bonus31,
      bonus2017: f.bonus41
    },
    otherIncome: f.otherIncome || [],
    expenses: f.expenses || [],
    realEstate: f.realEstate || [],
    bankFortune: f.fortune1,
    insuranceSecondPillar: f.insurance11,
    insuranceThirdPillar: f.insurance21
  };
  var borrowerTwo = {};

  if (multiple) {
    borrowerTwo = {
      salary: f.income2,
      bonusExists: f.bonusExists,
      bonus: {
        bonus2014: f.bonus12,
        bonus2015: f.bonus22,
        bonus2016: f.bonus32,
        bonus2017: f.bonus42
      },
      bankFortune: f.fortune2,
      insuranceSecondPillar: f.insurance12,
      insuranceThirdPillar: f.insurance22,
      sameAddress: true
    };
  }

  var loan = {
    general: {
      usageType: f.usageType,
      purchaseType: f.purchaseType,
      oldestAge: multiple ? f.oldestAge : f.age,
      oldestGender: multiple ? f.oldestGender : f.gender,
      fortuneUsed: f.fortuneUsed,
      insuranceFortuneUsed: f.insuranceFortuneUsed,
      propertyWork: f.propertyWork || 0
    },
    // property: {
    //   usageType: f.usageType,
    //   value: f.propertyValue,
    //   propertyWork: f.propertyWork || 0,
    //   investmentRent: f.propertyRent,
    // },
    borrowerIds: []
  };
  var property = {
    value: f.propertyValue,
    investmentRent: f.propertyRent
  };
  return cleanMethod('insertBorrower', {
    object: borrowerOne,
    userId: userId
  }).then(function (id1) {
    return loan.borrowerIds.push(id1);
  }).then(function () {
    return !!multiple && cleanMethod('insertBorrower', {
      object: borrowerTwo,
      userId: userId
    });
  }).then(function (id2) {
    return !!id2 && loan.borrowerIds.push(id2);
  }).then(function () {
    return cleanMethod('insertProperty', {
      object: property,
      userId: userId
    });
  }).then(function (propertyId) {
    loan.propertyId = propertyId;
    return cleanMethod('insertLoan', {
      object: loan,
      userId: userId
    });
  }) // If no userId is provided, return the loanId
  .then(function (loanId) {
    return userId || loanId;
  }).catch(function (error) {
    console.warn(error);
    throw error;
  });
};

module.exportDefault(saveStartForm);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"arrays":{"BorrowerFormArray.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/arrays/BorrowerFormArray.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

module.export({
  getBorrowerInfoArray: function getBorrowerInfoArray() {
    return _getBorrowerInfoArray;
  },
  getBorrowerFinanceArray: function getBorrowerFinanceArray() {
    return _getBorrowerFinanceArray;
  }
});

var _constants = void 0;

exports.getBorrowerInfoArray = _getBorrowerInfoArray;
module.watch(require("../api"), {
  constants: function constants(v) {
    _constants = v;
  }
}, 0);

var _getBorrowerInfoArray = function _getBorrowerInfoArray(_ref) {
  var borrowers = _ref.borrowers,
      id = _ref.borrowerId;
  var b = borrowers.find(function (borrower) {
    return borrower._id === id;
  });
  var multiple = borrowers.length > 1; // If this is the first borrower in the array of borrowers, don't ask for same address

  var isFirst = borrowers[0]._id === id;

  if (!b) {
    throw new Error("couldn't find borrower");
  }

  var disableAddress = !!b.sameAddress && !isFirst;
  return [{
    id: 'firstName',
    type: 'textInput'
  }, {
    id: 'lastName',
    type: 'textInput'
  }, {
    id: 'gender',
    type: 'radioInput',
    options: Object.values(_constants.GENDER)
  }, {
    type: 'h3',
    id: 'yourAddress',
    ignore: true,
    required: false
  }, {
    id: 'sameAddress',
    type: 'radioInput',
    intlValues: {
      name: borrowers[0].firstName || 'Emprunteur 1'
    },
    options: [true, false],
    condition: multiple && !isFirst
  }, {
    id: 'address1',
    type: 'textInput',
    disabled: disableAddress,
    placeholder: disableAddress && borrowers[0].address1,
    noIntl: disableAddress
  }, {
    id: 'address2',
    type: 'textInput',
    disabled: !!b.sameAddress && !isFirst,
    required: false,
    placeholder: disableAddress && borrowers[0].address2,
    noIntl: disableAddress
  }, {
    id: 'zipCode',
    type: 'custom',
    component: 'ZipAutoComplete',
    componentProps: {
      savePath: '',
      initialValue: b.zipCode && b.city ? b.zipCode + " " + b.city : ''
    },
    disabled: !!b.sameAddress && !isFirst,
    placeholder: disableAddress && (borrowers[0].zipCode && borrowers[0].city ? borrowers[0].zipCode + " " + borrowers[0].city : ''),
    noIntl: disableAddress
  }, {
    type: 'conditionalInput',
    conditionalTrueValue: false,
    inputs: [{
      id: 'isSwiss',
      type: 'radioInput',
      options: [true, false]
    }, {
      id: 'residencyPermit',
      type: 'selectFieldInput',
      options: Object.values(_constants.RESIDENCY_PERMIT)
    }]
  }, {
    id: 'age',
    type: 'textInput',
    number: true,
    saveOnChange: false
  }, {
    id: 'birthPlace',
    type: 'textInput',
    condition: !!b.isSwiss
  }, {
    id: 'citizenship',
    type: 'textInput',
    condition: !b.isSwiss
  }, {
    id: 'isUSPerson',
    type: 'radioInput',
    options: [true, false]
  }, {
    id: 'civilStatus',
    type: 'radioInput',
    options: Object.values(_constants.CIVIL_STATUS).map(function (value) {
      return {
        id: value,
        intlValues: {
          gender: b.gender
        }
      };
    })
  }, {
    id: 'childrenCount',
    type: 'textInput',
    number: true
  }, {
    id: 'company',
    type: 'textInput',
    required: false,
    autoComplete: 'organization'
  }, {
    id: 'worksForOwnCompany',
    type: 'radioInput',
    options: [true, false]
  }, {
    id: 'personalBank',
    type: 'textInput'
  }];
};

var _getBorrowerFinanceArray = function _getBorrowerFinanceArray(_ref2) {
  var borrowers = _ref2.borrowers,
      id = _ref2.borrowerId,
      loan = _ref2.loan;
  var b = borrowers.find(function (borr) {
    return borr._id === id;
  });
  var multiple = borrowers.length > 1; // If this is the first borrower in the array of borrowers, don't ask for same address

  var isFirst = borrowers[0]._id === id;

  if (!b) {
    throw new Error("couldn't find borrower");
  }

  var incomeArray = [{
    type: 'h3',
    id: 'incomeAndExpenses',
    ignore: true,
    required: false
  }, {
    id: 'salary',
    type: 'textInput',
    money: true
  }, {
    type: 'conditionalInput',
    conditionalTrueValue: true,
    inputs: [{
      id: 'bonusExists',
      type: 'radioInput',
      options: [true, false]
    }].concat(_toConsumableArray([2017, 2016, 2015, 2014].map(function (year) {
      return {
        id: "bonus.bonus" + year,
        type: 'textInput',
        money: true
      };
    })))
  }, {
    id: 'expenses',
    type: 'arrayInput',
    required: false,
    inputs: [{
      id: 'description',
      type: 'selectInput',
      options: Object.values(_constants.EXPENSES)
    }, {
      id: 'value',
      type: 'textInput',
      money: true
    }]
  }, {
    id: 'otherIncome',
    type: 'arrayInput',
    required: false,
    inputs: [{
      id: 'description',
      type: 'selectInput',
      options: Object.values(_constants.OTHER_INCOME)
    }, {
      id: 'value',
      type: 'textInput',
      money: true
    }]
  }];
  var fortuneArray = [{
    type: 'h3',
    id: 'fortune',
    ignore: true,
    required: false
  }, {
    id: 'bankFortune',
    type: 'textInput',
    money: true
  }, {
    id: 'realEstate',
    type: 'arrayInput',
    inputs: [{
      id: 'description',
      type: 'selectInput',
      options: Object.values(_constants.REAL_ESTATE)
    }, {
      id: 'value',
      type: 'textInput',
      money: true
    }, {
      id: 'loan',
      type: 'textInput',
      money: true
    }]
  }, {
    id: 'otherFortune',
    type: 'arrayInput',
    required: false,
    inputs: [{
      id: 'description',
      type: 'selectInput',
      options: Object.values(_constants.OTHER_FORTUNE)
    }, {
      id: 'value',
      type: 'textInput',
      money: true
    }]
  }];
  var insuranceArray = [{
    type: 'h3',
    id: 'insurance',
    required: false,
    ignore: true
  }, {
    id: 'insuranceSecondPillar',
    type: 'textInput',
    money: true,
    required: false
  }, {
    id: 'insuranceThirdPillar',
    type: 'textInput',
    money: true,
    required: false
  }, {
    id: 'insurance3B',
    type: 'textInput',
    money: true,
    required: false
  }, {
    id: 'insurancePureRisk',
    type: 'textInput',
    money: true,
    required: false
  }];
  return incomeArray.concat([].concat(fortuneArray, insuranceArray));
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"PropertyFormArray.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/arrays/PropertyFormArray.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPropertyLoanArray = undefined;

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.export({
  getPropertyLoanArray: function getPropertyLoanArray() {
    return _getPropertyLoanArray;
  },
  getPropertyArray: function getPropertyArray() {
    return _getPropertyArray;
  }
});

var _PROPERTY_STYLE = void 0,
    _PURCHASE_TYPE = void 0,
    _OWNER = void 0,
    _USAGE_TYPE = void 0,
    _EXPERTISE_RATING = void 0;

module.watch(require("../api/constants"), {
  PROPERTY_STYLE: function PROPERTY_STYLE(v) {
    _PROPERTY_STYLE = v;
  },
  PURCHASE_TYPE: function PURCHASE_TYPE(v) {
    _PURCHASE_TYPE = v;
  },
  OWNER: function OWNER(v) {
    _OWNER = v;
  },
  USAGE_TYPE: function USAGE_TYPE(v) {
    _USAGE_TYPE = v;
  },
  EXPERTISE_RATING: function EXPERTISE_RATING(v) {
    _EXPERTISE_RATING = v;
  }
}, 0);
exports.getPropertyLoanArray = _getPropertyLoanArray;

var mapInput = function mapInput(input) {
  var intlSafeObject = (0, _extends3.default)({}, input); // If the id contains a dot in it, split it and add a intlId
  // This makes it easier to write intl messages

  if (input.id && input.id.indexOf('.') > 0) {
    // Perform some additional slicing to make sure ids with multiple dots
    // work by removing only the first part
    intlSafeObject.intlId = input.id.split('.').slice(1).join('.');
  }

  if (input.inputs) {
    // If there are nested inputs, give them an intlId too
    intlSafeObject.inputs = input.inputs.map(function (obj) {
      return obj.id && obj.id.indexOf('.') > 0 ? (0, _extends3.default)({}, obj, {
        intlId: obj.id.split('.')[1]
      }) : obj;
    });
  }

  return intlSafeObject;
};

var _getPropertyLoanArray = function _getPropertyLoanArray(_ref) {
  var loan = _ref.loan,
      borrowers = _ref.borrowers;
  var r = loan;

  if (!r) {
    throw new Error('requires a loan');
  }

  var array = [{
    type: 'h3',
    id: 'propertyInfo',
    ignore: true,
    required: false
  }, {
    id: 'general.usageType',
    type: 'radioInput',
    options: Object.values(_USAGE_TYPE)
  }, {
    id: 'general.propertyWork',
    type: 'textInput',
    money: true,
    required: false
  }, {
    type: 'conditionalInput',
    conditionalTrueValue: _OWNER.OTHER,
    condition: borrowers.length > 1 && r.general.purchaseType === _PURCHASE_TYPE.REFINANCING,
    inputs: [{
      id: 'general.currentOwner',
      type: 'radioInput',
      options: Object.values(_OWNER).filter(function (value) {
        return borrowers.length === 1 ? value !== _OWNER.SECOND : true;
      }).map(function (value) {
        var isFirst = value === _OWNER.FIRST;
        var isSecond = value === _OWNER.SECOND;
        return isFirst || isSecond ? {
          id: isFirst ? 0 : 1,
          intlValues: {
            name: borrowers[isFirst ? 0 : 1].firstName || "Emprunteur " + (isFirst ? 1 : 2)
          }
        } : value;
      })
    }, {
      id: 'general.otherOwner',
      type: 'textInput'
    }]
  }, {
    type: 'conditionalInput',
    conditionalTrueValue: _OWNER.OTHER,
    condition: borrowers.length > 1 && r.general.purchaseType !== _PURCHASE_TYPE.REFINANCING,
    inputs: [{
      id: 'general.futureOwner',
      type: 'radioInput',
      options: Object.values(_OWNER).filter(function (value) {
        return borrowers.length === 1 ? value !== _OWNER.SECOND : true;
      }).map(function (value) {
        var isFirst = value === _OWNER.FIRST;
        var isSecond = value === _OWNER.SECOND;
        return isFirst || isSecond ? {
          id: isFirst ? 0 : 1,
          intlValues: {
            name: borrowers[isFirst ? 0 : 1].firstName || "Emprunteur " + (isFirst ? 1 : 2)
          }
        } : value;
      })
    }, {
      id: 'general.otherOwner',
      type: 'textInput'
    }]
  }];
  return array.map(mapInput);
};

var _getPropertyArray = function _getPropertyArray(_ref2) {
  var loan = _ref2.loan,
      borrowers = _ref2.borrowers,
      property = _ref2.property;
  var r = loan;

  if (!r) {
    throw new Error('requires a loan');
  }

  var array = [{
    id: 'value',
    type: 'textInput',
    money: true
  }, {
    id: 'style',
    type: 'radioInput',
    options: Object.values(_PROPERTY_STYLE)
  }, {
    id: 'isNew',
    type: 'radioInput',
    options: [true, false],
    condition: r.general.purchaseType === _PURCHASE_TYPE.ACQUISITION
  }, {
    type: 'h3',
    id: 'propertyAddress',
    ignore: true,
    required: false
  }, {
    id: 'address1',
    type: 'textInput'
  }, {
    id: 'address2',
    type: 'textInput',
    required: false
  }, {
    id: 'zipCode',
    type: 'custom',
    component: 'ZipAutoComplete',
    componentProps: {
      savePath: '',
      initialValue: property.zipCode && property.city ? property.zipCode + " " + property.city : ''
    }
  }, {
    type: 'h3',
    id: 'propertyDetails',
    ignore: true,
    required: false
  }, {
    id: 'constructionYear',
    type: 'textInput',
    number: true
  }, {
    id: 'renovationYear',
    type: 'textInput',
    number: true,
    required: false,
    info: true
  }, {
    id: 'landArea',
    type: 'textInput',
    number: true,
    condition: property.style === _PROPERTY_STYLE.VILLA
  }, {
    id: 'insideArea',
    type: 'textInput',
    number: true
  }, {
    id: 'balconyArea',
    type: 'textInput',
    number: true,
    required: false
  }, {
    id: 'terraceArea',
    type: 'textInput',
    number: true,
    required: false
  }, {
    id: 'volume',
    type: 'textInput',
    number: true,
    condition: property.style === _PROPERTY_STYLE.VILLA
  }, {
    id: 'volumeNorm',
    type: 'textInput',
    condition: property.style === _PROPERTY_STYLE.VILLA
  }, {
    id: 'roomCount',
    type: 'textInput',
    decimal: true,
    info: true
  }, {
    id: 'bathroomCount',
    type: 'textInput',
    number: true,
    info: true
  }, {
    id: 'toiletCount',
    type: 'textInput',
    number: true
  }, {
    id: 'parking.box',
    type: 'textInput',
    number: true
  }, {
    id: 'parking.inside',
    type: 'textInput',
    number: true
  }, {
    id: 'parking.outside',
    type: 'textInput',
    number: true
  }, {
    id: 'minergie',
    type: 'radioInput',
    options: [true, false]
  }, {
    type: 'conditionalInput',
    conditionalTrueValue: true,
    condition: property.style === _PROPERTY_STYLE.VILLA,
    inputs: [{
      id: 'isCoproperty',
      type: 'radioInput',
      options: [true, false]
    }, {
      id: 'copropertyPercentage',
      type: 'textInput',
      number: true,
      info: true
    }]
  }, {
    id: 'copropertyPercentage',
    type: 'textInput',
    number: true,
    condition: property.style === _PROPERTY_STYLE.FLAT,
    info: true
  }, {
    type: 'h3',
    id: 'propertyQuality',
    ignore: true,
    required: false
  }, {
    id: 'cityPlacementQuality',
    type: 'radioInput',
    options: Object.values(_EXPERTISE_RATING)
  }, {
    id: 'buildingPlacementQuality',
    type: 'radioInput',
    options: Object.values(_EXPERTISE_RATING),
    condition: property.style === _PROPERTY_STYLE.FLAT
  }, {
    id: 'buildingQuality',
    type: 'radioInput',
    options: Object.values(_EXPERTISE_RATING)
  }, {
    id: 'flatQuality',
    type: 'radioInput',
    options: Object.values(_EXPERTISE_RATING),
    condition: property.style === _PROPERTY_STYLE.FLAT
  }, {
    id: 'materialsQuality',
    type: 'radioInput',
    options: Object.values(_EXPERTISE_RATING)
  }, {
    id: 'otherNotes',
    type: 'textInput',
    multiline: true,
    rows: 3,
    required: false
  }];
  return array.map(mapInput);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"steps.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/arrays/steps.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

module.export({
  previousDone: function previousDone() {
    return _previousDone;
  },
  getPercent: function getPercent() {
    return _getPercent;
  },
  shouldCountField: function shouldCountField() {
    return _shouldCountField;
  },
  getCountedArray: function getCountedArray() {
    return _getCountedArray;
  },
  personalInfoPercent: function personalInfoPercent() {
    return _personalInfoPercent;
  },
  propertyPercent: function propertyPercent() {
    return _propertyPercent;
  },
  auctionFilesPercent: function auctionFilesPercent() {
    return _auctionFilesPercent;
  },
  filesPercent: function filesPercent() {
    return _filesPercent;
  },
  getAllFilesPercent: function getAllFilesPercent() {
    return _getAllFilesPercent;
  },
  closingPercent: function closingPercent() {
    return _closingPercent;
  }
});
var React = void 0;
module.watch(require("react"), {
  default: function _default(v) {
    React = v;
  }
}, 0);
var get = void 0;
module.watch(require("lodash/get"), {
  default: function _default(v) {
    get = v;
  }
}, 1);
var isArray = void 0;
module.watch(require("lodash/isArray"), {
  default: function _default(v) {
    isArray = v;
  }
}, 2);

var _getBorrowerInfoArray = void 0;

module.watch(require("./BorrowerFormArray"), {
  getBorrowerInfoArray: function getBorrowerInfoArray(v) {
    _getBorrowerInfoArray = v;
  }
}, 3);

var _borrowerFiles = void 0,
    _loanFiles = void 0,
    _propertyFiles = void 0;

module.watch(require("../api/files/files"), {
  borrowerFiles: function borrowerFiles(v) {
    _borrowerFiles = v;
  },
  loanFiles: function loanFiles(v) {
    _loanFiles = v;
  },
  propertyFiles: function propertyFiles(v) {
    _propertyFiles = v;
  }
}, 4);

var _getPropertyArray = void 0,
    _getPropertyLoanArray = void 0;

module.watch(require("./PropertyFormArray"), {
  getPropertyArray: function getPropertyArray(v) {
    _getPropertyArray = v;
  },
  getPropertyLoanArray: function getPropertyLoanArray(v) {
    _getPropertyLoanArray = v;
  }
}, 5);

var _strategyDone = void 0,
    _getPropertyCompletion = void 0;

exports.previousDone = _previousDone;
module.watch(require("../utils/loanFunctions"), {
  strategyDone: function strategyDone(v) {
    _strategyDone = v;
  },
  getPropertyCompletion: function getPropertyCompletion(v) {
    _getPropertyCompletion = v;
  }
}, 6);

var _arrayify = void 0;

module.watch(require("../utils/general"), {
  arrayify: function arrayify(v) {
    _arrayify = v;
  }
}, 7);

var _isDemo = void 0;

module.watch(require("../utils/browserFunctions"), {
  isDemo: function isDemo(v) {
    _isDemo = v;
  }
}, 8);

var _LOAN_STATUS = void 0,
    _AUCTION_STATUS = void 0,
    _FILE_STATUS = void 0,
    _CLOSING_STEPS_STATUS = void 0,
    _CLOSING_STEPS_TYPE = void 0;

module.watch(require("../api/constants"), {
  LOAN_STATUS: function LOAN_STATUS(v) {
    _LOAN_STATUS = v;
  },
  AUCTION_STATUS: function AUCTION_STATUS(v) {
    _AUCTION_STATUS = v;
  },
  FILE_STATUS: function FILE_STATUS(v) {
    _FILE_STATUS = v;
  },
  CLOSING_STEPS_STATUS: function CLOSING_STEPS_STATUS(v) {
    _CLOSING_STEPS_STATUS = v;
  },
  CLOSING_STEPS_TYPE: function CLOSING_STEPS_TYPE(v) {
    _CLOSING_STEPS_TYPE = v;
  }
}, 9);

var getSteps = function getSteps(props) {
  var loan = props.loan,
      borrowers = props.borrowers,
      property = props.property,
      serverTime = props.serverTime;
  var steps = [{
    nb: 0,
    items: []
  }, {
    nb: 1,
    items: [{
      id: 'personal',
      link: "/loans/" + loan._id + "/borrowers/" + borrowers[0]._id + "/personal",
      percent: function percent() {
        return _personalInfoPercent(borrowers);
      },
      isDone: function isDone() {
        return this.percent() >= 1;
      }
    }, {
      id: 'finance',
      link: "/loans/" + loan._id + "/borrowers/" + borrowers[0]._id + "/finance",
      isDone: function isDone() {
        return borrowers.reduce(function (res, b) {
          return res && b.logic.hasValidatedFinances;
        }, true);
      },
      percent: function percent() {
        return borrowers.reduce(function (res, b) {
          return b.logic.hasValidatedFinances ? res + 1 : res;
        }, 0) / borrowers.length;
      }
    }, {
      id: 'files',
      link: "/loans/" + loan._id + "/borrowers/" + borrowers[0]._id + "/files",
      percent: function percent() {
        return _filesPercent(borrowers, _borrowerFiles, 'auction');
      },
      isDone: function isDone() {
        return this.percent() >= 1;
      }
    }, {
      id: 'property',
      link: "/loans/" + loan._id + "/property",
      percent: function percent() {
        return _getPropertyCompletion(props);
      },
      isDone: function isDone() {
        return this.percent() >= 1;
      }
    }, {
      id: 'verification',
      link: "/loans/" + loan._id + "/verification",
      waiting: function waiting() {
        return loan.logic.verification.requested && !loan.logic.verification.validated;
      },
      isDone: function isDone() {
        return loan.logic.verification.validated === true;
      }
    }]
  }, {
    nb: 2,
    items: [{
      id: 'structure',
      link: "/loans/" + loan._id + "/structure",
      isDone: function isDone() {
        return loan.logic.hasValidatedStructure;
      },
      disabled: loan.logic.step < 2
    }, {
      id: 'auction',
      link: "/loans/" + loan._id + "/auction",
      waiting: function waiting() {
        return loan.logic.auction.status === _AUCTION_STATUS.STARTED;
      },
      isDone: function isDone() {
        return loan.logic.auction.status === _AUCTION_STATUS.ENDED;
      },
      disabled: loan.logic.step < 2
    }, {
      id: 'strategy',
      link: "/loans/" + loan._id + "/strategy",
      isDone: function isDone() {
        return _strategyDone({
          loan: loan
        });
      }
    }, {
      id: 'offerPicker',
      link: "/loans/" + loan._id + "/offerpicker",
      isDone: function isDone() {
        return !!(loan.logic.lender && loan.logic.lender.offerId);
      }
    }]
  }, {
    nb: 3,
    items: [{
      id: 'contract',
      link: "/loans/" + loan._id + "/contract",
      disabled: loan.logic.step < 3 && !(loan.logic.lender && loan.logic.lender.offerId),
      percent: function percent() {
        return _getAllFilesPercent({
          loan: loan,
          borrowers: borrowers,
          property: property
        }, 'contract');
      },
      waiting: function waiting() {
        return loan.logic.lender.contractRequested && !loan.logic.lender.contract;
      },
      isDone: function isDone() {
        return loan.files.contract && loan.files.contract.length;
      }
    }, {
      id: 'closing',
      link: "/loans/" + loan._id + "/closing",
      // FIXME: true && value used because of weird linting...
      disabled: (true && _getAllFilesPercent({
        loan: loan,
        borrowers: borrowers,
        property: property
      }, 'contract')) < 1 || loan.logic.step < 3,
      percent: function percent() {
        return _closingPercent(loan);
      },
      isDone: function isDone() {
        return loan.status === _LOAN_STATUS.DONE;
      }
    }]
  }, {
    nb: 4,
    title: React.createElement("span", {
      className: "fa fa-home fa-2x",
      style: {
        color: '#ADB5BD',
        paddingLeft: 8
      }
    }),
    disabled: true,
    // TODO
    subtitle: null,
    items: []
  }]; // Make sure these indices correspond
  // Verify all 3 items before item 4 are done

  steps[1].items[4].disabled = !_previousDone(steps, 1, 4); // Vérification e-Potek
  // steps[0].items[6].disabled = !previousDone(steps, 0, 6); // Expertise

  steps[2].items[1].disabled = !_previousDone(steps, 2, 1); // Enchères

  steps[2].items[2].disabled = !_previousDone(steps, 2, 2); // Stratégie

  steps[2].items[3].disabled = !_previousDone(steps, 2, 3); // Choix du prêteur

  return steps;
};

module.exportDefault(getSteps);

// Returns the current value of an autoForm input
var getCurrentValue = function getCurrentValue(input, doc) {
  return get(doc, input.id);
}; /**
    * previousDone - Checks if all previous subSteps have been finished upto this
    * item
    *
    * @param {array} steps  An array of subSteps/items
    * @param {number} stepNb The step Number
    * @param {number} itemNb The number of the item that is concerned
    *
    * @return {boolean} Description
    */

var _previousDone = function _previousDone(steps, stepNb, itemNb) {
  if (stepNb >= steps.length) {
    throw new Error('invalid stepNb');
  } else if (itemNb >= steps[stepNb].items.length) {
    throw new Error('invalid itemNb');
  }

  return steps[stepNb].items.slice(0, itemNb).reduce(function (res, i) {
    return res && i.isDone();
  }, true);
}; /**
    * getPercent - Given an array of values, any value that is undefined or null
    * will be counted as incomplete, make sure we don't divide by 0
    *
    * @param {array} array Array of numbers, strings, or dates
    *
    * @return {number} a value between 0 and 1
    */

var _getPercent = function _getPercent() {
  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var percent = array.reduce(function (tot, val) {
    if (isArray(val)) {
      return tot + (val.length ? 1 : 0);
    } else if (val !== undefined && val !== null) {
      return tot + 1;
    }

    return tot;
  }, 0) / array.length;
  return isFinite(percent) ? percent : 0;
};

var _shouldCountField = function _shouldCountField(f) {
  return (f.condition === undefined || f.condition === true) && f.required !== false && !f.disabled && f.type !== 'h3';
};

var _getCountedArray = function _getCountedArray(formArray, doc) {
  var arr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  formArray.forEach(function (i) {
    if (_shouldCountField(i)) {
      if (i.type === 'conditionalInput') {
        if (getCurrentValue(i.inputs[0], doc) === i.conditionalTrueValue) {
          // If the conditional input is triggering the next input, add all values
          i.inputs.forEach(function (input) {
            return arr.push(getCurrentValue(input, doc));
          });
        } else {
          // If conditional value is not triggering
          arr.push(getCurrentValue(i.inputs[0], doc));
        }
      } else {
        arr.push(getCurrentValue(i, doc));
      }
    }
  });
  return arr;
};

var _personalInfoPercent = function _personalInfoPercent(borrowers) {
  var a = [];

  _arrayify(borrowers).forEach(function (b) {
    var formArray = _getBorrowerInfoArray({
      borrowers: _arrayify(borrowers),
      borrowerId: b._id
    });

    _getCountedArray(formArray, b, a);
  });

  return _getPercent(a);
};

var _propertyPercent = function _propertyPercent(loan, borrowers, property) {
  var formArray1 = _getPropertyArray({
    loan: loan,
    borrowers: borrowers,
    property: property
  });

  var formArray2 = _getPropertyLoanArray({
    loan: loan,
    borrowers: borrowers,
    property: property
  });

  var a = _getCountedArray(formArray1, property);

  a = [].concat(_toConsumableArray(a), [_getCountedArray(formArray2, loan)]);
  return _getPercent(a);
};

var _auctionFilesPercent = function _auctionFilesPercent(borrowers) {
  var a = [];

  _arrayify(borrowers).forEach(function (b) {
    var fileArray = _borrowerFiles(b).auction;

    if (_isDemo()) {
      a.push(b.files[fileArray[0].id]);
    } else {
      fileArray.forEach(function (f) {
        return f.condition !== false && a.push(b.files[f.id]);
      });
    }
  });

  return _getPercent(a);
};

var _filesPercent = function _filesPercent(doc, fileArrayFunc, step, checkValidity) {
  var a = [];

  var iterate = function iterate(files, doc2) {
    if (!doc2 || !doc2.files) {
      return;
    }

    if (_isDemo()) {
      a.push(doc2.files[files[0].id]);
    } else {
      files.forEach(function (f) {
        if (!(f.required === false || f.condition === false)) {
          if (checkValidity) {
            a.push(isArray(doc2.files[f.id]) && doc2.files[f.id].every(function (file) {
              return file.status === _FILE_STATUS.VALID;
            }) ? true : undefined);
          } else {
            a.push(doc2.files[f.id]);
          }
        }
      });
    }
  };

  if (isArray(doc)) {
    doc.forEach(function (item) {
      var fileArray = fileArrayFunc(item)[step];
      iterate(fileArray, item);
    });
  } else {
    var fileArray = fileArrayFunc(doc)[step];
    iterate(fileArray, doc);
  }

  return _getPercent(a);
};

var _getAllFilesPercent = function _getAllFilesPercent(_ref, step) {
  var loan = _ref.loan,
      borrowers = _ref.borrowers,
      property = _ref.property;
  var array = [];

  if (loan) {
    array.push(_filesPercent(loan, _loanFiles, step));
  }

  if (borrowers) {
    array.push(_filesPercent(borrowers, _borrowerFiles, step));
  }

  if (property) {
    array.push(_filesPercent(property, _propertyFiles, step));
  } // Sum and divide by amount of them


  return array.reduce(function (a, b) {
    return a + b;
  }, 0) / array.length;
};

var _closingPercent = function _closingPercent(loan) {
  var closingSteps = loan.logic.closingSteps;
  var arr = [];
  closingSteps.forEach(function (step) {
    if (step.type === _CLOSING_STEPS_TYPE.TODO) {
      arr.push(step.status === _CLOSING_STEPS_STATUS.VALID ? true : undefined);
    } else {
      arr.push(isArray(loan.files[step.id]) && loan.files[step.id].every(function (file) {
        return file.status === _CLOSING_STEPS_STATUS.VALID;
      }) ? true : undefined);
    }
  });
  return _getPercent(arr);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"components":{"Loading.jsx":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/components/Loading.jsx                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  LoadingComponent: function LoadingComponent() {
    return _LoadingComponent;
  }
});
var React = void 0;
exports.LoadingComponent = _LoadingComponent;
module.watch(require("react"), {
  default: function _default(v) {
    React = v;
  }
}, 0);

// http://codepen.io/TaniaLD/pen/oKxep
var _LoadingComponent = function _LoadingComponent() {
  return (// Fade it in so that the loader doesn't show up if loading is super fast
    React.createElement(
      "div",
      {
        className: "loading-container animated fadeIn"
      },
      React.createElement(
        "div",
        {
          className: "loading-box"
        },
        React.createElement("div", {
          className: "loader2"
        })
      )
    )
  );
};

var options = {
  loadingHandler: _LoadingComponent
};
module.exportDefault(options);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"config":{"constants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/config/constants.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  fortuneLimitedProperty: function fortuneLimitedProperty() {
    return _fortuneLimitedProperty;
  },
  incomeLimitedProperty: function incomeLimitedProperty() {
    return _incomeLimitedProperty;
  },
  calculatePrimaryProperty: function calculatePrimaryProperty() {
    return _calculatePrimaryProperty;
  }
});

var _USAGE_TYPE = void 0;

module.watch(require("../api/constants"), {
  USAGE_TYPE: function USAGE_TYPE(v) {
    _USAGE_TYPE = v;
  }
}, 0);
exports.fortuneLimitedProperty = _fortuneLimitedProperty;
var constants = {
  cpsLimit: 300,
  // Average characters typed per second
  amortization: 0.0125,
  interests: 0.05,
  interestsReal: 0.015,
  maintenance: 0.01,
  maintenanceReal: 0.005,
  notaryFees: 0.05,
  lppFees: 0.1,
  maxRatio: 0.38,
  minCash: 0.1,
  getCurrency: function getCurrency() {
    return 'CHF';
  },
  loanCost: function loanCost(borrowRatio, toRetirement) {
    return this.interests + this.getAmortization(borrowRatio, toRetirement);
  },
  loanCostReal: function loanCostReal(borrowRatio, toRetirement, interestRate) {
    return (interestRate || this.interestsReal) + this.getAmortization(borrowRatio, toRetirement);
  },
  propertyToIncome: function propertyToIncome() {
    var usageType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _USAGE_TYPE.PRIMARY;
    var borrowRatio = arguments[1];
    var toRetirement = arguments[2];
    return 3 * (this.maintenance + this.maxLoan(usageType, toRetirement) * this.loanCost(borrowRatio, toRetirement));
  },
  propertyToIncomeReal: function propertyToIncomeReal() {
    var usageType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _USAGE_TYPE.PRIMARY;
    var borrowRatio = arguments[1];
    var toRetirement = arguments[2];
    return 3 * (this.maintenanceReal + this.maxLoan(usageType, toRetirement) * this.loanCostReal(borrowRatio, toRetirement));
  },
  maxProperty: function maxProperty(income, fortune) {
    var insuranceFortune = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var usageType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _USAGE_TYPE.PRIMARY;
    var toRetirement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 15;
    var r = toRetirement; // Make sure toRetirement is capped between 0 and 15 years

    if (toRetirement < 0) {
      r = 0;
    } else if (toRetirement > 15) {
      r = 15;
    }

    var fortuneLimited = _fortuneLimitedProperty(income, fortune, insuranceFortune, usageType, r);

    var incomeLimited = _incomeLimitedProperty(income, fortune, insuranceFortune, usageType, r); // Use floor to make sure the ratios are respected and avoid edge cases


    return Math.round(Math.min(fortuneLimited, incomeLimited));
  },
  maxLoan: function maxLoan() {
    var usageType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _USAGE_TYPE.PRIMARY;
    var toRetirement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 15;

    if (toRetirement <= 0) {
      return 0.65;
    }

    if (usageType === _USAGE_TYPE.SECONDARY) {
      return 0.7;
    }

    return 0.8;
  },
  getAmortization: function getAmortization() {
    var borrowRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.8;
    var toRetirement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 15;

    if (borrowRatio > 0.65) {
      var toAmortize = borrowRatio - 0.65;

      if (toRetirement > 15) {
        // use parseFloat, to round to 15 decimals, which is the maximal guaranteed precision of floating pt. numbers
        return Math.max(parseFloat(toAmortize / borrowRatio / 15).toPrecision(15));
      } else if (toRetirement >= 0) {
        // use parseFloat, to round to 15 decimals, which is the maximal guaranteed precision of floating pt. numbers
        return Math.max(parseFloat(toAmortize / borrowRatio / toRetirement).toPrecision(15));
      }

      return parseFloat(toAmortize / borrowRatio).toPrecision(15);
    }

    return 0;
  }
};

var _fortuneLimitedProperty = function _fortuneLimitedProperty(income, fortune) {
  var insuranceFortune = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var usageType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _USAGE_TYPE.PRIMARY;
  var toRetirement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 15;
  var fortuneLimited = 0;

  if (usageType === _USAGE_TYPE.PRIMARY) {
    // Use insuranceFortune to calculate more complicated value which
    // includes lppFees
    fortuneLimited = _calculatePrimaryProperty(fortune, insuranceFortune);
  } else {
    // Fortune should cover 20% and notary fees
    fortuneLimited = fortune / (1 - constants.maxLoan(usageType, toRetirement) + 0.05);
  }

  return fortuneLimited;
};

var _incomeLimitedProperty = function _incomeLimitedProperty(income, fortune) {
  var insuranceFortune = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var usageType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _USAGE_TYPE.PRIMARY;
  var toRetirement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 15;
  // The arithmetic relation to have the cost of the loan be at exactly the max ratio of income
  // Derive it like this:
  // maxRatio * salary >= property * maintenance + loan * loanCost
  // loan = (property + notaryFees + lppFees) - totalFortune
  // Extract property from this relation
  var totalFortune = fortune + insuranceFortune;
  var lppFees = insuranceFortune * constants.lppFees;
  var nF = constants.notaryFees;
  var i = constants.interests;
  var mR = constants.maxRatio;
  var m = constants.maintenance;
  var r = toRetirement; // The first one is with 0 amortization

  var incomeLimited1 = (mR * income + (totalFortune - lppFees) * i) / (m + (1 + nF) * i); // The second is with amortization factored in (and it could be negative due to math)

  var incomeLimited2 = ((1 + r * i) * (totalFortune - lppFees) + mR * r * income) / (r * (m + i) + nF * (1 + r * i) + 0.35); // Therefore, take the minimum value of both, which is the most limiting one
  // Because of the ratios, round this value down

  return Math.floor(Math.min(incomeLimited1, incomeLimited2));
};

var _calculatePrimaryProperty = function _calculatePrimaryProperty(fortune, insuranceFortune) {
  if (fortune <= 0 || insuranceFortune < 0) {
    return 0;
  }

  var lppFees = insuranceFortune * constants.lppFees;
  var notaryFees = constants.notaryFees; // Make sure cash can pay for lppFees, and fortune can cover notaryfees

  var totalFortuneLimitedValue = (fortune - lppFees + insuranceFortune) / (0.2 + notaryFees); // Make sure cash can pay for lppfees and notaryfees

  var cashLimitedValue = (fortune - lppFees) / (0.1 + notaryFees);
  return Math.max(Math.round(Math.min(cashLimitedValue, totalFortuneLimitedValue)), 0);
};

module.exportDefault(constants);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"fixtures":{"borrowers.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/fixtures/borrowers.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var BorrowerService = void 0;
module.watch(require("../api/borrowers/BorrowerService"), {
  default: function _default(v) {
    BorrowerService = v;
  }
}, 0);

var _RESIDENCY_PERMIT = void 0,
    _GENDER = void 0,
    _CIVIL_STATUS = void 0,
    _OTHER_FORTUNE = void 0,
    _OTHER_INCOME = void 0,
    _EXPENSES = void 0,
    _REAL_ESTATE = void 0;

module.watch(require("../api/borrowers/borrowerConstants"), {
  RESIDENCY_PERMIT: function RESIDENCY_PERMIT(v) {
    _RESIDENCY_PERMIT = v;
  },
  GENDER: function GENDER(v) {
    _GENDER = v;
  },
  CIVIL_STATUS: function CIVIL_STATUS(v) {
    _CIVIL_STATUS = v;
  },
  OTHER_FORTUNE: function OTHER_FORTUNE(v) {
    _OTHER_FORTUNE = v;
  },
  OTHER_INCOME: function OTHER_INCOME(v) {
    _OTHER_INCOME = v;
  },
  EXPENSES: function EXPENSES(v) {
    _EXPENSES = v;
  },
  REAL_ESTATE: function REAL_ESTATE(v) {
    _REAL_ESTATE = v;
  }
}, 1);

var _fakeFile = void 0;

module.watch(require("../api/files/files"), {
  fakeFile: function fakeFile(v) {
    _fakeFile = v;
  }
}, 2);
var firstNames = ['Marie', 'Camille', 'Léa', 'Manon', 'Thomas', 'Nicolas', 'Julien'];
var lastNames = ['Arsenault', 'Babel', 'Rochat'];

var generateSecondBorrowerProbabillity = function generateSecondBorrowerProbabillity() {
  return Math.random() < 0.8;
};

var insertFakeBorrower = function insertFakeBorrower(userId) {
  var borrower = {
    firstName: firstNames[Math.floor(Math.random() * firstNames.length)],
    lastName: lastNames[Math.floor(Math.random() * lastNames.length)],
    gender: 'F',
    address1: 'Chemin du Mont 3',
    zipCode: 1400,
    city: 'Yverdon-les-Bains',
    citizenships: 'Suisse, Français',
    age: 35,
    birthPlace: 'Lausanne',
    civilStatus: 'SINGLE',
    childrenCount: 2,
    company: 'Deloitte',
    personalBank: 'BCGE',
    isSwiss: true,
    isUSPerson: false,
    worksForOwnCompany: false,
    sameAddress: true,
    salary: 300000,
    bonusExists: true,
    bonus: {
      bonus2014: 12300,
      bonus2015: 15490,
      bonus2016: 11140,
      bonus2017: 13780
    },
    otherIncome: [{
      value: 10000,
      description: 'PENSION'
    }, {
      value: 15000,
      description: 'RENT'
    }],
    expenses: [{
      value: 3000,
      description: 'LEASING'
    }, {
      value: 4000,
      description: 'PERSONAL_LOAN'
    }],
    realEstate: [{
      value: 433000,
      loan: 240000,
      description: 'PRIMARY'
    }],
    bankFortune: 300000,
    insuranceSecondPillar: 120000,
    insuranceThirdPillar: 50000,
    files: {
      identity: [_fakeFile],
      taxes: [_fakeFile],
      salaryCertificate: [_fakeFile],
      bonus: [_fakeFile],
      otherIncome: [_fakeFile],
      expenses: [_fakeFile],
      nonPursuitExtract: [_fakeFile],
      lastSalaries: [_fakeFile],
      currentMortgages: [_fakeFile],
      bankAssetsChange: [_fakeFile],
      pensionFundYearlyStatement: [_fakeFile],
      retirementInsurancePlan: [_fakeFile]
    },
    logic: {
      financeEthics: true,
      hasValidatedFinances: true
    }
  };
  return BorrowerService.insert({
    borrower: borrower,
    userId: userId
  });
};

var createFakeBorrowers = function createFakeBorrowers(userId) {
  var borrowerIds = [insertFakeBorrower(userId)];

  if (generateSecondBorrowerProbabillity()) {
    borrowerIds.push(insertFakeBorrower(userId));
  }

  return borrowerIds;
};

module.exportDefault(createFakeBorrowers);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"config.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/fixtures/config.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.export({
  USER_COUNT: function USER_COUNT() {
    return _USER_COUNT;
  },
  ADMIN_COUNT: function ADMIN_COUNT() {
    return _ADMIN_COUNT;
  },
  DEV_COUNT: function DEV_COUNT() {
    return _DEV_COUNT;
  },
  MAX_LOANS_PER_USER: function MAX_LOANS_PER_USER() {
    return _MAX_LOANS_PER_USER;
  },
  STEPS_PER_LOAN: function STEPS_PER_LOAN() {
    return _STEPS_PER_LOAN;
  },
  MAX_OFFERS_PER_LOAN: function MAX_OFFERS_PER_LOAN() {
    return _MAX_OFFERS_PER_LOAN;
  },
  MIN_OFFERS_PER_LOAN: function MIN_OFFERS_PER_LOAN() {
    return _MIN_OFFERS_PER_LOAN;
  }
});
exports.USER_COUNT = _USER_COUNT;
var _USER_COUNT = 10;
var _ADMIN_COUNT = 10;
var _DEV_COUNT = 5;
var _MAX_LOANS_PER_USER = 2;
var _STEPS_PER_LOAN = 3;
var _MAX_OFFERS_PER_LOAN = 10;
var _MIN_OFFERS_PER_LOAN = 5;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/fixtures/index.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var createFakeUsers = void 0;
module.watch(require("./users"), {
  default: function _default(v) {
    createFakeUsers = v;
  }
}, 1);

var _DEV_COUNT = void 0;

module.watch(require("./config"), {
  DEV_COUNT: function DEV_COUNT(v) {
    _DEV_COUNT = v;
  }
}, 2);

_Meteor.startup(function () {
  if (_Meteor.users.find({
    roles: {
      $in: ['dev']
    }
  }).count() === 0) {
    console.log('creating devs');
    createFakeUsers(_DEV_COUNT, 'dev');
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"loans.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/fixtures/loans.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var moment = void 0;
module.watch(require("moment"), {
  default: function _default(v) {
    moment = v;
  }
}, 0);
var LoanService = void 0;
module.watch(require("../api/loans/LoanService"), {
  default: function _default(v) {
    LoanService = v;
  }
}, 1);

var _LOAN_STATUS = void 0,
    _PURCHASE_TYPE = void 0,
    _CANTONS = void 0,
    _INTEREST_RATES = void 0,
    _OWNER = void 0,
    _AUCTION_STATUS = void 0,
    _CLOSING_STEPS_TYPE = void 0,
    _CLOSING_STEPS_STATUS = void 0,
    _AUCTION_MOST_IMPORTANT = void 0,
    _INSURANCE_USE_PRESET = void 0,
    _LOAN_STRATEGY_PRESET = void 0,
    _AMORTIZATION_STRATEGY_PRESET = void 0,
    _PAYMENT_SCHEDULES = void 0;

module.watch(require("../api/loans/loanConstants"), {
  LOAN_STATUS: function LOAN_STATUS(v) {
    _LOAN_STATUS = v;
  },
  PURCHASE_TYPE: function PURCHASE_TYPE(v) {
    _PURCHASE_TYPE = v;
  },
  CANTONS: function CANTONS(v) {
    _CANTONS = v;
  },
  INTEREST_RATES: function INTEREST_RATES(v) {
    _INTEREST_RATES = v;
  },
  OWNER: function OWNER(v) {
    _OWNER = v;
  },
  AUCTION_STATUS: function AUCTION_STATUS(v) {
    _AUCTION_STATUS = v;
  },
  CLOSING_STEPS_TYPE: function CLOSING_STEPS_TYPE(v) {
    _CLOSING_STEPS_TYPE = v;
  },
  CLOSING_STEPS_STATUS: function CLOSING_STEPS_STATUS(v) {
    _CLOSING_STEPS_STATUS = v;
  },
  AUCTION_MOST_IMPORTANT: function AUCTION_MOST_IMPORTANT(v) {
    _AUCTION_MOST_IMPORTANT = v;
  },
  INSURANCE_USE_PRESET: function INSURANCE_USE_PRESET(v) {
    _INSURANCE_USE_PRESET = v;
  },
  LOAN_STRATEGY_PRESET: function LOAN_STRATEGY_PRESET(v) {
    _LOAN_STRATEGY_PRESET = v;
  },
  AMORTIZATION_STRATEGY_PRESET: function AMORTIZATION_STRATEGY_PRESET(v) {
    _AMORTIZATION_STRATEGY_PRESET = v;
  },
  PAYMENT_SCHEDULES: function PAYMENT_SCHEDULES(v) {
    _PAYMENT_SCHEDULES = v;
  }
}, 2);

var _fakeFile = void 0;

module.watch(require("../api/files/files"), {
  fakeFile: function fakeFile(v) {
    _fakeFile = v;
  }
}, 3);

var _STEPS_PER_LOAN = void 0;

module.watch(require("./config"), {
  STEPS_PER_LOAN: function STEPS_PER_LOAN(v) {
    _STEPS_PER_LOAN = v;
  }
}, 4);
var createFakeBorrowers = void 0;
module.watch(require("./borrowers"), {
  default: function _default(v) {
    createFakeBorrowers = v;
  }
}, 5);
var createFakeProperty = void 0;
module.watch(require("./properties"), {
  default: function _default(v) {
    createFakeProperty = v;
  }
}, 6);
var purchaseTypes = Object.values(_PURCHASE_TYPE);

var generateRandomNumber = function generateRandomNumber(maxSteps) {
  return Math.floor(Math.random() * maxSteps + 1);
};

var fakeGeneral = {
  purchaseType: purchaseTypes[Math.floor(Math.random() * purchaseTypes.length)],
  fortuneUsed: 250000,
  insuranceFortuneUsed: 100000,
  wantedClosingDate: moment().add(15, 'd').toDate()
};
var logic1 = {};
var logic2 = {
  step: 2,
  verification: {
    requested: false,
    validated: true,
    comments: []
  },
  auction: {}
};
var logic3 = {
  step: 3,
  verification: {
    requested: false,
    validated: true,
    comments: []
  },
  // auctionStarted: true,
  auction: {
    status: 'ENDED',
    startTime: new Date(),
    endTime: new Date()
  },
  // auctionEndTime: new Date(),
  hasValidatedStructure: true,
  insuranceUsePreset: 'WITHDRAWAL',
  loanStrategyPreset: 'FIXED',
  amortizationStrategyPreset: 'INDIRECT',
  lender: {},
  closingSteps: [{
    id: 'upload0',
    title: 'Contrat de prêt signé',
    type: 'UPLOAD'
  }, {
    id: 'todo0',
    title: 'Ouverture de compte chez votre prêteur',
    description: 'Il faut ouvrir un compte bancaire chez votre prêteur où les fonds de votre hypothèque résideront.',
    type: 'TODO',
    status: 'VALID'
  }, {
    id: 'todo1',
    title: 'Versement des fonds propres',
    description: 'Vous devez aller chez le notaire et verser les fonds propres nécessaires sur un compte escrow.',
    type: 'TODO',
    status: 'UNVERIFIED'
  }, {
    id: 'todo2',
    title: 'Engagement du notaire relative aux cédules hypothécaires',
    description: '',
    type: 'TODO',
    status: 'ERROR',
    error: 'Le notaire doit vous convier à un 2ème rendez-vous'
  }]
};
var fakeFiles = {
  plans: [_fakeFile],
  cubage: [_fakeFile],
  pictures: [_fakeFile],
  buyersContract: [_fakeFile],
  landRegisterExtract: [_fakeFile],
  coownershipAllocationAgreement: [_fakeFile],
  coownershipAgreement: [_fakeFile],
  upload0: [_fakeFile]
};
var fakeFiles2 = {
  plans: [_fakeFile],
  cubage: [_fakeFile],
  pictures: [_fakeFile] // buyersContract: [fakeFile],
  // landRegisterExtract: [fakeFile],
  // marketingBrochure: [fakeFile],
  // coownershipAllocationAgreement: [fakeFile],
  // coownershipAgreement: [fakeFile],

};

var createFakeLoans = function createFakeLoans(userId) {
  var completeFiles = Math.random() > 0.5;
  var borrowerIds = createFakeBorrowers(userId);
  var propertyId = createFakeProperty(userId);
  var loan = {
    name: "Rue du Test " + Math.floor(Math.random() * 1000),
    borrowerIds: borrowerIds,
    propertyId: propertyId,
    general: fakeGeneral,
    files: fakeFiles
  };

  switch (generateRandomNumber(_STEPS_PER_LOAN)) {
    case 3:
      loan.logic = logic3;
      loan.files = completeFiles ? fakeFiles : fakeFiles2;
      loan.loanTranches = [{
        value: 750000,
        type: 'interest10' // TODO add tranches here

      }];
      break;

    case 2:
      loan.logic = logic2;
      break;

    default:
      loan.logic = logic1;
  }

  return LoanService.insert({
    loan: loan,
    userId: userId
  });
};

module.exportDefault(createFakeLoans);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/fixtures/methods.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _check = void 0;

module.watch(require("meteor/check"), {
  check: function check(v) {
    _check = v;
  }
}, 1);

var _Borrowers = void 0,
    _Loans = void 0,
    _Offers = void 0,
    _Properties = void 0,
    _Tasks = void 0,
    _Users = void 0,
    _SecurityService = void 0;

module.watch(require("../api"), {
  Borrowers: function Borrowers(v) {
    _Borrowers = v;
  },
  Loans: function Loans(v) {
    _Loans = v;
  },
  Offers: function Offers(v) {
    _Offers = v;
  },
  Properties: function Properties(v) {
    _Properties = v;
  },
  Tasks: function Tasks(v) {
    _Tasks = v;
  },
  Users: function Users(v) {
    _Users = v;
  },
  SecurityService: function SecurityService(v) {
    _SecurityService = v;
  }
}, 2);

var _USER_COUNT = void 0,
    _ADMIN_COUNT = void 0,
    _MAX_LOANS_PER_USER = void 0;

module.watch(require("./config"), {
  USER_COUNT: function USER_COUNT(v) {
    _USER_COUNT = v;
  },
  ADMIN_COUNT: function ADMIN_COUNT(v) {
    _ADMIN_COUNT = v;
  },
  MAX_LOANS_PER_USER: function MAX_LOANS_PER_USER(v) {
    _MAX_LOANS_PER_USER = v;
  }
}, 3);
var createFakeLoan = void 0;
module.watch(require("./loans"), {
  default: function _default(v) {
    createFakeLoan = v;
  }
}, 4);
var createFakeTask = void 0;
module.watch(require("./tasks"), {
  default: function _default(v) {
    createFakeTask = v;
  }
}, 5);
var createFakeUsers = void 0;
module.watch(require("./users"), {
  default: function _default(v) {
    createFakeUsers = v;
  }
}, 6);
var createFakeOffer = void 0;
module.watch(require("./offers"), {
  default: function _default(v) {
    createFakeOffer = v;
  }
}, 7);

var generateNumberOfLoans = function generateNumberOfLoans(max) {
  return Math.floor(Math.random() * max + 1);
};

var getAdmins = function getAdmins() {
  var admins = _Users.find({
    roles: {
      $in: ['admin']
    }
  }).fetch();

  if (admins.length === 0) {
    var newAdmins = createFakeUsers(_ADMIN_COUNT, 'admin');
    return newAdmins;
  }

  return admins.map(function (admin) {
    return admin._id;
  });
};

_Meteor.methods({
  generateTestData: function generateTestData() {
    if (_SecurityService.currentUserHasRole('dev') && !_Meteor.isProduction) {
      var admins = getAdmins();
      var newUsers = createFakeUsers(_USER_COUNT, 'user');
      newUsers.map(function (userId) {
        var assignedTo = admins[Math.floor(Math.random() * admins.length)];
        var numberOfLoans = generateNumberOfLoans(_MAX_LOANS_PER_USER);

        for (var i = 0; i < numberOfLoans; i += 1) {
          var loanId = createFakeLoan(userId, assignedTo);
          createFakeTask(loanId, assignedTo);
          createFakeOffer(loanId);
        }

        return userId;
      });
    }
  },
  purgeDatabase: function purgeDatabase(currentUserId) {
    _check(currentUserId, String);

    if (_SecurityService.currentUserHasRole('dev') && !_Meteor.isProduction) {
      _Borrowers.remove({});

      _Loans.remove({});

      _Offers.remove({});

      _Properties.remove({});

      _Tasks.remove({});

      _Users.remove({
        _id: {
          $ne: currentUserId
        }
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"offers.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/fixtures/offers.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OfferService = void 0;
module.watch(require("../api/offers/OfferService"), {
  default: function _default(v) {
    OfferService = v;
  }
}, 0);

var _getRandomOffer = void 0;

module.watch(require("../api/offers/fakes"), {
  getRandomOffer: function getRandomOffer(v) {
    _getRandomOffer = v;
  }
}, 1);

var _Loans = void 0,
    _Properties = void 0;

module.watch(require("../api"), {
  Loans: function Loans(v) {
    _Loans = v;
  },
  Properties: function Properties(v) {
    _Properties = v;
  }
}, 2);

var createFakeOffers = function createFakeOffers(loanId) {
  var loan = _Loans.findOne(loanId);

  var property = _Properties.findOne(loan.propertyId);

  var object = _getRandomOffer({
    loan: (0, _extends3.default)({}, loan, {
      _id: loan._id
    }),
    property: property
  }, true);

  return OfferService.insertAdminOffer({
    offer: object,
    loan: loan
  });
};

module.exportDefault(createFakeOffers);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"properties.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/fixtures/properties.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var PropertyService = void 0;
module.watch(require("../api/properties/PropertyService"), {
  default: function _default(v) {
    PropertyService = v;
  }
}, 0);

var _PROPERTY_STATUS = void 0,
    _USAGE_TYPE = void 0,
    _PROPERTY_STYLE = void 0,
    _VOLUME_NORM = void 0;

module.watch(require("../api/properties/propertyConstants"), {
  PROPERTY_STATUS: function PROPERTY_STATUS(v) {
    _PROPERTY_STATUS = v;
  },
  USAGE_TYPE: function USAGE_TYPE(v) {
    _USAGE_TYPE = v;
  },
  PROPERTY_STYLE: function PROPERTY_STYLE(v) {
    _PROPERTY_STYLE = v;
  },
  VOLUME_NORM: function VOLUME_NORM(v) {
    _VOLUME_NORM = v;
  }
}, 1);

var _fakeFile = void 0;

module.watch(require("../api/files/files"), {
  fakeFile: function fakeFile(v) {
    _fakeFile = v;
  }
}, 2);
var statuses = Object.values(_PROPERTY_STATUS);
var usageTypes = Object.values(_USAGE_TYPE);
var styles = Object.values(_PROPERTY_STYLE);
var volumeNorms = Object.values(_VOLUME_NORM);

var getRandomValueInRange = function getRandomValueInRange(min, max) {
  return Math.random() * (max - min) + min;
};

var getRandomValueInArray = function getRandomValueInArray(array) {
  return array[Math.floor(Math.random() * array.length)];
};

var createFakeProperties = function createFakeProperties(userId) {
  var object = {
    status: getRandomValueInArray(statuses),
    value: getRandomValueInRange(500000, 3000000),
    address1: "Rue du Succ\xE8s " + Math.floor(getRandomValueInRange(1, 500)),
    propertyWork: 40000,
    zipCode: getRandomValueInRange(1000, 4000),
    city: 'Lausanne',
    usageType: getRandomValueInArray(usageTypes),
    style: getRandomValueInArray(styles),
    futureOwner: 0,
    constructionYear: 2010,
    landArea: 300,
    insideArea: 140,
    volume: 1500,
    volumeNorm: getRandomValueInArray(volumeNorms),
    roomCount: 5,
    bathroomCount: 2,
    toiletCount: 0,
    parking: {
      box: 0,
      inside: 1,
      outside: 2
    },
    minergie: true,
    isCoproperty: true,
    copropertyPercentage: 400,
    cityPlacementQuality: 2,
    buildingPlacementQuality: 3,
    buildingQuality: 1,
    flatQuality: 2,
    materialsQuality: 2,
    files: {
      plans: [_fakeFile],
      cubage: [_fakeFile],
      pictures: [_fakeFile],
      landRegisterExtract: [_fakeFile]
    }
  };
  return PropertyService.insert({
    property: object,
    userId: userId
  });
};

module.exportDefault(createFakeProperties);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tasks.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/fixtures/tasks.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var TaskService = void 0;
module.watch(require("../api/tasks/TaskService"), {
  default: function _default(v) {
    TaskService = v;
  }
}, 0);

var _TASK_TYPE = void 0;

module.watch(require("../api/tasks/tasksConstants"), {
  TASK_TYPE: function TASK_TYPE(v) {
    _TASK_TYPE = v;
  }
}, 1);
var types = Object.values(_TASK_TYPE);

var createFakeTasks = function createFakeTasks(loanId, assignedTo) {
  var type = types[Math.floor(Math.random() * types.length)];
  return TaskService.insert({
    type: type,
    loanId: loanId,
    assignedTo: assignedTo // createdByUserId: Meteor.userId(),

  });
};

module.exportDefault(createFakeTasks);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"users.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/fixtures/users.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Accounts = void 0;

module.watch(require("meteor/accounts-base"), {
  Accounts: function Accounts(v) {
    _Accounts = v;
  }
}, 0);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 1);

var createFakeUsers = function createFakeUsers(count, role) {
  var insertedUsers = [];

  for (var i = 0; i < count; i += 1) {
    var userId = _Accounts.createUser({
      email: role + "-" + (i + 1) + "@epotek.ch",
      password: '12345'
    });

    _Roles.addUsersToRoles(userId, [role]);

    insertedUsers.push(userId);
  }

  return insertedUsers;
};

module.exportDefault(createFakeUsers);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"lang":{"fr.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/core/lang/fr.json                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {
  "AboutPage.description": "e-Potek vous permet de facilement trouver un prêt hypothécaire dans le canton de Genève. Expansion prévue prochainement.{verticalSpace}L'équipe derrière e-Potek est composée d'entrepreneurs expérimentés dans la finance et les prêts hypothécaires en Suisse.",
  "AboutPage.title": "Le Prêt Hypothécaire de Demain",
  "AcceptClosingModal.description": "Toute l'équipe d'e-Potek vous félicite pour le décaissement de votre prêt hypothécaire, et d'être enfin propriétaire de votre bien immobilier.{verticalSpace}Vous pouvez maintenant utiliser votre tableau de bord e-Potek pour garder un oeil sur votre prochaine échéance de paiement, et consulter les taux lorsque le refinancement s'approchera.",
  "AcceptClosingModal.description2": "Merci d'avoir utilisé e-Potek, voici votre code pour nous recommander auprès de vos proches, et empocher jusqu'a CHF 1 000 pour une affaire conclue.",
  "AcceptClosingModal.title": "Félicitations!",
  "AccountPage.change": "Changer",
  "AccountPage.email": "Adresse email",
  "AccountPage.language": "Langue",
  "AccountPage.notifications": "Recevoir des notifications quand mon dossier avance",
  "AccountPage.notifications.email": "Par email",
  "AccountPage.notifications.sms": "Par SMS",
  "AccountPage.password": "Mot de passe",
  "AccountPage.phone": "Téléphone",
  "AccountPage.title": "Mon Compte",
  "ActionsTable.actionName": "À faire",
  "ActionsTable.comment": "Commentaire",
  "ActionsTable.date": "Date",
  "ActionsTable.loanName": "Projet",
  "AddLoanPage.logIntoOtherAccount": "Utiliser un autre compte",
  "adminAction.addFinalSteps": "Transmettre réponse du prêteur",
  "adminAction.auction": "Enchères en cours",
  "adminAction.confirmClosing": "Confirmer le décaissement",
  "adminAction.lenderChosen": "Prêteur a été choisi",
  "adminAction.loanContract": "Demander le contrat",
  "adminAction.uploadContract": "Uploader le contrat",
  "adminAction.verify": "Vérifier dossier",
  "adminAction.verifyFinalSteps": "Vérifier les derniers documents",
  "AdminNote.addNote": "Ajouter une note",
  "AdminNote.adminNotes": "Admin Notes",
  "AdvancedOptions.borrowRatio": "Endettement voulu",
  "AmortizationChart.amortizationSeries": "Amortissement mensuel",
  "AmortizationChart.debtSeries": "Dette",
  "AmortizationChart.fortuneSeries": "Fonds Propres",
  "AmortizationChart.paymentSeries": "Paiement mensuel",
  "AmortizationChart.refinancingFlag": "Refinancement",
  "AmortizationChart.title": "Les vingt années à venir",
  "AmortizationChart.yAxis1": "Dette et fonds propres",
  "AmortizationChart.yAxis2": "Paiements mensuels",
  "AmortizationTool.catastrophy.title": "Scénario catastrophe",
  "AmortizationTool.futureRate": "Refinancement dans 10 ans",
  "AmortizationTool.initialRate": "Taux initial à 10 ans",
  "AmortizationTool.lower.title": "Baisse des taux",
  "AmortizationTool.rate": "Taux à 10 ans: {rate, number, percentage}",
  "AmortizationTool.rise.title": "Augmentation des taux",
  "AmortizationTool.stable.title": "Taux stables",
  "AmortizingPicker.description": "Choisir comment amortir son bien immobilier peut avoir des conséquences très importantes pour votre futur. N'hésitez pas à nous appeler pour prendre cette décision en toute confiance.",
  "AmortizingPicker.title": "Stratégie d'amortissement",
  "AmortizingSummary.direct.description": "Vous avez choisi l'amortissement direct.",
  "AmortizingSummary.indirect.description": "Vous avez choisi l'amortissement indirect.",
  "AppPage.begin": "Commencer",
  "AppPage.comparator": "Comparateur de propriétés",
  "AppPage.loan": "Demande de prêt",
  "AppPage.loan.done": "Prêt Hypothécaire",
  "AppPage.newLoan": "Nouvelle demande de prêt",
  "AppPage.noName": "Sans titre",
  "AppPage.properties": "{count, plural, =0 {Pas de propriétés} one {Une propriété} other {# propriétés}}",
  "AppPage.step": "{step, plural, one {1ère Étape} other {#ème Étape}}",
  "ArrayInput.add": "Ajouter",
  "Auction.notified": "Vous recevrez une notification lorsque ce sera terminé",
  "Auction.tableText": "Bataille des prêteurs en cours",
  "Auction.title": "Enchères en cours..",
  "AuctionResults.countSuffix": " Offres reçues",
  "AuctionResults.description": "Vos offres sont arrivées, vous pouvez dès à présent choisir votre prêteur.",
  "AuctionResults.title": "Résultat des enchères",
  "AuctionStart.cancel": "Pas maintenant",
  "AuctionStart.countSuffix": " Prêteurs",
  "AuctionStart.CTA": "Commencer les enchères",
  "AuctionStart.description": "Durant les enchères, les {count} prêteurs vont entrer en compétition sur votre dossier. Ils auront deux fois 24 heures pour miser avec un taux d'intérêt sur votre projet.{verticalSpace}Puis, dans deux jours ouvrables, vous recevrez un tableau avec toutes les offres.",
  "AuctionStart.lenderList": "Voir la liste",
  "AuctionStart.title": "Lancez les enchères",
  "bert.emailVerificationSent": "Vérification envoyée à {email}!",
  "BorrowerAdder.label": "+ Ajouter un 2e emprunteur",
  "BorrowerHeader.age": "{value} ans",
  "BorrowerHeader.title": "Emprunteur {index}",
  "BorrowerPage.files": "Documents",
  "BorrowerPage.finance": "Finances",
  "BorrowerPage.personal": "Perso",
  "BorrowersPage.borrowers": "Emprunteurs",
  "BorrowersTable.createdAt": "Créé le",
  "BorrowersTable.name": "Nom",
  "BorrowersTable.updatedAt": "Modifié le",
  "CareersPage.description": "Nous ne cherchons pas activement de nouveaux candidats en ce moment. Cependant, nous sommes toujours ouverts aux candidatures spontanées, écris-nous à {email}.",
  "CareersPage.title": "Travailler à e-Potek",
  "ClosingPage.CTA": "Demander le décaissement",
  "ClosingPage.description": "Lorsque vous avez soumis les derniers documents, vous pourrez demander à votre prêteur de décaisser le prêt.",
  "ClosingPage.empty": "Nous sommes en train de préparer les dernières étapes pour que vous puissiez décaisser votre prêt hypothécaire. Revenez bientôt!",
  "ClosingPage.loading": "Vous serez notifié par e-mail lorsque votre prêteur est disposé au décaissement.",
  "ClosingPage.progress": "Progrès: {value, number, percent}",
  "collections.borrowers": "Emprunteurs",
  "collections.loans": "Hypothèques",
  "collections.tasks": "Tâches",
  "collections.users": "Utilisateurs",
  "Comparator.createdAt": "Créé le",
  "Comparator.empty": "Ajoutez une propriété pour commencer",
  "Comparator.incomeRatio": "Charges / Revenus",
  "Comparator.isValid": "Ça passe ?",
  "Comparator.loan": "Prêt Hypothécaire",
  "Comparator.minergy": "Minergie",
  "Comparator.monthly": "Charges estimées",
  "Comparator.name": "Nom",
  "Comparator.nearestBusStation": "Bus proche",
  "Comparator.nearestStore": "Courses proche",
  "Comparator.nearestTrainStation": "Train proche",
  "Comparator.notaryFees": "Frais de notaire",
  "Comparator.ownFunds": "Fonds propres requis",
  "Comparator.realBorrowRatio": "Prêt / Prix d'achat",
  "Comparator.realMonthly": "Charges estimées",
  "Comparator.theoreticalMonthly": "Charges théoriques FINMA",
  "Comparator.value": "Prix d'achat",
  "CompareColumn.boolean.false": "Non",
  "CompareColumn.boolean.true": "Oui",
  "CompareColumnFooter.hide": "Masquer",
  "CompareColumnFooter.show": "Options",
  "CompareOptions.addProperty": "Ajouter une propriété",
  "CompareOptions.hideAdvanced": "Masquer Options",
  "CompareOptions.showAdvanced": "Options Avancées",
  "CompareOptions.useBorrowers": "Calculs simplifiés",
  "ComparePage.CTA": "Ajouter un bien à comparer",
  "ComparePage.start": "Commencer à comparer",
  "CompareTable.empty": "Ajoutez une propriété pour commencer",
  "CompareTableContent.empty": "Aucune propriété avec ce filtre",
  "ConditionsButton.counterpart": "Contreparties pour les meilleurs taux",
  "ConditionsButton.counterparts": "Contreparties pour les meilleurs taux",
  "ConditionsButton.CTA": "Ok",
  "ConditionsButton.mandatory": "Conditions obligatoires",
  "ConditionsButton.title": "Conditions",
  "ContactButton.byEmail": "Par email",
  "ContactButton.byPhone": "Par téléphone",
  "ContactButton.yourAdvisor": "Votre conseiller",
  "ContractDownloader.ready": "Votre contrat est prêt, vous pouvez le télécharger dès maintenant.",
  "ContractDownloader.waiting": "Votre contrat arrivera ici.",
  "ContractPage.CTA": "Demander le contrat",
  "ContractPage.description": "Pour obtenir un contrat officiel de prêt, votre prêteur a encore besoin de quelques documents. Dès que vous avez soumis tous les documents nécessaires, vous pourrez demander le contrat, ce qui prendra quelques jours à votre prêteur.",
  "ContractPage.loading": "Vous serez notifié par e-mail lorsque votre contrat est prêt.",
  "ContractPage.progress": "Progrès: {value, number, percent}",
  "CustomFieldAdder.add": "Ajouter",
  "CustomFieldAdder.attic": "Avec grenier",
  "CustomFieldAdder.balcony": "Avec balcon",
  "CustomFieldAdder.basement": "Avec cave",
  "CustomFieldAdder.biscuitHouse": "Murs en pain d'épices",
  "CustomFieldAdder.boolean": "Oui / Non",
  "CustomFieldAdder.chimney": "Avec cheminée",
  "CustomFieldAdder.constructionYear": "Année de construction",
  "CustomFieldAdder.contact": "Contact",
  "CustomFieldAdder.date": "Date",
  "CustomFieldAdder.dishwasher": "Avec lave-vaisselle",
  "CustomFieldAdder.extensionAllowed": "Aggrandissement possible",
  "CustomFieldAdder.facing": "Orientation",
  "CustomFieldAdder.floor": "Étage dans l'immeuble",
  "CustomFieldAdder.floors": "Nombre d'Étages",
  "CustomFieldAdder.garage": "Avec garage",
  "CustomFieldAdder.garden": "Avec jardin",
  "CustomFieldAdder.groundFloor": "Rez-de-chaussée",
  "CustomFieldAdder.haunted": "Maison hantée",
  "CustomFieldAdder.internetSpeed": "Débit internet max",
  "CustomFieldAdder.landArea": "Surface du terrain",
  "CustomFieldAdder.landingRunway": "Avec piste d'atterissage",
  "CustomFieldAdder.money": "Montant en CHF",
  "CustomFieldAdder.name": "Nom du champ",
  "CustomFieldAdder.number": "Nombre",
  "CustomFieldAdder.parkingSpots": "Places de parc",
  "CustomFieldAdder.percent": "Pourcentage",
  "CustomFieldAdder.pool": "Avec piscine",
  "CustomFieldAdder.renovationRequired": "Rénovations nécessaires",
  "CustomFieldAdder.richNeighbours": "Voisins milliardaires",
  "CustomFieldAdder.rooms": "Nombre de pièces",
  "CustomFieldAdder.summerTemperature": "Température en été",
  "CustomFieldAdder.surface": "Surface habitable",
  "CustomFieldAdder.terrace": "Avec terrasse",
  "CustomFieldAdder.text": "Texte",
  "CustomFieldAdder.title": "Ajouter un champ personnel",
  "CustomFieldAdder.type": "Type de valeur",
  "CustomFieldAdder.washingMachine": "Avec machine à laver",
  "DashboardBorrowers.age": "{value} ans",
  "DashboardBorrowers.itemTitle": "Emprunteur {index}",
  "DashboardBorrowers.title": "{count, plural, one {Emprunteur} other {Emprunteurs}}",
  "DashboardCharts.expensesTitle": "Coût Mensuel",
  "DashboardDownload.contract": "Votre contrat",
  "DashboardDownload.title": "Documents",
  "DashboardLastSteps.closing": "Décaisser le prêt",
  "DashboardLastSteps.contract": "Obtenir le contrat",
  "DashboardLastSteps.progress": "Progrès: {value}/{total}",
  "DashboardLastSteps.subtitle": "Date de Décaissement",
  "DashboardLastSteps.title": "Date de Décaissement",
  "DashboardMenu.financePage": "Plus de détails",
  "DashboardMenu.showDetail": "Afficher les détails",
  "DashboardMenu.showOverview": "Afficher le résumé",
  "DashboardOffer.title": "Offre retenue",
  "DashboardPage.title": "Tableau de Bord",
  "DashboardPayments.lastDate": "Dernier paiement",
  "DashboardPayments.title": "Prochain paiement",
  "DashboardProperty.title": "Bien immobilier",
  "DashboardRecap.detail": "Détail",
  "DashboardRecap.overview": "Résumé",
  "DashboardRecap.title": "Plan Financier",
  "DashboardStatus.auction": "Enchères en cours...",
  "DashboardStatus.step": "{step, plural, one {1ère étape} =2 {2ème étape} =3 {3ème étape} =4 {4ème étape}}",
  "DashboardStatus.title": "Statut de votre demande",
  "DashboardStatus.verification": "Vérification en cours...",
  "DashboardUnverified.CTA": "Renvoyer l'email",
  "DashboardUnverified.description": "Jetez un oeil à votre boite email pour un message de notre part. Rien reçu ?",
  "DashboardUnverified.title": "Vous n'avez pas encore vérifié votre adresse email.",
  "DateInput.placeholder": "Choisissez une date",
  "DefaultOptions.fortune": "Fonds propres",
  "DefaultOptions.income": "Revenus annuels bruts",
  "DefaultOptions.interestRate": "Taux d'intérêts",
  "DropzoneArrayItem.fileCount": "{count, plural, =0 {Pas de fichiers} one {Un fichier} other {# fichiers}}",
  "DropzoneInput.cancelUpload": "Annuler l'upload",
  "DropzoneInput.cancelUploadConfirmation": "Êtes-vous sûr ?",
  "DropzoneInput.invalidFileType": "Vous ne pouvez uploader que des fichiers PDF, JPG et PNG.",
  "DropzoneInput.message": "Déposez un ou plusieurs fichiers ici, ou cliquez pour choisir",
  "DropzoneInput.removeFile": "Supprimer",
  "e-Potek": "e-Potek",
  "EmailLine.alreadyAnAccount": "J'ai déjà un compte e-Potek",
  "emails.auctionEnded.body": "Les prêteurs se sont battus d'arrache-pied pour vous faire des offres incroyables et avoir le plaisir de financer votre futur bien immobilier. Découvrez combien d'offres vous avez reçues, et choisissez votre prêteur en cliquant sur le bouton en bas.",
  "emails.auctionEnded.CTA": "Choisir son prêteur",
  "emails.auctionEnded.subject": "[e-Potek] Les résultats sont arrivés",
  "emails.auctionEnded.title": "Félicitations",
  "emails.auctionStarted.body": "Nous avons appelé tous les prêteurs de la place à se lancer et vous faire une offre incroyable. Vous pourrez accéder aux résultats le {date, date, full} à minuit.{verticalSpace}Vous recevrez une nouvelle notification quand les enchères seront terminées, donc en attendant, reposez vous!",
  "emails.auctionStarted.subject": "[e-Potek] Les enchères ont commencé",
  "emails.auctionStarted.title": "La bataille se prépare",
  "emails.AUCTION_ENDED.BODY": "Les prêteurs se sont battus d'arrache-pied pour vous faire des offres incroyables et avoir le plaisir de financer votre futur bien immobilier. Découvrez combien d'offres vous avez reçues, et choisissez votre prêteur en cliquant sur le bouton en bas.",
  "emails.AUCTION_ENDED.CTA": "Choisir son prêteur",
  "emails.AUCTION_ENDED.SUBJECT": "[e-Potek] Les résultats sont arrivés",
  "emails.AUCTION_ENDED.TITLE": "Félicitations",
  "emails.AUCTION_STARTED.BODY": "Nous avons appelé tous les prêteurs de la place à se lancer et vous faire une offre incroyable. Vous pourrez accéder aux résultats le {date, date, full} à minuit.{verticalSpace}Vous recevrez une nouvelle notification quand les enchères seront terminées, donc en attendant, reposez vous!",
  "emails.AUCTION_STARTED.SUBJECT": "[e-Potek] Les enchères ont commencé",
  "emails.AUCTION_STARTED.TITLE": "La bataille se prépare",
  "emails.enrollAccount.body": "On a bien enregistré votre projet, et vous invitons à découvrir votre compte et avancer sur votre prêt hypothécaire.",
  "emails.enrollAccount.CTA": "Continuer l'expérience",
  "emails.enrollAccount.from": "Yannis d'e-Potek",
  "emails.enrollAccount.subject": "Bienvenue chez e-Potek",
  "emails.enrollAccount.title": "Entrez sur votre compte e-Potek",
  "emails.ENROLL_ACCOUNT.BODY": "On a bien enregistré votre projet, et vous invitons à découvrir votre compte et avancer sur votre prêt hypothécaire.",
  "emails.ENROLL_ACCOUNT.CTA": "Continuer l'expérience",
  "emails.ENROLL_ACCOUNT.from": "Yannis d'e-Potek",
  "emails.ENROLL_ACCOUNT.SUBJECT": "Bienvenue chez e-Potek",
  "emails.ENROLL_ACCOUNT.TITLE": "Entrez sur votre compte e-Potek",
  "emails.footer": "{copyright}Vous recevez cet email car vous avez créé un compte sur {url}{unsubscribe}",
  "emails.resetPassword.body": "Il vous regarde avec un air exaspéré, visiblement déçu que vous ayiez pu oublier un mot de passe aussi simple. Il essaie d'attirer votre attention sur le gros bouton en bas.",
  "emails.resetPassword.CTA": "Le gros bouton",
  "emails.resetPassword.from": "Gardien des clés d'e-Potek",
  "emails.resetPassword.subject": "Égarer son mot de passe",
  "emails.resetPassword.title": "Vous avez invoqué le gardien des clés d'e-Potek",
  "emails.RESET_PASSWORD.BODY": "Il vous regarde avec un air exaspéré, visiblement déçu que vous ayiez pu oublier un mot de passe aussi simple. Il essaie d'attirer votre attention sur le gros bouton en bas.",
  "emails.RESET_PASSWORD.CTA": "Le gros bouton",
  "emails.RESET_PASSWORD.from": "Gardien des clés d'e-Potek",
  "emails.RESET_PASSWORD.SUBJECT": "Égarer son mot de passe",
  "emails.RESET_PASSWORD.TITLE": "Vous avez invoqué le gardien des clés d'e-Potek",
  "emails.unsubscribe": "Me Désabonner",
  "emails.verificationError.body": "Il semblerait qu'il y a eu un petit problème lors de la vérification.",
  "emails.verificationError.CTA": "Fixer la fuite d'eau",
  "emails.verificationError.subject": "[e-Potek] Souci de vérification",
  "emails.verificationError.title": "Oops..",
  "emails.verificationPassed.body": "Vous pouvez continuer votre demande de prêt et lancer les enchères à tout moment. Vous pourrez encore modifier la structure de votre projet une dernière fois avant de vous lancer.",
  "emails.verificationPassed.CTA": "Continuer",
  "emails.verificationPassed.subject": "[e-Potek] Vérification réussie",
  "emails.verificationPassed.title": "Tout est en ordre",
  "emails.verificationRequested.body": "Nous allons regarder ce que vous nous avez confié avec le plus grand soin, et vérifier que vos informations sont en ordre et dans le meilleur état pour être envoyé aux prêteurs. Nous traiterons votre dossier dans les plus brefs délais durant les heures ouvrables.",
  "emails.verificationRequested.subject": "[e-Potek] Vérification demandée",
  "emails.verificationRequested.title": "Vous avez demandé la vérification de votre dossier",
  "emails.VERIFICATION_ERROR.BODY": "Il semblerait qu'il y a eu un petit problème lors de la vérification.",
  "emails.VERIFICATION_ERROR.CTA": "Fixer la fuite d'eau",
  "emails.VERIFICATION_ERROR.SUBJECT": "[e-Potek] Souci de vérification",
  "emails.VERIFICATION_ERROR.TITLE": "Oops..",
  "emails.VERIFICATION_PASSED.BODY": "Vous pouvez continuer votre demande de prêt et lancer les enchères à tout moment. Vous pourrez encore modifier la structure de votre projet une dernière fois avant de vous lancer.",
  "emails.VERIFICATION_PASSED.CTA": "Continuer",
  "emails.VERIFICATION_PASSED.SUBJECT": "[e-Potek] Vérification réussie",
  "emails.VERIFICATION_PASSED.TITLE": "Tout est en ordre",
  "emails.VERIFICATION_REQUESTED.BODY": "Nous allons regarder ce que vous nous avez confié avec le plus grand soin, et vérifier que vos informations sont en ordre et dans le meilleur état pour être envoyé aux prêteurs. Nous traiterons votre dossier dans les plus brefs délais durant les heures ouvrables.",
  "emails.VERIFICATION_REQUESTED.SUBJECT": "[e-Potek] Vérification demandée",
  "emails.VERIFICATION_REQUESTED.TITLE": "Vous avez demandé la vérification de votre dossier",
  "emails.verifyEmail.subject": "Hypothèque, quand je t'aurai..",
  "emails.VERIFY_EMAIL.SUBJECT": "Bienvenue chez e-Potek!",
  "EmailVerification.error": "Zut, il y a eu une erreur, rééssayez!",
  "EmailVerification.message": "Email vérifié, Merci!",
  "error.fileSize.description": "On ne peut prendre que des fichiers en dessous de 50MB",
  "error.fileSize.title": "Fichier trop gros",
  "error.fileType.description": "On ne peut prendre que les .pdf, .jpg, .jpeg et .png",
  "error.fileType.title": "Fichier incompatible",
  "error.general": "Woops, il y a eu un petit souci!",
  "ExpensesChart.perMonth": "par mois",
  "ExpensesChartInterests.libor": "Libor moyen: {value, number, percentage}",
  "ExpensesChartInterests.selectFieldLabel": "Taux d'intérêt indicatif",
  "ExpensesChartInterests.years": "{years} ans moyen: {value, number, percentage}",
  "FaqPage.description": "En développement..",
  "FaqPage.title": "Questions fréquentes",
  "FieldToggles.customFields": "Champs personnels",
  "FieldToggles.defaultFields": "Champs e-Potek",
  "FieldToggles.label": "Choisir les champs",
  "FieldToggles.noCustomFields": "Vous n'avez pas encore de champs personnels, ajoutez-en en cliquant en bas à gauche de la page.",
  "FieldToggles.title": "Choisir quels champs afficher",
  "FileAdder.title": "+ Uploader un fichier",
  "files.bankAssetsChange": "Justificatif de fortune bancaire",
  "files.bankAssetsChange.tooltip": "Tout document justifiant de votre fortune bancaires (print screen e-banking, relevé mensuel ou annuel)",
  "files.bonus": "Justificatif des bonus",
  "files.bonus.tooltip": "Un justificatif par bonus perçu lors des 4 dernières années",
  "files.buyersContract": "Acte d'achat",
  "files.buyersContract.tooltipa": "Vous pouvez demander un duplicata auprès du notaire qui était chargé de la signature par le passé",
  "files.buyersContract.tooltipb": "Le notaire est chargé de produire un projet d’acte d’achat",
  "files.contract": "Contrat",
  "files.coownershipAgreement": "Règlement PPE",
  "files.coownershipAgreement.tooltip": "Ce document édicte les règles de vie de la copropriété",
  "files.coownershipAgreement.tooltip2": "Un tiers est nommé comme administrateur de la propriété (souvent une régie) cette entité peut vous fournir ce document.",
  "files.coownershipAllocationAgreement": "Cahier de répartition des locaux",
  "files.coownershipAllocationAgreement.tooltip": "Document décrivant la pondération de votre lot PPE vis à vis de l’immeuble entier",
  "files.coownershipAllocationAgreement.tooltip2": "Un tiers est nommé comme administrateur de la propriété (souvent une régie) cette entité peut vous fournir ce document.",
  "files.cubage": "Cubage",
  "files.cubage.tooltip": "Le cubage indique le volume en mètres cubes de votre bien immobilier.",
  "files.cubage.tooltip2": "Peut être mentionné sur la police d’assurance du bâtiment, dans un rapport du BEB ou peut être demandé auprès de votre architecte.",
  "files.currentMortgages": "Contrats de prêts existants",
  "files.currentMortgages.tooltip": "Nous avons besoins de connaître le montant de votre prêt hypothécaire existant, le taux d’intérêt et son échéance ainsi que de l‘amortissement annuel y relatif",
  "Files.description": "Voici l'endroit où vous pouvez uploader vos document en toute confidentialité.",
  "files.divorceJudgment": "Jugement de divorce",
  "files.expenses": "Charges",
  "files.expenses.tooltip": "Justificatif des charges mentionnées",
  "Files.files1.title": "Documents de base",
  "files.fireAndWaterInsurance": "Assurance incendie et dégâts des eaux",
  "files.fireAndWaterInsurance.tooltip": "Vous pouvez obtenir la copie de la police d’assurance existante auprès du vendeur",
  "files.identity": "Pièce d'identité",
  "files.identity.tooltip": "Passeport ou carte d'identité (les deux côtés)",
  "files.landRegisterExtract": "Extrait du registre foncier",
  "files.landRegisterExtract.tooltip": "Contient toutes les informations officielles de votre bien immobilier",
  "files.landRegisterExtract.tooltip2": "Vous pouvez obtenir l’extrait du registre du commerce auprès du registre foncier auquel votre commune est rattachée.",
  "files.lastSalaries": "3 dernières fiches de salaire",
  "files.marketingBrochure": "Brochure de vente",
  "files.marketingBrochure.tooltip": "Brochure marketing décrivant le bien immobilier. N'est pas obligatoire.",
  "files.nonPursuitExtract": "Extrait de l'office des poursuites",
  "files.nonPursuitExtract.tooltip": "Mentionne si vous êtes sujet à des poursuites. Avoir des poursuites peut arriver à tout le monde et peuvent parfois s’expliquer",
  "files.nonPursuitExtract.tooltip2": "Vous pouvez commander un extrait de l’office des poursuites sur le site internet ou physiquement au guichet de l’office cantonal de votre canton de résidence actuel. Il doit dater de moins de trois mois.",
  "files.otherIncome": "Autres revenus",
  "files.otherIncome.tooltip": "Justificatif de chaque autre revenu que vous avez mentionné",
  "files.ownCompanyFinancialStatements": "États financiers de l'employeur",
  "files.ownCompanyFinancialStatements.tooltip": "Bilans et comptes Pertes et Profits des 3 dernières années",
  "files.pensionFundYearlyStatement": "Certificat de la caisse de pension",
  "files.pensionFundYearlyStatement.tooltip": "Certificat que vous recevez chaque année de la part de la caisse de pension de votre employeur ou attestation de compte Libre Passage",
  "files.pensionFundYearlyStatement.tooltip2": "Ce document contient le capital prévoyance disponible pour l’accession à la propriété ainsi que différentes informations y relatives, vous devriez recevoir ce document chaque année au mois de janvier si vous ne le trouvez pas vous pouvez le réclamer auprès de votre caisse de pension directement.",
  "files.pictures": "4 Photos du bien",
  "files.pictures.tooltip": "Cuisine, salle de bains, façade extérieure, et vue. Mettez le bien immobilier en valeur",
  "files.plans": "Plans",
  "files.plans.tooltip": "Vous pouvez obtenir le plan auprès du vendeur ou auprès de la régie, il est préférable d’obtenir un plan avec les métrées",
  "files.reimbursementStatement": "Décompte de remboursement",
  "files.reimbursementStatement.tooltip": "Le décompte de remboursement est produit par votre prêteur actuel",
  "files.rent": "Loyers perçus",
  "files.rent.tooltip": "Loyer versé par le locataire existant ou justificatif du futur loyer",
  "files.rent.tooltip2": "Vous pouvez obtenir cette information auprès du vendeur ou auprès de la régie qui va gérer vos locataires, si vous n’avez pas de régie nous vous recommandons de vous informer sur la régie qui s'occupe actuellement de la gestion de l'immeuble.",
  "files.residencyPermit": "Permis d’établissement",
  "files.residencyPermit.tooltip": "Permis d’établissement pour étrangers mentionnant votre résidence fiscale",
  "files.retirementInsurancePlan": "Fortune de prévoyance Assurance",
  "files.retirementInsurancePlan.tooltip": "Document attestant de la valeur de rachat et des primes payées sur vos polices d’assurances 3A et 3B",
  "files.retirementInsurancePlan.tooltip2": "Vous pouvez obtenir ces informations auprès des compagnies d’assurances dans lesquels vous effectuez votre épargne de prévoyance.",
  "files.retirementPlanOther": "Fortune de prévoyance Bancaire",
  "files.retirementPlanOther.tooltip": "Relevé au 31/12 de vos compte épargne 3A et/ou comptes libre-passage",
  "files.retirementPlanOther.tooltip2": "Vous pouvez obtenir les relevés de vos comptes épargne 3A auprès des établissements bancaires dans lesquels vous déposez votre épargne",
  "files.salaryCertificate": "Certificat de salaire",
  "files.salaryCertificate.tooltip": "De l’année précédente - est utilisé pour votre déclaration fiscale",
  "files.salaryChange": "Justificatif du nouveau salaire",
  "files.salaryChange.tooltip": "Options: 3 dernières fiches salaires / une attestation de votre employeur / contrat de travail / avenant à votre contrat de travail",
  "files.signedContract": "Contrat signé",
  "files.signedContract.tooltip": "Le contrat de prêt avec votre signature à tous les endroits requis",
  "File.status.ERROR": "Non valide",
  "File.status.UNVERIFIED": "En attente de vérification",
  "File.status.VALID": "Validé",
  "files.taxes": "Déclaration fiscale",
  "files.taxes.tooltip": "Dernière disponible, complète et détaillée dans la mesure du possible accompagnée des annexes",
  "Files.title": "Mes Documents",
  "FilesPage.description": "Vous trouverez ici tous les documents que vous avez ajoutés à votre projet. Ils sont enregistrés en toute sécurité, et vous pourrez les y retrouver à tout instant.",
  "FilesPage.title": "Documents",
  "Finance.description": "Normalement, vous nous avez déjà donné tout ce dont nous avons besoin sur cette page.{verticalSpace}Vérifiez cependant que vous avez détaillé de façon exhaustive vos finances personelles. Les prêteurs vous offriront des conditions plus attractives si vos moyens dépassent le minimum nécéssaire pour votre Prêt Hypothécaire.",
  "Finance.notValidated": "Non validées",
  "Finance.recapTitle": "Récapitulatif (en {currency})",
  "Finance.title": "Mes Finances",
  "Finance.validated": "Validées",
  "FinancePage.title": "Graphiques financiers",
  "Forms.address1": "Adresse 1",
  "Forms.address1.placeholder": "Rue des Champs 7",
  "Forms.address2": "Adresse 2",
  "Forms.age": "Âge",
  "Forms.age.placeholder": "35",
  "Forms.auction.formTitle": "Derniers réglages",
  "Forms.balconyArea": "Surface des balcons en m2",
  "Forms.balconyArea.placeholder": "20",
  "Forms.bankFortune": "Fortune Bancaire",
  "Forms.bankFortune.placeholder": "CHF 100 000",
  "Forms.bathroomCount": "Nb. de salles de bain",
  "Forms.bathroomCount.info": "Salles de bains ou salles d’eau (respectivement avec baignoire ou douche)",
  "Forms.bathroomCount.placeholder": "1",
  "Forms.birthPlace": "Lieu de Naissance",
  "Forms.birthPlace.placeholder": "Berne, Suisse",
  "Forms.bonus.bonus2014": "Bonus 2014",
  "Forms.bonus.bonus2014.placeholder": "CHF 10 000",
  "Forms.bonus.bonus2015": "Bonus 2015",
  "Forms.bonus.bonus2015.placeholder": "CHF 10 000",
  "Forms.bonus.bonus2016": "Bonus 2016",
  "Forms.bonus.bonus2016.placeholder": "CHF 10 000",
  "Forms.bonus.bonus2017": "Bonus 2017",
  "Forms.bonus.bonus2017.placeholder": "CHF 10 000",
  "Forms.bonusExists": "Avez-vous un bonus ?",
  "Forms.buildingPlacementQuality": "Emplacement dans l'immeublee",
  "Forms.buildingPlacementQuality.0": "Mauvais",
  "Forms.buildingPlacementQuality.1": "Moyen",
  "Forms.buildingPlacementQuality.2": "Bon",
  "Forms.buildingPlacementQuality.3": "Très Bon",
  "Forms.buildingQuality": "Condition d’entretien du bâtiment",
  "Forms.buildingQuality.0": "Mauvais",
  "Forms.buildingQuality.1": "Moyen",
  "Forms.buildingQuality.2": "Bon",
  "Forms.buildingQuality.3": "Très Bon",
  "Forms.childrenCount": "Enfants à charge",
  "Forms.childrenCount.placeholder": "0",
  "Forms.citizenship": "Nationalité",
  "Forms.citizenship.placeholder": "Français, Allemand, Italien",
  "Forms.cityPlacementQuality": "Qualité de l'emplacement au sein de la commune",
  "Forms.cityPlacementQuality.0": "Mauvais",
  "Forms.cityPlacementQuality.1": "Moyen",
  "Forms.cityPlacementQuality.2": "Bon",
  "Forms.cityPlacementQuality.3": "Très Bon",
  "Forms.civilStatus": "État civil",
  "Forms.civilStatus.DIVORCED": "{gender, select, m {Divorcé} f {Divorcée} other {Divorcé}}",
  "Forms.civilStatus.MARRIED": "{gender, select, m {Marié} f {Mariée} other {Marié}}",
  "Forms.civilStatus.PACSED": "{gender, select, m {Pacsé} f {Pacsée} other {pacsé}}",
  "Forms.civilStatus.SINGLE": "Célibataire",
  "Forms.company": "Employeur",
  "Forms.company.placeholder": "Nestlé",
  "Forms.constructionYear": "Année de construction",
  "Forms.constructionYear.placeholder": "2005",
  "Forms.copropertyPercentage": "Répartition du bien au sein de la copropriété",
  "Forms.copropertyPercentage.info": "En millièmes",
  "Forms.copropertyPercentage.placeholder": "125",
  "Forms.currentOwner": "Qui est le propriétaire actuel ?",
  "Forms.currentOwner.0": "{name}",
  "Forms.currentOwner.1": "{name}",
  "Forms.currentOwner.both": "Les Deux",
  "Forms.currentOwner.other": "Autre",
  "Forms.expenses": "Charges",
  "Forms.expenses.description": "Type de charge",
  "Forms.expenses.LEASING": "Leasings",
  "Forms.expenses.MORTGAGE_LOAN": "Prêts immobiliers",
  "Forms.expenses.OTHER": "Autre",
  "Forms.expenses.PENSIONS": "Pensions et rentes",
  "Forms.expenses.PERSONAL_LOAN": "Crédits personnels",
  "Forms.expenses.RENT": "Loyers",
  "Forms.expenses.value": "Montant annuel",
  "Forms.expenses.value.placeholder": "CHF 10 000",
  "Forms.firstName": "Prénom",
  "Forms.firstName.placeholder": "Marie",
  "Forms.flatQuality": "Condition d’entretien de l’appartement",
  "Forms.flatQuality.0": "Mauvais",
  "Forms.flatQuality.1": "Moyen",
  "Forms.flatQuality.2": "Bon",
  "Forms.flatQuality.3": "Très Bon",
  "Forms.fortune": "Fortune",
  "Forms.futureOwner": "Qui sera le propriétaire du bien immobilier ?",
  "Forms.futureOwner.0": "{name}",
  "Forms.futureOwner.1": "{name}",
  "Forms.futureOwner.both": "Les Deux",
  "Forms.futureOwner.other": "Autre",
  "Forms.gender": "Sexe",
  "Forms.gender.F": "Femme",
  "Forms.gender.M": "Homme",
  "Forms.gender.OTHER": "Autre",
  "Forms.general.auctionMostImportant": "Critère le plus important",
  "Forms.general.auctionMostImportant.NOTHING": "Aucun",
  "Forms.general.auctionMostImportant.PRICE": "Coût mensuel le plus bas",
  "Forms.general.auctionMostImportant.SPEED": "Décaissement le plus rapide",
  "Forms.general.wantedClosingDate": "Date espérée du décaissement",
  "Forms.incomeAndExpenses": "Revenus & Charges",
  "Forms.insideArea": "Surface habitable en m2",
  "Forms.insideArea.placeholder": "150",
  "Forms.insurance": "Prévoyance",
  "Forms.insurance3B": "Assurance 3B",
  "Forms.insurance3B.placeholder": "CHF 100 000",
  "Forms.insurancePureRisk": "Risque pure",
  "Forms.insurancePureRisk.placeholder": "CHF 100 000",
  "Forms.insuranceSecondPillar": "LPP / 2ème Pilier",
  "Forms.insuranceSecondPillar.placeholder": "CHF 100 000",
  "Forms.insuranceThirdPillar": "Assurance 3A",
  "Forms.insuranceThirdPillar.placeholder": "CHF 100 000",
  "Forms.investment": "Bien d'investissement",
  "Forms.isCoproperty": "Est-ce une copropriété ?",
  "Forms.isNew": "Est-ce un bien neuf ?",
  "Forms.isSwiss": "Avez-vous la nationalité Suisse ?",
  "Forms.isUSPerson": "Êtes-vous une US Person?",
  "Forms.landArea": "Surface du terrain en m2",
  "Forms.landArea.placeholder": "250",
  "Forms.lastName": "Nom",
  "Forms.lastName.placeholder": "Ducret",
  "Forms.mandatory": "Les champs marqués avec un * sont obligatoires",
  "Forms.materialsQuality": "Qualité des matériaux",
  "Forms.materialsQuality.0": "Mauvais",
  "Forms.materialsQuality.1": "Moyen",
  "Forms.materialsQuality.2": "Bon",
  "Forms.materialsQuality.3": "Très Bon",
  "Forms.minergie": "Est-ce une construction Minergie ?",
  "Forms.otherFortune": "Autre Fortune",
  "Forms.otherFortune.airplanes": "Aéronefs",
  "Forms.otherFortune.art": "Objets d'art",
  "Forms.otherFortune.boats": "Bateaux",
  "Forms.otherFortune.cars": "Véhicules",
  "Forms.otherFortune.description": "Type de Fortune",
  "Forms.otherFortune.jewelry": "Bijoux",
  "Forms.otherFortune.value": "Valeur",
  "Forms.otherFortune.value.description": "CHF 100 000",
  "Forms.otherIncome": "Autres revenus",
  "Forms.otherIncome.description": "Type de revenu",
  "Forms.otherIncome.INVESTMENT": "Revenus de vos titres",
  "Forms.otherIncome.OTHER": "Autre activité",
  "Forms.otherIncome.PENSION": "Pensions",
  "Forms.otherIncome.REAL_ESTATE": "Revenus de fortune immobilière",
  "Forms.otherIncome.RENT": "Rentes",
  "Forms.otherIncome.value": "Montant annuel",
  "Forms.otherIncome.value.placeholder": "CHF 10 000",
  "Forms.otherIncome.WELFARE": "Allocations",
  "Forms.otherNotes": "Autres informations",
  "Forms.otherNotes.placeholder": "Aménagements extérieurs, piscine, jardins, cabanons, annexes, sous-sols utiles,...",
  "Forms.otherOwner": "Autre propriétaire",
  "Forms.parking.box": "Box de parking",
  "Forms.parking.box.placeholder": "1",
  "Forms.parking.inside": "Places de parc intérieur",
  "Forms.parking.inside.placeholder": "1",
  "Forms.parking.outside": "Places de parc extérieur",
  "Forms.parking.outside.placeholder": "1",
  "Forms.personalBank": "Votre Banque Personelle",
  "Forms.personalBank.placeholder": "UBS",
  "Forms.primary": "Résidence principale",
  "Forms.propertyAddress": "Adresse du bien immobilier",
  "Forms.propertyDetails": "Détails du bien",
  "Forms.propertyQuality": "Qualité et Emplacement",
  "Forms.propertyWork": "Travaux de plus-value",
  "Forms.propertyWork.placeholder": "CHF 50 000",
  "Forms.realEstate": "Fortune Immobilière",
  "Forms.realEstate.description": "Type de propriété",
  "Forms.realEstate.INVESTMENT": "Bien d'investissement",
  "Forms.realEstate.loan": "Emprunt actuel",
  "Forms.realEstate.loan.placeholder": "CHF 300 000",
  "Forms.realEstate.PRIMARY": "Propriété principale",
  "Forms.realEstate.SECONDARY": "Propriété secondaire",
  "Forms.realEstate.value": "Valeur du bien",
  "Forms.realEstate.value.placeholder": "CHF 400 000",
  "Forms.renovationYear": "Année de rénovation",
  "Forms.renovationYear.info": "Seulement si la propriété a été rénovée",
  "Forms.renovationYear.placeholder": "2010",
  "Forms.residencyPermit": "Permis de résidence",
  "Forms.residencyPermit.b": "Permis B",
  "Forms.residencyPermit.c": "Permis C",
  "Forms.residencyPermit.ci": "Permis Ci",
  "Forms.residencyPermit.f": "Permis F",
  "Forms.residencyPermit.g": "Permis G",
  "Forms.residencyPermit.l": "Permis L",
  "Forms.residencyPermit.n": "Permis N",
  "Forms.residencyPermit.none": "Pas de permis",
  "Forms.residencyPermit.s": "Permis S",
  "Forms.roomCount": "Nb. de chambres",
  "Forms.roomCount.info": "Chambres à coucher",
  "Forms.roomCount.placeholder": "3.5",
  "Forms.salary": "Revenus bruts annuels",
  "Forms.salary.placeholder": "CHF 100 000",
  "Forms.sameAddress": "Utiliser la même adresse que {name} ?",
  "Forms.secondary": "Résidence secondaire",
  "Forms.style": "Type de bien immobilier",
  "Forms.style.FLAT": "Appartement",
  "Forms.style.VILLA": "Villa",
  "Forms.terraceArea": "Surface des terrasses en m2",
  "Forms.terraceArea.placeholder": "40",
  "Forms.toiletCount": "Nb. de WC",
  "Forms.toiletCount.placeholder": "1",
  "Forms.usageType": "Type d'utilisation",
  "Forms.usageType.INVESTMENT": "Bien d'investissement",
  "Forms.usageType.PRIMARY": "Résidence principale",
  "Forms.usageType.SECONDARY": "Résidence secondaire",
  "Forms.value": "Prix d'achat",
  "Forms.value.placeholder": "CHF 500 000",
  "Forms.volume": "Volume/Cubage en m3",
  "Forms.volume.placeholder": "1000",
  "Forms.volumeNorm": "Type de cubage",
  "Forms.volumeNorm.placeholder": "SIA",
  "Forms.worksForOwnCompany": "Êtes-vous employé de votre propre entreprise ?",
  "Forms.yourAddress": "Votre adresse",
  "Forms.zipCode": "NPA et localité",
  "Forms.zipCode.placeholder": "1201 Genève",
  "general.1": "Un",
  "general.2": "Deux",
  "general.amortization": "Amortissement",
  "general.areYouSure": "Êtes-vous sûr ?",
  "general.buildingMaintenance": "Frais d'entretien",
  "general.cancel": "Annuler",
  "general.close": "Fermer",
  "general.continue": "Continuer",
  "general.delete": "Supprimer",
  "general.download": "Télécharger",
  "general.hide": "Masquer",
  "general.income": "Revenus",
  "general.insuranceFees": "Frais retrait Prévoyance",
  "general.insuranceFunds": "Prévoyance",
  "general.interests": "Intérêts",
  "general.learnMore": "En savoir plus",
  "general.lenders": "Prêteurs",
  "general.login": "Login",
  "general.logout": "Déconnexion",
  "general.modify": "Modifier",
  "general.mortgageLoan": "Prêt Hypothécaire",
  "general.no": "Non",
  "general.notaryFees": "Frais de notaire",
  "general.ok": "Ok",
  "general.one": "Un",
  "general.ownFunds": "Fonds propres",
  "general.perMonth": "/mois",
  "general.progress": "Progrès: {value, number, percent}",
  "general.property": "Bien immobilier",
  "general.salary": "Salaire",
  "general.save": "Sauvegarder",
  "general.savings": "Épargne",
  "general.search": "Rechercher",
  "general.showAll": "Afficher tout",
  "general.signup": "Créer un compte",
  "general.sortBy": "Trier par",
  "general.validate": "Valider",
  "general.yes": "Oui",
  "GoogleMapsAutocomplete.label": "Addresse de la propriété",
  "HomeDev.CTA": "M'avertir par e-mail",
  "HomeDev.description": "Nous allons bientôt ouvrir e-Potek aux refinancements, soyez le premier averti !",
  "HomeDev.title": "En Développement",
  "HomePage.compare": "Comparer des propriétés",
  "HomePage.CTA.buy": "Faire une acquisition",
  "HomePage.CTA.compare": "Comparer des propriétés",
  "HomePage.CTA1": "Faire une acquisition",
  "HomePage.CTA12": "Financement hypothécaire",
  "HomePage.CTA2": "Refinancer un bien",
  "HomePage.description": "Votre guide pour traverser la jungle hypothécaire.",
  "HomePage.footer.about": "À Propos",
  "HomePage.footer.careers": "Carrières",
  "HomePage.footer.conditions": "Conditions",
  "HomePage.footer.contact": "Contact",
  "HomePage.footer.faq": "FAQ",
  "HomePage.sellingpoint1.text": "Identifiez le montant que vous pouvez emprunter en quelques clics.",
  "HomePage.sellingpoint1.title": "1. Testez votre éligibilité",
  "HomePage.sellingpoint2.text": "Obtenez de manière anonyme des offres sur mesure de la part des prêteurs du marché.",
  "HomePage.sellingpoint2.title": "2. Organisez les enchères",
  "HomePage.sellingpoint3.text": "La plateforme simple et sécurisée vous permet de communiquer facilement avec votre prêteur.",
  "HomePage.sellingpoint3.title": "3. Communiquez avec votre prêteur",
  "HomePage.sellingpoint4.text": "Vous êtes accompagnés dans vos décisions stratégiques par des spécialistes en financement jusqu'à l'obtention de votre prêt.",
  "HomePage.sellingpoint4.title": "4. Obtenez votre prêt",
  "HomePage.sellingpoint5.text": "Avancez à votre rythme, arrêtez quand vous voulez, tout ça en toute gratuité, pour toujours.",
  "HomePage.sellingpoint5.title": "Sans engagement et entièrement gratuit",
  "HomePage.sellingpoint6.text": "Vos données sont en sûreté, et vous maintenez une confidentialité maximale auprès de tous les établissements financiers.",
  "HomePage.sellingpoint6.title": "En toute sécurité",
  "HomePage.tagline1": "Mettez votre prêt hypothécaire aux enchères",
  "HomePage.tagline2": "Tout simplement",
  "HomePage.webapp.description": "Notre application vous accompagne du début jusqu'à la fin et s'adapte de façon intelligente à votre situation",
  "HomePage.webapp.title": "Votre guide personnel",
  "Info.title": "Mes Informations Personelles",
  "InsuranceStrategy.description": "Vous avez décidé d'utiliser votre prévoyance pour ce projet. Il faut encore décider par quel mécanisme financier vous allez le faire.",
  "InsuranceStrategy.title": "Stratégie de prévoyance",
  "InterestRanges.title": "Vos Taux",
  "LayoutError.description": "Quelque chose n'a pas fonctionné comme prévu, on en est déjà informés, et vous pouvez essayer de recharger la page.{verticalSpace}Si ça ne résoud pas le problème, écrivez-nous.",
  "LayoutError.reload": "Recharger la page",
  "LayoutError.title": "Woops une erreur!",
  "LenderSummary.amount": "Montant prêté le plus élevé",
  "LenderSummary.count": "Quantité",
  "LenderSummary.monthly": "Coût mensuel le plus bas",
  "LenderSummary.title": "Offres correspondant à vos critères",
  "LenderTable.amount": "Montant prêté",
  "LenderTable.conditions": "Conditions ?",
  "LenderTable.monthly": "Coût mensuel",
  "LenderTable.perMonth": "/mois",
  "LoanSelector.addLoan": "Ajouter nouvelle demande",
  "LoanStrategyPicker.description": "Il n'y a pas une seule stratégie parfaite pour structurer votre prêt, cependant, nous pouvons vous aiguiller dans la bonne direction grâce à notre savoir-faire.{verticalSpace}Sinon, utilisez notre outil interactif ci-dessous.",
  "LoanStrategyPicker.disclaimer": "* Ce choix est indicatif, et vous permet de déterminer quelle stratégie vous conviendra le mieux.",
  "LoanStrategyPicker.title": "Stratégie de taux",
  "LoanTabs.actions": "Actes",
  "LoanTabs.analytics": "Analytique",
  "LoanTabs.borrowers": "Emprunteurs",
  "LoanTabs.communication": "Communication",
  "LoanTabs.files": "Documents",
  "LoanTabs.forms": "Formulaires",
  "LoanTabs.offers": "Offres des prêteurs",
  "LoanTabs.overview": "Résumé",
  "LoanTabs.property": "Propriété",
  "LoanTabs.tasks": "Tâches",
  "LoginForm.email": "Adresse e-mail",
  "LoginForm.password": "Mot de passe",
  "LoginPage.loggedIn": "Vous êtes connecté",
  "LoginPage.title": "Login / Créer un compte",
  "NewLoanModal.description": "Ça nous permettra de l'identifier",
  "NewLoanModal.label": "Nom du projet",
  "NewLoanModal.placeholder": "Rue du Pré 2",
  "NewLoanModal.title": "Donnez un nom à votre projet, il sera visible par e-Potek.",
  "NewUserOptions.description": "Vous pourrez monter votre dossier, lancer les enchères, et conclure votre demande de prêt depuis ici.",
  "NewUserOptions.title": "Ça à l'air bien vide ici!",
  "NotFound.button": "Retourner à la maison",
  "NotFound.description": "On dirait que vous vous êtes perdu!",
  "NotFound.title": "Oops..",
  "offer.amortization": "Amortissement demandé",
  "offer.interest1": "Taux 1 an",
  "offer.interest10": "Taux 10 ans",
  "offer.interest15": "Taux 15 ans",
  "offer.interest2": "Taux 2 ans",
  "offer.interest5": "Taux 5 ans",
  "offer.interestLibor": "Taux Libor",
  "offer.maxAmount": "Prêt maximal",
  "offer.monthly": "Coût Mensuel",
  "offer.rating": "Rating",
  "OfferPickerPage.description": "Choisissez l'offre qui vous convient.",
  "OfferPickerPage.title": "Les meilleures offres",
  "OffersTable.amount": "Montant",
  "OffersTable.conditions": "Conditions ?",
  "OffersTable.libor": "Taux Libor",
  "OffersTable.years": "{years, plural, one {Taux un an} other {Taux # ans}}",
  "OfferToggle.counterpart": "Offres avec contrepartie ({count})",
  "OfferToggle.counterpart-short": "Avec contrepartie",
  "OfferToggle.standard": "Offres standard ({count})",
  "OfferToggle.standard-short": "Standard",
  "PasswordChange.change": "Changer",
  "PasswordChange.dialogTitle": "Changer mon mot de passe",
  "PasswordChange.oldPassword": "Ancien mot de passe",
  "PasswordChange.password": "Nouveau mot de passe",
  "PasswordChange.passwordRepeat": "Répéter mot de passe",
  "PasswordLine.create": "Créer",
  "PasswordLine.login": "Connexion",
  "PasswordPage.button": "M'avertir du lancement",
  "PasswordResetPage.confirmPassword": "Confirmer le mot de passe",
  "PasswordResetPage.CTA": "Login",
  "PasswordResetPage.password": "Votre nouveau mot de passe",
  "PasswordResetPage.title": "Entrez votre nouveau mot de passe",
  "ProcessPageBar.next": "Suivant",
  "ProcessPageBar.nextStep": "Prochaine étape",
  "ProcessPageBar.previous": "Précédent",
  "ProjectBarChart.fees": "Frais",
  "ProjectBarChart.property": "Propriété",
  "ProjectBarChart.title": "Mon Projet",
  "PropertyAdder.add": "Ajouter",
  "PropertyPage.description": "Il nous faut des informations supplémentaires sur votre bien immobilier, nous pourrons alors mieux comprendre vos besoins, et vous indiquer si le prix du bien est conforme au marché.",
  "PropertyPage.progress": "Progrès: {value, number, percent}",
  "PropertyPage.title": "{count, plural, one {Mon bien immobilier} other {Notre bien immobilier}}",
  "Recap.availableFunds": "Fonds propres dispo",
  "Recap.bankFortune": "Fortune bancaire",
  "Recap.borrowRatio": "Prêt / Prix d'achat",
  "Recap.borrowRatio1": "Prêt / Prix d'achat",
  "Recap.borrowRatio2": "Prêt / Valeur du bien",
  "Recap.consideredBonus": "Bonus considéré",
  "Recap.consideredIncome": "Revenus considérés",
  "Recap.expenses": "Charges",
  "Recap.financing": "Financement",
  "Recap.finmaRules": "Règles FINMA",
  "Recap.fortune": "Fortune",
  "Recap.incomeRatio": "Charges / Revenus",
  "Recap.insuranceFortune": "Fortune de prévoyance",
  "Recap.interestedLenders": "Prêteurs intéressés",
  "Recap.maxPurchasePrice": "Prix d'achat maximal",
  "Recap.monthlyCost": "Charges estimées",
  "Recap.netFortune": "Fortune Nette",
  "Recap.otherIncome": "Autres Revenus",
  "Recap.ownFundsCash": "Fonds Propres - Épargne",
  "Recap.ownFundsInsurance": "Fonds Propres - LPP",
  "Recap.ownFundsTotal": "Fonds Propres - Total",
  "Recap.propAndWork": "Valeur du bien",
  "Recap.propertyWork": "Travaux de plus-value",
  "Recap.purchasePrice": "Prix d'achat",
  "Recap.realEstate": "Biens immobiliers",
  "Recap.realEstateLoans": "Emprunts actuels",
  "Recap.receivedRent": "Loyer perçu",
  "Recap.title": "Projet (en CHF)",
  "Recap.totalCost": "Coût total du projet",
  "Recap.totalFinancing": "Financement total",
  "Search.placeholder": "Cherchez quelque chose..",
  "SearchResults.none": "Aucun résultat",
  "SideNavStepper.title": "PROGRESSION",
  "SideNavUser.dashboard": "Tableau de Bord",
  "SideNavUser.files": "Documents",
  "Start1Page.chartTitle": "Charges estimées",
  "Start1Page.CTA": "Passer au check-up complet",
  "Start1Page.description": "Ce calculateur vous permet de rapidement savoir ce que vous pouvez acheter avant de faire une analyse de votre situation personnelle plus détaillée.{verticalSpace}Entre vos revenus, votre fortune ou la valeur du bien, ajoutez les valeurs que vous connaissez, puis nous calculerons automatiquement le reste pour optimiser votre capacité d'achat, tout en respectant les normes FINMA en vigueur en Suisse.",
  "Start1Page.fortuneLabel": "Fonds Propres",
  "Start1Page.incomeLabel": "Revenus annuels bruts",
  "Start1Page.loanValue": "Votre Prêt Hypothécaire:",
  "Start1Page.propertyLabel": "Prix d'achat",
  "Start1Page.showCalculatorButton": "Démarrer",
  "Start1Page.title": "Calculateur",
  "Start1Recap.temporaryTitle": "Entrez une ou plusieurs valeurs et modifiez les à votre guise",
  "Start1Validator.fortune": "Vous n'avez pas assez de fonds propres",
  "Start1Validator.fortune2": "Essayez de réduire le prix d'achat",
  "Start1Validator.fortuneTight": "Vos fonds propres sont faibles",
  "Start1Validator.fortuneTight2": "Si vous voulez acquérir une résidence principale, vous pouvez combler le manque avec votre prévoyance",
  "Start1Validator.income": "Vous n'avez pas assez de revenus",
  "Start1Validator.income2": "N'hésitez pas a compter vos rentes, pensions, soustraire un loyer que vous n'aurez plus à payer",
  "Start1Validator.incomeTight": "Vos revenus sont limite",
  "Start1Validator.incomeTight2": "Peu de prêteurs pourront vous suivre, mais ça va fonctionner",
  "Start1Validator.valid": "Tout est bon, continuez!",
  "Start2Form.acceptedLoan": "Vous pouvez emprunter {value}.",
  "Start2Form.age": "J'ai",
  "Start2Form.age.placeholder": "18",
  "Start2Form.age2": "ans.",
  "Start2Form.bonus1": "Bonus 2014",
  "Start2Form.bonus2": "Bonus 2015",
  "Start2Form.bonus3": "Bonus 2016",
  "Start2Form.bonus4": "Bonus 2017",
  "Start2Form.bonusExists": "Avez vous touché un bonus lors des quatre dernières années ?",
  "Start2Form.borrowerCount": "Combien êtes vous d'emprunteurs ?",
  "Start2Form.expensesExists": "Avez-vous des charges annuelles comme des leasings, {optional}pensions, loyers, crédits personnels ou autres prêts immobiliers ?",
  "Start2Form.finalized": "Vous-êtes arrivé au bout, formidable!",
  "Start2Form.finalized.button": "Afficher les résultats",
  "Start2Form.fortune": "Quelle est votre épargne bancaire personnelle (cash et titres) ?",
  "Start2Form.fortuneRequiredAgreed": "Vous devrez donc mettre {value} de fonds propres.",
  "Start2Form.fortuneSliders": "Vous devez donc mettre {value} de fonds propres, comment voulez-vous les répartir ?",
  "Start2Form.fortuneSliders.hasToUseLpp": "Vous devez utiliser votre prévoyance pour ce projet",
  "Start2Form.fortuneSliders.label1": "Épargne",
  "Start2Form.fortuneSliders.label2": "Prévoyance",
  "Start2Form.fortuneSliders.notHasToUseLpp": "Vous êtes éligible pour utiliser votre prévoyance",
  "Start2Form.fortuneSliders.use": "Utiliser",
  "Start2Form.gender": "Je suis",
  "Start2Form.gender.F": "une femme",
  "Start2Form.gender.M": "un homme",
  "Start2Form.gender2": ".",
  "Start2Form.income": "Quel est votre salaire annuel brut ?",
  "Start2Form.initialFortuneAgreed": "Vous avez indiqué que vous vouliez allouer {value} de fonds propres pour ce projet. Merci de détailler votre fortune maintenant.",
  "Start2Form.initialIncomeAgreed": "Vous avez indiqué que vos revenus sont de {value} par an, vous pouvez les détailler maintenant.",
  "Start2Form.insurance1": "Quels sont les fonds de prévoyance disponibles au sein de votre 2ème pilier ?",
  "Start2Form.insurance1Exists": "Avez-vous un 2ème pilier ?",
  "Start2Form.insurance2": "Quels sont les fonds de prévoyance disponibles au sein de votre 3ème pilier ?",
  "Start2Form.insurance2Exists": "Avez-vous un 3ème pilier ?",
  "Start2Form.insuranceConditions": "Il y a des conditions pour pouvoir utiliser sa prévoyance, est-ce que vous les passez ?",
  "Start2Form.insuranceConditions.1": "Ne pas avoir fait de retrait dans les 5 dernières années",
  "Start2Form.insuranceConditions.2": "Faire un retrait d'au moins 20 000 CHF",
  "Start2Form.insuranceConditions.button": "Conditions",
  "Start2Form.insuranceConditions.description": "Pour pouvoir utiliser votre prévoyance sur votre projet, vous devez remplir les conditions suivantes:",
  "Start2Form.insuranceConditions.title": "Conditions",
  "Start2Form.loanWanted": "Combien voulez-vous emprunter ?",
  "Start2Form.loanWanted.sliderMax": "Max",
  "Start2Form.loanWanted.sliderMin": "Min",
  "Start2Form.notaryFeesAgreed": "À ce prix s'ajoutent les frais de notaire de {value}.",
  "Start2Form.notEnoughCash": "Vous devez avoir au moins {value} de fortune (sans compter votre prévoyance) pour ce projet.",
  "Start2Form.notEnoughCash.description": "Vous devez pouvoir couvrir au moins 10% du bien immobilier ainsi que les différents frais (~5%) avec votre épargne personelle. Il n'est malheureusement pas possible d'utiliser votre Prêt Hypothécaire pour payer les frais de notaire.",
  "Start2Form.notEnoughCash.dialogTitle": "Manque d'épargne",
  "Start2Form.notEnoughIncome": "Vous devez avoir un revenu annuel disponible d'au moins {value} pour couvrir les charges de votre bien, selon les règles FINMA.",
  "Start2Form.notEnoughIncome.description": "Vous n'avez pas assez de revenus pour passer les critères de la FINMA, qui demande que la charge théorique de ce bien soit environ 3 fois plus petite que vos revenus totaux.{verticalSpace}Le calcul utilisé est sévère, et utilise en outre un taux d'intérêt théorique de 5%. Vérifiez que vous ayez compté tous les revenus que nous vous proposons d'ajouter, et vos éventuels bonus.",
  "Start2Form.notEnoughIncome.dialogTitle": "Manque de revenus",
  "Start2Form.notEnoughOwnFunds": "Vous devez avoir au moins {value} de fonds propres pour ce projet.",
  "Start2Form.notEnoughOwnFunds.description": "Vous devez avoir au moins 20% de fonds propres engagés dans ce projet, sans oublier les frais de notaire qui doivent venir directement de votre épargne personelle, il n'est pas possible d'utiliser votre Prêt Hypothécaire ni votre prévoyance pour les payer.",
  "Start2Form.notEnoughOwnFunds.dialogTitle": "Manque de fonds propres",
  "Start2Form.oldestAge": "L'emprunteur le plus agé a",
  "Start2Form.oldestAge.placeholder": "18",
  "Start2Form.oldestAge2": "ans.",
  "Start2Form.oldestGender": "Et cette personne est",
  "Start2Form.otherIncomeExists": "Avez-vous d'autres sources de revenus annuels ?",
  "Start2Form.projectAgreed": "Le coût de votre projet sera donc de {value}.",
  "Start2Form.propertyRent": "J'estime que le loyer mensuel pour cette propriété sera",
  "Start2Form.propertyValue": "Le prix d'achat de la propriété est de",
  "Start2Form.propertyWork": "Les travaux de plus-value sont estimés à",
  "Start2Form.propertyWorkExists": "Souhaitez-vous rajouter à votre projet des travaux de plus-value ?",
  "Start2Form.realEstateExists": "Êtes-vous propriétaire d'autres biens immobiliers ?",
  "Start2Form.usageType": "Quel sera le type d'utilisation de cette propriété ?",
  "Start2Form.usageTypeButtonINVESTMENT": "Je veux le louer",
  "Start2Form.usageTypeButtonPRIMARY": "Ma résidence principale",
  "Start2Form.usageTypeButtonSECONDARY": "Ma résidence secondaire",
  "Start2Form.useInsurance1": "Voulez-vous utiliser votre fortune de prévoyance sur ce projet ?",
  "Start2Form.useInsurance1.description": "En Suisse, vous pouvez utiliser votre prévoyance en tant que fonds propres, pour autant que ce bien devienne votre résidence principale.{verticalSpace}Vous avez suffisamment d'épargne pour ne pas être obligé d'utiliser votre prévoyance, mais ça vous permettrait de garder plus de liquidités.",
  "Start2Form.useInsurance1.dialogTitle": "Prévoyance en fonds propres",
  "Start2Form.useInsurance2": "Vous devrez utiliser votre fortune de prévoyance pour ce projet",
  "Start2Form.useInsurance2.description": "Vous n'avez pas suffisamment d'épargne personelle pour acquérir ce bien, heureusement vous pouvez utiliser votre prévoyance pour combler le manque.",
  "Start2Form.whyButton": "Pourquoi ?",
  "Start2Page.initialButton": "C'est parti",
  "Start2Page.initialText1": "Allons vous obtenir ce prêt hypothécaire",
  "Start2Page.initialText2": "Il nous faut plus d'informations pour mieux comprendre vos besoins, prenez deux minutes pour nous en dire un peu plus sur vous",
  "Start2Page.recapTitle": "Votre Plan Financier",
  "StartResult.countSuffix": " Prêteurs",
  "StartResult.createAccount": "Créer un compte",
  "StartResult.description1": "Vous êtes éligible pour e-Potek. Pour continuer votre demande de prêt, créez vous un compte et nous vous aiderons à préparer votre dossier pour mettre ces {count} prêteurs en compétition.",
  "StartResult.description2": "Vous pouvez acquérir un bien immobilier d'une valeur maximale de {value}. Cliquez sur continuer pour affiner vos informations et avoir une estimation précise d'emprunt et de ce que ça va vous coûter.",
  "StartResult.loan": "Votre Prêt Hypothécaire:",
  "StartResult.maxLoan": "Prêt Hypothécaire maximal:",
  "StartResult.title": "Résultat: {result}",
  "StartSignUp.email": "Entrez votre adresse email",
  "StartSignUp.notSignedUp": "Entrez votre nouveau mot de passe",
  "StartSignUp.signedUp": "Cette adresse existe déjà, entrez votre mot de passe",
  "steps.0.subtitle": "5 min",
  "steps.0.title": "0. Passez le test",
  "steps.1.subtitle": "15 minutes",
  "steps.1.title": "1. Préparez votre dossier",
  "steps.2.subtitle": "30 minutes",
  "steps.2.title": "2. Trouvez votre prêteur",
  "steps.3.subtitle": "60 minutes",
  "steps.3.title": "3. Finalisez votre demande",
  "steps.auction.subtitle": "2 jours",
  "steps.auction.title": "Envoyez les enchères",
  "steps.auction.waiting": "Enchères en cours...",
  "steps.closing.subtitle": "30 min",
  "steps.closing.title": "Décaissez votre emprunt",
  "steps.contract.subtitle": "30 min",
  "steps.contract.title": "Obtenez le contrat",
  "steps.files.subtitle": "15 min",
  "steps.files.title": "Uploadez vos documents",
  "steps.finance.subtitle": "10 min",
  "steps.finance.title": "Vérifiez vos finances",
  "steps.lenderPicker.subtitle": "5 min",
  "steps.lenderPicker.title": "Choisissez votre prêteur",
  "steps.offerPicker.subtitle": "5 min",
  "steps.offerPicker.title": "Choisissez votre prêteur",
  "steps.personal.subtitle": "1 min",
  "steps.personal.title": "Dites en plus sur vous",
  "steps.property.subtitle": "4 min",
  "steps.property.title": "Détaillez votre propriété",
  "steps.strategy.subtitle": "15 min",
  "steps.strategy.title": "Les grandes décisions",
  "steps.structure.subtitle": "2h",
  "steps.structure.title": "Structure finale",
  "steps.verification.subtitle": "2h",
  "steps.verification.title": "Vérification d'e-Potek",
  "steps.verification.waiting": "Vérification demandée...",
  "StrategyChoices.recommended": "Recommandé pour vous",
  "StructureError.cash": "Vous n'avez pas assez d'épargne engagée dans ce projet",
  "StructureError.income": "Vous n'avez pas assez de revenus pour couvrir les charges de votre projet",
  "StructureError.ownFunds": "Il n'y a pas assez de fonds propres dans votre structure",
  "StructureError.valid": "Votre structure est valide",
  "StructurePage.CTA": "Confirmer la structure",
  "StructurePage.description": "Vous pouvez ajuster la structure globale de votre projet une dernière fois, nous vous aiderons à la peaufiner.",
  "Table.empty": "Rien à afficher",
  "Table.sort": "Trier",
  "TasksStatusDropdown.ACTIVE": "Actif",
  "TasksStatusDropdown.CANCELLED": "Annulé",
  "TasksStatusDropdown.COMPLETED": "Terminé",
  "TasksTable.actions": "Actions",
  "TasksTable.asignedTo": "Assigné à",
  "TasksTable.completedAt": "Complété le",
  "TasksTable.createdAt": "Créé le",
  "TasksTable.dueAt": "Échéance",
  "TasksTable.status": "Statut",
  "TasksTable.updatedAt": "Modifié le",
  "TasksTabs.allTasks": "Toutes les tâches",
  "TasksTabs.myTasks": "Mes tâches",
  "tooltip.bonus": "Tout revenu variable supplémentaire à votre salaire de base, lié à vos performances",
  "tooltip.borrowers": "Les personnes financièrement et légalement bénéficiaires du prêt",
  "tooltip.borrowRatio": "Ce ratio détermine combien est couvert par le prêt hypothécaire, il ne doit pas dépasser 80% dans la majorité des cas.",
  "tooltip.consideredBonus": "Nous utilisons 50% de la moyenne de vos 3 meilleurs bonus.",
  "tooltip.counterpartOffers": "Les meilleures offres des prêteurs, qui vous donnent un taux d'intérêt spécialement bas, en échange d'une contrepartie.",
  "tooltip.expertise": "Vérification de la valeur du bien par rapport à son état et son emplacement",
  "tooltip.finma": "Autorité fédérale de surveillance des marchés financiers",
  "tooltip.incomeRatio": "Ce ratio indique combien de vos revenus vont théoriquement être utilisés pour payer les charges de votre bien. Il ne doit pas dépasser 33%, exceptions jusqu'à 38%.",
  "tooltip.insuranceFees": "Lorsque vous retirez votre lpp en avance, vous devez payer des impôts sur ce retrait",
  "tooltip.interestedLenders": "La quantité de prêteurs e-Potek dont les conditions correspondent à votre dossier",
  "tooltip.lpp": "Aussi appelé 2ème pilier",
  "tooltip.monthlyEstimated": "Avant les enchères d'e-Potek, cette estimation conservative sert d'indication",
  "tooltip.notaryFees": "Frais obligatoires lorsqu'on conclut un prêt hypothécaire - environ 5% du prix d'achat",
  "tooltip.offerTable.10": "Un taux d'intérêt qui arrive à échéance en 10 ans",
  "tooltip.offerTable.2": "Un taux d'intérêt qui arrive à échéance en 2 ans",
  "tooltip.offerTable.5": "Un taux d'intérêt qui arrive à échéance en 5 ans",
  "tooltip.offerTable.amortization": "L'amortissement annuel minimum de l'emprunt demandé par la banque",
  "tooltip.offerTable.amount": "Le montant maximal que la banque peut vous prêter",
  "tooltip.offerTable.conditions": "Les conditions que vous devez remplir pour avoir accès à cette offre",
  "tooltip.offerTable.expertise": "Indique si la banque veut faire une expertise supplémentaire, ajoute environ 2 semaines à la procédure",
  "tooltip.offerTable.libor": "\"London Interbank Offered Rate\", c'est un type de taux d'intérêt parmi les plus bas mais aussi le plus volatile",
  "tooltip.otherIncome": "Allocations, rentes, pensions, loyers, investissements, revenus de titres, ou autres activités",
  "tooltip.ownFunds": "Vos économies, prévoyance et dons de tiers que vous allez engager dans le projet",
  "tooltip.ownFundsRequired": "Les fonds propres nécessaires de votre part pour financer ce projet, y compris les frais de notaire",
  "tooltip.propertyWork": "Agrandissements, rénovations ou améliorations du bien.",
  "tooltip.purchasePrice": "La valeur du bien que vous voulez acquérir",
  "tooltip.secondPillar": "Aussi appelé LPP",
  "tooltip.standardOffers": "Les offres de base des banques.",
  "tooltip.thirdPillar": "XXX",
  "tooltip.usageType": "Les résidences principales permettent l'utilisation du 2ème pilier en tant que fonds propres",
  "tooltip.yearlyIncome": "La somme de votre salaire, et toute autre source de revenus",
  "tooltip2.consideredBonus": "Les bonus étant des montants variables, les banques ne les comptent pas à 100%.{verticalSpace}Si vous avez 4 bonus sur les années précédentes de 10, 20, 30 et 40 CHF, nous utiliserons 50% de la moyenne de 20, 30 et 40, soit 15 CHF.",
  "tooltip2.finma": "La FINMA détermine quelles sont les conditions minimales pour que vous puissiez obtenir un prêt, pour vous protéger d'éventuelles remontées imprévues des taux hypothécaires.{verticalSpace}Les taux sont bas aujourd'hui, mais si vos finances ne sont pas assez solides et que les taux montent, vous pourriez avoir de sérieuses difficultés financières.",
  "tooltip2.notaryFees": "Les frais de notaire sont compris d'une multitude de frais supplémentaires que vous devrez couvrir avec votre épargne, il est impossible d'utiliser sa prévoyance ou son prêt hypothécaire pour les payer. ",
  "tooltip2.propertyWork": "Ces travaux sont une bonne façon d'augmenter la valeur de votre bien, sans augmenter les frais de notaire.",
  "TopNav.login": "Login",
  "TopNavDropdown.account": "Mon Compte",
  "TopNavDropdown.admin": "Admin Dashboard",
  "TopNavDropdown.app": "App",
  "TopNavDropdown.dashboard": "Tableau de Bord",
  "TopNavDropdown.dev": "< dev />",
  "TopNavDropdown.logout": "Déconnexion",
  "TopNavDropdown.partner": "Partner Dashboard",
  "TosPage.description": "<En Développement />",
  "TosPage.title": "Termes et Conditions",
  "Tranche.tranche": "Tranche",
  "TrancheChart.rest": "Montant restant à attribuer",
  "TrancheChart.value": "Montant",
  "TrancheCount.add": "Ajouter",
  "TrancheCount.description": "Nombre de tranches:",
  "TranchePicker.add": "+ Ajouter une tranche",
  "Uploader.fileCount": "{count, plural, =0 {Pas de fichiers} one {Un fichier} other {# fichiers}}",
  "ValidatorItem.error.fortune": "Manque de fortune",
  "ValidatorItem.error.fortuneTight": "Possible avec prévoyance",
  "ValidatorItem.error.income": "Manque de revenus",
  "ValidatorItem.error.incomeTight": "Revenus limite limite",
  "ValidatorItem.isValid": "Acquisition possible!",
  "VerificationPage.CTA": "Envoyer mon dossier",
  "VerificationPage.CTA.warning": "Vous ne pourrez plus modifier vos informations et vos documents",
  "VerificationPage.CTA2": "Re-Vérifier",
  "VerificationPage.description": "Votre dossier va être analysé en détail par les professionels d'e-Potek, et votre conseiller vous aidera pour préparer la meilleure demande possible.",
  "VerificationPage.failedDescription": "Votre expert a vérifié votre dossier, et y a trouvé une faille. Veuillez addresser les points ci-dessous puis demander une re-vérification.{verticalSpace}N'hésitez pas à appeler votre expert en cas de doute.",
  "VerificationPage.failedTitle": "Il y a eu un petit souci",
  "VerificationPage.successDescription": "Les informations que vous nous avez confiées nous ont permis de vérifier l'intégrité et la qualité de votre demande de prêt.",
  "VerificationPage.successTitle": "Votre dossier est valide!",
  "VerificationRequested.description": "Vérification en cours, vous serez averti par email lorsque c'est fait.",
  "ZipAutoComplete.empty": "Pas de résultat"
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"startup":{"server":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/server/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);

var _Inject = void 0;

module.watch(require("meteor/meteorhacks:inject-initial"), {
  Inject: function Inject(v) {
    _Inject = v;
  }
}, 1);
module.watch(require("../../core/fixtures"));
module.watch(require("../../core/api/api"));
module.watch(require("../../core/api/api-server"));
var jc = void 0;
module.watch(require("../../core/api/jobs/server"), {
  default: function _default(v) {
    jc = v;
  }
}, 2);
module.watch(require("../../core/api/links"));
module.watch(require("../accounts-config"));

_Meteor.startup(function () {
  // Do something on startup if necessary
  // Add password protection
  // if (Meteor.settings.public.environment === 'staging') {
  //   setupAuth();
  // }
  jc.startJobServer();
}); // Inject a loader before client is ready, is removed in the on startup function on the client


_Inject.rawHead('loader', Assets.getText('loader.html')); // Make sure this is passed a function, so that it gets random strings for
// every client, instead of once on server-startup
// FIXME: This gets picked up by google crawlers..! Very bad
// Inject.rawHead('loadingText', getHtml);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"accounts-config.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/accounts-config.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var _Meteor = void 0;

module.watch(require("meteor/meteor"), {
  Meteor: function Meteor(v) {
    _Meteor = v;
  }
}, 0);
var AccountsUI = void 0;
module.watch(require("meteor/std:accounts-ui"), {
  Accounts: function Accounts(v) {
    AccountsUI = v;
  }
}, 1);

var _Accounts = void 0;

module.watch(require("meteor/accounts-base"), {
  Accounts: function Accounts(v) {
    _Accounts = v;
  }
}, 2);

var _Roles = void 0;

module.watch(require("meteor/alanning:roles"), {
  Roles: function Roles(v) {
    _Roles = v;
  }
}, 3);
AccountsUI.ui.config({
  passwordSignupFields: 'EMAIL_ONLY',
  loginPath: '/login',
  homeRoutePath: '/',
  profilePath: '/',
  minimumPasswordLength: 1
}); // Accounts.onCreateUser((options, user) => {
//   const newUser = user;
//   newUser.roles = 'user';
//   return newUser;
// });
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"wallaby-admin.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// wallaby-admin.js                                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

var setWallabyConfig = require('./imports/core/utils/testHelpers/wallaby/wallabyDefaults');

module.exports = setWallabyConfig('e-Potek admin tests - Client');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"server":{"main.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// server/main.js                                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";

module.watch(require("./../imports/startup/server"));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},{
  "extensions": [
    ".js",
    ".json",
    ".jsx"
  ]
});
require("./wallaby-admin.js");
require("./server/main.js");
//# sourceURL=meteor://💻app/app/app.js
//# sourceMappingURL=data:application/json;charset=utf8;base64,

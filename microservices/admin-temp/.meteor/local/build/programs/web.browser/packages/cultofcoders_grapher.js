//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var Promise = Package.promise.Promise;
var check = Package.check.check;
var Match = Package.check.Match;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var Mongo = Package.mongo.Mongo;
var CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;
var meteorInstall = Package.modules.meteorInstall;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Symbol = Package['ecmascript-runtime-client'].Symbol;
var Map = Package['ecmascript-runtime-client'].Map;
var Set = Package['ecmascript-runtime-client'].Set;

/* Package-scope variables */
var body, dotize;

var require = meteorInstall({"node_modules":{"meteor":{"cultofcoders:grapher":{"main.client.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/main.client.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./lib/createQuery.js"), {                                                                        // 1
    "default": function (v) {                                                                                          // 1
        exports.createQuery = v;                                                                                       // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
module.watch(require("./lib/query/lib/prepareForProcess"), {                                                           // 1
    "default": function (v) {                                                                                          // 1
        exports.prepareForProcess = v;                                                                                 // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
module.watch(require("./lib/query/query.client"), {                                                                    // 1
    "default": function (v) {                                                                                          // 1
        exports.Query = v;                                                                                             // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
module.watch(require("./lib/namedQuery/namedQuery.client"), {                                                          // 1
    "default": function (v) {                                                                                          // 1
        exports.NamedQuery = v;                                                                                        // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
module.watch(require("./lib/compose"), {                                                                               // 1
    "default": function (v) {                                                                                          // 1
        exports.compose = v;                                                                                           // 1
    }                                                                                                                  // 1
}, 4);                                                                                                                 // 1
module.watch(require("./lib/extension.js"));                                                                           // 1
module.watch(require("./lib/links/extension.js"));                                                                     // 1
module.watch(require("./lib/query/reducers/extension.js"));                                                            // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"compose.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/compose.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var deepExtend = void 0;                                                                                               // 1
module.watch(require("deep-extend"), {                                                                                 // 1
    "default": function (v) {                                                                                          // 1
        deepExtend = v;                                                                                                // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
module.exportDefault(function () {                                                                                     // 1
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 3
        args[_key] = arguments[_key];                                                                                  // 3
    }                                                                                                                  // 3
                                                                                                                       //
    return deepExtend.apply(undefined, [{}].concat(args));                                                             // 4
});                                                                                                                    // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createQuery.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/createQuery.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Query = void 0;                                                                                                    // 1
module.watch(require("./query/query.js"), {                                                                            // 1
    "default": function (v) {                                                                                          // 1
        Query = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var NamedQuery = void 0;                                                                                               // 1
module.watch(require("./namedQuery/namedQuery.js"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        NamedQuery = v;                                                                                                // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var NamedQueryStore = void 0;                                                                                          // 1
module.watch(require("./namedQuery/store.js"), {                                                                       // 1
    "default": function (v) {                                                                                          // 1
        NamedQueryStore = v;                                                                                           // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
module.exportDefault(function () {                                                                                     // 1
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 12
        args[_key] = arguments[_key];                                                                                  // 12
    }                                                                                                                  // 12
                                                                                                                       //
    if (typeof args[0] === 'string') {                                                                                 // 13
        var name = args[0],                                                                                            // 13
            body = args[1],                                                                                            // 13
            options = args[2];                                                                                         // 13
        options = options || {}; // It's a resolver query                                                              // 15
                                                                                                                       //
        if (_.isFunction(body)) {                                                                                      // 18
            return createNamedQuery(name, null, body, options);                                                        // 19
        }                                                                                                              // 20
                                                                                                                       //
        var entryPointName = _.first(_.keys(body));                                                                    // 22
                                                                                                                       //
        var collection = Mongo.Collection.get(entryPointName);                                                         // 23
                                                                                                                       //
        if (!collection) {                                                                                             // 25
            throw new Meteor.Error('invalid-name', "We could not find any collection with the name \"" + entryPointName + "\". Make sure it is imported prior to using this");
        }                                                                                                              // 27
                                                                                                                       //
        return createNamedQuery(name, collection, body[entryPointName], options);                                      // 29
    } else {                                                                                                           // 30
        // Query Creation, it can have an endpoint as collection or as a NamedQuery                                    // 31
        var _body = args[0],                                                                                           // 30
            _options = args[1];                                                                                        // 30
        _options = _options || {};                                                                                     // 33
                                                                                                                       //
        var _entryPointName = _.first(_.keys(_body));                                                                  // 35
                                                                                                                       //
        var _collection = Mongo.Collection.get(_entryPointName);                                                       // 36
                                                                                                                       //
        if (!_collection) {                                                                                            // 38
            if (Meteor.isDevelopment && !NamedQueryStore.get(_entryPointName)) {                                       // 39
                console.warn("You are creating a query with the entry point \"" + _entryPointName + "\", but there was no collection found for it (maybe you forgot to import it client-side?). It's assumed that it's referencing a NamedQuery.");
            }                                                                                                          // 41
                                                                                                                       //
            return createNamedQuery(_entryPointName, null, {}, {                                                       // 43
                params: _body[_entryPointName]                                                                         // 43
            });                                                                                                        // 43
        } else {                                                                                                       // 44
            return createNormalQuery(_collection, _body[_entryPointName], _options);                                   // 45
        }                                                                                                              // 46
    }                                                                                                                  // 47
});                                                                                                                    // 48
                                                                                                                       //
function createNamedQuery(name, collection, body) {                                                                    // 50
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};                              // 50
    // if it exists already, we re-use it                                                                              // 51
    var namedQuery = NamedQueryStore.get(name);                                                                        // 52
    var query = void 0;                                                                                                // 53
                                                                                                                       //
    if (!namedQuery) {                                                                                                 // 55
        query = new NamedQuery(name, collection, body, options);                                                       // 56
        NamedQueryStore.add(name, query);                                                                              // 57
    } else {                                                                                                           // 58
        query = namedQuery.clone(options.params);                                                                      // 59
    }                                                                                                                  // 60
                                                                                                                       //
    return query;                                                                                                      // 62
}                                                                                                                      // 63
                                                                                                                       //
function createNormalQuery(collection, body, options) {                                                                // 65
    return new Query(collection, body, options);                                                                       // 66
}                                                                                                                      // 67
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"extension.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/extension.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");                                                  //
                                                                                                                       //
var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);                                                         //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
var Query = void 0;                                                                                                    // 1
module.watch(require("./query/query.js"), {                                                                            // 1
    "default": function (v) {                                                                                          // 1
        Query = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var NamedQuery = void 0;                                                                                               // 1
module.watch(require("./namedQuery/namedQuery.js"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        NamedQuery = v;                                                                                                // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var NamedQueryStore = void 0;                                                                                          // 1
module.watch(require("./namedQuery/store.js"), {                                                                       // 1
    "default": function (v) {                                                                                          // 1
        NamedQueryStore = v;                                                                                           // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
                                                                                                                       //
_.extend(Mongo.Collection.prototype, {                                                                                 // 5
    createQuery: function () {                                                                                         // 6
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                         // 6
            args[_key] = arguments[_key];                                                                              // 6
        }                                                                                                              // 6
                                                                                                                       //
        if (typeof args[0] === 'string') {                                                                             // 7
            //NamedQuery                                                                                               // 8
            var _args = (0, _slicedToArray3.default)(args, 3),                                                         // 7
                name = _args[0],                                                                                       // 7
                body = _args[1],                                                                                       // 7
                options = _args[2];                                                                                    // 7
                                                                                                                       //
            var query = new NamedQuery(name, this, body, options);                                                     // 10
            NamedQueryStore.add(name, query);                                                                          // 11
            return query;                                                                                              // 13
        } else {                                                                                                       // 14
            var _args2 = (0, _slicedToArray3.default)(args, 2),                                                        // 14
                _body = _args2[0],                                                                                     // 14
                _options = _args2[1];                                                                                  // 14
                                                                                                                       //
            return new Query(this, _body, _options);                                                                   // 17
        }                                                                                                              // 18
    }                                                                                                                  // 19
});                                                                                                                    // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"links":{"config.schema.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/config.schema.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
    DenormalizeSchema: function () {                                                                                   // 1
        return DenormalizeSchema;                                                                                      // 1
    },                                                                                                                 // 1
    LinkConfigDefaults: function () {                                                                                  // 1
        return LinkConfigDefaults;                                                                                     // 1
    },                                                                                                                 // 1
    LinkConfigSchema: function () {                                                                                    // 1
        return LinkConfigSchema;                                                                                       // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var Match = void 0;                                                                                                    // 1
module.watch(require("meteor/check"), {                                                                                // 1
    Match: function (v) {                                                                                              // 1
        Match = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var Mongo = void 0;                                                                                                    // 1
module.watch(require("meteor/mongo"), {                                                                                // 1
    Mongo: function (v) {                                                                                              // 1
        Mongo = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var DenormalizeSchema = {                                                                                              // 4
    field: String,                                                                                                     // 5
    body: Object,                                                                                                      // 6
    bypassSchema: Match.Maybe(Boolean)                                                                                 // 7
};                                                                                                                     // 4
var LinkConfigDefaults = {                                                                                             // 10
    type: 'one'                                                                                                        // 11
};                                                                                                                     // 10
var LinkConfigSchema = {                                                                                               // 14
    type: Match.Maybe(Match.OneOf('one', 'many', '1', '*')),                                                           // 15
    collection: Match.Maybe(Match.Where(function (collection) {                                                        // 16
        // We do like this so it works with other types of collections                                                 // 18
        // like FS.Collection                                                                                          // 19
        return _.isObject(collection) && (collection instanceof Mongo.Collection || !!collection._collection);         // 20
    })),                                                                                                               // 25
    field: Match.Maybe(String),                                                                                        // 27
    metadata: Match.Maybe(Boolean),                                                                                    // 28
    inversedBy: Match.Maybe(String),                                                                                   // 29
    index: Match.Maybe(Boolean),                                                                                       // 30
    unique: Match.Maybe(Boolean),                                                                                      // 31
    autoremove: Match.Maybe(Boolean),                                                                                  // 32
    denormalize: Match.Maybe(Match.ObjectIncluding(DenormalizeSchema))                                                 // 33
};                                                                                                                     // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"constants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/constants.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
  LINK_STORAGE: function () {                                                                                          // 1
    return LINK_STORAGE;                                                                                               // 1
  }                                                                                                                    // 1
});                                                                                                                    // 1
var LINK_STORAGE = '__links';                                                                                          // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"extension.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/extension.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Mongo = void 0;                                                                                                    // 1
module.watch(require("meteor/mongo"), {                                                                                // 1
    Mongo: function (v) {                                                                                              // 1
        Mongo = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var LINK_STORAGE = void 0;                                                                                             // 1
module.watch(require("./constants.js"), {                                                                              // 1
    LINK_STORAGE: function (v) {                                                                                       // 1
        LINK_STORAGE = v;                                                                                              // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var Linker = void 0;                                                                                                   // 1
module.watch(require("./linker.js"), {                                                                                 // 1
    "default": function (v) {                                                                                          // 1
        Linker = v;                                                                                                    // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
                                                                                                                       //
_.extend(Mongo.Collection.prototype, {                                                                                 // 5
    /**                                                                                                                // 6
     * The data we add should be valid for config.schema.js                                                            //
     */addLinks: function (data) {                                                                                     //
        var _this = this;                                                                                              // 9
                                                                                                                       //
        if (!this[LINK_STORAGE]) {                                                                                     // 10
            this[LINK_STORAGE] = {};                                                                                   // 11
        }                                                                                                              // 12
                                                                                                                       //
        _.each(data, function (linkConfig, linkName) {                                                                 // 14
            var _$extend;                                                                                              // 14
                                                                                                                       //
            if (_this[LINK_STORAGE][linkName]) {                                                                       // 15
                throw new Meteor.Error("You cannot add the link with name: " + linkName + " because it was already added to " + _this._name + " collection");
            }                                                                                                          // 17
                                                                                                                       //
            var linker = new Linker(_this, linkName, linkConfig);                                                      // 19
                                                                                                                       //
            _.extend(_this[LINK_STORAGE], (_$extend = {}, _$extend[linkName] = linker, _$extend));                     // 21
        });                                                                                                            // 24
    },                                                                                                                 // 25
    getLinks: function () {                                                                                            // 27
        return this[LINK_STORAGE];                                                                                     // 28
    },                                                                                                                 // 29
    getLinker: function (name) {                                                                                       // 31
        if (this[LINK_STORAGE]) {                                                                                      // 32
            return this[LINK_STORAGE][name];                                                                           // 33
        }                                                                                                              // 34
    },                                                                                                                 // 35
    hasLink: function (name) {                                                                                         // 37
        if (!this[LINK_STORAGE]) {                                                                                     // 38
            return false;                                                                                              // 39
        }                                                                                                              // 40
                                                                                                                       //
        return !!this[LINK_STORAGE][name];                                                                             // 42
    },                                                                                                                 // 43
    getLink: function (objectOrId, name) {                                                                             // 45
        var linkData = this[LINK_STORAGE];                                                                             // 46
                                                                                                                       //
        if (!linkData) {                                                                                               // 48
            throw new Meteor.Error("There are no links defined for collection: " + this._name);                        // 49
        }                                                                                                              // 50
                                                                                                                       //
        if (!linkData[name]) {                                                                                         // 52
            throw new Meteor.Error("There is no link " + name + " for collection: " + this._name);                     // 53
        }                                                                                                              // 54
                                                                                                                       //
        var linker = linkData[name];                                                                                   // 56
        var object = objectOrId;                                                                                       // 57
                                                                                                                       //
        if (typeof objectOrId == 'string') {                                                                           // 58
            if (!linker.isVirtual()) {                                                                                 // 59
                var _fields;                                                                                           // 59
                                                                                                                       //
                object = this.findOne(objectOrId, {                                                                    // 60
                    fields: (_fields = {}, _fields[linker.linkStorageField] = 1, _fields)                              // 61
                });                                                                                                    // 60
            } else {                                                                                                   // 65
                object = {                                                                                             // 66
                    _id: objectOrId                                                                                    // 66
                };                                                                                                     // 66
            }                                                                                                          // 67
                                                                                                                       //
            if (!object) {                                                                                             // 69
                throw new Meteor.Error("We could not find any object with _id: \"" + objectOrId + "\" within the collection: " + this._name);
            }                                                                                                          // 71
        }                                                                                                              // 72
                                                                                                                       //
        return linkData[name].createLink(object);                                                                      // 74
    }                                                                                                                  // 75
});                                                                                                                    // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"linker.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/linker.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _createClass2 = require("babel-runtime/helpers/createClass");                                                      //
                                                                                                                       //
var _createClass3 = _interopRequireDefault(_createClass2);                                                             //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return Linker;                                                                                                 // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var LinkMany = void 0;                                                                                                 // 1
module.watch(require("./linkTypes/linkMany.js"), {                                                                     // 1
    "default": function (v) {                                                                                          // 1
        LinkMany = v;                                                                                                  // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var LinkManyMeta = void 0;                                                                                             // 1
module.watch(require("./linkTypes/linkManyMeta.js"), {                                                                 // 1
    "default": function (v) {                                                                                          // 1
        LinkManyMeta = v;                                                                                              // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var LinkOne = void 0;                                                                                                  // 1
module.watch(require("./linkTypes/linkOne.js"), {                                                                      // 1
    "default": function (v) {                                                                                          // 1
        LinkOne = v;                                                                                                   // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var LinkOneMeta = void 0;                                                                                              // 1
module.watch(require("./linkTypes/linkOneMeta.js"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        LinkOneMeta = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
var LinkConfigSchema = void 0,                                                                                         // 1
    LinkConfigDefaults = void 0;                                                                                       // 1
module.watch(require("./config.schema.js"), {                                                                          // 1
    LinkConfigSchema: function (v) {                                                                                   // 1
        LinkConfigSchema = v;                                                                                          // 1
    },                                                                                                                 // 1
    LinkConfigDefaults: function (v) {                                                                                 // 1
        LinkConfigDefaults = v;                                                                                        // 1
    }                                                                                                                  // 1
}, 4);                                                                                                                 // 1
var smartArguments = void 0;                                                                                           // 1
module.watch(require("./linkTypes/lib/smartArguments"), {                                                              // 1
    "default": function (v) {                                                                                          // 1
        smartArguments = v;                                                                                            // 1
    }                                                                                                                  // 1
}, 5);                                                                                                                 // 1
var dot = void 0;                                                                                                      // 1
module.watch(require("dot-object"), {                                                                                  // 1
    "default": function (v) {                                                                                          // 1
        dot = v;                                                                                                       // 1
    }                                                                                                                  // 1
}, 6);                                                                                                                 // 1
var check = void 0;                                                                                                    // 1
module.watch(require("meteor/check"), {                                                                                // 1
    check: function (v) {                                                                                              // 1
        check = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 7);                                                                                                                 // 1
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module.watch(require("meteor/underscore"), {                                                                           // 1
    _: function (v) {                                                                                                  // 1
        _ = v;                                                                                                         // 1
    }                                                                                                                  // 1
}, 8);                                                                                                                 // 1
                                                                                                                       //
var Linker = function () {                                                                                             //
    /**                                                                                                                // 12
     * @param mainCollection                                                                                           //
     * @param linkName                                                                                                 //
     * @param linkConfig                                                                                               //
     */function Linker(mainCollection, linkName, linkConfig) {                                                         //
        (0, _classCallCheck3.default)(this, Linker);                                                                   // 17
        this.mainCollection = mainCollection;                                                                          // 18
        this.linkConfig = Object.assign({}, LinkConfigDefaults, linkConfig);                                           // 19
        this.linkName = linkName; // check linkName must not exist in schema                                           // 20
                                                                                                                       //
        this._validateAndClean(); // initialize cascade removal hooks.                                                 // 23
                                                                                                                       //
                                                                                                                       //
        this._initAutoremove();                                                                                        // 26
                                                                                                                       //
        this._initDenormalization();                                                                                   // 27
                                                                                                                       //
        if (this.isVirtual()) {                                                                                        // 29
            // if it's a virtual field make sure that when this is deleted, it will be removed from the references     // 30
            if (!linkConfig.autoremove) {                                                                              // 31
                this._handleReferenceRemovalForVirtualLinks();                                                         // 32
            }                                                                                                          // 33
        } else {                                                                                                       // 34
            this._initIndex();                                                                                         // 35
        }                                                                                                              // 36
    } /**                                                                                                              // 37
       * Values which represent for the relation a single link                                                         //
       * @returns {string[]}                                                                                           //
       */                                                                                                              //
                                                                                                                       //
    /**                                                                                                                // 72
     * The collection that is linked with the current collection                                                       //
     * @returns Mongo.Collection                                                                                       //
     */Linker.prototype.getLinkedCollection = function () {                                                            //
        function getLinkedCollection() {                                                                               //
            return this.linkConfig.collection;                                                                         // 77
        }                                                                                                              // 78
                                                                                                                       //
        return getLinkedCollection;                                                                                    //
    }(); /**                                                                                                           //
          * If the relationship for this link is of "many" type.                                                       //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype.isMany = function () {                                                                            //
        function isMany() {                                                                                            //
            return !this.isSingle();                                                                                   // 84
        }                                                                                                              // 85
                                                                                                                       //
        return isMany;                                                                                                 //
    }(); /**                                                                                                           //
          * If the relationship for this link contains metadata                                                        //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype.isMeta = function () {                                                                            //
        function isMeta() {                                                                                            //
            if (this.isVirtual()) {                                                                                    // 91
                return this.linkConfig.relatedLinker.isMeta();                                                         // 92
            }                                                                                                          // 93
                                                                                                                       //
            return !!this.linkConfig.metadata;                                                                         // 95
        }                                                                                                              // 96
                                                                                                                       //
        return isMeta;                                                                                                 //
    }(); /**                                                                                                           //
          * @returns {boolean}                                                                                         //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype.isSingle = function () {                                                                          //
        function isSingle() {                                                                                          //
            if (this.isVirtual()) {                                                                                    // 102
                return this.linkConfig.relatedLinker.isSingle();                                                       // 103
            }                                                                                                          // 104
                                                                                                                       //
            return _.contains(this.oneTypes, this.linkConfig.type);                                                    // 106
        }                                                                                                              // 107
                                                                                                                       //
        return isSingle;                                                                                               //
    }(); /**                                                                                                           //
          * @returns {boolean}                                                                                         //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype.isVirtual = function () {                                                                         //
        function isVirtual() {                                                                                         //
            return !!this.linkConfig.inversedBy;                                                                       // 113
        }                                                                                                              // 114
                                                                                                                       //
        return isVirtual;                                                                                              //
    }(); /**                                                                                                           //
          * Should return a single result.                                                                             //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype.isOneResult = function () {                                                                       //
        function isOneResult() {                                                                                       //
            return this.isVirtual() && this.linkConfig.relatedLinker.linkConfig.unique || !this.isVirtual() && this.isSingle();
        }                                                                                                              // 124
                                                                                                                       //
        return isOneResult;                                                                                            //
    }(); /**                                                                                                           //
          * @param object                                                                                              //
          * @param collection To impersonate the getLinkedCollection() of the "Linker"                                 //
          *                                                                                                            //
          * @returns {LinkOne|LinkMany|LinkManyMeta|LinkOneMeta|LinkResolve}                                           //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype.createLink = function () {                                                                        //
        function createLink(object) {                                                                                  //
            var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;                 // 132
                                                                                                                       //
            var helperClass = this._getHelperClass();                                                                  // 133
                                                                                                                       //
            return new helperClass(this, object, collection);                                                          // 135
        }                                                                                                              // 136
                                                                                                                       //
        return createLink;                                                                                             //
    }(); /**                                                                                                           //
          * @returns {*}                                                                                               //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype._validateAndClean = function () {                                                                 //
        function _validateAndClean() {                                                                                 //
            if (!this.linkConfig.collection) {                                                                         // 143
                throw new Meteor.Error('invalid-config', "For the link " + this.linkName + " you did not provide a collection.");
            }                                                                                                          // 145
                                                                                                                       //
            if (typeof this.linkConfig.collection === 'string') {                                                      // 147
                var collectionName = this.linkConfig.collection;                                                       // 148
                this.linkConfig.collection = Mongo.Collection.get(collectionName);                                     // 149
                                                                                                                       //
                if (!this.linkConfig.collection) {                                                                     // 151
                    throw new Meteor.Error('invalid-collection', "Could not find a collection with the name: " + collectionName);
                }                                                                                                      // 153
            }                                                                                                          // 154
                                                                                                                       //
            if (this.isVirtual()) {                                                                                    // 156
                return this._prepareVirtual();                                                                         // 157
            } else {                                                                                                   // 158
                if (!this.linkConfig.type) {                                                                           // 159
                    this.linkConfig.type = 'one';                                                                      // 160
                }                                                                                                      // 161
                                                                                                                       //
                if (!this.linkConfig.field) {                                                                          // 163
                    this.linkConfig.field = this._generateFieldName();                                                 // 164
                } else {                                                                                               // 165
                    if (this.linkConfig.field == this.linkName) {                                                      // 166
                        throw new Meteor.Error('invalid-config', "For the link " + this.linkName + " you must not use the same name for the field, otherwise it will cause conflicts when fetching data");
                    }                                                                                                  // 168
                }                                                                                                      // 169
            }                                                                                                          // 170
                                                                                                                       //
            check(this.linkConfig, LinkConfigSchema);                                                                  // 172
        }                                                                                                              // 173
                                                                                                                       //
        return _validateAndClean;                                                                                      //
    }(); /**                                                                                                           //
          * We need to apply same type of rules in this case.                                                          //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype._prepareVirtual = function () {                                                                   //
        function _prepareVirtual() {                                                                                   //
            var _this = this;                                                                                          // 179
                                                                                                                       //
            var _linkConfig = this.linkConfig,                                                                         // 179
                collection = _linkConfig.collection,                                                                   // 179
                inversedBy = _linkConfig.inversedBy;                                                                   // 179
            var linker = collection.getLinker(inversedBy);                                                             // 181
                                                                                                                       //
            if (!linker) {                                                                                             // 183
                // it is possible that the collection doesn't have a linker created yet.                               // 184
                // so we will create it on startup after all links have been defined                                   // 185
                Meteor.startup(function () {                                                                           // 186
                    linker = collection.getLinker(inversedBy);                                                         // 187
                                                                                                                       //
                    if (!linker) {                                                                                     // 188
                        throw new Meteor.Error("You tried setting up an inversed link in \"" + _this.mainCollection._name + "\" pointing to collection: \"" + collection._name + "\" link: \"" + inversedBy + "\", but no such link was found. Maybe a typo ?");
                    } else {                                                                                           // 190
                        _this._setupVirtualConfig(linker);                                                             // 191
                    }                                                                                                  // 192
                });                                                                                                    // 193
            } else {                                                                                                   // 194
                this._setupVirtualConfig(linker);                                                                      // 195
            }                                                                                                          // 196
        }                                                                                                              // 197
                                                                                                                       //
        return _prepareVirtual;                                                                                        //
    }(); /**                                                                                                           //
          * @param linker                                                                                              //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype._setupVirtualConfig = function () {                                                               //
        function _setupVirtualConfig(linker) {                                                                         //
            var virtualLinkConfig = linker.linkConfig;                                                                 // 204
                                                                                                                       //
            if (!virtualLinkConfig) {                                                                                  // 206
                throw new Meteor.Error("There is no link-config for the related collection on " + inversedBy + ". Make sure you added the direct links before specifying virtual ones.");
            }                                                                                                          // 208
                                                                                                                       //
            _.extend(this.linkConfig, {                                                                                // 210
                metadata: virtualLinkConfig.metadata,                                                                  // 211
                relatedLinker: linker                                                                                  // 212
            });                                                                                                        // 210
        }                                                                                                              // 214
                                                                                                                       //
        return _setupVirtualConfig;                                                                                    //
    }(); /**                                                                                                           //
          * Depending on the strategy, we create the proper helper class                                               //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype._getHelperClass = function () {                                                                   //
        function _getHelperClass() {                                                                                   //
            switch (this.strategy) {                                                                                   // 221
                case 'many-meta':                                                                                      // 222
                    return LinkManyMeta;                                                                               // 223
                                                                                                                       //
                case 'many':                                                                                           // 224
                    return LinkMany;                                                                                   // 225
                                                                                                                       //
                case 'one-meta':                                                                                       // 226
                    return LinkOneMeta;                                                                                // 227
                                                                                                                       //
                case 'one':                                                                                            // 228
                    return LinkOne;                                                                                    // 229
            }                                                                                                          // 221
                                                                                                                       //
            throw new Meteor.Error('invalid-strategy', this.strategy + " is not a valid strategy");                    // 232
        }                                                                                                              // 233
                                                                                                                       //
        return _getHelperClass;                                                                                        //
    }(); /**                                                                                                           //
          * If field name not present, we generate it.                                                                 //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype._generateFieldName = function () {                                                                //
        function _generateFieldName() {                                                                                //
            var cleanedCollectionName = this.linkConfig.collection._name.replace(/\./g, '_');                          // 240
                                                                                                                       //
            var defaultFieldPrefix = this.linkName + '_' + cleanedCollectionName;                                      // 241
                                                                                                                       //
            switch (this.strategy) {                                                                                   // 243
                case 'many-meta':                                                                                      // 244
                    return defaultFieldPrefix + "_metas";                                                              // 245
                                                                                                                       //
                case 'many':                                                                                           // 246
                    return defaultFieldPrefix + "_ids";                                                                // 247
                                                                                                                       //
                case 'one-meta':                                                                                       // 248
                    return defaultFieldPrefix + "_meta";                                                               // 249
                                                                                                                       //
                case 'one':                                                                                            // 250
                    return defaultFieldPrefix + "_id";                                                                 // 251
            }                                                                                                          // 243
        }                                                                                                              // 253
                                                                                                                       //
        return _generateFieldName;                                                                                     //
    }(); /**                                                                                                           //
          * When a link that is declared virtual is removed, the reference will be removed from every other link.      //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype._handleReferenceRemovalForVirtualLinks = function () {                                            //
        function _handleReferenceRemovalForVirtualLinks() {                                                            //
            var _this2 = this;                                                                                         // 259
                                                                                                                       //
            this.mainCollection.after.remove(function (userId, doc) {                                                  // 260
                // this problem may occur when you do a .remove() before Meteor.startup()                              // 261
                if (!_this2.linkConfig.relatedLinker) {                                                                // 262
                    console.warn("There was an error finding the link for removal for collection: \"" + _this2.mainCollection._name + "\" with link: \"" + _this2.linkName + "\". This may occur when you do a .remove() before Meteor.startup()");
                    return;                                                                                            // 264
                }                                                                                                      // 265
                                                                                                                       //
                var accessor = _this2.createLink(doc);                                                                 // 267
                                                                                                                       //
                _.each(accessor.fetch(), function (linkedObj) {                                                        // 269
                    var relatedLinker = _this2.linkConfig.relatedLinker; // We do this check, to avoid self-referencing hell when defining virtual links
                    // Virtual links if not found "compile-time", we will try again to reprocess them on Meteor.startup
                    // if a removal happens before Meteor.startup this may fail                                        // 273
                                                                                                                       //
                    if (relatedLinker) {                                                                               // 274
                        var link = relatedLinker.createLink(linkedObj);                                                // 275
                                                                                                                       //
                        if (relatedLinker.isSingle()) {                                                                // 277
                            link.unset();                                                                              // 278
                        } else {                                                                                       // 279
                            link.remove(doc);                                                                          // 280
                        }                                                                                              // 281
                    }                                                                                                  // 282
                });                                                                                                    // 283
            });                                                                                                        // 284
        }                                                                                                              // 285
                                                                                                                       //
        return _handleReferenceRemovalForVirtualLinks;                                                                 //
    }();                                                                                                               //
                                                                                                                       //
    Linker.prototype._initIndex = function () {                                                                        //
        function _initIndex() {                                                                                        //
            if (Meteor.isServer) {                                                                                     // 288
                var field = this.linkConfig.field;                                                                     // 289
                                                                                                                       //
                if (this.linkConfig.metadata) {                                                                        // 290
                    field = field + '._id';                                                                            // 291
                }                                                                                                      // 292
                                                                                                                       //
                if (this.linkConfig.index) {                                                                           // 294
                    var _mainCollection$_ensu;                                                                         // 294
                                                                                                                       //
                    if (this.isVirtual()) {                                                                            // 295
                        throw new Meteor.Error('You cannot set index on an inversed link.');                           // 296
                    }                                                                                                  // 297
                                                                                                                       //
                    var options = void 0;                                                                              // 299
                                                                                                                       //
                    if (this.linkConfig.unique) {                                                                      // 300
                        if (this.isMany()) {                                                                           // 301
                            throw new Meteor.Error('You cannot set unique property on a multi field.');                // 302
                        }                                                                                              // 303
                                                                                                                       //
                        options = {                                                                                    // 305
                            unique: true                                                                               // 305
                        };                                                                                             // 305
                    }                                                                                                  // 306
                                                                                                                       //
                    this.mainCollection._ensureIndex((_mainCollection$_ensu = {}, _mainCollection$_ensu[field] = 1, _mainCollection$_ensu), options);
                } else {                                                                                               // 309
                    if (this.linkConfig.unique) {                                                                      // 310
                        var _mainCollection$_ensu2;                                                                    // 310
                                                                                                                       //
                        if (this.isVirtual()) {                                                                        // 311
                            throw new Meteor.Error('You cannot set unique property on an inversed link.');             // 312
                        }                                                                                              // 313
                                                                                                                       //
                        if (this.isMany()) {                                                                           // 315
                            throw new Meteor.Error('You cannot set unique property on a multi field.');                // 316
                        }                                                                                              // 317
                                                                                                                       //
                        this.mainCollection._ensureIndex((_mainCollection$_ensu2 = {}, _mainCollection$_ensu2[field] = 1, _mainCollection$_ensu2), {
                            unique: true                                                                               // 321
                        });                                                                                            // 321
                    }                                                                                                  // 322
                }                                                                                                      // 323
            }                                                                                                          // 324
        }                                                                                                              // 325
                                                                                                                       //
        return _initIndex;                                                                                             //
    }();                                                                                                               //
                                                                                                                       //
    Linker.prototype._initAutoremove = function () {                                                                   //
        function _initAutoremove() {                                                                                   //
            var _this3 = this;                                                                                         // 327
                                                                                                                       //
            if (!this.linkConfig.autoremove) {                                                                         // 328
                return;                                                                                                // 329
            }                                                                                                          // 330
                                                                                                                       //
            if (!this.isVirtual()) {                                                                                   // 332
                this.mainCollection.after.remove(function (userId, doc) {                                              // 333
                    _this3.getLinkedCollection().remove({                                                              // 334
                        _id: {                                                                                         // 335
                            $in: smartArguments.getIds(doc[_this3.linkStorageField])                                   // 336
                        }                                                                                              // 335
                    });                                                                                                // 334
                });                                                                                                    // 339
            } else {                                                                                                   // 340
                this.mainCollection.after.remove(function (userId, doc) {                                              // 341
                    var linker = _this3.mainCollection.getLink(doc, _this3.linkName);                                  // 342
                                                                                                                       //
                    var ids = linker.find({}, {                                                                        // 343
                        fields: {                                                                                      // 343
                            _id: 1                                                                                     // 343
                        }                                                                                              // 343
                    }).fetch().map(function (item) {                                                                   // 343
                        return item._id;                                                                               // 343
                    });                                                                                                // 343
                                                                                                                       //
                    _this3.getLinkedCollection().remove({                                                              // 345
                        _id: {                                                                                         // 346
                            $in: ids                                                                                   // 346
                        }                                                                                              // 346
                    });                                                                                                // 345
                });                                                                                                    // 348
            }                                                                                                          // 349
        }                                                                                                              // 350
                                                                                                                       //
        return _initAutoremove;                                                                                        //
    }(); /**                                                                                                           //
          * Initializes denormalization using herteby:denormalize                                                      //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype._initDenormalization = function () {                                                              //
        function _initDenormalization() {                                                                              //
            var _this4 = this;                                                                                         // 356
                                                                                                                       //
            if (!this.linkConfig.denormalize || !Meteor.isServer) {                                                    // 357
                return;                                                                                                // 358
            }                                                                                                          // 359
                                                                                                                       //
            var packageExists = !!Package['herteby:denormalize'];                                                      // 361
                                                                                                                       //
            if (!packageExists) {                                                                                      // 362
                throw new Meteor.Error('missing-package', "Please add the herteby:denormalize package to your Meteor application in order to make caching work");
            }                                                                                                          // 364
                                                                                                                       //
            var _linkConfig$denormali = this.linkConfig.denormalize,                                                   // 356
                field = _linkConfig$denormali.field,                                                                   // 356
                body = _linkConfig$denormali.body,                                                                     // 356
                bypassSchema = _linkConfig$denormali.bypassSchema;                                                     // 356
            var cacheConfig = void 0;                                                                                  // 367
            var referenceFieldSuffix = '';                                                                             // 369
                                                                                                                       //
            if (this.isMeta()) {                                                                                       // 370
                referenceFieldSuffix = this.isSingle() ? '._id' : ':_id';                                              // 371
            }                                                                                                          // 372
                                                                                                                       //
            if (this.isVirtual()) {                                                                                    // 374
                var inversedLink = this.linkConfig.relatedLinker.linkConfig;                                           // 375
                var type = inversedLink.type == 'many' ? 'many-inverse' : 'inversed';                                  // 377
                cacheConfig = {                                                                                        // 379
                    type: type,                                                                                        // 380
                    collection: this.linkConfig.collection,                                                            // 381
                    fields: body,                                                                                      // 382
                    referenceField: inversedLink.field + referenceFieldSuffix,                                         // 383
                    cacheField: field,                                                                                 // 384
                    bypassSchema: !!bypassSchema                                                                       // 385
                };                                                                                                     // 379
            } else {                                                                                                   // 387
                cacheConfig = {                                                                                        // 388
                    type: this.linkConfig.type,                                                                        // 389
                    collection: this.linkConfig.collection,                                                            // 390
                    fields: body,                                                                                      // 391
                    referenceField: this.linkConfig.field + referenceFieldSuffix,                                      // 392
                    cacheField: field,                                                                                 // 393
                    bypassSchema: !!bypassSchema                                                                       // 394
                };                                                                                                     // 388
            }                                                                                                          // 396
                                                                                                                       //
            if (this.isVirtual()) {                                                                                    // 398
                Meteor.startup(function () {                                                                           // 399
                    _this4.mainCollection.cache(cacheConfig);                                                          // 400
                });                                                                                                    // 401
            } else {                                                                                                   // 402
                this.mainCollection.cache(cacheConfig);                                                                // 403
            }                                                                                                          // 404
        }                                                                                                              // 405
                                                                                                                       //
        return _initDenormalization;                                                                                   //
    }(); /**                                                                                                           //
          * Verifies if this linker is denormalized. It can be denormalized from the inverse side as well.             //
          *                                                                                                            //
          * @returns {boolean}                                                                                         //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype.isDenormalized = function () {                                                                    //
        function isDenormalized() {                                                                                    //
            return !!this.linkConfig.denormalize;                                                                      // 414
        }                                                                                                              // 415
                                                                                                                       //
        return isDenormalized;                                                                                         //
    }(); /**                                                                                                           //
          * Verifies if the body of the linked element does not contain fields outside the cache body                  //
          *                                                                                                            //
          * @param body                                                                                                //
          * @returns {boolean}                                                                                         //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Linker.prototype.isSubBodyDenormalized = function () {                                                             //
        function isSubBodyDenormalized(body) {                                                                         //
            var cacheBody = this.linkConfig.denormalize.body;                                                          // 425
                                                                                                                       //
            var cacheBodyFields = _.keys(dot.dot(cacheBody));                                                          // 427
                                                                                                                       //
            var bodyFields = _.keys(dot.dot(_.omit(body, '_id')));                                                     // 428
                                                                                                                       //
            return _.difference(bodyFields, cacheBodyFields).length === 0;                                             // 434
        }                                                                                                              // 435
                                                                                                                       //
        return isSubBodyDenormalized;                                                                                  //
    }();                                                                                                               //
                                                                                                                       //
    (0, _createClass3.default)(Linker, [{                                                                              //
        key: "oneTypes",                                                                                               //
        get: function () {                                                                                             //
            return ['one', '1'];                                                                                       // 44
        } /**                                                                                                          // 45
           * Returns the strategies: one, many, one-meta, many-meta                                                    //
           * @returns {string}                                                                                         //
           */                                                                                                          //
    }, {                                                                                                               //
        key: "strategy",                                                                                               //
        get: function () {                                                                                             //
            var strategy = this.isMany() ? 'many' : 'one';                                                             // 52
                                                                                                                       //
            if (this.linkConfig.metadata) {                                                                            // 53
                strategy += '-meta';                                                                                   // 54
            }                                                                                                          // 55
                                                                                                                       //
            return strategy;                                                                                           // 57
        } /**                                                                                                          // 58
           * Returns the field name in the document where the actual relationships are stored.                         //
           * @returns string                                                                                           //
           */                                                                                                          //
    }, {                                                                                                               //
        key: "linkStorageField",                                                                                       //
        get: function () {                                                                                             //
            if (this.isVirtual()) {                                                                                    // 65
                return this.linkConfig.relatedLinker.linkStorageField;                                                 // 66
            }                                                                                                          // 67
                                                                                                                       //
            return this.linkConfig.field;                                                                              // 69
        }                                                                                                              // 70
    }]);                                                                                                               //
    return Linker;                                                                                                     //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"createSearchFilters.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/lib/createSearchFilters.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return createSearchFilters;                                                                                    // 1
    },                                                                                                                 // 1
    createOne: function () {                                                                                           // 1
        return createOne;                                                                                              // 1
    },                                                                                                                 // 1
    createOneVirtual: function () {                                                                                    // 1
        return createOneVirtual;                                                                                       // 1
    },                                                                                                                 // 1
    createOneMeta: function () {                                                                                       // 1
        return createOneMeta;                                                                                          // 1
    },                                                                                                                 // 1
    createOneMetaVirtual: function () {                                                                                // 1
        return createOneMetaVirtual;                                                                                   // 1
    },                                                                                                                 // 1
    createMany: function () {                                                                                          // 1
        return createMany;                                                                                             // 1
    },                                                                                                                 // 1
    createManyVirtual: function () {                                                                                   // 1
        return createManyVirtual;                                                                                      // 1
    },                                                                                                                 // 1
    createManyMeta: function () {                                                                                      // 1
        return createManyMeta;                                                                                         // 1
    },                                                                                                                 // 1
    createManyMetaVirtual: function () {                                                                               // 1
        return createManyMetaVirtual;                                                                                  // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var sift = void 0;                                                                                                     // 1
module.watch(require("sift"), {                                                                                        // 1
    "default": function (v) {                                                                                          // 1
        sift = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
                                                                                                                       //
function createSearchFilters(object, fieldStorage, strategy, isVirtual, metaFilters) {                                 // 3
    if (!isVirtual) {                                                                                                  // 4
        switch (strategy) {                                                                                            // 5
            case 'one':                                                                                                // 6
                return createOne(object, fieldStorage);                                                                // 6
                                                                                                                       //
            case 'one-meta':                                                                                           // 7
                return createOneMeta(object, fieldStorage, metaFilters);                                               // 7
                                                                                                                       //
            case 'many':                                                                                               // 8
                return createMany(object, fieldStorage);                                                               // 8
                                                                                                                       //
            case 'many-meta':                                                                                          // 9
                return createManyMeta(object, fieldStorage, metaFilters);                                              // 9
                                                                                                                       //
            default:                                                                                                   // 10
                throw new Meteor.Error("Invalid linking strategy: " + strategy);                                       // 11
        }                                                                                                              // 5
    } else {                                                                                                           // 13
        switch (strategy) {                                                                                            // 14
            case 'one':                                                                                                // 15
                return createOneVirtual(object, fieldStorage);                                                         // 15
                                                                                                                       //
            case 'one-meta':                                                                                           // 16
                return createOneMetaVirtual(object, fieldStorage, metaFilters);                                        // 16
                                                                                                                       //
            case 'many':                                                                                               // 17
                return createManyVirtual(object, fieldStorage);                                                        // 17
                                                                                                                       //
            case 'many-meta':                                                                                          // 18
                return createManyMetaVirtual(object, fieldStorage, metaFilters);                                       // 18
                                                                                                                       //
            default:                                                                                                   // 19
                throw new Meteor.Error("Invalid linking strategy: " + strategy);                                       // 20
        }                                                                                                              // 14
    }                                                                                                                  // 22
}                                                                                                                      // 23
                                                                                                                       //
function createOne(object, fieldStorage) {                                                                             // 25
    return {                                                                                                           // 26
        _id: object[fieldStorage]                                                                                      // 27
    };                                                                                                                 // 26
}                                                                                                                      // 29
                                                                                                                       //
function createOneVirtual(object, fieldStorage) {                                                                      // 31
    var _ref;                                                                                                          // 31
                                                                                                                       //
    return _ref = {}, _ref[fieldStorage] = object._id, _ref;                                                           // 32
}                                                                                                                      // 35
                                                                                                                       //
function createOneMeta(object, fieldStorage, metaFilters) {                                                            // 37
    var value = object[fieldStorage];                                                                                  // 38
                                                                                                                       //
    if (metaFilters) {                                                                                                 // 40
        if (!sift(metaFilters)(value)) {                                                                               // 41
            return {                                                                                                   // 42
                _id: undefined                                                                                         // 42
            };                                                                                                         // 42
        }                                                                                                              // 43
    }                                                                                                                  // 44
                                                                                                                       //
    return {                                                                                                           // 46
        _id: value ? value._id : value                                                                                 // 47
    };                                                                                                                 // 46
}                                                                                                                      // 49
                                                                                                                       //
function createOneMetaVirtual(object, fieldStorage, metaFilters) {                                                     // 51
    var filters = {};                                                                                                  // 52
                                                                                                                       //
    if (metaFilters) {                                                                                                 // 53
        _.each(metaFilters, function (value, key) {                                                                    // 54
            filters[fieldStorage + '.' + key] = value;                                                                 // 55
        });                                                                                                            // 56
    }                                                                                                                  // 57
                                                                                                                       //
    filters[fieldStorage + '._id'] = object._id;                                                                       // 59
    return filters;                                                                                                    // 61
}                                                                                                                      // 62
                                                                                                                       //
function createMany(object, fieldStorage) {                                                                            // 64
    return {                                                                                                           // 65
        _id: {                                                                                                         // 66
            $in: object[fieldStorage] || []                                                                            // 67
        }                                                                                                              // 66
    };                                                                                                                 // 65
}                                                                                                                      // 70
                                                                                                                       //
function createManyVirtual(object, fieldStorage) {                                                                     // 72
    var _ref2;                                                                                                         // 72
                                                                                                                       //
    return _ref2 = {}, _ref2[fieldStorage] = object._id, _ref2;                                                        // 73
}                                                                                                                      // 76
                                                                                                                       //
function createManyMeta(object, fieldStorage, metaFilters) {                                                           // 78
    var value = object[fieldStorage];                                                                                  // 79
                                                                                                                       //
    if (metaFilters) {                                                                                                 // 81
        value = sift(metaFilters, value);                                                                              // 82
    }                                                                                                                  // 83
                                                                                                                       //
    return {                                                                                                           // 85
        _id: {                                                                                                         // 86
            $in: _.pluck(value, '_id') || []                                                                           // 87
        }                                                                                                              // 86
    };                                                                                                                 // 85
}                                                                                                                      // 90
                                                                                                                       //
function createManyMetaVirtual(object, fieldStorage, metaFilters) {                                                    // 92
    var _ref3;                                                                                                         // 92
                                                                                                                       //
    var filters = {};                                                                                                  // 93
                                                                                                                       //
    if (metaFilters) {                                                                                                 // 94
        _.each(metaFilters, function (value, key) {                                                                    // 95
            filters[key] = value;                                                                                      // 96
        });                                                                                                            // 97
    }                                                                                                                  // 98
                                                                                                                       //
    filters._id = object._id;                                                                                          // 100
    return _ref3 = {}, _ref3[fieldStorage] = {                                                                         // 102
        $elemMatch: filters                                                                                            // 103
    }, _ref3;                                                                                                          // 103
}                                                                                                                      // 105
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"linkTypes":{"base.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/linkTypes/base.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _createClass2 = require("babel-runtime/helpers/createClass");                                                      //
                                                                                                                       //
var _createClass3 = _interopRequireDefault(_createClass2);                                                             //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return Link;                                                                                                   // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var SmartArgs = void 0;                                                                                                // 1
module.watch(require("./lib/smartArguments.js"), {                                                                     // 1
    "default": function (v) {                                                                                          // 1
        SmartArgs = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var createSearchFilters = void 0;                                                                                      // 1
module.watch(require("../lib/createSearchFilters"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        createSearchFilters = v;                                                                                       // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
                                                                                                                       //
var Link = function () {                                                                                               //
    (0, _createClass3.default)(Link, [{                                                                                //
        key: "config",                                                                                                 //
        get: function () {                                                                                             //
            return this.linker.linkConfig;                                                                             // 5
        }                                                                                                              // 5
    }, {                                                                                                               //
        key: "isVirtual",                                                                                              //
        get: function () {                                                                                             //
            return this.linker.isVirtual();                                                                            // 7
        }                                                                                                              // 7
    }]);                                                                                                               //
                                                                                                                       //
    function Link(linker, object, collection) {                                                                        // 9
        (0, _classCallCheck3.default)(this, Link);                                                                     // 9
        this.linker = linker;                                                                                          // 10
        this.object = object;                                                                                          // 11
        this.linkedCollection = collection ? collection : linker.getLinkedCollection();                                // 12
                                                                                                                       //
        if (this.linker.isVirtual()) {                                                                                 // 14
            this.linkStorageField = this.config.relatedLinker.linkConfig.field;                                        // 15
        } else {                                                                                                       // 16
            this.linkStorageField = this.config.field;                                                                 // 17
        }                                                                                                              // 18
    } /**                                                                                                              // 19
       * Gets the stored link information value                                                                        //
       * @returns {*}                                                                                                  //
       */                                                                                                              //
                                                                                                                       //
    Link.prototype.value = function () {                                                                               //
        function value() {                                                                                             //
            if (this.isVirtual) {                                                                                      // 26
                throw new Meteor.Error('You can only take the value from the main link.');                             // 27
            }                                                                                                          // 28
                                                                                                                       //
            return this.object[this.linkStorageField];                                                                 // 30
        }                                                                                                              // 31
                                                                                                                       //
        return value;                                                                                                  //
    }(); /**                                                                                                           //
          * Finds linked data.                                                                                         //
          *                                                                                                            //
          * @param filters                                                                                             //
          * @param options                                                                                             //
          * @returns {*}                                                                                               //
          * @param userId                                                                                              //
          */                                                                                                           //
                                                                                                                       //
    Link.prototype.find = function () {                                                                                //
        function find() {                                                                                              //
            var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                      // 41
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                      // 41
            var userId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;                // 41
            var linker = this.linker;                                                                                  // 42
            var linkedCollection = this.linkedCollection;                                                              // 43
            var $metaFilters = void 0;                                                                                 // 45
                                                                                                                       //
            if (filters.$meta) {                                                                                       // 46
                $metaFilters = filters.$meta;                                                                          // 47
                delete filters.$meta;                                                                                  // 48
            }                                                                                                          // 49
                                                                                                                       //
            var searchFilters = createSearchFilters(this.object, this.linkStorageField, linker.strategy, linker.isVirtual(), $metaFilters);
                                                                                                                       //
            var appliedFilters = _.extend({}, filters, searchFilters); // see https://github.com/cult-of-coders/grapher/issues/134
            // happens due to recursive importing of modules                                                           // 62
            // TODO: find another way to do this                                                                       // 63
                                                                                                                       //
                                                                                                                       //
            if (linkedCollection.find) {                                                                               // 64
                return linkedCollection.find(appliedFilters, options, userId);                                         // 65
            } else {                                                                                                   // 66
                return linkedCollection.default.find(appliedFilters, options, userId);                                 // 67
            }                                                                                                          // 68
        }                                                                                                              // 69
                                                                                                                       //
        return find;                                                                                                   //
    }(); /**                                                                                                           //
          * @param filters                                                                                             //
          * @param options                                                                                             //
          * @param others                                                                                              //
          * @returns {*|{content}|any}                                                                                 //
          */                                                                                                           //
                                                                                                                       //
    Link.prototype.fetch = function () {                                                                               //
        function fetch(filters, options) {                                                                             //
            for (var _len = arguments.length, others = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                others[_key - 2] = arguments[_key];                                                                    // 77
            }                                                                                                          // 77
                                                                                                                       //
            var result = this.find.apply(this, [filters, options].concat(others)).fetch();                             // 78
                                                                                                                       //
            if (this.linker.isOneResult()) {                                                                           // 80
                return _.first(result);                                                                                // 81
            }                                                                                                          // 82
                                                                                                                       //
            return result;                                                                                             // 84
        }                                                                                                              // 85
                                                                                                                       //
        return fetch;                                                                                                  //
    }(); /**                                                                                                           //
          * When we are dealing with multiple type relationships, $in would require an array. If the field value is null, it will fail
          * We use clean to make it an empty array by default.                                                         //
          */                                                                                                           //
                                                                                                                       //
    Link.prototype.clean = function () {                                                                               //
        function clean() {}                                                                                            //
                                                                                                                       //
        return clean;                                                                                                  //
    }(); /**                                                                                                           //
          * Extracts a single id                                                                                       //
          */                                                                                                           //
                                                                                                                       //
    Link.prototype.identifyId = function () {                                                                          //
        function identifyId(what, saveToDatabase) {                                                                    //
            return SmartArgs.getId(what, {                                                                             // 97
                saveToDatabase: saveToDatabase,                                                                        // 98
                collection: this.linkedCollection                                                                      // 99
            });                                                                                                        // 97
        }                                                                                                              // 101
                                                                                                                       //
        return identifyId;                                                                                             //
    }(); /**                                                                                                           //
          * Extracts the ids of object(s) or strings and returns an array.                                             //
          */                                                                                                           //
                                                                                                                       //
    Link.prototype.identifyIds = function () {                                                                         //
        function identifyIds(what, saveToDatabase) {                                                                   //
            return SmartArgs.getIds(what, {                                                                            // 107
                saveToDatabase: saveToDatabase,                                                                        // 108
                collection: this.linkedCollection                                                                      // 109
            });                                                                                                        // 107
        }                                                                                                              // 111
                                                                                                                       //
        return identifyIds;                                                                                            //
    }(); /**                                                                                                           //
          * Checks when linking data, if the ids are valid with the linked collection.                                 //
          * @throws Meteor.Error                                                                                       //
          * @param ids                                                                                                 //
          *                                                                                                            //
          * @protected                                                                                                 //
          */                                                                                                           //
                                                                                                                       //
    Link.prototype._validateIds = function () {                                                                        //
        function _validateIds(ids) {                                                                                   //
            if (!_.isArray(ids)) {                                                                                     // 121
                ids = [ids];                                                                                           // 122
            }                                                                                                          // 123
                                                                                                                       //
            var validIds = this.linkedCollection.find({                                                                // 125
                _id: {                                                                                                 // 126
                    $in: ids                                                                                           // 126
                }                                                                                                      // 126
            }, {                                                                                                       // 125
                fields: {                                                                                              // 127
                    _id: 1                                                                                             // 127
                }                                                                                                      // 127
            }).fetch().map(function (doc) {                                                                            // 127
                return doc._id;                                                                                        // 127
            });                                                                                                        // 127
                                                                                                                       //
            if (validIds.length != ids.length) {                                                                       // 129
                throw new Meteor.Error('not-found', "You tried to create links with non-existing id(s) inside \"" + this.linkedCollection._name + "\": " + _.difference(ids, validIds).join(', '));
            }                                                                                                          // 131
        }                                                                                                              // 132
                                                                                                                       //
        return _validateIds;                                                                                           //
    }(); /**                                                                                                           //
          * This is for allowing commands such as set/unset/add/remove/metadata from the virtual link.                 //
          *                                                                                                            //
          * @param action                                                                                              //
          * @param what                                                                                                //
          * @param metadata                                                                                            //
          *                                                                                                            //
          * @protected                                                                                                 //
          */                                                                                                           //
                                                                                                                       //
    Link.prototype._virtualAction = function () {                                                                      //
        function _virtualAction(action, what, metadata) {                                                              //
            var _this = this;                                                                                          // 143
                                                                                                                       //
            var linker = this.linker.linkConfig.relatedLinker; // its an unset operation most likely.                  // 144
                                                                                                                       //
            if (what === undefined) {                                                                                  // 147
                var reversedLink = linker.createLink(this.fetch());                                                    // 148
                reversedLink.unset();                                                                                  // 149
                return;                                                                                                // 151
            }                                                                                                          // 152
                                                                                                                       //
            if (!_.isArray(what)) {                                                                                    // 154
                what = [what];                                                                                         // 155
            }                                                                                                          // 156
                                                                                                                       //
            what = _.map(what, function (element) {                                                                    // 158
                if (!_.isObject(element)) {                                                                            // 159
                    return linker.mainCollection.findOne(element);                                                     // 160
                } else {                                                                                               // 161
                    if (!element._id) {                                                                                // 162
                        var elementId = linker.mainCollection.insert(element);                                         // 163
                                                                                                                       //
                        _.extend(element, linker.mainCollection.findOne(elementId));                                   // 164
                    }                                                                                                  // 165
                                                                                                                       //
                    return element;                                                                                    // 167
                }                                                                                                      // 168
            });                                                                                                        // 169
            return _.map(what, function (element) {                                                                    // 171
                var reversedLink = linker.createLink(element);                                                         // 172
                                                                                                                       //
                if (action == 'metadata') {                                                                            // 174
                    if (linker.isSingle()) {                                                                           // 175
                        return reversedLink.metadata(metadata);                                                        // 176
                    } else {                                                                                           // 177
                        return reversedLink.metadata(_this.object, metadata);                                          // 178
                    }                                                                                                  // 179
                } else if (action == 'add' || action == 'set') {                                                       // 180
                    if (linker.isSingle()) {                                                                           // 181
                        reversedLink.set(_this.object, metadata);                                                      // 182
                    } else {                                                                                           // 183
                        reversedLink.add(_this.object, metadata);                                                      // 184
                    }                                                                                                  // 185
                } else {                                                                                               // 186
                    if (linker.isSingle()) {                                                                           // 187
                        reversedLink.unset();                                                                          // 188
                    } else {                                                                                           // 189
                        reversedLink.remove(_this.object);                                                             // 190
                    }                                                                                                  // 191
                }                                                                                                      // 192
            });                                                                                                        // 193
        }                                                                                                              // 194
                                                                                                                       //
        return _virtualAction;                                                                                         //
    }();                                                                                                               //
                                                                                                                       //
    return Link;                                                                                                       //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"linkMany.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/linkTypes/linkMany.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return LinkMany;                                                                                               // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var Link = void 0;                                                                                                     // 1
module.watch(require("./base.js"), {                                                                                   // 1
    "default": function (v) {                                                                                          // 1
        Link = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var SmartArgs = void 0;                                                                                                // 1
module.watch(require("./lib/smartArguments.js"), {                                                                     // 1
    "default": function (v) {                                                                                          // 1
        SmartArgs = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
                                                                                                                       //
var LinkMany = function (_Link) {                                                                                      //
    (0, _inherits3.default)(LinkMany, _Link);                                                                          //
                                                                                                                       //
    function LinkMany() {                                                                                              //
        (0, _classCallCheck3.default)(this, LinkMany);                                                                 //
        return (0, _possibleConstructorReturn3.default)(this, _Link.apply(this, arguments));                           //
    }                                                                                                                  //
                                                                                                                       //
    LinkMany.prototype.clean = function () {                                                                           //
        function clean() {                                                                                             //
            if (!this.object[this.linkStorageField]) {                                                                 // 6
                this.object[this.linkStorageField] = [];                                                               // 7
            }                                                                                                          // 8
        }                                                                                                              // 9
                                                                                                                       //
        return clean;                                                                                                  //
    }(); /**                                                                                                           //
          * Ads the _ids to the object.                                                                                //
          * @param what                                                                                                //
          */                                                                                                           //
                                                                                                                       //
    LinkMany.prototype.add = function () {                                                                             //
        function add(what) {                                                                                           //
            var _$addToSet;                                                                                            // 15
                                                                                                                       //
            if (this.isVirtual) {                                                                                      // 16
                this._virtualAction('add', what);                                                                      // 17
                                                                                                                       //
                return this;                                                                                           // 18
            } //if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/remove operations must be done from the owning-link of the relationship');
                                                                                                                       //
                                                                                                                       //
            this.clean();                                                                                              // 23
                                                                                                                       //
            var _ids = this.identifyIds(what, true);                                                                   // 25
                                                                                                                       //
            this._validateIds(_ids);                                                                                   // 26
                                                                                                                       //
            var field = this.linkStorageField; // update the field                                                     // 28
                                                                                                                       //
            this.object[field] = _.union(this.object[field], _ids); // update the db                                   // 31
                                                                                                                       //
            var modifier = {                                                                                           // 34
                $addToSet: (_$addToSet = {}, _$addToSet[field] = {                                                     // 35
                    $each: _ids                                                                                        // 36
                }, _$addToSet)                                                                                         // 36
            };                                                                                                         // 34
            this.linker.mainCollection.update(this.object._id, modifier);                                              // 40
            return this;                                                                                               // 42
        }                                                                                                              // 43
                                                                                                                       //
        return add;                                                                                                    //
    }(); /**                                                                                                           //
          * @param what                                                                                                //
          */                                                                                                           //
                                                                                                                       //
    LinkMany.prototype.remove = function () {                                                                          //
        function remove(what) {                                                                                        //
            var _$pullAll;                                                                                             // 48
                                                                                                                       //
            if (this.isVirtual) {                                                                                      // 49
                this._virtualAction('remove', what);                                                                   // 50
                                                                                                                       //
                return this;                                                                                           // 51
            }                                                                                                          // 52
                                                                                                                       //
            if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/Remove operations should be done from the owner of the relationship');
            this.clean();                                                                                              // 56
            var field = this.linkStorageField;                                                                         // 57
                                                                                                                       //
            var _ids = this.identifyIds(what); // update the field                                                     // 59
                                                                                                                       //
                                                                                                                       //
            this.object[field] = _.filter(this.object[field], function (_id) {                                         // 62
                return !_.contains(_ids, _id);                                                                         // 62
            }); // update the db                                                                                       // 62
                                                                                                                       //
            var modifier = {                                                                                           // 65
                $pullAll: (_$pullAll = {}, _$pullAll[field] = _ids, _$pullAll)                                         // 66
            };                                                                                                         // 65
            this.linker.mainCollection.update(this.object._id, modifier);                                              // 71
            return this;                                                                                               // 73
        }                                                                                                              // 74
                                                                                                                       //
        return remove;                                                                                                 //
    }();                                                                                                               //
                                                                                                                       //
    LinkMany.prototype.set = function () {                                                                             //
        function set(what) {                                                                                           //
            if (this.isVirtual) {                                                                                      // 77
                this._virtualAction('set', what);                                                                      // 78
                                                                                                                       //
                return this;                                                                                           // 79
            }                                                                                                          // 80
                                                                                                                       //
            throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');
        }                                                                                                              // 83
                                                                                                                       //
        return set;                                                                                                    //
    }();                                                                                                               //
                                                                                                                       //
    LinkMany.prototype.unset = function () {                                                                           //
        function unset(what) {                                                                                         //
            if (this.isVirtual) {                                                                                      // 86
                this._virtualAction('unset', what);                                                                    // 87
                                                                                                                       //
                return this;                                                                                           // 88
            }                                                                                                          // 89
                                                                                                                       //
            throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');
        }                                                                                                              // 92
                                                                                                                       //
        return unset;                                                                                                  //
    }();                                                                                                               //
                                                                                                                       //
    return LinkMany;                                                                                                   //
}(Link);                                                                                                               //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"linkManyMeta.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/linkTypes/linkManyMeta.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return LinkManyMeta;                                                                                           // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var Link = void 0;                                                                                                     // 1
module.watch(require("./base.js"), {                                                                                   // 1
    "default": function (v) {                                                                                          // 1
        Link = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var SmartArgs = void 0;                                                                                                // 1
module.watch(require("./lib/smartArguments.js"), {                                                                     // 1
    "default": function (v) {                                                                                          // 1
        SmartArgs = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
                                                                                                                       //
var LinkManyMeta = function (_Link) {                                                                                  //
    (0, _inherits3.default)(LinkManyMeta, _Link);                                                                      //
                                                                                                                       //
    function LinkManyMeta() {                                                                                          //
        (0, _classCallCheck3.default)(this, LinkManyMeta);                                                             //
        return (0, _possibleConstructorReturn3.default)(this, _Link.apply(this, arguments));                           //
    }                                                                                                                  //
                                                                                                                       //
    LinkManyMeta.prototype.clean = function () {                                                                       //
        function clean() {                                                                                             //
            if (!this.object[this.linkStorageField]) {                                                                 // 6
                this.object[this.linkStorageField] = [];                                                               // 7
            }                                                                                                          // 8
        }                                                                                                              // 9
                                                                                                                       //
        return clean;                                                                                                  //
    }(); /**                                                                                                           //
          * @param what                                                                                                //
          * @param metadata                                                                                            //
          */                                                                                                           //
                                                                                                                       //
    LinkManyMeta.prototype.add = function () {                                                                         //
        function add(what) {                                                                                           //
            var _this2 = this,                                                                                         // 15
                _$addToSet;                                                                                            // 15
                                                                                                                       //
            var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                     // 15
                                                                                                                       //
            if (this.isVirtual) {                                                                                      // 16
                this._virtualAction('add', what, metadata);                                                            // 17
                                                                                                                       //
                return this;                                                                                           // 18
            }                                                                                                          // 19
                                                                                                                       //
            var _ids = this.identifyIds(what, true);                                                                   // 21
                                                                                                                       //
            this._validateIds(_ids);                                                                                   // 22
                                                                                                                       //
            var field = this.linkStorageField;                                                                         // 24
            this.object[field] = this.object[field] || [];                                                             // 26
            var metadatas = [];                                                                                        // 27
                                                                                                                       //
            _.each(_ids, function (_id) {                                                                              // 29
                var localMetadata = _.clone(metadata);                                                                 // 30
                                                                                                                       //
                localMetadata._id = _id;                                                                               // 31
                                                                                                                       //
                _this2.object[field].push(localMetadata);                                                              // 33
                                                                                                                       //
                metadatas.push(localMetadata);                                                                         // 34
            });                                                                                                        // 35
                                                                                                                       //
            var modifier = {                                                                                           // 37
                $addToSet: (_$addToSet = {}, _$addToSet[field] = {                                                     // 38
                    $each: metadatas                                                                                   // 39
                }, _$addToSet)                                                                                         // 39
            };                                                                                                         // 37
            this.linker.mainCollection.update(this.object._id, modifier);                                              // 43
            return this;                                                                                               // 45
        }                                                                                                              // 46
                                                                                                                       //
        return add;                                                                                                    //
    }(); /**                                                                                                           //
          * @param what                                                                                                //
          * @param extendMetadata                                                                                      //
          */                                                                                                           //
                                                                                                                       //
    LinkManyMeta.prototype.metadata = function () {                                                                    //
        function metadata(what, extendMetadata) {                                                                      //
            if (this.isVirtual) {                                                                                      // 53
                this._virtualAction('metadata', what, extendMetadata);                                                 // 54
                                                                                                                       //
                return this;                                                                                           // 56
            }                                                                                                          // 57
                                                                                                                       //
            var field = this.linkStorageField;                                                                         // 59
                                                                                                                       //
            if (what === undefined) {                                                                                  // 61
                return this.object[field];                                                                             // 62
            }                                                                                                          // 63
                                                                                                                       //
            if (_.isArray(what)) {                                                                                     // 65
                throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');
            }                                                                                                          // 67
                                                                                                                       //
            var _id = this.identifyId(what);                                                                           // 69
                                                                                                                       //
            var existingMetadata = _.find(this.object[field], function (metadata) {                                    // 71
                return metadata._id == _id;                                                                            // 71
            });                                                                                                        // 71
                                                                                                                       //
            if (extendMetadata === undefined) {                                                                        // 72
                return existingMetadata;                                                                               // 73
            } else {                                                                                                   // 74
                var _linker$mainCollectio, _$set;                                                                      // 74
                                                                                                                       //
                _.extend(existingMetadata, extendMetadata);                                                            // 75
                                                                                                                       //
                var subfield = field + '._id';                                                                         // 76
                var subfieldUpdate = field + '.$';                                                                     // 77
                this.linker.mainCollection.update((_linker$mainCollectio = {                                           // 79
                    _id: this.object._id                                                                               // 80
                }, _linker$mainCollectio[subfield] = _id, _linker$mainCollectio), {                                    // 79
                    $set: (_$set = {}, _$set[subfieldUpdate] = existingMetadata, _$set)                                // 83
                });                                                                                                    // 82
            }                                                                                                          // 87
                                                                                                                       //
            return this;                                                                                               // 89
        }                                                                                                              // 90
                                                                                                                       //
        return metadata;                                                                                               //
    }();                                                                                                               //
                                                                                                                       //
    LinkManyMeta.prototype.remove = function () {                                                                      //
        function remove(what) {                                                                                        //
            var _$pull;                                                                                                // 92
                                                                                                                       //
            if (this.isVirtual) {                                                                                      // 93
                this._virtualAction('remove', what);                                                                   // 94
                                                                                                                       //
                return this;                                                                                           // 95
            }                                                                                                          // 96
                                                                                                                       //
            var _ids = this.identifyIds(what);                                                                         // 98
                                                                                                                       //
            var field = this.linkStorageField;                                                                         // 99
            this.object[field] = _.filter(this.object[field], function (link) {                                        // 101
                return !_.contains(_ids, link._id);                                                                    // 101
            });                                                                                                        // 101
            var modifier = {                                                                                           // 103
                $pull: (_$pull = {}, _$pull[field] = {                                                                 // 104
                    $elemMatch: {                                                                                      // 106
                        _id: {                                                                                         // 107
                            $in: _ids                                                                                  // 108
                        }                                                                                              // 107
                    }                                                                                                  // 106
                }, _$pull)                                                                                             // 105
            };                                                                                                         // 103
            this.linker.mainCollection.update(this.object._id, modifier);                                              // 115
            return this;                                                                                               // 117
        }                                                                                                              // 118
                                                                                                                       //
        return remove;                                                                                                 //
    }();                                                                                                               //
                                                                                                                       //
    LinkManyMeta.prototype.set = function () {                                                                         //
        function set(what, metadata) {                                                                                 //
            if (this.isVirtual) {                                                                                      // 121
                this._virtualAction('set', what, metadata);                                                            // 122
                                                                                                                       //
                return this;                                                                                           // 123
            }                                                                                                          // 124
                                                                                                                       //
            throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');
        }                                                                                                              // 127
                                                                                                                       //
        return set;                                                                                                    //
    }();                                                                                                               //
                                                                                                                       //
    LinkManyMeta.prototype.unset = function () {                                                                       //
        function unset(what) {                                                                                         //
            if (this.isVirtual) {                                                                                      // 130
                this._virtualAction('unset', what);                                                                    // 131
                                                                                                                       //
                return this;                                                                                           // 132
            }                                                                                                          // 133
                                                                                                                       //
            throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');
        }                                                                                                              // 136
                                                                                                                       //
        return unset;                                                                                                  //
    }();                                                                                                               //
                                                                                                                       //
    return LinkManyMeta;                                                                                               //
}(Link);                                                                                                               //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"linkOne.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/linkTypes/linkOne.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return LinkOne;                                                                                                // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var Link = void 0;                                                                                                     // 1
module.watch(require("./base.js"), {                                                                                   // 1
    "default": function (v) {                                                                                          // 1
        Link = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var SmartArgs = void 0;                                                                                                // 1
module.watch(require("./lib/smartArguments.js"), {                                                                     // 1
    "default": function (v) {                                                                                          // 1
        SmartArgs = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
                                                                                                                       //
var LinkOne = function (_Link) {                                                                                       //
    (0, _inherits3.default)(LinkOne, _Link);                                                                           //
                                                                                                                       //
    function LinkOne() {                                                                                               //
        (0, _classCallCheck3.default)(this, LinkOne);                                                                  //
        return (0, _possibleConstructorReturn3.default)(this, _Link.apply(this, arguments));                           //
    }                                                                                                                  //
                                                                                                                       //
    LinkOne.prototype.set = function () {                                                                              //
        function set(what) {                                                                                           //
            var _$set;                                                                                                 // 5
                                                                                                                       //
            if (this.isVirtual) {                                                                                      // 6
                this._virtualAction('set', what);                                                                      // 7
                                                                                                                       //
                return this;                                                                                           // 8
            }                                                                                                          // 9
                                                                                                                       //
            var field = this.linkStorageField;                                                                         // 11
                                                                                                                       //
            var _id = this.identifyId(what, true);                                                                     // 12
                                                                                                                       //
            this._validateIds([_id]);                                                                                  // 13
                                                                                                                       //
            this.object[field] = _id;                                                                                  // 15
            this.linker.mainCollection.update(this.object._id, {                                                       // 17
                $set: (_$set = {}, _$set[field] = _id, _$set)                                                          // 18
            });                                                                                                        // 17
            return this;                                                                                               // 23
        }                                                                                                              // 24
                                                                                                                       //
        return set;                                                                                                    //
    }();                                                                                                               //
                                                                                                                       //
    LinkOne.prototype.unset = function () {                                                                            //
        function unset() {                                                                                             //
            var _$set2;                                                                                                // 26
                                                                                                                       //
            if (this.isVirtual) {                                                                                      // 27
                this._virtualAction('unset', what);                                                                    // 28
                                                                                                                       //
                return this;                                                                                           // 29
            }                                                                                                          // 30
                                                                                                                       //
            var field = this.linkStorageField;                                                                         // 32
            this.object[field] = null;                                                                                 // 33
            this.linker.mainCollection.update(this.object._id, {                                                       // 35
                $set: (_$set2 = {}, _$set2[field] = null, _$set2)                                                      // 36
            });                                                                                                        // 35
            return this;                                                                                               // 41
        }                                                                                                              // 42
                                                                                                                       //
        return unset;                                                                                                  //
    }();                                                                                                               //
                                                                                                                       //
    LinkOne.prototype.add = function () {                                                                              //
        function add(what) {                                                                                           //
            if (this.isVirtual) {                                                                                      // 45
                this._virtualAction('add', what);                                                                      // 46
                                                                                                                       //
                return this;                                                                                           // 47
            }                                                                                                          // 48
                                                                                                                       //
            throw new Meteor.Error('invalid-command', 'You are trying to *add* in a relationship that is single. Please use set/unset for *single* relationships');
        }                                                                                                              // 51
                                                                                                                       //
        return add;                                                                                                    //
    }();                                                                                                               //
                                                                                                                       //
    LinkOne.prototype.remove = function () {                                                                           //
        function remove(what) {                                                                                        //
            if (this.isVirtual) {                                                                                      // 54
                this._virtualAction('remove', what);                                                                   // 55
                                                                                                                       //
                return this;                                                                                           // 56
            }                                                                                                          // 57
                                                                                                                       //
            throw new Meteor.Error('invalid-command', 'You are trying to *remove* in a relationship that is single. Please use set/unset for *single* relationships');
        }                                                                                                              // 60
                                                                                                                       //
        return remove;                                                                                                 //
    }();                                                                                                               //
                                                                                                                       //
    return LinkOne;                                                                                                    //
}(Link);                                                                                                               //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"linkOneMeta.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/linkTypes/linkOneMeta.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return LinkOneMeta;                                                                                            // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var Link = void 0;                                                                                                     // 1
module.watch(require("./base.js"), {                                                                                   // 1
    "default": function (v) {                                                                                          // 1
        Link = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var SmartArgs = void 0;                                                                                                // 1
module.watch(require("./lib/smartArguments.js"), {                                                                     // 1
    "default": function (v) {                                                                                          // 1
        SmartArgs = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
                                                                                                                       //
var LinkOneMeta = function (_Link) {                                                                                   //
    (0, _inherits3.default)(LinkOneMeta, _Link);                                                                       //
                                                                                                                       //
    function LinkOneMeta() {                                                                                           //
        (0, _classCallCheck3.default)(this, LinkOneMeta);                                                              //
        return (0, _possibleConstructorReturn3.default)(this, _Link.apply(this, arguments));                           //
    }                                                                                                                  //
                                                                                                                       //
    LinkOneMeta.prototype.set = function () {                                                                          //
        function set(what) {                                                                                           //
            var _$set;                                                                                                 // 5
                                                                                                                       //
            var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                     // 5
                                                                                                                       //
            if (this.isVirtual) {                                                                                      // 6
                this._virtualAction('set', what);                                                                      // 7
                                                                                                                       //
                return this;                                                                                           // 8
            }                                                                                                          // 9
                                                                                                                       //
            var field = this.linkStorageField;                                                                         // 11
            metadata._id = this.identifyId(what, true);                                                                // 12
                                                                                                                       //
            this._validateIds([metadata._id]);                                                                         // 13
                                                                                                                       //
            this.object[field] = metadata;                                                                             // 15
            this.linker.mainCollection.update(this.object._id, {                                                       // 17
                $set: (_$set = {}, _$set[field] = metadata, _$set)                                                     // 18
            });                                                                                                        // 17
            return this;                                                                                               // 23
        }                                                                                                              // 24
                                                                                                                       //
        return set;                                                                                                    //
    }();                                                                                                               //
                                                                                                                       //
    LinkOneMeta.prototype.metadata = function () {                                                                     //
        function metadata(extendMetadata) {                                                                            //
            if (this.isVirtual) {                                                                                      // 27
                this._virtualAction('metadata', undefined, extendMetadata);                                            // 28
                                                                                                                       //
                return this;                                                                                           // 30
            }                                                                                                          // 31
                                                                                                                       //
            var field = this.linkStorageField;                                                                         // 33
                                                                                                                       //
            if (!extendMetadata) {                                                                                     // 35
                return this.object[field];                                                                             // 36
            } else {                                                                                                   // 37
                var _$set2;                                                                                            // 37
                                                                                                                       //
                _.extend(this.object[field], extendMetadata);                                                          // 38
                                                                                                                       //
                this.linker.mainCollection.update(this.object._id, {                                                   // 40
                    $set: (_$set2 = {}, _$set2[field] = this.object[field], _$set2)                                    // 41
                });                                                                                                    // 40
            }                                                                                                          // 45
                                                                                                                       //
            return this;                                                                                               // 47
        }                                                                                                              // 48
                                                                                                                       //
        return metadata;                                                                                               //
    }();                                                                                                               //
                                                                                                                       //
    LinkOneMeta.prototype.unset = function () {                                                                        //
        function unset() {                                                                                             //
            var _$set3;                                                                                                // 50
                                                                                                                       //
            if (this.isVirtual) {                                                                                      // 51
                this._virtualAction('unset');                                                                          // 52
                                                                                                                       //
                return this;                                                                                           // 53
            }                                                                                                          // 54
                                                                                                                       //
            var field = this.linkStorageField;                                                                         // 56
            this.object[field] = {};                                                                                   // 57
            this.linker.mainCollection.update(this.object._id, {                                                       // 59
                $set: (_$set3 = {}, _$set3[field] = {}, _$set3)                                                        // 60
            });                                                                                                        // 59
            return this;                                                                                               // 65
        }                                                                                                              // 66
                                                                                                                       //
        return unset;                                                                                                  //
    }();                                                                                                               //
                                                                                                                       //
    LinkOneMeta.prototype.add = function () {                                                                          //
        function add(what, metadata) {                                                                                 //
            if (this.isVirtual) {                                                                                      // 69
                this._virtualAction('add', what, metadata);                                                            // 70
                                                                                                                       //
                return this;                                                                                           // 71
            }                                                                                                          // 72
                                                                                                                       //
            throw new Meteor.Error('invalid-command', 'You are trying to *add* in a relationship that is single. Please use set/unset for *single* relationships');
        }                                                                                                              // 75
                                                                                                                       //
        return add;                                                                                                    //
    }();                                                                                                               //
                                                                                                                       //
    LinkOneMeta.prototype.remove = function () {                                                                       //
        function remove(what) {                                                                                        //
            if (this.isVirtual) {                                                                                      // 78
                this._virtualAction('remove', what);                                                                   // 79
                                                                                                                       //
                return this;                                                                                           // 80
            }                                                                                                          // 81
                                                                                                                       //
            throw new Meteor.Error('invalid-command', 'You are trying to *remove* in a relationship that is single. Please use set/unset for *single* relationships');
        }                                                                                                              // 84
                                                                                                                       //
        return remove;                                                                                                 //
    }();                                                                                                               //
                                                                                                                       //
    return LinkOneMeta;                                                                                                //
}(Link);                                                                                                               //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"smartArguments.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/links/linkTypes/lib/smartArguments.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.exportDefault(new (function () {                                                                                // 1
    function _class() {                                                                                                // 6
        (0, _classCallCheck3.default)(this, _class);                                                                   // 6
    }                                                                                                                  // 6
                                                                                                                       //
    _class.prototype.getIds = function () {                                                                            // 6
        function getIds(what, options) {                                                                               // 6
            var _this = this;                                                                                          // 7
                                                                                                                       //
            if (_.isArray(what)) {                                                                                     // 8
                return _.map(what, function (subWhat) {                                                                // 9
                    return _this.getId(subWhat, options);                                                              // 10
                });                                                                                                    // 11
            } else {                                                                                                   // 12
                return [this.getId(what, options)];                                                                    // 13
            }                                                                                                          // 14
                                                                                                                       //
            throw new Meteor.Error('invalid-type', "Unrecognized type: " + (typeof what === "undefined" ? "undefined" : (0, _typeof3.default)(what)) + " for managing links");
        }                                                                                                              // 17
                                                                                                                       //
        return getIds;                                                                                                 // 6
    }();                                                                                                               // 6
                                                                                                                       //
    _class.prototype.getId = function () {                                                                             // 6
        function getId(what, options) {                                                                                // 6
            if (typeof what === 'string') {                                                                            // 20
                return what;                                                                                           // 21
            }                                                                                                          // 22
                                                                                                                       //
            if ((typeof what === "undefined" ? "undefined" : (0, _typeof3.default)(what)) === 'object') {              // 24
                if (!what._id && options.saveToDatabase) {                                                             // 25
                    what._id = options.collection.insert(what);                                                        // 26
                }                                                                                                      // 27
                                                                                                                       //
                return what._id;                                                                                       // 29
            }                                                                                                          // 30
        }                                                                                                              // 31
                                                                                                                       //
        return getId;                                                                                                  // 6
    }();                                                                                                               // 6
                                                                                                                       //
    return _class;                                                                                                     // 6
}())());                                                                                                               // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"namedQuery":{"namedQuery.base.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/namedQuery/namedQuery.base.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _extends2 = require("babel-runtime/helpers/extends");                                                              //
                                                                                                                       //
var _extends3 = _interopRequireDefault(_extends2);                                                                     //
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _createClass2 = require("babel-runtime/helpers/createClass");                                                      //
                                                                                                                       //
var _createClass3 = _interopRequireDefault(_createClass2);                                                             //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return NamedQueryBase;                                                                                         // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var deepClone = void 0;                                                                                                // 1
module.watch(require("lodash.clonedeep"), {                                                                            // 1
    "default": function (v) {                                                                                          // 1
        deepClone = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
                                                                                                                       //
var NamedQueryBase = function () {                                                                                     //
    function NamedQueryBase(name, collection, body) {                                                                  // 6
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};                          // 6
        (0, _classCallCheck3.default)(this, NamedQueryBase);                                                           // 6
        this.isNamedQuery = true;                                                                                      // 6
        this.queryName = name;                                                                                         // 7
                                                                                                                       //
        if (_.isFunction(body)) {                                                                                      // 9
            this.resolver = body;                                                                                      // 10
        } else {                                                                                                       // 11
            this.body = deepClone(body);                                                                               // 12
        }                                                                                                              // 13
                                                                                                                       //
        this.subscriptionHandle = null;                                                                                // 15
        this.params = options.params || {};                                                                            // 16
        this.options = options;                                                                                        // 17
        this.collection = collection;                                                                                  // 18
        this.isExposed = false;                                                                                        // 19
    }                                                                                                                  // 20
                                                                                                                       //
    NamedQueryBase.prototype.setParams = function () {                                                                 //
        function setParams(params) {                                                                                   //
            this.params = _.extend({}, this.params, params);                                                           // 31
            return this;                                                                                               // 33
        }                                                                                                              // 34
                                                                                                                       //
        return setParams;                                                                                              //
    }(); /**                                                                                                           //
          * Validates the parameters                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    NamedQueryBase.prototype.doValidateParams = function () {                                                          //
        function doValidateParams(params) {                                                                            //
            params = params || this.params;                                                                            // 40
            var validateParams = this.options.validateParams;                                                          // 39
            if (!validateParams) return;                                                                               // 43
                                                                                                                       //
            try {                                                                                                      // 45
                this._validate(validateParams, params);                                                                // 46
            } catch (validationError) {                                                                                // 47
                console.error("Invalid parameters supplied to the query \"" + this.queryName + "\"\n", validationError);
                throw validationError; // rethrow                                                                      // 49
            }                                                                                                          // 50
        }                                                                                                              // 51
                                                                                                                       //
        return doValidateParams;                                                                                       //
    }();                                                                                                               //
                                                                                                                       //
    NamedQueryBase.prototype.clone = function () {                                                                     //
        function clone(newParams) {                                                                                    //
            var params = _.extend({}, deepClone(this.params), newParams);                                              // 54
                                                                                                                       //
            var clone = new this.constructor(this.queryName, this.collection, this.isResolver ? this.resolver : deepClone(this.body), (0, _extends3.default)({}, this.options, {
                params: params                                                                                         // 62
            }));                                                                                                       // 56
            clone.cacher = this.cacher;                                                                                // 66
                                                                                                                       //
            if (this.exposeConfig) {                                                                                   // 67
                clone.exposeConfig = this.exposeConfig;                                                                // 68
            }                                                                                                          // 69
                                                                                                                       //
            return clone;                                                                                              // 71
        }                                                                                                              // 72
                                                                                                                       //
        return clone;                                                                                                  //
    }(); /**                                                                                                           //
          * @param {function|object} validator                                                                         //
          * @param {object} params                                                                                     //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    NamedQueryBase.prototype._validate = function () {                                                                 //
        function _validate(validator, params) {                                                                        //
            if (_.isFunction(validator)) {                                                                             // 80
                validator.call(null, params);                                                                          // 81
            } else {                                                                                                   // 82
                check(params, validator);                                                                              // 83
            }                                                                                                          // 84
        }                                                                                                              // 85
                                                                                                                       //
        return _validate;                                                                                              //
    }();                                                                                                               //
                                                                                                                       //
    (0, _createClass3.default)(NamedQueryBase, [{                                                                      //
        key: "name",                                                                                                   //
        get: function () {                                                                                             //
            return "named_query_" + this.queryName;                                                                    // 23
        }                                                                                                              // 24
    }, {                                                                                                               //
        key: "isResolver",                                                                                             //
        get: function () {                                                                                             //
            return !!this.resolver;                                                                                    // 27
        }                                                                                                              // 28
    }]);                                                                                                               //
    return NamedQueryBase;                                                                                             //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"namedQuery.client.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/namedQuery/namedQuery.client.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _regenerator = require("babel-runtime/regenerator");                                                               //
                                                                                                                       //
var _regenerator2 = _interopRequireDefault(_regenerator);                                                              //
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
var CountSubscription = void 0;                                                                                        // 1
module.watch(require("../query/counts/countSubscription"), {                                                           // 1
    "default": function (v) {                                                                                          // 1
        CountSubscription = v;                                                                                         // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var createGraph = void 0;                                                                                              // 1
module.watch(require("../query/lib/createGraph.js"), {                                                                 // 1
    "default": function (v) {                                                                                          // 1
        createGraph = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var recursiveFetch = void 0;                                                                                           // 1
module.watch(require("../query/lib/recursiveFetch.js"), {                                                              // 1
    "default": function (v) {                                                                                          // 1
        recursiveFetch = v;                                                                                            // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var prepareForProcess = void 0;                                                                                        // 1
module.watch(require("../query/lib/prepareForProcess.js"), {                                                           // 1
    "default": function (v) {                                                                                          // 1
        prepareForProcess = v;                                                                                         // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module.watch(require("meteor/underscore"), {                                                                           // 1
    _: function (v) {                                                                                                  // 1
        _ = v;                                                                                                         // 1
    }                                                                                                                  // 1
}, 4);                                                                                                                 // 1
var callWithPromise = void 0;                                                                                          // 1
module.watch(require("../query/lib/callWithPromise"), {                                                                // 1
    "default": function (v) {                                                                                          // 1
        callWithPromise = v;                                                                                           // 1
    }                                                                                                                  // 1
}, 5);                                                                                                                 // 1
var Base = void 0;                                                                                                     // 1
module.watch(require("./namedQuery.base"), {                                                                           // 1
    "default": function (v) {                                                                                          // 1
        Base = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 6);                                                                                                                 // 1
module.exportDefault(function (_Base) {                                                                                // 1
    (0, _inherits3.default)(_class, _Base);                                                                            // 1
                                                                                                                       //
    function _class() {                                                                                                // 1
        (0, _classCallCheck3.default)(this, _class);                                                                   // 1
        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));                           // 1
    }                                                                                                                  // 1
                                                                                                                       //
    /**                                                                                                                // 10
     * Subscribe                                                                                                       //
     *                                                                                                                 //
     * @param callback                                                                                                 //
     * @returns {null|any|*}                                                                                           //
     */_class.prototype.subscribe = function () {                                                                      //
        function subscribe(callback) {                                                                                 // 1
            if (this.isResolver) {                                                                                     // 17
                throw new Meteor.Error('not-allowed', "You cannot subscribe to a resolver query");                     // 18
            }                                                                                                          // 19
                                                                                                                       //
            this.subscriptionHandle = Meteor.subscribe(this.name, this.params, callback);                              // 21
            return this.subscriptionHandle;                                                                            // 27
        }                                                                                                              // 28
                                                                                                                       //
        return subscribe;                                                                                              // 1
    }(); /**                                                                                                           // 1
          * Subscribe to the counts for this query                                                                     //
          *                                                                                                            //
          * @param callback                                                                                            //
          * @returns {Object}                                                                                          //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.subscribeCount = function () {                                                                    // 1
        function subscribeCount(callback) {                                                                            // 1
            if (this.isResolver) {                                                                                     // 37
                throw new Meteor.Error('not-allowed', "You cannot subscribe to a resolver query");                     // 38
            }                                                                                                          // 39
                                                                                                                       //
            if (!this._counter) {                                                                                      // 41
                this._counter = new CountSubscription(this);                                                           // 42
            }                                                                                                          // 43
                                                                                                                       //
            return this._counter.subscribe(this.params, callback);                                                     // 45
        }                                                                                                              // 46
                                                                                                                       //
        return subscribeCount;                                                                                         // 1
    }(); /**                                                                                                           // 1
          * Unsubscribe if an existing subscription exists                                                             //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.unsubscribe = function () {                                                                       // 1
        function unsubscribe() {                                                                                       // 1
            if (this.subscriptionHandle) {                                                                             // 52
                this.subscriptionHandle.stop();                                                                        // 53
            }                                                                                                          // 54
                                                                                                                       //
            this.subscriptionHandle = null;                                                                            // 56
        }                                                                                                              // 57
                                                                                                                       //
        return unsubscribe;                                                                                            // 1
    }(); /**                                                                                                           // 1
          * Unsubscribe to the counts if a subscription exists.                                                        //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.unsubscribeCount = function () {                                                                  // 1
        function unsubscribeCount() {                                                                                  // 1
            if (this._counter) {                                                                                       // 63
                this._counter.unsubscribe();                                                                           // 64
                                                                                                                       //
                this._counter = null;                                                                                  // 65
            }                                                                                                          // 66
        }                                                                                                              // 67
                                                                                                                       //
        return unsubscribeCount;                                                                                       // 1
    }(); /**                                                                                                           // 1
          * Fetches elements in sync using promises                                                                    //
          * @return {*}                                                                                                //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.fetchSync = function () {                                                                         // 1
        function fetchSync() {                                                                                         // 1
            return _regenerator2.default.async(function () {                                                           // 1
                function fetchSync$(_context) {                                                                        // 1
                    while (1) {                                                                                        // 1
                        switch (_context.prev = _context.next) {                                                       // 1
                            case 0:                                                                                    // 1
                                if (!this.subscriptionHandle) {                                                        // 1
                                    _context.next = 2;                                                                 // 1
                                    break;                                                                             // 1
                                }                                                                                      // 1
                                                                                                                       //
                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');
                                                                                                                       //
                            case 2:                                                                                    // 1
                                _context.next = 4;                                                                     // 1
                                return _regenerator2.default.awrap(callWithPromise(this.name, prepareForProcess(this.body, this.params)));
                                                                                                                       //
                            case 4:                                                                                    // 1
                                return _context.abrupt("return", _context.sent);                                       // 1
                                                                                                                       //
                            case 5:                                                                                    // 1
                            case "end":                                                                                // 1
                                return _context.stop();                                                                // 1
                        }                                                                                              // 1
                    }                                                                                                  // 1
                }                                                                                                      // 1
                                                                                                                       //
                return fetchSync$;                                                                                     // 1
            }(), null, this);                                                                                          // 1
        }                                                                                                              // 1
                                                                                                                       //
        return fetchSync;                                                                                              // 1
    }(); /**                                                                                                           // 1
          * Fetches one element in sync                                                                                //
          * @return {*}                                                                                                //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.fetchOneSync = function () {                                                                      // 1
        function fetchOneSync() {                                                                                      // 1
            return _regenerator2.default.async(function () {                                                           // 1
                function fetchOneSync$(_context2) {                                                                    // 1
                    while (1) {                                                                                        // 1
                        switch (_context2.prev = _context2.next) {                                                     // 1
                            case 0:                                                                                    // 1
                                _context2.t0 = _;                                                                      // 1
                                _context2.next = 3;                                                                    // 1
                                return _regenerator2.default.awrap(this.fetchSync());                                  // 1
                                                                                                                       //
                            case 3:                                                                                    // 1
                                _context2.t1 = _context2.sent;                                                         // 1
                                return _context2.abrupt("return", _context2.t0.first.call(_context2.t0, _context2.t1));
                                                                                                                       //
                            case 5:                                                                                    // 1
                            case "end":                                                                                // 1
                                return _context2.stop();                                                               // 1
                        }                                                                                              // 1
                    }                                                                                                  // 1
                }                                                                                                      // 1
                                                                                                                       //
                return fetchOneSync$;                                                                                  // 1
            }(), null, this);                                                                                          // 1
        }                                                                                                              // 1
                                                                                                                       //
        return fetchOneSync;                                                                                           // 1
    }(); /**                                                                                                           // 1
          * Retrieves the data.                                                                                        //
          * @param callbackOrOptions                                                                                   //
          * @returns {*}                                                                                               //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.fetch = function () {                                                                             // 1
        function fetch(callbackOrOptions) {                                                                            // 1
            if (!this.subscriptionHandle) {                                                                            // 95
                return this._fetchStatic(callbackOrOptions);                                                           // 96
            } else {                                                                                                   // 97
                return this._fetchReactive(callbackOrOptions);                                                         // 98
            }                                                                                                          // 99
        }                                                                                                              // 100
                                                                                                                       //
        return fetch;                                                                                                  // 1
    }(); /**                                                                                                           // 1
          * @param args                                                                                                //
          * @returns {*}                                                                                               //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.fetchOne = function () {                                                                          // 1
        function fetchOne() {                                                                                          // 1
            if (!this.subscriptionHandle) {                                                                            // 107
                var callback = arguments.length <= 0 ? undefined : arguments[0];                                       // 108
                                                                                                                       //
                if (!_.isFunction(callback)) {                                                                         // 109
                    throw new Meteor.Error('You did not provide a valid callback');                                    // 110
                }                                                                                                      // 111
                                                                                                                       //
                this.fetch(function (err, res) {                                                                       // 113
                    callback(err, res ? _.first(res) : null);                                                          // 114
                });                                                                                                    // 115
            } else {                                                                                                   // 116
                return _.first(this.fetch.apply(this, arguments));                                                     // 117
            }                                                                                                          // 118
        }                                                                                                              // 119
                                                                                                                       //
        return fetchOne;                                                                                               // 1
    }(); /**                                                                                                           // 1
          * Gets the count of matching elements in sync.                                                               //
          * @returns {any}                                                                                             //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.getCountSync = function () {                                                                      // 1
        function getCountSync() {                                                                                      // 1
            return _regenerator2.default.async(function () {                                                           // 1
                function getCountSync$(_context3) {                                                                    // 1
                    while (1) {                                                                                        // 1
                        switch (_context3.prev = _context3.next) {                                                     // 1
                            case 0:                                                                                    // 1
                                if (!this._counter) {                                                                  // 1
                                    _context3.next = 2;                                                                // 1
                                    break;                                                                             // 1
                                }                                                                                      // 1
                                                                                                                       //
                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');
                                                                                                                       //
                            case 2:                                                                                    // 1
                                _context3.next = 4;                                                                    // 1
                                return _regenerator2.default.awrap(callWithPromise(this.name + '.count', prepareForProcess(this.body, this.params)));
                                                                                                                       //
                            case 4:                                                                                    // 1
                                return _context3.abrupt("return", _context3.sent);                                     // 1
                                                                                                                       //
                            case 5:                                                                                    // 1
                            case "end":                                                                                // 1
                                return _context3.stop();                                                               // 1
                        }                                                                                              // 1
                    }                                                                                                  // 1
                }                                                                                                      // 1
                                                                                                                       //
                return getCountSync$;                                                                                  // 1
            }(), null, this);                                                                                          // 1
        }                                                                                                              // 1
                                                                                                                       //
        return getCountSync;                                                                                           // 1
    }(); /**                                                                                                           // 1
          * Gets the count of matching elements.                                                                       //
          * @param callback                                                                                            //
          * @returns {any}                                                                                             //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.getCount = function () {                                                                          // 1
        function getCount(callback) {                                                                                  // 1
            if (this._counter) {                                                                                       // 139
                return this._counter.getCount();                                                                       // 140
            } else {                                                                                                   // 141
                if (!callback) {                                                                                       // 142
                    throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the count or subscribe first.');
                } else {                                                                                               // 144
                    return Meteor.call(this.name + '.count', this.params, callback);                                   // 145
                }                                                                                                      // 146
            }                                                                                                          // 147
        }                                                                                                              // 148
                                                                                                                       //
        return getCount;                                                                                               // 1
    }(); /**                                                                                                           // 1
          * Fetching non-reactive queries                                                                              //
          * @param callback                                                                                            //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype._fetchStatic = function () {                                                                      // 1
        function _fetchStatic(callback) {                                                                              // 1
            if (!callback) {                                                                                           // 156
                throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the data or subscribe first.');
            }                                                                                                          // 158
                                                                                                                       //
            Meteor.call(this.name, this.params, callback);                                                             // 160
        }                                                                                                              // 161
                                                                                                                       //
        return _fetchStatic;                                                                                           // 1
    }(); /**                                                                                                           // 1
          * Fetching when we've got an active publication                                                              //
          *                                                                                                            //
          * @param options                                                                                             //
          * @returns {*}                                                                                               //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype._fetchReactive = function () {                                                                    // 1
        function _fetchReactive() {                                                                                    // 1
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                      // 170
            var body = this.body;                                                                                      // 171
                                                                                                                       //
            if (this.params.$body) {                                                                                   // 172
                body = intersectDeep(body, this.params.$body);                                                         // 173
            }                                                                                                          // 174
                                                                                                                       //
            body = prepareForProcess(body, this.params);                                                               // 176
                                                                                                                       //
            if (!options.allowSkip && body.$options && body.$options.skip) {                                           // 177
                delete body.$options.skip;                                                                             // 178
            }                                                                                                          // 179
                                                                                                                       //
            return recursiveFetch(createGraph(this.collection, body));                                                 // 181
        }                                                                                                              // 184
                                                                                                                       //
        return _fetchReactive;                                                                                         // 1
    }();                                                                                                               // 1
                                                                                                                       //
    return _class;                                                                                                     // 1
}(Base));                                                                                                              // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"namedQuery.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/namedQuery/namedQuery.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var NamedQueryClient = void 0;                                                                                         // 1
module.watch(require("./namedQuery.client"), {                                                                         // 1
    "default": function (v) {                                                                                          // 1
        NamedQueryClient = v;                                                                                          // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var NamedQueryServer = void 0;                                                                                         // 1
module.watch(require("./namedQuery.server"), {                                                                         // 1
    "default": function (v) {                                                                                          // 1
        NamedQueryServer = v;                                                                                          // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var NamedQuery = void 0;                                                                                               // 4
                                                                                                                       //
if (Meteor.isServer) {                                                                                                 // 6
    NamedQuery = NamedQueryServer;                                                                                     // 7
} else {                                                                                                               // 8
    NamedQuery = NamedQueryClient;                                                                                     // 9
}                                                                                                                      // 10
                                                                                                                       //
module.exportDefault(NamedQuery);                                                                                      // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"namedQuery.server.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/namedQuery/namedQuery.server.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
var prepareForProcess = void 0;                                                                                        // 1
module.watch(require("../query/lib/prepareForProcess.js"), {                                                           // 1
    "default": function (v) {                                                                                          // 1
        prepareForProcess = v;                                                                                         // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var Base = void 0;                                                                                                     // 1
module.watch(require("./namedQuery.base"), {                                                                           // 1
    "default": function (v) {                                                                                          // 1
        Base = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var deepClone = void 0;                                                                                                // 1
module.watch(require("lodash.clonedeep"), {                                                                            // 1
    "default": function (v) {                                                                                          // 1
        deepClone = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var MemoryResultCacher = void 0;                                                                                       // 1
module.watch(require("./cache/MemoryResultCacher"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        MemoryResultCacher = v;                                                                                        // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
var intersectDeep = void 0;                                                                                            // 1
module.watch(require("../query/lib/intersectDeep"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        intersectDeep = v;                                                                                             // 1
    }                                                                                                                  // 1
}, 4);                                                                                                                 // 1
module.exportDefault(function (_Base) {                                                                                // 1
    (0, _inherits3.default)(_class, _Base);                                                                            // 1
                                                                                                                       //
    function _class() {                                                                                                // 1
        (0, _classCallCheck3.default)(this, _class);                                                                   // 1
        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));                           // 1
    }                                                                                                                  // 1
                                                                                                                       //
    /**                                                                                                                // 8
     * Retrieves the data.                                                                                             //
     * @returns {*}                                                                                                    //
     */_class.prototype.fetch = function () {                                                                          //
        function fetch(context) {                                                                                      // 1
            this._performSecurityChecks(context, this.params);                                                         // 13
                                                                                                                       //
            if (this.isResolver) {                                                                                     // 15
                return this._fetchResolverData(context);                                                               // 16
            } else {                                                                                                   // 17
                body = deepClone(this.body);                                                                           // 18
                                                                                                                       //
                if (this.params.$body) {                                                                               // 19
                    body = intersectDeep(body, this.params.$body);                                                     // 20
                } // we must apply emobdyment here                                                                     // 21
                                                                                                                       //
                                                                                                                       //
                this.doEmbodimentIfItApplies(body);                                                                    // 24
                var query = this.collection.createQuery(deepClone(body), {                                             // 26
                    params: deepClone(this.params)                                                                     // 29
                });                                                                                                    // 28
                                                                                                                       //
                if (this.cacher) {                                                                                     // 33
                    var cacheId = this.cacher.generateQueryId(this.queryName, this.params);                            // 34
                    return this.cacher.fetch(cacheId, {                                                                // 35
                        query: query                                                                                   // 35
                    });                                                                                                // 35
                }                                                                                                      // 36
                                                                                                                       //
                return query.fetch();                                                                                  // 38
            }                                                                                                          // 39
        }                                                                                                              // 40
                                                                                                                       //
        return fetch;                                                                                                  // 1
    }(); /**                                                                                                           // 1
          * @param args                                                                                                //
          * @returns {*}                                                                                               //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.fetchOne = function () {                                                                          // 1
        function fetchOne() {                                                                                          // 1
            return _.first(this.fetch.apply(this, arguments));                                                         // 47
        }                                                                                                              // 48
                                                                                                                       //
        return fetchOne;                                                                                               // 1
    }(); /**                                                                                                           // 1
          * Gets the count of matching elements.                                                                       //
          *                                                                                                            //
          * @returns {any}                                                                                             //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.getCount = function () {                                                                          // 1
        function getCount(context) {                                                                                   // 1
            this._performSecurityChecks(context, this.params);                                                         // 56
                                                                                                                       //
            var countCursor = this.getCursorForCounting();                                                             // 58
                                                                                                                       //
            if (this.cacher) {                                                                                         // 60
                var cacheId = 'count::' + this.cacher.generateQueryId(this.queryName, this.params);                    // 61
                return this.cacher.fetch(cacheId, {                                                                    // 63
                    countCursor: countCursor                                                                           // 63
                });                                                                                                    // 63
            }                                                                                                          // 64
                                                                                                                       //
            return countCursor.count();                                                                                // 66
        }                                                                                                              // 67
                                                                                                                       //
        return getCount;                                                                                               // 1
    }(); /**                                                                                                           // 1
          * Returns the cursor for counting                                                                            //
          * This is most likely used for counts cursor                                                                 //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.getCursorForCounting = function () {                                                              // 1
        function getCursorForCounting() {                                                                              // 1
            var body = deepClone(this.body);                                                                           // 74
            this.doEmbodimentIfItApplies(body);                                                                        // 75
            body = prepareForProcess(body, this.params);                                                               // 76
            return this.collection.find(body.$filters || {}, {                                                         // 78
                fields: {                                                                                              // 78
                    _id: 1                                                                                             // 78
                }                                                                                                      // 78
            });                                                                                                        // 78
        }                                                                                                              // 79
                                                                                                                       //
        return getCursorForCounting;                                                                                   // 1
    }(); /**                                                                                                           // 1
          * @param cacher                                                                                              //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.cacheResults = function () {                                                                      // 1
        function cacheResults(cacher) {                                                                                // 1
            if (!cacher) {                                                                                             // 85
                cacher = new MemoryResultCacher();                                                                     // 86
            }                                                                                                          // 87
                                                                                                                       //
            this.cacher = cacher;                                                                                      // 89
        }                                                                                                              // 90
                                                                                                                       //
        return cacheResults;                                                                                           // 1
    }(); /**                                                                                                           // 1
          * Configure resolve. This doesn't actually call the resolver, it just sets it                                //
          * @param fn                                                                                                  //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype.resolve = function () {                                                                           // 1
        function resolve(fn) {                                                                                         // 1
            if (!this.isResolver) {                                                                                    // 97
                throw new Meteor.Error('invalid-call', "You cannot use resolve() on a non resolver NamedQuery");       // 98
            }                                                                                                          // 99
                                                                                                                       //
            this.resolver = fn;                                                                                        // 101
        }                                                                                                              // 102
                                                                                                                       //
        return resolve;                                                                                                // 1
    }(); /**                                                                                                           // 1
          * @returns {*}                                                                                               //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype._fetchResolverData = function () {                                                                // 1
        function _fetchResolverData(context) {                                                                         // 1
            var resolver = this.resolver;                                                                              // 109
            var self = this;                                                                                           // 110
            var query = {                                                                                              // 111
                fetch: function () {                                                                                   // 112
                    return resolver.call(context, self.params);                                                        // 113
                }                                                                                                      // 114
            };                                                                                                         // 111
                                                                                                                       //
            if (this.cacher) {                                                                                         // 117
                var cacheId = this.cacher.generateQueryId(this.queryName, this.params);                                // 118
                return this.cacher.fetch(cacheId, {                                                                    // 119
                    query: query                                                                                       // 119
                });                                                                                                    // 119
            }                                                                                                          // 120
                                                                                                                       //
            return query.fetch();                                                                                      // 122
        }                                                                                                              // 123
                                                                                                                       //
        return _fetchResolverData;                                                                                     // 1
    }(); /**                                                                                                           // 1
          * @param context Meteor method/publish context                                                               //
          * @param params                                                                                              //
          *                                                                                                            //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    _class.prototype._performSecurityChecks = function () {                                                            // 1
        function _performSecurityChecks(context, params) {                                                             // 1
            if (context && this.exposeConfig) {                                                                        // 132
                this._callFirewall(context, context.userId, params);                                                   // 133
            }                                                                                                          // 134
                                                                                                                       //
            this.doValidateParams(params);                                                                             // 136
        }                                                                                                              // 137
                                                                                                                       //
        return _performSecurityChecks;                                                                                 // 1
    }();                                                                                                               // 1
                                                                                                                       //
    return _class;                                                                                                     // 1
}(Base));                                                                                                              // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"store.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/namedQuery/store.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.exportDefault(new (function () {                                                                                // 1
    function _class() {                                                                                                // 2
        (0, _classCallCheck3.default)(this, _class);                                                                   // 2
        this.storage = {};                                                                                             // 3
    }                                                                                                                  // 4
                                                                                                                       //
    _class.prototype.add = function () {                                                                               // 1
        function add(key, value) {                                                                                     // 1
            if (this.storage[key]) {                                                                                   // 7
                throw new Meteor.Error('invalid-name', "You have previously defined another namedQuery with the same name: \"" + key + "\". Named Query names should be unique.");
            }                                                                                                          // 9
                                                                                                                       //
            this.storage[key] = value;                                                                                 // 11
        }                                                                                                              // 12
                                                                                                                       //
        return add;                                                                                                    // 1
    }();                                                                                                               // 1
                                                                                                                       //
    _class.prototype.get = function () {                                                                               // 1
        function get(key) {                                                                                            // 1
            return this.storage[key];                                                                                  // 15
        }                                                                                                              // 16
                                                                                                                       //
        return get;                                                                                                    // 1
    }();                                                                                                               // 1
                                                                                                                       //
    _class.prototype.getAll = function () {                                                                            // 1
        function getAll() {                                                                                            // 1
            return this.storage;                                                                                       // 19
        }                                                                                                              // 20
                                                                                                                       //
        return getAll;                                                                                                 // 1
    }();                                                                                                               // 1
                                                                                                                       //
    return _class;                                                                                                     // 1
}())());                                                                                                               // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cache":{"BaseResultCacher.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/namedQuery/cache/BaseResultCacher.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return BaseResultCacher;                                                                                       // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var EJSON = void 0;                                                                                                    // 1
module.watch(require("meteor/ejson"), {                                                                                // 1
    EJSON: function (v) {                                                                                              // 1
        EJSON = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
                                                                                                                       //
var BaseResultCacher = function () {                                                                                   //
    function BaseResultCacher() {                                                                                      // 7
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                           // 7
        (0, _classCallCheck3.default)(this, BaseResultCacher);                                                         // 7
        this.config = config;                                                                                          // 8
    } /**                                                                                                              // 9
       * @param queryName                                                                                              //
       * @param params                                                                                                 //
       * @returns {string}                                                                                             //
       */                                                                                                              //
                                                                                                                       //
    BaseResultCacher.prototype.generateQueryId = function () {                                                         //
        function generateQueryId(queryName, params) {                                                                  //
            return queryName + "::" + EJSON.stringify(params);                                                         // 17
        }                                                                                                              // 18
                                                                                                                       //
        return generateQueryId;                                                                                        //
    }(); /**                                                                                                           //
          * Dummy function                                                                                             //
          */                                                                                                           //
                                                                                                                       //
    BaseResultCacher.prototype.fetch = function () {                                                                   //
        function fetch(cacheId, _ref) {                                                                                //
            var query = _ref.query,                                                                                    // 23
                countCursor = _ref.countCursor;                                                                        // 23
            throw 'Not implemented';                                                                                   // 24
        }                                                                                                              // 25
                                                                                                                       //
        return fetch;                                                                                                  //
    }(); /**                                                                                                           //
          * @param query                                                                                               //
          * @param countCursor                                                                                         //
          * @returns {*}                                                                                               //
          */                                                                                                           //
                                                                                                                       //
    BaseResultCacher.fetchData = function () {                                                                         //
        function fetchData(_ref2) {                                                                                    //
            var query = _ref2.query,                                                                                   // 32
                countCursor = _ref2.countCursor;                                                                       // 32
                                                                                                                       //
            if (query) {                                                                                               // 33
                return query.fetch();                                                                                  // 34
            } else {                                                                                                   // 35
                return countCursor.count();                                                                            // 36
            }                                                                                                          // 37
        }                                                                                                              // 38
                                                                                                                       //
        return fetchData;                                                                                              //
    }();                                                                                                               //
                                                                                                                       //
    return BaseResultCacher;                                                                                           //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MemoryResultCacher.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/namedQuery/cache/MemoryResultCacher.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return MemoryResultCacher;                                                                                     // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var Meteor = void 0;                                                                                                   // 1
module.watch(require("meteor/meteor"), {                                                                               // 1
    Meteor: function (v) {                                                                                             // 1
        Meteor = v;                                                                                                    // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var cloneDeep = void 0;                                                                                                // 1
module.watch(require("lodash.clonedeep"), {                                                                            // 1
    "default": function (v) {                                                                                          // 1
        cloneDeep = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var BaseResultCacher = void 0;                                                                                         // 1
module.watch(require("./BaseResultCacher"), {                                                                          // 1
    "default": function (v) {                                                                                          // 1
        BaseResultCacher = v;                                                                                          // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var DEFAULT_TTL = 60000; /**                                                                                           // 5
                          * This is a very basic in-memory result caching functionality                                //
                          */                                                                                           //
                                                                                                                       //
var MemoryResultCacher = function (_BaseResultCacher) {                                                                //
    (0, _inherits3.default)(MemoryResultCacher, _BaseResultCacher);                                                    //
                                                                                                                       //
    function MemoryResultCacher() {                                                                                    // 11
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                           // 11
        (0, _classCallCheck3.default)(this, MemoryResultCacher);                                                       // 11
                                                                                                                       //
        var _this = (0, _possibleConstructorReturn3.default)(this, _BaseResultCacher.call(this, config));              // 11
                                                                                                                       //
        _this.store = {};                                                                                              // 13
        return _this;                                                                                                  // 11
    } /**                                                                                                              // 14
       * @param cacheId                                                                                                //
       * @param query                                                                                                  //
       * @param countCursor                                                                                            //
       * @returns {*}                                                                                                  //
       */                                                                                                              //
                                                                                                                       //
    MemoryResultCacher.prototype.fetch = function () {                                                                 //
        function fetch(cacheId, _ref) {                                                                                //
            var query = _ref.query,                                                                                    // 22
                countCursor = _ref.countCursor;                                                                        // 22
            var cacheData = this.store[cacheId];                                                                       // 23
                                                                                                                       //
            if (cacheData !== undefined) {                                                                             // 24
                return cloneDeep(cacheData);                                                                           // 25
            }                                                                                                          // 26
                                                                                                                       //
            var data = BaseResultCacher.fetchData({                                                                    // 28
                query: query,                                                                                          // 28
                countCursor: countCursor                                                                               // 28
            });                                                                                                        // 28
            this.storeData(cacheId, data);                                                                             // 29
            return data;                                                                                               // 31
        }                                                                                                              // 32
                                                                                                                       //
        return fetch;                                                                                                  //
    }(); /**                                                                                                           //
          * @param cacheId                                                                                             //
          * @param data                                                                                                //
          */                                                                                                           //
                                                                                                                       //
    MemoryResultCacher.prototype.storeData = function () {                                                             //
        function storeData(cacheId, data) {                                                                            //
            var _this2 = this;                                                                                         // 39
                                                                                                                       //
            var ttl = this.config.ttl || DEFAULT_TTL;                                                                  // 40
            this.store[cacheId] = cloneDeep(data);                                                                     // 41
            Meteor.setTimeout(function () {                                                                            // 43
                delete _this2.store[cacheId];                                                                          // 44
            }, ttl);                                                                                                   // 45
        }                                                                                                              // 46
                                                                                                                       //
        return storeData;                                                                                              //
    }();                                                                                                               //
                                                                                                                       //
    return MemoryResultCacher;                                                                                         //
}(BaseResultCacher);                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"query":{"query.base.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/query.base.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _extends2 = require("babel-runtime/helpers/extends");                                                              //
                                                                                                                       //
var _extends3 = _interopRequireDefault(_extends2);                                                                     //
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _createClass2 = require("babel-runtime/helpers/createClass");                                                      //
                                                                                                                       //
var _createClass3 = _interopRequireDefault(_createClass2);                                                             //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return QueryBase;                                                                                              // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var deepClone = void 0;                                                                                                // 1
module.watch(require("lodash.clonedeep"), {                                                                            // 1
    "default": function (v) {                                                                                          // 1
        deepClone = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var check = void 0;                                                                                                    // 1
module.watch(require("meteor/check"), {                                                                                // 1
    check: function (v) {                                                                                              // 1
        check = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
                                                                                                                       //
var QueryBase = function () {                                                                                          //
    function QueryBase(collection, body) {                                                                             // 7
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                          // 7
        (0, _classCallCheck3.default)(this, QueryBase);                                                                // 7
        this.isGlobalQuery = true;                                                                                     // 7
        this.collection = collection;                                                                                  // 8
        this.body = deepClone(body);                                                                                   // 10
        this.params = options.params || {};                                                                            // 12
        this.options = options;                                                                                        // 13
    }                                                                                                                  // 14
                                                                                                                       //
    QueryBase.prototype.clone = function () {                                                                          //
        function clone(newParams) {                                                                                    //
            var params = _.extend({}, deepClone(this.params), newParams);                                              // 17
                                                                                                                       //
            return new this.constructor(this.collection, deepClone(this.body), (0, _extends3.default)({                // 19
                params: params                                                                                         // 23
            }, this.options));                                                                                         // 19
        }                                                                                                              // 27
                                                                                                                       //
        return clone;                                                                                                  //
    }();                                                                                                               //
                                                                                                                       //
    /**                                                                                                                // 33
     * Validates the parameters                                                                                        //
     */QueryBase.prototype.doValidateParams = function () {                                                            //
        function doValidateParams() {                                                                                  //
            var validateParams = this.options.validateParams;                                                          // 36
            if (!validateParams) return;                                                                               // 38
                                                                                                                       //
            if (_.isFunction(validateParams)) {                                                                        // 40
                validateParams.call(null, this.params);                                                                // 41
            } else {                                                                                                   // 42
                check(this.params);                                                                                    // 43
            }                                                                                                          // 44
        }                                                                                                              // 45
                                                                                                                       //
        return doValidateParams;                                                                                       //
    }(); /**                                                                                                           //
          * Merges the params with previous params.                                                                    //
          *                                                                                                            //
          * @param params                                                                                              //
          * @returns {Query}                                                                                           //
          */                                                                                                           //
                                                                                                                       //
    QueryBase.prototype.setParams = function () {                                                                      //
        function setParams(params) {                                                                                   //
            this.params = _.extend({}, this.params, params);                                                           // 54
            return this;                                                                                               // 56
        }                                                                                                              // 57
                                                                                                                       //
        return setParams;                                                                                              //
    }();                                                                                                               //
                                                                                                                       //
    (0, _createClass3.default)(QueryBase, [{                                                                           //
        key: "name",                                                                                                   //
        get: function () {                                                                                             //
            return "exposure_" + this.collection._name;                                                                // 30
        }                                                                                                              // 31
    }]);                                                                                                               //
    return QueryBase;                                                                                                  //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"query.client.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/query.client.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _regenerator = require("babel-runtime/regenerator");                                                               //
                                                                                                                       //
var _regenerator2 = _interopRequireDefault(_regenerator);                                                              //
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return Query;                                                                                                  // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module.watch(require("meteor/underscore"), {                                                                           // 1
    _: function (v) {                                                                                                  // 1
        _ = v;                                                                                                         // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var CountSubscription = void 0;                                                                                        // 1
module.watch(require("./counts/countSubscription"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        CountSubscription = v;                                                                                         // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var createGraph = void 0;                                                                                              // 1
module.watch(require("./lib/createGraph.js"), {                                                                        // 1
    "default": function (v) {                                                                                          // 1
        createGraph = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var recursiveFetch = void 0;                                                                                           // 1
module.watch(require("./lib/recursiveFetch.js"), {                                                                     // 1
    "default": function (v) {                                                                                          // 1
        recursiveFetch = v;                                                                                            // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
var prepareForProcess = void 0;                                                                                        // 1
module.watch(require("./lib/prepareForProcess.js"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        prepareForProcess = v;                                                                                         // 1
    }                                                                                                                  // 1
}, 4);                                                                                                                 // 1
var callWithPromise = void 0;                                                                                          // 1
module.watch(require("./lib/callWithPromise"), {                                                                       // 1
    "default": function (v) {                                                                                          // 1
        callWithPromise = v;                                                                                           // 1
    }                                                                                                                  // 1
}, 5);                                                                                                                 // 1
var Base = void 0;                                                                                                     // 1
module.watch(require("./query.base"), {                                                                                // 1
    "default": function (v) {                                                                                          // 1
        Base = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 6);                                                                                                                 // 1
                                                                                                                       //
var Query = function (_Base) {                                                                                         //
    (0, _inherits3.default)(Query, _Base);                                                                             //
                                                                                                                       //
    function Query() {                                                                                                 //
        (0, _classCallCheck3.default)(this, Query);                                                                    //
        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));                           //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                // 10
     * Subscribe                                                                                                       //
     *                                                                                                                 //
     * @param callback {Function} optional                                                                             //
     * @returns {null|any|*}                                                                                           //
     */Query.prototype.subscribe = function () {                                                                       //
        function subscribe(callback) {                                                                                 //
            this.doValidateParams();                                                                                   // 17
            this.subscriptionHandle = Meteor.subscribe(this.name, prepareForProcess(this.body, this.params), callback);
            return this.subscriptionHandle;                                                                            // 25
        }                                                                                                              // 26
                                                                                                                       //
        return subscribe;                                                                                              //
    }(); /**                                                                                                           //
          * Subscribe to the counts for this query                                                                     //
          *                                                                                                            //
          * @param callback                                                                                            //
          * @returns {Object}                                                                                          //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.subscribeCount = function () {                                                                     //
        function subscribeCount(callback) {                                                                            //
            this.doValidateParams();                                                                                   // 35
                                                                                                                       //
            if (!this._counter) {                                                                                      // 37
                this._counter = new CountSubscription(this);                                                           // 38
            }                                                                                                          // 39
                                                                                                                       //
            return this._counter.subscribe(prepareForProcess(this.body, this.params), callback);                       // 41
        }                                                                                                              // 45
                                                                                                                       //
        return subscribeCount;                                                                                         //
    }(); /**                                                                                                           //
          * Unsubscribe if an existing subscription exists                                                             //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.unsubscribe = function () {                                                                        //
        function unsubscribe() {                                                                                       //
            if (this.subscriptionHandle) {                                                                             // 51
                this.subscriptionHandle.stop();                                                                        // 52
            }                                                                                                          // 53
                                                                                                                       //
            this.subscriptionHandle = null;                                                                            // 55
        }                                                                                                              // 56
                                                                                                                       //
        return unsubscribe;                                                                                            //
    }(); /**                                                                                                           //
          * Unsubscribe to the counts if a subscription exists.                                                        //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.unsubscribeCount = function () {                                                                   //
        function unsubscribeCount() {                                                                                  //
            if (this._counter) {                                                                                       // 62
                this._counter.unsubscribe();                                                                           // 63
                                                                                                                       //
                this._counter = null;                                                                                  // 64
            }                                                                                                          // 65
        }                                                                                                              // 66
                                                                                                                       //
        return unsubscribeCount;                                                                                       //
    }(); /**                                                                                                           //
          * Fetches elements in sync using promises                                                                    //
          * @return {*}                                                                                                //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.fetchSync = function () {                                                                          //
        function fetchSync() {                                                                                         //
            return _regenerator2.default.async(function () {                                                           //
                function fetchSync$(_context) {                                                                        //
                    while (1) {                                                                                        //
                        switch (_context.prev = _context.next) {                                                       //
                            case 0:                                                                                    //
                                this.doValidateParams();                                                               // 73
                                                                                                                       //
                                if (!this.subscriptionHandle) {                                                        //
                                    _context.next = 3;                                                                 //
                                    break;                                                                             //
                                }                                                                                      //
                                                                                                                       //
                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');
                                                                                                                       //
                            case 3:                                                                                    //
                                _context.next = 5;                                                                     //
                                return _regenerator2.default.awrap(callWithPromise(this.name, prepareForProcess(this.body, this.params)));
                                                                                                                       //
                            case 5:                                                                                    //
                                return _context.abrupt("return", _context.sent);                                       //
                                                                                                                       //
                            case 6:                                                                                    //
                            case "end":                                                                                //
                                return _context.stop();                                                                //
                        }                                                                                              //
                    }                                                                                                  //
                }                                                                                                      //
                                                                                                                       //
                return fetchSync$;                                                                                     //
            }(), null, this);                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return fetchSync;                                                                                              //
    }(); /**                                                                                                           //
          * Fetches one element in sync                                                                                //
          * @return {*}                                                                                                //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.fetchOneSync = function () {                                                                       //
        function fetchOneSync() {                                                                                      //
            return _regenerator2.default.async(function () {                                                           //
                function fetchOneSync$(_context2) {                                                                    //
                    while (1) {                                                                                        //
                        switch (_context2.prev = _context2.next) {                                                     //
                            case 0:                                                                                    //
                                _context2.t0 = _;                                                                      //
                                _context2.next = 3;                                                                    //
                                return _regenerator2.default.awrap(this.fetchSync());                                  //
                                                                                                                       //
                            case 3:                                                                                    //
                                _context2.t1 = _context2.sent;                                                         //
                                return _context2.abrupt("return", _context2.t0.first.call(_context2.t0, _context2.t1));
                                                                                                                       //
                            case 5:                                                                                    //
                            case "end":                                                                                //
                                return _context2.stop();                                                               //
                        }                                                                                              //
                    }                                                                                                  //
                }                                                                                                      //
                                                                                                                       //
                return fetchOneSync$;                                                                                  //
            }(), null, this);                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return fetchOneSync;                                                                                           //
    }(); /**                                                                                                           //
          * Retrieves the data.                                                                                        //
          * @param callbackOrOptions                                                                                   //
          * @returns {*}                                                                                               //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.fetch = function () {                                                                              //
        function fetch(callbackOrOptions) {                                                                            //
            this.doValidateParams();                                                                                   // 96
                                                                                                                       //
            if (!this.subscriptionHandle) {                                                                            // 98
                return this._fetchStatic(callbackOrOptions);                                                           // 99
            } else {                                                                                                   // 100
                return this._fetchReactive(callbackOrOptions);                                                         // 101
            }                                                                                                          // 102
        }                                                                                                              // 103
                                                                                                                       //
        return fetch;                                                                                                  //
    }(); /**                                                                                                           //
          * @param args                                                                                                //
          * @returns {*}                                                                                               //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.fetchOne = function () {                                                                           //
        function fetchOne() {                                                                                          //
            if (!this.subscriptionHandle) {                                                                            // 110
                var callback = arguments.length <= 0 ? undefined : arguments[0];                                       // 111
                                                                                                                       //
                if (!_.isFunction(callback)) {                                                                         // 112
                    throw new Meteor.Error('You did not provide a valid callback');                                    // 113
                }                                                                                                      // 114
                                                                                                                       //
                this.fetch(function (err, res) {                                                                       // 116
                    callback(err, res ? _.first(res) : null);                                                          // 117
                });                                                                                                    // 118
            } else {                                                                                                   // 119
                return _.first(this.fetch.apply(this, arguments));                                                     // 120
            }                                                                                                          // 121
        }                                                                                                              // 122
                                                                                                                       //
        return fetchOne;                                                                                               //
    }(); /**                                                                                                           //
          * Gets the count of matching elements in sync.                                                               //
          * @returns {any}                                                                                             //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.getCountSync = function () {                                                                       //
        function getCountSync() {                                                                                      //
            return _regenerator2.default.async(function () {                                                           //
                function getCountSync$(_context3) {                                                                    //
                    while (1) {                                                                                        //
                        switch (_context3.prev = _context3.next) {                                                     //
                            case 0:                                                                                    //
                                if (!this._counter) {                                                                  //
                                    _context3.next = 2;                                                                //
                                    break;                                                                             //
                                }                                                                                      //
                                                                                                                       //
                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');
                                                                                                                       //
                            case 2:                                                                                    //
                                _context3.next = 4;                                                                    //
                                return _regenerator2.default.awrap(callWithPromise(this.name + '.count', prepareForProcess(this.body, this.params)));
                                                                                                                       //
                            case 4:                                                                                    //
                                return _context3.abrupt("return", _context3.sent);                                     //
                                                                                                                       //
                            case 5:                                                                                    //
                            case "end":                                                                                //
                                return _context3.stop();                                                               //
                        }                                                                                              //
                    }                                                                                                  //
                }                                                                                                      //
                                                                                                                       //
                return getCountSync$;                                                                                  //
            }(), null, this);                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return getCountSync;                                                                                           //
    }(); /**                                                                                                           //
          * Gets the count of matching elements.                                                                       //
          * @param callback                                                                                            //
          * @returns {any}                                                                                             //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.getCount = function () {                                                                           //
        function getCount(callback) {                                                                                  //
            if (this._counter) {                                                                                       // 142
                return this._counter.getCount();                                                                       // 143
            } else {                                                                                                   // 144
                if (!callback) {                                                                                       // 145
                    throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the count or subscribe first.');
                } else {                                                                                               // 147
                    return Meteor.call(this.name + '.count', prepareForProcess(this.body, this.params), callback);     // 148
                }                                                                                                      // 153
            }                                                                                                          // 154
        }                                                                                                              // 155
                                                                                                                       //
        return getCount;                                                                                               //
    }(); /**                                                                                                           //
          * Fetching non-reactive queries                                                                              //
          * @param callback                                                                                            //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype._fetchStatic = function () {                                                                       //
        function _fetchStatic(callback) {                                                                              //
            if (!callback) {                                                                                           // 163
                throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the data or subscribe first.');
            }                                                                                                          // 165
                                                                                                                       //
            Meteor.call(this.name, prepareForProcess(this.body, this.params), callback);                               // 167
        }                                                                                                              // 168
                                                                                                                       //
        return _fetchStatic;                                                                                           //
    }(); /**                                                                                                           //
          * Fetching when we've got an active publication                                                              //
          *                                                                                                            //
          * @param options                                                                                             //
          * @returns {*}                                                                                               //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype._fetchReactive = function () {                                                                     //
        function _fetchReactive() {                                                                                    //
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                      // 177
            var body = prepareForProcess(this.body, this.params);                                                      // 178
                                                                                                                       //
            if (!options.allowSkip && body.$options && body.$options.skip) {                                           // 179
                delete body.$options.skip;                                                                             // 180
            }                                                                                                          // 181
                                                                                                                       //
            return recursiveFetch(createGraph(this.collection, body), this.params);                                    // 183
        }                                                                                                              // 187
                                                                                                                       //
        return _fetchReactive;                                                                                         //
    }();                                                                                                               //
                                                                                                                       //
    return Query;                                                                                                      //
}(Base);                                                                                                               //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"query.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/query.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var QueryClient = void 0;                                                                                              // 1
module.watch(require("./query.client"), {                                                                              // 1
    "default": function (v) {                                                                                          // 1
        QueryClient = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var QueryServer = void 0;                                                                                              // 1
module.watch(require("./query.server"), {                                                                              // 1
    "default": function (v) {                                                                                          // 1
        QueryServer = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var Query = void 0;                                                                                                    // 4
                                                                                                                       //
if (Meteor.isServer) {                                                                                                 // 6
    Query = QueryServer;                                                                                               // 7
} else {                                                                                                               // 8
    Query = QueryClient;                                                                                               // 9
}                                                                                                                      // 10
                                                                                                                       //
module.exportDefault(Query);                                                                                           // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"query.server.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/query.server.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return Query;                                                                                                  // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var createGraph = void 0;                                                                                              // 1
module.watch(require("./lib/createGraph.js"), {                                                                        // 1
    "default": function (v) {                                                                                          // 1
        createGraph = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var prepareForProcess = void 0;                                                                                        // 1
module.watch(require("./lib/prepareForProcess.js"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        prepareForProcess = v;                                                                                         // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var hypernova = void 0;                                                                                                // 1
module.watch(require("./hypernova/hypernova.js"), {                                                                    // 1
    "default": function (v) {                                                                                          // 1
        hypernova = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var Base = void 0;                                                                                                     // 1
module.watch(require("./query.base"), {                                                                                // 1
    "default": function (v) {                                                                                          // 1
        Base = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
                                                                                                                       //
var Query = function (_Base) {                                                                                         //
    (0, _inherits3.default)(Query, _Base);                                                                             //
                                                                                                                       //
    function Query() {                                                                                                 //
        (0, _classCallCheck3.default)(this, Query);                                                                    //
        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));                           //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                // 7
     * Retrieves the data.                                                                                             //
     * @param context                                                                                                  //
     * @returns {*}                                                                                                    //
     */Query.prototype.fetch = function () {                                                                           //
        function fetch() {                                                                                             //
            var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                      // 12
            var node = createGraph(this.collection, prepareForProcess(this.body, this.params));                        // 13
            return hypernova(node, context.userId, {                                                                   // 18
                params: this.params                                                                                    // 18
            });                                                                                                        // 18
        }                                                                                                              // 19
                                                                                                                       //
        return fetch;                                                                                                  //
    }(); /**                                                                                                           //
          * @param args                                                                                                //
          * @returns {*}                                                                                               //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.fetchOne = function () {                                                                           //
        function fetchOne() {                                                                                          //
            return _.first(this.fetch.apply(this, arguments));                                                         // 26
        }                                                                                                              // 27
                                                                                                                       //
        return fetchOne;                                                                                               //
    }(); /**                                                                                                           //
          * Gets the count of matching elements.                                                                       //
          * @returns {integer}                                                                                         //
          */                                                                                                           //
                                                                                                                       //
    Query.prototype.getCount = function () {                                                                           //
        function getCount() {                                                                                          //
            return this.collection.find(this.body.$filters || {}, {}).count();                                         // 34
        }                                                                                                              // 35
                                                                                                                       //
        return getCount;                                                                                               //
    }();                                                                                                               //
                                                                                                                       //
    return Query;                                                                                                      //
}(Base);                                                                                                               //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"counts":{"collection.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/counts/collection.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Mongo = void 0;                                                                                                    // 1
module.watch(require("meteor/mongo"), {                                                                                // 1
  Mongo: function (v) {                                                                                                // 1
    Mongo = v;                                                                                                         // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var COUNTS_COLLECTION_CLIENT = void 0;                                                                                 // 1
module.watch(require("./constants"), {                                                                                 // 1
  COUNTS_COLLECTION_CLIENT: function (v) {                                                                             // 1
    COUNTS_COLLECTION_CLIENT = v;                                                                                      // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
module.exportDefault(new Mongo.Collection(COUNTS_COLLECTION_CLIENT));                                                  // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"constants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/counts/constants.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
  COUNTS_COLLECTION_CLIENT: function () {                                                                              // 1
    return COUNTS_COLLECTION_CLIENT;                                                                                   // 1
  }                                                                                                                    // 1
});                                                                                                                    // 1
var COUNTS_COLLECTION_CLIENT = 'grapher_counts';                                                                       // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"countSubscription.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/counts/countSubscription.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return CountSubscription;                                                                                      // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var EJSON = void 0;                                                                                                    // 1
module.watch(require("meteor/ejson"), {                                                                                // 1
    EJSON: function (v) {                                                                                              // 1
        EJSON = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var Meteor = void 0;                                                                                                   // 1
module.watch(require("meteor/meteor"), {                                                                               // 1
    Meteor: function (v) {                                                                                             // 1
        Meteor = v;                                                                                                    // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var ReactiveVar = void 0;                                                                                              // 1
module.watch(require("meteor/reactive-var"), {                                                                         // 1
    ReactiveVar: function (v) {                                                                                        // 1
        ReactiveVar = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var Tracker = void 0;                                                                                                  // 1
module.watch(require("meteor/tracker"), {                                                                              // 1
    Tracker: function (v) {                                                                                            // 1
        Tracker = v;                                                                                                   // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
var Counts = void 0;                                                                                                   // 1
module.watch(require("./collection"), {                                                                                // 1
    "default": function (v) {                                                                                          // 1
        Counts = v;                                                                                                    // 1
    }                                                                                                                  // 1
}, 4);                                                                                                                 // 1
var createFauxSubscription = void 0;                                                                                   // 1
module.watch(require("./createFauxSubscription"), {                                                                    // 1
    "default": function (v) {                                                                                          // 1
        createFauxSubscription = v;                                                                                    // 1
    }                                                                                                                  // 1
}, 5);                                                                                                                 // 1
var prepareForProcess = void 0;                                                                                        // 1
module.watch(require("../lib/prepareForProcess.js"), {                                                                 // 1
    "default": function (v) {                                                                                          // 1
        prepareForProcess = v;                                                                                         // 1
    }                                                                                                                  // 1
}, 6);                                                                                                                 // 1
var NamedQueryBase = void 0;                                                                                           // 1
module.watch(require("../../namedQuery/namedQuery.base"), {                                                            // 1
    "default": function (v) {                                                                                          // 1
        NamedQueryBase = v;                                                                                            // 1
    }                                                                                                                  // 1
}, 7);                                                                                                                 // 1
                                                                                                                       //
var CountSubscription = function () {                                                                                  //
    /**                                                                                                                // 12
     * @param {*} query - The query to use when fetching counts                                                        //
     */function CountSubscription(query) {                                                                             //
        (0, _classCallCheck3.default)(this, CountSubscription);                                                        // 15
        this.accessToken = new ReactiveVar(null);                                                                      // 16
        this.fauxHandle = null;                                                                                        // 17
        this.query = query;                                                                                            // 18
    } /**                                                                                                              // 19
       * Starts a subscription request for reactive counts.                                                            //
       *                                                                                                               //
       * @param {*} arg - The argument to pass to {name}.count.subscribe                                               //
       * @param {*} callback                                                                                           //
       */                                                                                                              //
                                                                                                                       //
    CountSubscription.prototype.subscribe = function () {                                                              //
        function subscribe(arg, callback) {                                                                            //
            var _this = this;                                                                                          // 27
                                                                                                                       //
            // Don't try to resubscribe if arg hasn't changed                                                          // 28
            if (EJSON.equals(this.lastArgs, arg) && this.fauxHandle) {                                                 // 29
                return this.fauxHandle;                                                                                // 30
            }                                                                                                          // 31
                                                                                                                       //
            this.accessToken.set(null);                                                                                // 33
            this.lastArgs = arg;                                                                                       // 34
            Meteor.call(this.query.name + '.count.subscribe', arg, function (error, token) {                           // 36
                if (!_this._markedForUnsubscribe) {                                                                    // 37
                    _this.subscriptionHandle = Meteor.subscribe(_this.query.name + '.count', token, callback);         // 38
                                                                                                                       //
                    _this.accessToken.set(token);                                                                      // 39
                                                                                                                       //
                    _this.disconnectComputation = Tracker.autorun(function () {                                        // 41
                        return _this.handleDisconnect();                                                               // 41
                    });                                                                                                // 41
                }                                                                                                      // 42
                                                                                                                       //
                _this._markedForUnsubscribe = false;                                                                   // 44
            });                                                                                                        // 45
            this.fauxHandle = createFauxSubscription(this);                                                            // 47
            return this.fauxHandle;                                                                                    // 48
        }                                                                                                              // 49
                                                                                                                       //
        return subscribe;                                                                                              //
    }(); /**                                                                                                           //
          * Unsubscribes from the count endpoint, if there is such a subscription.                                     //
          */                                                                                                           //
                                                                                                                       //
    CountSubscription.prototype.unsubscribe = function () {                                                            //
        function unsubscribe() {                                                                                       //
            if (this.subscriptionHandle) {                                                                             // 55
                this.disconnectComputation.stop();                                                                     // 56
                this.subscriptionHandle.stop();                                                                        // 57
            } else {                                                                                                   // 58
                // If we hit this branch, then Meteor.call in subscribe hasn't finished yet                            // 59
                // so set a flag to stop the subscription from being created                                           // 60
                this._markedForUnsubscribe = true;                                                                     // 61
            }                                                                                                          // 62
                                                                                                                       //
            this.accessToken.set(null);                                                                                // 64
            this.fauxHandle = null;                                                                                    // 65
            this.subscriptionHandle = null;                                                                            // 66
        }                                                                                                              // 67
                                                                                                                       //
        return unsubscribe;                                                                                            //
    }(); /**                                                                                                           //
          * Reactively fetch current document count. Returns null if the subscription is not ready yet.                //
          *                                                                                                            //
          * @returns {Number|null} - Current document count                                                            //
          */                                                                                                           //
                                                                                                                       //
    CountSubscription.prototype.getCount = function () {                                                               //
        function getCount() {                                                                                          //
            var id = this.accessToken.get();                                                                           // 75
            if (id === null) return null;                                                                              // 76
            var doc = Counts.findOne(id);                                                                              // 78
            return doc.count;                                                                                          // 79
        }                                                                                                              // 80
                                                                                                                       //
        return getCount;                                                                                               //
    }(); /**                                                                                                           //
          * All session info gets deleted when the server goes down, so when the client attempts to                    //
          * optimistically resume the '.count' publication, the server will throw a 'no-request' error.                //
          *                                                                                                            //
          * This function prevents that by manually stopping and restarting the subscription when the                  //
          * connection to the server is lost.                                                                          //
          */                                                                                                           //
                                                                                                                       //
    CountSubscription.prototype.handleDisconnect = function () {                                                       //
        function handleDisconnect() {                                                                                  //
            var status = Meteor.status();                                                                              // 90
                                                                                                                       //
            if (!status.connected) {                                                                                   // 91
                this._markedForResume = true;                                                                          // 92
                this.fauxHandle = null;                                                                                // 93
                this.subscriptionHandle.stop();                                                                        // 94
            }                                                                                                          // 95
                                                                                                                       //
            if (status.connected && this._markedForResume) {                                                           // 97
                this._markedForResume = false;                                                                         // 98
                this.subscribe(this.lastArgs);                                                                         // 99
            }                                                                                                          // 100
        }                                                                                                              // 101
                                                                                                                       //
        return handleDisconnect;                                                                                       //
    }(); /**                                                                                                           //
          * Returns whether or not a subscription request has been made.                                               //
          */                                                                                                           //
                                                                                                                       //
    CountSubscription.prototype.isSubscribed = function () {                                                           //
        function isSubscribed() {                                                                                      //
            return this.accessToken.get() !== null;                                                                    // 107
        }                                                                                                              // 108
                                                                                                                       //
        return isSubscribed;                                                                                           //
    }();                                                                                                               //
                                                                                                                       //
    return CountSubscription;                                                                                          //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createFauxSubscription.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/counts/createFauxSubscription.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exportDefault(function (countManager) {                                                                         // 1
  return {                                                                                                             // 7
    ready: function () {                                                                                               // 8
      return countManager.accessToken.get() !== null && countManager.subscriptionHandle.ready();                       // 8
    },                                                                                                                 // 8
    stop: function () {                                                                                                // 9
      return countManager.unsubscribe();                                                                               // 9
    }                                                                                                                  // 9
  };                                                                                                                   // 7
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"hypernova":{"aggregateSearchFilters.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/hypernova/aggregateSearchFilters.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");                                          //
                                                                                                                       //
var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _createClass2 = require("babel-runtime/helpers/createClass");                                                      //
                                                                                                                       //
var _createClass3 = _interopRequireDefault(_createClass2);                                                             //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return AggregateFilters;                                                                                       // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var sift = void 0;                                                                                                     // 1
module.watch(require("sift"), {                                                                                        // 1
    "default": function (v) {                                                                                          // 1
        sift = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
                                                                                                                       //
var AggregateFilters = function () {                                                                                   //
    function AggregateFilters(collectionNode, metaFilters) {                                                           // 7
        (0, _classCallCheck3.default)(this, AggregateFilters);                                                         // 7
        this.collectionNode = collectionNode;                                                                          // 8
        this.linker = collectionNode.linker;                                                                           // 9
        this.metaFilters = metaFilters;                                                                                // 10
        this.isVirtual = this.linker.isVirtual();                                                                      // 11
        this.linkStorageField = this.linker.linkStorageField;                                                          // 13
    }                                                                                                                  // 14
                                                                                                                       //
    AggregateFilters.prototype.create = function () {                                                                  //
        function create() {                                                                                            //
            switch (this.linker.strategy) {                                                                            // 21
                case 'one':                                                                                            // 22
                    return this.createOne();                                                                           // 23
                                                                                                                       //
                case 'one-meta':                                                                                       // 24
                    return this.createOneMeta();                                                                       // 25
                                                                                                                       //
                case 'many':                                                                                           // 26
                    return this.createMany();                                                                          // 27
                                                                                                                       //
                case 'many-meta':                                                                                      // 28
                    return this.createManyMeta();                                                                      // 29
                                                                                                                       //
                default:                                                                                               // 30
                    throw new Meteor.Error("Invalid linker type: " + this.linker.type);                                // 31
            }                                                                                                          // 21
        }                                                                                                              // 33
                                                                                                                       //
        return create;                                                                                                 //
    }();                                                                                                               //
                                                                                                                       //
    AggregateFilters.prototype.createOne = function () {                                                               //
        function createOne() {                                                                                         //
            if (!this.isVirtual) {                                                                                     // 36
                return {                                                                                               // 37
                    _id: {                                                                                             // 38
                        $in: _.uniq(_.pluck(this.parentObjects, this.linkStorageField))                                // 39
                    }                                                                                                  // 38
                };                                                                                                     // 37
            } else {                                                                                                   // 44
                var _ref;                                                                                              // 44
                                                                                                                       //
                return _ref = {}, _ref[this.linkStorageField] = {                                                      // 45
                    $in: _.uniq(_.pluck(this.parentObjects, '_id'))                                                    // 47
                }, _ref;                                                                                               // 46
            }                                                                                                          // 52
        }                                                                                                              // 53
                                                                                                                       //
        return createOne;                                                                                              //
    }();                                                                                                               //
                                                                                                                       //
    AggregateFilters.prototype.createOneMeta = function () {                                                           //
        function createOneMeta() {                                                                                     //
            var _this = this;                                                                                          // 55
                                                                                                                       //
            if (!this.isVirtual) {                                                                                     // 56
                var eligibleObjects = this.parentObjects;                                                              // 57
                                                                                                                       //
                if (this.metaFilters) {                                                                                // 59
                    eligibleObjects = _.filter(this.parentObjects, function (object) {                                 // 60
                        return sift(_this.metaFilters)(object[_this.linkStorageField]);                                // 61
                    });                                                                                                // 62
                }                                                                                                      // 63
                                                                                                                       //
                var storages = _.pluck(eligibleObjects, this.linkStorageField);                                        // 65
                                                                                                                       //
                var ids = [];                                                                                          // 66
                                                                                                                       //
                _.each(storages, function (storage) {                                                                  // 67
                    if (storage) {                                                                                     // 68
                        ids.push(storage._id);                                                                         // 69
                    }                                                                                                  // 70
                });                                                                                                    // 71
                                                                                                                       //
                return {                                                                                               // 73
                    _id: {                                                                                             // 74
                        $in: _.uniq(ids)                                                                               // 74
                    }                                                                                                  // 74
                };                                                                                                     // 73
            } else {                                                                                                   // 76
                var filters = {};                                                                                      // 77
                                                                                                                       //
                if (this.metaFilters) {                                                                                // 78
                    _.each(this.metaFilters, function (value, key) {                                                   // 79
                        filters[_this.linkStorageField + '.' + key] = value;                                           // 80
                    });                                                                                                // 81
                }                                                                                                      // 82
                                                                                                                       //
                filters[this.linkStorageField + '._id'] = {                                                            // 84
                    $in: _.uniq(_.pluck(this.parentObjects, '_id'))                                                    // 85
                };                                                                                                     // 84
                return filters;                                                                                        // 90
            }                                                                                                          // 91
        }                                                                                                              // 92
                                                                                                                       //
        return createOneMeta;                                                                                          //
    }();                                                                                                               //
                                                                                                                       //
    AggregateFilters.prototype.createMany = function () {                                                              //
        function createMany() {                                                                                        //
            if (!this.isVirtual) {                                                                                     // 95
                var _ref2;                                                                                             // 95
                                                                                                                       //
                var arrayOfIds = _.pluck(this.parentObjects, this.linkStorageField);                                   // 96
                                                                                                                       //
                return {                                                                                               // 97
                    _id: {                                                                                             // 98
                        $in: _.uniq((_ref2 = _).union.apply(_ref2, (0, _toConsumableArray3.default)(arrayOfIds)))      // 99
                    }                                                                                                  // 98
                };                                                                                                     // 97
            } else {                                                                                                   // 104
                var _ref3, _ref4;                                                                                      // 104
                                                                                                                       //
                var _arrayOfIds = _.pluck(this.parentObjects, '_id');                                                  // 105
                                                                                                                       //
                return _ref4 = {}, _ref4[this.linkStorageField] = {                                                    // 106
                    $in: _.uniq((_ref3 = _).union.apply(_ref3, (0, _toConsumableArray3.default)(_arrayOfIds)))         // 108
                }, _ref4;                                                                                              // 107
            }                                                                                                          // 113
        }                                                                                                              // 114
                                                                                                                       //
        return createMany;                                                                                             //
    }();                                                                                                               //
                                                                                                                       //
    AggregateFilters.prototype.createManyMeta = function () {                                                          //
        function createManyMeta() {                                                                                    //
            var _this2 = this;                                                                                         // 116
                                                                                                                       //
            if (!this.isVirtual) {                                                                                     // 117
                var ids = [];                                                                                          // 118
                                                                                                                       //
                _.each(this.parentObjects, function (object) {                                                         // 120
                    if (object[_this2.linkStorageField]) {                                                             // 121
                        if (_this2.metaFilters) {                                                                      // 122
                            var isValid = sift(_this2.metaFilters);                                                    // 123
                                                                                                                       //
                            _.each(object[_this2.linkStorageField], function (object) {                                // 124
                                if (isValid(object)) {                                                                 // 125
                                    ids.push(object._id);                                                              // 126
                                }                                                                                      // 127
                            });                                                                                        // 128
                        } else {                                                                                       // 129
                            _.each(object[_this2.linkStorageField], function (object) {                                // 130
                                ids.push(object._id);                                                                  // 131
                            });                                                                                        // 132
                        }                                                                                              // 133
                    }                                                                                                  // 134
                });                                                                                                    // 135
                                                                                                                       //
                return {                                                                                               // 137
                    _id: {                                                                                             // 138
                        $in: _.uniq(ids)                                                                               // 138
                    }                                                                                                  // 138
                };                                                                                                     // 137
            } else {                                                                                                   // 140
                var _ref5;                                                                                             // 140
                                                                                                                       //
                var filters = {};                                                                                      // 141
                                                                                                                       //
                if (this.metaFilters) {                                                                                // 142
                    _.each(this.metaFilters, function (value, key) {                                                   // 143
                        filters[key] = value;                                                                          // 144
                    });                                                                                                // 145
                }                                                                                                      // 146
                                                                                                                       //
                filters._id = {                                                                                        // 148
                    $in: _.uniq(_.pluck(this.parentObjects, '_id'))                                                    // 149
                };                                                                                                     // 148
                return _ref5 = {}, _ref5[this.linkStorageField] = {                                                    // 154
                    $elemMatch: filters                                                                                // 156
                }, _ref5;                                                                                              // 155
            }                                                                                                          // 159
        }                                                                                                              // 160
                                                                                                                       //
        return createManyMeta;                                                                                         //
    }();                                                                                                               //
                                                                                                                       //
    (0, _createClass3.default)(AggregateFilters, [{                                                                    //
        key: "parentObjects",                                                                                          //
        get: function () {                                                                                             //
            return this.collectionNode.parent.results;                                                                 // 17
        }                                                                                                              // 18
    }]);                                                                                                               //
    return AggregateFilters;                                                                                           //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"assembleAggregateResults.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/hypernova/assembleAggregateResults.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var sift = void 0;                                                                                                     // 1
module.watch(require("sift"), {                                                                                        // 1
    "default": function (v) {                                                                                          // 1
        sift = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var cleanObjectForMetaFilters = void 0;                                                                                // 1
module.watch(require("./lib/cleanObjectForMetaFilters"), {                                                             // 1
    "default": function (v) {                                                                                          // 1
        cleanObjectForMetaFilters = v;                                                                                 // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
module.exportDefault(function (childCollectionNode, aggregateResults, metaFilters) {                                   // 1
    var linker = childCollectionNode.linker;                                                                           // 8
    var linkStorageField = linker.linkStorageField;                                                                    // 9
    var linkName = childCollectionNode.linkName;                                                                       // 10
    var isMeta = linker.isMeta();                                                                                      // 11
    var allResults = [];                                                                                               // 13
                                                                                                                       //
    if (isMeta && metaFilters) {                                                                                       // 15
        var metaFiltersTest = sift(metaFilters);                                                                       // 16
                                                                                                                       //
        _.each(childCollectionNode.parent.results, function (parentResult) {                                           // 17
            cleanObjectForMetaFilters(parentResult, linkStorageField, metaFiltersTest);                                // 18
        });                                                                                                            // 19
    }                                                                                                                  // 20
                                                                                                                       //
    if (isMeta && linker.isMany()) {                                                                                   // 22
        // This case is treated differently because we get an array response from the pipeline.                        // 23
        _.each(childCollectionNode.parent.results, function (parentResult) {                                           // 25
            parentResult[linkName] = parentResult[linkName] || [];                                                     // 26
                                                                                                                       //
            var eligibleAggregateResults = _.filter(aggregateResults, function (aggregateResult) {                     // 28
                return _.contains(aggregateResult._id, parentResult._id);                                              // 29
            });                                                                                                        // 30
                                                                                                                       //
            if (eligibleAggregateResults.length) {                                                                     // 32
                var datas = _.pluck(eligibleAggregateResults, 'data'); /// [ [x1, x2], [x2, x3] ]                      // 33
                                                                                                                       //
                                                                                                                       //
                _.each(datas, function (data) {                                                                        // 35
                    _.each(data, function (item) {                                                                     // 36
                        parentResult[linkName].push(item);                                                             // 37
                    });                                                                                                // 38
                });                                                                                                    // 39
            }                                                                                                          // 40
        });                                                                                                            // 41
                                                                                                                       //
        _.each(aggregateResults, function (aggregateResult) {                                                          // 43
            _.each(aggregateResult.data, function (item) {                                                             // 44
                return allResults.push(item);                                                                          // 44
            });                                                                                                        // 44
        });                                                                                                            // 45
    } else {                                                                                                           // 46
        _.each(aggregateResults, function (aggregateResult) {                                                          // 47
            var parentResult = _.find(childCollectionNode.parent.results, function (result) {                          // 48
                return result._id == aggregateResult._id;                                                              // 49
            });                                                                                                        // 50
                                                                                                                       //
            if (parentResult) {                                                                                        // 52
                parentResult[childCollectionNode.linkName] = aggregateResult.data;                                     // 53
            }                                                                                                          // 54
                                                                                                                       //
            _.each(aggregateResult.data, function (item) {                                                             // 56
                allResults.push(item);                                                                                 // 57
            });                                                                                                        // 58
        });                                                                                                            // 59
    }                                                                                                                  // 60
                                                                                                                       //
    childCollectionNode.results = allResults;                                                                          // 62
});                                                                                                                    // 63
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"assembler.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/hypernova/assembler.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var createSearchFilters = void 0;                                                                                      // 1
module.watch(require("../../links/lib/createSearchFilters"), {                                                         // 1
    "default": function (v) {                                                                                          // 1
        createSearchFilters = v;                                                                                       // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var cleanObjectForMetaFilters = void 0;                                                                                // 1
module.watch(require("./lib/cleanObjectForMetaFilters"), {                                                             // 1
    "default": function (v) {                                                                                          // 1
        cleanObjectForMetaFilters = v;                                                                                 // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var sift = void 0;                                                                                                     // 1
module.watch(require("sift"), {                                                                                        // 1
    "default": function (v) {                                                                                          // 1
        sift = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
module.exportDefault(function (childCollectionNode, _ref) {                                                            // 1
    var limit = _ref.limit,                                                                                            // 5
        skip = _ref.skip,                                                                                              // 5
        metaFilters = _ref.metaFilters;                                                                                // 5
    var parent = childCollectionNode.parent;                                                                           // 6
    var linker = childCollectionNode.linker;                                                                           // 7
    var strategy = linker.strategy;                                                                                    // 9
    var isSingle = linker.isSingle();                                                                                  // 10
    var isMeta = linker.isMeta();                                                                                      // 11
    var fieldStorage = linker.linkStorageField; // cleaning the parent results from a child                            // 12
    // this may be the wrong approach but it works for now                                                             // 15
                                                                                                                       //
    if (isMeta && metaFilters) {                                                                                       // 16
        var metaFiltersTest = sift(metaFilters);                                                                       // 17
                                                                                                                       //
        _.each(parent.results, function (parentResult) {                                                               // 18
            cleanObjectForMetaFilters(parentResult, fieldStorage, metaFiltersTest);                                    // 19
        });                                                                                                            // 20
    }                                                                                                                  // 21
                                                                                                                       //
    _.each(parent.results, function (result) {                                                                         // 23
        var data = assembleData(childCollectionNode, result, {                                                         // 24
            fieldStorage: fieldStorage,                                                                                // 25
            strategy: strategy,                                                                                        // 25
            isSingle: isSingle                                                                                         // 25
        });                                                                                                            // 24
        result[childCollectionNode.linkName] = filterAssembledData(data, {                                             // 28
            limit: limit,                                                                                              // 28
            skip: skip                                                                                                 // 28
        });                                                                                                            // 28
    });                                                                                                                // 29
});                                                                                                                    // 30
                                                                                                                       //
function filterAssembledData(data, _ref2) {                                                                            // 32
    var limit = _ref2.limit,                                                                                           // 32
        skip = _ref2.skip;                                                                                             // 32
                                                                                                                       //
    if (limit) {                                                                                                       // 33
        return data.slice(skip, limit);                                                                                // 34
    }                                                                                                                  // 35
                                                                                                                       //
    return data;                                                                                                       // 37
}                                                                                                                      // 38
                                                                                                                       //
function assembleData(childCollectionNode, result, _ref3) {                                                            // 40
    var fieldStorage = _ref3.fieldStorage,                                                                             // 40
        strategy = _ref3.strategy;                                                                                     // 40
    var filters = createSearchFilters(result, fieldStorage, strategy, false);                                          // 41
    return sift(filters, childCollectionNode.results);                                                                 // 43
}                                                                                                                      // 44
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"buildAggregatePipeline.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/hypernova/buildAggregatePipeline.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module.watch(require("meteor/underscore"), {                                                                           // 1
    _: function (v) {                                                                                                  // 1
        _ = v;                                                                                                         // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
module.exportDefault(function (childCollectionNode, filters, options, userId) {                                        // 1
    var containsDottedFields = false;                                                                                  // 4
    var linker = childCollectionNode.linker;                                                                           // 5
    var linkStorageField = linker.linkStorageField;                                                                    // 6
    var collection = childCollectionNode.collection;                                                                   // 7
    var pipeline = [];                                                                                                 // 9
                                                                                                                       //
    if (collection.firewall) {                                                                                         // 11
        collection.firewall(filters, options, userId);                                                                 // 12
    }                                                                                                                  // 13
                                                                                                                       //
    pipeline.push({                                                                                                    // 15
        $match: filters                                                                                                // 15
    });                                                                                                                // 15
                                                                                                                       //
    if (options.sort && _.keys(options.sort).length > 0) {                                                             // 17
        pipeline.push({                                                                                                // 18
            $sort: options.sort                                                                                        // 18
        });                                                                                                            // 18
    }                                                                                                                  // 19
                                                                                                                       //
    var _id = linkStorageField;                                                                                        // 21
                                                                                                                       //
    if (linker.isMeta()) {                                                                                             // 22
        _id += '._id';                                                                                                 // 23
    }                                                                                                                  // 24
                                                                                                                       //
    var dataPush = {                                                                                                   // 26
        _id: '$_id'                                                                                                    // 27
    };                                                                                                                 // 26
                                                                                                                       //
    _.each(options.fields, function (value, field) {                                                                   // 30
        if (field.indexOf('.') >= 0) {                                                                                 // 31
            containsDottedFields = true;                                                                               // 32
        }                                                                                                              // 33
                                                                                                                       //
        var safeField = field.replace('.', '___');                                                                     // 34
        dataPush[safeField] = '$' + field;                                                                             // 35
    });                                                                                                                // 36
                                                                                                                       //
    if (linker.isMeta()) {                                                                                             // 38
        dataPush[linkStorageField] = '$' + linkStorageField;                                                           // 39
    }                                                                                                                  // 40
                                                                                                                       //
    pipeline.push({                                                                                                    // 42
        $group: {                                                                                                      // 43
            _id: "$" + _id,                                                                                            // 44
            data: {                                                                                                    // 45
                $push: dataPush                                                                                        // 46
            }                                                                                                          // 45
        }                                                                                                              // 43
    });                                                                                                                // 42
                                                                                                                       //
    if (options.limit || options.skip) {                                                                               // 51
        var $slice = ["$data"];                                                                                        // 52
        if (options.skip) $slice.push(options.skip);                                                                   // 53
        if (options.limit) $slice.push(options.limit);                                                                 // 54
        pipeline.push({                                                                                                // 56
            $project: {                                                                                                // 57
                _id: 1,                                                                                                // 58
                data: {                                                                                                // 59
                    $slice: $slice                                                                                     // 59
                }                                                                                                      // 59
            }                                                                                                          // 57
        });                                                                                                            // 56
    }                                                                                                                  // 62
                                                                                                                       //
    return {                                                                                                           // 64
        pipeline: pipeline,                                                                                            // 64
        containsDottedFields: containsDottedFields                                                                     // 64
    };                                                                                                                 // 64
});                                                                                                                    // 65
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"constants.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/hypernova/constants.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
  SAFE_DOTTED_FIELD_REPLACEMENT: function () {                                                                         // 1
    return SAFE_DOTTED_FIELD_REPLACEMENT;                                                                              // 1
  }                                                                                                                    // 1
});                                                                                                                    // 1
var SAFE_DOTTED_FIELD_REPLACEMENT = '___';                                                                             // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hypernova.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/hypernova/hypernova.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return hypernovaInit;                                                                                          // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var applyProps = void 0;                                                                                               // 1
module.watch(require("../lib/applyProps.js"), {                                                                        // 1
    "default": function (v) {                                                                                          // 1
        applyProps = v;                                                                                                // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var prepareForDelivery = void 0;                                                                                       // 1
module.watch(require("../lib/prepareForDelivery.js"), {                                                                // 1
    "default": function (v) {                                                                                          // 1
        prepareForDelivery = v;                                                                                        // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var storeHypernovaResults = void 0;                                                                                    // 1
module.watch(require("./storeHypernovaResults.js"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        storeHypernovaResults = v;                                                                                     // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
                                                                                                                       //
function hypernova(collectionNode, userId) {                                                                           // 5
    _.each(collectionNode.collectionNodes, function (childCollectionNode) {                                            // 6
        var _applyProps = applyProps(childCollectionNode),                                                             // 6
            filters = _applyProps.filters,                                                                             // 6
            options = _applyProps.options;                                                                             // 6
                                                                                                                       //
        storeHypernovaResults(childCollectionNode, userId);                                                            // 9
        hypernova(childCollectionNode, userId);                                                                        // 10
    });                                                                                                                // 11
}                                                                                                                      // 12
                                                                                                                       //
function hypernovaInit(collectionNode, userId) {                                                                       // 14
    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                               // 14
    var bypassFirewalls = config.bypassFirewalls || false;                                                             // 15
    var params = config.params || {};                                                                                  // 16
                                                                                                                       //
    var _applyProps2 = applyProps(collectionNode),                                                                     // 14
        filters = _applyProps2.filters,                                                                                // 14
        options = _applyProps2.options;                                                                                // 14
                                                                                                                       //
    var collection = collectionNode.collection;                                                                        // 20
    collectionNode.results = collection.find(filters, options, userId).fetch();                                        // 22
    var userIdToPass = config.bypassFirewalls ? undefined : userId;                                                    // 24
    hypernova(collectionNode, userIdToPass);                                                                           // 25
    prepareForDelivery(collectionNode, params);                                                                        // 27
    return collectionNode.results;                                                                                     // 29
}                                                                                                                      // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"storeHypernovaResults.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/hypernova/storeHypernovaResults.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _extends2 = require("babel-runtime/helpers/extends");                                                              //
                                                                                                                       //
var _extends3 = _interopRequireDefault(_extends2);                                                                     //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return storeHypernovaResults;                                                                                  // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var applyProps = void 0;                                                                                               // 1
module.watch(require("../lib/applyProps.js"), {                                                                        // 1
    "default": function (v) {                                                                                          // 1
        applyProps = v;                                                                                                // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var AggregateFilters = void 0;                                                                                         // 1
module.watch(require("./aggregateSearchFilters.js"), {                                                                 // 1
    "default": function (v) {                                                                                          // 1
        AggregateFilters = v;                                                                                          // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var assemble = void 0;                                                                                                 // 1
module.watch(require("./assembler.js"), {                                                                              // 1
    "default": function (v) {                                                                                          // 1
        assemble = v;                                                                                                  // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var assembleAggregateResults = void 0;                                                                                 // 1
module.watch(require("./assembleAggregateResults.js"), {                                                               // 1
    "default": function (v) {                                                                                          // 1
        assembleAggregateResults = v;                                                                                  // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
var buildAggregatePipeline = void 0;                                                                                   // 1
module.watch(require("./buildAggregatePipeline.js"), {                                                                 // 1
    "default": function (v) {                                                                                          // 1
        buildAggregatePipeline = v;                                                                                    // 1
    }                                                                                                                  // 1
}, 4);                                                                                                                 // 1
var snapBackDottedFields = void 0;                                                                                     // 1
module.watch(require("./lib/snapBackDottedFields"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        snapBackDottedFields = v;                                                                                      // 1
    }                                                                                                                  // 1
}, 5);                                                                                                                 // 1
                                                                                                                       //
function storeHypernovaResults(childCollectionNode, userId) {                                                          // 8
    if (childCollectionNode.parent.results.length === 0) {                                                             // 9
        return childCollectionNode.results = [];                                                                       // 10
    }                                                                                                                  // 11
                                                                                                                       //
    var _applyProps = applyProps(childCollectionNode),                                                                 // 8
        filters = _applyProps.filters,                                                                                 // 8
        options = _applyProps.options;                                                                                 // 8
                                                                                                                       //
    var metaFilters = filters.$meta;                                                                                   // 15
    var aggregateFilters = new AggregateFilters(childCollectionNode, metaFilters);                                     // 16
    delete filters.$meta;                                                                                              // 17
    var linker = childCollectionNode.linker;                                                                           // 19
    var isVirtual = linker.isVirtual();                                                                                // 20
    var collection = childCollectionNode.collection;                                                                   // 21
                                                                                                                       //
    _.extend(filters, aggregateFilters.create()); // if it's not virtual then we retrieve them and assemble them here.
                                                                                                                       //
                                                                                                                       //
    if (!isVirtual) {                                                                                                  // 26
        var filteredOptions = _.omit(options, 'limit');                                                                // 27
                                                                                                                       //
        childCollectionNode.results = collection.find(filters, filteredOptions, userId).fetch();                       // 29
        assemble(childCollectionNode, (0, _extends3.default)({}, options, {                                            // 31
            metaFilters: metaFilters                                                                                   // 33
        }));                                                                                                           // 31
    } else {                                                                                                           // 35
        // virtuals arrive here                                                                                        // 36
        var _buildAggregatePipeli = buildAggregatePipeline(childCollectionNode, filters, options, userId),             // 35
            pipeline = _buildAggregatePipeli.pipeline,                                                                 // 35
            containsDottedFields = _buildAggregatePipeli.containsDottedFields;                                         // 35
                                                                                                                       //
        var aggregateResults = collection.aggregate(pipeline, {                                                        // 39
            explains: true                                                                                             // 39
        }); /**                                                                                                        // 39
             * If in aggregation it contains '.', we replace it with a custom string '___'                             //
             * And then after aggregation is complete we need to snap-it back to how it was.                           //
             */                                                                                                        //
                                                                                                                       //
        if (containsDottedFields) {                                                                                    // 45
            snapBackDottedFields(aggregateResults);                                                                    // 46
        }                                                                                                              // 47
                                                                                                                       //
        assembleAggregateResults(childCollectionNode, aggregateResults, metaFilters);                                  // 49
    }                                                                                                                  // 50
}                                                                                                                      // 51
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"cleanObjectForMetaFilters.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/hypernova/lib/cleanObjectForMetaFilters.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exportDefault(function (object, field, metaFiltersTest) {                                                       // 1
    if (object[field]) {                                                                                               // 2
        if (_.isArray(object[field])) {                                                                                // 3
            object[field] = object[field].filter(metaFiltersTest);                                                     // 4
        } else {                                                                                                       // 5
            if (!metaFiltersTest(object[field])) {                                                                     // 6
                object[field] = null;                                                                                  // 7
            }                                                                                                          // 8
        }                                                                                                              // 9
    }                                                                                                                  // 10
});                                                                                                                    // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"snapBackDottedFields.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/hypernova/lib/snapBackDottedFields.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var SAFE_DOTTED_FIELD_REPLACEMENT = void 0;                                                                            // 1
module.watch(require("../constants"), {                                                                                // 1
    SAFE_DOTTED_FIELD_REPLACEMENT: function (v) {                                                                      // 1
        SAFE_DOTTED_FIELD_REPLACEMENT = v;                                                                             // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var dot = void 0;                                                                                                      // 1
module.watch(require("dot-object"), {                                                                                  // 1
    "default": function (v) {                                                                                          // 1
        dot = v;                                                                                                       // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
module.exportDefault(function (aggregationResult) {                                                                    // 1
    aggregationResult.forEach(function (result) {                                                                      // 5
        result.data = result.data.map(function (document) {                                                            // 6
            _.each(document, function (value, key) {                                                                   // 7
                if (key.indexOf(SAFE_DOTTED_FIELD_REPLACEMENT) >= 0) {                                                 // 8
                    document[key.replace(SAFE_DOTTED_FIELD_REPLACEMENT, '.')] = value;                                 // 9
                    delete document[key];                                                                              // 10
                }                                                                                                      // 11
            });                                                                                                        // 12
                                                                                                                       //
            return dot.object(document);                                                                               // 14
        });                                                                                                            // 15
    });                                                                                                                // 16
});                                                                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"lib":{"applyProps.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/lib/applyProps.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return applyProps;                                                                                             // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var restrictOptions = ['disableOplog', 'pollingIntervalMs', 'pollingThrottleMs'];                                      // 1
                                                                                                                       //
function applyProps(node) {                                                                                            // 7
    var _ref;                                                                                                          // 7
                                                                                                                       //
    var filters = _.extend({}, node.props.$filters);                                                                   // 8
                                                                                                                       //
    var options = _.extend({}, node.props.$options);                                                                   // 9
                                                                                                                       //
    options = (_ref = _).omit.apply(_ref, [options].concat(restrictOptions));                                          // 11
    options.fields = options.fields || {};                                                                             // 12
    node.applyFields(filters, options);                                                                                // 14
    return {                                                                                                           // 16
        filters: filters,                                                                                              // 16
        options: options                                                                                               // 16
    };                                                                                                                 // 16
}                                                                                                                      // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"callWithPromise.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/lib/callWithPromise.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exportDefault(function (method, myParameters) {                                                                 // 1
    return new Promise(function (resolve, reject) {                                                                    // 2
        Meteor.call(method, myParameters, function (err, res) {                                                        // 3
            if (err) reject(err.reason || 'Something went wrong.');                                                    // 4
            resolve(res);                                                                                              // 6
        });                                                                                                            // 7
    });                                                                                                                // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createGraph.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/lib/createGraph.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
    createNodes: function () {                                                                                         // 1
        return createNodes;                                                                                            // 1
    },                                                                                                                 // 1
    addFieldNode: function () {                                                                                        // 1
        return addFieldNode;                                                                                           // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var CollectionNode = void 0;                                                                                           // 1
module.watch(require("../nodes/collectionNode.js"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        CollectionNode = v;                                                                                            // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var FieldNode = void 0;                                                                                                // 1
module.watch(require("../nodes/fieldNode.js"), {                                                                       // 1
    "default": function (v) {                                                                                          // 1
        FieldNode = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var ReducerNode = void 0;                                                                                              // 1
module.watch(require("../nodes/reducerNode.js"), {                                                                     // 1
    "default": function (v) {                                                                                          // 1
        ReducerNode = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var dotize = void 0;                                                                                                   // 1
module.watch(require("./dotize.js"), {                                                                                 // 1
    "default": function (v) {                                                                                          // 1
        dotize = v;                                                                                                    // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
var createReducers = void 0;                                                                                           // 1
module.watch(require("../reducers/lib/createReducers"), {                                                              // 1
    "default": function (v) {                                                                                          // 1
        createReducers = v;                                                                                            // 1
    }                                                                                                                  // 1
}, 4);                                                                                                                 // 1
var specialFields = ['$filters', '$options', '$postFilters', '$postOptions', '$postFilter']; /**                       // 7
                                                                                              * Creates node objects from the body. The root is always a collection node.
                                                                                              *                        //
                                                                                              * @param root            //
                                                                                              */                       //
                                                                                                                       //
function createNodes(root) {                                                                                           // 20
    // this is a fix for phantomjs tests (don't really understand it.)                                                 // 21
    if (!_.isObject(root.body)) {                                                                                      // 22
        return;                                                                                                        // 23
    }                                                                                                                  // 24
                                                                                                                       //
    _.each(root.body, function (body, fieldName) {                                                                     // 26
        if (!body) {                                                                                                   // 27
            return;                                                                                                    // 28
        } // if it's a prop                                                                                            // 29
                                                                                                                       //
                                                                                                                       //
        if (_.contains(specialFields, fieldName)) {                                                                    // 32
            root.addProp(fieldName, body);                                                                             // 33
            return;                                                                                                    // 35
        } // workaround, see https://github.com/cult-of-coders/grapher/issues/134                                      // 36
        // TODO: find another way to do this                                                                           // 39
                                                                                                                       //
                                                                                                                       //
        if (root.collection.default) {                                                                                 // 40
            root.collection = root.collection.default;                                                                 // 41
        } // checking if it is a link.                                                                                 // 42
                                                                                                                       //
                                                                                                                       //
        var linker = root.collection.getLinker(fieldName);                                                             // 45
                                                                                                                       //
        if (linker) {                                                                                                  // 47
            // check if it is a cached link                                                                            // 48
            // if yes, then we need to explicitly define this at collection level                                      // 49
            // so when we transform the data for delivery, we move it to the link name                                 // 50
            if (linker.isDenormalized()) {                                                                             // 51
                if (linker.isSubBodyDenormalized(body)) {                                                              // 52
                    handleDenormalized(root, linker, body, fieldName);                                                 // 53
                    return;                                                                                            // 54
                }                                                                                                      // 55
            }                                                                                                          // 56
                                                                                                                       //
            var subroot = new CollectionNode(linker.getLinkedCollection(), body, fieldName);                           // 58
            root.add(subroot, linker);                                                                                 // 59
            createNodes(subroot);                                                                                      // 61
            return;                                                                                                    // 62
        } // checking if it's a reducer                                                                                // 63
                                                                                                                       //
                                                                                                                       //
        var reducer = root.collection.getReducer(fieldName);                                                           // 66
                                                                                                                       //
        if (reducer) {                                                                                                 // 68
            var reducerNode = new ReducerNode(fieldName, reducer);                                                     // 69
            root.add(reducerNode);                                                                                     // 70
        } // it's most likely a field then                                                                             // 71
                                                                                                                       //
                                                                                                                       //
        addFieldNode(body, fieldName, root);                                                                           // 74
    });                                                                                                                // 75
                                                                                                                       //
    createReducers(root);                                                                                              // 77
                                                                                                                       //
    if (root.fieldNodes.length === 0) {                                                                                // 79
        root.add(new FieldNode('_id', 1));                                                                             // 80
    }                                                                                                                  // 81
}                                                                                                                      // 82
                                                                                                                       //
function addFieldNode(body, fieldName, root) {                                                                         // 89
    // it's not a link and not a special variable => we assume it's a field                                            // 90
    if (_.isObject(body)) {                                                                                            // 91
        var _dotize$convert;                                                                                           // 91
                                                                                                                       //
        var dotted = dotize.convert((_dotize$convert = {}, _dotize$convert[fieldName] = body, _dotize$convert));       // 92
                                                                                                                       //
        _.each(dotted, function (value, key) {                                                                         // 93
            root.add(new FieldNode(key, value));                                                                       // 94
        });                                                                                                            // 95
    } else {                                                                                                           // 96
        var fieldNode = new FieldNode(fieldName, body);                                                                // 97
        root.add(fieldNode);                                                                                           // 98
    }                                                                                                                  // 99
}                                                                                                                      // 100
                                                                                                                       //
module.exportDefault(function (collection, body) {                                                                     // 1
    var root = new CollectionNode(collection, body);                                                                   // 108
    createNodes(root);                                                                                                 // 109
    return root;                                                                                                       // 111
});                                                                                                                    // 112
; /**                                                                                                                  // 112
   * Ads denormalization config properly, including _id                                                                //
   *                                                                                                                   //
   * @param root                                                                                                       //
   * @param linker                                                                                                     //
   * @param body                                                                                                       //
   * @param fieldName                                                                                                  //
   */                                                                                                                  //
                                                                                                                       //
function handleDenormalized(root, linker, body, fieldName) {                                                           // 122
    Object.assign(body, {                                                                                              // 123
        _id: 1                                                                                                         // 123
    });                                                                                                                // 123
    var cacheField = linker.linkConfig.denormalize.field;                                                              // 125
    root.snapCache(cacheField, fieldName); // if it's one and direct also include the link storage                     // 126
                                                                                                                       //
    if (!linker.isMany() && !linker.isVirtual()) {                                                                     // 129
        addFieldNode(1, linker.linkStorageField, root);                                                                // 130
    }                                                                                                                  // 131
                                                                                                                       //
    addFieldNode(body, cacheField, root);                                                                              // 133
}                                                                                                                      // 134
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"dotize.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/lib/dotize.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.exportDefault(dotize = {});                                                                                     // 1
                                                                                                                       //
dotize.convert = function (obj, prefix) {                                                                              // 4
    if ((!obj || (typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) != "object") && !Array.isArray(obj)) {
        if (prefix) {                                                                                                  // 6
            var newObj = {};                                                                                           // 7
            newObj[prefix] = obj;                                                                                      // 8
            return newObj;                                                                                             // 9
        } else {                                                                                                       // 10
            return obj;                                                                                                // 11
        }                                                                                                              // 12
    }                                                                                                                  // 13
                                                                                                                       //
    var newObj = {};                                                                                                   // 15
                                                                                                                       //
    function recurse(o, p, isArrayItem) {                                                                              // 17
        for (var f in meteorBabelHelpers.sanitizeForInObject(o)) {                                                     // 18
            if (o[f] && (0, _typeof3.default)(o[f]) === "object") {                                                    // 19
                if (Array.isArray(o[f])) {                                                                             // 20
                    if (isEmptyArray(o[f])) {                                                                          // 21
                        newObj[getFieldName(f, p, true)] = o[f]; // empty array                                        // 22
                    } else {                                                                                           // 23
                        newObj = recurse(o[f], getFieldName(f, p, false, true), true); // array                        // 24
                    }                                                                                                  // 25
                } else {                                                                                               // 26
                    if (isArrayItem) {                                                                                 // 27
                        if (isEmptyObj(o[f])) {                                                                        // 28
                            newObj[getFieldName(f, p, true)] = o[f]; // empty object                                   // 29
                        } else {                                                                                       // 30
                            newObj = recurse(o[f], getFieldName(f, p, true)); // array item object                     // 31
                        }                                                                                              // 32
                    } else {                                                                                           // 33
                        if (isEmptyObj(o[f])) {                                                                        // 34
                            newObj[getFieldName(f, p)] = o[f]; // empty object                                         // 35
                        } else {                                                                                       // 36
                            newObj = recurse(o[f], getFieldName(f, p)); // object                                      // 37
                        }                                                                                              // 38
                    }                                                                                                  // 39
                }                                                                                                      // 40
            } else {                                                                                                   // 41
                if (isArrayItem || isNumber(f)) {                                                                      // 42
                    newObj[getFieldName(f, p, true)] = o[f]; // array item primitive                                   // 43
                } else {                                                                                               // 44
                    newObj[getFieldName(f, p)] = o[f]; // primitive                                                    // 45
                }                                                                                                      // 46
            }                                                                                                          // 47
        }                                                                                                              // 48
                                                                                                                       //
        if (isEmptyObj(newObj)) return obj;                                                                            // 50
        return newObj;                                                                                                 // 53
    }                                                                                                                  // 54
                                                                                                                       //
    function isNumber(f) {                                                                                             // 56
        return !isNaN(parseInt(f));                                                                                    // 57
    }                                                                                                                  // 58
                                                                                                                       //
    function isEmptyObj(obj) {                                                                                         // 60
        for (var prop in meteorBabelHelpers.sanitizeForInObject(obj)) {                                                // 61
            if (Object.hasOwnProperty.call(obj, prop)) return false;                                                   // 62
        }                                                                                                              // 64
                                                                                                                       //
        return true;                                                                                                   // 66
    }                                                                                                                  // 67
                                                                                                                       //
    function isEmptyArray(o) {                                                                                         // 69
        if (Array.isArray(o) && o.length == 0) return true;                                                            // 70
        return false;                                                                                                  // 72
    }                                                                                                                  // 73
                                                                                                                       //
    function getFieldName(field, prefix, isArrayItem, isArray) {                                                       // 75
        if (isArray) return (prefix ? prefix : "") + (isNumber(field) ? "[" + field + "]" : "." + field);else if (isArrayItem) return (prefix ? prefix : "") + "[" + field + "]";else return (prefix ? prefix + "." : "") + field;
    }                                                                                                                  // 82
                                                                                                                       //
    return recurse(obj, prefix, Array.isArray(obj));                                                                   // 84
};                                                                                                                     // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"intersectDeep.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/lib/intersectDeep.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dot = void 0;                                                                                                      // 1
module.watch(require("dot-object"), {                                                                                  // 1
    "default": function (v) {                                                                                          // 1
        dot = v;                                                                                                       // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module.watch(require("meteor/underscore"), {                                                                           // 1
    _: function (v) {                                                                                                  // 1
        _ = v;                                                                                                         // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
module.exportDefault(function (allowedBody, clientBody) {                                                              // 1
    var allowedBodyDot = _.keys(dot.dot(allowedBody));                                                                 // 12
                                                                                                                       //
    var clientBodyDot = _.keys(dot.dot(clientBody));                                                                   // 13
                                                                                                                       //
    var intersection = _.intersection(allowedBodyDot, clientBodyDot);                                                  // 15
                                                                                                                       //
    var build = {};                                                                                                    // 17
    intersection.forEach(function (intersectedField) {                                                                 // 18
        build[intersectedField] = 1;                                                                                   // 19
    });                                                                                                                // 20
    return dot.object(build);                                                                                          // 22
});                                                                                                                    // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"prepareForDelivery.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/lib/prepareForDelivery.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
    applyPostFilters: function () {                                                                                    // 1
        return applyPostFilters;                                                                                       // 1
    },                                                                                                                 // 1
    applyPostOptions: function () {                                                                                    // 1
        return applyPostOptions;                                                                                       // 1
    },                                                                                                                 // 1
    removeLinkStorages: function () {                                                                                  // 1
        return removeLinkStorages;                                                                                     // 1
    },                                                                                                                 // 1
    storeOneResults: function () {                                                                                     // 1
        return storeOneResults;                                                                                        // 1
    },                                                                                                                 // 1
    assembleMetadata: function () {                                                                                    // 1
        return assembleMetadata;                                                                                       // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var applyReducers = void 0;                                                                                            // 1
module.watch(require("../reducers/lib/applyReducers"), {                                                               // 1
    "default": function (v) {                                                                                          // 1
        applyReducers = v;                                                                                             // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var cleanReducerLeftovers = void 0;                                                                                    // 1
module.watch(require("../reducers/lib/cleanReducerLeftovers"), {                                                       // 1
    "default": function (v) {                                                                                          // 1
        cleanReducerLeftovers = v;                                                                                     // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var sift = void 0;                                                                                                     // 1
module.watch(require("sift"), {                                                                                        // 1
    "default": function (v) {                                                                                          // 1
        sift = v;                                                                                                      // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var Minimongo = void 0;                                                                                                // 1
module.watch(require("meteor/minimongo"), {                                                                            // 1
    Minimongo: function (v) {                                                                                          // 1
        Minimongo = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
module.exportDefault(function (node, params) {                                                                         // 1
    snapBackCaches(node);                                                                                              // 11
    applyReducers(node, params);                                                                                       // 12
    cleanReducerLeftovers(node);                                                                                       // 13
                                                                                                                       //
    _.each(node.collectionNodes, function (collectionNode) {                                                           // 15
        cloneMetaChildren(collectionNode, node.results);                                                               // 16
    });                                                                                                                // 17
                                                                                                                       //
    _.each(node.collectionNodes, function (collectionNode) {                                                           // 19
        assembleMetadata(collectionNode, node.results);                                                                // 20
    });                                                                                                                // 21
                                                                                                                       //
    removeLinkStorages(node, node.results);                                                                            // 23
    storeOneResults(node, node.results);                                                                               // 24
    applyPostFilters(node);                                                                                            // 25
    applyPostOptions(node);                                                                                            // 26
    applyPostFilter(node, params);                                                                                     // 27
});                                                                                                                    // 28
                                                                                                                       //
function applyPostFilters(node) {                                                                                      // 30
    var postFilters = node.props.$postFilters;                                                                         // 31
                                                                                                                       //
    if (postFilters) {                                                                                                 // 32
        node.results = sift(postFilters, node.results);                                                                // 33
    }                                                                                                                  // 34
}                                                                                                                      // 35
                                                                                                                       //
function applyPostOptions(node) {                                                                                      // 37
    var options = node.props.$postOptions;                                                                             // 38
                                                                                                                       //
    if (options) {                                                                                                     // 39
        if (options.sort) {                                                                                            // 40
            var sorter = new Minimongo.Sorter(options.sort);                                                           // 41
            node.results.sort(sorter.getComparator());                                                                 // 42
        }                                                                                                              // 43
                                                                                                                       //
        if (options.limit || options.skip) {                                                                           // 44
            var start = options.skip || 0;                                                                             // 45
            var end = options.limit ? options.limit + start : node.results.length;                                     // 46
            node.results = node.results.slice(start, end);                                                             // 47
        }                                                                                                              // 48
    }                                                                                                                  // 49
}                                                                                                                      // 50
                                                                                                                       //
/**                                                                                                                    // 53
 * Optionally applies a post filtering option                                                                          //
 */function applyPostFilter(node, params) {                                                                            //
    if (node.props.$postFilter) {                                                                                      // 57
        var filter = node.props.$postFilter;                                                                           // 58
                                                                                                                       //
        if (_.isArray(filter)) {                                                                                       // 60
            filter.forEach(function (f) {                                                                              // 61
                node.results = f(node.results, params);                                                                // 62
            });                                                                                                        // 63
        } else {                                                                                                       // 64
            node.results = filter(node.results, params);                                                               // 65
        }                                                                                                              // 66
    }                                                                                                                  // 67
}                                                                                                                      // 68
                                                                                                                       //
function removeLinkStorages(node, sameLevelResults) {                                                                  // 70
    if (!sameLevelResults) {                                                                                           // 71
        return;                                                                                                        // 72
    }                                                                                                                  // 73
                                                                                                                       //
    _.each(node.collectionNodes, function (collectionNode) {                                                           // 75
        var removeStorageField = collectionNode.shouldCleanStorage;                                                    // 76
                                                                                                                       //
        _.each(sameLevelResults, function (result) {                                                                   // 77
            if (removeStorageField) {                                                                                  // 78
                delete result[collectionNode.linkStorageField];                                                        // 79
            }                                                                                                          // 80
                                                                                                                       //
            removeLinkStorages(collectionNode, result[collectionNode.linkName]);                                       // 82
        });                                                                                                            // 83
    });                                                                                                                // 84
}                                                                                                                      // 85
                                                                                                                       //
function storeOneResults(node, sameLevelResults) {                                                                     // 87
    if (!sameLevelResults) {                                                                                           // 88
        return;                                                                                                        // 89
    }                                                                                                                  // 90
                                                                                                                       //
    node.collectionNodes.forEach(function (collectionNode) {                                                           // 92
        _.each(sameLevelResults, function (result) {                                                                   // 93
            storeOneResults(collectionNode, result[collectionNode.linkName]);                                          // 94
        });                                                                                                            // 95
                                                                                                                       //
        if (collectionNode.isOneResult) {                                                                              // 97
            sameLevelResults.forEach(function (result) {                                                               // 98
                if (result[collectionNode.linkName] && _.isArray(result[collectionNode.linkName])) {                   // 99
                    result[collectionNode.linkName] = result[collectionNode.linkName] ? _.first(result[collectionNode.linkName]) : undefined;
                }                                                                                                      // 103
            });                                                                                                        // 104
        }                                                                                                              // 105
    });                                                                                                                // 106
}                                                                                                                      // 107
                                                                                                                       //
function cloneMetaChildren(node, parentResults) {                                                                      // 109
    if (!parentResults) {                                                                                              // 110
        return;                                                                                                        // 111
    }                                                                                                                  // 112
                                                                                                                       //
    var linkName = node.linkName;                                                                                      // 114
    var isMeta = node.isMeta;                                                                                          // 115
    parentResults.forEach(function (parentResult) {                                                                    // 117
        if (isMeta && parentResult[linkName]) {                                                                        // 118
            parentResult[linkName] = parentResult[linkName].map(function (object) {                                    // 119
                return Object.assign({}, object);                                                                      // 120
            });                                                                                                        // 121
        }                                                                                                              // 122
                                                                                                                       //
        node.collectionNodes.forEach(function (collectionNode) {                                                       // 124
            cloneMetaChildren(collectionNode, parentResult[linkName]);                                                 // 125
        });                                                                                                            // 126
    });                                                                                                                // 127
}                                                                                                                      // 128
                                                                                                                       //
function assembleMetadata(node, parentResults) {                                                                       // 130
    // assembling metadata is depth first                                                                              // 131
    node.collectionNodes.forEach(function (collectionNode) {                                                           // 132
        _.each(parentResults, function (result) {                                                                      // 133
            assembleMetadata(collectionNode, result[node.linkName]);                                                   // 134
        });                                                                                                            // 135
    });                                                                                                                // 136
                                                                                                                       //
    if (node.isMeta) {                                                                                                 // 138
        if (node.isVirtual) {                                                                                          // 139
            _.each(parentResults, function (parentResult) {                                                            // 140
                var childResult = parentResult[node.linkName];                                                         // 141
                                                                                                                       //
                _.each(childResult, function (object) {                                                                // 143
                    var storage = object[node.linkStorageField];                                                       // 144
                    storeMetadata(object, parentResult, storage, true);                                                // 146
                });                                                                                                    // 147
            });                                                                                                        // 148
        } else {                                                                                                       // 149
            _.each(parentResults, function (parentResult) {                                                            // 150
                var childResult = parentResult[node.linkName];                                                         // 151
                var storage = parentResult[node.linkStorageField];                                                     // 152
                                                                                                                       //
                _.each(childResult, function (object) {                                                                // 154
                    storeMetadata(object, parentResult, storage, false);                                               // 155
                });                                                                                                    // 156
            });                                                                                                        // 157
        }                                                                                                              // 158
    }                                                                                                                  // 159
}                                                                                                                      // 160
                                                                                                                       //
function storeMetadata(element, parentElement, storage, isVirtual) {                                                   // 162
    if (isVirtual) {                                                                                                   // 163
        var $metadata = void 0;                                                                                        // 164
                                                                                                                       //
        if (_.isArray(storage)) {                                                                                      // 165
            $metadata = _.find(storage, function (storageItem) {                                                       // 166
                return storageItem._id == parentElement._id;                                                           // 166
            });                                                                                                        // 166
        } else {                                                                                                       // 167
            $metadata = storage;                                                                                       // 168
        }                                                                                                              // 169
                                                                                                                       //
        element.$metadata = _.omit($metadata, '_id');                                                                  // 171
    } else {                                                                                                           // 172
        var _$metadata = void 0;                                                                                       // 173
                                                                                                                       //
        if (_.isArray(storage)) {                                                                                      // 174
            _$metadata = _.find(storage, function (storageItem) {                                                      // 175
                return storageItem._id == element._id;                                                                 // 175
            });                                                                                                        // 175
        } else {                                                                                                       // 176
            _$metadata = storage;                                                                                      // 177
        }                                                                                                              // 178
                                                                                                                       //
        element.$metadata = _.omit(_$metadata, '_id');                                                                 // 180
    }                                                                                                                  // 181
}                                                                                                                      // 182
                                                                                                                       //
function snapBackCaches(node) {                                                                                        // 184
    node.collectionNodes.forEach(function (collectionNode) {                                                           // 185
        snapBackCaches(collectionNode);                                                                                // 186
    });                                                                                                                // 187
                                                                                                                       //
    if (!_.isEmpty(node.snapCaches)) {                                                                                 // 189
        // process stuff                                                                                               // 190
        _.each(node.snapCaches, function (linkName, cacheField) {                                                      // 191
            var isSingle = _.contains(node.snapCachesSingles, cacheField);                                             // 192
                                                                                                                       //
            var linker = node.collection.getLinker(linkName); // we do this because for one direct and one meta direct, id is not stored
                                                                                                                       //
            var shoudStoreLinkStorage = !linker.isMany() && !linker.isVirtual();                                       // 195
            node.results.forEach(function (result) {                                                                   // 197
                if (result[cacheField]) {                                                                              // 198
                    if (shoudStoreLinkStorage) {                                                                       // 199
                        Object.assign(result[cacheField], {                                                            // 200
                            _id: linker.isMeta() ? result[linker.linkStorageField]._id : result[linker.linkStorageField]
                        });                                                                                            // 200
                    }                                                                                                  // 205
                                                                                                                       //
                    if (isSingle && _.isArray(result[cacheField])) {                                                   // 207
                        result[linkName] = _.first(result[cacheField]);                                                // 208
                    } else {                                                                                           // 209
                        result[linkName] = result[cacheField];                                                         // 210
                    }                                                                                                  // 211
                                                                                                                       //
                    delete result[cacheField];                                                                         // 213
                }                                                                                                      // 214
            });                                                                                                        // 215
        });                                                                                                            // 216
    }                                                                                                                  // 217
}                                                                                                                      // 218
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"prepareForProcess.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/lib/prepareForProcess.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var check = void 0,                                                                                                    // 1
    Match = void 0;                                                                                                    // 1
module.watch(require("meteor/check"), {                                                                                // 1
    check: function (v) {                                                                                              // 1
        check = v;                                                                                                     // 1
    },                                                                                                                 // 1
    Match: function (v) {                                                                                              // 1
        Match = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var deepClone = void 0;                                                                                                // 1
module.watch(require("lodash.clonedeep"), {                                                                            // 1
    "default": function (v) {                                                                                          // 1
        deepClone = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
                                                                                                                       //
function defaultFilterFunction(_ref) {                                                                                 // 4
    var filters = _ref.filters,                                                                                        // 8
        options = _ref.options,                                                                                        // 8
        params = _ref.params;                                                                                          // 8
                                                                                                                       //
    if (params.filters) {                                                                                              // 9
        Object.assign(filters, params.filters);                                                                        // 10
    }                                                                                                                  // 11
                                                                                                                       //
    if (params.options) {                                                                                              // 12
        Object.assign(options, params.options);                                                                        // 13
    }                                                                                                                  // 14
}                                                                                                                      // 15
                                                                                                                       //
function applyFilterRecursive(data) {                                                                                  // 17
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                               // 17
    var isRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;                            // 17
                                                                                                                       //
    if (isRoot && !_.isFunction(data.$filter)) {                                                                       // 18
        data.$filter = defaultFilterFunction;                                                                          // 19
    }                                                                                                                  // 20
                                                                                                                       //
    if (data.$filter) {                                                                                                // 22
        check(data.$filter, Match.OneOf(Function, [Function]));                                                        // 23
        data.$filters = data.$filters || {};                                                                           // 25
        data.$options = data.$options || {};                                                                           // 26
                                                                                                                       //
        if (_.isArray(data.$filter)) {                                                                                 // 28
            data.$filter.forEach(function (filter) {                                                                   // 29
                filter.call(null, {                                                                                    // 30
                    filters: data.$filters,                                                                            // 31
                    options: data.$options,                                                                            // 32
                    params: params                                                                                     // 33
                });                                                                                                    // 30
            });                                                                                                        // 35
        } else {                                                                                                       // 36
            data.$filter({                                                                                             // 37
                filters: data.$filters,                                                                                // 38
                options: data.$options,                                                                                // 39
                params: params                                                                                         // 40
            });                                                                                                        // 37
        }                                                                                                              // 42
                                                                                                                       //
        data.$filter = null;                                                                                           // 44
        delete data.$filter;                                                                                           // 45
    }                                                                                                                  // 46
                                                                                                                       //
    _.each(data, function (value, key) {                                                                               // 48
        if (_.isObject(value)) {                                                                                       // 49
            return applyFilterRecursive(value, params);                                                                // 50
        }                                                                                                              // 51
    });                                                                                                                // 52
}                                                                                                                      // 53
                                                                                                                       //
function applyPagination(body, _params) {                                                                              // 55
    if (body['$paginate'] && _params) {                                                                                // 56
        if (!body.$options) {                                                                                          // 57
            body.$options = {};                                                                                        // 58
        }                                                                                                              // 59
                                                                                                                       //
        if (_params.limit) {                                                                                           // 61
            _.extend(body.$options, {                                                                                  // 62
                limit: _params.limit                                                                                   // 63
            });                                                                                                        // 62
        }                                                                                                              // 65
                                                                                                                       //
        if (_params.skip) {                                                                                            // 67
            _.extend(body.$options, {                                                                                  // 68
                skip: _params.skip                                                                                     // 69
            });                                                                                                        // 68
        }                                                                                                              // 71
                                                                                                                       //
        delete body['$paginate'];                                                                                      // 73
    }                                                                                                                  // 74
}                                                                                                                      // 75
                                                                                                                       //
module.exportDefault(function (_body) {                                                                                // 1
    var _params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                              // 77
                                                                                                                       //
    var body = deepClone(_body);                                                                                       // 78
    var params = deepClone(_params);                                                                                   // 79
    applyPagination(body, params);                                                                                     // 81
    applyFilterRecursive(body, params, true);                                                                          // 82
    return body;                                                                                                       // 84
});                                                                                                                    // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"recursiveFetch.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/lib/recursiveFetch.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var applyProps = void 0;                                                                                               // 1
module.watch(require("./applyProps.js"), {                                                                             // 1
    "default": function (v) {                                                                                          // 1
        applyProps = v;                                                                                                // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var assembleMetadata = void 0,                                                                                         // 1
    removeLinkStorages = void 0,                                                                                       // 1
    storeOneResults = void 0;                                                                                          // 1
module.watch(require("./prepareForDelivery"), {                                                                        // 1
    assembleMetadata: function (v) {                                                                                   // 1
        assembleMetadata = v;                                                                                          // 1
    },                                                                                                                 // 1
    removeLinkStorages: function (v) {                                                                                 // 1
        removeLinkStorages = v;                                                                                        // 1
    },                                                                                                                 // 1
    storeOneResults: function (v) {                                                                                    // 1
        storeOneResults = v;                                                                                           // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var prepareForDelivery = void 0;                                                                                       // 1
module.watch(require("./prepareForDelivery"), {                                                                        // 1
    "default": function (v) {                                                                                          // 1
        prepareForDelivery = v;                                                                                        // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
                                                                                                                       //
/**                                                                                                                    // 5
 * This is always run client side to build the data graph out of client-side collections.                              //
 *                                                                                                                     //
 * @param node                                                                                                         //
 * @param parentObject                                                                                                 //
 * @returns {*}                                                                                                        //
 */function fetch(node, parentObject) {                                                                                //
    var _applyProps = applyProps(node),                                                                                // 12
        filters = _applyProps.filters,                                                                                 // 12
        options = _applyProps.options;                                                                                 // 12
                                                                                                                       //
    var results = [];                                                                                                  // 15
                                                                                                                       //
    if (parentObject) {                                                                                                // 17
        var accessor = node.linker.createLink(parentObject, node.collection);                                          // 18
                                                                                                                       //
        if (node.isVirtual) {                                                                                          // 20
            var _$extend;                                                                                              // 20
                                                                                                                       //
            options.fields = options.fields || {};                                                                     // 21
                                                                                                                       //
            _.extend(options.fields, (_$extend = {}, _$extend[node.linkStorageField] = 1, _$extend));                  // 22
        }                                                                                                              // 25
                                                                                                                       //
        results = accessor.find(filters, options).fetch();                                                             // 27
    } else {                                                                                                           // 28
        results = node.collection.find(filters, options).fetch();                                                      // 29
    }                                                                                                                  // 30
                                                                                                                       //
    _.each(node.collectionNodes, function (collectionNode) {                                                           // 32
        _.each(results, function (result) {                                                                            // 33
            result[collectionNode.linkName] = fetch(collectionNode, result); //delete result[node.linker.linkStorageField];
        });                                                                                                            // 36
    });                                                                                                                // 37
                                                                                                                       //
    return results;                                                                                                    // 39
}                                                                                                                      // 40
                                                                                                                       //
module.exportDefault(function (node, params) {                                                                         // 1
    node.results = fetch(node);                                                                                        // 43
    prepareForDelivery(node, params);                                                                                  // 45
    return node.results;                                                                                               // 47
});                                                                                                                    // 48
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"nodes":{"collectionNode.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/nodes/collectionNode.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _createClass2 = require("babel-runtime/helpers/createClass");                                                      //
                                                                                                                       //
var _createClass3 = _interopRequireDefault(_createClass2);                                                             //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return CollectionNode;                                                                                         // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var FieldNode = void 0;                                                                                                // 1
module.watch(require("./fieldNode.js"), {                                                                              // 1
    "default": function (v) {                                                                                          // 1
        FieldNode = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var ReducerNode = void 0;                                                                                              // 1
module.watch(require("./reducerNode.js"), {                                                                            // 1
    "default": function (v) {                                                                                          // 1
        ReducerNode = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var deepClone = void 0;                                                                                                // 1
module.watch(require("lodash.clonedeep"), {                                                                            // 1
    "default": function (v) {                                                                                          // 1
        deepClone = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var check = void 0,                                                                                                    // 1
    Match = void 0;                                                                                                    // 1
module.watch(require("meteor/check"), {                                                                                // 1
    check: function (v) {                                                                                              // 1
        check = v;                                                                                                     // 1
    },                                                                                                                 // 1
    Match: function (v) {                                                                                              // 1
        Match = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
                                                                                                                       //
var CollectionNode = function () {                                                                                     //
    function CollectionNode(collection) {                                                                              // 7
        var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                             // 7
        var linkName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;                       // 7
        (0, _classCallCheck3.default)(this, CollectionNode);                                                           // 7
                                                                                                                       //
        if (collection && !_.isObject(body)) {                                                                         // 8
            throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');
        }                                                                                                              // 10
                                                                                                                       //
        this.body = deepClone(body);                                                                                   // 12
        this.linkName = linkName;                                                                                      // 13
        this.collection = collection;                                                                                  // 14
        this.nodes = [];                                                                                               // 16
        this.props = {};                                                                                               // 17
        this.parent = null;                                                                                            // 18
        this.linker = null;                                                                                            // 19
        this.linkStorageField = null;                                                                                  // 20
        this.scheduledForDeletion = false;                                                                             // 21
        this.reducers = [];                                                                                            // 22
        this.results = [];                                                                                             // 23
        this.snapCaches = {}; // {cacheField: linkName}                                                                // 24
                                                                                                                       //
        this.snapCachesSingles = []; // [cacheField1, cacheField2]                                                     // 25
    }                                                                                                                  // 26
                                                                                                                       //
    /**                                                                                                                // 40
     * Adds children to itself                                                                                         //
     *                                                                                                                 //
     * @param node                                                                                                     //
     * @param linker                                                                                                   //
     */CollectionNode.prototype.add = function () {                                                                    //
        function add(node, linker) {                                                                                   //
            node.parent = this;                                                                                        // 47
                                                                                                                       //
            if (linker) {                                                                                              // 49
                node.linker = linker;                                                                                  // 50
                node.linkStorageField = linker.linkStorageField;                                                       // 51
                node.isMeta = linker.isMeta();                                                                         // 52
                node.isVirtual = linker.isVirtual();                                                                   // 53
                node.isOneResult = linker.isOneResult();                                                               // 54
                node.shouldCleanStorage = this._shouldCleanStorage(node);                                              // 55
            }                                                                                                          // 56
                                                                                                                       //
            this.nodes.push(node);                                                                                     // 58
        }                                                                                                              // 59
                                                                                                                       //
        return add;                                                                                                    //
    }(); /**                                                                                                           //
          * @param prop                                                                                                //
          * @param value                                                                                               //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.addProp = function () {                                                                   //
        function addProp(prop, value) {                                                                                //
            var _$extend;                                                                                              // 65
                                                                                                                       //
            if (prop === '$postFilter') {                                                                              // 66
                check(value, Match.OneOf(Function, [Function]));                                                       // 67
            }                                                                                                          // 68
                                                                                                                       //
            _.extend(this.props, (_$extend = {}, _$extend[prop] = value, _$extend));                                   // 70
        }                                                                                                              // 73
                                                                                                                       //
        return addProp;                                                                                                //
    }(); /**                                                                                                           //
          * @param _node                                                                                               //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.remove = function () {                                                                    //
        function remove(_node) {                                                                                       //
            this.nodes = _.filter(this.nodes, function (node) {                                                        // 79
                return _node !== node;                                                                                 // 79
            });                                                                                                        // 79
        }                                                                                                              // 80
                                                                                                                       //
        return remove;                                                                                                 //
    }(); /**                                                                                                           //
          * @param filters                                                                                             //
          * @param options                                                                                             //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.applyFields = function () {                                                               //
        function applyFields(filters, options) {                                                                       //
            var hasAddedAnyField = false;                                                                              // 87
                                                                                                                       //
            _.each(this.fieldNodes, function (n) {                                                                     // 89
                hasAddedAnyField = true;                                                                               // 90
                n.applyFields(options.fields);                                                                         // 91
            }); // it will only get here if it has collectionNodes children                                            // 92
                                                                                                                       //
                                                                                                                       //
            _.each(this.collectionNodes, function (collectionNode) {                                                   // 95
                var linker = collectionNode.linker;                                                                    // 96
                                                                                                                       //
                if (linker && !linker.isVirtual()) {                                                                   // 98
                    options.fields[linker.linkStorageField] = 1;                                                       // 99
                    hasAddedAnyField = true;                                                                           // 100
                }                                                                                                      // 101
            }); // if he selected filters, we should automatically add those fields                                    // 102
                                                                                                                       //
                                                                                                                       //
            _.each(filters, function (value, field) {                                                                  // 105
                // special handling for the $meta filter and conditional operators                                     // 106
                if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {                                    // 107
                    // if the field or the parent of the field already exists, don't add it                            // 108
                    if (!_.has(options.fields, field.split('.')[0])) {                                                 // 109
                        hasAddedAnyField = true;                                                                       // 110
                        options.fields[field] = 1;                                                                     // 111
                    }                                                                                                  // 112
                }                                                                                                      // 113
            });                                                                                                        // 114
                                                                                                                       //
            if (!hasAddedAnyField) {                                                                                   // 116
                options.fields = {                                                                                     // 117
                    _id: 1                                                                                             // 117
                };                                                                                                     // 117
            }                                                                                                          // 118
        }                                                                                                              // 119
                                                                                                                       //
        return applyFields;                                                                                            //
    }(); /**                                                                                                           //
          * @param fieldName                                                                                           //
          * @returns {boolean}                                                                                         //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.hasField = function () {                                                                  //
        function hasField(fieldName) {                                                                                 //
            return !!_.find(this.fieldNodes, function (fieldNode) {                                                    // 126
                return fieldNode.name == fieldName;                                                                    // 127
            });                                                                                                        // 128
        }                                                                                                              // 129
                                                                                                                       //
        return hasField;                                                                                               //
    }(); /**                                                                                                           //
          * @param fieldName                                                                                           //
          * @returns {FieldNode}                                                                                       //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.getField = function () {                                                                  //
        function getField(fieldName) {                                                                                 //
            return _.find(this.fieldNodes, function (fieldNode) {                                                      // 136
                return fieldNode.name == fieldName;                                                                    // 137
            });                                                                                                        // 138
        }                                                                                                              // 139
                                                                                                                       //
        return getField;                                                                                               //
    }(); /**                                                                                                           //
          * @param name                                                                                                //
          * @returns {boolean}                                                                                         //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.hasCollectionNode = function () {                                                         //
        function hasCollectionNode(name) {                                                                             //
            return !!_.find(this.collectionNodes, function (node) {                                                    // 146
                return node.linkName == name;                                                                          // 147
            });                                                                                                        // 148
        }                                                                                                              // 149
                                                                                                                       //
        return hasCollectionNode;                                                                                      //
    }(); /**                                                                                                           //
          * @param name                                                                                                //
          * @returns {boolean}                                                                                         //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.hasReducerNode = function () {                                                            //
        function hasReducerNode(name) {                                                                                //
            return !!_.find(this.reducerNodes, function (node) {                                                       // 156
                return node.name == name;                                                                              // 157
            });                                                                                                        // 158
        }                                                                                                              // 159
                                                                                                                       //
        return hasReducerNode;                                                                                         //
    }(); /**                                                                                                           //
          * @param name                                                                                                //
          * @returns {ReducerNode}                                                                                     //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.getReducerNode = function () {                                                            //
        function getReducerNode(name) {                                                                                //
            return _.find(this.reducerNodes, function (node) {                                                         // 166
                return node.name == name;                                                                              // 167
            });                                                                                                        // 168
        }                                                                                                              // 169
                                                                                                                       //
        return getReducerNode;                                                                                         //
    }(); /**                                                                                                           //
          * @param name                                                                                                //
          * @returns {CollectionNode}                                                                                  //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.getCollectionNode = function () {                                                         //
        function getCollectionNode(name) {                                                                             //
            return _.find(this.collectionNodes, function (node) {                                                      // 176
                return node.linkName == name;                                                                          // 177
            });                                                                                                        // 178
        }                                                                                                              // 179
                                                                                                                       //
        return getCollectionNode;                                                                                      //
    }(); /**                                                                                                           //
          * @returns {*}                                                                                               //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.getName = function () {                                                                   //
        function getName() {                                                                                           //
            return this.linkName ? this.linkName : this.collection ? this.collection._name : 'N/A';                    // 185
        }                                                                                                              // 188
                                                                                                                       //
        return getName;                                                                                                //
    }(); /**                                                                                                           //
          * This is used for caching links                                                                             //
          *                                                                                                            //
          * @param cacheField                                                                                          //
          * @param subLinkName                                                                                         //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype.snapCache = function () {                                                                 //
        function snapCache(cacheField, subLinkName) {                                                                  //
            this.snapCaches[cacheField] = subLinkName;                                                                 // 197
                                                                                                                       //
            if (this.collection.getLinker(subLinkName).isOneResult()) {                                                // 199
                this.snapCachesSingles.push(cacheField);                                                               // 200
            }                                                                                                          // 201
        }                                                                                                              // 202
                                                                                                                       //
        return snapCache;                                                                                              //
    }(); /**                                                                                                           //
          * This method verifies whether to remove the linkStorageField form the results                               //
          * unless you specify it in your query.                                                                       //
          *                                                                                                            //
          * @param node                                                                                                //
          * @returns {boolean}                                                                                         //
          * @private                                                                                                   //
          */                                                                                                           //
                                                                                                                       //
    CollectionNode.prototype._shouldCleanStorage = function () {                                                       //
        function _shouldCleanStorage(node) {                                                                           //
            if (node.linkStorageField === '_id') {                                                                     // 213
                return false;                                                                                          // 214
            } else {                                                                                                   // 215
                if (node.isVirtual) {                                                                                  // 216
                    return !node.hasField(node.linkStorageField);                                                      // 217
                } else {                                                                                               // 218
                    return !this.hasField(node.linkStorageField);                                                      // 219
                }                                                                                                      // 220
            }                                                                                                          // 221
        }                                                                                                              // 222
                                                                                                                       //
        return _shouldCleanStorage;                                                                                    //
    }();                                                                                                               //
                                                                                                                       //
    (0, _createClass3.default)(CollectionNode, [{                                                                      //
        key: "collectionNodes",                                                                                        //
        get: function () {                                                                                             //
            return _.filter(this.nodes, function (n) {                                                                 // 29
                return n instanceof CollectionNode;                                                                    // 29
            });                                                                                                        // 29
        }                                                                                                              // 30
    }, {                                                                                                               //
        key: "fieldNodes",                                                                                             //
        get: function () {                                                                                             //
            return _.filter(this.nodes, function (n) {                                                                 // 33
                return n instanceof FieldNode;                                                                         // 33
            });                                                                                                        // 33
        }                                                                                                              // 34
    }, {                                                                                                               //
        key: "reducerNodes",                                                                                           //
        get: function () {                                                                                             //
            return _.filter(this.nodes, function (n) {                                                                 // 37
                return n instanceof ReducerNode;                                                                       // 37
            });                                                                                                        // 37
        }                                                                                                              // 38
    }]);                                                                                                               //
    return CollectionNode;                                                                                             //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fieldNode.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/nodes/fieldNode.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return FieldNode;                                                                                              // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
                                                                                                                       //
var FieldNode = function () {                                                                                          //
    function FieldNode(name, body) {                                                                                   // 2
        (0, _classCallCheck3.default)(this, FieldNode);                                                                // 2
        this.name = name;                                                                                              // 3
        this.body = _.isObject(body) ? 1 : body;                                                                       // 4
        this.scheduledForDeletion = false;                                                                             // 5
    }                                                                                                                  // 6
                                                                                                                       //
    FieldNode.prototype.applyFields = function () {                                                                    //
        function applyFields(fields) {                                                                                 //
            fields[this.name] = this.body;                                                                             // 9
        }                                                                                                              // 10
                                                                                                                       //
        return applyFields;                                                                                            //
    }();                                                                                                               //
                                                                                                                       //
    return FieldNode;                                                                                                  //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"reducerNode.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/nodes/reducerNode.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return ReducerNode;                                                                                            // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
                                                                                                                       //
var ReducerNode = function () {                                                                                        //
    function ReducerNode(name, _ref) {                                                                                 // 2
        var body = _ref.body,                                                                                          // 2
            reduce = _ref.reduce;                                                                                      // 2
        (0, _classCallCheck3.default)(this, ReducerNode);                                                              // 2
        this.name = name;                                                                                              // 3
        this.body = body;                                                                                              // 4
        this.reduceFunction = reduce;                                                                                  // 5
    } /**                                                                                                              // 6
       * When computing we also pass the parameters                                                                    //
       *                                                                                                               //
       * @param {*} object                                                                                             //
       * @param {*} args                                                                                               //
       */                                                                                                              //
                                                                                                                       //
    ReducerNode.prototype.compute = function () {                                                                      //
        function compute(object) {                                                                                     //
            var _reduce;                                                                                               // 14
                                                                                                                       //
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {  // 14
                args[_key - 1] = arguments[_key];                                                                      // 14
            }                                                                                                          // 14
                                                                                                                       //
            object[this.name] = (_reduce = this.reduce).call.apply(_reduce, [this, object].concat(args));              // 15
        }                                                                                                              // 16
                                                                                                                       //
        return compute;                                                                                                //
    }();                                                                                                               //
                                                                                                                       //
    ReducerNode.prototype.reduce = function () {                                                                       //
        function reduce(object) {                                                                                      //
            var _reduceFunction;                                                                                       // 18
                                                                                                                       //
            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];                                                                    // 18
            }                                                                                                          // 18
                                                                                                                       //
            return (_reduceFunction = this.reduceFunction).call.apply(_reduceFunction, [this, object].concat(args));   // 19
        }                                                                                                              // 20
                                                                                                                       //
        return reduce;                                                                                                 //
    }();                                                                                                               //
                                                                                                                       //
    return ReducerNode;                                                                                                //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"reducers":{"extension.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/reducers/extension.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var check = void 0;                                                                                                    // 1
module.watch(require("meteor/check"), {                                                                                // 1
    check: function (v) {                                                                                              // 1
        check = v;                                                                                                     // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var storage = '__reducers';                                                                                            // 3
Object.assign(Mongo.Collection.prototype, {                                                                            // 4
    /**                                                                                                                // 5
     * @param data                                                                                                     //
     */addReducers: function (data) {                                                                                  //
        var _this = this;                                                                                              // 8
                                                                                                                       //
        if (!this[storage]) {                                                                                          // 9
            this[storage] = {};                                                                                        // 10
        }                                                                                                              // 11
                                                                                                                       //
        _.each(data, function (reducerConfig, reducerName) {                                                           // 13
            var _$extend;                                                                                              // 13
                                                                                                                       //
            if (!_this[reducerConfig]) {                                                                               // 14
                _this[reducerConfig] = {};                                                                             // 15
            }                                                                                                          // 16
                                                                                                                       //
            if (_this.getLinker(reducerName)) {                                                                        // 18
                throw new Meteor.Error("You cannot add the reducer with name: " + reducerName + " because it is already defined as a link in " + _this._name + " collection");
            }                                                                                                          // 20
                                                                                                                       //
            if (_this[reducerConfig][reducerName]) {                                                                   // 22
                throw new Meteor.Error("You cannot add the reducer with name: " + reducerName + " because it was already added to " + _this._name + " collection");
            }                                                                                                          // 24
                                                                                                                       //
            check(reducerConfig, {                                                                                     // 26
                body: Object,                                                                                          // 27
                reduce: Function                                                                                       // 28
            });                                                                                                        // 26
                                                                                                                       //
            _.extend(_this[storage], (_$extend = {}, _$extend[reducerName] = reducerConfig, _$extend));                // 31
        });                                                                                                            // 34
    },                                                                                                                 // 35
    /**                                                                                                                // 37
     * @param name                                                                                                     //
     * @returns {*}                                                                                                    //
     */getReducer: function (name) {                                                                                   //
        if (this[storage]) {                                                                                           // 42
            return this[storage][name];                                                                                // 43
        }                                                                                                              // 44
    }                                                                                                                  // 45
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"applyReducers.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/reducers/lib/applyReducers.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return applyReducers;                                                                                          // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
                                                                                                                       //
function applyReducers(root, params) {                                                                                 // 1
    _.each(root.collectionNodes, function (node) {                                                                     // 2
        applyReducers(node, params);                                                                                   // 3
    });                                                                                                                // 4
                                                                                                                       //
    _.each(root.reducerNodes, function (reducerNode) {                                                                 // 6
        root.results.forEach(function (result) {                                                                       // 7
            reducerNode.compute(result, params);                                                                       // 8
        });                                                                                                            // 9
    });                                                                                                                // 10
}                                                                                                                      // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cleanReducerLeftovers.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/reducers/lib/cleanReducerLeftovers.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return cleanReducerLeftovers;                                                                                  // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
                                                                                                                       //
function cleanReducerLeftovers(root) {                                                                                 // 4
    _.each(root.collectionNodes, function (node) {                                                                     // 5
        if (node.scheduledForDeletion) {                                                                               // 6
            root.results.forEach(function (result) {                                                                   // 7
                delete result[node.linkName];                                                                          // 8
            });                                                                                                        // 9
        }                                                                                                              // 10
    });                                                                                                                // 11
                                                                                                                       //
    _.each(root.collectionNodes, function (node) {                                                                     // 13
        cleanReducerLeftovers(node);                                                                                   // 14
    });                                                                                                                // 15
                                                                                                                       //
    _.each(root.fieldNodes, function (node) {                                                                          // 17
        if (node.scheduledForDeletion) {                                                                               // 18
            cleanNestedFields(node.name.split('.'), root.results);                                                     // 19
        }                                                                                                              // 20
    });                                                                                                                // 21
                                                                                                                       //
    _.each(root.reducerNodes, function (node) {                                                                        // 23
        if (node.scheduledForDeletion) {                                                                               // 24
            root.results.forEach(function (result) {                                                                   // 25
                delete result[node.name];                                                                              // 26
            });                                                                                                        // 27
        }                                                                                                              // 28
    });                                                                                                                // 29
}                                                                                                                      // 30
                                                                                                                       //
// if we store a field like: 'profile.firstName'                                                                       // 32
// then we need to delete profile: { firstName }                                                                       // 33
// if profile will have empty keys, we need to delete profile.                                                         // 34
/**                                                                                                                    // 36
 *                                                                                                                     //
 * @param parts                                                                                                        //
 * @param results                                                                                                      //
 */function cleanNestedFields(parts, results) {                                                                        //
    var fieldName = parts[0];                                                                                          // 42
                                                                                                                       //
    if (parts.length === 1) {                                                                                          // 43
        results.forEach(function (result) {                                                                            // 45
            if (fieldName !== '_id') {                                                                                 // 46
                delete result[fieldName];                                                                              // 47
            }                                                                                                          // 48
        });                                                                                                            // 49
        return;                                                                                                        // 51
    }                                                                                                                  // 52
                                                                                                                       //
    parts.shift();                                                                                                     // 54
    cleanNestedFields(parts, results.map(function (result) {                                                           // 55
        return result[fieldName];                                                                                      // 55
    }));                                                                                                               // 55
    results.forEach(function (result) {                                                                                // 57
        if (_.keys(result[fieldName]).length === 0) {                                                                  // 58
            if (fieldName !== '_id') {                                                                                 // 59
                delete result[fieldName];                                                                              // 60
            }                                                                                                          // 61
        }                                                                                                              // 62
    });                                                                                                                // 63
}                                                                                                                      // 64
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createReducers.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/reducers/lib/createReducers.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return addReducers;                                                                                            // 1
    },                                                                                                                 // 1
    handleAddElement: function () {                                                                                    // 1
        return handleAddElement;                                                                                       // 1
    },                                                                                                                 // 1
    handleAddReducer: function () {                                                                                    // 1
        return handleAddReducer;                                                                                       // 1
    },                                                                                                                 // 1
    handleAddLink: function () {                                                                                       // 1
        return handleAddLink;                                                                                          // 1
    },                                                                                                                 // 1
    handleAddField: function () {                                                                                      // 1
        return handleAddField;                                                                                         // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var dot = void 0;                                                                                                      // 1
module.watch(require("dot-object"), {                                                                                  // 1
    "default": function (v) {                                                                                          // 1
        dot = v;                                                                                                       // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
var createNodes = void 0;                                                                                              // 1
module.watch(require("../../lib/createGraph"), {                                                                       // 1
    createNodes: function (v) {                                                                                        // 1
        createNodes = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 1);                                                                                                                 // 1
var CollectionNode = void 0;                                                                                           // 1
module.watch(require("../../nodes/collectionNode"), {                                                                  // 1
    "default": function (v) {                                                                                          // 1
        CollectionNode = v;                                                                                            // 1
    }                                                                                                                  // 1
}, 2);                                                                                                                 // 1
var FieldNode = void 0;                                                                                                // 1
module.watch(require("../../nodes/fieldNode"), {                                                                       // 1
    "default": function (v) {                                                                                          // 1
        FieldNode = v;                                                                                                 // 1
    }                                                                                                                  // 1
}, 3);                                                                                                                 // 1
var ReducerNode = void 0;                                                                                              // 1
module.watch(require("../../nodes/reducerNode"), {                                                                     // 1
    "default": function (v) {                                                                                          // 1
        ReducerNode = v;                                                                                               // 1
    }                                                                                                                  // 1
}, 4);                                                                                                                 // 1
var embedReducerWithLink = void 0;                                                                                     // 1
module.watch(require("./embedReducerWithLink"), {                                                                      // 1
    "default": function (v) {                                                                                          // 1
        embedReducerWithLink = v;                                                                                      // 1
    }                                                                                                                  // 1
}, 5);                                                                                                                 // 1
                                                                                                                       //
function addReducers(root) {                                                                                           // 8
    // we add reducers last, after we have added all the fields.                                                       // 9
    root.reducerNodes.forEach(function (reducer) {                                                                     // 10
        _.each(reducer.body, function (body, fieldName) {                                                              // 11
            handleAddElement(root, fieldName, body);                                                                   // 12
        });                                                                                                            // 13
    });                                                                                                                // 14
}                                                                                                                      // 15
                                                                                                                       //
function handleAddElement(root, fieldName, body) {                                                                     // 22
    // if it's a link                                                                                                  // 23
    var collection = root.collection;                                                                                  // 24
    var linker = collection.getLinker(fieldName);                                                                      // 25
                                                                                                                       //
    if (linker) {                                                                                                      // 26
        return handleAddLink(fieldName, body, root, linker);                                                           // 27
    }                                                                                                                  // 28
                                                                                                                       //
    var reducer = collection.getReducer(fieldName);                                                                    // 30
                                                                                                                       //
    if (reducer) {                                                                                                     // 31
        return handleAddReducer(fieldName, reducer, root);                                                             // 32
    } // we assume it's a field in this case                                                                           // 33
                                                                                                                       //
                                                                                                                       //
    return handleAddField(fieldName, body, root);                                                                      // 36
}                                                                                                                      // 37
                                                                                                                       //
function handleAddReducer(fieldName, reducer, root) {                                                                  // 44
    if (!root.hasReducerNode(fieldName)) {                                                                             // 45
        var reducerNode = new ReducerNode(fieldName, reducer);                                                         // 46
        root.add(reducerNode);                                                                                         // 47
        reducerNode.scheduledForDeletion = true;                                                                       // 48
                                                                                                                       //
        _.each(reducer.body, function (body, fieldName) {                                                              // 50
            handleAddElement(root, fieldName, body);                                                                   // 51
        });                                                                                                            // 52
    }                                                                                                                  // 53
}                                                                                                                      // 54
                                                                                                                       //
function handleAddLink(fieldName, body, root, linker) {                                                                // 62
    if (root.hasCollectionNode(fieldName)) {                                                                           // 63
        var collectionNode = root.getCollectionNode(fieldName);                                                        // 64
        embedReducerWithLink(body, collectionNode);                                                                    // 66
    } else {                                                                                                           // 67
        // add                                                                                                         // 68
        var _collectionNode = new CollectionNode(linker.getLinkedCollection(), body, fieldName);                       // 69
                                                                                                                       //
        _collectionNode.scheduledForDeletion = true;                                                                   // 70
        root.add(_collectionNode, linker);                                                                             // 71
        createNodes(_collectionNode);                                                                                  // 73
    }                                                                                                                  // 74
}                                                                                                                      // 75
                                                                                                                       //
function handleAddField(fieldName, body, root) {                                                                       // 82
    if (_.isObject(body)) {                                                                                            // 83
        var _dot$dot;                                                                                                  // 83
                                                                                                                       //
        // if reducer specifies a nested field                                                                         // 84
        var dots = dot.dot((_dot$dot = {}, _dot$dot[fieldName] = body, _dot$dot));                                     // 85
                                                                                                                       //
        _.each(dots, function (value, key) {                                                                           // 89
            if (!root.hasField(key)) {                                                                                 // 90
                var fieldNode = new FieldNode(key, value);                                                             // 91
                fieldNode.scheduledForDeletion = true;                                                                 // 92
                root.add(fieldNode);                                                                                   // 94
            }                                                                                                          // 95
        });                                                                                                            // 96
    } else {                                                                                                           // 97
        // if reducer does not specify a nested field, and the field does not exist.                                   // 98
        if (!root.hasField(fieldName)) {                                                                               // 99
            var fieldNode = new FieldNode(fieldName, body);                                                            // 100
            fieldNode.scheduledForDeletion = true;                                                                     // 101
            root.add(fieldNode);                                                                                       // 103
        }                                                                                                              // 104
    }                                                                                                                  // 105
}                                                                                                                      // 106
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"embedReducerWithLink.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/cultofcoders_grapher/lib/query/reducers/lib/embedReducerWithLink.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
    "default": function () {                                                                                           // 1
        return embedReducerWithLink;                                                                                   // 1
    }                                                                                                                  // 1
});                                                                                                                    // 1
var handleAddField = void 0,                                                                                           // 1
    handleAddElement = void 0,                                                                                         // 1
    handleAddReducer = void 0;                                                                                         // 1
module.watch(require("./createReducers"), {                                                                            // 1
    handleAddField: function (v) {                                                                                     // 1
        handleAddField = v;                                                                                            // 1
    },                                                                                                                 // 1
    handleAddElement: function (v) {                                                                                   // 1
        handleAddElement = v;                                                                                          // 1
    },                                                                                                                 // 1
    handleAddReducer: function (v) {                                                                                   // 1
        handleAddReducer = v;                                                                                          // 1
    }                                                                                                                  // 1
}, 0);                                                                                                                 // 1
                                                                                                                       //
function embedReducerWithLink(reducerBody, collectionNode) {                                                           // 8
    _.each(reducerBody, function (value, key) {                                                                        // 9
        var collection = collectionNode.collection;                                                                    // 10
                                                                                                                       //
        if (_.isObject(value)) {                                                                                       // 12
            // nested field or link                                                                                    // 13
            if (collectionNode.body[key]) {                                                                            // 14
                // if it exists                                                                                        // 15
                var linker = collection.getLinker(key); // if it's a link                                              // 16
                                                                                                                       //
                if (linker) {                                                                                          // 19
                    embedReducerWithLink(value, collectionNode.getCollectionNode(key));                                // 20
                    return;                                                                                            // 21
                }                                                                                                      // 22
                                                                                                                       //
                handleAddField(key, value, collectionNode);                                                            // 24
            } else {                                                                                                   // 25
                // does not exist, so it may be a link/reducer/field                                                   // 26
                handleAddElement(root, key, value);                                                                    // 27
            }                                                                                                          // 28
        } else {                                                                                                       // 29
            // if this field or other reducer exists within the collection                                             // 30
            if (!collectionNode.body[key]) {                                                                           // 32
                // can only be field or another reducer for this.                                                      // 33
                var reducer = collection.getReducer(key);                                                              // 34
                                                                                                                       //
                if (reducer) {                                                                                         // 35
                    // if it's another reducer                                                                         // 36
                    return handleAddReducer(key, reducer, collectionNode);                                             // 37
                }                                                                                                      // 38
                                                                                                                       //
                return handleAddField(key, value, collectionNode);                                                     // 40
            }                                                                                                          // 41
        }                                                                                                              // 42
    });                                                                                                                // 43
}                                                                                                                      // 44
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},"node_modules":{"lodash.clonedeep":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/cultofcoders_grapher/node_modules/lodash.clonedeep/index.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * lodash (Custom Build) <https://lodash.com/>                                                                         // 2
 * Build: `lodash modularize exports="npm" -o ./`                                                                      // 3
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4
 * Released under MIT license <https://lodash.com/license>                                                             // 5
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7
 */                                                                                                                    // 8
                                                                                                                       // 9
/** Used as the size to enable large array optimizations. */                                                           // 10
var LARGE_ARRAY_SIZE = 200;                                                                                            // 11
                                                                                                                       // 12
/** Used to stand-in for `undefined` hash values. */                                                                   // 13
var HASH_UNDEFINED = "__lodash_hash_undefined__";                                                                      // 14
                                                                                                                       // 15
/** Used as references for various `Number` constants. */                                                              // 16
var MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 17
                                                                                                                       // 18
/** `Object#toString` result references. */                                                                            // 19
var argsTag = "[object Arguments]",                                                                                    // 20
    arrayTag = "[object Array]",                                                                                       // 21
    boolTag = "[object Boolean]",                                                                                      // 22
    dateTag = "[object Date]",                                                                                         // 23
    errorTag = "[object Error]",                                                                                       // 24
    funcTag = "[object Function]",                                                                                     // 25
    genTag = "[object GeneratorFunction]",                                                                             // 26
    mapTag = "[object Map]",                                                                                           // 27
    numberTag = "[object Number]",                                                                                     // 28
    objectTag = "[object Object]",                                                                                     // 29
    promiseTag = "[object Promise]",                                                                                   // 30
    regexpTag = "[object RegExp]",                                                                                     // 31
    setTag = "[object Set]",                                                                                           // 32
    stringTag = "[object String]",                                                                                     // 33
    symbolTag = "[object Symbol]",                                                                                     // 34
    weakMapTag = "[object WeakMap]";                                                                                   // 35
                                                                                                                       // 36
var arrayBufferTag = "[object ArrayBuffer]",                                                                           // 37
    dataViewTag = "[object DataView]",                                                                                 // 38
    float32Tag = "[object Float32Array]",                                                                              // 39
    float64Tag = "[object Float64Array]",                                                                              // 40
    int8Tag = "[object Int8Array]",                                                                                    // 41
    int16Tag = "[object Int16Array]",                                                                                  // 42
    int32Tag = "[object Int32Array]",                                                                                  // 43
    uint8Tag = "[object Uint8Array]",                                                                                  // 44
    uint8ClampedTag = "[object Uint8ClampedArray]",                                                                    // 45
    uint16Tag = "[object Uint16Array]",                                                                                // 46
    uint32Tag = "[object Uint32Array]";                                                                                // 47
                                                                                                                       // 48
/**                                                                                                                    // 49
 * Used to match `RegExp`                                                                                              // 50
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).                                      // 51
 */                                                                                                                    // 52
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;                                                                              // 53
                                                                                                                       // 54
/** Used to match `RegExp` flags from their coerced string values. */                                                  // 55
var reFlags = /\w*$/;                                                                                                  // 56
                                                                                                                       // 57
/** Used to detect host constructors (Safari). */                                                                      // 58
var reIsHostCtor = /^\[object .+?Constructor\]$/;                                                                      // 59
                                                                                                                       // 60
/** Used to detect unsigned integer values. */                                                                         // 61
var reIsUint = /^(?:0|[1-9]\d*)$/;                                                                                     // 62
                                                                                                                       // 63
/** Used to identify `toStringTag` values supported by `_.clone`. */                                                   // 64
var cloneableTags = {};                                                                                                // 65
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[                                                      // 66
    arrayBufferTag                                                                                                     // 67
] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[                                               // 68
    dateTag                                                                                                            // 69
] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[                                             // 70
    int8Tag                                                                                                            // 71
] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[                                                 // 72
    mapTag                                                                                                             // 73
] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[                                               // 74
    regexpTag                                                                                                          // 75
] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[                                                  // 76
    symbolTag                                                                                                          // 77
] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[                                          // 78
    uint16Tag                                                                                                          // 79
] = cloneableTags[uint32Tag] = true;                                                                                   // 80
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[                                                      // 81
    weakMapTag                                                                                                         // 82
] = false;                                                                                                             // 83
                                                                                                                       // 84
/** Detect free variable `global` from Node.js. */                                                                     // 85
var freeGlobal =                                                                                                       // 86
    typeof global == "object" && global && global.Object === Object && global;                                         // 87
                                                                                                                       // 88
/** Detect free variable `self`. */                                                                                    // 89
var freeSelf =                                                                                                         // 90
    typeof self == "object" && self && self.Object === Object && self;                                                 // 91
                                                                                                                       // 92
/** Used as a reference to the global object. */                                                                       // 93
var root = freeGlobal || freeSelf || Function("return this")();                                                        // 94
                                                                                                                       // 95
/** Detect free variable `exports`. */                                                                                 // 96
var freeExports =                                                                                                      // 97
    typeof exports == "object" && exports && !exports.nodeType && exports;                                             // 98
                                                                                                                       // 99
/** Detect free variable `module`. */                                                                                  // 100
var freeModule =                                                                                                       // 101
    freeExports &&                                                                                                     // 102
    typeof module == "object" &&                                                                                       // 103
    module &&                                                                                                          // 104
    !module.nodeType &&                                                                                                // 105
    module;                                                                                                            // 106
                                                                                                                       // 107
/** Detect the popular CommonJS extension `module.exports`. */                                                         // 108
var moduleExports = freeModule && freeModule.exports === freeExports;                                                  // 109
                                                                                                                       // 110
/**                                                                                                                    // 111
 * Adds the key-value `pair` to `map`.                                                                                 // 112
 *                                                                                                                     // 113
 * @private                                                                                                            // 114
 * @param {Object} map The map to modify.                                                                              // 115
 * @param {Array} pair The key-value pair to add.                                                                      // 116
 * @returns {Object} Returns `map`.                                                                                    // 117
 */                                                                                                                    // 118
function addMapEntry(map, pair) {                                                                                      // 119
    // Don't return `map.set` because it's not chainable in IE 11.                                                     // 120
    map.set(pair[0], pair[1]);                                                                                         // 121
    return map;                                                                                                        // 122
}                                                                                                                      // 123
                                                                                                                       // 124
/**                                                                                                                    // 125
 * Adds `value` to `set`.                                                                                              // 126
 *                                                                                                                     // 127
 * @private                                                                                                            // 128
 * @param {Object} set The set to modify.                                                                              // 129
 * @param {*} value The value to add.                                                                                  // 130
 * @returns {Object} Returns `set`.                                                                                    // 131
 */                                                                                                                    // 132
function addSetEntry(set, value) {                                                                                     // 133
    // Don't return `set.add` because it's not chainable in IE 11.                                                     // 134
    set.add(value);                                                                                                    // 135
    return set;                                                                                                        // 136
}                                                                                                                      // 137
                                                                                                                       // 138
/**                                                                                                                    // 139
 * A specialized version of `_.forEach` for arrays without support for                                                 // 140
 * iteratee shorthands.                                                                                                // 141
 *                                                                                                                     // 142
 * @private                                                                                                            // 143
 * @param {Array} [array] The array to iterate over.                                                                   // 144
 * @param {Function} iteratee The function invoked per iteration.                                                      // 145
 * @returns {Array} Returns `array`.                                                                                   // 146
 */                                                                                                                    // 147
function arrayEach(array, iteratee) {                                                                                  // 148
    var index = -1,                                                                                                    // 149
        length = array ? array.length : 0;                                                                             // 150
                                                                                                                       // 151
    while (++index < length) {                                                                                         // 152
        if (iteratee(array[index], index, array) === false) {                                                          // 153
            break;                                                                                                     // 154
        }                                                                                                              // 155
    }                                                                                                                  // 156
    return array;                                                                                                      // 157
}                                                                                                                      // 158
                                                                                                                       // 159
/**                                                                                                                    // 160
 * Appends the elements of `values` to `array`.                                                                        // 161
 *                                                                                                                     // 162
 * @private                                                                                                            // 163
 * @param {Array} array The array to modify.                                                                           // 164
 * @param {Array} values The values to append.                                                                         // 165
 * @returns {Array} Returns `array`.                                                                                   // 166
 */                                                                                                                    // 167
function arrayPush(array, values) {                                                                                    // 168
    var index = -1,                                                                                                    // 169
        length = values.length,                                                                                        // 170
        offset = array.length;                                                                                         // 171
                                                                                                                       // 172
    while (++index < length) {                                                                                         // 173
        array[offset + index] = values[index];                                                                         // 174
    }                                                                                                                  // 175
    return array;                                                                                                      // 176
}                                                                                                                      // 177
                                                                                                                       // 178
/**                                                                                                                    // 179
 * A specialized version of `_.reduce` for arrays without support for                                                  // 180
 * iteratee shorthands.                                                                                                // 181
 *                                                                                                                     // 182
 * @private                                                                                                            // 183
 * @param {Array} [array] The array to iterate over.                                                                   // 184
 * @param {Function} iteratee The function invoked per iteration.                                                      // 185
 * @param {*} [accumulator] The initial value.                                                                         // 186
 * @param {boolean} [initAccum] Specify using the first element of `array` as                                          // 187
 *  the initial value.                                                                                                 // 188
 * @returns {*} Returns the accumulated value.                                                                         // 189
 */                                                                                                                    // 190
function arrayReduce(array, iteratee, accumulator, initAccum) {                                                        // 191
    var index = -1,                                                                                                    // 192
        length = array ? array.length : 0;                                                                             // 193
                                                                                                                       // 194
    if (initAccum && length) {                                                                                         // 195
        accumulator = array[++index];                                                                                  // 196
    }                                                                                                                  // 197
    while (++index < length) {                                                                                         // 198
        accumulator = iteratee(accumulator, array[index], index, array);                                               // 199
    }                                                                                                                  // 200
    return accumulator;                                                                                                // 201
}                                                                                                                      // 202
                                                                                                                       // 203
/**                                                                                                                    // 204
 * The base implementation of `_.times` without support for iteratee shorthands                                        // 205
 * or max array length checks.                                                                                         // 206
 *                                                                                                                     // 207
 * @private                                                                                                            // 208
 * @param {number} n The number of times to invoke `iteratee`.                                                         // 209
 * @param {Function} iteratee The function invoked per iteration.                                                      // 210
 * @returns {Array} Returns the array of results.                                                                      // 211
 */                                                                                                                    // 212
function baseTimes(n, iteratee) {                                                                                      // 213
    var index = -1,                                                                                                    // 214
        result = Array(n);                                                                                             // 215
                                                                                                                       // 216
    while (++index < n) {                                                                                              // 217
        result[index] = iteratee(index);                                                                               // 218
    }                                                                                                                  // 219
    return result;                                                                                                     // 220
}                                                                                                                      // 221
                                                                                                                       // 222
/**                                                                                                                    // 223
 * Gets the value at `key` of `object`.                                                                                // 224
 *                                                                                                                     // 225
 * @private                                                                                                            // 226
 * @param {Object} [object] The object to query.                                                                       // 227
 * @param {string} key The key of the property to get.                                                                 // 228
 * @returns {*} Returns the property value.                                                                            // 229
 */                                                                                                                    // 230
function getValue(object, key) {                                                                                       // 231
    return object == null ? undefined : object[key];                                                                   // 232
}                                                                                                                      // 233
                                                                                                                       // 234
/**                                                                                                                    // 235
 * Checks if `value` is a host object in IE < 9.                                                                       // 236
 *                                                                                                                     // 237
 * @private                                                                                                            // 238
 * @param {*} value The value to check.                                                                                // 239
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                        // 240
 */                                                                                                                    // 241
function isHostObject(value) {                                                                                         // 242
    // Many host objects are `Object` objects that can coerce to strings                                               // 243
    // despite having improperly defined `toString` methods.                                                           // 244
    var result = false;                                                                                                // 245
    if (value != null && typeof value.toString != "function") {                                                        // 246
        try {                                                                                                          // 247
            result = !!(value + "");                                                                                   // 248
        } catch (e) {}                                                                                                 // 249
    }                                                                                                                  // 250
    return result;                                                                                                     // 251
}                                                                                                                      // 252
                                                                                                                       // 253
/**                                                                                                                    // 254
 * Converts `map` to its key-value pairs.                                                                              // 255
 *                                                                                                                     // 256
 * @private                                                                                                            // 257
 * @param {Object} map The map to convert.                                                                             // 258
 * @returns {Array} Returns the key-value pairs.                                                                       // 259
 */                                                                                                                    // 260
function mapToArray(map) {                                                                                             // 261
    var index = -1,                                                                                                    // 262
        result = Array(map.size);                                                                                      // 263
                                                                                                                       // 264
    map.forEach(function(value, key) {                                                                                 // 265
        result[++index] = [key, value];                                                                                // 266
    });                                                                                                                // 267
    return result;                                                                                                     // 268
}                                                                                                                      // 269
                                                                                                                       // 270
/**                                                                                                                    // 271
 * Creates a unary function that invokes `func` with its argument transformed.                                         // 272
 *                                                                                                                     // 273
 * @private                                                                                                            // 274
 * @param {Function} func The function to wrap.                                                                        // 275
 * @param {Function} transform The argument transform.                                                                 // 276
 * @returns {Function} Returns the new function.                                                                       // 277
 */                                                                                                                    // 278
function overArg(func, transform) {                                                                                    // 279
    return function(arg) {                                                                                             // 280
        return func(transform(arg));                                                                                   // 281
    };                                                                                                                 // 282
}                                                                                                                      // 283
                                                                                                                       // 284
/**                                                                                                                    // 285
 * Converts `set` to an array of its values.                                                                           // 286
 *                                                                                                                     // 287
 * @private                                                                                                            // 288
 * @param {Object} set The set to convert.                                                                             // 289
 * @returns {Array} Returns the values.                                                                                // 290
 */                                                                                                                    // 291
function setToArray(set) {                                                                                             // 292
    var index = -1,                                                                                                    // 293
        result = Array(set.size);                                                                                      // 294
                                                                                                                       // 295
    set.forEach(function(value) {                                                                                      // 296
        result[++index] = value;                                                                                       // 297
    });                                                                                                                // 298
    return result;                                                                                                     // 299
}                                                                                                                      // 300
                                                                                                                       // 301
/** Used for built-in method references. */                                                                            // 302
var arrayProto = Array.prototype,                                                                                      // 303
    funcProto = Function.prototype,                                                                                    // 304
    objectProto = Object.prototype;                                                                                    // 305
                                                                                                                       // 306
/** Used to detect overreaching core-js shims. */                                                                      // 307
var coreJsData = root["__core-js_shared__"];                                                                           // 308
                                                                                                                       // 309
/** Used to detect methods masquerading as native. */                                                                  // 310
var maskSrcKey = (function() {                                                                                         // 311
    var uid = /[^.]+$/.exec(                                                                                           // 312
        (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ""                                              // 313
    );                                                                                                                 // 314
    return uid ? "Symbol(src)_1." + uid : "";                                                                          // 315
})();                                                                                                                  // 316
                                                                                                                       // 317
/** Used to resolve the decompiled source of functions. */                                                             // 318
var funcToString = funcProto.toString;                                                                                 // 319
                                                                                                                       // 320
/** Used to check objects for own properties. */                                                                       // 321
var hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 322
                                                                                                                       // 323
/**                                                                                                                    // 324
 * Used to resolve the                                                                                                 // 325
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 326
 * of values.                                                                                                          // 327
 */                                                                                                                    // 328
var objectToString = objectProto.toString;                                                                             // 329
                                                                                                                       // 330
/** Used to detect if a method is native. */                                                                           // 331
var reIsNative = RegExp(                                                                                               // 332
    "^" +                                                                                                              // 333
        funcToString                                                                                                   // 334
            .call(hasOwnProperty)                                                                                      // 335
            .replace(reRegExpChar, "\\$&")                                                                             // 336
            .replace(                                                                                                  // 337
                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,                                              // 338
                "$1.*?"                                                                                                // 339
            ) +                                                                                                        // 340
        "$"                                                                                                            // 341
);                                                                                                                     // 342
                                                                                                                       // 343
/** Built-in value references. */                                                                                      // 344
var Buffer = moduleExports ? root.Buffer : undefined,                                                                  // 345
    Symbol = root.Symbol,                                                                                              // 346
    Uint8Array = root.Uint8Array,                                                                                      // 347
    getPrototype = overArg(Object.getPrototypeOf, Object),                                                             // 348
    objectCreate = Object.create,                                                                                      // 349
    propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                           // 350
    splice = arrayProto.splice;                                                                                        // 351
                                                                                                                       // 352
/* Built-in method references for those with the same name as other `lodash` methods. */                               // 353
var nativeGetSymbols = Object.getOwnPropertySymbols,                                                                   // 354
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,                                                             // 355
    nativeKeys = overArg(Object.keys, Object);                                                                         // 356
                                                                                                                       // 357
/* Built-in method references that are verified to be native. */                                                       // 358
var DataView = getNative(root, "DataView"),                                                                            // 359
    Map = getNative(root, "Map"),                                                                                      // 360
    Promise = getNative(root, "Promise"),                                                                              // 361
    Set = getNative(root, "Set"),                                                                                      // 362
    WeakMap = getNative(root, "WeakMap"),                                                                              // 363
    nativeCreate = getNative(Object, "create");                                                                        // 364
                                                                                                                       // 365
/** Used to detect maps, sets, and weakmaps. */                                                                        // 366
var dataViewCtorString = toSource(DataView),                                                                           // 367
    mapCtorString = toSource(Map),                                                                                     // 368
    promiseCtorString = toSource(Promise),                                                                             // 369
    setCtorString = toSource(Set),                                                                                     // 370
    weakMapCtorString = toSource(WeakMap);                                                                             // 371
                                                                                                                       // 372
/** Used to convert symbols to primitives and strings. */                                                              // 373
var symbolProto = Symbol ? Symbol.prototype : undefined,                                                               // 374
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;                                                     // 375
                                                                                                                       // 376
/**                                                                                                                    // 377
 * Creates a hash object.                                                                                              // 378
 *                                                                                                                     // 379
 * @private                                                                                                            // 380
 * @constructor                                                                                                        // 381
 * @param {Array} [entries] The key-value pairs to cache.                                                              // 382
 */                                                                                                                    // 383
function Hash(entries) {                                                                                               // 384
    var index = -1,                                                                                                    // 385
        length = entries ? entries.length : 0;                                                                         // 386
                                                                                                                       // 387
    this.clear();                                                                                                      // 388
    while (++index < length) {                                                                                         // 389
        var entry = entries[index];                                                                                    // 390
        this.set(entry[0], entry[1]);                                                                                  // 391
    }                                                                                                                  // 392
}                                                                                                                      // 393
                                                                                                                       // 394
/**                                                                                                                    // 395
 * Removes all key-value entries from the hash.                                                                        // 396
 *                                                                                                                     // 397
 * @private                                                                                                            // 398
 * @name clear                                                                                                         // 399
 * @memberOf Hash                                                                                                      // 400
 */                                                                                                                    // 401
function hashClear() {                                                                                                 // 402
    this.__data__ = nativeCreate ? nativeCreate(null) : {};                                                            // 403
}                                                                                                                      // 404
                                                                                                                       // 405
/**                                                                                                                    // 406
 * Removes `key` and its value from the hash.                                                                          // 407
 *                                                                                                                     // 408
 * @private                                                                                                            // 409
 * @name delete                                                                                                        // 410
 * @memberOf Hash                                                                                                      // 411
 * @param {Object} hash The hash to modify.                                                                            // 412
 * @param {string} key The key of the value to remove.                                                                 // 413
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 414
 */                                                                                                                    // 415
function hashDelete(key) {                                                                                             // 416
    return this.has(key) && delete this.__data__[key];                                                                 // 417
}                                                                                                                      // 418
                                                                                                                       // 419
/**                                                                                                                    // 420
 * Gets the hash value for `key`.                                                                                      // 421
 *                                                                                                                     // 422
 * @private                                                                                                            // 423
 * @name get                                                                                                           // 424
 * @memberOf Hash                                                                                                      // 425
 * @param {string} key The key of the value to get.                                                                    // 426
 * @returns {*} Returns the entry value.                                                                               // 427
 */                                                                                                                    // 428
function hashGet(key) {                                                                                                // 429
    var data = this.__data__;                                                                                          // 430
    if (nativeCreate) {                                                                                                // 431
        var result = data[key];                                                                                        // 432
        return result === HASH_UNDEFINED ? undefined : result;                                                         // 433
    }                                                                                                                  // 434
    return hasOwnProperty.call(data, key) ? data[key] : undefined;                                                     // 435
}                                                                                                                      // 436
                                                                                                                       // 437
/**                                                                                                                    // 438
 * Checks if a hash value for `key` exists.                                                                            // 439
 *                                                                                                                     // 440
 * @private                                                                                                            // 441
 * @name has                                                                                                           // 442
 * @memberOf Hash                                                                                                      // 443
 * @param {string} key The key of the entry to check.                                                                  // 444
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 445
 */                                                                                                                    // 446
function hashHas(key) {                                                                                                // 447
    var data = this.__data__;                                                                                          // 448
    return nativeCreate                                                                                                // 449
        ? data[key] !== undefined                                                                                      // 450
        : hasOwnProperty.call(data, key);                                                                              // 451
}                                                                                                                      // 452
                                                                                                                       // 453
/**                                                                                                                    // 454
 * Sets the hash `key` to `value`.                                                                                     // 455
 *                                                                                                                     // 456
 * @private                                                                                                            // 457
 * @name set                                                                                                           // 458
 * @memberOf Hash                                                                                                      // 459
 * @param {string} key The key of the value to set.                                                                    // 460
 * @param {*} value The value to set.                                                                                  // 461
 * @returns {Object} Returns the hash instance.                                                                        // 462
 */                                                                                                                    // 463
function hashSet(key, value) {                                                                                         // 464
    var data = this.__data__;                                                                                          // 465
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;                                          // 466
    return this;                                                                                                       // 467
}                                                                                                                      // 468
                                                                                                                       // 469
// Add methods to `Hash`.                                                                                              // 470
Hash.prototype.clear = hashClear;                                                                                      // 471
Hash.prototype["delete"] = hashDelete;                                                                                 // 472
Hash.prototype.get = hashGet;                                                                                          // 473
Hash.prototype.has = hashHas;                                                                                          // 474
Hash.prototype.set = hashSet;                                                                                          // 475
                                                                                                                       // 476
/**                                                                                                                    // 477
 * Creates an list cache object.                                                                                       // 478
 *                                                                                                                     // 479
 * @private                                                                                                            // 480
 * @constructor                                                                                                        // 481
 * @param {Array} [entries] The key-value pairs to cache.                                                              // 482
 */                                                                                                                    // 483
function ListCache(entries) {                                                                                          // 484
    var index = -1,                                                                                                    // 485
        length = entries ? entries.length : 0;                                                                         // 486
                                                                                                                       // 487
    this.clear();                                                                                                      // 488
    while (++index < length) {                                                                                         // 489
        var entry = entries[index];                                                                                    // 490
        this.set(entry[0], entry[1]);                                                                                  // 491
    }                                                                                                                  // 492
}                                                                                                                      // 493
                                                                                                                       // 494
/**                                                                                                                    // 495
 * Removes all key-value entries from the list cache.                                                                  // 496
 *                                                                                                                     // 497
 * @private                                                                                                            // 498
 * @name clear                                                                                                         // 499
 * @memberOf ListCache                                                                                                 // 500
 */                                                                                                                    // 501
function listCacheClear() {                                                                                            // 502
    this.__data__ = [];                                                                                                // 503
}                                                                                                                      // 504
                                                                                                                       // 505
/**                                                                                                                    // 506
 * Removes `key` and its value from the list cache.                                                                    // 507
 *                                                                                                                     // 508
 * @private                                                                                                            // 509
 * @name delete                                                                                                        // 510
 * @memberOf ListCache                                                                                                 // 511
 * @param {string} key The key of the value to remove.                                                                 // 512
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 513
 */                                                                                                                    // 514
function listCacheDelete(key) {                                                                                        // 515
    var data = this.__data__,                                                                                          // 516
        index = assocIndexOf(data, key);                                                                               // 517
                                                                                                                       // 518
    if (index < 0) {                                                                                                   // 519
        return false;                                                                                                  // 520
    }                                                                                                                  // 521
    var lastIndex = data.length - 1;                                                                                   // 522
    if (index == lastIndex) {                                                                                          // 523
        data.pop();                                                                                                    // 524
    } else {                                                                                                           // 525
        splice.call(data, index, 1);                                                                                   // 526
    }                                                                                                                  // 527
    return true;                                                                                                       // 528
}                                                                                                                      // 529
                                                                                                                       // 530
/**                                                                                                                    // 531
 * Gets the list cache value for `key`.                                                                                // 532
 *                                                                                                                     // 533
 * @private                                                                                                            // 534
 * @name get                                                                                                           // 535
 * @memberOf ListCache                                                                                                 // 536
 * @param {string} key The key of the value to get.                                                                    // 537
 * @returns {*} Returns the entry value.                                                                               // 538
 */                                                                                                                    // 539
function listCacheGet(key) {                                                                                           // 540
    var data = this.__data__,                                                                                          // 541
        index = assocIndexOf(data, key);                                                                               // 542
                                                                                                                       // 543
    return index < 0 ? undefined : data[index][1];                                                                     // 544
}                                                                                                                      // 545
                                                                                                                       // 546
/**                                                                                                                    // 547
 * Checks if a list cache value for `key` exists.                                                                      // 548
 *                                                                                                                     // 549
 * @private                                                                                                            // 550
 * @name has                                                                                                           // 551
 * @memberOf ListCache                                                                                                 // 552
 * @param {string} key The key of the entry to check.                                                                  // 553
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 554
 */                                                                                                                    // 555
function listCacheHas(key) {                                                                                           // 556
    return assocIndexOf(this.__data__, key) > -1;                                                                      // 557
}                                                                                                                      // 558
                                                                                                                       // 559
/**                                                                                                                    // 560
 * Sets the list cache `key` to `value`.                                                                               // 561
 *                                                                                                                     // 562
 * @private                                                                                                            // 563
 * @name set                                                                                                           // 564
 * @memberOf ListCache                                                                                                 // 565
 * @param {string} key The key of the value to set.                                                                    // 566
 * @param {*} value The value to set.                                                                                  // 567
 * @returns {Object} Returns the list cache instance.                                                                  // 568
 */                                                                                                                    // 569
function listCacheSet(key, value) {                                                                                    // 570
    var data = this.__data__,                                                                                          // 571
        index = assocIndexOf(data, key);                                                                               // 572
                                                                                                                       // 573
    if (index < 0) {                                                                                                   // 574
        data.push([key, value]);                                                                                       // 575
    } else {                                                                                                           // 576
        data[index][1] = value;                                                                                        // 577
    }                                                                                                                  // 578
    return this;                                                                                                       // 579
}                                                                                                                      // 580
                                                                                                                       // 581
// Add methods to `ListCache`.                                                                                         // 582
ListCache.prototype.clear = listCacheClear;                                                                            // 583
ListCache.prototype["delete"] = listCacheDelete;                                                                       // 584
ListCache.prototype.get = listCacheGet;                                                                                // 585
ListCache.prototype.has = listCacheHas;                                                                                // 586
ListCache.prototype.set = listCacheSet;                                                                                // 587
                                                                                                                       // 588
/**                                                                                                                    // 589
 * Creates a map cache object to store key-value pairs.                                                                // 590
 *                                                                                                                     // 591
 * @private                                                                                                            // 592
 * @constructor                                                                                                        // 593
 * @param {Array} [entries] The key-value pairs to cache.                                                              // 594
 */                                                                                                                    // 595
function MapCache(entries) {                                                                                           // 596
    var index = -1,                                                                                                    // 597
        length = entries ? entries.length : 0;                                                                         // 598
                                                                                                                       // 599
    this.clear();                                                                                                      // 600
    while (++index < length) {                                                                                         // 601
        var entry = entries[index];                                                                                    // 602
        this.set(entry[0], entry[1]);                                                                                  // 603
    }                                                                                                                  // 604
}                                                                                                                      // 605
                                                                                                                       // 606
/**                                                                                                                    // 607
 * Removes all key-value entries from the map.                                                                         // 608
 *                                                                                                                     // 609
 * @private                                                                                                            // 610
 * @name clear                                                                                                         // 611
 * @memberOf MapCache                                                                                                  // 612
 */                                                                                                                    // 613
function mapCacheClear() {                                                                                             // 614
    this.__data__ = {                                                                                                  // 615
        hash: new Hash(),                                                                                              // 616
        map: new (Map || ListCache)(),                                                                                 // 617
        string: new Hash()                                                                                             // 618
    };                                                                                                                 // 619
}                                                                                                                      // 620
                                                                                                                       // 621
/**                                                                                                                    // 622
 * Removes `key` and its value from the map.                                                                           // 623
 *                                                                                                                     // 624
 * @private                                                                                                            // 625
 * @name delete                                                                                                        // 626
 * @memberOf MapCache                                                                                                  // 627
 * @param {string} key The key of the value to remove.                                                                 // 628
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 629
 */                                                                                                                    // 630
function mapCacheDelete(key) {                                                                                         // 631
    return getMapData(this, key)["delete"](key);                                                                       // 632
}                                                                                                                      // 633
                                                                                                                       // 634
/**                                                                                                                    // 635
 * Gets the map value for `key`.                                                                                       // 636
 *                                                                                                                     // 637
 * @private                                                                                                            // 638
 * @name get                                                                                                           // 639
 * @memberOf MapCache                                                                                                  // 640
 * @param {string} key The key of the value to get.                                                                    // 641
 * @returns {*} Returns the entry value.                                                                               // 642
 */                                                                                                                    // 643
function mapCacheGet(key) {                                                                                            // 644
    return getMapData(this, key).get(key);                                                                             // 645
}                                                                                                                      // 646
                                                                                                                       // 647
/**                                                                                                                    // 648
 * Checks if a map value for `key` exists.                                                                             // 649
 *                                                                                                                     // 650
 * @private                                                                                                            // 651
 * @name has                                                                                                           // 652
 * @memberOf MapCache                                                                                                  // 653
 * @param {string} key The key of the entry to check.                                                                  // 654
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 655
 */                                                                                                                    // 656
function mapCacheHas(key) {                                                                                            // 657
    return getMapData(this, key).has(key);                                                                             // 658
}                                                                                                                      // 659
                                                                                                                       // 660
/**                                                                                                                    // 661
 * Sets the map `key` to `value`.                                                                                      // 662
 *                                                                                                                     // 663
 * @private                                                                                                            // 664
 * @name set                                                                                                           // 665
 * @memberOf MapCache                                                                                                  // 666
 * @param {string} key The key of the value to set.                                                                    // 667
 * @param {*} value The value to set.                                                                                  // 668
 * @returns {Object} Returns the map cache instance.                                                                   // 669
 */                                                                                                                    // 670
function mapCacheSet(key, value) {                                                                                     // 671
    getMapData(this, key).set(key, value);                                                                             // 672
    return this;                                                                                                       // 673
}                                                                                                                      // 674
                                                                                                                       // 675
// Add methods to `MapCache`.                                                                                          // 676
MapCache.prototype.clear = mapCacheClear;                                                                              // 677
MapCache.prototype["delete"] = mapCacheDelete;                                                                         // 678
MapCache.prototype.get = mapCacheGet;                                                                                  // 679
MapCache.prototype.has = mapCacheHas;                                                                                  // 680
MapCache.prototype.set = mapCacheSet;                                                                                  // 681
                                                                                                                       // 682
/**                                                                                                                    // 683
 * Creates a stack cache object to store key-value pairs.                                                              // 684
 *                                                                                                                     // 685
 * @private                                                                                                            // 686
 * @constructor                                                                                                        // 687
 * @param {Array} [entries] The key-value pairs to cache.                                                              // 688
 */                                                                                                                    // 689
function Stack(entries) {                                                                                              // 690
    this.__data__ = new ListCache(entries);                                                                            // 691
}                                                                                                                      // 692
                                                                                                                       // 693
/**                                                                                                                    // 694
 * Removes all key-value entries from the stack.                                                                       // 695
 *                                                                                                                     // 696
 * @private                                                                                                            // 697
 * @name clear                                                                                                         // 698
 * @memberOf Stack                                                                                                     // 699
 */                                                                                                                    // 700
function stackClear() {                                                                                                // 701
    this.__data__ = new ListCache();                                                                                   // 702
}                                                                                                                      // 703
                                                                                                                       // 704
/**                                                                                                                    // 705
 * Removes `key` and its value from the stack.                                                                         // 706
 *                                                                                                                     // 707
 * @private                                                                                                            // 708
 * @name delete                                                                                                        // 709
 * @memberOf Stack                                                                                                     // 710
 * @param {string} key The key of the value to remove.                                                                 // 711
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 712
 */                                                                                                                    // 713
function stackDelete(key) {                                                                                            // 714
    return this.__data__["delete"](key);                                                                               // 715
}                                                                                                                      // 716
                                                                                                                       // 717
/**                                                                                                                    // 718
 * Gets the stack value for `key`.                                                                                     // 719
 *                                                                                                                     // 720
 * @private                                                                                                            // 721
 * @name get                                                                                                           // 722
 * @memberOf Stack                                                                                                     // 723
 * @param {string} key The key of the value to get.                                                                    // 724
 * @returns {*} Returns the entry value.                                                                               // 725
 */                                                                                                                    // 726
function stackGet(key) {                                                                                               // 727
    return this.__data__.get(key);                                                                                     // 728
}                                                                                                                      // 729
                                                                                                                       // 730
/**                                                                                                                    // 731
 * Checks if a stack value for `key` exists.                                                                           // 732
 *                                                                                                                     // 733
 * @private                                                                                                            // 734
 * @name has                                                                                                           // 735
 * @memberOf Stack                                                                                                     // 736
 * @param {string} key The key of the entry to check.                                                                  // 737
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 738
 */                                                                                                                    // 739
function stackHas(key) {                                                                                               // 740
    return this.__data__.has(key);                                                                                     // 741
}                                                                                                                      // 742
                                                                                                                       // 743
/**                                                                                                                    // 744
 * Sets the stack `key` to `value`.                                                                                    // 745
 *                                                                                                                     // 746
 * @private                                                                                                            // 747
 * @name set                                                                                                           // 748
 * @memberOf Stack                                                                                                     // 749
 * @param {string} key The key of the value to set.                                                                    // 750
 * @param {*} value The value to set.                                                                                  // 751
 * @returns {Object} Returns the stack cache instance.                                                                 // 752
 */                                                                                                                    // 753
function stackSet(key, value) {                                                                                        // 754
    var cache = this.__data__;                                                                                         // 755
    if (cache instanceof ListCache) {                                                                                  // 756
        var pairs = cache.__data__;                                                                                    // 757
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {                                                             // 758
            pairs.push([key, value]);                                                                                  // 759
            return this;                                                                                               // 760
        }                                                                                                              // 761
        cache = this.__data__ = new MapCache(pairs);                                                                   // 762
    }                                                                                                                  // 763
    cache.set(key, value);                                                                                             // 764
    return this;                                                                                                       // 765
}                                                                                                                      // 766
                                                                                                                       // 767
// Add methods to `Stack`.                                                                                             // 768
Stack.prototype.clear = stackClear;                                                                                    // 769
Stack.prototype["delete"] = stackDelete;                                                                               // 770
Stack.prototype.get = stackGet;                                                                                        // 771
Stack.prototype.has = stackHas;                                                                                        // 772
Stack.prototype.set = stackSet;                                                                                        // 773
                                                                                                                       // 774
/**                                                                                                                    // 775
 * Creates an array of the enumerable property names of the array-like `value`.                                        // 776
 *                                                                                                                     // 777
 * @private                                                                                                            // 778
 * @param {*} value The value to query.                                                                                // 779
 * @param {boolean} inherited Specify returning inherited property names.                                              // 780
 * @returns {Array} Returns the array of property names.                                                               // 781
 */                                                                                                                    // 782
function arrayLikeKeys(value, inherited) {                                                                             // 783
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                  // 784
    // Safari 9 makes `arguments.length` enumerable in strict mode.                                                    // 785
    var result =                                                                                                       // 786
        isArray(value) || isArguments(value)                                                                           // 787
            ? baseTimes(value.length, String)                                                                          // 788
            : [];                                                                                                      // 789
                                                                                                                       // 790
    var length = result.length,                                                                                        // 791
        skipIndexes = !!length;                                                                                        // 792
                                                                                                                       // 793
    for (var key in value) {                                                                                           // 794
        if (                                                                                                           // 795
            (inherited || hasOwnProperty.call(value, key)) &&                                                          // 796
            !(skipIndexes && (key == "length" || isIndex(key, length)))                                                // 797
        ) {                                                                                                            // 798
            result.push(key);                                                                                          // 799
        }                                                                                                              // 800
    }                                                                                                                  // 801
    return result;                                                                                                     // 802
}                                                                                                                      // 803
                                                                                                                       // 804
/**                                                                                                                    // 805
 * Assigns `value` to `key` of `object` if the existing value is not equivalent                                        // 806
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                              // 807
 * for equality comparisons.                                                                                           // 808
 *                                                                                                                     // 809
 * @private                                                                                                            // 810
 * @param {Object} object The object to modify.                                                                        // 811
 * @param {string} key The key of the property to assign.                                                              // 812
 * @param {*} value The value to assign.                                                                               // 813
 */                                                                                                                    // 814
function assignValue(object, key, value) {                                                                             // 815
    var objValue = object[key];                                                                                        // 816
    if (                                                                                                               // 817
        !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||                                                  // 818
        (value === undefined && !(key in object))                                                                      // 819
    ) {                                                                                                                // 820
        object[key] = value;                                                                                           // 821
    }                                                                                                                  // 822
}                                                                                                                      // 823
                                                                                                                       // 824
/**                                                                                                                    // 825
 * Gets the index at which the `key` is found in `array` of key-value pairs.                                           // 826
 *                                                                                                                     // 827
 * @private                                                                                                            // 828
 * @param {Array} array The array to inspect.                                                                          // 829
 * @param {*} key The key to search for.                                                                               // 830
 * @returns {number} Returns the index of the matched value, else `-1`.                                                // 831
 */                                                                                                                    // 832
function assocIndexOf(array, key) {                                                                                    // 833
    var length = array.length;                                                                                         // 834
    while (length--) {                                                                                                 // 835
        if (eq(array[length][0], key)) {                                                                               // 836
            return length;                                                                                             // 837
        }                                                                                                              // 838
    }                                                                                                                  // 839
    return -1;                                                                                                         // 840
}                                                                                                                      // 841
                                                                                                                       // 842
/**                                                                                                                    // 843
 * The base implementation of `_.assign` without support for multiple sources                                          // 844
 * or `customizer` functions.                                                                                          // 845
 *                                                                                                                     // 846
 * @private                                                                                                            // 847
 * @param {Object} object The destination object.                                                                      // 848
 * @param {Object} source The source object.                                                                           // 849
 * @returns {Object} Returns `object`.                                                                                 // 850
 */                                                                                                                    // 851
function baseAssign(object, source) {                                                                                  // 852
    return object && copyObject(source, keys(source), object);                                                         // 853
}                                                                                                                      // 854
                                                                                                                       // 855
/**                                                                                                                    // 856
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks                                                 // 857
 * traversed objects.                                                                                                  // 858
 *                                                                                                                     // 859
 * @private                                                                                                            // 860
 * @param {*} value The value to clone.                                                                                // 861
 * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 862
 * @param {boolean} [isFull] Specify a clone including symbols.                                                        // 863
 * @param {Function} [customizer] The function to customize cloning.                                                   // 864
 * @param {string} [key] The key of `value`.                                                                           // 865
 * @param {Object} [object] The parent object of `value`.                                                              // 866
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.                                      // 867
 * @returns {*} Returns the cloned value.                                                                              // 868
 */                                                                                                                    // 869
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {                                            // 870
    var result;                                                                                                        // 871
    if (customizer) {                                                                                                  // 872
        result = object                                                                                                // 873
            ? customizer(value, key, object, stack)                                                                    // 874
            : customizer(value);                                                                                       // 875
    }                                                                                                                  // 876
    if (result !== undefined) {                                                                                        // 877
        return result;                                                                                                 // 878
    }                                                                                                                  // 879
    if (!isObject(value)) {                                                                                            // 880
        return value;                                                                                                  // 881
    }                                                                                                                  // 882
    var isArr = isArray(value);                                                                                        // 883
    if (isArr) {                                                                                                       // 884
        result = initCloneArray(value);                                                                                // 885
        if (!isDeep) {                                                                                                 // 886
            return copyArray(value, result);                                                                           // 887
        }                                                                                                              // 888
    } else {                                                                                                           // 889
        var tag = getTag(value),                                                                                       // 890
            isFunc = tag == funcTag || tag == genTag;                                                                  // 891
                                                                                                                       // 892
        if (isBuffer(value)) {                                                                                         // 893
            return cloneBuffer(value, isDeep);                                                                         // 894
        }                                                                                                              // 895
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                               // 896
            if (isHostObject(value)) {                                                                                 // 897
                return object ? value : {};                                                                            // 898
            }                                                                                                          // 899
            result = initCloneObject(isFunc ? {} : value);                                                             // 900
            if (!isDeep) {                                                                                             // 901
                return copySymbols(value, baseAssign(result, value));                                                  // 902
            }                                                                                                          // 903
        } else {                                                                                                       // 904
            if (!cloneableTags[tag]) {                                                                                 // 905
                return object ? value : {};                                                                            // 906
            }                                                                                                          // 907
            result = initCloneByTag(value, tag, baseClone, isDeep);                                                    // 908
        }                                                                                                              // 909
    }                                                                                                                  // 910
    // Check for circular references and return its corresponding clone.                                               // 911
    stack || (stack = new Stack());                                                                                    // 912
    var stacked = stack.get(value);                                                                                    // 913
    if (stacked) {                                                                                                     // 914
        return stacked;                                                                                                // 915
    }                                                                                                                  // 916
    stack.set(value, result);                                                                                          // 917
                                                                                                                       // 918
    if (!isArr) {                                                                                                      // 919
        var props = isFull ? getAllKeys(value) : keys(value);                                                          // 920
    }                                                                                                                  // 921
    arrayEach(props || value, function(subValue, key) {                                                                // 922
        if (props) {                                                                                                   // 923
            key = subValue;                                                                                            // 924
            subValue = value[key];                                                                                     // 925
        }                                                                                                              // 926
        // Recursively populate clone (susceptible to call stack limits).                                              // 927
        assignValue(                                                                                                   // 928
            result,                                                                                                    // 929
            key,                                                                                                       // 930
            baseClone(subValue, isDeep, isFull, customizer, key, value, stack)                                         // 931
        );                                                                                                             // 932
    });                                                                                                                // 933
    return result;                                                                                                     // 934
}                                                                                                                      // 935
                                                                                                                       // 936
/**                                                                                                                    // 937
 * The base implementation of `_.create` without support for assigning                                                 // 938
 * properties to the created object.                                                                                   // 939
 *                                                                                                                     // 940
 * @private                                                                                                            // 941
 * @param {Object} prototype The object to inherit from.                                                               // 942
 * @returns {Object} Returns the new object.                                                                           // 943
 */                                                                                                                    // 944
function baseCreate(proto) {                                                                                           // 945
    return isObject(proto) ? objectCreate(proto) : {};                                                                 // 946
}                                                                                                                      // 947
                                                                                                                       // 948
/**                                                                                                                    // 949
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses                                               // 950
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and                                               // 951
 * symbols of `object`.                                                                                                // 952
 *                                                                                                                     // 953
 * @private                                                                                                            // 954
 * @param {Object} object The object to query.                                                                         // 955
 * @param {Function} keysFunc The function to get the keys of `object`.                                                // 956
 * @param {Function} symbolsFunc The function to get the symbols of `object`.                                          // 957
 * @returns {Array} Returns the array of property names and symbols.                                                   // 958
 */                                                                                                                    // 959
function baseGetAllKeys(object, keysFunc, symbolsFunc) {                                                               // 960
    var result = keysFunc(object);                                                                                     // 961
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));                                          // 962
}                                                                                                                      // 963
                                                                                                                       // 964
/**                                                                                                                    // 965
 * The base implementation of `getTag`.                                                                                // 966
 *                                                                                                                     // 967
 * @private                                                                                                            // 968
 * @param {*} value The value to query.                                                                                // 969
 * @returns {string} Returns the `toStringTag`.                                                                        // 970
 */                                                                                                                    // 971
function baseGetTag(value) {                                                                                           // 972
    return objectToString.call(value);                                                                                 // 973
}                                                                                                                      // 974
                                                                                                                       // 975
/**                                                                                                                    // 976
 * The base implementation of `_.isNative` without bad shim checks.                                                    // 977
 *                                                                                                                     // 978
 * @private                                                                                                            // 979
 * @param {*} value The value to check.                                                                                // 980
 * @returns {boolean} Returns `true` if `value` is a native function,                                                  // 981
 *  else `false`.                                                                                                      // 982
 */                                                                                                                    // 983
function baseIsNative(value) {                                                                                         // 984
    if (!isObject(value) || isMasked(value)) {                                                                         // 985
        return false;                                                                                                  // 986
    }                                                                                                                  // 987
    var pattern =                                                                                                      // 988
        isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;                                          // 989
    return pattern.test(toSource(value));                                                                              // 990
}                                                                                                                      // 991
                                                                                                                       // 992
/**                                                                                                                    // 993
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.                                     // 994
 *                                                                                                                     // 995
 * @private                                                                                                            // 996
 * @param {Object} object The object to query.                                                                         // 997
 * @returns {Array} Returns the array of property names.                                                               // 998
 */                                                                                                                    // 999
function baseKeys(object) {                                                                                            // 1000
    if (!isPrototype(object)) {                                                                                        // 1001
        return nativeKeys(object);                                                                                     // 1002
    }                                                                                                                  // 1003
    var result = [];                                                                                                   // 1004
    for (var key in Object(object)) {                                                                                  // 1005
        if (hasOwnProperty.call(object, key) && key != "constructor") {                                                // 1006
            result.push(key);                                                                                          // 1007
        }                                                                                                              // 1008
    }                                                                                                                  // 1009
    return result;                                                                                                     // 1010
}                                                                                                                      // 1011
                                                                                                                       // 1012
/**                                                                                                                    // 1013
 * Creates a clone of  `buffer`.                                                                                       // 1014
 *                                                                                                                     // 1015
 * @private                                                                                                            // 1016
 * @param {Buffer} buffer The buffer to clone.                                                                         // 1017
 * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1018
 * @returns {Buffer} Returns the cloned buffer.                                                                        // 1019
 */                                                                                                                    // 1020
function cloneBuffer(buffer, isDeep) {                                                                                 // 1021
    if (isDeep) {                                                                                                      // 1022
        return buffer.slice();                                                                                         // 1023
    }                                                                                                                  // 1024
    var result = new buffer.constructor(buffer.length);                                                                // 1025
    buffer.copy(result);                                                                                               // 1026
    return result;                                                                                                     // 1027
}                                                                                                                      // 1028
                                                                                                                       // 1029
/**                                                                                                                    // 1030
 * Creates a clone of `arrayBuffer`.                                                                                   // 1031
 *                                                                                                                     // 1032
 * @private                                                                                                            // 1033
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.                                                         // 1034
 * @returns {ArrayBuffer} Returns the cloned array buffer.                                                             // 1035
 */                                                                                                                    // 1036
function cloneArrayBuffer(arrayBuffer) {                                                                               // 1037
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);                                                  // 1038
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));                                                           // 1039
    return result;                                                                                                     // 1040
}                                                                                                                      // 1041
                                                                                                                       // 1042
/**                                                                                                                    // 1043
 * Creates a clone of `dataView`.                                                                                      // 1044
 *                                                                                                                     // 1045
 * @private                                                                                                            // 1046
 * @param {Object} dataView The data view to clone.                                                                    // 1047
 * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1048
 * @returns {Object} Returns the cloned data view.                                                                     // 1049
 */                                                                                                                    // 1050
function cloneDataView(dataView, isDeep) {                                                                             // 1051
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;                                         // 1052
    return new dataView.constructor(                                                                                   // 1053
        buffer,                                                                                                        // 1054
        dataView.byteOffset,                                                                                           // 1055
        dataView.byteLength                                                                                            // 1056
    );                                                                                                                 // 1057
}                                                                                                                      // 1058
                                                                                                                       // 1059
/**                                                                                                                    // 1060
 * Creates a clone of `map`.                                                                                           // 1061
 *                                                                                                                     // 1062
 * @private                                                                                                            // 1063
 * @param {Object} map The map to clone.                                                                               // 1064
 * @param {Function} cloneFunc The function to clone values.                                                           // 1065
 * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1066
 * @returns {Object} Returns the cloned map.                                                                           // 1067
 */                                                                                                                    // 1068
function cloneMap(map, isDeep, cloneFunc) {                                                                            // 1069
    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);                                           // 1070
    return arrayReduce(array, addMapEntry, new map.constructor());                                                     // 1071
}                                                                                                                      // 1072
                                                                                                                       // 1073
/**                                                                                                                    // 1074
 * Creates a clone of `regexp`.                                                                                        // 1075
 *                                                                                                                     // 1076
 * @private                                                                                                            // 1077
 * @param {Object} regexp The regexp to clone.                                                                         // 1078
 * @returns {Object} Returns the cloned regexp.                                                                        // 1079
 */                                                                                                                    // 1080
function cloneRegExp(regexp) {                                                                                         // 1081
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));                                          // 1082
    result.lastIndex = regexp.lastIndex;                                                                               // 1083
    return result;                                                                                                     // 1084
}                                                                                                                      // 1085
                                                                                                                       // 1086
/**                                                                                                                    // 1087
 * Creates a clone of `set`.                                                                                           // 1088
 *                                                                                                                     // 1089
 * @private                                                                                                            // 1090
 * @param {Object} set The set to clone.                                                                               // 1091
 * @param {Function} cloneFunc The function to clone values.                                                           // 1092
 * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1093
 * @returns {Object} Returns the cloned set.                                                                           // 1094
 */                                                                                                                    // 1095
function cloneSet(set, isDeep, cloneFunc) {                                                                            // 1096
    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);                                           // 1097
    return arrayReduce(array, addSetEntry, new set.constructor());                                                     // 1098
}                                                                                                                      // 1099
                                                                                                                       // 1100
/**                                                                                                                    // 1101
 * Creates a clone of the `symbol` object.                                                                             // 1102
 *                                                                                                                     // 1103
 * @private                                                                                                            // 1104
 * @param {Object} symbol The symbol object to clone.                                                                  // 1105
 * @returns {Object} Returns the cloned symbol object.                                                                 // 1106
 */                                                                                                                    // 1107
function cloneSymbol(symbol) {                                                                                         // 1108
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};                                                    // 1109
}                                                                                                                      // 1110
                                                                                                                       // 1111
/**                                                                                                                    // 1112
 * Creates a clone of `typedArray`.                                                                                    // 1113
 *                                                                                                                     // 1114
 * @private                                                                                                            // 1115
 * @param {Object} typedArray The typed array to clone.                                                                // 1116
 * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1117
 * @returns {Object} Returns the cloned typed array.                                                                   // 1118
 */                                                                                                                    // 1119
function cloneTypedArray(typedArray, isDeep) {                                                                         // 1120
    var buffer = isDeep                                                                                                // 1121
        ? cloneArrayBuffer(typedArray.buffer)                                                                          // 1122
        : typedArray.buffer;                                                                                           // 1123
    return new typedArray.constructor(                                                                                 // 1124
        buffer,                                                                                                        // 1125
        typedArray.byteOffset,                                                                                         // 1126
        typedArray.length                                                                                              // 1127
    );                                                                                                                 // 1128
}                                                                                                                      // 1129
                                                                                                                       // 1130
/**                                                                                                                    // 1131
 * Copies the values of `source` to `array`.                                                                           // 1132
 *                                                                                                                     // 1133
 * @private                                                                                                            // 1134
 * @param {Array} source The array to copy values from.                                                                // 1135
 * @param {Array} [array=[]] The array to copy values to.                                                              // 1136
 * @returns {Array} Returns `array`.                                                                                   // 1137
 */                                                                                                                    // 1138
function copyArray(source, array) {                                                                                    // 1139
    var index = -1,                                                                                                    // 1140
        length = source.length;                                                                                        // 1141
                                                                                                                       // 1142
    array || (array = Array(length));                                                                                  // 1143
    while (++index < length) {                                                                                         // 1144
        array[index] = source[index];                                                                                  // 1145
    }                                                                                                                  // 1146
    return array;                                                                                                      // 1147
}                                                                                                                      // 1148
                                                                                                                       // 1149
/**                                                                                                                    // 1150
 * Copies properties of `source` to `object`.                                                                          // 1151
 *                                                                                                                     // 1152
 * @private                                                                                                            // 1153
 * @param {Object} source The object to copy properties from.                                                          // 1154
 * @param {Array} props The property identifiers to copy.                                                              // 1155
 * @param {Object} [object={}] The object to copy properties to.                                                       // 1156
 * @param {Function} [customizer] The function to customize copied values.                                             // 1157
 * @returns {Object} Returns `object`.                                                                                 // 1158
 */                                                                                                                    // 1159
function copyObject(source, props, object, customizer) {                                                               // 1160
    object || (object = {});                                                                                           // 1161
                                                                                                                       // 1162
    var index = -1,                                                                                                    // 1163
        length = props.length;                                                                                         // 1164
                                                                                                                       // 1165
    while (++index < length) {                                                                                         // 1166
        var key = props[index];                                                                                        // 1167
                                                                                                                       // 1168
        var newValue = customizer                                                                                      // 1169
            ? customizer(object[key], source[key], key, object, source)                                                // 1170
            : undefined;                                                                                               // 1171
                                                                                                                       // 1172
        assignValue(                                                                                                   // 1173
            object,                                                                                                    // 1174
            key,                                                                                                       // 1175
            newValue === undefined ? source[key] : newValue                                                            // 1176
        );                                                                                                             // 1177
    }                                                                                                                  // 1178
    return object;                                                                                                     // 1179
}                                                                                                                      // 1180
                                                                                                                       // 1181
/**                                                                                                                    // 1182
 * Copies own symbol properties of `source` to `object`.                                                               // 1183
 *                                                                                                                     // 1184
 * @private                                                                                                            // 1185
 * @param {Object} source The object to copy symbols from.                                                             // 1186
 * @param {Object} [object={}] The object to copy symbols to.                                                          // 1187
 * @returns {Object} Returns `object`.                                                                                 // 1188
 */                                                                                                                    // 1189
function copySymbols(source, object) {                                                                                 // 1190
    return copyObject(source, getSymbols(source), object);                                                             // 1191
}                                                                                                                      // 1192
                                                                                                                       // 1193
/**                                                                                                                    // 1194
 * Creates an array of own enumerable property names and symbols of `object`.                                          // 1195
 *                                                                                                                     // 1196
 * @private                                                                                                            // 1197
 * @param {Object} object The object to query.                                                                         // 1198
 * @returns {Array} Returns the array of property names and symbols.                                                   // 1199
 */                                                                                                                    // 1200
function getAllKeys(object) {                                                                                          // 1201
    return baseGetAllKeys(object, keys, getSymbols);                                                                   // 1202
}                                                                                                                      // 1203
                                                                                                                       // 1204
/**                                                                                                                    // 1205
 * Gets the data for `map`.                                                                                            // 1206
 *                                                                                                                     // 1207
 * @private                                                                                                            // 1208
 * @param {Object} map The map to query.                                                                               // 1209
 * @param {string} key The reference key.                                                                              // 1210
 * @returns {*} Returns the map data.                                                                                  // 1211
 */                                                                                                                    // 1212
function getMapData(map, key) {                                                                                        // 1213
    var data = map.__data__;                                                                                           // 1214
    return isKeyable(key)                                                                                              // 1215
        ? data[typeof key == "string" ? "string" : "hash"]                                                             // 1216
        : data.map;                                                                                                    // 1217
}                                                                                                                      // 1218
                                                                                                                       // 1219
/**                                                                                                                    // 1220
 * Gets the native function at `key` of `object`.                                                                      // 1221
 *                                                                                                                     // 1222
 * @private                                                                                                            // 1223
 * @param {Object} object The object to query.                                                                         // 1224
 * @param {string} key The key of the method to get.                                                                   // 1225
 * @returns {*} Returns the function if it's native, else `undefined`.                                                 // 1226
 */                                                                                                                    // 1227
function getNative(object, key) {                                                                                      // 1228
    var value = getValue(object, key);                                                                                 // 1229
    return baseIsNative(value) ? value : undefined;                                                                    // 1230
}                                                                                                                      // 1231
                                                                                                                       // 1232
/**                                                                                                                    // 1233
 * Creates an array of the own enumerable symbol properties of `object`.                                               // 1234
 *                                                                                                                     // 1235
 * @private                                                                                                            // 1236
 * @param {Object} object The object to query.                                                                         // 1237
 * @returns {Array} Returns the array of symbols.                                                                      // 1238
 */                                                                                                                    // 1239
var getSymbols = nativeGetSymbols                                                                                      // 1240
    ? overArg(nativeGetSymbols, Object)                                                                                // 1241
    : stubArray;                                                                                                       // 1242
                                                                                                                       // 1243
/**                                                                                                                    // 1244
 * Gets the `toStringTag` of `value`.                                                                                  // 1245
 *                                                                                                                     // 1246
 * @private                                                                                                            // 1247
 * @param {*} value The value to query.                                                                                // 1248
 * @returns {string} Returns the `toStringTag`.                                                                        // 1249
 */                                                                                                                    // 1250
var getTag = baseGetTag;                                                                                               // 1251
                                                                                                                       // 1252
// Fallback for data views, maps, sets, and weak maps in IE 11,                                                        // 1253
// for data views in Edge < 14, and promises in Node.js.                                                               // 1254
if (                                                                                                                   // 1255
    (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||                                           // 1256
    (Map && getTag(new Map()) != mapTag) ||                                                                            // 1257
    (Promise && getTag(Promise.resolve()) != promiseTag) ||                                                            // 1258
    (Set && getTag(new Set()) != setTag) ||                                                                            // 1259
    (WeakMap && getTag(new WeakMap()) != weakMapTag)                                                                   // 1260
) {                                                                                                                    // 1261
    getTag = function(value) {                                                                                         // 1262
        var result = objectToString.call(value),                                                                       // 1263
            Ctor = result == objectTag ? value.constructor : undefined,                                                // 1264
            ctorString = Ctor ? toSource(Ctor) : undefined;                                                            // 1265
                                                                                                                       // 1266
        if (ctorString) {                                                                                              // 1267
            switch (ctorString) {                                                                                      // 1268
                case dataViewCtorString:                                                                               // 1269
                    return dataViewTag;                                                                                // 1270
                case mapCtorString:                                                                                    // 1271
                    return mapTag;                                                                                     // 1272
                case promiseCtorString:                                                                                // 1273
                    return promiseTag;                                                                                 // 1274
                case setCtorString:                                                                                    // 1275
                    return setTag;                                                                                     // 1276
                case weakMapCtorString:                                                                                // 1277
                    return weakMapTag;                                                                                 // 1278
            }                                                                                                          // 1279
        }                                                                                                              // 1280
        return result;                                                                                                 // 1281
    };                                                                                                                 // 1282
}                                                                                                                      // 1283
                                                                                                                       // 1284
/**                                                                                                                    // 1285
 * Initializes an array clone.                                                                                         // 1286
 *                                                                                                                     // 1287
 * @private                                                                                                            // 1288
 * @param {Array} array The array to clone.                                                                            // 1289
 * @returns {Array} Returns the initialized clone.                                                                     // 1290
 */                                                                                                                    // 1291
function initCloneArray(array) {                                                                                       // 1292
    var length = array.length,                                                                                         // 1293
        result = array.constructor(length);                                                                            // 1294
                                                                                                                       // 1295
    // Add properties assigned by `RegExp#exec`.                                                                       // 1296
    if (                                                                                                               // 1297
        length &&                                                                                                      // 1298
        typeof array[0] == "string" &&                                                                                 // 1299
        hasOwnProperty.call(array, "index")                                                                            // 1300
    ) {                                                                                                                // 1301
        result.index = array.index;                                                                                    // 1302
        result.input = array.input;                                                                                    // 1303
    }                                                                                                                  // 1304
    return result;                                                                                                     // 1305
}                                                                                                                      // 1306
                                                                                                                       // 1307
/**                                                                                                                    // 1308
 * Initializes an object clone.                                                                                        // 1309
 *                                                                                                                     // 1310
 * @private                                                                                                            // 1311
 * @param {Object} object The object to clone.                                                                         // 1312
 * @returns {Object} Returns the initialized clone.                                                                    // 1313
 */                                                                                                                    // 1314
function initCloneObject(object) {                                                                                     // 1315
    return typeof object.constructor == "function" && !isPrototype(object)                                             // 1316
        ? baseCreate(getPrototype(object))                                                                             // 1317
        : {};                                                                                                          // 1318
}                                                                                                                      // 1319
                                                                                                                       // 1320
/**                                                                                                                    // 1321
 * Initializes an object clone based on its `toStringTag`.                                                             // 1322
 *                                                                                                                     // 1323
 * **Note:** This function only supports cloning values with tags of                                                   // 1324
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                        // 1325
 *                                                                                                                     // 1326
 * @private                                                                                                            // 1327
 * @param {Object} object The object to clone.                                                                         // 1328
 * @param {string} tag The `toStringTag` of the object to clone.                                                       // 1329
 * @param {Function} cloneFunc The function to clone values.                                                           // 1330
 * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1331
 * @returns {Object} Returns the initialized clone.                                                                    // 1332
 */                                                                                                                    // 1333
function initCloneByTag(object, tag, cloneFunc, isDeep) {                                                              // 1334
    var Ctor = object.constructor;                                                                                     // 1335
    switch (tag) {                                                                                                     // 1336
        case arrayBufferTag:                                                                                           // 1337
            return cloneArrayBuffer(object);                                                                           // 1338
                                                                                                                       // 1339
        case boolTag:                                                                                                  // 1340
        case dateTag:                                                                                                  // 1341
            return new Ctor(+object);                                                                                  // 1342
                                                                                                                       // 1343
        case dataViewTag:                                                                                              // 1344
            return cloneDataView(object, isDeep);                                                                      // 1345
                                                                                                                       // 1346
        case float32Tag:                                                                                               // 1347
        case float64Tag:                                                                                               // 1348
        case int8Tag:                                                                                                  // 1349
        case int16Tag:                                                                                                 // 1350
        case int32Tag:                                                                                                 // 1351
        case uint8Tag:                                                                                                 // 1352
        case uint8ClampedTag:                                                                                          // 1353
        case uint16Tag:                                                                                                // 1354
        case uint32Tag:                                                                                                // 1355
            return cloneTypedArray(object, isDeep);                                                                    // 1356
                                                                                                                       // 1357
        case mapTag:                                                                                                   // 1358
            return cloneMap(object, isDeep, cloneFunc);                                                                // 1359
                                                                                                                       // 1360
        case numberTag:                                                                                                // 1361
        case stringTag:                                                                                                // 1362
            return new Ctor(object);                                                                                   // 1363
                                                                                                                       // 1364
        case regexpTag:                                                                                                // 1365
            return cloneRegExp(object);                                                                                // 1366
                                                                                                                       // 1367
        case setTag:                                                                                                   // 1368
            return cloneSet(object, isDeep, cloneFunc);                                                                // 1369
                                                                                                                       // 1370
        case symbolTag:                                                                                                // 1371
            return cloneSymbol(object);                                                                                // 1372
    }                                                                                                                  // 1373
}                                                                                                                      // 1374
                                                                                                                       // 1375
/**                                                                                                                    // 1376
 * Checks if `value` is a valid array-like index.                                                                      // 1377
 *                                                                                                                     // 1378
 * @private                                                                                                            // 1379
 * @param {*} value The value to check.                                                                                // 1380
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 1381
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 1382
 */                                                                                                                    // 1383
function isIndex(value, length) {                                                                                      // 1384
    length = length == null ? MAX_SAFE_INTEGER : length;                                                               // 1385
    return (                                                                                                           // 1386
        !!length &&                                                                                                    // 1387
        (typeof value == "number" || reIsUint.test(value)) &&                                                          // 1388
        (value > -1 && value % 1 == 0 && value < length)                                                               // 1389
    );                                                                                                                 // 1390
}                                                                                                                      // 1391
                                                                                                                       // 1392
/**                                                                                                                    // 1393
 * Checks if `value` is suitable for use as unique object key.                                                         // 1394
 *                                                                                                                     // 1395
 * @private                                                                                                            // 1396
 * @param {*} value The value to check.                                                                                // 1397
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.                                             // 1398
 */                                                                                                                    // 1399
function isKeyable(value) {                                                                                            // 1400
    var type = typeof value;                                                                                           // 1401
    return type == "string" ||                                                                                         // 1402
        type == "number" ||                                                                                            // 1403
        type == "symbol" ||                                                                                            // 1404
        type == "boolean"                                                                                              // 1405
        ? value !== "__proto__"                                                                                        // 1406
        : value === null;                                                                                              // 1407
}                                                                                                                      // 1408
                                                                                                                       // 1409
/**                                                                                                                    // 1410
 * Checks if `func` has its source masked.                                                                             // 1411
 *                                                                                                                     // 1412
 * @private                                                                                                            // 1413
 * @param {Function} func The function to check.                                                                       // 1414
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.                                                // 1415
 */                                                                                                                    // 1416
function isMasked(func) {                                                                                              // 1417
    return !!maskSrcKey && maskSrcKey in func;                                                                         // 1418
}                                                                                                                      // 1419
                                                                                                                       // 1420
/**                                                                                                                    // 1421
 * Checks if `value` is likely a prototype object.                                                                     // 1422
 *                                                                                                                     // 1423
 * @private                                                                                                            // 1424
 * @param {*} value The value to check.                                                                                // 1425
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                          // 1426
 */                                                                                                                    // 1427
function isPrototype(value) {                                                                                          // 1428
    var Ctor = value && value.constructor,                                                                             // 1429
        proto = (typeof Ctor == "function" && Ctor.prototype) || objectProto;                                          // 1430
                                                                                                                       // 1431
    return value === proto;                                                                                            // 1432
}                                                                                                                      // 1433
                                                                                                                       // 1434
/**                                                                                                                    // 1435
 * Converts `func` to its source code.                                                                                 // 1436
 *                                                                                                                     // 1437
 * @private                                                                                                            // 1438
 * @param {Function} func The function to process.                                                                     // 1439
 * @returns {string} Returns the source code.                                                                          // 1440
 */                                                                                                                    // 1441
function toSource(func) {                                                                                              // 1442
    if (func != null) {                                                                                                // 1443
        try {                                                                                                          // 1444
            return funcToString.call(func);                                                                            // 1445
        } catch (e) {}                                                                                                 // 1446
        try {                                                                                                          // 1447
            return func + "";                                                                                          // 1448
        } catch (e) {}                                                                                                 // 1449
    }                                                                                                                  // 1450
    return "";                                                                                                         // 1451
}                                                                                                                      // 1452
                                                                                                                       // 1453
/**                                                                                                                    // 1454
 * This method is like `_.clone` except that it recursively clones `value`.                                            // 1455
 *                                                                                                                     // 1456
 * @static                                                                                                             // 1457
 * @memberOf _                                                                                                         // 1458
 * @since 1.0.0                                                                                                        // 1459
 * @category Lang                                                                                                      // 1460
 * @param {*} value The value to recursively clone.                                                                    // 1461
 * @returns {*} Returns the deep cloned value.                                                                         // 1462
 * @see _.clone                                                                                                        // 1463
 * @example                                                                                                            // 1464
 *                                                                                                                     // 1465
 * var objects = [{ 'a': 1 }, { 'b': 2 }];                                                                             // 1466
 *                                                                                                                     // 1467
 * var deep = _.cloneDeep(objects);                                                                                    // 1468
 * console.log(deep[0] === objects[0]);                                                                                // 1469
 * // => false                                                                                                         // 1470
 */                                                                                                                    // 1471
function cloneDeep(value) {                                                                                            // 1472
    return baseClone(value, true, true);                                                                               // 1473
}                                                                                                                      // 1474
                                                                                                                       // 1475
/**                                                                                                                    // 1476
 * Performs a                                                                                                          // 1477
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                                    // 1478
 * comparison between two values to determine if they are equivalent.                                                  // 1479
 *                                                                                                                     // 1480
 * @static                                                                                                             // 1481
 * @memberOf _                                                                                                         // 1482
 * @since 4.0.0                                                                                                        // 1483
 * @category Lang                                                                                                      // 1484
 * @param {*} value The value to compare.                                                                              // 1485
 * @param {*} other The other value to compare.                                                                        // 1486
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 1487
 * @example                                                                                                            // 1488
 *                                                                                                                     // 1489
 * var object = { 'a': 1 };                                                                                            // 1490
 * var other = { 'a': 1 };                                                                                             // 1491
 *                                                                                                                     // 1492
 * _.eq(object, object);                                                                                               // 1493
 * // => true                                                                                                          // 1494
 *                                                                                                                     // 1495
 * _.eq(object, other);                                                                                                // 1496
 * // => false                                                                                                         // 1497
 *                                                                                                                     // 1498
 * _.eq('a', 'a');                                                                                                     // 1499
 * // => true                                                                                                          // 1500
 *                                                                                                                     // 1501
 * _.eq('a', Object('a'));                                                                                             // 1502
 * // => false                                                                                                         // 1503
 *                                                                                                                     // 1504
 * _.eq(NaN, NaN);                                                                                                     // 1505
 * // => true                                                                                                          // 1506
 */                                                                                                                    // 1507
function eq(value, other) {                                                                                            // 1508
    return value === other || (value !== value && other !== other);                                                    // 1509
}                                                                                                                      // 1510
                                                                                                                       // 1511
/**                                                                                                                    // 1512
 * Checks if `value` is likely an `arguments` object.                                                                  // 1513
 *                                                                                                                     // 1514
 * @static                                                                                                             // 1515
 * @memberOf _                                                                                                         // 1516
 * @since 0.1.0                                                                                                        // 1517
 * @category Lang                                                                                                      // 1518
 * @param {*} value The value to check.                                                                                // 1519
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 1520
 *  else `false`.                                                                                                      // 1521
 * @example                                                                                                            // 1522
 *                                                                                                                     // 1523
 * _.isArguments(function() { return arguments; }());                                                                  // 1524
 * // => true                                                                                                          // 1525
 *                                                                                                                     // 1526
 * _.isArguments([1, 2, 3]);                                                                                           // 1527
 * // => false                                                                                                         // 1528
 */                                                                                                                    // 1529
function isArguments(value) {                                                                                          // 1530
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                  // 1531
    return (                                                                                                           // 1532
        isArrayLikeObject(value) &&                                                                                    // 1533
        hasOwnProperty.call(value, "callee") &&                                                                        // 1534
        (!propertyIsEnumerable.call(value, "callee") ||                                                                // 1535
            objectToString.call(value) == argsTag)                                                                     // 1536
    );                                                                                                                 // 1537
}                                                                                                                      // 1538
                                                                                                                       // 1539
/**                                                                                                                    // 1540
 * Checks if `value` is classified as an `Array` object.                                                               // 1541
 *                                                                                                                     // 1542
 * @static                                                                                                             // 1543
 * @memberOf _                                                                                                         // 1544
 * @since 0.1.0                                                                                                        // 1545
 * @category Lang                                                                                                      // 1546
 * @param {*} value The value to check.                                                                                // 1547
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 1548
 * @example                                                                                                            // 1549
 *                                                                                                                     // 1550
 * _.isArray([1, 2, 3]);                                                                                               // 1551
 * // => true                                                                                                          // 1552
 *                                                                                                                     // 1553
 * _.isArray(document.body.children);                                                                                  // 1554
 * // => false                                                                                                         // 1555
 *                                                                                                                     // 1556
 * _.isArray('abc');                                                                                                   // 1557
 * // => false                                                                                                         // 1558
 *                                                                                                                     // 1559
 * _.isArray(_.noop);                                                                                                  // 1560
 * // => false                                                                                                         // 1561
 */                                                                                                                    // 1562
var isArray = Array.isArray;                                                                                           // 1563
                                                                                                                       // 1564
/**                                                                                                                    // 1565
 * Checks if `value` is array-like. A value is considered array-like if it's                                           // 1566
 * not a function and has a `value.length` that's an integer greater than or                                           // 1567
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 1568
 *                                                                                                                     // 1569
 * @static                                                                                                             // 1570
 * @memberOf _                                                                                                         // 1571
 * @since 4.0.0                                                                                                        // 1572
 * @category Lang                                                                                                      // 1573
 * @param {*} value The value to check.                                                                                // 1574
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 1575
 * @example                                                                                                            // 1576
 *                                                                                                                     // 1577
 * _.isArrayLike([1, 2, 3]);                                                                                           // 1578
 * // => true                                                                                                          // 1579
 *                                                                                                                     // 1580
 * _.isArrayLike(document.body.children);                                                                              // 1581
 * // => true                                                                                                          // 1582
 *                                                                                                                     // 1583
 * _.isArrayLike('abc');                                                                                               // 1584
 * // => true                                                                                                          // 1585
 *                                                                                                                     // 1586
 * _.isArrayLike(_.noop);                                                                                              // 1587
 * // => false                                                                                                         // 1588
 */                                                                                                                    // 1589
function isArrayLike(value) {                                                                                          // 1590
    return value != null && isLength(value.length) && !isFunction(value);                                              // 1591
}                                                                                                                      // 1592
                                                                                                                       // 1593
/**                                                                                                                    // 1594
 * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 1595
 * is an object.                                                                                                       // 1596
 *                                                                                                                     // 1597
 * @static                                                                                                             // 1598
 * @memberOf _                                                                                                         // 1599
 * @since 4.0.0                                                                                                        // 1600
 * @category Lang                                                                                                      // 1601
 * @param {*} value The value to check.                                                                                // 1602
 * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 1603
 *  else `false`.                                                                                                      // 1604
 * @example                                                                                                            // 1605
 *                                                                                                                     // 1606
 * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 1607
 * // => true                                                                                                          // 1608
 *                                                                                                                     // 1609
 * _.isArrayLikeObject(document.body.children);                                                                        // 1610
 * // => true                                                                                                          // 1611
 *                                                                                                                     // 1612
 * _.isArrayLikeObject('abc');                                                                                         // 1613
 * // => false                                                                                                         // 1614
 *                                                                                                                     // 1615
 * _.isArrayLikeObject(_.noop);                                                                                        // 1616
 * // => false                                                                                                         // 1617
 */                                                                                                                    // 1618
function isArrayLikeObject(value) {                                                                                    // 1619
    return isObjectLike(value) && isArrayLike(value);                                                                  // 1620
}                                                                                                                      // 1621
                                                                                                                       // 1622
/**                                                                                                                    // 1623
 * Checks if `value` is a buffer.                                                                                      // 1624
 *                                                                                                                     // 1625
 * @static                                                                                                             // 1626
 * @memberOf _                                                                                                         // 1627
 * @since 4.3.0                                                                                                        // 1628
 * @category Lang                                                                                                      // 1629
 * @param {*} value The value to check.                                                                                // 1630
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.                                             // 1631
 * @example                                                                                                            // 1632
 *                                                                                                                     // 1633
 * _.isBuffer(new Buffer(2));                                                                                          // 1634
 * // => true                                                                                                          // 1635
 *                                                                                                                     // 1636
 * _.isBuffer(new Uint8Array(2));                                                                                      // 1637
 * // => false                                                                                                         // 1638
 */                                                                                                                    // 1639
var isBuffer = nativeIsBuffer || stubFalse;                                                                            // 1640
                                                                                                                       // 1641
/**                                                                                                                    // 1642
 * Checks if `value` is classified as a `Function` object.                                                             // 1643
 *                                                                                                                     // 1644
 * @static                                                                                                             // 1645
 * @memberOf _                                                                                                         // 1646
 * @since 0.1.0                                                                                                        // 1647
 * @category Lang                                                                                                      // 1648
 * @param {*} value The value to check.                                                                                // 1649
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 1650
 * @example                                                                                                            // 1651
 *                                                                                                                     // 1652
 * _.isFunction(_);                                                                                                    // 1653
 * // => true                                                                                                          // 1654
 *                                                                                                                     // 1655
 * _.isFunction(/abc/);                                                                                                // 1656
 * // => false                                                                                                         // 1657
 */                                                                                                                    // 1658
function isFunction(value) {                                                                                           // 1659
    // The use of `Object#toString` avoids issues with the `typeof` operator                                           // 1660
    // in Safari 8-9 which returns 'object' for typed array and other constructors.                                    // 1661
    var tag = isObject(value) ? objectToString.call(value) : "";                                                       // 1662
    return tag == funcTag || tag == genTag;                                                                            // 1663
}                                                                                                                      // 1664
                                                                                                                       // 1665
/**                                                                                                                    // 1666
 * Checks if `value` is a valid array-like length.                                                                     // 1667
 *                                                                                                                     // 1668
 * **Note:** This method is loosely based on                                                                           // 1669
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 1670
 *                                                                                                                     // 1671
 * @static                                                                                                             // 1672
 * @memberOf _                                                                                                         // 1673
 * @since 4.0.0                                                                                                        // 1674
 * @category Lang                                                                                                      // 1675
 * @param {*} value The value to check.                                                                                // 1676
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 1677
 * @example                                                                                                            // 1678
 *                                                                                                                     // 1679
 * _.isLength(3);                                                                                                      // 1680
 * // => true                                                                                                          // 1681
 *                                                                                                                     // 1682
 * _.isLength(Number.MIN_VALUE);                                                                                       // 1683
 * // => false                                                                                                         // 1684
 *                                                                                                                     // 1685
 * _.isLength(Infinity);                                                                                               // 1686
 * // => false                                                                                                         // 1687
 *                                                                                                                     // 1688
 * _.isLength('3');                                                                                                    // 1689
 * // => false                                                                                                         // 1690
 */                                                                                                                    // 1691
function isLength(value) {                                                                                             // 1692
    return (                                                                                                           // 1693
        typeof value == "number" &&                                                                                    // 1694
        value > -1 &&                                                                                                  // 1695
        value % 1 == 0 &&                                                                                              // 1696
        value <= MAX_SAFE_INTEGER                                                                                      // 1697
    );                                                                                                                 // 1698
}                                                                                                                      // 1699
                                                                                                                       // 1700
/**                                                                                                                    // 1701
 * Checks if `value` is the                                                                                            // 1702
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 1703
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 1704
 *                                                                                                                     // 1705
 * @static                                                                                                             // 1706
 * @memberOf _                                                                                                         // 1707
 * @since 0.1.0                                                                                                        // 1708
 * @category Lang                                                                                                      // 1709
 * @param {*} value The value to check.                                                                                // 1710
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 1711
 * @example                                                                                                            // 1712
 *                                                                                                                     // 1713
 * _.isObject({});                                                                                                     // 1714
 * // => true                                                                                                          // 1715
 *                                                                                                                     // 1716
 * _.isObject([1, 2, 3]);                                                                                              // 1717
 * // => true                                                                                                          // 1718
 *                                                                                                                     // 1719
 * _.isObject(_.noop);                                                                                                 // 1720
 * // => true                                                                                                          // 1721
 *                                                                                                                     // 1722
 * _.isObject(null);                                                                                                   // 1723
 * // => false                                                                                                         // 1724
 */                                                                                                                    // 1725
function isObject(value) {                                                                                             // 1726
    var type = typeof value;                                                                                           // 1727
    return !!value && (type == "object" || type == "function");                                                        // 1728
}                                                                                                                      // 1729
                                                                                                                       // 1730
/**                                                                                                                    // 1731
 * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 1732
 * and has a `typeof` result of "object".                                                                              // 1733
 *                                                                                                                     // 1734
 * @static                                                                                                             // 1735
 * @memberOf _                                                                                                         // 1736
 * @since 4.0.0                                                                                                        // 1737
 * @category Lang                                                                                                      // 1738
 * @param {*} value The value to check.                                                                                // 1739
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 1740
 * @example                                                                                                            // 1741
 *                                                                                                                     // 1742
 * _.isObjectLike({});                                                                                                 // 1743
 * // => true                                                                                                          // 1744
 *                                                                                                                     // 1745
 * _.isObjectLike([1, 2, 3]);                                                                                          // 1746
 * // => true                                                                                                          // 1747
 *                                                                                                                     // 1748
 * _.isObjectLike(_.noop);                                                                                             // 1749
 * // => false                                                                                                         // 1750
 *                                                                                                                     // 1751
 * _.isObjectLike(null);                                                                                               // 1752
 * // => false                                                                                                         // 1753
 */                                                                                                                    // 1754
function isObjectLike(value) {                                                                                         // 1755
    return !!value && typeof value == "object";                                                                        // 1756
}                                                                                                                      // 1757
                                                                                                                       // 1758
/**                                                                                                                    // 1759
 * Creates an array of the own enumerable property names of `object`.                                                  // 1760
 *                                                                                                                     // 1761
 * **Note:** Non-object values are coerced to objects. See the                                                         // 1762
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)                                              // 1763
 * for more details.                                                                                                   // 1764
 *                                                                                                                     // 1765
 * @static                                                                                                             // 1766
 * @since 0.1.0                                                                                                        // 1767
 * @memberOf _                                                                                                         // 1768
 * @category Object                                                                                                    // 1769
 * @param {Object} object The object to query.                                                                         // 1770
 * @returns {Array} Returns the array of property names.                                                               // 1771
 * @example                                                                                                            // 1772
 *                                                                                                                     // 1773
 * function Foo() {                                                                                                    // 1774
 *   this.a = 1;                                                                                                       // 1775
 *   this.b = 2;                                                                                                       // 1776
 * }                                                                                                                   // 1777
 *                                                                                                                     // 1778
 * Foo.prototype.c = 3;                                                                                                // 1779
 *                                                                                                                     // 1780
 * _.keys(new Foo);                                                                                                    // 1781
 * // => ['a', 'b'] (iteration order is not guaranteed)                                                                // 1782
 *                                                                                                                     // 1783
 * _.keys('hi');                                                                                                       // 1784
 * // => ['0', '1']                                                                                                    // 1785
 */                                                                                                                    // 1786
function keys(object) {                                                                                                // 1787
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);                                             // 1788
}                                                                                                                      // 1789
                                                                                                                       // 1790
/**                                                                                                                    // 1791
 * This method returns a new empty array.                                                                              // 1792
 *                                                                                                                     // 1793
 * @static                                                                                                             // 1794
 * @memberOf _                                                                                                         // 1795
 * @since 4.13.0                                                                                                       // 1796
 * @category Util                                                                                                      // 1797
 * @returns {Array} Returns the new empty array.                                                                       // 1798
 * @example                                                                                                            // 1799
 *                                                                                                                     // 1800
 * var arrays = _.times(2, _.stubArray);                                                                               // 1801
 *                                                                                                                     // 1802
 * console.log(arrays);                                                                                                // 1803
 * // => [[], []]                                                                                                      // 1804
 *                                                                                                                     // 1805
 * console.log(arrays[0] === arrays[1]);                                                                               // 1806
 * // => false                                                                                                         // 1807
 */                                                                                                                    // 1808
function stubArray() {                                                                                                 // 1809
    return [];                                                                                                         // 1810
}                                                                                                                      // 1811
                                                                                                                       // 1812
/**                                                                                                                    // 1813
 * This method returns `false`.                                                                                        // 1814
 *                                                                                                                     // 1815
 * @static                                                                                                             // 1816
 * @memberOf _                                                                                                         // 1817
 * @since 4.13.0                                                                                                       // 1818
 * @category Util                                                                                                      // 1819
 * @returns {boolean} Returns `false`.                                                                                 // 1820
 * @example                                                                                                            // 1821
 *                                                                                                                     // 1822
 * _.times(2, _.stubFalse);                                                                                            // 1823
 * // => [false, false]                                                                                                // 1824
 */                                                                                                                    // 1825
function stubFalse() {                                                                                                 // 1826
    return false;                                                                                                      // 1827
}                                                                                                                      // 1828
                                                                                                                       // 1829
module.exports = cloneDeep;                                                                                            // 1830
                                                                                                                       // 1831
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"dot-object":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// ../../.1.3.1.o1og0g.wvr4q++os+web.browser+web.cordova/npm/node_modules/dot-object/package.json                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "dot-object";                                                                                           // 1
exports.version = "1.5.4";                                                                                             // 2
exports.main = "index";                                                                                                // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/cultofcoders_grapher/node_modules/dot-object/index.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
function _process(v, mod) {                                                                                            // 3
    var i;                                                                                                             // 4
    var r;                                                                                                             // 5
                                                                                                                       // 6
    if (typeof mod === "function") {                                                                                   // 7
        r = mod(v);                                                                                                    // 8
        if (r !== undefined) {                                                                                         // 9
            v = r;                                                                                                     // 10
        }                                                                                                              // 11
    } else if (Array.isArray(mod)) {                                                                                   // 12
        for (i = 0; i < mod.length; i++) {                                                                             // 13
            r = mod[i](v);                                                                                             // 14
            if (r !== undefined) {                                                                                     // 15
                v = r;                                                                                                 // 16
            }                                                                                                          // 17
        }                                                                                                              // 18
    }                                                                                                                  // 19
                                                                                                                       // 20
    return v;                                                                                                          // 21
}                                                                                                                      // 22
                                                                                                                       // 23
function parseKey(key, val) {                                                                                          // 24
    // detect negative index notation                                                                                  // 25
    if (key[0] === "-" && Array.isArray(val) && /^-\d+$/.test(key)) {                                                  // 26
        return val.length + parseInt(key, 10);                                                                         // 27
    }                                                                                                                  // 28
    return key;                                                                                                        // 29
}                                                                                                                      // 30
                                                                                                                       // 31
function isIndex(k) {                                                                                                  // 32
    return /^\d+/.test(k);                                                                                             // 33
}                                                                                                                      // 34
                                                                                                                       // 35
function parsePath(path, sep) {                                                                                        // 36
    if (path.indexOf("[") >= 0) {                                                                                      // 37
        path = path.replace(/\[/g, ".").replace(/]/g, "");                                                             // 38
    }                                                                                                                  // 39
    return path.split(sep);                                                                                            // 40
}                                                                                                                      // 41
                                                                                                                       // 42
function DotObject(seperator, override, useArray) {                                                                    // 43
    if (!(this instanceof DotObject)) {                                                                                // 44
        return new DotObject(seperator, override, useArray);                                                           // 45
    }                                                                                                                  // 46
                                                                                                                       // 47
    if (typeof seperator === "undefined") seperator = ".";                                                             // 48
    if (typeof override === "undefined") override = false;                                                             // 49
    if (typeof useArray === "undefined") useArray = true;                                                              // 50
    this.seperator = seperator;                                                                                        // 51
    this.override = override;                                                                                          // 52
    this.useArray = useArray;                                                                                          // 53
                                                                                                                       // 54
    // contains touched arrays                                                                                         // 55
    this.cleanup = [];                                                                                                 // 56
}                                                                                                                      // 57
                                                                                                                       // 58
var dotDefault = new DotObject(".", false, true);                                                                      // 59
function wrap(method) {                                                                                                // 60
    return function() {                                                                                                // 61
        return dotDefault[method].apply(dotDefault, arguments);                                                        // 62
    };                                                                                                                 // 63
}                                                                                                                      // 64
                                                                                                                       // 65
DotObject.prototype._fill = function(a, obj, v, mod) {                                                                 // 66
    var k = a.shift();                                                                                                 // 67
                                                                                                                       // 68
    if (a.length > 0) {                                                                                                // 69
        obj[k] = obj[k] || (this.useArray && isIndex(a[0]) ? [] : {});                                                 // 70
                                                                                                                       // 71
        if (obj[k] !== Object(obj[k])) {                                                                               // 72
            if (this.override) {                                                                                       // 73
                obj[k] = {};                                                                                           // 74
            } else {                                                                                                   // 75
                throw new Error(                                                                                       // 76
                    "Trying to redefine `" + k + "` which is a " + typeof obj[k]                                       // 77
                );                                                                                                     // 78
            }                                                                                                          // 79
        }                                                                                                              // 80
                                                                                                                       // 81
        this._fill(a, obj[k], v, mod);                                                                                 // 82
    } else {                                                                                                           // 83
        if (                                                                                                           // 84
            !this.override &&                                                                                          // 85
            obj[k] === Object(obj[k]) &&                                                                               // 86
            Object.keys(obj[k]).length                                                                                 // 87
        ) {                                                                                                            // 88
            throw new Error("Trying to redefine non-empty obj['" + k + "']");                                          // 89
        }                                                                                                              // 90
                                                                                                                       // 91
        obj[k] = _process(v, mod);                                                                                     // 92
    }                                                                                                                  // 93
};                                                                                                                     // 94
                                                                                                                       // 95
/**                                                                                                                    // 96
 *                                                                                                                     // 97
 * Converts an object with dotted-key/value pairs to it's expanded version                                             // 98
 *                                                                                                                     // 99
 * Optionally transformed by a set of modifiers.                                                                       // 100
 *                                                                                                                     // 101
 * Usage:                                                                                                              // 102
 *                                                                                                                     // 103
 *   var row = {                                                                                                       // 104
 *     'nr': 200,                                                                                                      // 105
 *     'doc.name': '  My Document  '                                                                                   // 106
 *   }                                                                                                                 // 107
 *                                                                                                                     // 108
 *   var mods = {                                                                                                      // 109
 *     'doc.name': [_s.trim, _s.underscored]                                                                           // 110
 *   }                                                                                                                 // 111
 *                                                                                                                     // 112
 *   dot.object(row, mods)                                                                                             // 113
 *                                                                                                                     // 114
 * @param {Object} obj                                                                                                 // 115
 * @param {Object} mods                                                                                                // 116
 */                                                                                                                    // 117
DotObject.prototype.object = function(obj, mods) {                                                                     // 118
    var self = this;                                                                                                   // 119
                                                                                                                       // 120
    Object.keys(obj).forEach(function(k) {                                                                             // 121
        var mod = mods === undefined ? null : mods[k];                                                                 // 122
        // normalize array notation.                                                                                   // 123
        var ok = parsePath(k, self.seperator).join(self.seperator);                                                    // 124
                                                                                                                       // 125
        if (ok.indexOf(self.seperator) !== -1) {                                                                       // 126
            self._fill(ok.split(self.seperator), obj, obj[k], mod);                                                    // 127
            delete obj[k];                                                                                             // 128
        } else if (self.override) {                                                                                    // 129
            obj[k] = _process(obj[k], mod);                                                                            // 130
        }                                                                                                              // 131
    });                                                                                                                // 132
                                                                                                                       // 133
    return obj;                                                                                                        // 134
};                                                                                                                     // 135
                                                                                                                       // 136
/**                                                                                                                    // 137
 * @param {String} path dotted path                                                                                    // 138
 * @param {String} v value to be set                                                                                   // 139
 * @param {Object} obj object to be modified                                                                           // 140
 * @param {Function|Array} mod optional modifier                                                                       // 141
 */                                                                                                                    // 142
DotObject.prototype.str = function(path, v, obj, mod) {                                                                // 143
    if (path.indexOf(this.seperator) !== -1) {                                                                         // 144
        this._fill(path.split(this.seperator), obj, v, mod);                                                           // 145
    } else if (!obj.hasOwnProperty(path) || this.override) {                                                           // 146
        obj[path] = _process(v, mod);                                                                                  // 147
    }                                                                                                                  // 148
                                                                                                                       // 149
    return obj;                                                                                                        // 150
};                                                                                                                     // 151
                                                                                                                       // 152
/**                                                                                                                    // 153
 *                                                                                                                     // 154
 * Pick a value from an object using dot notation.                                                                     // 155
 *                                                                                                                     // 156
 * Optionally remove the value                                                                                         // 157
 *                                                                                                                     // 158
 * @param {String} path                                                                                                // 159
 * @param {Object} obj                                                                                                 // 160
 * @param {Boolean} remove                                                                                             // 161
 */                                                                                                                    // 162
DotObject.prototype.pick = function(path, obj, remove) {                                                               // 163
    var i;                                                                                                             // 164
    var keys;                                                                                                          // 165
    var val;                                                                                                           // 166
    var key;                                                                                                           // 167
    var cp;                                                                                                            // 168
                                                                                                                       // 169
    keys = parsePath(path, this.seperator);                                                                            // 170
    for (i = 0; i < keys.length; i++) {                                                                                // 171
        key = parseKey(keys[i], obj);                                                                                  // 172
        if (obj && typeof obj === "object" && key in obj) {                                                            // 173
            if (i === keys.length - 1) {                                                                               // 174
                if (remove) {                                                                                          // 175
                    val = obj[key];                                                                                    // 176
                    delete obj[key];                                                                                   // 177
                    if (Array.isArray(obj)) {                                                                          // 178
                        cp = keys.slice(0, -1).join(".");                                                              // 179
                        if (this.cleanup.indexOf(cp) === -1) {                                                         // 180
                            this.cleanup.push(cp);                                                                     // 181
                        }                                                                                              // 182
                    }                                                                                                  // 183
                    return val;                                                                                        // 184
                } else {                                                                                               // 185
                    return obj[key];                                                                                   // 186
                }                                                                                                      // 187
            } else {                                                                                                   // 188
                obj = obj[key];                                                                                        // 189
            }                                                                                                          // 190
        } else {                                                                                                       // 191
            return undefined;                                                                                          // 192
        }                                                                                                              // 193
    }                                                                                                                  // 194
    if (remove && Array.isArray(obj)) {                                                                                // 195
        obj = obj.filter(function(n) {                                                                                 // 196
            return n !== undefined;                                                                                    // 197
        });                                                                                                            // 198
    }                                                                                                                  // 199
    return obj;                                                                                                        // 200
};                                                                                                                     // 201
                                                                                                                       // 202
/**                                                                                                                    // 203
 *                                                                                                                     // 204
 * Remove value from an object using dot notation.                                                                     // 205
 *                                                                                                                     // 206
 * @param {String} path                                                                                                // 207
 * @param {Object} obj                                                                                                 // 208
 * @return {Mixed} The removed value                                                                                   // 209
 */                                                                                                                    // 210
DotObject.prototype.remove = function(path, obj) {                                                                     // 211
    var i;                                                                                                             // 212
                                                                                                                       // 213
    this.cleanup = [];                                                                                                 // 214
    if (Array.isArray(path)) {                                                                                         // 215
        for (i = 0; i < path.length; i++) {                                                                            // 216
            this.pick(path[i], obj, true);                                                                             // 217
        }                                                                                                              // 218
        this._cleanup(obj);                                                                                            // 219
        return obj;                                                                                                    // 220
    } else {                                                                                                           // 221
        return this.pick(path, obj, true);                                                                             // 222
    }                                                                                                                  // 223
};                                                                                                                     // 224
                                                                                                                       // 225
DotObject.prototype._cleanup = function(obj) {                                                                         // 226
    var ret;                                                                                                           // 227
    var i;                                                                                                             // 228
    var keys;                                                                                                          // 229
    var root;                                                                                                          // 230
    if (this.cleanup.length) {                                                                                         // 231
        for (i = 0; i < this.cleanup.length; i++) {                                                                    // 232
            keys = this.cleanup[i].split(".");                                                                         // 233
            root = keys.splice(0, -1).join(".");                                                                       // 234
            ret = root ? this.pick(root, obj) : obj;                                                                   // 235
            ret = ret[keys[0]].filter(function(v) {                                                                    // 236
                return v !== undefined;                                                                                // 237
            });                                                                                                        // 238
            this.set(this.cleanup[i], ret, obj);                                                                       // 239
        }                                                                                                              // 240
        this.cleanup = [];                                                                                             // 241
    }                                                                                                                  // 242
};                                                                                                                     // 243
                                                                                                                       // 244
// alias method                                                                                                        // 245
DotObject.prototype.del = DotObject.prototype.remove;                                                                  // 246
                                                                                                                       // 247
/**                                                                                                                    // 248
 *                                                                                                                     // 249
 * Move a property from one place to the other.                                                                        // 250
 *                                                                                                                     // 251
 * If the source path does not exist (undefined)                                                                       // 252
 * the target property will not be set.                                                                                // 253
 *                                                                                                                     // 254
 * @param {String} source                                                                                              // 255
 * @param {String} target                                                                                              // 256
 * @param {Object} obj                                                                                                 // 257
 * @param {Function|Array} mods                                                                                        // 258
 * @param {Boolean} merge                                                                                              // 259
 */                                                                                                                    // 260
DotObject.prototype.move = function(source, target, obj, mods, merge) {                                                // 261
    if (typeof mods === "function" || Array.isArray(mods)) {                                                           // 262
        this.set(                                                                                                      // 263
            target,                                                                                                    // 264
            _process(this.pick(source, obj, true), mods),                                                              // 265
            obj,                                                                                                       // 266
            merge                                                                                                      // 267
        );                                                                                                             // 268
    } else {                                                                                                           // 269
        merge = mods;                                                                                                  // 270
        this.set(target, this.pick(source, obj, true), obj, merge);                                                    // 271
    }                                                                                                                  // 272
                                                                                                                       // 273
    return obj;                                                                                                        // 274
};                                                                                                                     // 275
                                                                                                                       // 276
/**                                                                                                                    // 277
 *                                                                                                                     // 278
 * Transfer a property from one object to another object.                                                              // 279
 *                                                                                                                     // 280
 * If the source path does not exist (undefined)                                                                       // 281
 * the property on the other object will not be set.                                                                   // 282
 *                                                                                                                     // 283
 * @param {String} source                                                                                              // 284
 * @param {String} target                                                                                              // 285
 * @param {Object} obj1                                                                                                // 286
 * @param {Object} obj2                                                                                                // 287
 * @param {Function|Array} mods                                                                                        // 288
 * @param {Boolean} merge                                                                                              // 289
 */                                                                                                                    // 290
DotObject.prototype.transfer = function(                                                                               // 291
    source,                                                                                                            // 292
    target,                                                                                                            // 293
    obj1,                                                                                                              // 294
    obj2,                                                                                                              // 295
    mods,                                                                                                              // 296
    merge                                                                                                              // 297
) {                                                                                                                    // 298
    if (typeof mods === "function" || Array.isArray(mods)) {                                                           // 299
        this.set(                                                                                                      // 300
            target,                                                                                                    // 301
            _process(this.pick(source, obj1, true), mods),                                                             // 302
            obj2,                                                                                                      // 303
            merge                                                                                                      // 304
        );                                                                                                             // 305
    } else {                                                                                                           // 306
        merge = mods;                                                                                                  // 307
        this.set(target, this.pick(source, obj1, true), obj2, merge);                                                  // 308
    }                                                                                                                  // 309
                                                                                                                       // 310
    return obj2;                                                                                                       // 311
};                                                                                                                     // 312
                                                                                                                       // 313
/**                                                                                                                    // 314
 *                                                                                                                     // 315
 * Copy a property from one object to another object.                                                                  // 316
 *                                                                                                                     // 317
 * If the source path does not exist (undefined)                                                                       // 318
 * the property on the other object will not be set.                                                                   // 319
 *                                                                                                                     // 320
 * @param {String} source                                                                                              // 321
 * @param {String} target                                                                                              // 322
 * @param {Object} obj1                                                                                                // 323
 * @param {Object} obj2                                                                                                // 324
 * @param {Function|Array} mods                                                                                        // 325
 * @param {Boolean} merge                                                                                              // 326
 */                                                                                                                    // 327
DotObject.prototype.copy = function(source, target, obj1, obj2, mods, merge) {                                         // 328
    if (typeof mods === "function" || Array.isArray(mods)) {                                                           // 329
        this.set(                                                                                                      // 330
            target,                                                                                                    // 331
            _process(                                                                                                  // 332
                // clone what is picked                                                                                // 333
                JSON.parse(JSON.stringify(this.pick(source, obj1, false))),                                            // 334
                mods                                                                                                   // 335
            ),                                                                                                         // 336
            obj2,                                                                                                      // 337
            merge                                                                                                      // 338
        );                                                                                                             // 339
    } else {                                                                                                           // 340
        merge = mods;                                                                                                  // 341
        this.set(target, this.pick(source, obj1, false), obj2, merge);                                                 // 342
    }                                                                                                                  // 343
                                                                                                                       // 344
    return obj2;                                                                                                       // 345
};                                                                                                                     // 346
                                                                                                                       // 347
function isObject(val) {                                                                                               // 348
    return Object.prototype.toString.call(val) === "[object Object]";                                                  // 349
}                                                                                                                      // 350
                                                                                                                       // 351
/**                                                                                                                    // 352
 *                                                                                                                     // 353
 * Set a property on an object using dot notation.                                                                     // 354
 *                                                                                                                     // 355
 * @param {String} path                                                                                                // 356
 * @param {Mixed} val                                                                                                  // 357
 * @param {Object} obj                                                                                                 // 358
 * @param {Boolean} merge                                                                                              // 359
 */                                                                                                                    // 360
DotObject.prototype.set = function(path, val, obj, merge) {                                                            // 361
    var i;                                                                                                             // 362
    var k;                                                                                                             // 363
    var keys;                                                                                                          // 364
    var key;                                                                                                           // 365
                                                                                                                       // 366
    // Do not operate if the value is undefined.                                                                       // 367
    if (typeof val === "undefined") {                                                                                  // 368
        return obj;                                                                                                    // 369
    }                                                                                                                  // 370
    keys = parsePath(path, this.seperator);                                                                            // 371
                                                                                                                       // 372
    for (i = 0; i < keys.length; i++) {                                                                                // 373
        key = keys[i];                                                                                                 // 374
        if (i === keys.length - 1) {                                                                                   // 375
            if (merge && isObject(val) && isObject(obj[key])) {                                                        // 376
                for (k in val) {                                                                                       // 377
                    if (val.hasOwnProperty(k)) {                                                                       // 378
                        obj[key][k] = val[k];                                                                          // 379
                    }                                                                                                  // 380
                }                                                                                                      // 381
            } else if (merge && Array.isArray(obj[key]) && Array.isArray(val)) {                                       // 382
                for (var j = 0; j < val.length; j++) {                                                                 // 383
                    obj[keys[i]].push(val[j]);                                                                         // 384
                }                                                                                                      // 385
            } else {                                                                                                   // 386
                obj[key] = val;                                                                                        // 387
            }                                                                                                          // 388
        } else if (                                                                                                    // 389
            // force the value to be an object                                                                         // 390
            !obj.hasOwnProperty(key) ||                                                                                // 391
            (!isObject(obj[key]) && !Array.isArray(obj[key]))                                                          // 392
        ) {                                                                                                            // 393
            // initialize as array if next key is numeric                                                              // 394
            if (/^\d+$/.test(keys[i + 1])) {                                                                           // 395
                obj[key] = [];                                                                                         // 396
            } else {                                                                                                   // 397
                obj[key] = {};                                                                                         // 398
            }                                                                                                          // 399
        }                                                                                                              // 400
        obj = obj[key];                                                                                                // 401
    }                                                                                                                  // 402
    return obj;                                                                                                        // 403
};                                                                                                                     // 404
                                                                                                                       // 405
/**                                                                                                                    // 406
 *                                                                                                                     // 407
 * Transform an object                                                                                                 // 408
 *                                                                                                                     // 409
 * Usage:                                                                                                              // 410
 *                                                                                                                     // 411
 *   var obj = {                                                                                                       // 412
 *     "id": 1,                                                                                                        // 413
 *    "some": {                                                                                                        // 414
 *      "thing": "else"                                                                                                // 415
 *    }                                                                                                                // 416
 *   }                                                                                                                 // 417
 *                                                                                                                     // 418
 *   var transform = {                                                                                                 // 419
 *     "id": "nr",                                                                                                     // 420
 *    "some.thing": "name"                                                                                             // 421
 *   }                                                                                                                 // 422
 *                                                                                                                     // 423
 *   var tgt = dot.transform(transform, obj)                                                                           // 424
 *                                                                                                                     // 425
 * @param {Object} recipe Transform recipe                                                                             // 426
 * @param {Object} obj Object to be transformed                                                                        // 427
 * @param {Array} mods modifiers for the target                                                                        // 428
 */                                                                                                                    // 429
DotObject.prototype.transform = function(recipe, obj, tgt) {                                                           // 430
    obj = obj || {};                                                                                                   // 431
    tgt = tgt || {};                                                                                                   // 432
    Object.keys(recipe).forEach(                                                                                       // 433
        function(key) {                                                                                                // 434
            this.set(recipe[key], this.pick(key, obj), tgt);                                                           // 435
        }.bind(this)                                                                                                   // 436
    );                                                                                                                 // 437
    return tgt;                                                                                                        // 438
};                                                                                                                     // 439
                                                                                                                       // 440
/**                                                                                                                    // 441
 *                                                                                                                     // 442
 * Convert object to dotted-key/value pair                                                                             // 443
 *                                                                                                                     // 444
 * Usage:                                                                                                              // 445
 *                                                                                                                     // 446
 *   var tgt = dot.dot(obj)                                                                                            // 447
 *                                                                                                                     // 448
 *   or                                                                                                                // 449
 *                                                                                                                     // 450
 *   var tgt = {}                                                                                                      // 451
 *   dot.dot(obj, tgt)                                                                                                 // 452
 *                                                                                                                     // 453
 * @param {Object} obj source object                                                                                   // 454
 * @param {Object} tgt target object                                                                                   // 455
 * @param {Array} path path array (internal)                                                                           // 456
 */                                                                                                                    // 457
DotObject.prototype.dot = function(obj, tgt, path) {                                                                   // 458
    tgt = tgt || {};                                                                                                   // 459
    path = path || [];                                                                                                 // 460
    Object.keys(obj).forEach(                                                                                          // 461
        function(key) {                                                                                                // 462
            if (                                                                                                       // 463
                (Object(obj[key]) === obj[key] &&                                                                      // 464
                    Object.prototype.toString.call(obj[key]) ===                                                       // 465
                        "[object Object]") ||                                                                          // 466
                Object.prototype.toString.call(obj[key]) === "[object Array]"                                          // 467
            ) {                                                                                                        // 468
                return this.dot(obj[key], tgt, path.concat(key));                                                      // 469
            } else {                                                                                                   // 470
                tgt[path.concat(key).join(this.seperator)] = obj[key];                                                 // 471
            }                                                                                                          // 472
        }.bind(this)                                                                                                   // 473
    );                                                                                                                 // 474
    return tgt;                                                                                                        // 475
};                                                                                                                     // 476
                                                                                                                       // 477
DotObject.pick = wrap("pick");                                                                                         // 478
DotObject.move = wrap("move");                                                                                         // 479
DotObject.transfer = wrap("transfer");                                                                                 // 480
DotObject.transform = wrap("transform");                                                                               // 481
DotObject.copy = wrap("copy");                                                                                         // 482
DotObject.object = wrap("object");                                                                                     // 483
DotObject.str = wrap("str");                                                                                           // 484
DotObject.set = wrap("set");                                                                                           // 485
DotObject.del = DotObject.remove = wrap("remove");                                                                     // 486
DotObject.dot = wrap("dot");                                                                                           // 487
["override", "overwrite"].forEach(function(prop) {                                                                     // 488
    Object.defineProperty(DotObject, prop, {                                                                           // 489
        get: function() {                                                                                              // 490
            return dotDefault.override;                                                                                // 491
        },                                                                                                             // 492
        set: function(val) {                                                                                           // 493
            dotDefault.override = !!val;                                                                               // 494
        }                                                                                                              // 495
    });                                                                                                                // 496
});                                                                                                                    // 497
                                                                                                                       // 498
Object.defineProperty(DotObject, "useArray", {                                                                         // 499
    get: function() {                                                                                                  // 500
        return dotDefault.useArray;                                                                                    // 501
    },                                                                                                                 // 502
    set: function(val) {                                                                                               // 503
        dotDefault.useArray = val;                                                                                     // 504
    }                                                                                                                  // 505
});                                                                                                                    // 506
                                                                                                                       // 507
DotObject._process = _process;                                                                                         // 508
                                                                                                                       // 509
module.exports = DotObject;                                                                                            // 510
                                                                                                                       // 511
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"sift":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// ../../.1.3.1.o1og0g.wvr4q++os+web.browser+web.cordova/npm/node_modules/sift/package.json                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "sift";                                                                                                 // 1
exports.version = "3.2.6";                                                                                             // 2
exports.main = "./sift.js";                                                                                            // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sift.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/cultofcoders_grapher/node_modules/sift/sift.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
 * Sift 3.x                                                                                                            // 2
 *                                                                                                                     // 3
 * Copryright 2015, Craig Condon                                                                                       // 4
 * Licensed under MIT                                                                                                  // 5
 *                                                                                                                     // 6
 * Filter JavaScript objects with mongodb queries                                                                      // 7
 */                                                                                                                    // 8
                                                                                                                       // 9
(function() {                                                                                                          // 10
    "use strict";                                                                                                      // 11
                                                                                                                       // 12
    /**                                                                                                                // 13
     */                                                                                                                // 14
                                                                                                                       // 15
    function isFunction(value) {                                                                                       // 16
        return typeof value === "function";                                                                            // 17
    }                                                                                                                  // 18
                                                                                                                       // 19
    /**                                                                                                                // 20
     */                                                                                                                // 21
                                                                                                                       // 22
    function isArray(value) {                                                                                          // 23
        return Object.prototype.toString.call(value) === "[object Array]";                                             // 24
    }                                                                                                                  // 25
                                                                                                                       // 26
    /**                                                                                                                // 27
     */                                                                                                                // 28
                                                                                                                       // 29
    function comparable(value) {                                                                                       // 30
        if (value instanceof Date) {                                                                                   // 31
            return value.getTime();                                                                                    // 32
        } else if (value instanceof Array) {                                                                           // 33
            return value.map(comparable);                                                                              // 34
        } else {                                                                                                       // 35
            return value;                                                                                              // 36
        }                                                                                                              // 37
    }                                                                                                                  // 38
                                                                                                                       // 39
    function get(obj, key) {                                                                                           // 40
        if (obj.get) return obj.get(key);                                                                              // 41
        return obj[key];                                                                                               // 42
    }                                                                                                                  // 43
                                                                                                                       // 44
    /**                                                                                                                // 45
     */                                                                                                                // 46
                                                                                                                       // 47
    function or(validator) {                                                                                           // 48
        return function(a, b) {                                                                                        // 49
            if (!isArray(b) || !b.length) return validator(a, b);                                                      // 50
            for (var i = 0, n = b.length; i < n; i++)                                                                  // 51
                if (validator(a, get(b, i))) return true;                                                              // 52
            return false;                                                                                              // 53
        };                                                                                                             // 54
    }                                                                                                                  // 55
                                                                                                                       // 56
    /**                                                                                                                // 57
     */                                                                                                                // 58
                                                                                                                       // 59
    function and(validator) {                                                                                          // 60
        return function(a, b) {                                                                                        // 61
            if (!isArray(b) || !b.length) return validator(a, b);                                                      // 62
            for (var i = 0, n = b.length; i < n; i++)                                                                  // 63
                if (!validator(a, get(b, i))) return false;                                                            // 64
            return true;                                                                                               // 65
        };                                                                                                             // 66
    }                                                                                                                  // 67
                                                                                                                       // 68
    function validate(validator, b) {                                                                                  // 69
        return validator.v(validator.a, b);                                                                            // 70
    }                                                                                                                  // 71
                                                                                                                       // 72
    var operator = {                                                                                                   // 73
        /**                                                                                                            // 74
         */                                                                                                            // 75
                                                                                                                       // 76
        $eq: or(function(a, b) {                                                                                       // 77
            return a(b);                                                                                               // 78
        }),                                                                                                            // 79
                                                                                                                       // 80
        /**                                                                                                            // 81
         */                                                                                                            // 82
                                                                                                                       // 83
        $ne: and(function(a, b) {                                                                                      // 84
            return !a(b);                                                                                              // 85
        }),                                                                                                            // 86
                                                                                                                       // 87
        /**                                                                                                            // 88
         */                                                                                                            // 89
                                                                                                                       // 90
        $or: function(a, b) {                                                                                          // 91
            for (var i = 0, n = a.length; i < n; i++)                                                                  // 92
                if (validate(get(a, i), b)) return true;                                                               // 93
            return false;                                                                                              // 94
        },                                                                                                             // 95
                                                                                                                       // 96
        /**                                                                                                            // 97
         */                                                                                                            // 98
                                                                                                                       // 99
        $gt: or(function(a, b) {                                                                                       // 100
            return sift.compare(comparable(b), a) > 0;                                                                 // 101
        }),                                                                                                            // 102
                                                                                                                       // 103
        /**                                                                                                            // 104
         */                                                                                                            // 105
                                                                                                                       // 106
        $gte: or(function(a, b) {                                                                                      // 107
            return sift.compare(comparable(b), a) >= 0;                                                                // 108
        }),                                                                                                            // 109
                                                                                                                       // 110
        /**                                                                                                            // 111
         */                                                                                                            // 112
                                                                                                                       // 113
        $lt: or(function(a, b) {                                                                                       // 114
            return sift.compare(comparable(b), a) < 0;                                                                 // 115
        }),                                                                                                            // 116
                                                                                                                       // 117
        /**                                                                                                            // 118
         */                                                                                                            // 119
                                                                                                                       // 120
        $lte: or(function(a, b) {                                                                                      // 121
            return sift.compare(comparable(b), a) <= 0;                                                                // 122
        }),                                                                                                            // 123
                                                                                                                       // 124
        /**                                                                                                            // 125
         */                                                                                                            // 126
                                                                                                                       // 127
        $mod: or(function(a, b) {                                                                                      // 128
            return b % a[0] == a[1];                                                                                   // 129
        }),                                                                                                            // 130
                                                                                                                       // 131
        /**                                                                                                            // 132
         */                                                                                                            // 133
                                                                                                                       // 134
        $in: function(a, b) {                                                                                          // 135
            if (b instanceof Array) {                                                                                  // 136
                for (var i = b.length; i--; ) {                                                                        // 137
                    if (~a.indexOf(comparable(get(b, i)))) return true;                                                // 138
                }                                                                                                      // 139
            } else {                                                                                                   // 140
                return !!~a.indexOf(comparable(b));                                                                    // 141
            }                                                                                                          // 142
                                                                                                                       // 143
            return false;                                                                                              // 144
        },                                                                                                             // 145
                                                                                                                       // 146
        /**                                                                                                            // 147
         */                                                                                                            // 148
                                                                                                                       // 149
        $nin: function(a, b) {                                                                                         // 150
            return !operator.$in(a, b);                                                                                // 151
        },                                                                                                             // 152
                                                                                                                       // 153
        /**                                                                                                            // 154
         */                                                                                                            // 155
                                                                                                                       // 156
        $not: function(a, b) {                                                                                         // 157
            return !validate(a, b);                                                                                    // 158
        },                                                                                                             // 159
                                                                                                                       // 160
        /**                                                                                                            // 161
         */                                                                                                            // 162
                                                                                                                       // 163
        $type: function(a, b) {                                                                                        // 164
            return b != void 0 ? b instanceof a || b.constructor == a : false;                                         // 165
        },                                                                                                             // 166
                                                                                                                       // 167
        /**                                                                                                            // 168
         */                                                                                                            // 169
                                                                                                                       // 170
        $all: function(a, b) {                                                                                         // 171
            if (!b) b = [];                                                                                            // 172
            for (var i = a.length; i--; ) {                                                                            // 173
                if (!~comparable(b).indexOf(get(a, i))) return false;                                                  // 174
            }                                                                                                          // 175
            return true;                                                                                               // 176
        },                                                                                                             // 177
                                                                                                                       // 178
        /**                                                                                                            // 179
         */                                                                                                            // 180
                                                                                                                       // 181
        $size: function(a, b) {                                                                                        // 182
            return b ? a === b.length : false;                                                                         // 183
        },                                                                                                             // 184
                                                                                                                       // 185
        /**                                                                                                            // 186
         */                                                                                                            // 187
                                                                                                                       // 188
        $nor: function(a, b) {                                                                                         // 189
            // todo - this suffice? return !operator.$in(a)                                                            // 190
            for (var i = 0, n = a.length; i < n; i++)                                                                  // 191
                if (validate(get(a, i), b)) return false;                                                              // 192
            return true;                                                                                               // 193
        },                                                                                                             // 194
                                                                                                                       // 195
        /**                                                                                                            // 196
         */                                                                                                            // 197
                                                                                                                       // 198
        $and: function(a, b) {                                                                                         // 199
            for (var i = 0, n = a.length; i < n; i++)                                                                  // 200
                if (!validate(get(a, i), b)) return false;                                                             // 201
            return true;                                                                                               // 202
        },                                                                                                             // 203
                                                                                                                       // 204
        /**                                                                                                            // 205
         */                                                                                                            // 206
                                                                                                                       // 207
        $regex: or(function(a, b) {                                                                                    // 208
            return typeof b === "string" && a.test(b);                                                                 // 209
        }),                                                                                                            // 210
                                                                                                                       // 211
        /**                                                                                                            // 212
         */                                                                                                            // 213
                                                                                                                       // 214
        $where: function(a, b) {                                                                                       // 215
            return a.call(b, b);                                                                                       // 216
        },                                                                                                             // 217
                                                                                                                       // 218
        /**                                                                                                            // 219
         */                                                                                                            // 220
                                                                                                                       // 221
        $elemMatch: function(a, b) {                                                                                   // 222
            if (isArray(b)) return !!~search(b, a);                                                                    // 223
            return validate(a, b);                                                                                     // 224
        },                                                                                                             // 225
                                                                                                                       // 226
        /**                                                                                                            // 227
         */                                                                                                            // 228
                                                                                                                       // 229
        $exists: function(a, b) {                                                                                      // 230
            return (b != void 0) === a;                                                                                // 231
        }                                                                                                              // 232
    };                                                                                                                 // 233
                                                                                                                       // 234
    /**                                                                                                                // 235
     */                                                                                                                // 236
                                                                                                                       // 237
    var prepare = {                                                                                                    // 238
        /**                                                                                                            // 239
         */                                                                                                            // 240
                                                                                                                       // 241
        $eq: function(a) {                                                                                             // 242
            if (a instanceof RegExp) {                                                                                 // 243
                return function(b) {                                                                                   // 244
                    return typeof b === "string" && a.test(b);                                                         // 245
                };                                                                                                     // 246
            } else if (a instanceof Function) {                                                                        // 247
                return a;                                                                                              // 248
            } else if (isArray(a) && !a.length) {                                                                      // 249
                // Special case of a == []                                                                             // 250
                return function(b) {                                                                                   // 251
                    return isArray(b) && !b.length;                                                                    // 252
                };                                                                                                     // 253
            } else if (a === null) {                                                                                   // 254
                return function(b) {                                                                                   // 255
                    //will match both null and undefined                                                               // 256
                    return b == null;                                                                                  // 257
                };                                                                                                     // 258
            }                                                                                                          // 259
                                                                                                                       // 260
            return function(b) {                                                                                       // 261
                return sift.compare(comparable(b), a) === 0;                                                           // 262
            };                                                                                                         // 263
        },                                                                                                             // 264
                                                                                                                       // 265
        /**                                                                                                            // 266
         */                                                                                                            // 267
                                                                                                                       // 268
        $ne: function(a) {                                                                                             // 269
            return prepare.$eq(a);                                                                                     // 270
        },                                                                                                             // 271
                                                                                                                       // 272
        /**                                                                                                            // 273
         */                                                                                                            // 274
                                                                                                                       // 275
        $and: function(a) {                                                                                            // 276
            return a.map(parse);                                                                                       // 277
        },                                                                                                             // 278
                                                                                                                       // 279
        /**                                                                                                            // 280
         */                                                                                                            // 281
                                                                                                                       // 282
        $or: function(a) {                                                                                             // 283
            return a.map(parse);                                                                                       // 284
        },                                                                                                             // 285
                                                                                                                       // 286
        /**                                                                                                            // 287
         */                                                                                                            // 288
                                                                                                                       // 289
        $nor: function(a) {                                                                                            // 290
            return a.map(parse);                                                                                       // 291
        },                                                                                                             // 292
                                                                                                                       // 293
        /**                                                                                                            // 294
         */                                                                                                            // 295
                                                                                                                       // 296
        $not: function(a) {                                                                                            // 297
            return parse(a);                                                                                           // 298
        },                                                                                                             // 299
                                                                                                                       // 300
        /**                                                                                                            // 301
         */                                                                                                            // 302
                                                                                                                       // 303
        $regex: function(a, query) {                                                                                   // 304
            return new RegExp(a, query.$options);                                                                      // 305
        },                                                                                                             // 306
                                                                                                                       // 307
        /**                                                                                                            // 308
         */                                                                                                            // 309
                                                                                                                       // 310
        $where: function(a) {                                                                                          // 311
            return typeof a === "string"                                                                               // 312
                ? new Function("obj", "return " + a)                                                                   // 313
                : a;                                                                                                   // 314
        },                                                                                                             // 315
                                                                                                                       // 316
        /**                                                                                                            // 317
         */                                                                                                            // 318
                                                                                                                       // 319
        $elemMatch: function(a) {                                                                                      // 320
            return parse(a);                                                                                           // 321
        },                                                                                                             // 322
                                                                                                                       // 323
        /**                                                                                                            // 324
         */                                                                                                            // 325
                                                                                                                       // 326
        $exists: function(a) {                                                                                         // 327
            return !!a;                                                                                                // 328
        }                                                                                                              // 329
    };                                                                                                                 // 330
                                                                                                                       // 331
    /**                                                                                                                // 332
     */                                                                                                                // 333
                                                                                                                       // 334
    function search(array, validator) {                                                                                // 335
        for (var i = 0; i < array.length; i++) {                                                                       // 336
            if (validate(validator, get(array, i))) {                                                                  // 337
                return i;                                                                                              // 338
            }                                                                                                          // 339
        }                                                                                                              // 340
                                                                                                                       // 341
        return -1;                                                                                                     // 342
    }                                                                                                                  // 343
                                                                                                                       // 344
    /**                                                                                                                // 345
     */                                                                                                                // 346
                                                                                                                       // 347
    function createValidator(a, validate) {                                                                            // 348
        return { a: a, v: validate };                                                                                  // 349
    }                                                                                                                  // 350
                                                                                                                       // 351
    /**                                                                                                                // 352
     */                                                                                                                // 353
                                                                                                                       // 354
    function nestedValidator(a, b) {                                                                                   // 355
        var values = [];                                                                                               // 356
        findValues(b, a.k, 0, values);                                                                                 // 357
                                                                                                                       // 358
        if (values.length === 1) {                                                                                     // 359
            return validate(a.nv, values[0]);                                                                          // 360
        }                                                                                                              // 361
                                                                                                                       // 362
        return !!~search(values, a.nv);                                                                                // 363
    }                                                                                                                  // 364
                                                                                                                       // 365
    /**                                                                                                                // 366
     */                                                                                                                // 367
                                                                                                                       // 368
    function findValues(current, keypath, index, values) {                                                             // 369
        if (index === keypath.length || current == void 0) {                                                           // 370
            values.push(current);                                                                                      // 371
            return;                                                                                                    // 372
        }                                                                                                              // 373
                                                                                                                       // 374
        var k = get(keypath, index);                                                                                   // 375
                                                                                                                       // 376
        // ensure that if current is an array, that the current key                                                    // 377
        // is NOT an array index. This sort of thing needs to work:                                                    // 378
        // sift({'foo.0':42}, [{foo: [42]}]);                                                                          // 379
        if (isArray(current) && isNaN(Number(k))) {                                                                    // 380
            for (var i = 0, n = current.length; i < n; i++) {                                                          // 381
                findValues(get(current, i), keypath, index, values);                                                   // 382
            }                                                                                                          // 383
        } else {                                                                                                       // 384
            findValues(get(current, k), keypath, index + 1, values);                                                   // 385
        }                                                                                                              // 386
    }                                                                                                                  // 387
                                                                                                                       // 388
    /**                                                                                                                // 389
     */                                                                                                                // 390
                                                                                                                       // 391
    function createNestedValidator(keypath, a) {                                                                       // 392
        return { a: { k: keypath, nv: a }, v: nestedValidator };                                                       // 393
    }                                                                                                                  // 394
                                                                                                                       // 395
    /**                                                                                                                // 396
     * flatten the query                                                                                               // 397
     */                                                                                                                // 398
                                                                                                                       // 399
    function parse(query) {                                                                                            // 400
        query = comparable(query);                                                                                     // 401
                                                                                                                       // 402
        if (                                                                                                           // 403
            !query ||                                                                                                  // 404
            (query.constructor.toString() !== "Object" &&                                                              // 405
                query.constructor                                                                                      // 406
                    .toString()                                                                                        // 407
                    .replace(/\n/g, "")                                                                                // 408
                    .replace(/ /g, "") !== "functionObject(){[nativecode]}")                                           // 409
        ) {                                                                                                            // 410
            // cross browser support                                                                                   // 411
            query = { $eq: query };                                                                                    // 412
        }                                                                                                              // 413
                                                                                                                       // 414
        var validators = [];                                                                                           // 415
                                                                                                                       // 416
        for (var key in query) {                                                                                       // 417
            var a = query[key];                                                                                        // 418
                                                                                                                       // 419
            if (key === "$options") continue;                                                                          // 420
                                                                                                                       // 421
            if (operator[key]) {                                                                                       // 422
                if (prepare[key]) a = prepare[key](a, query);                                                          // 423
                validators.push(createValidator(comparable(a), operator[key]));                                        // 424
            } else {                                                                                                   // 425
                if (key.charCodeAt(0) === 36) {                                                                        // 426
                    throw new Error("Unknown operation " + key);                                                       // 427
                }                                                                                                      // 428
                                                                                                                       // 429
                validators.push(                                                                                       // 430
                    createNestedValidator(key.split("."), parse(a))                                                    // 431
                );                                                                                                     // 432
            }                                                                                                          // 433
        }                                                                                                              // 434
                                                                                                                       // 435
        return validators.length === 1                                                                                 // 436
            ? validators[0]                                                                                            // 437
            : createValidator(validators, operator.$and);                                                              // 438
    }                                                                                                                  // 439
                                                                                                                       // 440
    /**                                                                                                                // 441
     */                                                                                                                // 442
                                                                                                                       // 443
    function createRootValidator(query, getter) {                                                                      // 444
        var validator = parse(query);                                                                                  // 445
        if (getter) {                                                                                                  // 446
            validator = {                                                                                              // 447
                a: validator,                                                                                          // 448
                v: function(a, b) {                                                                                    // 449
                    return validate(a, getter(b));                                                                     // 450
                }                                                                                                      // 451
            };                                                                                                         // 452
        }                                                                                                              // 453
        return validator;                                                                                              // 454
    }                                                                                                                  // 455
                                                                                                                       // 456
    /**                                                                                                                // 457
     */                                                                                                                // 458
                                                                                                                       // 459
    function sift(query, array, getter) {                                                                              // 460
        if (isFunction(array)) {                                                                                       // 461
            getter = array;                                                                                            // 462
            array = void 0;                                                                                            // 463
        }                                                                                                              // 464
                                                                                                                       // 465
        var validator = createRootValidator(query, getter);                                                            // 466
                                                                                                                       // 467
        function filter(b) {                                                                                           // 468
            return validate(validator, b);                                                                             // 469
        }                                                                                                              // 470
                                                                                                                       // 471
        if (array) {                                                                                                   // 472
            return array.filter(filter);                                                                               // 473
        }                                                                                                              // 474
                                                                                                                       // 475
        return filter;                                                                                                 // 476
    }                                                                                                                  // 477
                                                                                                                       // 478
    /**                                                                                                                // 479
     */                                                                                                                // 480
                                                                                                                       // 481
    sift.use = function(plugin) {                                                                                      // 482
        if (isFunction(plugin)) return plugin(sift);                                                                   // 483
        for (var key in plugin) {                                                                                      // 484
            if (key.charCodeAt(0) === 36) operator[key] = plugin[key];                                                 // 485
        }                                                                                                              // 486
    };                                                                                                                 // 487
                                                                                                                       // 488
    /**                                                                                                                // 489
     */                                                                                                                // 490
                                                                                                                       // 491
    sift.indexOf = function(query, array, getter) {                                                                    // 492
        return search(array, createRootValidator(query, getter));                                                      // 493
    };                                                                                                                 // 494
                                                                                                                       // 495
    /**                                                                                                                // 496
     */                                                                                                                // 497
                                                                                                                       // 498
    sift.compare = function(a, b) {                                                                                    // 499
        if (a === b) return 0;                                                                                         // 500
        if (typeof a === typeof b) {                                                                                   // 501
            if (a > b) return 1;                                                                                       // 502
            if (a < b) return -1;                                                                                      // 503
        }                                                                                                              // 504
    };                                                                                                                 // 505
                                                                                                                       // 506
    /* istanbul ignore next */                                                                                         // 507
    if (                                                                                                               // 508
        typeof module !== "undefined" &&                                                                               // 509
        typeof module.exports !== "undefined"                                                                          // 510
    ) {                                                                                                                // 511
        module.exports = sift;                                                                                         // 512
    }                                                                                                                  // 513
                                                                                                                       // 514
    if (typeof window !== "undefined") {                                                                               // 515
        window.sift = sift;                                                                                            // 516
    }                                                                                                                  // 517
})();                                                                                                                  // 518
                                                                                                                       // 519
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"deep-extend":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// ../../.1.3.1.o1og0g.wvr4q++os+web.browser+web.cordova/npm/node_modules/deep-extend/package.json                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "deep-extend";                                                                                          // 1
exports.version = "0.5.0";                                                                                             // 2
exports.main = "lib/deep-extend.js";                                                                                   // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"deep-extend.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/cultofcoders_grapher/node_modules/deep-extend/lib/deep-extend.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * @description Recursive object extending                                                                             // 2
 * @author Viacheslav Lotsmanov <lotsmanov89@gmail.com>                                                                // 3
 * @license MIT                                                                                                        // 4
 *                                                                                                                     // 5
 * The MIT License (MIT)                                                                                               // 6
 *                                                                                                                     // 7
 * Copyright (c) 2013-2015 Viacheslav Lotsmanov                                                                        // 8
 *                                                                                                                     // 9
 * Permission is hereby granted, free of charge, to any person obtaining a copy of                                     // 10
 * this software and associated documentation files (the "Software"), to deal in                                       // 11
 * the Software without restriction, including without limitation the rights to                                        // 12
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of                                    // 13
 * the Software, and to permit persons to whom the Software is furnished to do so,                                     // 14
 * subject to the following conditions:                                                                                // 15
 *                                                                                                                     // 16
 * The above copyright notice and this permission notice shall be included in all                                      // 17
 * copies or substantial portions of the Software.                                                                     // 18
 *                                                                                                                     // 19
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                          // 20
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS                                    // 21
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR                                      // 22
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER                                      // 23
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN                                             // 24
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                          // 25
 */                                                                                                                    // 26
                                                                                                                       // 27
"use strict";                                                                                                          // 28
                                                                                                                       // 29
function isSpecificValue(val) {                                                                                        // 30
    return val instanceof Buffer || val instanceof Date || val instanceof RegExp                                       // 31
        ? true                                                                                                         // 32
        : false;                                                                                                       // 33
}                                                                                                                      // 34
                                                                                                                       // 35
function cloneSpecificValue(val) {                                                                                     // 36
    if (val instanceof Buffer) {                                                                                       // 37
        var x = new Buffer(val.length);                                                                                // 38
        val.copy(x);                                                                                                   // 39
        return x;                                                                                                      // 40
    } else if (val instanceof Date) {                                                                                  // 41
        return new Date(val.getTime());                                                                                // 42
    } else if (val instanceof RegExp) {                                                                                // 43
        return new RegExp(val);                                                                                        // 44
    } else {                                                                                                           // 45
        throw new Error("Unexpected situation");                                                                       // 46
    }                                                                                                                  // 47
}                                                                                                                      // 48
                                                                                                                       // 49
/**                                                                                                                    // 50
 * Recursive cloning array.                                                                                            // 51
 */                                                                                                                    // 52
function deepCloneArray(arr) {                                                                                         // 53
    var clone = [];                                                                                                    // 54
    arr.forEach(function(item, index) {                                                                                // 55
        if (typeof item === "object" && item !== null) {                                                               // 56
            if (Array.isArray(item)) {                                                                                 // 57
                clone[index] = deepCloneArray(item);                                                                   // 58
            } else if (isSpecificValue(item)) {                                                                        // 59
                clone[index] = cloneSpecificValue(item);                                                               // 60
            } else {                                                                                                   // 61
                clone[index] = deepExtend({}, item);                                                                   // 62
            }                                                                                                          // 63
        } else {                                                                                                       // 64
            clone[index] = item;                                                                                       // 65
        }                                                                                                              // 66
    });                                                                                                                // 67
    return clone;                                                                                                      // 68
}                                                                                                                      // 69
                                                                                                                       // 70
/**                                                                                                                    // 71
 * Extening object that entered in first argument.                                                                     // 72
 *                                                                                                                     // 73
 * Returns extended object or false if have no target object or incorrect type.                                        // 74
 *                                                                                                                     // 75
 * If you wish to clone source object (without modify it), just use empty new                                          // 76
 * object as first argument, like this:                                                                                // 77
 *   deepExtend({}, yourObj_1, [yourObj_N]);                                                                           // 78
 */                                                                                                                    // 79
var deepExtend = (module.exports = function(/*obj_1, [obj_2], [obj_N]*/) {                                             // 80
    if (arguments.length < 1 || typeof arguments[0] !== "object") {                                                    // 81
        return false;                                                                                                  // 82
    }                                                                                                                  // 83
                                                                                                                       // 84
    if (arguments.length < 2) {                                                                                        // 85
        return arguments[0];                                                                                           // 86
    }                                                                                                                  // 87
                                                                                                                       // 88
    var target = arguments[0];                                                                                         // 89
                                                                                                                       // 90
    // convert arguments to array and cut off target object                                                            // 91
    var args = Array.prototype.slice.call(arguments, 1);                                                               // 92
                                                                                                                       // 93
    var val, src, clone;                                                                                               // 94
                                                                                                                       // 95
    args.forEach(function(obj) {                                                                                       // 96
        // skip argument if isn't an object, is null, or is an array                                                   // 97
        if (typeof obj !== "object" || obj === null || Array.isArray(obj)) {                                           // 98
            return;                                                                                                    // 99
        }                                                                                                              // 100
                                                                                                                       // 101
        Object.keys(obj).forEach(function(key) {                                                                       // 102
            src = target[key]; // source value                                                                         // 103
            val = obj[key]; // new value                                                                               // 104
                                                                                                                       // 105
            // recursion prevention                                                                                    // 106
            if (val === target) {                                                                                      // 107
                return;                                                                                                // 108
                                                                                                                       // 109
                /**                                                                                                    // 110
                 * if new value isn't object then just overwrite by new value                                          // 111
                 * instead of extending.                                                                               // 112
                 */                                                                                                    // 113
            } else if (typeof val !== "object" || val === null) {                                                      // 114
                target[key] = val;                                                                                     // 115
                return;                                                                                                // 116
                                                                                                                       // 117
                // just clone arrays (and recursive clone objects inside)                                              // 118
            } else if (Array.isArray(val)) {                                                                           // 119
                target[key] = deepCloneArray(val);                                                                     // 120
                return;                                                                                                // 121
                                                                                                                       // 122
                // custom cloning and overwrite for specific objects                                                   // 123
            } else if (isSpecificValue(val)) {                                                                         // 124
                target[key] = cloneSpecificValue(val);                                                                 // 125
                return;                                                                                                // 126
                                                                                                                       // 127
                // overwrite by new value if source isn't object or array                                              // 128
            } else if (                                                                                                // 129
                typeof src !== "object" ||                                                                             // 130
                src === null ||                                                                                        // 131
                Array.isArray(src)                                                                                     // 132
            ) {                                                                                                        // 133
                target[key] = deepExtend({}, val);                                                                     // 134
                return;                                                                                                // 135
                                                                                                                       // 136
                // source value and new value is objects both, extending...                                            // 137
            } else {                                                                                                   // 138
                target[key] = deepExtend(src, val);                                                                    // 139
                return;                                                                                                // 140
            }                                                                                                          // 141
        });                                                                                                            // 142
    });                                                                                                                // 143
                                                                                                                       // 144
    return target;                                                                                                     // 145
});                                                                                                                    // 146
                                                                                                                       // 147
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}}}},{
  "extensions": [
    ".js",
    ".json"
  ]
});
var exports = require("./node_modules/meteor/cultofcoders:grapher/main.client.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['cultofcoders:grapher'] = exports;

})();

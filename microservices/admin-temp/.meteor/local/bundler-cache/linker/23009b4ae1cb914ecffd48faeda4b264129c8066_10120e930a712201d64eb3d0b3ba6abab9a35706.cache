[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar chai = Package['practicalmeteor:chai'].chai;\nvar assert = Package['practicalmeteor:chai'].assert;\nvar expect = Package['practicalmeteor:chai'].expect;\nvar should = Package['practicalmeteor:chai'].should;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar sinon, lolex, sinonChai, __coffeescriptShare, spies, stubs;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/practicalmeteor_sinon/packages/practicalmeteor_sinon.js                     //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor:sinon/sinon-1.14.1.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Sinon.JS 1.14.1, 2015/04/24                                                                                         // 2\n *                                                                                                                     // 3\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 4\n * @author Contributors: https://github.com/cjohansen/Sinon.JS/blob/master/AUTHORS                                     // 5\n *                                                                                                                     // 6\n * (The BSD License)                                                                                                   // 7\n *                                                                                                                     // 8\n * Copyright (c) 2010-2014, Christian Johansen, christian@cjohansen.no                                                 // 9\n * All rights reserved.                                                                                                // 10\n *                                                                                                                     // 11\n * Redistribution and use in source and binary forms, with or without modification,                                    // 12\n * are permitted provided that the following conditions are met:                                                       // 13\n *                                                                                                                     // 14\n *     * Redistributions of source code must retain the above copyright notice,                                        // 15\n *       this list of conditions and the following disclaimer.                                                         // 16\n *     * Redistributions in binary form must reproduce the above copyright notice,                                     // 17\n *       this list of conditions and the following disclaimer in the documentation                                     // 18\n *       and/or other materials provided with the distribution.                                                        // 19\n *     * Neither the name of Christian Johansen nor the names of his contributors                                      // 20\n *       may be used to endorse or promote products derived from this software                                         // 21\n *       without specific prior written permission.                                                                    // 22\n *                                                                                                                     // 23\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND                                     // 24\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED                                       // 25\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE                                              // 26\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE                                        // 27\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL                                          // 28\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR                                          // 29\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER                                          // 30\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,                                       // 31\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF                                    // 32\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                                   // 33\n */                                                                                                                    // 34\n                                                                                                                       // 35\nsinon = this.sinon = (function () {                                                                                    // 36\n  var samsam, formatio;                                                                                                // 37\n  (function () {                                                                                                       // 38\n                function define(mod, deps, fn) {                                                                       // 39\n                  if (mod == \"samsam\") {                                                                               // 40\n                    samsam = deps();                                                                                   // 41\n                  } else if (typeof deps === \"function\" && mod.length === 0) {                                         // 42\n                    lolex = deps();                                                                                    // 43\n                  } else if (typeof fn === \"function\") {                                                               // 44\n                    formatio = fn(samsam);                                                                             // 45\n                  }                                                                                                    // 46\n                }                                                                                                      // 47\n    define.amd = {};                                                                                                   // 48\n((typeof define === \"function\" && define.amd && function (m) { define(\"samsam\", m); }) ||                              // 49\n (typeof module === \"object\" &&                                                                                        // 50\n      function (m) { module.exports = m(); }) || // Node                                                               // 51\n function (m) { this.samsam = m(); } // Browser globals                                                                // 52\n)(function () {                                                                                                        // 53\n    var o = Object.prototype;                                                                                          // 54\n    var div = typeof document !== \"undefined\" && document.createElement(\"div\");                                        // 55\n                                                                                                                       // 56\n    function isNaN(value) {                                                                                            // 57\n        // Unlike global isNaN, this avoids type coercion                                                              // 58\n        // typeof check avoids IE host object issues, hat tip to                                                       // 59\n        // lodash                                                                                                      // 60\n        var val = value; // JsLint thinks value !== value is \"weird\"                                                   // 61\n        return typeof value === \"number\" && value !== val;                                                             // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    function getClass(value) {                                                                                         // 65\n        // Returns the internal [[Class]] by calling Object.prototype.toString                                         // 66\n        // with the provided value as this. Return value is a string, naming the                                       // 67\n        // internal class, e.g. \"Array\"                                                                                // 68\n        return o.toString.call(value).split(/[ \\]]/)[1];                                                               // 69\n    }                                                                                                                  // 70\n                                                                                                                       // 71\n    /**                                                                                                                // 72\n     * @name samsam.isArguments                                                                                        // 73\n     * @param Object object                                                                                            // 74\n     *                                                                                                                 // 75\n     * Returns ``true`` if ``object`` is an ``arguments`` object,                                                      // 76\n     * ``false`` otherwise.                                                                                            // 77\n     */                                                                                                                // 78\n    function isArguments(object) {                                                                                     // 79\n        if (getClass(object) === 'Arguments') { return true; }                                                         // 80\n        if (typeof object !== \"object\" || typeof object.length !== \"number\" ||                                         // 81\n                getClass(object) === \"Array\") {                                                                        // 82\n            return false;                                                                                              // 83\n        }                                                                                                              // 84\n        if (typeof object.callee == \"function\") { return true; }                                                       // 85\n        try {                                                                                                          // 86\n            object[object.length] = 6;                                                                                 // 87\n            delete object[object.length];                                                                              // 88\n        } catch (e) {                                                                                                  // 89\n            return true;                                                                                               // 90\n        }                                                                                                              // 91\n        return false;                                                                                                  // 92\n    }                                                                                                                  // 93\n                                                                                                                       // 94\n    /**                                                                                                                // 95\n     * @name samsam.isElement                                                                                          // 96\n     * @param Object object                                                                                            // 97\n     *                                                                                                                 // 98\n     * Returns ``true`` if ``object`` is a DOM element node. Unlike                                                    // 99\n     * Underscore.js/lodash, this function will return ``false`` if ``object``                                         // 100\n     * is an *element-like* object, i.e. a regular object with a ``nodeType``                                          // 101\n     * property that holds the value ``1``.                                                                            // 102\n     */                                                                                                                // 103\n    function isElement(object) {                                                                                       // 104\n        if (!object || object.nodeType !== 1 || !div) { return false; }                                                // 105\n        try {                                                                                                          // 106\n            object.appendChild(div);                                                                                   // 107\n            object.removeChild(div);                                                                                   // 108\n        } catch (e) {                                                                                                  // 109\n            return false;                                                                                              // 110\n        }                                                                                                              // 111\n        return true;                                                                                                   // 112\n    }                                                                                                                  // 113\n                                                                                                                       // 114\n    /**                                                                                                                // 115\n     * @name samsam.keys                                                                                               // 116\n     * @param Object object                                                                                            // 117\n     *                                                                                                                 // 118\n     * Return an array of own property names.                                                                          // 119\n     */                                                                                                                // 120\n    function keys(object) {                                                                                            // 121\n        var ks = [], prop;                                                                                             // 122\n        for (prop in object) {                                                                                         // 123\n            if (o.hasOwnProperty.call(object, prop)) { ks.push(prop); }                                                // 124\n        }                                                                                                              // 125\n        return ks;                                                                                                     // 126\n    }                                                                                                                  // 127\n                                                                                                                       // 128\n    /**                                                                                                                // 129\n     * @name samsam.isDate                                                                                             // 130\n     * @param Object value                                                                                             // 131\n     *                                                                                                                 // 132\n     * Returns true if the object is a ``Date``, or *date-like*. Duck typing                                           // 133\n     * of date objects work by checking that the object has a ``getTime``                                              // 134\n     * function whose return value equals the return value from the object's                                           // 135\n     * ``valueOf``.                                                                                                    // 136\n     */                                                                                                                // 137\n    function isDate(value) {                                                                                           // 138\n        return typeof value.getTime == \"function\" &&                                                                   // 139\n            value.getTime() == value.valueOf();                                                                        // 140\n    }                                                                                                                  // 141\n                                                                                                                       // 142\n    /**                                                                                                                // 143\n     * @name samsam.isNegZero                                                                                          // 144\n     * @param Object value                                                                                             // 145\n     *                                                                                                                 // 146\n     * Returns ``true`` if ``value`` is ``-0``.                                                                        // 147\n     */                                                                                                                // 148\n    function isNegZero(value) {                                                                                        // 149\n        return value === 0 && 1 / value === -Infinity;                                                                 // 150\n    }                                                                                                                  // 151\n                                                                                                                       // 152\n    /**                                                                                                                // 153\n     * @name samsam.equal                                                                                              // 154\n     * @param Object obj1                                                                                              // 155\n     * @param Object obj2                                                                                              // 156\n     *                                                                                                                 // 157\n     * Returns ``true`` if two objects are strictly equal. Compared to                                                 // 158\n     * ``===`` there are two exceptions:                                                                               // 159\n     *                                                                                                                 // 160\n     *   - NaN is considered equal to NaN                                                                              // 161\n     *   - -0 and +0 are not considered equal                                                                          // 162\n     */                                                                                                                // 163\n    function identical(obj1, obj2) {                                                                                   // 164\n        if (obj1 === obj2 || (isNaN(obj1) && isNaN(obj2))) {                                                           // 165\n            return obj1 !== 0 || isNegZero(obj1) === isNegZero(obj2);                                                  // 166\n        }                                                                                                              // 167\n    }                                                                                                                  // 168\n                                                                                                                       // 169\n                                                                                                                       // 170\n    /**                                                                                                                // 171\n     * @name samsam.deepEqual                                                                                          // 172\n     * @param Object obj1                                                                                              // 173\n     * @param Object obj2                                                                                              // 174\n     *                                                                                                                 // 175\n     * Deep equal comparison. Two values are \"deep equal\" if:                                                          // 176\n     *                                                                                                                 // 177\n     *   - They are equal, according to samsam.identical                                                               // 178\n     *   - They are both date objects representing the same time                                                       // 179\n     *   - They are both arrays containing elements that are all deepEqual                                             // 180\n     *   - They are objects with the same set of properties, and each property                                         // 181\n     *     in ``obj1`` is deepEqual to the corresponding property in ``obj2``                                          // 182\n     *                                                                                                                 // 183\n     * Supports cyclic objects.                                                                                        // 184\n     */                                                                                                                // 185\n    function deepEqualCyclic(obj1, obj2) {                                                                             // 186\n                                                                                                                       // 187\n        // used for cyclic comparison                                                                                  // 188\n        // contain already visited objects                                                                             // 189\n        var objects1 = [],                                                                                             // 190\n            objects2 = [],                                                                                             // 191\n        // contain pathes (position in the object structure)                                                           // 192\n        // of the already visited objects                                                                              // 193\n        // indexes same as in objects arrays                                                                           // 194\n            paths1 = [],                                                                                               // 195\n            paths2 = [],                                                                                               // 196\n        // contains combinations of already compared objects                                                           // 197\n        // in the manner: { \"$1['ref']$2['ref']\": true }                                                               // 198\n            compared = {};                                                                                             // 199\n                                                                                                                       // 200\n        /**                                                                                                            // 201\n         * used to check, if the value of a property is an object                                                      // 202\n         * (cyclic logic is only needed for objects)                                                                   // 203\n         * only needed for cyclic logic                                                                                // 204\n         */                                                                                                            // 205\n        function isObject(value) {                                                                                     // 206\n                                                                                                                       // 207\n            if (typeof value === 'object' && value !== null &&                                                         // 208\n                    !(value instanceof Boolean) &&                                                                     // 209\n                    !(value instanceof Date)    &&                                                                     // 210\n                    !(value instanceof Number)  &&                                                                     // 211\n                    !(value instanceof RegExp)  &&                                                                     // 212\n                    !(value instanceof String)) {                                                                      // 213\n                                                                                                                       // 214\n                return true;                                                                                           // 215\n            }                                                                                                          // 216\n                                                                                                                       // 217\n            return false;                                                                                              // 218\n        }                                                                                                              // 219\n                                                                                                                       // 220\n        /**                                                                                                            // 221\n         * returns the index of the given object in the                                                                // 222\n         * given objects array, -1 if not contained                                                                    // 223\n         * only needed for cyclic logic                                                                                // 224\n         */                                                                                                            // 225\n        function getIndex(objects, obj) {                                                                              // 226\n                                                                                                                       // 227\n            var i;                                                                                                     // 228\n            for (i = 0; i < objects.length; i++) {                                                                     // 229\n                if (objects[i] === obj) {                                                                              // 230\n                    return i;                                                                                          // 231\n                }                                                                                                      // 232\n            }                                                                                                          // 233\n                                                                                                                       // 234\n            return -1;                                                                                                 // 235\n        }                                                                                                              // 236\n                                                                                                                       // 237\n        // does the recursion for the deep equal check                                                                 // 238\n        return (function deepEqual(obj1, obj2, path1, path2) {                                                         // 239\n            var type1 = typeof obj1;                                                                                   // 240\n            var type2 = typeof obj2;                                                                                   // 241\n                                                                                                                       // 242\n            // == null also matches undefined                                                                          // 243\n            if (obj1 === obj2 ||                                                                                       // 244\n                    isNaN(obj1) || isNaN(obj2) ||                                                                      // 245\n                    obj1 == null || obj2 == null ||                                                                    // 246\n                    type1 !== \"object\" || type2 !== \"object\") {                                                        // 247\n                                                                                                                       // 248\n                return identical(obj1, obj2);                                                                          // 249\n            }                                                                                                          // 250\n                                                                                                                       // 251\n            // Elements are only equal if identical(expected, actual)                                                  // 252\n            if (isElement(obj1) || isElement(obj2)) { return false; }                                                  // 253\n                                                                                                                       // 254\n            var isDate1 = isDate(obj1), isDate2 = isDate(obj2);                                                        // 255\n            if (isDate1 || isDate2) {                                                                                  // 256\n                if (!isDate1 || !isDate2 || obj1.getTime() !== obj2.getTime()) {                                       // 257\n                    return false;                                                                                      // 258\n                }                                                                                                      // 259\n            }                                                                                                          // 260\n                                                                                                                       // 261\n            if (obj1 instanceof RegExp && obj2 instanceof RegExp) {                                                    // 262\n                if (obj1.toString() !== obj2.toString()) { return false; }                                             // 263\n            }                                                                                                          // 264\n                                                                                                                       // 265\n            var class1 = getClass(obj1);                                                                               // 266\n            var class2 = getClass(obj2);                                                                               // 267\n            var keys1 = keys(obj1);                                                                                    // 268\n            var keys2 = keys(obj2);                                                                                    // 269\n                                                                                                                       // 270\n            if (isArguments(obj1) || isArguments(obj2)) {                                                              // 271\n                if (obj1.length !== obj2.length) { return false; }                                                     // 272\n            } else {                                                                                                   // 273\n                if (type1 !== type2 || class1 !== class2 ||                                                            // 274\n                        keys1.length !== keys2.length) {                                                               // 275\n                    return false;                                                                                      // 276\n                }                                                                                                      // 277\n            }                                                                                                          // 278\n                                                                                                                       // 279\n            var key, i, l,                                                                                             // 280\n                // following vars are used for the cyclic logic                                                        // 281\n                value1, value2,                                                                                        // 282\n                isObject1, isObject2,                                                                                  // 283\n                index1, index2,                                                                                        // 284\n                newPath1, newPath2;                                                                                    // 285\n                                                                                                                       // 286\n            for (i = 0, l = keys1.length; i < l; i++) {                                                                // 287\n                key = keys1[i];                                                                                        // 288\n                if (!o.hasOwnProperty.call(obj2, key)) {                                                               // 289\n                    return false;                                                                                      // 290\n                }                                                                                                      // 291\n                                                                                                                       // 292\n                // Start of the cyclic logic                                                                           // 293\n                                                                                                                       // 294\n                value1 = obj1[key];                                                                                    // 295\n                value2 = obj2[key];                                                                                    // 296\n                                                                                                                       // 297\n                isObject1 = isObject(value1);                                                                          // 298\n                isObject2 = isObject(value2);                                                                          // 299\n                                                                                                                       // 300\n                // determine, if the objects were already visited                                                      // 301\n                // (it's faster to check for isObject first, than to                                                   // 302\n                // get -1 from getIndex for non objects)                                                               // 303\n                index1 = isObject1 ? getIndex(objects1, value1) : -1;                                                  // 304\n                index2 = isObject2 ? getIndex(objects2, value2) : -1;                                                  // 305\n                                                                                                                       // 306\n                // determine the new pathes of the objects                                                             // 307\n                // - for non cyclic objects the current path will be extended                                          // 308\n                //   by current property name                                                                          // 309\n                // - for cyclic objects the stored path is taken                                                       // 310\n                newPath1 = index1 !== -1                                                                               // 311\n                    ? paths1[index1]                                                                                   // 312\n                    : path1 + '[' + JSON.stringify(key) + ']';                                                         // 313\n                newPath2 = index2 !== -1                                                                               // 314\n                    ? paths2[index2]                                                                                   // 315\n                    : path2 + '[' + JSON.stringify(key) + ']';                                                         // 316\n                                                                                                                       // 317\n                // stop recursion if current objects are already compared                                              // 318\n                if (compared[newPath1 + newPath2]) {                                                                   // 319\n                    return true;                                                                                       // 320\n                }                                                                                                      // 321\n                                                                                                                       // 322\n                // remember the current objects and their pathes                                                       // 323\n                if (index1 === -1 && isObject1) {                                                                      // 324\n                    objects1.push(value1);                                                                             // 325\n                    paths1.push(newPath1);                                                                             // 326\n                }                                                                                                      // 327\n                if (index2 === -1 && isObject2) {                                                                      // 328\n                    objects2.push(value2);                                                                             // 329\n                    paths2.push(newPath2);                                                                             // 330\n                }                                                                                                      // 331\n                                                                                                                       // 332\n                // remember that the current objects are already compared                                              // 333\n                if (isObject1 && isObject2) {                                                                          // 334\n                    compared[newPath1 + newPath2] = true;                                                              // 335\n                }                                                                                                      // 336\n                                                                                                                       // 337\n                // End of cyclic logic                                                                                 // 338\n                                                                                                                       // 339\n                // neither value1 nor value2 is a cycle                                                                // 340\n                // continue with next level                                                                            // 341\n                if (!deepEqual(value1, value2, newPath1, newPath2)) {                                                  // 342\n                    return false;                                                                                      // 343\n                }                                                                                                      // 344\n            }                                                                                                          // 345\n                                                                                                                       // 346\n            return true;                                                                                               // 347\n                                                                                                                       // 348\n        }(obj1, obj2, '$1', '$2'));                                                                                    // 349\n    }                                                                                                                  // 350\n                                                                                                                       // 351\n    var match;                                                                                                         // 352\n                                                                                                                       // 353\n    function arrayContains(array, subset) {                                                                            // 354\n        if (subset.length === 0) { return true; }                                                                      // 355\n        var i, l, j, k;                                                                                                // 356\n        for (i = 0, l = array.length; i < l; ++i) {                                                                    // 357\n            if (match(array[i], subset[0])) {                                                                          // 358\n                for (j = 0, k = subset.length; j < k; ++j) {                                                           // 359\n                    if (!match(array[i + j], subset[j])) { return false; }                                             // 360\n                }                                                                                                      // 361\n                return true;                                                                                           // 362\n            }                                                                                                          // 363\n        }                                                                                                              // 364\n        return false;                                                                                                  // 365\n    }                                                                                                                  // 366\n                                                                                                                       // 367\n    /**                                                                                                                // 368\n     * @name samsam.match                                                                                              // 369\n     * @param Object object                                                                                            // 370\n     * @param Object matcher                                                                                           // 371\n     *                                                                                                                 // 372\n     * Compare arbitrary value ``object`` with matcher.                                                                // 373\n     */                                                                                                                // 374\n    match = function match(object, matcher) {                                                                          // 375\n        if (matcher && typeof matcher.test === \"function\") {                                                           // 376\n            return matcher.test(object);                                                                               // 377\n        }                                                                                                              // 378\n                                                                                                                       // 379\n        if (typeof matcher === \"function\") {                                                                           // 380\n            return matcher(object) === true;                                                                           // 381\n        }                                                                                                              // 382\n                                                                                                                       // 383\n        if (typeof matcher === \"string\") {                                                                             // 384\n            matcher = matcher.toLowerCase();                                                                           // 385\n            var notNull = typeof object === \"string\" || !!object;                                                      // 386\n            return notNull &&                                                                                          // 387\n                (String(object)).toLowerCase().indexOf(matcher) >= 0;                                                  // 388\n        }                                                                                                              // 389\n                                                                                                                       // 390\n        if (typeof matcher === \"number\") {                                                                             // 391\n            return matcher === object;                                                                                 // 392\n        }                                                                                                              // 393\n                                                                                                                       // 394\n        if (typeof matcher === \"boolean\") {                                                                            // 395\n            return matcher === object;                                                                                 // 396\n        }                                                                                                              // 397\n                                                                                                                       // 398\n        if (typeof(matcher) === \"undefined\") {                                                                         // 399\n            return typeof(object) === \"undefined\";                                                                     // 400\n        }                                                                                                              // 401\n                                                                                                                       // 402\n        if (matcher === null) {                                                                                        // 403\n            return object === null;                                                                                    // 404\n        }                                                                                                              // 405\n                                                                                                                       // 406\n        if (getClass(object) === \"Array\" && getClass(matcher) === \"Array\") {                                           // 407\n            return arrayContains(object, matcher);                                                                     // 408\n        }                                                                                                              // 409\n                                                                                                                       // 410\n        if (matcher && typeof matcher === \"object\") {                                                                  // 411\n            if (matcher === object) {                                                                                  // 412\n                return true;                                                                                           // 413\n            }                                                                                                          // 414\n            var prop;                                                                                                  // 415\n            for (prop in matcher) {                                                                                    // 416\n                var value = object[prop];                                                                              // 417\n                if (typeof value === \"undefined\" &&                                                                    // 418\n                        typeof object.getAttribute === \"function\") {                                                   // 419\n                    value = object.getAttribute(prop);                                                                 // 420\n                }                                                                                                      // 421\n                if (matcher[prop] === null || typeof matcher[prop] === 'undefined') {                                  // 422\n                    if (value !== matcher[prop]) {                                                                     // 423\n                        return false;                                                                                  // 424\n                    }                                                                                                  // 425\n                } else if (typeof  value === \"undefined\" || !match(value, matcher[prop])) {                            // 426\n                    return false;                                                                                      // 427\n                }                                                                                                      // 428\n            }                                                                                                          // 429\n            return true;                                                                                               // 430\n        }                                                                                                              // 431\n                                                                                                                       // 432\n        throw new Error(\"Matcher was not a string, a number, a \" +                                                     // 433\n                        \"function, a boolean or an object\");                                                           // 434\n    };                                                                                                                 // 435\n                                                                                                                       // 436\n    return {                                                                                                           // 437\n        isArguments: isArguments,                                                                                      // 438\n        isElement: isElement,                                                                                          // 439\n        isDate: isDate,                                                                                                // 440\n        isNegZero: isNegZero,                                                                                          // 441\n        identical: identical,                                                                                          // 442\n        deepEqual: deepEqualCyclic,                                                                                    // 443\n        match: match,                                                                                                  // 444\n        keys: keys                                                                                                     // 445\n    };                                                                                                                 // 446\n});                                                                                                                    // 447\n((typeof define === \"function\" && define.amd && function (m) {                                                         // 448\n    define(\"formatio\", [\"samsam\"], m);                                                                                 // 449\n}) || (typeof module === \"object\" && function (m) {                                                                    // 450\n    module.exports = m(require(\"samsam\"));                                                                             // 451\n}) || function (m) { this.formatio = m(this.samsam); }                                                                 // 452\n)(function (samsam) {                                                                                                  // 453\n                                                                                                                       // 454\n    var formatio = {                                                                                                   // 455\n        excludeConstructors: [\"Object\", /^.$/],                                                                        // 456\n        quoteStrings: true,                                                                                            // 457\n        limitChildrenCount: 0                                                                                          // 458\n    };                                                                                                                 // 459\n                                                                                                                       // 460\n    var hasOwn = Object.prototype.hasOwnProperty;                                                                      // 461\n                                                                                                                       // 462\n    var specialObjects = [];                                                                                           // 463\n    if (typeof global !== \"undefined\") {                                                                               // 464\n        specialObjects.push({ object: global, value: \"[object global]\" });                                             // 465\n    }                                                                                                                  // 466\n    if (typeof document !== \"undefined\") {                                                                             // 467\n        specialObjects.push({                                                                                          // 468\n            object: document,                                                                                          // 469\n            value: \"[object HTMLDocument]\"                                                                             // 470\n        });                                                                                                            // 471\n    }                                                                                                                  // 472\n    if (typeof window !== \"undefined\") {                                                                               // 473\n        specialObjects.push({ object: window, value: \"[object Window]\" });                                             // 474\n    }                                                                                                                  // 475\n                                                                                                                       // 476\n    function functionName(func) {                                                                                      // 477\n        if (!func) { return \"\"; }                                                                                      // 478\n        if (func.displayName) { return func.displayName; }                                                             // 479\n        if (func.name) { return func.name; }                                                                           // 480\n        var matches = func.toString().match(/function\\s+([^\\(]+)/m);                                                   // 481\n        return (matches && matches[1]) || \"\";                                                                          // 482\n    }                                                                                                                  // 483\n                                                                                                                       // 484\n    function constructorName(f, object) {                                                                              // 485\n        var name = functionName(object && object.constructor);                                                         // 486\n        var excludes = f.excludeConstructors ||                                                                        // 487\n                formatio.excludeConstructors || [];                                                                    // 488\n                                                                                                                       // 489\n        var i, l;                                                                                                      // 490\n        for (i = 0, l = excludes.length; i < l; ++i) {                                                                 // 491\n            if (typeof excludes[i] === \"string\" && excludes[i] === name) {                                             // 492\n                return \"\";                                                                                             // 493\n            } else if (excludes[i].test && excludes[i].test(name)) {                                                   // 494\n                return \"\";                                                                                             // 495\n            }                                                                                                          // 496\n        }                                                                                                              // 497\n                                                                                                                       // 498\n        return name;                                                                                                   // 499\n    }                                                                                                                  // 500\n                                                                                                                       // 501\n    function isCircular(object, objects) {                                                                             // 502\n        if (typeof object !== \"object\") { return false; }                                                              // 503\n        var i, l;                                                                                                      // 504\n        for (i = 0, l = objects.length; i < l; ++i) {                                                                  // 505\n            if (objects[i] === object) { return true; }                                                                // 506\n        }                                                                                                              // 507\n        return false;                                                                                                  // 508\n    }                                                                                                                  // 509\n                                                                                                                       // 510\n    function ascii(f, object, processed, indent) {                                                                     // 511\n        if (typeof object === \"string\") {                                                                              // 512\n            var qs = f.quoteStrings;                                                                                   // 513\n            var quote = typeof qs !== \"boolean\" || qs;                                                                 // 514\n            return processed || quote ? '\"' + object + '\"' : object;                                                   // 515\n        }                                                                                                              // 516\n                                                                                                                       // 517\n        if (typeof object === \"function\" && !(object instanceof RegExp)) {                                             // 518\n            return ascii.func(object);                                                                                 // 519\n        }                                                                                                              // 520\n                                                                                                                       // 521\n        processed = processed || [];                                                                                   // 522\n                                                                                                                       // 523\n        if (isCircular(object, processed)) { return \"[Circular]\"; }                                                    // 524\n                                                                                                                       // 525\n        if (Object.prototype.toString.call(object) === \"[object Array]\") {                                             // 526\n            return ascii.array.call(f, object, processed);                                                             // 527\n        }                                                                                                              // 528\n                                                                                                                       // 529\n        if (!object) { return String((1/object) === -Infinity ? \"-0\" : object); }                                      // 530\n        if (samsam.isElement(object)) { return ascii.element(object); }                                                // 531\n                                                                                                                       // 532\n        if (typeof object.toString === \"function\" &&                                                                   // 533\n                object.toString !== Object.prototype.toString) {                                                       // 534\n            return object.toString();                                                                                  // 535\n        }                                                                                                              // 536\n                                                                                                                       // 537\n        var i, l;                                                                                                      // 538\n        for (i = 0, l = specialObjects.length; i < l; i++) {                                                           // 539\n            if (object === specialObjects[i].object) {                                                                 // 540\n                return specialObjects[i].value;                                                                        // 541\n            }                                                                                                          // 542\n        }                                                                                                              // 543\n                                                                                                                       // 544\n        return ascii.object.call(f, object, processed, indent);                                                        // 545\n    }                                                                                                                  // 546\n                                                                                                                       // 547\n    ascii.func = function (func) {                                                                                     // 548\n        return \"function \" + functionName(func) + \"() {}\";                                                             // 549\n    };                                                                                                                 // 550\n                                                                                                                       // 551\n    ascii.array = function (array, processed) {                                                                        // 552\n        processed = processed || [];                                                                                   // 553\n        processed.push(array);                                                                                         // 554\n        var pieces = [];                                                                                               // 555\n        var i, l;                                                                                                      // 556\n        l = (this.limitChildrenCount > 0) ?                                                                            // 557\n            Math.min(this.limitChildrenCount, array.length) : array.length;                                            // 558\n                                                                                                                       // 559\n        for (i = 0; i < l; ++i) {                                                                                      // 560\n            pieces.push(ascii(this, array[i], processed));                                                             // 561\n        }                                                                                                              // 562\n                                                                                                                       // 563\n        if(l < array.length)                                                                                           // 564\n            pieces.push(\"[... \" + (array.length - l) + \" more elements]\");                                             // 565\n                                                                                                                       // 566\n        return \"[\" + pieces.join(\", \") + \"]\";                                                                          // 567\n    };                                                                                                                 // 568\n                                                                                                                       // 569\n    ascii.object = function (object, processed, indent) {                                                              // 570\n        processed = processed || [];                                                                                   // 571\n        processed.push(object);                                                                                        // 572\n        indent = indent || 0;                                                                                          // 573\n        var pieces = [], properties = samsam.keys(object).sort();                                                      // 574\n        var length = 3;                                                                                                // 575\n        var prop, str, obj, i, k, l;                                                                                   // 576\n        l = (this.limitChildrenCount > 0) ?                                                                            // 577\n            Math.min(this.limitChildrenCount, properties.length) : properties.length;                                  // 578\n                                                                                                                       // 579\n        for (i = 0; i < l; ++i) {                                                                                      // 580\n            prop = properties[i];                                                                                      // 581\n            obj = object[prop];                                                                                        // 582\n                                                                                                                       // 583\n            if (isCircular(obj, processed)) {                                                                          // 584\n                str = \"[Circular]\";                                                                                    // 585\n            } else {                                                                                                   // 586\n                str = ascii(this, obj, processed, indent + 2);                                                         // 587\n            }                                                                                                          // 588\n                                                                                                                       // 589\n            str = (/\\s/.test(prop) ? '\"' + prop + '\"' : prop) + \": \" + str;                                            // 590\n            length += str.length;                                                                                      // 591\n            pieces.push(str);                                                                                          // 592\n        }                                                                                                              // 593\n                                                                                                                       // 594\n        var cons = constructorName(this, object);                                                                      // 595\n        var prefix = cons ? \"[\" + cons + \"] \" : \"\";                                                                    // 596\n        var is = \"\";                                                                                                   // 597\n        for (i = 0, k = indent; i < k; ++i) { is += \" \"; }                                                             // 598\n                                                                                                                       // 599\n        if(l < properties.length)                                                                                      // 600\n            pieces.push(\"[... \" + (properties.length - l) + \" more elements]\");                                        // 601\n                                                                                                                       // 602\n        if (length + indent > 80) {                                                                                    // 603\n            return prefix + \"{\\n  \" + is + pieces.join(\",\\n  \" + is) + \"\\n\" +                                          // 604\n                is + \"}\";                                                                                              // 605\n        }                                                                                                              // 606\n        return prefix + \"{ \" + pieces.join(\", \") + \" }\";                                                               // 607\n    };                                                                                                                 // 608\n                                                                                                                       // 609\n    ascii.element = function (element) {                                                                               // 610\n        var tagName = element.tagName.toLowerCase();                                                                   // 611\n        var attrs = element.attributes, attr, pairs = [], attrName, i, l, val;                                         // 612\n                                                                                                                       // 613\n        for (i = 0, l = attrs.length; i < l; ++i) {                                                                    // 614\n            attr = attrs.item(i);                                                                                      // 615\n            attrName = attr.nodeName.toLowerCase().replace(\"html:\", \"\");                                               // 616\n            val = attr.nodeValue;                                                                                      // 617\n            if (attrName !== \"contenteditable\" || val !== \"inherit\") {                                                 // 618\n                if (!!val) { pairs.push(attrName + \"=\\\"\" + val + \"\\\"\"); }                                              // 619\n            }                                                                                                          // 620\n        }                                                                                                              // 621\n                                                                                                                       // 622\n        var formatted = \"<\" + tagName + (pairs.length > 0 ? \" \" : \"\");                                                 // 623\n        var content = element.innerHTML;                                                                               // 624\n                                                                                                                       // 625\n        if (content.length > 20) {                                                                                     // 626\n            content = content.substr(0, 20) + \"[...]\";                                                                 // 627\n        }                                                                                                              // 628\n                                                                                                                       // 629\n        var res = formatted + pairs.join(\" \") + \">\" + content +                                                        // 630\n                \"</\" + tagName + \">\";                                                                                  // 631\n                                                                                                                       // 632\n        return res.replace(/ contentEditable=\"inherit\"/, \"\");                                                          // 633\n    };                                                                                                                 // 634\n                                                                                                                       // 635\n    function Formatio(options) {                                                                                       // 636\n        for (var opt in options) {                                                                                     // 637\n            this[opt] = options[opt];                                                                                  // 638\n        }                                                                                                              // 639\n    }                                                                                                                  // 640\n                                                                                                                       // 641\n    Formatio.prototype = {                                                                                             // 642\n        functionName: functionName,                                                                                    // 643\n                                                                                                                       // 644\n        configure: function (options) {                                                                                // 645\n            return new Formatio(options);                                                                              // 646\n        },                                                                                                             // 647\n                                                                                                                       // 648\n        constructorName: function (object) {                                                                           // 649\n            return constructorName(this, object);                                                                      // 650\n        },                                                                                                             // 651\n                                                                                                                       // 652\n        ascii: function (object, processed, indent) {                                                                  // 653\n            return ascii(this, object, processed, indent);                                                             // 654\n        }                                                                                                              // 655\n    };                                                                                                                 // 656\n                                                                                                                       // 657\n    return Formatio.prototype;                                                                                         // 658\n});                                                                                                                    // 659\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.lolex=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){                                                                                                    // 661\n/*jslint eqeqeq: false, plusplus: false, evil: true, onevar: false, browser: true, forin: false*/                      // 662\n/*global global*/                                                                                                      // 663\n/**                                                                                                                    // 664\n * @author Christian Johansen (christian@cjohansen.no) and contributors                                                // 665\n * @license BSD                                                                                                        // 666\n *                                                                                                                     // 667\n * Copyright (c) 2010-2014 Christian Johansen                                                                          // 668\n */                                                                                                                    // 669\n                                                                                                                       // 670\n// node expects setTimeout/setInterval to return a fn object w/ .ref()/.unref()                                        // 671\n// browsers, a number.                                                                                                 // 672\n// see https://github.com/cjohansen/Sinon.JS/pull/436                                                                  // 673\nvar timeoutResult = setTimeout(function() {}, 0);                                                                      // 674\nvar addTimerReturnsObject = typeof timeoutResult === \"object\";                                                         // 675\nclearTimeout(timeoutResult);                                                                                           // 676\n                                                                                                                       // 677\nvar NativeDate = Date;                                                                                                 // 678\nvar id = 1;                                                                                                            // 679\n                                                                                                                       // 680\n/**                                                                                                                    // 681\n * Parse strings like \"01:10:00\" (meaning 1 hour, 10 minutes, 0 seconds) into                                          // 682\n * number of milliseconds. This is used to support human-readable strings passed                                       // 683\n * to clock.tick()                                                                                                     // 684\n */                                                                                                                    // 685\nfunction parseTime(str) {                                                                                              // 686\n    if (!str) {                                                                                                        // 687\n        return 0;                                                                                                      // 688\n    }                                                                                                                  // 689\n                                                                                                                       // 690\n    var strings = str.split(\":\");                                                                                      // 691\n    var l = strings.length, i = l;                                                                                     // 692\n    var ms = 0, parsed;                                                                                                // 693\n                                                                                                                       // 694\n    if (l > 3 || !/^(\\d\\d:){0,2}\\d\\d?$/.test(str)) {                                                                   // 695\n        throw new Error(\"tick only understands numbers and 'h:m:s'\");                                                  // 696\n    }                                                                                                                  // 697\n                                                                                                                       // 698\n    while (i--) {                                                                                                      // 699\n        parsed = parseInt(strings[i], 10);                                                                             // 700\n                                                                                                                       // 701\n        if (parsed >= 60) {                                                                                            // 702\n            throw new Error(\"Invalid time \" + str);                                                                    // 703\n        }                                                                                                              // 704\n                                                                                                                       // 705\n        ms += parsed * Math.pow(60, (l - i - 1));                                                                      // 706\n    }                                                                                                                  // 707\n                                                                                                                       // 708\n    return ms * 1000;                                                                                                  // 709\n}                                                                                                                      // 710\n                                                                                                                       // 711\n/**                                                                                                                    // 712\n * Used to grok the `now` parameter to createClock.                                                                    // 713\n */                                                                                                                    // 714\nfunction getEpoch(epoch) {                                                                                             // 715\n    if (!epoch) { return 0; }                                                                                          // 716\n    if (typeof epoch.getTime === \"function\") { return epoch.getTime(); }                                               // 717\n    if (typeof epoch === \"number\") { return epoch; }                                                                   // 718\n    throw new TypeError(\"now should be milliseconds since UNIX epoch\");                                                // 719\n}                                                                                                                      // 720\n                                                                                                                       // 721\nfunction inRange(from, to, timer) {                                                                                    // 722\n    return timer && timer.callAt >= from && timer.callAt <= to;                                                        // 723\n}                                                                                                                      // 724\n                                                                                                                       // 725\nfunction mirrorDateProperties(target, source) {                                                                        // 726\n    if (source.now) {                                                                                                  // 727\n        target.now = function now() {                                                                                  // 728\n            return target.clock.now;                                                                                   // 729\n        };                                                                                                             // 730\n    } else {                                                                                                           // 731\n        delete target.now;                                                                                             // 732\n    }                                                                                                                  // 733\n                                                                                                                       // 734\n    if (source.toSource) {                                                                                             // 735\n        target.toSource = function toSource() {                                                                        // 736\n            return source.toSource();                                                                                  // 737\n        };                                                                                                             // 738\n    } else {                                                                                                           // 739\n        delete target.toSource;                                                                                        // 740\n    }                                                                                                                  // 741\n                                                                                                                       // 742\n    target.toString = function toString() {                                                                            // 743\n        return source.toString();                                                                                      // 744\n    };                                                                                                                 // 745\n                                                                                                                       // 746\n    target.prototype = source.prototype;                                                                               // 747\n    target.parse = source.parse;                                                                                       // 748\n    target.UTC = source.UTC;                                                                                           // 749\n    target.prototype.toUTCString = source.prototype.toUTCString;                                                       // 750\n                                                                                                                       // 751\n    for (var prop in source) {                                                                                         // 752\n        if (source.hasOwnProperty(prop)) {                                                                             // 753\n            target[prop] = source[prop];                                                                               // 754\n        }                                                                                                              // 755\n    }                                                                                                                  // 756\n                                                                                                                       // 757\n    return target;                                                                                                     // 758\n}                                                                                                                      // 759\n                                                                                                                       // 760\nfunction createDate() {                                                                                                // 761\n    function ClockDate(year, month, date, hour, minute, second, ms) {                                                  // 762\n        // Defensive and verbose to avoid potential harm in passing                                                    // 763\n        // explicit undefined when user does not pass argument                                                         // 764\n        switch (arguments.length) {                                                                                    // 765\n        case 0:                                                                                                        // 766\n            return new NativeDate(ClockDate.clock.now);                                                                // 767\n        case 1:                                                                                                        // 768\n            return new NativeDate(year);                                                                               // 769\n        case 2:                                                                                                        // 770\n            return new NativeDate(year, month);                                                                        // 771\n        case 3:                                                                                                        // 772\n            return new NativeDate(year, month, date);                                                                  // 773\n        case 4:                                                                                                        // 774\n            return new NativeDate(year, month, date, hour);                                                            // 775\n        case 5:                                                                                                        // 776\n            return new NativeDate(year, month, date, hour, minute);                                                    // 777\n        case 6:                                                                                                        // 778\n            return new NativeDate(year, month, date, hour, minute, second);                                            // 779\n        default:                                                                                                       // 780\n            return new NativeDate(year, month, date, hour, minute, second, ms);                                        // 781\n        }                                                                                                              // 782\n    }                                                                                                                  // 783\n                                                                                                                       // 784\n    return mirrorDateProperties(ClockDate, NativeDate);                                                                // 785\n}                                                                                                                      // 786\n                                                                                                                       // 787\nfunction addTimer(clock, timer) {                                                                                      // 788\n    if (typeof timer.func === \"undefined\") {                                                                           // 789\n        throw new Error(\"Callback must be provided to timer calls\");                                                   // 790\n    }                                                                                                                  // 791\n                                                                                                                       // 792\n    if (!clock.timers) {                                                                                               // 793\n        clock.timers = {};                                                                                             // 794\n    }                                                                                                                  // 795\n                                                                                                                       // 796\n    timer.id = id++;                                                                                                   // 797\n    timer.createdAt = clock.now;                                                                                       // 798\n    timer.callAt = clock.now + (timer.delay || 0);                                                                     // 799\n                                                                                                                       // 800\n    clock.timers[timer.id] = timer;                                                                                    // 801\n                                                                                                                       // 802\n    if (addTimerReturnsObject) {                                                                                       // 803\n        return {                                                                                                       // 804\n            id: timer.id,                                                                                              // 805\n            ref: function() {},                                                                                        // 806\n            unref: function() {}                                                                                       // 807\n        };                                                                                                             // 808\n    }                                                                                                                  // 809\n    else {                                                                                                             // 810\n        return timer.id;                                                                                               // 811\n    }                                                                                                                  // 812\n}                                                                                                                      // 813\n                                                                                                                       // 814\nfunction firstTimerInRange(clock, from, to) {                                                                          // 815\n    var timers = clock.timers, timer = null;                                                                           // 816\n                                                                                                                       // 817\n    for (var id in timers) {                                                                                           // 818\n        if (!inRange(from, to, timers[id])) {                                                                          // 819\n            continue;                                                                                                  // 820\n        }                                                                                                              // 821\n                                                                                                                       // 822\n        if (!timer || ~compareTimers(timer, timers[id])) {                                                             // 823\n            timer = timers[id];                                                                                        // 824\n        }                                                                                                              // 825\n    }                                                                                                                  // 826\n                                                                                                                       // 827\n    return timer;                                                                                                      // 828\n}                                                                                                                      // 829\n                                                                                                                       // 830\nfunction compareTimers(a, b) {                                                                                         // 831\n    // Sort first by absolute timing                                                                                   // 832\n    if (a.callAt < b.callAt) {                                                                                         // 833\n        return -1;                                                                                                     // 834\n    }                                                                                                                  // 835\n    if (a.callAt > b.callAt) {                                                                                         // 836\n        return 1;                                                                                                      // 837\n    }                                                                                                                  // 838\n                                                                                                                       // 839\n    // Sort next by immediate, immediate timers take precedence                                                        // 840\n    if (a.immediate && !b.immediate) {                                                                                 // 841\n        return -1;                                                                                                     // 842\n    }                                                                                                                  // 843\n    if (!a.immediate && b.immediate) {                                                                                 // 844\n        return 1;                                                                                                      // 845\n    }                                                                                                                  // 846\n                                                                                                                       // 847\n    // Sort next by creation time, earlier-created timers take precedence                                              // 848\n    if (a.createdAt < b.createdAt) {                                                                                   // 849\n        return -1;                                                                                                     // 850\n    }                                                                                                                  // 851\n    if (a.createdAt > b.createdAt) {                                                                                   // 852\n        return 1;                                                                                                      // 853\n    }                                                                                                                  // 854\n                                                                                                                       // 855\n    // Sort next by id, lower-id timers take precedence                                                                // 856\n    if (a.id < b.id) {                                                                                                 // 857\n        return -1;                                                                                                     // 858\n    }                                                                                                                  // 859\n    if (a.id > b.id) {                                                                                                 // 860\n        return 1;                                                                                                      // 861\n    }                                                                                                                  // 862\n                                                                                                                       // 863\n    // As timer ids are unique, no fallback `0` is necessary                                                           // 864\n}                                                                                                                      // 865\n                                                                                                                       // 866\nfunction callTimer(clock, timer) {                                                                                     // 867\n    if (typeof timer.interval == \"number\") {                                                                           // 868\n        clock.timers[timer.id].callAt += timer.interval;                                                               // 869\n    } else {                                                                                                           // 870\n        delete clock.timers[timer.id];                                                                                 // 871\n    }                                                                                                                  // 872\n                                                                                                                       // 873\n    try {                                                                                                              // 874\n        if (typeof timer.func == \"function\") {                                                                         // 875\n            timer.func.apply(null, timer.args);                                                                        // 876\n        } else {                                                                                                       // 877\n            eval(timer.func);                                                                                          // 878\n        }                                                                                                              // 879\n    } catch (e) {                                                                                                      // 880\n        var exception = e;                                                                                             // 881\n    }                                                                                                                  // 882\n                                                                                                                       // 883\n    if (!clock.timers[timer.id]) {                                                                                     // 884\n        if (exception) {                                                                                               // 885\n            throw exception;                                                                                           // 886\n        }                                                                                                              // 887\n        return;                                                                                                        // 888\n    }                                                                                                                  // 889\n                                                                                                                       // 890\n    if (exception) {                                                                                                   // 891\n        throw exception;                                                                                               // 892\n    }                                                                                                                  // 893\n}                                                                                                                      // 894\n                                                                                                                       // 895\nfunction uninstall(clock, target) {                                                                                    // 896\n    var method;                                                                                                        // 897\n                                                                                                                       // 898\n    for (var i = 0, l = clock.methods.length; i < l; i++) {                                                            // 899\n        method = clock.methods[i];                                                                                     // 900\n                                                                                                                       // 901\n        if (target[method].hadOwnProperty) {                                                                           // 902\n            target[method] = clock[\"_\" + method];                                                                      // 903\n        } else {                                                                                                       // 904\n            try {                                                                                                      // 905\n                delete target[method];                                                                                 // 906\n            } catch (e) {}                                                                                             // 907\n        }                                                                                                              // 908\n    }                                                                                                                  // 909\n                                                                                                                       // 910\n    // Prevent multiple executions which will completely remove these props                                            // 911\n    clock.methods = [];                                                                                                // 912\n}                                                                                                                      // 913\n                                                                                                                       // 914\nfunction hijackMethod(target, method, clock) {                                                                         // 915\n    clock[method].hadOwnProperty = Object.prototype.hasOwnProperty.call(target, method);                               // 916\n    clock[\"_\" + method] = target[method];                                                                              // 917\n                                                                                                                       // 918\n    if (method == \"Date\") {                                                                                            // 919\n        var date = mirrorDateProperties(clock[method], target[method]);                                                // 920\n        target[method] = date;                                                                                         // 921\n    } else {                                                                                                           // 922\n        target[method] = function () {                                                                                 // 923\n            return clock[method].apply(clock, arguments);                                                              // 924\n        };                                                                                                             // 925\n                                                                                                                       // 926\n        for (var prop in clock[method]) {                                                                              // 927\n            if (clock[method].hasOwnProperty(prop)) {                                                                  // 928\n                target[method][prop] = clock[method][prop];                                                            // 929\n            }                                                                                                          // 930\n        }                                                                                                              // 931\n    }                                                                                                                  // 932\n                                                                                                                       // 933\n    target[method].clock = clock;                                                                                      // 934\n}                                                                                                                      // 935\n                                                                                                                       // 936\nvar timers = {                                                                                                         // 937\n    setTimeout: setTimeout,                                                                                            // 938\n    clearTimeout: clearTimeout,                                                                                        // 939\n    setImmediate: (typeof setImmediate !== \"undefined\" ? setImmediate : undefined),                                    // 940\n    clearImmediate: (typeof clearImmediate !== \"undefined\" ? clearImmediate: undefined),                               // 941\n    setInterval: setInterval,                                                                                          // 942\n    clearInterval: clearInterval,                                                                                      // 943\n    Date: Date                                                                                                         // 944\n};                                                                                                                     // 945\n                                                                                                                       // 946\nvar keys = Object.keys || function (obj) {                                                                             // 947\n    var ks = [];                                                                                                       // 948\n    for (var key in obj) {                                                                                             // 949\n        ks.push(key);                                                                                                  // 950\n    }                                                                                                                  // 951\n    return ks;                                                                                                         // 952\n};                                                                                                                     // 953\n                                                                                                                       // 954\nexports.timers = timers;                                                                                               // 955\n                                                                                                                       // 956\nvar createClock = exports.createClock = function (now) {                                                               // 957\n    var clock = {                                                                                                      // 958\n        now: getEpoch(now),                                                                                            // 959\n        timeouts: {},                                                                                                  // 960\n        Date: createDate()                                                                                             // 961\n    };                                                                                                                 // 962\n                                                                                                                       // 963\n    clock.Date.clock = clock;                                                                                          // 964\n                                                                                                                       // 965\n    clock.setTimeout = function setTimeout(func, timeout) {                                                            // 966\n        return addTimer(clock, {                                                                                       // 967\n            func: func,                                                                                                // 968\n            args: Array.prototype.slice.call(arguments, 2),                                                            // 969\n            delay: timeout                                                                                             // 970\n        });                                                                                                            // 971\n    };                                                                                                                 // 972\n                                                                                                                       // 973\n    clock.clearTimeout = function clearTimeout(timerId) {                                                              // 974\n        if (!timerId) {                                                                                                // 975\n            // null appears to be allowed in most browsers, and appears to be                                          // 976\n            // relied upon by some libraries, like Bootstrap carousel                                                  // 977\n            return;                                                                                                    // 978\n        }                                                                                                              // 979\n        if (!clock.timers) {                                                                                           // 980\n            clock.timers = [];                                                                                         // 981\n        }                                                                                                              // 982\n        // in Node, timerId is an object with .ref()/.unref(), and                                                     // 983\n        // its .id field is the actual timer id.                                                                       // 984\n        if (typeof timerId === \"object\") {                                                                             // 985\n            timerId = timerId.id                                                                                       // 986\n        }                                                                                                              // 987\n        if (timerId in clock.timers) {                                                                                 // 988\n            delete clock.timers[timerId];                                                                              // 989\n        }                                                                                                              // 990\n    };                                                                                                                 // 991\n                                                                                                                       // 992\n    clock.setInterval = function setInterval(func, timeout) {                                                          // 993\n        return addTimer(clock, {                                                                                       // 994\n            func: func,                                                                                                // 995\n            args: Array.prototype.slice.call(arguments, 2),                                                            // 996\n            delay: timeout,                                                                                            // 997\n            interval: timeout                                                                                          // 998\n        });                                                                                                            // 999\n    };                                                                                                                 // 1000\n                                                                                                                       // 1001\n    clock.clearInterval = function clearInterval(timerId) {                                                            // 1002\n        clock.clearTimeout(timerId);                                                                                   // 1003\n    };                                                                                                                 // 1004\n                                                                                                                       // 1005\n    clock.setImmediate = function setImmediate(func) {                                                                 // 1006\n        return addTimer(clock, {                                                                                       // 1007\n            func: func,                                                                                                // 1008\n            args: Array.prototype.slice.call(arguments, 1),                                                            // 1009\n            immediate: true                                                                                            // 1010\n        });                                                                                                            // 1011\n    };                                                                                                                 // 1012\n                                                                                                                       // 1013\n    clock.clearImmediate = function clearImmediate(timerId) {                                                          // 1014\n        clock.clearTimeout(timerId);                                                                                   // 1015\n    };                                                                                                                 // 1016\n                                                                                                                       // 1017\n    clock.tick = function tick(ms) {                                                                                   // 1018\n        ms = typeof ms == \"number\" ? ms : parseTime(ms);                                                               // 1019\n        var tickFrom = clock.now, tickTo = clock.now + ms, previous = clock.now;                                       // 1020\n        var timer = firstTimerInRange(clock, tickFrom, tickTo);                                                        // 1021\n                                                                                                                       // 1022\n        var firstException;                                                                                            // 1023\n        while (timer && tickFrom <= tickTo) {                                                                          // 1024\n            if (clock.timers[timer.id]) {                                                                              // 1025\n                tickFrom = clock.now = timer.callAt;                                                                   // 1026\n                try {                                                                                                  // 1027\n                    callTimer(clock, timer);                                                                           // 1028\n                } catch (e) {                                                                                          // 1029\n                    firstException = firstException || e;                                                              // 1030\n                }                                                                                                      // 1031\n            }                                                                                                          // 1032\n                                                                                                                       // 1033\n            timer = firstTimerInRange(clock, previous, tickTo);                                                        // 1034\n            previous = tickFrom;                                                                                       // 1035\n        }                                                                                                              // 1036\n                                                                                                                       // 1037\n        clock.now = tickTo;                                                                                            // 1038\n                                                                                                                       // 1039\n        if (firstException) {                                                                                          // 1040\n            throw firstException;                                                                                      // 1041\n        }                                                                                                              // 1042\n                                                                                                                       // 1043\n        return clock.now;                                                                                              // 1044\n    };                                                                                                                 // 1045\n                                                                                                                       // 1046\n    clock.reset = function reset() {                                                                                   // 1047\n        clock.timers = {};                                                                                             // 1048\n    };                                                                                                                 // 1049\n                                                                                                                       // 1050\n    return clock;                                                                                                      // 1051\n};                                                                                                                     // 1052\n                                                                                                                       // 1053\nexports.install = function install(target, now, toFake) {                                                              // 1054\n    if (typeof target === \"number\") {                                                                                  // 1055\n        toFake = now;                                                                                                  // 1056\n        now = target;                                                                                                  // 1057\n        target = null;                                                                                                 // 1058\n    }                                                                                                                  // 1059\n                                                                                                                       // 1060\n    if (!target) {                                                                                                     // 1061\n        target = global;                                                                                               // 1062\n    }                                                                                                                  // 1063\n                                                                                                                       // 1064\n    var clock = createClock(now);                                                                                      // 1065\n                                                                                                                       // 1066\n    clock.uninstall = function () {                                                                                    // 1067\n        uninstall(clock, target);                                                                                      // 1068\n    };                                                                                                                 // 1069\n                                                                                                                       // 1070\n    clock.methods = toFake || [];                                                                                      // 1071\n                                                                                                                       // 1072\n    if (clock.methods.length === 0) {                                                                                  // 1073\n        clock.methods = keys(timers);                                                                                  // 1074\n    }                                                                                                                  // 1075\n                                                                                                                       // 1076\n    for (var i = 0, l = clock.methods.length; i < l; i++) {                                                            // 1077\n        hijackMethod(target, clock.methods[i], clock);                                                                 // 1078\n    }                                                                                                                  // 1079\n                                                                                                                       // 1080\n    return clock;                                                                                                      // 1081\n};                                                                                                                     // 1082\n                                                                                                                       // 1083\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}]},{},[1])(1)                                                                                                      // 1085\n});                                                                                                                    // 1086\n  })();                                                                                                                // 1087\n  var define;                                                                                                          // 1088\n/**                                                                                                                    // 1089\n * Sinon core utilities. For internal use only.                                                                        // 1090\n *                                                                                                                     // 1091\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 1092\n * @license BSD                                                                                                        // 1093\n *                                                                                                                     // 1094\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 1095\n */                                                                                                                    // 1096\n                                                                                                                       // 1097\nvar sinon = (function () {                                                                                             // 1098\n\"use strict\";                                                                                                          // 1099\n                                                                                                                       // 1100\n    var sinon;                                                                                                         // 1101\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require === \"function\";                     // 1102\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 1103\n                                                                                                                       // 1104\n    function loadDependencies(require, exports, module) {                                                              // 1105\n        sinon = module.exports = require(\"./sinon/util/core\");                                                         // 1106\n        require(\"./sinon/extend\");                                                                                     // 1107\n        require(\"./sinon/typeOf\");                                                                                     // 1108\n        require(\"./sinon/times_in_words\");                                                                             // 1109\n        require(\"./sinon/spy\");                                                                                        // 1110\n        require(\"./sinon/call\");                                                                                       // 1111\n        require(\"./sinon/behavior\");                                                                                   // 1112\n        require(\"./sinon/stub\");                                                                                       // 1113\n        require(\"./sinon/mock\");                                                                                       // 1114\n        require(\"./sinon/collection\");                                                                                 // 1115\n        require(\"./sinon/assert\");                                                                                     // 1116\n        require(\"./sinon/sandbox\");                                                                                    // 1117\n        require(\"./sinon/test\");                                                                                       // 1118\n        require(\"./sinon/test_case\");                                                                                  // 1119\n        require(\"./sinon/match\");                                                                                      // 1120\n        require(\"./sinon/format\");                                                                                     // 1121\n        require(\"./sinon/log_error\");                                                                                  // 1122\n    }                                                                                                                  // 1123\n                                                                                                                       // 1124\n    if (isAMD) {                                                                                                       // 1125\n        define(loadDependencies);                                                                                      // 1126\n    } else if (isNode) {                                                                                               // 1127\n        loadDependencies(require, module.exports, module);                                                             // 1128\n        sinon = module.exports;                                                                                        // 1129\n    } else {                                                                                                           // 1130\n        sinon = {};                                                                                                    // 1131\n    }                                                                                                                  // 1132\n                                                                                                                       // 1133\n    return sinon;                                                                                                      // 1134\n}());                                                                                                                  // 1135\n                                                                                                                       // 1136\n/**                                                                                                                    // 1137\n * @depend ../../sinon.js                                                                                              // 1138\n */                                                                                                                    // 1139\n/**                                                                                                                    // 1140\n * Sinon core utilities. For internal use only.                                                                        // 1141\n *                                                                                                                     // 1142\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 1143\n * @license BSD                                                                                                        // 1144\n *                                                                                                                     // 1145\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 1146\n */                                                                                                                    // 1147\n                                                                                                                       // 1148\n(function (sinon) {                                                                                                    // 1149\n    var div = typeof document != \"undefined\" && document.createElement(\"div\");                                         // 1150\n    var hasOwn = Object.prototype.hasOwnProperty;                                                                      // 1151\n                                                                                                                       // 1152\n    function isDOMNode(obj) {                                                                                          // 1153\n        var success = false;                                                                                           // 1154\n                                                                                                                       // 1155\n        try {                                                                                                          // 1156\n            obj.appendChild(div);                                                                                      // 1157\n            success = div.parentNode == obj;                                                                           // 1158\n        } catch (e) {                                                                                                  // 1159\n            return false;                                                                                              // 1160\n        } finally {                                                                                                    // 1161\n            try {                                                                                                      // 1162\n                obj.removeChild(div);                                                                                  // 1163\n            } catch (e) {                                                                                              // 1164\n                // Remove failed, not much we can do about that                                                        // 1165\n            }                                                                                                          // 1166\n        }                                                                                                              // 1167\n                                                                                                                       // 1168\n        return success;                                                                                                // 1169\n    }                                                                                                                  // 1170\n                                                                                                                       // 1171\n    function isElement(obj) {                                                                                          // 1172\n        return div && obj && obj.nodeType === 1 && isDOMNode(obj);                                                     // 1173\n    }                                                                                                                  // 1174\n                                                                                                                       // 1175\n    function isFunction(obj) {                                                                                         // 1176\n        return typeof obj === \"function\" || !!(obj && obj.constructor && obj.call && obj.apply);                       // 1177\n    }                                                                                                                  // 1178\n                                                                                                                       // 1179\n    function isReallyNaN(val) {                                                                                        // 1180\n        return typeof val === \"number\" && isNaN(val);                                                                  // 1181\n    }                                                                                                                  // 1182\n                                                                                                                       // 1183\n    function mirrorProperties(target, source) {                                                                        // 1184\n        for (var prop in source) {                                                                                     // 1185\n            if (!hasOwn.call(target, prop)) {                                                                          // 1186\n                target[prop] = source[prop];                                                                           // 1187\n            }                                                                                                          // 1188\n        }                                                                                                              // 1189\n    }                                                                                                                  // 1190\n                                                                                                                       // 1191\n    function isRestorable(obj) {                                                                                       // 1192\n        return typeof obj === \"function\" && typeof obj.restore === \"function\" && obj.restore.sinon;                    // 1193\n    }                                                                                                                  // 1194\n                                                                                                                       // 1195\n    // Cheap way to detect if we have ES5 support.                                                                     // 1196\n    var hasES5Support = \"keys\" in Object;                                                                              // 1197\n                                                                                                                       // 1198\n    function makeApi(sinon) {                                                                                          // 1199\n        sinon.wrapMethod = function wrapMethod(object, property, method) {                                             // 1200\n            if (!object) {                                                                                             // 1201\n                throw new TypeError(\"Should wrap property of object\");                                                 // 1202\n            }                                                                                                          // 1203\n                                                                                                                       // 1204\n            if (typeof method != \"function\" && typeof method != \"object\") {                                            // 1205\n                throw new TypeError(\"Method wrapper should be a function or a property descriptor\");                   // 1206\n            }                                                                                                          // 1207\n                                                                                                                       // 1208\n            function checkWrappedMethod(wrappedMethod) {                                                               // 1209\n                if (!isFunction(wrappedMethod)) {                                                                      // 1210\n                    error = new TypeError(\"Attempted to wrap \" + (typeof wrappedMethod) + \" property \" +               // 1211\n                                        property + \" as function\");                                                    // 1212\n                } else if (wrappedMethod.restore && wrappedMethod.restore.sinon) {                                     // 1213\n                    error = new TypeError(\"Attempted to wrap \" + property + \" which is already wrapped\");              // 1214\n                } else if (wrappedMethod.calledBefore) {                                                               // 1215\n                    var verb = !!wrappedMethod.returns ? \"stubbed\" : \"spied on\";                                       // 1216\n                    error = new TypeError(\"Attempted to wrap \" + property + \" which is already \" + verb);              // 1217\n                }                                                                                                      // 1218\n                                                                                                                       // 1219\n                if (error) {                                                                                           // 1220\n                    if (wrappedMethod && wrappedMethod.stackTrace) {                                                   // 1221\n                        error.stack += \"\\n--------------\\n\" + wrappedMethod.stackTrace;                                // 1222\n                    }                                                                                                  // 1223\n                    throw error;                                                                                       // 1224\n                }                                                                                                      // 1225\n            }                                                                                                          // 1226\n                                                                                                                       // 1227\n            var error, wrappedMethod;                                                                                  // 1228\n                                                                                                                       // 1229\n            // IE 8 does not support hasOwnProperty on the window object and Firefox has a problem                     // 1230\n            // when using hasOwn.call on objects from other frames.                                                    // 1231\n            var owned = object.hasOwnProperty ? object.hasOwnProperty(property) : hasOwn.call(object, property);       // 1232\n                                                                                                                       // 1233\n            if (hasES5Support) {                                                                                       // 1234\n                var methodDesc = (typeof method == \"function\") ? {value: method} : method,                             // 1235\n                    wrappedMethodDesc = sinon.getPropertyDescriptor(object, property),                                 // 1236\n                    i;                                                                                                 // 1237\n                                                                                                                       // 1238\n                if (!wrappedMethodDesc) {                                                                              // 1239\n                    error = new TypeError(\"Attempted to wrap \" + (typeof wrappedMethod) + \" property \" +               // 1240\n                                        property + \" as function\");                                                    // 1241\n                } else if (wrappedMethodDesc.restore && wrappedMethodDesc.restore.sinon) {                             // 1242\n                    error = new TypeError(\"Attempted to wrap \" + property + \" which is already wrapped\");              // 1243\n                }                                                                                                      // 1244\n                if (error) {                                                                                           // 1245\n                    if (wrappedMethodDesc && wrappedMethodDesc.stackTrace) {                                           // 1246\n                        error.stack += \"\\n--------------\\n\" + wrappedMethodDesc.stackTrace;                            // 1247\n                    }                                                                                                  // 1248\n                    throw error;                                                                                       // 1249\n                }                                                                                                      // 1250\n                                                                                                                       // 1251\n                var types = sinon.objectKeys(methodDesc);                                                              // 1252\n                for (i = 0; i < types.length; i++) {                                                                   // 1253\n                    wrappedMethod = wrappedMethodDesc[types[i]];                                                       // 1254\n                    checkWrappedMethod(wrappedMethod);                                                                 // 1255\n                }                                                                                                      // 1256\n                                                                                                                       // 1257\n                mirrorProperties(methodDesc, wrappedMethodDesc);                                                       // 1258\n                for (i = 0; i < types.length; i++) {                                                                   // 1259\n                    mirrorProperties(methodDesc[types[i]], wrappedMethodDesc[types[i]]);                               // 1260\n                }                                                                                                      // 1261\n                Object.defineProperty(object, property, methodDesc);                                                   // 1262\n            } else {                                                                                                   // 1263\n                wrappedMethod = object[property];                                                                      // 1264\n                checkWrappedMethod(wrappedMethod);                                                                     // 1265\n                object[property] = method;                                                                             // 1266\n                method.displayName = property;                                                                         // 1267\n            }                                                                                                          // 1268\n                                                                                                                       // 1269\n            method.displayName = property;                                                                             // 1270\n                                                                                                                       // 1271\n            // Set up a stack trace which can be used later to find what line of                                       // 1272\n            // code the original method was created on.                                                                // 1273\n            method.stackTrace = (new Error(\"Stack Trace for original\")).stack;                                         // 1274\n                                                                                                                       // 1275\n            method.restore = function () {                                                                             // 1276\n                // For prototype properties try to reset by delete first.                                              // 1277\n                // If this fails (ex: localStorage on mobile safari) then force a reset                                // 1278\n                // via direct assignment.                                                                              // 1279\n                if (!owned) {                                                                                          // 1280\n                    try {                                                                                              // 1281\n                        delete object[property];                                                                       // 1282\n                    } catch (e) {}                                                                                     // 1283\n                    // For native code functions `delete` fails without throwing an error                              // 1284\n                    // on Chrome < 43, PhantomJS, etc.                                                                 // 1285\n                    // Use strict equality comparison to check failures then force a reset                             // 1286\n                    // via direct assignment.                                                                          // 1287\n                    if (object[property] === method) {                                                                 // 1288\n                        object[property] = wrappedMethod;                                                              // 1289\n                    }                                                                                                  // 1290\n                } else if (hasES5Support) {                                                                            // 1291\n                    Object.defineProperty(object, property, wrappedMethodDesc);                                        // 1292\n                }                                                                                                      // 1293\n                                                                                                                       // 1294\n                if (!hasES5Support && object[property] === method) {                                                   // 1295\n                    object[property] = wrappedMethod;                                                                  // 1296\n                }                                                                                                      // 1297\n            };                                                                                                         // 1298\n                                                                                                                       // 1299\n            method.restore.sinon = true;                                                                               // 1300\n                                                                                                                       // 1301\n            if (!hasES5Support) {                                                                                      // 1302\n                mirrorProperties(method, wrappedMethod);                                                               // 1303\n            }                                                                                                          // 1304\n                                                                                                                       // 1305\n            return method;                                                                                             // 1306\n        };                                                                                                             // 1307\n                                                                                                                       // 1308\n        sinon.create = function create(proto) {                                                                        // 1309\n            var F = function () {};                                                                                    // 1310\n            F.prototype = proto;                                                                                       // 1311\n            return new F();                                                                                            // 1312\n        };                                                                                                             // 1313\n                                                                                                                       // 1314\n        sinon.deepEqual = function deepEqual(a, b) {                                                                   // 1315\n            if (sinon.match && sinon.match.isMatcher(a)) {                                                             // 1316\n                return a.test(b);                                                                                      // 1317\n            }                                                                                                          // 1318\n                                                                                                                       // 1319\n            if (typeof a != \"object\" || typeof b != \"object\") {                                                        // 1320\n                if (isReallyNaN(a) && isReallyNaN(b)) {                                                                // 1321\n                    return true;                                                                                       // 1322\n                } else {                                                                                               // 1323\n                    return a === b;                                                                                    // 1324\n                }                                                                                                      // 1325\n            }                                                                                                          // 1326\n                                                                                                                       // 1327\n            if (isElement(a) || isElement(b)) {                                                                        // 1328\n                return a === b;                                                                                        // 1329\n            }                                                                                                          // 1330\n                                                                                                                       // 1331\n            if (a === b) {                                                                                             // 1332\n                return true;                                                                                           // 1333\n            }                                                                                                          // 1334\n                                                                                                                       // 1335\n            if ((a === null && b !== null) || (a !== null && b === null)) {                                            // 1336\n                return false;                                                                                          // 1337\n            }                                                                                                          // 1338\n                                                                                                                       // 1339\n            if (a instanceof RegExp && b instanceof RegExp) {                                                          // 1340\n                return (a.source === b.source) && (a.global === b.global) &&                                           // 1341\n                    (a.ignoreCase === b.ignoreCase) && (a.multiline === b.multiline);                                  // 1342\n            }                                                                                                          // 1343\n                                                                                                                       // 1344\n            var aString = Object.prototype.toString.call(a);                                                           // 1345\n            if (aString != Object.prototype.toString.call(b)) {                                                        // 1346\n                return false;                                                                                          // 1347\n            }                                                                                                          // 1348\n                                                                                                                       // 1349\n            if (aString == \"[object Date]\") {                                                                          // 1350\n                return a.valueOf() === b.valueOf();                                                                    // 1351\n            }                                                                                                          // 1352\n                                                                                                                       // 1353\n            var prop, aLength = 0, bLength = 0;                                                                        // 1354\n                                                                                                                       // 1355\n            if (aString == \"[object Array]\" && a.length !== b.length) {                                                // 1356\n                return false;                                                                                          // 1357\n            }                                                                                                          // 1358\n                                                                                                                       // 1359\n            for (prop in a) {                                                                                          // 1360\n                aLength += 1;                                                                                          // 1361\n                                                                                                                       // 1362\n                if (!(prop in b)) {                                                                                    // 1363\n                    return false;                                                                                      // 1364\n                }                                                                                                      // 1365\n                                                                                                                       // 1366\n                if (!deepEqual(a[prop], b[prop])) {                                                                    // 1367\n                    return false;                                                                                      // 1368\n                }                                                                                                      // 1369\n            }                                                                                                          // 1370\n                                                                                                                       // 1371\n            for (prop in b) {                                                                                          // 1372\n                bLength += 1;                                                                                          // 1373\n            }                                                                                                          // 1374\n                                                                                                                       // 1375\n            return aLength == bLength;                                                                                 // 1376\n        };                                                                                                             // 1377\n                                                                                                                       // 1378\n        sinon.functionName = function functionName(func) {                                                             // 1379\n            var name = func.displayName || func.name;                                                                  // 1380\n                                                                                                                       // 1381\n            // Use function decomposition as a last resort to get function                                             // 1382\n            // name. Does not rely on function decomposition to work - if it                                           // 1383\n            // doesn't debugging will be slightly less informative                                                     // 1384\n            // (i.e. toString will say 'spy' rather than 'myFunc').                                                    // 1385\n            if (!name) {                                                                                               // 1386\n                var matches = func.toString().match(/function ([^\\s\\(]+)/);                                            // 1387\n                name = matches && matches[1];                                                                          // 1388\n            }                                                                                                          // 1389\n                                                                                                                       // 1390\n            return name;                                                                                               // 1391\n        };                                                                                                             // 1392\n                                                                                                                       // 1393\n        sinon.functionToString = function toString() {                                                                 // 1394\n            if (this.getCall && this.callCount) {                                                                      // 1395\n                var thisValue, prop, i = this.callCount;                                                               // 1396\n                                                                                                                       // 1397\n                while (i--) {                                                                                          // 1398\n                    thisValue = this.getCall(i).thisValue;                                                             // 1399\n                                                                                                                       // 1400\n                    for (prop in thisValue) {                                                                          // 1401\n                        if (thisValue[prop] === this) {                                                                // 1402\n                            return prop;                                                                               // 1403\n                        }                                                                                              // 1404\n                    }                                                                                                  // 1405\n                }                                                                                                      // 1406\n            }                                                                                                          // 1407\n                                                                                                                       // 1408\n            return this.displayName || \"sinon fake\";                                                                   // 1409\n        };                                                                                                             // 1410\n                                                                                                                       // 1411\n        sinon.objectKeys = function objectKeys(obj) {                                                                  // 1412\n            if (obj !== Object(obj)) {                                                                                 // 1413\n                throw new TypeError(\"sinon.objectKeys called on a non-object\");                                        // 1414\n            }                                                                                                          // 1415\n                                                                                                                       // 1416\n            var keys = [];                                                                                             // 1417\n            var key;                                                                                                   // 1418\n            for (key in obj) {                                                                                         // 1419\n                if (hasOwn.call(obj, key)) {                                                                           // 1420\n                    keys.push(key);                                                                                    // 1421\n                }                                                                                                      // 1422\n            }                                                                                                          // 1423\n                                                                                                                       // 1424\n            return keys;                                                                                               // 1425\n        };                                                                                                             // 1426\n                                                                                                                       // 1427\n        sinon.getPropertyDescriptor = function getPropertyDescriptor(object, property) {                               // 1428\n            var proto = object, descriptor;                                                                            // 1429\n            while (proto && !(descriptor = Object.getOwnPropertyDescriptor(proto, property))) {                        // 1430\n                proto = Object.getPrototypeOf(proto);                                                                  // 1431\n            }                                                                                                          // 1432\n            return descriptor;                                                                                         // 1433\n        }                                                                                                              // 1434\n                                                                                                                       // 1435\n        sinon.getConfig = function (custom) {                                                                          // 1436\n            var config = {};                                                                                           // 1437\n            custom = custom || {};                                                                                     // 1438\n            var defaults = sinon.defaultConfig;                                                                        // 1439\n                                                                                                                       // 1440\n            for (var prop in defaults) {                                                                               // 1441\n                if (defaults.hasOwnProperty(prop)) {                                                                   // 1442\n                    config[prop] = custom.hasOwnProperty(prop) ? custom[prop] : defaults[prop];                        // 1443\n                }                                                                                                      // 1444\n            }                                                                                                          // 1445\n                                                                                                                       // 1446\n            return config;                                                                                             // 1447\n        };                                                                                                             // 1448\n                                                                                                                       // 1449\n        sinon.defaultConfig = {                                                                                        // 1450\n            injectIntoThis: true,                                                                                      // 1451\n            injectInto: null,                                                                                          // 1452\n            properties: [\"spy\", \"stub\", \"mock\", \"clock\", \"server\", \"requests\"],                                        // 1453\n            useFakeTimers: true,                                                                                       // 1454\n            useFakeServer: true                                                                                        // 1455\n        };                                                                                                             // 1456\n                                                                                                                       // 1457\n        sinon.timesInWords = function timesInWords(count) {                                                            // 1458\n            return count == 1 && \"once\" ||                                                                             // 1459\n                count == 2 && \"twice\" ||                                                                               // 1460\n                count == 3 && \"thrice\" ||                                                                              // 1461\n                (count || 0) + \" times\";                                                                               // 1462\n        };                                                                                                             // 1463\n                                                                                                                       // 1464\n        sinon.calledInOrder = function (spies) {                                                                       // 1465\n            for (var i = 1, l = spies.length; i < l; i++) {                                                            // 1466\n                if (!spies[i - 1].calledBefore(spies[i]) || !spies[i].called) {                                        // 1467\n                    return false;                                                                                      // 1468\n                }                                                                                                      // 1469\n            }                                                                                                          // 1470\n                                                                                                                       // 1471\n            return true;                                                                                               // 1472\n        };                                                                                                             // 1473\n                                                                                                                       // 1474\n        sinon.orderByFirstCall = function (spies) {                                                                    // 1475\n            return spies.sort(function (a, b) {                                                                        // 1476\n                // uuid, won't ever be equal                                                                           // 1477\n                var aCall = a.getCall(0);                                                                              // 1478\n                var bCall = b.getCall(0);                                                                              // 1479\n                var aId = aCall && aCall.callId || -1;                                                                 // 1480\n                var bId = bCall && bCall.callId || -1;                                                                 // 1481\n                                                                                                                       // 1482\n                return aId < bId ? -1 : 1;                                                                             // 1483\n            });                                                                                                        // 1484\n        };                                                                                                             // 1485\n                                                                                                                       // 1486\n        sinon.createStubInstance = function (constructor) {                                                            // 1487\n            if (typeof constructor !== \"function\") {                                                                   // 1488\n                throw new TypeError(\"The constructor should be a function.\");                                          // 1489\n            }                                                                                                          // 1490\n            return sinon.stub(sinon.create(constructor.prototype));                                                    // 1491\n        };                                                                                                             // 1492\n                                                                                                                       // 1493\n        sinon.restore = function (object) {                                                                            // 1494\n            if (object !== null && typeof object === \"object\") {                                                       // 1495\n                for (var prop in object) {                                                                             // 1496\n                    if (isRestorable(object[prop])) {                                                                  // 1497\n                        object[prop].restore();                                                                        // 1498\n                    }                                                                                                  // 1499\n                }                                                                                                      // 1500\n            } else if (isRestorable(object)) {                                                                         // 1501\n                object.restore();                                                                                      // 1502\n            }                                                                                                          // 1503\n        };                                                                                                             // 1504\n                                                                                                                       // 1505\n        return sinon;                                                                                                  // 1506\n    }                                                                                                                  // 1507\n                                                                                                                       // 1508\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 1509\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 1510\n                                                                                                                       // 1511\n    function loadDependencies(require, exports) {                                                                      // 1512\n        makeApi(exports);                                                                                              // 1513\n    }                                                                                                                  // 1514\n                                                                                                                       // 1515\n    if (isAMD) {                                                                                                       // 1516\n        define(loadDependencies);                                                                                      // 1517\n    } else if (isNode) {                                                                                               // 1518\n        loadDependencies(require, module.exports);                                                                     // 1519\n    } else if (!sinon) {                                                                                               // 1520\n        return;                                                                                                        // 1521\n    } else {                                                                                                           // 1522\n        makeApi(sinon);                                                                                                // 1523\n    }                                                                                                                  // 1524\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 1525\n                                                                                                                       // 1526\n/**                                                                                                                    // 1527\n * @depend util/core.js                                                                                                // 1528\n */                                                                                                                    // 1529\n                                                                                                                       // 1530\n(function (sinon) {                                                                                                    // 1531\n    function makeApi(sinon) {                                                                                          // 1532\n                                                                                                                       // 1533\n        // Adapted from https://developer.mozilla.org/en/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug       // 1534\n        var hasDontEnumBug = (function () {                                                                            // 1535\n            var obj = {                                                                                                // 1536\n                constructor: function () {                                                                             // 1537\n                    return \"0\";                                                                                        // 1538\n                },                                                                                                     // 1539\n                toString: function () {                                                                                // 1540\n                    return \"1\";                                                                                        // 1541\n                },                                                                                                     // 1542\n                valueOf: function () {                                                                                 // 1543\n                    return \"2\";                                                                                        // 1544\n                },                                                                                                     // 1545\n                toLocaleString: function () {                                                                          // 1546\n                    return \"3\";                                                                                        // 1547\n                },                                                                                                     // 1548\n                prototype: function () {                                                                               // 1549\n                    return \"4\";                                                                                        // 1550\n                },                                                                                                     // 1551\n                isPrototypeOf: function () {                                                                           // 1552\n                    return \"5\";                                                                                        // 1553\n                },                                                                                                     // 1554\n                propertyIsEnumerable: function () {                                                                    // 1555\n                    return \"6\";                                                                                        // 1556\n                },                                                                                                     // 1557\n                hasOwnProperty: function () {                                                                          // 1558\n                    return \"7\";                                                                                        // 1559\n                },                                                                                                     // 1560\n                length: function () {                                                                                  // 1561\n                    return \"8\";                                                                                        // 1562\n                },                                                                                                     // 1563\n                unique: function () {                                                                                  // 1564\n                    return \"9\"                                                                                         // 1565\n                }                                                                                                      // 1566\n            };                                                                                                         // 1567\n                                                                                                                       // 1568\n            var result = [];                                                                                           // 1569\n            for (var prop in obj) {                                                                                    // 1570\n                result.push(obj[prop]());                                                                              // 1571\n            }                                                                                                          // 1572\n            return result.join(\"\") !== \"0123456789\";                                                                   // 1573\n        })();                                                                                                          // 1574\n                                                                                                                       // 1575\n        /* Public: Extend target in place with all (own) properties from sources in-order. Thus, last source will      // 1576\n         *         override properties in previous sources.                                                            // 1577\n         *                                                                                                             // 1578\n         * target - The Object to extend                                                                               // 1579\n         * sources - Objects to copy properties from.                                                                  // 1580\n         *                                                                                                             // 1581\n         * Returns the extended target                                                                                 // 1582\n         */                                                                                                            // 1583\n        function extend(target /*, sources */) {                                                                       // 1584\n            var sources = Array.prototype.slice.call(arguments, 1),                                                    // 1585\n                source, i, prop;                                                                                       // 1586\n                                                                                                                       // 1587\n            for (i = 0; i < sources.length; i++) {                                                                     // 1588\n                source = sources[i];                                                                                   // 1589\n                                                                                                                       // 1590\n                for (prop in source) {                                                                                 // 1591\n                    if (source.hasOwnProperty(prop)) {                                                                 // 1592\n                        target[prop] = source[prop];                                                                   // 1593\n                    }                                                                                                  // 1594\n                }                                                                                                      // 1595\n                                                                                                                       // 1596\n                // Make sure we copy (own) toString method even when in JScript with DontEnum bug                      // 1597\n                // See https://developer.mozilla.org/en/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug        // 1598\n                if (hasDontEnumBug && source.hasOwnProperty(\"toString\") && source.toString !== target.toString) {      // 1599\n                    target.toString = source.toString;                                                                 // 1600\n                }                                                                                                      // 1601\n            }                                                                                                          // 1602\n                                                                                                                       // 1603\n            return target;                                                                                             // 1604\n        };                                                                                                             // 1605\n                                                                                                                       // 1606\n        sinon.extend = extend;                                                                                         // 1607\n        return sinon.extend;                                                                                           // 1608\n    }                                                                                                                  // 1609\n                                                                                                                       // 1610\n    function loadDependencies(require, exports, module) {                                                              // 1611\n        var sinon = require(\"./util/core\");                                                                            // 1612\n        module.exports = makeApi(sinon);                                                                               // 1613\n    }                                                                                                                  // 1614\n                                                                                                                       // 1615\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 1616\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 1617\n                                                                                                                       // 1618\n    if (isAMD) {                                                                                                       // 1619\n        define(loadDependencies);                                                                                      // 1620\n    } else if (isNode) {                                                                                               // 1621\n        loadDependencies(require, module.exports, module);                                                             // 1622\n    } else if (!sinon) {                                                                                               // 1623\n        return;                                                                                                        // 1624\n    } else {                                                                                                           // 1625\n        makeApi(sinon);                                                                                                // 1626\n    }                                                                                                                  // 1627\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 1628\n                                                                                                                       // 1629\n/**                                                                                                                    // 1630\n * @depend util/core.js                                                                                                // 1631\n */                                                                                                                    // 1632\n                                                                                                                       // 1633\n(function (sinon) {                                                                                                    // 1634\n    function makeApi(sinon) {                                                                                          // 1635\n                                                                                                                       // 1636\n        function timesInWords(count) {                                                                                 // 1637\n            switch (count) {                                                                                           // 1638\n                case 1:                                                                                                // 1639\n                    return \"once\";                                                                                     // 1640\n                case 2:                                                                                                // 1641\n                    return \"twice\";                                                                                    // 1642\n                case 3:                                                                                                // 1643\n                    return \"thrice\";                                                                                   // 1644\n                default:                                                                                               // 1645\n                    return (count || 0) + \" times\";                                                                    // 1646\n            }                                                                                                          // 1647\n        }                                                                                                              // 1648\n                                                                                                                       // 1649\n        sinon.timesInWords = timesInWords;                                                                             // 1650\n        return sinon.timesInWords;                                                                                     // 1651\n    }                                                                                                                  // 1652\n                                                                                                                       // 1653\n    function loadDependencies(require, exports, module) {                                                              // 1654\n        var sinon = require(\"./util/core\");                                                                            // 1655\n        module.exports = makeApi(sinon);                                                                               // 1656\n    }                                                                                                                  // 1657\n                                                                                                                       // 1658\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 1659\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 1660\n                                                                                                                       // 1661\n    if (isAMD) {                                                                                                       // 1662\n        define(loadDependencies);                                                                                      // 1663\n    } else if (isNode) {                                                                                               // 1664\n        loadDependencies(require, module.exports, module);                                                             // 1665\n    } else if (!sinon) {                                                                                               // 1666\n        return;                                                                                                        // 1667\n    } else {                                                                                                           // 1668\n        makeApi(sinon);                                                                                                // 1669\n    }                                                                                                                  // 1670\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 1671\n                                                                                                                       // 1672\n/**                                                                                                                    // 1673\n * @depend util/core.js                                                                                                // 1674\n */                                                                                                                    // 1675\n/**                                                                                                                    // 1676\n * Format functions                                                                                                    // 1677\n *                                                                                                                     // 1678\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 1679\n * @license BSD                                                                                                        // 1680\n *                                                                                                                     // 1681\n * Copyright (c) 2010-2014 Christian Johansen                                                                          // 1682\n */                                                                                                                    // 1683\n                                                                                                                       // 1684\n(function (sinon, formatio) {                                                                                          // 1685\n    function makeApi(sinon) {                                                                                          // 1686\n        function typeOf(value) {                                                                                       // 1687\n            if (value === null) {                                                                                      // 1688\n                return \"null\";                                                                                         // 1689\n            } else if (value === undefined) {                                                                          // 1690\n                return \"undefined\";                                                                                    // 1691\n            }                                                                                                          // 1692\n            var string = Object.prototype.toString.call(value);                                                        // 1693\n            return string.substring(8, string.length - 1).toLowerCase();                                               // 1694\n        };                                                                                                             // 1695\n                                                                                                                       // 1696\n        sinon.typeOf = typeOf;                                                                                         // 1697\n        return sinon.typeOf;                                                                                           // 1698\n    }                                                                                                                  // 1699\n                                                                                                                       // 1700\n    function loadDependencies(require, exports, module) {                                                              // 1701\n        var sinon = require(\"./util/core\");                                                                            // 1702\n        module.exports = makeApi(sinon);                                                                               // 1703\n    }                                                                                                                  // 1704\n                                                                                                                       // 1705\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 1706\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 1707\n                                                                                                                       // 1708\n    if (isAMD) {                                                                                                       // 1709\n        define(loadDependencies);                                                                                      // 1710\n    } else if (isNode) {                                                                                               // 1711\n        loadDependencies(require, module.exports, module);                                                             // 1712\n    } else if (!sinon) {                                                                                               // 1713\n        return;                                                                                                        // 1714\n    } else {                                                                                                           // 1715\n        makeApi(sinon);                                                                                                // 1716\n    }                                                                                                                  // 1717\n}(                                                                                                                     // 1718\n    (typeof sinon == \"object\" && sinon || null),                                                                       // 1719\n    (typeof formatio == \"object\" && formatio)                                                                          // 1720\n));                                                                                                                    // 1721\n                                                                                                                       // 1722\n/**                                                                                                                    // 1723\n * @depend util/core.js                                                                                                // 1724\n * @depend typeOf.js                                                                                                   // 1725\n */                                                                                                                    // 1726\n/*jslint eqeqeq: false, onevar: false, plusplus: false*/                                                               // 1727\n/*global module, require, sinon*/                                                                                      // 1728\n/**                                                                                                                    // 1729\n * Match functions                                                                                                     // 1730\n *                                                                                                                     // 1731\n * @author Maximilian Antoni (mail@maxantoni.de)                                                                       // 1732\n * @license BSD                                                                                                        // 1733\n *                                                                                                                     // 1734\n * Copyright (c) 2012 Maximilian Antoni                                                                                // 1735\n */                                                                                                                    // 1736\n                                                                                                                       // 1737\n(function (sinon) {                                                                                                    // 1738\n    function makeApi(sinon) {                                                                                          // 1739\n        function assertType(value, type, name) {                                                                       // 1740\n            var actual = sinon.typeOf(value);                                                                          // 1741\n            if (actual !== type) {                                                                                     // 1742\n                throw new TypeError(\"Expected type of \" + name + \" to be \" +                                           // 1743\n                    type + \", but was \" + actual);                                                                     // 1744\n            }                                                                                                          // 1745\n        }                                                                                                              // 1746\n                                                                                                                       // 1747\n        var matcher = {                                                                                                // 1748\n            toString: function () {                                                                                    // 1749\n                return this.message;                                                                                   // 1750\n            }                                                                                                          // 1751\n        };                                                                                                             // 1752\n                                                                                                                       // 1753\n        function isMatcher(object) {                                                                                   // 1754\n            return matcher.isPrototypeOf(object);                                                                      // 1755\n        }                                                                                                              // 1756\n                                                                                                                       // 1757\n        function matchObject(expectation, actual) {                                                                    // 1758\n            if (actual === null || actual === undefined) {                                                             // 1759\n                return false;                                                                                          // 1760\n            }                                                                                                          // 1761\n            for (var key in expectation) {                                                                             // 1762\n                if (expectation.hasOwnProperty(key)) {                                                                 // 1763\n                    var exp = expectation[key];                                                                        // 1764\n                    var act = actual[key];                                                                             // 1765\n                    if (match.isMatcher(exp)) {                                                                        // 1766\n                        if (!exp.test(act)) {                                                                          // 1767\n                            return false;                                                                              // 1768\n                        }                                                                                              // 1769\n                    } else if (sinon.typeOf(exp) === \"object\") {                                                       // 1770\n                        if (!matchObject(exp, act)) {                                                                  // 1771\n                            return false;                                                                              // 1772\n                        }                                                                                              // 1773\n                    } else if (!sinon.deepEqual(exp, act)) {                                                           // 1774\n                        return false;                                                                                  // 1775\n                    }                                                                                                  // 1776\n                }                                                                                                      // 1777\n            }                                                                                                          // 1778\n            return true;                                                                                               // 1779\n        }                                                                                                              // 1780\n                                                                                                                       // 1781\n        matcher.or = function (m2) {                                                                                   // 1782\n            if (!arguments.length) {                                                                                   // 1783\n                throw new TypeError(\"Matcher expected\");                                                               // 1784\n            } else if (!isMatcher(m2)) {                                                                               // 1785\n                m2 = match(m2);                                                                                        // 1786\n            }                                                                                                          // 1787\n            var m1 = this;                                                                                             // 1788\n            var or = sinon.create(matcher);                                                                            // 1789\n            or.test = function (actual) {                                                                              // 1790\n                return m1.test(actual) || m2.test(actual);                                                             // 1791\n            };                                                                                                         // 1792\n            or.message = m1.message + \".or(\" + m2.message + \")\";                                                       // 1793\n            return or;                                                                                                 // 1794\n        };                                                                                                             // 1795\n                                                                                                                       // 1796\n        matcher.and = function (m2) {                                                                                  // 1797\n            if (!arguments.length) {                                                                                   // 1798\n                throw new TypeError(\"Matcher expected\");                                                               // 1799\n            } else if (!isMatcher(m2)) {                                                                               // 1800\n                m2 = match(m2);                                                                                        // 1801\n            }                                                                                                          // 1802\n            var m1 = this;                                                                                             // 1803\n            var and = sinon.create(matcher);                                                                           // 1804\n            and.test = function (actual) {                                                                             // 1805\n                return m1.test(actual) && m2.test(actual);                                                             // 1806\n            };                                                                                                         // 1807\n            and.message = m1.message + \".and(\" + m2.message + \")\";                                                     // 1808\n            return and;                                                                                                // 1809\n        };                                                                                                             // 1810\n                                                                                                                       // 1811\n        var match = function (expectation, message) {                                                                  // 1812\n            var m = sinon.create(matcher);                                                                             // 1813\n            var type = sinon.typeOf(expectation);                                                                      // 1814\n            switch (type) {                                                                                            // 1815\n            case \"object\":                                                                                             // 1816\n                if (typeof expectation.test === \"function\") {                                                          // 1817\n                    m.test = function (actual) {                                                                       // 1818\n                        return expectation.test(actual) === true;                                                      // 1819\n                    };                                                                                                 // 1820\n                    m.message = \"match(\" + sinon.functionName(expectation.test) + \")\";                                 // 1821\n                    return m;                                                                                          // 1822\n                }                                                                                                      // 1823\n                var str = [];                                                                                          // 1824\n                for (var key in expectation) {                                                                         // 1825\n                    if (expectation.hasOwnProperty(key)) {                                                             // 1826\n                        str.push(key + \": \" + expectation[key]);                                                       // 1827\n                    }                                                                                                  // 1828\n                }                                                                                                      // 1829\n                m.test = function (actual) {                                                                           // 1830\n                    return matchObject(expectation, actual);                                                           // 1831\n                };                                                                                                     // 1832\n                m.message = \"match(\" + str.join(\", \") + \")\";                                                           // 1833\n                break;                                                                                                 // 1834\n            case \"number\":                                                                                             // 1835\n                m.test = function (actual) {                                                                           // 1836\n                    return expectation == actual;                                                                      // 1837\n                };                                                                                                     // 1838\n                break;                                                                                                 // 1839\n            case \"string\":                                                                                             // 1840\n                m.test = function (actual) {                                                                           // 1841\n                    if (typeof actual !== \"string\") {                                                                  // 1842\n                        return false;                                                                                  // 1843\n                    }                                                                                                  // 1844\n                    return actual.indexOf(expectation) !== -1;                                                         // 1845\n                };                                                                                                     // 1846\n                m.message = \"match(\\\"\" + expectation + \"\\\")\";                                                          // 1847\n                break;                                                                                                 // 1848\n            case \"regexp\":                                                                                             // 1849\n                m.test = function (actual) {                                                                           // 1850\n                    if (typeof actual !== \"string\") {                                                                  // 1851\n                        return false;                                                                                  // 1852\n                    }                                                                                                  // 1853\n                    return expectation.test(actual);                                                                   // 1854\n                };                                                                                                     // 1855\n                break;                                                                                                 // 1856\n            case \"function\":                                                                                           // 1857\n                m.test = expectation;                                                                                  // 1858\n                if (message) {                                                                                         // 1859\n                    m.message = message;                                                                               // 1860\n                } else {                                                                                               // 1861\n                    m.message = \"match(\" + sinon.functionName(expectation) + \")\";                                      // 1862\n                }                                                                                                      // 1863\n                break;                                                                                                 // 1864\n            default:                                                                                                   // 1865\n                m.test = function (actual) {                                                                           // 1866\n                    return sinon.deepEqual(expectation, actual);                                                       // 1867\n                };                                                                                                     // 1868\n            }                                                                                                          // 1869\n            if (!m.message) {                                                                                          // 1870\n                m.message = \"match(\" + expectation + \")\";                                                              // 1871\n            }                                                                                                          // 1872\n            return m;                                                                                                  // 1873\n        };                                                                                                             // 1874\n                                                                                                                       // 1875\n        match.isMatcher = isMatcher;                                                                                   // 1876\n                                                                                                                       // 1877\n        match.any = match(function () {                                                                                // 1878\n            return true;                                                                                               // 1879\n        }, \"any\");                                                                                                     // 1880\n                                                                                                                       // 1881\n        match.defined = match(function (actual) {                                                                      // 1882\n            return actual !== null && actual !== undefined;                                                            // 1883\n        }, \"defined\");                                                                                                 // 1884\n                                                                                                                       // 1885\n        match.truthy = match(function (actual) {                                                                       // 1886\n            return !!actual;                                                                                           // 1887\n        }, \"truthy\");                                                                                                  // 1888\n                                                                                                                       // 1889\n        match.falsy = match(function (actual) {                                                                        // 1890\n            return !actual;                                                                                            // 1891\n        }, \"falsy\");                                                                                                   // 1892\n                                                                                                                       // 1893\n        match.same = function (expectation) {                                                                          // 1894\n            return match(function (actual) {                                                                           // 1895\n                return expectation === actual;                                                                         // 1896\n            }, \"same(\" + expectation + \")\");                                                                           // 1897\n        };                                                                                                             // 1898\n                                                                                                                       // 1899\n        match.typeOf = function (type) {                                                                               // 1900\n            assertType(type, \"string\", \"type\");                                                                        // 1901\n            return match(function (actual) {                                                                           // 1902\n                return sinon.typeOf(actual) === type;                                                                  // 1903\n            }, \"typeOf(\\\"\" + type + \"\\\")\");                                                                            // 1904\n        };                                                                                                             // 1905\n                                                                                                                       // 1906\n        match.instanceOf = function (type) {                                                                           // 1907\n            assertType(type, \"function\", \"type\");                                                                      // 1908\n            return match(function (actual) {                                                                           // 1909\n                return actual instanceof type;                                                                         // 1910\n            }, \"instanceOf(\" + sinon.functionName(type) + \")\");                                                        // 1911\n        };                                                                                                             // 1912\n                                                                                                                       // 1913\n        function createPropertyMatcher(propertyTest, messagePrefix) {                                                  // 1914\n            return function (property, value) {                                                                        // 1915\n                assertType(property, \"string\", \"property\");                                                            // 1916\n                var onlyProperty = arguments.length === 1;                                                             // 1917\n                var message = messagePrefix + \"(\\\"\" + property + \"\\\"\";                                                 // 1918\n                if (!onlyProperty) {                                                                                   // 1919\n                    message += \", \" + value;                                                                           // 1920\n                }                                                                                                      // 1921\n                message += \")\";                                                                                        // 1922\n                return match(function (actual) {                                                                       // 1923\n                    if (actual === undefined || actual === null ||                                                     // 1924\n                            !propertyTest(actual, property)) {                                                         // 1925\n                        return false;                                                                                  // 1926\n                    }                                                                                                  // 1927\n                    return onlyProperty || sinon.deepEqual(value, actual[property]);                                   // 1928\n                }, message);                                                                                           // 1929\n            };                                                                                                         // 1930\n        }                                                                                                              // 1931\n                                                                                                                       // 1932\n        match.has = createPropertyMatcher(function (actual, property) {                                                // 1933\n            if (typeof actual === \"object\") {                                                                          // 1934\n                return property in actual;                                                                             // 1935\n            }                                                                                                          // 1936\n            return actual[property] !== undefined;                                                                     // 1937\n        }, \"has\");                                                                                                     // 1938\n                                                                                                                       // 1939\n        match.hasOwn = createPropertyMatcher(function (actual, property) {                                             // 1940\n            return actual.hasOwnProperty(property);                                                                    // 1941\n        }, \"hasOwn\");                                                                                                  // 1942\n                                                                                                                       // 1943\n        match.bool = match.typeOf(\"boolean\");                                                                          // 1944\n        match.number = match.typeOf(\"number\");                                                                         // 1945\n        match.string = match.typeOf(\"string\");                                                                         // 1946\n        match.object = match.typeOf(\"object\");                                                                         // 1947\n        match.func = match.typeOf(\"function\");                                                                         // 1948\n        match.array = match.typeOf(\"array\");                                                                           // 1949\n        match.regexp = match.typeOf(\"regexp\");                                                                         // 1950\n        match.date = match.typeOf(\"date\");                                                                             // 1951\n                                                                                                                       // 1952\n        sinon.match = match;                                                                                           // 1953\n        return match;                                                                                                  // 1954\n    }                                                                                                                  // 1955\n                                                                                                                       // 1956\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 1957\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 1958\n                                                                                                                       // 1959\n    function loadDependencies(require, exports, module) {                                                              // 1960\n        var sinon = require(\"./util/core\");                                                                            // 1961\n        require(\"./typeOf\");                                                                                           // 1962\n        module.exports = makeApi(sinon);                                                                               // 1963\n    }                                                                                                                  // 1964\n                                                                                                                       // 1965\n    if (isAMD) {                                                                                                       // 1966\n        define(loadDependencies);                                                                                      // 1967\n    } else if (isNode) {                                                                                               // 1968\n        loadDependencies(require, module.exports, module);                                                             // 1969\n    } else if (!sinon) {                                                                                               // 1970\n        return;                                                                                                        // 1971\n    } else {                                                                                                           // 1972\n        makeApi(sinon);                                                                                                // 1973\n    }                                                                                                                  // 1974\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 1975\n                                                                                                                       // 1976\n/**                                                                                                                    // 1977\n * @depend util/core.js                                                                                                // 1978\n */                                                                                                                    // 1979\n/**                                                                                                                    // 1980\n * Format functions                                                                                                    // 1981\n *                                                                                                                     // 1982\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 1983\n * @license BSD                                                                                                        // 1984\n *                                                                                                                     // 1985\n * Copyright (c) 2010-2014 Christian Johansen                                                                          // 1986\n */                                                                                                                    // 1987\n                                                                                                                       // 1988\n(function (sinon, formatio) {                                                                                          // 1989\n    function makeApi(sinon) {                                                                                          // 1990\n        function valueFormatter(value) {                                                                               // 1991\n            return \"\" + value;                                                                                         // 1992\n        }                                                                                                              // 1993\n                                                                                                                       // 1994\n        function getFormatioFormatter() {                                                                              // 1995\n            var formatter = formatio.configure({                                                                       // 1996\n                    quoteStrings: false,                                                                               // 1997\n                    limitChildrenCount: 250                                                                            // 1998\n                });                                                                                                    // 1999\n                                                                                                                       // 2000\n            function format() {                                                                                        // 2001\n                return formatter.ascii.apply(formatter, arguments);                                                    // 2002\n            };                                                                                                         // 2003\n                                                                                                                       // 2004\n            return format;                                                                                             // 2005\n        }                                                                                                              // 2006\n                                                                                                                       // 2007\n        function getNodeFormatter(value) {                                                                             // 2008\n            function format(value) {                                                                                   // 2009\n                return typeof value == \"object\" && value.toString === Object.prototype.toString ? util.inspect(value) : value;\n            };                                                                                                         // 2011\n                                                                                                                       // 2012\n            try {                                                                                                      // 2013\n                var util = require(\"util\");                                                                            // 2014\n            } catch (e) {                                                                                              // 2015\n                /* Node, but no util module - would be very old, but better safe than sorry */                         // 2016\n            }                                                                                                          // 2017\n                                                                                                                       // 2018\n            return util ? format : valueFormatter;                                                                     // 2019\n        }                                                                                                              // 2020\n                                                                                                                       // 2021\n        var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\",                  // 2022\n            formatter;                                                                                                 // 2023\n                                                                                                                       // 2024\n        if (isNode) {                                                                                                  // 2025\n            try {                                                                                                      // 2026\n                formatio = require(\"formatio\");                                                                        // 2027\n            } catch (e) {}                                                                                             // 2028\n        }                                                                                                              // 2029\n                                                                                                                       // 2030\n        if (formatio) {                                                                                                // 2031\n            formatter = getFormatioFormatter()                                                                         // 2032\n        } else if (isNode) {                                                                                           // 2033\n            formatter = getNodeFormatter();                                                                            // 2034\n        } else {                                                                                                       // 2035\n            formatter = valueFormatter;                                                                                // 2036\n        }                                                                                                              // 2037\n                                                                                                                       // 2038\n        sinon.format = formatter;                                                                                      // 2039\n        return sinon.format;                                                                                           // 2040\n    }                                                                                                                  // 2041\n                                                                                                                       // 2042\n    function loadDependencies(require, exports, module) {                                                              // 2043\n        var sinon = require(\"./util/core\");                                                                            // 2044\n        module.exports = makeApi(sinon);                                                                               // 2045\n    }                                                                                                                  // 2046\n                                                                                                                       // 2047\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 2048\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 2049\n                                                                                                                       // 2050\n    if (isAMD) {                                                                                                       // 2051\n        define(loadDependencies);                                                                                      // 2052\n    } else if (isNode) {                                                                                               // 2053\n        loadDependencies(require, module.exports, module);                                                             // 2054\n    } else if (!sinon) {                                                                                               // 2055\n        return;                                                                                                        // 2056\n    } else {                                                                                                           // 2057\n        makeApi(sinon);                                                                                                // 2058\n    }                                                                                                                  // 2059\n}(                                                                                                                     // 2060\n    (typeof sinon == \"object\" && sinon || null),                                                                       // 2061\n    (typeof formatio == \"object\" && formatio)                                                                          // 2062\n));                                                                                                                    // 2063\n                                                                                                                       // 2064\n/**                                                                                                                    // 2065\n  * @depend util/core.js                                                                                               // 2066\n  * @depend match.js                                                                                                   // 2067\n  * @depend format.js                                                                                                  // 2068\n  */                                                                                                                   // 2069\n/**                                                                                                                    // 2070\n  * Spy calls                                                                                                          // 2071\n  *                                                                                                                    // 2072\n  * @author Christian Johansen (christian@cjohansen.no)                                                                // 2073\n  * @author Maximilian Antoni (mail@maxantoni.de)                                                                      // 2074\n  * @license BSD                                                                                                       // 2075\n  *                                                                                                                    // 2076\n  * Copyright (c) 2010-2013 Christian Johansen                                                                         // 2077\n  * Copyright (c) 2013 Maximilian Antoni                                                                               // 2078\n  */                                                                                                                   // 2079\n                                                                                                                       // 2080\n(function (sinon) {                                                                                                    // 2081\n    function makeApi(sinon) {                                                                                          // 2082\n        function throwYieldError(proxy, text, args) {                                                                  // 2083\n            var msg = sinon.functionName(proxy) + text;                                                                // 2084\n            if (args.length) {                                                                                         // 2085\n                msg += \" Received [\" + slice.call(args).join(\", \") + \"]\";                                              // 2086\n            }                                                                                                          // 2087\n            throw new Error(msg);                                                                                      // 2088\n        }                                                                                                              // 2089\n                                                                                                                       // 2090\n        var slice = Array.prototype.slice;                                                                             // 2091\n                                                                                                                       // 2092\n        var callProto = {                                                                                              // 2093\n            calledOn: function calledOn(thisValue) {                                                                   // 2094\n                if (sinon.match && sinon.match.isMatcher(thisValue)) {                                                 // 2095\n                    return thisValue.test(this.thisValue);                                                             // 2096\n                }                                                                                                      // 2097\n                return this.thisValue === thisValue;                                                                   // 2098\n            },                                                                                                         // 2099\n                                                                                                                       // 2100\n            calledWith: function calledWith() {                                                                        // 2101\n                var l = arguments.length;                                                                              // 2102\n                if (l > this.args.length) {                                                                            // 2103\n                    return false;                                                                                      // 2104\n                }                                                                                                      // 2105\n                for (var i = 0; i < l; i += 1) {                                                                       // 2106\n                    if (!sinon.deepEqual(arguments[i], this.args[i])) {                                                // 2107\n                        return false;                                                                                  // 2108\n                    }                                                                                                  // 2109\n                }                                                                                                      // 2110\n                                                                                                                       // 2111\n                return true;                                                                                           // 2112\n            },                                                                                                         // 2113\n                                                                                                                       // 2114\n            calledWithMatch: function calledWithMatch() {                                                              // 2115\n                var l = arguments.length;                                                                              // 2116\n                if (l > this.args.length) {                                                                            // 2117\n                    return false;                                                                                      // 2118\n                }                                                                                                      // 2119\n                for (var i = 0; i < l; i += 1) {                                                                       // 2120\n                    var actual = this.args[i];                                                                         // 2121\n                    var expectation = arguments[i];                                                                    // 2122\n                    if (!sinon.match || !sinon.match(expectation).test(actual)) {                                      // 2123\n                        return false;                                                                                  // 2124\n                    }                                                                                                  // 2125\n                }                                                                                                      // 2126\n                return true;                                                                                           // 2127\n            },                                                                                                         // 2128\n                                                                                                                       // 2129\n            calledWithExactly: function calledWithExactly() {                                                          // 2130\n                return arguments.length == this.args.length &&                                                         // 2131\n                    this.calledWith.apply(this, arguments);                                                            // 2132\n            },                                                                                                         // 2133\n                                                                                                                       // 2134\n            notCalledWith: function notCalledWith() {                                                                  // 2135\n                return !this.calledWith.apply(this, arguments);                                                        // 2136\n            },                                                                                                         // 2137\n                                                                                                                       // 2138\n            notCalledWithMatch: function notCalledWithMatch() {                                                        // 2139\n                return !this.calledWithMatch.apply(this, arguments);                                                   // 2140\n            },                                                                                                         // 2141\n                                                                                                                       // 2142\n            returned: function returned(value) {                                                                       // 2143\n                return sinon.deepEqual(value, this.returnValue);                                                       // 2144\n            },                                                                                                         // 2145\n                                                                                                                       // 2146\n            threw: function threw(error) {                                                                             // 2147\n                if (typeof error === \"undefined\" || !this.exception) {                                                 // 2148\n                    return !!this.exception;                                                                           // 2149\n                }                                                                                                      // 2150\n                                                                                                                       // 2151\n                return this.exception === error || this.exception.name === error;                                      // 2152\n            },                                                                                                         // 2153\n                                                                                                                       // 2154\n            calledWithNew: function calledWithNew() {                                                                  // 2155\n                return this.proxy.prototype && this.thisValue instanceof this.proxy;                                   // 2156\n            },                                                                                                         // 2157\n                                                                                                                       // 2158\n            calledBefore: function (other) {                                                                           // 2159\n                return this.callId < other.callId;                                                                     // 2160\n            },                                                                                                         // 2161\n                                                                                                                       // 2162\n            calledAfter: function (other) {                                                                            // 2163\n                return this.callId > other.callId;                                                                     // 2164\n            },                                                                                                         // 2165\n                                                                                                                       // 2166\n            callArg: function (pos) {                                                                                  // 2167\n                this.args[pos]();                                                                                      // 2168\n            },                                                                                                         // 2169\n                                                                                                                       // 2170\n            callArgOn: function (pos, thisValue) {                                                                     // 2171\n                this.args[pos].apply(thisValue);                                                                       // 2172\n            },                                                                                                         // 2173\n                                                                                                                       // 2174\n            callArgWith: function (pos) {                                                                              // 2175\n                this.callArgOnWith.apply(this, [pos, null].concat(slice.call(arguments, 1)));                          // 2176\n            },                                                                                                         // 2177\n                                                                                                                       // 2178\n            callArgOnWith: function (pos, thisValue) {                                                                 // 2179\n                var args = slice.call(arguments, 2);                                                                   // 2180\n                this.args[pos].apply(thisValue, args);                                                                 // 2181\n            },                                                                                                         // 2182\n                                                                                                                       // 2183\n            yield: function () {                                                                                       // 2184\n                this.yieldOn.apply(this, [null].concat(slice.call(arguments, 0)));                                     // 2185\n            },                                                                                                         // 2186\n                                                                                                                       // 2187\n            yieldOn: function (thisValue) {                                                                            // 2188\n                var args = this.args;                                                                                  // 2189\n                for (var i = 0, l = args.length; i < l; ++i) {                                                         // 2190\n                    if (typeof args[i] === \"function\") {                                                               // 2191\n                        args[i].apply(thisValue, slice.call(arguments, 1));                                            // 2192\n                        return;                                                                                        // 2193\n                    }                                                                                                  // 2194\n                }                                                                                                      // 2195\n                throwYieldError(this.proxy, \" cannot yield since no callback was passed.\", args);                      // 2196\n            },                                                                                                         // 2197\n                                                                                                                       // 2198\n            yieldTo: function (prop) {                                                                                 // 2199\n                this.yieldToOn.apply(this, [prop, null].concat(slice.call(arguments, 1)));                             // 2200\n            },                                                                                                         // 2201\n                                                                                                                       // 2202\n            yieldToOn: function (prop, thisValue) {                                                                    // 2203\n                var args = this.args;                                                                                  // 2204\n                for (var i = 0, l = args.length; i < l; ++i) {                                                         // 2205\n                    if (args[i] && typeof args[i][prop] === \"function\") {                                              // 2206\n                        args[i][prop].apply(thisValue, slice.call(arguments, 2));                                      // 2207\n                        return;                                                                                        // 2208\n                    }                                                                                                  // 2209\n                }                                                                                                      // 2210\n                throwYieldError(this.proxy, \" cannot yield to '\" + prop +                                              // 2211\n                    \"' since no callback was passed.\", args);                                                          // 2212\n            },                                                                                                         // 2213\n                                                                                                                       // 2214\n            toString: function () {                                                                                    // 2215\n                var callStr = this.proxy.toString() + \"(\";                                                             // 2216\n                var args = [];                                                                                         // 2217\n                                                                                                                       // 2218\n                for (var i = 0, l = this.args.length; i < l; ++i) {                                                    // 2219\n                    args.push(sinon.format(this.args[i]));                                                             // 2220\n                }                                                                                                      // 2221\n                                                                                                                       // 2222\n                callStr = callStr + args.join(\", \") + \")\";                                                             // 2223\n                                                                                                                       // 2224\n                if (typeof this.returnValue != \"undefined\") {                                                          // 2225\n                    callStr += \" => \" + sinon.format(this.returnValue);                                                // 2226\n                }                                                                                                      // 2227\n                                                                                                                       // 2228\n                if (this.exception) {                                                                                  // 2229\n                    callStr += \" !\" + this.exception.name;                                                             // 2230\n                                                                                                                       // 2231\n                    if (this.exception.message) {                                                                      // 2232\n                        callStr += \"(\" + this.exception.message + \")\";                                                 // 2233\n                    }                                                                                                  // 2234\n                }                                                                                                      // 2235\n                                                                                                                       // 2236\n                return callStr;                                                                                        // 2237\n            }                                                                                                          // 2238\n        };                                                                                                             // 2239\n                                                                                                                       // 2240\n        callProto.invokeCallback = callProto.yield;                                                                    // 2241\n                                                                                                                       // 2242\n        function createSpyCall(spy, thisValue, args, returnValue, exception, id) {                                     // 2243\n            if (typeof id !== \"number\") {                                                                              // 2244\n                throw new TypeError(\"Call id is not a number\");                                                        // 2245\n            }                                                                                                          // 2246\n            var proxyCall = sinon.create(callProto);                                                                   // 2247\n            proxyCall.proxy = spy;                                                                                     // 2248\n            proxyCall.thisValue = thisValue;                                                                           // 2249\n            proxyCall.args = args;                                                                                     // 2250\n            proxyCall.returnValue = returnValue;                                                                       // 2251\n            proxyCall.exception = exception;                                                                           // 2252\n            proxyCall.callId = id;                                                                                     // 2253\n                                                                                                                       // 2254\n            return proxyCall;                                                                                          // 2255\n        }                                                                                                              // 2256\n        createSpyCall.toString = callProto.toString; // used by mocks                                                  // 2257\n                                                                                                                       // 2258\n        sinon.spyCall = createSpyCall;                                                                                 // 2259\n        return createSpyCall;                                                                                          // 2260\n    }                                                                                                                  // 2261\n                                                                                                                       // 2262\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 2263\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 2264\n                                                                                                                       // 2265\n    function loadDependencies(require, exports, module) {                                                              // 2266\n        var sinon = require(\"./util/core\");                                                                            // 2267\n        require(\"./match\");                                                                                            // 2268\n        require(\"./format\");                                                                                           // 2269\n        module.exports = makeApi(sinon);                                                                               // 2270\n    }                                                                                                                  // 2271\n                                                                                                                       // 2272\n    if (isAMD) {                                                                                                       // 2273\n        define(loadDependencies);                                                                                      // 2274\n    } else if (isNode) {                                                                                               // 2275\n        loadDependencies(require, module.exports, module);                                                             // 2276\n    } else if (!sinon) {                                                                                               // 2277\n        return;                                                                                                        // 2278\n    } else {                                                                                                           // 2279\n        makeApi(sinon);                                                                                                // 2280\n    }                                                                                                                  // 2281\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 2282\n                                                                                                                       // 2283\n/**                                                                                                                    // 2284\n  * @depend times_in_words.js                                                                                          // 2285\n  * @depend util/core.js                                                                                               // 2286\n  * @depend extend.js                                                                                                  // 2287\n  * @depend call.js                                                                                                    // 2288\n  * @depend format.js                                                                                                  // 2289\n  */                                                                                                                   // 2290\n/**                                                                                                                    // 2291\n  * Spy functions                                                                                                      // 2292\n  *                                                                                                                    // 2293\n  * @author Christian Johansen (christian@cjohansen.no)                                                                // 2294\n  * @license BSD                                                                                                       // 2295\n  *                                                                                                                    // 2296\n  * Copyright (c) 2010-2013 Christian Johansen                                                                         // 2297\n  */                                                                                                                   // 2298\n                                                                                                                       // 2299\n(function (sinon) {                                                                                                    // 2300\n                                                                                                                       // 2301\n    function makeApi(sinon) {                                                                                          // 2302\n        var push = Array.prototype.push;                                                                               // 2303\n        var slice = Array.prototype.slice;                                                                             // 2304\n        var callId = 0;                                                                                                // 2305\n                                                                                                                       // 2306\n        function spy(object, property, types) {                                                                        // 2307\n            if (!property && typeof object == \"function\") {                                                            // 2308\n                return spy.create(object);                                                                             // 2309\n            }                                                                                                          // 2310\n                                                                                                                       // 2311\n            if (!object && !property) {                                                                                // 2312\n                return spy.create(function () { });                                                                    // 2313\n            }                                                                                                          // 2314\n                                                                                                                       // 2315\n            if (types) {                                                                                               // 2316\n                var methodDesc = sinon.getPropertyDescriptor(object, property);                                        // 2317\n                for (var i = 0; i < types.length; i++) {                                                               // 2318\n                    methodDesc[types[i]] = spy.create(methodDesc[types[i]]);                                           // 2319\n                }                                                                                                      // 2320\n                return sinon.wrapMethod(object, property, methodDesc);                                                 // 2321\n            } else {                                                                                                   // 2322\n                var method = object[property];                                                                         // 2323\n                return sinon.wrapMethod(object, property, spy.create(method));                                         // 2324\n            }                                                                                                          // 2325\n        }                                                                                                              // 2326\n                                                                                                                       // 2327\n        function matchingFake(fakes, args, strict) {                                                                   // 2328\n            if (!fakes) {                                                                                              // 2329\n                return;                                                                                                // 2330\n            }                                                                                                          // 2331\n                                                                                                                       // 2332\n            for (var i = 0, l = fakes.length; i < l; i++) {                                                            // 2333\n                if (fakes[i].matches(args, strict)) {                                                                  // 2334\n                    return fakes[i];                                                                                   // 2335\n                }                                                                                                      // 2336\n            }                                                                                                          // 2337\n        }                                                                                                              // 2338\n                                                                                                                       // 2339\n        function incrementCallCount() {                                                                                // 2340\n            this.called = true;                                                                                        // 2341\n            this.callCount += 1;                                                                                       // 2342\n            this.notCalled = false;                                                                                    // 2343\n            this.calledOnce = this.callCount == 1;                                                                     // 2344\n            this.calledTwice = this.callCount == 2;                                                                    // 2345\n            this.calledThrice = this.callCount == 3;                                                                   // 2346\n        }                                                                                                              // 2347\n                                                                                                                       // 2348\n        function createCallProperties() {                                                                              // 2349\n            this.firstCall = this.getCall(0);                                                                          // 2350\n            this.secondCall = this.getCall(1);                                                                         // 2351\n            this.thirdCall = this.getCall(2);                                                                          // 2352\n            this.lastCall = this.getCall(this.callCount - 1);                                                          // 2353\n        }                                                                                                              // 2354\n                                                                                                                       // 2355\n        var vars = \"a,b,c,d,e,f,g,h,i,j,k,l\";                                                                          // 2356\n        function createProxy(func, proxyLength) {                                                                      // 2357\n            // Retain the function length:                                                                             // 2358\n            var p;                                                                                                     // 2359\n            if (proxyLength) {                                                                                         // 2360\n                eval(\"p = (function proxy(\" + vars.substring(0, proxyLength * 2 - 1) +                                 // 2361\n                    \") { return p.invoke(func, this, slice.call(arguments)); });\");                                    // 2362\n            } else {                                                                                                   // 2363\n                p = function proxy() {                                                                                 // 2364\n                    return p.invoke(func, this, slice.call(arguments));                                                // 2365\n                };                                                                                                     // 2366\n            }                                                                                                          // 2367\n            return p;                                                                                                  // 2368\n        }                                                                                                              // 2369\n                                                                                                                       // 2370\n        var uuid = 0;                                                                                                  // 2371\n                                                                                                                       // 2372\n        // Public API                                                                                                  // 2373\n        var spyApi = {                                                                                                 // 2374\n            reset: function () {                                                                                       // 2375\n                if (this.invoking) {                                                                                   // 2376\n                    var err = new Error(\"Cannot reset Sinon function while invoking it. \" +                            // 2377\n                                        \"Move the call to .reset outside of the callback.\");                           // 2378\n                    err.name = \"InvalidResetException\";                                                                // 2379\n                    throw err;                                                                                         // 2380\n                }                                                                                                      // 2381\n                                                                                                                       // 2382\n                this.called = false;                                                                                   // 2383\n                this.notCalled = true;                                                                                 // 2384\n                this.calledOnce = false;                                                                               // 2385\n                this.calledTwice = false;                                                                              // 2386\n                this.calledThrice = false;                                                                             // 2387\n                this.callCount = 0;                                                                                    // 2388\n                this.firstCall = null;                                                                                 // 2389\n                this.secondCall = null;                                                                                // 2390\n                this.thirdCall = null;                                                                                 // 2391\n                this.lastCall = null;                                                                                  // 2392\n                this.args = [];                                                                                        // 2393\n                this.returnValues = [];                                                                                // 2394\n                this.thisValues = [];                                                                                  // 2395\n                this.exceptions = [];                                                                                  // 2396\n                this.callIds = [];                                                                                     // 2397\n                if (this.fakes) {                                                                                      // 2398\n                    for (var i = 0; i < this.fakes.length; i++) {                                                      // 2399\n                        this.fakes[i].reset();                                                                         // 2400\n                    }                                                                                                  // 2401\n                }                                                                                                      // 2402\n                                                                                                                       // 2403\n                return this;                                                                                           // 2404\n            },                                                                                                         // 2405\n                                                                                                                       // 2406\n            create: function create(func, spyLength) {                                                                 // 2407\n                var name;                                                                                              // 2408\n                                                                                                                       // 2409\n                if (typeof func != \"function\") {                                                                       // 2410\n                    func = function () { };                                                                            // 2411\n                } else {                                                                                               // 2412\n                    name = sinon.functionName(func);                                                                   // 2413\n                }                                                                                                      // 2414\n                                                                                                                       // 2415\n                if (!spyLength) {                                                                                      // 2416\n                    spyLength = func.length;                                                                           // 2417\n                }                                                                                                      // 2418\n                                                                                                                       // 2419\n                var proxy = createProxy(func, spyLength);                                                              // 2420\n                                                                                                                       // 2421\n                sinon.extend(proxy, spy);                                                                              // 2422\n                delete proxy.create;                                                                                   // 2423\n                sinon.extend(proxy, func);                                                                             // 2424\n                                                                                                                       // 2425\n                proxy.reset();                                                                                         // 2426\n                proxy.prototype = func.prototype;                                                                      // 2427\n                proxy.displayName = name || \"spy\";                                                                     // 2428\n                proxy.toString = sinon.functionToString;                                                               // 2429\n                proxy.instantiateFake = sinon.spy.create;                                                              // 2430\n                proxy.id = \"spy#\" + uuid++;                                                                            // 2431\n                                                                                                                       // 2432\n                return proxy;                                                                                          // 2433\n            },                                                                                                         // 2434\n                                                                                                                       // 2435\n            invoke: function invoke(func, thisValue, args) {                                                           // 2436\n                var matching = matchingFake(this.fakes, args);                                                         // 2437\n                var exception, returnValue;                                                                            // 2438\n                                                                                                                       // 2439\n                incrementCallCount.call(this);                                                                         // 2440\n                push.call(this.thisValues, thisValue);                                                                 // 2441\n                push.call(this.args, args);                                                                            // 2442\n                push.call(this.callIds, callId++);                                                                     // 2443\n                                                                                                                       // 2444\n                // Make call properties available from within the spied function:                                      // 2445\n                createCallProperties.call(this);                                                                       // 2446\n                                                                                                                       // 2447\n                try {                                                                                                  // 2448\n                    this.invoking = true;                                                                              // 2449\n                                                                                                                       // 2450\n                    if (matching) {                                                                                    // 2451\n                        returnValue = matching.invoke(func, thisValue, args);                                          // 2452\n                    } else {                                                                                           // 2453\n                        returnValue = (this.func || func).apply(thisValue, args);                                      // 2454\n                    }                                                                                                  // 2455\n                                                                                                                       // 2456\n                    var thisCall = this.getCall(this.callCount - 1);                                                   // 2457\n                    if (thisCall.calledWithNew() && typeof returnValue !== \"object\") {                                 // 2458\n                        returnValue = thisValue;                                                                       // 2459\n                    }                                                                                                  // 2460\n                } catch (e) {                                                                                          // 2461\n                    exception = e;                                                                                     // 2462\n                } finally {                                                                                            // 2463\n                    delete this.invoking;                                                                              // 2464\n                }                                                                                                      // 2465\n                                                                                                                       // 2466\n                push.call(this.exceptions, exception);                                                                 // 2467\n                push.call(this.returnValues, returnValue);                                                             // 2468\n                                                                                                                       // 2469\n                // Make return value and exception available in the calls:                                             // 2470\n                createCallProperties.call(this);                                                                       // 2471\n                                                                                                                       // 2472\n                if (exception !== undefined) {                                                                         // 2473\n                    throw exception;                                                                                   // 2474\n                }                                                                                                      // 2475\n                                                                                                                       // 2476\n                return returnValue;                                                                                    // 2477\n            },                                                                                                         // 2478\n                                                                                                                       // 2479\n            named: function named(name) {                                                                              // 2480\n                this.displayName = name;                                                                               // 2481\n                return this;                                                                                           // 2482\n            },                                                                                                         // 2483\n                                                                                                                       // 2484\n            getCall: function getCall(i) {                                                                             // 2485\n                if (i < 0 || i >= this.callCount) {                                                                    // 2486\n                    return null;                                                                                       // 2487\n                }                                                                                                      // 2488\n                                                                                                                       // 2489\n                return sinon.spyCall(this, this.thisValues[i], this.args[i],                                           // 2490\n                                        this.returnValues[i], this.exceptions[i],                                      // 2491\n                                        this.callIds[i]);                                                              // 2492\n            },                                                                                                         // 2493\n                                                                                                                       // 2494\n            getCalls: function () {                                                                                    // 2495\n                var calls = [];                                                                                        // 2496\n                var i;                                                                                                 // 2497\n                                                                                                                       // 2498\n                for (i = 0; i < this.callCount; i++) {                                                                 // 2499\n                    calls.push(this.getCall(i));                                                                       // 2500\n                }                                                                                                      // 2501\n                                                                                                                       // 2502\n                return calls;                                                                                          // 2503\n            },                                                                                                         // 2504\n                                                                                                                       // 2505\n            calledBefore: function calledBefore(spyFn) {                                                               // 2506\n                if (!this.called) {                                                                                    // 2507\n                    return false;                                                                                      // 2508\n                }                                                                                                      // 2509\n                                                                                                                       // 2510\n                if (!spyFn.called) {                                                                                   // 2511\n                    return true;                                                                                       // 2512\n                }                                                                                                      // 2513\n                                                                                                                       // 2514\n                return this.callIds[0] < spyFn.callIds[spyFn.callIds.length - 1];                                      // 2515\n            },                                                                                                         // 2516\n                                                                                                                       // 2517\n            calledAfter: function calledAfter(spyFn) {                                                                 // 2518\n                if (!this.called || !spyFn.called) {                                                                   // 2519\n                    return false;                                                                                      // 2520\n                }                                                                                                      // 2521\n                                                                                                                       // 2522\n                return this.callIds[this.callCount - 1] > spyFn.callIds[spyFn.callCount - 1];                          // 2523\n            },                                                                                                         // 2524\n                                                                                                                       // 2525\n            withArgs: function () {                                                                                    // 2526\n                var args = slice.call(arguments);                                                                      // 2527\n                                                                                                                       // 2528\n                if (this.fakes) {                                                                                      // 2529\n                    var match = matchingFake(this.fakes, args, true);                                                  // 2530\n                                                                                                                       // 2531\n                    if (match) {                                                                                       // 2532\n                        return match;                                                                                  // 2533\n                    }                                                                                                  // 2534\n                } else {                                                                                               // 2535\n                    this.fakes = [];                                                                                   // 2536\n                }                                                                                                      // 2537\n                                                                                                                       // 2538\n                var original = this;                                                                                   // 2539\n                var fake = this.instantiateFake();                                                                     // 2540\n                fake.matchingAguments = args;                                                                          // 2541\n                fake.parent = this;                                                                                    // 2542\n                push.call(this.fakes, fake);                                                                           // 2543\n                                                                                                                       // 2544\n                fake.withArgs = function () {                                                                          // 2545\n                    return original.withArgs.apply(original, arguments);                                               // 2546\n                };                                                                                                     // 2547\n                                                                                                                       // 2548\n                for (var i = 0; i < this.args.length; i++) {                                                           // 2549\n                    if (fake.matches(this.args[i])) {                                                                  // 2550\n                        incrementCallCount.call(fake);                                                                 // 2551\n                        push.call(fake.thisValues, this.thisValues[i]);                                                // 2552\n                        push.call(fake.args, this.args[i]);                                                            // 2553\n                        push.call(fake.returnValues, this.returnValues[i]);                                            // 2554\n                        push.call(fake.exceptions, this.exceptions[i]);                                                // 2555\n                        push.call(fake.callIds, this.callIds[i]);                                                      // 2556\n                    }                                                                                                  // 2557\n                }                                                                                                      // 2558\n                createCallProperties.call(fake);                                                                       // 2559\n                                                                                                                       // 2560\n                return fake;                                                                                           // 2561\n            },                                                                                                         // 2562\n                                                                                                                       // 2563\n            matches: function (args, strict) {                                                                         // 2564\n                var margs = this.matchingAguments;                                                                     // 2565\n                                                                                                                       // 2566\n                if (margs.length <= args.length &&                                                                     // 2567\n                    sinon.deepEqual(margs, args.slice(0, margs.length))) {                                             // 2568\n                    return !strict || margs.length == args.length;                                                     // 2569\n                }                                                                                                      // 2570\n            },                                                                                                         // 2571\n                                                                                                                       // 2572\n            printf: function (format) {                                                                                // 2573\n                var spy = this;                                                                                        // 2574\n                var args = slice.call(arguments, 1);                                                                   // 2575\n                var formatter;                                                                                         // 2576\n                                                                                                                       // 2577\n                return (format || \"\").replace(/%(.)/g, function (match, specifyer) {                                   // 2578\n                    formatter = spyApi.formatters[specifyer];                                                          // 2579\n                                                                                                                       // 2580\n                    if (typeof formatter == \"function\") {                                                              // 2581\n                        return formatter.call(null, spy, args);                                                        // 2582\n                    } else if (!isNaN(parseInt(specifyer, 10))) {                                                      // 2583\n                        return sinon.format(args[specifyer - 1]);                                                      // 2584\n                    }                                                                                                  // 2585\n                                                                                                                       // 2586\n                    return \"%\" + specifyer;                                                                            // 2587\n                });                                                                                                    // 2588\n            }                                                                                                          // 2589\n        };                                                                                                             // 2590\n                                                                                                                       // 2591\n        function delegateToCalls(method, matchAny, actual, notCalled) {                                                // 2592\n            spyApi[method] = function () {                                                                             // 2593\n                if (!this.called) {                                                                                    // 2594\n                    if (notCalled) {                                                                                   // 2595\n                        return notCalled.apply(this, arguments);                                                       // 2596\n                    }                                                                                                  // 2597\n                    return false;                                                                                      // 2598\n                }                                                                                                      // 2599\n                                                                                                                       // 2600\n                var currentCall;                                                                                       // 2601\n                var matches = 0;                                                                                       // 2602\n                                                                                                                       // 2603\n                for (var i = 0, l = this.callCount; i < l; i += 1) {                                                   // 2604\n                    currentCall = this.getCall(i);                                                                     // 2605\n                                                                                                                       // 2606\n                    if (currentCall[actual || method].apply(currentCall, arguments)) {                                 // 2607\n                        matches += 1;                                                                                  // 2608\n                                                                                                                       // 2609\n                        if (matchAny) {                                                                                // 2610\n                            return true;                                                                               // 2611\n                        }                                                                                              // 2612\n                    }                                                                                                  // 2613\n                }                                                                                                      // 2614\n                                                                                                                       // 2615\n                return matches === this.callCount;                                                                     // 2616\n            };                                                                                                         // 2617\n        }                                                                                                              // 2618\n                                                                                                                       // 2619\n        delegateToCalls(\"calledOn\", true);                                                                             // 2620\n        delegateToCalls(\"alwaysCalledOn\", false, \"calledOn\");                                                          // 2621\n        delegateToCalls(\"calledWith\", true);                                                                           // 2622\n        delegateToCalls(\"calledWithMatch\", true);                                                                      // 2623\n        delegateToCalls(\"alwaysCalledWith\", false, \"calledWith\");                                                      // 2624\n        delegateToCalls(\"alwaysCalledWithMatch\", false, \"calledWithMatch\");                                            // 2625\n        delegateToCalls(\"calledWithExactly\", true);                                                                    // 2626\n        delegateToCalls(\"alwaysCalledWithExactly\", false, \"calledWithExactly\");                                        // 2627\n        delegateToCalls(\"neverCalledWith\", false, \"notCalledWith\",                                                     // 2628\n            function () { return true; });                                                                             // 2629\n        delegateToCalls(\"neverCalledWithMatch\", false, \"notCalledWithMatch\",                                           // 2630\n            function () { return true; });                                                                             // 2631\n        delegateToCalls(\"threw\", true);                                                                                // 2632\n        delegateToCalls(\"alwaysThrew\", false, \"threw\");                                                                // 2633\n        delegateToCalls(\"returned\", true);                                                                             // 2634\n        delegateToCalls(\"alwaysReturned\", false, \"returned\");                                                          // 2635\n        delegateToCalls(\"calledWithNew\", true);                                                                        // 2636\n        delegateToCalls(\"alwaysCalledWithNew\", false, \"calledWithNew\");                                                // 2637\n        delegateToCalls(\"callArg\", false, \"callArgWith\", function () {                                                 // 2638\n            throw new Error(this.toString() + \" cannot call arg since it was not yet invoked.\");                       // 2639\n        });                                                                                                            // 2640\n        spyApi.callArgWith = spyApi.callArg;                                                                           // 2641\n        delegateToCalls(\"callArgOn\", false, \"callArgOnWith\", function () {                                             // 2642\n            throw new Error(this.toString() + \" cannot call arg since it was not yet invoked.\");                       // 2643\n        });                                                                                                            // 2644\n        spyApi.callArgOnWith = spyApi.callArgOn;                                                                       // 2645\n        delegateToCalls(\"yield\", false, \"yield\", function () {                                                         // 2646\n            throw new Error(this.toString() + \" cannot yield since it was not yet invoked.\");                          // 2647\n        });                                                                                                            // 2648\n        // \"invokeCallback\" is an alias for \"yield\" since \"yield\" is invalid in strict mode.                           // 2649\n        spyApi.invokeCallback = spyApi.yield;                                                                          // 2650\n        delegateToCalls(\"yieldOn\", false, \"yieldOn\", function () {                                                     // 2651\n            throw new Error(this.toString() + \" cannot yield since it was not yet invoked.\");                          // 2652\n        });                                                                                                            // 2653\n        delegateToCalls(\"yieldTo\", false, \"yieldTo\", function (property) {                                             // 2654\n            throw new Error(this.toString() + \" cannot yield to '\" + property +                                        // 2655\n                \"' since it was not yet invoked.\");                                                                    // 2656\n        });                                                                                                            // 2657\n        delegateToCalls(\"yieldToOn\", false, \"yieldToOn\", function (property) {                                         // 2658\n            throw new Error(this.toString() + \" cannot yield to '\" + property +                                        // 2659\n                \"' since it was not yet invoked.\");                                                                    // 2660\n        });                                                                                                            // 2661\n                                                                                                                       // 2662\n        spyApi.formatters = {                                                                                          // 2663\n            c: function (spy) {                                                                                        // 2664\n                return sinon.timesInWords(spy.callCount);                                                              // 2665\n            },                                                                                                         // 2666\n                                                                                                                       // 2667\n            n: function (spy) {                                                                                        // 2668\n                return spy.toString();                                                                                 // 2669\n            },                                                                                                         // 2670\n                                                                                                                       // 2671\n            C: function (spy) {                                                                                        // 2672\n                var calls = [];                                                                                        // 2673\n                                                                                                                       // 2674\n                for (var i = 0, l = spy.callCount; i < l; ++i) {                                                       // 2675\n                    var stringifiedCall = \"    \" + spy.getCall(i).toString();                                          // 2676\n                    if (/\\n/.test(calls[i - 1])) {                                                                     // 2677\n                        stringifiedCall = \"\\n\" + stringifiedCall;                                                      // 2678\n                    }                                                                                                  // 2679\n                    push.call(calls, stringifiedCall);                                                                 // 2680\n                }                                                                                                      // 2681\n                                                                                                                       // 2682\n                return calls.length > 0 ? \"\\n\" + calls.join(\"\\n\") : \"\";                                                // 2683\n            },                                                                                                         // 2684\n                                                                                                                       // 2685\n            t: function (spy) {                                                                                        // 2686\n                var objects = [];                                                                                      // 2687\n                                                                                                                       // 2688\n                for (var i = 0, l = spy.callCount; i < l; ++i) {                                                       // 2689\n                    push.call(objects, sinon.format(spy.thisValues[i]));                                               // 2690\n                }                                                                                                      // 2691\n                                                                                                                       // 2692\n                return objects.join(\", \");                                                                             // 2693\n            },                                                                                                         // 2694\n                                                                                                                       // 2695\n            \"*\": function (spy, args) {                                                                                // 2696\n                var formatted = [];                                                                                    // 2697\n                                                                                                                       // 2698\n                for (var i = 0, l = args.length; i < l; ++i) {                                                         // 2699\n                    push.call(formatted, sinon.format(args[i]));                                                       // 2700\n                }                                                                                                      // 2701\n                                                                                                                       // 2702\n                return formatted.join(\", \");                                                                           // 2703\n            }                                                                                                          // 2704\n        };                                                                                                             // 2705\n                                                                                                                       // 2706\n        sinon.extend(spy, spyApi);                                                                                     // 2707\n                                                                                                                       // 2708\n        spy.spyCall = sinon.spyCall;                                                                                   // 2709\n        sinon.spy = spy;                                                                                               // 2710\n                                                                                                                       // 2711\n        return spy;                                                                                                    // 2712\n    }                                                                                                                  // 2713\n                                                                                                                       // 2714\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 2715\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 2716\n                                                                                                                       // 2717\n    function loadDependencies(require, exports, module) {                                                              // 2718\n        var sinon = require(\"./util/core\");                                                                            // 2719\n        require(\"./call\");                                                                                             // 2720\n        require(\"./extend\");                                                                                           // 2721\n        require(\"./times_in_words\");                                                                                   // 2722\n        require(\"./format\");                                                                                           // 2723\n        module.exports = makeApi(sinon);                                                                               // 2724\n    }                                                                                                                  // 2725\n                                                                                                                       // 2726\n    if (isAMD) {                                                                                                       // 2727\n        define(loadDependencies);                                                                                      // 2728\n    } else if (isNode) {                                                                                               // 2729\n        loadDependencies(require, module.exports, module);                                                             // 2730\n    } else if (!sinon) {                                                                                               // 2731\n        return;                                                                                                        // 2732\n    } else {                                                                                                           // 2733\n        makeApi(sinon);                                                                                                // 2734\n    }                                                                                                                  // 2735\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 2736\n                                                                                                                       // 2737\n/**                                                                                                                    // 2738\n * @depend util/core.js                                                                                                // 2739\n * @depend extend.js                                                                                                   // 2740\n */                                                                                                                    // 2741\n/**                                                                                                                    // 2742\n * Stub behavior                                                                                                       // 2743\n *                                                                                                                     // 2744\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 2745\n * @author Tim Fischbach (mail@timfischbach.de)                                                                        // 2746\n * @license BSD                                                                                                        // 2747\n *                                                                                                                     // 2748\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 2749\n */                                                                                                                    // 2750\n                                                                                                                       // 2751\n(function (sinon) {                                                                                                    // 2752\n    var slice = Array.prototype.slice;                                                                                 // 2753\n    var join = Array.prototype.join;                                                                                   // 2754\n    var useLeftMostCallback = -1;                                                                                      // 2755\n    var useRightMostCallback = -2;                                                                                     // 2756\n                                                                                                                       // 2757\n    var nextTick = (function () {                                                                                      // 2758\n        if (typeof process === \"object\" && typeof process.nextTick === \"function\") {                                   // 2759\n            return process.nextTick;                                                                                   // 2760\n        } else if (typeof setImmediate === \"function\") {                                                               // 2761\n            return setImmediate;                                                                                       // 2762\n        } else {                                                                                                       // 2763\n            return function (callback) {                                                                               // 2764\n                setTimeout(callback, 0);                                                                               // 2765\n            };                                                                                                         // 2766\n        }                                                                                                              // 2767\n    })();                                                                                                              // 2768\n                                                                                                                       // 2769\n    function throwsException(error, message) {                                                                         // 2770\n        if (typeof error == \"string\") {                                                                                // 2771\n            this.exception = new Error(message || \"\");                                                                 // 2772\n            this.exception.name = error;                                                                               // 2773\n        } else if (!error) {                                                                                           // 2774\n            this.exception = new Error(\"Error\");                                                                       // 2775\n        } else {                                                                                                       // 2776\n            this.exception = error;                                                                                    // 2777\n        }                                                                                                              // 2778\n                                                                                                                       // 2779\n        return this;                                                                                                   // 2780\n    }                                                                                                                  // 2781\n                                                                                                                       // 2782\n    function getCallback(behavior, args) {                                                                             // 2783\n        var callArgAt = behavior.callArgAt;                                                                            // 2784\n                                                                                                                       // 2785\n        if (callArgAt >= 0) {                                                                                          // 2786\n            return args[callArgAt];                                                                                    // 2787\n        }                                                                                                              // 2788\n                                                                                                                       // 2789\n        var argumentList;                                                                                              // 2790\n                                                                                                                       // 2791\n        if (callArgAt === useLeftMostCallback) {                                                                       // 2792\n            argumentList = args;                                                                                       // 2793\n        }                                                                                                              // 2794\n                                                                                                                       // 2795\n        if (callArgAt === useRightMostCallback) {                                                                      // 2796\n            argumentList = slice.call(args).reverse();                                                                 // 2797\n        }                                                                                                              // 2798\n                                                                                                                       // 2799\n        var callArgProp = behavior.callArgProp;                                                                        // 2800\n                                                                                                                       // 2801\n        for (var i = 0, l = argumentList.length; i < l; ++i) {                                                         // 2802\n            if (!callArgProp && typeof argumentList[i] == \"function\") {                                                // 2803\n                return argumentList[i];                                                                                // 2804\n            }                                                                                                          // 2805\n                                                                                                                       // 2806\n            if (callArgProp && argumentList[i] &&                                                                      // 2807\n                typeof argumentList[i][callArgProp] == \"function\") {                                                   // 2808\n                return argumentList[i][callArgProp];                                                                   // 2809\n            }                                                                                                          // 2810\n        }                                                                                                              // 2811\n                                                                                                                       // 2812\n        return null;                                                                                                   // 2813\n    }                                                                                                                  // 2814\n                                                                                                                       // 2815\n    function makeApi(sinon) {                                                                                          // 2816\n        function getCallbackError(behavior, func, args) {                                                              // 2817\n            if (behavior.callArgAt < 0) {                                                                              // 2818\n                var msg;                                                                                               // 2819\n                                                                                                                       // 2820\n                if (behavior.callArgProp) {                                                                            // 2821\n                    msg = sinon.functionName(behavior.stub) +                                                          // 2822\n                        \" expected to yield to '\" + behavior.callArgProp +                                             // 2823\n                        \"', but no object with such a property was passed.\";                                           // 2824\n                } else {                                                                                               // 2825\n                    msg = sinon.functionName(behavior.stub) +                                                          // 2826\n                        \" expected to yield, but no callback was passed.\";                                             // 2827\n                }                                                                                                      // 2828\n                                                                                                                       // 2829\n                if (args.length > 0) {                                                                                 // 2830\n                    msg += \" Received [\" + join.call(args, \", \") + \"]\";                                                // 2831\n                }                                                                                                      // 2832\n                                                                                                                       // 2833\n                return msg;                                                                                            // 2834\n            }                                                                                                          // 2835\n                                                                                                                       // 2836\n            return \"argument at index \" + behavior.callArgAt + \" is not a function: \" + func;                          // 2837\n        }                                                                                                              // 2838\n                                                                                                                       // 2839\n        function callCallback(behavior, args) {                                                                        // 2840\n            if (typeof behavior.callArgAt == \"number\") {                                                               // 2841\n                var func = getCallback(behavior, args);                                                                // 2842\n                                                                                                                       // 2843\n                if (typeof func != \"function\") {                                                                       // 2844\n                    throw new TypeError(getCallbackError(behavior, func, args));                                       // 2845\n                }                                                                                                      // 2846\n                                                                                                                       // 2847\n                if (behavior.callbackAsync) {                                                                          // 2848\n                    nextTick(function () {                                                                             // 2849\n                        func.apply(behavior.callbackContext, behavior.callbackArguments);                              // 2850\n                    });                                                                                                // 2851\n                } else {                                                                                               // 2852\n                    func.apply(behavior.callbackContext, behavior.callbackArguments);                                  // 2853\n                }                                                                                                      // 2854\n            }                                                                                                          // 2855\n        }                                                                                                              // 2856\n                                                                                                                       // 2857\n        var proto = {                                                                                                  // 2858\n            create: function create(stub) {                                                                            // 2859\n                var behavior = sinon.extend({}, sinon.behavior);                                                       // 2860\n                delete behavior.create;                                                                                // 2861\n                behavior.stub = stub;                                                                                  // 2862\n                                                                                                                       // 2863\n                return behavior;                                                                                       // 2864\n            },                                                                                                         // 2865\n                                                                                                                       // 2866\n            isPresent: function isPresent() {                                                                          // 2867\n                return (typeof this.callArgAt == \"number\" ||                                                           // 2868\n                        this.exception ||                                                                              // 2869\n                        typeof this.returnArgAt == \"number\" ||                                                         // 2870\n                        this.returnThis ||                                                                             // 2871\n                        this.returnValueDefined);                                                                      // 2872\n            },                                                                                                         // 2873\n                                                                                                                       // 2874\n            invoke: function invoke(context, args) {                                                                   // 2875\n                callCallback(this, args);                                                                              // 2876\n                                                                                                                       // 2877\n                if (this.exception) {                                                                                  // 2878\n                    throw this.exception;                                                                              // 2879\n                } else if (typeof this.returnArgAt == \"number\") {                                                      // 2880\n                    return args[this.returnArgAt];                                                                     // 2881\n                } else if (this.returnThis) {                                                                          // 2882\n                    return context;                                                                                    // 2883\n                }                                                                                                      // 2884\n                                                                                                                       // 2885\n                return this.returnValue;                                                                               // 2886\n            },                                                                                                         // 2887\n                                                                                                                       // 2888\n            onCall: function onCall(index) {                                                                           // 2889\n                return this.stub.onCall(index);                                                                        // 2890\n            },                                                                                                         // 2891\n                                                                                                                       // 2892\n            onFirstCall: function onFirstCall() {                                                                      // 2893\n                return this.stub.onFirstCall();                                                                        // 2894\n            },                                                                                                         // 2895\n                                                                                                                       // 2896\n            onSecondCall: function onSecondCall() {                                                                    // 2897\n                return this.stub.onSecondCall();                                                                       // 2898\n            },                                                                                                         // 2899\n                                                                                                                       // 2900\n            onThirdCall: function onThirdCall() {                                                                      // 2901\n                return this.stub.onThirdCall();                                                                        // 2902\n            },                                                                                                         // 2903\n                                                                                                                       // 2904\n            withArgs: function withArgs(/* arguments */) {                                                             // 2905\n                throw new Error(\"Defining a stub by invoking \\\"stub.onCall(...).withArgs(...)\\\" is not supported. \" +  // 2906\n                                \"Use \\\"stub.withArgs(...).onCall(...)\\\" to define sequential behavior for calls with certain arguments.\");\n            },                                                                                                         // 2908\n                                                                                                                       // 2909\n            callsArg: function callsArg(pos) {                                                                         // 2910\n                if (typeof pos != \"number\") {                                                                          // 2911\n                    throw new TypeError(\"argument index is not number\");                                               // 2912\n                }                                                                                                      // 2913\n                                                                                                                       // 2914\n                this.callArgAt = pos;                                                                                  // 2915\n                this.callbackArguments = [];                                                                           // 2916\n                this.callbackContext = undefined;                                                                      // 2917\n                this.callArgProp = undefined;                                                                          // 2918\n                this.callbackAsync = false;                                                                            // 2919\n                                                                                                                       // 2920\n                return this;                                                                                           // 2921\n            },                                                                                                         // 2922\n                                                                                                                       // 2923\n            callsArgOn: function callsArgOn(pos, context) {                                                            // 2924\n                if (typeof pos != \"number\") {                                                                          // 2925\n                    throw new TypeError(\"argument index is not number\");                                               // 2926\n                }                                                                                                      // 2927\n                if (typeof context != \"object\") {                                                                      // 2928\n                    throw new TypeError(\"argument context is not an object\");                                          // 2929\n                }                                                                                                      // 2930\n                                                                                                                       // 2931\n                this.callArgAt = pos;                                                                                  // 2932\n                this.callbackArguments = [];                                                                           // 2933\n                this.callbackContext = context;                                                                        // 2934\n                this.callArgProp = undefined;                                                                          // 2935\n                this.callbackAsync = false;                                                                            // 2936\n                                                                                                                       // 2937\n                return this;                                                                                           // 2938\n            },                                                                                                         // 2939\n                                                                                                                       // 2940\n            callsArgWith: function callsArgWith(pos) {                                                                 // 2941\n                if (typeof pos != \"number\") {                                                                          // 2942\n                    throw new TypeError(\"argument index is not number\");                                               // 2943\n                }                                                                                                      // 2944\n                                                                                                                       // 2945\n                this.callArgAt = pos;                                                                                  // 2946\n                this.callbackArguments = slice.call(arguments, 1);                                                     // 2947\n                this.callbackContext = undefined;                                                                      // 2948\n                this.callArgProp = undefined;                                                                          // 2949\n                this.callbackAsync = false;                                                                            // 2950\n                                                                                                                       // 2951\n                return this;                                                                                           // 2952\n            },                                                                                                         // 2953\n                                                                                                                       // 2954\n            callsArgOnWith: function callsArgWith(pos, context) {                                                      // 2955\n                if (typeof pos != \"number\") {                                                                          // 2956\n                    throw new TypeError(\"argument index is not number\");                                               // 2957\n                }                                                                                                      // 2958\n                if (typeof context != \"object\") {                                                                      // 2959\n                    throw new TypeError(\"argument context is not an object\");                                          // 2960\n                }                                                                                                      // 2961\n                                                                                                                       // 2962\n                this.callArgAt = pos;                                                                                  // 2963\n                this.callbackArguments = slice.call(arguments, 2);                                                     // 2964\n                this.callbackContext = context;                                                                        // 2965\n                this.callArgProp = undefined;                                                                          // 2966\n                this.callbackAsync = false;                                                                            // 2967\n                                                                                                                       // 2968\n                return this;                                                                                           // 2969\n            },                                                                                                         // 2970\n                                                                                                                       // 2971\n            yields: function () {                                                                                      // 2972\n                this.callArgAt = useLeftMostCallback;                                                                  // 2973\n                this.callbackArguments = slice.call(arguments, 0);                                                     // 2974\n                this.callbackContext = undefined;                                                                      // 2975\n                this.callArgProp = undefined;                                                                          // 2976\n                this.callbackAsync = false;                                                                            // 2977\n                                                                                                                       // 2978\n                return this;                                                                                           // 2979\n            },                                                                                                         // 2980\n                                                                                                                       // 2981\n            yieldsRight: function () {                                                                                 // 2982\n                this.callArgAt = useRightMostCallback;                                                                 // 2983\n                this.callbackArguments = slice.call(arguments, 0);                                                     // 2984\n                this.callbackContext = undefined;                                                                      // 2985\n                this.callArgProp = undefined;                                                                          // 2986\n                this.callbackAsync = false;                                                                            // 2987\n                                                                                                                       // 2988\n                return this;                                                                                           // 2989\n            },                                                                                                         // 2990\n                                                                                                                       // 2991\n            yieldsOn: function (context) {                                                                             // 2992\n                if (typeof context != \"object\") {                                                                      // 2993\n                    throw new TypeError(\"argument context is not an object\");                                          // 2994\n                }                                                                                                      // 2995\n                                                                                                                       // 2996\n                this.callArgAt = useLeftMostCallback;                                                                  // 2997\n                this.callbackArguments = slice.call(arguments, 1);                                                     // 2998\n                this.callbackContext = context;                                                                        // 2999\n                this.callArgProp = undefined;                                                                          // 3000\n                this.callbackAsync = false;                                                                            // 3001\n                                                                                                                       // 3002\n                return this;                                                                                           // 3003\n            },                                                                                                         // 3004\n                                                                                                                       // 3005\n            yieldsTo: function (prop) {                                                                                // 3006\n                this.callArgAt = useLeftMostCallback;                                                                  // 3007\n                this.callbackArguments = slice.call(arguments, 1);                                                     // 3008\n                this.callbackContext = undefined;                                                                      // 3009\n                this.callArgProp = prop;                                                                               // 3010\n                this.callbackAsync = false;                                                                            // 3011\n                                                                                                                       // 3012\n                return this;                                                                                           // 3013\n            },                                                                                                         // 3014\n                                                                                                                       // 3015\n            yieldsToOn: function (prop, context) {                                                                     // 3016\n                if (typeof context != \"object\") {                                                                      // 3017\n                    throw new TypeError(\"argument context is not an object\");                                          // 3018\n                }                                                                                                      // 3019\n                                                                                                                       // 3020\n                this.callArgAt = useLeftMostCallback;                                                                  // 3021\n                this.callbackArguments = slice.call(arguments, 2);                                                     // 3022\n                this.callbackContext = context;                                                                        // 3023\n                this.callArgProp = prop;                                                                               // 3024\n                this.callbackAsync = false;                                                                            // 3025\n                                                                                                                       // 3026\n                return this;                                                                                           // 3027\n            },                                                                                                         // 3028\n                                                                                                                       // 3029\n            throws: throwsException,                                                                                   // 3030\n            throwsException: throwsException,                                                                          // 3031\n                                                                                                                       // 3032\n            returns: function returns(value) {                                                                         // 3033\n                this.returnValue = value;                                                                              // 3034\n                this.returnValueDefined = true;                                                                        // 3035\n                                                                                                                       // 3036\n                return this;                                                                                           // 3037\n            },                                                                                                         // 3038\n                                                                                                                       // 3039\n            returnsArg: function returnsArg(pos) {                                                                     // 3040\n                if (typeof pos != \"number\") {                                                                          // 3041\n                    throw new TypeError(\"argument index is not number\");                                               // 3042\n                }                                                                                                      // 3043\n                                                                                                                       // 3044\n                this.returnArgAt = pos;                                                                                // 3045\n                                                                                                                       // 3046\n                return this;                                                                                           // 3047\n            },                                                                                                         // 3048\n                                                                                                                       // 3049\n            returnsThis: function returnsThis() {                                                                      // 3050\n                this.returnThis = true;                                                                                // 3051\n                                                                                                                       // 3052\n                return this;                                                                                           // 3053\n            }                                                                                                          // 3054\n        };                                                                                                             // 3055\n                                                                                                                       // 3056\n        // create asynchronous versions of callsArg* and yields* methods                                               // 3057\n        for (var method in proto) {                                                                                    // 3058\n            // need to avoid creating anotherasync versions of the newly added async methods                           // 3059\n            if (proto.hasOwnProperty(method) &&                                                                        // 3060\n                method.match(/^(callsArg|yields)/) &&                                                                  // 3061\n                !method.match(/Async/)) {                                                                              // 3062\n                proto[method + \"Async\"] = (function (syncFnName) {                                                     // 3063\n                    return function () {                                                                               // 3064\n                        var result = this[syncFnName].apply(this, arguments);                                          // 3065\n                        this.callbackAsync = true;                                                                     // 3066\n                        return result;                                                                                 // 3067\n                    };                                                                                                 // 3068\n                })(method);                                                                                            // 3069\n            }                                                                                                          // 3070\n        }                                                                                                              // 3071\n                                                                                                                       // 3072\n        sinon.behavior = proto;                                                                                        // 3073\n        return proto;                                                                                                  // 3074\n    }                                                                                                                  // 3075\n                                                                                                                       // 3076\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 3077\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 3078\n                                                                                                                       // 3079\n    function loadDependencies(require, exports, module) {                                                              // 3080\n        var sinon = require(\"./util/core\");                                                                            // 3081\n        require(\"./extend\");                                                                                           // 3082\n        module.exports = makeApi(sinon);                                                                               // 3083\n    }                                                                                                                  // 3084\n                                                                                                                       // 3085\n    if (isAMD) {                                                                                                       // 3086\n        define(loadDependencies);                                                                                      // 3087\n    } else if (isNode) {                                                                                               // 3088\n        loadDependencies(require, module.exports, module);                                                             // 3089\n    } else if (!sinon) {                                                                                               // 3090\n        return;                                                                                                        // 3091\n    } else {                                                                                                           // 3092\n        makeApi(sinon);                                                                                                // 3093\n    }                                                                                                                  // 3094\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 3095\n                                                                                                                       // 3096\n/**                                                                                                                    // 3097\n * @depend util/core.js                                                                                                // 3098\n * @depend extend.js                                                                                                   // 3099\n * @depend spy.js                                                                                                      // 3100\n * @depend behavior.js                                                                                                 // 3101\n */                                                                                                                    // 3102\n/**                                                                                                                    // 3103\n * Stub functions                                                                                                      // 3104\n *                                                                                                                     // 3105\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 3106\n * @license BSD                                                                                                        // 3107\n *                                                                                                                     // 3108\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 3109\n */                                                                                                                    // 3110\n                                                                                                                       // 3111\n(function (sinon) {                                                                                                    // 3112\n    function makeApi(sinon) {                                                                                          // 3113\n        function stub(object, property, func) {                                                                        // 3114\n            if (!!func && typeof func != \"function\" && typeof func != \"object\") {                                      // 3115\n                throw new TypeError(\"Custom stub should be a function or a property descriptor\");                      // 3116\n            }                                                                                                          // 3117\n                                                                                                                       // 3118\n            var wrapper;                                                                                               // 3119\n                                                                                                                       // 3120\n            if (func) {                                                                                                // 3121\n                if (typeof func == \"function\") {                                                                       // 3122\n                    wrapper = sinon.spy && sinon.spy.create ? sinon.spy.create(func) : func;                           // 3123\n                } else {                                                                                               // 3124\n                    wrapper = func;                                                                                    // 3125\n                    if (sinon.spy && sinon.spy.create) {                                                               // 3126\n                        var types = sinon.objectKeys(wrapper);                                                         // 3127\n                        for (var i = 0; i < types.length; i++) {                                                       // 3128\n                            wrapper[types[i]] = sinon.spy.create(wrapper[types[i]]);                                   // 3129\n                        }                                                                                              // 3130\n                    }                                                                                                  // 3131\n                }                                                                                                      // 3132\n            } else {                                                                                                   // 3133\n                var stubLength = 0;                                                                                    // 3134\n                if (typeof object == \"object\" && typeof object[property] == \"function\") {                              // 3135\n                    stubLength = object[property].length;                                                              // 3136\n                }                                                                                                      // 3137\n                wrapper = stub.create(stubLength);                                                                     // 3138\n            }                                                                                                          // 3139\n                                                                                                                       // 3140\n            if (!object && typeof property === \"undefined\") {                                                          // 3141\n                return sinon.stub.create();                                                                            // 3142\n            }                                                                                                          // 3143\n                                                                                                                       // 3144\n            if (typeof property === \"undefined\" && typeof object == \"object\") {                                        // 3145\n                for (var prop in object) {                                                                             // 3146\n                    if (typeof object[prop] === \"function\") {                                                          // 3147\n                        stub(object, prop);                                                                            // 3148\n                    }                                                                                                  // 3149\n                }                                                                                                      // 3150\n                                                                                                                       // 3151\n                return object;                                                                                         // 3152\n            }                                                                                                          // 3153\n                                                                                                                       // 3154\n            return sinon.wrapMethod(object, property, wrapper);                                                        // 3155\n        }                                                                                                              // 3156\n                                                                                                                       // 3157\n        function getDefaultBehavior(stub) {                                                                            // 3158\n            return stub.defaultBehavior || getParentBehaviour(stub) || sinon.behavior.create(stub);                    // 3159\n        }                                                                                                              // 3160\n                                                                                                                       // 3161\n        function getParentBehaviour(stub) {                                                                            // 3162\n            return (stub.parent && getCurrentBehavior(stub.parent));                                                   // 3163\n        }                                                                                                              // 3164\n                                                                                                                       // 3165\n        function getCurrentBehavior(stub) {                                                                            // 3166\n            var behavior = stub.behaviors[stub.callCount - 1];                                                         // 3167\n            return behavior && behavior.isPresent() ? behavior : getDefaultBehavior(stub);                             // 3168\n        }                                                                                                              // 3169\n                                                                                                                       // 3170\n        var uuid = 0;                                                                                                  // 3171\n                                                                                                                       // 3172\n        var proto = {                                                                                                  // 3173\n            create: function create(stubLength) {                                                                      // 3174\n                var functionStub = function () {                                                                       // 3175\n                    return getCurrentBehavior(functionStub).invoke(this, arguments);                                   // 3176\n                };                                                                                                     // 3177\n                                                                                                                       // 3178\n                functionStub.id = \"stub#\" + uuid++;                                                                    // 3179\n                var orig = functionStub;                                                                               // 3180\n                functionStub = sinon.spy.create(functionStub, stubLength);                                             // 3181\n                functionStub.func = orig;                                                                              // 3182\n                                                                                                                       // 3183\n                sinon.extend(functionStub, stub);                                                                      // 3184\n                functionStub.instantiateFake = sinon.stub.create;                                                      // 3185\n                functionStub.displayName = \"stub\";                                                                     // 3186\n                functionStub.toString = sinon.functionToString;                                                        // 3187\n                                                                                                                       // 3188\n                functionStub.defaultBehavior = null;                                                                   // 3189\n                functionStub.behaviors = [];                                                                           // 3190\n                                                                                                                       // 3191\n                return functionStub;                                                                                   // 3192\n            },                                                                                                         // 3193\n                                                                                                                       // 3194\n            resetBehavior: function () {                                                                               // 3195\n                var i;                                                                                                 // 3196\n                                                                                                                       // 3197\n                this.defaultBehavior = null;                                                                           // 3198\n                this.behaviors = [];                                                                                   // 3199\n                                                                                                                       // 3200\n                delete this.returnValue;                                                                               // 3201\n                delete this.returnArgAt;                                                                               // 3202\n                this.returnThis = false;                                                                               // 3203\n                                                                                                                       // 3204\n                if (this.fakes) {                                                                                      // 3205\n                    for (i = 0; i < this.fakes.length; i++) {                                                          // 3206\n                        this.fakes[i].resetBehavior();                                                                 // 3207\n                    }                                                                                                  // 3208\n                }                                                                                                      // 3209\n            },                                                                                                         // 3210\n                                                                                                                       // 3211\n            onCall: function onCall(index) {                                                                           // 3212\n                if (!this.behaviors[index]) {                                                                          // 3213\n                    this.behaviors[index] = sinon.behavior.create(this);                                               // 3214\n                }                                                                                                      // 3215\n                                                                                                                       // 3216\n                return this.behaviors[index];                                                                          // 3217\n            },                                                                                                         // 3218\n                                                                                                                       // 3219\n            onFirstCall: function onFirstCall() {                                                                      // 3220\n                return this.onCall(0);                                                                                 // 3221\n            },                                                                                                         // 3222\n                                                                                                                       // 3223\n            onSecondCall: function onSecondCall() {                                                                    // 3224\n                return this.onCall(1);                                                                                 // 3225\n            },                                                                                                         // 3226\n                                                                                                                       // 3227\n            onThirdCall: function onThirdCall() {                                                                      // 3228\n                return this.onCall(2);                                                                                 // 3229\n            }                                                                                                          // 3230\n        };                                                                                                             // 3231\n                                                                                                                       // 3232\n        for (var method in sinon.behavior) {                                                                           // 3233\n            if (sinon.behavior.hasOwnProperty(method) &&                                                               // 3234\n                !proto.hasOwnProperty(method) &&                                                                       // 3235\n                method != \"create\" &&                                                                                  // 3236\n                method != \"withArgs\" &&                                                                                // 3237\n                method != \"invoke\") {                                                                                  // 3238\n                proto[method] = (function (behaviorMethod) {                                                           // 3239\n                    return function () {                                                                               // 3240\n                        this.defaultBehavior = this.defaultBehavior || sinon.behavior.create(this);                    // 3241\n                        this.defaultBehavior[behaviorMethod].apply(this.defaultBehavior, arguments);                   // 3242\n                        return this;                                                                                   // 3243\n                    };                                                                                                 // 3244\n                }(method));                                                                                            // 3245\n            }                                                                                                          // 3246\n        }                                                                                                              // 3247\n                                                                                                                       // 3248\n        sinon.extend(stub, proto);                                                                                     // 3249\n        sinon.stub = stub;                                                                                             // 3250\n                                                                                                                       // 3251\n        return stub;                                                                                                   // 3252\n    }                                                                                                                  // 3253\n                                                                                                                       // 3254\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 3255\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 3256\n                                                                                                                       // 3257\n    function loadDependencies(require, exports, module) {                                                              // 3258\n        var sinon = require(\"./util/core\");                                                                            // 3259\n        require(\"./behavior\");                                                                                         // 3260\n        require(\"./spy\");                                                                                              // 3261\n        require(\"./extend\");                                                                                           // 3262\n        module.exports = makeApi(sinon);                                                                               // 3263\n    }                                                                                                                  // 3264\n                                                                                                                       // 3265\n    if (isAMD) {                                                                                                       // 3266\n        define(loadDependencies);                                                                                      // 3267\n    } else if (isNode) {                                                                                               // 3268\n        loadDependencies(require, module.exports, module);                                                             // 3269\n    } else if (!sinon) {                                                                                               // 3270\n        return;                                                                                                        // 3271\n    } else {                                                                                                           // 3272\n        makeApi(sinon);                                                                                                // 3273\n    }                                                                                                                  // 3274\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 3275\n                                                                                                                       // 3276\n/**                                                                                                                    // 3277\n * @depend times_in_words.js                                                                                           // 3278\n * @depend util/core.js                                                                                                // 3279\n * @depend call.js                                                                                                     // 3280\n * @depend extend.js                                                                                                   // 3281\n * @depend match.js                                                                                                    // 3282\n * @depend spy.js                                                                                                      // 3283\n * @depend stub.js                                                                                                     // 3284\n * @depend format.js                                                                                                   // 3285\n */                                                                                                                    // 3286\n/**                                                                                                                    // 3287\n * Mock functions.                                                                                                     // 3288\n *                                                                                                                     // 3289\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 3290\n * @license BSD                                                                                                        // 3291\n *                                                                                                                     // 3292\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 3293\n */                                                                                                                    // 3294\n                                                                                                                       // 3295\n(function (sinon) {                                                                                                    // 3296\n    function makeApi(sinon) {                                                                                          // 3297\n        var push = [].push;                                                                                            // 3298\n        var match = sinon.match;                                                                                       // 3299\n                                                                                                                       // 3300\n        function mock(object) {                                                                                        // 3301\n            if (!object) {                                                                                             // 3302\n                return sinon.expectation.create(\"Anonymous mock\");                                                     // 3303\n            }                                                                                                          // 3304\n                                                                                                                       // 3305\n            return mock.create(object);                                                                                // 3306\n        }                                                                                                              // 3307\n                                                                                                                       // 3308\n        function each(collection, callback) {                                                                          // 3309\n            if (!collection) {                                                                                         // 3310\n                return;                                                                                                // 3311\n            }                                                                                                          // 3312\n                                                                                                                       // 3313\n            for (var i = 0, l = collection.length; i < l; i += 1) {                                                    // 3314\n                callback(collection[i]);                                                                               // 3315\n            }                                                                                                          // 3316\n        }                                                                                                              // 3317\n                                                                                                                       // 3318\n        sinon.extend(mock, {                                                                                           // 3319\n            create: function create(object) {                                                                          // 3320\n                if (!object) {                                                                                         // 3321\n                    throw new TypeError(\"object is null\");                                                             // 3322\n                }                                                                                                      // 3323\n                                                                                                                       // 3324\n                var mockObject = sinon.extend({}, mock);                                                               // 3325\n                mockObject.object = object;                                                                            // 3326\n                delete mockObject.create;                                                                              // 3327\n                                                                                                                       // 3328\n                return mockObject;                                                                                     // 3329\n            },                                                                                                         // 3330\n                                                                                                                       // 3331\n            expects: function expects(method) {                                                                        // 3332\n                if (!method) {                                                                                         // 3333\n                    throw new TypeError(\"method is falsy\");                                                            // 3334\n                }                                                                                                      // 3335\n                                                                                                                       // 3336\n                if (!this.expectations) {                                                                              // 3337\n                    this.expectations = {};                                                                            // 3338\n                    this.proxies = [];                                                                                 // 3339\n                }                                                                                                      // 3340\n                                                                                                                       // 3341\n                if (!this.expectations[method]) {                                                                      // 3342\n                    this.expectations[method] = [];                                                                    // 3343\n                    var mockObject = this;                                                                             // 3344\n                                                                                                                       // 3345\n                    sinon.wrapMethod(this.object, method, function () {                                                // 3346\n                        return mockObject.invokeMethod(method, this, arguments);                                       // 3347\n                    });                                                                                                // 3348\n                                                                                                                       // 3349\n                    push.call(this.proxies, method);                                                                   // 3350\n                }                                                                                                      // 3351\n                                                                                                                       // 3352\n                var expectation = sinon.expectation.create(method);                                                    // 3353\n                push.call(this.expectations[method], expectation);                                                     // 3354\n                                                                                                                       // 3355\n                return expectation;                                                                                    // 3356\n            },                                                                                                         // 3357\n                                                                                                                       // 3358\n            restore: function restore() {                                                                              // 3359\n                var object = this.object;                                                                              // 3360\n                                                                                                                       // 3361\n                each(this.proxies, function (proxy) {                                                                  // 3362\n                    if (typeof object[proxy].restore == \"function\") {                                                  // 3363\n                        object[proxy].restore();                                                                       // 3364\n                    }                                                                                                  // 3365\n                });                                                                                                    // 3366\n            },                                                                                                         // 3367\n                                                                                                                       // 3368\n            verify: function verify() {                                                                                // 3369\n                var expectations = this.expectations || {};                                                            // 3370\n                var messages = [], met = [];                                                                           // 3371\n                                                                                                                       // 3372\n                each(this.proxies, function (proxy) {                                                                  // 3373\n                    each(expectations[proxy], function (expectation) {                                                 // 3374\n                        if (!expectation.met()) {                                                                      // 3375\n                            push.call(messages, expectation.toString());                                               // 3376\n                        } else {                                                                                       // 3377\n                            push.call(met, expectation.toString());                                                    // 3378\n                        }                                                                                              // 3379\n                    });                                                                                                // 3380\n                });                                                                                                    // 3381\n                                                                                                                       // 3382\n                this.restore();                                                                                        // 3383\n                                                                                                                       // 3384\n                if (messages.length > 0) {                                                                             // 3385\n                    sinon.expectation.fail(messages.concat(met).join(\"\\n\"));                                           // 3386\n                } else if (met.length > 0) {                                                                           // 3387\n                    sinon.expectation.pass(messages.concat(met).join(\"\\n\"));                                           // 3388\n                }                                                                                                      // 3389\n                                                                                                                       // 3390\n                return true;                                                                                           // 3391\n            },                                                                                                         // 3392\n                                                                                                                       // 3393\n            invokeMethod: function invokeMethod(method, thisValue, args) {                                             // 3394\n                var expectations = this.expectations && this.expectations[method];                                     // 3395\n                var length = expectations && expectations.length || 0, i;                                              // 3396\n                                                                                                                       // 3397\n                for (i = 0; i < length; i += 1) {                                                                      // 3398\n                    if (!expectations[i].met() &&                                                                      // 3399\n                        expectations[i].allowsCall(thisValue, args)) {                                                 // 3400\n                        return expectations[i].apply(thisValue, args);                                                 // 3401\n                    }                                                                                                  // 3402\n                }                                                                                                      // 3403\n                                                                                                                       // 3404\n                var messages = [], available, exhausted = 0;                                                           // 3405\n                                                                                                                       // 3406\n                for (i = 0; i < length; i += 1) {                                                                      // 3407\n                    if (expectations[i].allowsCall(thisValue, args)) {                                                 // 3408\n                        available = available || expectations[i];                                                      // 3409\n                    } else {                                                                                           // 3410\n                        exhausted += 1;                                                                                // 3411\n                    }                                                                                                  // 3412\n                    push.call(messages, \"    \" + expectations[i].toString());                                          // 3413\n                }                                                                                                      // 3414\n                                                                                                                       // 3415\n                if (exhausted === 0) {                                                                                 // 3416\n                    return available.apply(thisValue, args);                                                           // 3417\n                }                                                                                                      // 3418\n                                                                                                                       // 3419\n                messages.unshift(\"Unexpected call: \" + sinon.spyCall.toString.call({                                   // 3420\n                    proxy: method,                                                                                     // 3421\n                    args: args                                                                                         // 3422\n                }));                                                                                                   // 3423\n                                                                                                                       // 3424\n                sinon.expectation.fail(messages.join(\"\\n\"));                                                           // 3425\n            }                                                                                                          // 3426\n        });                                                                                                            // 3427\n                                                                                                                       // 3428\n        var times = sinon.timesInWords;                                                                                // 3429\n        var slice = Array.prototype.slice;                                                                             // 3430\n                                                                                                                       // 3431\n        function callCountInWords(callCount) {                                                                         // 3432\n            if (callCount == 0) {                                                                                      // 3433\n                return \"never called\";                                                                                 // 3434\n            } else {                                                                                                   // 3435\n                return \"called \" + times(callCount);                                                                   // 3436\n            }                                                                                                          // 3437\n        }                                                                                                              // 3438\n                                                                                                                       // 3439\n        function expectedCallCountInWords(expectation) {                                                               // 3440\n            var min = expectation.minCalls;                                                                            // 3441\n            var max = expectation.maxCalls;                                                                            // 3442\n                                                                                                                       // 3443\n            if (typeof min == \"number\" && typeof max == \"number\") {                                                    // 3444\n                var str = times(min);                                                                                  // 3445\n                                                                                                                       // 3446\n                if (min != max) {                                                                                      // 3447\n                    str = \"at least \" + str + \" and at most \" + times(max);                                            // 3448\n                }                                                                                                      // 3449\n                                                                                                                       // 3450\n                return str;                                                                                            // 3451\n            }                                                                                                          // 3452\n                                                                                                                       // 3453\n            if (typeof min == \"number\") {                                                                              // 3454\n                return \"at least \" + times(min);                                                                       // 3455\n            }                                                                                                          // 3456\n                                                                                                                       // 3457\n            return \"at most \" + times(max);                                                                            // 3458\n        }                                                                                                              // 3459\n                                                                                                                       // 3460\n        function receivedMinCalls(expectation) {                                                                       // 3461\n            var hasMinLimit = typeof expectation.minCalls == \"number\";                                                 // 3462\n            return !hasMinLimit || expectation.callCount >= expectation.minCalls;                                      // 3463\n        }                                                                                                              // 3464\n                                                                                                                       // 3465\n        function receivedMaxCalls(expectation) {                                                                       // 3466\n            if (typeof expectation.maxCalls != \"number\") {                                                             // 3467\n                return false;                                                                                          // 3468\n            }                                                                                                          // 3469\n                                                                                                                       // 3470\n            return expectation.callCount == expectation.maxCalls;                                                      // 3471\n        }                                                                                                              // 3472\n                                                                                                                       // 3473\n        function verifyMatcher(possibleMatcher, arg) {                                                                 // 3474\n            if (match && match.isMatcher(possibleMatcher)) {                                                           // 3475\n                return possibleMatcher.test(arg);                                                                      // 3476\n            } else {                                                                                                   // 3477\n                return true;                                                                                           // 3478\n            }                                                                                                          // 3479\n        }                                                                                                              // 3480\n                                                                                                                       // 3481\n        sinon.expectation = {                                                                                          // 3482\n            minCalls: 1,                                                                                               // 3483\n            maxCalls: 1,                                                                                               // 3484\n                                                                                                                       // 3485\n            create: function create(methodName) {                                                                      // 3486\n                var expectation = sinon.extend(sinon.stub.create(), sinon.expectation);                                // 3487\n                delete expectation.create;                                                                             // 3488\n                expectation.method = methodName;                                                                       // 3489\n                                                                                                                       // 3490\n                return expectation;                                                                                    // 3491\n            },                                                                                                         // 3492\n                                                                                                                       // 3493\n            invoke: function invoke(func, thisValue, args) {                                                           // 3494\n                this.verifyCallAllowed(thisValue, args);                                                               // 3495\n                                                                                                                       // 3496\n                return sinon.spy.invoke.apply(this, arguments);                                                        // 3497\n            },                                                                                                         // 3498\n                                                                                                                       // 3499\n            atLeast: function atLeast(num) {                                                                           // 3500\n                if (typeof num != \"number\") {                                                                          // 3501\n                    throw new TypeError(\"'\" + num + \"' is not number\");                                                // 3502\n                }                                                                                                      // 3503\n                                                                                                                       // 3504\n                if (!this.limitsSet) {                                                                                 // 3505\n                    this.maxCalls = null;                                                                              // 3506\n                    this.limitsSet = true;                                                                             // 3507\n                }                                                                                                      // 3508\n                                                                                                                       // 3509\n                this.minCalls = num;                                                                                   // 3510\n                                                                                                                       // 3511\n                return this;                                                                                           // 3512\n            },                                                                                                         // 3513\n                                                                                                                       // 3514\n            atMost: function atMost(num) {                                                                             // 3515\n                if (typeof num != \"number\") {                                                                          // 3516\n                    throw new TypeError(\"'\" + num + \"' is not number\");                                                // 3517\n                }                                                                                                      // 3518\n                                                                                                                       // 3519\n                if (!this.limitsSet) {                                                                                 // 3520\n                    this.minCalls = null;                                                                              // 3521\n                    this.limitsSet = true;                                                                             // 3522\n                }                                                                                                      // 3523\n                                                                                                                       // 3524\n                this.maxCalls = num;                                                                                   // 3525\n                                                                                                                       // 3526\n                return this;                                                                                           // 3527\n            },                                                                                                         // 3528\n                                                                                                                       // 3529\n            never: function never() {                                                                                  // 3530\n                return this.exactly(0);                                                                                // 3531\n            },                                                                                                         // 3532\n                                                                                                                       // 3533\n            once: function once() {                                                                                    // 3534\n                return this.exactly(1);                                                                                // 3535\n            },                                                                                                         // 3536\n                                                                                                                       // 3537\n            twice: function twice() {                                                                                  // 3538\n                return this.exactly(2);                                                                                // 3539\n            },                                                                                                         // 3540\n                                                                                                                       // 3541\n            thrice: function thrice() {                                                                                // 3542\n                return this.exactly(3);                                                                                // 3543\n            },                                                                                                         // 3544\n                                                                                                                       // 3545\n            exactly: function exactly(num) {                                                                           // 3546\n                if (typeof num != \"number\") {                                                                          // 3547\n                    throw new TypeError(\"'\" + num + \"' is not a number\");                                              // 3548\n                }                                                                                                      // 3549\n                                                                                                                       // 3550\n                this.atLeast(num);                                                                                     // 3551\n                return this.atMost(num);                                                                               // 3552\n            },                                                                                                         // 3553\n                                                                                                                       // 3554\n            met: function met() {                                                                                      // 3555\n                return !this.failed && receivedMinCalls(this);                                                         // 3556\n            },                                                                                                         // 3557\n                                                                                                                       // 3558\n            verifyCallAllowed: function verifyCallAllowed(thisValue, args) {                                           // 3559\n                if (receivedMaxCalls(this)) {                                                                          // 3560\n                    this.failed = true;                                                                                // 3561\n                    sinon.expectation.fail(this.method + \" already called \" + times(this.maxCalls));                   // 3562\n                }                                                                                                      // 3563\n                                                                                                                       // 3564\n                if (\"expectedThis\" in this && this.expectedThis !== thisValue) {                                       // 3565\n                    sinon.expectation.fail(this.method + \" called with \" + thisValue + \" as thisValue, expected \" +    // 3566\n                        this.expectedThis);                                                                            // 3567\n                }                                                                                                      // 3568\n                                                                                                                       // 3569\n                if (!(\"expectedArguments\" in this)) {                                                                  // 3570\n                    return;                                                                                            // 3571\n                }                                                                                                      // 3572\n                                                                                                                       // 3573\n                if (!args) {                                                                                           // 3574\n                    sinon.expectation.fail(this.method + \" received no arguments, expected \" +                         // 3575\n                        sinon.format(this.expectedArguments));                                                         // 3576\n                }                                                                                                      // 3577\n                                                                                                                       // 3578\n                if (args.length < this.expectedArguments.length) {                                                     // 3579\n                    sinon.expectation.fail(this.method + \" received too few arguments (\" + sinon.format(args) +        // 3580\n                        \"), expected \" + sinon.format(this.expectedArguments));                                        // 3581\n                }                                                                                                      // 3582\n                                                                                                                       // 3583\n                if (this.expectsExactArgCount &&                                                                       // 3584\n                    args.length != this.expectedArguments.length) {                                                    // 3585\n                    sinon.expectation.fail(this.method + \" received too many arguments (\" + sinon.format(args) +       // 3586\n                        \"), expected \" + sinon.format(this.expectedArguments));                                        // 3587\n                }                                                                                                      // 3588\n                                                                                                                       // 3589\n                for (var i = 0, l = this.expectedArguments.length; i < l; i += 1) {                                    // 3590\n                                                                                                                       // 3591\n                    if (!verifyMatcher(this.expectedArguments[i], args[i])) {                                          // 3592\n                        sinon.expectation.fail(this.method + \" received wrong arguments \" + sinon.format(args) +       // 3593\n                            \", didn't match \" + this.expectedArguments.toString());                                    // 3594\n                    }                                                                                                  // 3595\n                                                                                                                       // 3596\n                    if (!sinon.deepEqual(this.expectedArguments[i], args[i])) {                                        // 3597\n                        sinon.expectation.fail(this.method + \" received wrong arguments \" + sinon.format(args) +       // 3598\n                            \", expected \" + sinon.format(this.expectedArguments));                                     // 3599\n                    }                                                                                                  // 3600\n                }                                                                                                      // 3601\n            },                                                                                                         // 3602\n                                                                                                                       // 3603\n            allowsCall: function allowsCall(thisValue, args) {                                                         // 3604\n                if (this.met() && receivedMaxCalls(this)) {                                                            // 3605\n                    return false;                                                                                      // 3606\n                }                                                                                                      // 3607\n                                                                                                                       // 3608\n                if (\"expectedThis\" in this && this.expectedThis !== thisValue) {                                       // 3609\n                    return false;                                                                                      // 3610\n                }                                                                                                      // 3611\n                                                                                                                       // 3612\n                if (!(\"expectedArguments\" in this)) {                                                                  // 3613\n                    return true;                                                                                       // 3614\n                }                                                                                                      // 3615\n                                                                                                                       // 3616\n                args = args || [];                                                                                     // 3617\n                                                                                                                       // 3618\n                if (args.length < this.expectedArguments.length) {                                                     // 3619\n                    return false;                                                                                      // 3620\n                }                                                                                                      // 3621\n                                                                                                                       // 3622\n                if (this.expectsExactArgCount &&                                                                       // 3623\n                    args.length != this.expectedArguments.length) {                                                    // 3624\n                    return false;                                                                                      // 3625\n                }                                                                                                      // 3626\n                                                                                                                       // 3627\n                for (var i = 0, l = this.expectedArguments.length; i < l; i += 1) {                                    // 3628\n                    if (!verifyMatcher(this.expectedArguments[i], args[i])) {                                          // 3629\n                        return false;                                                                                  // 3630\n                    }                                                                                                  // 3631\n                                                                                                                       // 3632\n                    if (!sinon.deepEqual(this.expectedArguments[i], args[i])) {                                        // 3633\n                        return false;                                                                                  // 3634\n                    }                                                                                                  // 3635\n                }                                                                                                      // 3636\n                                                                                                                       // 3637\n                return true;                                                                                           // 3638\n            },                                                                                                         // 3639\n                                                                                                                       // 3640\n            withArgs: function withArgs() {                                                                            // 3641\n                this.expectedArguments = slice.call(arguments);                                                        // 3642\n                return this;                                                                                           // 3643\n            },                                                                                                         // 3644\n                                                                                                                       // 3645\n            withExactArgs: function withExactArgs() {                                                                  // 3646\n                this.withArgs.apply(this, arguments);                                                                  // 3647\n                this.expectsExactArgCount = true;                                                                      // 3648\n                return this;                                                                                           // 3649\n            },                                                                                                         // 3650\n                                                                                                                       // 3651\n            on: function on(thisValue) {                                                                               // 3652\n                this.expectedThis = thisValue;                                                                         // 3653\n                return this;                                                                                           // 3654\n            },                                                                                                         // 3655\n                                                                                                                       // 3656\n            toString: function () {                                                                                    // 3657\n                var args = (this.expectedArguments || []).slice();                                                     // 3658\n                                                                                                                       // 3659\n                if (!this.expectsExactArgCount) {                                                                      // 3660\n                    push.call(args, \"[...]\");                                                                          // 3661\n                }                                                                                                      // 3662\n                                                                                                                       // 3663\n                var callStr = sinon.spyCall.toString.call({                                                            // 3664\n                    proxy: this.method || \"anonymous mock expectation\",                                                // 3665\n                    args: args                                                                                         // 3666\n                });                                                                                                    // 3667\n                                                                                                                       // 3668\n                var message = callStr.replace(\", [...\", \"[, ...\") + \" \" +                                              // 3669\n                    expectedCallCountInWords(this);                                                                    // 3670\n                                                                                                                       // 3671\n                if (this.met()) {                                                                                      // 3672\n                    return \"Expectation met: \" + message;                                                              // 3673\n                }                                                                                                      // 3674\n                                                                                                                       // 3675\n                return \"Expected \" + message + \" (\" +                                                                  // 3676\n                    callCountInWords(this.callCount) + \")\";                                                            // 3677\n            },                                                                                                         // 3678\n                                                                                                                       // 3679\n            verify: function verify() {                                                                                // 3680\n                if (!this.met()) {                                                                                     // 3681\n                    sinon.expectation.fail(this.toString());                                                           // 3682\n                } else {                                                                                               // 3683\n                    sinon.expectation.pass(this.toString());                                                           // 3684\n                }                                                                                                      // 3685\n                                                                                                                       // 3686\n                return true;                                                                                           // 3687\n            },                                                                                                         // 3688\n                                                                                                                       // 3689\n            pass: function pass(message) {                                                                             // 3690\n                sinon.assert.pass(message);                                                                            // 3691\n            },                                                                                                         // 3692\n                                                                                                                       // 3693\n            fail: function fail(message) {                                                                             // 3694\n                var exception = new Error(message);                                                                    // 3695\n                exception.name = \"ExpectationError\";                                                                   // 3696\n                                                                                                                       // 3697\n                throw exception;                                                                                       // 3698\n            }                                                                                                          // 3699\n        };                                                                                                             // 3700\n                                                                                                                       // 3701\n        sinon.mock = mock;                                                                                             // 3702\n        return mock;                                                                                                   // 3703\n    }                                                                                                                  // 3704\n                                                                                                                       // 3705\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 3706\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 3707\n                                                                                                                       // 3708\n    function loadDependencies(require, exports, module) {                                                              // 3709\n        var sinon = require(\"./util/core\");                                                                            // 3710\n        require(\"./times_in_words\");                                                                                   // 3711\n        require(\"./call\");                                                                                             // 3712\n        require(\"./extend\");                                                                                           // 3713\n        require(\"./match\");                                                                                            // 3714\n        require(\"./spy\");                                                                                              // 3715\n        require(\"./stub\");                                                                                             // 3716\n        require(\"./format\");                                                                                           // 3717\n                                                                                                                       // 3718\n        module.exports = makeApi(sinon);                                                                               // 3719\n    }                                                                                                                  // 3720\n                                                                                                                       // 3721\n    if (isAMD) {                                                                                                       // 3722\n        define(loadDependencies);                                                                                      // 3723\n    } else if (isNode) {                                                                                               // 3724\n        loadDependencies(require, module.exports, module);                                                             // 3725\n    } else if (!sinon) {                                                                                               // 3726\n        return;                                                                                                        // 3727\n    } else {                                                                                                           // 3728\n        makeApi(sinon);                                                                                                // 3729\n    }                                                                                                                  // 3730\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 3731\n                                                                                                                       // 3732\n/**                                                                                                                    // 3733\n * @depend util/core.js                                                                                                // 3734\n * @depend spy.js                                                                                                      // 3735\n * @depend stub.js                                                                                                     // 3736\n * @depend mock.js                                                                                                     // 3737\n */                                                                                                                    // 3738\n/**                                                                                                                    // 3739\n * Collections of stubs, spies and mocks.                                                                              // 3740\n *                                                                                                                     // 3741\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 3742\n * @license BSD                                                                                                        // 3743\n *                                                                                                                     // 3744\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 3745\n */                                                                                                                    // 3746\n                                                                                                                       // 3747\n(function (sinon) {                                                                                                    // 3748\n    var push = [].push;                                                                                                // 3749\n    var hasOwnProperty = Object.prototype.hasOwnProperty;                                                              // 3750\n                                                                                                                       // 3751\n    function getFakes(fakeCollection) {                                                                                // 3752\n        if (!fakeCollection.fakes) {                                                                                   // 3753\n            fakeCollection.fakes = [];                                                                                 // 3754\n        }                                                                                                              // 3755\n                                                                                                                       // 3756\n        return fakeCollection.fakes;                                                                                   // 3757\n    }                                                                                                                  // 3758\n                                                                                                                       // 3759\n    function each(fakeCollection, method) {                                                                            // 3760\n        var fakes = getFakes(fakeCollection);                                                                          // 3761\n                                                                                                                       // 3762\n        for (var i = 0, l = fakes.length; i < l; i += 1) {                                                             // 3763\n            if (typeof fakes[i][method] == \"function\") {                                                               // 3764\n                fakes[i][method]();                                                                                    // 3765\n            }                                                                                                          // 3766\n        }                                                                                                              // 3767\n    }                                                                                                                  // 3768\n                                                                                                                       // 3769\n    function compact(fakeCollection) {                                                                                 // 3770\n        var fakes = getFakes(fakeCollection);                                                                          // 3771\n        var i = 0;                                                                                                     // 3772\n        while (i < fakes.length) {                                                                                     // 3773\n            fakes.splice(i, 1);                                                                                        // 3774\n        }                                                                                                              // 3775\n    }                                                                                                                  // 3776\n                                                                                                                       // 3777\n    function makeApi(sinon) {                                                                                          // 3778\n        var collection = {                                                                                             // 3779\n            verify: function resolve() {                                                                               // 3780\n                each(this, \"verify\");                                                                                  // 3781\n            },                                                                                                         // 3782\n                                                                                                                       // 3783\n            restore: function restore() {                                                                              // 3784\n                each(this, \"restore\");                                                                                 // 3785\n                compact(this);                                                                                         // 3786\n            },                                                                                                         // 3787\n                                                                                                                       // 3788\n            reset: function restore() {                                                                                // 3789\n                each(this, \"reset\");                                                                                   // 3790\n            },                                                                                                         // 3791\n                                                                                                                       // 3792\n            verifyAndRestore: function verifyAndRestore() {                                                            // 3793\n                var exception;                                                                                         // 3794\n                                                                                                                       // 3795\n                try {                                                                                                  // 3796\n                    this.verify();                                                                                     // 3797\n                } catch (e) {                                                                                          // 3798\n                    exception = e;                                                                                     // 3799\n                }                                                                                                      // 3800\n                                                                                                                       // 3801\n                this.restore();                                                                                        // 3802\n                                                                                                                       // 3803\n                if (exception) {                                                                                       // 3804\n                    throw exception;                                                                                   // 3805\n                }                                                                                                      // 3806\n            },                                                                                                         // 3807\n                                                                                                                       // 3808\n            add: function add(fake) {                                                                                  // 3809\n                push.call(getFakes(this), fake);                                                                       // 3810\n                return fake;                                                                                           // 3811\n            },                                                                                                         // 3812\n                                                                                                                       // 3813\n            spy: function spy() {                                                                                      // 3814\n                return this.add(sinon.spy.apply(sinon, arguments));                                                    // 3815\n            },                                                                                                         // 3816\n                                                                                                                       // 3817\n            stub: function stub(object, property, value) {                                                             // 3818\n                if (property) {                                                                                        // 3819\n                    var original = object[property];                                                                   // 3820\n                                                                                                                       // 3821\n                    if (typeof original != \"function\") {                                                               // 3822\n                        if (!hasOwnProperty.call(object, property)) {                                                  // 3823\n                            throw new TypeError(\"Cannot stub non-existent own property \" + property);                  // 3824\n                        }                                                                                              // 3825\n                                                                                                                       // 3826\n                        object[property] = value;                                                                      // 3827\n                                                                                                                       // 3828\n                        return this.add({                                                                              // 3829\n                            restore: function () {                                                                     // 3830\n                                object[property] = original;                                                           // 3831\n                            }                                                                                          // 3832\n                        });                                                                                            // 3833\n                    }                                                                                                  // 3834\n                }                                                                                                      // 3835\n                if (!property && !!object && typeof object == \"object\") {                                              // 3836\n                    var stubbedObj = sinon.stub.apply(sinon, arguments);                                               // 3837\n                                                                                                                       // 3838\n                    for (var prop in stubbedObj) {                                                                     // 3839\n                        if (typeof stubbedObj[prop] === \"function\") {                                                  // 3840\n                            this.add(stubbedObj[prop]);                                                                // 3841\n                        }                                                                                              // 3842\n                    }                                                                                                  // 3843\n                                                                                                                       // 3844\n                    return stubbedObj;                                                                                 // 3845\n                }                                                                                                      // 3846\n                                                                                                                       // 3847\n                return this.add(sinon.stub.apply(sinon, arguments));                                                   // 3848\n            },                                                                                                         // 3849\n                                                                                                                       // 3850\n            mock: function mock() {                                                                                    // 3851\n                return this.add(sinon.mock.apply(sinon, arguments));                                                   // 3852\n            },                                                                                                         // 3853\n                                                                                                                       // 3854\n            inject: function inject(obj) {                                                                             // 3855\n                var col = this;                                                                                        // 3856\n                                                                                                                       // 3857\n                obj.spy = function () {                                                                                // 3858\n                    return col.spy.apply(col, arguments);                                                              // 3859\n                };                                                                                                     // 3860\n                                                                                                                       // 3861\n                obj.stub = function () {                                                                               // 3862\n                    return col.stub.apply(col, arguments);                                                             // 3863\n                };                                                                                                     // 3864\n                                                                                                                       // 3865\n                obj.mock = function () {                                                                               // 3866\n                    return col.mock.apply(col, arguments);                                                             // 3867\n                };                                                                                                     // 3868\n                                                                                                                       // 3869\n                return obj;                                                                                            // 3870\n            }                                                                                                          // 3871\n        };                                                                                                             // 3872\n                                                                                                                       // 3873\n        sinon.collection = collection;                                                                                 // 3874\n        return collection;                                                                                             // 3875\n    }                                                                                                                  // 3876\n                                                                                                                       // 3877\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 3878\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 3879\n                                                                                                                       // 3880\n    function loadDependencies(require, exports, module) {                                                              // 3881\n        var sinon = require(\"./util/core\");                                                                            // 3882\n        require(\"./mock\");                                                                                             // 3883\n        require(\"./spy\");                                                                                              // 3884\n        require(\"./stub\");                                                                                             // 3885\n        module.exports = makeApi(sinon);                                                                               // 3886\n    }                                                                                                                  // 3887\n                                                                                                                       // 3888\n    if (isAMD) {                                                                                                       // 3889\n        define(loadDependencies);                                                                                      // 3890\n    } else if (isNode) {                                                                                               // 3891\n        loadDependencies(require, module.exports, module);                                                             // 3892\n    } else if (!sinon) {                                                                                               // 3893\n        return;                                                                                                        // 3894\n    } else {                                                                                                           // 3895\n        makeApi(sinon);                                                                                                // 3896\n    }                                                                                                                  // 3897\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 3898\n                                                                                                                       // 3899\n/*global lolex */                                                                                                      // 3900\n                                                                                                                       // 3901\n/**                                                                                                                    // 3902\n * Fake timer API                                                                                                      // 3903\n * setTimeout                                                                                                          // 3904\n * setInterval                                                                                                         // 3905\n * clearTimeout                                                                                                        // 3906\n * clearInterval                                                                                                       // 3907\n * tick                                                                                                                // 3908\n * reset                                                                                                               // 3909\n * Date                                                                                                                // 3910\n *                                                                                                                     // 3911\n * Inspired by jsUnitMockTimeOut from JsUnit                                                                           // 3912\n *                                                                                                                     // 3913\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 3914\n * @license BSD                                                                                                        // 3915\n *                                                                                                                     // 3916\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 3917\n */                                                                                                                    // 3918\n                                                                                                                       // 3919\nif (typeof sinon == \"undefined\") {                                                                                     // 3920\n    var sinon = {};                                                                                                    // 3921\n}                                                                                                                      // 3922\n                                                                                                                       // 3923\n(function (global) {                                                                                                   // 3924\n    function makeApi(sinon, lol) {                                                                                     // 3925\n        var llx = typeof lolex !== \"undefined\" ? lolex : lol;                                                          // 3926\n                                                                                                                       // 3927\n        sinon.useFakeTimers = function () {                                                                            // 3928\n            var now, methods = Array.prototype.slice.call(arguments);                                                  // 3929\n                                                                                                                       // 3930\n            if (typeof methods[0] === \"string\") {                                                                      // 3931\n                now = 0;                                                                                               // 3932\n            } else {                                                                                                   // 3933\n                now = methods.shift();                                                                                 // 3934\n            }                                                                                                          // 3935\n                                                                                                                       // 3936\n            var clock = llx.install(now || 0, methods);                                                                // 3937\n            clock.restore = clock.uninstall;                                                                           // 3938\n            return clock;                                                                                              // 3939\n        };                                                                                                             // 3940\n                                                                                                                       // 3941\n        sinon.clock = {                                                                                                // 3942\n            create: function (now) {                                                                                   // 3943\n                return llx.createClock(now);                                                                           // 3944\n            }                                                                                                          // 3945\n        };                                                                                                             // 3946\n                                                                                                                       // 3947\n        sinon.timers = {                                                                                               // 3948\n            setTimeout: setTimeout,                                                                                    // 3949\n            clearTimeout: clearTimeout,                                                                                // 3950\n            setImmediate: (typeof setImmediate !== \"undefined\" ? setImmediate : undefined),                            // 3951\n            clearImmediate: (typeof clearImmediate !== \"undefined\" ? clearImmediate : undefined),                      // 3952\n            setInterval: setInterval,                                                                                  // 3953\n            clearInterval: clearInterval,                                                                              // 3954\n            Date: Date                                                                                                 // 3955\n        };                                                                                                             // 3956\n    }                                                                                                                  // 3957\n                                                                                                                       // 3958\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 3959\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 3960\n                                                                                                                       // 3961\n    function loadDependencies(require, epxorts, module, lolex) {                                                       // 3962\n        var sinon = require(\"./core\");                                                                                 // 3963\n        makeApi(sinon, lolex);                                                                                         // 3964\n        module.exports = sinon;                                                                                        // 3965\n    }                                                                                                                  // 3966\n                                                                                                                       // 3967\n    if (isAMD) {                                                                                                       // 3968\n        define(loadDependencies);                                                                                      // 3969\n    } else if (isNode) {                                                                                               // 3970\n        loadDependencies(require, module.exports, module, require(\"lolex\"));                                           // 3971\n    } else {                                                                                                           // 3972\n        makeApi(sinon);                                                                                                // 3973\n    }                                                                                                                  // 3974\n}(typeof global != \"undefined\" && typeof global !== \"function\" ? global : this));                                      // 3975\n                                                                                                                       // 3976\n/**                                                                                                                    // 3977\n * Minimal Event interface implementation                                                                              // 3978\n *                                                                                                                     // 3979\n * Original implementation by Sven Fuchs: https://gist.github.com/995028                                               // 3980\n * Modifications and tests by Christian Johansen.                                                                      // 3981\n *                                                                                                                     // 3982\n * @author Sven Fuchs (svenfuchs@artweb-design.de)                                                                     // 3983\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 3984\n * @license BSD                                                                                                        // 3985\n *                                                                                                                     // 3986\n * Copyright (c) 2011 Sven Fuchs, Christian Johansen                                                                   // 3987\n */                                                                                                                    // 3988\n                                                                                                                       // 3989\nif (typeof sinon == \"undefined\") {                                                                                     // 3990\n    this.sinon = {};                                                                                                   // 3991\n}                                                                                                                      // 3992\n                                                                                                                       // 3993\n(function () {                                                                                                         // 3994\n    var push = [].push;                                                                                                // 3995\n                                                                                                                       // 3996\n    function makeApi(sinon) {                                                                                          // 3997\n        sinon.Event = function Event(type, bubbles, cancelable, target) {                                              // 3998\n            this.initEvent(type, bubbles, cancelable, target);                                                         // 3999\n        };                                                                                                             // 4000\n                                                                                                                       // 4001\n        sinon.Event.prototype = {                                                                                      // 4002\n            initEvent: function (type, bubbles, cancelable, target) {                                                  // 4003\n                this.type = type;                                                                                      // 4004\n                this.bubbles = bubbles;                                                                                // 4005\n                this.cancelable = cancelable;                                                                          // 4006\n                this.target = target;                                                                                  // 4007\n            },                                                                                                         // 4008\n                                                                                                                       // 4009\n            stopPropagation: function () {},                                                                           // 4010\n                                                                                                                       // 4011\n            preventDefault: function () {                                                                              // 4012\n                this.defaultPrevented = true;                                                                          // 4013\n            }                                                                                                          // 4014\n        };                                                                                                             // 4015\n                                                                                                                       // 4016\n        sinon.ProgressEvent = function ProgressEvent(type, progressEventRaw, target) {                                 // 4017\n            this.initEvent(type, false, false, target);                                                                // 4018\n            this.loaded = progressEventRaw.loaded || null;                                                             // 4019\n            this.total = progressEventRaw.total || null;                                                               // 4020\n            this.lengthComputable = !!progressEventRaw.total;                                                          // 4021\n        };                                                                                                             // 4022\n                                                                                                                       // 4023\n        sinon.ProgressEvent.prototype = new sinon.Event();                                                             // 4024\n                                                                                                                       // 4025\n        sinon.ProgressEvent.prototype.constructor =  sinon.ProgressEvent;                                              // 4026\n                                                                                                                       // 4027\n        sinon.CustomEvent = function CustomEvent(type, customData, target) {                                           // 4028\n            this.initEvent(type, false, false, target);                                                                // 4029\n            this.detail = customData.detail || null;                                                                   // 4030\n        };                                                                                                             // 4031\n                                                                                                                       // 4032\n        sinon.CustomEvent.prototype = new sinon.Event();                                                               // 4033\n                                                                                                                       // 4034\n        sinon.CustomEvent.prototype.constructor =  sinon.CustomEvent;                                                  // 4035\n                                                                                                                       // 4036\n        sinon.EventTarget = {                                                                                          // 4037\n            addEventListener: function addEventListener(event, listener) {                                             // 4038\n                this.eventListeners = this.eventListeners || {};                                                       // 4039\n                this.eventListeners[event] = this.eventListeners[event] || [];                                         // 4040\n                push.call(this.eventListeners[event], listener);                                                       // 4041\n            },                                                                                                         // 4042\n                                                                                                                       // 4043\n            removeEventListener: function removeEventListener(event, listener) {                                       // 4044\n                var listeners = this.eventListeners && this.eventListeners[event] || [];                               // 4045\n                                                                                                                       // 4046\n                for (var i = 0, l = listeners.length; i < l; ++i) {                                                    // 4047\n                    if (listeners[i] == listener) {                                                                    // 4048\n                        return listeners.splice(i, 1);                                                                 // 4049\n                    }                                                                                                  // 4050\n                }                                                                                                      // 4051\n            },                                                                                                         // 4052\n                                                                                                                       // 4053\n            dispatchEvent: function dispatchEvent(event) {                                                             // 4054\n                var type = event.type;                                                                                 // 4055\n                var listeners = this.eventListeners && this.eventListeners[type] || [];                                // 4056\n                                                                                                                       // 4057\n                for (var i = 0; i < listeners.length; i++) {                                                           // 4058\n                    if (typeof listeners[i] == \"function\") {                                                           // 4059\n                        listeners[i].call(this, event);                                                                // 4060\n                    } else {                                                                                           // 4061\n                        listeners[i].handleEvent(event);                                                               // 4062\n                    }                                                                                                  // 4063\n                }                                                                                                      // 4064\n                                                                                                                       // 4065\n                return !!event.defaultPrevented;                                                                       // 4066\n            }                                                                                                          // 4067\n        };                                                                                                             // 4068\n    }                                                                                                                  // 4069\n                                                                                                                       // 4070\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 4071\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 4072\n                                                                                                                       // 4073\n    function loadDependencies(require) {                                                                               // 4074\n        var sinon = require(\"./core\");                                                                                 // 4075\n        makeApi(sinon);                                                                                                // 4076\n    }                                                                                                                  // 4077\n                                                                                                                       // 4078\n    if (isAMD) {                                                                                                       // 4079\n        define(loadDependencies);                                                                                      // 4080\n    } else if (isNode) {                                                                                               // 4081\n        loadDependencies(require);                                                                                     // 4082\n    } else {                                                                                                           // 4083\n        makeApi(sinon);                                                                                                // 4084\n    }                                                                                                                  // 4085\n}());                                                                                                                  // 4086\n                                                                                                                       // 4087\n/**                                                                                                                    // 4088\n * @depend util/core.js                                                                                                // 4089\n */                                                                                                                    // 4090\n/**                                                                                                                    // 4091\n * Logs errors                                                                                                         // 4092\n *                                                                                                                     // 4093\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 4094\n * @license BSD                                                                                                        // 4095\n *                                                                                                                     // 4096\n * Copyright (c) 2010-2014 Christian Johansen                                                                          // 4097\n */                                                                                                                    // 4098\n                                                                                                                       // 4099\n(function (sinon) {                                                                                                    // 4100\n    // cache a reference to setTimeout, so that our reference won't be stubbed out                                     // 4101\n    // when using fake timers and errors will still get logged                                                         // 4102\n    // https://github.com/cjohansen/Sinon.JS/issues/381                                                                // 4103\n    var realSetTimeout = setTimeout;                                                                                   // 4104\n                                                                                                                       // 4105\n    function makeApi(sinon) {                                                                                          // 4106\n                                                                                                                       // 4107\n        function log() {}                                                                                              // 4108\n                                                                                                                       // 4109\n        function logError(label, err) {                                                                                // 4110\n            var msg = label + \" threw exception: \";                                                                    // 4111\n                                                                                                                       // 4112\n            sinon.log(msg + \"[\" + err.name + \"] \" + err.message);                                                      // 4113\n                                                                                                                       // 4114\n            if (err.stack) {                                                                                           // 4115\n                sinon.log(err.stack);                                                                                  // 4116\n            }                                                                                                          // 4117\n                                                                                                                       // 4118\n            logError.setTimeout(function () {                                                                          // 4119\n                err.message = msg + err.message;                                                                       // 4120\n                throw err;                                                                                             // 4121\n            }, 0);                                                                                                     // 4122\n        };                                                                                                             // 4123\n                                                                                                                       // 4124\n        // wrap realSetTimeout with something we can stub in tests                                                     // 4125\n        logError.setTimeout = function (func, timeout) {                                                               // 4126\n            realSetTimeout(func, timeout);                                                                             // 4127\n        }                                                                                                              // 4128\n                                                                                                                       // 4129\n        var exports = {};                                                                                              // 4130\n        exports.log = sinon.log = log;                                                                                 // 4131\n        exports.logError = sinon.logError = logError;                                                                  // 4132\n                                                                                                                       // 4133\n        return exports;                                                                                                // 4134\n    }                                                                                                                  // 4135\n                                                                                                                       // 4136\n    function loadDependencies(require, exports, module) {                                                              // 4137\n        var sinon = require(\"./util/core\");                                                                            // 4138\n        module.exports = makeApi(sinon);                                                                               // 4139\n    }                                                                                                                  // 4140\n                                                                                                                       // 4141\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 4142\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 4143\n                                                                                                                       // 4144\n    if (isAMD) {                                                                                                       // 4145\n        define(loadDependencies);                                                                                      // 4146\n    } else if (isNode) {                                                                                               // 4147\n        loadDependencies(require, module.exports, module);                                                             // 4148\n    } else if (!sinon) {                                                                                               // 4149\n        return;                                                                                                        // 4150\n    } else {                                                                                                           // 4151\n        makeApi(sinon);                                                                                                // 4152\n    }                                                                                                                  // 4153\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 4154\n                                                                                                                       // 4155\n/**                                                                                                                    // 4156\n * @depend core.js                                                                                                     // 4157\n * @depend ../extend.js                                                                                                // 4158\n * @depend event.js                                                                                                    // 4159\n * @depend ../log_error.js                                                                                             // 4160\n */                                                                                                                    // 4161\n/**                                                                                                                    // 4162\n * Fake XDomainRequest object                                                                                          // 4163\n */                                                                                                                    // 4164\n                                                                                                                       // 4165\nif (typeof sinon == \"undefined\") {                                                                                     // 4166\n    this.sinon = {};                                                                                                   // 4167\n}                                                                                                                      // 4168\n                                                                                                                       // 4169\n// wrapper for global                                                                                                  // 4170\n(function (global) {                                                                                                   // 4171\n    var xdr = { XDomainRequest: global.XDomainRequest };                                                               // 4172\n    xdr.GlobalXDomainRequest = global.XDomainRequest;                                                                  // 4173\n    xdr.supportsXDR = typeof xdr.GlobalXDomainRequest != \"undefined\";                                                  // 4174\n    xdr.workingXDR = xdr.supportsXDR ? xdr.GlobalXDomainRequest :  false;                                              // 4175\n                                                                                                                       // 4176\n    function makeApi(sinon) {                                                                                          // 4177\n        sinon.xdr = xdr;                                                                                               // 4178\n                                                                                                                       // 4179\n        function FakeXDomainRequest() {                                                                                // 4180\n            this.readyState = FakeXDomainRequest.UNSENT;                                                               // 4181\n            this.requestBody = null;                                                                                   // 4182\n            this.requestHeaders = {};                                                                                  // 4183\n            this.status = 0;                                                                                           // 4184\n            this.timeout = null;                                                                                       // 4185\n                                                                                                                       // 4186\n            if (typeof FakeXDomainRequest.onCreate == \"function\") {                                                    // 4187\n                FakeXDomainRequest.onCreate(this);                                                                     // 4188\n            }                                                                                                          // 4189\n        }                                                                                                              // 4190\n                                                                                                                       // 4191\n        function verifyState(xdr) {                                                                                    // 4192\n            if (xdr.readyState !== FakeXDomainRequest.OPENED) {                                                        // 4193\n                throw new Error(\"INVALID_STATE_ERR\");                                                                  // 4194\n            }                                                                                                          // 4195\n                                                                                                                       // 4196\n            if (xdr.sendFlag) {                                                                                        // 4197\n                throw new Error(\"INVALID_STATE_ERR\");                                                                  // 4198\n            }                                                                                                          // 4199\n        }                                                                                                              // 4200\n                                                                                                                       // 4201\n        function verifyRequestSent(xdr) {                                                                              // 4202\n            if (xdr.readyState == FakeXDomainRequest.UNSENT) {                                                         // 4203\n                throw new Error(\"Request not sent\");                                                                   // 4204\n            }                                                                                                          // 4205\n            if (xdr.readyState == FakeXDomainRequest.DONE) {                                                           // 4206\n                throw new Error(\"Request done\");                                                                       // 4207\n            }                                                                                                          // 4208\n        }                                                                                                              // 4209\n                                                                                                                       // 4210\n        function verifyResponseBodyType(body) {                                                                        // 4211\n            if (typeof body != \"string\") {                                                                             // 4212\n                var error = new Error(\"Attempted to respond to fake XDomainRequest with \" +                            // 4213\n                                    body + \", which is not a string.\");                                                // 4214\n                error.name = \"InvalidBodyException\";                                                                   // 4215\n                throw error;                                                                                           // 4216\n            }                                                                                                          // 4217\n        }                                                                                                              // 4218\n                                                                                                                       // 4219\n        sinon.extend(FakeXDomainRequest.prototype, sinon.EventTarget, {                                                // 4220\n            open: function open(method, url) {                                                                         // 4221\n                this.method = method;                                                                                  // 4222\n                this.url = url;                                                                                        // 4223\n                                                                                                                       // 4224\n                this.responseText = null;                                                                              // 4225\n                this.sendFlag = false;                                                                                 // 4226\n                                                                                                                       // 4227\n                this.readyStateChange(FakeXDomainRequest.OPENED);                                                      // 4228\n            },                                                                                                         // 4229\n                                                                                                                       // 4230\n            readyStateChange: function readyStateChange(state) {                                                       // 4231\n                this.readyState = state;                                                                               // 4232\n                var eventName = \"\";                                                                                    // 4233\n                switch (this.readyState) {                                                                             // 4234\n                case FakeXDomainRequest.UNSENT:                                                                        // 4235\n                    break;                                                                                             // 4236\n                case FakeXDomainRequest.OPENED:                                                                        // 4237\n                    break;                                                                                             // 4238\n                case FakeXDomainRequest.LOADING:                                                                       // 4239\n                    if (this.sendFlag) {                                                                               // 4240\n                        //raise the progress event                                                                     // 4241\n                        eventName = \"onprogress\";                                                                      // 4242\n                    }                                                                                                  // 4243\n                    break;                                                                                             // 4244\n                case FakeXDomainRequest.DONE:                                                                          // 4245\n                    if (this.isTimeout) {                                                                              // 4246\n                        eventName = \"ontimeout\"                                                                        // 4247\n                    } else if (this.errorFlag || (this.status < 200 || this.status > 299)) {                           // 4248\n                        eventName = \"onerror\";                                                                         // 4249\n                    } else {                                                                                           // 4250\n                        eventName = \"onload\"                                                                           // 4251\n                    }                                                                                                  // 4252\n                    break;                                                                                             // 4253\n                }                                                                                                      // 4254\n                                                                                                                       // 4255\n                // raising event (if defined)                                                                          // 4256\n                if (eventName) {                                                                                       // 4257\n                    if (typeof this[eventName] == \"function\") {                                                        // 4258\n                        try {                                                                                          // 4259\n                            this[eventName]();                                                                         // 4260\n                        } catch (e) {                                                                                  // 4261\n                            sinon.logError(\"Fake XHR \" + eventName + \" handler\", e);                                   // 4262\n                        }                                                                                              // 4263\n                    }                                                                                                  // 4264\n                }                                                                                                      // 4265\n            },                                                                                                         // 4266\n                                                                                                                       // 4267\n            send: function send(data) {                                                                                // 4268\n                verifyState(this);                                                                                     // 4269\n                                                                                                                       // 4270\n                if (!/^(get|head)$/i.test(this.method)) {                                                              // 4271\n                    this.requestBody = data;                                                                           // 4272\n                }                                                                                                      // 4273\n                this.requestHeaders[\"Content-Type\"] = \"text/plain;charset=utf-8\";                                      // 4274\n                                                                                                                       // 4275\n                this.errorFlag = false;                                                                                // 4276\n                this.sendFlag = true;                                                                                  // 4277\n                this.readyStateChange(FakeXDomainRequest.OPENED);                                                      // 4278\n                                                                                                                       // 4279\n                if (typeof this.onSend == \"function\") {                                                                // 4280\n                    this.onSend(this);                                                                                 // 4281\n                }                                                                                                      // 4282\n            },                                                                                                         // 4283\n                                                                                                                       // 4284\n            abort: function abort() {                                                                                  // 4285\n                this.aborted = true;                                                                                   // 4286\n                this.responseText = null;                                                                              // 4287\n                this.errorFlag = true;                                                                                 // 4288\n                                                                                                                       // 4289\n                if (this.readyState > sinon.FakeXDomainRequest.UNSENT && this.sendFlag) {                              // 4290\n                    this.readyStateChange(sinon.FakeXDomainRequest.DONE);                                              // 4291\n                    this.sendFlag = false;                                                                             // 4292\n                }                                                                                                      // 4293\n            },                                                                                                         // 4294\n                                                                                                                       // 4295\n            setResponseBody: function setResponseBody(body) {                                                          // 4296\n                verifyRequestSent(this);                                                                               // 4297\n                verifyResponseBodyType(body);                                                                          // 4298\n                                                                                                                       // 4299\n                var chunkSize = this.chunkSize || 10;                                                                  // 4300\n                var index = 0;                                                                                         // 4301\n                this.responseText = \"\";                                                                                // 4302\n                                                                                                                       // 4303\n                do {                                                                                                   // 4304\n                    this.readyStateChange(FakeXDomainRequest.LOADING);                                                 // 4305\n                    this.responseText += body.substring(index, index + chunkSize);                                     // 4306\n                    index += chunkSize;                                                                                // 4307\n                } while (index < body.length);                                                                         // 4308\n                                                                                                                       // 4309\n                this.readyStateChange(FakeXDomainRequest.DONE);                                                        // 4310\n            },                                                                                                         // 4311\n                                                                                                                       // 4312\n            respond: function respond(status, contentType, body) {                                                     // 4313\n                // content-type ignored, since XDomainRequest does not carry this                                      // 4314\n                // we keep the same syntax for respond(...) as for FakeXMLHttpRequest to ease                          // 4315\n                // test integration across browsers                                                                    // 4316\n                this.status = typeof status == \"number\" ? status : 200;                                                // 4317\n                this.setResponseBody(body || \"\");                                                                      // 4318\n            },                                                                                                         // 4319\n                                                                                                                       // 4320\n            simulatetimeout: function simulatetimeout() {                                                              // 4321\n                this.status = 0;                                                                                       // 4322\n                this.isTimeout = true;                                                                                 // 4323\n                // Access to this should actually throw an error                                                       // 4324\n                this.responseText = undefined;                                                                         // 4325\n                this.readyStateChange(FakeXDomainRequest.DONE);                                                        // 4326\n            }                                                                                                          // 4327\n        });                                                                                                            // 4328\n                                                                                                                       // 4329\n        sinon.extend(FakeXDomainRequest, {                                                                             // 4330\n            UNSENT: 0,                                                                                                 // 4331\n            OPENED: 1,                                                                                                 // 4332\n            LOADING: 3,                                                                                                // 4333\n            DONE: 4                                                                                                    // 4334\n        });                                                                                                            // 4335\n                                                                                                                       // 4336\n        sinon.useFakeXDomainRequest = function useFakeXDomainRequest() {                                               // 4337\n            sinon.FakeXDomainRequest.restore = function restore(keepOnCreate) {                                        // 4338\n                if (xdr.supportsXDR) {                                                                                 // 4339\n                    global.XDomainRequest = xdr.GlobalXDomainRequest;                                                  // 4340\n                }                                                                                                      // 4341\n                                                                                                                       // 4342\n                delete sinon.FakeXDomainRequest.restore;                                                               // 4343\n                                                                                                                       // 4344\n                if (keepOnCreate !== true) {                                                                           // 4345\n                    delete sinon.FakeXDomainRequest.onCreate;                                                          // 4346\n                }                                                                                                      // 4347\n            };                                                                                                         // 4348\n            if (xdr.supportsXDR) {                                                                                     // 4349\n                global.XDomainRequest = sinon.FakeXDomainRequest;                                                      // 4350\n            }                                                                                                          // 4351\n            return sinon.FakeXDomainRequest;                                                                           // 4352\n        };                                                                                                             // 4353\n                                                                                                                       // 4354\n        sinon.FakeXDomainRequest = FakeXDomainRequest;                                                                 // 4355\n    }                                                                                                                  // 4356\n                                                                                                                       // 4357\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 4358\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 4359\n                                                                                                                       // 4360\n    function loadDependencies(require, exports, module) {                                                              // 4361\n        var sinon = require(\"./core\");                                                                                 // 4362\n        require(\"../extend\");                                                                                          // 4363\n        require(\"./event\");                                                                                            // 4364\n        require(\"../log_error\");                                                                                       // 4365\n        makeApi(sinon);                                                                                                // 4366\n        module.exports = sinon;                                                                                        // 4367\n    }                                                                                                                  // 4368\n                                                                                                                       // 4369\n    if (isAMD) {                                                                                                       // 4370\n        define(loadDependencies);                                                                                      // 4371\n    } else if (isNode) {                                                                                               // 4372\n        loadDependencies(require, module.exports, module);                                                             // 4373\n    } else {                                                                                                           // 4374\n        makeApi(sinon);                                                                                                // 4375\n    }                                                                                                                  // 4376\n})(this);                                                                                                              // 4377\n                                                                                                                       // 4378\n/**                                                                                                                    // 4379\n * @depend core.js                                                                                                     // 4380\n * @depend ../extend.js                                                                                                // 4381\n * @depend event.js                                                                                                    // 4382\n * @depend ../log_error.js                                                                                             // 4383\n */                                                                                                                    // 4384\n/**                                                                                                                    // 4385\n * Fake XMLHttpRequest object                                                                                          // 4386\n *                                                                                                                     // 4387\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 4388\n * @license BSD                                                                                                        // 4389\n *                                                                                                                     // 4390\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 4391\n */                                                                                                                    // 4392\n                                                                                                                       // 4393\n(function (global) {                                                                                                   // 4394\n                                                                                                                       // 4395\n    var supportsProgress = typeof ProgressEvent !== \"undefined\";                                                       // 4396\n    var supportsCustomEvent = typeof CustomEvent !== \"undefined\";                                                      // 4397\n    var sinonXhr = { XMLHttpRequest: global.XMLHttpRequest };                                                          // 4398\n    sinonXhr.GlobalXMLHttpRequest = global.XMLHttpRequest;                                                             // 4399\n    sinonXhr.GlobalActiveXObject = global.ActiveXObject;                                                               // 4400\n    sinonXhr.supportsActiveX = typeof sinonXhr.GlobalActiveXObject != \"undefined\";                                     // 4401\n    sinonXhr.supportsXHR = typeof sinonXhr.GlobalXMLHttpRequest != \"undefined\";                                        // 4402\n    sinonXhr.workingXHR = sinonXhr.supportsXHR ? sinonXhr.GlobalXMLHttpRequest : sinonXhr.supportsActiveX              // 4403\n                                     ? function () { return new sinonXhr.GlobalActiveXObject(\"MSXML2.XMLHTTP.3.0\") } : false;\n    sinonXhr.supportsCORS = sinonXhr.supportsXHR && \"withCredentials\" in (new sinonXhr.GlobalXMLHttpRequest());        // 4405\n                                                                                                                       // 4406\n    /*jsl:ignore*/                                                                                                     // 4407\n    var unsafeHeaders = {                                                                                              // 4408\n        \"Accept-Charset\": true,                                                                                        // 4409\n        \"Accept-Encoding\": true,                                                                                       // 4410\n        Connection: true,                                                                                              // 4411\n        \"Content-Length\": true,                                                                                        // 4412\n        Cookie: true,                                                                                                  // 4413\n        Cookie2: true,                                                                                                 // 4414\n        \"Content-Transfer-Encoding\": true,                                                                             // 4415\n        Date: true,                                                                                                    // 4416\n        Expect: true,                                                                                                  // 4417\n        Host: true,                                                                                                    // 4418\n        \"Keep-Alive\": true,                                                                                            // 4419\n        Referer: true,                                                                                                 // 4420\n        TE: true,                                                                                                      // 4421\n        Trailer: true,                                                                                                 // 4422\n        \"Transfer-Encoding\": true,                                                                                     // 4423\n        Upgrade: true,                                                                                                 // 4424\n        \"User-Agent\": true,                                                                                            // 4425\n        Via: true                                                                                                      // 4426\n    };                                                                                                                 // 4427\n    /*jsl:end*/                                                                                                        // 4428\n                                                                                                                       // 4429\n    function FakeXMLHttpRequest() {                                                                                    // 4430\n        this.readyState = FakeXMLHttpRequest.UNSENT;                                                                   // 4431\n        this.requestHeaders = {};                                                                                      // 4432\n        this.requestBody = null;                                                                                       // 4433\n        this.status = 0;                                                                                               // 4434\n        this.statusText = \"\";                                                                                          // 4435\n        this.upload = new UploadProgress();                                                                            // 4436\n        if (sinonXhr.supportsCORS) {                                                                                   // 4437\n            this.withCredentials = false;                                                                              // 4438\n        }                                                                                                              // 4439\n                                                                                                                       // 4440\n        var xhr = this;                                                                                                // 4441\n        var events = [\"loadstart\", \"load\", \"abort\", \"loadend\"];                                                        // 4442\n                                                                                                                       // 4443\n        function addEventListener(eventName) {                                                                         // 4444\n            xhr.addEventListener(eventName, function (event) {                                                         // 4445\n                var listener = xhr[\"on\" + eventName];                                                                  // 4446\n                                                                                                                       // 4447\n                if (listener && typeof listener == \"function\") {                                                       // 4448\n                    listener.call(this, event);                                                                        // 4449\n                }                                                                                                      // 4450\n            });                                                                                                        // 4451\n        }                                                                                                              // 4452\n                                                                                                                       // 4453\n        for (var i = events.length - 1; i >= 0; i--) {                                                                 // 4454\n            addEventListener(events[i]);                                                                               // 4455\n        }                                                                                                              // 4456\n                                                                                                                       // 4457\n        if (typeof FakeXMLHttpRequest.onCreate == \"function\") {                                                        // 4458\n            FakeXMLHttpRequest.onCreate(this);                                                                         // 4459\n        }                                                                                                              // 4460\n    }                                                                                                                  // 4461\n                                                                                                                       // 4462\n    // An upload object is created for each                                                                            // 4463\n    // FakeXMLHttpRequest and allows upload                                                                            // 4464\n    // events to be simulated using uploadProgress                                                                     // 4465\n    // and uploadError.                                                                                                // 4466\n    function UploadProgress() {                                                                                        // 4467\n        this.eventListeners = {                                                                                        // 4468\n            progress: [],                                                                                              // 4469\n            load: [],                                                                                                  // 4470\n            abort: [],                                                                                                 // 4471\n            error: []                                                                                                  // 4472\n        }                                                                                                              // 4473\n    }                                                                                                                  // 4474\n                                                                                                                       // 4475\n    UploadProgress.prototype.addEventListener = function addEventListener(event, listener) {                           // 4476\n        this.eventListeners[event].push(listener);                                                                     // 4477\n    };                                                                                                                 // 4478\n                                                                                                                       // 4479\n    UploadProgress.prototype.removeEventListener = function removeEventListener(event, listener) {                     // 4480\n        var listeners = this.eventListeners[event] || [];                                                              // 4481\n                                                                                                                       // 4482\n        for (var i = 0, l = listeners.length; i < l; ++i) {                                                            // 4483\n            if (listeners[i] == listener) {                                                                            // 4484\n                return listeners.splice(i, 1);                                                                         // 4485\n            }                                                                                                          // 4486\n        }                                                                                                              // 4487\n    };                                                                                                                 // 4488\n                                                                                                                       // 4489\n    UploadProgress.prototype.dispatchEvent = function dispatchEvent(event) {                                           // 4490\n        var listeners = this.eventListeners[event.type] || [];                                                         // 4491\n                                                                                                                       // 4492\n        for (var i = 0, listener; (listener = listeners[i]) != null; i++) {                                            // 4493\n            listener(event);                                                                                           // 4494\n        }                                                                                                              // 4495\n    };                                                                                                                 // 4496\n                                                                                                                       // 4497\n    function verifyState(xhr) {                                                                                        // 4498\n        if (xhr.readyState !== FakeXMLHttpRequest.OPENED) {                                                            // 4499\n            throw new Error(\"INVALID_STATE_ERR\");                                                                      // 4500\n        }                                                                                                              // 4501\n                                                                                                                       // 4502\n        if (xhr.sendFlag) {                                                                                            // 4503\n            throw new Error(\"INVALID_STATE_ERR\");                                                                      // 4504\n        }                                                                                                              // 4505\n    }                                                                                                                  // 4506\n                                                                                                                       // 4507\n    function getHeader(headers, header) {                                                                              // 4508\n        header = header.toLowerCase();                                                                                 // 4509\n                                                                                                                       // 4510\n        for (var h in headers) {                                                                                       // 4511\n            if (h.toLowerCase() == header) {                                                                           // 4512\n                return h;                                                                                              // 4513\n            }                                                                                                          // 4514\n        }                                                                                                              // 4515\n                                                                                                                       // 4516\n        return null;                                                                                                   // 4517\n    }                                                                                                                  // 4518\n                                                                                                                       // 4519\n    // filtering to enable a white-list version of Sinon FakeXhr,                                                      // 4520\n    // where whitelisted requests are passed through to real XHR                                                       // 4521\n    function each(collection, callback) {                                                                              // 4522\n        if (!collection) {                                                                                             // 4523\n            return;                                                                                                    // 4524\n        }                                                                                                              // 4525\n                                                                                                                       // 4526\n        for (var i = 0, l = collection.length; i < l; i += 1) {                                                        // 4527\n            callback(collection[i]);                                                                                   // 4528\n        }                                                                                                              // 4529\n    }                                                                                                                  // 4530\n    function some(collection, callback) {                                                                              // 4531\n        for (var index = 0; index < collection.length; index++) {                                                      // 4532\n            if (callback(collection[index]) === true) {                                                                // 4533\n                return true;                                                                                           // 4534\n            }                                                                                                          // 4535\n        }                                                                                                              // 4536\n        return false;                                                                                                  // 4537\n    }                                                                                                                  // 4538\n    // largest arity in XHR is 5 - XHR#open                                                                            // 4539\n    var apply = function (obj, method, args) {                                                                         // 4540\n        switch (args.length) {                                                                                         // 4541\n        case 0: return obj[method]();                                                                                  // 4542\n        case 1: return obj[method](args[0]);                                                                           // 4543\n        case 2: return obj[method](args[0], args[1]);                                                                  // 4544\n        case 3: return obj[method](args[0], args[1], args[2]);                                                         // 4545\n        case 4: return obj[method](args[0], args[1], args[2], args[3]);                                                // 4546\n        case 5: return obj[method](args[0], args[1], args[2], args[3], args[4]);                                       // 4547\n        }                                                                                                              // 4548\n    };                                                                                                                 // 4549\n                                                                                                                       // 4550\n    FakeXMLHttpRequest.filters = [];                                                                                   // 4551\n    FakeXMLHttpRequest.addFilter = function addFilter(fn) {                                                            // 4552\n        this.filters.push(fn)                                                                                          // 4553\n    };                                                                                                                 // 4554\n    var IE6Re = /MSIE 6/;                                                                                              // 4555\n    FakeXMLHttpRequest.defake = function defake(fakeXhr, xhrArgs) {                                                    // 4556\n        var xhr = new sinonXhr.workingXHR();                                                                           // 4557\n        each([                                                                                                         // 4558\n            \"open\",                                                                                                    // 4559\n            \"setRequestHeader\",                                                                                        // 4560\n            \"send\",                                                                                                    // 4561\n            \"abort\",                                                                                                   // 4562\n            \"getResponseHeader\",                                                                                       // 4563\n            \"getAllResponseHeaders\",                                                                                   // 4564\n            \"addEventListener\",                                                                                        // 4565\n            \"overrideMimeType\",                                                                                        // 4566\n            \"removeEventListener\"                                                                                      // 4567\n        ], function (method) {                                                                                         // 4568\n            fakeXhr[method] = function () {                                                                            // 4569\n                return apply(xhr, method, arguments);                                                                  // 4570\n            };                                                                                                         // 4571\n        });                                                                                                            // 4572\n                                                                                                                       // 4573\n        var copyAttrs = function (args) {                                                                              // 4574\n            each(args, function (attr) {                                                                               // 4575\n                try {                                                                                                  // 4576\n                    fakeXhr[attr] = xhr[attr]                                                                          // 4577\n                } catch (e) {                                                                                          // 4578\n                    if (!IE6Re.test(navigator.userAgent)) {                                                            // 4579\n                        throw e;                                                                                       // 4580\n                    }                                                                                                  // 4581\n                }                                                                                                      // 4582\n            });                                                                                                        // 4583\n        };                                                                                                             // 4584\n                                                                                                                       // 4585\n        var stateChange = function stateChange() {                                                                     // 4586\n            fakeXhr.readyState = xhr.readyState;                                                                       // 4587\n            if (xhr.readyState >= FakeXMLHttpRequest.HEADERS_RECEIVED) {                                               // 4588\n                copyAttrs([\"status\", \"statusText\"]);                                                                   // 4589\n            }                                                                                                          // 4590\n            if (xhr.readyState >= FakeXMLHttpRequest.LOADING) {                                                        // 4591\n                copyAttrs([\"responseText\", \"response\"]);                                                               // 4592\n            }                                                                                                          // 4593\n            if (xhr.readyState === FakeXMLHttpRequest.DONE) {                                                          // 4594\n                copyAttrs([\"responseXML\"]);                                                                            // 4595\n            }                                                                                                          // 4596\n            if (fakeXhr.onreadystatechange) {                                                                          // 4597\n                fakeXhr.onreadystatechange.call(fakeXhr, { target: fakeXhr });                                         // 4598\n            }                                                                                                          // 4599\n        };                                                                                                             // 4600\n                                                                                                                       // 4601\n        if (xhr.addEventListener) {                                                                                    // 4602\n            for (var event in fakeXhr.eventListeners) {                                                                // 4603\n                if (fakeXhr.eventListeners.hasOwnProperty(event)) {                                                    // 4604\n                    each(fakeXhr.eventListeners[event], function (handler) {                                           // 4605\n                        xhr.addEventListener(event, handler);                                                          // 4606\n                    });                                                                                                // 4607\n                }                                                                                                      // 4608\n            }                                                                                                          // 4609\n            xhr.addEventListener(\"readystatechange\", stateChange);                                                     // 4610\n        } else {                                                                                                       // 4611\n            xhr.onreadystatechange = stateChange;                                                                      // 4612\n        }                                                                                                              // 4613\n        apply(xhr, \"open\", xhrArgs);                                                                                   // 4614\n    };                                                                                                                 // 4615\n    FakeXMLHttpRequest.useFilters = false;                                                                             // 4616\n                                                                                                                       // 4617\n    function verifyRequestOpened(xhr) {                                                                                // 4618\n        if (xhr.readyState != FakeXMLHttpRequest.OPENED) {                                                             // 4619\n            throw new Error(\"INVALID_STATE_ERR - \" + xhr.readyState);                                                  // 4620\n        }                                                                                                              // 4621\n    }                                                                                                                  // 4622\n                                                                                                                       // 4623\n    function verifyRequestSent(xhr) {                                                                                  // 4624\n        if (xhr.readyState == FakeXMLHttpRequest.DONE) {                                                               // 4625\n            throw new Error(\"Request done\");                                                                           // 4626\n        }                                                                                                              // 4627\n    }                                                                                                                  // 4628\n                                                                                                                       // 4629\n    function verifyHeadersReceived(xhr) {                                                                              // 4630\n        if (xhr.async && xhr.readyState != FakeXMLHttpRequest.HEADERS_RECEIVED) {                                      // 4631\n            throw new Error(\"No headers received\");                                                                    // 4632\n        }                                                                                                              // 4633\n    }                                                                                                                  // 4634\n                                                                                                                       // 4635\n    function verifyResponseBodyType(body) {                                                                            // 4636\n        if (typeof body != \"string\") {                                                                                 // 4637\n            var error = new Error(\"Attempted to respond to fake XMLHttpRequest with \" +                                // 4638\n                                 body + \", which is not a string.\");                                                   // 4639\n            error.name = \"InvalidBodyException\";                                                                       // 4640\n            throw error;                                                                                               // 4641\n        }                                                                                                              // 4642\n    }                                                                                                                  // 4643\n                                                                                                                       // 4644\n    FakeXMLHttpRequest.parseXML = function parseXML(text) {                                                            // 4645\n        var xmlDoc;                                                                                                    // 4646\n                                                                                                                       // 4647\n        if (typeof DOMParser != \"undefined\") {                                                                         // 4648\n            var parser = new DOMParser();                                                                              // 4649\n            xmlDoc = parser.parseFromString(text, \"text/xml\");                                                         // 4650\n        } else {                                                                                                       // 4651\n            xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");                                                            // 4652\n            xmlDoc.async = \"false\";                                                                                    // 4653\n            xmlDoc.loadXML(text);                                                                                      // 4654\n        }                                                                                                              // 4655\n                                                                                                                       // 4656\n        return xmlDoc;                                                                                                 // 4657\n    };                                                                                                                 // 4658\n                                                                                                                       // 4659\n    FakeXMLHttpRequest.statusCodes = {                                                                                 // 4660\n        100: \"Continue\",                                                                                               // 4661\n        101: \"Switching Protocols\",                                                                                    // 4662\n        200: \"OK\",                                                                                                     // 4663\n        201: \"Created\",                                                                                                // 4664\n        202: \"Accepted\",                                                                                               // 4665\n        203: \"Non-Authoritative Information\",                                                                          // 4666\n        204: \"No Content\",                                                                                             // 4667\n        205: \"Reset Content\",                                                                                          // 4668\n        206: \"Partial Content\",                                                                                        // 4669\n        207: \"Multi-Status\",                                                                                           // 4670\n        300: \"Multiple Choice\",                                                                                        // 4671\n        301: \"Moved Permanently\",                                                                                      // 4672\n        302: \"Found\",                                                                                                  // 4673\n        303: \"See Other\",                                                                                              // 4674\n        304: \"Not Modified\",                                                                                           // 4675\n        305: \"Use Proxy\",                                                                                              // 4676\n        307: \"Temporary Redirect\",                                                                                     // 4677\n        400: \"Bad Request\",                                                                                            // 4678\n        401: \"Unauthorized\",                                                                                           // 4679\n        402: \"Payment Required\",                                                                                       // 4680\n        403: \"Forbidden\",                                                                                              // 4681\n        404: \"Not Found\",                                                                                              // 4682\n        405: \"Method Not Allowed\",                                                                                     // 4683\n        406: \"Not Acceptable\",                                                                                         // 4684\n        407: \"Proxy Authentication Required\",                                                                          // 4685\n        408: \"Request Timeout\",                                                                                        // 4686\n        409: \"Conflict\",                                                                                               // 4687\n        410: \"Gone\",                                                                                                   // 4688\n        411: \"Length Required\",                                                                                        // 4689\n        412: \"Precondition Failed\",                                                                                    // 4690\n        413: \"Request Entity Too Large\",                                                                               // 4691\n        414: \"Request-URI Too Long\",                                                                                   // 4692\n        415: \"Unsupported Media Type\",                                                                                 // 4693\n        416: \"Requested Range Not Satisfiable\",                                                                        // 4694\n        417: \"Expectation Failed\",                                                                                     // 4695\n        422: \"Unprocessable Entity\",                                                                                   // 4696\n        500: \"Internal Server Error\",                                                                                  // 4697\n        501: \"Not Implemented\",                                                                                        // 4698\n        502: \"Bad Gateway\",                                                                                            // 4699\n        503: \"Service Unavailable\",                                                                                    // 4700\n        504: \"Gateway Timeout\",                                                                                        // 4701\n        505: \"HTTP Version Not Supported\"                                                                              // 4702\n    };                                                                                                                 // 4703\n                                                                                                                       // 4704\n    function makeApi(sinon) {                                                                                          // 4705\n        sinon.xhr = sinonXhr;                                                                                          // 4706\n                                                                                                                       // 4707\n        sinon.extend(FakeXMLHttpRequest.prototype, sinon.EventTarget, {                                                // 4708\n            async: true,                                                                                               // 4709\n                                                                                                                       // 4710\n            open: function open(method, url, async, username, password) {                                              // 4711\n                this.method = method;                                                                                  // 4712\n                this.url = url;                                                                                        // 4713\n                this.async = typeof async == \"boolean\" ? async : true;                                                 // 4714\n                this.username = username;                                                                              // 4715\n                this.password = password;                                                                              // 4716\n                this.responseText = null;                                                                              // 4717\n                this.responseXML = null;                                                                               // 4718\n                this.requestHeaders = {};                                                                              // 4719\n                this.sendFlag = false;                                                                                 // 4720\n                                                                                                                       // 4721\n                if (FakeXMLHttpRequest.useFilters === true) {                                                          // 4722\n                    var xhrArgs = arguments;                                                                           // 4723\n                    var defake = some(FakeXMLHttpRequest.filters, function (filter) {                                  // 4724\n                        return filter.apply(this, xhrArgs)                                                             // 4725\n                    });                                                                                                // 4726\n                    if (defake) {                                                                                      // 4727\n                        return FakeXMLHttpRequest.defake(this, arguments);                                             // 4728\n                    }                                                                                                  // 4729\n                }                                                                                                      // 4730\n                this.readyStateChange(FakeXMLHttpRequest.OPENED);                                                      // 4731\n            },                                                                                                         // 4732\n                                                                                                                       // 4733\n            readyStateChange: function readyStateChange(state) {                                                       // 4734\n                this.readyState = state;                                                                               // 4735\n                                                                                                                       // 4736\n                if (typeof this.onreadystatechange == \"function\") {                                                    // 4737\n                    try {                                                                                              // 4738\n                        this.onreadystatechange();                                                                     // 4739\n                    } catch (e) {                                                                                      // 4740\n                        sinon.logError(\"Fake XHR onreadystatechange handler\", e);                                      // 4741\n                    }                                                                                                  // 4742\n                }                                                                                                      // 4743\n                                                                                                                       // 4744\n                this.dispatchEvent(new sinon.Event(\"readystatechange\"));                                               // 4745\n                                                                                                                       // 4746\n                switch (this.readyState) {                                                                             // 4747\n                    case FakeXMLHttpRequest.DONE:                                                                      // 4748\n                        this.dispatchEvent(new sinon.Event(\"load\", false, false, this));                               // 4749\n                        this.dispatchEvent(new sinon.Event(\"loadend\", false, false, this));                            // 4750\n                        this.upload.dispatchEvent(new sinon.Event(\"load\", false, false, this));                        // 4751\n                        if (supportsProgress) {                                                                        // 4752\n                            this.upload.dispatchEvent(new sinon.ProgressEvent(\"progress\", {loaded: 100, total: 100})); // 4753\n                            this.dispatchEvent(new sinon.ProgressEvent(\"progress\", {loaded: 100, total: 100}));        // 4754\n                        }                                                                                              // 4755\n                        break;                                                                                         // 4756\n                }                                                                                                      // 4757\n            },                                                                                                         // 4758\n                                                                                                                       // 4759\n            setRequestHeader: function setRequestHeader(header, value) {                                               // 4760\n                verifyState(this);                                                                                     // 4761\n                                                                                                                       // 4762\n                if (unsafeHeaders[header] || /^(Sec-|Proxy-)/.test(header)) {                                          // 4763\n                    throw new Error(\"Refused to set unsafe header \\\"\" + header + \"\\\"\");                                // 4764\n                }                                                                                                      // 4765\n                                                                                                                       // 4766\n                if (this.requestHeaders[header]) {                                                                     // 4767\n                    this.requestHeaders[header] += \",\" + value;                                                        // 4768\n                } else {                                                                                               // 4769\n                    this.requestHeaders[header] = value;                                                               // 4770\n                }                                                                                                      // 4771\n            },                                                                                                         // 4772\n                                                                                                                       // 4773\n            // Helps testing                                                                                           // 4774\n            setResponseHeaders: function setResponseHeaders(headers) {                                                 // 4775\n                verifyRequestOpened(this);                                                                             // 4776\n                this.responseHeaders = {};                                                                             // 4777\n                                                                                                                       // 4778\n                for (var header in headers) {                                                                          // 4779\n                    if (headers.hasOwnProperty(header)) {                                                              // 4780\n                        this.responseHeaders[header] = headers[header];                                                // 4781\n                    }                                                                                                  // 4782\n                }                                                                                                      // 4783\n                                                                                                                       // 4784\n                if (this.async) {                                                                                      // 4785\n                    this.readyStateChange(FakeXMLHttpRequest.HEADERS_RECEIVED);                                        // 4786\n                } else {                                                                                               // 4787\n                    this.readyState = FakeXMLHttpRequest.HEADERS_RECEIVED;                                             // 4788\n                }                                                                                                      // 4789\n            },                                                                                                         // 4790\n                                                                                                                       // 4791\n            // Currently treats ALL data as a DOMString (i.e. no Document)                                             // 4792\n            send: function send(data) {                                                                                // 4793\n                verifyState(this);                                                                                     // 4794\n                                                                                                                       // 4795\n                if (!/^(get|head)$/i.test(this.method)) {                                                              // 4796\n                    var contentType = getHeader(this.requestHeaders, \"Content-Type\");                                  // 4797\n                    if (this.requestHeaders[contentType]) {                                                            // 4798\n                        var value = this.requestHeaders[contentType].split(\";\");                                       // 4799\n                        this.requestHeaders[contentType] = value[0] + \";charset=utf-8\";                                // 4800\n                    } else if (!(data instanceof FormData)) {                                                          // 4801\n                        this.requestHeaders[\"Content-Type\"] = \"text/plain;charset=utf-8\";                              // 4802\n                    }                                                                                                  // 4803\n                                                                                                                       // 4804\n                    this.requestBody = data;                                                                           // 4805\n                }                                                                                                      // 4806\n                                                                                                                       // 4807\n                this.errorFlag = false;                                                                                // 4808\n                this.sendFlag = this.async;                                                                            // 4809\n                this.readyStateChange(FakeXMLHttpRequest.OPENED);                                                      // 4810\n                                                                                                                       // 4811\n                if (typeof this.onSend == \"function\") {                                                                // 4812\n                    this.onSend(this);                                                                                 // 4813\n                }                                                                                                      // 4814\n                                                                                                                       // 4815\n                this.dispatchEvent(new sinon.Event(\"loadstart\", false, false, this));                                  // 4816\n            },                                                                                                         // 4817\n                                                                                                                       // 4818\n            abort: function abort() {                                                                                  // 4819\n                this.aborted = true;                                                                                   // 4820\n                this.responseText = null;                                                                              // 4821\n                this.errorFlag = true;                                                                                 // 4822\n                this.requestHeaders = {};                                                                              // 4823\n                                                                                                                       // 4824\n                if (this.readyState > FakeXMLHttpRequest.UNSENT && this.sendFlag) {                                    // 4825\n                    this.readyStateChange(FakeXMLHttpRequest.DONE);                                                    // 4826\n                    this.sendFlag = false;                                                                             // 4827\n                }                                                                                                      // 4828\n                                                                                                                       // 4829\n                this.readyState = FakeXMLHttpRequest.UNSENT;                                                           // 4830\n                                                                                                                       // 4831\n                this.dispatchEvent(new sinon.Event(\"abort\", false, false, this));                                      // 4832\n                                                                                                                       // 4833\n                this.upload.dispatchEvent(new sinon.Event(\"abort\", false, false, this));                               // 4834\n                                                                                                                       // 4835\n                if (typeof this.onerror === \"function\") {                                                              // 4836\n                    this.onerror();                                                                                    // 4837\n                }                                                                                                      // 4838\n            },                                                                                                         // 4839\n                                                                                                                       // 4840\n            getResponseHeader: function getResponseHeader(header) {                                                    // 4841\n                if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {                                           // 4842\n                    return null;                                                                                       // 4843\n                }                                                                                                      // 4844\n                                                                                                                       // 4845\n                if (/^Set-Cookie2?$/i.test(header)) {                                                                  // 4846\n                    return null;                                                                                       // 4847\n                }                                                                                                      // 4848\n                                                                                                                       // 4849\n                header = getHeader(this.responseHeaders, header);                                                      // 4850\n                                                                                                                       // 4851\n                return this.responseHeaders[header] || null;                                                           // 4852\n            },                                                                                                         // 4853\n                                                                                                                       // 4854\n            getAllResponseHeaders: function getAllResponseHeaders() {                                                  // 4855\n                if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {                                           // 4856\n                    return \"\";                                                                                         // 4857\n                }                                                                                                      // 4858\n                                                                                                                       // 4859\n                var headers = \"\";                                                                                      // 4860\n                                                                                                                       // 4861\n                for (var header in this.responseHeaders) {                                                             // 4862\n                    if (this.responseHeaders.hasOwnProperty(header) &&                                                 // 4863\n                        !/^Set-Cookie2?$/i.test(header)) {                                                             // 4864\n                        headers += header + \": \" + this.responseHeaders[header] + \"\\r\\n\";                              // 4865\n                    }                                                                                                  // 4866\n                }                                                                                                      // 4867\n                                                                                                                       // 4868\n                return headers;                                                                                        // 4869\n            },                                                                                                         // 4870\n                                                                                                                       // 4871\n            setResponseBody: function setResponseBody(body) {                                                          // 4872\n                verifyRequestSent(this);                                                                               // 4873\n                verifyHeadersReceived(this);                                                                           // 4874\n                verifyResponseBodyType(body);                                                                          // 4875\n                                                                                                                       // 4876\n                var chunkSize = this.chunkSize || 10;                                                                  // 4877\n                var index = 0;                                                                                         // 4878\n                this.responseText = \"\";                                                                                // 4879\n                                                                                                                       // 4880\n                do {                                                                                                   // 4881\n                    if (this.async) {                                                                                  // 4882\n                        this.readyStateChange(FakeXMLHttpRequest.LOADING);                                             // 4883\n                    }                                                                                                  // 4884\n                                                                                                                       // 4885\n                    this.responseText += body.substring(index, index + chunkSize);                                     // 4886\n                    index += chunkSize;                                                                                // 4887\n                } while (index < body.length);                                                                         // 4888\n                                                                                                                       // 4889\n                var type = this.getResponseHeader(\"Content-Type\");                                                     // 4890\n                                                                                                                       // 4891\n                if (this.responseText &&                                                                               // 4892\n                    (!type || /(text\\/xml)|(application\\/xml)|(\\+xml)/.test(type))) {                                  // 4893\n                    try {                                                                                              // 4894\n                        this.responseXML = FakeXMLHttpRequest.parseXML(this.responseText);                             // 4895\n                    } catch (e) {                                                                                      // 4896\n                        // Unable to parse XML - no biggie                                                             // 4897\n                    }                                                                                                  // 4898\n                }                                                                                                      // 4899\n                                                                                                                       // 4900\n                this.readyStateChange(FakeXMLHttpRequest.DONE);                                                        // 4901\n            },                                                                                                         // 4902\n                                                                                                                       // 4903\n            respond: function respond(status, headers, body) {                                                         // 4904\n                this.status = typeof status == \"number\" ? status : 200;                                                // 4905\n                this.statusText = FakeXMLHttpRequest.statusCodes[this.status];                                         // 4906\n                this.setResponseHeaders(headers || {});                                                                // 4907\n                this.setResponseBody(body || \"\");                                                                      // 4908\n            },                                                                                                         // 4909\n                                                                                                                       // 4910\n            uploadProgress: function uploadProgress(progressEventRaw) {                                                // 4911\n                if (supportsProgress) {                                                                                // 4912\n                    this.upload.dispatchEvent(new sinon.ProgressEvent(\"progress\", progressEventRaw));                  // 4913\n                }                                                                                                      // 4914\n            },                                                                                                         // 4915\n                                                                                                                       // 4916\n            downloadProgress: function downloadProgress(progressEventRaw) {                                            // 4917\n                if (supportsProgress) {                                                                                // 4918\n                    this.dispatchEvent(new sinon.ProgressEvent(\"progress\", progressEventRaw));                         // 4919\n                }                                                                                                      // 4920\n            },                                                                                                         // 4921\n                                                                                                                       // 4922\n            uploadError: function uploadError(error) {                                                                 // 4923\n                if (supportsCustomEvent) {                                                                             // 4924\n                    this.upload.dispatchEvent(new sinon.CustomEvent(\"error\", {detail: error}));                        // 4925\n                }                                                                                                      // 4926\n            }                                                                                                          // 4927\n        });                                                                                                            // 4928\n                                                                                                                       // 4929\n        sinon.extend(FakeXMLHttpRequest, {                                                                             // 4930\n            UNSENT: 0,                                                                                                 // 4931\n            OPENED: 1,                                                                                                 // 4932\n            HEADERS_RECEIVED: 2,                                                                                       // 4933\n            LOADING: 3,                                                                                                // 4934\n            DONE: 4                                                                                                    // 4935\n        });                                                                                                            // 4936\n                                                                                                                       // 4937\n        sinon.useFakeXMLHttpRequest = function () {                                                                    // 4938\n            FakeXMLHttpRequest.restore = function restore(keepOnCreate) {                                              // 4939\n                if (sinonXhr.supportsXHR) {                                                                            // 4940\n                    global.XMLHttpRequest = sinonXhr.GlobalXMLHttpRequest;                                             // 4941\n                }                                                                                                      // 4942\n                                                                                                                       // 4943\n                if (sinonXhr.supportsActiveX) {                                                                        // 4944\n                    global.ActiveXObject = sinonXhr.GlobalActiveXObject;                                               // 4945\n                }                                                                                                      // 4946\n                                                                                                                       // 4947\n                delete FakeXMLHttpRequest.restore;                                                                     // 4948\n                                                                                                                       // 4949\n                if (keepOnCreate !== true) {                                                                           // 4950\n                    delete FakeXMLHttpRequest.onCreate;                                                                // 4951\n                }                                                                                                      // 4952\n            };                                                                                                         // 4953\n            if (sinonXhr.supportsXHR) {                                                                                // 4954\n                global.XMLHttpRequest = FakeXMLHttpRequest;                                                            // 4955\n            }                                                                                                          // 4956\n                                                                                                                       // 4957\n            if (sinonXhr.supportsActiveX) {                                                                            // 4958\n                global.ActiveXObject = function ActiveXObject(objId) {                                                 // 4959\n                    if (objId == \"Microsoft.XMLHTTP\" || /^Msxml2\\.XMLHTTP/i.test(objId)) {                             // 4960\n                                                                                                                       // 4961\n                        return new FakeXMLHttpRequest();                                                               // 4962\n                    }                                                                                                  // 4963\n                                                                                                                       // 4964\n                    return new sinonXhr.GlobalActiveXObject(objId);                                                    // 4965\n                };                                                                                                     // 4966\n            }                                                                                                          // 4967\n                                                                                                                       // 4968\n            return FakeXMLHttpRequest;                                                                                 // 4969\n        };                                                                                                             // 4970\n                                                                                                                       // 4971\n        sinon.FakeXMLHttpRequest = FakeXMLHttpRequest;                                                                 // 4972\n    }                                                                                                                  // 4973\n                                                                                                                       // 4974\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 4975\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 4976\n                                                                                                                       // 4977\n    function loadDependencies(require, exports, module) {                                                              // 4978\n        var sinon = require(\"./core\");                                                                                 // 4979\n        require(\"../extend\");                                                                                          // 4980\n        require(\"./event\");                                                                                            // 4981\n        require(\"../log_error\");                                                                                       // 4982\n        makeApi(sinon);                                                                                                // 4983\n        module.exports = sinon;                                                                                        // 4984\n    }                                                                                                                  // 4985\n                                                                                                                       // 4986\n    if (isAMD) {                                                                                                       // 4987\n        define(loadDependencies);                                                                                      // 4988\n    } else if (isNode) {                                                                                               // 4989\n        loadDependencies(require, module.exports, module);                                                             // 4990\n    } else if (typeof sinon === \"undefined\") {                                                                         // 4991\n        return;                                                                                                        // 4992\n    } else {                                                                                                           // 4993\n        makeApi(sinon);                                                                                                // 4994\n    }                                                                                                                  // 4995\n                                                                                                                       // 4996\n})(typeof global !== \"undefined\" ? global : this);                                                                     // 4997\n                                                                                                                       // 4998\n/**                                                                                                                    // 4999\n * @depend fake_xdomain_request.js                                                                                     // 5000\n * @depend fake_xml_http_request.js                                                                                    // 5001\n * @depend ../format.js                                                                                                // 5002\n * @depend ../log_error.js                                                                                             // 5003\n */                                                                                                                    // 5004\n/**                                                                                                                    // 5005\n * The Sinon \"server\" mimics a web server that receives requests from                                                  // 5006\n * sinon.FakeXMLHttpRequest and provides an API to respond to those requests,                                          // 5007\n * both synchronously and asynchronously. To respond synchronuously, canned                                            // 5008\n * answers have to be provided upfront.                                                                                // 5009\n *                                                                                                                     // 5010\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 5011\n * @license BSD                                                                                                        // 5012\n *                                                                                                                     // 5013\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 5014\n */                                                                                                                    // 5015\n                                                                                                                       // 5016\nif (typeof sinon == \"undefined\") {                                                                                     // 5017\n    var sinon = {};                                                                                                    // 5018\n}                                                                                                                      // 5019\n                                                                                                                       // 5020\n(function () {                                                                                                         // 5021\n    var push = [].push;                                                                                                // 5022\n    function F() {}                                                                                                    // 5023\n                                                                                                                       // 5024\n    function create(proto) {                                                                                           // 5025\n        F.prototype = proto;                                                                                           // 5026\n        return new F();                                                                                                // 5027\n    }                                                                                                                  // 5028\n                                                                                                                       // 5029\n    function responseArray(handler) {                                                                                  // 5030\n        var response = handler;                                                                                        // 5031\n                                                                                                                       // 5032\n        if (Object.prototype.toString.call(handler) != \"[object Array]\") {                                             // 5033\n            response = [200, {}, handler];                                                                             // 5034\n        }                                                                                                              // 5035\n                                                                                                                       // 5036\n        if (typeof response[2] != \"string\") {                                                                          // 5037\n            throw new TypeError(\"Fake server response body should be string, but was \" +                               // 5038\n                                typeof response[2]);                                                                   // 5039\n        }                                                                                                              // 5040\n                                                                                                                       // 5041\n        return response;                                                                                               // 5042\n    }                                                                                                                  // 5043\n                                                                                                                       // 5044\n    var wloc = typeof window !== \"undefined\" ? window.location : {};                                                   // 5045\n    var rCurrLoc = new RegExp(\"^\" + wloc.protocol + \"//\" + wloc.host);                                                 // 5046\n                                                                                                                       // 5047\n    function matchOne(response, reqMethod, reqUrl) {                                                                   // 5048\n        var rmeth = response.method;                                                                                   // 5049\n        var matchMethod = !rmeth || rmeth.toLowerCase() == reqMethod.toLowerCase();                                    // 5050\n        var url = response.url;                                                                                        // 5051\n        var matchUrl = !url || url == reqUrl || (typeof url.test == \"function\" && url.test(reqUrl));                   // 5052\n                                                                                                                       // 5053\n        return matchMethod && matchUrl;                                                                                // 5054\n    }                                                                                                                  // 5055\n                                                                                                                       // 5056\n    function match(response, request) {                                                                                // 5057\n        var requestUrl = request.url;                                                                                  // 5058\n                                                                                                                       // 5059\n        if (!/^https?:\\/\\//.test(requestUrl) || rCurrLoc.test(requestUrl)) {                                           // 5060\n            requestUrl = requestUrl.replace(rCurrLoc, \"\");                                                             // 5061\n        }                                                                                                              // 5062\n                                                                                                                       // 5063\n        if (matchOne(response, this.getHTTPMethod(request), requestUrl)) {                                             // 5064\n            if (typeof response.response == \"function\") {                                                              // 5065\n                var ru = response.url;                                                                                 // 5066\n                var args = [request].concat(ru && typeof ru.exec == \"function\" ? ru.exec(requestUrl).slice(1) : []);   // 5067\n                return response.response.apply(response, args);                                                        // 5068\n            }                                                                                                          // 5069\n                                                                                                                       // 5070\n            return true;                                                                                               // 5071\n        }                                                                                                              // 5072\n                                                                                                                       // 5073\n        return false;                                                                                                  // 5074\n    }                                                                                                                  // 5075\n                                                                                                                       // 5076\n    function makeApi(sinon) {                                                                                          // 5077\n        sinon.fakeServer = {                                                                                           // 5078\n            create: function () {                                                                                      // 5079\n                var server = create(this);                                                                             // 5080\n                if (!sinon.xhr.supportsCORS) {                                                                         // 5081\n                    this.xhr = sinon.useFakeXDomainRequest();                                                          // 5082\n                } else {                                                                                               // 5083\n                    this.xhr = sinon.useFakeXMLHttpRequest();                                                          // 5084\n                }                                                                                                      // 5085\n                server.requests = [];                                                                                  // 5086\n                                                                                                                       // 5087\n                this.xhr.onCreate = function (xhrObj) {                                                                // 5088\n                    server.addRequest(xhrObj);                                                                         // 5089\n                };                                                                                                     // 5090\n                                                                                                                       // 5091\n                return server;                                                                                         // 5092\n            },                                                                                                         // 5093\n                                                                                                                       // 5094\n            addRequest: function addRequest(xhrObj) {                                                                  // 5095\n                var server = this;                                                                                     // 5096\n                push.call(this.requests, xhrObj);                                                                      // 5097\n                                                                                                                       // 5098\n                xhrObj.onSend = function () {                                                                          // 5099\n                    server.handleRequest(this);                                                                        // 5100\n                                                                                                                       // 5101\n                    if (server.respondImmediately) {                                                                   // 5102\n                        server.respond();                                                                              // 5103\n                    } else if (server.autoRespond && !server.responding) {                                             // 5104\n                        setTimeout(function () {                                                                       // 5105\n                            server.responding = false;                                                                 // 5106\n                            server.respond();                                                                          // 5107\n                        }, server.autoRespondAfter || 10);                                                             // 5108\n                                                                                                                       // 5109\n                        server.responding = true;                                                                      // 5110\n                    }                                                                                                  // 5111\n                };                                                                                                     // 5112\n            },                                                                                                         // 5113\n                                                                                                                       // 5114\n            getHTTPMethod: function getHTTPMethod(request) {                                                           // 5115\n                if (this.fakeHTTPMethods && /post/i.test(request.method)) {                                            // 5116\n                    var matches = (request.requestBody || \"\").match(/_method=([^\\b;]+)/);                              // 5117\n                    return !!matches ? matches[1] : request.method;                                                    // 5118\n                }                                                                                                      // 5119\n                                                                                                                       // 5120\n                return request.method;                                                                                 // 5121\n            },                                                                                                         // 5122\n                                                                                                                       // 5123\n            handleRequest: function handleRequest(xhr) {                                                               // 5124\n                if (xhr.async) {                                                                                       // 5125\n                    if (!this.queue) {                                                                                 // 5126\n                        this.queue = [];                                                                               // 5127\n                    }                                                                                                  // 5128\n                                                                                                                       // 5129\n                    push.call(this.queue, xhr);                                                                        // 5130\n                } else {                                                                                               // 5131\n                    this.processRequest(xhr);                                                                          // 5132\n                }                                                                                                      // 5133\n            },                                                                                                         // 5134\n                                                                                                                       // 5135\n            log: function log(response, request) {                                                                     // 5136\n                var str;                                                                                               // 5137\n                                                                                                                       // 5138\n                str =  \"Request:\\n\"  + sinon.format(request)  + \"\\n\\n\";                                                // 5139\n                str += \"Response:\\n\" + sinon.format(response) + \"\\n\\n\";                                                // 5140\n                                                                                                                       // 5141\n                sinon.log(str);                                                                                        // 5142\n            },                                                                                                         // 5143\n                                                                                                                       // 5144\n            respondWith: function respondWith(method, url, body) {                                                     // 5145\n                if (arguments.length == 1 && typeof method != \"function\") {                                            // 5146\n                    this.response = responseArray(method);                                                             // 5147\n                    return;                                                                                            // 5148\n                }                                                                                                      // 5149\n                                                                                                                       // 5150\n                if (!this.responses) { this.responses = []; }                                                          // 5151\n                                                                                                                       // 5152\n                if (arguments.length == 1) {                                                                           // 5153\n                    body = method;                                                                                     // 5154\n                    url = method = null;                                                                               // 5155\n                }                                                                                                      // 5156\n                                                                                                                       // 5157\n                if (arguments.length == 2) {                                                                           // 5158\n                    body = url;                                                                                        // 5159\n                    url = method;                                                                                      // 5160\n                    method = null;                                                                                     // 5161\n                }                                                                                                      // 5162\n                                                                                                                       // 5163\n                push.call(this.responses, {                                                                            // 5164\n                    method: method,                                                                                    // 5165\n                    url: url,                                                                                          // 5166\n                    response: typeof body == \"function\" ? body : responseArray(body)                                   // 5167\n                });                                                                                                    // 5168\n            },                                                                                                         // 5169\n                                                                                                                       // 5170\n            respond: function respond() {                                                                              // 5171\n                if (arguments.length > 0) {                                                                            // 5172\n                    this.respondWith.apply(this, arguments);                                                           // 5173\n                }                                                                                                      // 5174\n                                                                                                                       // 5175\n                var queue = this.queue || [];                                                                          // 5176\n                var requests = queue.splice(0, queue.length);                                                          // 5177\n                var request;                                                                                           // 5178\n                                                                                                                       // 5179\n                while (request = requests.shift()) {                                                                   // 5180\n                    this.processRequest(request);                                                                      // 5181\n                }                                                                                                      // 5182\n            },                                                                                                         // 5183\n                                                                                                                       // 5184\n            processRequest: function processRequest(request) {                                                         // 5185\n                try {                                                                                                  // 5186\n                    if (request.aborted) {                                                                             // 5187\n                        return;                                                                                        // 5188\n                    }                                                                                                  // 5189\n                                                                                                                       // 5190\n                    var response = this.response || [404, {}, \"\"];                                                     // 5191\n                                                                                                                       // 5192\n                    if (this.responses) {                                                                              // 5193\n                        for (var l = this.responses.length, i = l - 1; i >= 0; i--) {                                  // 5194\n                            if (match.call(this, this.responses[i], request)) {                                        // 5195\n                                response = this.responses[i].response;                                                 // 5196\n                                break;                                                                                 // 5197\n                            }                                                                                          // 5198\n                        }                                                                                              // 5199\n                    }                                                                                                  // 5200\n                                                                                                                       // 5201\n                    if (request.readyState != 4) {                                                                     // 5202\n                        this.log(response, request);                                                                   // 5203\n                                                                                                                       // 5204\n                        request.respond(response[0], response[1], response[2]);                                        // 5205\n                    }                                                                                                  // 5206\n                } catch (e) {                                                                                          // 5207\n                    sinon.logError(\"Fake server request processing\", e);                                               // 5208\n                }                                                                                                      // 5209\n            },                                                                                                         // 5210\n                                                                                                                       // 5211\n            restore: function restore() {                                                                              // 5212\n                return this.xhr.restore && this.xhr.restore.apply(this.xhr, arguments);                                // 5213\n            }                                                                                                          // 5214\n        };                                                                                                             // 5215\n    }                                                                                                                  // 5216\n                                                                                                                       // 5217\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 5218\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 5219\n                                                                                                                       // 5220\n    function loadDependencies(require, exports, module) {                                                              // 5221\n        var sinon = require(\"./core\");                                                                                 // 5222\n        require(\"./fake_xdomain_request\");                                                                             // 5223\n        require(\"./fake_xml_http_request\");                                                                            // 5224\n        require(\"../format\");                                                                                          // 5225\n        makeApi(sinon);                                                                                                // 5226\n        module.exports = sinon;                                                                                        // 5227\n    }                                                                                                                  // 5228\n                                                                                                                       // 5229\n    if (isAMD) {                                                                                                       // 5230\n        define(loadDependencies);                                                                                      // 5231\n    } else if (isNode) {                                                                                               // 5232\n        loadDependencies(require, module.exports, module);                                                             // 5233\n    } else {                                                                                                           // 5234\n        makeApi(sinon);                                                                                                // 5235\n    }                                                                                                                  // 5236\n}());                                                                                                                  // 5237\n                                                                                                                       // 5238\n/**                                                                                                                    // 5239\n * @depend fake_server.js                                                                                              // 5240\n * @depend fake_timers.js                                                                                              // 5241\n */                                                                                                                    // 5242\n/**                                                                                                                    // 5243\n * Add-on for sinon.fakeServer that automatically handles a fake timer along with                                      // 5244\n * the FakeXMLHttpRequest. The direct inspiration for this add-on is jQuery                                            // 5245\n * 1.3.x, which does not use xhr object's onreadystatehandler at all - instead,                                        // 5246\n * it polls the object for completion with setInterval. Dispite the direct                                             // 5247\n * motivation, there is nothing jQuery-specific in this file, so it can be used                                        // 5248\n * in any environment where the ajax implementation depends on setInterval or                                          // 5249\n * setTimeout.                                                                                                         // 5250\n *                                                                                                                     // 5251\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 5252\n * @license BSD                                                                                                        // 5253\n *                                                                                                                     // 5254\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 5255\n */                                                                                                                    // 5256\n                                                                                                                       // 5257\n(function () {                                                                                                         // 5258\n    function makeApi(sinon) {                                                                                          // 5259\n        function Server() {}                                                                                           // 5260\n        Server.prototype = sinon.fakeServer;                                                                           // 5261\n                                                                                                                       // 5262\n        sinon.fakeServerWithClock = new Server();                                                                      // 5263\n                                                                                                                       // 5264\n        sinon.fakeServerWithClock.addRequest = function addRequest(xhr) {                                              // 5265\n            if (xhr.async) {                                                                                           // 5266\n                if (typeof setTimeout.clock == \"object\") {                                                             // 5267\n                    this.clock = setTimeout.clock;                                                                     // 5268\n                } else {                                                                                               // 5269\n                    this.clock = sinon.useFakeTimers();                                                                // 5270\n                    this.resetClock = true;                                                                            // 5271\n                }                                                                                                      // 5272\n                                                                                                                       // 5273\n                if (!this.longestTimeout) {                                                                            // 5274\n                    var clockSetTimeout = this.clock.setTimeout;                                                       // 5275\n                    var clockSetInterval = this.clock.setInterval;                                                     // 5276\n                    var server = this;                                                                                 // 5277\n                                                                                                                       // 5278\n                    this.clock.setTimeout = function (fn, timeout) {                                                   // 5279\n                        server.longestTimeout = Math.max(timeout, server.longestTimeout || 0);                         // 5280\n                                                                                                                       // 5281\n                        return clockSetTimeout.apply(this, arguments);                                                 // 5282\n                    };                                                                                                 // 5283\n                                                                                                                       // 5284\n                    this.clock.setInterval = function (fn, timeout) {                                                  // 5285\n                        server.longestTimeout = Math.max(timeout, server.longestTimeout || 0);                         // 5286\n                                                                                                                       // 5287\n                        return clockSetInterval.apply(this, arguments);                                                // 5288\n                    };                                                                                                 // 5289\n                }                                                                                                      // 5290\n            }                                                                                                          // 5291\n                                                                                                                       // 5292\n            return sinon.fakeServer.addRequest.call(this, xhr);                                                        // 5293\n        };                                                                                                             // 5294\n                                                                                                                       // 5295\n        sinon.fakeServerWithClock.respond = function respond() {                                                       // 5296\n            var returnVal = sinon.fakeServer.respond.apply(this, arguments);                                           // 5297\n                                                                                                                       // 5298\n            if (this.clock) {                                                                                          // 5299\n                this.clock.tick(this.longestTimeout || 0);                                                             // 5300\n                this.longestTimeout = 0;                                                                               // 5301\n                                                                                                                       // 5302\n                if (this.resetClock) {                                                                                 // 5303\n                    this.clock.restore();                                                                              // 5304\n                    this.resetClock = false;                                                                           // 5305\n                }                                                                                                      // 5306\n            }                                                                                                          // 5307\n                                                                                                                       // 5308\n            return returnVal;                                                                                          // 5309\n        };                                                                                                             // 5310\n                                                                                                                       // 5311\n        sinon.fakeServerWithClock.restore = function restore() {                                                       // 5312\n            if (this.clock) {                                                                                          // 5313\n                this.clock.restore();                                                                                  // 5314\n            }                                                                                                          // 5315\n                                                                                                                       // 5316\n            return sinon.fakeServer.restore.apply(this, arguments);                                                    // 5317\n        };                                                                                                             // 5318\n    }                                                                                                                  // 5319\n                                                                                                                       // 5320\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 5321\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 5322\n                                                                                                                       // 5323\n    function loadDependencies(require) {                                                                               // 5324\n        var sinon = require(\"./core\");                                                                                 // 5325\n        require(\"./fake_server\");                                                                                      // 5326\n        require(\"./fake_timers\");                                                                                      // 5327\n        makeApi(sinon);                                                                                                // 5328\n    }                                                                                                                  // 5329\n                                                                                                                       // 5330\n    if (isAMD) {                                                                                                       // 5331\n        define(loadDependencies);                                                                                      // 5332\n    } else if (isNode) {                                                                                               // 5333\n        loadDependencies(require);                                                                                     // 5334\n    } else {                                                                                                           // 5335\n        makeApi(sinon);                                                                                                // 5336\n    }                                                                                                                  // 5337\n}());                                                                                                                  // 5338\n                                                                                                                       // 5339\n/**                                                                                                                    // 5340\n * @depend util/core.js                                                                                                // 5341\n * @depend extend.js                                                                                                   // 5342\n * @depend collection.js                                                                                               // 5343\n * @depend util/fake_timers.js                                                                                         // 5344\n * @depend util/fake_server_with_clock.js                                                                              // 5345\n */                                                                                                                    // 5346\n/**                                                                                                                    // 5347\n * Manages fake collections as well as fake utilities such as Sinon's                                                  // 5348\n * timers and fake XHR implementation in one convenient object.                                                        // 5349\n *                                                                                                                     // 5350\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 5351\n * @license BSD                                                                                                        // 5352\n *                                                                                                                     // 5353\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 5354\n */                                                                                                                    // 5355\n                                                                                                                       // 5356\n(function () {                                                                                                         // 5357\n    function makeApi(sinon) {                                                                                          // 5358\n        var push = [].push;                                                                                            // 5359\n                                                                                                                       // 5360\n        function exposeValue(sandbox, config, key, value) {                                                            // 5361\n            if (!value) {                                                                                              // 5362\n                return;                                                                                                // 5363\n            }                                                                                                          // 5364\n                                                                                                                       // 5365\n            if (config.injectInto && !(key in config.injectInto)) {                                                    // 5366\n                config.injectInto[key] = value;                                                                        // 5367\n                sandbox.injectedKeys.push(key);                                                                        // 5368\n            } else {                                                                                                   // 5369\n                push.call(sandbox.args, value);                                                                        // 5370\n            }                                                                                                          // 5371\n        }                                                                                                              // 5372\n                                                                                                                       // 5373\n        function prepareSandboxFromConfig(config) {                                                                    // 5374\n            var sandbox = sinon.create(sinon.sandbox);                                                                 // 5375\n                                                                                                                       // 5376\n            if (config.useFakeServer) {                                                                                // 5377\n                if (typeof config.useFakeServer == \"object\") {                                                         // 5378\n                    sandbox.serverPrototype = config.useFakeServer;                                                    // 5379\n                }                                                                                                      // 5380\n                                                                                                                       // 5381\n                sandbox.useFakeServer();                                                                               // 5382\n            }                                                                                                          // 5383\n                                                                                                                       // 5384\n            if (config.useFakeTimers) {                                                                                // 5385\n                if (typeof config.useFakeTimers == \"object\") {                                                         // 5386\n                    sandbox.useFakeTimers.apply(sandbox, config.useFakeTimers);                                        // 5387\n                } else {                                                                                               // 5388\n                    sandbox.useFakeTimers();                                                                           // 5389\n                }                                                                                                      // 5390\n            }                                                                                                          // 5391\n                                                                                                                       // 5392\n            return sandbox;                                                                                            // 5393\n        }                                                                                                              // 5394\n                                                                                                                       // 5395\n        sinon.sandbox = sinon.extend(sinon.create(sinon.collection), {                                                 // 5396\n            useFakeTimers: function useFakeTimers() {                                                                  // 5397\n                this.clock = sinon.useFakeTimers.apply(sinon, arguments);                                              // 5398\n                                                                                                                       // 5399\n                return this.add(this.clock);                                                                           // 5400\n            },                                                                                                         // 5401\n                                                                                                                       // 5402\n            serverPrototype: sinon.fakeServer,                                                                         // 5403\n                                                                                                                       // 5404\n            useFakeServer: function useFakeServer() {                                                                  // 5405\n                var proto = this.serverPrototype || sinon.fakeServer;                                                  // 5406\n                                                                                                                       // 5407\n                if (!proto || !proto.create) {                                                                         // 5408\n                    return null;                                                                                       // 5409\n                }                                                                                                      // 5410\n                                                                                                                       // 5411\n                this.server = proto.create();                                                                          // 5412\n                return this.add(this.server);                                                                          // 5413\n            },                                                                                                         // 5414\n                                                                                                                       // 5415\n            inject: function (obj) {                                                                                   // 5416\n                sinon.collection.inject.call(this, obj);                                                               // 5417\n                                                                                                                       // 5418\n                if (this.clock) {                                                                                      // 5419\n                    obj.clock = this.clock;                                                                            // 5420\n                }                                                                                                      // 5421\n                                                                                                                       // 5422\n                if (this.server) {                                                                                     // 5423\n                    obj.server = this.server;                                                                          // 5424\n                    obj.requests = this.server.requests;                                                               // 5425\n                }                                                                                                      // 5426\n                                                                                                                       // 5427\n                obj.match = sinon.match;                                                                               // 5428\n                                                                                                                       // 5429\n                return obj;                                                                                            // 5430\n            },                                                                                                         // 5431\n                                                                                                                       // 5432\n            restore: function () {                                                                                     // 5433\n                sinon.collection.restore.apply(this, arguments);                                                       // 5434\n                this.restoreContext();                                                                                 // 5435\n            },                                                                                                         // 5436\n                                                                                                                       // 5437\n            restoreContext: function () {                                                                              // 5438\n                if (this.injectedKeys) {                                                                               // 5439\n                    for (var i = 0, j = this.injectedKeys.length; i < j; i++) {                                        // 5440\n                        delete this.injectInto[this.injectedKeys[i]];                                                  // 5441\n                    }                                                                                                  // 5442\n                    this.injectedKeys = [];                                                                            // 5443\n                }                                                                                                      // 5444\n            },                                                                                                         // 5445\n                                                                                                                       // 5446\n            create: function (config) {                                                                                // 5447\n                if (!config) {                                                                                         // 5448\n                    return sinon.create(sinon.sandbox);                                                                // 5449\n                }                                                                                                      // 5450\n                                                                                                                       // 5451\n                var sandbox = prepareSandboxFromConfig(config);                                                        // 5452\n                sandbox.args = sandbox.args || [];                                                                     // 5453\n                sandbox.injectedKeys = [];                                                                             // 5454\n                sandbox.injectInto = config.injectInto;                                                                // 5455\n                var prop, value, exposed = sandbox.inject({});                                                         // 5456\n                                                                                                                       // 5457\n                if (config.properties) {                                                                               // 5458\n                    for (var i = 0, l = config.properties.length; i < l; i++) {                                        // 5459\n                        prop = config.properties[i];                                                                   // 5460\n                        value = exposed[prop] || prop == \"sandbox\" && sandbox;                                         // 5461\n                        exposeValue(sandbox, config, prop, value);                                                     // 5462\n                    }                                                                                                  // 5463\n                } else {                                                                                               // 5464\n                    exposeValue(sandbox, config, \"sandbox\", value);                                                    // 5465\n                }                                                                                                      // 5466\n                                                                                                                       // 5467\n                return sandbox;                                                                                        // 5468\n            },                                                                                                         // 5469\n                                                                                                                       // 5470\n            match: sinon.match                                                                                         // 5471\n        });                                                                                                            // 5472\n                                                                                                                       // 5473\n        sinon.sandbox.useFakeXMLHttpRequest = sinon.sandbox.useFakeServer;                                             // 5474\n                                                                                                                       // 5475\n        return sinon.sandbox;                                                                                          // 5476\n    }                                                                                                                  // 5477\n                                                                                                                       // 5478\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 5479\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 5480\n                                                                                                                       // 5481\n    function loadDependencies(require, exports, module) {                                                              // 5482\n        var sinon = require(\"./util/core\");                                                                            // 5483\n        require(\"./extend\");                                                                                           // 5484\n        require(\"./util/fake_server_with_clock\");                                                                      // 5485\n        require(\"./util/fake_timers\");                                                                                 // 5486\n        require(\"./collection\");                                                                                       // 5487\n        module.exports = makeApi(sinon);                                                                               // 5488\n    }                                                                                                                  // 5489\n                                                                                                                       // 5490\n    if (isAMD) {                                                                                                       // 5491\n        define(loadDependencies);                                                                                      // 5492\n    } else if (isNode) {                                                                                               // 5493\n        loadDependencies(require, module.exports, module);                                                             // 5494\n    } else if (!sinon) {                                                                                               // 5495\n        return;                                                                                                        // 5496\n    } else {                                                                                                           // 5497\n        makeApi(sinon);                                                                                                // 5498\n    }                                                                                                                  // 5499\n}());                                                                                                                  // 5500\n                                                                                                                       // 5501\n/**                                                                                                                    // 5502\n * @depend util/core.js                                                                                                // 5503\n * @depend sandbox.js                                                                                                  // 5504\n */                                                                                                                    // 5505\n/**                                                                                                                    // 5506\n * Test function, sandboxes fakes                                                                                      // 5507\n *                                                                                                                     // 5508\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 5509\n * @license BSD                                                                                                        // 5510\n *                                                                                                                     // 5511\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 5512\n */                                                                                                                    // 5513\n                                                                                                                       // 5514\n(function (sinon) {                                                                                                    // 5515\n    function makeApi(sinon) {                                                                                          // 5516\n        var slice = Array.prototype.slice;                                                                             // 5517\n                                                                                                                       // 5518\n        function test(callback) {                                                                                      // 5519\n            var type = typeof callback;                                                                                // 5520\n                                                                                                                       // 5521\n            if (type != \"function\") {                                                                                  // 5522\n                throw new TypeError(\"sinon.test needs to wrap a test function, got \" + type);                          // 5523\n            }                                                                                                          // 5524\n                                                                                                                       // 5525\n            function sinonSandboxedTest() {                                                                            // 5526\n                var config = sinon.getConfig(sinon.config);                                                            // 5527\n                config.injectInto = config.injectIntoThis && this || config.injectInto;                                // 5528\n                var sandbox = sinon.sandbox.create(config);                                                            // 5529\n                var args = slice.call(arguments);                                                                      // 5530\n                var oldDone = args.length && args[args.length - 1];                                                    // 5531\n                var exception, result;                                                                                 // 5532\n                                                                                                                       // 5533\n                if (typeof oldDone == \"function\") {                                                                    // 5534\n                    args[args.length - 1] = function sinonDone(result) {                                               // 5535\n                        if (result) {                                                                                  // 5536\n                            sandbox.restore();                                                                         // 5537\n                            throw exception;                                                                           // 5538\n                        } else {                                                                                       // 5539\n                            sandbox.verifyAndRestore();                                                                // 5540\n                        }                                                                                              // 5541\n                        oldDone(result);                                                                               // 5542\n                    };                                                                                                 // 5543\n                }                                                                                                      // 5544\n                                                                                                                       // 5545\n                try {                                                                                                  // 5546\n                    result = callback.apply(this, args.concat(sandbox.args));                                          // 5547\n                } catch (e) {                                                                                          // 5548\n                    exception = e;                                                                                     // 5549\n                }                                                                                                      // 5550\n                                                                                                                       // 5551\n                if (typeof oldDone != \"function\") {                                                                    // 5552\n                    if (typeof exception !== \"undefined\") {                                                            // 5553\n                        sandbox.restore();                                                                             // 5554\n                        throw exception;                                                                               // 5555\n                    } else {                                                                                           // 5556\n                        sandbox.verifyAndRestore();                                                                    // 5557\n                    }                                                                                                  // 5558\n                }                                                                                                      // 5559\n                                                                                                                       // 5560\n                return result;                                                                                         // 5561\n            }                                                                                                          // 5562\n                                                                                                                       // 5563\n            if (callback.length) {                                                                                     // 5564\n                return function sinonAsyncSandboxedTest(callback) {                                                    // 5565\n                    return sinonSandboxedTest.apply(this, arguments);                                                  // 5566\n                };                                                                                                     // 5567\n            }                                                                                                          // 5568\n                                                                                                                       // 5569\n            return sinonSandboxedTest;                                                                                 // 5570\n        }                                                                                                              // 5571\n                                                                                                                       // 5572\n        test.config = {                                                                                                // 5573\n            injectIntoThis: true,                                                                                      // 5574\n            injectInto: null,                                                                                          // 5575\n            properties: [\"spy\", \"stub\", \"mock\", \"clock\", \"server\", \"requests\"],                                        // 5576\n            useFakeTimers: true,                                                                                       // 5577\n            useFakeServer: true                                                                                        // 5578\n        };                                                                                                             // 5579\n                                                                                                                       // 5580\n        sinon.test = test;                                                                                             // 5581\n        return test;                                                                                                   // 5582\n    }                                                                                                                  // 5583\n                                                                                                                       // 5584\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 5585\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 5586\n                                                                                                                       // 5587\n    function loadDependencies(require, exports, module) {                                                              // 5588\n        var sinon = require(\"./util/core\");                                                                            // 5589\n        require(\"./sandbox\");                                                                                          // 5590\n        module.exports = makeApi(sinon);                                                                               // 5591\n    }                                                                                                                  // 5592\n                                                                                                                       // 5593\n    if (isAMD) {                                                                                                       // 5594\n        define(loadDependencies);                                                                                      // 5595\n    } else if (isNode) {                                                                                               // 5596\n        loadDependencies(require, module.exports, module);                                                             // 5597\n    } else if (sinon) {                                                                                                // 5598\n        makeApi(sinon);                                                                                                // 5599\n    }                                                                                                                  // 5600\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 5601\n                                                                                                                       // 5602\n/**                                                                                                                    // 5603\n * @depend util/core.js                                                                                                // 5604\n * @depend test.js                                                                                                     // 5605\n */                                                                                                                    // 5606\n/**                                                                                                                    // 5607\n * Test case, sandboxes all test functions                                                                             // 5608\n *                                                                                                                     // 5609\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 5610\n * @license BSD                                                                                                        // 5611\n *                                                                                                                     // 5612\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 5613\n */                                                                                                                    // 5614\n                                                                                                                       // 5615\n(function (sinon) {                                                                                                    // 5616\n    function createTest(property, setUp, tearDown) {                                                                   // 5617\n        return function () {                                                                                           // 5618\n            if (setUp) {                                                                                               // 5619\n                setUp.apply(this, arguments);                                                                          // 5620\n            }                                                                                                          // 5621\n                                                                                                                       // 5622\n            var exception, result;                                                                                     // 5623\n                                                                                                                       // 5624\n            try {                                                                                                      // 5625\n                result = property.apply(this, arguments);                                                              // 5626\n            } catch (e) {                                                                                              // 5627\n                exception = e;                                                                                         // 5628\n            }                                                                                                          // 5629\n                                                                                                                       // 5630\n            if (tearDown) {                                                                                            // 5631\n                tearDown.apply(this, arguments);                                                                       // 5632\n            }                                                                                                          // 5633\n                                                                                                                       // 5634\n            if (exception) {                                                                                           // 5635\n                throw exception;                                                                                       // 5636\n            }                                                                                                          // 5637\n                                                                                                                       // 5638\n            return result;                                                                                             // 5639\n        };                                                                                                             // 5640\n    }                                                                                                                  // 5641\n                                                                                                                       // 5642\n    function makeApi(sinon) {                                                                                          // 5643\n        function testCase(tests, prefix) {                                                                             // 5644\n            /*jsl:ignore*/                                                                                             // 5645\n            if (!tests || typeof tests != \"object\") {                                                                  // 5646\n                throw new TypeError(\"sinon.testCase needs an object with test functions\");                             // 5647\n            }                                                                                                          // 5648\n            /*jsl:end*/                                                                                                // 5649\n                                                                                                                       // 5650\n            prefix = prefix || \"test\";                                                                                 // 5651\n            var rPrefix = new RegExp(\"^\" + prefix);                                                                    // 5652\n            var methods = {}, testName, property, method;                                                              // 5653\n            var setUp = tests.setUp;                                                                                   // 5654\n            var tearDown = tests.tearDown;                                                                             // 5655\n                                                                                                                       // 5656\n            for (testName in tests) {                                                                                  // 5657\n                if (tests.hasOwnProperty(testName)) {                                                                  // 5658\n                    property = tests[testName];                                                                        // 5659\n                                                                                                                       // 5660\n                    if (/^(setUp|tearDown)$/.test(testName)) {                                                         // 5661\n                        continue;                                                                                      // 5662\n                    }                                                                                                  // 5663\n                                                                                                                       // 5664\n                    if (typeof property == \"function\" && rPrefix.test(testName)) {                                     // 5665\n                        method = property;                                                                             // 5666\n                                                                                                                       // 5667\n                        if (setUp || tearDown) {                                                                       // 5668\n                            method = createTest(property, setUp, tearDown);                                            // 5669\n                        }                                                                                              // 5670\n                                                                                                                       // 5671\n                        methods[testName] = sinon.test(method);                                                        // 5672\n                    } else {                                                                                           // 5673\n                        methods[testName] = tests[testName];                                                           // 5674\n                    }                                                                                                  // 5675\n                }                                                                                                      // 5676\n            }                                                                                                          // 5677\n                                                                                                                       // 5678\n            return methods;                                                                                            // 5679\n        }                                                                                                              // 5680\n                                                                                                                       // 5681\n        sinon.testCase = testCase;                                                                                     // 5682\n        return testCase;                                                                                               // 5683\n    }                                                                                                                  // 5684\n                                                                                                                       // 5685\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 5686\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 5687\n                                                                                                                       // 5688\n    function loadDependencies(require, exports, module) {                                                              // 5689\n        var sinon = require(\"./util/core\");                                                                            // 5690\n        require(\"./test\");                                                                                             // 5691\n        module.exports = makeApi(sinon);                                                                               // 5692\n    }                                                                                                                  // 5693\n                                                                                                                       // 5694\n    if (isAMD) {                                                                                                       // 5695\n        define(loadDependencies);                                                                                      // 5696\n    } else if (isNode) {                                                                                               // 5697\n        loadDependencies(require, module.exports, module);                                                             // 5698\n    } else if (!sinon) {                                                                                               // 5699\n        return;                                                                                                        // 5700\n    } else {                                                                                                           // 5701\n        makeApi(sinon);                                                                                                // 5702\n    }                                                                                                                  // 5703\n}(typeof sinon == \"object\" && sinon || null));                                                                         // 5704\n                                                                                                                       // 5705\n/**                                                                                                                    // 5706\n * @depend times_in_words.js                                                                                           // 5707\n * @depend util/core.js                                                                                                // 5708\n * @depend match.js                                                                                                    // 5709\n * @depend format.js                                                                                                   // 5710\n */                                                                                                                    // 5711\n/**                                                                                                                    // 5712\n * Assertions matching the test spy retrieval interface.                                                               // 5713\n *                                                                                                                     // 5714\n * @author Christian Johansen (christian@cjohansen.no)                                                                 // 5715\n * @license BSD                                                                                                        // 5716\n *                                                                                                                     // 5717\n * Copyright (c) 2010-2013 Christian Johansen                                                                          // 5718\n */                                                                                                                    // 5719\n                                                                                                                       // 5720\n(function (sinon, global) {                                                                                            // 5721\n    var slice = Array.prototype.slice;                                                                                 // 5722\n                                                                                                                       // 5723\n    function makeApi(sinon) {                                                                                          // 5724\n        var assert;                                                                                                    // 5725\n                                                                                                                       // 5726\n        function verifyIsStub() {                                                                                      // 5727\n            var method;                                                                                                // 5728\n                                                                                                                       // 5729\n            for (var i = 0, l = arguments.length; i < l; ++i) {                                                        // 5730\n                method = arguments[i];                                                                                 // 5731\n                                                                                                                       // 5732\n                if (!method) {                                                                                         // 5733\n                    assert.fail(\"fake is not a spy\");                                                                  // 5734\n                }                                                                                                      // 5735\n                                                                                                                       // 5736\n                if (method.proxy) {                                                                                    // 5737\n                    verifyIsStub(method.proxy);                                                                        // 5738\n                } else {                                                                                               // 5739\n                    if (typeof method != \"function\") {                                                                 // 5740\n                        assert.fail(method + \" is not a function\");                                                    // 5741\n                    }                                                                                                  // 5742\n                                                                                                                       // 5743\n                    if (typeof method.getCall != \"function\") {                                                         // 5744\n                        assert.fail(method + \" is not stubbed\");                                                       // 5745\n                    }                                                                                                  // 5746\n                }                                                                                                      // 5747\n                                                                                                                       // 5748\n            }                                                                                                          // 5749\n        }                                                                                                              // 5750\n                                                                                                                       // 5751\n        function failAssertion(object, msg) {                                                                          // 5752\n            object = object || global;                                                                                 // 5753\n            var failMethod = object.fail || assert.fail;                                                               // 5754\n            failMethod.call(object, msg);                                                                              // 5755\n        }                                                                                                              // 5756\n                                                                                                                       // 5757\n        function mirrorPropAsAssertion(name, method, message) {                                                        // 5758\n            if (arguments.length == 2) {                                                                               // 5759\n                message = method;                                                                                      // 5760\n                method = name;                                                                                         // 5761\n            }                                                                                                          // 5762\n                                                                                                                       // 5763\n            assert[name] = function (fake) {                                                                           // 5764\n                verifyIsStub(fake);                                                                                    // 5765\n                                                                                                                       // 5766\n                var args = slice.call(arguments, 1);                                                                   // 5767\n                var failed = false;                                                                                    // 5768\n                                                                                                                       // 5769\n                if (typeof method == \"function\") {                                                                     // 5770\n                    failed = !method(fake);                                                                            // 5771\n                } else {                                                                                               // 5772\n                    failed = typeof fake[method] == \"function\" ?                                                       // 5773\n                        !fake[method].apply(fake, args) : !fake[method];                                               // 5774\n                }                                                                                                      // 5775\n                                                                                                                       // 5776\n                if (failed) {                                                                                          // 5777\n                    failAssertion(this, (fake.printf || fake.proxy.printf).apply(fake, [message].concat(args)));       // 5778\n                } else {                                                                                               // 5779\n                    assert.pass(name);                                                                                 // 5780\n                }                                                                                                      // 5781\n            };                                                                                                         // 5782\n        }                                                                                                              // 5783\n                                                                                                                       // 5784\n        function exposedName(prefix, prop) {                                                                           // 5785\n            return !prefix || /^fail/.test(prop) ? prop :                                                              // 5786\n                prefix + prop.slice(0, 1).toUpperCase() + prop.slice(1);                                               // 5787\n        }                                                                                                              // 5788\n                                                                                                                       // 5789\n        assert = {                                                                                                     // 5790\n            failException: \"AssertError\",                                                                              // 5791\n                                                                                                                       // 5792\n            fail: function fail(message) {                                                                             // 5793\n                var error = new Error(message);                                                                        // 5794\n                error.name = this.failException || assert.failException;                                               // 5795\n                                                                                                                       // 5796\n                throw error;                                                                                           // 5797\n            },                                                                                                         // 5798\n                                                                                                                       // 5799\n            pass: function pass(assertion) {},                                                                         // 5800\n                                                                                                                       // 5801\n            callOrder: function assertCallOrder() {                                                                    // 5802\n                verifyIsStub.apply(null, arguments);                                                                   // 5803\n                var expected = \"\", actual = \"\";                                                                        // 5804\n                                                                                                                       // 5805\n                if (!sinon.calledInOrder(arguments)) {                                                                 // 5806\n                    try {                                                                                              // 5807\n                        expected = [].join.call(arguments, \", \");                                                      // 5808\n                        var calls = slice.call(arguments);                                                             // 5809\n                        var i = calls.length;                                                                          // 5810\n                        while (i) {                                                                                    // 5811\n                            if (!calls[--i].called) {                                                                  // 5812\n                                calls.splice(i, 1);                                                                    // 5813\n                            }                                                                                          // 5814\n                        }                                                                                              // 5815\n                        actual = sinon.orderByFirstCall(calls).join(\", \");                                             // 5816\n                    } catch (e) {                                                                                      // 5817\n                        // If this fails, we'll just fall back to the blank string                                     // 5818\n                    }                                                                                                  // 5819\n                                                                                                                       // 5820\n                    failAssertion(this, \"expected \" + expected + \" to be \" +                                           // 5821\n                                \"called in order but were called as \" + actual);                                       // 5822\n                } else {                                                                                               // 5823\n                    assert.pass(\"callOrder\");                                                                          // 5824\n                }                                                                                                      // 5825\n            },                                                                                                         // 5826\n                                                                                                                       // 5827\n            callCount: function assertCallCount(method, count) {                                                       // 5828\n                verifyIsStub(method);                                                                                  // 5829\n                                                                                                                       // 5830\n                if (method.callCount != count) {                                                                       // 5831\n                    var msg = \"expected %n to be called \" + sinon.timesInWords(count) +                                // 5832\n                        \" but was called %c%C\";                                                                        // 5833\n                    failAssertion(this, method.printf(msg));                                                           // 5834\n                } else {                                                                                               // 5835\n                    assert.pass(\"callCount\");                                                                          // 5836\n                }                                                                                                      // 5837\n            },                                                                                                         // 5838\n                                                                                                                       // 5839\n            expose: function expose(target, options) {                                                                 // 5840\n                if (!target) {                                                                                         // 5841\n                    throw new TypeError(\"target is null or undefined\");                                                // 5842\n                }                                                                                                      // 5843\n                                                                                                                       // 5844\n                var o = options || {};                                                                                 // 5845\n                var prefix = typeof o.prefix == \"undefined\" && \"assert\" || o.prefix;                                   // 5846\n                var includeFail = typeof o.includeFail == \"undefined\" || !!o.includeFail;                              // 5847\n                                                                                                                       // 5848\n                for (var method in this) {                                                                             // 5849\n                    if (method != \"expose\" && (includeFail || !/^(fail)/.test(method))) {                              // 5850\n                        target[exposedName(prefix, method)] = this[method];                                            // 5851\n                    }                                                                                                  // 5852\n                }                                                                                                      // 5853\n                                                                                                                       // 5854\n                return target;                                                                                         // 5855\n            },                                                                                                         // 5856\n                                                                                                                       // 5857\n            match: function match(actual, expectation) {                                                               // 5858\n                var matcher = sinon.match(expectation);                                                                // 5859\n                if (matcher.test(actual)) {                                                                            // 5860\n                    assert.pass(\"match\");                                                                              // 5861\n                } else {                                                                                               // 5862\n                    var formatted = [                                                                                  // 5863\n                        \"expected value to match\",                                                                     // 5864\n                        \"    expected = \" + sinon.format(expectation),                                                 // 5865\n                        \"    actual = \" + sinon.format(actual)                                                         // 5866\n                    ]                                                                                                  // 5867\n                    failAssertion(this, formatted.join(\"\\n\"));                                                         // 5868\n                }                                                                                                      // 5869\n            }                                                                                                          // 5870\n        };                                                                                                             // 5871\n                                                                                                                       // 5872\n        mirrorPropAsAssertion(\"called\", \"expected %n to have been called at least once but was never called\");         // 5873\n        mirrorPropAsAssertion(\"notCalled\", function (spy) { return !spy.called; },                                     // 5874\n                            \"expected %n to not have been called but was called %c%C\");                                // 5875\n        mirrorPropAsAssertion(\"calledOnce\", \"expected %n to be called once but was called %c%C\");                      // 5876\n        mirrorPropAsAssertion(\"calledTwice\", \"expected %n to be called twice but was called %c%C\");                    // 5877\n        mirrorPropAsAssertion(\"calledThrice\", \"expected %n to be called thrice but was called %c%C\");                  // 5878\n        mirrorPropAsAssertion(\"calledOn\", \"expected %n to be called with %1 as this but was called with %t\");          // 5879\n        mirrorPropAsAssertion(\"alwaysCalledOn\", \"expected %n to always be called with %1 as this but was called with %t\");\n        mirrorPropAsAssertion(\"calledWithNew\", \"expected %n to be called with new\");                                   // 5881\n        mirrorPropAsAssertion(\"alwaysCalledWithNew\", \"expected %n to always be called with new\");                      // 5882\n        mirrorPropAsAssertion(\"calledWith\", \"expected %n to be called with arguments %*%C\");                           // 5883\n        mirrorPropAsAssertion(\"calledWithMatch\", \"expected %n to be called with match %*%C\");                          // 5884\n        mirrorPropAsAssertion(\"alwaysCalledWith\", \"expected %n to always be called with arguments %*%C\");              // 5885\n        mirrorPropAsAssertion(\"alwaysCalledWithMatch\", \"expected %n to always be called with match %*%C\");             // 5886\n        mirrorPropAsAssertion(\"calledWithExactly\", \"expected %n to be called with exact arguments %*%C\");              // 5887\n        mirrorPropAsAssertion(\"alwaysCalledWithExactly\", \"expected %n to always be called with exact arguments %*%C\"); // 5888\n        mirrorPropAsAssertion(\"neverCalledWith\", \"expected %n to never be called with arguments %*%C\");                // 5889\n        mirrorPropAsAssertion(\"neverCalledWithMatch\", \"expected %n to never be called with match %*%C\");               // 5890\n        mirrorPropAsAssertion(\"threw\", \"%n did not throw exception%C\");                                                // 5891\n        mirrorPropAsAssertion(\"alwaysThrew\", \"%n did not always throw exception%C\");                                   // 5892\n                                                                                                                       // 5893\n        sinon.assert = assert;                                                                                         // 5894\n        return assert;                                                                                                 // 5895\n    }                                                                                                                  // 5896\n                                                                                                                       // 5897\n    var isNode = typeof module !== \"undefined\" && module.exports && typeof require == \"function\";                      // 5898\n    var isAMD = typeof define === \"function\" && typeof define.amd === \"object\" && define.amd;                          // 5899\n                                                                                                                       // 5900\n    function loadDependencies(require, exports, module) {                                                              // 5901\n        var sinon = require(\"./util/core\");                                                                            // 5902\n        require(\"./match\");                                                                                            // 5903\n        require(\"./format\");                                                                                           // 5904\n        module.exports = makeApi(sinon);                                                                               // 5905\n    }                                                                                                                  // 5906\n                                                                                                                       // 5907\n    if (isAMD) {                                                                                                       // 5908\n        define(loadDependencies);                                                                                      // 5909\n    } else if (isNode) {                                                                                               // 5910\n        loadDependencies(require, module.exports, module);                                                             // 5911\n    } else if (!sinon) {                                                                                               // 5912\n        return;                                                                                                        // 5913\n    } else {                                                                                                           // 5914\n        makeApi(sinon);                                                                                                // 5915\n    }                                                                                                                  // 5916\n                                                                                                                       // 5917\n}(typeof sinon == \"object\" && sinon || null, typeof window != \"undefined\" ? window : (typeof self != \"undefined\") ? self : global));\n                                                                                                                       // 5919\n  return sinon;                                                                                                        // 5920\n}.call(this));                                                                                                         // 5921\n                                                                                                                       // 5922\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor:sinon/sinon-chai-2.6.0.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nsinonChai = this.sinonChai = function(chai, utils) {                                                                   // 1\n    \"use strict\";                                                                                                      // 2\n                                                                                                                       // 3\n    var slice = Array.prototype.slice;                                                                                 // 4\n                                                                                                                       // 5\n    function isSpy(putativeSpy) {                                                                                      // 6\n        return typeof putativeSpy === \"function\" &&                                                                    // 7\n               typeof putativeSpy.getCall === \"function\" &&                                                            // 8\n               typeof putativeSpy.calledWithExactly === \"function\";                                                    // 9\n    }                                                                                                                  // 10\n                                                                                                                       // 11\n    function timesInWords(count) {                                                                                     // 12\n        return count === 1 ? \"once\" :                                                                                  // 13\n               count === 2 ? \"twice\" :                                                                                 // 14\n               count === 3 ? \"thrice\" :                                                                                // 15\n               (count || 0) + \" times\";                                                                                // 16\n    }                                                                                                                  // 17\n                                                                                                                       // 18\n    function isCall(putativeCall) {                                                                                    // 19\n        return putativeCall && isSpy(putativeCall.proxy);                                                              // 20\n    }                                                                                                                  // 21\n                                                                                                                       // 22\n    function assertCanWorkWith(assertion) {                                                                            // 23\n        if (!isSpy(assertion._obj) && !isCall(assertion._obj)) {                                                       // 24\n            throw new TypeError(utils.inspect(assertion._obj) + \" is not a spy or a call to a spy!\");                  // 25\n        }                                                                                                              // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    function getMessages(spy, action, nonNegatedSuffix, always, args) {                                                // 29\n        var verbPhrase = always ? \"always have \" : \"have \";                                                            // 30\n        nonNegatedSuffix = nonNegatedSuffix || \"\";                                                                     // 31\n        if (isSpy(spy.proxy)) {                                                                                        // 32\n            spy = spy.proxy;                                                                                           // 33\n        }                                                                                                              // 34\n                                                                                                                       // 35\n        function printfArray(array) {                                                                                  // 36\n            return spy.printf.apply(spy, array);                                                                       // 37\n        }                                                                                                              // 38\n                                                                                                                       // 39\n        return {                                                                                                       // 40\n            affirmative: function () {                                                                                 // 41\n                return printfArray([\"expected %n to \" + verbPhrase + action + nonNegatedSuffix].concat(args));         // 42\n            },                                                                                                         // 43\n            negative: function () {                                                                                    // 44\n                return printfArray([\"expected %n to not \" + verbPhrase + action].concat(args));                        // 45\n            }                                                                                                          // 46\n        };                                                                                                             // 47\n    }                                                                                                                  // 48\n                                                                                                                       // 49\n    function sinonProperty(name, action, nonNegatedSuffix) {                                                           // 50\n        utils.addProperty(chai.Assertion.prototype, name, function () {                                                // 51\n            assertCanWorkWith(this);                                                                                   // 52\n                                                                                                                       // 53\n            var messages = getMessages(this._obj, action, nonNegatedSuffix, false);                                    // 54\n            this.assert(this._obj[name], messages.affirmative, messages.negative);                                     // 55\n        });                                                                                                            // 56\n    }                                                                                                                  // 57\n                                                                                                                       // 58\n    function sinonPropertyAsBooleanMethod(name, action, nonNegatedSuffix) {                                            // 59\n        utils.addMethod(chai.Assertion.prototype, name, function (arg) {                                               // 60\n            assertCanWorkWith(this);                                                                                   // 61\n                                                                                                                       // 62\n            var messages = getMessages(this._obj, action, nonNegatedSuffix, false, [timesInWords(arg)]);               // 63\n            this.assert(this._obj[name] === arg, messages.affirmative, messages.negative);                             // 64\n        });                                                                                                            // 65\n    }                                                                                                                  // 66\n                                                                                                                       // 67\n    function createSinonMethodHandler(sinonName, action, nonNegatedSuffix) {                                           // 68\n        return function () {                                                                                           // 69\n            assertCanWorkWith(this);                                                                                   // 70\n                                                                                                                       // 71\n            var alwaysSinonMethod = \"always\" + sinonName[0].toUpperCase() + sinonName.substring(1);                    // 72\n            var shouldBeAlways = utils.flag(this, \"always\") && typeof this._obj[alwaysSinonMethod] === \"function\";     // 73\n            var sinonMethod = shouldBeAlways ? alwaysSinonMethod : sinonName;                                          // 74\n                                                                                                                       // 75\n            var messages = getMessages(this._obj, action, nonNegatedSuffix, shouldBeAlways, slice.call(arguments));    // 76\n            this.assert(this._obj[sinonMethod].apply(this._obj, arguments), messages.affirmative, messages.negative);  // 77\n        };                                                                                                             // 78\n    }                                                                                                                  // 79\n                                                                                                                       // 80\n    function sinonMethodAsProperty(name, action, nonNegatedSuffix) {                                                   // 81\n        var handler = createSinonMethodHandler(name, action, nonNegatedSuffix);                                        // 82\n        utils.addProperty(chai.Assertion.prototype, name, handler);                                                    // 83\n    }                                                                                                                  // 84\n                                                                                                                       // 85\n    function exceptionalSinonMethod(chaiName, sinonName, action, nonNegatedSuffix) {                                   // 86\n        var handler = createSinonMethodHandler(sinonName, action, nonNegatedSuffix);                                   // 87\n        utils.addMethod(chai.Assertion.prototype, chaiName, handler);                                                  // 88\n    }                                                                                                                  // 89\n                                                                                                                       // 90\n    function sinonMethod(name, action, nonNegatedSuffix) {                                                             // 91\n        exceptionalSinonMethod(name, name, action, nonNegatedSuffix);                                                  // 92\n    }                                                                                                                  // 93\n                                                                                                                       // 94\n    utils.addProperty(chai.Assertion.prototype, \"always\", function () {                                                // 95\n        utils.flag(this, \"always\", true);                                                                              // 96\n    });                                                                                                                // 97\n                                                                                                                       // 98\n    sinonProperty(\"called\", \"been called\", \" at least once, but it was never called\");                                 // 99\n    sinonPropertyAsBooleanMethod(\"callCount\", \"been called exactly %1\", \", but it was called %c%C\");                   // 100\n    sinonProperty(\"calledOnce\", \"been called exactly once\", \", but it was called %c%C\");                               // 101\n    sinonProperty(\"calledTwice\", \"been called exactly twice\", \", but it was called %c%C\");                             // 102\n    sinonProperty(\"calledThrice\", \"been called exactly thrice\", \", but it was called %c%C\");                           // 103\n    sinonMethodAsProperty(\"calledWithNew\", \"been called with new\");                                                    // 104\n    sinonMethod(\"calledBefore\", \"been called before %1\");                                                              // 105\n    sinonMethod(\"calledAfter\", \"been called after %1\");                                                                // 106\n    sinonMethod(\"calledOn\", \"been called with %1 as this\", \", but it was called with %t instead\");                     // 107\n    sinonMethod(\"calledWith\", \"been called with arguments %*\", \"%C\");                                                  // 108\n    sinonMethod(\"calledWithExactly\", \"been called with exact arguments %*\", \"%C\");                                     // 109\n    sinonMethod(\"calledWithMatch\", \"been called with arguments matching %*\", \"%C\");                                    // 110\n    sinonMethod(\"returned\", \"returned %1\");                                                                            // 111\n    exceptionalSinonMethod(\"thrown\", \"threw\", \"thrown %1\");                                                            // 112\n}                                                                                                                      // 113\n                                                                                                                       // 114\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor:sinon/install-sinonChai.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// If the chai package is installed use it                                                                             // 1\nif(Package['practicalmeteor:chai']){                                                                                   // 2\n  chai.use(sinonChai);                                                                                                 // 3\n}                                                                                                                      // 4\n                                                                                                                       // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor:sinon/Helpers.coffee.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar SinonObjects, SinonSpies, SinonStubs,              \n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nSinonObjects = (function() {\n  function SinonObjects() {}\n\n  SinonObjects.prototype.forbiddenNames = ['create', 'get', 'restore', 'restoreAll'];\n\n  SinonObjects.prototype.get = function(name) {\n    return this[name];\n  };\n\n  SinonObjects.prototype.restore = function(name) {\n    if (!this[name]) {\n      console.warn(\"Trying to restore a non-existing spy/stub with name: \" + name);\n      return;\n    }\n    if (this[name].restore) {\n      this[name].restore();\n      delete this[name];\n    }\n  };\n\n  SinonObjects.prototype.restoreAll = function() {\n    var key, _results;\n    _results = [];\n    for (key in this) {\n      _results.push(this.restore(key));\n    }\n    return _results;\n  };\n\n  return SinonObjects;\n\n})();\n\nSinonSpies = (function(_super) {\n  __extends(SinonSpies, _super);\n\n  function SinonSpies() {\n    return SinonSpies.__super__.constructor.apply(this, arguments);\n  }\n\n  SinonSpies.prototype.create = function(name, obj, method) {\n    expect(name).to.be.a(\"string\");\n    if (this.forbiddenNames.indexOf(name) >= 0) {\n      throw Error(\"A spy can't be named '\" + name + \"'. Please choose another name.\");\n    }\n    if (!obj && !method) {\n      return this[name] = sinon.spy();\n    }\n    if (!method) {\n      expect(obj).to.be.a(\"function\");\n      return this[name] = sinon.spy(obj);\n    }\n    expect(method).to.be.a(\"string\");\n    if (this[name]) {\n      this.restore(name);\n    }\n    return this[name] = sinon.spy(obj, method);\n  };\n\n  return SinonSpies;\n\n})(SinonObjects);\n\nSinonStubs = (function(_super) {\n  __extends(SinonStubs, _super);\n\n  function SinonStubs() {\n    return SinonStubs.__super__.constructor.apply(this, arguments);\n  }\n\n  SinonStubs.prototype.create = function(name, obj, method, func) {\n    expect(name).to.be.a(\"string\");\n    if (this.forbiddenNames.indexOf(name) >= 0) {\n      throw Error(\"A stub can't be named '\" + name + \"'. Please choose another name.\");\n    }\n    if (!obj && !method) {\n      return this[name] = sinon.stub();\n    }\n    expect(method).to.be.a(\"string\");\n    if (this[name]) {\n      this.restore(name);\n    }\n    return this[name] = sinon.stub(obj, method, func);\n  };\n\n  return SinonStubs;\n\n})(SinonObjects);\n\nspies = this.spies = new SinonSpies();\n\nstubs = this.stubs = new SinonStubs();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['practicalmeteor:sinon'] = {}, {\n  sinon: sinon,\n  sinonChai: sinonChai,\n  spies: spies,\n  stubs: stubs\n});\n\n})();\n","servePath":"/packages/practicalmeteor_sinon.js"}]
[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Accounts = Package['accounts-base'].Accounts;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar Email = Package.email.Email;\nvar EmailInternals = Package.email.EmailInternals;\nvar ReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nvar T9n = Package['softwarerero:accounts-t9n'].T9n;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar serviceName, message, labels;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"std:accounts-ui\":{\"check-npm.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/check-npm.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// import { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\n//\n// checkNpmVersions({\n//   \"react\": \">=0.14.7 || ^15.0.0-rc.2\",\n//   \"react-dom\": \">=0.14.7 || ^15.0.0-rc.2\",\n// });\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main_server.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/main_server.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  default: () => LoginForm,\n  Accounts: () => Accounts,\n  STATES: () => STATES\n});\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 0);\nmodule.watch(require(\"./imports/accounts_ui.js\"));\nmodule.watch(require(\"./imports/login_session.js\"));\nlet redirect, STATES;\nmodule.watch(require(\"./imports/helpers.js\"), {\n  redirect(v) {\n    redirect = v;\n  },\n\n  STATES(v) {\n    STATES = v;\n  }\n\n}, 1);\nmodule.watch(require(\"./imports/api/server/loginWithoutPassword.js\"));\nmodule.watch(require(\"./imports/api/server/servicesListPublication.js\"));\nlet LoginForm;\nmodule.watch(require(\"./imports/ui/components/LoginForm.jsx\"), {\n  default(v) {\n    LoginForm = v;\n  }\n\n}, 2);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"imports\":{\"accounts_ui.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/accounts_ui.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 0);\nlet redirect, validatePassword, validateEmail, validateUsername;\nmodule.watch(require(\"./helpers.js\"), {\n  redirect(v) {\n    redirect = v;\n  },\n\n  validatePassword(v) {\n    validatePassword = v;\n  },\n\n  validateEmail(v) {\n    validateEmail = v;\n  },\n\n  validateUsername(v) {\n    validateUsername = v;\n  }\n\n}, 1);\n/**\n * @summary Accounts UI\n * @namespace\n * @memberOf Accounts\n */Accounts.ui = {};\nAccounts.ui._options = {\n  requestPermissions: [],\n  requestOfflineToken: {},\n  forceApprovalPrompt: {},\n  requireEmailVerification: false,\n  passwordSignupFields: 'EMAIL_ONLY_NO_PASSWORD',\n  minimumPasswordLength: 7,\n  loginPath: '/',\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: '/',\n  changePasswordPath: null,\n  homeRoutePath: '/',\n  onSubmitHook: () => {},\n  onPreSignUpHook: () => new Promise(resolve => resolve()),\n  onPostSignUpHook: () => {},\n  onEnrollAccountHook: () => redirect(`${Accounts.ui._options.loginPath}`),\n  onResetPasswordHook: () => redirect(`${Accounts.ui._options.loginPath}`),\n  onVerifyEmailHook: () => redirect(`${Accounts.ui._options.profilePath}`),\n  onSignedInHook: () => redirect(`${Accounts.ui._options.homeRoutePath}`),\n  onSignedOutHook: () => redirect(`${Accounts.ui._options.homeRoutePath}`),\n  emailPattern: new RegExp('[^@]+@[^@\\.]{2,}\\.[^\\.@]+')\n}; /**\n    * @summary Configure the behavior of [`<Accounts.ui.LoginForm />`](#react-accounts-ui).\n    * @anywhere\n    * @param {Object} options\n    * @param {Object} options.requestPermissions Which [permissions](#requestpermissions) to request from the user for each external service.\n    * @param {Object} options.requestOfflineToken To ask the user for permission to act on their behalf when offline, map the relevant external service to `true`. Currently only supported with Google. See [Meteor.loginWithExternalService](#meteor_loginwithexternalservice) for more details.\n    * @param {Object} options.forceApprovalPrompt If true, forces the user to approve the app's permissions, even if previously approved. Currently only supported with Google.\n    * @param {String} options.passwordSignupFields Which fields to display in the user creation form. One of '`USERNAME_AND_EMAIL`', '`USERNAME_AND_OPTIONAL_EMAIL`', '`USERNAME_ONLY`', '`EMAIL_ONLY`', or '`NO_PASSWORD`' (default).\n    */\n\nAccounts.ui.config = function (options) {\n  // validate options keys\n  const VALID_KEYS = ['passwordSignupFields', 'requestPermissions', 'requestOfflineToken', 'forbidClientAccountCreation', 'requireEmailVerification', 'minimumPasswordLength', 'loginPath', 'signUpPath', 'resetPasswordPath', 'profilePath', 'changePasswordPath', 'homeRoutePath', 'onSubmitHook', 'onPreSignUpHook', 'onPostSignUpHook', 'onEnrollAccountHook', 'onResetPasswordHook', 'onVerifyEmailHook', 'onSignedInHook', 'onSignedOutHook', 'validateField', 'emailPattern'];\n  Object.keys(options).forEach(function (key) {\n    if (!VALID_KEYS.includes(key)) throw new Error(\"Accounts.ui.config: Invalid key: \" + key);\n  }); // Deal with `passwordSignupFields`\n\n  if (options.passwordSignupFields) {\n    if ([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\", \"EMAIL_ONLY\", \"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(options.passwordSignupFields)) {\n      Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\n    } else {\n      throw new Error(\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \" + options.passwordSignupFields);\n    }\n  } // Deal with `requestPermissions`\n\n\n  if (options.requestPermissions) {\n    Object.keys(options.requestPermissions).forEach(service => {\n      const score = options.requestPermissions[service];\n\n      if (Accounts.ui._options.requestPermissions[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \" + service);\n      } else if (!(scope instanceof Array)) {\n        throw new Error(\"Accounts.ui.config: Value for `requestPermissions` must be an array\");\n      } else {\n        Accounts.ui._options.requestPermissions[service] = scope;\n      }\n    });\n  } // Deal with `requestOfflineToken`\n\n\n  if (options.requestOfflineToken) {\n    Object.keys(options.requestOfflineToken).forEach(service => {\n      const value = options.requestOfflineToken[service];\n      if (service !== 'google') throw new Error(\"Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.\");\n\n      if (Accounts.ui._options.requestOfflineToken[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \" + service);\n      } else {\n        Accounts.ui._options.requestOfflineToken[service] = value;\n      }\n    });\n  } // Deal with `forceApprovalPrompt`\n\n\n  if (options.forceApprovalPrompt) {\n    Object.keys(options.forceApprovalPrompt).forEach(service => {\n      const value = options.forceApprovalPrompt[service];\n      if (service !== 'google') throw new Error(\"Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.\");\n\n      if (Accounts.ui._options.forceApprovalPrompt[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \" + service);\n      } else {\n        Accounts.ui._options.forceApprovalPrompt[service] = value;\n      }\n    });\n  } // Deal with `requireEmailVerification`\n\n\n  if (options.requireEmailVerification) {\n    if (typeof options.requireEmailVerification != 'boolean') {\n      throw new Error(`Accounts.ui.config: \"requireEmailVerification\" not a boolean`);\n    } else {\n      Accounts.ui._options.requireEmailVerification = options.requireEmailVerification;\n    }\n  } // Deal with `minimumPasswordLength`\n\n\n  if (options.minimumPasswordLength) {\n    if (typeof options.minimumPasswordLength != 'number') {\n      throw new Error(`Accounts.ui.config: \"minimumPasswordLength\" not a number`);\n    } else {\n      Accounts.ui._options.minimumPasswordLength = options.minimumPasswordLength;\n    }\n  } // Deal with the hooks.\n\n\n  for (let hook of ['onSubmitHook', 'onPreSignUpHook', 'onPostSignUpHook']) {\n    if (options[hook]) {\n      if (typeof options[hook] != 'function') {\n        throw new Error(`Accounts.ui.config: \"${hook}\" not a function`);\n      } else {\n        Accounts.ui._options[hook] = options[hook];\n      }\n    }\n  } // Deal with pattern.\n\n\n  for (let hook of ['emailPattern']) {\n    if (options[hook]) {\n      if (!(options[hook] instanceof RegExp)) {\n        throw new Error(`Accounts.ui.config: \"${hook}\" not a Regular Expression`);\n      } else {\n        Accounts.ui._options[hook] = options[hook];\n      }\n    }\n  } // deal with the paths.\n\n\n  for (let path of ['loginPath', 'signUpPath', 'resetPasswordPath', 'profilePath', 'changePasswordPath', 'homeRoutePath']) {\n    if (typeof options[path] !== 'undefined') {\n      if (options[path] !== null && typeof options[path] !== 'string') {\n        throw new Error(`Accounts.ui.config: ${path} is not a string or null`);\n      } else {\n        Accounts.ui._options[path] = options[path];\n      }\n    }\n  } // deal with redirect hooks.\n\n\n  for (let hook of ['onEnrollAccountHook', 'onResetPasswordHook', 'onVerifyEmailHook', 'onSignedInHook', 'onSignedOutHook']) {\n    if (options[hook]) {\n      if (typeof options[hook] == 'function') {\n        Accounts.ui._options[hook] = options[hook];\n      } else if (typeof options[hook] == 'string') {\n        Accounts.ui._options[hook] = () => redirect(options[hook]);\n      } else {\n        throw new Error(`Accounts.ui.config: \"${hook}\" not a function or an absolute or relative path`);\n      }\n    }\n  }\n};\n\nmodule.exportDefault(Accounts);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"helpers.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/helpers.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  loginButtonsSession: () => loginButtonsSession,\n  STATES: () => STATES,\n  getLoginServices: () => getLoginServices,\n  hasPasswordService: () => hasPasswordService,\n  loginResultCallback: () => loginResultCallback,\n  passwordSignupFields: () => passwordSignupFields,\n  validateEmail: () => validateEmail,\n  validatePassword: () => validatePassword,\n  validateUsername: () => validateUsername,\n  redirect: () => redirect,\n  capitalize: () => capitalize\n});\nlet browserHistory;\n\ntry {\n  browserHistory = require('react-router').browserHistory;\n} catch (e) {}\n\nconst loginButtonsSession = Accounts._loginButtonsSession;\nconst STATES = {\n  SIGN_IN: Symbol('SIGN_IN'),\n  SIGN_UP: Symbol('SIGN_UP'),\n  PROFILE: Symbol('PROFILE'),\n  PASSWORD_CHANGE: Symbol('PASSWORD_CHANGE'),\n  PASSWORD_RESET: Symbol('PASSWORD_RESET'),\n  ENROLL_ACCOUNT: Symbol('ENROLL_ACCOUNT')\n};\n\nfunction getLoginServices() {\n  // First look for OAuth services.\n  const services = Package['accounts-oauth'] ? Accounts.oauth.serviceNames() : []; // Be equally kind to all login services. This also preserves\n  // backwards-compatibility.\n\n  services.sort();\n  return services.map(function (name) {\n    return {\n      name: name\n    };\n  });\n}\n\n; // Export getLoginServices using old style globals for accounts-base which\n// requires it.\n\nthis.getLoginServices = getLoginServices;\n\nfunction hasPasswordService() {\n  // First look for OAuth services.\n  return !!Package['accounts-password'];\n}\n\n;\n\nfunction loginResultCallback(service, err) {\n  if (!err) {} else if (err instanceof Accounts.LoginCancelledError) {// do nothing\n  } else if (err instanceof ServiceConfiguration.ConfigError) {} else {//loginButtonsSession.errorMessage(err.reason || \"Unknown error\");\n  }\n\n  if (Meteor.isClient) {\n    if (typeof redirect === 'string') {\n      window.location.href = '/';\n    }\n\n    if (typeof service === 'function') {\n      service();\n    }\n  }\n}\n\n;\n\nfunction passwordSignupFields() {\n  return Accounts.ui._options.passwordSignupFields || \"EMAIL_ONLY_NO_PASSWORD\";\n}\n\n;\n\nfunction validateEmail(email, showMessage, clearMessage) {\n  if (passwordSignupFields() === \"USERNAME_AND_OPTIONAL_EMAIL\" && email === '') {\n    return true;\n  }\n\n  if (Accounts.ui._options.emailPattern.test(email)) {\n    return true;\n  } else if (!email || email.length === 0) {\n    showMessage(\"error.emailRequired\", 'warning', false, 'email');\n    return false;\n  } else {\n    showMessage(\"error.accounts.Invalid email\", 'warning', false, 'email');\n    return false;\n  }\n}\n\nfunction validatePassword(password = '', showMessage, clearMessage) {\n  if (password.length >= Accounts.ui._options.minimumPasswordLength) {\n    return true;\n  } else {\n    // const errMsg = T9n.get(\"error.minChar\").replace(/7/, Accounts.ui._options.minimumPasswordLength);\n    const errMsg = \"error.minChar\";\n    showMessage(errMsg, 'warning', false, 'password');\n    return false;\n  }\n}\n\n;\n\nfunction validateUsername(username, showMessage, clearMessage, formState) {\n  if (username) {\n    return true;\n  } else {\n    const fieldName = passwordSignupFields() === 'USERNAME_ONLY' || formState === STATES.SIGN_UP ? 'username' : 'usernameOrEmail';\n    showMessage(\"error.usernameRequired\", 'warning', false, fieldName);\n    return false;\n  }\n}\n\nfunction redirect(redirect) {\n  if (Meteor.isClient) {\n    if (window.history) {\n      // Run after all app specific redirects, i.e. to the login screen.\n      Meteor.setTimeout(() => {\n        if (Package['kadira:flow-router']) {\n          Package['kadira:flow-router'].FlowRouter.go(redirect);\n        } else if (Package['kadira:flow-router-ssr']) {\n          Package['kadira:flow-router-ssr'].FlowRouter.go(redirect);\n        } else if (browserHistory) {\n          browserHistory.push(redirect);\n        } else {\n          window.history.pushState({}, 'redirect', redirect);\n        }\n      }, 100);\n    }\n  }\n}\n\nfunction capitalize(string) {\n  return string.replace(/\\-/, ' ').split(' ').map(word => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(' ');\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"login_session.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/login_session.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  validateKey: () => validateKey,\n  KEY_PREFIX: () => KEY_PREFIX\n});\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 0);\nlet STATES, loginResultCallback, getLoginServices;\nmodule.watch(require(\"./helpers.js\"), {\n  STATES(v) {\n    STATES = v;\n  },\n\n  loginResultCallback(v) {\n    loginResultCallback = v;\n  },\n\n  getLoginServices(v) {\n    getLoginServices = v;\n  }\n\n}, 1);\nconst VALID_KEYS = ['dropdownVisible', // XXX consider replacing these with one key that has an enum for values.\n'inSignupFlow', 'inForgotPasswordFlow', 'inChangePasswordFlow', 'inMessageOnlyFlow', 'errorMessage', 'infoMessage', // dialogs with messages (info and error)\n'resetPasswordToken', 'enrollAccountToken', 'justVerifiedEmail', 'justResetPassword', 'configureLoginServiceDialogVisible', 'configureLoginServiceDialogServiceName', 'configureLoginServiceDialogSaveDisabled', 'configureOnDesktopVisible'];\n\nconst validateKey = function (key) {\n  if (!VALID_KEYS.includes(key)) throw new Error(\"Invalid key in loginButtonsSession: \" + key);\n};\n\nconst KEY_PREFIX = \"Meteor.loginButtons.\";\n// XXX This should probably be package scope rather than exported\n// (there was even a comment to that effect here from before we had\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\n// now\nAccounts._loginButtonsSession = {\n  set: function (key, value) {\n    validateKey(key);\n    if (['errorMessage', 'infoMessage'].includes(key)) throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n\n    this._set(key, value);\n  },\n  _set: function (key, value) {\n    Session.set(KEY_PREFIX + key, value);\n  },\n  get: function (key) {\n    validateKey(key);\n    return Session.get(KEY_PREFIX + key);\n  }\n};\n\nif (Meteor.isClient) {\n  // In the login redirect flow, we'll have the result of the login\n  // attempt at page load time when we're redirected back to the\n  // application.  Register a callback to update the UI (i.e. to close\n  // the dialog on a successful login or display the error on a failed\n  // login).\n  //\n  Accounts.onPageLoadLogin(function (attemptInfo) {\n    // Ignore if we have a left over login attempt for a service that is no longer registered.\n    if (getLoginServices().map(({\n      name\n    }) => name).includes(attemptInfo.type)) loginResultCallback(attemptInfo.type, attemptInfo.error);\n  });\n  let doneCallback;\n  Accounts.onResetPasswordLink(function (token, done) {\n    Accounts._loginButtonsSession.set('resetPasswordToken', token);\n\n    Session.set(KEY_PREFIX + 'state', 'resetPasswordToken');\n    doneCallback = done;\n\n    Accounts.ui._options.onResetPasswordHook();\n  });\n  Accounts.onEnrollmentLink(function (token, done) {\n    Accounts._loginButtonsSession.set('enrollAccountToken', token);\n\n    Session.set(KEY_PREFIX + 'state', 'enrollAccountToken');\n    doneCallback = done;\n\n    Accounts.ui._options.onEnrollAccountHook();\n  });\n  Accounts.onEmailVerificationLink(function (token, done) {\n    Accounts.verifyEmail(token, function (error) {\n      if (!error) {\n        Accounts._loginButtonsSession.set('justVerifiedEmail', true);\n\n        Session.set(KEY_PREFIX + 'state', 'justVerifiedEmail');\n\n        Accounts.ui._options.onSignedInHook();\n      } else {\n        Accounts.ui._options.onVerifyEmailHook();\n      }\n\n      done();\n    });\n  });\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"api\":{\"server\":{\"loginWithoutPassword.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/api/server/loginWithoutPassword.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\n///\n/// LOGIN WITHOUT PASSWORD\n///\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({\n  loginWithoutPassword: function ({\n    email,\n    username = null\n  }) {\n    if (username !== null) {\n      check(username, String);\n      var user = Meteor.users.findOne({\n        $or: [{\n          \"username\": username,\n          \"emails.address\": {\n            $exists: 1\n          }\n        }, {\n          \"emails.address\": email\n        }]\n      });\n      if (!user) throw new Meteor.Error(403, \"User not found\");\n      email = user.emails[0].address;\n    } else {\n      check(email, String);\n      var user = Meteor.users.findOne({\n        \"emails.address\": email\n      });\n      if (!user) throw new Meteor.Error(403, \"User not found\");\n    }\n\n    if (Accounts.ui._options.requireEmailVerification) {\n      if (!user.emails[0].verified) {\n        throw new Meteor.Error(403, \"Email not verified\");\n      }\n    }\n\n    Accounts.sendLoginEmail(user._id, email);\n  }\n}); /**\n     * @summary Send an email with a link the user can use verify their email address.\n     * @locus Server\n     * @param {String} userId The id of the user to send email to.\n     * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n     */\n\nAccounts.sendLoginEmail = function (userId, address) {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n  // Make sure the user exists, and address is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user) throw new Error(\"Can't find user\"); // pick the first unverified address if we weren't passed an address.\n\n  if (!address) {\n    var email = (user.emails || []).find(({\n      verified\n    }) => !verified);\n    address = (email || {}).address;\n  } // make sure we have a valid address\n\n\n  if (!address || !(user.emails || []).map(({\n    address\n  }) => address).includes(address)) throw new Error(\"No such email address for user.\");\n  var tokenRecord = {\n    token: Random.secret(),\n    address: address,\n    when: new Date()\n  };\n  Meteor.users.update({\n    _id: userId\n  }, {\n    $push: {\n      'services.email.verificationTokens': tokenRecord\n    }\n  }); // before passing to template, update user object with new token\n\n  Meteor._ensure(user, 'services', 'email');\n\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n\n  user.services.email.verificationTokens.push(tokenRecord);\n  var loginUrl = Accounts.urls.verifyEmail(tokenRecord.token);\n  var options = {\n    to: address,\n    from: Accounts.emailTemplates.loginNoPassword.from ? Accounts.emailTemplates.loginNoPassword.from(user) : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.loginNoPassword.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.loginNoPassword.text === 'function') {\n    options.text = Accounts.emailTemplates.loginNoPassword.text(user, loginUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.loginNoPassword.html === 'function') options.html = Accounts.emailTemplates.loginNoPassword.html(user, loginUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n}; // Check for installed accounts-password dependency.\n\n\nif (Accounts.emailTemplates) {\n  Accounts.emailTemplates.loginNoPassword = {\n    subject: function (user) {\n      return \"Login on \" + Accounts.emailTemplates.siteName;\n    },\n    text: function (user, url) {\n      var greeting = user.profile && user.profile.name ? \"Hello \" + user.profile.name + \",\" : \"Hello,\";\n      return `${greeting}\nTo login, simply click the link below.\n${url}\nThanks.\n`;\n    }\n  };\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"servicesListPublication.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/api/server/servicesListPublication.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet getLoginServices;\nmodule.watch(require(\"../../helpers.js\"), {\n  getLoginServices(v) {\n    getLoginServices = v;\n  }\n\n}, 1);\nMeteor.publish('servicesList', function () {\n  let services = getLoginServices();\n\n  if (Package['accounts-password']) {\n    services.push({\n      name: 'password'\n    });\n  }\n\n  let fields = {}; // Publish the existing services for a user, only name or nothing else.\n\n  services.forEach(service => fields[`services.${service.name}.name`] = 1);\n  return Meteor.users.find({\n    _id: this.userId\n  }, {\n    fields: fields\n  });\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"ui\":{\"components\":{\"Button.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/ui/components/Button.jsx                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Button: () => Button\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\nlet Link;\n\ntry {\n  Link = require('react-router').Link;\n} catch (e) {}\n\nclass Button extends React.Component {\n  render() {\n    const {\n      label,\n      href = null,\n      type,\n      disabled = false,\n      className,\n      onClick\n    } = this.props;\n\n    if (type == 'link') {\n      // Support React Router.\n      if (Link && href) {\n        return React.createElement(\n          Link,\n          {\n            to: href,\n            className: className\n          },\n          label\n        );\n      } else {\n        return React.createElement(\n          \"a\",\n          {\n            href: href,\n            className: className,\n            onClick: onClick\n          },\n          label\n        );\n      }\n    }\n\n    return React.createElement(\n      \"button\",\n      {\n        className: className,\n        type: type,\n        disabled: disabled,\n        onClick: onClick\n      },\n      label\n    );\n  }\n\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func\n};\nAccounts.ui.Button = Button;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Buttons.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/ui/components/Buttons.jsx                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.export({\n  Buttons: () => Buttons\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nmodule.watch(require(\"./Button.jsx\"));\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\n\nclass Buttons extends React.Component {\n  render() {\n    let {\n      buttons = {},\n      className = \"buttons\"\n    } = this.props;\n    return React.createElement(\n      \"div\",\n      {\n        className: className\n      },\n      Object.keys(buttons).map((id, i) => React.createElement(Accounts.ui.Button, (0, _extends3.default)({}, buttons[id], {\n        key: i\n      })))\n    );\n  }\n\n}\n\n;\nAccounts.ui.Buttons = Buttons;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Field.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/ui/components/Field.jsx                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Field: () => Field\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\n\nclass Field extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mount: true\n    };\n  }\n\n  triggerUpdate() {\n    // Trigger an onChange on inital load, to support browser prefilled values.\n    const {\n      onChange\n    } = this.props;\n\n    if (this.input && onChange) {\n      onChange({\n        target: {\n          value: this.input.value\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.triggerUpdate();\n  }\n\n  componentDidUpdate(prevProps) {\n    // Re-mount component so that we don't expose browser prefilled passwords if the component was\n    // a password before and now something else.\n    if (prevProps.id !== this.props.id) {\n      this.setState({\n        mount: false\n      });\n    } else if (!this.state.mount) {\n      this.setState({\n        mount: true\n      });\n      this.triggerUpdate();\n    }\n  }\n\n  render() {\n    const {\n      id,\n      hint,\n      label,\n      type = 'text',\n      onChange,\n      required = false,\n      className = \"field\",\n      defaultValue = \"\",\n      message\n    } = this.props;\n    const {\n      mount = true\n    } = this.state;\n\n    if (type == 'notice') {\n      return React.createElement(\n        \"div\",\n        {\n          className: className\n        },\n        label\n      );\n    }\n\n    return mount ? React.createElement(\n      \"div\",\n      {\n        className: className\n      },\n      React.createElement(\n        \"label\",\n        {\n          htmlFor: id\n        },\n        label\n      ),\n      React.createElement(\"input\", {\n        id: id,\n        ref: ref => this.input = ref,\n        type: type,\n        onChange: onChange,\n        placeholder: hint,\n        defaultValue: defaultValue\n      }),\n      message && React.createElement(\n        \"span\",\n        {\n          className: ['message', message.type].join(' ').trim()\n        },\n        message.message\n      )\n    ) : null;\n  }\n\n}\n\nField.propTypes = {\n  onChange: PropTypes.func\n};\nAccounts.ui.Field = Field;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Fields.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/ui/components/Fields.jsx                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.export({\n  Fields: () => Fields\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nmodule.watch(require(\"./Field.jsx\"));\n\nclass Fields extends React.Component {\n  render() {\n    let {\n      fields = {},\n      className = \"fields\"\n    } = this.props;\n    return React.createElement(\n      \"div\",\n      {\n        className: className\n      },\n      Object.keys(fields).map((id, i) => React.createElement(Accounts.ui.Field, (0, _extends3.default)({}, fields[id], {\n        key: i\n      })))\n    );\n  }\n\n}\n\nAccounts.ui.Fields = Fields;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Form.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/ui/components/Form.jsx                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Form: () => Form\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 1);\nlet ReactDOM;\nmodule.watch(require(\"react-dom\"), {\n  default(v) {\n    ReactDOM = v;\n  }\n\n}, 2);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 3);\nmodule.watch(require(\"./Fields.jsx\"));\nmodule.watch(require(\"./Buttons.jsx\"));\nmodule.watch(require(\"./FormMessage.jsx\"));\nmodule.watch(require(\"./PasswordOrService.jsx\"));\nmodule.watch(require(\"./SocialButtons.jsx\"));\nmodule.watch(require(\"./FormMessages.jsx\"));\n\nclass Form extends React.Component {\n  componentDidMount() {\n    let form = this.form;\n\n    if (form) {\n      form.addEventListener('submit', e => {\n        e.preventDefault();\n      });\n    }\n  }\n\n  render() {\n    const {\n      hasPasswordService,\n      oauthServices,\n      fields,\n      buttons,\n      error,\n      messages,\n      translate,\n      ready = true,\n      className\n    } = this.props;\n    return React.createElement(\n      \"form\",\n      {\n        ref: ref => this.form = ref,\n        className: [className, ready ? \"ready\" : null].join(' '),\n        className: \"accounts-ui\",\n        noValidate: true\n      },\n      React.createElement(Accounts.ui.Fields, {\n        fields: fields\n      }),\n      React.createElement(Accounts.ui.Buttons, {\n        buttons: buttons\n      }),\n      React.createElement(Accounts.ui.PasswordOrService, {\n        oauthServices: oauthServices,\n        translate: translate\n      }),\n      React.createElement(Accounts.ui.SocialButtons, {\n        oauthServices: oauthServices\n      }),\n      React.createElement(Accounts.ui.FormMessages, {\n        messages: messages\n      })\n    );\n  }\n\n}\n\nForm.propTypes = {\n  oauthServices: PropTypes.object,\n  fields: PropTypes.object.isRequired,\n  buttons: PropTypes.object.isRequired,\n  translate: PropTypes.func.isRequired,\n  error: PropTypes.string,\n  ready: PropTypes.bool\n};\nAccounts.ui.Form = Form;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"FormMessage.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/ui/components/FormMessage.jsx                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  FormMessage: () => FormMessage\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\nclass FormMessage extends React.Component {\n  render() {\n    let {\n      message,\n      type,\n      className = \"message\",\n      style = {},\n      deprecated\n    } = this.props; // XXX Check for deprecations.\n\n    if (deprecated) {\n      // Found backwords compatibility issue.\n      console.warn('You are overriding Accounts.ui.Form and using FormMessage, the use of FormMessage in Form has been depreacted in v1.2.11, update your implementation to use FormMessages: https://github.com/studiointeract/accounts-ui/#deprecations');\n    }\n\n    message = isObject(message) ? message.message : message; // If message is object, then try to get message from it\n\n    return message ? React.createElement(\n      \"div\",\n      {\n        style: style,\n        className: [className, type].join(' ')\n      },\n      message\n    ) : null;\n  }\n\n}\n\nAccounts.ui.FormMessage = FormMessage;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"FormMessages.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/ui/components/FormMessages.jsx                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  FormMessages: () => FormMessages\n});\nlet React, Component;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  },\n\n  Component(v) {\n    Component = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\n\nclass FormMessages extends Component {\n  render() {\n    const {\n      messages = [],\n      className = \"messages\",\n      style = {}\n    } = this.props;\n    return messages.length > 0 && React.createElement(\n      \"div\",\n      {\n        className: \"messages\"\n      },\n      messages.filter(message => !('field' in message)).map(({\n        message,\n        type\n      }, i) => React.createElement(Accounts.ui.FormMessage, {\n        message: message,\n        type: type,\n        key: i\n      }))\n    );\n  }\n\n}\n\nAccounts.ui.FormMessages = FormMessages;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"LoginForm.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/ui/components/LoginForm.jsx                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet React, Component;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  },\n\n  Component(v) {\n    Component = v;\n  }\n\n}, 0);\nlet PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 1);\nlet ReactDOM;\nmodule.watch(require(\"react-dom\"), {\n  default(v) {\n    ReactDOM = v;\n  }\n\n}, 2);\nlet createContainer;\nmodule.watch(require(\"meteor/react-meteor-data\"), {\n  createContainer(v) {\n    createContainer = v;\n  }\n\n}, 3);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 4);\nlet T9n;\nmodule.watch(require(\"meteor/softwarerero:accounts-t9n\"), {\n  T9n(v) {\n    T9n = v;\n  }\n\n}, 5);\nlet KEY_PREFIX;\nmodule.watch(require(\"../../login_session.js\"), {\n  KEY_PREFIX(v) {\n    KEY_PREFIX = v;\n  }\n\n}, 6);\nmodule.watch(require(\"./Form.jsx\"));\nlet STATES, passwordSignupFields, validateEmail, validatePassword, validateUsername, loginResultCallback, getLoginServices, hasPasswordService, capitalize;\nmodule.watch(require(\"../../helpers.js\"), {\n  STATES(v) {\n    STATES = v;\n  },\n\n  passwordSignupFields(v) {\n    passwordSignupFields = v;\n  },\n\n  validateEmail(v) {\n    validateEmail = v;\n  },\n\n  validatePassword(v) {\n    validatePassword = v;\n  },\n\n  validateUsername(v) {\n    validateUsername = v;\n  },\n\n  loginResultCallback(v) {\n    loginResultCallback = v;\n  },\n\n  getLoginServices(v) {\n    getLoginServices = v;\n  },\n\n  hasPasswordService(v) {\n    hasPasswordService = v;\n  },\n\n  capitalize(v) {\n    capitalize = v;\n  }\n\n}, 7);\n\nfunction indexBy(array, key) {\n  const result = {};\n  array.forEach(function (obj) {\n    result[obj[key]] = obj;\n  });\n  return result;\n}\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    let {\n      formState,\n      loginPath,\n      signUpPath,\n      resetPasswordPath,\n      profilePath,\n      changePasswordPath\n    } = props;\n\n    if (formState === STATES.SIGN_IN && Package['accounts-password']) {\n      console.warn('Do not force the state to SIGN_IN on Accounts.ui.LoginForm, it will make it impossible to reset password in your app, this state is also the default state if logged out, so no need to force it.');\n    } // Set inital state.\n\n\n    this.state = {\n      messages: [],\n      waiting: true,\n      formState: formState ? formState : Accounts.user() ? STATES.PROFILE : STATES.SIGN_IN,\n      onSubmitHook: props.onSubmitHook || Accounts.ui._options.onSubmitHook,\n      onSignedInHook: props.onSignedInHook || Accounts.ui._options.onSignedInHook,\n      onSignedOutHook: props.onSignedOutHook || Accounts.ui._options.onSignedOutHook,\n      onPreSignUpHook: props.onPreSignUpHook || Accounts.ui._options.onPreSignUpHook,\n      onPostSignUpHook: props.onPostSignUpHook || Accounts.ui._options.onPostSignUpHook\n    };\n    this.translate = this.translate.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({\n      waiting: false,\n      ready: true\n    }));\n    let changeState = Session.get(KEY_PREFIX + 'state');\n\n    switch (changeState) {\n      case 'enrollAccountToken':\n        this.setState(prevState => ({\n          formState: STATES.ENROLL_ACCOUNT\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n\n      case 'resetPasswordToken':\n        this.setState(prevState => ({\n          formState: STATES.PASSWORD_CHANGE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n\n      case 'justVerifiedEmail':\n        this.setState(prevState => ({\n          formState: STATES.PROFILE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n    } // Add default field values once the form did mount on the client\n\n\n    this.setState(prevState => (0, _extends3.default)({}, this.getDefaultFieldValues()));\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.formState && nextProps.formState !== this.state.formState) {\n      this.setState((0, _extends3.default)({\n        formState: nextProps.formState\n      }, this.getDefaultFieldValues()));\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevProps.user !== !this.props.user) {\n      this.setState({\n        formState: this.props.user ? STATES.PROFILE : STATES.SIGN_IN\n      });\n    }\n  }\n\n  translate(text) {\n    // if (this.props.t) {\n    //   return this.props.t(text);\n    // }\n    return T9n.get(text);\n  }\n\n  validateField(field, value) {\n    const {\n      formState\n    } = this.state;\n\n    switch (field) {\n      case 'email':\n        return validateEmail(value, this.showMessage.bind(this), this.clearMessage.bind(this));\n\n      case 'password':\n        return validatePassword(value, this.showMessage.bind(this), this.clearMessage.bind(this));\n\n      case 'username':\n        return validateUsername(value, this.showMessage.bind(this), this.clearMessage.bind(this), formState);\n    }\n  }\n\n  getUsernameOrEmailField() {\n    return {\n      id: 'usernameOrEmail',\n      hint: this.translate('enterUsernameOrEmail'),\n      label: this.translate('usernameOrEmail'),\n      required: true,\n      defaultValue: this.state.username || \"\",\n      onChange: this.handleChange.bind(this, 'usernameOrEmail'),\n      message: this.getMessageForField('usernameOrEmail')\n    };\n  }\n\n  getUsernameField() {\n    return {\n      id: 'username',\n      hint: this.translate('enterUsername'),\n      label: this.translate('username'),\n      required: true,\n      defaultValue: this.state.username || \"\",\n      onChange: this.handleChange.bind(this, 'username'),\n      message: this.getMessageForField('username')\n    };\n  }\n\n  getEmailField() {\n    return {\n      id: 'email',\n      hint: this.translate('enterEmail'),\n      label: this.translate('email'),\n      type: 'email',\n      required: true,\n      defaultValue: this.state.email || \"\",\n      onChange: this.handleChange.bind(this, 'email'),\n      message: this.getMessageForField('email')\n    };\n  }\n\n  getPasswordField() {\n    return {\n      id: 'password',\n      hint: this.translate('enterPassword'),\n      label: this.translate('password'),\n      type: 'password',\n      required: true,\n      defaultValue: this.state.password || \"\",\n      onChange: this.handleChange.bind(this, 'password'),\n      message: this.getMessageForField('password')\n    };\n  }\n\n  getSetPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterPassword'),\n      label: this.translate('choosePassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword')\n    };\n  }\n\n  getNewPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterNewPassword'),\n      label: this.translate('newPassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword'),\n      message: this.getMessageForField('newPassword')\n    };\n  }\n\n  handleChange(field, evt) {\n    let value = evt.target.value;\n\n    switch (field) {\n      case 'password':\n        break;\n\n      default:\n        value = value.trim();\n        break;\n    }\n\n    this.setState({\n      [field]: value\n    });\n    this.setDefaultFieldValues({\n      [field]: value\n    });\n  }\n\n  fields() {\n    const loginFields = [];\n    const {\n      formState\n    } = this.state;\n\n    if (!hasPasswordService() && getLoginServices().length == 0) {\n      loginFields.push({\n        label: 'No login service added, i.e. accounts-password',\n        type: 'notice'\n      });\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_IN) {\n      if ([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameOrEmailField());\n      }\n\n      if (passwordSignupFields() === \"USERNAME_ONLY\") {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if ([\"EMAIL_ONLY\", \"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if (![\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_UP) {\n      if ([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if ([\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\", \"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if ([\"USERNAME_AND_OPTIONAL_EMAIL\"].includes(passwordSignupFields())) {\n        loginFields.push(Object.assign(this.getEmailField(), {\n          required: false\n        }));\n      }\n\n      if (![\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginFields.push(this.getEmailField());\n    }\n\n    if (this.showPasswordChangeForm()) {\n      if (Meteor.isClient && !Accounts._loginButtonsSession.get('resetPasswordToken')) {\n        loginFields.push(this.getPasswordField());\n      }\n\n      loginFields.push(this.getNewPasswordField());\n    }\n\n    if (this.showEnrollAccountForm()) {\n      loginFields.push(this.getSetPasswordField());\n    }\n\n    return indexBy(loginFields, 'id');\n  }\n\n  buttons() {\n    const {\n      loginPath = Accounts.ui._options.loginPath,\n      signUpPath = Accounts.ui._options.signUpPath,\n      resetPasswordPath = Accounts.ui._options.resetPasswordPath,\n      changePasswordPath = Accounts.ui._options.changePasswordPath,\n      profilePath = Accounts.ui._options.profilePath\n    } = this.props;\n    const {\n      user\n    } = this.props;\n    const {\n      formState,\n      waiting\n    } = this.state;\n    let loginButtons = [];\n\n    if (user && formState == STATES.PROFILE) {\n      loginButtons.push({\n        id: 'signOut',\n        label: this.translate('signOut'),\n        disabled: waiting,\n        onClick: this.signOut.bind(this)\n      });\n    }\n\n    if (this.showCreateAccountLink()) {\n      loginButtons.push({\n        id: 'switchToSignUp',\n        label: this.translate('signUp'),\n        type: 'link',\n        href: signUpPath,\n        onClick: this.switchToSignUp.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP || formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'switchToSignIn',\n        label: this.translate('signIn'),\n        type: 'link',\n        href: loginPath,\n        onClick: this.switchToSignIn.bind(this)\n      });\n    }\n\n    if (this.showForgotPasswordLink()) {\n      loginButtons.push({\n        id: 'switchToPasswordReset',\n        label: this.translate('forgotPassword'),\n        type: 'link',\n        href: resetPasswordPath,\n        onClick: this.switchToPasswordReset.bind(this)\n      });\n    }\n\n    if (user && ![\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields()) && formState == STATES.PROFILE && user.services && 'password' in user.services) {\n      loginButtons.push({\n        id: 'switchToChangePassword',\n        label: this.translate('changePassword'),\n        type: 'link',\n        href: changePasswordPath,\n        onClick: this.switchToChangePassword.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP) {\n      loginButtons.push({\n        id: 'signUp',\n        label: this.translate('signUp'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signUp.bind(this, {}) : null\n      });\n    }\n\n    if (this.showSignInLink()) {\n      loginButtons.push({\n        id: 'signIn',\n        label: this.translate('signIn'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signIn.bind(this) : null\n      });\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'emailResetLink',\n        label: this.translate('resetYourPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordReset.bind(this)\n      });\n    }\n\n    if (this.showPasswordChangeForm() || this.showEnrollAccountForm()) {\n      loginButtons.push({\n        id: 'changePassword',\n        label: this.showPasswordChangeForm() ? this.translate('changePassword') : this.translate('setPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordChange.bind(this)\n      });\n\n      if (Accounts.user()) {\n        loginButtons.push({\n          id: 'switchToSignOut',\n          label: this.translate('cancel'),\n          type: 'link',\n          href: profilePath,\n          onClick: this.switchToSignOut.bind(this)\n        });\n      } else {\n        loginButtons.push({\n          id: 'cancelResetPassword',\n          label: this.translate('cancel'),\n          type: 'link',\n          onClick: this.cancelResetPassword.bind(this)\n        });\n      }\n    } // Sort the button array so that the submit button always comes first, and\n    // buttons should also come before links.\n\n\n    loginButtons.sort((a, b) => {\n      return (b.type == 'submit' && a.type != undefined) - (a.type == 'submit' && b.type != undefined);\n    });\n    return indexBy(loginButtons, 'id');\n  }\n\n  showSignInLink() {\n    return this.state.formState == STATES.SIGN_IN && Package['accounts-password'];\n  }\n\n  showPasswordChangeForm() {\n    return Package['accounts-password'] && this.state.formState == STATES.PASSWORD_CHANGE;\n  }\n\n  showEnrollAccountForm() {\n    return Package['accounts-password'] && this.state.formState == STATES.ENROLL_ACCOUNT;\n  }\n\n  showCreateAccountLink() {\n    return this.state.formState == STATES.SIGN_IN && !Accounts._options.forbidClientAccountCreation && Package['accounts-password'];\n  }\n\n  showForgotPasswordLink() {\n    return !this.props.user && this.state.formState == STATES.SIGN_IN && [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"].includes(passwordSignupFields());\n  } /**\n     * Helper to store field values while using the form.\n     */\n\n  setDefaultFieldValues(defaults) {\n    if (typeof defaults !== 'object') {\n      throw new Error('Argument to setDefaultFieldValues is not of type object');\n    } else if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.setItem('accounts_ui', JSON.stringify((0, _extends3.default)({\n        passwordSignupFields: passwordSignupFields()\n      }, this.getDefaultFieldValues(), defaults)));\n    }\n  } /**\n     * Helper to get field values when switching states in the form.\n     */\n\n  getDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      const defaultFieldValues = JSON.parse(localStorage.getItem('accounts_ui') || null);\n\n      if (defaultFieldValues && defaultFieldValues.passwordSignupFields === passwordSignupFields()) {\n        return defaultFieldValues;\n      }\n    }\n  } /**\n     * Helper to clear field values when signing in, up or out.\n     */\n\n  clearDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.removeItem('accounts_ui');\n    }\n  }\n\n  switchToSignUp(event) {\n    event.preventDefault();\n    this.setState((0, _extends3.default)({\n      formState: STATES.SIGN_UP\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToSignIn(event) {\n    event.preventDefault();\n    this.setState((0, _extends3.default)({\n      formState: STATES.SIGN_IN\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToPasswordReset(event) {\n    event.preventDefault();\n    this.setState((0, _extends3.default)({\n      formState: STATES.PASSWORD_RESET\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToChangePassword(event) {\n    event.preventDefault();\n    this.setState((0, _extends3.default)({\n      formState: STATES.PASSWORD_CHANGE\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToSignOut(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PROFILE\n    });\n    this.clearMessages();\n  }\n\n  cancelResetPassword(event) {\n    event.preventDefault();\n\n    Accounts._loginButtonsSession.set('resetPasswordToken', null);\n\n    this.setState({\n      formState: STATES.SIGN_IN,\n      messages: []\n    });\n  }\n\n  signOut() {\n    Meteor.logout(() => {\n      this.setState({\n        formState: STATES.SIGN_IN,\n        password: null\n      });\n      this.state.onSignedOutHook();\n      this.clearMessages();\n      this.clearDefaultFieldValues();\n    });\n  }\n\n  signIn() {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    let loginSelector;\n    this.clearMessages();\n\n    if (usernameOrEmail !== null) {\n      if (!this.validateField('username', usernameOrEmail)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n\n        error = true;\n      } else {\n        if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          return;\n        } else {\n          loginSelector = usernameOrEmail;\n        }\n      }\n    } else if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n\n        error = true;\n      } else {\n        loginSelector = {\n          username: username\n        };\n      }\n    } else if (usernameOrEmail == null) {\n      if (!this.validateField('email', email)) {\n        error = true;\n      } else {\n        if ([\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          error = true;\n        } else {\n          loginSelector = {\n            email\n          };\n        }\n      }\n    }\n\n    if (![\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields()) && !this.validateField('password', password)) {\n      error = true;\n    }\n\n    if (!error) {\n      Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n        onSubmitHook(error, formState);\n\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        } else {\n          loginResultCallback(() => this.state.onSignedInHook());\n          this.setState({\n            formState: STATES.PROFILE,\n            password: null\n          });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  oauthButtons() {\n    const {\n      formState,\n      waiting\n    } = this.state;\n    let oauthButtons = [];\n\n    if (formState == STATES.SIGN_IN || formState == STATES.SIGN_UP) {\n      if (Accounts.oauth) {\n        Accounts.oauth.serviceNames().map(service => {\n          oauthButtons.push({\n            id: service,\n            label: capitalize(service),\n            disabled: waiting,\n            type: 'button',\n            className: `btn-${service} ${service}`,\n            onClick: this.oauthSignIn.bind(this, service)\n          });\n        });\n      }\n    }\n\n    return indexBy(oauthButtons, 'id');\n  }\n\n  oauthSignIn(serviceName) {\n    const {\n      user\n    } = this.props;\n    const {\n      formState,\n      waiting,\n      onSubmitHook\n    } = this.state; //Thanks Josh Owens for this one.\n\n    function capitalService() {\n      return serviceName.charAt(0).toUpperCase() + serviceName.slice(1);\n    }\n\n    if (serviceName === 'meteor-developer') {\n      serviceName = 'meteorDeveloperAccount';\n    }\n\n    const loginWithService = Meteor[\"loginWith\" + capitalService()];\n    let options = {}; // use default scope unless specified\n\n    if (Accounts.ui._options.requestPermissions[serviceName]) options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName]) options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName]) options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n    this.clearMessages();\n    const self = this;\n    loginWithService(options, error => {\n      onSubmitHook(error, formState);\n\n      if (error) {\n        this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\");\n      } else {\n        this.setState({\n          formState: STATES.PROFILE\n        });\n        this.clearDefaultFieldValues();\n        loginResultCallback(() => {\n          Meteor.setTimeout(() => this.state.onSignedInHook(), 100);\n        });\n      }\n    });\n  }\n\n  signUp(options = {}) {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    this.clearMessages();\n\n    if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n\n        error = true;\n      } else {\n        options.username = username;\n      }\n    } else {\n      if ([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields()) && !this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n\n        error = true;\n      }\n    }\n\n    if (!this.validateField('email', email)) {\n      error = true;\n    } else {\n      options.email = email;\n    }\n\n    if ([\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n      // Generate a random password.\n      options.password = Meteor.uuid();\n    } else if (!this.validateField('password', password)) {\n      onSubmitHook(\"Invalid password\", formState);\n      error = true;\n    } else {\n      options.password = password;\n    }\n\n    const SignUp = function (_options) {\n      Accounts.createUser(_options, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n\n          if (this.translate(`error.accounts.${error.reason}`)) {\n            onSubmitHook(`error.accounts.${error.reason}`, formState);\n          } else {\n            onSubmitHook(\"unknown_error\", formState);\n          }\n        } else {\n          onSubmitHook(null, formState);\n          this.setState({\n            formState: STATES.PROFILE,\n            password: null\n          });\n          let user = Accounts.user();\n          loginResultCallback(this.state.onPostSignUpHook.bind(this, _options, user));\n          this.clearDefaultFieldValues();\n        }\n\n        this.setState({\n          waiting: false\n        });\n      });\n    };\n\n    if (!error) {\n      this.setState({\n        waiting: true\n      }); // Allow for Promises to return.\n\n      let promise = this.state.onPreSignUpHook(options);\n\n      if (promise instanceof Promise) {\n        promise.then(SignUp.bind(this, options));\n      } else {\n        SignUp(options);\n      }\n    }\n  }\n\n  loginWithoutPassword() {\n    const {\n      email = '',\n      usernameOrEmail = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    if (this.validateField('email', email)) {\n      this.setState({\n        waiting: true\n      });\n      Accounts.loginWithoutPassword({\n        email: email\n      }, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        } else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n\n        onSubmitHook(error, formState);\n        this.setState({\n          waiting: false\n        });\n      });\n    } else if (this.validateField('username', usernameOrEmail)) {\n      this.setState({\n        waiting: true\n      });\n      Accounts.loginWithoutPassword({\n        email: usernameOrEmail,\n        username: usernameOrEmail\n      }, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        } else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n\n        onSubmitHook(error, formState);\n        this.setState({\n          waiting: false\n        });\n      });\n    } else {\n      let errMsg = null;\n\n      if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        errMsg = this.translate(\"error.accounts.invalid_email\");\n      } else {\n        errMsg = this.translate(\"error.accounts.invalid_email\");\n      }\n\n      this.showMessage(errMsg, 'warning');\n      onSubmitHook(errMsg, formState);\n    }\n  }\n\n  passwordReset() {\n    const {\n      email = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    this.clearMessages();\n\n    if (this.validateField('email', email)) {\n      this.setState({\n        waiting: true\n      });\n      Accounts.forgotPassword({\n        email: email\n      }, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        } else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n\n        onSubmitHook(error, formState);\n        this.setState({\n          waiting: false\n        });\n      });\n    }\n  }\n\n  passwordChange() {\n    const {\n      password,\n      newPassword,\n      formState,\n      onSubmitHook,\n      onSignedInHook\n    } = this.state;\n\n    if (!this.validateField('password', newPassword)) {\n      onSubmitHook('err.minChar', formState);\n      return;\n    }\n\n    let token = Accounts._loginButtonsSession.get('resetPasswordToken');\n\n    if (!token) {\n      token = Accounts._loginButtonsSession.get('enrollAccountToken');\n    }\n\n    if (token) {\n      Accounts.resetPassword(token, newPassword, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          onSubmitHook(error, formState);\n        } else {\n          this.showMessage(this.translate('info.passwordChanged'), 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({\n            formState: STATES.PROFILE\n          });\n\n          Accounts._loginButtonsSession.set('resetPasswordToken', null);\n\n          Accounts._loginButtonsSession.set('enrollAccountToken', null);\n\n          onSignedInHook();\n        }\n      });\n    } else {\n      Accounts.changePassword(password, newPassword, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          onSubmitHook(error, formState);\n        } else {\n          this.showMessage('info.passwordChanged', 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({\n            formState: STATES.PROFILE\n          });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  showMessage(message, type, clearTimeout, field) {\n    message = this.translate(message).trim();\n\n    if (message) {\n      this.setState(({\n        messages = []\n      }) => {\n        messages.push((0, _extends3.default)({\n          message,\n          type\n        }, field && {\n          field\n        }));\n        return {\n          messages\n        };\n      });\n\n      if (clearTimeout) {\n        this.hideMessageTimout = setTimeout(() => {\n          // Filter out the message that timed out.\n          this.clearMessage(message);\n        }, clearTimeout);\n      }\n    }\n  }\n\n  getMessageForField(field) {\n    const {\n      messages = []\n    } = this.state;\n    return messages.find(({\n      field: key\n    }) => key === field);\n  }\n\n  clearMessage(message) {\n    if (message) {\n      this.setState(({\n        messages = []\n      }) => ({\n        messages: messages.filter(({\n          message: a\n        }) => a !== message)\n      }));\n    }\n  }\n\n  clearMessages() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n\n    this.setState({\n      messages: []\n    });\n  }\n\n  componentWillMount() {\n    // XXX Check for backwards compatibility.\n    if (Meteor.isClient) {\n      const container = document.createElement('div');\n      ReactDOM.render(React.createElement(Accounts.ui.Field, {\n        message: \"test\"\n      }), container);\n\n      if (container.getElementsByClassName('message').length == 0) {\n        // Found backwards compatibility issue with 1.3.x\n        console.warn(`Implementations of Accounts.ui.Field must render message in v1.2.11.\n          https://github.com/studiointeract/accounts-ui/#deprecations`);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n  }\n\n  render() {\n    this.oauthButtons(); // Backwords compatibility with v1.2.x.\n\n    const {\n      messages = []\n    } = this.state;\n    const message = {\n      deprecated: true,\n      message: messages.map(({\n        message\n      }) => message).join(', ')\n    };\n    return React.createElement(Accounts.ui.Form, (0, _extends3.default)({\n      oauthServices: this.oauthButtons(),\n      fields: this.fields(),\n      buttons: this.buttons()\n    }, this.state, {\n      message: message,\n      translate: text => this.translate(text)\n    }));\n  }\n\n}\n\nLoginForm.propTypes = {\n  formState: PropTypes.symbol,\n  loginPath: PropTypes.string,\n  signUpPath: PropTypes.string,\n  resetPasswordPath: PropTypes.string,\n  profilePath: PropTypes.string,\n  changePasswordPath: PropTypes.string\n};\nLoginForm.defaultProps = {\n  formState: null,\n  loginPath: null,\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: null,\n  changePasswordPath: null\n};\nAccounts.ui.LoginForm = LoginForm;\nmodule.exportDefault(createContainer(() => {\n  // Listen for the user to login/logout and the services list to the user.\n  Meteor.subscribe('servicesList');\n  return {\n    user: Accounts.user()\n  };\n}, LoginForm));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"PasswordOrService.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/ui/components/PasswordOrService.jsx                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  PasswordOrService: () => PasswordOrService\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\nlet T9n;\nmodule.watch(require(\"meteor/softwarerero:accounts-t9n\"), {\n  T9n(v) {\n    T9n = v;\n  }\n\n}, 3);\nlet hasPasswordService;\nmodule.watch(require(\"../../helpers.js\"), {\n  hasPasswordService(v) {\n    hasPasswordService = v;\n  }\n\n}, 4);\n\nclass PasswordOrService extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasPasswordService: hasPasswordService(),\n      services: Object.keys(props.oauthServices).map(service => {\n        return props.oauthServices[service].label;\n      })\n    };\n  }\n\n  translate(text) {\n    if (this.props.translate) {\n      return this.props.translate(text);\n    }\n\n    return T9n.get(text);\n  }\n\n  render() {\n    let {\n      className = \"password-or-service\",\n      style = {}\n    } = this.props;\n    let {\n      hasPasswordService,\n      services\n    } = this.state;\n    labels = services;\n\n    if (services.length > 2) {\n      labels = [];\n    }\n\n    if (hasPasswordService && services.length > 0) {\n      return React.createElement(\n        \"div\",\n        {\n          style: style,\n          className: className\n        },\n        `${this.translate('orUse')} ${labels.join(' / ')}`\n      );\n    }\n\n    return null;\n  }\n\n}\n\nPasswordOrService.propTypes = {\n  oauthServices: PropTypes.object\n};\nAccounts.ui.PasswordOrService = PasswordOrService;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SocialButtons.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/std_accounts-ui/imports/ui/components/SocialButtons.jsx                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.export({\n  SocialButtons: () => SocialButtons\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nmodule.watch(require(\"./Button.jsx\"));\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\n\nclass SocialButtons extends React.Component {\n  render() {\n    let {\n      oauthServices = {},\n      className = \"social-buttons\"\n    } = this.props;\n    return React.createElement(\n      \"div\",\n      {\n        className: className\n      },\n      Object.keys(oauthServices).map((id, i) => {\n        return React.createElement(Accounts.ui.Button, (0, _extends3.default)({}, oauthServices[id], {\n          key: i\n        }));\n      })\n    );\n  }\n\n}\n\nAccounts.ui.SocialButtons = SocialButtons;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"node_modules\":{\"prop-types\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.2.23.opnxbu.tzi2++os+web.browser+web.cordova/npm/node_modules/prop-types/package.json                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"prop-types\";\nexports.version = \"15.5.10\";\nexports.main = \"index.js\";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/std_accounts-ui/node_modules/prop-types/index.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\nrequire(\"./node_modules/meteor/std:accounts-ui/check-npm.js\");\nvar exports = require(\"./node_modules/meteor/std:accounts-ui/main_server.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['std:accounts-ui'] = exports;\n\n})();\n","servePath":"/packages/std_accounts-ui.js","sourceMap":{"version":3,"sources":["packages/std:accounts-ui/check-npm.js","packages/std:accounts-ui/main_server.js","packages/std:accounts-ui/imports/accounts_ui.js","packages/std:accounts-ui/imports/helpers.js","packages/std:accounts-ui/imports/login_session.js","packages/std:accounts-ui/imports/api/server/loginWithoutPassword.js","packages/std:accounts-ui/imports/api/server/servicesListPublication.js","packages/std:accounts-ui/imports/ui/components/Button.jsx","packages/std:accounts-ui/imports/ui/components/Buttons.jsx","packages/std:accounts-ui/imports/ui/components/Field.jsx","packages/std:accounts-ui/imports/ui/components/Fields.jsx","packages/std:accounts-ui/imports/ui/components/Form.jsx","packages/std:accounts-ui/imports/ui/components/FormMessage.jsx","packages/std:accounts-ui/imports/ui/components/FormMessages.jsx","packages/std:accounts-ui/imports/ui/components/LoginForm.jsx","packages/std:accounts-ui/imports/ui/components/PasswordOrService.jsx","packages/std:accounts-ui/imports/ui/components/SocialButtons.jsx"],"names":["module","export","default","LoginForm","Accounts","STATES","watch","require","v","redirect","validatePassword","validateEmail","validateUsername","ui","_options","requestPermissions","requestOfflineToken","forceApprovalPrompt","requireEmailVerification","passwordSignupFields","minimumPasswordLength","loginPath","signUpPath","resetPasswordPath","profilePath","changePasswordPath","homeRoutePath","onSubmitHook","onPreSignUpHook","Promise","resolve","onPostSignUpHook","onEnrollAccountHook","onResetPasswordHook","onVerifyEmailHook","onSignedInHook","onSignedOutHook","emailPattern","RegExp","config","options","VALID_KEYS","Object","keys","forEach","key","includes","Error","service","score","scope","Array","value","hook","path","exportDefault","loginButtonsSession","getLoginServices","hasPasswordService","loginResultCallback","capitalize","browserHistory","e","_loginButtonsSession","SIGN_IN","Symbol","SIGN_UP","PROFILE","PASSWORD_CHANGE","PASSWORD_RESET","ENROLL_ACCOUNT","services","Package","oauth","serviceNames","sort","map","name","err","LoginCancelledError","ServiceConfiguration","ConfigError","Meteor","isClient","window","location","href","email","showMessage","clearMessage","test","length","password","errMsg","username","formState","fieldName","history","setTimeout","FlowRouter","go","push","pushState","string","replace","split","word","charAt","toUpperCase","slice","join","validateKey","KEY_PREFIX","set","_set","Session","get","onPageLoadLogin","attemptInfo","type","error","doneCallback","onResetPasswordLink","token","done","onEnrollmentLink","onEmailVerificationLink","verifyEmail","methods","loginWithoutPassword","check","String","user","users","findOne","$or","$exists","emails","address","verified","sendLoginEmail","_id","userId","find","tokenRecord","Random","secret","when","Date","update","$push","_ensure","verificationTokens","loginUrl","urls","to","from","emailTemplates","loginNoPassword","subject","text","html","headers","Email","send","siteName","url","greeting","profile","publish","fields","Button","React","PropTypes","Link","Component","render","label","disabled","className","onClick","props","propTypes","func","Buttons","buttons","id","i","Field","constructor","state","mount","triggerUpdate","onChange","input","target","componentDidMount","componentDidUpdate","prevProps","setState","hint","required","defaultValue","message","ref","trim","Fields","Form","ReactDOM","form","addEventListener","preventDefault","oauthServices","messages","translate","ready","object","isRequired","bool","FormMessage","isObject","obj","style","deprecated","console","warn","FormMessages","filter","createContainer","T9n","indexBy","array","result","waiting","bind","prevState","changeState","getDefaultFieldValues","componentWillReceiveProps","nextProps","nextContext","validateField","field","getUsernameOrEmailField","handleChange","getMessageForField","getUsernameField","getEmailField","getPasswordField","getSetPasswordField","getNewPasswordField","evt","setDefaultFieldValues","loginFields","assign","showPasswordChangeForm","showEnrollAccountForm","loginButtons","signOut","showCreateAccountLink","switchToSignUp","switchToSignIn","showForgotPasswordLink","switchToPasswordReset","switchToChangePassword","signUp","showSignInLink","signIn","passwordReset","passwordChange","switchToSignOut","cancelResetPassword","a","b","undefined","forbidClientAccountCreation","defaults","localStorage","setItem","JSON","stringify","defaultFieldValues","parse","getItem","clearDefaultFieldValues","removeItem","event","clearMessages","logout","usernameOrEmail","loginSelector","loginWithPassword","reason","oauthButtons","oauthSignIn","serviceName","capitalService","loginWithService","self","uuid","SignUp","createUser","promise","then","forgotPassword","newPassword","resetPassword","changePassword","clearTimeout","hideMessageTimout","componentWillMount","container","document","createElement","getElementsByClassName","componentWillUnmount","symbol","defaultProps","subscribe","PasswordOrService","labels","SocialButtons"],"mappings":"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","file":"/packages/std_accounts-ui.js","sourcesContent":["// import { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\n//\n// checkNpmVersions({\n//   \"react\": \">=0.14.7 || ^15.0.0-rc.2\",\n//   \"react-dom\": \">=0.14.7 || ^15.0.0-rc.2\",\n// });\n","import { Accounts } from 'meteor/accounts-base';\nimport './imports/accounts_ui.js';\nimport './imports/login_session.js';\nimport { redirect, STATES } from './imports/helpers.js';\nimport './imports/api/server/loginWithoutPassword.js';\nimport './imports/api/server/servicesListPublication.js';\nimport LoginForm from './imports/ui/components/LoginForm.jsx';\n\nexport {\n  LoginForm as default,\n  Accounts,\n  STATES,\n};\n","import { Accounts } from 'meteor/accounts-base';\nimport {\n  redirect,\n  validatePassword,\n  validateEmail,\n  validateUsername,\n} from './helpers.js';\n\n/**\n * @summary Accounts UI\n * @namespace\n * @memberOf Accounts\n */\nAccounts.ui = {};\n\nAccounts.ui._options = {\n  requestPermissions: [],\n  requestOfflineToken: {},\n  forceApprovalPrompt: {},\n  requireEmailVerification: false,\n  passwordSignupFields: 'EMAIL_ONLY_NO_PASSWORD',\n  minimumPasswordLength: 7,\n  loginPath: '/',\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: '/',\n  changePasswordPath: null,\n  homeRoutePath: '/',\n  onSubmitHook: () => {},\n  onPreSignUpHook: () => new Promise(resolve => resolve()),\n  onPostSignUpHook: () => {},\n  onEnrollAccountHook: () => redirect(`${Accounts.ui._options.loginPath}`),\n  onResetPasswordHook: () => redirect(`${Accounts.ui._options.loginPath}`),\n  onVerifyEmailHook: () => redirect(`${Accounts.ui._options.profilePath}`),\n  onSignedInHook: () => redirect(`${Accounts.ui._options.homeRoutePath}`),\n  onSignedOutHook: () => redirect(`${Accounts.ui._options.homeRoutePath}`),\n  emailPattern: new RegExp('[^@]+@[^@\\.]{2,}\\.[^\\.@]+'),\n};\n\n/**\n * @summary Configure the behavior of [`<Accounts.ui.LoginForm />`](#react-accounts-ui).\n * @anywhere\n * @param {Object} options\n * @param {Object} options.requestPermissions Which [permissions](#requestpermissions) to request from the user for each external service.\n * @param {Object} options.requestOfflineToken To ask the user for permission to act on their behalf when offline, map the relevant external service to `true`. Currently only supported with Google. See [Meteor.loginWithExternalService](#meteor_loginwithexternalservice) for more details.\n * @param {Object} options.forceApprovalPrompt If true, forces the user to approve the app's permissions, even if previously approved. Currently only supported with Google.\n * @param {String} options.passwordSignupFields Which fields to display in the user creation form. One of '`USERNAME_AND_EMAIL`', '`USERNAME_AND_OPTIONAL_EMAIL`', '`USERNAME_ONLY`', '`EMAIL_ONLY`', or '`NO_PASSWORD`' (default).\n */\nAccounts.ui.config = function(options) {\n  // validate options keys\n  const VALID_KEYS = [\n    'passwordSignupFields',\n    'requestPermissions',\n    'requestOfflineToken',\n    'forbidClientAccountCreation',\n    'requireEmailVerification',\n    'minimumPasswordLength',\n    'loginPath',\n    'signUpPath',\n    'resetPasswordPath',\n    'profilePath',\n    'changePasswordPath',\n    'homeRoutePath',\n    'onSubmitHook',\n    'onPreSignUpHook',\n    'onPostSignUpHook',\n    'onEnrollAccountHook',\n    'onResetPasswordHook',\n    'onVerifyEmailHook',\n    'onSignedInHook',\n    'onSignedOutHook',\n    'validateField',\n    'emailPattern',\n  ];\n\n  Object.keys(options).forEach(function (key) {\n    if (!VALID_KEYS.includes(key))\n      throw new Error(\"Accounts.ui.config: Invalid key: \" + key);\n  });\n\n  // Deal with `passwordSignupFields`\n  if (options.passwordSignupFields) {\n    if ([\n      \"USERNAME_AND_EMAIL\",\n      \"USERNAME_AND_OPTIONAL_EMAIL\",\n      \"USERNAME_ONLY\",\n      \"EMAIL_ONLY\",\n      \"EMAIL_ONLY_NO_PASSWORD\",\n      \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n    ].includes(options.passwordSignupFields)) {\n      Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\n    }\n    else {\n      throw new Error(\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \" + options.passwordSignupFields);\n    }\n  }\n\n  // Deal with `requestPermissions`\n  if (options.requestPermissions) {\n    Object.keys(options.requestPermissions).forEach(service => {\n      const score = options.requestPermissions[service];\n      if (Accounts.ui._options.requestPermissions[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \" + service);\n      }\n      else if (!(scope instanceof Array)) {\n        throw new Error(\"Accounts.ui.config: Value for `requestPermissions` must be an array\");\n      }\n      else {\n        Accounts.ui._options.requestPermissions[service] = scope;\n      }\n    });\n  }\n\n  // Deal with `requestOfflineToken`\n  if (options.requestOfflineToken) {\n    Object.keys(options.requestOfflineToken).forEach(service => {\n      const value = options.requestOfflineToken[service];\n      if (service !== 'google')\n        throw new Error(\"Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.\");\n\n      if (Accounts.ui._options.requestOfflineToken[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \" + service);\n      }\n      else {\n        Accounts.ui._options.requestOfflineToken[service] = value;\n      }\n    });\n  }\n\n  // Deal with `forceApprovalPrompt`\n  if (options.forceApprovalPrompt) {\n    Object.keys(options.forceApprovalPrompt).forEach(service => {\n      const value = options.forceApprovalPrompt[service];\n      if (service !== 'google')\n        throw new Error(\"Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.\");\n\n      if (Accounts.ui._options.forceApprovalPrompt[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \" + service);\n      }\n      else {\n        Accounts.ui._options.forceApprovalPrompt[service] = value;\n      }\n    });\n  }\n\n  // Deal with `requireEmailVerification`\n  if (options.requireEmailVerification) {\n    if (typeof options.requireEmailVerification != 'boolean') {\n      throw new Error(`Accounts.ui.config: \"requireEmailVerification\" not a boolean`);\n    }\n    else {\n      Accounts.ui._options.requireEmailVerification = options.requireEmailVerification;\n    }\n  }\n\n  // Deal with `minimumPasswordLength`\n  if (options.minimumPasswordLength) {\n    if (typeof options.minimumPasswordLength != 'number') {\n      throw new Error(`Accounts.ui.config: \"minimumPasswordLength\" not a number`);\n    }\n    else {\n      Accounts.ui._options.minimumPasswordLength = options.minimumPasswordLength;\n    }\n  }\n\n  // Deal with the hooks.\n  for (let hook of [\n    'onSubmitHook',\n    'onPreSignUpHook',\n    'onPostSignUpHook',\n  ]) {\n    if (options[hook]) {\n      if (typeof options[hook] != 'function') {\n        throw new Error(`Accounts.ui.config: \"${hook}\" not a function`);\n      }\n      else {\n        Accounts.ui._options[hook] = options[hook];\n      }\n    }\n  }\n\n  // Deal with pattern.\n  for (let hook of [\n    'emailPattern',\n  ]) {\n    if (options[hook]) {\n      if (!(options[hook] instanceof RegExp)) {\n        throw new Error(`Accounts.ui.config: \"${hook}\" not a Regular Expression`);\n      }\n      else {\n        Accounts.ui._options[hook] = options[hook];\n      }\n    }\n  }\n\n  // deal with the paths.\n  for (let path of [\n    'loginPath',\n    'signUpPath',\n    'resetPasswordPath',\n    'profilePath',\n    'changePasswordPath',\n    'homeRoutePath'\n  ]) {\n    if (typeof options[path] !== 'undefined') {\n      if (options[path] !== null && typeof options[path] !== 'string') {\n        throw new Error(`Accounts.ui.config: ${path} is not a string or null`);\n      }\n      else {\n        Accounts.ui._options[path] = options[path];\n      }\n    }\n  }\n\n  // deal with redirect hooks.\n  for (let hook of [\n      'onEnrollAccountHook',\n      'onResetPasswordHook',\n      'onVerifyEmailHook',\n      'onSignedInHook',\n      'onSignedOutHook']) {\n    if (options[hook]) {\n      if (typeof options[hook] == 'function') {\n        Accounts.ui._options[hook] = options[hook];\n      }\n      else if (typeof options[hook] == 'string') {\n        Accounts.ui._options[hook] = () => redirect(options[hook]);\n      }\n      else {\n        throw new Error(`Accounts.ui.config: \"${hook}\" not a function or an absolute or relative path`);\n      }\n    }\n  }\n};\n\nexport default Accounts;\n","let browserHistory\ntry { browserHistory = require('react-router').browserHistory } catch(e) {}\nexport const loginButtonsSession = Accounts._loginButtonsSession;\nexport const STATES = {\n  SIGN_IN: Symbol('SIGN_IN'),\n  SIGN_UP: Symbol('SIGN_UP'),\n  PROFILE: Symbol('PROFILE'),\n  PASSWORD_CHANGE: Symbol('PASSWORD_CHANGE'),\n  PASSWORD_RESET: Symbol('PASSWORD_RESET'),\n  ENROLL_ACCOUNT: Symbol('ENROLL_ACCOUNT')\n};\n\nexport function getLoginServices() {\n  // First look for OAuth services.\n  const services = Package['accounts-oauth'] ? Accounts.oauth.serviceNames() : [];\n\n  // Be equally kind to all login services. This also preserves\n  // backwards-compatibility.\n  services.sort();\n\n  return services.map(function(name){\n    return {name: name};\n  });\n};\n// Export getLoginServices using old style globals for accounts-base which\n// requires it.\nthis.getLoginServices = getLoginServices;\n\nexport function hasPasswordService() {\n  // First look for OAuth services.\n  return !!Package['accounts-password'];\n};\n\nexport function loginResultCallback(service, err) {\n  if (!err) {\n\n  } else if (err instanceof Accounts.LoginCancelledError) {\n    // do nothing\n  } else if (err instanceof ServiceConfiguration.ConfigError) {\n\n  } else {\n    //loginButtonsSession.errorMessage(err.reason || \"Unknown error\");\n  }\n\n  if (Meteor.isClient) {\n    if (typeof redirect === 'string'){\n      window.location.href = '/';\n    }\n\n    if (typeof service === 'function'){\n      service();\n    }\n  }\n};\n\nexport function passwordSignupFields() {\n  return Accounts.ui._options.passwordSignupFields || \"EMAIL_ONLY_NO_PASSWORD\";\n};\n\nexport function validateEmail(email, showMessage, clearMessage) {\n  if (passwordSignupFields() === \"USERNAME_AND_OPTIONAL_EMAIL\" && email === '') {\n    return true;\n  }\n  if (Accounts.ui._options.emailPattern.test(email)) {\n    return true;\n  } else if (!email || email.length === 0) {\n    showMessage(\"error.emailRequired\", 'warning', false, 'email');\n    return false;\n  } else {\n    showMessage(\"error.accounts.Invalid email\", 'warning', false, 'email');\n    return false;\n  }\n}\n\nexport function validatePassword(password = '', showMessage, clearMessage){\n  if (password.length >= Accounts.ui._options.minimumPasswordLength) {\n    return true;\n  } else {\n    // const errMsg = T9n.get(\"error.minChar\").replace(/7/, Accounts.ui._options.minimumPasswordLength);\n    const errMsg = \"error.minChar\"\n    showMessage(errMsg, 'warning', false, 'password');\n    return false;\n  }\n};\n\nexport function validateUsername(username, showMessage, clearMessage, formState) {\n  if ( username ) {\n    return true;\n  } else {\n    const fieldName = (passwordSignupFields() === 'USERNAME_ONLY' || formState === STATES.SIGN_UP) ? 'username' : 'usernameOrEmail';\n    showMessage(\"error.usernameRequired\", 'warning', false, fieldName);\n    return false;\n  }\n}\n\nexport function redirect(redirect) {\n  if (Meteor.isClient) {\n    if (window.history) {\n      // Run after all app specific redirects, i.e. to the login screen.\n      Meteor.setTimeout(() => {\n        if (Package['kadira:flow-router']) {\n          Package['kadira:flow-router'].FlowRouter.go(redirect);\n        } else if (Package['kadira:flow-router-ssr']) {\n          Package['kadira:flow-router-ssr'].FlowRouter.go(redirect);\n        } else if (browserHistory) {\n          browserHistory.push(redirect);\n        } else {\n          window.history.pushState( {} , 'redirect', redirect );\n        }\n      }, 100);\n    }\n  }\n}\n\nexport function capitalize(string) {\n  return string.replace(/\\-/, ' ').split(' ').map(word => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(' ');\n}\n","import {Accounts} from 'meteor/accounts-base';\nimport {\n  STATES,\n  loginResultCallback,\n  getLoginServices\n} from './helpers.js';\n\nconst VALID_KEYS = [\n  'dropdownVisible',\n\n  // XXX consider replacing these with one key that has an enum for values.\n  'inSignupFlow',\n  'inForgotPasswordFlow',\n  'inChangePasswordFlow',\n  'inMessageOnlyFlow',\n\n  'errorMessage',\n  'infoMessage',\n\n  // dialogs with messages (info and error)\n  'resetPasswordToken',\n  'enrollAccountToken',\n  'justVerifiedEmail',\n  'justResetPassword',\n\n  'configureLoginServiceDialogVisible',\n  'configureLoginServiceDialogServiceName',\n  'configureLoginServiceDialogSaveDisabled',\n  'configureOnDesktopVisible'\n];\n\nexport const validateKey = function (key) {\n  if (!VALID_KEYS.includes(key))\n    throw new Error(\"Invalid key in loginButtonsSession: \" + key);\n};\n\nexport const KEY_PREFIX = \"Meteor.loginButtons.\";\n\n// XXX This should probably be package scope rather than exported\n// (there was even a comment to that effect here from before we had\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\n// now\nAccounts._loginButtonsSession = {\n  set: function(key, value) {\n    validateKey(key);\n    if (['errorMessage', 'infoMessage'].includes(key))\n      throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n\n    this._set(key, value);\n  },\n\n  _set: function(key, value) {\n    Session.set(KEY_PREFIX + key, value);\n  },\n\n  get: function(key) {\n    validateKey(key);\n    return Session.get(KEY_PREFIX + key);\n  }\n};\n\nif (Meteor.isClient){\n  // In the login redirect flow, we'll have the result of the login\n  // attempt at page load time when we're redirected back to the\n  // application.  Register a callback to update the UI (i.e. to close\n  // the dialog on a successful login or display the error on a failed\n  // login).\n  //\n  Accounts.onPageLoadLogin(function (attemptInfo) {\n    // Ignore if we have a left over login attempt for a service that is no longer registered.\n    if (getLoginServices().map(({ name }) => name).includes(attemptInfo.type))\n      loginResultCallback(attemptInfo.type, attemptInfo.error);\n  });\n\n  let doneCallback;\n\n  Accounts.onResetPasswordLink(function (token, done) {\n    Accounts._loginButtonsSession.set('resetPasswordToken', token);\n    Session.set(KEY_PREFIX + 'state', 'resetPasswordToken');\n    doneCallback = done;\n\n    Accounts.ui._options.onResetPasswordHook();\n  });\n\n  Accounts.onEnrollmentLink(function (token, done) {\n    Accounts._loginButtonsSession.set('enrollAccountToken', token);\n    Session.set(KEY_PREFIX + 'state', 'enrollAccountToken');\n    doneCallback = done;\n\n    Accounts.ui._options.onEnrollAccountHook();\n  });\n\n  Accounts.onEmailVerificationLink(function (token, done) {\n    Accounts.verifyEmail(token, function (error) {\n      if (! error) {\n        Accounts._loginButtonsSession.set('justVerifiedEmail', true);\n        Session.set(KEY_PREFIX + 'state', 'justVerifiedEmail');\n        Accounts.ui._options.onSignedInHook();\n      }\n      else {\n        Accounts.ui._options.onVerifyEmailHook();\n      }\n\n      done();\n    });\n  });\n}\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\n///\n/// LOGIN WITHOUT PASSWORD\n///\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({\n  loginWithoutPassword: function ({ email, username = null }) {\n    if (username !== null) {\n      check(username, String);\n\n      var user = Meteor.users.findOne({ $or: [{\n          \"username\": username, \"emails.address\": { $exists: 1 }\n        }, {\n          \"emails.address\": email\n        }]\n      });\n      if (!user)\n        throw new Meteor.Error(403, \"User not found\");\n\n      email = user.emails[0].address;\n    }\n    else {\n      check(email, String);\n\n      var user = Meteor.users.findOne({ \"emails.address\": email });\n      if (!user)\n        throw new Meteor.Error(403, \"User not found\");\n    }\n\n    if (Accounts.ui._options.requireEmailVerification) {\n      if (!user.emails[0].verified) {\n        throw new Meteor.Error(403, \"Email not verified\");\n      }\n    }\n\n    Accounts.sendLoginEmail(user._id, email);\n  },\n});\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n */\nAccounts.sendLoginEmail = function (userId, address) {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n\n  // Make sure the user exists, and address is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first unverified address if we weren't passed an address.\n  if (!address) {\n    var email = (user.emails || []).find(({ verified }) => !verified);\n    address = (email || {}).address;\n  }\n  // make sure we have a valid address\n  if (!address || !(user.emails || []).map(({ address }) => address).includes(address))\n    throw new Error(\"No such email address for user.\");\n\n\n  var tokenRecord = {\n    token: Random.secret(),\n    address: address,\n    when: new Date()};\n  Meteor.users.update(\n    {_id: userId},\n    {$push: {'services.email.verificationTokens': tokenRecord}});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'email');\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n  user.services.email.verificationTokens.push(tokenRecord);\n\n  var loginUrl = Accounts.urls.verifyEmail(tokenRecord.token);\n\n  var options = {\n    to: address,\n    from: Accounts.emailTemplates.loginNoPassword.from\n      ? Accounts.emailTemplates.loginNoPassword.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.loginNoPassword.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.loginNoPassword.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.loginNoPassword.text(user, loginUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.loginNoPassword.html === 'function')\n    options.html =\n      Accounts.emailTemplates.loginNoPassword.html(user, loginUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n// Check for installed accounts-password dependency.\nif (Accounts.emailTemplates) {\n  Accounts.emailTemplates.loginNoPassword = {\n    subject: function(user) {\n      return \"Login on \" + Accounts.emailTemplates.siteName;\n    },\n    text: function(user, url) {\n      var greeting = (user.profile && user.profile.name) ?\n            (\"Hello \" + user.profile.name + \",\") : \"Hello,\";\n      return `${greeting}\nTo login, simply click the link below.\n${url}\nThanks.\n`;\n    }\n  };\n}\n","import { Meteor } from 'meteor/meteor';\nimport { getLoginServices } from '../../helpers.js';\n\nMeteor.publish('servicesList', function() {\n  let services = getLoginServices();\n  if (Package['accounts-password']) {\n    services.push({name: 'password'});\n  }\n  let fields = {};\n  // Publish the existing services for a user, only name or nothing else.\n  services.forEach(service => fields[`services.${service.name}.name`] = 1);\n  return Meteor.users.find({ _id: this.userId }, { fields: fields});\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accounts } from 'meteor/accounts-base';\n\nlet Link;\ntry { Link = require('react-router').Link; } catch(e) {}\n\nexport class Button extends React.Component {\n  render () {\n    const {\n      label,\n      href = null,\n      type,\n      disabled = false,\n      className,\n      onClick\n    } = this.props;\n    if (type == 'link') {\n      // Support React Router.\n      if (Link && href) {\n        return <Link to={ href } className={ className }>{ label }</Link>;\n      } else {\n        return <a href={ href } className={ className } onClick={ onClick }>{ label }</a>;\n      }\n    }\n    return <button className={ className }\n                   type={ type } \n                   disabled={ disabled }\n                   onClick={ onClick }>{ label }</button>;\n  }\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func\n};\n\nAccounts.ui.Button = Button;\n","import React from 'react';\nimport './Button.jsx';\nimport { Accounts } from 'meteor/accounts-base';\n\nexport class Buttons extends React.Component {\n  render () {\n    let { buttons = {}, className = \"buttons\" } = this.props;\n    return (\n      <div className={ className }>\n        {Object.keys(buttons).map((id, i) =>\n          <Accounts.ui.Button {...buttons[id]} key={i} />\n        )}\n      </div>\n    );\n  }\n};\n\nAccounts.ui.Buttons = Buttons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accounts } from 'meteor/accounts-base';\n\nexport class Field extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mount: true\n    };\n  }\n\n  triggerUpdate() {\n    // Trigger an onChange on inital load, to support browser prefilled values.\n    const { onChange } = this.props;\n    if (this.input && onChange) {\n      onChange({ target: { value: this.input.value } });\n    }\n  }\n\n  componentDidMount() {\n    this.triggerUpdate();\n  }\n\n  componentDidUpdate(prevProps) {\n    // Re-mount component so that we don't expose browser prefilled passwords if the component was\n    // a password before and now something else.\n    if (prevProps.id !== this.props.id) {\n      this.setState({mount: false});\n    }\n    else if (!this.state.mount) {\n      this.setState({mount: true});\n      this.triggerUpdate();\n    }\n  }\n\n  render() {\n    const {\n      id,\n      hint,\n      label,\n      type = 'text',\n      onChange,\n      required = false,\n      className = \"field\",\n      defaultValue = \"\",\n      message,\n    } = this.props;\n    const { mount = true } = this.state;\n    if (type == 'notice') {\n      return <div className={ className }>{ label }</div>;\n    }\n    return mount ? (\n      <div className={ className }>\n        <label htmlFor={ id }>{ label }</label>\n        <input\n          id={ id }\n          ref={ (ref) => this.input = ref }\n          type={ type }\n          onChange={ onChange }\n          placeholder={ hint }\n          defaultValue={ defaultValue }\n        />\n        {message && (\n          <span className={['message', message.type].join(' ').trim()}>\n            {message.message}</span>\n        )}\n      </div>\n    ) : null;\n  }\n}\n\nField.propTypes = {\n  onChange: PropTypes.func\n};\n\nAccounts.ui.Field = Field;\n","import React from 'react';\nimport { Accounts } from 'meteor/accounts-base';\nimport './Field.jsx';\n\nexport class Fields extends React.Component {\n  render () {\n    let { fields = {}, className = \"fields\" } = this.props;\n    return (\n      <div className={ className }>\n        {Object.keys(fields).map((id, i) =>\n          <Accounts.ui.Field {...fields[id]} key={i} />\n        )}\n      </div>\n    );\n  }\n}\n\nAccounts.ui.Fields = Fields;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport './Fields.jsx';\nimport './Buttons.jsx';\nimport './FormMessage.jsx';\nimport './PasswordOrService.jsx';\nimport './SocialButtons.jsx';\nimport './FormMessages.jsx';\n\nexport class Form extends React.Component {\n  componentDidMount() {\n    let form = this.form;\n    if (form) {\n      form.addEventListener('submit', (e) => {\n        e.preventDefault();\n      });\n    }\n  }\n\n  render() {\n    const {\n      hasPasswordService,\n      oauthServices,\n      fields,\n      buttons,\n      error,\n      messages,\n      translate,\n      ready = true,\n      className\n    } = this.props;\n    return (\n      <form\n        ref={(ref) => this.form = ref}\n        className={[className, ready ? \"ready\" : null].join(' ')}\n        className=\"accounts-ui\"\n        noValidate\n      >\n        <Accounts.ui.Fields fields={ fields } />\n        <Accounts.ui.Buttons buttons={ buttons } />\n        <Accounts.ui.PasswordOrService oauthServices={ oauthServices } translate={ translate } />\n        <Accounts.ui.SocialButtons oauthServices={ oauthServices } />\n        <Accounts.ui.FormMessages messages={messages} />\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  oauthServices: PropTypes.object,\n  fields: PropTypes.object.isRequired,\n  buttons: PropTypes.object.isRequired,\n  translate: PropTypes.func.isRequired,\n  error: PropTypes.string,\n  ready: PropTypes.bool\n};\n\nAccounts.ui.Form = Form;\n","import React from 'react';\nimport { Accounts } from 'meteor/accounts-base';\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\nexport class FormMessage extends React.Component {\n  render () {\n    let { message, type, className = \"message\", style = {}, deprecated } = this.props;\n    // XXX Check for deprecations.\n    if (deprecated) {\n      // Found backwords compatibility issue.\n      console.warn('You are overriding Accounts.ui.Form and using FormMessage, the use of FormMessage in Form has been depreacted in v1.2.11, update your implementation to use FormMessages: https://github.com/studiointeract/accounts-ui/#deprecations');\n    }\n    message = isObject(message) ? message.message : message; // If message is object, then try to get message from it\n    return message ? (\n      <div style={ style } \n           className={[ className, type ].join(' ')}>{ message }</div>\n    ) : null;\n  }\n}\n\nAccounts.ui.FormMessage = FormMessage;\n","import React, { Component } from 'react';\nimport { Accounts } from 'meteor/accounts-base';\n\nexport class FormMessages extends Component {\n  render () {\n    const { messages = [], className = \"messages\", style = {} } = this.props;\n    return messages.length > 0 && (\n      <div className=\"messages\">\n        {messages\n          .filter(message => !('field' in message))\n          .map(({ message, type }, i) =>\n          <Accounts.ui.FormMessage\n            message={message}\n            type={type}\n            key={i}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nAccounts.ui.FormMessages = FormMessages;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { createContainer } from 'meteor/react-meteor-data';\nimport { Accounts } from 'meteor/accounts-base';\nimport { T9n } from 'meteor/softwarerero:accounts-t9n';\nimport { KEY_PREFIX } from '../../login_session.js';\nimport './Form.jsx';\n\nimport {\n  STATES,\n  passwordSignupFields,\n  validateEmail,\n  validatePassword,\n  validateUsername,\n  loginResultCallback,\n  getLoginServices,\n  hasPasswordService,\n  capitalize\n} from '../../helpers.js';\n\nfunction indexBy(array, key) {\n  const result = {};\n  array.forEach(function(obj) {\n    result[obj[key]] = obj;\n  });\n  return result;\n}\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    let {\n      formState,\n      loginPath,\n      signUpPath,\n      resetPasswordPath,\n      profilePath,\n      changePasswordPath\n    } = props;\n\n    if (formState === STATES.SIGN_IN && Package['accounts-password']) {\n      console.warn('Do not force the state to SIGN_IN on Accounts.ui.LoginForm, it will make it impossible to reset password in your app, this state is also the default state if logged out, so no need to force it.');\n    }\n\n    // Set inital state.\n    this.state = {\n      messages: [],\n      waiting: true,\n      formState: formState ? formState : Accounts.user() ? STATES.PROFILE : STATES.SIGN_IN,\n      onSubmitHook: props.onSubmitHook || Accounts.ui._options.onSubmitHook,\n      onSignedInHook: props.onSignedInHook || Accounts.ui._options.onSignedInHook,\n      onSignedOutHook: props.onSignedOutHook || Accounts.ui._options.onSignedOutHook,\n      onPreSignUpHook: props.onPreSignUpHook || Accounts.ui._options.onPreSignUpHook,\n      onPostSignUpHook: props.onPostSignUpHook || Accounts.ui._options.onPostSignUpHook,\n    };\n    this.translate = this.translate.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({ waiting: false, ready: true }));\n    let changeState = Session.get(KEY_PREFIX + 'state');\n    switch (changeState) {\n      case 'enrollAccountToken':\n        this.setState(prevState => ({\n          formState: STATES.ENROLL_ACCOUNT\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n      case 'resetPasswordToken':\n        this.setState(prevState => ({\n          formState: STATES.PASSWORD_CHANGE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n\n      case 'justVerifiedEmail':\n        this.setState(prevState => ({\n          formState: STATES.PROFILE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n    }\n\n    // Add default field values once the form did mount on the client\n    this.setState(prevState => ({\n      ...this.getDefaultFieldValues(),\n    }));\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.formState && nextProps.formState !== this.state.formState) {\n      this.setState({\n        formState: nextProps.formState,\n        ...this.getDefaultFieldValues(),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevProps.user !== !this.props.user) {\n      this.setState({\n        formState: this.props.user ? STATES.PROFILE : STATES.SIGN_IN\n      });\n    }\n  }\n\n  translate(text) {\n    // if (this.props.t) {\n    //   return this.props.t(text);\n    // }\n    return T9n.get(text);\n  }\n\n  validateField(field, value) {\n    const { formState } = this.state;\n    switch(field) {\n      case 'email':\n        return validateEmail(value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this),\n        );\n      case 'password':\n        return validatePassword(value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this),\n        );\n      case 'username':\n        return validateUsername(value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this),\n          formState,\n        );\n    }\n  }\n\n  getUsernameOrEmailField() {\n    return {\n      id: 'usernameOrEmail',\n      hint: this.translate('enterUsernameOrEmail'),\n      label: this.translate('usernameOrEmail'),\n      required: true,\n      defaultValue: this.state.username || \"\",\n      onChange: this.handleChange.bind(this, 'usernameOrEmail'),\n      message: this.getMessageForField('usernameOrEmail'),\n    };\n  }\n\n  getUsernameField() {\n    return {\n      id: 'username',\n      hint: this.translate('enterUsername'),\n      label: this.translate('username'),\n      required: true,\n      defaultValue: this.state.username || \"\",\n      onChange: this.handleChange.bind(this, 'username'),\n      message: this.getMessageForField('username'),\n    };\n  }\n\n  getEmailField() {\n    return {\n      id: 'email',\n      hint: this.translate('enterEmail'),\n      label: this.translate('email'),\n      type: 'email',\n      required: true,\n      defaultValue: this.state.email || \"\",\n      onChange: this.handleChange.bind(this, 'email'),\n      message: this.getMessageForField('email'),\n    };\n  }\n\n  getPasswordField() {\n    return {\n      id: 'password',\n      hint: this.translate('enterPassword'),\n      label: this.translate('password'),\n      type: 'password',\n      required: true,\n      defaultValue: this.state.password || \"\",\n      onChange: this.handleChange.bind(this, 'password'),\n      message: this.getMessageForField('password'),\n    };\n  }\n\n  getSetPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterPassword'),\n      label: this.translate('choosePassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword')\n    };\n  }\n\n  getNewPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterNewPassword'),\n      label: this.translate('newPassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword'),\n      message: this.getMessageForField('newPassword'),\n    };\n  }\n\n  handleChange(field, evt) {\n    let value = evt.target.value;\n    switch (field) {\n      case 'password': break;\n      default:\n        value = value.trim();\n        break;\n    }\n    this.setState({ [field]: value });\n    this.setDefaultFieldValues({ [field]: value });\n  }\n\n  fields() {\n    const loginFields = [];\n    const { formState } = this.state;\n\n    if (!hasPasswordService() && getLoginServices().length == 0) {\n      loginFields.push({\n        label: 'No login service added, i.e. accounts-password',\n        type: 'notice'\n      });\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_IN) {\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"USERNAME_AND_OPTIONAL_EMAIL\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameOrEmailField());\n      }\n\n      if (passwordSignupFields() === \"USERNAME_ONLY\") {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if ([\n        \"EMAIL_ONLY\",\n        \"EMAIL_ONLY_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if (![\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_UP) {\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"USERNAME_AND_OPTIONAL_EMAIL\",\n        \"USERNAME_ONLY\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"EMAIL_ONLY\",\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if ([\"USERNAME_AND_OPTIONAL_EMAIL\"].includes(passwordSignupFields())) {\n        loginFields.push(Object.assign(this.getEmailField(), {required: false}));\n      }\n\n      if (![\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginFields.push(this.getEmailField());\n    }\n\n    if (this.showPasswordChangeForm()) {\n      if (Meteor.isClient && !Accounts._loginButtonsSession.get('resetPasswordToken')) {\n        loginFields.push(this.getPasswordField());\n      }\n      loginFields.push(this.getNewPasswordField());\n    }\n\n    if (this.showEnrollAccountForm()) {\n      loginFields.push(this.getSetPasswordField());\n    }\n    return indexBy(loginFields, 'id');\n  }\n\n  buttons() {\n    const {\n      loginPath = Accounts.ui._options.loginPath,\n      signUpPath = Accounts.ui._options.signUpPath,\n      resetPasswordPath = Accounts.ui._options.resetPasswordPath,\n      changePasswordPath = Accounts.ui._options.changePasswordPath,\n      profilePath = Accounts.ui._options.profilePath,\n    } = this.props;\n    const { user } = this.props;\n    const { formState, waiting } = this.state;\n    let loginButtons = [];\n\n    if (user && formState == STATES.PROFILE) {\n      loginButtons.push({\n        id: 'signOut',\n        label: this.translate('signOut'),\n        disabled: waiting,\n        onClick: this.signOut.bind(this)\n      });\n    }\n\n    if (this.showCreateAccountLink()) {\n      loginButtons.push({\n        id: 'switchToSignUp',\n        label: this.translate('signUp'),\n        type: 'link',\n        href: signUpPath,\n        onClick: this.switchToSignUp.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP || formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'switchToSignIn',\n        label: this.translate('signIn'),\n        type: 'link',\n        href: loginPath,\n        onClick: this.switchToSignIn.bind(this)\n      });\n    }\n\n    if (this.showForgotPasswordLink()) {\n      loginButtons.push({\n        id: 'switchToPasswordReset',\n        label: this.translate('forgotPassword'),\n        type: 'link',\n        href: resetPasswordPath,\n        onClick: this.switchToPasswordReset.bind(this)\n      });\n    }\n\n    if (user && ![\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())\n      && formState == STATES.PROFILE\n      && (user.services && 'password' in user.services)) {\n      loginButtons.push({\n        id: 'switchToChangePassword',\n        label: this.translate('changePassword'),\n        type: 'link',\n        href: changePasswordPath,\n        onClick: this.switchToChangePassword.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP) {\n      loginButtons.push({\n        id: 'signUp',\n        label: this.translate('signUp'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signUp.bind(this, {}) : null\n      });\n    }\n\n    if (this.showSignInLink()) {\n      loginButtons.push({\n        id: 'signIn',\n        label: this.translate('signIn'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signIn.bind(this) : null\n      });\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'emailResetLink',\n        label: this.translate('resetYourPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordReset.bind(this)\n      });\n    }\n\n    if (this.showPasswordChangeForm() || this.showEnrollAccountForm()) {\n      loginButtons.push({\n        id: 'changePassword',\n        label: (this.showPasswordChangeForm() ? this.translate('changePassword') : this.translate('setPassword')),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordChange.bind(this)\n      });\n\n      if (Accounts.user()) {\n        loginButtons.push({\n          id: 'switchToSignOut',\n          label: this.translate('cancel'),\n          type: 'link',\n          href: profilePath,\n          onClick: this.switchToSignOut.bind(this)\n        });\n      } else {\n        loginButtons.push({\n          id: 'cancelResetPassword',\n          label: this.translate('cancel'),\n          type: 'link',\n          onClick: this.cancelResetPassword.bind(this),\n        });\n      }\n    }\n\n    // Sort the button array so that the submit button always comes first, and\n    // buttons should also come before links.\n    loginButtons.sort((a, b) => {\n      return (\n        b.type == 'submit' &&\n        a.type != undefined) - (\n          a.type == 'submit' &&\n          b.type != undefined);\n    });\n\n    return indexBy(loginButtons, 'id');\n  }\n\n  showSignInLink(){\n    return this.state.formState == STATES.SIGN_IN && Package['accounts-password'];\n  }\n\n  showPasswordChangeForm() {\n    return(Package['accounts-password']\n      && this.state.formState == STATES.PASSWORD_CHANGE);\n  }\n\n  showEnrollAccountForm() {\n    return(Package['accounts-password']\n      && this.state.formState == STATES.ENROLL_ACCOUNT);\n  }\n\n  showCreateAccountLink() {\n    return this.state.formState == STATES.SIGN_IN && !Accounts._options.forbidClientAccountCreation && Package['accounts-password'];\n  }\n\n  showForgotPasswordLink() {\n    return !this.props.user\n      && this.state.formState == STATES.SIGN_IN\n      && [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"].includes(passwordSignupFields());\n  }\n\n  /**\n   * Helper to store field values while using the form.\n   */\n  setDefaultFieldValues(defaults) {\n    if (typeof defaults !== 'object') {\n      throw new Error('Argument to setDefaultFieldValues is not of type object');\n    } else if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.setItem('accounts_ui', JSON.stringify({\n        passwordSignupFields: passwordSignupFields(),\n        ...this.getDefaultFieldValues(),\n        ...defaults,\n      }));\n    }\n  }\n\n  /**\n   * Helper to get field values when switching states in the form.\n   */\n  getDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      const defaultFieldValues = JSON.parse(localStorage.getItem('accounts_ui') || null);\n      if (defaultFieldValues\n        && defaultFieldValues.passwordSignupFields === passwordSignupFields()) {\n        return defaultFieldValues;\n      }\n    }\n  }\n\n  /**\n   * Helper to clear field values when signing in, up or out.\n   */\n  clearDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.removeItem('accounts_ui');\n    }\n  }\n\n  switchToSignUp(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.SIGN_UP,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToSignIn(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.SIGN_IN,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToPasswordReset(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PASSWORD_RESET,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToChangePassword(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PASSWORD_CHANGE,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToSignOut(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PROFILE,\n    });\n    this.clearMessages();\n  }\n\n  cancelResetPassword(event) {\n    event.preventDefault();\n    Accounts._loginButtonsSession.set('resetPasswordToken', null);\n    this.setState({\n      formState: STATES.SIGN_IN,\n      messages: [],\n    });\n  }\n\n  signOut() {\n    Meteor.logout(() => {\n      this.setState({\n        formState: STATES.SIGN_IN,\n        password: null,\n      });\n      this.state.onSignedOutHook();\n      this.clearMessages();\n      this.clearDefaultFieldValues();\n    });\n  }\n\n  signIn() {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    let loginSelector;\n    this.clearMessages();\n\n    if (usernameOrEmail !== null) {\n      if (!this.validateField('username', usernameOrEmail)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      }\n      else {\n        if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          return;\n        } else {\n          loginSelector = usernameOrEmail;\n        }\n      }\n    } else if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      }\n      else {\n        loginSelector = { username: username };\n      }\n    }\n    else if (usernameOrEmail == null) {\n      if (!this.validateField('email', email)) {\n        error = true;\n      }\n      else {\n        if ([\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          error = true;\n        } else {\n          loginSelector = { email };\n        }\n      }\n    }\n    if (![\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())\n      && !this.validateField('password', password)) {\n      error = true;\n    }\n\n    if (!error) {\n      Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n        onSubmitHook(error,formState);\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          loginResultCallback(() => this.state.onSignedInHook());\n          this.setState({\n            formState: STATES.PROFILE,\n            password: null,\n          });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  oauthButtons() {\n    const { formState, waiting } = this.state;\n    let oauthButtons = [];\n    if (formState == STATES.SIGN_IN || formState == STATES.SIGN_UP ) {\n      if(Accounts.oauth) {\n        Accounts.oauth.serviceNames().map((service) => {\n          oauthButtons.push({\n            id: service,\n            label: capitalize(service),\n            disabled: waiting,\n            type: 'button',\n            className: `btn-${service} ${service}`,\n            onClick: this.oauthSignIn.bind(this, service)\n          });\n        });\n      }\n    }\n    return indexBy(oauthButtons, 'id');\n  }\n\n  oauthSignIn(serviceName) {\n    const { user } = this.props;\n    const { formState, waiting, onSubmitHook } = this.state;\n    //Thanks Josh Owens for this one.\n    function capitalService() {\n      return serviceName.charAt(0).toUpperCase() + serviceName.slice(1);\n    }\n\n    if(serviceName === 'meteor-developer'){\n      serviceName = 'meteorDeveloperAccount';\n    }\n\n    const loginWithService = Meteor[\"loginWith\" + capitalService()];\n\n    let options = {}; // use default scope unless specified\n    if (Accounts.ui._options.requestPermissions[serviceName])\n      options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName])\n      options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName])\n      options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n\n    this.clearMessages();\n    const self = this\n    loginWithService(options, (error) => {\n      onSubmitHook(error,formState);\n      if (error) {\n        this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\");\n      } else {\n        this.setState({ formState: STATES.PROFILE });\n        this.clearDefaultFieldValues();\n        loginResultCallback(() => {\n          Meteor.setTimeout(() => this.state.onSignedInHook(), 100);\n        });\n      }\n    });\n\n  }\n\n  signUp(options = {}) {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    this.clearMessages();\n\n    if (username !== null) {\n      if ( !this.validateField('username', username) ) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      } else {\n        options.username = username;\n      }\n    } else {\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields()) && !this.validateField('username', username) ) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      }\n    }\n\n    if (!this.validateField('email', email)){\n      error = true;\n    } else {\n      options.email = email;\n    }\n\n    if ([\n      \"EMAIL_ONLY_NO_PASSWORD\",\n      \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n    ].includes(passwordSignupFields())) {\n      // Generate a random password.\n      options.password = Meteor.uuid();\n    } else if (!this.validateField('password', password)) {\n      onSubmitHook(\"Invalid password\", formState);\n      error = true;\n    } else {\n      options.password = password;\n    }\n\n    const SignUp = function(_options) {\n      Accounts.createUser(_options, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          if (this.translate(`error.accounts.${error.reason}`)) {\n            onSubmitHook(`error.accounts.${error.reason}`, formState);\n          }\n          else {\n            onSubmitHook(\"unknown_error\", formState);\n          }\n        }\n        else {\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE, password: null });\n          let user = Accounts.user();\n          loginResultCallback(this.state.onPostSignUpHook.bind(this, _options, user));\n          this.clearDefaultFieldValues();\n        }\n\n        this.setState({ waiting: false });\n      });\n    };\n\n    if (!error) {\n      this.setState({ waiting: true });\n      // Allow for Promises to return.\n      let promise = this.state.onPreSignUpHook(options);\n      if (promise instanceof Promise) {\n        promise.then(SignUp.bind(this, options));\n      }\n      else {\n        SignUp(options);\n      }\n    }\n  }\n\n  loginWithoutPassword(){\n    const {\n      email = '',\n      usernameOrEmail = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    if (this.validateField('email', email)) {\n      this.setState({ waiting: true });\n\n      Accounts.loginWithoutPassword({ email: email }, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    } else if (this.validateField('username', usernameOrEmail)) {\n      this.setState({ waiting: true });\n\n      Accounts.loginWithoutPassword({ email: usernameOrEmail, username: usernameOrEmail }, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    } else {\n      let errMsg = null;\n      if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        errMsg = this.translate(\"error.accounts.invalid_email\");\n      }\n      else {\n        errMsg = this.translate(\"error.accounts.invalid_email\");\n      }\n      this.showMessage(errMsg,'warning');\n      onSubmitHook(errMsg, formState);\n    }\n  }\n\n  passwordReset() {\n    const {\n      email = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    this.clearMessages();\n    if (this.validateField('email', email)) {\n      this.setState({ waiting: true });\n\n      Accounts.forgotPassword({ email: email }, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    }\n  }\n\n  passwordChange() {\n    const {\n      password,\n      newPassword,\n      formState,\n      onSubmitHook,\n      onSignedInHook,\n    } = this.state;\n\n    if (!this.validateField('password', newPassword)){\n      onSubmitHook('err.minChar',formState);\n      return;\n    }\n\n    let token = Accounts._loginButtonsSession.get('resetPasswordToken');\n    if (!token) {\n      token = Accounts._loginButtonsSession.get('enrollAccountToken');\n    }\n    if (token) {\n      Accounts.resetPassword(token, newPassword, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          onSubmitHook(error, formState);\n        }\n        else {\n          this.showMessage(this.translate('info.passwordChanged'), 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE });\n          Accounts._loginButtonsSession.set('resetPasswordToken', null);\n          Accounts._loginButtonsSession.set('enrollAccountToken', null);\n          onSignedInHook();\n        }\n      });\n    }\n    else {\n      Accounts.changePassword(password, newPassword, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          onSubmitHook(error, formState);\n        }\n        else {\n          this.showMessage('info.passwordChanged', 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  showMessage(message, type, clearTimeout, field){\n    message = this.translate(message).trim();\n    if (message) {\n      this.setState(({ messages = [] }) => {\n        messages.push({\n          message,\n          type,\n          ...(field && { field }),\n        });\n        return  { messages };\n      });\n      if (clearTimeout) {\n        this.hideMessageTimout = setTimeout(() => {\n          // Filter out the message that timed out.\n          this.clearMessage(message);\n        }, clearTimeout);\n      }\n    }\n  }\n\n  getMessageForField(field) {\n    const { messages = [] } = this.state;\n    return messages.find(({ field:key }) => key === field);\n  }\n\n  clearMessage(message) {\n    if (message) {\n      this.setState(({ messages = [] }) => ({\n        messages: messages.filter(({ message:a }) => a !== message),\n      }));\n    }\n  }\n\n  clearMessages() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n    this.setState({ messages: [] });\n  }\n\n  componentWillMount() {\n    // XXX Check for backwards compatibility.\n    if (Meteor.isClient) {\n      const container = document.createElement('div');\n      ReactDOM.render(<Accounts.ui.Field message=\"test\" />, container);\n      if (container.getElementsByClassName('message').length == 0) {\n        // Found backwards compatibility issue with 1.3.x\n        console.warn(`Implementations of Accounts.ui.Field must render message in v1.2.11.\n          https://github.com/studiointeract/accounts-ui/#deprecations`);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n  }\n\n  render() {\n    this.oauthButtons();\n    // Backwords compatibility with v1.2.x.\n    const { messages = [] } = this.state;\n    const message = {\n      deprecated: true,\n      message: messages.map(({ message }) => message).join(', '),\n    };\n    return (\n      <Accounts.ui.Form\n        oauthServices={this.oauthButtons()}\n        fields={this.fields()} \n        buttons={this.buttons()}\n        {...this.state}\n        message={message}\n        translate={text => this.translate(text)}\n      />\n    );\n  }\n}\nLoginForm.propTypes = {\n  formState: PropTypes.symbol,\n  loginPath: PropTypes.string,\n  signUpPath: PropTypes.string,\n  resetPasswordPath: PropTypes.string,\n  profilePath: PropTypes.string,\n  changePasswordPath: PropTypes.string,\n};\nLoginForm.defaultProps = {\n  formState: null,\n  loginPath: null,\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: null,\n  changePasswordPath: null,\n};\n\nAccounts.ui.LoginForm = LoginForm;\n\nexport default createContainer(() => {\n  // Listen for the user to login/logout and the services list to the user.\n  Meteor.subscribe('servicesList');\n  return ({\n    user: Accounts.user(),\n  });\n}, LoginForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accounts } from 'meteor/accounts-base';\nimport { T9n } from 'meteor/softwarerero:accounts-t9n';\nimport { hasPasswordService } from '../../helpers.js';\n\nexport class PasswordOrService extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasPasswordService: hasPasswordService(),\n      services: Object.keys(props.oauthServices).map(service => {\n        return props.oauthServices[service].label\n      })\n    };\n  }\n\n  translate(text) {\n    if (this.props.translate) {\n      return this.props.translate(text);\n    }\n    return T9n.get(text);\n  }\n\n  render () {\n    let { className = \"password-or-service\", style = {} } = this.props;\n    let { hasPasswordService, services } = this.state;\n    labels = services;\n    if (services.length > 2) {\n      labels = [];\n    }\n\n    if (hasPasswordService && services.length > 0) {\n      return (\n        <div style={ style } className={ className }>\n          { `${this.translate('orUse')} ${ labels.join(' / ') }` }\n        </div>\n      );\n    }\n    return null;\n  }\n}\n\nPasswordOrService.propTypes = {\n  oauthServices: PropTypes.object\n};\n\nAccounts.ui.PasswordOrService = PasswordOrService;\n","import React from 'react';\nimport './Button.jsx';\nimport {Accounts} from 'meteor/accounts-base';\n\n\nexport class SocialButtons extends React.Component {\n  render() {\n    let { oauthServices = {}, className = \"social-buttons\" } = this.props;\n    return(\n      <div className={ className }>\n        {Object.keys(oauthServices).map((id, i) => {\n          return <Accounts.ui.Button {...oauthServices[id]} key={i} />;\n        })}\n      </div>\n    );\n  }\n}\n\nAccounts.ui.SocialButtons = SocialButtons;\n"]}}]
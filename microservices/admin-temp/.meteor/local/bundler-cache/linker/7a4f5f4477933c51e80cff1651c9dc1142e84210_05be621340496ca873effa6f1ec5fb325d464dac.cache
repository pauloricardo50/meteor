[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar DocHead;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"kadira:dochead\":{\"lib\":{\"both.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/kadira_dochead/lib/both.js                                                                //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nvar FlowRouter = null;\n\nif (Package['kadira:flow-router-ssr']) {\n  FlowRouter = Package['kadira:flow-router-ssr'].FlowRouter;\n}\n\nif (Meteor.isClient) {\n  var titleDependency = new Tracker.Dependency();\n}\n\nDocHead = {\n  currentTitle: null,\n\n  setTitle(title) {\n    if (Meteor.isClient) {\n      titleDependency.changed();\n      document.title = title;\n    } else {\n      this.currentTitle = title;\n      const titleHtml = `<title>${title}</title>`;\n\n      this._addToHead(titleHtml);\n    }\n  },\n\n  addMeta(info) {\n    this._addTag(info, 'meta');\n  },\n\n  addLink(info) {\n    this._addTag(info, 'link');\n  },\n\n  getTitle() {\n    if (Meteor.isClient) {\n      titleDependency.depend();\n      return document.title;\n    }\n\n    return this.currentTitle;\n  },\n\n  addLdJsonScript(jsonObj) {\n    const strObj = JSON.stringify(jsonObj);\n\n    this._addLdJsonScript(strObj);\n  },\n\n  loadScript(url, options, callback) {\n    if (Meteor.isClient) {\n      npmLoadScript(url, options, callback);\n    }\n  },\n\n  _addTag(info, tag) {\n    const meta = this._buildTag(info, tag);\n\n    if (Meteor.isClient) {\n      document.getElementsByTagName('head')[0].insertAdjacentHTML('beforeend', meta);\n    } else {\n      this._addToHead(meta);\n    }\n  },\n\n  _addToHead(html) {\n    // only work there is kadira:flow-router-ssr\n    if (!FlowRouter) {\n      return;\n    }\n\n    let ssrContext = FlowRouter.ssrContext.get();\n\n    if (ssrContext) {\n      ssrContext.addToHead(html);\n    }\n  },\n\n  _buildTag(metaInfo, type) {\n    let props = \"\";\n\n    for (let key in metaInfo) {\n      props += `${key}=\"${metaInfo[key]}\" `;\n    }\n\n    props += 'dochead=\"1\"';\n    var meta = `<${type} ${props}/>`;\n    return meta;\n  },\n\n  _addLdJsonScript(stringifiedObject) {\n    const scriptTag = `<script type=\"application/ld+json\" dochead=\"1\">${stringifiedObject}</script>`;\n\n    if (Meteor.isClient) {\n      document.getElementsByTagName('head')[0].insertAdjacentHTML('beforeend', scriptTag);\n    } else {\n      this._addToHead(scriptTag);\n    }\n  },\n\n  removeDocHeadAddedTags() {\n    if (Meteor.isClient) {\n      const elements = document.querySelectorAll('[dochead=\"1\"]'); // We use for-of here to loop only over iterable objects\n\n      for (let element of elements) {\n        element.parentNode.removeChild(element);\n      }\n    }\n  }\n\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./node_modules/meteor/kadira:dochead/lib/both.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['kadira:dochead'] = {}, {\n  DocHead: DocHead\n});\n\n})();\n","servePath":"/packages/kadira_dochead.js","sourceMap":{"version":3,"sources":["packages/kadira:dochead/lib/both.js"],"names":["FlowRouter","Package","Meteor","isClient","titleDependency","Tracker","Dependency","DocHead","currentTitle","setTitle","title","changed","document","titleHtml","_addToHead","addMeta","info","_addTag","addLink","getTitle","depend","addLdJsonScript","jsonObj","strObj","JSON","stringify","_addLdJsonScript","loadScript","url","options","callback","npmLoadScript","tag","meta","_buildTag","getElementsByTagName","insertAdjacentHTML","html","ssrContext","get","addToHead","metaInfo","type","props","key","stringifiedObject","scriptTag","removeDocHeadAddedTags","elements","querySelectorAll","element","parentNode","removeChild"],"mappings":"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","file":"/packages/kadira_dochead.js","sourcesContent":["var FlowRouter = null;\nif (Package['kadira:flow-router-ssr']) {\n  FlowRouter = Package['kadira:flow-router-ssr'].FlowRouter;\n}\n\nif (Meteor.isClient) {\n  var titleDependency = new Tracker.Dependency();\n}\n\nDocHead = {\n  currentTitle: null,\n  setTitle(title) {\n    if (Meteor.isClient) {\n      titleDependency.changed();\n      document.title = title;\n    } else {\n      this.currentTitle = title;\n      const titleHtml = `<title>${title}</title>`;\n      this._addToHead(titleHtml);\n    }\n  },\n  addMeta(info) {\n    this._addTag(info, 'meta');\n  },\n  addLink(info) {\n    this._addTag(info, 'link');\n  },\n  getTitle() {\n    if (Meteor.isClient) {\n      titleDependency.depend();\n      return document.title;\n    }\n    return this.currentTitle;\n  },\n  addLdJsonScript(jsonObj) {\n    const strObj = JSON.stringify(jsonObj);\n    this._addLdJsonScript(strObj);\n  },\n  loadScript(url, options, callback) {\n    if (Meteor.isClient) {\n      npmLoadScript(url, options, callback);\n    }\n  },\n  _addTag(info, tag) {\n    const meta = this._buildTag(info, tag);\n    if (Meteor.isClient) {\n      document.getElementsByTagName('head')[0].insertAdjacentHTML('beforeend', meta);\n    } else {\n      this._addToHead(meta);\n    }\n  },\n  _addToHead(html) {\n    // only work there is kadira:flow-router-ssr\n    if (!FlowRouter) {\n      return;\n    }\n    let ssrContext = FlowRouter.ssrContext.get();\n    if (ssrContext) {\n      ssrContext.addToHead(html);\n    }\n  },\n  _buildTag(metaInfo, type) {\n    let props = \"\";\n    for (let key in metaInfo) {\n      props += `${key}=\"${metaInfo[key]}\" `;\n    }\n    props += 'dochead=\"1\"';\n    var meta = `<${type} ${props}/>`;\n    return meta;\n  },\n  _addLdJsonScript(stringifiedObject) {\n    const scriptTag = `<script type=\"application/ld+json\" dochead=\"1\">${stringifiedObject}</script>`;\n    if (Meteor.isClient) {\n      document.getElementsByTagName('head')[0].insertAdjacentHTML('beforeend', scriptTag);\n    } else {\n      this._addToHead(scriptTag);\n    }\n  },\n  removeDocHeadAddedTags() {\n    if (Meteor.isClient) {\n      const elements = document.querySelectorAll('[dochead=\"1\"]');\n      // We use for-of here to loop only over iterable objects\n      for (let element of elements) {\n        element.parentNode.removeChild(element);\n      }\n    }\n  }\n};\n"]}}]
[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Promise = Package.promise.Promise;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Mongo = Package.mongo.Mongo;\nvar CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar body, dotize;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"cultofcoders:grapher\":{\"main.client.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/main.client.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./lib/createQuery.js\"), {                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        exports.createQuery = v;                                                                                       // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nmodule.watch(require(\"./lib/query/lib/prepareForProcess\"), {                                                           // 1\n    \"default\": function (v) {                                                                                          // 1\n        exports.prepareForProcess = v;                                                                                 // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nmodule.watch(require(\"./lib/query/query.client\"), {                                                                    // 1\n    \"default\": function (v) {                                                                                          // 1\n        exports.Query = v;                                                                                             // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nmodule.watch(require(\"./lib/namedQuery/namedQuery.client\"), {                                                          // 1\n    \"default\": function (v) {                                                                                          // 1\n        exports.NamedQuery = v;                                                                                        // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\nmodule.watch(require(\"./lib/compose\"), {                                                                               // 1\n    \"default\": function (v) {                                                                                          // 1\n        exports.compose = v;                                                                                           // 1\n    }                                                                                                                  // 1\n}, 4);                                                                                                                 // 1\nmodule.watch(require(\"./lib/extension.js\"));                                                                           // 1\nmodule.watch(require(\"./lib/links/extension.js\"));                                                                     // 1\nmodule.watch(require(\"./lib/query/reducers/extension.js\"));                                                            // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"compose.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/compose.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar deepExtend = void 0;                                                                                               // 1\nmodule.watch(require(\"deep-extend\"), {                                                                                 // 1\n    \"default\": function (v) {                                                                                          // 1\n        deepExtend = v;                                                                                                // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nmodule.exportDefault(function () {                                                                                     // 1\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 3\n        args[_key] = arguments[_key];                                                                                  // 3\n    }                                                                                                                  // 3\n                                                                                                                       //\n    return deepExtend.apply(undefined, [{}].concat(args));                                                             // 4\n});                                                                                                                    // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"createQuery.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/createQuery.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Query = void 0;                                                                                                    // 1\nmodule.watch(require(\"./query/query.js\"), {                                                                            // 1\n    \"default\": function (v) {                                                                                          // 1\n        Query = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar NamedQuery = void 0;                                                                                               // 1\nmodule.watch(require(\"./namedQuery/namedQuery.js\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        NamedQuery = v;                                                                                                // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar NamedQueryStore = void 0;                                                                                          // 1\nmodule.watch(require(\"./namedQuery/store.js\"), {                                                                       // 1\n    \"default\": function (v) {                                                                                          // 1\n        NamedQueryStore = v;                                                                                           // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nmodule.exportDefault(function () {                                                                                     // 1\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 12\n        args[_key] = arguments[_key];                                                                                  // 12\n    }                                                                                                                  // 12\n                                                                                                                       //\n    if (typeof args[0] === 'string') {                                                                                 // 13\n        var name = args[0],                                                                                            // 13\n            body = args[1],                                                                                            // 13\n            options = args[2];                                                                                         // 13\n        options = options || {}; // It's a resolver query                                                              // 15\n                                                                                                                       //\n        if (_.isFunction(body)) {                                                                                      // 18\n            return createNamedQuery(name, null, body, options);                                                        // 19\n        }                                                                                                              // 20\n                                                                                                                       //\n        var entryPointName = _.first(_.keys(body));                                                                    // 22\n                                                                                                                       //\n        var collection = Mongo.Collection.get(entryPointName);                                                         // 23\n                                                                                                                       //\n        if (!collection) {                                                                                             // 25\n            throw new Meteor.Error('invalid-name', \"We could not find any collection with the name \\\"\" + entryPointName + \"\\\". Make sure it is imported prior to using this\");\n        }                                                                                                              // 27\n                                                                                                                       //\n        return createNamedQuery(name, collection, body[entryPointName], options);                                      // 29\n    } else {                                                                                                           // 30\n        // Query Creation, it can have an endpoint as collection or as a NamedQuery                                    // 31\n        var _body = args[0],                                                                                           // 30\n            _options = args[1];                                                                                        // 30\n        _options = _options || {};                                                                                     // 33\n                                                                                                                       //\n        var _entryPointName = _.first(_.keys(_body));                                                                  // 35\n                                                                                                                       //\n        var _collection = Mongo.Collection.get(_entryPointName);                                                       // 36\n                                                                                                                       //\n        if (!_collection) {                                                                                            // 38\n            if (Meteor.isDevelopment && !NamedQueryStore.get(_entryPointName)) {                                       // 39\n                console.warn(\"You are creating a query with the entry point \\\"\" + _entryPointName + \"\\\", but there was no collection found for it (maybe you forgot to import it client-side?). It's assumed that it's referencing a NamedQuery.\");\n            }                                                                                                          // 41\n                                                                                                                       //\n            return createNamedQuery(_entryPointName, null, {}, {                                                       // 43\n                params: _body[_entryPointName]                                                                         // 43\n            });                                                                                                        // 43\n        } else {                                                                                                       // 44\n            return createNormalQuery(_collection, _body[_entryPointName], _options);                                   // 45\n        }                                                                                                              // 46\n    }                                                                                                                  // 47\n});                                                                                                                    // 48\n                                                                                                                       //\nfunction createNamedQuery(name, collection, body) {                                                                    // 50\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};                              // 50\n    // if it exists already, we re-use it                                                                              // 51\n    var namedQuery = NamedQueryStore.get(name);                                                                        // 52\n    var query = void 0;                                                                                                // 53\n                                                                                                                       //\n    if (!namedQuery) {                                                                                                 // 55\n        query = new NamedQuery(name, collection, body, options);                                                       // 56\n        NamedQueryStore.add(name, query);                                                                              // 57\n    } else {                                                                                                           // 58\n        query = namedQuery.clone(options.params);                                                                      // 59\n    }                                                                                                                  // 60\n                                                                                                                       //\n    return query;                                                                                                      // 62\n}                                                                                                                      // 63\n                                                                                                                       //\nfunction createNormalQuery(collection, body, options) {                                                                // 65\n    return new Query(collection, body, options);                                                                       // 66\n}                                                                                                                      // 67\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"extension.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/extension.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _slicedToArray2 = require(\"babel-runtime/helpers/slicedToArray\");                                                  //\n                                                                                                                       //\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);                                                         //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nvar Query = void 0;                                                                                                    // 1\nmodule.watch(require(\"./query/query.js\"), {                                                                            // 1\n    \"default\": function (v) {                                                                                          // 1\n        Query = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar NamedQuery = void 0;                                                                                               // 1\nmodule.watch(require(\"./namedQuery/namedQuery.js\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        NamedQuery = v;                                                                                                // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar NamedQueryStore = void 0;                                                                                          // 1\nmodule.watch(require(\"./namedQuery/store.js\"), {                                                                       // 1\n    \"default\": function (v) {                                                                                          // 1\n        NamedQueryStore = v;                                                                                           // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\n                                                                                                                       //\n_.extend(Mongo.Collection.prototype, {                                                                                 // 5\n    createQuery: function () {                                                                                         // 6\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                         // 6\n            args[_key] = arguments[_key];                                                                              // 6\n        }                                                                                                              // 6\n                                                                                                                       //\n        if (typeof args[0] === 'string') {                                                                             // 7\n            //NamedQuery                                                                                               // 8\n            var _args = (0, _slicedToArray3.default)(args, 3),                                                         // 7\n                name = _args[0],                                                                                       // 7\n                body = _args[1],                                                                                       // 7\n                options = _args[2];                                                                                    // 7\n                                                                                                                       //\n            var query = new NamedQuery(name, this, body, options);                                                     // 10\n            NamedQueryStore.add(name, query);                                                                          // 11\n            return query;                                                                                              // 13\n        } else {                                                                                                       // 14\n            var _args2 = (0, _slicedToArray3.default)(args, 2),                                                        // 14\n                _body = _args2[0],                                                                                     // 14\n                _options = _args2[1];                                                                                  // 14\n                                                                                                                       //\n            return new Query(this, _body, _options);                                                                   // 17\n        }                                                                                                              // 18\n    }                                                                                                                  // 19\n});                                                                                                                    // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"links\":{\"config.schema.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/config.schema.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    DenormalizeSchema: function () {                                                                                   // 1\n        return DenormalizeSchema;                                                                                      // 1\n    },                                                                                                                 // 1\n    LinkConfigDefaults: function () {                                                                                  // 1\n        return LinkConfigDefaults;                                                                                     // 1\n    },                                                                                                                 // 1\n    LinkConfigSchema: function () {                                                                                    // 1\n        return LinkConfigSchema;                                                                                       // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar Match = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/check\"), {                                                                                // 1\n    Match: function (v) {                                                                                              // 1\n        Match = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/mongo\"), {                                                                                // 1\n    Mongo: function (v) {                                                                                              // 1\n        Mongo = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar DenormalizeSchema = {                                                                                              // 4\n    field: String,                                                                                                     // 5\n    body: Object,                                                                                                      // 6\n    bypassSchema: Match.Maybe(Boolean)                                                                                 // 7\n};                                                                                                                     // 4\nvar LinkConfigDefaults = {                                                                                             // 10\n    type: 'one'                                                                                                        // 11\n};                                                                                                                     // 10\nvar LinkConfigSchema = {                                                                                               // 14\n    type: Match.Maybe(Match.OneOf('one', 'many', '1', '*')),                                                           // 15\n    collection: Match.Maybe(Match.Where(function (collection) {                                                        // 16\n        // We do like this so it works with other types of collections                                                 // 18\n        // like FS.Collection                                                                                          // 19\n        return _.isObject(collection) && (collection instanceof Mongo.Collection || !!collection._collection);         // 20\n    })),                                                                                                               // 25\n    field: Match.Maybe(String),                                                                                        // 27\n    metadata: Match.Maybe(Boolean),                                                                                    // 28\n    inversedBy: Match.Maybe(String),                                                                                   // 29\n    index: Match.Maybe(Boolean),                                                                                       // 30\n    unique: Match.Maybe(Boolean),                                                                                      // 31\n    autoremove: Match.Maybe(Boolean),                                                                                  // 32\n    denormalize: Match.Maybe(Match.ObjectIncluding(DenormalizeSchema))                                                 // 33\n};                                                                                                                     // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/constants.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  LINK_STORAGE: function () {                                                                                          // 1\n    return LINK_STORAGE;                                                                                               // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar LINK_STORAGE = '__links';                                                                                          // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"extension.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/extension.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Mongo = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/mongo\"), {                                                                                // 1\n    Mongo: function (v) {                                                                                              // 1\n        Mongo = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar LINK_STORAGE = void 0;                                                                                             // 1\nmodule.watch(require(\"./constants.js\"), {                                                                              // 1\n    LINK_STORAGE: function (v) {                                                                                       // 1\n        LINK_STORAGE = v;                                                                                              // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar Linker = void 0;                                                                                                   // 1\nmodule.watch(require(\"./linker.js\"), {                                                                                 // 1\n    \"default\": function (v) {                                                                                          // 1\n        Linker = v;                                                                                                    // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\n                                                                                                                       //\n_.extend(Mongo.Collection.prototype, {                                                                                 // 5\n    /**                                                                                                                // 6\n     * The data we add should be valid for config.schema.js                                                            //\n     */addLinks: function (data) {                                                                                     //\n        var _this = this;                                                                                              // 9\n                                                                                                                       //\n        if (!this[LINK_STORAGE]) {                                                                                     // 10\n            this[LINK_STORAGE] = {};                                                                                   // 11\n        }                                                                                                              // 12\n                                                                                                                       //\n        _.each(data, function (linkConfig, linkName) {                                                                 // 14\n            var _$extend;                                                                                              // 14\n                                                                                                                       //\n            if (_this[LINK_STORAGE][linkName]) {                                                                       // 15\n                throw new Meteor.Error(\"You cannot add the link with name: \" + linkName + \" because it was already added to \" + _this._name + \" collection\");\n            }                                                                                                          // 17\n                                                                                                                       //\n            var linker = new Linker(_this, linkName, linkConfig);                                                      // 19\n                                                                                                                       //\n            _.extend(_this[LINK_STORAGE], (_$extend = {}, _$extend[linkName] = linker, _$extend));                     // 21\n        });                                                                                                            // 24\n    },                                                                                                                 // 25\n    getLinks: function () {                                                                                            // 27\n        return this[LINK_STORAGE];                                                                                     // 28\n    },                                                                                                                 // 29\n    getLinker: function (name) {                                                                                       // 31\n        if (this[LINK_STORAGE]) {                                                                                      // 32\n            return this[LINK_STORAGE][name];                                                                           // 33\n        }                                                                                                              // 34\n    },                                                                                                                 // 35\n    hasLink: function (name) {                                                                                         // 37\n        if (!this[LINK_STORAGE]) {                                                                                     // 38\n            return false;                                                                                              // 39\n        }                                                                                                              // 40\n                                                                                                                       //\n        return !!this[LINK_STORAGE][name];                                                                             // 42\n    },                                                                                                                 // 43\n    getLink: function (objectOrId, name) {                                                                             // 45\n        var linkData = this[LINK_STORAGE];                                                                             // 46\n                                                                                                                       //\n        if (!linkData) {                                                                                               // 48\n            throw new Meteor.Error(\"There are no links defined for collection: \" + this._name);                        // 49\n        }                                                                                                              // 50\n                                                                                                                       //\n        if (!linkData[name]) {                                                                                         // 52\n            throw new Meteor.Error(\"There is no link \" + name + \" for collection: \" + this._name);                     // 53\n        }                                                                                                              // 54\n                                                                                                                       //\n        var linker = linkData[name];                                                                                   // 56\n        var object = objectOrId;                                                                                       // 57\n                                                                                                                       //\n        if (typeof objectOrId == 'string') {                                                                           // 58\n            if (!linker.isVirtual()) {                                                                                 // 59\n                var _fields;                                                                                           // 59\n                                                                                                                       //\n                object = this.findOne(objectOrId, {                                                                    // 60\n                    fields: (_fields = {}, _fields[linker.linkStorageField] = 1, _fields)                              // 61\n                });                                                                                                    // 60\n            } else {                                                                                                   // 65\n                object = {                                                                                             // 66\n                    _id: objectOrId                                                                                    // 66\n                };                                                                                                     // 66\n            }                                                                                                          // 67\n                                                                                                                       //\n            if (!object) {                                                                                             // 69\n                throw new Meteor.Error(\"We could not find any object with _id: \\\"\" + objectOrId + \"\\\" within the collection: \" + this._name);\n            }                                                                                                          // 71\n        }                                                                                                              // 72\n                                                                                                                       //\n        return linkData[name].createLink(object);                                                                      // 74\n    }                                                                                                                  // 75\n});                                                                                                                    // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"linker.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/linker.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return Linker;                                                                                                 // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar LinkMany = void 0;                                                                                                 // 1\nmodule.watch(require(\"./linkTypes/linkMany.js\"), {                                                                     // 1\n    \"default\": function (v) {                                                                                          // 1\n        LinkMany = v;                                                                                                  // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar LinkManyMeta = void 0;                                                                                             // 1\nmodule.watch(require(\"./linkTypes/linkManyMeta.js\"), {                                                                 // 1\n    \"default\": function (v) {                                                                                          // 1\n        LinkManyMeta = v;                                                                                              // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar LinkOne = void 0;                                                                                                  // 1\nmodule.watch(require(\"./linkTypes/linkOne.js\"), {                                                                      // 1\n    \"default\": function (v) {                                                                                          // 1\n        LinkOne = v;                                                                                                   // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar LinkOneMeta = void 0;                                                                                              // 1\nmodule.watch(require(\"./linkTypes/linkOneMeta.js\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        LinkOneMeta = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\nvar LinkConfigSchema = void 0,                                                                                         // 1\n    LinkConfigDefaults = void 0;                                                                                       // 1\nmodule.watch(require(\"./config.schema.js\"), {                                                                          // 1\n    LinkConfigSchema: function (v) {                                                                                   // 1\n        LinkConfigSchema = v;                                                                                          // 1\n    },                                                                                                                 // 1\n    LinkConfigDefaults: function (v) {                                                                                 // 1\n        LinkConfigDefaults = v;                                                                                        // 1\n    }                                                                                                                  // 1\n}, 4);                                                                                                                 // 1\nvar smartArguments = void 0;                                                                                           // 1\nmodule.watch(require(\"./linkTypes/lib/smartArguments\"), {                                                              // 1\n    \"default\": function (v) {                                                                                          // 1\n        smartArguments = v;                                                                                            // 1\n    }                                                                                                                  // 1\n}, 5);                                                                                                                 // 1\nvar dot = void 0;                                                                                                      // 1\nmodule.watch(require(\"dot-object\"), {                                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        dot = v;                                                                                                       // 1\n    }                                                                                                                  // 1\n}, 6);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/check\"), {                                                                                // 1\n    check: function (v) {                                                                                              // 1\n        check = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 7);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.watch(require(\"meteor/underscore\"), {                                                                           // 1\n    _: function (v) {                                                                                                  // 1\n        _ = v;                                                                                                         // 1\n    }                                                                                                                  // 1\n}, 8);                                                                                                                 // 1\n                                                                                                                       //\nvar Linker = function () {                                                                                             //\n    /**                                                                                                                // 12\n     * @param mainCollection                                                                                           //\n     * @param linkName                                                                                                 //\n     * @param linkConfig                                                                                               //\n     */function Linker(mainCollection, linkName, linkConfig) {                                                         //\n        (0, _classCallCheck3.default)(this, Linker);                                                                   // 17\n        this.mainCollection = mainCollection;                                                                          // 18\n        this.linkConfig = Object.assign({}, LinkConfigDefaults, linkConfig);                                           // 19\n        this.linkName = linkName; // check linkName must not exist in schema                                           // 20\n                                                                                                                       //\n        this._validateAndClean(); // initialize cascade removal hooks.                                                 // 23\n                                                                                                                       //\n                                                                                                                       //\n        this._initAutoremove();                                                                                        // 26\n                                                                                                                       //\n        this._initDenormalization();                                                                                   // 27\n                                                                                                                       //\n        if (this.isVirtual()) {                                                                                        // 29\n            // if it's a virtual field make sure that when this is deleted, it will be removed from the references     // 30\n            if (!linkConfig.autoremove) {                                                                              // 31\n                this._handleReferenceRemovalForVirtualLinks();                                                         // 32\n            }                                                                                                          // 33\n        } else {                                                                                                       // 34\n            this._initIndex();                                                                                         // 35\n        }                                                                                                              // 36\n    } /**                                                                                                              // 37\n       * Values which represent for the relation a single link                                                         //\n       * @returns {string[]}                                                                                           //\n       */                                                                                                              //\n                                                                                                                       //\n    /**                                                                                                                // 72\n     * The collection that is linked with the current collection                                                       //\n     * @returns Mongo.Collection                                                                                       //\n     */Linker.prototype.getLinkedCollection = function () {                                                            //\n        function getLinkedCollection() {                                                                               //\n            return this.linkConfig.collection;                                                                         // 77\n        }                                                                                                              // 78\n                                                                                                                       //\n        return getLinkedCollection;                                                                                    //\n    }(); /**                                                                                                           //\n          * If the relationship for this link is of \"many\" type.                                                       //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype.isMany = function () {                                                                            //\n        function isMany() {                                                                                            //\n            return !this.isSingle();                                                                                   // 84\n        }                                                                                                              // 85\n                                                                                                                       //\n        return isMany;                                                                                                 //\n    }(); /**                                                                                                           //\n          * If the relationship for this link contains metadata                                                        //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype.isMeta = function () {                                                                            //\n        function isMeta() {                                                                                            //\n            if (this.isVirtual()) {                                                                                    // 91\n                return this.linkConfig.relatedLinker.isMeta();                                                         // 92\n            }                                                                                                          // 93\n                                                                                                                       //\n            return !!this.linkConfig.metadata;                                                                         // 95\n        }                                                                                                              // 96\n                                                                                                                       //\n        return isMeta;                                                                                                 //\n    }(); /**                                                                                                           //\n          * @returns {boolean}                                                                                         //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype.isSingle = function () {                                                                          //\n        function isSingle() {                                                                                          //\n            if (this.isVirtual()) {                                                                                    // 102\n                return this.linkConfig.relatedLinker.isSingle();                                                       // 103\n            }                                                                                                          // 104\n                                                                                                                       //\n            return _.contains(this.oneTypes, this.linkConfig.type);                                                    // 106\n        }                                                                                                              // 107\n                                                                                                                       //\n        return isSingle;                                                                                               //\n    }(); /**                                                                                                           //\n          * @returns {boolean}                                                                                         //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype.isVirtual = function () {                                                                         //\n        function isVirtual() {                                                                                         //\n            return !!this.linkConfig.inversedBy;                                                                       // 113\n        }                                                                                                              // 114\n                                                                                                                       //\n        return isVirtual;                                                                                              //\n    }(); /**                                                                                                           //\n          * Should return a single result.                                                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype.isOneResult = function () {                                                                       //\n        function isOneResult() {                                                                                       //\n            return this.isVirtual() && this.linkConfig.relatedLinker.linkConfig.unique || !this.isVirtual() && this.isSingle();\n        }                                                                                                              // 124\n                                                                                                                       //\n        return isOneResult;                                                                                            //\n    }(); /**                                                                                                           //\n          * @param object                                                                                              //\n          * @param collection To impersonate the getLinkedCollection() of the \"Linker\"                                 //\n          *                                                                                                            //\n          * @returns {LinkOne|LinkMany|LinkManyMeta|LinkOneMeta|LinkResolve}                                           //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype.createLink = function () {                                                                        //\n        function createLink(object) {                                                                                  //\n            var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;                 // 132\n                                                                                                                       //\n            var helperClass = this._getHelperClass();                                                                  // 133\n                                                                                                                       //\n            return new helperClass(this, object, collection);                                                          // 135\n        }                                                                                                              // 136\n                                                                                                                       //\n        return createLink;                                                                                             //\n    }(); /**                                                                                                           //\n          * @returns {*}                                                                                               //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype._validateAndClean = function () {                                                                 //\n        function _validateAndClean() {                                                                                 //\n            if (!this.linkConfig.collection) {                                                                         // 143\n                throw new Meteor.Error('invalid-config', \"For the link \" + this.linkName + \" you did not provide a collection.\");\n            }                                                                                                          // 145\n                                                                                                                       //\n            if (typeof this.linkConfig.collection === 'string') {                                                      // 147\n                var collectionName = this.linkConfig.collection;                                                       // 148\n                this.linkConfig.collection = Mongo.Collection.get(collectionName);                                     // 149\n                                                                                                                       //\n                if (!this.linkConfig.collection) {                                                                     // 151\n                    throw new Meteor.Error('invalid-collection', \"Could not find a collection with the name: \" + collectionName);\n                }                                                                                                      // 153\n            }                                                                                                          // 154\n                                                                                                                       //\n            if (this.isVirtual()) {                                                                                    // 156\n                return this._prepareVirtual();                                                                         // 157\n            } else {                                                                                                   // 158\n                if (!this.linkConfig.type) {                                                                           // 159\n                    this.linkConfig.type = 'one';                                                                      // 160\n                }                                                                                                      // 161\n                                                                                                                       //\n                if (!this.linkConfig.field) {                                                                          // 163\n                    this.linkConfig.field = this._generateFieldName();                                                 // 164\n                } else {                                                                                               // 165\n                    if (this.linkConfig.field == this.linkName) {                                                      // 166\n                        throw new Meteor.Error('invalid-config', \"For the link \" + this.linkName + \" you must not use the same name for the field, otherwise it will cause conflicts when fetching data\");\n                    }                                                                                                  // 168\n                }                                                                                                      // 169\n            }                                                                                                          // 170\n                                                                                                                       //\n            check(this.linkConfig, LinkConfigSchema);                                                                  // 172\n        }                                                                                                              // 173\n                                                                                                                       //\n        return _validateAndClean;                                                                                      //\n    }(); /**                                                                                                           //\n          * We need to apply same type of rules in this case.                                                          //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype._prepareVirtual = function () {                                                                   //\n        function _prepareVirtual() {                                                                                   //\n            var _this = this;                                                                                          // 179\n                                                                                                                       //\n            var _linkConfig = this.linkConfig,                                                                         // 179\n                collection = _linkConfig.collection,                                                                   // 179\n                inversedBy = _linkConfig.inversedBy;                                                                   // 179\n            var linker = collection.getLinker(inversedBy);                                                             // 181\n                                                                                                                       //\n            if (!linker) {                                                                                             // 183\n                // it is possible that the collection doesn't have a linker created yet.                               // 184\n                // so we will create it on startup after all links have been defined                                   // 185\n                Meteor.startup(function () {                                                                           // 186\n                    linker = collection.getLinker(inversedBy);                                                         // 187\n                                                                                                                       //\n                    if (!linker) {                                                                                     // 188\n                        throw new Meteor.Error(\"You tried setting up an inversed link in \\\"\" + _this.mainCollection._name + \"\\\" pointing to collection: \\\"\" + collection._name + \"\\\" link: \\\"\" + inversedBy + \"\\\", but no such link was found. Maybe a typo ?\");\n                    } else {                                                                                           // 190\n                        _this._setupVirtualConfig(linker);                                                             // 191\n                    }                                                                                                  // 192\n                });                                                                                                    // 193\n            } else {                                                                                                   // 194\n                this._setupVirtualConfig(linker);                                                                      // 195\n            }                                                                                                          // 196\n        }                                                                                                              // 197\n                                                                                                                       //\n        return _prepareVirtual;                                                                                        //\n    }(); /**                                                                                                           //\n          * @param linker                                                                                              //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype._setupVirtualConfig = function () {                                                               //\n        function _setupVirtualConfig(linker) {                                                                         //\n            var virtualLinkConfig = linker.linkConfig;                                                                 // 204\n                                                                                                                       //\n            if (!virtualLinkConfig) {                                                                                  // 206\n                throw new Meteor.Error(\"There is no link-config for the related collection on \" + inversedBy + \". Make sure you added the direct links before specifying virtual ones.\");\n            }                                                                                                          // 208\n                                                                                                                       //\n            _.extend(this.linkConfig, {                                                                                // 210\n                metadata: virtualLinkConfig.metadata,                                                                  // 211\n                relatedLinker: linker                                                                                  // 212\n            });                                                                                                        // 210\n        }                                                                                                              // 214\n                                                                                                                       //\n        return _setupVirtualConfig;                                                                                    //\n    }(); /**                                                                                                           //\n          * Depending on the strategy, we create the proper helper class                                               //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype._getHelperClass = function () {                                                                   //\n        function _getHelperClass() {                                                                                   //\n            switch (this.strategy) {                                                                                   // 221\n                case 'many-meta':                                                                                      // 222\n                    return LinkManyMeta;                                                                               // 223\n                                                                                                                       //\n                case 'many':                                                                                           // 224\n                    return LinkMany;                                                                                   // 225\n                                                                                                                       //\n                case 'one-meta':                                                                                       // 226\n                    return LinkOneMeta;                                                                                // 227\n                                                                                                                       //\n                case 'one':                                                                                            // 228\n                    return LinkOne;                                                                                    // 229\n            }                                                                                                          // 221\n                                                                                                                       //\n            throw new Meteor.Error('invalid-strategy', this.strategy + \" is not a valid strategy\");                    // 232\n        }                                                                                                              // 233\n                                                                                                                       //\n        return _getHelperClass;                                                                                        //\n    }(); /**                                                                                                           //\n          * If field name not present, we generate it.                                                                 //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype._generateFieldName = function () {                                                                //\n        function _generateFieldName() {                                                                                //\n            var cleanedCollectionName = this.linkConfig.collection._name.replace(/\\./g, '_');                          // 240\n                                                                                                                       //\n            var defaultFieldPrefix = this.linkName + '_' + cleanedCollectionName;                                      // 241\n                                                                                                                       //\n            switch (this.strategy) {                                                                                   // 243\n                case 'many-meta':                                                                                      // 244\n                    return defaultFieldPrefix + \"_metas\";                                                              // 245\n                                                                                                                       //\n                case 'many':                                                                                           // 246\n                    return defaultFieldPrefix + \"_ids\";                                                                // 247\n                                                                                                                       //\n                case 'one-meta':                                                                                       // 248\n                    return defaultFieldPrefix + \"_meta\";                                                               // 249\n                                                                                                                       //\n                case 'one':                                                                                            // 250\n                    return defaultFieldPrefix + \"_id\";                                                                 // 251\n            }                                                                                                          // 243\n        }                                                                                                              // 253\n                                                                                                                       //\n        return _generateFieldName;                                                                                     //\n    }(); /**                                                                                                           //\n          * When a link that is declared virtual is removed, the reference will be removed from every other link.      //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype._handleReferenceRemovalForVirtualLinks = function () {                                            //\n        function _handleReferenceRemovalForVirtualLinks() {                                                            //\n            var _this2 = this;                                                                                         // 259\n                                                                                                                       //\n            this.mainCollection.after.remove(function (userId, doc) {                                                  // 260\n                // this problem may occur when you do a .remove() before Meteor.startup()                              // 261\n                if (!_this2.linkConfig.relatedLinker) {                                                                // 262\n                    console.warn(\"There was an error finding the link for removal for collection: \\\"\" + _this2.mainCollection._name + \"\\\" with link: \\\"\" + _this2.linkName + \"\\\". This may occur when you do a .remove() before Meteor.startup()\");\n                    return;                                                                                            // 264\n                }                                                                                                      // 265\n                                                                                                                       //\n                var accessor = _this2.createLink(doc);                                                                 // 267\n                                                                                                                       //\n                _.each(accessor.fetch(), function (linkedObj) {                                                        // 269\n                    var relatedLinker = _this2.linkConfig.relatedLinker; // We do this check, to avoid self-referencing hell when defining virtual links\n                    // Virtual links if not found \"compile-time\", we will try again to reprocess them on Meteor.startup\n                    // if a removal happens before Meteor.startup this may fail                                        // 273\n                                                                                                                       //\n                    if (relatedLinker) {                                                                               // 274\n                        var link = relatedLinker.createLink(linkedObj);                                                // 275\n                                                                                                                       //\n                        if (relatedLinker.isSingle()) {                                                                // 277\n                            link.unset();                                                                              // 278\n                        } else {                                                                                       // 279\n                            link.remove(doc);                                                                          // 280\n                        }                                                                                              // 281\n                    }                                                                                                  // 282\n                });                                                                                                    // 283\n            });                                                                                                        // 284\n        }                                                                                                              // 285\n                                                                                                                       //\n        return _handleReferenceRemovalForVirtualLinks;                                                                 //\n    }();                                                                                                               //\n                                                                                                                       //\n    Linker.prototype._initIndex = function () {                                                                        //\n        function _initIndex() {                                                                                        //\n            if (Meteor.isServer) {                                                                                     // 288\n                var field = this.linkConfig.field;                                                                     // 289\n                                                                                                                       //\n                if (this.linkConfig.metadata) {                                                                        // 290\n                    field = field + '._id';                                                                            // 291\n                }                                                                                                      // 292\n                                                                                                                       //\n                if (this.linkConfig.index) {                                                                           // 294\n                    var _mainCollection$_ensu;                                                                         // 294\n                                                                                                                       //\n                    if (this.isVirtual()) {                                                                            // 295\n                        throw new Meteor.Error('You cannot set index on an inversed link.');                           // 296\n                    }                                                                                                  // 297\n                                                                                                                       //\n                    var options = void 0;                                                                              // 299\n                                                                                                                       //\n                    if (this.linkConfig.unique) {                                                                      // 300\n                        if (this.isMany()) {                                                                           // 301\n                            throw new Meteor.Error('You cannot set unique property on a multi field.');                // 302\n                        }                                                                                              // 303\n                                                                                                                       //\n                        options = {                                                                                    // 305\n                            unique: true                                                                               // 305\n                        };                                                                                             // 305\n                    }                                                                                                  // 306\n                                                                                                                       //\n                    this.mainCollection._ensureIndex((_mainCollection$_ensu = {}, _mainCollection$_ensu[field] = 1, _mainCollection$_ensu), options);\n                } else {                                                                                               // 309\n                    if (this.linkConfig.unique) {                                                                      // 310\n                        var _mainCollection$_ensu2;                                                                    // 310\n                                                                                                                       //\n                        if (this.isVirtual()) {                                                                        // 311\n                            throw new Meteor.Error('You cannot set unique property on an inversed link.');             // 312\n                        }                                                                                              // 313\n                                                                                                                       //\n                        if (this.isMany()) {                                                                           // 315\n                            throw new Meteor.Error('You cannot set unique property on a multi field.');                // 316\n                        }                                                                                              // 317\n                                                                                                                       //\n                        this.mainCollection._ensureIndex((_mainCollection$_ensu2 = {}, _mainCollection$_ensu2[field] = 1, _mainCollection$_ensu2), {\n                            unique: true                                                                               // 321\n                        });                                                                                            // 321\n                    }                                                                                                  // 322\n                }                                                                                                      // 323\n            }                                                                                                          // 324\n        }                                                                                                              // 325\n                                                                                                                       //\n        return _initIndex;                                                                                             //\n    }();                                                                                                               //\n                                                                                                                       //\n    Linker.prototype._initAutoremove = function () {                                                                   //\n        function _initAutoremove() {                                                                                   //\n            var _this3 = this;                                                                                         // 327\n                                                                                                                       //\n            if (!this.linkConfig.autoremove) {                                                                         // 328\n                return;                                                                                                // 329\n            }                                                                                                          // 330\n                                                                                                                       //\n            if (!this.isVirtual()) {                                                                                   // 332\n                this.mainCollection.after.remove(function (userId, doc) {                                              // 333\n                    _this3.getLinkedCollection().remove({                                                              // 334\n                        _id: {                                                                                         // 335\n                            $in: smartArguments.getIds(doc[_this3.linkStorageField])                                   // 336\n                        }                                                                                              // 335\n                    });                                                                                                // 334\n                });                                                                                                    // 339\n            } else {                                                                                                   // 340\n                this.mainCollection.after.remove(function (userId, doc) {                                              // 341\n                    var linker = _this3.mainCollection.getLink(doc, _this3.linkName);                                  // 342\n                                                                                                                       //\n                    var ids = linker.find({}, {                                                                        // 343\n                        fields: {                                                                                      // 343\n                            _id: 1                                                                                     // 343\n                        }                                                                                              // 343\n                    }).fetch().map(function (item) {                                                                   // 343\n                        return item._id;                                                                               // 343\n                    });                                                                                                // 343\n                                                                                                                       //\n                    _this3.getLinkedCollection().remove({                                                              // 345\n                        _id: {                                                                                         // 346\n                            $in: ids                                                                                   // 346\n                        }                                                                                              // 346\n                    });                                                                                                // 345\n                });                                                                                                    // 348\n            }                                                                                                          // 349\n        }                                                                                                              // 350\n                                                                                                                       //\n        return _initAutoremove;                                                                                        //\n    }(); /**                                                                                                           //\n          * Initializes denormalization using herteby:denormalize                                                      //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype._initDenormalization = function () {                                                              //\n        function _initDenormalization() {                                                                              //\n            var _this4 = this;                                                                                         // 356\n                                                                                                                       //\n            if (!this.linkConfig.denormalize || !Meteor.isServer) {                                                    // 357\n                return;                                                                                                // 358\n            }                                                                                                          // 359\n                                                                                                                       //\n            var packageExists = !!Package['herteby:denormalize'];                                                      // 361\n                                                                                                                       //\n            if (!packageExists) {                                                                                      // 362\n                throw new Meteor.Error('missing-package', \"Please add the herteby:denormalize package to your Meteor application in order to make caching work\");\n            }                                                                                                          // 364\n                                                                                                                       //\n            var _linkConfig$denormali = this.linkConfig.denormalize,                                                   // 356\n                field = _linkConfig$denormali.field,                                                                   // 356\n                body = _linkConfig$denormali.body,                                                                     // 356\n                bypassSchema = _linkConfig$denormali.bypassSchema;                                                     // 356\n            var cacheConfig = void 0;                                                                                  // 367\n            var referenceFieldSuffix = '';                                                                             // 369\n                                                                                                                       //\n            if (this.isMeta()) {                                                                                       // 370\n                referenceFieldSuffix = this.isSingle() ? '._id' : ':_id';                                              // 371\n            }                                                                                                          // 372\n                                                                                                                       //\n            if (this.isVirtual()) {                                                                                    // 374\n                var inversedLink = this.linkConfig.relatedLinker.linkConfig;                                           // 375\n                var type = inversedLink.type == 'many' ? 'many-inverse' : 'inversed';                                  // 377\n                cacheConfig = {                                                                                        // 379\n                    type: type,                                                                                        // 380\n                    collection: this.linkConfig.collection,                                                            // 381\n                    fields: body,                                                                                      // 382\n                    referenceField: inversedLink.field + referenceFieldSuffix,                                         // 383\n                    cacheField: field,                                                                                 // 384\n                    bypassSchema: !!bypassSchema                                                                       // 385\n                };                                                                                                     // 379\n            } else {                                                                                                   // 387\n                cacheConfig = {                                                                                        // 388\n                    type: this.linkConfig.type,                                                                        // 389\n                    collection: this.linkConfig.collection,                                                            // 390\n                    fields: body,                                                                                      // 391\n                    referenceField: this.linkConfig.field + referenceFieldSuffix,                                      // 392\n                    cacheField: field,                                                                                 // 393\n                    bypassSchema: !!bypassSchema                                                                       // 394\n                };                                                                                                     // 388\n            }                                                                                                          // 396\n                                                                                                                       //\n            if (this.isVirtual()) {                                                                                    // 398\n                Meteor.startup(function () {                                                                           // 399\n                    _this4.mainCollection.cache(cacheConfig);                                                          // 400\n                });                                                                                                    // 401\n            } else {                                                                                                   // 402\n                this.mainCollection.cache(cacheConfig);                                                                // 403\n            }                                                                                                          // 404\n        }                                                                                                              // 405\n                                                                                                                       //\n        return _initDenormalization;                                                                                   //\n    }(); /**                                                                                                           //\n          * Verifies if this linker is denormalized. It can be denormalized from the inverse side as well.             //\n          *                                                                                                            //\n          * @returns {boolean}                                                                                         //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype.isDenormalized = function () {                                                                    //\n        function isDenormalized() {                                                                                    //\n            return !!this.linkConfig.denormalize;                                                                      // 414\n        }                                                                                                              // 415\n                                                                                                                       //\n        return isDenormalized;                                                                                         //\n    }(); /**                                                                                                           //\n          * Verifies if the body of the linked element does not contain fields outside the cache body                  //\n          *                                                                                                            //\n          * @param body                                                                                                //\n          * @returns {boolean}                                                                                         //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Linker.prototype.isSubBodyDenormalized = function () {                                                             //\n        function isSubBodyDenormalized(body) {                                                                         //\n            var cacheBody = this.linkConfig.denormalize.body;                                                          // 425\n                                                                                                                       //\n            var cacheBodyFields = _.keys(dot.dot(cacheBody));                                                          // 427\n                                                                                                                       //\n            var bodyFields = _.keys(dot.dot(_.omit(body, '_id')));                                                     // 428\n                                                                                                                       //\n            return _.difference(bodyFields, cacheBodyFields).length === 0;                                             // 434\n        }                                                                                                              // 435\n                                                                                                                       //\n        return isSubBodyDenormalized;                                                                                  //\n    }();                                                                                                               //\n                                                                                                                       //\n    (0, _createClass3.default)(Linker, [{                                                                              //\n        key: \"oneTypes\",                                                                                               //\n        get: function () {                                                                                             //\n            return ['one', '1'];                                                                                       // 44\n        } /**                                                                                                          // 45\n           * Returns the strategies: one, many, one-meta, many-meta                                                    //\n           * @returns {string}                                                                                         //\n           */                                                                                                          //\n    }, {                                                                                                               //\n        key: \"strategy\",                                                                                               //\n        get: function () {                                                                                             //\n            var strategy = this.isMany() ? 'many' : 'one';                                                             // 52\n                                                                                                                       //\n            if (this.linkConfig.metadata) {                                                                            // 53\n                strategy += '-meta';                                                                                   // 54\n            }                                                                                                          // 55\n                                                                                                                       //\n            return strategy;                                                                                           // 57\n        } /**                                                                                                          // 58\n           * Returns the field name in the document where the actual relationships are stored.                         //\n           * @returns string                                                                                           //\n           */                                                                                                          //\n    }, {                                                                                                               //\n        key: \"linkStorageField\",                                                                                       //\n        get: function () {                                                                                             //\n            if (this.isVirtual()) {                                                                                    // 65\n                return this.linkConfig.relatedLinker.linkStorageField;                                                 // 66\n            }                                                                                                          // 67\n                                                                                                                       //\n            return this.linkConfig.field;                                                                              // 69\n        }                                                                                                              // 70\n    }]);                                                                                                               //\n    return Linker;                                                                                                     //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"createSearchFilters.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/lib/createSearchFilters.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return createSearchFilters;                                                                                    // 1\n    },                                                                                                                 // 1\n    createOne: function () {                                                                                           // 1\n        return createOne;                                                                                              // 1\n    },                                                                                                                 // 1\n    createOneVirtual: function () {                                                                                    // 1\n        return createOneVirtual;                                                                                       // 1\n    },                                                                                                                 // 1\n    createOneMeta: function () {                                                                                       // 1\n        return createOneMeta;                                                                                          // 1\n    },                                                                                                                 // 1\n    createOneMetaVirtual: function () {                                                                                // 1\n        return createOneMetaVirtual;                                                                                   // 1\n    },                                                                                                                 // 1\n    createMany: function () {                                                                                          // 1\n        return createMany;                                                                                             // 1\n    },                                                                                                                 // 1\n    createManyVirtual: function () {                                                                                   // 1\n        return createManyVirtual;                                                                                      // 1\n    },                                                                                                                 // 1\n    createManyMeta: function () {                                                                                      // 1\n        return createManyMeta;                                                                                         // 1\n    },                                                                                                                 // 1\n    createManyMetaVirtual: function () {                                                                               // 1\n        return createManyMetaVirtual;                                                                                  // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar sift = void 0;                                                                                                     // 1\nmodule.watch(require(\"sift\"), {                                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        sift = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nfunction createSearchFilters(object, fieldStorage, strategy, isVirtual, metaFilters) {                                 // 3\n    if (!isVirtual) {                                                                                                  // 4\n        switch (strategy) {                                                                                            // 5\n            case 'one':                                                                                                // 6\n                return createOne(object, fieldStorage);                                                                // 6\n                                                                                                                       //\n            case 'one-meta':                                                                                           // 7\n                return createOneMeta(object, fieldStorage, metaFilters);                                               // 7\n                                                                                                                       //\n            case 'many':                                                                                               // 8\n                return createMany(object, fieldStorage);                                                               // 8\n                                                                                                                       //\n            case 'many-meta':                                                                                          // 9\n                return createManyMeta(object, fieldStorage, metaFilters);                                              // 9\n                                                                                                                       //\n            default:                                                                                                   // 10\n                throw new Meteor.Error(\"Invalid linking strategy: \" + strategy);                                       // 11\n        }                                                                                                              // 5\n    } else {                                                                                                           // 13\n        switch (strategy) {                                                                                            // 14\n            case 'one':                                                                                                // 15\n                return createOneVirtual(object, fieldStorage);                                                         // 15\n                                                                                                                       //\n            case 'one-meta':                                                                                           // 16\n                return createOneMetaVirtual(object, fieldStorage, metaFilters);                                        // 16\n                                                                                                                       //\n            case 'many':                                                                                               // 17\n                return createManyVirtual(object, fieldStorage);                                                        // 17\n                                                                                                                       //\n            case 'many-meta':                                                                                          // 18\n                return createManyMetaVirtual(object, fieldStorage, metaFilters);                                       // 18\n                                                                                                                       //\n            default:                                                                                                   // 19\n                throw new Meteor.Error(\"Invalid linking strategy: \" + strategy);                                       // 20\n        }                                                                                                              // 14\n    }                                                                                                                  // 22\n}                                                                                                                      // 23\n                                                                                                                       //\nfunction createOne(object, fieldStorage) {                                                                             // 25\n    return {                                                                                                           // 26\n        _id: object[fieldStorage]                                                                                      // 27\n    };                                                                                                                 // 26\n}                                                                                                                      // 29\n                                                                                                                       //\nfunction createOneVirtual(object, fieldStorage) {                                                                      // 31\n    var _ref;                                                                                                          // 31\n                                                                                                                       //\n    return _ref = {}, _ref[fieldStorage] = object._id, _ref;                                                           // 32\n}                                                                                                                      // 35\n                                                                                                                       //\nfunction createOneMeta(object, fieldStorage, metaFilters) {                                                            // 37\n    var value = object[fieldStorage];                                                                                  // 38\n                                                                                                                       //\n    if (metaFilters) {                                                                                                 // 40\n        if (!sift(metaFilters)(value)) {                                                                               // 41\n            return {                                                                                                   // 42\n                _id: undefined                                                                                         // 42\n            };                                                                                                         // 42\n        }                                                                                                              // 43\n    }                                                                                                                  // 44\n                                                                                                                       //\n    return {                                                                                                           // 46\n        _id: value ? value._id : value                                                                                 // 47\n    };                                                                                                                 // 46\n}                                                                                                                      // 49\n                                                                                                                       //\nfunction createOneMetaVirtual(object, fieldStorage, metaFilters) {                                                     // 51\n    var filters = {};                                                                                                  // 52\n                                                                                                                       //\n    if (metaFilters) {                                                                                                 // 53\n        _.each(metaFilters, function (value, key) {                                                                    // 54\n            filters[fieldStorage + '.' + key] = value;                                                                 // 55\n        });                                                                                                            // 56\n    }                                                                                                                  // 57\n                                                                                                                       //\n    filters[fieldStorage + '._id'] = object._id;                                                                       // 59\n    return filters;                                                                                                    // 61\n}                                                                                                                      // 62\n                                                                                                                       //\nfunction createMany(object, fieldStorage) {                                                                            // 64\n    return {                                                                                                           // 65\n        _id: {                                                                                                         // 66\n            $in: object[fieldStorage] || []                                                                            // 67\n        }                                                                                                              // 66\n    };                                                                                                                 // 65\n}                                                                                                                      // 70\n                                                                                                                       //\nfunction createManyVirtual(object, fieldStorage) {                                                                     // 72\n    var _ref2;                                                                                                         // 72\n                                                                                                                       //\n    return _ref2 = {}, _ref2[fieldStorage] = object._id, _ref2;                                                        // 73\n}                                                                                                                      // 76\n                                                                                                                       //\nfunction createManyMeta(object, fieldStorage, metaFilters) {                                                           // 78\n    var value = object[fieldStorage];                                                                                  // 79\n                                                                                                                       //\n    if (metaFilters) {                                                                                                 // 81\n        value = sift(metaFilters, value);                                                                              // 82\n    }                                                                                                                  // 83\n                                                                                                                       //\n    return {                                                                                                           // 85\n        _id: {                                                                                                         // 86\n            $in: _.pluck(value, '_id') || []                                                                           // 87\n        }                                                                                                              // 86\n    };                                                                                                                 // 85\n}                                                                                                                      // 90\n                                                                                                                       //\nfunction createManyMetaVirtual(object, fieldStorage, metaFilters) {                                                    // 92\n    var _ref3;                                                                                                         // 92\n                                                                                                                       //\n    var filters = {};                                                                                                  // 93\n                                                                                                                       //\n    if (metaFilters) {                                                                                                 // 94\n        _.each(metaFilters, function (value, key) {                                                                    // 95\n            filters[key] = value;                                                                                      // 96\n        });                                                                                                            // 97\n    }                                                                                                                  // 98\n                                                                                                                       //\n    filters._id = object._id;                                                                                          // 100\n    return _ref3 = {}, _ref3[fieldStorage] = {                                                                         // 102\n        $elemMatch: filters                                                                                            // 103\n    }, _ref3;                                                                                                          // 103\n}                                                                                                                      // 105\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"linkTypes\":{\"base.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/linkTypes/base.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return Link;                                                                                                   // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar SmartArgs = void 0;                                                                                                // 1\nmodule.watch(require(\"./lib/smartArguments.js\"), {                                                                     // 1\n    \"default\": function (v) {                                                                                          // 1\n        SmartArgs = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar createSearchFilters = void 0;                                                                                      // 1\nmodule.watch(require(\"../lib/createSearchFilters\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        createSearchFilters = v;                                                                                       // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar Link = function () {                                                                                               //\n    (0, _createClass3.default)(Link, [{                                                                                //\n        key: \"config\",                                                                                                 //\n        get: function () {                                                                                             //\n            return this.linker.linkConfig;                                                                             // 5\n        }                                                                                                              // 5\n    }, {                                                                                                               //\n        key: \"isVirtual\",                                                                                              //\n        get: function () {                                                                                             //\n            return this.linker.isVirtual();                                                                            // 7\n        }                                                                                                              // 7\n    }]);                                                                                                               //\n                                                                                                                       //\n    function Link(linker, object, collection) {                                                                        // 9\n        (0, _classCallCheck3.default)(this, Link);                                                                     // 9\n        this.linker = linker;                                                                                          // 10\n        this.object = object;                                                                                          // 11\n        this.linkedCollection = collection ? collection : linker.getLinkedCollection();                                // 12\n                                                                                                                       //\n        if (this.linker.isVirtual()) {                                                                                 // 14\n            this.linkStorageField = this.config.relatedLinker.linkConfig.field;                                        // 15\n        } else {                                                                                                       // 16\n            this.linkStorageField = this.config.field;                                                                 // 17\n        }                                                                                                              // 18\n    } /**                                                                                                              // 19\n       * Gets the stored link information value                                                                        //\n       * @returns {*}                                                                                                  //\n       */                                                                                                              //\n                                                                                                                       //\n    Link.prototype.value = function () {                                                                               //\n        function value() {                                                                                             //\n            if (this.isVirtual) {                                                                                      // 26\n                throw new Meteor.Error('You can only take the value from the main link.');                             // 27\n            }                                                                                                          // 28\n                                                                                                                       //\n            return this.object[this.linkStorageField];                                                                 // 30\n        }                                                                                                              // 31\n                                                                                                                       //\n        return value;                                                                                                  //\n    }(); /**                                                                                                           //\n          * Finds linked data.                                                                                         //\n          *                                                                                                            //\n          * @param filters                                                                                             //\n          * @param options                                                                                             //\n          * @returns {*}                                                                                               //\n          * @param userId                                                                                              //\n          */                                                                                                           //\n                                                                                                                       //\n    Link.prototype.find = function () {                                                                                //\n        function find() {                                                                                              //\n            var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                      // 41\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                      // 41\n            var userId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;                // 41\n            var linker = this.linker;                                                                                  // 42\n            var linkedCollection = this.linkedCollection;                                                              // 43\n            var $metaFilters = void 0;                                                                                 // 45\n                                                                                                                       //\n            if (filters.$meta) {                                                                                       // 46\n                $metaFilters = filters.$meta;                                                                          // 47\n                delete filters.$meta;                                                                                  // 48\n            }                                                                                                          // 49\n                                                                                                                       //\n            var searchFilters = createSearchFilters(this.object, this.linkStorageField, linker.strategy, linker.isVirtual(), $metaFilters);\n                                                                                                                       //\n            var appliedFilters = _.extend({}, filters, searchFilters); // see https://github.com/cult-of-coders/grapher/issues/134\n            // happens due to recursive importing of modules                                                           // 62\n            // TODO: find another way to do this                                                                       // 63\n                                                                                                                       //\n                                                                                                                       //\n            if (linkedCollection.find) {                                                                               // 64\n                return linkedCollection.find(appliedFilters, options, userId);                                         // 65\n            } else {                                                                                                   // 66\n                return linkedCollection.default.find(appliedFilters, options, userId);                                 // 67\n            }                                                                                                          // 68\n        }                                                                                                              // 69\n                                                                                                                       //\n        return find;                                                                                                   //\n    }(); /**                                                                                                           //\n          * @param filters                                                                                             //\n          * @param options                                                                                             //\n          * @param others                                                                                              //\n          * @returns {*|{content}|any}                                                                                 //\n          */                                                                                                           //\n                                                                                                                       //\n    Link.prototype.fetch = function () {                                                                               //\n        function fetch(filters, options) {                                                                             //\n            for (var _len = arguments.length, others = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                others[_key - 2] = arguments[_key];                                                                    // 77\n            }                                                                                                          // 77\n                                                                                                                       //\n            var result = this.find.apply(this, [filters, options].concat(others)).fetch();                             // 78\n                                                                                                                       //\n            if (this.linker.isOneResult()) {                                                                           // 80\n                return _.first(result);                                                                                // 81\n            }                                                                                                          // 82\n                                                                                                                       //\n            return result;                                                                                             // 84\n        }                                                                                                              // 85\n                                                                                                                       //\n        return fetch;                                                                                                  //\n    }(); /**                                                                                                           //\n          * When we are dealing with multiple type relationships, $in would require an array. If the field value is null, it will fail\n          * We use clean to make it an empty array by default.                                                         //\n          */                                                                                                           //\n                                                                                                                       //\n    Link.prototype.clean = function () {                                                                               //\n        function clean() {}                                                                                            //\n                                                                                                                       //\n        return clean;                                                                                                  //\n    }(); /**                                                                                                           //\n          * Extracts a single id                                                                                       //\n          */                                                                                                           //\n                                                                                                                       //\n    Link.prototype.identifyId = function () {                                                                          //\n        function identifyId(what, saveToDatabase) {                                                                    //\n            return SmartArgs.getId(what, {                                                                             // 97\n                saveToDatabase: saveToDatabase,                                                                        // 98\n                collection: this.linkedCollection                                                                      // 99\n            });                                                                                                        // 97\n        }                                                                                                              // 101\n                                                                                                                       //\n        return identifyId;                                                                                             //\n    }(); /**                                                                                                           //\n          * Extracts the ids of object(s) or strings and returns an array.                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    Link.prototype.identifyIds = function () {                                                                         //\n        function identifyIds(what, saveToDatabase) {                                                                   //\n            return SmartArgs.getIds(what, {                                                                            // 107\n                saveToDatabase: saveToDatabase,                                                                        // 108\n                collection: this.linkedCollection                                                                      // 109\n            });                                                                                                        // 107\n        }                                                                                                              // 111\n                                                                                                                       //\n        return identifyIds;                                                                                            //\n    }(); /**                                                                                                           //\n          * Checks when linking data, if the ids are valid with the linked collection.                                 //\n          * @throws Meteor.Error                                                                                       //\n          * @param ids                                                                                                 //\n          *                                                                                                            //\n          * @protected                                                                                                 //\n          */                                                                                                           //\n                                                                                                                       //\n    Link.prototype._validateIds = function () {                                                                        //\n        function _validateIds(ids) {                                                                                   //\n            if (!_.isArray(ids)) {                                                                                     // 121\n                ids = [ids];                                                                                           // 122\n            }                                                                                                          // 123\n                                                                                                                       //\n            var validIds = this.linkedCollection.find({                                                                // 125\n                _id: {                                                                                                 // 126\n                    $in: ids                                                                                           // 126\n                }                                                                                                      // 126\n            }, {                                                                                                       // 125\n                fields: {                                                                                              // 127\n                    _id: 1                                                                                             // 127\n                }                                                                                                      // 127\n            }).fetch().map(function (doc) {                                                                            // 127\n                return doc._id;                                                                                        // 127\n            });                                                                                                        // 127\n                                                                                                                       //\n            if (validIds.length != ids.length) {                                                                       // 129\n                throw new Meteor.Error('not-found', \"You tried to create links with non-existing id(s) inside \\\"\" + this.linkedCollection._name + \"\\\": \" + _.difference(ids, validIds).join(', '));\n            }                                                                                                          // 131\n        }                                                                                                              // 132\n                                                                                                                       //\n        return _validateIds;                                                                                           //\n    }(); /**                                                                                                           //\n          * This is for allowing commands such as set/unset/add/remove/metadata from the virtual link.                 //\n          *                                                                                                            //\n          * @param action                                                                                              //\n          * @param what                                                                                                //\n          * @param metadata                                                                                            //\n          *                                                                                                            //\n          * @protected                                                                                                 //\n          */                                                                                                           //\n                                                                                                                       //\n    Link.prototype._virtualAction = function () {                                                                      //\n        function _virtualAction(action, what, metadata) {                                                              //\n            var _this = this;                                                                                          // 143\n                                                                                                                       //\n            var linker = this.linker.linkConfig.relatedLinker; // its an unset operation most likely.                  // 144\n                                                                                                                       //\n            if (what === undefined) {                                                                                  // 147\n                var reversedLink = linker.createLink(this.fetch());                                                    // 148\n                reversedLink.unset();                                                                                  // 149\n                return;                                                                                                // 151\n            }                                                                                                          // 152\n                                                                                                                       //\n            if (!_.isArray(what)) {                                                                                    // 154\n                what = [what];                                                                                         // 155\n            }                                                                                                          // 156\n                                                                                                                       //\n            what = _.map(what, function (element) {                                                                    // 158\n                if (!_.isObject(element)) {                                                                            // 159\n                    return linker.mainCollection.findOne(element);                                                     // 160\n                } else {                                                                                               // 161\n                    if (!element._id) {                                                                                // 162\n                        var elementId = linker.mainCollection.insert(element);                                         // 163\n                                                                                                                       //\n                        _.extend(element, linker.mainCollection.findOne(elementId));                                   // 164\n                    }                                                                                                  // 165\n                                                                                                                       //\n                    return element;                                                                                    // 167\n                }                                                                                                      // 168\n            });                                                                                                        // 169\n            return _.map(what, function (element) {                                                                    // 171\n                var reversedLink = linker.createLink(element);                                                         // 172\n                                                                                                                       //\n                if (action == 'metadata') {                                                                            // 174\n                    if (linker.isSingle()) {                                                                           // 175\n                        return reversedLink.metadata(metadata);                                                        // 176\n                    } else {                                                                                           // 177\n                        return reversedLink.metadata(_this.object, metadata);                                          // 178\n                    }                                                                                                  // 179\n                } else if (action == 'add' || action == 'set') {                                                       // 180\n                    if (linker.isSingle()) {                                                                           // 181\n                        reversedLink.set(_this.object, metadata);                                                      // 182\n                    } else {                                                                                           // 183\n                        reversedLink.add(_this.object, metadata);                                                      // 184\n                    }                                                                                                  // 185\n                } else {                                                                                               // 186\n                    if (linker.isSingle()) {                                                                           // 187\n                        reversedLink.unset();                                                                          // 188\n                    } else {                                                                                           // 189\n                        reversedLink.remove(_this.object);                                                             // 190\n                    }                                                                                                  // 191\n                }                                                                                                      // 192\n            });                                                                                                        // 193\n        }                                                                                                              // 194\n                                                                                                                       //\n        return _virtualAction;                                                                                         //\n    }();                                                                                                               //\n                                                                                                                       //\n    return Link;                                                                                                       //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"linkMany.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/linkTypes/linkMany.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return LinkMany;                                                                                               // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar Link = void 0;                                                                                                     // 1\nmodule.watch(require(\"./base.js\"), {                                                                                   // 1\n    \"default\": function (v) {                                                                                          // 1\n        Link = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar SmartArgs = void 0;                                                                                                // 1\nmodule.watch(require(\"./lib/smartArguments.js\"), {                                                                     // 1\n    \"default\": function (v) {                                                                                          // 1\n        SmartArgs = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar LinkMany = function (_Link) {                                                                                      //\n    (0, _inherits3.default)(LinkMany, _Link);                                                                          //\n                                                                                                                       //\n    function LinkMany() {                                                                                              //\n        (0, _classCallCheck3.default)(this, LinkMany);                                                                 //\n        return (0, _possibleConstructorReturn3.default)(this, _Link.apply(this, arguments));                           //\n    }                                                                                                                  //\n                                                                                                                       //\n    LinkMany.prototype.clean = function () {                                                                           //\n        function clean() {                                                                                             //\n            if (!this.object[this.linkStorageField]) {                                                                 // 6\n                this.object[this.linkStorageField] = [];                                                               // 7\n            }                                                                                                          // 8\n        }                                                                                                              // 9\n                                                                                                                       //\n        return clean;                                                                                                  //\n    }(); /**                                                                                                           //\n          * Ads the _ids to the object.                                                                                //\n          * @param what                                                                                                //\n          */                                                                                                           //\n                                                                                                                       //\n    LinkMany.prototype.add = function () {                                                                             //\n        function add(what) {                                                                                           //\n            var _$addToSet;                                                                                            // 15\n                                                                                                                       //\n            if (this.isVirtual) {                                                                                      // 16\n                this._virtualAction('add', what);                                                                      // 17\n                                                                                                                       //\n                return this;                                                                                           // 18\n            } //if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/remove operations must be done from the owning-link of the relationship');\n                                                                                                                       //\n                                                                                                                       //\n            this.clean();                                                                                              // 23\n                                                                                                                       //\n            var _ids = this.identifyIds(what, true);                                                                   // 25\n                                                                                                                       //\n            this._validateIds(_ids);                                                                                   // 26\n                                                                                                                       //\n            var field = this.linkStorageField; // update the field                                                     // 28\n                                                                                                                       //\n            this.object[field] = _.union(this.object[field], _ids); // update the db                                   // 31\n                                                                                                                       //\n            var modifier = {                                                                                           // 34\n                $addToSet: (_$addToSet = {}, _$addToSet[field] = {                                                     // 35\n                    $each: _ids                                                                                        // 36\n                }, _$addToSet)                                                                                         // 36\n            };                                                                                                         // 34\n            this.linker.mainCollection.update(this.object._id, modifier);                                              // 40\n            return this;                                                                                               // 42\n        }                                                                                                              // 43\n                                                                                                                       //\n        return add;                                                                                                    //\n    }(); /**                                                                                                           //\n          * @param what                                                                                                //\n          */                                                                                                           //\n                                                                                                                       //\n    LinkMany.prototype.remove = function () {                                                                          //\n        function remove(what) {                                                                                        //\n            var _$pullAll;                                                                                             // 48\n                                                                                                                       //\n            if (this.isVirtual) {                                                                                      // 49\n                this._virtualAction('remove', what);                                                                   // 50\n                                                                                                                       //\n                return this;                                                                                           // 51\n            }                                                                                                          // 52\n                                                                                                                       //\n            if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/Remove operations should be done from the owner of the relationship');\n            this.clean();                                                                                              // 56\n            var field = this.linkStorageField;                                                                         // 57\n                                                                                                                       //\n            var _ids = this.identifyIds(what); // update the field                                                     // 59\n                                                                                                                       //\n                                                                                                                       //\n            this.object[field] = _.filter(this.object[field], function (_id) {                                         // 62\n                return !_.contains(_ids, _id);                                                                         // 62\n            }); // update the db                                                                                       // 62\n                                                                                                                       //\n            var modifier = {                                                                                           // 65\n                $pullAll: (_$pullAll = {}, _$pullAll[field] = _ids, _$pullAll)                                         // 66\n            };                                                                                                         // 65\n            this.linker.mainCollection.update(this.object._id, modifier);                                              // 71\n            return this;                                                                                               // 73\n        }                                                                                                              // 74\n                                                                                                                       //\n        return remove;                                                                                                 //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkMany.prototype.set = function () {                                                                             //\n        function set(what) {                                                                                           //\n            if (this.isVirtual) {                                                                                      // 77\n                this._virtualAction('set', what);                                                                      // 78\n                                                                                                                       //\n                return this;                                                                                           // 79\n            }                                                                                                          // 80\n                                                                                                                       //\n            throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n        }                                                                                                              // 83\n                                                                                                                       //\n        return set;                                                                                                    //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkMany.prototype.unset = function () {                                                                           //\n        function unset(what) {                                                                                         //\n            if (this.isVirtual) {                                                                                      // 86\n                this._virtualAction('unset', what);                                                                    // 87\n                                                                                                                       //\n                return this;                                                                                           // 88\n            }                                                                                                          // 89\n                                                                                                                       //\n            throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n        }                                                                                                              // 92\n                                                                                                                       //\n        return unset;                                                                                                  //\n    }();                                                                                                               //\n                                                                                                                       //\n    return LinkMany;                                                                                                   //\n}(Link);                                                                                                               //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"linkManyMeta.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/linkTypes/linkManyMeta.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return LinkManyMeta;                                                                                           // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar Link = void 0;                                                                                                     // 1\nmodule.watch(require(\"./base.js\"), {                                                                                   // 1\n    \"default\": function (v) {                                                                                          // 1\n        Link = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar SmartArgs = void 0;                                                                                                // 1\nmodule.watch(require(\"./lib/smartArguments.js\"), {                                                                     // 1\n    \"default\": function (v) {                                                                                          // 1\n        SmartArgs = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar LinkManyMeta = function (_Link) {                                                                                  //\n    (0, _inherits3.default)(LinkManyMeta, _Link);                                                                      //\n                                                                                                                       //\n    function LinkManyMeta() {                                                                                          //\n        (0, _classCallCheck3.default)(this, LinkManyMeta);                                                             //\n        return (0, _possibleConstructorReturn3.default)(this, _Link.apply(this, arguments));                           //\n    }                                                                                                                  //\n                                                                                                                       //\n    LinkManyMeta.prototype.clean = function () {                                                                       //\n        function clean() {                                                                                             //\n            if (!this.object[this.linkStorageField]) {                                                                 // 6\n                this.object[this.linkStorageField] = [];                                                               // 7\n            }                                                                                                          // 8\n        }                                                                                                              // 9\n                                                                                                                       //\n        return clean;                                                                                                  //\n    }(); /**                                                                                                           //\n          * @param what                                                                                                //\n          * @param metadata                                                                                            //\n          */                                                                                                           //\n                                                                                                                       //\n    LinkManyMeta.prototype.add = function () {                                                                         //\n        function add(what) {                                                                                           //\n            var _this2 = this,                                                                                         // 15\n                _$addToSet;                                                                                            // 15\n                                                                                                                       //\n            var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                     // 15\n                                                                                                                       //\n            if (this.isVirtual) {                                                                                      // 16\n                this._virtualAction('add', what, metadata);                                                            // 17\n                                                                                                                       //\n                return this;                                                                                           // 18\n            }                                                                                                          // 19\n                                                                                                                       //\n            var _ids = this.identifyIds(what, true);                                                                   // 21\n                                                                                                                       //\n            this._validateIds(_ids);                                                                                   // 22\n                                                                                                                       //\n            var field = this.linkStorageField;                                                                         // 24\n            this.object[field] = this.object[field] || [];                                                             // 26\n            var metadatas = [];                                                                                        // 27\n                                                                                                                       //\n            _.each(_ids, function (_id) {                                                                              // 29\n                var localMetadata = _.clone(metadata);                                                                 // 30\n                                                                                                                       //\n                localMetadata._id = _id;                                                                               // 31\n                                                                                                                       //\n                _this2.object[field].push(localMetadata);                                                              // 33\n                                                                                                                       //\n                metadatas.push(localMetadata);                                                                         // 34\n            });                                                                                                        // 35\n                                                                                                                       //\n            var modifier = {                                                                                           // 37\n                $addToSet: (_$addToSet = {}, _$addToSet[field] = {                                                     // 38\n                    $each: metadatas                                                                                   // 39\n                }, _$addToSet)                                                                                         // 39\n            };                                                                                                         // 37\n            this.linker.mainCollection.update(this.object._id, modifier);                                              // 43\n            return this;                                                                                               // 45\n        }                                                                                                              // 46\n                                                                                                                       //\n        return add;                                                                                                    //\n    }(); /**                                                                                                           //\n          * @param what                                                                                                //\n          * @param extendMetadata                                                                                      //\n          */                                                                                                           //\n                                                                                                                       //\n    LinkManyMeta.prototype.metadata = function () {                                                                    //\n        function metadata(what, extendMetadata) {                                                                      //\n            if (this.isVirtual) {                                                                                      // 53\n                this._virtualAction('metadata', what, extendMetadata);                                                 // 54\n                                                                                                                       //\n                return this;                                                                                           // 56\n            }                                                                                                          // 57\n                                                                                                                       //\n            var field = this.linkStorageField;                                                                         // 59\n                                                                                                                       //\n            if (what === undefined) {                                                                                  // 61\n                return this.object[field];                                                                             // 62\n            }                                                                                                          // 63\n                                                                                                                       //\n            if (_.isArray(what)) {                                                                                     // 65\n                throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');\n            }                                                                                                          // 67\n                                                                                                                       //\n            var _id = this.identifyId(what);                                                                           // 69\n                                                                                                                       //\n            var existingMetadata = _.find(this.object[field], function (metadata) {                                    // 71\n                return metadata._id == _id;                                                                            // 71\n            });                                                                                                        // 71\n                                                                                                                       //\n            if (extendMetadata === undefined) {                                                                        // 72\n                return existingMetadata;                                                                               // 73\n            } else {                                                                                                   // 74\n                var _linker$mainCollectio, _$set;                                                                      // 74\n                                                                                                                       //\n                _.extend(existingMetadata, extendMetadata);                                                            // 75\n                                                                                                                       //\n                var subfield = field + '._id';                                                                         // 76\n                var subfieldUpdate = field + '.$';                                                                     // 77\n                this.linker.mainCollection.update((_linker$mainCollectio = {                                           // 79\n                    _id: this.object._id                                                                               // 80\n                }, _linker$mainCollectio[subfield] = _id, _linker$mainCollectio), {                                    // 79\n                    $set: (_$set = {}, _$set[subfieldUpdate] = existingMetadata, _$set)                                // 83\n                });                                                                                                    // 82\n            }                                                                                                          // 87\n                                                                                                                       //\n            return this;                                                                                               // 89\n        }                                                                                                              // 90\n                                                                                                                       //\n        return metadata;                                                                                               //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkManyMeta.prototype.remove = function () {                                                                      //\n        function remove(what) {                                                                                        //\n            var _$pull;                                                                                                // 92\n                                                                                                                       //\n            if (this.isVirtual) {                                                                                      // 93\n                this._virtualAction('remove', what);                                                                   // 94\n                                                                                                                       //\n                return this;                                                                                           // 95\n            }                                                                                                          // 96\n                                                                                                                       //\n            var _ids = this.identifyIds(what);                                                                         // 98\n                                                                                                                       //\n            var field = this.linkStorageField;                                                                         // 99\n            this.object[field] = _.filter(this.object[field], function (link) {                                        // 101\n                return !_.contains(_ids, link._id);                                                                    // 101\n            });                                                                                                        // 101\n            var modifier = {                                                                                           // 103\n                $pull: (_$pull = {}, _$pull[field] = {                                                                 // 104\n                    $elemMatch: {                                                                                      // 106\n                        _id: {                                                                                         // 107\n                            $in: _ids                                                                                  // 108\n                        }                                                                                              // 107\n                    }                                                                                                  // 106\n                }, _$pull)                                                                                             // 105\n            };                                                                                                         // 103\n            this.linker.mainCollection.update(this.object._id, modifier);                                              // 115\n            return this;                                                                                               // 117\n        }                                                                                                              // 118\n                                                                                                                       //\n        return remove;                                                                                                 //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkManyMeta.prototype.set = function () {                                                                         //\n        function set(what, metadata) {                                                                                 //\n            if (this.isVirtual) {                                                                                      // 121\n                this._virtualAction('set', what, metadata);                                                            // 122\n                                                                                                                       //\n                return this;                                                                                           // 123\n            }                                                                                                          // 124\n                                                                                                                       //\n            throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n        }                                                                                                              // 127\n                                                                                                                       //\n        return set;                                                                                                    //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkManyMeta.prototype.unset = function () {                                                                       //\n        function unset(what) {                                                                                         //\n            if (this.isVirtual) {                                                                                      // 130\n                this._virtualAction('unset', what);                                                                    // 131\n                                                                                                                       //\n                return this;                                                                                           // 132\n            }                                                                                                          // 133\n                                                                                                                       //\n            throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n        }                                                                                                              // 136\n                                                                                                                       //\n        return unset;                                                                                                  //\n    }();                                                                                                               //\n                                                                                                                       //\n    return LinkManyMeta;                                                                                               //\n}(Link);                                                                                                               //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"linkOne.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/linkTypes/linkOne.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return LinkOne;                                                                                                // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar Link = void 0;                                                                                                     // 1\nmodule.watch(require(\"./base.js\"), {                                                                                   // 1\n    \"default\": function (v) {                                                                                          // 1\n        Link = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar SmartArgs = void 0;                                                                                                // 1\nmodule.watch(require(\"./lib/smartArguments.js\"), {                                                                     // 1\n    \"default\": function (v) {                                                                                          // 1\n        SmartArgs = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar LinkOne = function (_Link) {                                                                                       //\n    (0, _inherits3.default)(LinkOne, _Link);                                                                           //\n                                                                                                                       //\n    function LinkOne() {                                                                                               //\n        (0, _classCallCheck3.default)(this, LinkOne);                                                                  //\n        return (0, _possibleConstructorReturn3.default)(this, _Link.apply(this, arguments));                           //\n    }                                                                                                                  //\n                                                                                                                       //\n    LinkOne.prototype.set = function () {                                                                              //\n        function set(what) {                                                                                           //\n            var _$set;                                                                                                 // 5\n                                                                                                                       //\n            if (this.isVirtual) {                                                                                      // 6\n                this._virtualAction('set', what);                                                                      // 7\n                                                                                                                       //\n                return this;                                                                                           // 8\n            }                                                                                                          // 9\n                                                                                                                       //\n            var field = this.linkStorageField;                                                                         // 11\n                                                                                                                       //\n            var _id = this.identifyId(what, true);                                                                     // 12\n                                                                                                                       //\n            this._validateIds([_id]);                                                                                  // 13\n                                                                                                                       //\n            this.object[field] = _id;                                                                                  // 15\n            this.linker.mainCollection.update(this.object._id, {                                                       // 17\n                $set: (_$set = {}, _$set[field] = _id, _$set)                                                          // 18\n            });                                                                                                        // 17\n            return this;                                                                                               // 23\n        }                                                                                                              // 24\n                                                                                                                       //\n        return set;                                                                                                    //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkOne.prototype.unset = function () {                                                                            //\n        function unset() {                                                                                             //\n            var _$set2;                                                                                                // 26\n                                                                                                                       //\n            if (this.isVirtual) {                                                                                      // 27\n                this._virtualAction('unset', what);                                                                    // 28\n                                                                                                                       //\n                return this;                                                                                           // 29\n            }                                                                                                          // 30\n                                                                                                                       //\n            var field = this.linkStorageField;                                                                         // 32\n            this.object[field] = null;                                                                                 // 33\n            this.linker.mainCollection.update(this.object._id, {                                                       // 35\n                $set: (_$set2 = {}, _$set2[field] = null, _$set2)                                                      // 36\n            });                                                                                                        // 35\n            return this;                                                                                               // 41\n        }                                                                                                              // 42\n                                                                                                                       //\n        return unset;                                                                                                  //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkOne.prototype.add = function () {                                                                              //\n        function add(what) {                                                                                           //\n            if (this.isVirtual) {                                                                                      // 45\n                this._virtualAction('add', what);                                                                      // 46\n                                                                                                                       //\n                return this;                                                                                           // 47\n            }                                                                                                          // 48\n                                                                                                                       //\n            throw new Meteor.Error('invalid-command', 'You are trying to *add* in a relationship that is single. Please use set/unset for *single* relationships');\n        }                                                                                                              // 51\n                                                                                                                       //\n        return add;                                                                                                    //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkOne.prototype.remove = function () {                                                                           //\n        function remove(what) {                                                                                        //\n            if (this.isVirtual) {                                                                                      // 54\n                this._virtualAction('remove', what);                                                                   // 55\n                                                                                                                       //\n                return this;                                                                                           // 56\n            }                                                                                                          // 57\n                                                                                                                       //\n            throw new Meteor.Error('invalid-command', 'You are trying to *remove* in a relationship that is single. Please use set/unset for *single* relationships');\n        }                                                                                                              // 60\n                                                                                                                       //\n        return remove;                                                                                                 //\n    }();                                                                                                               //\n                                                                                                                       //\n    return LinkOne;                                                                                                    //\n}(Link);                                                                                                               //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"linkOneMeta.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/linkTypes/linkOneMeta.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return LinkOneMeta;                                                                                            // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar Link = void 0;                                                                                                     // 1\nmodule.watch(require(\"./base.js\"), {                                                                                   // 1\n    \"default\": function (v) {                                                                                          // 1\n        Link = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar SmartArgs = void 0;                                                                                                // 1\nmodule.watch(require(\"./lib/smartArguments.js\"), {                                                                     // 1\n    \"default\": function (v) {                                                                                          // 1\n        SmartArgs = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar LinkOneMeta = function (_Link) {                                                                                   //\n    (0, _inherits3.default)(LinkOneMeta, _Link);                                                                       //\n                                                                                                                       //\n    function LinkOneMeta() {                                                                                           //\n        (0, _classCallCheck3.default)(this, LinkOneMeta);                                                              //\n        return (0, _possibleConstructorReturn3.default)(this, _Link.apply(this, arguments));                           //\n    }                                                                                                                  //\n                                                                                                                       //\n    LinkOneMeta.prototype.set = function () {                                                                          //\n        function set(what) {                                                                                           //\n            var _$set;                                                                                                 // 5\n                                                                                                                       //\n            var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                     // 5\n                                                                                                                       //\n            if (this.isVirtual) {                                                                                      // 6\n                this._virtualAction('set', what);                                                                      // 7\n                                                                                                                       //\n                return this;                                                                                           // 8\n            }                                                                                                          // 9\n                                                                                                                       //\n            var field = this.linkStorageField;                                                                         // 11\n            metadata._id = this.identifyId(what, true);                                                                // 12\n                                                                                                                       //\n            this._validateIds([metadata._id]);                                                                         // 13\n                                                                                                                       //\n            this.object[field] = metadata;                                                                             // 15\n            this.linker.mainCollection.update(this.object._id, {                                                       // 17\n                $set: (_$set = {}, _$set[field] = metadata, _$set)                                                     // 18\n            });                                                                                                        // 17\n            return this;                                                                                               // 23\n        }                                                                                                              // 24\n                                                                                                                       //\n        return set;                                                                                                    //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkOneMeta.prototype.metadata = function () {                                                                     //\n        function metadata(extendMetadata) {                                                                            //\n            if (this.isVirtual) {                                                                                      // 27\n                this._virtualAction('metadata', undefined, extendMetadata);                                            // 28\n                                                                                                                       //\n                return this;                                                                                           // 30\n            }                                                                                                          // 31\n                                                                                                                       //\n            var field = this.linkStorageField;                                                                         // 33\n                                                                                                                       //\n            if (!extendMetadata) {                                                                                     // 35\n                return this.object[field];                                                                             // 36\n            } else {                                                                                                   // 37\n                var _$set2;                                                                                            // 37\n                                                                                                                       //\n                _.extend(this.object[field], extendMetadata);                                                          // 38\n                                                                                                                       //\n                this.linker.mainCollection.update(this.object._id, {                                                   // 40\n                    $set: (_$set2 = {}, _$set2[field] = this.object[field], _$set2)                                    // 41\n                });                                                                                                    // 40\n            }                                                                                                          // 45\n                                                                                                                       //\n            return this;                                                                                               // 47\n        }                                                                                                              // 48\n                                                                                                                       //\n        return metadata;                                                                                               //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkOneMeta.prototype.unset = function () {                                                                        //\n        function unset() {                                                                                             //\n            var _$set3;                                                                                                // 50\n                                                                                                                       //\n            if (this.isVirtual) {                                                                                      // 51\n                this._virtualAction('unset');                                                                          // 52\n                                                                                                                       //\n                return this;                                                                                           // 53\n            }                                                                                                          // 54\n                                                                                                                       //\n            var field = this.linkStorageField;                                                                         // 56\n            this.object[field] = {};                                                                                   // 57\n            this.linker.mainCollection.update(this.object._id, {                                                       // 59\n                $set: (_$set3 = {}, _$set3[field] = {}, _$set3)                                                        // 60\n            });                                                                                                        // 59\n            return this;                                                                                               // 65\n        }                                                                                                              // 66\n                                                                                                                       //\n        return unset;                                                                                                  //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkOneMeta.prototype.add = function () {                                                                          //\n        function add(what, metadata) {                                                                                 //\n            if (this.isVirtual) {                                                                                      // 69\n                this._virtualAction('add', what, metadata);                                                            // 70\n                                                                                                                       //\n                return this;                                                                                           // 71\n            }                                                                                                          // 72\n                                                                                                                       //\n            throw new Meteor.Error('invalid-command', 'You are trying to *add* in a relationship that is single. Please use set/unset for *single* relationships');\n        }                                                                                                              // 75\n                                                                                                                       //\n        return add;                                                                                                    //\n    }();                                                                                                               //\n                                                                                                                       //\n    LinkOneMeta.prototype.remove = function () {                                                                       //\n        function remove(what) {                                                                                        //\n            if (this.isVirtual) {                                                                                      // 78\n                this._virtualAction('remove', what);                                                                   // 79\n                                                                                                                       //\n                return this;                                                                                           // 80\n            }                                                                                                          // 81\n                                                                                                                       //\n            throw new Meteor.Error('invalid-command', 'You are trying to *remove* in a relationship that is single. Please use set/unset for *single* relationships');\n        }                                                                                                              // 84\n                                                                                                                       //\n        return remove;                                                                                                 //\n    }();                                                                                                               //\n                                                                                                                       //\n    return LinkOneMeta;                                                                                                //\n}(Link);                                                                                                               //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"smartArguments.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/links/linkTypes/lib/smartArguments.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                                //\n                                                                                                                       //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.exportDefault(new (function () {                                                                                // 1\n    function _class() {                                                                                                // 6\n        (0, _classCallCheck3.default)(this, _class);                                                                   // 6\n    }                                                                                                                  // 6\n                                                                                                                       //\n    _class.prototype.getIds = function () {                                                                            // 6\n        function getIds(what, options) {                                                                               // 6\n            var _this = this;                                                                                          // 7\n                                                                                                                       //\n            if (_.isArray(what)) {                                                                                     // 8\n                return _.map(what, function (subWhat) {                                                                // 9\n                    return _this.getId(subWhat, options);                                                              // 10\n                });                                                                                                    // 11\n            } else {                                                                                                   // 12\n                return [this.getId(what, options)];                                                                    // 13\n            }                                                                                                          // 14\n                                                                                                                       //\n            throw new Meteor.Error('invalid-type', \"Unrecognized type: \" + (typeof what === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(what)) + \" for managing links\");\n        }                                                                                                              // 17\n                                                                                                                       //\n        return getIds;                                                                                                 // 6\n    }();                                                                                                               // 6\n                                                                                                                       //\n    _class.prototype.getId = function () {                                                                             // 6\n        function getId(what, options) {                                                                                // 6\n            if (typeof what === 'string') {                                                                            // 20\n                return what;                                                                                           // 21\n            }                                                                                                          // 22\n                                                                                                                       //\n            if ((typeof what === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(what)) === 'object') {              // 24\n                if (!what._id && options.saveToDatabase) {                                                             // 25\n                    what._id = options.collection.insert(what);                                                        // 26\n                }                                                                                                      // 27\n                                                                                                                       //\n                return what._id;                                                                                       // 29\n            }                                                                                                          // 30\n        }                                                                                                              // 31\n                                                                                                                       //\n        return getId;                                                                                                  // 6\n    }();                                                                                                               // 6\n                                                                                                                       //\n    return _class;                                                                                                     // 6\n}())());                                                                                                               // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"namedQuery\":{\"namedQuery.base.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/namedQuery/namedQuery.base.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                                              //\n                                                                                                                       //\nvar _extends3 = _interopRequireDefault(_extends2);                                                                     //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return NamedQueryBase;                                                                                         // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar deepClone = void 0;                                                                                                // 1\nmodule.watch(require(\"lodash.clonedeep\"), {                                                                            // 1\n    \"default\": function (v) {                                                                                          // 1\n        deepClone = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nvar NamedQueryBase = function () {                                                                                     //\n    function NamedQueryBase(name, collection, body) {                                                                  // 6\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};                          // 6\n        (0, _classCallCheck3.default)(this, NamedQueryBase);                                                           // 6\n        this.isNamedQuery = true;                                                                                      // 6\n        this.queryName = name;                                                                                         // 7\n                                                                                                                       //\n        if (_.isFunction(body)) {                                                                                      // 9\n            this.resolver = body;                                                                                      // 10\n        } else {                                                                                                       // 11\n            this.body = deepClone(body);                                                                               // 12\n        }                                                                                                              // 13\n                                                                                                                       //\n        this.subscriptionHandle = null;                                                                                // 15\n        this.params = options.params || {};                                                                            // 16\n        this.options = options;                                                                                        // 17\n        this.collection = collection;                                                                                  // 18\n        this.isExposed = false;                                                                                        // 19\n    }                                                                                                                  // 20\n                                                                                                                       //\n    NamedQueryBase.prototype.setParams = function () {                                                                 //\n        function setParams(params) {                                                                                   //\n            this.params = _.extend({}, this.params, params);                                                           // 31\n            return this;                                                                                               // 33\n        }                                                                                                              // 34\n                                                                                                                       //\n        return setParams;                                                                                              //\n    }(); /**                                                                                                           //\n          * Validates the parameters                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    NamedQueryBase.prototype.doValidateParams = function () {                                                          //\n        function doValidateParams(params) {                                                                            //\n            params = params || this.params;                                                                            // 40\n            var validateParams = this.options.validateParams;                                                          // 39\n            if (!validateParams) return;                                                                               // 43\n                                                                                                                       //\n            try {                                                                                                      // 45\n                this._validate(validateParams, params);                                                                // 46\n            } catch (validationError) {                                                                                // 47\n                console.error(\"Invalid parameters supplied to the query \\\"\" + this.queryName + \"\\\"\\n\", validationError);\n                throw validationError; // rethrow                                                                      // 49\n            }                                                                                                          // 50\n        }                                                                                                              // 51\n                                                                                                                       //\n        return doValidateParams;                                                                                       //\n    }();                                                                                                               //\n                                                                                                                       //\n    NamedQueryBase.prototype.clone = function () {                                                                     //\n        function clone(newParams) {                                                                                    //\n            var params = _.extend({}, deepClone(this.params), newParams);                                              // 54\n                                                                                                                       //\n            var clone = new this.constructor(this.queryName, this.collection, this.isResolver ? this.resolver : deepClone(this.body), (0, _extends3.default)({}, this.options, {\n                params: params                                                                                         // 62\n            }));                                                                                                       // 56\n            clone.cacher = this.cacher;                                                                                // 66\n                                                                                                                       //\n            if (this.exposeConfig) {                                                                                   // 67\n                clone.exposeConfig = this.exposeConfig;                                                                // 68\n            }                                                                                                          // 69\n                                                                                                                       //\n            return clone;                                                                                              // 71\n        }                                                                                                              // 72\n                                                                                                                       //\n        return clone;                                                                                                  //\n    }(); /**                                                                                                           //\n          * @param {function|object} validator                                                                         //\n          * @param {object} params                                                                                     //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    NamedQueryBase.prototype._validate = function () {                                                                 //\n        function _validate(validator, params) {                                                                        //\n            if (_.isFunction(validator)) {                                                                             // 80\n                validator.call(null, params);                                                                          // 81\n            } else {                                                                                                   // 82\n                check(params, validator);                                                                              // 83\n            }                                                                                                          // 84\n        }                                                                                                              // 85\n                                                                                                                       //\n        return _validate;                                                                                              //\n    }();                                                                                                               //\n                                                                                                                       //\n    (0, _createClass3.default)(NamedQueryBase, [{                                                                      //\n        key: \"name\",                                                                                                   //\n        get: function () {                                                                                             //\n            return \"named_query_\" + this.queryName;                                                                    // 23\n        }                                                                                                              // 24\n    }, {                                                                                                               //\n        key: \"isResolver\",                                                                                             //\n        get: function () {                                                                                             //\n            return !!this.resolver;                                                                                    // 27\n        }                                                                                                              // 28\n    }]);                                                                                                               //\n    return NamedQueryBase;                                                                                             //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"namedQuery.client.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/namedQuery/namedQuery.client.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _regenerator = require(\"babel-runtime/regenerator\");                                                               //\n                                                                                                                       //\nvar _regenerator2 = _interopRequireDefault(_regenerator);                                                              //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nvar CountSubscription = void 0;                                                                                        // 1\nmodule.watch(require(\"../query/counts/countSubscription\"), {                                                           // 1\n    \"default\": function (v) {                                                                                          // 1\n        CountSubscription = v;                                                                                         // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar createGraph = void 0;                                                                                              // 1\nmodule.watch(require(\"../query/lib/createGraph.js\"), {                                                                 // 1\n    \"default\": function (v) {                                                                                          // 1\n        createGraph = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar recursiveFetch = void 0;                                                                                           // 1\nmodule.watch(require(\"../query/lib/recursiveFetch.js\"), {                                                              // 1\n    \"default\": function (v) {                                                                                          // 1\n        recursiveFetch = v;                                                                                            // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar prepareForProcess = void 0;                                                                                        // 1\nmodule.watch(require(\"../query/lib/prepareForProcess.js\"), {                                                           // 1\n    \"default\": function (v) {                                                                                          // 1\n        prepareForProcess = v;                                                                                         // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.watch(require(\"meteor/underscore\"), {                                                                           // 1\n    _: function (v) {                                                                                                  // 1\n        _ = v;                                                                                                         // 1\n    }                                                                                                                  // 1\n}, 4);                                                                                                                 // 1\nvar callWithPromise = void 0;                                                                                          // 1\nmodule.watch(require(\"../query/lib/callWithPromise\"), {                                                                // 1\n    \"default\": function (v) {                                                                                          // 1\n        callWithPromise = v;                                                                                           // 1\n    }                                                                                                                  // 1\n}, 5);                                                                                                                 // 1\nvar Base = void 0;                                                                                                     // 1\nmodule.watch(require(\"./namedQuery.base\"), {                                                                           // 1\n    \"default\": function (v) {                                                                                          // 1\n        Base = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 6);                                                                                                                 // 1\nmodule.exportDefault(function (_Base) {                                                                                // 1\n    (0, _inherits3.default)(_class, _Base);                                                                            // 1\n                                                                                                                       //\n    function _class() {                                                                                                // 1\n        (0, _classCallCheck3.default)(this, _class);                                                                   // 1\n        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));                           // 1\n    }                                                                                                                  // 1\n                                                                                                                       //\n    /**                                                                                                                // 10\n     * Subscribe                                                                                                       //\n     *                                                                                                                 //\n     * @param callback                                                                                                 //\n     * @returns {null|any|*}                                                                                           //\n     */_class.prototype.subscribe = function () {                                                                      //\n        function subscribe(callback) {                                                                                 // 1\n            if (this.isResolver) {                                                                                     // 17\n                throw new Meteor.Error('not-allowed', \"You cannot subscribe to a resolver query\");                     // 18\n            }                                                                                                          // 19\n                                                                                                                       //\n            this.subscriptionHandle = Meteor.subscribe(this.name, this.params, callback);                              // 21\n            return this.subscriptionHandle;                                                                            // 27\n        }                                                                                                              // 28\n                                                                                                                       //\n        return subscribe;                                                                                              // 1\n    }(); /**                                                                                                           // 1\n          * Subscribe to the counts for this query                                                                     //\n          *                                                                                                            //\n          * @param callback                                                                                            //\n          * @returns {Object}                                                                                          //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.subscribeCount = function () {                                                                    // 1\n        function subscribeCount(callback) {                                                                            // 1\n            if (this.isResolver) {                                                                                     // 37\n                throw new Meteor.Error('not-allowed', \"You cannot subscribe to a resolver query\");                     // 38\n            }                                                                                                          // 39\n                                                                                                                       //\n            if (!this._counter) {                                                                                      // 41\n                this._counter = new CountSubscription(this);                                                           // 42\n            }                                                                                                          // 43\n                                                                                                                       //\n            return this._counter.subscribe(this.params, callback);                                                     // 45\n        }                                                                                                              // 46\n                                                                                                                       //\n        return subscribeCount;                                                                                         // 1\n    }(); /**                                                                                                           // 1\n          * Unsubscribe if an existing subscription exists                                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.unsubscribe = function () {                                                                       // 1\n        function unsubscribe() {                                                                                       // 1\n            if (this.subscriptionHandle) {                                                                             // 52\n                this.subscriptionHandle.stop();                                                                        // 53\n            }                                                                                                          // 54\n                                                                                                                       //\n            this.subscriptionHandle = null;                                                                            // 56\n        }                                                                                                              // 57\n                                                                                                                       //\n        return unsubscribe;                                                                                            // 1\n    }(); /**                                                                                                           // 1\n          * Unsubscribe to the counts if a subscription exists.                                                        //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.unsubscribeCount = function () {                                                                  // 1\n        function unsubscribeCount() {                                                                                  // 1\n            if (this._counter) {                                                                                       // 63\n                this._counter.unsubscribe();                                                                           // 64\n                                                                                                                       //\n                this._counter = null;                                                                                  // 65\n            }                                                                                                          // 66\n        }                                                                                                              // 67\n                                                                                                                       //\n        return unsubscribeCount;                                                                                       // 1\n    }(); /**                                                                                                           // 1\n          * Fetches elements in sync using promises                                                                    //\n          * @return {*}                                                                                                //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.fetchSync = function () {                                                                         // 1\n        function fetchSync() {                                                                                         // 1\n            return _regenerator2.default.async(function () {                                                           // 1\n                function fetchSync$(_context) {                                                                        // 1\n                    while (1) {                                                                                        // 1\n                        switch (_context.prev = _context.next) {                                                       // 1\n                            case 0:                                                                                    // 1\n                                if (!this.subscriptionHandle) {                                                        // 1\n                                    _context.next = 2;                                                                 // 1\n                                    break;                                                                             // 1\n                                }                                                                                      // 1\n                                                                                                                       //\n                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n                                                                                                                       //\n                            case 2:                                                                                    // 1\n                                _context.next = 4;                                                                     // 1\n                                return _regenerator2.default.awrap(callWithPromise(this.name, prepareForProcess(this.body, this.params)));\n                                                                                                                       //\n                            case 4:                                                                                    // 1\n                                return _context.abrupt(\"return\", _context.sent);                                       // 1\n                                                                                                                       //\n                            case 5:                                                                                    // 1\n                            case \"end\":                                                                                // 1\n                                return _context.stop();                                                                // 1\n                        }                                                                                              // 1\n                    }                                                                                                  // 1\n                }                                                                                                      // 1\n                                                                                                                       //\n                return fetchSync$;                                                                                     // 1\n            }(), null, this);                                                                                          // 1\n        }                                                                                                              // 1\n                                                                                                                       //\n        return fetchSync;                                                                                              // 1\n    }(); /**                                                                                                           // 1\n          * Fetches one element in sync                                                                                //\n          * @return {*}                                                                                                //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.fetchOneSync = function () {                                                                      // 1\n        function fetchOneSync() {                                                                                      // 1\n            return _regenerator2.default.async(function () {                                                           // 1\n                function fetchOneSync$(_context2) {                                                                    // 1\n                    while (1) {                                                                                        // 1\n                        switch (_context2.prev = _context2.next) {                                                     // 1\n                            case 0:                                                                                    // 1\n                                _context2.t0 = _;                                                                      // 1\n                                _context2.next = 3;                                                                    // 1\n                                return _regenerator2.default.awrap(this.fetchSync());                                  // 1\n                                                                                                                       //\n                            case 3:                                                                                    // 1\n                                _context2.t1 = _context2.sent;                                                         // 1\n                                return _context2.abrupt(\"return\", _context2.t0.first.call(_context2.t0, _context2.t1));\n                                                                                                                       //\n                            case 5:                                                                                    // 1\n                            case \"end\":                                                                                // 1\n                                return _context2.stop();                                                               // 1\n                        }                                                                                              // 1\n                    }                                                                                                  // 1\n                }                                                                                                      // 1\n                                                                                                                       //\n                return fetchOneSync$;                                                                                  // 1\n            }(), null, this);                                                                                          // 1\n        }                                                                                                              // 1\n                                                                                                                       //\n        return fetchOneSync;                                                                                           // 1\n    }(); /**                                                                                                           // 1\n          * Retrieves the data.                                                                                        //\n          * @param callbackOrOptions                                                                                   //\n          * @returns {*}                                                                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.fetch = function () {                                                                             // 1\n        function fetch(callbackOrOptions) {                                                                            // 1\n            if (!this.subscriptionHandle) {                                                                            // 95\n                return this._fetchStatic(callbackOrOptions);                                                           // 96\n            } else {                                                                                                   // 97\n                return this._fetchReactive(callbackOrOptions);                                                         // 98\n            }                                                                                                          // 99\n        }                                                                                                              // 100\n                                                                                                                       //\n        return fetch;                                                                                                  // 1\n    }(); /**                                                                                                           // 1\n          * @param args                                                                                                //\n          * @returns {*}                                                                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.fetchOne = function () {                                                                          // 1\n        function fetchOne() {                                                                                          // 1\n            if (!this.subscriptionHandle) {                                                                            // 107\n                var callback = arguments.length <= 0 ? undefined : arguments[0];                                       // 108\n                                                                                                                       //\n                if (!_.isFunction(callback)) {                                                                         // 109\n                    throw new Meteor.Error('You did not provide a valid callback');                                    // 110\n                }                                                                                                      // 111\n                                                                                                                       //\n                this.fetch(function (err, res) {                                                                       // 113\n                    callback(err, res ? _.first(res) : null);                                                          // 114\n                });                                                                                                    // 115\n            } else {                                                                                                   // 116\n                return _.first(this.fetch.apply(this, arguments));                                                     // 117\n            }                                                                                                          // 118\n        }                                                                                                              // 119\n                                                                                                                       //\n        return fetchOne;                                                                                               // 1\n    }(); /**                                                                                                           // 1\n          * Gets the count of matching elements in sync.                                                               //\n          * @returns {any}                                                                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.getCountSync = function () {                                                                      // 1\n        function getCountSync() {                                                                                      // 1\n            return _regenerator2.default.async(function () {                                                           // 1\n                function getCountSync$(_context3) {                                                                    // 1\n                    while (1) {                                                                                        // 1\n                        switch (_context3.prev = _context3.next) {                                                     // 1\n                            case 0:                                                                                    // 1\n                                if (!this._counter) {                                                                  // 1\n                                    _context3.next = 2;                                                                // 1\n                                    break;                                                                             // 1\n                                }                                                                                      // 1\n                                                                                                                       //\n                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n                                                                                                                       //\n                            case 2:                                                                                    // 1\n                                _context3.next = 4;                                                                    // 1\n                                return _regenerator2.default.awrap(callWithPromise(this.name + '.count', prepareForProcess(this.body, this.params)));\n                                                                                                                       //\n                            case 4:                                                                                    // 1\n                                return _context3.abrupt(\"return\", _context3.sent);                                     // 1\n                                                                                                                       //\n                            case 5:                                                                                    // 1\n                            case \"end\":                                                                                // 1\n                                return _context3.stop();                                                               // 1\n                        }                                                                                              // 1\n                    }                                                                                                  // 1\n                }                                                                                                      // 1\n                                                                                                                       //\n                return getCountSync$;                                                                                  // 1\n            }(), null, this);                                                                                          // 1\n        }                                                                                                              // 1\n                                                                                                                       //\n        return getCountSync;                                                                                           // 1\n    }(); /**                                                                                                           // 1\n          * Gets the count of matching elements.                                                                       //\n          * @param callback                                                                                            //\n          * @returns {any}                                                                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.getCount = function () {                                                                          // 1\n        function getCount(callback) {                                                                                  // 1\n            if (this._counter) {                                                                                       // 139\n                return this._counter.getCount();                                                                       // 140\n            } else {                                                                                                   // 141\n                if (!callback) {                                                                                       // 142\n                    throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the count or subscribe first.');\n                } else {                                                                                               // 144\n                    return Meteor.call(this.name + '.count', this.params, callback);                                   // 145\n                }                                                                                                      // 146\n            }                                                                                                          // 147\n        }                                                                                                              // 148\n                                                                                                                       //\n        return getCount;                                                                                               // 1\n    }(); /**                                                                                                           // 1\n          * Fetching non-reactive queries                                                                              //\n          * @param callback                                                                                            //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype._fetchStatic = function () {                                                                      // 1\n        function _fetchStatic(callback) {                                                                              // 1\n            if (!callback) {                                                                                           // 156\n                throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the data or subscribe first.');\n            }                                                                                                          // 158\n                                                                                                                       //\n            Meteor.call(this.name, this.params, callback);                                                             // 160\n        }                                                                                                              // 161\n                                                                                                                       //\n        return _fetchStatic;                                                                                           // 1\n    }(); /**                                                                                                           // 1\n          * Fetching when we've got an active publication                                                              //\n          *                                                                                                            //\n          * @param options                                                                                             //\n          * @returns {*}                                                                                               //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype._fetchReactive = function () {                                                                    // 1\n        function _fetchReactive() {                                                                                    // 1\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                      // 170\n            var body = this.body;                                                                                      // 171\n                                                                                                                       //\n            if (this.params.$body) {                                                                                   // 172\n                body = intersectDeep(body, this.params.$body);                                                         // 173\n            }                                                                                                          // 174\n                                                                                                                       //\n            body = prepareForProcess(body, this.params);                                                               // 176\n                                                                                                                       //\n            if (!options.allowSkip && body.$options && body.$options.skip) {                                           // 177\n                delete body.$options.skip;                                                                             // 178\n            }                                                                                                          // 179\n                                                                                                                       //\n            return recursiveFetch(createGraph(this.collection, body));                                                 // 181\n        }                                                                                                              // 184\n                                                                                                                       //\n        return _fetchReactive;                                                                                         // 1\n    }();                                                                                                               // 1\n                                                                                                                       //\n    return _class;                                                                                                     // 1\n}(Base));                                                                                                              // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"namedQuery.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/namedQuery/namedQuery.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar NamedQueryClient = void 0;                                                                                         // 1\nmodule.watch(require(\"./namedQuery.client\"), {                                                                         // 1\n    \"default\": function (v) {                                                                                          // 1\n        NamedQueryClient = v;                                                                                          // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar NamedQueryServer = void 0;                                                                                         // 1\nmodule.watch(require(\"./namedQuery.server\"), {                                                                         // 1\n    \"default\": function (v) {                                                                                          // 1\n        NamedQueryServer = v;                                                                                          // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar NamedQuery = void 0;                                                                                               // 4\n                                                                                                                       //\nif (Meteor.isServer) {                                                                                                 // 6\n    NamedQuery = NamedQueryServer;                                                                                     // 7\n} else {                                                                                                               // 8\n    NamedQuery = NamedQueryClient;                                                                                     // 9\n}                                                                                                                      // 10\n                                                                                                                       //\nmodule.exportDefault(NamedQuery);                                                                                      // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"namedQuery.server.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/namedQuery/namedQuery.server.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nvar prepareForProcess = void 0;                                                                                        // 1\nmodule.watch(require(\"../query/lib/prepareForProcess.js\"), {                                                           // 1\n    \"default\": function (v) {                                                                                          // 1\n        prepareForProcess = v;                                                                                         // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar Base = void 0;                                                                                                     // 1\nmodule.watch(require(\"./namedQuery.base\"), {                                                                           // 1\n    \"default\": function (v) {                                                                                          // 1\n        Base = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar deepClone = void 0;                                                                                                // 1\nmodule.watch(require(\"lodash.clonedeep\"), {                                                                            // 1\n    \"default\": function (v) {                                                                                          // 1\n        deepClone = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar MemoryResultCacher = void 0;                                                                                       // 1\nmodule.watch(require(\"./cache/MemoryResultCacher\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        MemoryResultCacher = v;                                                                                        // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\nvar intersectDeep = void 0;                                                                                            // 1\nmodule.watch(require(\"../query/lib/intersectDeep\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        intersectDeep = v;                                                                                             // 1\n    }                                                                                                                  // 1\n}, 4);                                                                                                                 // 1\nmodule.exportDefault(function (_Base) {                                                                                // 1\n    (0, _inherits3.default)(_class, _Base);                                                                            // 1\n                                                                                                                       //\n    function _class() {                                                                                                // 1\n        (0, _classCallCheck3.default)(this, _class);                                                                   // 1\n        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));                           // 1\n    }                                                                                                                  // 1\n                                                                                                                       //\n    /**                                                                                                                // 8\n     * Retrieves the data.                                                                                             //\n     * @returns {*}                                                                                                    //\n     */_class.prototype.fetch = function () {                                                                          //\n        function fetch(context) {                                                                                      // 1\n            this._performSecurityChecks(context, this.params);                                                         // 13\n                                                                                                                       //\n            if (this.isResolver) {                                                                                     // 15\n                return this._fetchResolverData(context);                                                               // 16\n            } else {                                                                                                   // 17\n                body = deepClone(this.body);                                                                           // 18\n                                                                                                                       //\n                if (this.params.$body) {                                                                               // 19\n                    body = intersectDeep(body, this.params.$body);                                                     // 20\n                } // we must apply emobdyment here                                                                     // 21\n                                                                                                                       //\n                                                                                                                       //\n                this.doEmbodimentIfItApplies(body);                                                                    // 24\n                var query = this.collection.createQuery(deepClone(body), {                                             // 26\n                    params: deepClone(this.params)                                                                     // 29\n                });                                                                                                    // 28\n                                                                                                                       //\n                if (this.cacher) {                                                                                     // 33\n                    var cacheId = this.cacher.generateQueryId(this.queryName, this.params);                            // 34\n                    return this.cacher.fetch(cacheId, {                                                                // 35\n                        query: query                                                                                   // 35\n                    });                                                                                                // 35\n                }                                                                                                      // 36\n                                                                                                                       //\n                return query.fetch();                                                                                  // 38\n            }                                                                                                          // 39\n        }                                                                                                              // 40\n                                                                                                                       //\n        return fetch;                                                                                                  // 1\n    }(); /**                                                                                                           // 1\n          * @param args                                                                                                //\n          * @returns {*}                                                                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.fetchOne = function () {                                                                          // 1\n        function fetchOne() {                                                                                          // 1\n            return _.first(this.fetch.apply(this, arguments));                                                         // 47\n        }                                                                                                              // 48\n                                                                                                                       //\n        return fetchOne;                                                                                               // 1\n    }(); /**                                                                                                           // 1\n          * Gets the count of matching elements.                                                                       //\n          *                                                                                                            //\n          * @returns {any}                                                                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.getCount = function () {                                                                          // 1\n        function getCount(context) {                                                                                   // 1\n            this._performSecurityChecks(context, this.params);                                                         // 56\n                                                                                                                       //\n            var countCursor = this.getCursorForCounting();                                                             // 58\n                                                                                                                       //\n            if (this.cacher) {                                                                                         // 60\n                var cacheId = 'count::' + this.cacher.generateQueryId(this.queryName, this.params);                    // 61\n                return this.cacher.fetch(cacheId, {                                                                    // 63\n                    countCursor: countCursor                                                                           // 63\n                });                                                                                                    // 63\n            }                                                                                                          // 64\n                                                                                                                       //\n            return countCursor.count();                                                                                // 66\n        }                                                                                                              // 67\n                                                                                                                       //\n        return getCount;                                                                                               // 1\n    }(); /**                                                                                                           // 1\n          * Returns the cursor for counting                                                                            //\n          * This is most likely used for counts cursor                                                                 //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.getCursorForCounting = function () {                                                              // 1\n        function getCursorForCounting() {                                                                              // 1\n            var body = deepClone(this.body);                                                                           // 74\n            this.doEmbodimentIfItApplies(body);                                                                        // 75\n            body = prepareForProcess(body, this.params);                                                               // 76\n            return this.collection.find(body.$filters || {}, {                                                         // 78\n                fields: {                                                                                              // 78\n                    _id: 1                                                                                             // 78\n                }                                                                                                      // 78\n            });                                                                                                        // 78\n        }                                                                                                              // 79\n                                                                                                                       //\n        return getCursorForCounting;                                                                                   // 1\n    }(); /**                                                                                                           // 1\n          * @param cacher                                                                                              //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.cacheResults = function () {                                                                      // 1\n        function cacheResults(cacher) {                                                                                // 1\n            if (!cacher) {                                                                                             // 85\n                cacher = new MemoryResultCacher();                                                                     // 86\n            }                                                                                                          // 87\n                                                                                                                       //\n            this.cacher = cacher;                                                                                      // 89\n        }                                                                                                              // 90\n                                                                                                                       //\n        return cacheResults;                                                                                           // 1\n    }(); /**                                                                                                           // 1\n          * Configure resolve. This doesn't actually call the resolver, it just sets it                                //\n          * @param fn                                                                                                  //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype.resolve = function () {                                                                           // 1\n        function resolve(fn) {                                                                                         // 1\n            if (!this.isResolver) {                                                                                    // 97\n                throw new Meteor.Error('invalid-call', \"You cannot use resolve() on a non resolver NamedQuery\");       // 98\n            }                                                                                                          // 99\n                                                                                                                       //\n            this.resolver = fn;                                                                                        // 101\n        }                                                                                                              // 102\n                                                                                                                       //\n        return resolve;                                                                                                // 1\n    }(); /**                                                                                                           // 1\n          * @returns {*}                                                                                               //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype._fetchResolverData = function () {                                                                // 1\n        function _fetchResolverData(context) {                                                                         // 1\n            var resolver = this.resolver;                                                                              // 109\n            var self = this;                                                                                           // 110\n            var query = {                                                                                              // 111\n                fetch: function () {                                                                                   // 112\n                    return resolver.call(context, self.params);                                                        // 113\n                }                                                                                                      // 114\n            };                                                                                                         // 111\n                                                                                                                       //\n            if (this.cacher) {                                                                                         // 117\n                var cacheId = this.cacher.generateQueryId(this.queryName, this.params);                                // 118\n                return this.cacher.fetch(cacheId, {                                                                    // 119\n                    query: query                                                                                       // 119\n                });                                                                                                    // 119\n            }                                                                                                          // 120\n                                                                                                                       //\n            return query.fetch();                                                                                      // 122\n        }                                                                                                              // 123\n                                                                                                                       //\n        return _fetchResolverData;                                                                                     // 1\n    }(); /**                                                                                                           // 1\n          * @param context Meteor method/publish context                                                               //\n          * @param params                                                                                              //\n          *                                                                                                            //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    _class.prototype._performSecurityChecks = function () {                                                            // 1\n        function _performSecurityChecks(context, params) {                                                             // 1\n            if (context && this.exposeConfig) {                                                                        // 132\n                this._callFirewall(context, context.userId, params);                                                   // 133\n            }                                                                                                          // 134\n                                                                                                                       //\n            this.doValidateParams(params);                                                                             // 136\n        }                                                                                                              // 137\n                                                                                                                       //\n        return _performSecurityChecks;                                                                                 // 1\n    }();                                                                                                               // 1\n                                                                                                                       //\n    return _class;                                                                                                     // 1\n}(Base));                                                                                                              // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"store.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/namedQuery/store.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.exportDefault(new (function () {                                                                                // 1\n    function _class() {                                                                                                // 2\n        (0, _classCallCheck3.default)(this, _class);                                                                   // 2\n        this.storage = {};                                                                                             // 3\n    }                                                                                                                  // 4\n                                                                                                                       //\n    _class.prototype.add = function () {                                                                               // 1\n        function add(key, value) {                                                                                     // 1\n            if (this.storage[key]) {                                                                                   // 7\n                throw new Meteor.Error('invalid-name', \"You have previously defined another namedQuery with the same name: \\\"\" + key + \"\\\". Named Query names should be unique.\");\n            }                                                                                                          // 9\n                                                                                                                       //\n            this.storage[key] = value;                                                                                 // 11\n        }                                                                                                              // 12\n                                                                                                                       //\n        return add;                                                                                                    // 1\n    }();                                                                                                               // 1\n                                                                                                                       //\n    _class.prototype.get = function () {                                                                               // 1\n        function get(key) {                                                                                            // 1\n            return this.storage[key];                                                                                  // 15\n        }                                                                                                              // 16\n                                                                                                                       //\n        return get;                                                                                                    // 1\n    }();                                                                                                               // 1\n                                                                                                                       //\n    _class.prototype.getAll = function () {                                                                            // 1\n        function getAll() {                                                                                            // 1\n            return this.storage;                                                                                       // 19\n        }                                                                                                              // 20\n                                                                                                                       //\n        return getAll;                                                                                                 // 1\n    }();                                                                                                               // 1\n                                                                                                                       //\n    return _class;                                                                                                     // 1\n}())());                                                                                                               // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cache\":{\"BaseResultCacher.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/namedQuery/cache/BaseResultCacher.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return BaseResultCacher;                                                                                       // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar EJSON = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/ejson\"), {                                                                                // 1\n    EJSON: function (v) {                                                                                              // 1\n        EJSON = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nvar BaseResultCacher = function () {                                                                                   //\n    function BaseResultCacher() {                                                                                      // 7\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                           // 7\n        (0, _classCallCheck3.default)(this, BaseResultCacher);                                                         // 7\n        this.config = config;                                                                                          // 8\n    } /**                                                                                                              // 9\n       * @param queryName                                                                                              //\n       * @param params                                                                                                 //\n       * @returns {string}                                                                                             //\n       */                                                                                                              //\n                                                                                                                       //\n    BaseResultCacher.prototype.generateQueryId = function () {                                                         //\n        function generateQueryId(queryName, params) {                                                                  //\n            return queryName + \"::\" + EJSON.stringify(params);                                                         // 17\n        }                                                                                                              // 18\n                                                                                                                       //\n        return generateQueryId;                                                                                        //\n    }(); /**                                                                                                           //\n          * Dummy function                                                                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    BaseResultCacher.prototype.fetch = function () {                                                                   //\n        function fetch(cacheId, _ref) {                                                                                //\n            var query = _ref.query,                                                                                    // 23\n                countCursor = _ref.countCursor;                                                                        // 23\n            throw 'Not implemented';                                                                                   // 24\n        }                                                                                                              // 25\n                                                                                                                       //\n        return fetch;                                                                                                  //\n    }(); /**                                                                                                           //\n          * @param query                                                                                               //\n          * @param countCursor                                                                                         //\n          * @returns {*}                                                                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    BaseResultCacher.fetchData = function () {                                                                         //\n        function fetchData(_ref2) {                                                                                    //\n            var query = _ref2.query,                                                                                   // 32\n                countCursor = _ref2.countCursor;                                                                       // 32\n                                                                                                                       //\n            if (query) {                                                                                               // 33\n                return query.fetch();                                                                                  // 34\n            } else {                                                                                                   // 35\n                return countCursor.count();                                                                            // 36\n            }                                                                                                          // 37\n        }                                                                                                              // 38\n                                                                                                                       //\n        return fetchData;                                                                                              //\n    }();                                                                                                               //\n                                                                                                                       //\n    return BaseResultCacher;                                                                                           //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MemoryResultCacher.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/namedQuery/cache/MemoryResultCacher.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return MemoryResultCacher;                                                                                     // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                               // 1\n    Meteor: function (v) {                                                                                             // 1\n        Meteor = v;                                                                                                    // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar cloneDeep = void 0;                                                                                                // 1\nmodule.watch(require(\"lodash.clonedeep\"), {                                                                            // 1\n    \"default\": function (v) {                                                                                          // 1\n        cloneDeep = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar BaseResultCacher = void 0;                                                                                         // 1\nmodule.watch(require(\"./BaseResultCacher\"), {                                                                          // 1\n    \"default\": function (v) {                                                                                          // 1\n        BaseResultCacher = v;                                                                                          // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar DEFAULT_TTL = 60000; /**                                                                                           // 5\n                          * This is a very basic in-memory result caching functionality                                //\n                          */                                                                                           //\n                                                                                                                       //\nvar MemoryResultCacher = function (_BaseResultCacher) {                                                                //\n    (0, _inherits3.default)(MemoryResultCacher, _BaseResultCacher);                                                    //\n                                                                                                                       //\n    function MemoryResultCacher() {                                                                                    // 11\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                           // 11\n        (0, _classCallCheck3.default)(this, MemoryResultCacher);                                                       // 11\n                                                                                                                       //\n        var _this = (0, _possibleConstructorReturn3.default)(this, _BaseResultCacher.call(this, config));              // 11\n                                                                                                                       //\n        _this.store = {};                                                                                              // 13\n        return _this;                                                                                                  // 11\n    } /**                                                                                                              // 14\n       * @param cacheId                                                                                                //\n       * @param query                                                                                                  //\n       * @param countCursor                                                                                            //\n       * @returns {*}                                                                                                  //\n       */                                                                                                              //\n                                                                                                                       //\n    MemoryResultCacher.prototype.fetch = function () {                                                                 //\n        function fetch(cacheId, _ref) {                                                                                //\n            var query = _ref.query,                                                                                    // 22\n                countCursor = _ref.countCursor;                                                                        // 22\n            var cacheData = this.store[cacheId];                                                                       // 23\n                                                                                                                       //\n            if (cacheData !== undefined) {                                                                             // 24\n                return cloneDeep(cacheData);                                                                           // 25\n            }                                                                                                          // 26\n                                                                                                                       //\n            var data = BaseResultCacher.fetchData({                                                                    // 28\n                query: query,                                                                                          // 28\n                countCursor: countCursor                                                                               // 28\n            });                                                                                                        // 28\n            this.storeData(cacheId, data);                                                                             // 29\n            return data;                                                                                               // 31\n        }                                                                                                              // 32\n                                                                                                                       //\n        return fetch;                                                                                                  //\n    }(); /**                                                                                                           //\n          * @param cacheId                                                                                             //\n          * @param data                                                                                                //\n          */                                                                                                           //\n                                                                                                                       //\n    MemoryResultCacher.prototype.storeData = function () {                                                             //\n        function storeData(cacheId, data) {                                                                            //\n            var _this2 = this;                                                                                         // 39\n                                                                                                                       //\n            var ttl = this.config.ttl || DEFAULT_TTL;                                                                  // 40\n            this.store[cacheId] = cloneDeep(data);                                                                     // 41\n            Meteor.setTimeout(function () {                                                                            // 43\n                delete _this2.store[cacheId];                                                                          // 44\n            }, ttl);                                                                                                   // 45\n        }                                                                                                              // 46\n                                                                                                                       //\n        return storeData;                                                                                              //\n    }();                                                                                                               //\n                                                                                                                       //\n    return MemoryResultCacher;                                                                                         //\n}(BaseResultCacher);                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"query\":{\"query.base.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/query.base.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                                              //\n                                                                                                                       //\nvar _extends3 = _interopRequireDefault(_extends2);                                                                     //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return QueryBase;                                                                                              // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar deepClone = void 0;                                                                                                // 1\nmodule.watch(require(\"lodash.clonedeep\"), {                                                                            // 1\n    \"default\": function (v) {                                                                                          // 1\n        deepClone = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/check\"), {                                                                                // 1\n    check: function (v) {                                                                                              // 1\n        check = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar QueryBase = function () {                                                                                          //\n    function QueryBase(collection, body) {                                                                             // 7\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                          // 7\n        (0, _classCallCheck3.default)(this, QueryBase);                                                                // 7\n        this.isGlobalQuery = true;                                                                                     // 7\n        this.collection = collection;                                                                                  // 8\n        this.body = deepClone(body);                                                                                   // 10\n        this.params = options.params || {};                                                                            // 12\n        this.options = options;                                                                                        // 13\n    }                                                                                                                  // 14\n                                                                                                                       //\n    QueryBase.prototype.clone = function () {                                                                          //\n        function clone(newParams) {                                                                                    //\n            var params = _.extend({}, deepClone(this.params), newParams);                                              // 17\n                                                                                                                       //\n            return new this.constructor(this.collection, deepClone(this.body), (0, _extends3.default)({                // 19\n                params: params                                                                                         // 23\n            }, this.options));                                                                                         // 19\n        }                                                                                                              // 27\n                                                                                                                       //\n        return clone;                                                                                                  //\n    }();                                                                                                               //\n                                                                                                                       //\n    /**                                                                                                                // 33\n     * Validates the parameters                                                                                        //\n     */QueryBase.prototype.doValidateParams = function () {                                                            //\n        function doValidateParams() {                                                                                  //\n            var validateParams = this.options.validateParams;                                                          // 36\n            if (!validateParams) return;                                                                               // 38\n                                                                                                                       //\n            if (_.isFunction(validateParams)) {                                                                        // 40\n                validateParams.call(null, this.params);                                                                // 41\n            } else {                                                                                                   // 42\n                check(this.params);                                                                                    // 43\n            }                                                                                                          // 44\n        }                                                                                                              // 45\n                                                                                                                       //\n        return doValidateParams;                                                                                       //\n    }(); /**                                                                                                           //\n          * Merges the params with previous params.                                                                    //\n          *                                                                                                            //\n          * @param params                                                                                              //\n          * @returns {Query}                                                                                           //\n          */                                                                                                           //\n                                                                                                                       //\n    QueryBase.prototype.setParams = function () {                                                                      //\n        function setParams(params) {                                                                                   //\n            this.params = _.extend({}, this.params, params);                                                           // 54\n            return this;                                                                                               // 56\n        }                                                                                                              // 57\n                                                                                                                       //\n        return setParams;                                                                                              //\n    }();                                                                                                               //\n                                                                                                                       //\n    (0, _createClass3.default)(QueryBase, [{                                                                           //\n        key: \"name\",                                                                                                   //\n        get: function () {                                                                                             //\n            return \"exposure_\" + this.collection._name;                                                                // 30\n        }                                                                                                              // 31\n    }]);                                                                                                               //\n    return QueryBase;                                                                                                  //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"query.client.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/query.client.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _regenerator = require(\"babel-runtime/regenerator\");                                                               //\n                                                                                                                       //\nvar _regenerator2 = _interopRequireDefault(_regenerator);                                                              //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return Query;                                                                                                  // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.watch(require(\"meteor/underscore\"), {                                                                           // 1\n    _: function (v) {                                                                                                  // 1\n        _ = v;                                                                                                         // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar CountSubscription = void 0;                                                                                        // 1\nmodule.watch(require(\"./counts/countSubscription\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        CountSubscription = v;                                                                                         // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar createGraph = void 0;                                                                                              // 1\nmodule.watch(require(\"./lib/createGraph.js\"), {                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        createGraph = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar recursiveFetch = void 0;                                                                                           // 1\nmodule.watch(require(\"./lib/recursiveFetch.js\"), {                                                                     // 1\n    \"default\": function (v) {                                                                                          // 1\n        recursiveFetch = v;                                                                                            // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\nvar prepareForProcess = void 0;                                                                                        // 1\nmodule.watch(require(\"./lib/prepareForProcess.js\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        prepareForProcess = v;                                                                                         // 1\n    }                                                                                                                  // 1\n}, 4);                                                                                                                 // 1\nvar callWithPromise = void 0;                                                                                          // 1\nmodule.watch(require(\"./lib/callWithPromise\"), {                                                                       // 1\n    \"default\": function (v) {                                                                                          // 1\n        callWithPromise = v;                                                                                           // 1\n    }                                                                                                                  // 1\n}, 5);                                                                                                                 // 1\nvar Base = void 0;                                                                                                     // 1\nmodule.watch(require(\"./query.base\"), {                                                                                // 1\n    \"default\": function (v) {                                                                                          // 1\n        Base = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 6);                                                                                                                 // 1\n                                                                                                                       //\nvar Query = function (_Base) {                                                                                         //\n    (0, _inherits3.default)(Query, _Base);                                                                             //\n                                                                                                                       //\n    function Query() {                                                                                                 //\n        (0, _classCallCheck3.default)(this, Query);                                                                    //\n        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));                           //\n    }                                                                                                                  //\n                                                                                                                       //\n    /**                                                                                                                // 10\n     * Subscribe                                                                                                       //\n     *                                                                                                                 //\n     * @param callback {Function} optional                                                                             //\n     * @returns {null|any|*}                                                                                           //\n     */Query.prototype.subscribe = function () {                                                                       //\n        function subscribe(callback) {                                                                                 //\n            this.doValidateParams();                                                                                   // 17\n            this.subscriptionHandle = Meteor.subscribe(this.name, prepareForProcess(this.body, this.params), callback);\n            return this.subscriptionHandle;                                                                            // 25\n        }                                                                                                              // 26\n                                                                                                                       //\n        return subscribe;                                                                                              //\n    }(); /**                                                                                                           //\n          * Subscribe to the counts for this query                                                                     //\n          *                                                                                                            //\n          * @param callback                                                                                            //\n          * @returns {Object}                                                                                          //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.subscribeCount = function () {                                                                     //\n        function subscribeCount(callback) {                                                                            //\n            this.doValidateParams();                                                                                   // 35\n                                                                                                                       //\n            if (!this._counter) {                                                                                      // 37\n                this._counter = new CountSubscription(this);                                                           // 38\n            }                                                                                                          // 39\n                                                                                                                       //\n            return this._counter.subscribe(prepareForProcess(this.body, this.params), callback);                       // 41\n        }                                                                                                              // 45\n                                                                                                                       //\n        return subscribeCount;                                                                                         //\n    }(); /**                                                                                                           //\n          * Unsubscribe if an existing subscription exists                                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.unsubscribe = function () {                                                                        //\n        function unsubscribe() {                                                                                       //\n            if (this.subscriptionHandle) {                                                                             // 51\n                this.subscriptionHandle.stop();                                                                        // 52\n            }                                                                                                          // 53\n                                                                                                                       //\n            this.subscriptionHandle = null;                                                                            // 55\n        }                                                                                                              // 56\n                                                                                                                       //\n        return unsubscribe;                                                                                            //\n    }(); /**                                                                                                           //\n          * Unsubscribe to the counts if a subscription exists.                                                        //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.unsubscribeCount = function () {                                                                   //\n        function unsubscribeCount() {                                                                                  //\n            if (this._counter) {                                                                                       // 62\n                this._counter.unsubscribe();                                                                           // 63\n                                                                                                                       //\n                this._counter = null;                                                                                  // 64\n            }                                                                                                          // 65\n        }                                                                                                              // 66\n                                                                                                                       //\n        return unsubscribeCount;                                                                                       //\n    }(); /**                                                                                                           //\n          * Fetches elements in sync using promises                                                                    //\n          * @return {*}                                                                                                //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.fetchSync = function () {                                                                          //\n        function fetchSync() {                                                                                         //\n            return _regenerator2.default.async(function () {                                                           //\n                function fetchSync$(_context) {                                                                        //\n                    while (1) {                                                                                        //\n                        switch (_context.prev = _context.next) {                                                       //\n                            case 0:                                                                                    //\n                                this.doValidateParams();                                                               // 73\n                                                                                                                       //\n                                if (!this.subscriptionHandle) {                                                        //\n                                    _context.next = 3;                                                                 //\n                                    break;                                                                             //\n                                }                                                                                      //\n                                                                                                                       //\n                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n                                                                                                                       //\n                            case 3:                                                                                    //\n                                _context.next = 5;                                                                     //\n                                return _regenerator2.default.awrap(callWithPromise(this.name, prepareForProcess(this.body, this.params)));\n                                                                                                                       //\n                            case 5:                                                                                    //\n                                return _context.abrupt(\"return\", _context.sent);                                       //\n                                                                                                                       //\n                            case 6:                                                                                    //\n                            case \"end\":                                                                                //\n                                return _context.stop();                                                                //\n                        }                                                                                              //\n                    }                                                                                                  //\n                }                                                                                                      //\n                                                                                                                       //\n                return fetchSync$;                                                                                     //\n            }(), null, this);                                                                                          //\n        }                                                                                                              //\n                                                                                                                       //\n        return fetchSync;                                                                                              //\n    }(); /**                                                                                                           //\n          * Fetches one element in sync                                                                                //\n          * @return {*}                                                                                                //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.fetchOneSync = function () {                                                                       //\n        function fetchOneSync() {                                                                                      //\n            return _regenerator2.default.async(function () {                                                           //\n                function fetchOneSync$(_context2) {                                                                    //\n                    while (1) {                                                                                        //\n                        switch (_context2.prev = _context2.next) {                                                     //\n                            case 0:                                                                                    //\n                                _context2.t0 = _;                                                                      //\n                                _context2.next = 3;                                                                    //\n                                return _regenerator2.default.awrap(this.fetchSync());                                  //\n                                                                                                                       //\n                            case 3:                                                                                    //\n                                _context2.t1 = _context2.sent;                                                         //\n                                return _context2.abrupt(\"return\", _context2.t0.first.call(_context2.t0, _context2.t1));\n                                                                                                                       //\n                            case 5:                                                                                    //\n                            case \"end\":                                                                                //\n                                return _context2.stop();                                                               //\n                        }                                                                                              //\n                    }                                                                                                  //\n                }                                                                                                      //\n                                                                                                                       //\n                return fetchOneSync$;                                                                                  //\n            }(), null, this);                                                                                          //\n        }                                                                                                              //\n                                                                                                                       //\n        return fetchOneSync;                                                                                           //\n    }(); /**                                                                                                           //\n          * Retrieves the data.                                                                                        //\n          * @param callbackOrOptions                                                                                   //\n          * @returns {*}                                                                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.fetch = function () {                                                                              //\n        function fetch(callbackOrOptions) {                                                                            //\n            this.doValidateParams();                                                                                   // 96\n                                                                                                                       //\n            if (!this.subscriptionHandle) {                                                                            // 98\n                return this._fetchStatic(callbackOrOptions);                                                           // 99\n            } else {                                                                                                   // 100\n                return this._fetchReactive(callbackOrOptions);                                                         // 101\n            }                                                                                                          // 102\n        }                                                                                                              // 103\n                                                                                                                       //\n        return fetch;                                                                                                  //\n    }(); /**                                                                                                           //\n          * @param args                                                                                                //\n          * @returns {*}                                                                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.fetchOne = function () {                                                                           //\n        function fetchOne() {                                                                                          //\n            if (!this.subscriptionHandle) {                                                                            // 110\n                var callback = arguments.length <= 0 ? undefined : arguments[0];                                       // 111\n                                                                                                                       //\n                if (!_.isFunction(callback)) {                                                                         // 112\n                    throw new Meteor.Error('You did not provide a valid callback');                                    // 113\n                }                                                                                                      // 114\n                                                                                                                       //\n                this.fetch(function (err, res) {                                                                       // 116\n                    callback(err, res ? _.first(res) : null);                                                          // 117\n                });                                                                                                    // 118\n            } else {                                                                                                   // 119\n                return _.first(this.fetch.apply(this, arguments));                                                     // 120\n            }                                                                                                          // 121\n        }                                                                                                              // 122\n                                                                                                                       //\n        return fetchOne;                                                                                               //\n    }(); /**                                                                                                           //\n          * Gets the count of matching elements in sync.                                                               //\n          * @returns {any}                                                                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.getCountSync = function () {                                                                       //\n        function getCountSync() {                                                                                      //\n            return _regenerator2.default.async(function () {                                                           //\n                function getCountSync$(_context3) {                                                                    //\n                    while (1) {                                                                                        //\n                        switch (_context3.prev = _context3.next) {                                                     //\n                            case 0:                                                                                    //\n                                if (!this._counter) {                                                                  //\n                                    _context3.next = 2;                                                                //\n                                    break;                                                                             //\n                                }                                                                                      //\n                                                                                                                       //\n                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n                                                                                                                       //\n                            case 2:                                                                                    //\n                                _context3.next = 4;                                                                    //\n                                return _regenerator2.default.awrap(callWithPromise(this.name + '.count', prepareForProcess(this.body, this.params)));\n                                                                                                                       //\n                            case 4:                                                                                    //\n                                return _context3.abrupt(\"return\", _context3.sent);                                     //\n                                                                                                                       //\n                            case 5:                                                                                    //\n                            case \"end\":                                                                                //\n                                return _context3.stop();                                                               //\n                        }                                                                                              //\n                    }                                                                                                  //\n                }                                                                                                      //\n                                                                                                                       //\n                return getCountSync$;                                                                                  //\n            }(), null, this);                                                                                          //\n        }                                                                                                              //\n                                                                                                                       //\n        return getCountSync;                                                                                           //\n    }(); /**                                                                                                           //\n          * Gets the count of matching elements.                                                                       //\n          * @param callback                                                                                            //\n          * @returns {any}                                                                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.getCount = function () {                                                                           //\n        function getCount(callback) {                                                                                  //\n            if (this._counter) {                                                                                       // 142\n                return this._counter.getCount();                                                                       // 143\n            } else {                                                                                                   // 144\n                if (!callback) {                                                                                       // 145\n                    throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the count or subscribe first.');\n                } else {                                                                                               // 147\n                    return Meteor.call(this.name + '.count', prepareForProcess(this.body, this.params), callback);     // 148\n                }                                                                                                      // 153\n            }                                                                                                          // 154\n        }                                                                                                              // 155\n                                                                                                                       //\n        return getCount;                                                                                               //\n    }(); /**                                                                                                           //\n          * Fetching non-reactive queries                                                                              //\n          * @param callback                                                                                            //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype._fetchStatic = function () {                                                                       //\n        function _fetchStatic(callback) {                                                                              //\n            if (!callback) {                                                                                           // 163\n                throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the data or subscribe first.');\n            }                                                                                                          // 165\n                                                                                                                       //\n            Meteor.call(this.name, prepareForProcess(this.body, this.params), callback);                               // 167\n        }                                                                                                              // 168\n                                                                                                                       //\n        return _fetchStatic;                                                                                           //\n    }(); /**                                                                                                           //\n          * Fetching when we've got an active publication                                                              //\n          *                                                                                                            //\n          * @param options                                                                                             //\n          * @returns {*}                                                                                               //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype._fetchReactive = function () {                                                                     //\n        function _fetchReactive() {                                                                                    //\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                      // 177\n            var body = prepareForProcess(this.body, this.params);                                                      // 178\n                                                                                                                       //\n            if (!options.allowSkip && body.$options && body.$options.skip) {                                           // 179\n                delete body.$options.skip;                                                                             // 180\n            }                                                                                                          // 181\n                                                                                                                       //\n            return recursiveFetch(createGraph(this.collection, body), this.params);                                    // 183\n        }                                                                                                              // 187\n                                                                                                                       //\n        return _fetchReactive;                                                                                         //\n    }();                                                                                                               //\n                                                                                                                       //\n    return Query;                                                                                                      //\n}(Base);                                                                                                               //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"query.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/query.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar QueryClient = void 0;                                                                                              // 1\nmodule.watch(require(\"./query.client\"), {                                                                              // 1\n    \"default\": function (v) {                                                                                          // 1\n        QueryClient = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar QueryServer = void 0;                                                                                              // 1\nmodule.watch(require(\"./query.server\"), {                                                                              // 1\n    \"default\": function (v) {                                                                                          // 1\n        QueryServer = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar Query = void 0;                                                                                                    // 4\n                                                                                                                       //\nif (Meteor.isServer) {                                                                                                 // 6\n    Query = QueryServer;                                                                                               // 7\n} else {                                                                                                               // 8\n    Query = QueryClient;                                                                                               // 9\n}                                                                                                                      // 10\n                                                                                                                       //\nmodule.exportDefault(Query);                                                                                           // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"query.server.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/query.server.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return Query;                                                                                                  // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar createGraph = void 0;                                                                                              // 1\nmodule.watch(require(\"./lib/createGraph.js\"), {                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        createGraph = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar prepareForProcess = void 0;                                                                                        // 1\nmodule.watch(require(\"./lib/prepareForProcess.js\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        prepareForProcess = v;                                                                                         // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar hypernova = void 0;                                                                                                // 1\nmodule.watch(require(\"./hypernova/hypernova.js\"), {                                                                    // 1\n    \"default\": function (v) {                                                                                          // 1\n        hypernova = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar Base = void 0;                                                                                                     // 1\nmodule.watch(require(\"./query.base\"), {                                                                                // 1\n    \"default\": function (v) {                                                                                          // 1\n        Base = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\n                                                                                                                       //\nvar Query = function (_Base) {                                                                                         //\n    (0, _inherits3.default)(Query, _Base);                                                                             //\n                                                                                                                       //\n    function Query() {                                                                                                 //\n        (0, _classCallCheck3.default)(this, Query);                                                                    //\n        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));                           //\n    }                                                                                                                  //\n                                                                                                                       //\n    /**                                                                                                                // 7\n     * Retrieves the data.                                                                                             //\n     * @param context                                                                                                  //\n     * @returns {*}                                                                                                    //\n     */Query.prototype.fetch = function () {                                                                           //\n        function fetch() {                                                                                             //\n            var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                      // 12\n            var node = createGraph(this.collection, prepareForProcess(this.body, this.params));                        // 13\n            return hypernova(node, context.userId, {                                                                   // 18\n                params: this.params                                                                                    // 18\n            });                                                                                                        // 18\n        }                                                                                                              // 19\n                                                                                                                       //\n        return fetch;                                                                                                  //\n    }(); /**                                                                                                           //\n          * @param args                                                                                                //\n          * @returns {*}                                                                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.fetchOne = function () {                                                                           //\n        function fetchOne() {                                                                                          //\n            return _.first(this.fetch.apply(this, arguments));                                                         // 26\n        }                                                                                                              // 27\n                                                                                                                       //\n        return fetchOne;                                                                                               //\n    }(); /**                                                                                                           //\n          * Gets the count of matching elements.                                                                       //\n          * @returns {integer}                                                                                         //\n          */                                                                                                           //\n                                                                                                                       //\n    Query.prototype.getCount = function () {                                                                           //\n        function getCount() {                                                                                          //\n            return this.collection.find(this.body.$filters || {}, {}).count();                                         // 34\n        }                                                                                                              // 35\n                                                                                                                       //\n        return getCount;                                                                                               //\n    }();                                                                                                               //\n                                                                                                                       //\n    return Query;                                                                                                      //\n}(Base);                                                                                                               //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"counts\":{\"collection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/counts/collection.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Mongo = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/mongo\"), {                                                                                // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar COUNTS_COLLECTION_CLIENT = void 0;                                                                                 // 1\nmodule.watch(require(\"./constants\"), {                                                                                 // 1\n  COUNTS_COLLECTION_CLIENT: function (v) {                                                                             // 1\n    COUNTS_COLLECTION_CLIENT = v;                                                                                      // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nmodule.exportDefault(new Mongo.Collection(COUNTS_COLLECTION_CLIENT));                                                  // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/counts/constants.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  COUNTS_COLLECTION_CLIENT: function () {                                                                              // 1\n    return COUNTS_COLLECTION_CLIENT;                                                                                   // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar COUNTS_COLLECTION_CLIENT = 'grapher_counts';                                                                       // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"countSubscription.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/counts/countSubscription.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return CountSubscription;                                                                                      // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar EJSON = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/ejson\"), {                                                                                // 1\n    EJSON: function (v) {                                                                                              // 1\n        EJSON = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                               // 1\n    Meteor: function (v) {                                                                                             // 1\n        Meteor = v;                                                                                                    // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar ReactiveVar = void 0;                                                                                              // 1\nmodule.watch(require(\"meteor/reactive-var\"), {                                                                         // 1\n    ReactiveVar: function (v) {                                                                                        // 1\n        ReactiveVar = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar Tracker = void 0;                                                                                                  // 1\nmodule.watch(require(\"meteor/tracker\"), {                                                                              // 1\n    Tracker: function (v) {                                                                                            // 1\n        Tracker = v;                                                                                                   // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\nvar Counts = void 0;                                                                                                   // 1\nmodule.watch(require(\"./collection\"), {                                                                                // 1\n    \"default\": function (v) {                                                                                          // 1\n        Counts = v;                                                                                                    // 1\n    }                                                                                                                  // 1\n}, 4);                                                                                                                 // 1\nvar createFauxSubscription = void 0;                                                                                   // 1\nmodule.watch(require(\"./createFauxSubscription\"), {                                                                    // 1\n    \"default\": function (v) {                                                                                          // 1\n        createFauxSubscription = v;                                                                                    // 1\n    }                                                                                                                  // 1\n}, 5);                                                                                                                 // 1\nvar prepareForProcess = void 0;                                                                                        // 1\nmodule.watch(require(\"../lib/prepareForProcess.js\"), {                                                                 // 1\n    \"default\": function (v) {                                                                                          // 1\n        prepareForProcess = v;                                                                                         // 1\n    }                                                                                                                  // 1\n}, 6);                                                                                                                 // 1\nvar NamedQueryBase = void 0;                                                                                           // 1\nmodule.watch(require(\"../../namedQuery/namedQuery.base\"), {                                                            // 1\n    \"default\": function (v) {                                                                                          // 1\n        NamedQueryBase = v;                                                                                            // 1\n    }                                                                                                                  // 1\n}, 7);                                                                                                                 // 1\n                                                                                                                       //\nvar CountSubscription = function () {                                                                                  //\n    /**                                                                                                                // 12\n     * @param {*} query - The query to use when fetching counts                                                        //\n     */function CountSubscription(query) {                                                                             //\n        (0, _classCallCheck3.default)(this, CountSubscription);                                                        // 15\n        this.accessToken = new ReactiveVar(null);                                                                      // 16\n        this.fauxHandle = null;                                                                                        // 17\n        this.query = query;                                                                                            // 18\n    } /**                                                                                                              // 19\n       * Starts a subscription request for reactive counts.                                                            //\n       *                                                                                                               //\n       * @param {*} arg - The argument to pass to {name}.count.subscribe                                               //\n       * @param {*} callback                                                                                           //\n       */                                                                                                              //\n                                                                                                                       //\n    CountSubscription.prototype.subscribe = function () {                                                              //\n        function subscribe(arg, callback) {                                                                            //\n            var _this = this;                                                                                          // 27\n                                                                                                                       //\n            // Don't try to resubscribe if arg hasn't changed                                                          // 28\n            if (EJSON.equals(this.lastArgs, arg) && this.fauxHandle) {                                                 // 29\n                return this.fauxHandle;                                                                                // 30\n            }                                                                                                          // 31\n                                                                                                                       //\n            this.accessToken.set(null);                                                                                // 33\n            this.lastArgs = arg;                                                                                       // 34\n            Meteor.call(this.query.name + '.count.subscribe', arg, function (error, token) {                           // 36\n                if (!_this._markedForUnsubscribe) {                                                                    // 37\n                    _this.subscriptionHandle = Meteor.subscribe(_this.query.name + '.count', token, callback);         // 38\n                                                                                                                       //\n                    _this.accessToken.set(token);                                                                      // 39\n                                                                                                                       //\n                    _this.disconnectComputation = Tracker.autorun(function () {                                        // 41\n                        return _this.handleDisconnect();                                                               // 41\n                    });                                                                                                // 41\n                }                                                                                                      // 42\n                                                                                                                       //\n                _this._markedForUnsubscribe = false;                                                                   // 44\n            });                                                                                                        // 45\n            this.fauxHandle = createFauxSubscription(this);                                                            // 47\n            return this.fauxHandle;                                                                                    // 48\n        }                                                                                                              // 49\n                                                                                                                       //\n        return subscribe;                                                                                              //\n    }(); /**                                                                                                           //\n          * Unsubscribes from the count endpoint, if there is such a subscription.                                     //\n          */                                                                                                           //\n                                                                                                                       //\n    CountSubscription.prototype.unsubscribe = function () {                                                            //\n        function unsubscribe() {                                                                                       //\n            if (this.subscriptionHandle) {                                                                             // 55\n                this.disconnectComputation.stop();                                                                     // 56\n                this.subscriptionHandle.stop();                                                                        // 57\n            } else {                                                                                                   // 58\n                // If we hit this branch, then Meteor.call in subscribe hasn't finished yet                            // 59\n                // so set a flag to stop the subscription from being created                                           // 60\n                this._markedForUnsubscribe = true;                                                                     // 61\n            }                                                                                                          // 62\n                                                                                                                       //\n            this.accessToken.set(null);                                                                                // 64\n            this.fauxHandle = null;                                                                                    // 65\n            this.subscriptionHandle = null;                                                                            // 66\n        }                                                                                                              // 67\n                                                                                                                       //\n        return unsubscribe;                                                                                            //\n    }(); /**                                                                                                           //\n          * Reactively fetch current document count. Returns null if the subscription is not ready yet.                //\n          *                                                                                                            //\n          * @returns {Number|null} - Current document count                                                            //\n          */                                                                                                           //\n                                                                                                                       //\n    CountSubscription.prototype.getCount = function () {                                                               //\n        function getCount() {                                                                                          //\n            var id = this.accessToken.get();                                                                           // 75\n            if (id === null) return null;                                                                              // 76\n            var doc = Counts.findOne(id);                                                                              // 78\n            return doc.count;                                                                                          // 79\n        }                                                                                                              // 80\n                                                                                                                       //\n        return getCount;                                                                                               //\n    }(); /**                                                                                                           //\n          * All session info gets deleted when the server goes down, so when the client attempts to                    //\n          * optimistically resume the '.count' publication, the server will throw a 'no-request' error.                //\n          *                                                                                                            //\n          * This function prevents that by manually stopping and restarting the subscription when the                  //\n          * connection to the server is lost.                                                                          //\n          */                                                                                                           //\n                                                                                                                       //\n    CountSubscription.prototype.handleDisconnect = function () {                                                       //\n        function handleDisconnect() {                                                                                  //\n            var status = Meteor.status();                                                                              // 90\n                                                                                                                       //\n            if (!status.connected) {                                                                                   // 91\n                this._markedForResume = true;                                                                          // 92\n                this.fauxHandle = null;                                                                                // 93\n                this.subscriptionHandle.stop();                                                                        // 94\n            }                                                                                                          // 95\n                                                                                                                       //\n            if (status.connected && this._markedForResume) {                                                           // 97\n                this._markedForResume = false;                                                                         // 98\n                this.subscribe(this.lastArgs);                                                                         // 99\n            }                                                                                                          // 100\n        }                                                                                                              // 101\n                                                                                                                       //\n        return handleDisconnect;                                                                                       //\n    }(); /**                                                                                                           //\n          * Returns whether or not a subscription request has been made.                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    CountSubscription.prototype.isSubscribed = function () {                                                           //\n        function isSubscribed() {                                                                                      //\n            return this.accessToken.get() !== null;                                                                    // 107\n        }                                                                                                              // 108\n                                                                                                                       //\n        return isSubscribed;                                                                                           //\n    }();                                                                                                               //\n                                                                                                                       //\n    return CountSubscription;                                                                                          //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"createFauxSubscription.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/counts/createFauxSubscription.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault(function (countManager) {                                                                         // 1\n  return {                                                                                                             // 7\n    ready: function () {                                                                                               // 8\n      return countManager.accessToken.get() !== null && countManager.subscriptionHandle.ready();                       // 8\n    },                                                                                                                 // 8\n    stop: function () {                                                                                                // 9\n      return countManager.unsubscribe();                                                                               // 9\n    }                                                                                                                  // 9\n  };                                                                                                                   // 7\n});                                                                                                                    // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"hypernova\":{\"aggregateSearchFilters.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/hypernova/aggregateSearchFilters.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");                                          //\n                                                                                                                       //\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return AggregateFilters;                                                                                       // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar sift = void 0;                                                                                                     // 1\nmodule.watch(require(\"sift\"), {                                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        sift = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nvar AggregateFilters = function () {                                                                                   //\n    function AggregateFilters(collectionNode, metaFilters) {                                                           // 7\n        (0, _classCallCheck3.default)(this, AggregateFilters);                                                         // 7\n        this.collectionNode = collectionNode;                                                                          // 8\n        this.linker = collectionNode.linker;                                                                           // 9\n        this.metaFilters = metaFilters;                                                                                // 10\n        this.isVirtual = this.linker.isVirtual();                                                                      // 11\n        this.linkStorageField = this.linker.linkStorageField;                                                          // 13\n    }                                                                                                                  // 14\n                                                                                                                       //\n    AggregateFilters.prototype.create = function () {                                                                  //\n        function create() {                                                                                            //\n            switch (this.linker.strategy) {                                                                            // 21\n                case 'one':                                                                                            // 22\n                    return this.createOne();                                                                           // 23\n                                                                                                                       //\n                case 'one-meta':                                                                                       // 24\n                    return this.createOneMeta();                                                                       // 25\n                                                                                                                       //\n                case 'many':                                                                                           // 26\n                    return this.createMany();                                                                          // 27\n                                                                                                                       //\n                case 'many-meta':                                                                                      // 28\n                    return this.createManyMeta();                                                                      // 29\n                                                                                                                       //\n                default:                                                                                               // 30\n                    throw new Meteor.Error(\"Invalid linker type: \" + this.linker.type);                                // 31\n            }                                                                                                          // 21\n        }                                                                                                              // 33\n                                                                                                                       //\n        return create;                                                                                                 //\n    }();                                                                                                               //\n                                                                                                                       //\n    AggregateFilters.prototype.createOne = function () {                                                               //\n        function createOne() {                                                                                         //\n            if (!this.isVirtual) {                                                                                     // 36\n                return {                                                                                               // 37\n                    _id: {                                                                                             // 38\n                        $in: _.uniq(_.pluck(this.parentObjects, this.linkStorageField))                                // 39\n                    }                                                                                                  // 38\n                };                                                                                                     // 37\n            } else {                                                                                                   // 44\n                var _ref;                                                                                              // 44\n                                                                                                                       //\n                return _ref = {}, _ref[this.linkStorageField] = {                                                      // 45\n                    $in: _.uniq(_.pluck(this.parentObjects, '_id'))                                                    // 47\n                }, _ref;                                                                                               // 46\n            }                                                                                                          // 52\n        }                                                                                                              // 53\n                                                                                                                       //\n        return createOne;                                                                                              //\n    }();                                                                                                               //\n                                                                                                                       //\n    AggregateFilters.prototype.createOneMeta = function () {                                                           //\n        function createOneMeta() {                                                                                     //\n            var _this = this;                                                                                          // 55\n                                                                                                                       //\n            if (!this.isVirtual) {                                                                                     // 56\n                var eligibleObjects = this.parentObjects;                                                              // 57\n                                                                                                                       //\n                if (this.metaFilters) {                                                                                // 59\n                    eligibleObjects = _.filter(this.parentObjects, function (object) {                                 // 60\n                        return sift(_this.metaFilters)(object[_this.linkStorageField]);                                // 61\n                    });                                                                                                // 62\n                }                                                                                                      // 63\n                                                                                                                       //\n                var storages = _.pluck(eligibleObjects, this.linkStorageField);                                        // 65\n                                                                                                                       //\n                var ids = [];                                                                                          // 66\n                                                                                                                       //\n                _.each(storages, function (storage) {                                                                  // 67\n                    if (storage) {                                                                                     // 68\n                        ids.push(storage._id);                                                                         // 69\n                    }                                                                                                  // 70\n                });                                                                                                    // 71\n                                                                                                                       //\n                return {                                                                                               // 73\n                    _id: {                                                                                             // 74\n                        $in: _.uniq(ids)                                                                               // 74\n                    }                                                                                                  // 74\n                };                                                                                                     // 73\n            } else {                                                                                                   // 76\n                var filters = {};                                                                                      // 77\n                                                                                                                       //\n                if (this.metaFilters) {                                                                                // 78\n                    _.each(this.metaFilters, function (value, key) {                                                   // 79\n                        filters[_this.linkStorageField + '.' + key] = value;                                           // 80\n                    });                                                                                                // 81\n                }                                                                                                      // 82\n                                                                                                                       //\n                filters[this.linkStorageField + '._id'] = {                                                            // 84\n                    $in: _.uniq(_.pluck(this.parentObjects, '_id'))                                                    // 85\n                };                                                                                                     // 84\n                return filters;                                                                                        // 90\n            }                                                                                                          // 91\n        }                                                                                                              // 92\n                                                                                                                       //\n        return createOneMeta;                                                                                          //\n    }();                                                                                                               //\n                                                                                                                       //\n    AggregateFilters.prototype.createMany = function () {                                                              //\n        function createMany() {                                                                                        //\n            if (!this.isVirtual) {                                                                                     // 95\n                var _ref2;                                                                                             // 95\n                                                                                                                       //\n                var arrayOfIds = _.pluck(this.parentObjects, this.linkStorageField);                                   // 96\n                                                                                                                       //\n                return {                                                                                               // 97\n                    _id: {                                                                                             // 98\n                        $in: _.uniq((_ref2 = _).union.apply(_ref2, (0, _toConsumableArray3.default)(arrayOfIds)))      // 99\n                    }                                                                                                  // 98\n                };                                                                                                     // 97\n            } else {                                                                                                   // 104\n                var _ref3, _ref4;                                                                                      // 104\n                                                                                                                       //\n                var _arrayOfIds = _.pluck(this.parentObjects, '_id');                                                  // 105\n                                                                                                                       //\n                return _ref4 = {}, _ref4[this.linkStorageField] = {                                                    // 106\n                    $in: _.uniq((_ref3 = _).union.apply(_ref3, (0, _toConsumableArray3.default)(_arrayOfIds)))         // 108\n                }, _ref4;                                                                                              // 107\n            }                                                                                                          // 113\n        }                                                                                                              // 114\n                                                                                                                       //\n        return createMany;                                                                                             //\n    }();                                                                                                               //\n                                                                                                                       //\n    AggregateFilters.prototype.createManyMeta = function () {                                                          //\n        function createManyMeta() {                                                                                    //\n            var _this2 = this;                                                                                         // 116\n                                                                                                                       //\n            if (!this.isVirtual) {                                                                                     // 117\n                var ids = [];                                                                                          // 118\n                                                                                                                       //\n                _.each(this.parentObjects, function (object) {                                                         // 120\n                    if (object[_this2.linkStorageField]) {                                                             // 121\n                        if (_this2.metaFilters) {                                                                      // 122\n                            var isValid = sift(_this2.metaFilters);                                                    // 123\n                                                                                                                       //\n                            _.each(object[_this2.linkStorageField], function (object) {                                // 124\n                                if (isValid(object)) {                                                                 // 125\n                                    ids.push(object._id);                                                              // 126\n                                }                                                                                      // 127\n                            });                                                                                        // 128\n                        } else {                                                                                       // 129\n                            _.each(object[_this2.linkStorageField], function (object) {                                // 130\n                                ids.push(object._id);                                                                  // 131\n                            });                                                                                        // 132\n                        }                                                                                              // 133\n                    }                                                                                                  // 134\n                });                                                                                                    // 135\n                                                                                                                       //\n                return {                                                                                               // 137\n                    _id: {                                                                                             // 138\n                        $in: _.uniq(ids)                                                                               // 138\n                    }                                                                                                  // 138\n                };                                                                                                     // 137\n            } else {                                                                                                   // 140\n                var _ref5;                                                                                             // 140\n                                                                                                                       //\n                var filters = {};                                                                                      // 141\n                                                                                                                       //\n                if (this.metaFilters) {                                                                                // 142\n                    _.each(this.metaFilters, function (value, key) {                                                   // 143\n                        filters[key] = value;                                                                          // 144\n                    });                                                                                                // 145\n                }                                                                                                      // 146\n                                                                                                                       //\n                filters._id = {                                                                                        // 148\n                    $in: _.uniq(_.pluck(this.parentObjects, '_id'))                                                    // 149\n                };                                                                                                     // 148\n                return _ref5 = {}, _ref5[this.linkStorageField] = {                                                    // 154\n                    $elemMatch: filters                                                                                // 156\n                }, _ref5;                                                                                              // 155\n            }                                                                                                          // 159\n        }                                                                                                              // 160\n                                                                                                                       //\n        return createManyMeta;                                                                                         //\n    }();                                                                                                               //\n                                                                                                                       //\n    (0, _createClass3.default)(AggregateFilters, [{                                                                    //\n        key: \"parentObjects\",                                                                                          //\n        get: function () {                                                                                             //\n            return this.collectionNode.parent.results;                                                                 // 17\n        }                                                                                                              // 18\n    }]);                                                                                                               //\n    return AggregateFilters;                                                                                           //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"assembleAggregateResults.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/hypernova/assembleAggregateResults.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar sift = void 0;                                                                                                     // 1\nmodule.watch(require(\"sift\"), {                                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        sift = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar cleanObjectForMetaFilters = void 0;                                                                                // 1\nmodule.watch(require(\"./lib/cleanObjectForMetaFilters\"), {                                                             // 1\n    \"default\": function (v) {                                                                                          // 1\n        cleanObjectForMetaFilters = v;                                                                                 // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nmodule.exportDefault(function (childCollectionNode, aggregateResults, metaFilters) {                                   // 1\n    var linker = childCollectionNode.linker;                                                                           // 8\n    var linkStorageField = linker.linkStorageField;                                                                    // 9\n    var linkName = childCollectionNode.linkName;                                                                       // 10\n    var isMeta = linker.isMeta();                                                                                      // 11\n    var allResults = [];                                                                                               // 13\n                                                                                                                       //\n    if (isMeta && metaFilters) {                                                                                       // 15\n        var metaFiltersTest = sift(metaFilters);                                                                       // 16\n                                                                                                                       //\n        _.each(childCollectionNode.parent.results, function (parentResult) {                                           // 17\n            cleanObjectForMetaFilters(parentResult, linkStorageField, metaFiltersTest);                                // 18\n        });                                                                                                            // 19\n    }                                                                                                                  // 20\n                                                                                                                       //\n    if (isMeta && linker.isMany()) {                                                                                   // 22\n        // This case is treated differently because we get an array response from the pipeline.                        // 23\n        _.each(childCollectionNode.parent.results, function (parentResult) {                                           // 25\n            parentResult[linkName] = parentResult[linkName] || [];                                                     // 26\n                                                                                                                       //\n            var eligibleAggregateResults = _.filter(aggregateResults, function (aggregateResult) {                     // 28\n                return _.contains(aggregateResult._id, parentResult._id);                                              // 29\n            });                                                                                                        // 30\n                                                                                                                       //\n            if (eligibleAggregateResults.length) {                                                                     // 32\n                var datas = _.pluck(eligibleAggregateResults, 'data'); /// [ [x1, x2], [x2, x3] ]                      // 33\n                                                                                                                       //\n                                                                                                                       //\n                _.each(datas, function (data) {                                                                        // 35\n                    _.each(data, function (item) {                                                                     // 36\n                        parentResult[linkName].push(item);                                                             // 37\n                    });                                                                                                // 38\n                });                                                                                                    // 39\n            }                                                                                                          // 40\n        });                                                                                                            // 41\n                                                                                                                       //\n        _.each(aggregateResults, function (aggregateResult) {                                                          // 43\n            _.each(aggregateResult.data, function (item) {                                                             // 44\n                return allResults.push(item);                                                                          // 44\n            });                                                                                                        // 44\n        });                                                                                                            // 45\n    } else {                                                                                                           // 46\n        _.each(aggregateResults, function (aggregateResult) {                                                          // 47\n            var parentResult = _.find(childCollectionNode.parent.results, function (result) {                          // 48\n                return result._id == aggregateResult._id;                                                              // 49\n            });                                                                                                        // 50\n                                                                                                                       //\n            if (parentResult) {                                                                                        // 52\n                parentResult[childCollectionNode.linkName] = aggregateResult.data;                                     // 53\n            }                                                                                                          // 54\n                                                                                                                       //\n            _.each(aggregateResult.data, function (item) {                                                             // 56\n                allResults.push(item);                                                                                 // 57\n            });                                                                                                        // 58\n        });                                                                                                            // 59\n    }                                                                                                                  // 60\n                                                                                                                       //\n    childCollectionNode.results = allResults;                                                                          // 62\n});                                                                                                                    // 63\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"assembler.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/hypernova/assembler.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar createSearchFilters = void 0;                                                                                      // 1\nmodule.watch(require(\"../../links/lib/createSearchFilters\"), {                                                         // 1\n    \"default\": function (v) {                                                                                          // 1\n        createSearchFilters = v;                                                                                       // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar cleanObjectForMetaFilters = void 0;                                                                                // 1\nmodule.watch(require(\"./lib/cleanObjectForMetaFilters\"), {                                                             // 1\n    \"default\": function (v) {                                                                                          // 1\n        cleanObjectForMetaFilters = v;                                                                                 // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar sift = void 0;                                                                                                     // 1\nmodule.watch(require(\"sift\"), {                                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        sift = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nmodule.exportDefault(function (childCollectionNode, _ref) {                                                            // 1\n    var limit = _ref.limit,                                                                                            // 5\n        skip = _ref.skip,                                                                                              // 5\n        metaFilters = _ref.metaFilters;                                                                                // 5\n    var parent = childCollectionNode.parent;                                                                           // 6\n    var linker = childCollectionNode.linker;                                                                           // 7\n    var strategy = linker.strategy;                                                                                    // 9\n    var isSingle = linker.isSingle();                                                                                  // 10\n    var isMeta = linker.isMeta();                                                                                      // 11\n    var fieldStorage = linker.linkStorageField; // cleaning the parent results from a child                            // 12\n    // this may be the wrong approach but it works for now                                                             // 15\n                                                                                                                       //\n    if (isMeta && metaFilters) {                                                                                       // 16\n        var metaFiltersTest = sift(metaFilters);                                                                       // 17\n                                                                                                                       //\n        _.each(parent.results, function (parentResult) {                                                               // 18\n            cleanObjectForMetaFilters(parentResult, fieldStorage, metaFiltersTest);                                    // 19\n        });                                                                                                            // 20\n    }                                                                                                                  // 21\n                                                                                                                       //\n    _.each(parent.results, function (result) {                                                                         // 23\n        var data = assembleData(childCollectionNode, result, {                                                         // 24\n            fieldStorage: fieldStorage,                                                                                // 25\n            strategy: strategy,                                                                                        // 25\n            isSingle: isSingle                                                                                         // 25\n        });                                                                                                            // 24\n        result[childCollectionNode.linkName] = filterAssembledData(data, {                                             // 28\n            limit: limit,                                                                                              // 28\n            skip: skip                                                                                                 // 28\n        });                                                                                                            // 28\n    });                                                                                                                // 29\n});                                                                                                                    // 30\n                                                                                                                       //\nfunction filterAssembledData(data, _ref2) {                                                                            // 32\n    var limit = _ref2.limit,                                                                                           // 32\n        skip = _ref2.skip;                                                                                             // 32\n                                                                                                                       //\n    if (limit) {                                                                                                       // 33\n        return data.slice(skip, limit);                                                                                // 34\n    }                                                                                                                  // 35\n                                                                                                                       //\n    return data;                                                                                                       // 37\n}                                                                                                                      // 38\n                                                                                                                       //\nfunction assembleData(childCollectionNode, result, _ref3) {                                                            // 40\n    var fieldStorage = _ref3.fieldStorage,                                                                             // 40\n        strategy = _ref3.strategy;                                                                                     // 40\n    var filters = createSearchFilters(result, fieldStorage, strategy, false);                                          // 41\n    return sift(filters, childCollectionNode.results);                                                                 // 43\n}                                                                                                                      // 44\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"buildAggregatePipeline.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/hypernova/buildAggregatePipeline.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.watch(require(\"meteor/underscore\"), {                                                                           // 1\n    _: function (v) {                                                                                                  // 1\n        _ = v;                                                                                                         // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nmodule.exportDefault(function (childCollectionNode, filters, options, userId) {                                        // 1\n    var containsDottedFields = false;                                                                                  // 4\n    var linker = childCollectionNode.linker;                                                                           // 5\n    var linkStorageField = linker.linkStorageField;                                                                    // 6\n    var collection = childCollectionNode.collection;                                                                   // 7\n    var pipeline = [];                                                                                                 // 9\n                                                                                                                       //\n    if (collection.firewall) {                                                                                         // 11\n        collection.firewall(filters, options, userId);                                                                 // 12\n    }                                                                                                                  // 13\n                                                                                                                       //\n    pipeline.push({                                                                                                    // 15\n        $match: filters                                                                                                // 15\n    });                                                                                                                // 15\n                                                                                                                       //\n    if (options.sort && _.keys(options.sort).length > 0) {                                                             // 17\n        pipeline.push({                                                                                                // 18\n            $sort: options.sort                                                                                        // 18\n        });                                                                                                            // 18\n    }                                                                                                                  // 19\n                                                                                                                       //\n    var _id = linkStorageField;                                                                                        // 21\n                                                                                                                       //\n    if (linker.isMeta()) {                                                                                             // 22\n        _id += '._id';                                                                                                 // 23\n    }                                                                                                                  // 24\n                                                                                                                       //\n    var dataPush = {                                                                                                   // 26\n        _id: '$_id'                                                                                                    // 27\n    };                                                                                                                 // 26\n                                                                                                                       //\n    _.each(options.fields, function (value, field) {                                                                   // 30\n        if (field.indexOf('.') >= 0) {                                                                                 // 31\n            containsDottedFields = true;                                                                               // 32\n        }                                                                                                              // 33\n                                                                                                                       //\n        var safeField = field.replace('.', '___');                                                                     // 34\n        dataPush[safeField] = '$' + field;                                                                             // 35\n    });                                                                                                                // 36\n                                                                                                                       //\n    if (linker.isMeta()) {                                                                                             // 38\n        dataPush[linkStorageField] = '$' + linkStorageField;                                                           // 39\n    }                                                                                                                  // 40\n                                                                                                                       //\n    pipeline.push({                                                                                                    // 42\n        $group: {                                                                                                      // 43\n            _id: \"$\" + _id,                                                                                            // 44\n            data: {                                                                                                    // 45\n                $push: dataPush                                                                                        // 46\n            }                                                                                                          // 45\n        }                                                                                                              // 43\n    });                                                                                                                // 42\n                                                                                                                       //\n    if (options.limit || options.skip) {                                                                               // 51\n        var $slice = [\"$data\"];                                                                                        // 52\n        if (options.skip) $slice.push(options.skip);                                                                   // 53\n        if (options.limit) $slice.push(options.limit);                                                                 // 54\n        pipeline.push({                                                                                                // 56\n            $project: {                                                                                                // 57\n                _id: 1,                                                                                                // 58\n                data: {                                                                                                // 59\n                    $slice: $slice                                                                                     // 59\n                }                                                                                                      // 59\n            }                                                                                                          // 57\n        });                                                                                                            // 56\n    }                                                                                                                  // 62\n                                                                                                                       //\n    return {                                                                                                           // 64\n        pipeline: pipeline,                                                                                            // 64\n        containsDottedFields: containsDottedFields                                                                     // 64\n    };                                                                                                                 // 64\n});                                                                                                                    // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/hypernova/constants.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  SAFE_DOTTED_FIELD_REPLACEMENT: function () {                                                                         // 1\n    return SAFE_DOTTED_FIELD_REPLACEMENT;                                                                              // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar SAFE_DOTTED_FIELD_REPLACEMENT = '___';                                                                             // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hypernova.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/hypernova/hypernova.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return hypernovaInit;                                                                                          // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar applyProps = void 0;                                                                                               // 1\nmodule.watch(require(\"../lib/applyProps.js\"), {                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        applyProps = v;                                                                                                // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar prepareForDelivery = void 0;                                                                                       // 1\nmodule.watch(require(\"../lib/prepareForDelivery.js\"), {                                                                // 1\n    \"default\": function (v) {                                                                                          // 1\n        prepareForDelivery = v;                                                                                        // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar storeHypernovaResults = void 0;                                                                                    // 1\nmodule.watch(require(\"./storeHypernovaResults.js\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        storeHypernovaResults = v;                                                                                     // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\n                                                                                                                       //\nfunction hypernova(collectionNode, userId) {                                                                           // 5\n    _.each(collectionNode.collectionNodes, function (childCollectionNode) {                                            // 6\n        var _applyProps = applyProps(childCollectionNode),                                                             // 6\n            filters = _applyProps.filters,                                                                             // 6\n            options = _applyProps.options;                                                                             // 6\n                                                                                                                       //\n        storeHypernovaResults(childCollectionNode, userId);                                                            // 9\n        hypernova(childCollectionNode, userId);                                                                        // 10\n    });                                                                                                                // 11\n}                                                                                                                      // 12\n                                                                                                                       //\nfunction hypernovaInit(collectionNode, userId) {                                                                       // 14\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                               // 14\n    var bypassFirewalls = config.bypassFirewalls || false;                                                             // 15\n    var params = config.params || {};                                                                                  // 16\n                                                                                                                       //\n    var _applyProps2 = applyProps(collectionNode),                                                                     // 14\n        filters = _applyProps2.filters,                                                                                // 14\n        options = _applyProps2.options;                                                                                // 14\n                                                                                                                       //\n    var collection = collectionNode.collection;                                                                        // 20\n    collectionNode.results = collection.find(filters, options, userId).fetch();                                        // 22\n    var userIdToPass = config.bypassFirewalls ? undefined : userId;                                                    // 24\n    hypernova(collectionNode, userIdToPass);                                                                           // 25\n    prepareForDelivery(collectionNode, params);                                                                        // 27\n    return collectionNode.results;                                                                                     // 29\n}                                                                                                                      // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"storeHypernovaResults.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/hypernova/storeHypernovaResults.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                                              //\n                                                                                                                       //\nvar _extends3 = _interopRequireDefault(_extends2);                                                                     //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return storeHypernovaResults;                                                                                  // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar applyProps = void 0;                                                                                               // 1\nmodule.watch(require(\"../lib/applyProps.js\"), {                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        applyProps = v;                                                                                                // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar AggregateFilters = void 0;                                                                                         // 1\nmodule.watch(require(\"./aggregateSearchFilters.js\"), {                                                                 // 1\n    \"default\": function (v) {                                                                                          // 1\n        AggregateFilters = v;                                                                                          // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar assemble = void 0;                                                                                                 // 1\nmodule.watch(require(\"./assembler.js\"), {                                                                              // 1\n    \"default\": function (v) {                                                                                          // 1\n        assemble = v;                                                                                                  // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar assembleAggregateResults = void 0;                                                                                 // 1\nmodule.watch(require(\"./assembleAggregateResults.js\"), {                                                               // 1\n    \"default\": function (v) {                                                                                          // 1\n        assembleAggregateResults = v;                                                                                  // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\nvar buildAggregatePipeline = void 0;                                                                                   // 1\nmodule.watch(require(\"./buildAggregatePipeline.js\"), {                                                                 // 1\n    \"default\": function (v) {                                                                                          // 1\n        buildAggregatePipeline = v;                                                                                    // 1\n    }                                                                                                                  // 1\n}, 4);                                                                                                                 // 1\nvar snapBackDottedFields = void 0;                                                                                     // 1\nmodule.watch(require(\"./lib/snapBackDottedFields\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        snapBackDottedFields = v;                                                                                      // 1\n    }                                                                                                                  // 1\n}, 5);                                                                                                                 // 1\n                                                                                                                       //\nfunction storeHypernovaResults(childCollectionNode, userId) {                                                          // 8\n    if (childCollectionNode.parent.results.length === 0) {                                                             // 9\n        return childCollectionNode.results = [];                                                                       // 10\n    }                                                                                                                  // 11\n                                                                                                                       //\n    var _applyProps = applyProps(childCollectionNode),                                                                 // 8\n        filters = _applyProps.filters,                                                                                 // 8\n        options = _applyProps.options;                                                                                 // 8\n                                                                                                                       //\n    var metaFilters = filters.$meta;                                                                                   // 15\n    var aggregateFilters = new AggregateFilters(childCollectionNode, metaFilters);                                     // 16\n    delete filters.$meta;                                                                                              // 17\n    var linker = childCollectionNode.linker;                                                                           // 19\n    var isVirtual = linker.isVirtual();                                                                                // 20\n    var collection = childCollectionNode.collection;                                                                   // 21\n                                                                                                                       //\n    _.extend(filters, aggregateFilters.create()); // if it's not virtual then we retrieve them and assemble them here.\n                                                                                                                       //\n                                                                                                                       //\n    if (!isVirtual) {                                                                                                  // 26\n        var filteredOptions = _.omit(options, 'limit');                                                                // 27\n                                                                                                                       //\n        childCollectionNode.results = collection.find(filters, filteredOptions, userId).fetch();                       // 29\n        assemble(childCollectionNode, (0, _extends3.default)({}, options, {                                            // 31\n            metaFilters: metaFilters                                                                                   // 33\n        }));                                                                                                           // 31\n    } else {                                                                                                           // 35\n        // virtuals arrive here                                                                                        // 36\n        var _buildAggregatePipeli = buildAggregatePipeline(childCollectionNode, filters, options, userId),             // 35\n            pipeline = _buildAggregatePipeli.pipeline,                                                                 // 35\n            containsDottedFields = _buildAggregatePipeli.containsDottedFields;                                         // 35\n                                                                                                                       //\n        var aggregateResults = collection.aggregate(pipeline, {                                                        // 39\n            explains: true                                                                                             // 39\n        }); /**                                                                                                        // 39\n             * If in aggregation it contains '.', we replace it with a custom string '___'                             //\n             * And then after aggregation is complete we need to snap-it back to how it was.                           //\n             */                                                                                                        //\n                                                                                                                       //\n        if (containsDottedFields) {                                                                                    // 45\n            snapBackDottedFields(aggregateResults);                                                                    // 46\n        }                                                                                                              // 47\n                                                                                                                       //\n        assembleAggregateResults(childCollectionNode, aggregateResults, metaFilters);                                  // 49\n    }                                                                                                                  // 50\n}                                                                                                                      // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"cleanObjectForMetaFilters.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/hypernova/lib/cleanObjectForMetaFilters.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault(function (object, field, metaFiltersTest) {                                                       // 1\n    if (object[field]) {                                                                                               // 2\n        if (_.isArray(object[field])) {                                                                                // 3\n            object[field] = object[field].filter(metaFiltersTest);                                                     // 4\n        } else {                                                                                                       // 5\n            if (!metaFiltersTest(object[field])) {                                                                     // 6\n                object[field] = null;                                                                                  // 7\n            }                                                                                                          // 8\n        }                                                                                                              // 9\n    }                                                                                                                  // 10\n});                                                                                                                    // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"snapBackDottedFields.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/hypernova/lib/snapBackDottedFields.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar SAFE_DOTTED_FIELD_REPLACEMENT = void 0;                                                                            // 1\nmodule.watch(require(\"../constants\"), {                                                                                // 1\n    SAFE_DOTTED_FIELD_REPLACEMENT: function (v) {                                                                      // 1\n        SAFE_DOTTED_FIELD_REPLACEMENT = v;                                                                             // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar dot = void 0;                                                                                                      // 1\nmodule.watch(require(\"dot-object\"), {                                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        dot = v;                                                                                                       // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nmodule.exportDefault(function (aggregationResult) {                                                                    // 1\n    aggregationResult.forEach(function (result) {                                                                      // 5\n        result.data = result.data.map(function (document) {                                                            // 6\n            _.each(document, function (value, key) {                                                                   // 7\n                if (key.indexOf(SAFE_DOTTED_FIELD_REPLACEMENT) >= 0) {                                                 // 8\n                    document[key.replace(SAFE_DOTTED_FIELD_REPLACEMENT, '.')] = value;                                 // 9\n                    delete document[key];                                                                              // 10\n                }                                                                                                      // 11\n            });                                                                                                        // 12\n                                                                                                                       //\n            return dot.object(document);                                                                               // 14\n        });                                                                                                            // 15\n    });                                                                                                                // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"lib\":{\"applyProps.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/lib/applyProps.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return applyProps;                                                                                             // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar restrictOptions = ['disableOplog', 'pollingIntervalMs', 'pollingThrottleMs'];                                      // 1\n                                                                                                                       //\nfunction applyProps(node) {                                                                                            // 7\n    var _ref;                                                                                                          // 7\n                                                                                                                       //\n    var filters = _.extend({}, node.props.$filters);                                                                   // 8\n                                                                                                                       //\n    var options = _.extend({}, node.props.$options);                                                                   // 9\n                                                                                                                       //\n    options = (_ref = _).omit.apply(_ref, [options].concat(restrictOptions));                                          // 11\n    options.fields = options.fields || {};                                                                             // 12\n    node.applyFields(filters, options);                                                                                // 14\n    return {                                                                                                           // 16\n        filters: filters,                                                                                              // 16\n        options: options                                                                                               // 16\n    };                                                                                                                 // 16\n}                                                                                                                      // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"callWithPromise.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/lib/callWithPromise.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exportDefault(function (method, myParameters) {                                                                 // 1\n    return new Promise(function (resolve, reject) {                                                                    // 2\n        Meteor.call(method, myParameters, function (err, res) {                                                        // 3\n            if (err) reject(err.reason || 'Something went wrong.');                                                    // 4\n            resolve(res);                                                                                              // 6\n        });                                                                                                            // 7\n    });                                                                                                                // 8\n});                                                                                                                    // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"createGraph.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/lib/createGraph.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    createNodes: function () {                                                                                         // 1\n        return createNodes;                                                                                            // 1\n    },                                                                                                                 // 1\n    addFieldNode: function () {                                                                                        // 1\n        return addFieldNode;                                                                                           // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar CollectionNode = void 0;                                                                                           // 1\nmodule.watch(require(\"../nodes/collectionNode.js\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        CollectionNode = v;                                                                                            // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar FieldNode = void 0;                                                                                                // 1\nmodule.watch(require(\"../nodes/fieldNode.js\"), {                                                                       // 1\n    \"default\": function (v) {                                                                                          // 1\n        FieldNode = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar ReducerNode = void 0;                                                                                              // 1\nmodule.watch(require(\"../nodes/reducerNode.js\"), {                                                                     // 1\n    \"default\": function (v) {                                                                                          // 1\n        ReducerNode = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar dotize = void 0;                                                                                                   // 1\nmodule.watch(require(\"./dotize.js\"), {                                                                                 // 1\n    \"default\": function (v) {                                                                                          // 1\n        dotize = v;                                                                                                    // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\nvar createReducers = void 0;                                                                                           // 1\nmodule.watch(require(\"../reducers/lib/createReducers\"), {                                                              // 1\n    \"default\": function (v) {                                                                                          // 1\n        createReducers = v;                                                                                            // 1\n    }                                                                                                                  // 1\n}, 4);                                                                                                                 // 1\nvar specialFields = ['$filters', '$options', '$postFilters', '$postOptions', '$postFilter']; /**                       // 7\n                                                                                              * Creates node objects from the body. The root is always a collection node.\n                                                                                              *                        //\n                                                                                              * @param root            //\n                                                                                              */                       //\n                                                                                                                       //\nfunction createNodes(root) {                                                                                           // 20\n    // this is a fix for phantomjs tests (don't really understand it.)                                                 // 21\n    if (!_.isObject(root.body)) {                                                                                      // 22\n        return;                                                                                                        // 23\n    }                                                                                                                  // 24\n                                                                                                                       //\n    _.each(root.body, function (body, fieldName) {                                                                     // 26\n        if (!body) {                                                                                                   // 27\n            return;                                                                                                    // 28\n        } // if it's a prop                                                                                            // 29\n                                                                                                                       //\n                                                                                                                       //\n        if (_.contains(specialFields, fieldName)) {                                                                    // 32\n            root.addProp(fieldName, body);                                                                             // 33\n            return;                                                                                                    // 35\n        } // workaround, see https://github.com/cult-of-coders/grapher/issues/134                                      // 36\n        // TODO: find another way to do this                                                                           // 39\n                                                                                                                       //\n                                                                                                                       //\n        if (root.collection.default) {                                                                                 // 40\n            root.collection = root.collection.default;                                                                 // 41\n        } // checking if it is a link.                                                                                 // 42\n                                                                                                                       //\n                                                                                                                       //\n        var linker = root.collection.getLinker(fieldName);                                                             // 45\n                                                                                                                       //\n        if (linker) {                                                                                                  // 47\n            // check if it is a cached link                                                                            // 48\n            // if yes, then we need to explicitly define this at collection level                                      // 49\n            // so when we transform the data for delivery, we move it to the link name                                 // 50\n            if (linker.isDenormalized()) {                                                                             // 51\n                if (linker.isSubBodyDenormalized(body)) {                                                              // 52\n                    handleDenormalized(root, linker, body, fieldName);                                                 // 53\n                    return;                                                                                            // 54\n                }                                                                                                      // 55\n            }                                                                                                          // 56\n                                                                                                                       //\n            var subroot = new CollectionNode(linker.getLinkedCollection(), body, fieldName);                           // 58\n            root.add(subroot, linker);                                                                                 // 59\n            createNodes(subroot);                                                                                      // 61\n            return;                                                                                                    // 62\n        } // checking if it's a reducer                                                                                // 63\n                                                                                                                       //\n                                                                                                                       //\n        var reducer = root.collection.getReducer(fieldName);                                                           // 66\n                                                                                                                       //\n        if (reducer) {                                                                                                 // 68\n            var reducerNode = new ReducerNode(fieldName, reducer);                                                     // 69\n            root.add(reducerNode);                                                                                     // 70\n        } // it's most likely a field then                                                                             // 71\n                                                                                                                       //\n                                                                                                                       //\n        addFieldNode(body, fieldName, root);                                                                           // 74\n    });                                                                                                                // 75\n                                                                                                                       //\n    createReducers(root);                                                                                              // 77\n                                                                                                                       //\n    if (root.fieldNodes.length === 0) {                                                                                // 79\n        root.add(new FieldNode('_id', 1));                                                                             // 80\n    }                                                                                                                  // 81\n}                                                                                                                      // 82\n                                                                                                                       //\nfunction addFieldNode(body, fieldName, root) {                                                                         // 89\n    // it's not a link and not a special variable => we assume it's a field                                            // 90\n    if (_.isObject(body)) {                                                                                            // 91\n        var _dotize$convert;                                                                                           // 91\n                                                                                                                       //\n        var dotted = dotize.convert((_dotize$convert = {}, _dotize$convert[fieldName] = body, _dotize$convert));       // 92\n                                                                                                                       //\n        _.each(dotted, function (value, key) {                                                                         // 93\n            root.add(new FieldNode(key, value));                                                                       // 94\n        });                                                                                                            // 95\n    } else {                                                                                                           // 96\n        var fieldNode = new FieldNode(fieldName, body);                                                                // 97\n        root.add(fieldNode);                                                                                           // 98\n    }                                                                                                                  // 99\n}                                                                                                                      // 100\n                                                                                                                       //\nmodule.exportDefault(function (collection, body) {                                                                     // 1\n    var root = new CollectionNode(collection, body);                                                                   // 108\n    createNodes(root);                                                                                                 // 109\n    return root;                                                                                                       // 111\n});                                                                                                                    // 112\n; /**                                                                                                                  // 112\n   * Ads denormalization config properly, including _id                                                                //\n   *                                                                                                                   //\n   * @param root                                                                                                       //\n   * @param linker                                                                                                     //\n   * @param body                                                                                                       //\n   * @param fieldName                                                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\nfunction handleDenormalized(root, linker, body, fieldName) {                                                           // 122\n    Object.assign(body, {                                                                                              // 123\n        _id: 1                                                                                                         // 123\n    });                                                                                                                // 123\n    var cacheField = linker.linkConfig.denormalize.field;                                                              // 125\n    root.snapCache(cacheField, fieldName); // if it's one and direct also include the link storage                     // 126\n                                                                                                                       //\n    if (!linker.isMany() && !linker.isVirtual()) {                                                                     // 129\n        addFieldNode(1, linker.linkStorageField, root);                                                                // 130\n    }                                                                                                                  // 131\n                                                                                                                       //\n    addFieldNode(body, cacheField, root);                                                                              // 133\n}                                                                                                                      // 134\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"dotize.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/lib/dotize.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                                //\n                                                                                                                       //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.exportDefault(dotize = {});                                                                                     // 1\n                                                                                                                       //\ndotize.convert = function (obj, prefix) {                                                                              // 4\n    if ((!obj || (typeof obj === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(obj)) != \"object\") && !Array.isArray(obj)) {\n        if (prefix) {                                                                                                  // 6\n            var newObj = {};                                                                                           // 7\n            newObj[prefix] = obj;                                                                                      // 8\n            return newObj;                                                                                             // 9\n        } else {                                                                                                       // 10\n            return obj;                                                                                                // 11\n        }                                                                                                              // 12\n    }                                                                                                                  // 13\n                                                                                                                       //\n    var newObj = {};                                                                                                   // 15\n                                                                                                                       //\n    function recurse(o, p, isArrayItem) {                                                                              // 17\n        for (var f in meteorBabelHelpers.sanitizeForInObject(o)) {                                                     // 18\n            if (o[f] && (0, _typeof3.default)(o[f]) === \"object\") {                                                    // 19\n                if (Array.isArray(o[f])) {                                                                             // 20\n                    if (isEmptyArray(o[f])) {                                                                          // 21\n                        newObj[getFieldName(f, p, true)] = o[f]; // empty array                                        // 22\n                    } else {                                                                                           // 23\n                        newObj = recurse(o[f], getFieldName(f, p, false, true), true); // array                        // 24\n                    }                                                                                                  // 25\n                } else {                                                                                               // 26\n                    if (isArrayItem) {                                                                                 // 27\n                        if (isEmptyObj(o[f])) {                                                                        // 28\n                            newObj[getFieldName(f, p, true)] = o[f]; // empty object                                   // 29\n                        } else {                                                                                       // 30\n                            newObj = recurse(o[f], getFieldName(f, p, true)); // array item object                     // 31\n                        }                                                                                              // 32\n                    } else {                                                                                           // 33\n                        if (isEmptyObj(o[f])) {                                                                        // 34\n                            newObj[getFieldName(f, p)] = o[f]; // empty object                                         // 35\n                        } else {                                                                                       // 36\n                            newObj = recurse(o[f], getFieldName(f, p)); // object                                      // 37\n                        }                                                                                              // 38\n                    }                                                                                                  // 39\n                }                                                                                                      // 40\n            } else {                                                                                                   // 41\n                if (isArrayItem || isNumber(f)) {                                                                      // 42\n                    newObj[getFieldName(f, p, true)] = o[f]; // array item primitive                                   // 43\n                } else {                                                                                               // 44\n                    newObj[getFieldName(f, p)] = o[f]; // primitive                                                    // 45\n                }                                                                                                      // 46\n            }                                                                                                          // 47\n        }                                                                                                              // 48\n                                                                                                                       //\n        if (isEmptyObj(newObj)) return obj;                                                                            // 50\n        return newObj;                                                                                                 // 53\n    }                                                                                                                  // 54\n                                                                                                                       //\n    function isNumber(f) {                                                                                             // 56\n        return !isNaN(parseInt(f));                                                                                    // 57\n    }                                                                                                                  // 58\n                                                                                                                       //\n    function isEmptyObj(obj) {                                                                                         // 60\n        for (var prop in meteorBabelHelpers.sanitizeForInObject(obj)) {                                                // 61\n            if (Object.hasOwnProperty.call(obj, prop)) return false;                                                   // 62\n        }                                                                                                              // 64\n                                                                                                                       //\n        return true;                                                                                                   // 66\n    }                                                                                                                  // 67\n                                                                                                                       //\n    function isEmptyArray(o) {                                                                                         // 69\n        if (Array.isArray(o) && o.length == 0) return true;                                                            // 70\n        return false;                                                                                                  // 72\n    }                                                                                                                  // 73\n                                                                                                                       //\n    function getFieldName(field, prefix, isArrayItem, isArray) {                                                       // 75\n        if (isArray) return (prefix ? prefix : \"\") + (isNumber(field) ? \"[\" + field + \"]\" : \".\" + field);else if (isArrayItem) return (prefix ? prefix : \"\") + \"[\" + field + \"]\";else return (prefix ? prefix + \".\" : \"\") + field;\n    }                                                                                                                  // 82\n                                                                                                                       //\n    return recurse(obj, prefix, Array.isArray(obj));                                                                   // 84\n};                                                                                                                     // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"intersectDeep.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/lib/intersectDeep.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar dot = void 0;                                                                                                      // 1\nmodule.watch(require(\"dot-object\"), {                                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        dot = v;                                                                                                       // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.watch(require(\"meteor/underscore\"), {                                                                           // 1\n    _: function (v) {                                                                                                  // 1\n        _ = v;                                                                                                         // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nmodule.exportDefault(function (allowedBody, clientBody) {                                                              // 1\n    var allowedBodyDot = _.keys(dot.dot(allowedBody));                                                                 // 12\n                                                                                                                       //\n    var clientBodyDot = _.keys(dot.dot(clientBody));                                                                   // 13\n                                                                                                                       //\n    var intersection = _.intersection(allowedBodyDot, clientBodyDot);                                                  // 15\n                                                                                                                       //\n    var build = {};                                                                                                    // 17\n    intersection.forEach(function (intersectedField) {                                                                 // 18\n        build[intersectedField] = 1;                                                                                   // 19\n    });                                                                                                                // 20\n    return dot.object(build);                                                                                          // 22\n});                                                                                                                    // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"prepareForDelivery.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/lib/prepareForDelivery.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    applyPostFilters: function () {                                                                                    // 1\n        return applyPostFilters;                                                                                       // 1\n    },                                                                                                                 // 1\n    applyPostOptions: function () {                                                                                    // 1\n        return applyPostOptions;                                                                                       // 1\n    },                                                                                                                 // 1\n    removeLinkStorages: function () {                                                                                  // 1\n        return removeLinkStorages;                                                                                     // 1\n    },                                                                                                                 // 1\n    storeOneResults: function () {                                                                                     // 1\n        return storeOneResults;                                                                                        // 1\n    },                                                                                                                 // 1\n    assembleMetadata: function () {                                                                                    // 1\n        return assembleMetadata;                                                                                       // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar applyReducers = void 0;                                                                                            // 1\nmodule.watch(require(\"../reducers/lib/applyReducers\"), {                                                               // 1\n    \"default\": function (v) {                                                                                          // 1\n        applyReducers = v;                                                                                             // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar cleanReducerLeftovers = void 0;                                                                                    // 1\nmodule.watch(require(\"../reducers/lib/cleanReducerLeftovers\"), {                                                       // 1\n    \"default\": function (v) {                                                                                          // 1\n        cleanReducerLeftovers = v;                                                                                     // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar sift = void 0;                                                                                                     // 1\nmodule.watch(require(\"sift\"), {                                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        sift = v;                                                                                                      // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar Minimongo = void 0;                                                                                                // 1\nmodule.watch(require(\"meteor/minimongo\"), {                                                                            // 1\n    Minimongo: function (v) {                                                                                          // 1\n        Minimongo = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\nmodule.exportDefault(function (node, params) {                                                                         // 1\n    snapBackCaches(node);                                                                                              // 11\n    applyReducers(node, params);                                                                                       // 12\n    cleanReducerLeftovers(node);                                                                                       // 13\n                                                                                                                       //\n    _.each(node.collectionNodes, function (collectionNode) {                                                           // 15\n        cloneMetaChildren(collectionNode, node.results);                                                               // 16\n    });                                                                                                                // 17\n                                                                                                                       //\n    _.each(node.collectionNodes, function (collectionNode) {                                                           // 19\n        assembleMetadata(collectionNode, node.results);                                                                // 20\n    });                                                                                                                // 21\n                                                                                                                       //\n    removeLinkStorages(node, node.results);                                                                            // 23\n    storeOneResults(node, node.results);                                                                               // 24\n    applyPostFilters(node);                                                                                            // 25\n    applyPostOptions(node);                                                                                            // 26\n    applyPostFilter(node, params);                                                                                     // 27\n});                                                                                                                    // 28\n                                                                                                                       //\nfunction applyPostFilters(node) {                                                                                      // 30\n    var postFilters = node.props.$postFilters;                                                                         // 31\n                                                                                                                       //\n    if (postFilters) {                                                                                                 // 32\n        node.results = sift(postFilters, node.results);                                                                // 33\n    }                                                                                                                  // 34\n}                                                                                                                      // 35\n                                                                                                                       //\nfunction applyPostOptions(node) {                                                                                      // 37\n    var options = node.props.$postOptions;                                                                             // 38\n                                                                                                                       //\n    if (options) {                                                                                                     // 39\n        if (options.sort) {                                                                                            // 40\n            var sorter = new Minimongo.Sorter(options.sort);                                                           // 41\n            node.results.sort(sorter.getComparator());                                                                 // 42\n        }                                                                                                              // 43\n                                                                                                                       //\n        if (options.limit || options.skip) {                                                                           // 44\n            var start = options.skip || 0;                                                                             // 45\n            var end = options.limit ? options.limit + start : node.results.length;                                     // 46\n            node.results = node.results.slice(start, end);                                                             // 47\n        }                                                                                                              // 48\n    }                                                                                                                  // 49\n}                                                                                                                      // 50\n                                                                                                                       //\n/**                                                                                                                    // 53\n * Optionally applies a post filtering option                                                                          //\n */function applyPostFilter(node, params) {                                                                            //\n    if (node.props.$postFilter) {                                                                                      // 57\n        var filter = node.props.$postFilter;                                                                           // 58\n                                                                                                                       //\n        if (_.isArray(filter)) {                                                                                       // 60\n            filter.forEach(function (f) {                                                                              // 61\n                node.results = f(node.results, params);                                                                // 62\n            });                                                                                                        // 63\n        } else {                                                                                                       // 64\n            node.results = filter(node.results, params);                                                               // 65\n        }                                                                                                              // 66\n    }                                                                                                                  // 67\n}                                                                                                                      // 68\n                                                                                                                       //\nfunction removeLinkStorages(node, sameLevelResults) {                                                                  // 70\n    if (!sameLevelResults) {                                                                                           // 71\n        return;                                                                                                        // 72\n    }                                                                                                                  // 73\n                                                                                                                       //\n    _.each(node.collectionNodes, function (collectionNode) {                                                           // 75\n        var removeStorageField = collectionNode.shouldCleanStorage;                                                    // 76\n                                                                                                                       //\n        _.each(sameLevelResults, function (result) {                                                                   // 77\n            if (removeStorageField) {                                                                                  // 78\n                delete result[collectionNode.linkStorageField];                                                        // 79\n            }                                                                                                          // 80\n                                                                                                                       //\n            removeLinkStorages(collectionNode, result[collectionNode.linkName]);                                       // 82\n        });                                                                                                            // 83\n    });                                                                                                                // 84\n}                                                                                                                      // 85\n                                                                                                                       //\nfunction storeOneResults(node, sameLevelResults) {                                                                     // 87\n    if (!sameLevelResults) {                                                                                           // 88\n        return;                                                                                                        // 89\n    }                                                                                                                  // 90\n                                                                                                                       //\n    node.collectionNodes.forEach(function (collectionNode) {                                                           // 92\n        _.each(sameLevelResults, function (result) {                                                                   // 93\n            storeOneResults(collectionNode, result[collectionNode.linkName]);                                          // 94\n        });                                                                                                            // 95\n                                                                                                                       //\n        if (collectionNode.isOneResult) {                                                                              // 97\n            sameLevelResults.forEach(function (result) {                                                               // 98\n                if (result[collectionNode.linkName] && _.isArray(result[collectionNode.linkName])) {                   // 99\n                    result[collectionNode.linkName] = result[collectionNode.linkName] ? _.first(result[collectionNode.linkName]) : undefined;\n                }                                                                                                      // 103\n            });                                                                                                        // 104\n        }                                                                                                              // 105\n    });                                                                                                                // 106\n}                                                                                                                      // 107\n                                                                                                                       //\nfunction cloneMetaChildren(node, parentResults) {                                                                      // 109\n    if (!parentResults) {                                                                                              // 110\n        return;                                                                                                        // 111\n    }                                                                                                                  // 112\n                                                                                                                       //\n    var linkName = node.linkName;                                                                                      // 114\n    var isMeta = node.isMeta;                                                                                          // 115\n    parentResults.forEach(function (parentResult) {                                                                    // 117\n        if (isMeta && parentResult[linkName]) {                                                                        // 118\n            parentResult[linkName] = parentResult[linkName].map(function (object) {                                    // 119\n                return Object.assign({}, object);                                                                      // 120\n            });                                                                                                        // 121\n        }                                                                                                              // 122\n                                                                                                                       //\n        node.collectionNodes.forEach(function (collectionNode) {                                                       // 124\n            cloneMetaChildren(collectionNode, parentResult[linkName]);                                                 // 125\n        });                                                                                                            // 126\n    });                                                                                                                // 127\n}                                                                                                                      // 128\n                                                                                                                       //\nfunction assembleMetadata(node, parentResults) {                                                                       // 130\n    // assembling metadata is depth first                                                                              // 131\n    node.collectionNodes.forEach(function (collectionNode) {                                                           // 132\n        _.each(parentResults, function (result) {                                                                      // 133\n            assembleMetadata(collectionNode, result[node.linkName]);                                                   // 134\n        });                                                                                                            // 135\n    });                                                                                                                // 136\n                                                                                                                       //\n    if (node.isMeta) {                                                                                                 // 138\n        if (node.isVirtual) {                                                                                          // 139\n            _.each(parentResults, function (parentResult) {                                                            // 140\n                var childResult = parentResult[node.linkName];                                                         // 141\n                                                                                                                       //\n                _.each(childResult, function (object) {                                                                // 143\n                    var storage = object[node.linkStorageField];                                                       // 144\n                    storeMetadata(object, parentResult, storage, true);                                                // 146\n                });                                                                                                    // 147\n            });                                                                                                        // 148\n        } else {                                                                                                       // 149\n            _.each(parentResults, function (parentResult) {                                                            // 150\n                var childResult = parentResult[node.linkName];                                                         // 151\n                var storage = parentResult[node.linkStorageField];                                                     // 152\n                                                                                                                       //\n                _.each(childResult, function (object) {                                                                // 154\n                    storeMetadata(object, parentResult, storage, false);                                               // 155\n                });                                                                                                    // 156\n            });                                                                                                        // 157\n        }                                                                                                              // 158\n    }                                                                                                                  // 159\n}                                                                                                                      // 160\n                                                                                                                       //\nfunction storeMetadata(element, parentElement, storage, isVirtual) {                                                   // 162\n    if (isVirtual) {                                                                                                   // 163\n        var $metadata = void 0;                                                                                        // 164\n                                                                                                                       //\n        if (_.isArray(storage)) {                                                                                      // 165\n            $metadata = _.find(storage, function (storageItem) {                                                       // 166\n                return storageItem._id == parentElement._id;                                                           // 166\n            });                                                                                                        // 166\n        } else {                                                                                                       // 167\n            $metadata = storage;                                                                                       // 168\n        }                                                                                                              // 169\n                                                                                                                       //\n        element.$metadata = _.omit($metadata, '_id');                                                                  // 171\n    } else {                                                                                                           // 172\n        var _$metadata = void 0;                                                                                       // 173\n                                                                                                                       //\n        if (_.isArray(storage)) {                                                                                      // 174\n            _$metadata = _.find(storage, function (storageItem) {                                                      // 175\n                return storageItem._id == element._id;                                                                 // 175\n            });                                                                                                        // 175\n        } else {                                                                                                       // 176\n            _$metadata = storage;                                                                                      // 177\n        }                                                                                                              // 178\n                                                                                                                       //\n        element.$metadata = _.omit(_$metadata, '_id');                                                                 // 180\n    }                                                                                                                  // 181\n}                                                                                                                      // 182\n                                                                                                                       //\nfunction snapBackCaches(node) {                                                                                        // 184\n    node.collectionNodes.forEach(function (collectionNode) {                                                           // 185\n        snapBackCaches(collectionNode);                                                                                // 186\n    });                                                                                                                // 187\n                                                                                                                       //\n    if (!_.isEmpty(node.snapCaches)) {                                                                                 // 189\n        // process stuff                                                                                               // 190\n        _.each(node.snapCaches, function (linkName, cacheField) {                                                      // 191\n            var isSingle = _.contains(node.snapCachesSingles, cacheField);                                             // 192\n                                                                                                                       //\n            var linker = node.collection.getLinker(linkName); // we do this because for one direct and one meta direct, id is not stored\n                                                                                                                       //\n            var shoudStoreLinkStorage = !linker.isMany() && !linker.isVirtual();                                       // 195\n            node.results.forEach(function (result) {                                                                   // 197\n                if (result[cacheField]) {                                                                              // 198\n                    if (shoudStoreLinkStorage) {                                                                       // 199\n                        Object.assign(result[cacheField], {                                                            // 200\n                            _id: linker.isMeta() ? result[linker.linkStorageField]._id : result[linker.linkStorageField]\n                        });                                                                                            // 200\n                    }                                                                                                  // 205\n                                                                                                                       //\n                    if (isSingle && _.isArray(result[cacheField])) {                                                   // 207\n                        result[linkName] = _.first(result[cacheField]);                                                // 208\n                    } else {                                                                                           // 209\n                        result[linkName] = result[cacheField];                                                         // 210\n                    }                                                                                                  // 211\n                                                                                                                       //\n                    delete result[cacheField];                                                                         // 213\n                }                                                                                                      // 214\n            });                                                                                                        // 215\n        });                                                                                                            // 216\n    }                                                                                                                  // 217\n}                                                                                                                      // 218\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"prepareForProcess.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/lib/prepareForProcess.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar check = void 0,                                                                                                    // 1\n    Match = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/check\"), {                                                                                // 1\n    check: function (v) {                                                                                              // 1\n        check = v;                                                                                                     // 1\n    },                                                                                                                 // 1\n    Match: function (v) {                                                                                              // 1\n        Match = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar deepClone = void 0;                                                                                                // 1\nmodule.watch(require(\"lodash.clonedeep\"), {                                                                            // 1\n    \"default\": function (v) {                                                                                          // 1\n        deepClone = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nfunction defaultFilterFunction(_ref) {                                                                                 // 4\n    var filters = _ref.filters,                                                                                        // 8\n        options = _ref.options,                                                                                        // 8\n        params = _ref.params;                                                                                          // 8\n                                                                                                                       //\n    if (params.filters) {                                                                                              // 9\n        Object.assign(filters, params.filters);                                                                        // 10\n    }                                                                                                                  // 11\n                                                                                                                       //\n    if (params.options) {                                                                                              // 12\n        Object.assign(options, params.options);                                                                        // 13\n    }                                                                                                                  // 14\n}                                                                                                                      // 15\n                                                                                                                       //\nfunction applyFilterRecursive(data) {                                                                                  // 17\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                               // 17\n    var isRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;                            // 17\n                                                                                                                       //\n    if (isRoot && !_.isFunction(data.$filter)) {                                                                       // 18\n        data.$filter = defaultFilterFunction;                                                                          // 19\n    }                                                                                                                  // 20\n                                                                                                                       //\n    if (data.$filter) {                                                                                                // 22\n        check(data.$filter, Match.OneOf(Function, [Function]));                                                        // 23\n        data.$filters = data.$filters || {};                                                                           // 25\n        data.$options = data.$options || {};                                                                           // 26\n                                                                                                                       //\n        if (_.isArray(data.$filter)) {                                                                                 // 28\n            data.$filter.forEach(function (filter) {                                                                   // 29\n                filter.call(null, {                                                                                    // 30\n                    filters: data.$filters,                                                                            // 31\n                    options: data.$options,                                                                            // 32\n                    params: params                                                                                     // 33\n                });                                                                                                    // 30\n            });                                                                                                        // 35\n        } else {                                                                                                       // 36\n            data.$filter({                                                                                             // 37\n                filters: data.$filters,                                                                                // 38\n                options: data.$options,                                                                                // 39\n                params: params                                                                                         // 40\n            });                                                                                                        // 37\n        }                                                                                                              // 42\n                                                                                                                       //\n        data.$filter = null;                                                                                           // 44\n        delete data.$filter;                                                                                           // 45\n    }                                                                                                                  // 46\n                                                                                                                       //\n    _.each(data, function (value, key) {                                                                               // 48\n        if (_.isObject(value)) {                                                                                       // 49\n            return applyFilterRecursive(value, params);                                                                // 50\n        }                                                                                                              // 51\n    });                                                                                                                // 52\n}                                                                                                                      // 53\n                                                                                                                       //\nfunction applyPagination(body, _params) {                                                                              // 55\n    if (body['$paginate'] && _params) {                                                                                // 56\n        if (!body.$options) {                                                                                          // 57\n            body.$options = {};                                                                                        // 58\n        }                                                                                                              // 59\n                                                                                                                       //\n        if (_params.limit) {                                                                                           // 61\n            _.extend(body.$options, {                                                                                  // 62\n                limit: _params.limit                                                                                   // 63\n            });                                                                                                        // 62\n        }                                                                                                              // 65\n                                                                                                                       //\n        if (_params.skip) {                                                                                            // 67\n            _.extend(body.$options, {                                                                                  // 68\n                skip: _params.skip                                                                                     // 69\n            });                                                                                                        // 68\n        }                                                                                                              // 71\n                                                                                                                       //\n        delete body['$paginate'];                                                                                      // 73\n    }                                                                                                                  // 74\n}                                                                                                                      // 75\n                                                                                                                       //\nmodule.exportDefault(function (_body) {                                                                                // 1\n    var _params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                              // 77\n                                                                                                                       //\n    var body = deepClone(_body);                                                                                       // 78\n    var params = deepClone(_params);                                                                                   // 79\n    applyPagination(body, params);                                                                                     // 81\n    applyFilterRecursive(body, params, true);                                                                          // 82\n    return body;                                                                                                       // 84\n});                                                                                                                    // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"recursiveFetch.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/lib/recursiveFetch.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar applyProps = void 0;                                                                                               // 1\nmodule.watch(require(\"./applyProps.js\"), {                                                                             // 1\n    \"default\": function (v) {                                                                                          // 1\n        applyProps = v;                                                                                                // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar assembleMetadata = void 0,                                                                                         // 1\n    removeLinkStorages = void 0,                                                                                       // 1\n    storeOneResults = void 0;                                                                                          // 1\nmodule.watch(require(\"./prepareForDelivery\"), {                                                                        // 1\n    assembleMetadata: function (v) {                                                                                   // 1\n        assembleMetadata = v;                                                                                          // 1\n    },                                                                                                                 // 1\n    removeLinkStorages: function (v) {                                                                                 // 1\n        removeLinkStorages = v;                                                                                        // 1\n    },                                                                                                                 // 1\n    storeOneResults: function (v) {                                                                                    // 1\n        storeOneResults = v;                                                                                           // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar prepareForDelivery = void 0;                                                                                       // 1\nmodule.watch(require(\"./prepareForDelivery\"), {                                                                        // 1\n    \"default\": function (v) {                                                                                          // 1\n        prepareForDelivery = v;                                                                                        // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\n                                                                                                                       //\n/**                                                                                                                    // 5\n * This is always run client side to build the data graph out of client-side collections.                              //\n *                                                                                                                     //\n * @param node                                                                                                         //\n * @param parentObject                                                                                                 //\n * @returns {*}                                                                                                        //\n */function fetch(node, parentObject) {                                                                                //\n    var _applyProps = applyProps(node),                                                                                // 12\n        filters = _applyProps.filters,                                                                                 // 12\n        options = _applyProps.options;                                                                                 // 12\n                                                                                                                       //\n    var results = [];                                                                                                  // 15\n                                                                                                                       //\n    if (parentObject) {                                                                                                // 17\n        var accessor = node.linker.createLink(parentObject, node.collection);                                          // 18\n                                                                                                                       //\n        if (node.isVirtual) {                                                                                          // 20\n            var _$extend;                                                                                              // 20\n                                                                                                                       //\n            options.fields = options.fields || {};                                                                     // 21\n                                                                                                                       //\n            _.extend(options.fields, (_$extend = {}, _$extend[node.linkStorageField] = 1, _$extend));                  // 22\n        }                                                                                                              // 25\n                                                                                                                       //\n        results = accessor.find(filters, options).fetch();                                                             // 27\n    } else {                                                                                                           // 28\n        results = node.collection.find(filters, options).fetch();                                                      // 29\n    }                                                                                                                  // 30\n                                                                                                                       //\n    _.each(node.collectionNodes, function (collectionNode) {                                                           // 32\n        _.each(results, function (result) {                                                                            // 33\n            result[collectionNode.linkName] = fetch(collectionNode, result); //delete result[node.linker.linkStorageField];\n        });                                                                                                            // 36\n    });                                                                                                                // 37\n                                                                                                                       //\n    return results;                                                                                                    // 39\n}                                                                                                                      // 40\n                                                                                                                       //\nmodule.exportDefault(function (node, params) {                                                                         // 1\n    node.results = fetch(node);                                                                                        // 43\n    prepareForDelivery(node, params);                                                                                  // 45\n    return node.results;                                                                                               // 47\n});                                                                                                                    // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"nodes\":{\"collectionNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/nodes/collectionNode.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return CollectionNode;                                                                                         // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar FieldNode = void 0;                                                                                                // 1\nmodule.watch(require(\"./fieldNode.js\"), {                                                                              // 1\n    \"default\": function (v) {                                                                                          // 1\n        FieldNode = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar ReducerNode = void 0;                                                                                              // 1\nmodule.watch(require(\"./reducerNode.js\"), {                                                                            // 1\n    \"default\": function (v) {                                                                                          // 1\n        ReducerNode = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar deepClone = void 0;                                                                                                // 1\nmodule.watch(require(\"lodash.clonedeep\"), {                                                                            // 1\n    \"default\": function (v) {                                                                                          // 1\n        deepClone = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar check = void 0,                                                                                                    // 1\n    Match = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/check\"), {                                                                                // 1\n    check: function (v) {                                                                                              // 1\n        check = v;                                                                                                     // 1\n    },                                                                                                                 // 1\n    Match: function (v) {                                                                                              // 1\n        Match = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\n                                                                                                                       //\nvar CollectionNode = function () {                                                                                     //\n    function CollectionNode(collection) {                                                                              // 7\n        var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                             // 7\n        var linkName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;                       // 7\n        (0, _classCallCheck3.default)(this, CollectionNode);                                                           // 7\n                                                                                                                       //\n        if (collection && !_.isObject(body)) {                                                                         // 8\n            throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');\n        }                                                                                                              // 10\n                                                                                                                       //\n        this.body = deepClone(body);                                                                                   // 12\n        this.linkName = linkName;                                                                                      // 13\n        this.collection = collection;                                                                                  // 14\n        this.nodes = [];                                                                                               // 16\n        this.props = {};                                                                                               // 17\n        this.parent = null;                                                                                            // 18\n        this.linker = null;                                                                                            // 19\n        this.linkStorageField = null;                                                                                  // 20\n        this.scheduledForDeletion = false;                                                                             // 21\n        this.reducers = [];                                                                                            // 22\n        this.results = [];                                                                                             // 23\n        this.snapCaches = {}; // {cacheField: linkName}                                                                // 24\n                                                                                                                       //\n        this.snapCachesSingles = []; // [cacheField1, cacheField2]                                                     // 25\n    }                                                                                                                  // 26\n                                                                                                                       //\n    /**                                                                                                                // 40\n     * Adds children to itself                                                                                         //\n     *                                                                                                                 //\n     * @param node                                                                                                     //\n     * @param linker                                                                                                   //\n     */CollectionNode.prototype.add = function () {                                                                    //\n        function add(node, linker) {                                                                                   //\n            node.parent = this;                                                                                        // 47\n                                                                                                                       //\n            if (linker) {                                                                                              // 49\n                node.linker = linker;                                                                                  // 50\n                node.linkStorageField = linker.linkStorageField;                                                       // 51\n                node.isMeta = linker.isMeta();                                                                         // 52\n                node.isVirtual = linker.isVirtual();                                                                   // 53\n                node.isOneResult = linker.isOneResult();                                                               // 54\n                node.shouldCleanStorage = this._shouldCleanStorage(node);                                              // 55\n            }                                                                                                          // 56\n                                                                                                                       //\n            this.nodes.push(node);                                                                                     // 58\n        }                                                                                                              // 59\n                                                                                                                       //\n        return add;                                                                                                    //\n    }(); /**                                                                                                           //\n          * @param prop                                                                                                //\n          * @param value                                                                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.addProp = function () {                                                                   //\n        function addProp(prop, value) {                                                                                //\n            var _$extend;                                                                                              // 65\n                                                                                                                       //\n            if (prop === '$postFilter') {                                                                              // 66\n                check(value, Match.OneOf(Function, [Function]));                                                       // 67\n            }                                                                                                          // 68\n                                                                                                                       //\n            _.extend(this.props, (_$extend = {}, _$extend[prop] = value, _$extend));                                   // 70\n        }                                                                                                              // 73\n                                                                                                                       //\n        return addProp;                                                                                                //\n    }(); /**                                                                                                           //\n          * @param _node                                                                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.remove = function () {                                                                    //\n        function remove(_node) {                                                                                       //\n            this.nodes = _.filter(this.nodes, function (node) {                                                        // 79\n                return _node !== node;                                                                                 // 79\n            });                                                                                                        // 79\n        }                                                                                                              // 80\n                                                                                                                       //\n        return remove;                                                                                                 //\n    }(); /**                                                                                                           //\n          * @param filters                                                                                             //\n          * @param options                                                                                             //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.applyFields = function () {                                                               //\n        function applyFields(filters, options) {                                                                       //\n            var hasAddedAnyField = false;                                                                              // 87\n                                                                                                                       //\n            _.each(this.fieldNodes, function (n) {                                                                     // 89\n                hasAddedAnyField = true;                                                                               // 90\n                n.applyFields(options.fields);                                                                         // 91\n            }); // it will only get here if it has collectionNodes children                                            // 92\n                                                                                                                       //\n                                                                                                                       //\n            _.each(this.collectionNodes, function (collectionNode) {                                                   // 95\n                var linker = collectionNode.linker;                                                                    // 96\n                                                                                                                       //\n                if (linker && !linker.isVirtual()) {                                                                   // 98\n                    options.fields[linker.linkStorageField] = 1;                                                       // 99\n                    hasAddedAnyField = true;                                                                           // 100\n                }                                                                                                      // 101\n            }); // if he selected filters, we should automatically add those fields                                    // 102\n                                                                                                                       //\n                                                                                                                       //\n            _.each(filters, function (value, field) {                                                                  // 105\n                // special handling for the $meta filter and conditional operators                                     // 106\n                if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {                                    // 107\n                    // if the field or the parent of the field already exists, don't add it                            // 108\n                    if (!_.has(options.fields, field.split('.')[0])) {                                                 // 109\n                        hasAddedAnyField = true;                                                                       // 110\n                        options.fields[field] = 1;                                                                     // 111\n                    }                                                                                                  // 112\n                }                                                                                                      // 113\n            });                                                                                                        // 114\n                                                                                                                       //\n            if (!hasAddedAnyField) {                                                                                   // 116\n                options.fields = {                                                                                     // 117\n                    _id: 1                                                                                             // 117\n                };                                                                                                     // 117\n            }                                                                                                          // 118\n        }                                                                                                              // 119\n                                                                                                                       //\n        return applyFields;                                                                                            //\n    }(); /**                                                                                                           //\n          * @param fieldName                                                                                           //\n          * @returns {boolean}                                                                                         //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.hasField = function () {                                                                  //\n        function hasField(fieldName) {                                                                                 //\n            return !!_.find(this.fieldNodes, function (fieldNode) {                                                    // 126\n                return fieldNode.name == fieldName;                                                                    // 127\n            });                                                                                                        // 128\n        }                                                                                                              // 129\n                                                                                                                       //\n        return hasField;                                                                                               //\n    }(); /**                                                                                                           //\n          * @param fieldName                                                                                           //\n          * @returns {FieldNode}                                                                                       //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.getField = function () {                                                                  //\n        function getField(fieldName) {                                                                                 //\n            return _.find(this.fieldNodes, function (fieldNode) {                                                      // 136\n                return fieldNode.name == fieldName;                                                                    // 137\n            });                                                                                                        // 138\n        }                                                                                                              // 139\n                                                                                                                       //\n        return getField;                                                                                               //\n    }(); /**                                                                                                           //\n          * @param name                                                                                                //\n          * @returns {boolean}                                                                                         //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.hasCollectionNode = function () {                                                         //\n        function hasCollectionNode(name) {                                                                             //\n            return !!_.find(this.collectionNodes, function (node) {                                                    // 146\n                return node.linkName == name;                                                                          // 147\n            });                                                                                                        // 148\n        }                                                                                                              // 149\n                                                                                                                       //\n        return hasCollectionNode;                                                                                      //\n    }(); /**                                                                                                           //\n          * @param name                                                                                                //\n          * @returns {boolean}                                                                                         //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.hasReducerNode = function () {                                                            //\n        function hasReducerNode(name) {                                                                                //\n            return !!_.find(this.reducerNodes, function (node) {                                                       // 156\n                return node.name == name;                                                                              // 157\n            });                                                                                                        // 158\n        }                                                                                                              // 159\n                                                                                                                       //\n        return hasReducerNode;                                                                                         //\n    }(); /**                                                                                                           //\n          * @param name                                                                                                //\n          * @returns {ReducerNode}                                                                                     //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.getReducerNode = function () {                                                            //\n        function getReducerNode(name) {                                                                                //\n            return _.find(this.reducerNodes, function (node) {                                                         // 166\n                return node.name == name;                                                                              // 167\n            });                                                                                                        // 168\n        }                                                                                                              // 169\n                                                                                                                       //\n        return getReducerNode;                                                                                         //\n    }(); /**                                                                                                           //\n          * @param name                                                                                                //\n          * @returns {CollectionNode}                                                                                  //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.getCollectionNode = function () {                                                         //\n        function getCollectionNode(name) {                                                                             //\n            return _.find(this.collectionNodes, function (node) {                                                      // 176\n                return node.linkName == name;                                                                          // 177\n            });                                                                                                        // 178\n        }                                                                                                              // 179\n                                                                                                                       //\n        return getCollectionNode;                                                                                      //\n    }(); /**                                                                                                           //\n          * @returns {*}                                                                                               //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.getName = function () {                                                                   //\n        function getName() {                                                                                           //\n            return this.linkName ? this.linkName : this.collection ? this.collection._name : 'N/A';                    // 185\n        }                                                                                                              // 188\n                                                                                                                       //\n        return getName;                                                                                                //\n    }(); /**                                                                                                           //\n          * This is used for caching links                                                                             //\n          *                                                                                                            //\n          * @param cacheField                                                                                          //\n          * @param subLinkName                                                                                         //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype.snapCache = function () {                                                                 //\n        function snapCache(cacheField, subLinkName) {                                                                  //\n            this.snapCaches[cacheField] = subLinkName;                                                                 // 197\n                                                                                                                       //\n            if (this.collection.getLinker(subLinkName).isOneResult()) {                                                // 199\n                this.snapCachesSingles.push(cacheField);                                                               // 200\n            }                                                                                                          // 201\n        }                                                                                                              // 202\n                                                                                                                       //\n        return snapCache;                                                                                              //\n    }(); /**                                                                                                           //\n          * This method verifies whether to remove the linkStorageField form the results                               //\n          * unless you specify it in your query.                                                                       //\n          *                                                                                                            //\n          * @param node                                                                                                //\n          * @returns {boolean}                                                                                         //\n          * @private                                                                                                   //\n          */                                                                                                           //\n                                                                                                                       //\n    CollectionNode.prototype._shouldCleanStorage = function () {                                                       //\n        function _shouldCleanStorage(node) {                                                                           //\n            if (node.linkStorageField === '_id') {                                                                     // 213\n                return false;                                                                                          // 214\n            } else {                                                                                                   // 215\n                if (node.isVirtual) {                                                                                  // 216\n                    return !node.hasField(node.linkStorageField);                                                      // 217\n                } else {                                                                                               // 218\n                    return !this.hasField(node.linkStorageField);                                                      // 219\n                }                                                                                                      // 220\n            }                                                                                                          // 221\n        }                                                                                                              // 222\n                                                                                                                       //\n        return _shouldCleanStorage;                                                                                    //\n    }();                                                                                                               //\n                                                                                                                       //\n    (0, _createClass3.default)(CollectionNode, [{                                                                      //\n        key: \"collectionNodes\",                                                                                        //\n        get: function () {                                                                                             //\n            return _.filter(this.nodes, function (n) {                                                                 // 29\n                return n instanceof CollectionNode;                                                                    // 29\n            });                                                                                                        // 29\n        }                                                                                                              // 30\n    }, {                                                                                                               //\n        key: \"fieldNodes\",                                                                                             //\n        get: function () {                                                                                             //\n            return _.filter(this.nodes, function (n) {                                                                 // 33\n                return n instanceof FieldNode;                                                                         // 33\n            });                                                                                                        // 33\n        }                                                                                                              // 34\n    }, {                                                                                                               //\n        key: \"reducerNodes\",                                                                                           //\n        get: function () {                                                                                             //\n            return _.filter(this.nodes, function (n) {                                                                 // 37\n                return n instanceof ReducerNode;                                                                       // 37\n            });                                                                                                        // 37\n        }                                                                                                              // 38\n    }]);                                                                                                               //\n    return CollectionNode;                                                                                             //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"fieldNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/nodes/fieldNode.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return FieldNode;                                                                                              // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar FieldNode = function () {                                                                                          //\n    function FieldNode(name, body) {                                                                                   // 2\n        (0, _classCallCheck3.default)(this, FieldNode);                                                                // 2\n        this.name = name;                                                                                              // 3\n        this.body = _.isObject(body) ? 1 : body;                                                                       // 4\n        this.scheduledForDeletion = false;                                                                             // 5\n    }                                                                                                                  // 6\n                                                                                                                       //\n    FieldNode.prototype.applyFields = function () {                                                                    //\n        function applyFields(fields) {                                                                                 //\n            fields[this.name] = this.body;                                                                             // 9\n        }                                                                                                              // 10\n                                                                                                                       //\n        return applyFields;                                                                                            //\n    }();                                                                                                               //\n                                                                                                                       //\n    return FieldNode;                                                                                                  //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducerNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/nodes/reducerNode.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return ReducerNode;                                                                                            // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar ReducerNode = function () {                                                                                        //\n    function ReducerNode(name, _ref) {                                                                                 // 2\n        var body = _ref.body,                                                                                          // 2\n            reduce = _ref.reduce;                                                                                      // 2\n        (0, _classCallCheck3.default)(this, ReducerNode);                                                              // 2\n        this.name = name;                                                                                              // 3\n        this.body = body;                                                                                              // 4\n        this.reduceFunction = reduce;                                                                                  // 5\n    } /**                                                                                                              // 6\n       * When computing we also pass the parameters                                                                    //\n       *                                                                                                               //\n       * @param {*} object                                                                                             //\n       * @param {*} args                                                                                               //\n       */                                                                                                              //\n                                                                                                                       //\n    ReducerNode.prototype.compute = function () {                                                                      //\n        function compute(object) {                                                                                     //\n            var _reduce;                                                                                               // 14\n                                                                                                                       //\n            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {  // 14\n                args[_key - 1] = arguments[_key];                                                                      // 14\n            }                                                                                                          // 14\n                                                                                                                       //\n            object[this.name] = (_reduce = this.reduce).call.apply(_reduce, [this, object].concat(args));              // 15\n        }                                                                                                              // 16\n                                                                                                                       //\n        return compute;                                                                                                //\n    }();                                                                                                               //\n                                                                                                                       //\n    ReducerNode.prototype.reduce = function () {                                                                       //\n        function reduce(object) {                                                                                      //\n            var _reduceFunction;                                                                                       // 18\n                                                                                                                       //\n            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];                                                                    // 18\n            }                                                                                                          // 18\n                                                                                                                       //\n            return (_reduceFunction = this.reduceFunction).call.apply(_reduceFunction, [this, object].concat(args));   // 19\n        }                                                                                                              // 20\n                                                                                                                       //\n        return reduce;                                                                                                 //\n    }();                                                                                                               //\n                                                                                                                       //\n    return ReducerNode;                                                                                                //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"reducers\":{\"extension.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/reducers/extension.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar check = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/check\"), {                                                                                // 1\n    check: function (v) {                                                                                              // 1\n        check = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar storage = '__reducers';                                                                                            // 3\nObject.assign(Mongo.Collection.prototype, {                                                                            // 4\n    /**                                                                                                                // 5\n     * @param data                                                                                                     //\n     */addReducers: function (data) {                                                                                  //\n        var _this = this;                                                                                              // 8\n                                                                                                                       //\n        if (!this[storage]) {                                                                                          // 9\n            this[storage] = {};                                                                                        // 10\n        }                                                                                                              // 11\n                                                                                                                       //\n        _.each(data, function (reducerConfig, reducerName) {                                                           // 13\n            var _$extend;                                                                                              // 13\n                                                                                                                       //\n            if (!_this[reducerConfig]) {                                                                               // 14\n                _this[reducerConfig] = {};                                                                             // 15\n            }                                                                                                          // 16\n                                                                                                                       //\n            if (_this.getLinker(reducerName)) {                                                                        // 18\n                throw new Meteor.Error(\"You cannot add the reducer with name: \" + reducerName + \" because it is already defined as a link in \" + _this._name + \" collection\");\n            }                                                                                                          // 20\n                                                                                                                       //\n            if (_this[reducerConfig][reducerName]) {                                                                   // 22\n                throw new Meteor.Error(\"You cannot add the reducer with name: \" + reducerName + \" because it was already added to \" + _this._name + \" collection\");\n            }                                                                                                          // 24\n                                                                                                                       //\n            check(reducerConfig, {                                                                                     // 26\n                body: Object,                                                                                          // 27\n                reduce: Function                                                                                       // 28\n            });                                                                                                        // 26\n                                                                                                                       //\n            _.extend(_this[storage], (_$extend = {}, _$extend[reducerName] = reducerConfig, _$extend));                // 31\n        });                                                                                                            // 34\n    },                                                                                                                 // 35\n    /**                                                                                                                // 37\n     * @param name                                                                                                     //\n     * @returns {*}                                                                                                    //\n     */getReducer: function (name) {                                                                                   //\n        if (this[storage]) {                                                                                           // 42\n            return this[storage][name];                                                                                // 43\n        }                                                                                                              // 44\n    }                                                                                                                  // 45\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"applyReducers.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/reducers/lib/applyReducers.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return applyReducers;                                                                                          // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nfunction applyReducers(root, params) {                                                                                 // 1\n    _.each(root.collectionNodes, function (node) {                                                                     // 2\n        applyReducers(node, params);                                                                                   // 3\n    });                                                                                                                // 4\n                                                                                                                       //\n    _.each(root.reducerNodes, function (reducerNode) {                                                                 // 6\n        root.results.forEach(function (result) {                                                                       // 7\n            reducerNode.compute(result, params);                                                                       // 8\n        });                                                                                                            // 9\n    });                                                                                                                // 10\n}                                                                                                                      // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cleanReducerLeftovers.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/reducers/lib/cleanReducerLeftovers.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return cleanReducerLeftovers;                                                                                  // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nfunction cleanReducerLeftovers(root) {                                                                                 // 4\n    _.each(root.collectionNodes, function (node) {                                                                     // 5\n        if (node.scheduledForDeletion) {                                                                               // 6\n            root.results.forEach(function (result) {                                                                   // 7\n                delete result[node.linkName];                                                                          // 8\n            });                                                                                                        // 9\n        }                                                                                                              // 10\n    });                                                                                                                // 11\n                                                                                                                       //\n    _.each(root.collectionNodes, function (node) {                                                                     // 13\n        cleanReducerLeftovers(node);                                                                                   // 14\n    });                                                                                                                // 15\n                                                                                                                       //\n    _.each(root.fieldNodes, function (node) {                                                                          // 17\n        if (node.scheduledForDeletion) {                                                                               // 18\n            cleanNestedFields(node.name.split('.'), root.results);                                                     // 19\n        }                                                                                                              // 20\n    });                                                                                                                // 21\n                                                                                                                       //\n    _.each(root.reducerNodes, function (node) {                                                                        // 23\n        if (node.scheduledForDeletion) {                                                                               // 24\n            root.results.forEach(function (result) {                                                                   // 25\n                delete result[node.name];                                                                              // 26\n            });                                                                                                        // 27\n        }                                                                                                              // 28\n    });                                                                                                                // 29\n}                                                                                                                      // 30\n                                                                                                                       //\n// if we store a field like: 'profile.firstName'                                                                       // 32\n// then we need to delete profile: { firstName }                                                                       // 33\n// if profile will have empty keys, we need to delete profile.                                                         // 34\n/**                                                                                                                    // 36\n *                                                                                                                     //\n * @param parts                                                                                                        //\n * @param results                                                                                                      //\n */function cleanNestedFields(parts, results) {                                                                        //\n    var fieldName = parts[0];                                                                                          // 42\n                                                                                                                       //\n    if (parts.length === 1) {                                                                                          // 43\n        results.forEach(function (result) {                                                                            // 45\n            if (fieldName !== '_id') {                                                                                 // 46\n                delete result[fieldName];                                                                              // 47\n            }                                                                                                          // 48\n        });                                                                                                            // 49\n        return;                                                                                                        // 51\n    }                                                                                                                  // 52\n                                                                                                                       //\n    parts.shift();                                                                                                     // 54\n    cleanNestedFields(parts, results.map(function (result) {                                                           // 55\n        return result[fieldName];                                                                                      // 55\n    }));                                                                                                               // 55\n    results.forEach(function (result) {                                                                                // 57\n        if (_.keys(result[fieldName]).length === 0) {                                                                  // 58\n            if (fieldName !== '_id') {                                                                                 // 59\n                delete result[fieldName];                                                                              // 60\n            }                                                                                                          // 61\n        }                                                                                                              // 62\n    });                                                                                                                // 63\n}                                                                                                                      // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"createReducers.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/reducers/lib/createReducers.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return addReducers;                                                                                            // 1\n    },                                                                                                                 // 1\n    handleAddElement: function () {                                                                                    // 1\n        return handleAddElement;                                                                                       // 1\n    },                                                                                                                 // 1\n    handleAddReducer: function () {                                                                                    // 1\n        return handleAddReducer;                                                                                       // 1\n    },                                                                                                                 // 1\n    handleAddLink: function () {                                                                                       // 1\n        return handleAddLink;                                                                                          // 1\n    },                                                                                                                 // 1\n    handleAddField: function () {                                                                                      // 1\n        return handleAddField;                                                                                         // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar dot = void 0;                                                                                                      // 1\nmodule.watch(require(\"dot-object\"), {                                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        dot = v;                                                                                                       // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar createNodes = void 0;                                                                                              // 1\nmodule.watch(require(\"../../lib/createGraph\"), {                                                                       // 1\n    createNodes: function (v) {                                                                                        // 1\n        createNodes = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar CollectionNode = void 0;                                                                                           // 1\nmodule.watch(require(\"../../nodes/collectionNode\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                          // 1\n        CollectionNode = v;                                                                                            // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nvar FieldNode = void 0;                                                                                                // 1\nmodule.watch(require(\"../../nodes/fieldNode\"), {                                                                       // 1\n    \"default\": function (v) {                                                                                          // 1\n        FieldNode = v;                                                                                                 // 1\n    }                                                                                                                  // 1\n}, 3);                                                                                                                 // 1\nvar ReducerNode = void 0;                                                                                              // 1\nmodule.watch(require(\"../../nodes/reducerNode\"), {                                                                     // 1\n    \"default\": function (v) {                                                                                          // 1\n        ReducerNode = v;                                                                                               // 1\n    }                                                                                                                  // 1\n}, 4);                                                                                                                 // 1\nvar embedReducerWithLink = void 0;                                                                                     // 1\nmodule.watch(require(\"./embedReducerWithLink\"), {                                                                      // 1\n    \"default\": function (v) {                                                                                          // 1\n        embedReducerWithLink = v;                                                                                      // 1\n    }                                                                                                                  // 1\n}, 5);                                                                                                                 // 1\n                                                                                                                       //\nfunction addReducers(root) {                                                                                           // 8\n    // we add reducers last, after we have added all the fields.                                                       // 9\n    root.reducerNodes.forEach(function (reducer) {                                                                     // 10\n        _.each(reducer.body, function (body, fieldName) {                                                              // 11\n            handleAddElement(root, fieldName, body);                                                                   // 12\n        });                                                                                                            // 13\n    });                                                                                                                // 14\n}                                                                                                                      // 15\n                                                                                                                       //\nfunction handleAddElement(root, fieldName, body) {                                                                     // 22\n    // if it's a link                                                                                                  // 23\n    var collection = root.collection;                                                                                  // 24\n    var linker = collection.getLinker(fieldName);                                                                      // 25\n                                                                                                                       //\n    if (linker) {                                                                                                      // 26\n        return handleAddLink(fieldName, body, root, linker);                                                           // 27\n    }                                                                                                                  // 28\n                                                                                                                       //\n    var reducer = collection.getReducer(fieldName);                                                                    // 30\n                                                                                                                       //\n    if (reducer) {                                                                                                     // 31\n        return handleAddReducer(fieldName, reducer, root);                                                             // 32\n    } // we assume it's a field in this case                                                                           // 33\n                                                                                                                       //\n                                                                                                                       //\n    return handleAddField(fieldName, body, root);                                                                      // 36\n}                                                                                                                      // 37\n                                                                                                                       //\nfunction handleAddReducer(fieldName, reducer, root) {                                                                  // 44\n    if (!root.hasReducerNode(fieldName)) {                                                                             // 45\n        var reducerNode = new ReducerNode(fieldName, reducer);                                                         // 46\n        root.add(reducerNode);                                                                                         // 47\n        reducerNode.scheduledForDeletion = true;                                                                       // 48\n                                                                                                                       //\n        _.each(reducer.body, function (body, fieldName) {                                                              // 50\n            handleAddElement(root, fieldName, body);                                                                   // 51\n        });                                                                                                            // 52\n    }                                                                                                                  // 53\n}                                                                                                                      // 54\n                                                                                                                       //\nfunction handleAddLink(fieldName, body, root, linker) {                                                                // 62\n    if (root.hasCollectionNode(fieldName)) {                                                                           // 63\n        var collectionNode = root.getCollectionNode(fieldName);                                                        // 64\n        embedReducerWithLink(body, collectionNode);                                                                    // 66\n    } else {                                                                                                           // 67\n        // add                                                                                                         // 68\n        var _collectionNode = new CollectionNode(linker.getLinkedCollection(), body, fieldName);                       // 69\n                                                                                                                       //\n        _collectionNode.scheduledForDeletion = true;                                                                   // 70\n        root.add(_collectionNode, linker);                                                                             // 71\n        createNodes(_collectionNode);                                                                                  // 73\n    }                                                                                                                  // 74\n}                                                                                                                      // 75\n                                                                                                                       //\nfunction handleAddField(fieldName, body, root) {                                                                       // 82\n    if (_.isObject(body)) {                                                                                            // 83\n        var _dot$dot;                                                                                                  // 83\n                                                                                                                       //\n        // if reducer specifies a nested field                                                                         // 84\n        var dots = dot.dot((_dot$dot = {}, _dot$dot[fieldName] = body, _dot$dot));                                     // 85\n                                                                                                                       //\n        _.each(dots, function (value, key) {                                                                           // 89\n            if (!root.hasField(key)) {                                                                                 // 90\n                var fieldNode = new FieldNode(key, value);                                                             // 91\n                fieldNode.scheduledForDeletion = true;                                                                 // 92\n                root.add(fieldNode);                                                                                   // 94\n            }                                                                                                          // 95\n        });                                                                                                            // 96\n    } else {                                                                                                           // 97\n        // if reducer does not specify a nested field, and the field does not exist.                                   // 98\n        if (!root.hasField(fieldName)) {                                                                               // 99\n            var fieldNode = new FieldNode(fieldName, body);                                                            // 100\n            fieldNode.scheduledForDeletion = true;                                                                     // 101\n            root.add(fieldNode);                                                                                       // 103\n        }                                                                                                              // 104\n    }                                                                                                                  // 105\n}                                                                                                                      // 106\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"embedReducerWithLink.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cultofcoders_grapher/lib/query/reducers/lib/embedReducerWithLink.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n    \"default\": function () {                                                                                           // 1\n        return embedReducerWithLink;                                                                                   // 1\n    }                                                                                                                  // 1\n});                                                                                                                    // 1\nvar handleAddField = void 0,                                                                                           // 1\n    handleAddElement = void 0,                                                                                         // 1\n    handleAddReducer = void 0;                                                                                         // 1\nmodule.watch(require(\"./createReducers\"), {                                                                            // 1\n    handleAddField: function (v) {                                                                                     // 1\n        handleAddField = v;                                                                                            // 1\n    },                                                                                                                 // 1\n    handleAddElement: function (v) {                                                                                   // 1\n        handleAddElement = v;                                                                                          // 1\n    },                                                                                                                 // 1\n    handleAddReducer: function (v) {                                                                                   // 1\n        handleAddReducer = v;                                                                                          // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nfunction embedReducerWithLink(reducerBody, collectionNode) {                                                           // 8\n    _.each(reducerBody, function (value, key) {                                                                        // 9\n        var collection = collectionNode.collection;                                                                    // 10\n                                                                                                                       //\n        if (_.isObject(value)) {                                                                                       // 12\n            // nested field or link                                                                                    // 13\n            if (collectionNode.body[key]) {                                                                            // 14\n                // if it exists                                                                                        // 15\n                var linker = collection.getLinker(key); // if it's a link                                              // 16\n                                                                                                                       //\n                if (linker) {                                                                                          // 19\n                    embedReducerWithLink(value, collectionNode.getCollectionNode(key));                                // 20\n                    return;                                                                                            // 21\n                }                                                                                                      // 22\n                                                                                                                       //\n                handleAddField(key, value, collectionNode);                                                            // 24\n            } else {                                                                                                   // 25\n                // does not exist, so it may be a link/reducer/field                                                   // 26\n                handleAddElement(root, key, value);                                                                    // 27\n            }                                                                                                          // 28\n        } else {                                                                                                       // 29\n            // if this field or other reducer exists within the collection                                             // 30\n            if (!collectionNode.body[key]) {                                                                           // 32\n                // can only be field or another reducer for this.                                                      // 33\n                var reducer = collection.getReducer(key);                                                              // 34\n                                                                                                                       //\n                if (reducer) {                                                                                         // 35\n                    // if it's another reducer                                                                         // 36\n                    return handleAddReducer(key, reducer, collectionNode);                                             // 37\n                }                                                                                                      // 38\n                                                                                                                       //\n                return handleAddField(key, value, collectionNode);                                                     // 40\n            }                                                                                                          // 41\n        }                                                                                                              // 42\n    });                                                                                                                // 43\n}                                                                                                                      // 44\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},\"node_modules\":{\"lodash.clonedeep\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/cultofcoders_grapher/node_modules/lodash.clonedeep/index.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as the size to enable large array optimizations. */                                                           // 10\nvar LARGE_ARRAY_SIZE = 200;                                                                                            // 11\n                                                                                                                       // 12\n/** Used to stand-in for `undefined` hash values. */                                                                   // 13\nvar HASH_UNDEFINED = \"__lodash_hash_undefined__\";                                                                      // 14\n                                                                                                                       // 15\n/** Used as references for various `Number` constants. */                                                              // 16\nvar MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 17\n                                                                                                                       // 18\n/** `Object#toString` result references. */                                                                            // 19\nvar argsTag = \"[object Arguments]\",                                                                                    // 20\n    arrayTag = \"[object Array]\",                                                                                       // 21\n    boolTag = \"[object Boolean]\",                                                                                      // 22\n    dateTag = \"[object Date]\",                                                                                         // 23\n    errorTag = \"[object Error]\",                                                                                       // 24\n    funcTag = \"[object Function]\",                                                                                     // 25\n    genTag = \"[object GeneratorFunction]\",                                                                             // 26\n    mapTag = \"[object Map]\",                                                                                           // 27\n    numberTag = \"[object Number]\",                                                                                     // 28\n    objectTag = \"[object Object]\",                                                                                     // 29\n    promiseTag = \"[object Promise]\",                                                                                   // 30\n    regexpTag = \"[object RegExp]\",                                                                                     // 31\n    setTag = \"[object Set]\",                                                                                           // 32\n    stringTag = \"[object String]\",                                                                                     // 33\n    symbolTag = \"[object Symbol]\",                                                                                     // 34\n    weakMapTag = \"[object WeakMap]\";                                                                                   // 35\n                                                                                                                       // 36\nvar arrayBufferTag = \"[object ArrayBuffer]\",                                                                           // 37\n    dataViewTag = \"[object DataView]\",                                                                                 // 38\n    float32Tag = \"[object Float32Array]\",                                                                              // 39\n    float64Tag = \"[object Float64Array]\",                                                                              // 40\n    int8Tag = \"[object Int8Array]\",                                                                                    // 41\n    int16Tag = \"[object Int16Array]\",                                                                                  // 42\n    int32Tag = \"[object Int32Array]\",                                                                                  // 43\n    uint8Tag = \"[object Uint8Array]\",                                                                                  // 44\n    uint8ClampedTag = \"[object Uint8ClampedArray]\",                                                                    // 45\n    uint16Tag = \"[object Uint16Array]\",                                                                                // 46\n    uint32Tag = \"[object Uint32Array]\";                                                                                // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * Used to match `RegExp`                                                                                              // 50\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).                                      // 51\n */                                                                                                                    // 52\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;                                                                              // 53\n                                                                                                                       // 54\n/** Used to match `RegExp` flags from their coerced string values. */                                                  // 55\nvar reFlags = /\\w*$/;                                                                                                  // 56\n                                                                                                                       // 57\n/** Used to detect host constructors (Safari). */                                                                      // 58\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                      // 59\n                                                                                                                       // 60\n/** Used to detect unsigned integer values. */                                                                         // 61\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;                                                                                     // 62\n                                                                                                                       // 63\n/** Used to identify `toStringTag` values supported by `_.clone`. */                                                   // 64\nvar cloneableTags = {};                                                                                                // 65\ncloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[                                                      // 66\n    arrayBufferTag                                                                                                     // 67\n] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[                                               // 68\n    dateTag                                                                                                            // 69\n] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[                                             // 70\n    int8Tag                                                                                                            // 71\n] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[                                                 // 72\n    mapTag                                                                                                             // 73\n] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[                                               // 74\n    regexpTag                                                                                                          // 75\n] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[                                                  // 76\n    symbolTag                                                                                                          // 77\n] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[                                          // 78\n    uint16Tag                                                                                                          // 79\n] = cloneableTags[uint32Tag] = true;                                                                                   // 80\ncloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[                                                      // 81\n    weakMapTag                                                                                                         // 82\n] = false;                                                                                                             // 83\n                                                                                                                       // 84\n/** Detect free variable `global` from Node.js. */                                                                     // 85\nvar freeGlobal =                                                                                                       // 86\n    typeof global == \"object\" && global && global.Object === Object && global;                                         // 87\n                                                                                                                       // 88\n/** Detect free variable `self`. */                                                                                    // 89\nvar freeSelf =                                                                                                         // 90\n    typeof self == \"object\" && self && self.Object === Object && self;                                                 // 91\n                                                                                                                       // 92\n/** Used as a reference to the global object. */                                                                       // 93\nvar root = freeGlobal || freeSelf || Function(\"return this\")();                                                        // 94\n                                                                                                                       // 95\n/** Detect free variable `exports`. */                                                                                 // 96\nvar freeExports =                                                                                                      // 97\n    typeof exports == \"object\" && exports && !exports.nodeType && exports;                                             // 98\n                                                                                                                       // 99\n/** Detect free variable `module`. */                                                                                  // 100\nvar freeModule =                                                                                                       // 101\n    freeExports &&                                                                                                     // 102\n    typeof module == \"object\" &&                                                                                       // 103\n    module &&                                                                                                          // 104\n    !module.nodeType &&                                                                                                // 105\n    module;                                                                                                            // 106\n                                                                                                                       // 107\n/** Detect the popular CommonJS extension `module.exports`. */                                                         // 108\nvar moduleExports = freeModule && freeModule.exports === freeExports;                                                  // 109\n                                                                                                                       // 110\n/**                                                                                                                    // 111\n * Adds the key-value `pair` to `map`.                                                                                 // 112\n *                                                                                                                     // 113\n * @private                                                                                                            // 114\n * @param {Object} map The map to modify.                                                                              // 115\n * @param {Array} pair The key-value pair to add.                                                                      // 116\n * @returns {Object} Returns `map`.                                                                                    // 117\n */                                                                                                                    // 118\nfunction addMapEntry(map, pair) {                                                                                      // 119\n    // Don't return `map.set` because it's not chainable in IE 11.                                                     // 120\n    map.set(pair[0], pair[1]);                                                                                         // 121\n    return map;                                                                                                        // 122\n}                                                                                                                      // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * Adds `value` to `set`.                                                                                              // 126\n *                                                                                                                     // 127\n * @private                                                                                                            // 128\n * @param {Object} set The set to modify.                                                                              // 129\n * @param {*} value The value to add.                                                                                  // 130\n * @returns {Object} Returns `set`.                                                                                    // 131\n */                                                                                                                    // 132\nfunction addSetEntry(set, value) {                                                                                     // 133\n    // Don't return `set.add` because it's not chainable in IE 11.                                                     // 134\n    set.add(value);                                                                                                    // 135\n    return set;                                                                                                        // 136\n}                                                                                                                      // 137\n                                                                                                                       // 138\n/**                                                                                                                    // 139\n * A specialized version of `_.forEach` for arrays without support for                                                 // 140\n * iteratee shorthands.                                                                                                // 141\n *                                                                                                                     // 142\n * @private                                                                                                            // 143\n * @param {Array} [array] The array to iterate over.                                                                   // 144\n * @param {Function} iteratee The function invoked per iteration.                                                      // 145\n * @returns {Array} Returns `array`.                                                                                   // 146\n */                                                                                                                    // 147\nfunction arrayEach(array, iteratee) {                                                                                  // 148\n    var index = -1,                                                                                                    // 149\n        length = array ? array.length : 0;                                                                             // 150\n                                                                                                                       // 151\n    while (++index < length) {                                                                                         // 152\n        if (iteratee(array[index], index, array) === false) {                                                          // 153\n            break;                                                                                                     // 154\n        }                                                                                                              // 155\n    }                                                                                                                  // 156\n    return array;                                                                                                      // 157\n}                                                                                                                      // 158\n                                                                                                                       // 159\n/**                                                                                                                    // 160\n * Appends the elements of `values` to `array`.                                                                        // 161\n *                                                                                                                     // 162\n * @private                                                                                                            // 163\n * @param {Array} array The array to modify.                                                                           // 164\n * @param {Array} values The values to append.                                                                         // 165\n * @returns {Array} Returns `array`.                                                                                   // 166\n */                                                                                                                    // 167\nfunction arrayPush(array, values) {                                                                                    // 168\n    var index = -1,                                                                                                    // 169\n        length = values.length,                                                                                        // 170\n        offset = array.length;                                                                                         // 171\n                                                                                                                       // 172\n    while (++index < length) {                                                                                         // 173\n        array[offset + index] = values[index];                                                                         // 174\n    }                                                                                                                  // 175\n    return array;                                                                                                      // 176\n}                                                                                                                      // 177\n                                                                                                                       // 178\n/**                                                                                                                    // 179\n * A specialized version of `_.reduce` for arrays without support for                                                  // 180\n * iteratee shorthands.                                                                                                // 181\n *                                                                                                                     // 182\n * @private                                                                                                            // 183\n * @param {Array} [array] The array to iterate over.                                                                   // 184\n * @param {Function} iteratee The function invoked per iteration.                                                      // 185\n * @param {*} [accumulator] The initial value.                                                                         // 186\n * @param {boolean} [initAccum] Specify using the first element of `array` as                                          // 187\n *  the initial value.                                                                                                 // 188\n * @returns {*} Returns the accumulated value.                                                                         // 189\n */                                                                                                                    // 190\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {                                                        // 191\n    var index = -1,                                                                                                    // 192\n        length = array ? array.length : 0;                                                                             // 193\n                                                                                                                       // 194\n    if (initAccum && length) {                                                                                         // 195\n        accumulator = array[++index];                                                                                  // 196\n    }                                                                                                                  // 197\n    while (++index < length) {                                                                                         // 198\n        accumulator = iteratee(accumulator, array[index], index, array);                                               // 199\n    }                                                                                                                  // 200\n    return accumulator;                                                                                                // 201\n}                                                                                                                      // 202\n                                                                                                                       // 203\n/**                                                                                                                    // 204\n * The base implementation of `_.times` without support for iteratee shorthands                                        // 205\n * or max array length checks.                                                                                         // 206\n *                                                                                                                     // 207\n * @private                                                                                                            // 208\n * @param {number} n The number of times to invoke `iteratee`.                                                         // 209\n * @param {Function} iteratee The function invoked per iteration.                                                      // 210\n * @returns {Array} Returns the array of results.                                                                      // 211\n */                                                                                                                    // 212\nfunction baseTimes(n, iteratee) {                                                                                      // 213\n    var index = -1,                                                                                                    // 214\n        result = Array(n);                                                                                             // 215\n                                                                                                                       // 216\n    while (++index < n) {                                                                                              // 217\n        result[index] = iteratee(index);                                                                               // 218\n    }                                                                                                                  // 219\n    return result;                                                                                                     // 220\n}                                                                                                                      // 221\n                                                                                                                       // 222\n/**                                                                                                                    // 223\n * Gets the value at `key` of `object`.                                                                                // 224\n *                                                                                                                     // 225\n * @private                                                                                                            // 226\n * @param {Object} [object] The object to query.                                                                       // 227\n * @param {string} key The key of the property to get.                                                                 // 228\n * @returns {*} Returns the property value.                                                                            // 229\n */                                                                                                                    // 230\nfunction getValue(object, key) {                                                                                       // 231\n    return object == null ? undefined : object[key];                                                                   // 232\n}                                                                                                                      // 233\n                                                                                                                       // 234\n/**                                                                                                                    // 235\n * Checks if `value` is a host object in IE < 9.                                                                       // 236\n *                                                                                                                     // 237\n * @private                                                                                                            // 238\n * @param {*} value The value to check.                                                                                // 239\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                        // 240\n */                                                                                                                    // 241\nfunction isHostObject(value) {                                                                                         // 242\n    // Many host objects are `Object` objects that can coerce to strings                                               // 243\n    // despite having improperly defined `toString` methods.                                                           // 244\n    var result = false;                                                                                                // 245\n    if (value != null && typeof value.toString != \"function\") {                                                        // 246\n        try {                                                                                                          // 247\n            result = !!(value + \"\");                                                                                   // 248\n        } catch (e) {}                                                                                                 // 249\n    }                                                                                                                  // 250\n    return result;                                                                                                     // 251\n}                                                                                                                      // 252\n                                                                                                                       // 253\n/**                                                                                                                    // 254\n * Converts `map` to its key-value pairs.                                                                              // 255\n *                                                                                                                     // 256\n * @private                                                                                                            // 257\n * @param {Object} map The map to convert.                                                                             // 258\n * @returns {Array} Returns the key-value pairs.                                                                       // 259\n */                                                                                                                    // 260\nfunction mapToArray(map) {                                                                                             // 261\n    var index = -1,                                                                                                    // 262\n        result = Array(map.size);                                                                                      // 263\n                                                                                                                       // 264\n    map.forEach(function(value, key) {                                                                                 // 265\n        result[++index] = [key, value];                                                                                // 266\n    });                                                                                                                // 267\n    return result;                                                                                                     // 268\n}                                                                                                                      // 269\n                                                                                                                       // 270\n/**                                                                                                                    // 271\n * Creates a unary function that invokes `func` with its argument transformed.                                         // 272\n *                                                                                                                     // 273\n * @private                                                                                                            // 274\n * @param {Function} func The function to wrap.                                                                        // 275\n * @param {Function} transform The argument transform.                                                                 // 276\n * @returns {Function} Returns the new function.                                                                       // 277\n */                                                                                                                    // 278\nfunction overArg(func, transform) {                                                                                    // 279\n    return function(arg) {                                                                                             // 280\n        return func(transform(arg));                                                                                   // 281\n    };                                                                                                                 // 282\n}                                                                                                                      // 283\n                                                                                                                       // 284\n/**                                                                                                                    // 285\n * Converts `set` to an array of its values.                                                                           // 286\n *                                                                                                                     // 287\n * @private                                                                                                            // 288\n * @param {Object} set The set to convert.                                                                             // 289\n * @returns {Array} Returns the values.                                                                                // 290\n */                                                                                                                    // 291\nfunction setToArray(set) {                                                                                             // 292\n    var index = -1,                                                                                                    // 293\n        result = Array(set.size);                                                                                      // 294\n                                                                                                                       // 295\n    set.forEach(function(value) {                                                                                      // 296\n        result[++index] = value;                                                                                       // 297\n    });                                                                                                                // 298\n    return result;                                                                                                     // 299\n}                                                                                                                      // 300\n                                                                                                                       // 301\n/** Used for built-in method references. */                                                                            // 302\nvar arrayProto = Array.prototype,                                                                                      // 303\n    funcProto = Function.prototype,                                                                                    // 304\n    objectProto = Object.prototype;                                                                                    // 305\n                                                                                                                       // 306\n/** Used to detect overreaching core-js shims. */                                                                      // 307\nvar coreJsData = root[\"__core-js_shared__\"];                                                                           // 308\n                                                                                                                       // 309\n/** Used to detect methods masquerading as native. */                                                                  // 310\nvar maskSrcKey = (function() {                                                                                         // 311\n    var uid = /[^.]+$/.exec(                                                                                           // 312\n        (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || \"\"                                              // 313\n    );                                                                                                                 // 314\n    return uid ? \"Symbol(src)_1.\" + uid : \"\";                                                                          // 315\n})();                                                                                                                  // 316\n                                                                                                                       // 317\n/** Used to resolve the decompiled source of functions. */                                                             // 318\nvar funcToString = funcProto.toString;                                                                                 // 319\n                                                                                                                       // 320\n/** Used to check objects for own properties. */                                                                       // 321\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 322\n                                                                                                                       // 323\n/**                                                                                                                    // 324\n * Used to resolve the                                                                                                 // 325\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 326\n * of values.                                                                                                          // 327\n */                                                                                                                    // 328\nvar objectToString = objectProto.toString;                                                                             // 329\n                                                                                                                       // 330\n/** Used to detect if a method is native. */                                                                           // 331\nvar reIsNative = RegExp(                                                                                               // 332\n    \"^\" +                                                                                                              // 333\n        funcToString                                                                                                   // 334\n            .call(hasOwnProperty)                                                                                      // 335\n            .replace(reRegExpChar, \"\\\\$&\")                                                                             // 336\n            .replace(                                                                                                  // 337\n                /hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,                                              // 338\n                \"$1.*?\"                                                                                                // 339\n            ) +                                                                                                        // 340\n        \"$\"                                                                                                            // 341\n);                                                                                                                     // 342\n                                                                                                                       // 343\n/** Built-in value references. */                                                                                      // 344\nvar Buffer = moduleExports ? root.Buffer : undefined,                                                                  // 345\n    Symbol = root.Symbol,                                                                                              // 346\n    Uint8Array = root.Uint8Array,                                                                                      // 347\n    getPrototype = overArg(Object.getPrototypeOf, Object),                                                             // 348\n    objectCreate = Object.create,                                                                                      // 349\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                           // 350\n    splice = arrayProto.splice;                                                                                        // 351\n                                                                                                                       // 352\n/* Built-in method references for those with the same name as other `lodash` methods. */                               // 353\nvar nativeGetSymbols = Object.getOwnPropertySymbols,                                                                   // 354\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,                                                             // 355\n    nativeKeys = overArg(Object.keys, Object);                                                                         // 356\n                                                                                                                       // 357\n/* Built-in method references that are verified to be native. */                                                       // 358\nvar DataView = getNative(root, \"DataView\"),                                                                            // 359\n    Map = getNative(root, \"Map\"),                                                                                      // 360\n    Promise = getNative(root, \"Promise\"),                                                                              // 361\n    Set = getNative(root, \"Set\"),                                                                                      // 362\n    WeakMap = getNative(root, \"WeakMap\"),                                                                              // 363\n    nativeCreate = getNative(Object, \"create\");                                                                        // 364\n                                                                                                                       // 365\n/** Used to detect maps, sets, and weakmaps. */                                                                        // 366\nvar dataViewCtorString = toSource(DataView),                                                                           // 367\n    mapCtorString = toSource(Map),                                                                                     // 368\n    promiseCtorString = toSource(Promise),                                                                             // 369\n    setCtorString = toSource(Set),                                                                                     // 370\n    weakMapCtorString = toSource(WeakMap);                                                                             // 371\n                                                                                                                       // 372\n/** Used to convert symbols to primitives and strings. */                                                              // 373\nvar symbolProto = Symbol ? Symbol.prototype : undefined,                                                               // 374\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;                                                     // 375\n                                                                                                                       // 376\n/**                                                                                                                    // 377\n * Creates a hash object.                                                                                              // 378\n *                                                                                                                     // 379\n * @private                                                                                                            // 380\n * @constructor                                                                                                        // 381\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 382\n */                                                                                                                    // 383\nfunction Hash(entries) {                                                                                               // 384\n    var index = -1,                                                                                                    // 385\n        length = entries ? entries.length : 0;                                                                         // 386\n                                                                                                                       // 387\n    this.clear();                                                                                                      // 388\n    while (++index < length) {                                                                                         // 389\n        var entry = entries[index];                                                                                    // 390\n        this.set(entry[0], entry[1]);                                                                                  // 391\n    }                                                                                                                  // 392\n}                                                                                                                      // 393\n                                                                                                                       // 394\n/**                                                                                                                    // 395\n * Removes all key-value entries from the hash.                                                                        // 396\n *                                                                                                                     // 397\n * @private                                                                                                            // 398\n * @name clear                                                                                                         // 399\n * @memberOf Hash                                                                                                      // 400\n */                                                                                                                    // 401\nfunction hashClear() {                                                                                                 // 402\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};                                                            // 403\n}                                                                                                                      // 404\n                                                                                                                       // 405\n/**                                                                                                                    // 406\n * Removes `key` and its value from the hash.                                                                          // 407\n *                                                                                                                     // 408\n * @private                                                                                                            // 409\n * @name delete                                                                                                        // 410\n * @memberOf Hash                                                                                                      // 411\n * @param {Object} hash The hash to modify.                                                                            // 412\n * @param {string} key The key of the value to remove.                                                                 // 413\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 414\n */                                                                                                                    // 415\nfunction hashDelete(key) {                                                                                             // 416\n    return this.has(key) && delete this.__data__[key];                                                                 // 417\n}                                                                                                                      // 418\n                                                                                                                       // 419\n/**                                                                                                                    // 420\n * Gets the hash value for `key`.                                                                                      // 421\n *                                                                                                                     // 422\n * @private                                                                                                            // 423\n * @name get                                                                                                           // 424\n * @memberOf Hash                                                                                                      // 425\n * @param {string} key The key of the value to get.                                                                    // 426\n * @returns {*} Returns the entry value.                                                                               // 427\n */                                                                                                                    // 428\nfunction hashGet(key) {                                                                                                // 429\n    var data = this.__data__;                                                                                          // 430\n    if (nativeCreate) {                                                                                                // 431\n        var result = data[key];                                                                                        // 432\n        return result === HASH_UNDEFINED ? undefined : result;                                                         // 433\n    }                                                                                                                  // 434\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;                                                     // 435\n}                                                                                                                      // 436\n                                                                                                                       // 437\n/**                                                                                                                    // 438\n * Checks if a hash value for `key` exists.                                                                            // 439\n *                                                                                                                     // 440\n * @private                                                                                                            // 441\n * @name has                                                                                                           // 442\n * @memberOf Hash                                                                                                      // 443\n * @param {string} key The key of the entry to check.                                                                  // 444\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 445\n */                                                                                                                    // 446\nfunction hashHas(key) {                                                                                                // 447\n    var data = this.__data__;                                                                                          // 448\n    return nativeCreate                                                                                                // 449\n        ? data[key] !== undefined                                                                                      // 450\n        : hasOwnProperty.call(data, key);                                                                              // 451\n}                                                                                                                      // 452\n                                                                                                                       // 453\n/**                                                                                                                    // 454\n * Sets the hash `key` to `value`.                                                                                     // 455\n *                                                                                                                     // 456\n * @private                                                                                                            // 457\n * @name set                                                                                                           // 458\n * @memberOf Hash                                                                                                      // 459\n * @param {string} key The key of the value to set.                                                                    // 460\n * @param {*} value The value to set.                                                                                  // 461\n * @returns {Object} Returns the hash instance.                                                                        // 462\n */                                                                                                                    // 463\nfunction hashSet(key, value) {                                                                                         // 464\n    var data = this.__data__;                                                                                          // 465\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;                                          // 466\n    return this;                                                                                                       // 467\n}                                                                                                                      // 468\n                                                                                                                       // 469\n// Add methods to `Hash`.                                                                                              // 470\nHash.prototype.clear = hashClear;                                                                                      // 471\nHash.prototype[\"delete\"] = hashDelete;                                                                                 // 472\nHash.prototype.get = hashGet;                                                                                          // 473\nHash.prototype.has = hashHas;                                                                                          // 474\nHash.prototype.set = hashSet;                                                                                          // 475\n                                                                                                                       // 476\n/**                                                                                                                    // 477\n * Creates an list cache object.                                                                                       // 478\n *                                                                                                                     // 479\n * @private                                                                                                            // 480\n * @constructor                                                                                                        // 481\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 482\n */                                                                                                                    // 483\nfunction ListCache(entries) {                                                                                          // 484\n    var index = -1,                                                                                                    // 485\n        length = entries ? entries.length : 0;                                                                         // 486\n                                                                                                                       // 487\n    this.clear();                                                                                                      // 488\n    while (++index < length) {                                                                                         // 489\n        var entry = entries[index];                                                                                    // 490\n        this.set(entry[0], entry[1]);                                                                                  // 491\n    }                                                                                                                  // 492\n}                                                                                                                      // 493\n                                                                                                                       // 494\n/**                                                                                                                    // 495\n * Removes all key-value entries from the list cache.                                                                  // 496\n *                                                                                                                     // 497\n * @private                                                                                                            // 498\n * @name clear                                                                                                         // 499\n * @memberOf ListCache                                                                                                 // 500\n */                                                                                                                    // 501\nfunction listCacheClear() {                                                                                            // 502\n    this.__data__ = [];                                                                                                // 503\n}                                                                                                                      // 504\n                                                                                                                       // 505\n/**                                                                                                                    // 506\n * Removes `key` and its value from the list cache.                                                                    // 507\n *                                                                                                                     // 508\n * @private                                                                                                            // 509\n * @name delete                                                                                                        // 510\n * @memberOf ListCache                                                                                                 // 511\n * @param {string} key The key of the value to remove.                                                                 // 512\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 513\n */                                                                                                                    // 514\nfunction listCacheDelete(key) {                                                                                        // 515\n    var data = this.__data__,                                                                                          // 516\n        index = assocIndexOf(data, key);                                                                               // 517\n                                                                                                                       // 518\n    if (index < 0) {                                                                                                   // 519\n        return false;                                                                                                  // 520\n    }                                                                                                                  // 521\n    var lastIndex = data.length - 1;                                                                                   // 522\n    if (index == lastIndex) {                                                                                          // 523\n        data.pop();                                                                                                    // 524\n    } else {                                                                                                           // 525\n        splice.call(data, index, 1);                                                                                   // 526\n    }                                                                                                                  // 527\n    return true;                                                                                                       // 528\n}                                                                                                                      // 529\n                                                                                                                       // 530\n/**                                                                                                                    // 531\n * Gets the list cache value for `key`.                                                                                // 532\n *                                                                                                                     // 533\n * @private                                                                                                            // 534\n * @name get                                                                                                           // 535\n * @memberOf ListCache                                                                                                 // 536\n * @param {string} key The key of the value to get.                                                                    // 537\n * @returns {*} Returns the entry value.                                                                               // 538\n */                                                                                                                    // 539\nfunction listCacheGet(key) {                                                                                           // 540\n    var data = this.__data__,                                                                                          // 541\n        index = assocIndexOf(data, key);                                                                               // 542\n                                                                                                                       // 543\n    return index < 0 ? undefined : data[index][1];                                                                     // 544\n}                                                                                                                      // 545\n                                                                                                                       // 546\n/**                                                                                                                    // 547\n * Checks if a list cache value for `key` exists.                                                                      // 548\n *                                                                                                                     // 549\n * @private                                                                                                            // 550\n * @name has                                                                                                           // 551\n * @memberOf ListCache                                                                                                 // 552\n * @param {string} key The key of the entry to check.                                                                  // 553\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 554\n */                                                                                                                    // 555\nfunction listCacheHas(key) {                                                                                           // 556\n    return assocIndexOf(this.__data__, key) > -1;                                                                      // 557\n}                                                                                                                      // 558\n                                                                                                                       // 559\n/**                                                                                                                    // 560\n * Sets the list cache `key` to `value`.                                                                               // 561\n *                                                                                                                     // 562\n * @private                                                                                                            // 563\n * @name set                                                                                                           // 564\n * @memberOf ListCache                                                                                                 // 565\n * @param {string} key The key of the value to set.                                                                    // 566\n * @param {*} value The value to set.                                                                                  // 567\n * @returns {Object} Returns the list cache instance.                                                                  // 568\n */                                                                                                                    // 569\nfunction listCacheSet(key, value) {                                                                                    // 570\n    var data = this.__data__,                                                                                          // 571\n        index = assocIndexOf(data, key);                                                                               // 572\n                                                                                                                       // 573\n    if (index < 0) {                                                                                                   // 574\n        data.push([key, value]);                                                                                       // 575\n    } else {                                                                                                           // 576\n        data[index][1] = value;                                                                                        // 577\n    }                                                                                                                  // 578\n    return this;                                                                                                       // 579\n}                                                                                                                      // 580\n                                                                                                                       // 581\n// Add methods to `ListCache`.                                                                                         // 582\nListCache.prototype.clear = listCacheClear;                                                                            // 583\nListCache.prototype[\"delete\"] = listCacheDelete;                                                                       // 584\nListCache.prototype.get = listCacheGet;                                                                                // 585\nListCache.prototype.has = listCacheHas;                                                                                // 586\nListCache.prototype.set = listCacheSet;                                                                                // 587\n                                                                                                                       // 588\n/**                                                                                                                    // 589\n * Creates a map cache object to store key-value pairs.                                                                // 590\n *                                                                                                                     // 591\n * @private                                                                                                            // 592\n * @constructor                                                                                                        // 593\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 594\n */                                                                                                                    // 595\nfunction MapCache(entries) {                                                                                           // 596\n    var index = -1,                                                                                                    // 597\n        length = entries ? entries.length : 0;                                                                         // 598\n                                                                                                                       // 599\n    this.clear();                                                                                                      // 600\n    while (++index < length) {                                                                                         // 601\n        var entry = entries[index];                                                                                    // 602\n        this.set(entry[0], entry[1]);                                                                                  // 603\n    }                                                                                                                  // 604\n}                                                                                                                      // 605\n                                                                                                                       // 606\n/**                                                                                                                    // 607\n * Removes all key-value entries from the map.                                                                         // 608\n *                                                                                                                     // 609\n * @private                                                                                                            // 610\n * @name clear                                                                                                         // 611\n * @memberOf MapCache                                                                                                  // 612\n */                                                                                                                    // 613\nfunction mapCacheClear() {                                                                                             // 614\n    this.__data__ = {                                                                                                  // 615\n        hash: new Hash(),                                                                                              // 616\n        map: new (Map || ListCache)(),                                                                                 // 617\n        string: new Hash()                                                                                             // 618\n    };                                                                                                                 // 619\n}                                                                                                                      // 620\n                                                                                                                       // 621\n/**                                                                                                                    // 622\n * Removes `key` and its value from the map.                                                                           // 623\n *                                                                                                                     // 624\n * @private                                                                                                            // 625\n * @name delete                                                                                                        // 626\n * @memberOf MapCache                                                                                                  // 627\n * @param {string} key The key of the value to remove.                                                                 // 628\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 629\n */                                                                                                                    // 630\nfunction mapCacheDelete(key) {                                                                                         // 631\n    return getMapData(this, key)[\"delete\"](key);                                                                       // 632\n}                                                                                                                      // 633\n                                                                                                                       // 634\n/**                                                                                                                    // 635\n * Gets the map value for `key`.                                                                                       // 636\n *                                                                                                                     // 637\n * @private                                                                                                            // 638\n * @name get                                                                                                           // 639\n * @memberOf MapCache                                                                                                  // 640\n * @param {string} key The key of the value to get.                                                                    // 641\n * @returns {*} Returns the entry value.                                                                               // 642\n */                                                                                                                    // 643\nfunction mapCacheGet(key) {                                                                                            // 644\n    return getMapData(this, key).get(key);                                                                             // 645\n}                                                                                                                      // 646\n                                                                                                                       // 647\n/**                                                                                                                    // 648\n * Checks if a map value for `key` exists.                                                                             // 649\n *                                                                                                                     // 650\n * @private                                                                                                            // 651\n * @name has                                                                                                           // 652\n * @memberOf MapCache                                                                                                  // 653\n * @param {string} key The key of the entry to check.                                                                  // 654\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 655\n */                                                                                                                    // 656\nfunction mapCacheHas(key) {                                                                                            // 657\n    return getMapData(this, key).has(key);                                                                             // 658\n}                                                                                                                      // 659\n                                                                                                                       // 660\n/**                                                                                                                    // 661\n * Sets the map `key` to `value`.                                                                                      // 662\n *                                                                                                                     // 663\n * @private                                                                                                            // 664\n * @name set                                                                                                           // 665\n * @memberOf MapCache                                                                                                  // 666\n * @param {string} key The key of the value to set.                                                                    // 667\n * @param {*} value The value to set.                                                                                  // 668\n * @returns {Object} Returns the map cache instance.                                                                   // 669\n */                                                                                                                    // 670\nfunction mapCacheSet(key, value) {                                                                                     // 671\n    getMapData(this, key).set(key, value);                                                                             // 672\n    return this;                                                                                                       // 673\n}                                                                                                                      // 674\n                                                                                                                       // 675\n// Add methods to `MapCache`.                                                                                          // 676\nMapCache.prototype.clear = mapCacheClear;                                                                              // 677\nMapCache.prototype[\"delete\"] = mapCacheDelete;                                                                         // 678\nMapCache.prototype.get = mapCacheGet;                                                                                  // 679\nMapCache.prototype.has = mapCacheHas;                                                                                  // 680\nMapCache.prototype.set = mapCacheSet;                                                                                  // 681\n                                                                                                                       // 682\n/**                                                                                                                    // 683\n * Creates a stack cache object to store key-value pairs.                                                              // 684\n *                                                                                                                     // 685\n * @private                                                                                                            // 686\n * @constructor                                                                                                        // 687\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 688\n */                                                                                                                    // 689\nfunction Stack(entries) {                                                                                              // 690\n    this.__data__ = new ListCache(entries);                                                                            // 691\n}                                                                                                                      // 692\n                                                                                                                       // 693\n/**                                                                                                                    // 694\n * Removes all key-value entries from the stack.                                                                       // 695\n *                                                                                                                     // 696\n * @private                                                                                                            // 697\n * @name clear                                                                                                         // 698\n * @memberOf Stack                                                                                                     // 699\n */                                                                                                                    // 700\nfunction stackClear() {                                                                                                // 701\n    this.__data__ = new ListCache();                                                                                   // 702\n}                                                                                                                      // 703\n                                                                                                                       // 704\n/**                                                                                                                    // 705\n * Removes `key` and its value from the stack.                                                                         // 706\n *                                                                                                                     // 707\n * @private                                                                                                            // 708\n * @name delete                                                                                                        // 709\n * @memberOf Stack                                                                                                     // 710\n * @param {string} key The key of the value to remove.                                                                 // 711\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 712\n */                                                                                                                    // 713\nfunction stackDelete(key) {                                                                                            // 714\n    return this.__data__[\"delete\"](key);                                                                               // 715\n}                                                                                                                      // 716\n                                                                                                                       // 717\n/**                                                                                                                    // 718\n * Gets the stack value for `key`.                                                                                     // 719\n *                                                                                                                     // 720\n * @private                                                                                                            // 721\n * @name get                                                                                                           // 722\n * @memberOf Stack                                                                                                     // 723\n * @param {string} key The key of the value to get.                                                                    // 724\n * @returns {*} Returns the entry value.                                                                               // 725\n */                                                                                                                    // 726\nfunction stackGet(key) {                                                                                               // 727\n    return this.__data__.get(key);                                                                                     // 728\n}                                                                                                                      // 729\n                                                                                                                       // 730\n/**                                                                                                                    // 731\n * Checks if a stack value for `key` exists.                                                                           // 732\n *                                                                                                                     // 733\n * @private                                                                                                            // 734\n * @name has                                                                                                           // 735\n * @memberOf Stack                                                                                                     // 736\n * @param {string} key The key of the entry to check.                                                                  // 737\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 738\n */                                                                                                                    // 739\nfunction stackHas(key) {                                                                                               // 740\n    return this.__data__.has(key);                                                                                     // 741\n}                                                                                                                      // 742\n                                                                                                                       // 743\n/**                                                                                                                    // 744\n * Sets the stack `key` to `value`.                                                                                    // 745\n *                                                                                                                     // 746\n * @private                                                                                                            // 747\n * @name set                                                                                                           // 748\n * @memberOf Stack                                                                                                     // 749\n * @param {string} key The key of the value to set.                                                                    // 750\n * @param {*} value The value to set.                                                                                  // 751\n * @returns {Object} Returns the stack cache instance.                                                                 // 752\n */                                                                                                                    // 753\nfunction stackSet(key, value) {                                                                                        // 754\n    var cache = this.__data__;                                                                                         // 755\n    if (cache instanceof ListCache) {                                                                                  // 756\n        var pairs = cache.__data__;                                                                                    // 757\n        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {                                                             // 758\n            pairs.push([key, value]);                                                                                  // 759\n            return this;                                                                                               // 760\n        }                                                                                                              // 761\n        cache = this.__data__ = new MapCache(pairs);                                                                   // 762\n    }                                                                                                                  // 763\n    cache.set(key, value);                                                                                             // 764\n    return this;                                                                                                       // 765\n}                                                                                                                      // 766\n                                                                                                                       // 767\n// Add methods to `Stack`.                                                                                             // 768\nStack.prototype.clear = stackClear;                                                                                    // 769\nStack.prototype[\"delete\"] = stackDelete;                                                                               // 770\nStack.prototype.get = stackGet;                                                                                        // 771\nStack.prototype.has = stackHas;                                                                                        // 772\nStack.prototype.set = stackSet;                                                                                        // 773\n                                                                                                                       // 774\n/**                                                                                                                    // 775\n * Creates an array of the enumerable property names of the array-like `value`.                                        // 776\n *                                                                                                                     // 777\n * @private                                                                                                            // 778\n * @param {*} value The value to query.                                                                                // 779\n * @param {boolean} inherited Specify returning inherited property names.                                              // 780\n * @returns {Array} Returns the array of property names.                                                               // 781\n */                                                                                                                    // 782\nfunction arrayLikeKeys(value, inherited) {                                                                             // 783\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                  // 784\n    // Safari 9 makes `arguments.length` enumerable in strict mode.                                                    // 785\n    var result =                                                                                                       // 786\n        isArray(value) || isArguments(value)                                                                           // 787\n            ? baseTimes(value.length, String)                                                                          // 788\n            : [];                                                                                                      // 789\n                                                                                                                       // 790\n    var length = result.length,                                                                                        // 791\n        skipIndexes = !!length;                                                                                        // 792\n                                                                                                                       // 793\n    for (var key in value) {                                                                                           // 794\n        if (                                                                                                           // 795\n            (inherited || hasOwnProperty.call(value, key)) &&                                                          // 796\n            !(skipIndexes && (key == \"length\" || isIndex(key, length)))                                                // 797\n        ) {                                                                                                            // 798\n            result.push(key);                                                                                          // 799\n        }                                                                                                              // 800\n    }                                                                                                                  // 801\n    return result;                                                                                                     // 802\n}                                                                                                                      // 803\n                                                                                                                       // 804\n/**                                                                                                                    // 805\n * Assigns `value` to `key` of `object` if the existing value is not equivalent                                        // 806\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                              // 807\n * for equality comparisons.                                                                                           // 808\n *                                                                                                                     // 809\n * @private                                                                                                            // 810\n * @param {Object} object The object to modify.                                                                        // 811\n * @param {string} key The key of the property to assign.                                                              // 812\n * @param {*} value The value to assign.                                                                               // 813\n */                                                                                                                    // 814\nfunction assignValue(object, key, value) {                                                                             // 815\n    var objValue = object[key];                                                                                        // 816\n    if (                                                                                                               // 817\n        !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||                                                  // 818\n        (value === undefined && !(key in object))                                                                      // 819\n    ) {                                                                                                                // 820\n        object[key] = value;                                                                                           // 821\n    }                                                                                                                  // 822\n}                                                                                                                      // 823\n                                                                                                                       // 824\n/**                                                                                                                    // 825\n * Gets the index at which the `key` is found in `array` of key-value pairs.                                           // 826\n *                                                                                                                     // 827\n * @private                                                                                                            // 828\n * @param {Array} array The array to inspect.                                                                          // 829\n * @param {*} key The key to search for.                                                                               // 830\n * @returns {number} Returns the index of the matched value, else `-1`.                                                // 831\n */                                                                                                                    // 832\nfunction assocIndexOf(array, key) {                                                                                    // 833\n    var length = array.length;                                                                                         // 834\n    while (length--) {                                                                                                 // 835\n        if (eq(array[length][0], key)) {                                                                               // 836\n            return length;                                                                                             // 837\n        }                                                                                                              // 838\n    }                                                                                                                  // 839\n    return -1;                                                                                                         // 840\n}                                                                                                                      // 841\n                                                                                                                       // 842\n/**                                                                                                                    // 843\n * The base implementation of `_.assign` without support for multiple sources                                          // 844\n * or `customizer` functions.                                                                                          // 845\n *                                                                                                                     // 846\n * @private                                                                                                            // 847\n * @param {Object} object The destination object.                                                                      // 848\n * @param {Object} source The source object.                                                                           // 849\n * @returns {Object} Returns `object`.                                                                                 // 850\n */                                                                                                                    // 851\nfunction baseAssign(object, source) {                                                                                  // 852\n    return object && copyObject(source, keys(source), object);                                                         // 853\n}                                                                                                                      // 854\n                                                                                                                       // 855\n/**                                                                                                                    // 856\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks                                                 // 857\n * traversed objects.                                                                                                  // 858\n *                                                                                                                     // 859\n * @private                                                                                                            // 860\n * @param {*} value The value to clone.                                                                                // 861\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 862\n * @param {boolean} [isFull] Specify a clone including symbols.                                                        // 863\n * @param {Function} [customizer] The function to customize cloning.                                                   // 864\n * @param {string} [key] The key of `value`.                                                                           // 865\n * @param {Object} [object] The parent object of `value`.                                                              // 866\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.                                      // 867\n * @returns {*} Returns the cloned value.                                                                              // 868\n */                                                                                                                    // 869\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {                                            // 870\n    var result;                                                                                                        // 871\n    if (customizer) {                                                                                                  // 872\n        result = object                                                                                                // 873\n            ? customizer(value, key, object, stack)                                                                    // 874\n            : customizer(value);                                                                                       // 875\n    }                                                                                                                  // 876\n    if (result !== undefined) {                                                                                        // 877\n        return result;                                                                                                 // 878\n    }                                                                                                                  // 879\n    if (!isObject(value)) {                                                                                            // 880\n        return value;                                                                                                  // 881\n    }                                                                                                                  // 882\n    var isArr = isArray(value);                                                                                        // 883\n    if (isArr) {                                                                                                       // 884\n        result = initCloneArray(value);                                                                                // 885\n        if (!isDeep) {                                                                                                 // 886\n            return copyArray(value, result);                                                                           // 887\n        }                                                                                                              // 888\n    } else {                                                                                                           // 889\n        var tag = getTag(value),                                                                                       // 890\n            isFunc = tag == funcTag || tag == genTag;                                                                  // 891\n                                                                                                                       // 892\n        if (isBuffer(value)) {                                                                                         // 893\n            return cloneBuffer(value, isDeep);                                                                         // 894\n        }                                                                                                              // 895\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                               // 896\n            if (isHostObject(value)) {                                                                                 // 897\n                return object ? value : {};                                                                            // 898\n            }                                                                                                          // 899\n            result = initCloneObject(isFunc ? {} : value);                                                             // 900\n            if (!isDeep) {                                                                                             // 901\n                return copySymbols(value, baseAssign(result, value));                                                  // 902\n            }                                                                                                          // 903\n        } else {                                                                                                       // 904\n            if (!cloneableTags[tag]) {                                                                                 // 905\n                return object ? value : {};                                                                            // 906\n            }                                                                                                          // 907\n            result = initCloneByTag(value, tag, baseClone, isDeep);                                                    // 908\n        }                                                                                                              // 909\n    }                                                                                                                  // 910\n    // Check for circular references and return its corresponding clone.                                               // 911\n    stack || (stack = new Stack());                                                                                    // 912\n    var stacked = stack.get(value);                                                                                    // 913\n    if (stacked) {                                                                                                     // 914\n        return stacked;                                                                                                // 915\n    }                                                                                                                  // 916\n    stack.set(value, result);                                                                                          // 917\n                                                                                                                       // 918\n    if (!isArr) {                                                                                                      // 919\n        var props = isFull ? getAllKeys(value) : keys(value);                                                          // 920\n    }                                                                                                                  // 921\n    arrayEach(props || value, function(subValue, key) {                                                                // 922\n        if (props) {                                                                                                   // 923\n            key = subValue;                                                                                            // 924\n            subValue = value[key];                                                                                     // 925\n        }                                                                                                              // 926\n        // Recursively populate clone (susceptible to call stack limits).                                              // 927\n        assignValue(                                                                                                   // 928\n            result,                                                                                                    // 929\n            key,                                                                                                       // 930\n            baseClone(subValue, isDeep, isFull, customizer, key, value, stack)                                         // 931\n        );                                                                                                             // 932\n    });                                                                                                                // 933\n    return result;                                                                                                     // 934\n}                                                                                                                      // 935\n                                                                                                                       // 936\n/**                                                                                                                    // 937\n * The base implementation of `_.create` without support for assigning                                                 // 938\n * properties to the created object.                                                                                   // 939\n *                                                                                                                     // 940\n * @private                                                                                                            // 941\n * @param {Object} prototype The object to inherit from.                                                               // 942\n * @returns {Object} Returns the new object.                                                                           // 943\n */                                                                                                                    // 944\nfunction baseCreate(proto) {                                                                                           // 945\n    return isObject(proto) ? objectCreate(proto) : {};                                                                 // 946\n}                                                                                                                      // 947\n                                                                                                                       // 948\n/**                                                                                                                    // 949\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses                                               // 950\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and                                               // 951\n * symbols of `object`.                                                                                                // 952\n *                                                                                                                     // 953\n * @private                                                                                                            // 954\n * @param {Object} object The object to query.                                                                         // 955\n * @param {Function} keysFunc The function to get the keys of `object`.                                                // 956\n * @param {Function} symbolsFunc The function to get the symbols of `object`.                                          // 957\n * @returns {Array} Returns the array of property names and symbols.                                                   // 958\n */                                                                                                                    // 959\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {                                                               // 960\n    var result = keysFunc(object);                                                                                     // 961\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));                                          // 962\n}                                                                                                                      // 963\n                                                                                                                       // 964\n/**                                                                                                                    // 965\n * The base implementation of `getTag`.                                                                                // 966\n *                                                                                                                     // 967\n * @private                                                                                                            // 968\n * @param {*} value The value to query.                                                                                // 969\n * @returns {string} Returns the `toStringTag`.                                                                        // 970\n */                                                                                                                    // 971\nfunction baseGetTag(value) {                                                                                           // 972\n    return objectToString.call(value);                                                                                 // 973\n}                                                                                                                      // 974\n                                                                                                                       // 975\n/**                                                                                                                    // 976\n * The base implementation of `_.isNative` without bad shim checks.                                                    // 977\n *                                                                                                                     // 978\n * @private                                                                                                            // 979\n * @param {*} value The value to check.                                                                                // 980\n * @returns {boolean} Returns `true` if `value` is a native function,                                                  // 981\n *  else `false`.                                                                                                      // 982\n */                                                                                                                    // 983\nfunction baseIsNative(value) {                                                                                         // 984\n    if (!isObject(value) || isMasked(value)) {                                                                         // 985\n        return false;                                                                                                  // 986\n    }                                                                                                                  // 987\n    var pattern =                                                                                                      // 988\n        isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;                                          // 989\n    return pattern.test(toSource(value));                                                                              // 990\n}                                                                                                                      // 991\n                                                                                                                       // 992\n/**                                                                                                                    // 993\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.                                     // 994\n *                                                                                                                     // 995\n * @private                                                                                                            // 996\n * @param {Object} object The object to query.                                                                         // 997\n * @returns {Array} Returns the array of property names.                                                               // 998\n */                                                                                                                    // 999\nfunction baseKeys(object) {                                                                                            // 1000\n    if (!isPrototype(object)) {                                                                                        // 1001\n        return nativeKeys(object);                                                                                     // 1002\n    }                                                                                                                  // 1003\n    var result = [];                                                                                                   // 1004\n    for (var key in Object(object)) {                                                                                  // 1005\n        if (hasOwnProperty.call(object, key) && key != \"constructor\") {                                                // 1006\n            result.push(key);                                                                                          // 1007\n        }                                                                                                              // 1008\n    }                                                                                                                  // 1009\n    return result;                                                                                                     // 1010\n}                                                                                                                      // 1011\n                                                                                                                       // 1012\n/**                                                                                                                    // 1013\n * Creates a clone of  `buffer`.                                                                                       // 1014\n *                                                                                                                     // 1015\n * @private                                                                                                            // 1016\n * @param {Buffer} buffer The buffer to clone.                                                                         // 1017\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1018\n * @returns {Buffer} Returns the cloned buffer.                                                                        // 1019\n */                                                                                                                    // 1020\nfunction cloneBuffer(buffer, isDeep) {                                                                                 // 1021\n    if (isDeep) {                                                                                                      // 1022\n        return buffer.slice();                                                                                         // 1023\n    }                                                                                                                  // 1024\n    var result = new buffer.constructor(buffer.length);                                                                // 1025\n    buffer.copy(result);                                                                                               // 1026\n    return result;                                                                                                     // 1027\n}                                                                                                                      // 1028\n                                                                                                                       // 1029\n/**                                                                                                                    // 1030\n * Creates a clone of `arrayBuffer`.                                                                                   // 1031\n *                                                                                                                     // 1032\n * @private                                                                                                            // 1033\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.                                                         // 1034\n * @returns {ArrayBuffer} Returns the cloned array buffer.                                                             // 1035\n */                                                                                                                    // 1036\nfunction cloneArrayBuffer(arrayBuffer) {                                                                               // 1037\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);                                                  // 1038\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));                                                           // 1039\n    return result;                                                                                                     // 1040\n}                                                                                                                      // 1041\n                                                                                                                       // 1042\n/**                                                                                                                    // 1043\n * Creates a clone of `dataView`.                                                                                      // 1044\n *                                                                                                                     // 1045\n * @private                                                                                                            // 1046\n * @param {Object} dataView The data view to clone.                                                                    // 1047\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1048\n * @returns {Object} Returns the cloned data view.                                                                     // 1049\n */                                                                                                                    // 1050\nfunction cloneDataView(dataView, isDeep) {                                                                             // 1051\n    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;                                         // 1052\n    return new dataView.constructor(                                                                                   // 1053\n        buffer,                                                                                                        // 1054\n        dataView.byteOffset,                                                                                           // 1055\n        dataView.byteLength                                                                                            // 1056\n    );                                                                                                                 // 1057\n}                                                                                                                      // 1058\n                                                                                                                       // 1059\n/**                                                                                                                    // 1060\n * Creates a clone of `map`.                                                                                           // 1061\n *                                                                                                                     // 1062\n * @private                                                                                                            // 1063\n * @param {Object} map The map to clone.                                                                               // 1064\n * @param {Function} cloneFunc The function to clone values.                                                           // 1065\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1066\n * @returns {Object} Returns the cloned map.                                                                           // 1067\n */                                                                                                                    // 1068\nfunction cloneMap(map, isDeep, cloneFunc) {                                                                            // 1069\n    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);                                           // 1070\n    return arrayReduce(array, addMapEntry, new map.constructor());                                                     // 1071\n}                                                                                                                      // 1072\n                                                                                                                       // 1073\n/**                                                                                                                    // 1074\n * Creates a clone of `regexp`.                                                                                        // 1075\n *                                                                                                                     // 1076\n * @private                                                                                                            // 1077\n * @param {Object} regexp The regexp to clone.                                                                         // 1078\n * @returns {Object} Returns the cloned regexp.                                                                        // 1079\n */                                                                                                                    // 1080\nfunction cloneRegExp(regexp) {                                                                                         // 1081\n    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));                                          // 1082\n    result.lastIndex = regexp.lastIndex;                                                                               // 1083\n    return result;                                                                                                     // 1084\n}                                                                                                                      // 1085\n                                                                                                                       // 1086\n/**                                                                                                                    // 1087\n * Creates a clone of `set`.                                                                                           // 1088\n *                                                                                                                     // 1089\n * @private                                                                                                            // 1090\n * @param {Object} set The set to clone.                                                                               // 1091\n * @param {Function} cloneFunc The function to clone values.                                                           // 1092\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1093\n * @returns {Object} Returns the cloned set.                                                                           // 1094\n */                                                                                                                    // 1095\nfunction cloneSet(set, isDeep, cloneFunc) {                                                                            // 1096\n    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);                                           // 1097\n    return arrayReduce(array, addSetEntry, new set.constructor());                                                     // 1098\n}                                                                                                                      // 1099\n                                                                                                                       // 1100\n/**                                                                                                                    // 1101\n * Creates a clone of the `symbol` object.                                                                             // 1102\n *                                                                                                                     // 1103\n * @private                                                                                                            // 1104\n * @param {Object} symbol The symbol object to clone.                                                                  // 1105\n * @returns {Object} Returns the cloned symbol object.                                                                 // 1106\n */                                                                                                                    // 1107\nfunction cloneSymbol(symbol) {                                                                                         // 1108\n    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};                                                    // 1109\n}                                                                                                                      // 1110\n                                                                                                                       // 1111\n/**                                                                                                                    // 1112\n * Creates a clone of `typedArray`.                                                                                    // 1113\n *                                                                                                                     // 1114\n * @private                                                                                                            // 1115\n * @param {Object} typedArray The typed array to clone.                                                                // 1116\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1117\n * @returns {Object} Returns the cloned typed array.                                                                   // 1118\n */                                                                                                                    // 1119\nfunction cloneTypedArray(typedArray, isDeep) {                                                                         // 1120\n    var buffer = isDeep                                                                                                // 1121\n        ? cloneArrayBuffer(typedArray.buffer)                                                                          // 1122\n        : typedArray.buffer;                                                                                           // 1123\n    return new typedArray.constructor(                                                                                 // 1124\n        buffer,                                                                                                        // 1125\n        typedArray.byteOffset,                                                                                         // 1126\n        typedArray.length                                                                                              // 1127\n    );                                                                                                                 // 1128\n}                                                                                                                      // 1129\n                                                                                                                       // 1130\n/**                                                                                                                    // 1131\n * Copies the values of `source` to `array`.                                                                           // 1132\n *                                                                                                                     // 1133\n * @private                                                                                                            // 1134\n * @param {Array} source The array to copy values from.                                                                // 1135\n * @param {Array} [array=[]] The array to copy values to.                                                              // 1136\n * @returns {Array} Returns `array`.                                                                                   // 1137\n */                                                                                                                    // 1138\nfunction copyArray(source, array) {                                                                                    // 1139\n    var index = -1,                                                                                                    // 1140\n        length = source.length;                                                                                        // 1141\n                                                                                                                       // 1142\n    array || (array = Array(length));                                                                                  // 1143\n    while (++index < length) {                                                                                         // 1144\n        array[index] = source[index];                                                                                  // 1145\n    }                                                                                                                  // 1146\n    return array;                                                                                                      // 1147\n}                                                                                                                      // 1148\n                                                                                                                       // 1149\n/**                                                                                                                    // 1150\n * Copies properties of `source` to `object`.                                                                          // 1151\n *                                                                                                                     // 1152\n * @private                                                                                                            // 1153\n * @param {Object} source The object to copy properties from.                                                          // 1154\n * @param {Array} props The property identifiers to copy.                                                              // 1155\n * @param {Object} [object={}] The object to copy properties to.                                                       // 1156\n * @param {Function} [customizer] The function to customize copied values.                                             // 1157\n * @returns {Object} Returns `object`.                                                                                 // 1158\n */                                                                                                                    // 1159\nfunction copyObject(source, props, object, customizer) {                                                               // 1160\n    object || (object = {});                                                                                           // 1161\n                                                                                                                       // 1162\n    var index = -1,                                                                                                    // 1163\n        length = props.length;                                                                                         // 1164\n                                                                                                                       // 1165\n    while (++index < length) {                                                                                         // 1166\n        var key = props[index];                                                                                        // 1167\n                                                                                                                       // 1168\n        var newValue = customizer                                                                                      // 1169\n            ? customizer(object[key], source[key], key, object, source)                                                // 1170\n            : undefined;                                                                                               // 1171\n                                                                                                                       // 1172\n        assignValue(                                                                                                   // 1173\n            object,                                                                                                    // 1174\n            key,                                                                                                       // 1175\n            newValue === undefined ? source[key] : newValue                                                            // 1176\n        );                                                                                                             // 1177\n    }                                                                                                                  // 1178\n    return object;                                                                                                     // 1179\n}                                                                                                                      // 1180\n                                                                                                                       // 1181\n/**                                                                                                                    // 1182\n * Copies own symbol properties of `source` to `object`.                                                               // 1183\n *                                                                                                                     // 1184\n * @private                                                                                                            // 1185\n * @param {Object} source The object to copy symbols from.                                                             // 1186\n * @param {Object} [object={}] The object to copy symbols to.                                                          // 1187\n * @returns {Object} Returns `object`.                                                                                 // 1188\n */                                                                                                                    // 1189\nfunction copySymbols(source, object) {                                                                                 // 1190\n    return copyObject(source, getSymbols(source), object);                                                             // 1191\n}                                                                                                                      // 1192\n                                                                                                                       // 1193\n/**                                                                                                                    // 1194\n * Creates an array of own enumerable property names and symbols of `object`.                                          // 1195\n *                                                                                                                     // 1196\n * @private                                                                                                            // 1197\n * @param {Object} object The object to query.                                                                         // 1198\n * @returns {Array} Returns the array of property names and symbols.                                                   // 1199\n */                                                                                                                    // 1200\nfunction getAllKeys(object) {                                                                                          // 1201\n    return baseGetAllKeys(object, keys, getSymbols);                                                                   // 1202\n}                                                                                                                      // 1203\n                                                                                                                       // 1204\n/**                                                                                                                    // 1205\n * Gets the data for `map`.                                                                                            // 1206\n *                                                                                                                     // 1207\n * @private                                                                                                            // 1208\n * @param {Object} map The map to query.                                                                               // 1209\n * @param {string} key The reference key.                                                                              // 1210\n * @returns {*} Returns the map data.                                                                                  // 1211\n */                                                                                                                    // 1212\nfunction getMapData(map, key) {                                                                                        // 1213\n    var data = map.__data__;                                                                                           // 1214\n    return isKeyable(key)                                                                                              // 1215\n        ? data[typeof key == \"string\" ? \"string\" : \"hash\"]                                                             // 1216\n        : data.map;                                                                                                    // 1217\n}                                                                                                                      // 1218\n                                                                                                                       // 1219\n/**                                                                                                                    // 1220\n * Gets the native function at `key` of `object`.                                                                      // 1221\n *                                                                                                                     // 1222\n * @private                                                                                                            // 1223\n * @param {Object} object The object to query.                                                                         // 1224\n * @param {string} key The key of the method to get.                                                                   // 1225\n * @returns {*} Returns the function if it's native, else `undefined`.                                                 // 1226\n */                                                                                                                    // 1227\nfunction getNative(object, key) {                                                                                      // 1228\n    var value = getValue(object, key);                                                                                 // 1229\n    return baseIsNative(value) ? value : undefined;                                                                    // 1230\n}                                                                                                                      // 1231\n                                                                                                                       // 1232\n/**                                                                                                                    // 1233\n * Creates an array of the own enumerable symbol properties of `object`.                                               // 1234\n *                                                                                                                     // 1235\n * @private                                                                                                            // 1236\n * @param {Object} object The object to query.                                                                         // 1237\n * @returns {Array} Returns the array of symbols.                                                                      // 1238\n */                                                                                                                    // 1239\nvar getSymbols = nativeGetSymbols                                                                                      // 1240\n    ? overArg(nativeGetSymbols, Object)                                                                                // 1241\n    : stubArray;                                                                                                       // 1242\n                                                                                                                       // 1243\n/**                                                                                                                    // 1244\n * Gets the `toStringTag` of `value`.                                                                                  // 1245\n *                                                                                                                     // 1246\n * @private                                                                                                            // 1247\n * @param {*} value The value to query.                                                                                // 1248\n * @returns {string} Returns the `toStringTag`.                                                                        // 1249\n */                                                                                                                    // 1250\nvar getTag = baseGetTag;                                                                                               // 1251\n                                                                                                                       // 1252\n// Fallback for data views, maps, sets, and weak maps in IE 11,                                                        // 1253\n// for data views in Edge < 14, and promises in Node.js.                                                               // 1254\nif (                                                                                                                   // 1255\n    (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||                                           // 1256\n    (Map && getTag(new Map()) != mapTag) ||                                                                            // 1257\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||                                                            // 1258\n    (Set && getTag(new Set()) != setTag) ||                                                                            // 1259\n    (WeakMap && getTag(new WeakMap()) != weakMapTag)                                                                   // 1260\n) {                                                                                                                    // 1261\n    getTag = function(value) {                                                                                         // 1262\n        var result = objectToString.call(value),                                                                       // 1263\n            Ctor = result == objectTag ? value.constructor : undefined,                                                // 1264\n            ctorString = Ctor ? toSource(Ctor) : undefined;                                                            // 1265\n                                                                                                                       // 1266\n        if (ctorString) {                                                                                              // 1267\n            switch (ctorString) {                                                                                      // 1268\n                case dataViewCtorString:                                                                               // 1269\n                    return dataViewTag;                                                                                // 1270\n                case mapCtorString:                                                                                    // 1271\n                    return mapTag;                                                                                     // 1272\n                case promiseCtorString:                                                                                // 1273\n                    return promiseTag;                                                                                 // 1274\n                case setCtorString:                                                                                    // 1275\n                    return setTag;                                                                                     // 1276\n                case weakMapCtorString:                                                                                // 1277\n                    return weakMapTag;                                                                                 // 1278\n            }                                                                                                          // 1279\n        }                                                                                                              // 1280\n        return result;                                                                                                 // 1281\n    };                                                                                                                 // 1282\n}                                                                                                                      // 1283\n                                                                                                                       // 1284\n/**                                                                                                                    // 1285\n * Initializes an array clone.                                                                                         // 1286\n *                                                                                                                     // 1287\n * @private                                                                                                            // 1288\n * @param {Array} array The array to clone.                                                                            // 1289\n * @returns {Array} Returns the initialized clone.                                                                     // 1290\n */                                                                                                                    // 1291\nfunction initCloneArray(array) {                                                                                       // 1292\n    var length = array.length,                                                                                         // 1293\n        result = array.constructor(length);                                                                            // 1294\n                                                                                                                       // 1295\n    // Add properties assigned by `RegExp#exec`.                                                                       // 1296\n    if (                                                                                                               // 1297\n        length &&                                                                                                      // 1298\n        typeof array[0] == \"string\" &&                                                                                 // 1299\n        hasOwnProperty.call(array, \"index\")                                                                            // 1300\n    ) {                                                                                                                // 1301\n        result.index = array.index;                                                                                    // 1302\n        result.input = array.input;                                                                                    // 1303\n    }                                                                                                                  // 1304\n    return result;                                                                                                     // 1305\n}                                                                                                                      // 1306\n                                                                                                                       // 1307\n/**                                                                                                                    // 1308\n * Initializes an object clone.                                                                                        // 1309\n *                                                                                                                     // 1310\n * @private                                                                                                            // 1311\n * @param {Object} object The object to clone.                                                                         // 1312\n * @returns {Object} Returns the initialized clone.                                                                    // 1313\n */                                                                                                                    // 1314\nfunction initCloneObject(object) {                                                                                     // 1315\n    return typeof object.constructor == \"function\" && !isPrototype(object)                                             // 1316\n        ? baseCreate(getPrototype(object))                                                                             // 1317\n        : {};                                                                                                          // 1318\n}                                                                                                                      // 1319\n                                                                                                                       // 1320\n/**                                                                                                                    // 1321\n * Initializes an object clone based on its `toStringTag`.                                                             // 1322\n *                                                                                                                     // 1323\n * **Note:** This function only supports cloning values with tags of                                                   // 1324\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                        // 1325\n *                                                                                                                     // 1326\n * @private                                                                                                            // 1327\n * @param {Object} object The object to clone.                                                                         // 1328\n * @param {string} tag The `toStringTag` of the object to clone.                                                       // 1329\n * @param {Function} cloneFunc The function to clone values.                                                           // 1330\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1331\n * @returns {Object} Returns the initialized clone.                                                                    // 1332\n */                                                                                                                    // 1333\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {                                                              // 1334\n    var Ctor = object.constructor;                                                                                     // 1335\n    switch (tag) {                                                                                                     // 1336\n        case arrayBufferTag:                                                                                           // 1337\n            return cloneArrayBuffer(object);                                                                           // 1338\n                                                                                                                       // 1339\n        case boolTag:                                                                                                  // 1340\n        case dateTag:                                                                                                  // 1341\n            return new Ctor(+object);                                                                                  // 1342\n                                                                                                                       // 1343\n        case dataViewTag:                                                                                              // 1344\n            return cloneDataView(object, isDeep);                                                                      // 1345\n                                                                                                                       // 1346\n        case float32Tag:                                                                                               // 1347\n        case float64Tag:                                                                                               // 1348\n        case int8Tag:                                                                                                  // 1349\n        case int16Tag:                                                                                                 // 1350\n        case int32Tag:                                                                                                 // 1351\n        case uint8Tag:                                                                                                 // 1352\n        case uint8ClampedTag:                                                                                          // 1353\n        case uint16Tag:                                                                                                // 1354\n        case uint32Tag:                                                                                                // 1355\n            return cloneTypedArray(object, isDeep);                                                                    // 1356\n                                                                                                                       // 1357\n        case mapTag:                                                                                                   // 1358\n            return cloneMap(object, isDeep, cloneFunc);                                                                // 1359\n                                                                                                                       // 1360\n        case numberTag:                                                                                                // 1361\n        case stringTag:                                                                                                // 1362\n            return new Ctor(object);                                                                                   // 1363\n                                                                                                                       // 1364\n        case regexpTag:                                                                                                // 1365\n            return cloneRegExp(object);                                                                                // 1366\n                                                                                                                       // 1367\n        case setTag:                                                                                                   // 1368\n            return cloneSet(object, isDeep, cloneFunc);                                                                // 1369\n                                                                                                                       // 1370\n        case symbolTag:                                                                                                // 1371\n            return cloneSymbol(object);                                                                                // 1372\n    }                                                                                                                  // 1373\n}                                                                                                                      // 1374\n                                                                                                                       // 1375\n/**                                                                                                                    // 1376\n * Checks if `value` is a valid array-like index.                                                                      // 1377\n *                                                                                                                     // 1378\n * @private                                                                                                            // 1379\n * @param {*} value The value to check.                                                                                // 1380\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 1381\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 1382\n */                                                                                                                    // 1383\nfunction isIndex(value, length) {                                                                                      // 1384\n    length = length == null ? MAX_SAFE_INTEGER : length;                                                               // 1385\n    return (                                                                                                           // 1386\n        !!length &&                                                                                                    // 1387\n        (typeof value == \"number\" || reIsUint.test(value)) &&                                                          // 1388\n        (value > -1 && value % 1 == 0 && value < length)                                                               // 1389\n    );                                                                                                                 // 1390\n}                                                                                                                      // 1391\n                                                                                                                       // 1392\n/**                                                                                                                    // 1393\n * Checks if `value` is suitable for use as unique object key.                                                         // 1394\n *                                                                                                                     // 1395\n * @private                                                                                                            // 1396\n * @param {*} value The value to check.                                                                                // 1397\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.                                             // 1398\n */                                                                                                                    // 1399\nfunction isKeyable(value) {                                                                                            // 1400\n    var type = typeof value;                                                                                           // 1401\n    return type == \"string\" ||                                                                                         // 1402\n        type == \"number\" ||                                                                                            // 1403\n        type == \"symbol\" ||                                                                                            // 1404\n        type == \"boolean\"                                                                                              // 1405\n        ? value !== \"__proto__\"                                                                                        // 1406\n        : value === null;                                                                                              // 1407\n}                                                                                                                      // 1408\n                                                                                                                       // 1409\n/**                                                                                                                    // 1410\n * Checks if `func` has its source masked.                                                                             // 1411\n *                                                                                                                     // 1412\n * @private                                                                                                            // 1413\n * @param {Function} func The function to check.                                                                       // 1414\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.                                                // 1415\n */                                                                                                                    // 1416\nfunction isMasked(func) {                                                                                              // 1417\n    return !!maskSrcKey && maskSrcKey in func;                                                                         // 1418\n}                                                                                                                      // 1419\n                                                                                                                       // 1420\n/**                                                                                                                    // 1421\n * Checks if `value` is likely a prototype object.                                                                     // 1422\n *                                                                                                                     // 1423\n * @private                                                                                                            // 1424\n * @param {*} value The value to check.                                                                                // 1425\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                          // 1426\n */                                                                                                                    // 1427\nfunction isPrototype(value) {                                                                                          // 1428\n    var Ctor = value && value.constructor,                                                                             // 1429\n        proto = (typeof Ctor == \"function\" && Ctor.prototype) || objectProto;                                          // 1430\n                                                                                                                       // 1431\n    return value === proto;                                                                                            // 1432\n}                                                                                                                      // 1433\n                                                                                                                       // 1434\n/**                                                                                                                    // 1435\n * Converts `func` to its source code.                                                                                 // 1436\n *                                                                                                                     // 1437\n * @private                                                                                                            // 1438\n * @param {Function} func The function to process.                                                                     // 1439\n * @returns {string} Returns the source code.                                                                          // 1440\n */                                                                                                                    // 1441\nfunction toSource(func) {                                                                                              // 1442\n    if (func != null) {                                                                                                // 1443\n        try {                                                                                                          // 1444\n            return funcToString.call(func);                                                                            // 1445\n        } catch (e) {}                                                                                                 // 1446\n        try {                                                                                                          // 1447\n            return func + \"\";                                                                                          // 1448\n        } catch (e) {}                                                                                                 // 1449\n    }                                                                                                                  // 1450\n    return \"\";                                                                                                         // 1451\n}                                                                                                                      // 1452\n                                                                                                                       // 1453\n/**                                                                                                                    // 1454\n * This method is like `_.clone` except that it recursively clones `value`.                                            // 1455\n *                                                                                                                     // 1456\n * @static                                                                                                             // 1457\n * @memberOf _                                                                                                         // 1458\n * @since 1.0.0                                                                                                        // 1459\n * @category Lang                                                                                                      // 1460\n * @param {*} value The value to recursively clone.                                                                    // 1461\n * @returns {*} Returns the deep cloned value.                                                                         // 1462\n * @see _.clone                                                                                                        // 1463\n * @example                                                                                                            // 1464\n *                                                                                                                     // 1465\n * var objects = [{ 'a': 1 }, { 'b': 2 }];                                                                             // 1466\n *                                                                                                                     // 1467\n * var deep = _.cloneDeep(objects);                                                                                    // 1468\n * console.log(deep[0] === objects[0]);                                                                                // 1469\n * // => false                                                                                                         // 1470\n */                                                                                                                    // 1471\nfunction cloneDeep(value) {                                                                                            // 1472\n    return baseClone(value, true, true);                                                                               // 1473\n}                                                                                                                      // 1474\n                                                                                                                       // 1475\n/**                                                                                                                    // 1476\n * Performs a                                                                                                          // 1477\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                                    // 1478\n * comparison between two values to determine if they are equivalent.                                                  // 1479\n *                                                                                                                     // 1480\n * @static                                                                                                             // 1481\n * @memberOf _                                                                                                         // 1482\n * @since 4.0.0                                                                                                        // 1483\n * @category Lang                                                                                                      // 1484\n * @param {*} value The value to compare.                                                                              // 1485\n * @param {*} other The other value to compare.                                                                        // 1486\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 1487\n * @example                                                                                                            // 1488\n *                                                                                                                     // 1489\n * var object = { 'a': 1 };                                                                                            // 1490\n * var other = { 'a': 1 };                                                                                             // 1491\n *                                                                                                                     // 1492\n * _.eq(object, object);                                                                                               // 1493\n * // => true                                                                                                          // 1494\n *                                                                                                                     // 1495\n * _.eq(object, other);                                                                                                // 1496\n * // => false                                                                                                         // 1497\n *                                                                                                                     // 1498\n * _.eq('a', 'a');                                                                                                     // 1499\n * // => true                                                                                                          // 1500\n *                                                                                                                     // 1501\n * _.eq('a', Object('a'));                                                                                             // 1502\n * // => false                                                                                                         // 1503\n *                                                                                                                     // 1504\n * _.eq(NaN, NaN);                                                                                                     // 1505\n * // => true                                                                                                          // 1506\n */                                                                                                                    // 1507\nfunction eq(value, other) {                                                                                            // 1508\n    return value === other || (value !== value && other !== other);                                                    // 1509\n}                                                                                                                      // 1510\n                                                                                                                       // 1511\n/**                                                                                                                    // 1512\n * Checks if `value` is likely an `arguments` object.                                                                  // 1513\n *                                                                                                                     // 1514\n * @static                                                                                                             // 1515\n * @memberOf _                                                                                                         // 1516\n * @since 0.1.0                                                                                                        // 1517\n * @category Lang                                                                                                      // 1518\n * @param {*} value The value to check.                                                                                // 1519\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 1520\n *  else `false`.                                                                                                      // 1521\n * @example                                                                                                            // 1522\n *                                                                                                                     // 1523\n * _.isArguments(function() { return arguments; }());                                                                  // 1524\n * // => true                                                                                                          // 1525\n *                                                                                                                     // 1526\n * _.isArguments([1, 2, 3]);                                                                                           // 1527\n * // => false                                                                                                         // 1528\n */                                                                                                                    // 1529\nfunction isArguments(value) {                                                                                          // 1530\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                  // 1531\n    return (                                                                                                           // 1532\n        isArrayLikeObject(value) &&                                                                                    // 1533\n        hasOwnProperty.call(value, \"callee\") &&                                                                        // 1534\n        (!propertyIsEnumerable.call(value, \"callee\") ||                                                                // 1535\n            objectToString.call(value) == argsTag)                                                                     // 1536\n    );                                                                                                                 // 1537\n}                                                                                                                      // 1538\n                                                                                                                       // 1539\n/**                                                                                                                    // 1540\n * Checks if `value` is classified as an `Array` object.                                                               // 1541\n *                                                                                                                     // 1542\n * @static                                                                                                             // 1543\n * @memberOf _                                                                                                         // 1544\n * @since 0.1.0                                                                                                        // 1545\n * @category Lang                                                                                                      // 1546\n * @param {*} value The value to check.                                                                                // 1547\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 1548\n * @example                                                                                                            // 1549\n *                                                                                                                     // 1550\n * _.isArray([1, 2, 3]);                                                                                               // 1551\n * // => true                                                                                                          // 1552\n *                                                                                                                     // 1553\n * _.isArray(document.body.children);                                                                                  // 1554\n * // => false                                                                                                         // 1555\n *                                                                                                                     // 1556\n * _.isArray('abc');                                                                                                   // 1557\n * // => false                                                                                                         // 1558\n *                                                                                                                     // 1559\n * _.isArray(_.noop);                                                                                                  // 1560\n * // => false                                                                                                         // 1561\n */                                                                                                                    // 1562\nvar isArray = Array.isArray;                                                                                           // 1563\n                                                                                                                       // 1564\n/**                                                                                                                    // 1565\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 1566\n * not a function and has a `value.length` that's an integer greater than or                                           // 1567\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 1568\n *                                                                                                                     // 1569\n * @static                                                                                                             // 1570\n * @memberOf _                                                                                                         // 1571\n * @since 4.0.0                                                                                                        // 1572\n * @category Lang                                                                                                      // 1573\n * @param {*} value The value to check.                                                                                // 1574\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 1575\n * @example                                                                                                            // 1576\n *                                                                                                                     // 1577\n * _.isArrayLike([1, 2, 3]);                                                                                           // 1578\n * // => true                                                                                                          // 1579\n *                                                                                                                     // 1580\n * _.isArrayLike(document.body.children);                                                                              // 1581\n * // => true                                                                                                          // 1582\n *                                                                                                                     // 1583\n * _.isArrayLike('abc');                                                                                               // 1584\n * // => true                                                                                                          // 1585\n *                                                                                                                     // 1586\n * _.isArrayLike(_.noop);                                                                                              // 1587\n * // => false                                                                                                         // 1588\n */                                                                                                                    // 1589\nfunction isArrayLike(value) {                                                                                          // 1590\n    return value != null && isLength(value.length) && !isFunction(value);                                              // 1591\n}                                                                                                                      // 1592\n                                                                                                                       // 1593\n/**                                                                                                                    // 1594\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 1595\n * is an object.                                                                                                       // 1596\n *                                                                                                                     // 1597\n * @static                                                                                                             // 1598\n * @memberOf _                                                                                                         // 1599\n * @since 4.0.0                                                                                                        // 1600\n * @category Lang                                                                                                      // 1601\n * @param {*} value The value to check.                                                                                // 1602\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 1603\n *  else `false`.                                                                                                      // 1604\n * @example                                                                                                            // 1605\n *                                                                                                                     // 1606\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 1607\n * // => true                                                                                                          // 1608\n *                                                                                                                     // 1609\n * _.isArrayLikeObject(document.body.children);                                                                        // 1610\n * // => true                                                                                                          // 1611\n *                                                                                                                     // 1612\n * _.isArrayLikeObject('abc');                                                                                         // 1613\n * // => false                                                                                                         // 1614\n *                                                                                                                     // 1615\n * _.isArrayLikeObject(_.noop);                                                                                        // 1616\n * // => false                                                                                                         // 1617\n */                                                                                                                    // 1618\nfunction isArrayLikeObject(value) {                                                                                    // 1619\n    return isObjectLike(value) && isArrayLike(value);                                                                  // 1620\n}                                                                                                                      // 1621\n                                                                                                                       // 1622\n/**                                                                                                                    // 1623\n * Checks if `value` is a buffer.                                                                                      // 1624\n *                                                                                                                     // 1625\n * @static                                                                                                             // 1626\n * @memberOf _                                                                                                         // 1627\n * @since 4.3.0                                                                                                        // 1628\n * @category Lang                                                                                                      // 1629\n * @param {*} value The value to check.                                                                                // 1630\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.                                             // 1631\n * @example                                                                                                            // 1632\n *                                                                                                                     // 1633\n * _.isBuffer(new Buffer(2));                                                                                          // 1634\n * // => true                                                                                                          // 1635\n *                                                                                                                     // 1636\n * _.isBuffer(new Uint8Array(2));                                                                                      // 1637\n * // => false                                                                                                         // 1638\n */                                                                                                                    // 1639\nvar isBuffer = nativeIsBuffer || stubFalse;                                                                            // 1640\n                                                                                                                       // 1641\n/**                                                                                                                    // 1642\n * Checks if `value` is classified as a `Function` object.                                                             // 1643\n *                                                                                                                     // 1644\n * @static                                                                                                             // 1645\n * @memberOf _                                                                                                         // 1646\n * @since 0.1.0                                                                                                        // 1647\n * @category Lang                                                                                                      // 1648\n * @param {*} value The value to check.                                                                                // 1649\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 1650\n * @example                                                                                                            // 1651\n *                                                                                                                     // 1652\n * _.isFunction(_);                                                                                                    // 1653\n * // => true                                                                                                          // 1654\n *                                                                                                                     // 1655\n * _.isFunction(/abc/);                                                                                                // 1656\n * // => false                                                                                                         // 1657\n */                                                                                                                    // 1658\nfunction isFunction(value) {                                                                                           // 1659\n    // The use of `Object#toString` avoids issues with the `typeof` operator                                           // 1660\n    // in Safari 8-9 which returns 'object' for typed array and other constructors.                                    // 1661\n    var tag = isObject(value) ? objectToString.call(value) : \"\";                                                       // 1662\n    return tag == funcTag || tag == genTag;                                                                            // 1663\n}                                                                                                                      // 1664\n                                                                                                                       // 1665\n/**                                                                                                                    // 1666\n * Checks if `value` is a valid array-like length.                                                                     // 1667\n *                                                                                                                     // 1668\n * **Note:** This method is loosely based on                                                                           // 1669\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 1670\n *                                                                                                                     // 1671\n * @static                                                                                                             // 1672\n * @memberOf _                                                                                                         // 1673\n * @since 4.0.0                                                                                                        // 1674\n * @category Lang                                                                                                      // 1675\n * @param {*} value The value to check.                                                                                // 1676\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 1677\n * @example                                                                                                            // 1678\n *                                                                                                                     // 1679\n * _.isLength(3);                                                                                                      // 1680\n * // => true                                                                                                          // 1681\n *                                                                                                                     // 1682\n * _.isLength(Number.MIN_VALUE);                                                                                       // 1683\n * // => false                                                                                                         // 1684\n *                                                                                                                     // 1685\n * _.isLength(Infinity);                                                                                               // 1686\n * // => false                                                                                                         // 1687\n *                                                                                                                     // 1688\n * _.isLength('3');                                                                                                    // 1689\n * // => false                                                                                                         // 1690\n */                                                                                                                    // 1691\nfunction isLength(value) {                                                                                             // 1692\n    return (                                                                                                           // 1693\n        typeof value == \"number\" &&                                                                                    // 1694\n        value > -1 &&                                                                                                  // 1695\n        value % 1 == 0 &&                                                                                              // 1696\n        value <= MAX_SAFE_INTEGER                                                                                      // 1697\n    );                                                                                                                 // 1698\n}                                                                                                                      // 1699\n                                                                                                                       // 1700\n/**                                                                                                                    // 1701\n * Checks if `value` is the                                                                                            // 1702\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 1703\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 1704\n *                                                                                                                     // 1705\n * @static                                                                                                             // 1706\n * @memberOf _                                                                                                         // 1707\n * @since 0.1.0                                                                                                        // 1708\n * @category Lang                                                                                                      // 1709\n * @param {*} value The value to check.                                                                                // 1710\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 1711\n * @example                                                                                                            // 1712\n *                                                                                                                     // 1713\n * _.isObject({});                                                                                                     // 1714\n * // => true                                                                                                          // 1715\n *                                                                                                                     // 1716\n * _.isObject([1, 2, 3]);                                                                                              // 1717\n * // => true                                                                                                          // 1718\n *                                                                                                                     // 1719\n * _.isObject(_.noop);                                                                                                 // 1720\n * // => true                                                                                                          // 1721\n *                                                                                                                     // 1722\n * _.isObject(null);                                                                                                   // 1723\n * // => false                                                                                                         // 1724\n */                                                                                                                    // 1725\nfunction isObject(value) {                                                                                             // 1726\n    var type = typeof value;                                                                                           // 1727\n    return !!value && (type == \"object\" || type == \"function\");                                                        // 1728\n}                                                                                                                      // 1729\n                                                                                                                       // 1730\n/**                                                                                                                    // 1731\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 1732\n * and has a `typeof` result of \"object\".                                                                              // 1733\n *                                                                                                                     // 1734\n * @static                                                                                                             // 1735\n * @memberOf _                                                                                                         // 1736\n * @since 4.0.0                                                                                                        // 1737\n * @category Lang                                                                                                      // 1738\n * @param {*} value The value to check.                                                                                // 1739\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 1740\n * @example                                                                                                            // 1741\n *                                                                                                                     // 1742\n * _.isObjectLike({});                                                                                                 // 1743\n * // => true                                                                                                          // 1744\n *                                                                                                                     // 1745\n * _.isObjectLike([1, 2, 3]);                                                                                          // 1746\n * // => true                                                                                                          // 1747\n *                                                                                                                     // 1748\n * _.isObjectLike(_.noop);                                                                                             // 1749\n * // => false                                                                                                         // 1750\n *                                                                                                                     // 1751\n * _.isObjectLike(null);                                                                                               // 1752\n * // => false                                                                                                         // 1753\n */                                                                                                                    // 1754\nfunction isObjectLike(value) {                                                                                         // 1755\n    return !!value && typeof value == \"object\";                                                                        // 1756\n}                                                                                                                      // 1757\n                                                                                                                       // 1758\n/**                                                                                                                    // 1759\n * Creates an array of the own enumerable property names of `object`.                                                  // 1760\n *                                                                                                                     // 1761\n * **Note:** Non-object values are coerced to objects. See the                                                         // 1762\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)                                              // 1763\n * for more details.                                                                                                   // 1764\n *                                                                                                                     // 1765\n * @static                                                                                                             // 1766\n * @since 0.1.0                                                                                                        // 1767\n * @memberOf _                                                                                                         // 1768\n * @category Object                                                                                                    // 1769\n * @param {Object} object The object to query.                                                                         // 1770\n * @returns {Array} Returns the array of property names.                                                               // 1771\n * @example                                                                                                            // 1772\n *                                                                                                                     // 1773\n * function Foo() {                                                                                                    // 1774\n *   this.a = 1;                                                                                                       // 1775\n *   this.b = 2;                                                                                                       // 1776\n * }                                                                                                                   // 1777\n *                                                                                                                     // 1778\n * Foo.prototype.c = 3;                                                                                                // 1779\n *                                                                                                                     // 1780\n * _.keys(new Foo);                                                                                                    // 1781\n * // => ['a', 'b'] (iteration order is not guaranteed)                                                                // 1782\n *                                                                                                                     // 1783\n * _.keys('hi');                                                                                                       // 1784\n * // => ['0', '1']                                                                                                    // 1785\n */                                                                                                                    // 1786\nfunction keys(object) {                                                                                                // 1787\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);                                             // 1788\n}                                                                                                                      // 1789\n                                                                                                                       // 1790\n/**                                                                                                                    // 1791\n * This method returns a new empty array.                                                                              // 1792\n *                                                                                                                     // 1793\n * @static                                                                                                             // 1794\n * @memberOf _                                                                                                         // 1795\n * @since 4.13.0                                                                                                       // 1796\n * @category Util                                                                                                      // 1797\n * @returns {Array} Returns the new empty array.                                                                       // 1798\n * @example                                                                                                            // 1799\n *                                                                                                                     // 1800\n * var arrays = _.times(2, _.stubArray);                                                                               // 1801\n *                                                                                                                     // 1802\n * console.log(arrays);                                                                                                // 1803\n * // => [[], []]                                                                                                      // 1804\n *                                                                                                                     // 1805\n * console.log(arrays[0] === arrays[1]);                                                                               // 1806\n * // => false                                                                                                         // 1807\n */                                                                                                                    // 1808\nfunction stubArray() {                                                                                                 // 1809\n    return [];                                                                                                         // 1810\n}                                                                                                                      // 1811\n                                                                                                                       // 1812\n/**                                                                                                                    // 1813\n * This method returns `false`.                                                                                        // 1814\n *                                                                                                                     // 1815\n * @static                                                                                                             // 1816\n * @memberOf _                                                                                                         // 1817\n * @since 4.13.0                                                                                                       // 1818\n * @category Util                                                                                                      // 1819\n * @returns {boolean} Returns `false`.                                                                                 // 1820\n * @example                                                                                                            // 1821\n *                                                                                                                     // 1822\n * _.times(2, _.stubFalse);                                                                                            // 1823\n * // => [false, false]                                                                                                // 1824\n */                                                                                                                    // 1825\nfunction stubFalse() {                                                                                                 // 1826\n    return false;                                                                                                      // 1827\n}                                                                                                                      // 1828\n                                                                                                                       // 1829\nmodule.exports = cloneDeep;                                                                                            // 1830\n                                                                                                                       // 1831\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"dot-object\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.3.1.o1og0g.wvr4q++os+web.browser+web.cordova/npm/node_modules/dot-object/package.json                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"dot-object\";                                                                                           // 1\nexports.version = \"1.5.4\";                                                                                             // 2\nexports.main = \"index\";                                                                                                // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/cultofcoders_grapher/node_modules/dot-object/index.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nfunction _process(v, mod) {                                                                                            // 3\n    var i;                                                                                                             // 4\n    var r;                                                                                                             // 5\n                                                                                                                       // 6\n    if (typeof mod === \"function\") {                                                                                   // 7\n        r = mod(v);                                                                                                    // 8\n        if (r !== undefined) {                                                                                         // 9\n            v = r;                                                                                                     // 10\n        }                                                                                                              // 11\n    } else if (Array.isArray(mod)) {                                                                                   // 12\n        for (i = 0; i < mod.length; i++) {                                                                             // 13\n            r = mod[i](v);                                                                                             // 14\n            if (r !== undefined) {                                                                                     // 15\n                v = r;                                                                                                 // 16\n            }                                                                                                          // 17\n        }                                                                                                              // 18\n    }                                                                                                                  // 19\n                                                                                                                       // 20\n    return v;                                                                                                          // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nfunction parseKey(key, val) {                                                                                          // 24\n    // detect negative index notation                                                                                  // 25\n    if (key[0] === \"-\" && Array.isArray(val) && /^-\\d+$/.test(key)) {                                                  // 26\n        return val.length + parseInt(key, 10);                                                                         // 27\n    }                                                                                                                  // 28\n    return key;                                                                                                        // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\nfunction isIndex(k) {                                                                                                  // 32\n    return /^\\d+/.test(k);                                                                                             // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nfunction parsePath(path, sep) {                                                                                        // 36\n    if (path.indexOf(\"[\") >= 0) {                                                                                      // 37\n        path = path.replace(/\\[/g, \".\").replace(/]/g, \"\");                                                             // 38\n    }                                                                                                                  // 39\n    return path.split(sep);                                                                                            // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\nfunction DotObject(seperator, override, useArray) {                                                                    // 43\n    if (!(this instanceof DotObject)) {                                                                                // 44\n        return new DotObject(seperator, override, useArray);                                                           // 45\n    }                                                                                                                  // 46\n                                                                                                                       // 47\n    if (typeof seperator === \"undefined\") seperator = \".\";                                                             // 48\n    if (typeof override === \"undefined\") override = false;                                                             // 49\n    if (typeof useArray === \"undefined\") useArray = true;                                                              // 50\n    this.seperator = seperator;                                                                                        // 51\n    this.override = override;                                                                                          // 52\n    this.useArray = useArray;                                                                                          // 53\n                                                                                                                       // 54\n    // contains touched arrays                                                                                         // 55\n    this.cleanup = [];                                                                                                 // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\nvar dotDefault = new DotObject(\".\", false, true);                                                                      // 59\nfunction wrap(method) {                                                                                                // 60\n    return function() {                                                                                                // 61\n        return dotDefault[method].apply(dotDefault, arguments);                                                        // 62\n    };                                                                                                                 // 63\n}                                                                                                                      // 64\n                                                                                                                       // 65\nDotObject.prototype._fill = function(a, obj, v, mod) {                                                                 // 66\n    var k = a.shift();                                                                                                 // 67\n                                                                                                                       // 68\n    if (a.length > 0) {                                                                                                // 69\n        obj[k] = obj[k] || (this.useArray && isIndex(a[0]) ? [] : {});                                                 // 70\n                                                                                                                       // 71\n        if (obj[k] !== Object(obj[k])) {                                                                               // 72\n            if (this.override) {                                                                                       // 73\n                obj[k] = {};                                                                                           // 74\n            } else {                                                                                                   // 75\n                throw new Error(                                                                                       // 76\n                    \"Trying to redefine `\" + k + \"` which is a \" + typeof obj[k]                                       // 77\n                );                                                                                                     // 78\n            }                                                                                                          // 79\n        }                                                                                                              // 80\n                                                                                                                       // 81\n        this._fill(a, obj[k], v, mod);                                                                                 // 82\n    } else {                                                                                                           // 83\n        if (                                                                                                           // 84\n            !this.override &&                                                                                          // 85\n            obj[k] === Object(obj[k]) &&                                                                               // 86\n            Object.keys(obj[k]).length                                                                                 // 87\n        ) {                                                                                                            // 88\n            throw new Error(\"Trying to redefine non-empty obj['\" + k + \"']\");                                          // 89\n        }                                                                                                              // 90\n                                                                                                                       // 91\n        obj[k] = _process(v, mod);                                                                                     // 92\n    }                                                                                                                  // 93\n};                                                                                                                     // 94\n                                                                                                                       // 95\n/**                                                                                                                    // 96\n *                                                                                                                     // 97\n * Converts an object with dotted-key/value pairs to it's expanded version                                             // 98\n *                                                                                                                     // 99\n * Optionally transformed by a set of modifiers.                                                                       // 100\n *                                                                                                                     // 101\n * Usage:                                                                                                              // 102\n *                                                                                                                     // 103\n *   var row = {                                                                                                       // 104\n *     'nr': 200,                                                                                                      // 105\n *     'doc.name': '  My Document  '                                                                                   // 106\n *   }                                                                                                                 // 107\n *                                                                                                                     // 108\n *   var mods = {                                                                                                      // 109\n *     'doc.name': [_s.trim, _s.underscored]                                                                           // 110\n *   }                                                                                                                 // 111\n *                                                                                                                     // 112\n *   dot.object(row, mods)                                                                                             // 113\n *                                                                                                                     // 114\n * @param {Object} obj                                                                                                 // 115\n * @param {Object} mods                                                                                                // 116\n */                                                                                                                    // 117\nDotObject.prototype.object = function(obj, mods) {                                                                     // 118\n    var self = this;                                                                                                   // 119\n                                                                                                                       // 120\n    Object.keys(obj).forEach(function(k) {                                                                             // 121\n        var mod = mods === undefined ? null : mods[k];                                                                 // 122\n        // normalize array notation.                                                                                   // 123\n        var ok = parsePath(k, self.seperator).join(self.seperator);                                                    // 124\n                                                                                                                       // 125\n        if (ok.indexOf(self.seperator) !== -1) {                                                                       // 126\n            self._fill(ok.split(self.seperator), obj, obj[k], mod);                                                    // 127\n            delete obj[k];                                                                                             // 128\n        } else if (self.override) {                                                                                    // 129\n            obj[k] = _process(obj[k], mod);                                                                            // 130\n        }                                                                                                              // 131\n    });                                                                                                                // 132\n                                                                                                                       // 133\n    return obj;                                                                                                        // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\n/**                                                                                                                    // 137\n * @param {String} path dotted path                                                                                    // 138\n * @param {String} v value to be set                                                                                   // 139\n * @param {Object} obj object to be modified                                                                           // 140\n * @param {Function|Array} mod optional modifier                                                                       // 141\n */                                                                                                                    // 142\nDotObject.prototype.str = function(path, v, obj, mod) {                                                                // 143\n    if (path.indexOf(this.seperator) !== -1) {                                                                         // 144\n        this._fill(path.split(this.seperator), obj, v, mod);                                                           // 145\n    } else if (!obj.hasOwnProperty(path) || this.override) {                                                           // 146\n        obj[path] = _process(v, mod);                                                                                  // 147\n    }                                                                                                                  // 148\n                                                                                                                       // 149\n    return obj;                                                                                                        // 150\n};                                                                                                                     // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n *                                                                                                                     // 154\n * Pick a value from an object using dot notation.                                                                     // 155\n *                                                                                                                     // 156\n * Optionally remove the value                                                                                         // 157\n *                                                                                                                     // 158\n * @param {String} path                                                                                                // 159\n * @param {Object} obj                                                                                                 // 160\n * @param {Boolean} remove                                                                                             // 161\n */                                                                                                                    // 162\nDotObject.prototype.pick = function(path, obj, remove) {                                                               // 163\n    var i;                                                                                                             // 164\n    var keys;                                                                                                          // 165\n    var val;                                                                                                           // 166\n    var key;                                                                                                           // 167\n    var cp;                                                                                                            // 168\n                                                                                                                       // 169\n    keys = parsePath(path, this.seperator);                                                                            // 170\n    for (i = 0; i < keys.length; i++) {                                                                                // 171\n        key = parseKey(keys[i], obj);                                                                                  // 172\n        if (obj && typeof obj === \"object\" && key in obj) {                                                            // 173\n            if (i === keys.length - 1) {                                                                               // 174\n                if (remove) {                                                                                          // 175\n                    val = obj[key];                                                                                    // 176\n                    delete obj[key];                                                                                   // 177\n                    if (Array.isArray(obj)) {                                                                          // 178\n                        cp = keys.slice(0, -1).join(\".\");                                                              // 179\n                        if (this.cleanup.indexOf(cp) === -1) {                                                         // 180\n                            this.cleanup.push(cp);                                                                     // 181\n                        }                                                                                              // 182\n                    }                                                                                                  // 183\n                    return val;                                                                                        // 184\n                } else {                                                                                               // 185\n                    return obj[key];                                                                                   // 186\n                }                                                                                                      // 187\n            } else {                                                                                                   // 188\n                obj = obj[key];                                                                                        // 189\n            }                                                                                                          // 190\n        } else {                                                                                                       // 191\n            return undefined;                                                                                          // 192\n        }                                                                                                              // 193\n    }                                                                                                                  // 194\n    if (remove && Array.isArray(obj)) {                                                                                // 195\n        obj = obj.filter(function(n) {                                                                                 // 196\n            return n !== undefined;                                                                                    // 197\n        });                                                                                                            // 198\n    }                                                                                                                  // 199\n    return obj;                                                                                                        // 200\n};                                                                                                                     // 201\n                                                                                                                       // 202\n/**                                                                                                                    // 203\n *                                                                                                                     // 204\n * Remove value from an object using dot notation.                                                                     // 205\n *                                                                                                                     // 206\n * @param {String} path                                                                                                // 207\n * @param {Object} obj                                                                                                 // 208\n * @return {Mixed} The removed value                                                                                   // 209\n */                                                                                                                    // 210\nDotObject.prototype.remove = function(path, obj) {                                                                     // 211\n    var i;                                                                                                             // 212\n                                                                                                                       // 213\n    this.cleanup = [];                                                                                                 // 214\n    if (Array.isArray(path)) {                                                                                         // 215\n        for (i = 0; i < path.length; i++) {                                                                            // 216\n            this.pick(path[i], obj, true);                                                                             // 217\n        }                                                                                                              // 218\n        this._cleanup(obj);                                                                                            // 219\n        return obj;                                                                                                    // 220\n    } else {                                                                                                           // 221\n        return this.pick(path, obj, true);                                                                             // 222\n    }                                                                                                                  // 223\n};                                                                                                                     // 224\n                                                                                                                       // 225\nDotObject.prototype._cleanup = function(obj) {                                                                         // 226\n    var ret;                                                                                                           // 227\n    var i;                                                                                                             // 228\n    var keys;                                                                                                          // 229\n    var root;                                                                                                          // 230\n    if (this.cleanup.length) {                                                                                         // 231\n        for (i = 0; i < this.cleanup.length; i++) {                                                                    // 232\n            keys = this.cleanup[i].split(\".\");                                                                         // 233\n            root = keys.splice(0, -1).join(\".\");                                                                       // 234\n            ret = root ? this.pick(root, obj) : obj;                                                                   // 235\n            ret = ret[keys[0]].filter(function(v) {                                                                    // 236\n                return v !== undefined;                                                                                // 237\n            });                                                                                                        // 238\n            this.set(this.cleanup[i], ret, obj);                                                                       // 239\n        }                                                                                                              // 240\n        this.cleanup = [];                                                                                             // 241\n    }                                                                                                                  // 242\n};                                                                                                                     // 243\n                                                                                                                       // 244\n// alias method                                                                                                        // 245\nDotObject.prototype.del = DotObject.prototype.remove;                                                                  // 246\n                                                                                                                       // 247\n/**                                                                                                                    // 248\n *                                                                                                                     // 249\n * Move a property from one place to the other.                                                                        // 250\n *                                                                                                                     // 251\n * If the source path does not exist (undefined)                                                                       // 252\n * the target property will not be set.                                                                                // 253\n *                                                                                                                     // 254\n * @param {String} source                                                                                              // 255\n * @param {String} target                                                                                              // 256\n * @param {Object} obj                                                                                                 // 257\n * @param {Function|Array} mods                                                                                        // 258\n * @param {Boolean} merge                                                                                              // 259\n */                                                                                                                    // 260\nDotObject.prototype.move = function(source, target, obj, mods, merge) {                                                // 261\n    if (typeof mods === \"function\" || Array.isArray(mods)) {                                                           // 262\n        this.set(                                                                                                      // 263\n            target,                                                                                                    // 264\n            _process(this.pick(source, obj, true), mods),                                                              // 265\n            obj,                                                                                                       // 266\n            merge                                                                                                      // 267\n        );                                                                                                             // 268\n    } else {                                                                                                           // 269\n        merge = mods;                                                                                                  // 270\n        this.set(target, this.pick(source, obj, true), obj, merge);                                                    // 271\n    }                                                                                                                  // 272\n                                                                                                                       // 273\n    return obj;                                                                                                        // 274\n};                                                                                                                     // 275\n                                                                                                                       // 276\n/**                                                                                                                    // 277\n *                                                                                                                     // 278\n * Transfer a property from one object to another object.                                                              // 279\n *                                                                                                                     // 280\n * If the source path does not exist (undefined)                                                                       // 281\n * the property on the other object will not be set.                                                                   // 282\n *                                                                                                                     // 283\n * @param {String} source                                                                                              // 284\n * @param {String} target                                                                                              // 285\n * @param {Object} obj1                                                                                                // 286\n * @param {Object} obj2                                                                                                // 287\n * @param {Function|Array} mods                                                                                        // 288\n * @param {Boolean} merge                                                                                              // 289\n */                                                                                                                    // 290\nDotObject.prototype.transfer = function(                                                                               // 291\n    source,                                                                                                            // 292\n    target,                                                                                                            // 293\n    obj1,                                                                                                              // 294\n    obj2,                                                                                                              // 295\n    mods,                                                                                                              // 296\n    merge                                                                                                              // 297\n) {                                                                                                                    // 298\n    if (typeof mods === \"function\" || Array.isArray(mods)) {                                                           // 299\n        this.set(                                                                                                      // 300\n            target,                                                                                                    // 301\n            _process(this.pick(source, obj1, true), mods),                                                             // 302\n            obj2,                                                                                                      // 303\n            merge                                                                                                      // 304\n        );                                                                                                             // 305\n    } else {                                                                                                           // 306\n        merge = mods;                                                                                                  // 307\n        this.set(target, this.pick(source, obj1, true), obj2, merge);                                                  // 308\n    }                                                                                                                  // 309\n                                                                                                                       // 310\n    return obj2;                                                                                                       // 311\n};                                                                                                                     // 312\n                                                                                                                       // 313\n/**                                                                                                                    // 314\n *                                                                                                                     // 315\n * Copy a property from one object to another object.                                                                  // 316\n *                                                                                                                     // 317\n * If the source path does not exist (undefined)                                                                       // 318\n * the property on the other object will not be set.                                                                   // 319\n *                                                                                                                     // 320\n * @param {String} source                                                                                              // 321\n * @param {String} target                                                                                              // 322\n * @param {Object} obj1                                                                                                // 323\n * @param {Object} obj2                                                                                                // 324\n * @param {Function|Array} mods                                                                                        // 325\n * @param {Boolean} merge                                                                                              // 326\n */                                                                                                                    // 327\nDotObject.prototype.copy = function(source, target, obj1, obj2, mods, merge) {                                         // 328\n    if (typeof mods === \"function\" || Array.isArray(mods)) {                                                           // 329\n        this.set(                                                                                                      // 330\n            target,                                                                                                    // 331\n            _process(                                                                                                  // 332\n                // clone what is picked                                                                                // 333\n                JSON.parse(JSON.stringify(this.pick(source, obj1, false))),                                            // 334\n                mods                                                                                                   // 335\n            ),                                                                                                         // 336\n            obj2,                                                                                                      // 337\n            merge                                                                                                      // 338\n        );                                                                                                             // 339\n    } else {                                                                                                           // 340\n        merge = mods;                                                                                                  // 341\n        this.set(target, this.pick(source, obj1, false), obj2, merge);                                                 // 342\n    }                                                                                                                  // 343\n                                                                                                                       // 344\n    return obj2;                                                                                                       // 345\n};                                                                                                                     // 346\n                                                                                                                       // 347\nfunction isObject(val) {                                                                                               // 348\n    return Object.prototype.toString.call(val) === \"[object Object]\";                                                  // 349\n}                                                                                                                      // 350\n                                                                                                                       // 351\n/**                                                                                                                    // 352\n *                                                                                                                     // 353\n * Set a property on an object using dot notation.                                                                     // 354\n *                                                                                                                     // 355\n * @param {String} path                                                                                                // 356\n * @param {Mixed} val                                                                                                  // 357\n * @param {Object} obj                                                                                                 // 358\n * @param {Boolean} merge                                                                                              // 359\n */                                                                                                                    // 360\nDotObject.prototype.set = function(path, val, obj, merge) {                                                            // 361\n    var i;                                                                                                             // 362\n    var k;                                                                                                             // 363\n    var keys;                                                                                                          // 364\n    var key;                                                                                                           // 365\n                                                                                                                       // 366\n    // Do not operate if the value is undefined.                                                                       // 367\n    if (typeof val === \"undefined\") {                                                                                  // 368\n        return obj;                                                                                                    // 369\n    }                                                                                                                  // 370\n    keys = parsePath(path, this.seperator);                                                                            // 371\n                                                                                                                       // 372\n    for (i = 0; i < keys.length; i++) {                                                                                // 373\n        key = keys[i];                                                                                                 // 374\n        if (i === keys.length - 1) {                                                                                   // 375\n            if (merge && isObject(val) && isObject(obj[key])) {                                                        // 376\n                for (k in val) {                                                                                       // 377\n                    if (val.hasOwnProperty(k)) {                                                                       // 378\n                        obj[key][k] = val[k];                                                                          // 379\n                    }                                                                                                  // 380\n                }                                                                                                      // 381\n            } else if (merge && Array.isArray(obj[key]) && Array.isArray(val)) {                                       // 382\n                for (var j = 0; j < val.length; j++) {                                                                 // 383\n                    obj[keys[i]].push(val[j]);                                                                         // 384\n                }                                                                                                      // 385\n            } else {                                                                                                   // 386\n                obj[key] = val;                                                                                        // 387\n            }                                                                                                          // 388\n        } else if (                                                                                                    // 389\n            // force the value to be an object                                                                         // 390\n            !obj.hasOwnProperty(key) ||                                                                                // 391\n            (!isObject(obj[key]) && !Array.isArray(obj[key]))                                                          // 392\n        ) {                                                                                                            // 393\n            // initialize as array if next key is numeric                                                              // 394\n            if (/^\\d+$/.test(keys[i + 1])) {                                                                           // 395\n                obj[key] = [];                                                                                         // 396\n            } else {                                                                                                   // 397\n                obj[key] = {};                                                                                         // 398\n            }                                                                                                          // 399\n        }                                                                                                              // 400\n        obj = obj[key];                                                                                                // 401\n    }                                                                                                                  // 402\n    return obj;                                                                                                        // 403\n};                                                                                                                     // 404\n                                                                                                                       // 405\n/**                                                                                                                    // 406\n *                                                                                                                     // 407\n * Transform an object                                                                                                 // 408\n *                                                                                                                     // 409\n * Usage:                                                                                                              // 410\n *                                                                                                                     // 411\n *   var obj = {                                                                                                       // 412\n *     \"id\": 1,                                                                                                        // 413\n *    \"some\": {                                                                                                        // 414\n *      \"thing\": \"else\"                                                                                                // 415\n *    }                                                                                                                // 416\n *   }                                                                                                                 // 417\n *                                                                                                                     // 418\n *   var transform = {                                                                                                 // 419\n *     \"id\": \"nr\",                                                                                                     // 420\n *    \"some.thing\": \"name\"                                                                                             // 421\n *   }                                                                                                                 // 422\n *                                                                                                                     // 423\n *   var tgt = dot.transform(transform, obj)                                                                           // 424\n *                                                                                                                     // 425\n * @param {Object} recipe Transform recipe                                                                             // 426\n * @param {Object} obj Object to be transformed                                                                        // 427\n * @param {Array} mods modifiers for the target                                                                        // 428\n */                                                                                                                    // 429\nDotObject.prototype.transform = function(recipe, obj, tgt) {                                                           // 430\n    obj = obj || {};                                                                                                   // 431\n    tgt = tgt || {};                                                                                                   // 432\n    Object.keys(recipe).forEach(                                                                                       // 433\n        function(key) {                                                                                                // 434\n            this.set(recipe[key], this.pick(key, obj), tgt);                                                           // 435\n        }.bind(this)                                                                                                   // 436\n    );                                                                                                                 // 437\n    return tgt;                                                                                                        // 438\n};                                                                                                                     // 439\n                                                                                                                       // 440\n/**                                                                                                                    // 441\n *                                                                                                                     // 442\n * Convert object to dotted-key/value pair                                                                             // 443\n *                                                                                                                     // 444\n * Usage:                                                                                                              // 445\n *                                                                                                                     // 446\n *   var tgt = dot.dot(obj)                                                                                            // 447\n *                                                                                                                     // 448\n *   or                                                                                                                // 449\n *                                                                                                                     // 450\n *   var tgt = {}                                                                                                      // 451\n *   dot.dot(obj, tgt)                                                                                                 // 452\n *                                                                                                                     // 453\n * @param {Object} obj source object                                                                                   // 454\n * @param {Object} tgt target object                                                                                   // 455\n * @param {Array} path path array (internal)                                                                           // 456\n */                                                                                                                    // 457\nDotObject.prototype.dot = function(obj, tgt, path) {                                                                   // 458\n    tgt = tgt || {};                                                                                                   // 459\n    path = path || [];                                                                                                 // 460\n    Object.keys(obj).forEach(                                                                                          // 461\n        function(key) {                                                                                                // 462\n            if (                                                                                                       // 463\n                (Object(obj[key]) === obj[key] &&                                                                      // 464\n                    Object.prototype.toString.call(obj[key]) ===                                                       // 465\n                        \"[object Object]\") ||                                                                          // 466\n                Object.prototype.toString.call(obj[key]) === \"[object Array]\"                                          // 467\n            ) {                                                                                                        // 468\n                return this.dot(obj[key], tgt, path.concat(key));                                                      // 469\n            } else {                                                                                                   // 470\n                tgt[path.concat(key).join(this.seperator)] = obj[key];                                                 // 471\n            }                                                                                                          // 472\n        }.bind(this)                                                                                                   // 473\n    );                                                                                                                 // 474\n    return tgt;                                                                                                        // 475\n};                                                                                                                     // 476\n                                                                                                                       // 477\nDotObject.pick = wrap(\"pick\");                                                                                         // 478\nDotObject.move = wrap(\"move\");                                                                                         // 479\nDotObject.transfer = wrap(\"transfer\");                                                                                 // 480\nDotObject.transform = wrap(\"transform\");                                                                               // 481\nDotObject.copy = wrap(\"copy\");                                                                                         // 482\nDotObject.object = wrap(\"object\");                                                                                     // 483\nDotObject.str = wrap(\"str\");                                                                                           // 484\nDotObject.set = wrap(\"set\");                                                                                           // 485\nDotObject.del = DotObject.remove = wrap(\"remove\");                                                                     // 486\nDotObject.dot = wrap(\"dot\");                                                                                           // 487\n[\"override\", \"overwrite\"].forEach(function(prop) {                                                                     // 488\n    Object.defineProperty(DotObject, prop, {                                                                           // 489\n        get: function() {                                                                                              // 490\n            return dotDefault.override;                                                                                // 491\n        },                                                                                                             // 492\n        set: function(val) {                                                                                           // 493\n            dotDefault.override = !!val;                                                                               // 494\n        }                                                                                                              // 495\n    });                                                                                                                // 496\n});                                                                                                                    // 497\n                                                                                                                       // 498\nObject.defineProperty(DotObject, \"useArray\", {                                                                         // 499\n    get: function() {                                                                                                  // 500\n        return dotDefault.useArray;                                                                                    // 501\n    },                                                                                                                 // 502\n    set: function(val) {                                                                                               // 503\n        dotDefault.useArray = val;                                                                                     // 504\n    }                                                                                                                  // 505\n});                                                                                                                    // 506\n                                                                                                                       // 507\nDotObject._process = _process;                                                                                         // 508\n                                                                                                                       // 509\nmodule.exports = DotObject;                                                                                            // 510\n                                                                                                                       // 511\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"sift\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.3.1.o1og0g.wvr4q++os+web.browser+web.cordova/npm/node_modules/sift/package.json                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"sift\";                                                                                                 // 1\nexports.version = \"3.2.6\";                                                                                             // 2\nexports.main = \"./sift.js\";                                                                                            // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"sift.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/cultofcoders_grapher/node_modules/sift/sift.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * Sift 3.x                                                                                                            // 2\n *                                                                                                                     // 3\n * Copryright 2015, Craig Condon                                                                                       // 4\n * Licensed under MIT                                                                                                  // 5\n *                                                                                                                     // 6\n * Filter JavaScript objects with mongodb queries                                                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n(function() {                                                                                                          // 10\n    \"use strict\";                                                                                                      // 11\n                                                                                                                       // 12\n    /**                                                                                                                // 13\n     */                                                                                                                // 14\n                                                                                                                       // 15\n    function isFunction(value) {                                                                                       // 16\n        return typeof value === \"function\";                                                                            // 17\n    }                                                                                                                  // 18\n                                                                                                                       // 19\n    /**                                                                                                                // 20\n     */                                                                                                                // 21\n                                                                                                                       // 22\n    function isArray(value) {                                                                                          // 23\n        return Object.prototype.toString.call(value) === \"[object Array]\";                                             // 24\n    }                                                                                                                  // 25\n                                                                                                                       // 26\n    /**                                                                                                                // 27\n     */                                                                                                                // 28\n                                                                                                                       // 29\n    function comparable(value) {                                                                                       // 30\n        if (value instanceof Date) {                                                                                   // 31\n            return value.getTime();                                                                                    // 32\n        } else if (value instanceof Array) {                                                                           // 33\n            return value.map(comparable);                                                                              // 34\n        } else {                                                                                                       // 35\n            return value;                                                                                              // 36\n        }                                                                                                              // 37\n    }                                                                                                                  // 38\n                                                                                                                       // 39\n    function get(obj, key) {                                                                                           // 40\n        if (obj.get) return obj.get(key);                                                                              // 41\n        return obj[key];                                                                                               // 42\n    }                                                                                                                  // 43\n                                                                                                                       // 44\n    /**                                                                                                                // 45\n     */                                                                                                                // 46\n                                                                                                                       // 47\n    function or(validator) {                                                                                           // 48\n        return function(a, b) {                                                                                        // 49\n            if (!isArray(b) || !b.length) return validator(a, b);                                                      // 50\n            for (var i = 0, n = b.length; i < n; i++)                                                                  // 51\n                if (validator(a, get(b, i))) return true;                                                              // 52\n            return false;                                                                                              // 53\n        };                                                                                                             // 54\n    }                                                                                                                  // 55\n                                                                                                                       // 56\n    /**                                                                                                                // 57\n     */                                                                                                                // 58\n                                                                                                                       // 59\n    function and(validator) {                                                                                          // 60\n        return function(a, b) {                                                                                        // 61\n            if (!isArray(b) || !b.length) return validator(a, b);                                                      // 62\n            for (var i = 0, n = b.length; i < n; i++)                                                                  // 63\n                if (!validator(a, get(b, i))) return false;                                                            // 64\n            return true;                                                                                               // 65\n        };                                                                                                             // 66\n    }                                                                                                                  // 67\n                                                                                                                       // 68\n    function validate(validator, b) {                                                                                  // 69\n        return validator.v(validator.a, b);                                                                            // 70\n    }                                                                                                                  // 71\n                                                                                                                       // 72\n    var operator = {                                                                                                   // 73\n        /**                                                                                                            // 74\n         */                                                                                                            // 75\n                                                                                                                       // 76\n        $eq: or(function(a, b) {                                                                                       // 77\n            return a(b);                                                                                               // 78\n        }),                                                                                                            // 79\n                                                                                                                       // 80\n        /**                                                                                                            // 81\n         */                                                                                                            // 82\n                                                                                                                       // 83\n        $ne: and(function(a, b) {                                                                                      // 84\n            return !a(b);                                                                                              // 85\n        }),                                                                                                            // 86\n                                                                                                                       // 87\n        /**                                                                                                            // 88\n         */                                                                                                            // 89\n                                                                                                                       // 90\n        $or: function(a, b) {                                                                                          // 91\n            for (var i = 0, n = a.length; i < n; i++)                                                                  // 92\n                if (validate(get(a, i), b)) return true;                                                               // 93\n            return false;                                                                                              // 94\n        },                                                                                                             // 95\n                                                                                                                       // 96\n        /**                                                                                                            // 97\n         */                                                                                                            // 98\n                                                                                                                       // 99\n        $gt: or(function(a, b) {                                                                                       // 100\n            return sift.compare(comparable(b), a) > 0;                                                                 // 101\n        }),                                                                                                            // 102\n                                                                                                                       // 103\n        /**                                                                                                            // 104\n         */                                                                                                            // 105\n                                                                                                                       // 106\n        $gte: or(function(a, b) {                                                                                      // 107\n            return sift.compare(comparable(b), a) >= 0;                                                                // 108\n        }),                                                                                                            // 109\n                                                                                                                       // 110\n        /**                                                                                                            // 111\n         */                                                                                                            // 112\n                                                                                                                       // 113\n        $lt: or(function(a, b) {                                                                                       // 114\n            return sift.compare(comparable(b), a) < 0;                                                                 // 115\n        }),                                                                                                            // 116\n                                                                                                                       // 117\n        /**                                                                                                            // 118\n         */                                                                                                            // 119\n                                                                                                                       // 120\n        $lte: or(function(a, b) {                                                                                      // 121\n            return sift.compare(comparable(b), a) <= 0;                                                                // 122\n        }),                                                                                                            // 123\n                                                                                                                       // 124\n        /**                                                                                                            // 125\n         */                                                                                                            // 126\n                                                                                                                       // 127\n        $mod: or(function(a, b) {                                                                                      // 128\n            return b % a[0] == a[1];                                                                                   // 129\n        }),                                                                                                            // 130\n                                                                                                                       // 131\n        /**                                                                                                            // 132\n         */                                                                                                            // 133\n                                                                                                                       // 134\n        $in: function(a, b) {                                                                                          // 135\n            if (b instanceof Array) {                                                                                  // 136\n                for (var i = b.length; i--; ) {                                                                        // 137\n                    if (~a.indexOf(comparable(get(b, i)))) return true;                                                // 138\n                }                                                                                                      // 139\n            } else {                                                                                                   // 140\n                return !!~a.indexOf(comparable(b));                                                                    // 141\n            }                                                                                                          // 142\n                                                                                                                       // 143\n            return false;                                                                                              // 144\n        },                                                                                                             // 145\n                                                                                                                       // 146\n        /**                                                                                                            // 147\n         */                                                                                                            // 148\n                                                                                                                       // 149\n        $nin: function(a, b) {                                                                                         // 150\n            return !operator.$in(a, b);                                                                                // 151\n        },                                                                                                             // 152\n                                                                                                                       // 153\n        /**                                                                                                            // 154\n         */                                                                                                            // 155\n                                                                                                                       // 156\n        $not: function(a, b) {                                                                                         // 157\n            return !validate(a, b);                                                                                    // 158\n        },                                                                                                             // 159\n                                                                                                                       // 160\n        /**                                                                                                            // 161\n         */                                                                                                            // 162\n                                                                                                                       // 163\n        $type: function(a, b) {                                                                                        // 164\n            return b != void 0 ? b instanceof a || b.constructor == a : false;                                         // 165\n        },                                                                                                             // 166\n                                                                                                                       // 167\n        /**                                                                                                            // 168\n         */                                                                                                            // 169\n                                                                                                                       // 170\n        $all: function(a, b) {                                                                                         // 171\n            if (!b) b = [];                                                                                            // 172\n            for (var i = a.length; i--; ) {                                                                            // 173\n                if (!~comparable(b).indexOf(get(a, i))) return false;                                                  // 174\n            }                                                                                                          // 175\n            return true;                                                                                               // 176\n        },                                                                                                             // 177\n                                                                                                                       // 178\n        /**                                                                                                            // 179\n         */                                                                                                            // 180\n                                                                                                                       // 181\n        $size: function(a, b) {                                                                                        // 182\n            return b ? a === b.length : false;                                                                         // 183\n        },                                                                                                             // 184\n                                                                                                                       // 185\n        /**                                                                                                            // 186\n         */                                                                                                            // 187\n                                                                                                                       // 188\n        $nor: function(a, b) {                                                                                         // 189\n            // todo - this suffice? return !operator.$in(a)                                                            // 190\n            for (var i = 0, n = a.length; i < n; i++)                                                                  // 191\n                if (validate(get(a, i), b)) return false;                                                              // 192\n            return true;                                                                                               // 193\n        },                                                                                                             // 194\n                                                                                                                       // 195\n        /**                                                                                                            // 196\n         */                                                                                                            // 197\n                                                                                                                       // 198\n        $and: function(a, b) {                                                                                         // 199\n            for (var i = 0, n = a.length; i < n; i++)                                                                  // 200\n                if (!validate(get(a, i), b)) return false;                                                             // 201\n            return true;                                                                                               // 202\n        },                                                                                                             // 203\n                                                                                                                       // 204\n        /**                                                                                                            // 205\n         */                                                                                                            // 206\n                                                                                                                       // 207\n        $regex: or(function(a, b) {                                                                                    // 208\n            return typeof b === \"string\" && a.test(b);                                                                 // 209\n        }),                                                                                                            // 210\n                                                                                                                       // 211\n        /**                                                                                                            // 212\n         */                                                                                                            // 213\n                                                                                                                       // 214\n        $where: function(a, b) {                                                                                       // 215\n            return a.call(b, b);                                                                                       // 216\n        },                                                                                                             // 217\n                                                                                                                       // 218\n        /**                                                                                                            // 219\n         */                                                                                                            // 220\n                                                                                                                       // 221\n        $elemMatch: function(a, b) {                                                                                   // 222\n            if (isArray(b)) return !!~search(b, a);                                                                    // 223\n            return validate(a, b);                                                                                     // 224\n        },                                                                                                             // 225\n                                                                                                                       // 226\n        /**                                                                                                            // 227\n         */                                                                                                            // 228\n                                                                                                                       // 229\n        $exists: function(a, b) {                                                                                      // 230\n            return (b != void 0) === a;                                                                                // 231\n        }                                                                                                              // 232\n    };                                                                                                                 // 233\n                                                                                                                       // 234\n    /**                                                                                                                // 235\n     */                                                                                                                // 236\n                                                                                                                       // 237\n    var prepare = {                                                                                                    // 238\n        /**                                                                                                            // 239\n         */                                                                                                            // 240\n                                                                                                                       // 241\n        $eq: function(a) {                                                                                             // 242\n            if (a instanceof RegExp) {                                                                                 // 243\n                return function(b) {                                                                                   // 244\n                    return typeof b === \"string\" && a.test(b);                                                         // 245\n                };                                                                                                     // 246\n            } else if (a instanceof Function) {                                                                        // 247\n                return a;                                                                                              // 248\n            } else if (isArray(a) && !a.length) {                                                                      // 249\n                // Special case of a == []                                                                             // 250\n                return function(b) {                                                                                   // 251\n                    return isArray(b) && !b.length;                                                                    // 252\n                };                                                                                                     // 253\n            } else if (a === null) {                                                                                   // 254\n                return function(b) {                                                                                   // 255\n                    //will match both null and undefined                                                               // 256\n                    return b == null;                                                                                  // 257\n                };                                                                                                     // 258\n            }                                                                                                          // 259\n                                                                                                                       // 260\n            return function(b) {                                                                                       // 261\n                return sift.compare(comparable(b), a) === 0;                                                           // 262\n            };                                                                                                         // 263\n        },                                                                                                             // 264\n                                                                                                                       // 265\n        /**                                                                                                            // 266\n         */                                                                                                            // 267\n                                                                                                                       // 268\n        $ne: function(a) {                                                                                             // 269\n            return prepare.$eq(a);                                                                                     // 270\n        },                                                                                                             // 271\n                                                                                                                       // 272\n        /**                                                                                                            // 273\n         */                                                                                                            // 274\n                                                                                                                       // 275\n        $and: function(a) {                                                                                            // 276\n            return a.map(parse);                                                                                       // 277\n        },                                                                                                             // 278\n                                                                                                                       // 279\n        /**                                                                                                            // 280\n         */                                                                                                            // 281\n                                                                                                                       // 282\n        $or: function(a) {                                                                                             // 283\n            return a.map(parse);                                                                                       // 284\n        },                                                                                                             // 285\n                                                                                                                       // 286\n        /**                                                                                                            // 287\n         */                                                                                                            // 288\n                                                                                                                       // 289\n        $nor: function(a) {                                                                                            // 290\n            return a.map(parse);                                                                                       // 291\n        },                                                                                                             // 292\n                                                                                                                       // 293\n        /**                                                                                                            // 294\n         */                                                                                                            // 295\n                                                                                                                       // 296\n        $not: function(a) {                                                                                            // 297\n            return parse(a);                                                                                           // 298\n        },                                                                                                             // 299\n                                                                                                                       // 300\n        /**                                                                                                            // 301\n         */                                                                                                            // 302\n                                                                                                                       // 303\n        $regex: function(a, query) {                                                                                   // 304\n            return new RegExp(a, query.$options);                                                                      // 305\n        },                                                                                                             // 306\n                                                                                                                       // 307\n        /**                                                                                                            // 308\n         */                                                                                                            // 309\n                                                                                                                       // 310\n        $where: function(a) {                                                                                          // 311\n            return typeof a === \"string\"                                                                               // 312\n                ? new Function(\"obj\", \"return \" + a)                                                                   // 313\n                : a;                                                                                                   // 314\n        },                                                                                                             // 315\n                                                                                                                       // 316\n        /**                                                                                                            // 317\n         */                                                                                                            // 318\n                                                                                                                       // 319\n        $elemMatch: function(a) {                                                                                      // 320\n            return parse(a);                                                                                           // 321\n        },                                                                                                             // 322\n                                                                                                                       // 323\n        /**                                                                                                            // 324\n         */                                                                                                            // 325\n                                                                                                                       // 326\n        $exists: function(a) {                                                                                         // 327\n            return !!a;                                                                                                // 328\n        }                                                                                                              // 329\n    };                                                                                                                 // 330\n                                                                                                                       // 331\n    /**                                                                                                                // 332\n     */                                                                                                                // 333\n                                                                                                                       // 334\n    function search(array, validator) {                                                                                // 335\n        for (var i = 0; i < array.length; i++) {                                                                       // 336\n            if (validate(validator, get(array, i))) {                                                                  // 337\n                return i;                                                                                              // 338\n            }                                                                                                          // 339\n        }                                                                                                              // 340\n                                                                                                                       // 341\n        return -1;                                                                                                     // 342\n    }                                                                                                                  // 343\n                                                                                                                       // 344\n    /**                                                                                                                // 345\n     */                                                                                                                // 346\n                                                                                                                       // 347\n    function createValidator(a, validate) {                                                                            // 348\n        return { a: a, v: validate };                                                                                  // 349\n    }                                                                                                                  // 350\n                                                                                                                       // 351\n    /**                                                                                                                // 352\n     */                                                                                                                // 353\n                                                                                                                       // 354\n    function nestedValidator(a, b) {                                                                                   // 355\n        var values = [];                                                                                               // 356\n        findValues(b, a.k, 0, values);                                                                                 // 357\n                                                                                                                       // 358\n        if (values.length === 1) {                                                                                     // 359\n            return validate(a.nv, values[0]);                                                                          // 360\n        }                                                                                                              // 361\n                                                                                                                       // 362\n        return !!~search(values, a.nv);                                                                                // 363\n    }                                                                                                                  // 364\n                                                                                                                       // 365\n    /**                                                                                                                // 366\n     */                                                                                                                // 367\n                                                                                                                       // 368\n    function findValues(current, keypath, index, values) {                                                             // 369\n        if (index === keypath.length || current == void 0) {                                                           // 370\n            values.push(current);                                                                                      // 371\n            return;                                                                                                    // 372\n        }                                                                                                              // 373\n                                                                                                                       // 374\n        var k = get(keypath, index);                                                                                   // 375\n                                                                                                                       // 376\n        // ensure that if current is an array, that the current key                                                    // 377\n        // is NOT an array index. This sort of thing needs to work:                                                    // 378\n        // sift({'foo.0':42}, [{foo: [42]}]);                                                                          // 379\n        if (isArray(current) && isNaN(Number(k))) {                                                                    // 380\n            for (var i = 0, n = current.length; i < n; i++) {                                                          // 381\n                findValues(get(current, i), keypath, index, values);                                                   // 382\n            }                                                                                                          // 383\n        } else {                                                                                                       // 384\n            findValues(get(current, k), keypath, index + 1, values);                                                   // 385\n        }                                                                                                              // 386\n    }                                                                                                                  // 387\n                                                                                                                       // 388\n    /**                                                                                                                // 389\n     */                                                                                                                // 390\n                                                                                                                       // 391\n    function createNestedValidator(keypath, a) {                                                                       // 392\n        return { a: { k: keypath, nv: a }, v: nestedValidator };                                                       // 393\n    }                                                                                                                  // 394\n                                                                                                                       // 395\n    /**                                                                                                                // 396\n     * flatten the query                                                                                               // 397\n     */                                                                                                                // 398\n                                                                                                                       // 399\n    function parse(query) {                                                                                            // 400\n        query = comparable(query);                                                                                     // 401\n                                                                                                                       // 402\n        if (                                                                                                           // 403\n            !query ||                                                                                                  // 404\n            (query.constructor.toString() !== \"Object\" &&                                                              // 405\n                query.constructor                                                                                      // 406\n                    .toString()                                                                                        // 407\n                    .replace(/\\n/g, \"\")                                                                                // 408\n                    .replace(/ /g, \"\") !== \"functionObject(){[nativecode]}\")                                           // 409\n        ) {                                                                                                            // 410\n            // cross browser support                                                                                   // 411\n            query = { $eq: query };                                                                                    // 412\n        }                                                                                                              // 413\n                                                                                                                       // 414\n        var validators = [];                                                                                           // 415\n                                                                                                                       // 416\n        for (var key in query) {                                                                                       // 417\n            var a = query[key];                                                                                        // 418\n                                                                                                                       // 419\n            if (key === \"$options\") continue;                                                                          // 420\n                                                                                                                       // 421\n            if (operator[key]) {                                                                                       // 422\n                if (prepare[key]) a = prepare[key](a, query);                                                          // 423\n                validators.push(createValidator(comparable(a), operator[key]));                                        // 424\n            } else {                                                                                                   // 425\n                if (key.charCodeAt(0) === 36) {                                                                        // 426\n                    throw new Error(\"Unknown operation \" + key);                                                       // 427\n                }                                                                                                      // 428\n                                                                                                                       // 429\n                validators.push(                                                                                       // 430\n                    createNestedValidator(key.split(\".\"), parse(a))                                                    // 431\n                );                                                                                                     // 432\n            }                                                                                                          // 433\n        }                                                                                                              // 434\n                                                                                                                       // 435\n        return validators.length === 1                                                                                 // 436\n            ? validators[0]                                                                                            // 437\n            : createValidator(validators, operator.$and);                                                              // 438\n    }                                                                                                                  // 439\n                                                                                                                       // 440\n    /**                                                                                                                // 441\n     */                                                                                                                // 442\n                                                                                                                       // 443\n    function createRootValidator(query, getter) {                                                                      // 444\n        var validator = parse(query);                                                                                  // 445\n        if (getter) {                                                                                                  // 446\n            validator = {                                                                                              // 447\n                a: validator,                                                                                          // 448\n                v: function(a, b) {                                                                                    // 449\n                    return validate(a, getter(b));                                                                     // 450\n                }                                                                                                      // 451\n            };                                                                                                         // 452\n        }                                                                                                              // 453\n        return validator;                                                                                              // 454\n    }                                                                                                                  // 455\n                                                                                                                       // 456\n    /**                                                                                                                // 457\n     */                                                                                                                // 458\n                                                                                                                       // 459\n    function sift(query, array, getter) {                                                                              // 460\n        if (isFunction(array)) {                                                                                       // 461\n            getter = array;                                                                                            // 462\n            array = void 0;                                                                                            // 463\n        }                                                                                                              // 464\n                                                                                                                       // 465\n        var validator = createRootValidator(query, getter);                                                            // 466\n                                                                                                                       // 467\n        function filter(b) {                                                                                           // 468\n            return validate(validator, b);                                                                             // 469\n        }                                                                                                              // 470\n                                                                                                                       // 471\n        if (array) {                                                                                                   // 472\n            return array.filter(filter);                                                                               // 473\n        }                                                                                                              // 474\n                                                                                                                       // 475\n        return filter;                                                                                                 // 476\n    }                                                                                                                  // 477\n                                                                                                                       // 478\n    /**                                                                                                                // 479\n     */                                                                                                                // 480\n                                                                                                                       // 481\n    sift.use = function(plugin) {                                                                                      // 482\n        if (isFunction(plugin)) return plugin(sift);                                                                   // 483\n        for (var key in plugin) {                                                                                      // 484\n            if (key.charCodeAt(0) === 36) operator[key] = plugin[key];                                                 // 485\n        }                                                                                                              // 486\n    };                                                                                                                 // 487\n                                                                                                                       // 488\n    /**                                                                                                                // 489\n     */                                                                                                                // 490\n                                                                                                                       // 491\n    sift.indexOf = function(query, array, getter) {                                                                    // 492\n        return search(array, createRootValidator(query, getter));                                                      // 493\n    };                                                                                                                 // 494\n                                                                                                                       // 495\n    /**                                                                                                                // 496\n     */                                                                                                                // 497\n                                                                                                                       // 498\n    sift.compare = function(a, b) {                                                                                    // 499\n        if (a === b) return 0;                                                                                         // 500\n        if (typeof a === typeof b) {                                                                                   // 501\n            if (a > b) return 1;                                                                                       // 502\n            if (a < b) return -1;                                                                                      // 503\n        }                                                                                                              // 504\n    };                                                                                                                 // 505\n                                                                                                                       // 506\n    /* istanbul ignore next */                                                                                         // 507\n    if (                                                                                                               // 508\n        typeof module !== \"undefined\" &&                                                                               // 509\n        typeof module.exports !== \"undefined\"                                                                          // 510\n    ) {                                                                                                                // 511\n        module.exports = sift;                                                                                         // 512\n    }                                                                                                                  // 513\n                                                                                                                       // 514\n    if (typeof window !== \"undefined\") {                                                                               // 515\n        window.sift = sift;                                                                                            // 516\n    }                                                                                                                  // 517\n})();                                                                                                                  // 518\n                                                                                                                       // 519\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"deep-extend\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.3.1.o1og0g.wvr4q++os+web.browser+web.cordova/npm/node_modules/deep-extend/package.json                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"deep-extend\";                                                                                          // 1\nexports.version = \"0.5.0\";                                                                                             // 2\nexports.main = \"lib/deep-extend.js\";                                                                                   // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"deep-extend.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/cultofcoders_grapher/node_modules/deep-extend/lib/deep-extend.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * @description Recursive object extending                                                                             // 2\n * @author Viacheslav Lotsmanov <lotsmanov89@gmail.com>                                                                // 3\n * @license MIT                                                                                                        // 4\n *                                                                                                                     // 5\n * The MIT License (MIT)                                                                                               // 6\n *                                                                                                                     // 7\n * Copyright (c) 2013-2015 Viacheslav Lotsmanov                                                                        // 8\n *                                                                                                                     // 9\n * Permission is hereby granted, free of charge, to any person obtaining a copy of                                     // 10\n * this software and associated documentation files (the \"Software\"), to deal in                                       // 11\n * the Software without restriction, including without limitation the rights to                                        // 12\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of                                    // 13\n * the Software, and to permit persons to whom the Software is furnished to do so,                                     // 14\n * subject to the following conditions:                                                                                // 15\n *                                                                                                                     // 16\n * The above copyright notice and this permission notice shall be included in all                                      // 17\n * copies or substantial portions of the Software.                                                                     // 18\n *                                                                                                                     // 19\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                          // 20\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS                                    // 21\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR                                      // 22\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER                                      // 23\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN                                             // 24\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                          // 25\n */                                                                                                                    // 26\n                                                                                                                       // 27\n\"use strict\";                                                                                                          // 28\n                                                                                                                       // 29\nfunction isSpecificValue(val) {                                                                                        // 30\n    return val instanceof Buffer || val instanceof Date || val instanceof RegExp                                       // 31\n        ? true                                                                                                         // 32\n        : false;                                                                                                       // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nfunction cloneSpecificValue(val) {                                                                                     // 36\n    if (val instanceof Buffer) {                                                                                       // 37\n        var x = new Buffer(val.length);                                                                                // 38\n        val.copy(x);                                                                                                   // 39\n        return x;                                                                                                      // 40\n    } else if (val instanceof Date) {                                                                                  // 41\n        return new Date(val.getTime());                                                                                // 42\n    } else if (val instanceof RegExp) {                                                                                // 43\n        return new RegExp(val);                                                                                        // 44\n    } else {                                                                                                           // 45\n        throw new Error(\"Unexpected situation\");                                                                       // 46\n    }                                                                                                                  // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Recursive cloning array.                                                                                            // 51\n */                                                                                                                    // 52\nfunction deepCloneArray(arr) {                                                                                         // 53\n    var clone = [];                                                                                                    // 54\n    arr.forEach(function(item, index) {                                                                                // 55\n        if (typeof item === \"object\" && item !== null) {                                                               // 56\n            if (Array.isArray(item)) {                                                                                 // 57\n                clone[index] = deepCloneArray(item);                                                                   // 58\n            } else if (isSpecificValue(item)) {                                                                        // 59\n                clone[index] = cloneSpecificValue(item);                                                               // 60\n            } else {                                                                                                   // 61\n                clone[index] = deepExtend({}, item);                                                                   // 62\n            }                                                                                                          // 63\n        } else {                                                                                                       // 64\n            clone[index] = item;                                                                                       // 65\n        }                                                                                                              // 66\n    });                                                                                                                // 67\n    return clone;                                                                                                      // 68\n}                                                                                                                      // 69\n                                                                                                                       // 70\n/**                                                                                                                    // 71\n * Extening object that entered in first argument.                                                                     // 72\n *                                                                                                                     // 73\n * Returns extended object or false if have no target object or incorrect type.                                        // 74\n *                                                                                                                     // 75\n * If you wish to clone source object (without modify it), just use empty new                                          // 76\n * object as first argument, like this:                                                                                // 77\n *   deepExtend({}, yourObj_1, [yourObj_N]);                                                                           // 78\n */                                                                                                                    // 79\nvar deepExtend = (module.exports = function(/*obj_1, [obj_2], [obj_N]*/) {                                             // 80\n    if (arguments.length < 1 || typeof arguments[0] !== \"object\") {                                                    // 81\n        return false;                                                                                                  // 82\n    }                                                                                                                  // 83\n                                                                                                                       // 84\n    if (arguments.length < 2) {                                                                                        // 85\n        return arguments[0];                                                                                           // 86\n    }                                                                                                                  // 87\n                                                                                                                       // 88\n    var target = arguments[0];                                                                                         // 89\n                                                                                                                       // 90\n    // convert arguments to array and cut off target object                                                            // 91\n    var args = Array.prototype.slice.call(arguments, 1);                                                               // 92\n                                                                                                                       // 93\n    var val, src, clone;                                                                                               // 94\n                                                                                                                       // 95\n    args.forEach(function(obj) {                                                                                       // 96\n        // skip argument if isn't an object, is null, or is an array                                                   // 97\n        if (typeof obj !== \"object\" || obj === null || Array.isArray(obj)) {                                           // 98\n            return;                                                                                                    // 99\n        }                                                                                                              // 100\n                                                                                                                       // 101\n        Object.keys(obj).forEach(function(key) {                                                                       // 102\n            src = target[key]; // source value                                                                         // 103\n            val = obj[key]; // new value                                                                               // 104\n                                                                                                                       // 105\n            // recursion prevention                                                                                    // 106\n            if (val === target) {                                                                                      // 107\n                return;                                                                                                // 108\n                                                                                                                       // 109\n                /**                                                                                                    // 110\n                 * if new value isn't object then just overwrite by new value                                          // 111\n                 * instead of extending.                                                                               // 112\n                 */                                                                                                    // 113\n            } else if (typeof val !== \"object\" || val === null) {                                                      // 114\n                target[key] = val;                                                                                     // 115\n                return;                                                                                                // 116\n                                                                                                                       // 117\n                // just clone arrays (and recursive clone objects inside)                                              // 118\n            } else if (Array.isArray(val)) {                                                                           // 119\n                target[key] = deepCloneArray(val);                                                                     // 120\n                return;                                                                                                // 121\n                                                                                                                       // 122\n                // custom cloning and overwrite for specific objects                                                   // 123\n            } else if (isSpecificValue(val)) {                                                                         // 124\n                target[key] = cloneSpecificValue(val);                                                                 // 125\n                return;                                                                                                // 126\n                                                                                                                       // 127\n                // overwrite by new value if source isn't object or array                                              // 128\n            } else if (                                                                                                // 129\n                typeof src !== \"object\" ||                                                                             // 130\n                src === null ||                                                                                        // 131\n                Array.isArray(src)                                                                                     // 132\n            ) {                                                                                                        // 133\n                target[key] = deepExtend({}, val);                                                                     // 134\n                return;                                                                                                // 135\n                                                                                                                       // 136\n                // source value and new value is objects both, extending...                                            // 137\n            } else {                                                                                                   // 138\n                target[key] = deepExtend(src, val);                                                                    // 139\n                return;                                                                                                // 140\n            }                                                                                                          // 141\n        });                                                                                                            // 142\n    });                                                                                                                // 143\n                                                                                                                       // 144\n    return target;                                                                                                     // 145\n});                                                                                                                    // 146\n                                                                                                                       // 147\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/cultofcoders:grapher/main.client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['cultofcoders:grapher'] = exports;\n\n})();\n","servePath":"/packages/cultofcoders_grapher.js","sourceMap":{"version":3,"sources":["packages/cultofcoders:grapher/main.client.js","packages/cultofcoders:grapher/lib/compose.js","packages/cultofcoders:grapher/lib/createQuery.js","packages/cultofcoders:grapher/lib/extension.js","packages/cultofcoders:grapher/lib/links/config.schema.js","packages/cultofcoders:grapher/lib/links/constants.js","packages/cultofcoders:grapher/lib/links/extension.js","packages/cultofcoders:grapher/lib/links/linker.js","packages/cultofcoders:grapher/lib/links/lib/createSearchFilters.js","packages/cultofcoders:grapher/lib/links/linkTypes/base.js","packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js","packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","packages/cultofcoders:grapher/lib/links/linkTypes/linkOne.js","packages/cultofcoders:grapher/lib/links/linkTypes/linkOneMeta.js","packages/cultofcoders:grapher/lib/links/linkTypes/lib/smartArguments.js","packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js","packages/cultofcoders:grapher/lib/namedQuery/namedQuery.client.js","packages/cultofcoders:grapher/lib/namedQuery/namedQuery.js","packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","packages/cultofcoders:grapher/lib/namedQuery/store.js","packages/cultofcoders:grapher/lib/namedQuery/cache/BaseResultCacher.js","packages/cultofcoders:grapher/lib/namedQuery/cache/MemoryResultCacher.js","packages/cultofcoders:grapher/lib/query/query.base.js","packages/cultofcoders:grapher/lib/query/query.client.js","packages/cultofcoders:grapher/lib/query/query.js","packages/cultofcoders:grapher/lib/query/query.server.js","packages/cultofcoders:grapher/lib/query/counts/collection.js","packages/cultofcoders:grapher/lib/query/counts/constants.js","packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","packages/cultofcoders:grapher/lib/query/counts/createFauxSubscription.js","packages/cultofcoders:grapher/lib/query/hypernova/aggregateSearchFilters.js","packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js","packages/cultofcoders:grapher/lib/query/hypernova/assembler.js","packages/cultofcoders:grapher/lib/query/hypernova/buildAggregatePipeline.js","packages/cultofcoders:grapher/lib/query/hypernova/constants.js","packages/cultofcoders:grapher/lib/query/hypernova/hypernova.js","packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","packages/cultofcoders:grapher/lib/query/hypernova/lib/cleanObjectForMetaFilters.js","packages/cultofcoders:grapher/lib/query/hypernova/lib/snapBackDottedFields.js","packages/cultofcoders:grapher/lib/query/lib/applyProps.js","packages/cultofcoders:grapher/lib/query/lib/callWithPromise.js","packages/cultofcoders:grapher/lib/query/lib/createGraph.js","packages/cultofcoders:grapher/lib/query/lib/dotize.js","packages/cultofcoders:grapher/lib/query/lib/intersectDeep.js","packages/cultofcoders:grapher/lib/query/lib/prepareForDelivery.js","packages/cultofcoders:grapher/lib/query/lib/prepareForProcess.js","packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","packages/cultofcoders:grapher/lib/query/nodes/fieldNode.js","packages/cultofcoders:grapher/lib/query/nodes/reducerNode.js","packages/cultofcoders:grapher/lib/query/reducers/extension.js","packages/cultofcoders:grapher/lib/query/reducers/lib/applyReducers.js","packages/cultofcoders:grapher/lib/query/reducers/lib/cleanReducerLeftovers.js","packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js","packages/cultofcoders:grapher/lib/query/reducers/lib/embedReducerWithLink.js"],"names":["module","watch","require","v","exports","createQuery","prepareForProcess","Query","NamedQuery","compose","deepExtend","exportDefault","args","NamedQueryStore","name","body","options","_","isFunction","createNamedQuery","entryPointName","first","keys","collection","Mongo","Collection","get","Meteor","Error","isDevelopment","console","warn","params","createNormalQuery","namedQuery","query","add","clone","extend","prototype","export","DenormalizeSchema","LinkConfigDefaults","LinkConfigSchema","Match","field","String","Object","bypassSchema","Maybe","Boolean","type","OneOf","Where","isObject","_collection","metadata","inversedBy","index","unique","autoremove","denormalize","ObjectIncluding","LINK_STORAGE","Linker","addLinks","data","each","linkConfig","linkName","_name","linker","getLinks","getLinker","hasLink","getLink","objectOrId","linkData","object","isVirtual","findOne","fields","linkStorageField","_id","createLink","LinkMany","LinkManyMeta","LinkOne","LinkOneMeta","smartArguments","dot","check","mainCollection","assign","_validateAndClean","_initAutoremove","_initDenormalization","_handleReferenceRemovalForVirtualLinks","_initIndex","getLinkedCollection","isMany","isSingle","isMeta","relatedLinker","contains","oneTypes","isOneResult","helperClass","_getHelperClass","collectionName","_prepareVirtual","_generateFieldName","startup","_setupVirtualConfig","virtualLinkConfig","strategy","cleanedCollectionName","replace","defaultFieldPrefix","after","remove","userId","doc","accessor","fetch","link","linkedObj","unset","isServer","_ensureIndex","$in","getIds","ids","find","map","item","packageExists","Package","cacheConfig","referenceFieldSuffix","inversedLink","referenceField","cacheField","cache","isDenormalized","isSubBodyDenormalized","cacheBody","cacheBodyFields","bodyFields","omit","difference","length","createSearchFilters","createOne","createOneVirtual","createOneMeta","createOneMetaVirtual","createMany","createManyVirtual","createManyMeta","createManyMetaVirtual","sift","fieldStorage","metaFilters","value","undefined","filters","key","pluck","$elemMatch","Link","SmartArgs","linkedCollection","config","$metaFilters","$meta","searchFilters","appliedFilters","default","others","result","clean","identifyId","what","saveToDatabase","getId","identifyIds","_validateIds","isArray","validIds","join","_virtualAction","action","reversedLink","element","elementId","insert","set","_ids","union","modifier","$addToSet","$each","update","filter","$pullAll","metadatas","localMetadata","push","extendMetadata","existingMetadata","subfield","subfieldUpdate","$set","$pull","subWhat","NamedQueryBase","deepClone","isNamedQuery","queryName","resolver","subscriptionHandle","isExposed","setParams","doValidateParams","validateParams","_validate","validationError","error","newParams","constructor","isResolver","cacher","exposeConfig","validator","call","CountSubscription","createGraph","recursiveFetch","callWithPromise","Base","subscribe","callback","subscribeCount","_counter","unsubscribe","stop","unsubscribeCount","fetchSync","fetchOneSync","callbackOrOptions","_fetchStatic","_fetchReactive","fetchOne","err","res","getCountSync","getCount","$body","intersectDeep","allowSkip","$options","skip","NamedQueryClient","NamedQueryServer","MemoryResultCacher","context","_performSecurityChecks","_fetchResolverData","doEmbodimentIfItApplies","cacheId","generateQueryId","countCursor","getCursorForCounting","count","$filters","cacheResults","resolve","fn","self","_callFirewall","storage","getAll","BaseResultCacher","EJSON","stringify","fetchData","cloneDeep","DEFAULT_TTL","store","cacheData","storeData","ttl","setTimeout","QueryBase","isGlobalQuery","QueryClient","QueryServer","hypernova","node","COUNTS_COLLECTION_CLIENT","ReactiveVar","Tracker","Counts","createFauxSubscription","accessToken","fauxHandle","arg","equals","lastArgs","token","_markedForUnsubscribe","disconnectComputation","autorun","handleDisconnect","id","status","connected","_markedForResume","isSubscribed","countManager","ready","AggregateFilters","collectionNode","create","uniq","parentObjects","eligibleObjects","storages","arrayOfIds","isValid","parent","results","cleanObjectForMetaFilters","childCollectionNode","aggregateResults","allResults","metaFiltersTest","parentResult","eligibleAggregateResults","aggregateResult","datas","limit","assembleData","filterAssembledData","slice","containsDottedFields","pipeline","firewall","$match","sort","$sort","dataPush","indexOf","safeField","$group","$push","$slice","$project","SAFE_DOTTED_FIELD_REPLACEMENT","hypernovaInit","applyProps","prepareForDelivery","storeHypernovaResults","collectionNodes","bypassFirewalls","userIdToPass","assemble","assembleAggregateResults","buildAggregatePipeline","snapBackDottedFields","aggregateFilters","filteredOptions","aggregate","explains","aggregationResult","forEach","document","restrictOptions","props","applyFields","method","myParameters","Promise","reject","reason","createNodes","addFieldNode","CollectionNode","FieldNode","ReducerNode","dotize","createReducers","specialFields","root","fieldName","addProp","handleDenormalized","subroot","reducer","getReducer","reducerNode","fieldNodes","dotted","convert","fieldNode","snapCache","obj","prefix","Array","newObj","recurse","o","p","isArrayItem","f","isEmptyArray","getFieldName","isEmptyObj","isNumber","isNaN","parseInt","prop","hasOwnProperty","allowedBody","clientBody","allowedBodyDot","clientBodyDot","intersection","build","intersectedField","applyPostFilters","applyPostOptions","removeLinkStorages","storeOneResults","assembleMetadata","applyReducers","cleanReducerLeftovers","Minimongo","snapBackCaches","cloneMetaChildren","applyPostFilter","postFilters","$postFilters","$postOptions","sorter","Sorter","getComparator","start","end","$postFilter","sameLevelResults","removeStorageField","shouldCleanStorage","parentResults","childResult","storeMetadata","parentElement","$metadata","storageItem","isEmpty","snapCaches","snapCachesSingles","shoudStoreLinkStorage","defaultFilterFunction","applyFilterRecursive","isRoot","$filter","Function","applyPagination","_params","_body","parentObject","nodes","scheduledForDeletion","reducers","_shouldCleanStorage","_node","hasAddedAnyField","n","has","split","hasField","getField","hasCollectionNode","hasReducerNode","reducerNodes","getReducerNode","getCollectionNode","getName","subLinkName","reduce","reduceFunction","compute","addReducers","reducerConfig","reducerName","cleanNestedFields","parts","shift","handleAddElement","handleAddReducer","handleAddLink","handleAddField","embedReducerWithLink","dots","reducerBody"],"mappings":"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","file":"/packages/cultofcoders_grapher.js","sourcesContent":["import './lib/extension.js';\nimport './lib/links/extension.js';\nimport './lib/query/reducers/extension.js';\n\nexport {\n    default as createQuery\n} from './lib/createQuery.js';\n\nexport {\n    default as prepareForProcess\n} from './lib/query/lib/prepareForProcess';\n\nexport {\n    default as Query\n} from './lib/query/query.client';\n\nexport {\n    default as NamedQuery\n} from './lib/namedQuery/namedQuery.client';\n\nexport {\n    default as compose\n} from './lib/compose';\n","import deepExtend from 'deep-extend';\n\nexport default function (...args) {\n    return deepExtend({}, ...args);\n}","import Query from './query/query.js';\nimport NamedQuery from './namedQuery/namedQuery.js';\nimport NamedQueryStore from './namedQuery/store.js';\n\n/**\n * This is a polymorphic function, it allows you to create a query as an object\n * or it also allows you to re-use an existing query if it's a named one\n *\n * @param args\n * @returns {*}\n */\nexport default (...args) => {\n    if (typeof args[0] === 'string') {\n        let [name, body, options] = args;\n        options = options || {};\n\n        // It's a resolver query\n        if (_.isFunction(body)) {\n            return createNamedQuery(name, null, body, options);\n        }\n\n        const entryPointName = _.first(_.keys(body));\n        const collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            throw new Meteor.Error('invalid-name', `We could not find any collection with the name \"${entryPointName}\". Make sure it is imported prior to using this`)\n        }\n\n        return createNamedQuery(name, collection, body[entryPointName], options);\n    } else {\n        // Query Creation, it can have an endpoint as collection or as a NamedQuery\n        let [body, options] = args;\n        options = options || {};\n\n        const entryPointName = _.first(_.keys(body));\n        const collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            if (Meteor.isDevelopment && !NamedQueryStore.get(entryPointName)) {\n                console.warn(`You are creating a query with the entry point \"${entryPointName}\", but there was no collection found for it (maybe you forgot to import it client-side?). It's assumed that it's referencing a NamedQuery.`)\n            }\n\n            return createNamedQuery(entryPointName, null, {}, {params: body[entryPointName]});\n        } else {\n            return createNormalQuery(collection, body[entryPointName], options);\n        }\n    }\n}\n\nfunction createNamedQuery(name, collection, body, options = {}) {\n    // if it exists already, we re-use it\n    const namedQuery = NamedQueryStore.get(name);\n    let query;\n\n    if (!namedQuery) {\n        query = new NamedQuery(name, collection, body, options);\n        NamedQueryStore.add(name, query);\n    } else {\n        query = namedQuery.clone(options.params);\n    }\n\n    return query;\n}\n\nfunction createNormalQuery(collection, body, options)  {\n    return new Query(collection, body, options);\n}\n","import Query from './query/query.js';\nimport NamedQuery from './namedQuery/namedQuery.js';\nimport NamedQueryStore from './namedQuery/store.js';\n\n_.extend(Mongo.Collection.prototype, {\n    createQuery(...args) {\n        if (typeof args[0] === 'string') {\n            //NamedQuery\n            const [name, body, options] = args;\n            const query = new NamedQuery(name, this, body, options);\n            NamedQueryStore.add(name, query);\n\n            return query;\n        } else {\n            const [body, options] = args;\n\n            return new Query(this, body, options);\n        }\n    }\n});","import {Match} from 'meteor/check';\nimport {Mongo} from 'meteor/mongo';\n\nexport const DenormalizeSchema = {\n    field: String,\n    body: Object,\n    bypassSchema: Match.Maybe(Boolean)\n};\n\nexport const LinkConfigDefaults = {\n    type: 'one',\n};\n\nexport const LinkConfigSchema = {\n    type: Match.Maybe(Match.OneOf('one', 'many', '1', '*')),\n    collection: Match.Maybe(\n        Match.Where(collection => {\n            // We do like this so it works with other types of collections \n            // like FS.Collection\n            return _.isObject(collection) && (\n                collection instanceof Mongo.Collection\n                || \n                !!collection._collection\n            );\n        })\n    ),\n    field: Match.Maybe(String),\n    metadata: Match.Maybe(Boolean),\n    inversedBy: Match.Maybe(String),\n    index: Match.Maybe(Boolean),\n    unique: Match.Maybe(Boolean),\n    autoremove: Match.Maybe(Boolean),\n    denormalize: Match.Maybe(Match.ObjectIncluding(DenormalizeSchema)),\n};","export const LINK_STORAGE = '__links';\n","import { Mongo } from 'meteor/mongo';\nimport {LINK_STORAGE} from './constants.js';\nimport Linker from './linker.js';\n\n_.extend(Mongo.Collection.prototype, {\n    /**\n     * The data we add should be valid for config.schema.js\n     */\n    addLinks(data) {\n        if (!this[LINK_STORAGE]) {\n            this[LINK_STORAGE] = {};\n        }\n\n        _.each(data, (linkConfig, linkName) => {\n            if (this[LINK_STORAGE][linkName]) {\n                throw new Meteor.Error(`You cannot add the link with name: ${linkName} because it was already added to ${this._name} collection`)\n            }\n\n            const linker = new Linker(this, linkName, linkConfig);\n\n            _.extend(this[LINK_STORAGE], {\n                [linkName]: linker\n            });\n        });\n    },\n    \n    getLinks() {\n        return this[LINK_STORAGE];\n    },\n\n    getLinker(name) {\n        if (this[LINK_STORAGE]) {\n            return this[LINK_STORAGE][name];\n        }\n    },\n\n    hasLink(name) {\n        if (!this[LINK_STORAGE]) {\n            return false;\n        }\n\n        return !!this[LINK_STORAGE][name];\n    },\n\n    getLink(objectOrId, name) {\n        let linkData = this[LINK_STORAGE];\n\n        if (!linkData) {\n            throw new Meteor.Error(`There are no links defined for collection: ${this._name}`);\n        }\n\n        if (!linkData[name]) {\n            throw new Meteor.Error(`There is no link ${name} for collection: ${this._name}`);\n        }\n\n        const linker = linkData[name];\n        let object = objectOrId;\n        if (typeof(objectOrId) == 'string') {\n            if (!linker.isVirtual()) {\n                object = this.findOne(objectOrId, {\n                    fields: {\n                        [linker.linkStorageField]: 1\n                    }\n                });\n            } else {\n                object = {_id: objectOrId};\n            }\n\n            if (!object) {\n                throw new Meteor.Error(`We could not find any object with _id: \"${objectOrId}\" within the collection: ${this._name}`);\n            }\n        }\n\n        return linkData[name].createLink(object);\n    }\n});\n\n","import LinkMany from './linkTypes/linkMany.js';\nimport LinkManyMeta from './linkTypes/linkManyMeta.js';\nimport LinkOne from './linkTypes/linkOne.js';\nimport LinkOneMeta from './linkTypes/linkOneMeta.js';\nimport {LinkConfigSchema, LinkConfigDefaults} from './config.schema.js';\nimport smartArguments from './linkTypes/lib/smartArguments';\nimport dot from 'dot-object';\nimport {check} from 'meteor/check';\nimport {_} from 'meteor/underscore';\n\nexport default class Linker {\n    /**\n     * @param mainCollection\n     * @param linkName\n     * @param linkConfig\n     */\n    constructor(mainCollection, linkName, linkConfig) {\n        this.mainCollection = mainCollection;\n        this.linkConfig = Object.assign({}, LinkConfigDefaults, linkConfig);\n        this.linkName = linkName;\n\n        // check linkName must not exist in schema\n        this._validateAndClean();\n\n        // initialize cascade removal hooks.\n        this._initAutoremove();\n        this._initDenormalization();\n\n        if (this.isVirtual()) {\n            // if it's a virtual field make sure that when this is deleted, it will be removed from the references\n            if (!linkConfig.autoremove) {\n                this._handleReferenceRemovalForVirtualLinks();\n            }\n        } else {\n            this._initIndex();\n        }\n    }\n\n    /**\n     * Values which represent for the relation a single link\n     * @returns {string[]}\n     */\n    get oneTypes() {\n        return ['one', '1'];\n    }\n\n    /**\n     * Returns the strategies: one, many, one-meta, many-meta\n     * @returns {string}\n     */\n    get strategy() {\n        let strategy = this.isMany() ? 'many' : 'one';\n        if (this.linkConfig.metadata) {\n            strategy += '-meta';\n        }\n\n        return strategy;\n    }\n\n    /**\n     * Returns the field name in the document where the actual relationships are stored.\n     * @returns string\n     */\n    get linkStorageField() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.linkStorageField;\n        }\n\n        return this.linkConfig.field;\n    }\n\n    /**\n     * The collection that is linked with the current collection\n     * @returns Mongo.Collection\n     */\n    getLinkedCollection() {\n        return this.linkConfig.collection;\n    }\n\n    /**\n     * If the relationship for this link is of \"many\" type.\n     */\n    isMany() {\n        return !this.isSingle();\n    }\n\n    /**\n     * If the relationship for this link contains metadata\n     */\n    isMeta() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.isMeta();\n        }\n\n        return !!this.linkConfig.metadata;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSingle() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.isSingle();\n        }\n\n        return _.contains(this.oneTypes, this.linkConfig.type);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isVirtual() {\n        return !!this.linkConfig.inversedBy;\n    }\n\n    /**\n     * Should return a single result.\n     */\n    isOneResult() {\n        return (\n            (this.isVirtual() && this.linkConfig.relatedLinker.linkConfig.unique)\n            || (!this.isVirtual() && this.isSingle())\n        );\n    }\n\n    /**\n     * @param object\n     * @param collection To impersonate the getLinkedCollection() of the \"Linker\"\n     *\n     * @returns {LinkOne|LinkMany|LinkManyMeta|LinkOneMeta|LinkResolve}\n     */\n    createLink(object, collection = null) {\n        let helperClass = this._getHelperClass();\n\n        return new helperClass(this, object, collection);\n    }\n\n    /**\n     * @returns {*}\n     * @private\n     */\n    _validateAndClean() {\n        if (!this.linkConfig.collection) {\n            throw new Meteor.Error('invalid-config', `For the link ${this.linkName} you did not provide a collection.`)\n        }\n\n        if (typeof(this.linkConfig.collection) === 'string') {\n            const collectionName = this.linkConfig.collection;\n            this.linkConfig.collection = Mongo.Collection.get(collectionName);\n\n            if (!this.linkConfig.collection) {\n                throw new Meteor.Error('invalid-collection', `Could not find a collection with the name: ${collectionName}`);\n            }\n        }\n\n        if (this.isVirtual()) {\n            return this._prepareVirtual();\n        } else {\n            if (!this.linkConfig.type) {\n                this.linkConfig.type = 'one';\n            }\n\n            if (!this.linkConfig.field) {\n                this.linkConfig.field = this._generateFieldName();\n            } else {\n                if (this.linkConfig.field == this.linkName) {\n                    throw new Meteor.Error('invalid-config', `For the link ${this.linkName} you must not use the same name for the field, otherwise it will cause conflicts when fetching data`);\n                }\n            }\n        }\n\n        check(this.linkConfig, LinkConfigSchema);\n    }\n\n    /**\n     * We need to apply same type of rules in this case.\n     * @private\n     */\n    _prepareVirtual() {\n        const {collection, inversedBy} = this.linkConfig;\n        let linker = collection.getLinker(inversedBy);\n\n        if (!linker) {\n            // it is possible that the collection doesn't have a linker created yet.\n            // so we will create it on startup after all links have been defined\n            Meteor.startup(() => {\n                linker = collection.getLinker(inversedBy);\n                if (!linker) {\n                    throw new Meteor.Error(`You tried setting up an inversed link in \"${this.mainCollection._name}\" pointing to collection: \"${collection._name}\" link: \"${inversedBy}\", but no such link was found. Maybe a typo ?`)\n                } else {\n                    this._setupVirtualConfig(linker);\n                }\n            })\n        } else {\n            this._setupVirtualConfig(linker);\n        }\n    }\n\n    /**\n     * @param linker\n     * @private\n     */\n    _setupVirtualConfig(linker) {\n        const virtualLinkConfig = linker.linkConfig;\n\n        if (!virtualLinkConfig) {\n            throw new Meteor.Error(`There is no link-config for the related collection on ${inversedBy}. Make sure you added the direct links before specifying virtual ones.`)\n        }\n\n        _.extend(this.linkConfig, {\n            metadata: virtualLinkConfig.metadata,\n            relatedLinker: linker\n        });\n    }\n\n    /**\n     * Depending on the strategy, we create the proper helper class\n     * @private\n     */\n    _getHelperClass() {\n        switch (this.strategy) {\n            case 'many-meta':\n                return LinkManyMeta;\n            case 'many':\n                return LinkMany;\n            case 'one-meta':\n                return LinkOneMeta;\n            case 'one':\n                return LinkOne;\n        }\n\n        throw new Meteor.Error('invalid-strategy', `${this.strategy} is not a valid strategy`);\n    }\n\n    /**\n     * If field name not present, we generate it.\n     * @private\n     */\n    _generateFieldName() {\n        let cleanedCollectionName = this.linkConfig.collection._name.replace(/\\./g, '_');\n        let defaultFieldPrefix = this.linkName + '_' + cleanedCollectionName;\n\n        switch (this.strategy) {\n            case 'many-meta':\n                return `${defaultFieldPrefix}_metas`;\n            case 'many':\n                return `${defaultFieldPrefix}_ids`;\n            case 'one-meta':\n                return `${defaultFieldPrefix}_meta`;\n            case 'one':\n                return `${defaultFieldPrefix}_id`;\n        }\n    }\n\n    /**\n     * When a link that is declared virtual is removed, the reference will be removed from every other link.\n     * @private\n     */\n    _handleReferenceRemovalForVirtualLinks() {\n        this.mainCollection.after.remove((userId, doc) => {\n            // this problem may occur when you do a .remove() before Meteor.startup()\n            if (!this.linkConfig.relatedLinker) {\n                console.warn(`There was an error finding the link for removal for collection: \"${this.mainCollection._name}\" with link: \"${this.linkName}\". This may occur when you do a .remove() before Meteor.startup()`);\n                return;\n            }\n\n            let accessor = this.createLink(doc);\n\n            _.each(accessor.fetch(), linkedObj => {\n                const {relatedLinker} = this.linkConfig;\n                // We do this check, to avoid self-referencing hell when defining virtual links\n                // Virtual links if not found \"compile-time\", we will try again to reprocess them on Meteor.startup\n                // if a removal happens before Meteor.startup this may fail\n                if (relatedLinker) {\n                    let link = relatedLinker.createLink(linkedObj);\n\n                    if (relatedLinker.isSingle()) {\n                        link.unset();\n                    } else {\n                        link.remove(doc);\n                    }\n                }\n            });\n        })\n    }\n\n    _initIndex() {\n        if (Meteor.isServer) {\n            let field = this.linkConfig.field;\n            if (this.linkConfig.metadata) {\n                field = field + '._id';\n            }\n\n            if (this.linkConfig.index) {\n                if (this.isVirtual()) {\n                    throw new Meteor.Error('You cannot set index on an inversed link.');\n                }\n\n                let options;\n                if (this.linkConfig.unique) {\n                    if (this.isMany()) {\n                        throw new Meteor.Error('You cannot set unique property on a multi field.');\n                    }\n\n                    options = {unique: true}\n                }\n\n                this.mainCollection._ensureIndex({[field]: 1}, options);\n            } else {\n                if (this.linkConfig.unique) {\n                    if (this.isVirtual()) {\n                        throw new Meteor.Error('You cannot set unique property on an inversed link.');\n                    }\n\n                    if (this.isMany()) {\n                        throw new Meteor.Error('You cannot set unique property on a multi field.');\n                    }\n\n                    this.mainCollection._ensureIndex({\n                        [field]: 1\n                    }, {unique: true})\n                }\n            }\n        }\n    }\n\n    _initAutoremove() {\n        if (!this.linkConfig.autoremove) {\n            return;\n        }\n\n        if (!this.isVirtual()) {\n            this.mainCollection.after.remove((userId, doc) => {\n                this.getLinkedCollection().remove({\n                    _id: {\n                        $in: smartArguments.getIds(doc[this.linkStorageField])\n                    }\n                })\n            })\n        } else {\n            this.mainCollection.after.remove((userId, doc) => {\n                const linker = this.mainCollection.getLink(doc, this.linkName);\n                const ids = linker.find({}, {fields: {_id: 1}}).fetch().map(item => item._id);\n\n                this.getLinkedCollection().remove({\n                    _id: {$in: ids}\n                })\n            })\n        }\n    }\n\n    /**\n     * Initializes denormalization using herteby:denormalize\n     * @private\n     */\n    _initDenormalization() {\n        if (!this.linkConfig.denormalize || !Meteor.isServer) {\n            return;\n        }\n\n        const packageExists = !!Package['herteby:denormalize'];\n        if (!packageExists) {\n            throw new Meteor.Error('missing-package', `Please add the herteby:denormalize package to your Meteor application in order to make caching work`)\n        }\n\n        const {field, body, bypassSchema} = this.linkConfig.denormalize;\n        let cacheConfig;\n\n        let referenceFieldSuffix = '';\n        if (this.isMeta()) {\n            referenceFieldSuffix = (this.isSingle() ? '._id' : ':_id');\n        }\n\n        if (this.isVirtual()) {\n            let inversedLink = this.linkConfig.relatedLinker.linkConfig;\n\n            let type = inversedLink.type == 'many' ? 'many-inverse' : 'inversed';\n\n            cacheConfig = {\n                type: type,\n                collection: this.linkConfig.collection,\n                fields: body,\n                referenceField: inversedLink.field + referenceFieldSuffix,\n                cacheField: field,\n                bypassSchema: !!bypassSchema\n            };\n        } else {\n            cacheConfig = {\n                type: this.linkConfig.type,\n                collection: this.linkConfig.collection,\n                fields: body,\n                referenceField: this.linkConfig.field + referenceFieldSuffix,\n                cacheField: field,\n                bypassSchema: !!bypassSchema\n            };\n        }\n\n        if (this.isVirtual()) {\n            Meteor.startup(() => {\n                this.mainCollection.cache(cacheConfig);\n            })\n        } else {\n            this.mainCollection.cache(cacheConfig);\n        }\n    }\n\n    /**\n     * Verifies if this linker is denormalized. It can be denormalized from the inverse side as well.\n     *\n     * @returns {boolean}\n     * @private\n     */\n    isDenormalized() {\n        return !!this.linkConfig.denormalize;\n    }\n\n    /**\n     * Verifies if the body of the linked element does not contain fields outside the cache body\n     *\n     * @param body\n     * @returns {boolean}\n     * @private\n     */\n    isSubBodyDenormalized(body) {\n        const cacheBody = this.linkConfig.denormalize.body;\n\n        const cacheBodyFields = _.keys(dot.dot(cacheBody));\n        const bodyFields = _.keys(\n            dot.dot(\n                _.omit(body, '_id')\n            )\n        );\n\n        return _.difference(bodyFields, cacheBodyFields).length === 0;\n    }\n}","import sift from 'sift';\n\nexport default function createSearchFilters(object, fieldStorage, strategy, isVirtual, metaFilters) {\n    if (!isVirtual) {\n        switch (strategy) {\n            case 'one': return createOne(object, fieldStorage);\n            case 'one-meta': return createOneMeta(object, fieldStorage, metaFilters);\n            case 'many': return createMany(object, fieldStorage);\n            case 'many-meta': return createManyMeta(object, fieldStorage, metaFilters);\n            default:\n                throw new Meteor.Error(`Invalid linking strategy: ${strategy}`)\n        }\n    } else {\n        switch (strategy) {\n            case 'one': return createOneVirtual(object, fieldStorage);\n            case 'one-meta': return createOneMetaVirtual(object, fieldStorage, metaFilters);\n            case 'many': return createManyVirtual(object, fieldStorage);\n            case 'many-meta': return createManyMetaVirtual(object, fieldStorage, metaFilters);\n            default:\n                throw new Meteor.Error(`Invalid linking strategy: ${strategy}`)\n        }\n    }\n}\n\nexport function createOne(object, fieldStorage) {\n    return {\n        _id: object[fieldStorage]\n    };\n}\n\nexport function createOneVirtual(object, fieldStorage) {\n    return {\n        [fieldStorage]: object._id\n    };\n}\n\nexport function createOneMeta(object, fieldStorage, metaFilters) {\n    const value = object[fieldStorage];\n\n    if (metaFilters) {\n        if (!sift(metaFilters)(value)) {\n            return {_id: undefined};\n        }\n    }\n\n    return {\n        _id: value ? value._id : value\n    };\n}\n\nexport function createOneMetaVirtual(object, fieldStorage, metaFilters) {\n    let filters = {};\n    if (metaFilters) {\n        _.each(metaFilters, (value, key) => {\n            filters[fieldStorage + '.' + key] = value;\n        })\n    }\n\n    filters[fieldStorage + '._id'] = object._id;\n\n    return filters;\n}\n\nexport function createMany(object, fieldStorage) {\n    return {\n        _id: {\n            $in: object[fieldStorage] || []\n        }\n    };\n}\n\nexport function createManyVirtual(object, fieldStorage) {\n    return {\n        [fieldStorage]: object._id\n    };\n}\n\nexport function createManyMeta(object, fieldStorage, metaFilters) {\n    let value = object[fieldStorage];\n\n    if (metaFilters) {\n        value = sift(metaFilters, value)\n    }\n\n    return {\n        _id: {\n            $in: _.pluck(value, '_id') || []\n        }\n    };\n}\n\nexport function createManyMetaVirtual(object, fieldStorage, metaFilters) {\n    let filters = {};\n    if (metaFilters) {\n        _.each(metaFilters, (value, key) => {\n            filters[key] = value;\n        })\n    }\n\n    filters._id = object._id;\n\n    return {\n        [fieldStorage]: {$elemMatch: filters}\n    };\n}","import SmartArgs from './lib/smartArguments.js';\nimport createSearchFilters from '../lib/createSearchFilters';\n\nexport default class Link {\n    get config() { return this.linker.linkConfig; }\n\n    get isVirtual() { return this.linker.isVirtual() }\n\n    constructor(linker, object, collection) {\n        this.linker = linker;\n        this.object = object;\n        this.linkedCollection = (collection) ? collection : linker.getLinkedCollection();\n\n        if (this.linker.isVirtual()) {\n            this.linkStorageField = this.config.relatedLinker.linkConfig.field;\n        } else {\n            this.linkStorageField = this.config.field;\n        }\n    }\n\n    /**\n     * Gets the stored link information value\n     * @returns {*}\n     */\n    value() {\n        if (this.isVirtual) {\n            throw new Meteor.Error('You can only take the value from the main link.');\n        }\n\n        return this.object[this.linkStorageField];\n    }\n\n    /**\n     * Finds linked data.\n     *\n     * @param filters\n     * @param options\n     * @returns {*}\n     * @param userId\n     */\n    find(filters = {}, options = {}, userId = undefined) {\n        let linker = this.linker;\n        const linkedCollection = this.linkedCollection;\n\n        let $metaFilters;\n        if (filters.$meta) {\n            $metaFilters = filters.$meta;\n            delete filters.$meta;\n        }\n\n        const searchFilters = createSearchFilters(\n            this.object,\n            this.linkStorageField,\n            linker.strategy,\n            linker.isVirtual(),\n            $metaFilters\n        );\n\n        let appliedFilters = _.extend({}, filters, searchFilters);\n\n        // see https://github.com/cult-of-coders/grapher/issues/134\n        // happens due to recursive importing of modules\n        // TODO: find another way to do this\n        if (linkedCollection.find) {\n            return linkedCollection.find(appliedFilters, options, userId)\n        } else {\n            return linkedCollection.default.find(appliedFilters, options, userId);\n        }\n    }\n\n    /**\n     * @param filters\n     * @param options\n     * @param others\n     * @returns {*|{content}|any}\n     */\n    fetch(filters, options, ...others) {\n        let result = this.find(filters, options, ...others).fetch();\n\n        if (this.linker.isOneResult()) {\n            return _.first(result);\n        }\n\n        return result;\n    }\n\n    /**\n     * When we are dealing with multiple type relationships, $in would require an array. If the field value is null, it will fail\n     * We use clean to make it an empty array by default.\n     */\n    clean() {}\n\n    /**\n     * Extracts a single id\n     */\n    identifyId(what, saveToDatabase) {\n        return SmartArgs.getId(what, {\n            saveToDatabase,\n            collection: this.linkedCollection\n        });\n    }\n\n    /**\n     * Extracts the ids of object(s) or strings and returns an array.\n     */\n    identifyIds(what, saveToDatabase) {\n        return SmartArgs.getIds(what, {\n            saveToDatabase,\n            collection: this.linkedCollection\n        });\n    }\n\n    /**\n     * Checks when linking data, if the ids are valid with the linked collection.\n     * @throws Meteor.Error\n     * @param ids\n     *\n     * @protected\n     */\n    _validateIds(ids) {\n        if (!_.isArray(ids)) {\n            ids = [ids];\n        }\n\n        const validIds = this.linkedCollection.find({\n            _id: {$in: ids}\n        }, {fields: {_id: 1}}).fetch().map(doc => doc._id);\n\n        if (validIds.length != ids.length) {\n            throw new Meteor.Error('not-found', `You tried to create links with non-existing id(s) inside \"${this.linkedCollection._name}\": ${_.difference(ids, validIds).join(', ')}`)\n        }\n    }\n\n    /**\n     * This is for allowing commands such as set/unset/add/remove/metadata from the virtual link.\n     *\n     * @param action\n     * @param what\n     * @param metadata\n     *\n     * @protected\n     */\n    _virtualAction(action, what, metadata) {\n        const linker = this.linker.linkConfig.relatedLinker;\n\n        // its an unset operation most likely.\n        if (what === undefined) {\n            const reversedLink = linker.createLink(this.fetch());\n            reversedLink.unset();\n\n            return;\n        }\n\n        if (!_.isArray(what)) {\n            what = [what];\n        }\n\n        what = _.map(what, element => {\n            if (!_.isObject(element)) {\n                return linker.mainCollection.findOne(element);\n            } else {\n                if (!element._id) {\n                    const elementId = linker.mainCollection.insert(element);\n                    _.extend(element, linker.mainCollection.findOne(elementId));\n                }\n\n                return element;\n            }\n        });\n\n        return _.map(what, element => {\n            const reversedLink = linker.createLink(element);\n\n            if (action == 'metadata') {\n                if (linker.isSingle()) {\n                    return reversedLink.metadata(metadata);\n                } else {\n                    return reversedLink.metadata(this.object, metadata);\n                }\n            } else if (action == 'add' || action == 'set') {\n                if (linker.isSingle()) {\n                    reversedLink.set(this.object, metadata);\n                } else {\n                    reversedLink.add(this.object, metadata);\n                }\n            } else {\n                if (linker.isSingle()) {\n                    reversedLink.unset();\n                } else {\n                    reversedLink.remove(this.object);\n                }\n            }\n        });\n    }\n}\n","import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkMany extends Link {\n    clean() {\n        if (!this.object[this.linkStorageField]) {\n            this.object[this.linkStorageField] = [];\n        }\n    }\n\n    /**\n     * Ads the _ids to the object.\n     * @param what\n     */\n    add(what) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what);\n            return this;\n        }\n\n        //if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/remove operations must be done from the owning-link of the relationship');\n\n        this.clean();\n\n        const _ids = this.identifyIds(what, true);\n        this._validateIds(_ids);\n\n        const field = this.linkStorageField;\n\n        // update the field\n        this.object[field] = _.union(this.object[field], _ids);\n\n        // update the db\n        let modifier = {\n            $addToSet: {\n                [field]: {$each: _ids}\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    /**\n     * @param what\n     */\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/Remove operations should be done from the owner of the relationship');\n\n        this.clean();\n        const field = this.linkStorageField;\n\n        const _ids = this.identifyIds(what);\n\n        // update the field\n        this.object[field] = _.filter(this.object[field], _id => !_.contains(_ids, _id));\n\n        // update the db\n        let modifier = {\n            $pullAll: {\n                [field]: _ids\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    set(what) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n    unset(what) {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n}","import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkManyMeta extends Link {\n    clean() {\n        if (!this.object[this.linkStorageField]) {\n            this.object[this.linkStorageField] = [];\n        }\n    }\n\n    /**\n     * @param what\n     * @param metadata\n     */\n    add(what, metadata = {}) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what, metadata);\n            return this;\n        }\n\n        const _ids = this.identifyIds(what, true);\n        this._validateIds(_ids);\n\n        let field = this.linkStorageField;\n\n        this.object[field] = this.object[field] || [];\n        let metadatas = [];\n\n        _.each(_ids, _id => {\n            let localMetadata = _.clone(metadata);\n            localMetadata._id = _id;\n\n            this.object[field].push(localMetadata);\n            metadatas.push(localMetadata);\n        });\n\n        let modifier = {\n            $addToSet: {\n                [field]: {$each: metadatas}\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    /**\n     * @param what\n     * @param extendMetadata\n     */\n    metadata(what, extendMetadata) {\n        if (this.isVirtual) {\n            this._virtualAction('metadata', what, extendMetadata);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n\n        if (what === undefined) {\n            return this.object[field];\n        }\n\n        if (_.isArray(what)) {\n            throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');\n        }\n\n        const _id = this.identifyId(what);\n\n        let existingMetadata = _.find(this.object[field], metadata => metadata._id == _id);\n        if (extendMetadata === undefined) {\n            return existingMetadata;\n        } else {\n            _.extend(existingMetadata, extendMetadata);\n            let subfield = field + '._id';\n            let subfieldUpdate = field + '.$';\n\n            this.linker.mainCollection.update({\n                _id: this.object._id,\n                [subfield]: _id\n            }, {\n               $set: {\n                   [subfieldUpdate]: existingMetadata\n               }\n            });\n        }\n\n        return this;\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        const _ids = this.identifyIds(what);\n        let field = this.linkStorageField;\n\n        this.object[field] = _.filter(this.object[field], link => !_.contains(_ids, link._id));\n\n        let modifier = {\n            $pull: {\n                [field]: {\n                    $elemMatch: {\n                        _id: {\n                            $in: _ids\n                        }\n                    }\n                }\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    set(what, metadata) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what, metadata);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n    unset(what) {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n}","import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkOne extends Link {\n    set(what) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what);\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        const _id = this.identifyId(what, true);\n        this._validateIds([_id]);\n\n        this.object[field] = _id;\n\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: _id\n            }\n        });\n\n        return this;\n    }\n\n    unset() {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        this.object[field] = null;\n\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: null\n            }\n        });\n\n        return this;\n    }\n\n    add(what) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *add* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *remove* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n}","import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkOneMeta extends Link {\n    set(what, metadata = {}) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what);\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        metadata._id = this.identifyId(what, true);\n        this._validateIds([metadata._id]);\n\n        this.object[field] = metadata;\n\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: metadata\n            }\n        });\n\n        return this;\n    }\n\n    metadata(extendMetadata) {\n        if (this.isVirtual) {\n            this._virtualAction('metadata', undefined, extendMetadata);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n\n        if (!extendMetadata) {\n            return this.object[field];\n        } else {\n            _.extend(this.object[field], extendMetadata);\n\n            this.linker.mainCollection.update(this.object._id, {\n                $set: {\n                    [field]: this.object[field]\n                }\n            });\n        }\n\n        return this;\n    }\n\n    unset() {\n        if (this.isVirtual) {\n            this._virtualAction('unset');\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        this.object[field] = {};\n\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: {}\n            }\n        });\n\n        return this;\n    }\n\n    add(what, metadata) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what, metadata);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *add* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *remove* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n}","/**\n * When you work with add/remove set/unset\n * You have the ability to pass strings, array of strings, objects, array of objects\n * If you are adding something and you want to save them in db, you can pass objects without ids.\n */\nexport default new class {\n    getIds(what, options) {\n        if (_.isArray(what)) {\n            return _.map(what, (subWhat) => {\n                return this.getId(subWhat, options)\n            })\n        } else {\n            return [this.getId(what, options)];\n        }\n\n        throw new Meteor.Error('invalid-type', `Unrecognized type: ${typeof what} for managing links`);\n    }\n\n    getId(what, options) {\n        if (typeof what === 'string') {\n            return what;\n        }\n\n        if (typeof what === 'object') {\n            if (!what._id && options.saveToDatabase) {\n                what._id = options.collection.insert(what);\n            }\n\n            return what._id\n        }\n    }\n}","import deepClone from 'lodash.clonedeep';\n\nexport default class NamedQueryBase {\n    isNamedQuery = true;\n\n    constructor(name, collection, body, options = {}) {\n        this.queryName = name;\n\n        if (_.isFunction(body)) {\n            this.resolver = body;\n        } else {\n            this.body = deepClone(body);\n        }\n\n        this.subscriptionHandle = null;\n        this.params = options.params || {};\n        this.options = options;\n        this.collection = collection;\n        this.isExposed = false;\n    }\n\n    get name() {\n        return `named_query_${this.queryName}`;\n    }\n\n    get isResolver() {\n        return !!this.resolver;\n    }\n\n    setParams(params) {\n        this.params = _.extend({}, this.params, params);\n\n        return this;\n    }\n\n    /**\n     * Validates the parameters\n     */\n    doValidateParams(params) {\n        params = params || this.params;\n\n        const {validateParams} = this.options;\n        if (!validateParams) return;\n\n        try {\n            this._validate(validateParams, params);\n        } catch (validationError) {\n            console.error(`Invalid parameters supplied to the query \"${this.queryName}\"\\n`, validationError);\n            throw validationError; // rethrow\n        }\n    }\n\n    clone(newParams) {\n        const params = _.extend({}, deepClone(this.params), newParams);\n\n        let clone = new this.constructor(\n            this.queryName,\n            this.collection,\n            this.isResolver ? this.resolver : deepClone(this.body),\n            {\n                ...this.options,\n                params,\n            }\n        );\n\n        clone.cacher = this.cacher;\n        if (this.exposeConfig) {\n            clone.exposeConfig = this.exposeConfig;\n        }\n\n        return clone;\n    }\n\n    /**\n     * @param {function|object} validator\n     * @param {object} params\n     * @private\n     */\n    _validate(validator, params) {\n        if (_.isFunction(validator)) {\n            validator.call(null, params)\n        } else {\n            check(params, validator)\n        }\n    }\n}","import CountSubscription from '../query/counts/countSubscription';\nimport createGraph from '../query/lib/createGraph.js';\nimport recursiveFetch from '../query/lib/recursiveFetch.js';\nimport prepareForProcess from '../query/lib/prepareForProcess.js';\nimport { _ } from 'meteor/underscore';\nimport callWithPromise from '../query/lib/callWithPromise';\nimport Base from './namedQuery.base';\n\nexport default class extends Base {\n    /**\n     * Subscribe\n     *\n     * @param callback\n     * @returns {null|any|*}\n     */\n    subscribe(callback) {\n        if (this.isResolver) {\n            throw new Meteor.Error('not-allowed', `You cannot subscribe to a resolver query`);\n        }\n\n        this.subscriptionHandle = Meteor.subscribe(\n            this.name,\n            this.params,\n            callback\n        );\n\n        return this.subscriptionHandle;\n    }\n\n    /**\n     * Subscribe to the counts for this query\n     *\n     * @param callback\n     * @returns {Object}\n     */\n    subscribeCount(callback) {\n        if (this.isResolver) {\n            throw new Meteor.Error('not-allowed', `You cannot subscribe to a resolver query`);\n        }\n\n        if (!this._counter) {\n            this._counter = new CountSubscription(this);\n        }\n\n        return this._counter.subscribe(this.params, callback);\n    }\n\n    /**\n     * Unsubscribe if an existing subscription exists\n     */\n    unsubscribe() {\n        if (this.subscriptionHandle) {\n            this.subscriptionHandle.stop();\n        }\n\n        this.subscriptionHandle = null;\n    }\n\n    /**\n     * Unsubscribe to the counts if a subscription exists.\n     */\n    unsubscribeCount() {\n        if (this._counter) {\n            this._counter.unsubscribe();\n            this._counter = null;\n        }\n    }\n\n    /**\n     * Fetches elements in sync using promises\n     * @return {*}\n     */\n    async fetchSync() {\n        if (this.subscriptionHandle) {\n            throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n        }\n\n        return await callWithPromise(this.name, prepareForProcess(this.body, this.params));\n    }\n\n    /**\n     * Fetches one element in sync\n     * @return {*}\n     */\n    async fetchOneSync() {\n        return _.first(await this.fetchSync())\n    }\n\n    /**\n     * Retrieves the data.\n     * @param callbackOrOptions\n     * @returns {*}\n     */\n    fetch(callbackOrOptions) {\n        if (!this.subscriptionHandle) {\n            return this._fetchStatic(callbackOrOptions)\n        } else {\n            return this._fetchReactive(callbackOrOptions);\n        }\n    }\n\n    /**\n     * @param args\n     * @returns {*}\n     */\n    fetchOne(...args) {\n        if (!this.subscriptionHandle) {\n            const callback = args[0];\n            if (!_.isFunction(callback)) {\n                throw new Meteor.Error('You did not provide a valid callback');\n            }\n\n            this.fetch((err, res) => {\n                callback(err, res ? _.first(res) : null);\n            })\n        } else {\n            return _.first(this.fetch(...args));\n        }\n    }\n\n    /**\n     * Gets the count of matching elements in sync.\n     * @returns {any}\n     */\n    async getCountSync() {\n        if (this._counter) {\n            throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n        }\n\n        return await callWithPromise(this.name + '.count', prepareForProcess(this.body, this.params));\n    }\n\n    /**\n     * Gets the count of matching elements.\n     * @param callback\n     * @returns {any}\n     */\n    getCount(callback) {\n        if (this._counter) {\n            return this._counter.getCount();\n        } else {\n            if (!callback) {\n                throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the count or subscribe first.');\n            } else {\n                return Meteor.call(this.name + '.count', this.params, callback);\n            }\n        }\n    }\n\n    /**\n     * Fetching non-reactive queries\n     * @param callback\n     * @private\n     */\n    _fetchStatic(callback) {\n        if (!callback) {\n            throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the data or subscribe first.');\n        }\n\n        Meteor.call(this.name, this.params, callback);\n    }\n\n    /**\n     * Fetching when we've got an active publication\n     *\n     * @param options\n     * @returns {*}\n     * @private\n     */\n    _fetchReactive(options = {}) {\n        let body = this.body;\n        if (this.params.$body) {\n            body = intersectDeep(body, this.params.$body);\n        }\n\n        body = prepareForProcess(body, this.params);\n        if (!options.allowSkip && body.$options && body.$options.skip) {\n            delete body.$options.skip;\n        }\n\n        return recursiveFetch(\n            createGraph(this.collection, body)\n        );\n    }\n}\n","import NamedQueryClient from './namedQuery.client';\nimport NamedQueryServer from './namedQuery.server';\n\nlet NamedQuery;\n\nif (Meteor.isServer) {\n    NamedQuery = NamedQueryServer;\n} else {\n    NamedQuery = NamedQueryClient;\n}\n\nexport default NamedQuery;","import prepareForProcess from '../query/lib/prepareForProcess.js';\nimport Base from './namedQuery.base';\nimport deepClone from 'lodash.clonedeep';\nimport MemoryResultCacher from './cache/MemoryResultCacher';\nimport intersectDeep from '../query/lib/intersectDeep';\n\nexport default class extends Base {\n    /**\n     * Retrieves the data.\n     * @returns {*}\n     */\n    fetch(context) {\n        this._performSecurityChecks(context, this.params);\n\n        if (this.isResolver) {\n            return this._fetchResolverData(context);\n        } else {\n            body = deepClone(this.body);\n            if (this.params.$body) {\n                body = intersectDeep(body, this.params.$body);\n            }\n            \n            // we must apply emobdyment here\n            this.doEmbodimentIfItApplies(body);\n\n            const query = this.collection.createQuery(\n                deepClone(body),\n                {\n                    params: deepClone(this.params)\n                }\n            );\n\n            if (this.cacher) {\n                const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n                return this.cacher.fetch(cacheId, {query});\n            }\n\n            return query.fetch();\n        }\n    }\n\n    /**\n     * @param args\n     * @returns {*}\n     */\n    fetchOne(...args) {\n        return _.first(this.fetch(...args));\n    }\n\n    /**\n     * Gets the count of matching elements.\n     *\n     * @returns {any}\n     */\n    getCount(context) {\n        this._performSecurityChecks(context, this.params);\n\n        const countCursor = this.getCursorForCounting();\n\n        if (this.cacher) {\n            const cacheId = 'count::' + this.cacher.generateQueryId(this.queryName, this.params);\n\n            return this.cacher.fetch(cacheId, {countCursor});\n        }\n\n        return countCursor.count();\n    }\n\n    /**\n     * Returns the cursor for counting\n     * This is most likely used for counts cursor\n     */\n    getCursorForCounting() {\n        let body = deepClone(this.body);\n        this.doEmbodimentIfItApplies(body);\n        body = prepareForProcess(body, this.params);\n\n        return this.collection.find(body.$filters || {}, {fields: {_id: 1}});\n    }\n\n    /**\n     * @param cacher\n     */\n    cacheResults(cacher) {\n        if (!cacher) {\n            cacher = new MemoryResultCacher();\n        }\n\n        this.cacher = cacher;\n    }\n\n    /**\n     * Configure resolve. This doesn't actually call the resolver, it just sets it\n     * @param fn\n     */\n    resolve(fn) {\n        if (!this.isResolver) {\n            throw new Meteor.Error('invalid-call', `You cannot use resolve() on a non resolver NamedQuery`);\n        }\n\n        this.resolver = fn;\n    }\n\n    /**\n     * @returns {*}\n     * @private\n     */\n    _fetchResolverData(context) {\n        const resolver = this.resolver;\n        const self = this;\n        const query = {\n            fetch() {\n                return resolver.call(context, self.params);\n            }\n        };\n\n        if (this.cacher) {\n            const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n            return this.cacher.fetch(cacheId, {query});\n        }\n\n        return query.fetch();\n    }\n\n    /**\n     * @param context Meteor method/publish context\n     * @param params\n     *\n     * @private\n     */\n    _performSecurityChecks(context, params) {\n        if (context && this.exposeConfig) {\n            this._callFirewall(context, context.userId, params);\n        }\n\n        this.doValidateParams(params);\n    }\n}","export default new class {\n    constructor() {\n        this.storage = {};\n    }\n\n    add(key, value) {\n        if (this.storage[key]) {\n            throw new Meteor.Error('invalid-name', `You have previously defined another namedQuery with the same name: \"${key}\". Named Query names should be unique.`);\n        }\n\n        this.storage[key] = value;\n    }\n\n    get(key) {\n        return this.storage[key];\n    }\n\n    getAll() {\n        return this.storage;\n    }\n}","import {EJSON} from 'meteor/ejson';\n\n/**\n * This is a very basic in-memory result caching functionality\n */\nexport default class BaseResultCacher {\n    constructor(config = {}) {\n        this.config = config;\n    }\n\n    /**\n     * @param queryName\n     * @param params\n     * @returns {string}\n     */\n    generateQueryId(queryName, params) {\n        return `${queryName}::${EJSON.stringify(params)}`;\n    }\n\n    /**\n     * Dummy function\n     */\n    fetch(cacheId, {query, countCursor}) {\n        throw 'Not implemented';\n    }\n\n    /**\n     * @param query\n     * @param countCursor\n     * @returns {*}\n     */\n    static fetchData({query, countCursor}) {\n        if (query) {\n            return query.fetch();\n        } else {\n            return countCursor.count();\n        }\n    }\n}\n","import {Meteor} from 'meteor/meteor';\nimport cloneDeep from 'lodash.clonedeep';\nimport BaseResultCacher from './BaseResultCacher';\n\nconst DEFAULT_TTL = 60000;\n\n/**\n * This is a very basic in-memory result caching functionality\n */\nexport default class MemoryResultCacher extends BaseResultCacher {\n    constructor(config = {}) {\n        super(config);\n        this.store = {};\n    }\n\n    /**\n     * @param cacheId\n     * @param query\n     * @param countCursor\n     * @returns {*}\n     */\n    fetch(cacheId, {query, countCursor}) {\n        const cacheData = this.store[cacheId];\n        if (cacheData !== undefined) {\n            return cloneDeep(cacheData);\n        }\n\n        const data = BaseResultCacher.fetchData({query, countCursor});\n        this.storeData(cacheId, data);\n\n        return data;\n    }\n\n\n    /**\n     * @param cacheId\n     * @param data\n     */\n    storeData(cacheId, data) {\n        const ttl = this.config.ttl || DEFAULT_TTL;\n        this.store[cacheId] = cloneDeep(data);\n\n        Meteor.setTimeout(() => {\n            delete this.store[cacheId];\n        }, ttl)\n    }\n}\n","import deepClone from 'lodash.clonedeep';\nimport {check} from 'meteor/check';\n\nexport default class QueryBase {\n    isGlobalQuery = true;\n\n    constructor(collection, body, options = {}) {\n        this.collection = collection;\n\n        this.body = deepClone(body);\n\n        this.params = options.params || {};\n        this.options = options;\n    }\n\n    clone(newParams) {\n        const params = _.extend({}, deepClone(this.params), newParams);\n\n        return new this.constructor(\n            this.collection,\n            deepClone(this.body),\n            {\n                params,\n                ...this.options\n            }\n        );\n    }\n\n    get name() {\n        return `exposure_${this.collection._name}`;\n    }\n\n    /**\n     * Validates the parameters\n     */\n    doValidateParams() {\n        const {validateParams} = this.options;\n        if (!validateParams) return;\n\n        if (_.isFunction(validateParams)) {\n            validateParams.call(null, this.params)\n        } else {\n            check(this.params)\n        }\n    }\n\n    /**\n     * Merges the params with previous params.\n     *\n     * @param params\n     * @returns {Query}\n     */\n    setParams(params) {\n        this.params = _.extend({}, this.params, params);\n\n        return this;\n    }\n}","import { _ } from 'meteor/underscore';\nimport CountSubscription from './counts/countSubscription';\nimport createGraph from './lib/createGraph.js';\nimport recursiveFetch from './lib/recursiveFetch.js';\nimport prepareForProcess from './lib/prepareForProcess.js';\nimport callWithPromise from './lib/callWithPromise';\nimport Base from './query.base';\n\nexport default class Query extends Base {\n    /**\n     * Subscribe\n     *\n     * @param callback {Function} optional\n     * @returns {null|any|*}\n     */\n    subscribe(callback) {\n        this.doValidateParams();\n\n        this.subscriptionHandle = Meteor.subscribe(\n            this.name,\n            prepareForProcess(this.body, this.params),\n            callback\n        );\n\n        return this.subscriptionHandle;\n    }\n\n    /**\n     * Subscribe to the counts for this query\n     *\n     * @param callback\n     * @returns {Object}\n     */\n    subscribeCount(callback) {\n        this.doValidateParams();\n\n        if (!this._counter) {\n            this._counter = new CountSubscription(this);\n        }\n\n        return this._counter.subscribe(\n            prepareForProcess(this.body, this.params),\n            callback\n        );\n    }\n\n    /**\n     * Unsubscribe if an existing subscription exists\n     */\n    unsubscribe() {\n        if (this.subscriptionHandle) {\n            this.subscriptionHandle.stop();\n        }\n\n        this.subscriptionHandle = null;\n    }\n\n    /**\n     * Unsubscribe to the counts if a subscription exists.\n     */\n    unsubscribeCount() {\n        if (this._counter) {\n            this._counter.unsubscribe();\n            this._counter = null;\n        }\n    }\n\n    /**\n     * Fetches elements in sync using promises\n     * @return {*}\n     */\n    async fetchSync() {\n        this.doValidateParams();\n\n        if (this.subscriptionHandle) {\n            throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n        }\n\n        return await callWithPromise(this.name, prepareForProcess(this.body, this.params));\n    }\n\n    /**\n     * Fetches one element in sync\n     * @return {*}\n     */\n    async fetchOneSync() {\n        return _.first(await this.fetchSync())\n    }\n\n    /**\n     * Retrieves the data.\n     * @param callbackOrOptions\n     * @returns {*}\n     */\n    fetch(callbackOrOptions) {\n        this.doValidateParams();\n\n        if (!this.subscriptionHandle) {\n            return this._fetchStatic(callbackOrOptions)\n        } else {\n            return this._fetchReactive(callbackOrOptions);\n        }\n    }\n\n    /**\n     * @param args\n     * @returns {*}\n     */\n    fetchOne(...args) {\n        if (!this.subscriptionHandle) {\n            const callback = args[0];\n            if (!_.isFunction(callback)) {\n                throw new Meteor.Error('You did not provide a valid callback');\n            }\n\n            this.fetch((err, res) => {\n                callback(err, res ? _.first(res) : null);\n            })\n        } else {\n            return _.first(this.fetch(...args));\n        }\n    }\n\n    /**\n     * Gets the count of matching elements in sync.\n     * @returns {any}\n     */\n    async getCountSync() {\n        if (this._counter) {\n            throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n        }\n\n        return await callWithPromise(this.name + '.count', prepareForProcess(this.body, this.params));\n    }\n\n    /**\n     * Gets the count of matching elements.\n     * @param callback\n     * @returns {any}\n     */\n    getCount(callback) {\n        if (this._counter) {\n            return this._counter.getCount();\n        } else {\n            if (!callback) {\n                throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the count or subscribe first.');\n            } else {\n                return Meteor.call(\n                    this.name + '.count',\n                    prepareForProcess(this.body, this.params),\n                    callback\n                );\n            }\n        }\n    }\n\n    /**\n     * Fetching non-reactive queries\n     * @param callback\n     * @private\n     */\n    _fetchStatic(callback) {\n        if (!callback) {\n            throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the data or subscribe first.');\n        }\n\n        Meteor.call(this.name, prepareForProcess(this.body, this.params), callback);\n    }\n\n    /**\n     * Fetching when we've got an active publication\n     *\n     * @param options\n     * @returns {*}\n     * @private\n     */\n    _fetchReactive(options = {}) {\n        let body = prepareForProcess(this.body, this.params);\n        if (!options.allowSkip && body.$options && body.$options.skip) {\n            delete body.$options.skip;\n        }\n\n        return recursiveFetch(\n            createGraph(this.collection, body),\n            this.params\n        );\n    }\n}\n","import QueryClient from './query.client';\nimport QueryServer from './query.server';\n\nlet Query;\n\nif (Meteor.isServer) {\n    Query = QueryServer;\n} else {\n    Query = QueryClient;\n}\n\nexport default Query;","import createGraph from './lib/createGraph.js';\nimport prepareForProcess from './lib/prepareForProcess.js';\nimport hypernova from './hypernova/hypernova.js';\nimport Base from './query.base';\n\nexport default class Query extends Base {\n    /**\n     * Retrieves the data.\n     * @param context\n     * @returns {*}\n     */\n    fetch(context = {}) {\n        const node = createGraph(\n            this.collection,\n            prepareForProcess(this.body, this.params)\n        );\n\n        return hypernova(node, context.userId, {params: this.params});\n    }\n\n    /**\n     * @param args\n     * @returns {*}\n     */\n    fetchOne(...args) {\n        return _.first(this.fetch(...args));\n    }\n\n    /**\n     * Gets the count of matching elements.\n     * @returns {integer}\n     */\n    getCount() {\n        return this.collection.find(this.body.$filters || {}, {}).count();\n    }\n}","import { Mongo } from 'meteor/mongo';\nimport { COUNTS_COLLECTION_CLIENT } from './constants';\n\n/**\n * Internal collection used to store counts on the client.\n */\nexport default new Mongo.Collection(COUNTS_COLLECTION_CLIENT);\n","export const COUNTS_COLLECTION_CLIENT = 'grapher_counts';\n","import { EJSON } from 'meteor/ejson';\nimport { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport Counts from './collection';\nimport createFauxSubscription from './createFauxSubscription';\nimport prepareForProcess from '../lib/prepareForProcess.js';\nimport NamedQueryBase from '../../namedQuery/namedQuery.base';\n\nexport default class CountSubscription {\n    /**\n     * @param {*} query - The query to use when fetching counts\n     */\n    constructor(query) {\n        this.accessToken = new ReactiveVar(null);\n        this.fauxHandle = null;\n        this.query = query;\n    }\n\n    /**\n     * Starts a subscription request for reactive counts.\n     *\n     * @param {*} arg - The argument to pass to {name}.count.subscribe\n     * @param {*} callback\n     */\n    subscribe(arg, callback) {\n        // Don't try to resubscribe if arg hasn't changed\n        if (EJSON.equals(this.lastArgs, arg) && this.fauxHandle) {\n            return this.fauxHandle;\n        }\n\n        this.accessToken.set(null);\n        this.lastArgs = arg;\n\n        Meteor.call(this.query.name + '.count.subscribe', arg, (error, token) => {\n            if (!this._markedForUnsubscribe) {\n                this.subscriptionHandle = Meteor.subscribe(this.query.name + '.count', token, callback);\n                this.accessToken.set(token);\n\n                this.disconnectComputation = Tracker.autorun(() => this.handleDisconnect());\n            }\n\n            this._markedForUnsubscribe = false;\n        });\n\n        this.fauxHandle = createFauxSubscription(this);\n        return this.fauxHandle;\n    }\n\n    /**\n     * Unsubscribes from the count endpoint, if there is such a subscription.\n     */\n    unsubscribe() {\n        if (this.subscriptionHandle) {\n            this.disconnectComputation.stop();\n            this.subscriptionHandle.stop();\n        } else {\n            // If we hit this branch, then Meteor.call in subscribe hasn't finished yet\n            // so set a flag to stop the subscription from being created\n            this._markedForUnsubscribe = true;\n        }\n\n        this.accessToken.set(null);\n        this.fauxHandle = null;\n        this.subscriptionHandle = null;\n    }\n\n    /**\n     * Reactively fetch current document count. Returns null if the subscription is not ready yet.\n     *\n     * @returns {Number|null} - Current document count\n     */\n    getCount() {\n        const id = this.accessToken.get();\n        if (id === null) return null;\n\n        const doc = Counts.findOne(id);\n        return doc.count;\n    }\n\n    /**\n     * All session info gets deleted when the server goes down, so when the client attempts to\n     * optimistically resume the '.count' publication, the server will throw a 'no-request' error.\n     *\n     * This function prevents that by manually stopping and restarting the subscription when the\n     * connection to the server is lost.\n     */\n    handleDisconnect() {\n        const status = Meteor.status();\n        if (!status.connected) {\n            this._markedForResume = true;\n            this.fauxHandle = null;\n            this.subscriptionHandle.stop();\n        }\n\n        if (status.connected && this._markedForResume) {\n            this._markedForResume = false;\n            this.subscribe(this.lastArgs);\n        }\n    }\n\n    /**\n     * Returns whether or not a subscription request has been made.\n     */\n    isSubscribed() {\n        return this.accessToken.get() !== null;\n    }\n}\n","/**\n * This method creates a \"fake\" subscription handle so that users of CountSubscription#subscribe\n * have an interface consistent with normal subscriptions.\n *\n * @param {CountSubscription} countManager\n */\nexport default (countManager) => ({\n    ready: () => countManager.accessToken.get() !== null && countManager.subscriptionHandle.ready(),\n    stop: () => countManager.unsubscribe(),\n});\n","import sift from 'sift';\n\n/**\n * Its purpose is to create filters to get the related data in one request.\n */\nexport default class AggregateFilters {\n    constructor(collectionNode, metaFilters) {\n        this.collectionNode = collectionNode;\n        this.linker = collectionNode.linker;\n        this.metaFilters = metaFilters;\n        this.isVirtual = this.linker.isVirtual();\n\n        this.linkStorageField = this.linker.linkStorageField;\n    }\n\n    get parentObjects() {\n        return this.collectionNode.parent.results;\n    }\n\n    create() {\n        switch (this.linker.strategy) {\n            case 'one':\n                return this.createOne();\n            case 'one-meta':\n                return this.createOneMeta();\n            case 'many':\n                return this.createMany();\n            case 'many-meta':\n                return this.createManyMeta();\n            default:\n                throw new Meteor.Error(`Invalid linker type: ${this.linker.type}`);\n        }\n    }\n\n    createOne() {\n        if (!this.isVirtual) {\n            return {\n                _id: {\n                    $in: _.uniq(\n                        _.pluck(this.parentObjects, this.linkStorageField)\n                    )\n                }\n            };\n        } else {\n            return {\n                [this.linkStorageField]: {\n                    $in: _.uniq(\n                        _.pluck(this.parentObjects, '_id')\n                    )\n                }\n            };\n        }\n    }\n\n    createOneMeta() {\n        if (!this.isVirtual) {\n            let eligibleObjects = this.parentObjects;\n\n            if (this.metaFilters) {\n                eligibleObjects = _.filter(this.parentObjects, object => {\n                    return sift(this.metaFilters)(object[this.linkStorageField]);\n                });\n            }\n\n            const storages = _.pluck(eligibleObjects, this.linkStorageField);\n            let ids = [];\n            _.each(storages, storage => {\n                if (storage) {\n                    ids.push(storage._id);\n                }\n            });\n\n            return {\n                _id: {$in: _.uniq(ids)}\n            };\n        } else {\n            let filters = {};\n            if (this.metaFilters) {\n                _.each(this.metaFilters, (value, key) => {\n                    filters[this.linkStorageField + '.' + key] = value;\n                })\n            }\n\n            filters[this.linkStorageField + '._id'] = {\n                $in: _.uniq(\n                    _.pluck(this.parentObjects, '_id')\n                )\n            };\n\n            return filters;\n        }\n    }\n\n    createMany() {\n        if (!this.isVirtual) {\n            const arrayOfIds = _.pluck(this.parentObjects, this.linkStorageField);\n            return {\n                _id: {\n                    $in: _.uniq(\n                        _.union(...arrayOfIds)\n                    )\n                }\n            };\n        } else {\n            const arrayOfIds = _.pluck(this.parentObjects, '_id');\n            return {\n                [this.linkStorageField]: {\n                    $in: _.uniq(\n                        _.union(...arrayOfIds)\n                    )\n                }\n            };\n        }\n    }\n\n    createManyMeta() {\n        if (!this.isVirtual) {\n            let ids = [];\n\n            _.each(this.parentObjects, object => {\n                if (object[this.linkStorageField]) {\n                    if (this.metaFilters) {\n                        const isValid = sift(this.metaFilters);\n                        _.each(object[this.linkStorageField], object => {\n                            if (isValid(object)) {\n                                ids.push(object._id);\n                            }\n                        });\n                    } else {\n                        _.each(object[this.linkStorageField], object => {\n                            ids.push(object._id);\n                        });\n                    }\n                }\n            });\n\n            return {\n                _id: {$in: _.uniq(ids)}\n            };\n        } else {\n            let filters = {};\n            if (this.metaFilters) {\n                _.each(this.metaFilters, (value, key) => {\n                    filters[key] = value;\n                })\n            }\n\n            filters._id = {\n                $in: _.uniq(\n                    _.pluck(this.parentObjects, '_id')\n                )\n            };\n\n            return {\n                [this.linkStorageField]: {\n                    $elemMatch: filters\n                }\n            };\n        }\n    }\n}","import sift from 'sift';\nimport cleanObjectForMetaFilters from './lib/cleanObjectForMetaFilters';\n\n/**\n * This only applies to inversed links. It will assemble the data in a correct manner.\n */\nexport default function (childCollectionNode, aggregateResults, metaFilters) {\n    const linker = childCollectionNode.linker;\n    const linkStorageField = linker.linkStorageField;\n    const linkName = childCollectionNode.linkName;\n    const isMeta = linker.isMeta();\n\n    let allResults = [];\n\n    if (isMeta && metaFilters) {\n        const metaFiltersTest = sift(metaFilters);\n        _.each(childCollectionNode.parent.results, parentResult => {\n            cleanObjectForMetaFilters(parentResult, linkStorageField, metaFiltersTest);\n        })\n    }\n\n    if (isMeta && linker.isMany()) {\n        // This case is treated differently because we get an array response from the pipeline.\n\n        _.each(childCollectionNode.parent.results, parentResult => {\n            parentResult[linkName] = parentResult[linkName] || [];\n\n            const eligibleAggregateResults = _.filter(aggregateResults, aggregateResult => {\n                return _.contains(aggregateResult._id, parentResult._id)\n            });\n\n            if (eligibleAggregateResults.length) {\n                const datas = _.pluck(eligibleAggregateResults, 'data'); /// [ [x1, x2], [x2, x3] ]\n\n                _.each(datas, data => {\n                    _.each(data, item => {\n                        parentResult[linkName].push(item)\n                    })\n                });\n            }\n        });\n\n        _.each(aggregateResults, aggregateResult => {\n            _.each(aggregateResult.data, item => allResults.push(item))\n        });\n    } else {\n        _.each(aggregateResults, aggregateResult => {\n            let parentResult = _.find(childCollectionNode.parent.results, (result) => {\n                return result._id == aggregateResult._id;\n            });\n\n            if (parentResult) {\n                parentResult[childCollectionNode.linkName] = aggregateResult.data;\n            }\n\n            _.each(aggregateResult.data, item => {\n                allResults.push(item)\n            });\n        });\n    }\n\n    childCollectionNode.results = allResults;\n}","import createSearchFilters from '../../links/lib/createSearchFilters';\nimport cleanObjectForMetaFilters from './lib/cleanObjectForMetaFilters';\nimport sift from 'sift';\n\nexport default (childCollectionNode, {limit, skip, metaFilters}) => {\n    const parent = childCollectionNode.parent;\n    const linker = childCollectionNode.linker;\n\n    const strategy = linker.strategy;\n    const isSingle = linker.isSingle();\n    const isMeta = linker.isMeta();\n    const fieldStorage = linker.linkStorageField;\n\n    // cleaning the parent results from a child\n    // this may be the wrong approach but it works for now\n    if (isMeta && metaFilters) {\n        const metaFiltersTest = sift(metaFilters);\n        _.each(parent.results, parentResult => {\n            cleanObjectForMetaFilters(parentResult, fieldStorage, metaFiltersTest);\n        })\n    }\n\n    _.each(parent.results, result => {\n        let data = assembleData(childCollectionNode, result, {\n            fieldStorage, strategy, isSingle\n        });\n\n        result[childCollectionNode.linkName] = filterAssembledData(data, {limit, skip})\n    });\n}\n\nfunction filterAssembledData(data, {limit, skip}) {\n    if (limit) {\n        return data.slice(skip, limit);\n    }\n\n    return data;\n}\n\nfunction assembleData(childCollectionNode, result, {fieldStorage, strategy}) {\n    const filters = createSearchFilters(result, fieldStorage, strategy, false);\n\n    return sift(filters, childCollectionNode.results);\n}\n","import { _ } from 'meteor/underscore';\n\nexport default function (childCollectionNode, filters, options, userId) {\n    let containsDottedFields = false;\n    const linker = childCollectionNode.linker;\n    const linkStorageField = linker.linkStorageField;\n    const collection = childCollectionNode.collection;\n\n    let pipeline = [];\n\n    if (collection.firewall) {\n        collection.firewall(filters, options, userId);\n    }\n\n    pipeline.push({$match: filters});\n\n    if (options.sort && _.keys(options.sort).length > 0) {\n        pipeline.push({$sort: options.sort})\n    }\n\n    let _id = linkStorageField;\n    if (linker.isMeta()) {\n        _id += '._id';\n    }\n\n    let dataPush = {\n        _id: '$_id'\n    };\n\n    _.each(options.fields, (value, field) => {\n        if (field.indexOf('.') >= 0) {\n            containsDottedFields = true;\n        }\n        const safeField = field.replace('.', '___');\n        dataPush[safeField] = '$' + field\n    });\n\n    if (linker.isMeta()) {\n        dataPush[linkStorageField] = '$' + linkStorageField;\n    }\n\n    pipeline.push({\n        $group: {\n            _id: \"$\" + _id,\n            data: {\n                $push: dataPush\n            }\n        }\n    });\n\n    if (options.limit || options.skip) {\n        let $slice = [\"$data\"];\n        if (options.skip) $slice.push(options.skip);\n        if (options.limit) $slice.push(options.limit);\n\n        pipeline.push({\n            $project: {\n                _id: 1,\n                data: {$slice}\n            }\n        })\n    }\n\n    return {pipeline, containsDottedFields};\n}","export const SAFE_DOTTED_FIELD_REPLACEMENT = '___';","import applyProps from '../lib/applyProps.js';\nimport prepareForDelivery from '../lib/prepareForDelivery.js';\nimport storeHypernovaResults from './storeHypernovaResults.js';\n\nfunction hypernova(collectionNode, userId) {\n    _.each(collectionNode.collectionNodes, childCollectionNode => {\n        let {filters, options} = applyProps(childCollectionNode);\n\n        storeHypernovaResults(childCollectionNode, userId);\n        hypernova(childCollectionNode, userId);\n    });\n}\n\nexport default function hypernovaInit(collectionNode, userId, config = {}) {\n    const bypassFirewalls = config.bypassFirewalls || false;\n    const params = config.params || {};\n\n    let {filters, options} = applyProps(collectionNode);\n\n    const collection = collectionNode.collection;\n\n    collectionNode.results = collection.find(filters, options, userId).fetch();\n\n    const userIdToPass = (config.bypassFirewalls) ? undefined : userId;\n    hypernova(collectionNode, userIdToPass);\n\n    prepareForDelivery(collectionNode, params);\n\n    return collectionNode.results;\n}\n","import applyProps from '../lib/applyProps.js';\nimport AggregateFilters from './aggregateSearchFilters.js';\nimport assemble from './assembler.js';\nimport assembleAggregateResults from './assembleAggregateResults.js';\nimport buildAggregatePipeline from './buildAggregatePipeline.js';\nimport snapBackDottedFields from './lib/snapBackDottedFields';\n\nexport default function storeHypernovaResults(childCollectionNode, userId) {\n    if (childCollectionNode.parent.results.length === 0) {\n        return childCollectionNode.results = [];\n    }\n\n    let {filters, options} = applyProps(childCollectionNode);\n\n    const metaFilters = filters.$meta;\n    const aggregateFilters = new AggregateFilters(childCollectionNode, metaFilters);\n    delete filters.$meta;\n\n    const linker = childCollectionNode.linker;\n    const isVirtual = linker.isVirtual();\n    const collection = childCollectionNode.collection;\n\n    _.extend(filters, aggregateFilters.create());\n\n    // if it's not virtual then we retrieve them and assemble them here.\n    if (!isVirtual) {\n        const filteredOptions = _.omit(options, 'limit');\n\n        childCollectionNode.results = collection.find(filters, filteredOptions, userId).fetch();\n\n        assemble(childCollectionNode, {\n            ...options,\n            metaFilters\n        });\n    } else {\n        // virtuals arrive here\n        let {pipeline, containsDottedFields} = buildAggregatePipeline(childCollectionNode, filters, options, userId);\n\n        let aggregateResults = collection.aggregate(pipeline, {explains: true});\n\n        /**\n         * If in aggregation it contains '.', we replace it with a custom string '___'\n         * And then after aggregation is complete we need to snap-it back to how it was.\n         */\n        if (containsDottedFields) {\n            snapBackDottedFields(aggregateResults);\n        }\n\n        assembleAggregateResults(childCollectionNode, aggregateResults, metaFilters);\n    }\n}\n","export default function (object, field, metaFiltersTest) {\n    if (object[field]) {\n        if (_.isArray(object[field])) {\n            object[field] = object[field].filter(metaFiltersTest)\n        } else {\n            if (!metaFiltersTest(object[field])) {\n                object[field] = null;\n            }\n        }\n    }\n}","import {SAFE_DOTTED_FIELD_REPLACEMENT} from '../constants';\nimport dot from 'dot-object';\n\nexport default function (aggregationResult) {\n    aggregationResult.forEach(result => {\n        result.data = result.data.map(document => {\n            _.each(document, (value, key) => {\n                if (key.indexOf(SAFE_DOTTED_FIELD_REPLACEMENT) >= 0) {\n                    document[key.replace(SAFE_DOTTED_FIELD_REPLACEMENT, '.')] = value;\n                    delete document[key];\n                }\n            });\n\n            return dot.object(document);\n        })\n    })\n}","const restrictOptions = [\n    'disableOplog',\n    'pollingIntervalMs',\n    'pollingThrottleMs'\n];\n\nexport default function applyProps(node) {\n    let filters = _.extend({}, node.props.$filters);\n    let options = _.extend({}, node.props.$options);\n\n    options = _.omit(options, ...restrictOptions);\n    options.fields = options.fields || {};\n\n    node.applyFields(filters, options);\n\n    return {filters, options};\n}\n","export default (method, myParameters) => {\n    return new Promise((resolve, reject) => {\n        Meteor.call(method, myParameters, (err, res) => {\n            if (err) reject(err.reason || 'Something went wrong.');\n\n            resolve(res);\n        });\n    });\n};","import CollectionNode from '../nodes/collectionNode.js';\nimport FieldNode from '../nodes/fieldNode.js';\nimport ReducerNode from '../nodes/reducerNode.js';\nimport dotize from './dotize.js';\nimport createReducers from '../reducers/lib/createReducers';\n\nconst specialFields = [\n    '$filters',\n    '$options',\n    '$postFilters',\n    '$postOptions',\n    '$postFilter'\n];\n\n/**\n * Creates node objects from the body. The root is always a collection node.\n *\n * @param root\n */\nexport function createNodes(root) {\n    // this is a fix for phantomjs tests (don't really understand it.)\n    if (!_.isObject(root.body)) {\n        return;\n    }\n\n    _.each(root.body, (body, fieldName) => {\n        if (!body) {\n            return;\n        }\n\n        // if it's a prop\n        if (_.contains(specialFields, fieldName)) {\n            root.addProp(fieldName, body);\n\n            return;\n        }\n\n        // workaround, see https://github.com/cult-of-coders/grapher/issues/134\n        // TODO: find another way to do this\n        if (root.collection.default) {\n          root.collection = root.collection.default;\n        }\n\n        // checking if it is a link.\n        let linker = root.collection.getLinker(fieldName);\n\n        if (linker) {\n            // check if it is a cached link\n            // if yes, then we need to explicitly define this at collection level\n            // so when we transform the data for delivery, we move it to the link name\n            if (linker.isDenormalized()) {\n                if (linker.isSubBodyDenormalized(body)) {\n                    handleDenormalized(root, linker, body, fieldName);\n                    return;\n                }\n            }\n\n            let subroot = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n            root.add(subroot, linker);\n\n            createNodes(subroot);\n            return;\n        }\n\n        // checking if it's a reducer\n        const reducer = root.collection.getReducer(fieldName);\n\n        if (reducer) {\n            let reducerNode = new ReducerNode(fieldName, reducer);\n            root.add(reducerNode);\n        }\n\n        // it's most likely a field then\n        addFieldNode(body, fieldName, root);\n    });\n\n    createReducers(root);\n\n    if (root.fieldNodes.length === 0) {\n        root.add(new FieldNode('_id', 1));\n    }\n}\n\n/**\n * @param body\n * @param fieldName\n * @param root\n */\nexport function addFieldNode(body, fieldName, root) {\n    // it's not a link and not a special variable => we assume it's a field\n    if (_.isObject(body)) {\n        let dotted = dotize.convert({[fieldName]: body});\n        _.each(dotted, (value, key) => {\n            root.add(new FieldNode(key, value));\n        });\n    } else {\n        let fieldNode = new FieldNode(fieldName, body);\n        root.add(fieldNode);\n    }\n}\n\n/**\n * @param collection\n * @param body\n * @returns {CollectionNode}\n */\nexport default function (collection, body) {\n    let root = new CollectionNode(collection, body);\n    createNodes(root);\n\n    return root;\n};\n\n/**\n * Ads denormalization config properly, including _id\n *\n * @param root\n * @param linker\n * @param body\n * @param fieldName\n */\nfunction handleDenormalized(root, linker, body, fieldName) {\n    Object.assign(body, {_id: 1});\n\n    const cacheField = linker.linkConfig.denormalize.field;\n    root.snapCache(cacheField, fieldName);\n\n    // if it's one and direct also include the link storage\n    if (!linker.isMany() && !linker.isVirtual()) {\n        addFieldNode(1, linker.linkStorageField, root);\n    }\n\n    addFieldNode(body, cacheField, root);\n}","// https://github.com/vardars/dotize\nexport default dotize = {};\n\ndotize.convert = function(obj, prefix) {\n    if ((!obj || typeof obj != \"object\") && !Array.isArray(obj)) {\n        if (prefix) {\n            var newObj = {};\n            newObj[prefix] = obj;\n            return newObj;\n        } else {\n            return obj;\n        }\n    }\n\n    var newObj = {};\n\n    function recurse(o, p, isArrayItem) {\n        for (var f in o) {\n            if (o[f] && typeof o[f] === \"object\") {\n                if (Array.isArray(o[f])) {\n                    if (isEmptyArray(o[f])) {\n                        newObj[getFieldName(f, p, true)] = o[f]; // empty array\n                    } else {\n                        newObj = recurse(o[f], getFieldName(f, p, false, true), true); // array\n                    }\n                } else {\n                    if (isArrayItem) {\n                        if (isEmptyObj(o[f])) {\n                            newObj[getFieldName(f, p, true)] = o[f]; // empty object\n                        } else {\n                            newObj = recurse(o[f], getFieldName(f, p, true)); // array item object\n                        }\n                    } else {\n                        if (isEmptyObj(o[f])) {\n                            newObj[getFieldName(f, p)] = o[f]; // empty object\n                        } else {\n                            newObj = recurse(o[f], getFieldName(f, p)); // object\n                        }\n                    }\n                }\n            } else {\n                if (isArrayItem || isNumber(f)) {\n                    newObj[getFieldName(f, p, true)] = o[f]; // array item primitive\n                } else {\n                    newObj[getFieldName(f, p)] = o[f]; // primitive\n                }\n            }\n        }\n\n        if (isEmptyObj(newObj))\n            return obj;\n\n        return newObj;\n    }\n\n    function isNumber(f) {\n        return !isNaN(parseInt(f));\n    }\n\n    function isEmptyObj(obj) {\n        for (var prop in obj) {\n            if (Object.hasOwnProperty.call(obj, prop))\n                return false;\n        }\n\n        return true;\n    }\n\n    function isEmptyArray(o) {\n        if (Array.isArray(o) && o.length == 0)\n            return true;\n        return false;\n    }\n\n    function getFieldName(field, prefix, isArrayItem, isArray) {\n        if (isArray)\n            return (prefix ? prefix : \"\") + (isNumber(field) ? \"[\" + field + \"]\" : \".\" + field);\n        else if (isArrayItem)\n            return (prefix ? prefix : \"\") + \"[\" + field + \"]\";\n        else\n            return (prefix ? prefix + \".\" : \"\") + field;\n    }\n\n    return recurse(obj, prefix, Array.isArray(obj));\n};","import dot from 'dot-object';\nimport {_} from 'meteor/underscore';\n\n/**\n * Given a named query that has a specific body, you can query its subbody\n * This performs an intersection of the bodies allowed in each\n *\n * @param allowedBody\n * @param clientBody\n */\nexport default function (allowedBody, clientBody) {\n    const allowedBodyDot = _.keys(dot.dot(allowedBody));\n    const clientBodyDot = _.keys(dot.dot(clientBody));\n\n    const intersection = _.intersection(allowedBodyDot, clientBodyDot);\n\n    const build = {};\n    intersection.forEach(intersectedField => {\n        build[intersectedField] = 1;\n    });\n\n    return dot.object(build);\n}","// 1. Clone children with meta relationships\n// 2. Apply $metadata to children\n// 3. Removes link storage (if not specified)\n// 4. Stores oneResult links as a single object instead of array\nimport applyReducers from '../reducers/lib/applyReducers';\nimport cleanReducerLeftovers from '../reducers/lib/cleanReducerLeftovers';\nimport sift from 'sift';\nimport {Minimongo} from 'meteor/minimongo';\n\nexport default (node, params) => {\n    snapBackCaches(node);\n    applyReducers(node, params);\n    cleanReducerLeftovers(node);\n\n    _.each(node.collectionNodes, collectionNode => {\n        cloneMetaChildren(collectionNode, node.results)\n    });\n\n    _.each(node.collectionNodes, collectionNode => {\n        assembleMetadata(collectionNode, node.results)\n    });\n\n    removeLinkStorages(node, node.results);\n    storeOneResults(node, node.results);\n    applyPostFilters(node);\n    applyPostOptions(node);\n    applyPostFilter(node, params);\n}\n\nexport function applyPostFilters(node) {\n    const postFilters = node.props.$postFilters;\n    if (postFilters) {\n        node.results = sift(postFilters, node.results);\n    }\n}\n\nexport function applyPostOptions(node) {\n    const options = node.props.$postOptions;\n    if (options) {\n        if (options.sort) {\n            const sorter = new Minimongo.Sorter(options.sort);\n            node.results.sort(sorter.getComparator());\n        }\n        if (options.limit || options.skip) {\n            const start = options.skip || 0;\n            const end = options.limit ? options.limit + start : node.results.length;\n            node.results = node.results.slice(start, end);\n        }\n    }\n}\n\n\n/**\n * Optionally applies a post filtering option\n */\nfunction applyPostFilter(node, params) {\n    if (node.props.$postFilter) {\n        const filter = node.props.$postFilter;\n\n        if (_.isArray(filter)) {\n            filter.forEach(f => {\n                node.results = f(node.results, params);\n            })\n        } else {\n            node.results = filter(node.results, params);\n        }\n    }\n}\n\nexport function removeLinkStorages(node, sameLevelResults) {\n    if (!sameLevelResults) {\n        return;\n    }\n\n    _.each(node.collectionNodes, collectionNode => {\n        const removeStorageField = collectionNode.shouldCleanStorage;\n        _.each(sameLevelResults, result => {\n            if (removeStorageField) {\n                delete result[collectionNode.linkStorageField];\n            }\n\n            removeLinkStorages(collectionNode, result[collectionNode.linkName]);\n        })\n    })\n}\n\nexport function storeOneResults(node, sameLevelResults) {\n    if (!sameLevelResults) {\n        return;\n    }\n\n    node.collectionNodes.forEach(collectionNode => {\n        _.each(sameLevelResults, result => {\n            storeOneResults(collectionNode, result[collectionNode.linkName]);\n        });\n\n        if (collectionNode.isOneResult) {\n            sameLevelResults.forEach(result => {\n                if (result[collectionNode.linkName] && _.isArray(result[collectionNode.linkName])) {\n                    result[collectionNode.linkName] = result[collectionNode.linkName]\n                        ? _.first(result[collectionNode.linkName])\n                        : undefined;\n                }\n            })\n        }\n    })\n}\n\nfunction cloneMetaChildren(node, parentResults) {\n    if (!parentResults) {\n        return;\n    }\n\n    const linkName = node.linkName;\n    const isMeta = node.isMeta;\n\n    parentResults.forEach(parentResult => {\n        if (isMeta && parentResult[linkName]) {\n            parentResult[linkName] = parentResult[linkName].map(object => {\n                return Object.assign({}, object);\n            });\n        }\n\n        node.collectionNodes.forEach(collectionNode => {\n            cloneMetaChildren(collectionNode, parentResult[linkName]);\n        });\n    });\n}\n\nexport function assembleMetadata(node, parentResults) {\n    // assembling metadata is depth first\n    node.collectionNodes.forEach(collectionNode => {\n        _.each(parentResults, result => {\n            assembleMetadata(collectionNode, result[node.linkName])\n        });\n    });\n\n    if (node.isMeta) {\n        if (node.isVirtual) {\n            _.each(parentResults, parentResult => {\n                const childResult = parentResult[node.linkName];\n\n                _.each(childResult, object => {\n                    const storage = object[node.linkStorageField];\n\n                    storeMetadata(object, parentResult, storage, true);\n                });\n            })\n        } else {\n            _.each(parentResults, parentResult => {\n                const childResult = parentResult[node.linkName];\n                const storage = parentResult[node.linkStorageField];\n\n                _.each(childResult, object => {\n                    storeMetadata(object, parentResult, storage, false);\n                });\n            })\n        }\n    }\n}\n\nfunction storeMetadata(element, parentElement, storage, isVirtual) {\n    if (isVirtual) {\n        let $metadata;\n        if (_.isArray(storage)) {\n            $metadata = _.find(storage, storageItem => storageItem._id == parentElement._id);\n        } else {\n            $metadata = storage;\n        }\n\n        element.$metadata = _.omit($metadata, '_id')\n    } else {\n        let $metadata;\n        if (_.isArray(storage)) {\n            $metadata = _.find(storage, storageItem => storageItem._id == element._id);\n        } else {\n            $metadata = storage;\n        }\n\n        element.$metadata = _.omit($metadata, '_id');\n    }\n}\n\nfunction snapBackCaches(node) {\n    node.collectionNodes.forEach(collectionNode => {\n        snapBackCaches(collectionNode);\n    });\n\n    if (!_.isEmpty(node.snapCaches)) {\n        // process stuff\n        _.each(node.snapCaches, (linkName, cacheField) => {\n            const isSingle = _.contains(node.snapCachesSingles, cacheField);\n            const linker = node.collection.getLinker(linkName);\n            // we do this because for one direct and one meta direct, id is not stored\n            const shoudStoreLinkStorage = !linker.isMany() && !linker.isVirtual();\n\n            node.results.forEach(result => {\n                if (result[cacheField]) {\n                    if (shoudStoreLinkStorage) {\n                        Object.assign(result[cacheField], {\n                            _id: linker.isMeta()\n                                ? result[linker.linkStorageField]._id\n                                : result[linker.linkStorageField]\n                        });\n                    }\n\n                    if (isSingle && _.isArray(result[cacheField])) {\n                        result[linkName] = _.first(result[cacheField]);\n                    } else {\n                        result[linkName] = result[cacheField];\n                    }\n\n                    delete result[cacheField];\n                }\n            })\n        })\n    }\n}\n","import {check, Match} from 'meteor/check';\nimport deepClone from 'lodash.clonedeep';\n\nfunction defaultFilterFunction({\n    filters,\n    options,\n    params\n}) {\n    if (params.filters) {\n        Object.assign(filters, params.filters);\n    }\n    if (params.options) {\n        Object.assign(options, params.options);\n    }\n}\n\nfunction applyFilterRecursive(data, params = {}, isRoot = false) {\n    if (isRoot && !_.isFunction(data.$filter)) {\n        data.$filter = defaultFilterFunction;\n    }\n\n    if (data.$filter) {\n        check(data.$filter, Match.OneOf(Function, [Function]));\n\n        data.$filters = data.$filters || {};\n        data.$options = data.$options || {};\n\n        if (_.isArray(data.$filter)) {\n            data.$filter.forEach(filter => {\n                filter.call(null, {\n                    filters: data.$filters,\n                    options: data.$options,\n                    params: params\n                })\n            });\n        } else {\n            data.$filter({\n                filters: data.$filters,\n                options: data.$options,\n                params: params\n            });\n        }\n\n        data.$filter = null;\n        delete(data.$filter);\n    }\n\n    _.each(data, (value, key) => {\n        if (_.isObject(value)) {\n            return applyFilterRecursive(value, params);\n        }\n    })\n}\n\nfunction applyPagination(body, _params) {\n    if (body['$paginate'] && _params) {\n        if (!body.$options) {\n            body.$options = {};\n        }\n\n        if (_params.limit) {\n            _.extend(body.$options, {\n                limit: _params.limit\n            })\n        }\n\n        if (_params.skip) {\n            _.extend(body.$options, {\n                skip: _params.skip\n            })\n        }\n\n        delete body['$paginate'];\n    }\n}\n\nexport default (_body, _params = {}) => {\n    let body = deepClone(_body);\n    let params = deepClone(_params);\n\n    applyPagination(body, params);\n    applyFilterRecursive(body, params, true);\n\n    return body;\n}\n","import applyProps from './applyProps.js';\nimport { assembleMetadata, removeLinkStorages, storeOneResults } from './prepareForDelivery';\nimport prepareForDelivery from './prepareForDelivery';\n\n/**\n * This is always run client side to build the data graph out of client-side collections.\n *\n * @param node\n * @param parentObject\n * @returns {*}\n */\nfunction fetch(node, parentObject) {\n    let {filters, options} = applyProps(node);\n\n    let results = [];\n\n    if (parentObject) {\n        let accessor = node.linker.createLink(parentObject, node.collection);\n\n        if (node.isVirtual) {\n            options.fields = options.fields || {};\n            _.extend(options.fields, {\n                [node.linkStorageField]: 1\n            });\n        }\n\n        results = accessor.find(filters, options).fetch();\n    } else {\n        results = node.collection.find(filters, options).fetch();\n    }\n\n    _.each(node.collectionNodes, collectionNode => {\n        _.each(results, result => {\n            result[collectionNode.linkName] = fetch(collectionNode, result);\n            //delete result[node.linker.linkStorageField];\n        })\n    });\n\n    return results;\n}\n\nexport default (node, params) => {\n    node.results = fetch(node);\n\n    prepareForDelivery(node, params);\n\n    return node.results;\n}\n","import FieldNode from './fieldNode.js';\nimport ReducerNode from './reducerNode.js';\nimport deepClone from 'lodash.clonedeep';\nimport {check, Match} from 'meteor/check';\n\nexport default class CollectionNode {\n    constructor(collection, body = {}, linkName = null) {\n        if (collection && !_.isObject(body)) {\n            throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');\n        }\n\n        this.body = deepClone(body);\n        this.linkName = linkName;\n        this.collection = collection;\n\n        this.nodes = [];\n        this.props = {};\n        this.parent = null;\n        this.linker = null;\n        this.linkStorageField = null;\n        this.scheduledForDeletion = false;\n        this.reducers = [];\n        this.results = [];\n        this.snapCaches = {}; // {cacheField: linkName}\n        this.snapCachesSingles = []; // [cacheField1, cacheField2]\n    }\n\n    get collectionNodes() {\n        return _.filter(this.nodes, n => n instanceof CollectionNode)\n    }\n\n    get fieldNodes() {\n        return _.filter(this.nodes, n => n instanceof FieldNode);\n    }\n\n    get reducerNodes() {\n        return _.filter(this.nodes, n => n instanceof ReducerNode);\n    }\n\n    /**\n     * Adds children to itself\n     *\n     * @param node\n     * @param linker\n     */\n    add(node, linker) {\n        node.parent = this;\n\n        if (linker) {\n            node.linker = linker;\n            node.linkStorageField = linker.linkStorageField;\n            node.isMeta = linker.isMeta();\n            node.isVirtual = linker.isVirtual();\n            node.isOneResult = linker.isOneResult();\n            node.shouldCleanStorage = this._shouldCleanStorage(node);\n        }\n\n        this.nodes.push(node);\n    }\n\n    /**\n     * @param prop\n     * @param value\n     */\n    addProp(prop, value) {\n        if (prop === '$postFilter') {\n            check(value, Match.OneOf(Function, [Function]))\n        }\n\n        _.extend(this.props, {\n            [prop]: value\n        });\n    }\n\n    /**\n     * @param _node\n     */\n    remove(_node) {\n        this.nodes = _.filter(this.nodes, node => _node !== node);\n    }\n\n    /**\n     * @param filters\n     * @param options\n     */\n    applyFields(filters, options) {\n        let hasAddedAnyField = false;\n\n        _.each(this.fieldNodes, n => {\n            hasAddedAnyField = true;\n            n.applyFields(options.fields)\n        });\n\n        // it will only get here if it has collectionNodes children\n        _.each(this.collectionNodes, (collectionNode) => {\n            let linker = collectionNode.linker;\n\n            if (linker && !linker.isVirtual()) {\n                options.fields[linker.linkStorageField] = 1;\n                hasAddedAnyField = true;\n            }\n        });\n\n        // if he selected filters, we should automatically add those fields\n        _.each(filters, (value, field) => {\n            // special handling for the $meta filter and conditional operators\n            if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {\n                // if the field or the parent of the field already exists, don't add it\n                if (!_.has(options.fields, field.split('.')[0])){\n                    hasAddedAnyField = true;\n                    options.fields[field] = 1;\n                }\n            }\n        });\n\n        if (!hasAddedAnyField) {\n            options.fields = {_id: 1};\n        }\n    }\n\n    /**\n     * @param fieldName\n     * @returns {boolean}\n     */\n    hasField(fieldName) {\n        return !!_.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param fieldName\n     * @returns {FieldNode}\n     */\n    getField(fieldName) {\n        return _.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasCollectionNode(name) {\n        return !!_.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasReducerNode(name) {\n        return !!_.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {ReducerNode}\n     */\n    getReducerNode(name) {\n        return _.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {CollectionNode}\n     */\n    getCollectionNode(name) {\n        return _.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @returns {*}\n     */\n    getName() {\n        return this.linkName\n            ? this.linkName\n            : (this.collection ? this.collection._name : 'N/A');\n    }\n\n    /**\n     * This is used for caching links\n     *\n     * @param cacheField\n     * @param subLinkName\n     */\n    snapCache(cacheField, subLinkName) {\n        this.snapCaches[cacheField] = subLinkName;\n\n        if (this.collection.getLinker(subLinkName).isOneResult()) {\n            this.snapCachesSingles.push(cacheField);\n        }\n    }\n\n    /**\n     * This method verifies whether to remove the linkStorageField form the results\n     * unless you specify it in your query.\n     *\n     * @param node\n     * @returns {boolean}\n     * @private\n     */\n    _shouldCleanStorage(node) {\n        if (node.linkStorageField === '_id') {\n            return false;\n        } else {\n            if (node.isVirtual) {\n                return !node.hasField(node.linkStorageField);\n            } else {\n                return !this.hasField(node.linkStorageField);\n            }\n        }\n    }\n}\n","export default class FieldNode {\n    constructor(name, body) {\n        this.name = name;\n        this.body = _.isObject(body) ? 1 : body;\n        this.scheduledForDeletion = false;\n    }\n\n    applyFields(fields) {\n        fields[this.name] = this.body;\n    }\n}","export default class ReducerNode {\n    constructor(name, {body, reduce}) {\n        this.name = name;\n        this.body = body;\n        this.reduceFunction = reduce;\n    }\n\n    /**\n     * When computing we also pass the parameters\n     * \n     * @param {*} object \n     * @param {*} args \n     */\n    compute(object, ...args) {\n        object[this.name] = this.reduce.call(this, object, ...args);\n    }\n\n    reduce(object, ...args) {\n        return this.reduceFunction.call(this, object, ...args);\n    }\n}","import {check} from 'meteor/check';\n\nconst storage = '__reducers';\nObject.assign(Mongo.Collection.prototype, {\n    /**\n     * @param data\n     */\n    addReducers(data) {\n        if (!this[storage]) {\n            this[storage] = {};\n        }\n\n        _.each(data, (reducerConfig, reducerName) => {\n            if (!this[reducerConfig]) {\n                this[reducerConfig] = {};\n            }\n\n            if (this.getLinker(reducerName)) {\n                throw new Meteor.Error(`You cannot add the reducer with name: ${reducerName} because it is already defined as a link in ${this._name} collection`)\n            }\n\n            if (this[reducerConfig][reducerName]) {\n                throw new Meteor.Error(`You cannot add the reducer with name: ${reducerName} because it was already added to ${this._name} collection`)\n            }\n\n            check(reducerConfig, {\n                body: Object,\n                reduce: Function\n            });\n\n            _.extend(this[storage], {\n                [reducerName]: reducerConfig\n            });\n        });\n    },\n\n    /**\n     * @param name\n     * @returns {*}\n     */\n    getReducer(name) {\n        if (this[storage]) {\n            return this[storage][name];\n        }\n    }\n});","export default function applyReducers(root, params) {\n    _.each(root.collectionNodes, node => {\n        applyReducers(node, params);\n    });\n\n    _.each(root.reducerNodes, reducerNode => {\n        root.results.forEach(result => {\n            reducerNode.compute(result, params);\n        });\n    });\n}","/**\n * @param root\n */\nexport default function cleanReducerLeftovers(root) {\n    _.each(root.collectionNodes, node => {\n        if (node.scheduledForDeletion) {\n            root.results.forEach(result => {\n                delete result[node.linkName];\n            })\n        }\n    });\n\n    _.each(root.collectionNodes, node => {\n        cleanReducerLeftovers(node);\n    });\n\n    _.each(root.fieldNodes, node => {\n        if (node.scheduledForDeletion) {\n            cleanNestedFields(node.name.split('.'), root.results);\n        }\n    });\n\n    _.each(root.reducerNodes, node => {\n        if (node.scheduledForDeletion) {\n            root.results.forEach(result => {\n                delete result[node.name];\n            })\n        }\n    });\n}\n\n// if we store a field like: 'profile.firstName'\n// then we need to delete profile: { firstName }\n// if profile will have empty keys, we need to delete profile.\n\n/**\n *\n * @param parts\n * @param results\n */\nfunction cleanNestedFields(parts, results) {\n    const fieldName = parts[0];\n    if (parts.length === 1) {\n\n        results.forEach(result => {\n            if (fieldName !== '_id') {\n                delete result[fieldName];\n            }\n        });\n\n        return;\n    }\n\n    parts.shift();\n    cleanNestedFields(parts, results.map(result => result[fieldName]));\n\n    results.forEach(result => {\n        if (_.keys(result[fieldName]).length === 0) {\n            if (fieldName !== '_id') {\n                delete result[fieldName];\n            }\n        }\n    })\n}\n","import dot from 'dot-object';\nimport { createNodes } from '../../lib/createGraph';\nimport CollectionNode from '../../nodes/collectionNode';\nimport FieldNode from '../../nodes/fieldNode';\nimport ReducerNode from '../../nodes/reducerNode';\nimport embedReducerWithLink from './embedReducerWithLink';\n\nexport default function addReducers(root) {\n    // we add reducers last, after we have added all the fields.\n    root.reducerNodes.forEach(reducer => {\n        _.each(reducer.body, (body, fieldName) => {\n            handleAddElement(root, fieldName, body);\n        })\n    });\n}\n\n/**\n * @param root\n * @param fieldName\n * @param body\n */\nexport function handleAddElement(root, fieldName, body) {\n    // if it's a link\n    const collection = root.collection;\n    const linker = collection.getLinker(fieldName);\n    if (linker) {\n        return handleAddLink(fieldName, body, root, linker);\n    }\n\n    const reducer = collection.getReducer(fieldName);\n    if (reducer) {\n        return handleAddReducer(fieldName, reducer, root);\n    }\n\n    // we assume it's a field in this case\n    return handleAddField(fieldName, body, root);\n}\n\n/**\n * @param fieldName\n * @param reducer\n * @param root\n */\nexport function handleAddReducer(fieldName, reducer, root) {\n    if (!root.hasReducerNode(fieldName)) {\n        let reducerNode = new ReducerNode(fieldName, reducer);\n        root.add(reducerNode);\n        reducerNode.scheduledForDeletion = true;\n\n        _.each(reducer.body, (body, fieldName) => {\n            handleAddElement(root, fieldName, body);\n        })\n    }\n}\n\n/**\n * @param fieldName\n * @param body\n * @param root\n * @param linker\n */\nexport function handleAddLink(fieldName, body, root, linker) {\n    if (root.hasCollectionNode(fieldName)) {\n        const collectionNode = root.getCollectionNode(fieldName);\n\n        embedReducerWithLink(body, collectionNode);\n    } else {\n        // add\n        let collectionNode = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n        collectionNode.scheduledForDeletion = true;\n        root.add(collectionNode, linker);\n\n        createNodes(collectionNode);\n    }\n}\n\n/**\n * @param fieldName\n * @param body\n * @param root\n */\nexport function handleAddField(fieldName, body, root) {\n    if (_.isObject(body)) {\n        // if reducer specifies a nested field\n        const dots = dot.dot({\n            [fieldName]: body\n        });\n\n        _.each(dots, (value, key) => {\n            if (!root.hasField(key)) {\n                let fieldNode = new FieldNode(key, value);\n                fieldNode.scheduledForDeletion = true;\n\n                root.add(fieldNode);\n            }\n        });\n    } else {\n        // if reducer does not specify a nested field, and the field does not exist.\n        if (!root.hasField(fieldName)) {\n            let fieldNode = new FieldNode(fieldName, body);\n            fieldNode.scheduledForDeletion = true;\n\n            root.add(fieldNode);\n        }\n    }\n}\n","import {handleAddField, handleAddElement, handleAddReducer} from './createReducers';\n\n/**\n * Embeds the reducer body with a collection body\n * @param reducerBody\n * @param collectionNode\n */\nexport default function embedReducerWithLink(reducerBody, collectionNode) {\n    _.each(reducerBody, (value, key) => {\n        const collection = collectionNode.collection;\n\n        if (_.isObject(value)) {\n            // nested field or link\n            if (collectionNode.body[key]) {\n                // if it exists\n                const linker = collection.getLinker(key);\n\n                // if it's a link\n                if (linker) {\n                    embedReducerWithLink(value, collectionNode.getCollectionNode(key));\n                    return;\n                }\n\n                handleAddField(key, value, collectionNode);\n            } else {\n                // does not exist, so it may be a link/reducer/field\n                handleAddElement(root, key, value);\n            }\n        } else {\n            // if this field or other reducer exists within the collection\n\n            if (!collectionNode.body[key]) {\n                // can only be field or another reducer for this.\n                const reducer = collection.getReducer(key);\n                if (reducer) {\n                    // if it's another reducer\n                    return handleAddReducer(key, reducer, collectionNode);\n                }\n\n                return handleAddField(key, value, collectionNode);\n            }\n        }\n    })\n}"]}}]
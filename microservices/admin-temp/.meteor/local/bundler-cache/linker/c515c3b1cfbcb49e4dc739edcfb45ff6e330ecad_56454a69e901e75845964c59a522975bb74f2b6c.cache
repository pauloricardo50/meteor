[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar later = Package['mrt:later'].later;\nvar Mongo = Package.mongo.Mongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar __coffeescriptShare, Job, JobCollection;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/vsivsi_job-collection/job/src/job_class.coffee                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n                                                                                                                      //\nvar JobQueue,                                                                                                         // 9\n    _clearInterval,                                                                                                   // 9\n    _setImmediate,                                                                                                    // 9\n    _setInterval,                                                                                                     // 9\n    concatReduce,                                                                                                     // 9\n    isBoolean,                                                                                                        // 9\n    isFunction,                                                                                                       // 9\n    isInteger,                                                                                                        // 9\n    isNonEmptyString,                                                                                                 // 9\n    isNonEmptyStringOrArrayOfNonEmptyStrings,                                                                         // 9\n    methodCall,                                                                                                       // 9\n    optionsHelp,                                                                                                      // 9\n    reduceCallbacks,                                                                                                  // 9\n    splitLongArray,                                                                                                   // 9\n    slice = [].slice,                                                                                                 // 9\n    indexOf = [].indexOf || function (item) {                                                                         // 9\n  for (var i = 0, l = this.length; i < l; i++) {                                                                      // 3\n    if (i in this && this[i] === item) return i;                                                                      // 3\n  }                                                                                                                   // 3\n                                                                                                                      //\n  return -1;                                                                                                          // 3\n};                                                                                                                    // 3\n                                                                                                                      //\nmethodCall = function (root, method, params, cb, after) {                                                             // 9\n  var apply, name, ref, ref1, ref2, ref3;                                                                             // 10\n                                                                                                                      //\n  if (after == null) {                                                                                                // 7\n    after = function (ret) {                                                                                          // 9\n      return ret;                                                                                                     // 9\n    };                                                                                                                // 9\n  }                                                                                                                   // 11\n                                                                                                                      //\n  apply = (ref = (ref1 = Job._ddp_apply) != null ? ref1[(ref2 = root.root) != null ? ref2 : root] : void 0) != null ? ref : Job._ddp_apply;\n                                                                                                                      //\n  if (typeof apply !== 'function') {                                                                                  // 11\n    throw new Error(\"Job remote method call error, no valid invocation method found.\");                               // 12\n  }                                                                                                                   // 15\n                                                                                                                      //\n  name = ((ref3 = root.root) != null ? ref3 : root) + \"_\" + method;                                                   // 13\n                                                                                                                      //\n  if (cb && typeof cb === 'function') {                                                                               // 14\n    return apply(name, params, function (_this) {                                                                     // 18\n      return function (err, res) {                                                                                    // 19\n        if (err) {                                                                                                    // 16\n          return cb(err);                                                                                             // 16\n        }                                                                                                             // 22\n                                                                                                                      //\n        return cb(null, after(res));                                                                                  // 23\n      };                                                                                                              // 15\n    }(this));                                                                                                         // 15\n  } else {                                                                                                            // 14\n    return after(apply(name, params));                                                                                // 19\n  }                                                                                                                   // 28\n};                                                                                                                    // 9\n                                                                                                                      //\noptionsHelp = function (options, cb) {                                                                                // 21\n  var ref;                                                                                                            // 23\n                                                                                                                      //\n  if (cb != null && typeof cb !== 'function') {                                                                       // 23\n    options = cb;                                                                                                     // 24\n    cb = void 0;                                                                                                      // 25\n  } else {                                                                                                            // 23\n    if (!((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) === 'object' && options instanceof Array && options.length < 2)) {\n      throw new Error('options... in optionsHelp must be an Array with zero or one elements');                        // 30\n    }                                                                                                                 // 39\n                                                                                                                      //\n    options = (ref = options != null ? options[0] : void 0) != null ? ref : {};                                       // 31\n  }                                                                                                                   // 41\n                                                                                                                      //\n  if ((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== 'object') {                               // 32\n    throw new Error('in optionsHelp options not an object or bad callback');                                          // 33\n  }                                                                                                                   // 44\n                                                                                                                      //\n  return [options, cb];                                                                                               // 34\n};                                                                                                                    // 21\n                                                                                                                      //\nsplitLongArray = function (arr, max) {                                                                                // 36\n  var i, k, ref, results;                                                                                             // 37\n                                                                                                                      //\n  if (!(arr instanceof Array && max > 0)) {                                                                           // 37\n    throw new Error('splitLongArray: bad params');                                                                    // 37\n  }                                                                                                                   // 52\n                                                                                                                      //\n  results = [];                                                                                                       // 38\n                                                                                                                      //\n  for (i = k = 0, ref = Math.ceil(arr.length / max); 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {        // 54\n    results.push(arr.slice(i * max, (i + 1) * max));                                                                  // 55\n  }                                                                                                                   // 38\n                                                                                                                      //\n  return results;                                                                                                     // 57\n};                                                                                                                    // 36\n                                                                                                                      //\nreduceCallbacks = function (cb, num, reduce, init) {                                                                  // 42\n  var cbCount, cbErr, cbRetVal;                                                                                       // 43\n                                                                                                                      //\n  if (reduce == null) {                                                                                               // 62\n    reduce = function (a, b) {                                                                                        // 42\n      return a || b;                                                                                                  // 64\n    };                                                                                                                // 42\n  }                                                                                                                   // 66\n                                                                                                                      //\n  if (init == null) {                                                                                                 // 67\n    init = false;                                                                                                     // 42\n  }                                                                                                                   // 69\n                                                                                                                      //\n  if (cb == null) {                                                                                                   // 43\n    return void 0;                                                                                                    // 43\n  }                                                                                                                   // 72\n                                                                                                                      //\n  if (!(typeof cb === 'function' && num > 0 && typeof reduce === 'function')) {                                       // 44\n    throw new Error('Bad params given to reduceCallbacks');                                                           // 45\n  }                                                                                                                   // 75\n                                                                                                                      //\n  cbRetVal = init;                                                                                                    // 46\n  cbCount = 0;                                                                                                        // 47\n  cbErr = null;                                                                                                       // 48\n  return function (err, res) {                                                                                        // 49\n    if (!cbErr) {                                                                                                     // 50\n      if (err) {                                                                                                      // 51\n        cbErr = err;                                                                                                  // 52\n        return cb(err);                                                                                               // 83\n      } else {                                                                                                        // 51\n        cbCount++;                                                                                                    // 55\n        cbRetVal = reduce(cbRetVal, res);                                                                             // 56\n                                                                                                                      //\n        if (cbCount === num) {                                                                                        // 57\n          return cb(null, cbRetVal);                                                                                  // 88\n        } else if (cbCount > num) {                                                                                   // 57\n          throw new Error(\"reduceCallbacks callback invoked more than requested \" + num + \" times\");                  // 60\n        }                                                                                                             // 51\n      }                                                                                                               // 50\n    }                                                                                                                 // 93\n  };                                                                                                                  // 49\n};                                                                                                                    // 42\n                                                                                                                      //\nconcatReduce = function (a, b) {                                                                                      // 62\n  if (!(a instanceof Array)) {                                                                                        // 63\n    a = [a];                                                                                                          // 63\n  }                                                                                                                   // 100\n                                                                                                                      //\n  return a.concat(b);                                                                                                 // 101\n};                                                                                                                    // 62\n                                                                                                                      //\nisInteger = function (i) {                                                                                            // 66\n  return typeof i === 'number' && Math.floor(i) === i;                                                                // 105\n};                                                                                                                    // 66\n                                                                                                                      //\nisBoolean = function (b) {                                                                                            // 68\n  return typeof b === 'boolean';                                                                                      // 109\n};                                                                                                                    // 68\n                                                                                                                      //\nisFunction = function (f) {                                                                                           // 70\n  return typeof f === 'function';                                                                                     // 113\n};                                                                                                                    // 70\n                                                                                                                      //\nisNonEmptyString = function (s) {                                                                                     // 72\n  return typeof s === 'string' && s.length > 0;                                                                       // 117\n};                                                                                                                    // 72\n                                                                                                                      //\nisNonEmptyStringOrArrayOfNonEmptyStrings = function (sa) {                                                            // 74\n  var s;                                                                                                              // 75\n  return isNonEmptyString(sa) || sa instanceof Array && sa.length !== 0 && function () {                              // 122\n    var k, len, results;                                                                                              // 123\n    results = [];                                                                                                     // 78\n                                                                                                                      //\n    for (k = 0, len = sa.length; k < len; k++) {                                                                      // 125\n      s = sa[k];                                                                                                      // 126\n                                                                                                                      //\n      if (isNonEmptyString(s)) {                                                                                      // 127\n        results.push(s);                                                                                              // 128\n      }                                                                                                               // 129\n    }                                                                                                                 // 78\n                                                                                                                      //\n    return results;                                                                                                   // 131\n  }().length === sa.length;                                                                                           // 132\n};                                                                                                                    // 74\n                                                                                                                      //\n_setImmediate = function () {                                                                                         // 81\n  var args, func;                                                                                                     // 82\n  func = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                                  // 81\n                                                                                                                      //\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.setTimeout : void 0) != null) {                      // 82\n    return Meteor.setTimeout.apply(Meteor, [func, 0].concat(slice.call(args)));                                       // 83\n  } else if (typeof setImmediate !== \"undefined\" && setImmediate !== null) {                                          // 82\n    return setImmediate.apply(null, [func].concat(slice.call(args)));                                                 // 85\n  } else {                                                                                                            // 84\n    return setTimeout.apply(null, [func, 0].concat(slice.call(args)));                                                // 88\n  }                                                                                                                   // 144\n};                                                                                                                    // 81\n                                                                                                                      //\n_setInterval = function () {                                                                                          // 90\n  var args, func, timeOut;                                                                                            // 91\n  func = arguments[0], timeOut = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];          // 90\n                                                                                                                      //\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.setInterval : void 0) != null) {                     // 91\n    return Meteor.setInterval.apply(Meteor, [func, timeOut].concat(slice.call(args)));                                // 92\n  } else {                                                                                                            // 91\n    return setInterval.apply(null, [func, timeOut].concat(slice.call(args)));                                         // 95\n  }                                                                                                                   // 154\n};                                                                                                                    // 90\n                                                                                                                      //\n_clearInterval = function (id) {                                                                                      // 97\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.clearInterval : void 0) != null) {                   // 98\n    return Meteor.clearInterval(id);                                                                                  // 99\n  } else {                                                                                                            // 98\n    return clearInterval(id);                                                                                         // 102\n  }                                                                                                                   // 162\n};                                                                                                                    // 97\n                                                                                                                      //\nJobQueue = function () {                                                                                              // 106\n  function JobQueue() {                                                                                               // 108\n    var k, options, ref, ref1, ref2, ref3, ref4, root1, type1, worker;                                                // 109\n    root1 = arguments[0], type1 = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), worker = arguments[k++];\n    this.root = root1;                                                                                                // 108\n    this.type = type1;                                                                                                // 108\n    this.worker = worker;                                                                                             // 108\n                                                                                                                      //\n    if (!(this instanceof JobQueue)) {                                                                                // 109\n      return function (func, args, ctor) {                                                                            // 110\n        ctor.prototype = func.prototype;                                                                              // 174\n        var child = new ctor(),                                                                                       // 175\n            result = func.apply(child, args);                                                                         // 175\n        return Object(result) === result ? result : child;                                                            // 176\n      }(JobQueue, [this.root, this.type].concat(slice.call(options), [this.worker]), function () {});                 // 177\n    }                                                                                                                 // 178\n                                                                                                                      //\n    ref = optionsHelp(options, this.worker), options = ref[0], this.worker = ref[1];                                  // 111\n                                                                                                                      //\n    if (!isNonEmptyString(this.root)) {                                                                               // 113\n      throw new Error(\"JobQueue: Invalid root, must be nonempty string\");                                             // 114\n    }                                                                                                                 // 182\n                                                                                                                      //\n    if (!isNonEmptyStringOrArrayOfNonEmptyStrings(this.type)) {                                                       // 116\n      throw new Error(\"JobQueue: Invalid type, must be nonempty string or array of nonempty strings\");                // 117\n    }                                                                                                                 // 185\n                                                                                                                      //\n    if (!isFunction(this.worker)) {                                                                                   // 119\n      throw new Error(\"JobQueue: Invalid worker, must be a function\");                                                // 120\n    }                                                                                                                 // 188\n                                                                                                                      //\n    this.errorCallback = (ref1 = options.errorCallback) != null ? ref1 : function (e) {                               // 122\n      return console.error(\"JobQueue: \", e);                                                                          // 190\n    };                                                                                                                // 122\n                                                                                                                      //\n    if (!isFunction(this.errorCallback)) {                                                                            // 124\n      throw new Error(\"JobQueue: Invalid errorCallback, must be a function\");                                         // 125\n    }                                                                                                                 // 194\n                                                                                                                      //\n    this.pollInterval = options.pollInterval != null && !options.pollInterval ? Job.forever : !(options.pollInterval != null && isInteger(options.pollInterval)) ? 5000 : options.pollInterval;\n                                                                                                                      //\n    if (!(isInteger(this.pollInterval) && this.pollInterval >= 0)) {                                                  // 134\n      throw new Error(\"JobQueue: Invalid pollInterval, must be a positive integer\");                                  // 135\n    }                                                                                                                 // 198\n                                                                                                                      //\n    this.concurrency = (ref2 = options.concurrency) != null ? ref2 : 1;                                               // 137\n                                                                                                                      //\n    if (!(isInteger(this.concurrency) && this.concurrency >= 0)) {                                                    // 138\n      throw new Error(\"JobQueue: Invalid concurrency, must be a positive integer\");                                   // 139\n    }                                                                                                                 // 202\n                                                                                                                      //\n    this.payload = (ref3 = options.payload) != null ? ref3 : 1;                                                       // 141\n                                                                                                                      //\n    if (!(isInteger(this.payload) && this.payload >= 0)) {                                                            // 142\n      throw new Error(\"JobQueue: Invalid payload, must be a positive integer\");                                       // 143\n    }                                                                                                                 // 206\n                                                                                                                      //\n    this.prefetch = (ref4 = options.prefetch) != null ? ref4 : 0;                                                     // 145\n                                                                                                                      //\n    if (!(isInteger(this.prefetch) && this.prefetch >= 0)) {                                                          // 146\n      throw new Error(\"JobQueue: Invalid prefetch, must be a positive integer\");                                      // 147\n    }                                                                                                                 // 210\n                                                                                                                      //\n    this.workTimeout = options.workTimeout;                                                                           // 149\n                                                                                                                      //\n    if (this.workTimeout != null && !(isInteger(this.workTimeout) && this.workTimeout >= 0)) {                        // 150\n      throw new Error(\"JobQueue: Invalid workTimeout, must be a positive integer\");                                   // 151\n    }                                                                                                                 // 214\n                                                                                                                      //\n    this.callbackStrict = options.callbackStrict;                                                                     // 153\n                                                                                                                      //\n    if (this.callbackStrict != null && !isBoolean(this.callbackStrict)) {                                             // 154\n      throw new Error(\"JobQueue: Invalid callbackStrict, must be a boolean\");                                         // 155\n    }                                                                                                                 // 218\n                                                                                                                      //\n    this._workers = {};                                                                                               // 157\n    this._tasks = [];                                                                                                 // 158\n    this._taskNumber = 0;                                                                                             // 159\n    this._stoppingGetWork = void 0;                                                                                   // 160\n    this._stoppingTasks = void 0;                                                                                     // 161\n    this._interval = null;                                                                                            // 162\n    this._getWorkOutstanding = false;                                                                                 // 163\n    this.paused = true;                                                                                               // 164\n    this.resume();                                                                                                    // 165\n  }                                                                                                                   // 108\n                                                                                                                      //\n  JobQueue.prototype._getWork = function () {                                                                         // 230\n    var numJobsToGet, options;                                                                                        // 169\n                                                                                                                      //\n    if (!(this._getWorkOutstanding || this.paused)) {                                                                 // 169\n      numJobsToGet = this.prefetch + this.payload * (this.concurrency - this.running()) - this.length();              // 170\n                                                                                                                      //\n      if (numJobsToGet > 0) {                                                                                         // 171\n        this._getWorkOutstanding = true;                                                                              // 172\n        options = {                                                                                                   // 173\n          maxJobs: numJobsToGet                                                                                       // 173\n        };                                                                                                            // 173\n                                                                                                                      //\n        if (this.workTimeout != null) {                                                                               // 174\n          options.workTimeout = this.workTimeout;                                                                     // 174\n        }                                                                                                             // 241\n                                                                                                                      //\n        return Job.getWork(this.root, this.type, options, function (_this) {                                          // 242\n          return function (err, jobs) {                                                                               // 243\n            var j, k, len;                                                                                            // 176\n            _this._getWorkOutstanding = false;                                                                        // 176\n                                                                                                                      //\n            if (err) {                                                                                                // 177\n              return _this.errorCallback(new Error(\"Received error from getWork(): \" + err));                         // 247\n            } else if (jobs != null && jobs instanceof Array) {                                                       // 177\n              if (jobs.length > numJobsToGet) {                                                                       // 180\n                _this.errorCallback(new Error(\"getWork() returned jobs (\" + jobs.length + \") in excess of maxJobs (\" + numJobsToGet + \")\"));\n              }                                                                                                       // 251\n                                                                                                                      //\n              for (k = 0, len = jobs.length; k < len; k++) {                                                          // 182\n                j = jobs[k];                                                                                          // 253\n                                                                                                                      //\n                _this._tasks.push(j);                                                                                 // 183\n                                                                                                                      //\n                if (_this._stoppingGetWork == null) {                                                                 // 184\n                  _setImmediate(_this._process.bind(_this));                                                          // 184\n                }                                                                                                     // 257\n              }                                                                                                       // 182\n                                                                                                                      //\n              if (_this._stoppingGetWork != null) {                                                                   // 185\n                return _this._stoppingGetWork();                                                                      // 260\n              }                                                                                                       // 179\n            } else {                                                                                                  // 179\n              return _this.errorCallback(new Error(\"Nonarray response from server from getWork()\"));                  // 263\n            }                                                                                                         // 264\n          };                                                                                                          // 175\n        }(this));                                                                                                     // 175\n      }                                                                                                               // 169\n    }                                                                                                                 // 268\n  };                                                                                                                  // 167\n                                                                                                                      //\n  JobQueue.prototype._only_once = function (fn) {                                                                     // 271\n    var called;                                                                                                       // 190\n    called = false;                                                                                                   // 190\n    return function (_this) {                                                                                         // 191\n      return function () {                                                                                            // 275\n        if (called) {                                                                                                 // 192\n          _this.errorCallback(new Error(\"Worker callback called multiple times\"));                                    // 193\n                                                                                                                      //\n          if (_this.callbackStrict) {                                                                                 // 194\n            throw new Error(\"JobQueue: worker callback was invoked multiple times\");                                  // 195\n          }                                                                                                           // 192\n        }                                                                                                             // 281\n                                                                                                                      //\n        called = true;                                                                                                // 196\n        return fn.apply(_this, arguments);                                                                            // 283\n      };                                                                                                              // 191\n    }(this);                                                                                                          // 191\n  };                                                                                                                  // 189\n                                                                                                                      //\n  JobQueue.prototype._process = function () {                                                                         // 288\n    var cb, job, next;                                                                                                // 200\n                                                                                                                      //\n    if (!this.paused && this.running() < this.concurrency && this.length()) {                                         // 200\n      if (this.payload > 1) {                                                                                         // 201\n        job = this._tasks.splice(0, this.payload);                                                                    // 202\n      } else {                                                                                                        // 201\n        job = this._tasks.shift();                                                                                    // 204\n      }                                                                                                               // 295\n                                                                                                                      //\n      job._taskId = \"Task_\" + this._taskNumber++;                                                                     // 205\n      this._workers[job._taskId] = job;                                                                               // 206\n                                                                                                                      //\n      next = function (_this) {                                                                                       // 207\n        return function () {                                                                                          // 299\n          delete _this._workers[job._taskId];                                                                         // 208\n                                                                                                                      //\n          if (_this._stoppingTasks != null && _this.running() === 0 && _this.length() === 0) {                        // 209\n            return _this._stoppingTasks();                                                                            // 302\n          } else {                                                                                                    // 209\n            _setImmediate(_this._process.bind(_this));                                                                // 212\n                                                                                                                      //\n            return _setImmediate(_this._getWork.bind(_this));                                                         // 305\n          }                                                                                                           // 306\n        };                                                                                                            // 207\n      }(this);                                                                                                        // 207\n                                                                                                                      //\n      cb = this._only_once(next);                                                                                     // 214\n      return this.worker(job, cb);                                                                                    // 310\n    }                                                                                                                 // 311\n  };                                                                                                                  // 199\n                                                                                                                      //\n  JobQueue.prototype._stopGetWork = function (callback) {                                                             // 314\n    _clearInterval(this._interval);                                                                                   // 218\n                                                                                                                      //\n    this._interval = null;                                                                                            // 219\n                                                                                                                      //\n    if (this._getWorkOutstanding) {                                                                                   // 220\n      return this._stoppingGetWork = callback;                                                                        // 318\n    } else {                                                                                                          // 220\n      return _setImmediate(callback);                                                                                 // 320\n    }                                                                                                                 // 321\n  };                                                                                                                  // 217\n                                                                                                                      //\n  JobQueue.prototype._waitForTasks = function (callback) {                                                            // 324\n    if (this.running() !== 0) {                                                                                       // 226\n      return this._stoppingTasks = callback;                                                                          // 326\n    } else {                                                                                                          // 226\n      return _setImmediate(callback);                                                                                 // 328\n    }                                                                                                                 // 329\n  };                                                                                                                  // 225\n                                                                                                                      //\n  JobQueue.prototype._failJobs = function (tasks, callback) {                                                         // 332\n    var count, job, k, len, results;                                                                                  // 232\n                                                                                                                      //\n    if (tasks.length === 0) {                                                                                         // 232\n      _setImmediate(callback);                                                                                        // 232\n    }                                                                                                                 // 336\n                                                                                                                      //\n    count = 0;                                                                                                        // 233\n    results = [];                                                                                                     // 234\n                                                                                                                      //\n    for (k = 0, len = tasks.length; k < len; k++) {                                                                   // 339\n      job = tasks[k];                                                                                                 // 340\n      results.push(job.fail(\"Worker shutdown\", function (_this) {                                                     // 341\n        return function (err, res) {                                                                                  // 342\n          count++;                                                                                                    // 236\n                                                                                                                      //\n          if (count === tasks.length) {                                                                               // 237\n            return callback();                                                                                        // 345\n          }                                                                                                           // 346\n        };                                                                                                            // 235\n      }(this)));                                                                                                      // 235\n    }                                                                                                                 // 234\n                                                                                                                      //\n    return results;                                                                                                   // 350\n  };                                                                                                                  // 231\n                                                                                                                      //\n  JobQueue.prototype._hard = function (callback) {                                                                    // 353\n    this.paused = true;                                                                                               // 241\n    return this._stopGetWork(function (_this) {                                                                       // 355\n      return function () {                                                                                            // 356\n        var i, r, ref, tasks;                                                                                         // 243\n        tasks = _this._tasks;                                                                                         // 243\n        _this._tasks = [];                                                                                            // 244\n        ref = _this._workers;                                                                                         // 245\n                                                                                                                      //\n        for (i in meteorBabelHelpers.sanitizeForInObject(ref)) {                                                      // 245\n          r = ref[i];                                                                                                 // 362\n          tasks = tasks.concat(r);                                                                                    // 246\n        }                                                                                                             // 245\n                                                                                                                      //\n        return _this._failJobs(tasks, callback);                                                                      // 365\n      };                                                                                                              // 242\n    }(this));                                                                                                         // 242\n  };                                                                                                                  // 240\n                                                                                                                      //\n  JobQueue.prototype._stop = function (callback) {                                                                    // 370\n    this.paused = true;                                                                                               // 250\n    return this._stopGetWork(function (_this) {                                                                       // 372\n      return function () {                                                                                            // 373\n        var tasks;                                                                                                    // 252\n        tasks = _this._tasks;                                                                                         // 252\n        _this._tasks = [];                                                                                            // 253\n        return _this._waitForTasks(function () {                                                                      // 377\n          return _this._failJobs(tasks, callback);                                                                    // 378\n        });                                                                                                           // 254\n      };                                                                                                              // 251\n    }(this));                                                                                                         // 251\n  };                                                                                                                  // 249\n                                                                                                                      //\n  JobQueue.prototype._soft = function (callback) {                                                                    // 384\n    return this._stopGetWork(function (_this) {                                                                       // 385\n      return function () {                                                                                            // 386\n        return _this._waitForTasks(callback);                                                                         // 387\n      };                                                                                                              // 258\n    }(this));                                                                                                         // 258\n  };                                                                                                                  // 257\n                                                                                                                      //\n  JobQueue.prototype.length = function () {                                                                           // 392\n    return this._tasks.length;                                                                                        // 393\n  };                                                                                                                  // 261\n                                                                                                                      //\n  JobQueue.prototype.running = function () {                                                                          // 396\n    return Object.keys(this._workers).length;                                                                         // 397\n  };                                                                                                                  // 263\n                                                                                                                      //\n  JobQueue.prototype.idle = function () {                                                                             // 400\n    return this.length() + this.running() === 0;                                                                      // 401\n  };                                                                                                                  // 265\n                                                                                                                      //\n  JobQueue.prototype.full = function () {                                                                             // 404\n    return this.running() === this.concurrency;                                                                       // 405\n  };                                                                                                                  // 267\n                                                                                                                      //\n  JobQueue.prototype.pause = function () {                                                                            // 408\n    if (this.paused) {                                                                                                // 270\n      return;                                                                                                         // 270\n    }                                                                                                                 // 411\n                                                                                                                      //\n    if (!(this.pollInterval >= Job.forever)) {                                                                        // 271\n      _clearInterval(this._interval);                                                                                 // 272\n                                                                                                                      //\n      this._interval = null;                                                                                          // 273\n    }                                                                                                                 // 415\n                                                                                                                      //\n    this.paused = true;                                                                                               // 274\n    return this;                                                                                                      // 417\n  };                                                                                                                  // 269\n                                                                                                                      //\n  JobQueue.prototype.resume = function () {                                                                           // 420\n    var k, ref, w;                                                                                                    // 278\n                                                                                                                      //\n    if (!this.paused) {                                                                                               // 278\n      return;                                                                                                         // 278\n    }                                                                                                                 // 424\n                                                                                                                      //\n    this.paused = false;                                                                                              // 279\n                                                                                                                      //\n    _setImmediate(this._getWork.bind(this));                                                                          // 280\n                                                                                                                      //\n    if (!(this.pollInterval >= Job.forever)) {                                                                        // 281\n      this._interval = _setInterval(this._getWork.bind(this), this.pollInterval);                                     // 282\n    }                                                                                                                 // 429\n                                                                                                                      //\n    for (w = k = 1, ref = this.concurrency; 1 <= ref ? k <= ref : k >= ref; w = 1 <= ref ? ++k : --k) {               // 283\n      _setImmediate(this._process.bind(this));                                                                        // 284\n    }                                                                                                                 // 283\n                                                                                                                      //\n    return this;                                                                                                      // 433\n  };                                                                                                                  // 277\n                                                                                                                      //\n  JobQueue.prototype.trigger = function () {                                                                          // 436\n    if (this.paused) {                                                                                                // 288\n      return;                                                                                                         // 288\n    }                                                                                                                 // 439\n                                                                                                                      //\n    _setImmediate(this._getWork.bind(this));                                                                          // 289\n                                                                                                                      //\n    return this;                                                                                                      // 441\n  };                                                                                                                  // 287\n                                                                                                                      //\n  JobQueue.prototype.shutdown = function () {                                                                         // 444\n    var cb, k, options, ref;                                                                                          // 293\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 293\n                                                                                                                      //\n    if (options.level == null) {                                                                                      // 448\n      options.level = 'normal';                                                                                       // 294\n    }                                                                                                                 // 450\n                                                                                                                      //\n    if (options.quiet == null) {                                                                                      // 451\n      options.quiet = false;                                                                                          // 295\n    }                                                                                                                 // 453\n                                                                                                                      //\n    if (cb == null) {                                                                                                 // 296\n      if (!options.quiet) {                                                                                           // 297\n        console.warn(\"using default shutdown callback!\");                                                             // 297\n      }                                                                                                               // 457\n                                                                                                                      //\n      cb = function (_this) {                                                                                         // 298\n        return function () {                                                                                          // 459\n          return console.warn(\"Shutdown complete\");                                                                   // 460\n        };                                                                                                            // 298\n      }(this);                                                                                                        // 298\n    }                                                                                                                 // 463\n                                                                                                                      //\n    switch (options.level) {                                                                                          // 300\n      case 'hard':                                                                                                    // 300\n        if (!options.quiet) {                                                                                         // 302\n          console.warn(\"Shutting down hard\");                                                                         // 302\n        }                                                                                                             // 468\n                                                                                                                      //\n        return this._hard(cb);                                                                                        // 469\n                                                                                                                      //\n      case 'soft':                                                                                                    // 300\n        if (!options.quiet) {                                                                                         // 305\n          console.warn(\"Shutting down soft\");                                                                         // 305\n        }                                                                                                             // 473\n                                                                                                                      //\n        return this._soft(cb);                                                                                        // 474\n                                                                                                                      //\n      default:                                                                                                        // 300\n        if (!options.quiet) {                                                                                         // 308\n          console.warn(\"Shutting down normally\");                                                                     // 308\n        }                                                                                                             // 478\n                                                                                                                      //\n        return this._stop(cb);                                                                                        // 479\n    }                                                                                                                 // 300\n  };                                                                                                                  // 292\n                                                                                                                      //\n  return JobQueue;                                                                                                    // 483\n}();                                                                                                                  // 485\n                                                                                                                      //\nJob = function () {                                                                                                   // 313\n  Job.forever = 9007199254740992;                                                                                     // 316\n  Job.foreverDate = new Date(8640000000000000);                                                                       // 319\n  Job.jobPriorities = {                                                                                               // 321\n    low: 10,                                                                                                          // 322\n    normal: 0,                                                                                                        // 323\n    medium: -5,                                                                                                       // 324\n    high: -10,                                                                                                        // 325\n    critical: -15                                                                                                     // 326\n  };                                                                                                                  // 322\n  Job.jobRetryBackoffMethods = ['constant', 'exponential'];                                                           // 328\n  Job.jobStatuses = ['waiting', 'paused', 'ready', 'running', 'failed', 'cancelled', 'completed'];                    // 330\n  Job.jobLogLevels = ['info', 'success', 'warning', 'danger'];                                                        // 333\n  Job.jobStatusCancellable = ['running', 'ready', 'waiting', 'paused'];                                               // 335\n  Job.jobStatusPausable = ['ready', 'waiting'];                                                                       // 336\n  Job.jobStatusRemovable = ['cancelled', 'completed', 'failed'];                                                      // 337\n  Job.jobStatusRestartable = ['cancelled', 'failed'];                                                                 // 338\n  Job.ddpMethods = ['startJobs', 'stopJobs', 'startJobServer', 'shutdownJobServer', 'jobRemove', 'jobPause', 'jobResume', 'jobReady', 'jobCancel', 'jobRestart', 'jobSave', 'jobRerun', 'getWork', 'getJob', 'jobLog', 'jobProgress', 'jobDone', 'jobFail'];\n  Job.ddpPermissionLevels = ['admin', 'manager', 'creator', 'worker'];                                                // 346\n  Job.ddpMethodPermissions = {                                                                                        // 349\n    'startJobs': ['startJobs', 'admin'],                                                                              // 350\n    'stopJobs': ['stopJobs', 'admin'],                                                                                // 351\n    'startJobServer': ['startJobServer', 'admin'],                                                                    // 352\n    'shutdownJobServer': ['shutdownJobServer', 'admin'],                                                              // 353\n    'jobRemove': ['jobRemove', 'admin', 'manager'],                                                                   // 354\n    'jobPause': ['jobPause', 'admin', 'manager'],                                                                     // 355\n    'jobResume': ['jobResume', 'admin', 'manager'],                                                                   // 356\n    'jobCancel': ['jobCancel', 'admin', 'manager'],                                                                   // 357\n    'jobReady': ['jobReady', 'admin', 'manager'],                                                                     // 358\n    'jobRestart': ['jobRestart', 'admin', 'manager'],                                                                 // 359\n    'jobSave': ['jobSave', 'admin', 'creator'],                                                                       // 360\n    'jobRerun': ['jobRerun', 'admin', 'creator'],                                                                     // 361\n    'getWork': ['getWork', 'admin', 'worker'],                                                                        // 362\n    'getJob': ['getJob', 'admin', 'worker'],                                                                          // 363\n    'jobLog': ['jobLog', 'admin', 'worker'],                                                                          // 364\n    'jobProgress': ['jobProgress', 'admin', 'worker'],                                                                // 365\n    'jobDone': ['jobDone', 'admin', 'worker'],                                                                        // 366\n    'jobFail': ['jobFail', 'admin', 'worker']                                                                         // 367\n  };                                                                                                                  // 350\n  Job._ddp_apply = void 0;                                                                                            // 370\n                                                                                                                      //\n  Job._setDDPApply = function (apply, collectionName) {                                                               // 374\n    if (typeof apply === 'function') {                                                                                // 375\n      if (typeof collectionName === 'string') {                                                                       // 376\n        if (this._ddp_apply == null) {                                                                                // 544\n          this._ddp_apply = {};                                                                                       // 377\n        }                                                                                                             // 546\n                                                                                                                      //\n        if (typeof this._ddp_apply === 'function') {                                                                  // 378\n          throw new Error(\"Job.setDDP must specify a collection name each time if called more than once.\");           // 379\n        }                                                                                                             // 549\n                                                                                                                      //\n        return this._ddp_apply[collectionName] = apply;                                                               // 550\n      } else if (!this._ddp_apply) {                                                                                  // 376\n        return this._ddp_apply = apply;                                                                               // 552\n      } else {                                                                                                        // 381\n        throw new Error(\"Job.setDDP must specify a collection name each time if called more than once.\");             // 384\n      }                                                                                                               // 375\n    } else {                                                                                                          // 375\n      throw new Error(\"Bad function in Job.setDDPApply()\");                                                           // 386\n    }                                                                                                                 // 558\n  };                                                                                                                  // 374\n                                                                                                                      //\n  Job.setDDP = function (ddp, collectionNames, Fiber) {                                                               // 389\n    var collName, k, len, results;                                                                                    // 390\n                                                                                                                      //\n    if (ddp == null) {                                                                                                // 563\n      ddp = null;                                                                                                     // 389\n    }                                                                                                                 // 565\n                                                                                                                      //\n    if (collectionNames == null) {                                                                                    // 566\n      collectionNames = null;                                                                                         // 389\n    }                                                                                                                 // 568\n                                                                                                                      //\n    if (Fiber == null) {                                                                                              // 569\n      Fiber = null;                                                                                                   // 389\n    }                                                                                                                 // 571\n                                                                                                                      //\n    if (!(typeof collectionNames === 'string' || collectionNames instanceof Array)) {                                 // 390\n      Fiber = collectionNames;                                                                                        // 392\n      collectionNames = [void 0];                                                                                     // 393\n    } else if (typeof collectionNames === 'string') {                                                                 // 390\n      collectionNames = [collectionNames];                                                                            // 396\n    }                                                                                                                 // 577\n                                                                                                                      //\n    results = [];                                                                                                     // 397\n                                                                                                                      //\n    for (k = 0, len = collectionNames.length; k < len; k++) {                                                         // 579\n      collName = collectionNames[k];                                                                                  // 580\n                                                                                                                      //\n      if (!(ddp != null && ddp.close != null && ddp.subscribe != null)) {                                             // 398\n        if (ddp === null && (typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.apply : void 0) != null) {     // 400\n          results.push(this._setDDPApply(Meteor.apply, collName));                                                    // 583\n        } else {                                                                                                      // 400\n          throw new Error(\"Bad ddp object in Job.setDDP()\");                                                          // 405\n        }                                                                                                             // 398\n      } else if (ddp.observe == null) {                                                                               // 398\n        results.push(this._setDDPApply(ddp.apply.bind(ddp), collName));                                               // 588\n      } else {                                                                                                        // 406\n        if (Fiber == null) {                                                                                          // 409\n          results.push(this._setDDPApply(ddp.call.bind(ddp), collName));                                              // 591\n        } else {                                                                                                      // 409\n          results.push(this._setDDPApply(function (name, params, cb) {                                                // 593\n            var fib;                                                                                                  // 415\n            fib = Fiber.current;                                                                                      // 415\n            ddp.call(name, params, function (err, res) {                                                              // 416\n              if (cb != null && typeof cb === 'function') {                                                           // 417\n                return cb(err, res);                                                                                  // 598\n              } else {                                                                                                // 417\n                if (err) {                                                                                            // 420\n                  return fib.throwInto(err);                                                                          // 601\n                } else {                                                                                              // 420\n                  return fib.run(res);                                                                                // 603\n                }                                                                                                     // 417\n              }                                                                                                       // 605\n            });                                                                                                       // 416\n                                                                                                                      //\n            if (cb != null && typeof cb === 'function') {} else {                                                     // 424\n              return Fiber[\"yield\"]();                                                                                // 427\n            }                                                                                                         // 611\n          }, collName));                                                                                              // 414\n        }                                                                                                             // 406\n      }                                                                                                               // 614\n    }                                                                                                                 // 397\n                                                                                                                      //\n    return results;                                                                                                   // 616\n  };                                                                                                                  // 389\n                                                                                                                      //\n  Job.getWork = function () {                                                                                         // 433\n    var cb, k, options, ref, root, type;                                                                              // 434\n    root = arguments[0], type = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 434\n                                                                                                                      //\n    if (typeof type === 'string') {                                                                                   // 435\n      type = [type];                                                                                                  // 435\n    }                                                                                                                 // 625\n                                                                                                                      //\n    if (options.workTimeout != null) {                                                                                // 436\n      if (!(isInteger(options.workTimeout) && options.workTimeout > 0)) {                                             // 437\n        throw new Error('getWork: workTimeout must be a positive integer');                                           // 438\n      }                                                                                                               // 436\n    }                                                                                                                 // 630\n                                                                                                                      //\n    return methodCall(root, \"getWork\", [type, options], cb, function (_this) {                                        // 631\n      return function (res) {                                                                                         // 632\n        var doc, jobs;                                                                                                // 440\n                                                                                                                      //\n        jobs = function () {                                                                                          // 440\n          var l, len, results;                                                                                        // 635\n          results = [];                                                                                               // 440\n                                                                                                                      //\n          for (l = 0, len = res.length; l < len; l++) {                                                               // 637\n            doc = res[l];                                                                                             // 638\n            results.push(new Job(root, doc));                                                                         // 639\n          }                                                                                                           // 440\n                                                                                                                      //\n          return results;                                                                                             // 641\n        }() || [];                                                                                                    // 642\n                                                                                                                      //\n        if (options.maxJobs != null) {                                                                                // 441\n          return jobs;                                                                                                // 442\n        } else {                                                                                                      // 441\n          return jobs[0];                                                                                             // 444\n        }                                                                                                             // 647\n      };                                                                                                              // 439\n    }(this));                                                                                                         // 439\n  };                                                                                                                  // 433\n                                                                                                                      //\n  Job.processJobs = JobQueue;                                                                                         // 447\n                                                                                                                      //\n  Job.makeJob = function () {                                                                                         // 451\n    var depFlag;                                                                                                      // 452\n    depFlag = false;                                                                                                  // 452\n    return function (root, doc) {                                                                                     // 657\n      if (!depFlag) {                                                                                                 // 454\n        depFlag = true;                                                                                               // 455\n        console.warn(\"Job.makeJob(root, jobDoc) has been deprecated and will be removed in a future release, use 'new Job(root, jobDoc)' instead.\");\n      }                                                                                                               // 661\n                                                                                                                      //\n      return new Job(root, doc);                                                                                      // 662\n    };                                                                                                                // 453\n  }();                                                                                                                // 451\n                                                                                                                      //\n  Job.getJob = function () {                                                                                          // 461\n    var cb, id, k, options, ref, root;                                                                                // 462\n    root = arguments[0], id = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 462\n                                                                                                                      //\n    if (options.getLog == null) {                                                                                     // 670\n      options.getLog = false;                                                                                         // 463\n    }                                                                                                                 // 672\n                                                                                                                      //\n    return methodCall(root, \"getJob\", [id, options], cb, function (_this) {                                           // 673\n      return function (doc) {                                                                                         // 674\n        if (doc) {                                                                                                    // 465\n          return new Job(root, doc);                                                                                  // 676\n        } else {                                                                                                      // 465\n          return void 0;                                                                                              // 678\n        }                                                                                                             // 679\n      };                                                                                                              // 464\n    }(this));                                                                                                         // 464\n  };                                                                                                                  // 461\n                                                                                                                      //\n  Job.getJobs = function () {                                                                                         // 471\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 472\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 472\n                                                                                                                      //\n    if (options.getLog == null) {                                                                                     // 688\n      options.getLog = false;                                                                                         // 473\n    }                                                                                                                 // 690\n                                                                                                                      //\n    retVal = [];                                                                                                      // 474\n    chunksOfIds = splitLongArray(ids, 32);                                                                            // 475\n    myCb = reduceCallbacks(cb, chunksOfIds.length, concatReduce, []);                                                 // 476\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 477\n      chunkOfIds = chunksOfIds[l];                                                                                    // 695\n      retVal = retVal.concat(methodCall(root, \"getJob\", [chunkOfIds, options], myCb, function (_this) {               // 478\n        return function (doc) {                                                                                       // 697\n          var d, len1, m, results;                                                                                    // 479\n                                                                                                                      //\n          if (doc) {                                                                                                  // 479\n            results = [];                                                                                             // 480\n                                                                                                                      //\n            for (m = 0, len1 = doc.length; m < len1; m++) {                                                           // 701\n              d = doc[m];                                                                                             // 702\n              results.push(new Job(root, d.type, d.data, d));                                                         // 703\n            }                                                                                                         // 480\n                                                                                                                      //\n            return results;                                                                                           // 705\n          } else {                                                                                                    // 479\n            return null;                                                                                              // 707\n          }                                                                                                           // 708\n        };                                                                                                            // 478\n      }(this)));                                                                                                      // 478\n    }                                                                                                                 // 477\n                                                                                                                      //\n    return retVal;                                                                                                    // 483\n  };                                                                                                                  // 471\n                                                                                                                      //\n  Job.pauseJobs = function () {                                                                                       // 487\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 488\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 488\n    retVal = false;                                                                                                   // 489\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 490\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 491\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 492\n      chunkOfIds = chunksOfIds[l];                                                                                    // 723\n      retVal = methodCall(root, \"jobPause\", [chunkOfIds, options], myCb) || retVal;                                   // 493\n    }                                                                                                                 // 492\n                                                                                                                      //\n    return retVal;                                                                                                    // 494\n  };                                                                                                                  // 487\n                                                                                                                      //\n  Job.resumeJobs = function () {                                                                                      // 498\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 499\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 499\n    retVal = false;                                                                                                   // 500\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 501\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 502\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 503\n      chunkOfIds = chunksOfIds[l];                                                                                    // 737\n      retVal = methodCall(root, \"jobResume\", [chunkOfIds, options], myCb) || retVal;                                  // 504\n    }                                                                                                                 // 503\n                                                                                                                      //\n    return retVal;                                                                                                    // 505\n  };                                                                                                                  // 498\n                                                                                                                      //\n  Job.readyJobs = function () {                                                                                       // 509\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 510\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n                                                                                                                      //\n    if (ids == null) {                                                                                                // 746\n      ids = [];                                                                                                       // 509\n    }                                                                                                                 // 748\n                                                                                                                      //\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 510\n                                                                                                                      //\n    if (options.force == null) {                                                                                      // 750\n      options.force = false;                                                                                          // 511\n    }                                                                                                                 // 752\n                                                                                                                      //\n    retVal = false;                                                                                                   // 512\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 513\n                                                                                                                      //\n    if (!(chunksOfIds.length > 0)) {                                                                                  // 514\n      chunksOfIds = [[]];                                                                                             // 514\n    }                                                                                                                 // 757\n                                                                                                                      //\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 515\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 516\n      chunkOfIds = chunksOfIds[l];                                                                                    // 760\n      retVal = methodCall(root, \"jobReady\", [chunkOfIds, options], myCb) || retVal;                                   // 517\n    }                                                                                                                 // 516\n                                                                                                                      //\n    return retVal;                                                                                                    // 518\n  };                                                                                                                  // 509\n                                                                                                                      //\n  Job.cancelJobs = function () {                                                                                      // 521\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 522\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 522\n                                                                                                                      //\n    if (options.antecedents == null) {                                                                                // 770\n      options.antecedents = true;                                                                                     // 523\n    }                                                                                                                 // 772\n                                                                                                                      //\n    retVal = false;                                                                                                   // 524\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 525\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 526\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 527\n      chunkOfIds = chunksOfIds[l];                                                                                    // 777\n      retVal = methodCall(root, \"jobCancel\", [chunkOfIds, options], myCb) || retVal;                                  // 528\n    }                                                                                                                 // 527\n                                                                                                                      //\n    return retVal;                                                                                                    // 529\n  };                                                                                                                  // 521\n                                                                                                                      //\n  Job.restartJobs = function () {                                                                                     // 532\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 533\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 533\n                                                                                                                      //\n    if (options.retries == null) {                                                                                    // 787\n      options.retries = 1;                                                                                            // 534\n    }                                                                                                                 // 789\n                                                                                                                      //\n    if (options.dependents == null) {                                                                                 // 790\n      options.dependents = true;                                                                                      // 535\n    }                                                                                                                 // 792\n                                                                                                                      //\n    retVal = false;                                                                                                   // 536\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 537\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 538\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 539\n      chunkOfIds = chunksOfIds[l];                                                                                    // 797\n      retVal = methodCall(root, \"jobRestart\", [chunkOfIds, options], myCb) || retVal;                                 // 540\n    }                                                                                                                 // 539\n                                                                                                                      //\n    return retVal;                                                                                                    // 541\n  };                                                                                                                  // 532\n                                                                                                                      //\n  Job.removeJobs = function () {                                                                                      // 544\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 545\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 545\n    retVal = false;                                                                                                   // 546\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 547\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 548\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 549\n      chunkOfIds = chunksOfIds[l];                                                                                    // 811\n      retVal = methodCall(root, \"jobRemove\", [chunkOfIds, options], myCb) || retVal;                                  // 550\n    }                                                                                                                 // 549\n                                                                                                                      //\n    return retVal;                                                                                                    // 551\n  };                                                                                                                  // 544\n                                                                                                                      //\n  Job.startJobs = function () {                                                                                       // 555\n    var cb, k, options, ref, root;                                                                                    // 556\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 556\n    return methodCall(root, \"startJobs\", [options], cb);                                                              // 821\n  };                                                                                                                  // 555\n                                                                                                                      //\n  Job.stopJobs = function () {                                                                                        // 561\n    var cb, k, options, ref, root;                                                                                    // 562\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 562\n                                                                                                                      //\n    if (options.timeout == null) {                                                                                    // 828\n      options.timeout = 60 * 1000;                                                                                    // 563\n    }                                                                                                                 // 830\n                                                                                                                      //\n    return methodCall(root, \"stopJobs\", [options], cb);                                                               // 831\n  };                                                                                                                  // 561\n                                                                                                                      //\n  Job.startJobServer = function () {                                                                                  // 567\n    var cb, k, options, ref, root;                                                                                    // 568\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 568\n    return methodCall(root, \"startJobServer\", [options], cb);                                                         // 838\n  };                                                                                                                  // 567\n                                                                                                                      //\n  Job.shutdownJobServer = function () {                                                                               // 572\n    var cb, k, options, ref, root;                                                                                    // 573\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 573\n                                                                                                                      //\n    if (options.timeout == null) {                                                                                    // 845\n      options.timeout = 60 * 1000;                                                                                    // 574\n    }                                                                                                                 // 847\n                                                                                                                      //\n    return methodCall(root, \"shutdownJobServer\", [options], cb);                                                      // 848\n  };                                                                                                                  // 572\n                                                                                                                      //\n  function Job(rootVal, type, data) {                                                                                 // 578\n    var doc, ref, time;                                                                                               // 579\n                                                                                                                      //\n    if (!(this instanceof Job)) {                                                                                     // 579\n      return new Job(rootVal, type, data);                                                                            // 580\n    }                                                                                                                 // 855\n                                                                                                                      //\n    this.root = rootVal;                                                                                              // 583\n    this._root = rootVal;                                                                                             // 585\n                                                                                                                      //\n    if (((ref = this.root) != null ? ref.root : void 0) != null && typeof this.root.root === 'string') {              // 588\n      this.root = this._root.root;                                                                                    // 589\n    }                                                                                                                 // 860\n                                                                                                                      //\n    if (data == null && (type != null ? type.data : void 0) != null && (type != null ? type.type : void 0) != null) {\n      if (type instanceof Job) {                                                                                      // 593\n        return type;                                                                                                  // 594\n      }                                                                                                               // 864\n                                                                                                                      //\n      doc = type;                                                                                                     // 596\n      data = doc.data;                                                                                                // 597\n      type = doc.type;                                                                                                // 598\n    } else {                                                                                                          // 592\n      doc = {};                                                                                                       // 600\n    }                                                                                                                 // 870\n                                                                                                                      //\n    if (!((typeof doc === \"undefined\" ? \"undefined\" : _typeof(doc)) === 'object' && (typeof data === \"undefined\" ? \"undefined\" : _typeof(data)) === 'object' && typeof type === 'string' && typeof this.root === 'string')) {\n      throw new Error(\"new Job: bad parameter(s), \" + this.root + \" (\" + _typeof(this.root) + \"), \" + type + \" (\" + (typeof type === \"undefined\" ? \"undefined\" : _typeof(type)) + \"), \" + data + \" (\" + (typeof data === \"undefined\" ? \"undefined\" : _typeof(data)) + \"), \" + doc + \" (\" + (typeof doc === \"undefined\" ? \"undefined\" : _typeof(doc)) + \")\");\n    } else if (doc.type != null && doc.data != null) {                                                                // 602\n      this._doc = doc;                                                                                                // 609\n    } else {                                                                                                          // 608\n      time = new Date();                                                                                              // 612\n      this._doc = {                                                                                                   // 613\n        runId: null,                                                                                                  // 614\n        type: type,                                                                                                   // 615\n        data: data,                                                                                                   // 616\n        status: 'waiting',                                                                                            // 617\n        updated: time,                                                                                                // 618\n        created: time                                                                                                 // 619\n      };                                                                                                              // 614\n      this.priority().retry().repeat().after().progress().depends().log(\"Constructed\");                               // 620\n    }                                                                                                                 // 886\n                                                                                                                      //\n    return this;                                                                                                      // 622\n  }                                                                                                                   // 578\n                                                                                                                      //\n  Job.prototype._echo = function (message, level) {                                                                   // 890\n    if (level == null) {                                                                                              // 891\n      level = null;                                                                                                   // 625\n    }                                                                                                                 // 893\n                                                                                                                      //\n    switch (level) {                                                                                                  // 626\n      case 'danger':                                                                                                  // 626\n        console.error(message);                                                                                       // 627\n        break;                                                                                                        // 627\n                                                                                                                      //\n      case 'warning':                                                                                                 // 626\n        console.warn(message);                                                                                        // 628\n        break;                                                                                                        // 628\n                                                                                                                      //\n      case 'success':                                                                                                 // 626\n        console.log(message);                                                                                         // 629\n        break;                                                                                                        // 629\n                                                                                                                      //\n      default:                                                                                                        // 626\n        console.info(message);                                                                                        // 630\n    }                                                                                                                 // 626\n  };                                                                                                                  // 625\n                                                                                                                      //\n  Job.prototype.depends = function (jobs) {                                                                           // 909\n    var depends, j, k, len;                                                                                           // 636\n                                                                                                                      //\n    if (jobs) {                                                                                                       // 636\n      if (jobs instanceof Job) {                                                                                      // 637\n        jobs = [jobs];                                                                                                // 638\n      }                                                                                                               // 914\n                                                                                                                      //\n      if (jobs instanceof Array) {                                                                                    // 639\n        depends = this._doc.depends;                                                                                  // 640\n                                                                                                                      //\n        for (k = 0, len = jobs.length; k < len; k++) {                                                                // 641\n          j = jobs[k];                                                                                                // 918\n                                                                                                                      //\n          if (!(j instanceof Job && j._doc._id != null)) {                                                            // 642\n            throw new Error('Each provided object must be a saved Job instance (with an _id)');                       // 643\n          }                                                                                                           // 921\n                                                                                                                      //\n          depends.push(j._doc._id);                                                                                   // 644\n        }                                                                                                             // 639\n      } else {                                                                                                        // 639\n        throw new Error('Bad input parameter: depends() accepts a falsy value, or Job or array of Jobs');             // 646\n      }                                                                                                               // 636\n    } else {                                                                                                          // 636\n      depends = [];                                                                                                   // 648\n    }                                                                                                                 // 929\n                                                                                                                      //\n    this._doc.depends = depends;                                                                                      // 649\n    this._doc.resolved = [];                                                                                          // 650\n    return this;                                                                                                      // 651\n  };                                                                                                                  // 635\n                                                                                                                      //\n  Job.prototype.priority = function (level) {                                                                         // 935\n    var priority;                                                                                                     // 655\n                                                                                                                      //\n    if (level == null) {                                                                                              // 937\n      level = 0;                                                                                                      // 654\n    }                                                                                                                 // 939\n                                                                                                                      //\n    if (typeof level === 'string') {                                                                                  // 655\n      priority = Job.jobPriorities[level];                                                                            // 656\n                                                                                                                      //\n      if (priority == null) {                                                                                         // 657\n        throw new Error('Invalid string priority level provided');                                                    // 658\n      }                                                                                                               // 655\n    } else if (isInteger(level)) {                                                                                    // 655\n      priority = level;                                                                                               // 660\n    } else {                                                                                                          // 659\n      throw new Error('priority must be an integer or valid priority level');                                         // 662\n      priority = 0;                                                                                                   // 663\n    }                                                                                                                 // 950\n                                                                                                                      //\n    this._doc.priority = priority;                                                                                    // 664\n    return this;                                                                                                      // 665\n  };                                                                                                                  // 654\n                                                                                                                      //\n  Job.prototype.retry = function (options) {                                                                          // 955\n    var base, ref;                                                                                                    // 671\n                                                                                                                      //\n    if (options == null) {                                                                                            // 957\n      options = 0;                                                                                                    // 670\n    }                                                                                                                 // 959\n                                                                                                                      //\n    if (isInteger(options) && options >= 0) {                                                                         // 671\n      options = {                                                                                                     // 672\n        retries: options                                                                                              // 672\n      };                                                                                                              // 672\n    }                                                                                                                 // 964\n                                                                                                                      //\n    if ((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== 'object') {                             // 673\n      throw new Error('bad parameter: accepts either an integer >= 0 or an options object');                          // 674\n    }                                                                                                                 // 967\n                                                                                                                      //\n    if (options.retries != null) {                                                                                    // 675\n      if (!(isInteger(options.retries) && options.retries >= 0)) {                                                    // 676\n        throw new Error('bad option: retries must be an integer >= 0');                                               // 677\n      }                                                                                                               // 971\n                                                                                                                      //\n      options.retries++;                                                                                              // 678\n    } else {                                                                                                          // 675\n      options.retries = Job.forever;                                                                                  // 680\n    }                                                                                                                 // 975\n                                                                                                                      //\n    if (options.until != null) {                                                                                      // 681\n      if (!(options.until instanceof Date)) {                                                                         // 682\n        throw new Error('bad option: until must be a Date object');                                                   // 683\n      }                                                                                                               // 681\n    } else {                                                                                                          // 681\n      options.until = Job.foreverDate;                                                                                // 685\n    }                                                                                                                 // 982\n                                                                                                                      //\n    if (options.wait != null) {                                                                                       // 686\n      if (!(isInteger(options.wait) && options.wait >= 0)) {                                                          // 687\n        throw new Error('bad option: wait must be an integer >= 0');                                                  // 688\n      }                                                                                                               // 686\n    } else {                                                                                                          // 686\n      options.wait = 5 * 60 * 1000;                                                                                   // 690\n    }                                                                                                                 // 989\n                                                                                                                      //\n    if (options.backoff != null) {                                                                                    // 691\n      if (ref = options.backoff, indexOf.call(Job.jobRetryBackoffMethods, ref) < 0) {                                 // 692\n        throw new Error('bad option: invalid retry backoff method');                                                  // 693\n      }                                                                                                               // 691\n    } else {                                                                                                          // 691\n      options.backoff = 'constant';                                                                                   // 695\n    }                                                                                                                 // 996\n                                                                                                                      //\n    this._doc.retries = options.retries;                                                                              // 697\n    this._doc.repeatRetries = options.retries;                                                                        // 698\n    this._doc.retryWait = options.wait;                                                                               // 699\n                                                                                                                      //\n    if ((base = this._doc).retried == null) {                                                                         // 1000\n      base.retried = 0;                                                                                               // 1001\n    }                                                                                                                 // 1002\n                                                                                                                      //\n    this._doc.retryBackoff = options.backoff;                                                                         // 701\n    this._doc.retryUntil = options.until;                                                                             // 702\n    return this;                                                                                                      // 703\n  };                                                                                                                  // 670\n                                                                                                                      //\n  Job.prototype.repeat = function (options) {                                                                         // 1008\n    var base, ref;                                                                                                    // 709\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1010\n      options = 0;                                                                                                    // 708\n    }                                                                                                                 // 1012\n                                                                                                                      //\n    if (isInteger(options) && options >= 0) {                                                                         // 709\n      options = {                                                                                                     // 710\n        repeats: options                                                                                              // 710\n      };                                                                                                              // 710\n    }                                                                                                                 // 1017\n                                                                                                                      //\n    if ((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== 'object') {                             // 711\n      throw new Error('bad parameter: accepts either an integer >= 0 or an options object');                          // 712\n    }                                                                                                                 // 1020\n                                                                                                                      //\n    if (options.wait != null && options.schedule != null) {                                                           // 713\n      throw new Error('bad options: wait and schedule options are mutually exclusive');                               // 714\n    }                                                                                                                 // 1023\n                                                                                                                      //\n    if (options.repeats != null) {                                                                                    // 715\n      if (!(isInteger(options.repeats) && options.repeats >= 0)) {                                                    // 716\n        throw new Error('bad option: repeats must be an integer >= 0');                                               // 717\n      }                                                                                                               // 715\n    } else {                                                                                                          // 715\n      options.repeats = Job.forever;                                                                                  // 719\n    }                                                                                                                 // 1030\n                                                                                                                      //\n    if (options.until != null) {                                                                                      // 720\n      if (!(options.until instanceof Date)) {                                                                         // 721\n        throw new Error('bad option: until must be a Date object');                                                   // 722\n      }                                                                                                               // 720\n    } else {                                                                                                          // 720\n      options.until = Job.foreverDate;                                                                                // 724\n    }                                                                                                                 // 1037\n                                                                                                                      //\n    if (options.wait != null) {                                                                                       // 725\n      if (!(isInteger(options.wait) && options.wait >= 0)) {                                                          // 726\n        throw new Error('bad option: wait must be an integer >= 0');                                                  // 727\n      }                                                                                                               // 725\n    } else {                                                                                                          // 725\n      options.wait = 5 * 60 * 1000;                                                                                   // 729\n    }                                                                                                                 // 1044\n                                                                                                                      //\n    if (options.schedule != null) {                                                                                   // 730\n      if (_typeof(options.schedule) !== 'object') {                                                                   // 731\n        throw new Error('bad option, schedule option must be an object');                                             // 732\n      }                                                                                                               // 1048\n                                                                                                                      //\n      if (!(((ref = options.schedule) != null ? ref.schedules : void 0) != null && options.schedule.schedules instanceof Array)) {\n        throw new Error('bad option, schedule object requires a schedules attribute of type Array.');                 // 734\n      }                                                                                                               // 1051\n                                                                                                                      //\n      if (options.schedule.exceptions != null && !(options.schedule.exceptions instanceof Array)) {                   // 735\n        throw new Error('bad option, schedule object exceptions attribute must be an Array');                         // 736\n      }                                                                                                               // 1054\n                                                                                                                      //\n      options.wait = {                                                                                                // 737\n        schedules: options.schedule.schedules,                                                                        // 738\n        exceptions: options.schedule.exceptions                                                                       // 739\n      };                                                                                                              // 738\n    }                                                                                                                 // 1059\n                                                                                                                      //\n    this._doc.repeats = options.repeats;                                                                              // 741\n    this._doc.repeatWait = options.wait;                                                                              // 742\n                                                                                                                      //\n    if ((base = this._doc).repeated == null) {                                                                        // 1062\n      base.repeated = 0;                                                                                              // 1063\n    }                                                                                                                 // 1064\n                                                                                                                      //\n    this._doc.repeatUntil = options.until;                                                                            // 744\n    return this;                                                                                                      // 745\n  };                                                                                                                  // 708\n                                                                                                                      //\n  Job.prototype.delay = function (wait) {                                                                             // 1069\n    if (wait == null) {                                                                                               // 1070\n      wait = 0;                                                                                                       // 748\n    }                                                                                                                 // 1072\n                                                                                                                      //\n    if (!(isInteger(wait) && wait >= 0)) {                                                                            // 749\n      throw new Error('Bad parameter, delay requires a non-negative integer.');                                       // 750\n    }                                                                                                                 // 1075\n                                                                                                                      //\n    return this.after(new Date(new Date().valueOf() + wait));                                                         // 751\n  };                                                                                                                  // 748\n                                                                                                                      //\n  Job.prototype.after = function (time) {                                                                             // 1079\n    var after;                                                                                                        // 755\n                                                                                                                      //\n    if (time == null) {                                                                                               // 1081\n      time = new Date(0);                                                                                             // 754\n    }                                                                                                                 // 1083\n                                                                                                                      //\n    if ((typeof time === \"undefined\" ? \"undefined\" : _typeof(time)) === 'object' && time instanceof Date) {           // 755\n      after = time;                                                                                                   // 756\n    } else {                                                                                                          // 755\n      throw new Error('Bad parameter, after requires a valid Date object');                                           // 758\n    }                                                                                                                 // 1088\n                                                                                                                      //\n    this._doc.after = after;                                                                                          // 759\n    return this;                                                                                                      // 760\n  };                                                                                                                  // 754\n                                                                                                                      //\n  Job.prototype.log = function () {                                                                                   // 1093\n    var base, cb, k, message, options, ref, ref1;                                                                     // 764\n    message = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 764\n                                                                                                                      //\n    if (options.level == null) {                                                                                      // 1097\n      options.level = 'info';                                                                                         // 765\n    }                                                                                                                 // 1099\n                                                                                                                      //\n    if (typeof message !== 'string') {                                                                                // 766\n      throw new Error('Log message must be a string');                                                                // 767\n    }                                                                                                                 // 1102\n                                                                                                                      //\n    if (!(typeof options.level === 'string' && (ref1 = options.level, indexOf.call(Job.jobLogLevels, ref1) >= 0))) {  // 768\n      throw new Error('Log level options must be one of Job.jobLogLevels');                                           // 769\n    }                                                                                                                 // 1105\n                                                                                                                      //\n    if (options.echo != null) {                                                                                       // 770\n      if (options.echo && Job.jobLogLevels.indexOf(options.level) >= Job.jobLogLevels.indexOf(options.echo)) {        // 771\n        this._echo(\"LOG: \" + options.level + \", \" + this._doc._id + \" \" + this._doc.runId + \": \" + message, options.level);\n      }                                                                                                               // 1109\n                                                                                                                      //\n      delete options.echo;                                                                                            // 773\n    }                                                                                                                 // 1111\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 774\n      return methodCall(this._root, \"jobLog\", [this._doc._id, this._doc.runId, message, options], cb);                // 775\n    } else {                                                                                                          // 774\n      if ((base = this._doc).log == null) {                                                                           // 1115\n        base.log = [];                                                                                                // 1116\n      }                                                                                                               // 1117\n                                                                                                                      //\n      this._doc.log.push({                                                                                            // 778\n        time: new Date(),                                                                                             // 778\n        runId: null,                                                                                                  // 778\n        level: options.level,                                                                                         // 778\n        message: message                                                                                              // 778\n      });                                                                                                             // 778\n                                                                                                                      //\n      if (cb != null && typeof cb === 'function') {                                                                   // 779\n        _setImmediate(cb, null, true);                                                                                // 780\n      }                                                                                                               // 1126\n                                                                                                                      //\n      return this;                                                                                                    // 781\n    }                                                                                                                 // 1128\n  };                                                                                                                  // 763\n                                                                                                                      //\n  Job.prototype.progress = function () {                                                                              // 1131\n    var cb, completed, k, options, progress, ref, total;                                                              // 786\n    completed = arguments[0], total = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n                                                                                                                      //\n    if (completed == null) {                                                                                          // 1134\n      completed = 0;                                                                                                  // 785\n    }                                                                                                                 // 1136\n                                                                                                                      //\n    if (total == null) {                                                                                              // 1137\n      total = 1;                                                                                                      // 785\n    }                                                                                                                 // 1139\n                                                                                                                      //\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 786\n                                                                                                                      //\n    if (typeof completed === 'number' && typeof total === 'number' && completed >= 0 && total > 0 && total >= completed) {\n      progress = {                                                                                                    // 792\n        completed: completed,                                                                                         // 793\n        total: total,                                                                                                 // 794\n        percent: 100 * completed / total                                                                              // 795\n      };                                                                                                              // 793\n                                                                                                                      //\n      if (options.echo) {                                                                                             // 796\n        delete options.echo;                                                                                          // 797\n                                                                                                                      //\n        this._echo(\"PROGRESS: \" + this._doc._id + \" \" + this._doc.runId + \": \" + progress.completed + \" out of \" + progress.total + \" (\" + progress.percent + \"%)\");\n      }                                                                                                               // 1150\n                                                                                                                      //\n      if (this._doc._id != null && this._doc.runId != null) {                                                         // 799\n        return methodCall(this._root, \"jobProgress\", [this._doc._id, this._doc.runId, completed, total, options], cb, function (_this) {\n          return function (res) {                                                                                     // 1153\n            if (res) {                                                                                                // 801\n              _this._doc.progress = progress;                                                                         // 802\n            }                                                                                                         // 1156\n                                                                                                                      //\n            return res;                                                                                               // 1157\n          };                                                                                                          // 800\n        }(this));                                                                                                     // 800\n      } else if (this._doc._id == null) {                                                                             // 799\n        this._doc.progress = progress;                                                                                // 805\n                                                                                                                      //\n        if (cb != null && typeof cb === 'function') {                                                                 // 806\n          _setImmediate(cb, null, true);                                                                              // 807\n        }                                                                                                             // 1164\n                                                                                                                      //\n        return this;                                                                                                  // 808\n      }                                                                                                               // 787\n    } else {                                                                                                          // 787\n      throw new Error(\"job.progress: something is wrong with progress params: \" + this.id + \", \" + completed + \" out of \" + total);\n    }                                                                                                                 // 1169\n                                                                                                                      //\n    return null;                                                                                                      // 811\n  };                                                                                                                  // 785\n                                                                                                                      //\n  Job.prototype.save = function () {                                                                                  // 1173\n    var cb, k, options, ref;                                                                                          // 816\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 816\n    return methodCall(this._root, \"jobSave\", [this._doc, options], cb, function (_this) {                             // 817\n      return function (id) {                                                                                          // 1178\n        if (id) {                                                                                                     // 818\n          _this._doc._id = id;                                                                                        // 819\n        }                                                                                                             // 1181\n                                                                                                                      //\n        return id;                                                                                                    // 1182\n      };                                                                                                              // 817\n    }(this));                                                                                                         // 817\n  };                                                                                                                  // 815\n                                                                                                                      //\n  Job.prototype.refresh = function () {                                                                               // 1187\n    var cb, k, options, ref;                                                                                          // 824\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 824\n                                                                                                                      //\n    if (options.getLog == null) {                                                                                     // 1191\n      options.getLog = false;                                                                                         // 825\n    }                                                                                                                 // 1193\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 826\n      return methodCall(this._root, \"getJob\", [this._doc._id, options], cb, function (_this) {                        // 827\n        return function (doc) {                                                                                       // 1196\n          if (doc != null) {                                                                                          // 828\n            _this._doc = doc;                                                                                         // 829\n            return _this;                                                                                             // 1199\n          } else {                                                                                                    // 828\n            return false;                                                                                             // 1201\n          }                                                                                                           // 1202\n        };                                                                                                            // 827\n      }(this));                                                                                                       // 827\n    } else {                                                                                                          // 826\n      throw new Error(\"Can't call .refresh() on an unsaved job\");                                                     // 834\n    }                                                                                                                 // 1207\n  };                                                                                                                  // 823\n                                                                                                                      //\n  Job.prototype.done = function () {                                                                                  // 1210\n    var cb, k, options, ref, result;                                                                                  // 838\n    result = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n                                                                                                                      //\n    if (result == null) {                                                                                             // 1213\n      result = {};                                                                                                    // 837\n    }                                                                                                                 // 1215\n                                                                                                                      //\n    if (typeof result === 'function') {                                                                               // 838\n      cb = result;                                                                                                    // 839\n      result = {};                                                                                                    // 840\n    }                                                                                                                 // 1219\n                                                                                                                      //\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 841\n                                                                                                                      //\n    if (!(result != null && (typeof result === \"undefined\" ? \"undefined\" : _typeof(result)) === 'object')) {          // 842\n      result = {                                                                                                      // 843\n        value: result                                                                                                 // 843\n      };                                                                                                              // 843\n    }                                                                                                                 // 1225\n                                                                                                                      //\n    if (this._doc._id != null && this._doc.runId != null) {                                                           // 844\n      return methodCall(this._root, \"jobDone\", [this._doc._id, this._doc.runId, result, options], cb);                // 845\n    } else {                                                                                                          // 844\n      throw new Error(\"Can't call .done() on an unsaved or non-running job\");                                         // 847\n    }                                                                                                                 // 1230\n                                                                                                                      //\n    return null;                                                                                                      // 848\n  };                                                                                                                  // 837\n                                                                                                                      //\n  Job.prototype.fail = function () {                                                                                  // 1234\n    var cb, k, options, ref, result;                                                                                  // 852\n    result = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n                                                                                                                      //\n    if (result == null) {                                                                                             // 1237\n      result = \"No error information provided\";                                                                       // 851\n    }                                                                                                                 // 1239\n                                                                                                                      //\n    if (typeof result === 'function') {                                                                               // 852\n      cb = result;                                                                                                    // 853\n      result = \"No error information provided\";                                                                       // 854\n    }                                                                                                                 // 1243\n                                                                                                                      //\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 855\n                                                                                                                      //\n    if (!(result != null && (typeof result === \"undefined\" ? \"undefined\" : _typeof(result)) === 'object')) {          // 856\n      result = {                                                                                                      // 857\n        value: result                                                                                                 // 857\n      };                                                                                                              // 857\n    }                                                                                                                 // 1249\n                                                                                                                      //\n    if (options.fatal == null) {                                                                                      // 1250\n      options.fatal = false;                                                                                          // 858\n    }                                                                                                                 // 1252\n                                                                                                                      //\n    if (this._doc._id != null && this._doc.runId != null) {                                                           // 859\n      return methodCall(this._root, \"jobFail\", [this._doc._id, this._doc.runId, result, options], cb);                // 860\n    } else {                                                                                                          // 859\n      throw new Error(\"Can't call .fail() on an unsaved or non-running job\");                                         // 862\n    }                                                                                                                 // 1257\n                                                                                                                      //\n    return null;                                                                                                      // 863\n  };                                                                                                                  // 851\n                                                                                                                      //\n  Job.prototype.pause = function () {                                                                                 // 1261\n    var cb, k, options, ref;                                                                                          // 867\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 867\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 868\n      return methodCall(this._root, \"jobPause\", [this._doc._id, options], cb);                                        // 869\n    } else {                                                                                                          // 868\n      this._doc.status = 'paused';                                                                                    // 871\n                                                                                                                      //\n      if (cb != null && typeof cb === 'function') {                                                                   // 872\n        _setImmediate(cb, null, true);                                                                                // 873\n      }                                                                                                               // 1271\n                                                                                                                      //\n      return this;                                                                                                    // 874\n    }                                                                                                                 // 1273\n                                                                                                                      //\n    return null;                                                                                                      // 875\n  };                                                                                                                  // 866\n                                                                                                                      //\n  Job.prototype.resume = function () {                                                                                // 1277\n    var cb, k, options, ref;                                                                                          // 880\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 880\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 881\n      return methodCall(this._root, \"jobResume\", [this._doc._id, options], cb);                                       // 882\n    } else {                                                                                                          // 881\n      this._doc.status = 'waiting';                                                                                   // 884\n                                                                                                                      //\n      if (cb != null && typeof cb === 'function') {                                                                   // 885\n        _setImmediate(cb, null, true);                                                                                // 886\n      }                                                                                                               // 1287\n                                                                                                                      //\n      return this;                                                                                                    // 887\n    }                                                                                                                 // 1289\n                                                                                                                      //\n    return null;                                                                                                      // 888\n  };                                                                                                                  // 879\n                                                                                                                      //\n  Job.prototype.ready = function () {                                                                                 // 1293\n    var cb, k, options, ref;                                                                                          // 892\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 892\n                                                                                                                      //\n    if (options.force == null) {                                                                                      // 1297\n      options.force = false;                                                                                          // 893\n    }                                                                                                                 // 1299\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 894\n      return methodCall(this._root, \"jobReady\", [this._doc._id, options], cb);                                        // 895\n    } else {                                                                                                          // 894\n      throw new Error(\"Can't call .ready() on an unsaved job\");                                                       // 897\n    }                                                                                                                 // 1304\n                                                                                                                      //\n    return null;                                                                                                      // 898\n  };                                                                                                                  // 891\n                                                                                                                      //\n  Job.prototype.cancel = function () {                                                                                // 1308\n    var cb, k, options, ref;                                                                                          // 902\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 902\n                                                                                                                      //\n    if (options.antecedents == null) {                                                                                // 1312\n      options.antecedents = true;                                                                                     // 903\n    }                                                                                                                 // 1314\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 904\n      return methodCall(this._root, \"jobCancel\", [this._doc._id, options], cb);                                       // 905\n    } else {                                                                                                          // 904\n      throw new Error(\"Can't call .cancel() on an unsaved job\");                                                      // 907\n    }                                                                                                                 // 1319\n                                                                                                                      //\n    return null;                                                                                                      // 908\n  };                                                                                                                  // 901\n                                                                                                                      //\n  Job.prototype.restart = function () {                                                                               // 1323\n    var cb, k, options, ref;                                                                                          // 912\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 912\n                                                                                                                      //\n    if (options.retries == null) {                                                                                    // 1327\n      options.retries = 1;                                                                                            // 913\n    }                                                                                                                 // 1329\n                                                                                                                      //\n    if (options.dependents == null) {                                                                                 // 1330\n      options.dependents = true;                                                                                      // 914\n    }                                                                                                                 // 1332\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 915\n      return methodCall(this._root, \"jobRestart\", [this._doc._id, options], cb);                                      // 916\n    } else {                                                                                                          // 915\n      throw new Error(\"Can't call .restart() on an unsaved job\");                                                     // 918\n    }                                                                                                                 // 1337\n                                                                                                                      //\n    return null;                                                                                                      // 919\n  };                                                                                                                  // 911\n                                                                                                                      //\n  Job.prototype.rerun = function () {                                                                                 // 1341\n    var cb, k, options, ref;                                                                                          // 923\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 923\n                                                                                                                      //\n    if (options.repeats == null) {                                                                                    // 1345\n      options.repeats = 0;                                                                                            // 924\n    }                                                                                                                 // 1347\n                                                                                                                      //\n    if (options.wait == null) {                                                                                       // 1348\n      options.wait = this._doc.repeatWait;                                                                            // 925\n    }                                                                                                                 // 1350\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 926\n      return methodCall(this._root, \"jobRerun\", [this._doc._id, options], cb);                                        // 927\n    } else {                                                                                                          // 926\n      throw new Error(\"Can't call .rerun() on an unsaved job\");                                                       // 929\n    }                                                                                                                 // 1355\n                                                                                                                      //\n    return null;                                                                                                      // 930\n  };                                                                                                                  // 922\n                                                                                                                      //\n  Job.prototype.remove = function () {                                                                                // 1359\n    var cb, k, options, ref;                                                                                          // 934\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 934\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 935\n      return methodCall(this._root, \"jobRemove\", [this._doc._id, options], cb);                                       // 936\n    } else {                                                                                                          // 935\n      throw new Error(\"Can't call .remove() on an unsaved job\");                                                      // 938\n    }                                                                                                                 // 1367\n                                                                                                                      //\n    return null;                                                                                                      // 939\n  };                                                                                                                  // 933\n                                                                                                                      //\n  Object.defineProperties(Job.prototype, {                                                                            // 942\n    doc: {                                                                                                            // 943\n      get: function () {                                                                                              // 944\n        return this._doc;                                                                                             // 1374\n      },                                                                                                              // 944\n      set: function () {                                                                                              // 945\n        return console.warn(\"Job.doc cannot be directly assigned.\");                                                  // 1377\n      }                                                                                                               // 944\n    },                                                                                                                // 944\n    type: {                                                                                                           // 946\n      get: function () {                                                                                              // 947\n        return this._doc.type;                                                                                        // 1382\n      },                                                                                                              // 947\n      set: function () {                                                                                              // 948\n        return console.warn(\"Job.type cannot be directly assigned.\");                                                 // 1385\n      }                                                                                                               // 947\n    },                                                                                                                // 947\n    data: {                                                                                                           // 949\n      get: function () {                                                                                              // 950\n        return this._doc.data;                                                                                        // 1390\n      },                                                                                                              // 950\n      set: function () {                                                                                              // 951\n        return console.warn(\"Job.data cannot be directly assigned.\");                                                 // 1393\n      }                                                                                                               // 950\n    }                                                                                                                 // 950\n  });                                                                                                                 // 943\n  return Job;                                                                                                         // 1398\n}();                                                                                                                  // 1400\n                                                                                                                      //\nif ((typeof module !== \"undefined\" && module !== null ? module.exports : void 0) != null) {                           // 954\n  module.exports = Job;                                                                                               // 955\n}                                                                                                                     // 1404\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/vsivsi_job-collection/src/shared.coffee                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar JobCollectionBase,                                                                                                // 7\n    _validId,                                                                                                         // 7\n    _validIntGTEOne,                                                                                                  // 7\n    _validIntGTEZero,                                                                                                 // 7\n    _validJobDoc,                                                                                                     // 7\n    _validLaterJSObj,                                                                                                 // 7\n    _validLog,                                                                                                        // 7\n    _validLogLevel,                                                                                                   // 7\n    _validNumGTEOne,                                                                                                  // 7\n    _validNumGTEZero,                                                                                                 // 7\n    _validNumGTZero,                                                                                                  // 7\n    _validProgress,                                                                                                   // 7\n    _validRetryBackoff,                                                                                               // 7\n    _validStatus,                                                                                                     // 7\n    indexOf = [].indexOf || function (item) {                                                                         // 7\n  for (var i = 0, l = this.length; i < l; i++) {                                                                      // 7\n    if (i in this && this[i] === item) return i;                                                                      // 7\n  }                                                                                                                   // 7\n                                                                                                                      //\n  return -1;                                                                                                          // 7\n},                                                                                                                    // 7\n    extend = function (child, parent) {                                                                               // 7\n  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                   // 3\n    if (hasProp.call(parent, key)) child[key] = parent[key];                                                          // 3\n  }                                                                                                                   // 3\n                                                                                                                      //\n  function ctor() {                                                                                                   // 3\n    this.constructor = child;                                                                                         // 3\n  }                                                                                                                   // 3\n                                                                                                                      //\n  ctor.prototype = parent.prototype;                                                                                  // 3\n  child.prototype = new ctor();                                                                                       // 3\n  child.__super__ = parent.prototype;                                                                                 // 3\n  return child;                                                                                                       // 3\n},                                                                                                                    // 3\n    hasProp = {}.hasOwnProperty,                                                                                      // 7\n    slice = [].slice;                                                                                                 // 7\n                                                                                                                      //\n_validNumGTEZero = function (v) {                                                                                     // 7\n  return Match.test(v, Number) && v >= 0.0;                                                                           // 8\n};                                                                                                                    // 7\n                                                                                                                      //\n_validNumGTZero = function (v) {                                                                                      // 10\n  return Match.test(v, Number) && v > 0.0;                                                                            // 12\n};                                                                                                                    // 10\n                                                                                                                      //\n_validNumGTEOne = function (v) {                                                                                      // 13\n  return Match.test(v, Number) && v >= 1.0;                                                                           // 16\n};                                                                                                                    // 13\n                                                                                                                      //\n_validIntGTEZero = function (v) {                                                                                     // 16\n  return _validNumGTEZero(v) && Math.floor(v) === v;                                                                  // 20\n};                                                                                                                    // 16\n                                                                                                                      //\n_validIntGTEOne = function (v) {                                                                                      // 19\n  return _validNumGTEOne(v) && Math.floor(v) === v;                                                                   // 24\n};                                                                                                                    // 19\n                                                                                                                      //\n_validStatus = function (v) {                                                                                         // 22\n  return Match.test(v, String) && indexOf.call(Job.jobStatuses, v) >= 0;                                              // 28\n};                                                                                                                    // 22\n                                                                                                                      //\n_validLogLevel = function (v) {                                                                                       // 25\n  return Match.test(v, String) && indexOf.call(Job.jobLogLevels, v) >= 0;                                             // 32\n};                                                                                                                    // 25\n                                                                                                                      //\n_validRetryBackoff = function (v) {                                                                                   // 28\n  return Match.test(v, String) && indexOf.call(Job.jobRetryBackoffMethods, v) >= 0;                                   // 36\n};                                                                                                                    // 28\n                                                                                                                      //\n_validId = function (v) {                                                                                             // 31\n  return Match.test(v, Match.OneOf(String, Mongo.Collection.ObjectID));                                               // 40\n};                                                                                                                    // 31\n                                                                                                                      //\n_validLog = function () {                                                                                             // 34\n  return [{                                                                                                           // 44\n    time: Date,                                                                                                       // 36\n    runId: Match.OneOf(Match.Where(_validId), null),                                                                  // 37\n    level: Match.Where(_validLogLevel),                                                                               // 38\n    message: String,                                                                                                  // 39\n    data: Match.Optional(Object)                                                                                      // 40\n  }];                                                                                                                 // 35\n};                                                                                                                    // 34\n                                                                                                                      //\n_validProgress = function () {                                                                                        // 43\n  return {                                                                                                            // 56\n    completed: Match.Where(_validNumGTEZero),                                                                         // 44\n    total: Match.Where(_validNumGTEZero),                                                                             // 45\n    percent: Match.Where(_validNumGTEZero)                                                                            // 46\n  };                                                                                                                  // 44\n};                                                                                                                    // 43\n                                                                                                                      //\n_validLaterJSObj = function () {                                                                                      // 48\n  return {                                                                                                            // 64\n    schedules: [Object],                                                                                              // 49\n    exceptions: Match.Optional([Object])                                                                              // 50\n  };                                                                                                                  // 49\n};                                                                                                                    // 48\n                                                                                                                      //\n_validJobDoc = function () {                                                                                          // 52\n  return {                                                                                                            // 71\n    _id: Match.Optional(Match.OneOf(Match.Where(_validId), null)),                                                    // 53\n    runId: Match.OneOf(Match.Where(_validId), null),                                                                  // 54\n    type: String,                                                                                                     // 55\n    status: Match.Where(_validStatus),                                                                                // 56\n    data: Object,                                                                                                     // 57\n    result: Match.Optional(Object),                                                                                   // 58\n    failures: Match.Optional([Object]),                                                                               // 59\n    priority: Match.Integer,                                                                                          // 60\n    depends: [Match.Where(_validId)],                                                                                 // 61\n    resolved: [Match.Where(_validId)],                                                                                // 62\n    after: Date,                                                                                                      // 63\n    updated: Date,                                                                                                    // 64\n    workTimeout: Match.Optional(Match.Where(_validIntGTEOne)),                                                        // 65\n    expiresAfter: Match.Optional(Date),                                                                               // 66\n    log: Match.Optional(_validLog()),                                                                                 // 67\n    progress: _validProgress(),                                                                                       // 68\n    retries: Match.Where(_validIntGTEZero),                                                                           // 69\n    retried: Match.Where(_validIntGTEZero),                                                                           // 70\n    repeatRetries: Match.Optional(Match.Where(_validIntGTEZero)),                                                     // 71\n    retryUntil: Date,                                                                                                 // 72\n    retryWait: Match.Where(_validIntGTEZero),                                                                         // 73\n    retryBackoff: Match.Where(_validRetryBackoff),                                                                    // 74\n    repeats: Match.Where(_validIntGTEZero),                                                                           // 75\n    repeated: Match.Where(_validIntGTEZero),                                                                          // 76\n    repeatUntil: Date,                                                                                                // 77\n    repeatWait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj)),                            // 78\n    created: Date                                                                                                     // 79\n  };                                                                                                                  // 53\n};                                                                                                                    // 52\n                                                                                                                      //\nJobCollectionBase = function (superClass) {                                                                           // 81\n  extend(JobCollectionBase, superClass);                                                                              // 103\n                                                                                                                      //\n  function JobCollectionBase(root, options) {                                                                         // 83\n    var collectionName;                                                                                               // 84\n    this.root = root != null ? root : 'queue';                                                                        // 83\n                                                                                                                      //\n    if (options == null) {                                                                                            // 108\n      options = {};                                                                                                   // 83\n    }                                                                                                                 // 110\n                                                                                                                      //\n    if (!(this instanceof JobCollectionBase)) {                                                                       // 84\n      return new JobCollectionBase(this.root, options);                                                               // 85\n    }                                                                                                                 // 113\n                                                                                                                      //\n    if (!(this instanceof Mongo.Collection)) {                                                                        // 87\n      throw new Meteor.Error('The global definition of Mongo.Collection has changed since the job-collection package was loaded. Please ensure that any packages that redefine Mongo.Collection are loaded before job-collection.');\n    }                                                                                                                 // 116\n                                                                                                                      //\n    if (Mongo.Collection !== Mongo.Collection.prototype.constructor) {                                                // 90\n      throw new Meteor.Error('The global definition of Mongo.Collection has been patched by another package, and the prototype constructor has been left in an inconsistent state. Please see this link for a workaround: https://github.com/vsivsi/meteor-file-sample-app/issues/2#issuecomment-120780592');\n    }                                                                                                                 // 119\n                                                                                                                      //\n    this.later = later;                                                                                               // 93\n                                                                                                                      //\n    if (options.noCollectionSuffix == null) {                                                                         // 121\n      options.noCollectionSuffix = false;                                                                             // 95\n    }                                                                                                                 // 123\n                                                                                                                      //\n    collectionName = this.root;                                                                                       // 97\n                                                                                                                      //\n    if (!options.noCollectionSuffix) {                                                                                // 99\n      collectionName += '.jobs';                                                                                      // 100\n    }                                                                                                                 // 127\n                                                                                                                      //\n    delete options.noCollectionSuffix;                                                                                // 104\n    Job.setDDP(options.connection, this.root);                                                                        // 106\n                                                                                                                      //\n    this._createLogEntry = function (message, runId, level, time, data) {                                             // 108\n      var l;                                                                                                          // 109\n                                                                                                                      //\n      if (message == null) {                                                                                          // 132\n        message = '';                                                                                                 // 108\n      }                                                                                                               // 134\n                                                                                                                      //\n      if (runId == null) {                                                                                            // 135\n        runId = null;                                                                                                 // 108\n      }                                                                                                               // 137\n                                                                                                                      //\n      if (level == null) {                                                                                            // 138\n        level = 'info';                                                                                               // 108\n      }                                                                                                               // 140\n                                                                                                                      //\n      if (time == null) {                                                                                             // 141\n        time = new Date();                                                                                            // 108\n      }                                                                                                               // 143\n                                                                                                                      //\n      if (data == null) {                                                                                             // 144\n        data = null;                                                                                                  // 108\n      }                                                                                                               // 146\n                                                                                                                      //\n      l = {                                                                                                           // 109\n        time: time,                                                                                                   // 109\n        runId: runId,                                                                                                 // 109\n        message: message,                                                                                             // 109\n        level: level                                                                                                  // 109\n      };                                                                                                              // 109\n      return l;                                                                                                       // 110\n    };                                                                                                                // 108\n                                                                                                                      //\n    this._logMessage = {                                                                                              // 112\n      'readied': function () {                                                                                        // 113\n        return this._createLogEntry(\"Promoted to ready\");                                                             // 157\n      }.bind(this),                                                                                                   // 113\n      'forced': function (id) {                                                                                       // 114\n        return this._createLogEntry(\"Dependencies force resolved\", null, 'warning');                                  // 160\n      }.bind(this),                                                                                                   // 114\n      'rerun': function (id, runId) {                                                                                 // 115\n        return this._createLogEntry(\"Rerunning job\", null, 'info', new Date(), {                                      // 163\n          previousJob: {                                                                                              // 115\n            id: id,                                                                                                   // 115\n            runId: runId                                                                                              // 115\n          }                                                                                                           // 115\n        });                                                                                                           // 115\n      }.bind(this),                                                                                                   // 115\n      'running': function (runId) {                                                                                   // 116\n        return this._createLogEntry(\"Job Running\", runId);                                                            // 171\n      }.bind(this),                                                                                                   // 116\n      'paused': function () {                                                                                         // 117\n        return this._createLogEntry(\"Job Paused\");                                                                    // 174\n      }.bind(this),                                                                                                   // 117\n      'resumed': function () {                                                                                        // 118\n        return this._createLogEntry(\"Job Resumed\");                                                                   // 177\n      }.bind(this),                                                                                                   // 118\n      'cancelled': function () {                                                                                      // 119\n        return this._createLogEntry(\"Job Cancelled\", null, 'warning');                                                // 180\n      }.bind(this),                                                                                                   // 119\n      'restarted': function () {                                                                                      // 120\n        return this._createLogEntry(\"Job Restarted\");                                                                 // 183\n      }.bind(this),                                                                                                   // 120\n      'resubmitted': function () {                                                                                    // 121\n        return this._createLogEntry(\"Job Resubmitted\");                                                               // 186\n      }.bind(this),                                                                                                   // 121\n      'submitted': function () {                                                                                      // 122\n        return this._createLogEntry(\"Job Submitted\");                                                                 // 189\n      }.bind(this),                                                                                                   // 122\n      'completed': function (runId) {                                                                                 // 123\n        return this._createLogEntry(\"Job Completed\", runId, 'success');                                               // 192\n      }.bind(this),                                                                                                   // 123\n      'resolved': function (id, runId) {                                                                              // 124\n        return this._createLogEntry(\"Dependency resolved\", null, 'info', new Date(), {                                // 195\n          dependency: {                                                                                               // 124\n            id: id,                                                                                                   // 124\n            runId: runId                                                                                              // 124\n          }                                                                                                           // 124\n        });                                                                                                           // 124\n      }.bind(this),                                                                                                   // 124\n      'failed': function (runId, fatal, err) {                                                                        // 125\n        var level, msg, value;                                                                                        // 126\n        value = err.value;                                                                                            // 126\n        msg = \"Job Failed with\" + (fatal ? ' Fatal' : '') + \" Error\" + (value != null && typeof value === 'string' ? ': ' + value : '') + \".\";\n        level = fatal ? 'danger' : 'warning';                                                                         // 128\n        return this._createLogEntry(msg, runId, level);                                                               // 207\n      }.bind(this)                                                                                                    // 125\n    };                                                                                                                // 113\n                                                                                                                      //\n    JobCollectionBase.__super__.constructor.call(this, collectionName, options);                                      // 132\n  }                                                                                                                   // 83\n                                                                                                                      //\n  JobCollectionBase.prototype._validNumGTEZero = _validNumGTEZero;                                                    // 213\n  JobCollectionBase.prototype._validNumGTZero = _validNumGTZero;                                                      // 215\n  JobCollectionBase.prototype._validNumGTEOne = _validNumGTEOne;                                                      // 217\n  JobCollectionBase.prototype._validIntGTEZero = _validIntGTEZero;                                                    // 219\n  JobCollectionBase.prototype._validIntGTEOne = _validIntGTEOne;                                                      // 221\n  JobCollectionBase.prototype._validStatus = _validStatus;                                                            // 223\n  JobCollectionBase.prototype._validLogLevel = _validLogLevel;                                                        // 225\n  JobCollectionBase.prototype._validRetryBackoff = _validRetryBackoff;                                                // 227\n  JobCollectionBase.prototype._validId = _validId;                                                                    // 229\n  JobCollectionBase.prototype._validLog = _validLog;                                                                  // 231\n  JobCollectionBase.prototype._validProgress = _validProgress;                                                        // 233\n  JobCollectionBase.prototype._validJobDoc = _validJobDoc;                                                            // 235\n  JobCollectionBase.prototype.jobLogLevels = Job.jobLogLevels;                                                        // 237\n  JobCollectionBase.prototype.jobPriorities = Job.jobPriorities;                                                      // 239\n  JobCollectionBase.prototype.jobStatuses = Job.jobStatuses;                                                          // 241\n  JobCollectionBase.prototype.jobStatusCancellable = Job.jobStatusCancellable;                                        // 243\n  JobCollectionBase.prototype.jobStatusPausable = Job.jobStatusPausable;                                              // 245\n  JobCollectionBase.prototype.jobStatusRemovable = Job.jobStatusRemovable;                                            // 247\n  JobCollectionBase.prototype.jobStatusRestartable = Job.jobStatusRestartable;                                        // 249\n  JobCollectionBase.prototype.forever = Job.forever;                                                                  // 251\n  JobCollectionBase.prototype.foreverDate = Job.foreverDate;                                                          // 253\n  JobCollectionBase.prototype.ddpMethods = Job.ddpMethods;                                                            // 255\n  JobCollectionBase.prototype.ddpPermissionLevels = Job.ddpPermissionLevels;                                          // 257\n  JobCollectionBase.prototype.ddpMethodPermissions = Job.ddpMethodPermissions;                                        // 259\n                                                                                                                      //\n  JobCollectionBase.prototype.processJobs = function () {                                                             // 261\n    var params;                                                                                                       // 161\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 161\n    return function (func, args, ctor) {                                                                              // 264\n      ctor.prototype = func.prototype;                                                                                // 265\n      var child = new ctor(),                                                                                         // 266\n          result = func.apply(child, args);                                                                           // 266\n      return Object(result) === result ? result : child;                                                              // 267\n    }(Job.processJobs, [this.root].concat(slice.call(params)), function () {});                                       // 268\n  };                                                                                                                  // 161\n                                                                                                                      //\n  JobCollectionBase.prototype.getJob = function () {                                                                  // 271\n    var params;                                                                                                       // 162\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 162\n    return Job.getJob.apply(Job, [this.root].concat(slice.call(params)));                                             // 274\n  };                                                                                                                  // 162\n                                                                                                                      //\n  JobCollectionBase.prototype.getWork = function () {                                                                 // 277\n    var params;                                                                                                       // 163\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 163\n    return Job.getWork.apply(Job, [this.root].concat(slice.call(params)));                                            // 280\n  };                                                                                                                  // 163\n                                                                                                                      //\n  JobCollectionBase.prototype.getJobs = function () {                                                                 // 283\n    var params;                                                                                                       // 164\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 164\n    return Job.getJobs.apply(Job, [this.root].concat(slice.call(params)));                                            // 286\n  };                                                                                                                  // 164\n                                                                                                                      //\n  JobCollectionBase.prototype.readyJobs = function () {                                                               // 289\n    var params;                                                                                                       // 165\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 165\n    return Job.readyJobs.apply(Job, [this.root].concat(slice.call(params)));                                          // 292\n  };                                                                                                                  // 165\n                                                                                                                      //\n  JobCollectionBase.prototype.cancelJobs = function () {                                                              // 295\n    var params;                                                                                                       // 166\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 166\n    return Job.cancelJobs.apply(Job, [this.root].concat(slice.call(params)));                                         // 298\n  };                                                                                                                  // 166\n                                                                                                                      //\n  JobCollectionBase.prototype.pauseJobs = function () {                                                               // 301\n    var params;                                                                                                       // 167\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 167\n    return Job.pauseJobs.apply(Job, [this.root].concat(slice.call(params)));                                          // 304\n  };                                                                                                                  // 167\n                                                                                                                      //\n  JobCollectionBase.prototype.resumeJobs = function () {                                                              // 307\n    var params;                                                                                                       // 168\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 168\n    return Job.resumeJobs.apply(Job, [this.root].concat(slice.call(params)));                                         // 310\n  };                                                                                                                  // 168\n                                                                                                                      //\n  JobCollectionBase.prototype.restartJobs = function () {                                                             // 313\n    var params;                                                                                                       // 169\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 169\n    return Job.restartJobs.apply(Job, [this.root].concat(slice.call(params)));                                        // 316\n  };                                                                                                                  // 169\n                                                                                                                      //\n  JobCollectionBase.prototype.removeJobs = function () {                                                              // 319\n    var params;                                                                                                       // 170\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 170\n    return Job.removeJobs.apply(Job, [this.root].concat(slice.call(params)));                                         // 322\n  };                                                                                                                  // 170\n                                                                                                                      //\n  JobCollectionBase.prototype.setDDP = function () {                                                                  // 325\n    var params;                                                                                                       // 172\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 172\n    return Job.setDDP.apply(Job, params);                                                                             // 328\n  };                                                                                                                  // 172\n                                                                                                                      //\n  JobCollectionBase.prototype.startJobServer = function () {                                                          // 331\n    var params;                                                                                                       // 174\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 174\n    return Job.startJobServer.apply(Job, [this.root].concat(slice.call(params)));                                     // 334\n  };                                                                                                                  // 174\n                                                                                                                      //\n  JobCollectionBase.prototype.shutdownJobServer = function () {                                                       // 337\n    var params;                                                                                                       // 175\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 175\n    return Job.shutdownJobServer.apply(Job, [this.root].concat(slice.call(params)));                                  // 340\n  };                                                                                                                  // 175\n                                                                                                                      //\n  JobCollectionBase.prototype.startJobs = function () {                                                               // 343\n    var params;                                                                                                       // 178\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 178\n    return Job.startJobs.apply(Job, [this.root].concat(slice.call(params)));                                          // 346\n  };                                                                                                                  // 178\n                                                                                                                      //\n  JobCollectionBase.prototype.stopJobs = function () {                                                                // 349\n    var params;                                                                                                       // 179\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 179\n    return Job.stopJobs.apply(Job, [this.root].concat(slice.call(params)));                                           // 352\n  };                                                                                                                  // 179\n                                                                                                                      //\n  JobCollectionBase.prototype.jobDocPattern = _validJobDoc();                                                         // 355\n                                                                                                                      //\n  JobCollectionBase.prototype.allow = function () {                                                                   // 357\n    throw new Error(\"Server-only function jc.allow() invoked on client.\");                                            // 184\n  };                                                                                                                  // 184\n                                                                                                                      //\n  JobCollectionBase.prototype.deny = function () {                                                                    // 361\n    throw new Error(\"Server-only function jc.deny() invoked on client.\");                                             // 185\n  };                                                                                                                  // 185\n                                                                                                                      //\n  JobCollectionBase.prototype.promote = function () {                                                                 // 365\n    throw new Error(\"Server-only function jc.promote() invoked on client.\");                                          // 186\n  };                                                                                                                  // 186\n                                                                                                                      //\n  JobCollectionBase.prototype.setLogStream = function () {                                                            // 369\n    throw new Error(\"Server-only function jc.setLogStream() invoked on client.\");                                     // 187\n  };                                                                                                                  // 187\n                                                                                                                      //\n  JobCollectionBase.prototype.logConsole = function () {                                                              // 373\n    throw new Error(\"Client-only function jc.logConsole() invoked on server.\");                                       // 190\n  };                                                                                                                  // 190\n                                                                                                                      //\n  JobCollectionBase.prototype.makeJob = function () {                                                                 // 377\n    var dep;                                                                                                          // 194\n    dep = false;                                                                                                      // 194\n    return function () {                                                                                              // 380\n      var params;                                                                                                     // 196\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                 // 195\n                                                                                                                      //\n      if (!dep) {                                                                                                     // 196\n        dep = true;                                                                                                   // 197\n        console.warn(\"WARNING: jc.makeJob() has been deprecated. Use new Job(jc, doc) instead.\");                     // 198\n      }                                                                                                               // 386\n                                                                                                                      //\n      return function (func, args, ctor) {                                                                            // 387\n        ctor.prototype = func.prototype;                                                                              // 388\n        var child = new ctor(),                                                                                       // 389\n            result = func.apply(child, args);                                                                         // 389\n        return Object(result) === result ? result : child;                                                            // 390\n      }(Job, [this.root].concat(slice.call(params)), function () {});                                                 // 391\n    };                                                                                                                // 195\n  }();                                                                                                                // 193\n                                                                                                                      //\n  JobCollectionBase.prototype.createJob = function () {                                                               // 395\n    var dep;                                                                                                          // 203\n    dep = false;                                                                                                      // 203\n    return function () {                                                                                              // 398\n      var params;                                                                                                     // 205\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                 // 204\n                                                                                                                      //\n      if (!dep) {                                                                                                     // 205\n        dep = true;                                                                                                   // 206\n        console.warn(\"WARNING: jc.createJob() has been deprecated. Use new Job(jc, type, data) instead.\");            // 207\n      }                                                                                                               // 404\n                                                                                                                      //\n      return function (func, args, ctor) {                                                                            // 405\n        ctor.prototype = func.prototype;                                                                              // 406\n        var child = new ctor(),                                                                                       // 407\n            result = func.apply(child, args);                                                                         // 407\n        return Object(result) === result ? result : child;                                                            // 408\n      }(Job, [this.root].concat(slice.call(params)), function () {});                                                 // 409\n    };                                                                                                                // 204\n  }();                                                                                                                // 202\n                                                                                                                      //\n  JobCollectionBase.prototype._methodWrapper = function (method, func) {                                              // 413\n    var ref, toLog, unblockDDPMethods;                                                                                // 211\n    toLog = this._toLog;                                                                                              // 211\n    unblockDDPMethods = (ref = this._unblockDDPMethods) != null ? ref : false;                                        // 212\n    return function () {                                                                                              // 214\n      var params, ref1, retval, user;                                                                                 // 215\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                 // 214\n      user = (ref1 = this.userId) != null ? ref1 : \"[UNAUTHENTICATED]\";                                               // 215\n      toLog(user, method, \"params: \" + JSON.stringify(params));                                                       // 216\n                                                                                                                      //\n      if (unblockDDPMethods) {                                                                                        // 217\n        this.unblock();                                                                                               // 217\n      }                                                                                                               // 424\n                                                                                                                      //\n      retval = func.apply(null, params);                                                                              // 218\n      toLog(user, method, \"returned: \" + JSON.stringify(retval));                                                     // 219\n      return retval;                                                                                                  // 220\n    };                                                                                                                // 214\n  };                                                                                                                  // 210\n                                                                                                                      //\n  JobCollectionBase.prototype._generateMethods = function () {                                                        // 431\n    var baseMethodName, methodFunc, methodName, methodPrefix, methodsOut, ref;                                        // 223\n    methodsOut = {};                                                                                                  // 223\n    methodPrefix = '_DDPMethod_';                                                                                     // 224\n    ref = this;                                                                                                       // 225\n                                                                                                                      //\n    for (methodName in meteorBabelHelpers.sanitizeForInObject(ref)) {                                                 // 225\n      methodFunc = ref[methodName];                                                                                   // 437\n                                                                                                                      //\n      if (!(methodName.slice(0, methodPrefix.length) === methodPrefix)) {                                             // 438\n        continue;                                                                                                     // 439\n      }                                                                                                               // 440\n                                                                                                                      //\n      baseMethodName = methodName.slice(methodPrefix.length);                                                         // 226\n      methodsOut[this.root + \"_\" + baseMethodName] = this._methodWrapper(baseMethodName, methodFunc.bind(this));      // 227\n    }                                                                                                                 // 225\n                                                                                                                      //\n    return methodsOut;                                                                                                // 228\n  };                                                                                                                  // 222\n                                                                                                                      //\n  JobCollectionBase.prototype._idsOfDeps = function (ids, antecedents, dependents, jobStatuses) {                     // 447\n    var antsArray, dependsIds, dependsQuery;                                                                          // 234\n    dependsQuery = [];                                                                                                // 234\n    dependsIds = [];                                                                                                  // 235\n                                                                                                                      //\n    if (dependents) {                                                                                                 // 236\n      dependsQuery.push({                                                                                             // 237\n        depends: {                                                                                                    // 238\n          $elemMatch: {                                                                                               // 239\n            $in: ids                                                                                                  // 240\n          }                                                                                                           // 240\n        }                                                                                                             // 239\n      });                                                                                                             // 238\n    }                                                                                                                 // 459\n                                                                                                                      //\n    if (antecedents) {                                                                                                // 241\n      antsArray = [];                                                                                                 // 242\n      this.find({                                                                                                     // 243\n        _id: {                                                                                                        // 245\n          $in: ids                                                                                                    // 246\n        }                                                                                                             // 246\n      }, {                                                                                                            // 244\n        fields: {                                                                                                     // 249\n          depends: 1                                                                                                  // 250\n        },                                                                                                            // 250\n        transform: null                                                                                               // 251\n      }).forEach(function (d) {                                                                                       // 248\n        var i, k, len, ref, results;                                                                                  // 253\n                                                                                                                      //\n        if (indexOf.call(antsArray, i) < 0) {                                                                         // 253\n          ref = d.depends;                                                                                            // 253\n          results = [];                                                                                               // 253\n                                                                                                                      //\n          for (k = 0, len = ref.length; k < len; k++) {                                                               // 476\n            i = ref[k];                                                                                               // 477\n            results.push(antsArray.push(i));                                                                          // 478\n          }                                                                                                           // 253\n                                                                                                                      //\n          return results;                                                                                             // 480\n        }                                                                                                             // 481\n      });                                                                                                             // 243\n                                                                                                                      //\n      if (antsArray.length > 0) {                                                                                     // 254\n        dependsQuery.push({                                                                                           // 255\n          _id: {                                                                                                      // 256\n            $in: antsArray                                                                                            // 257\n          }                                                                                                           // 257\n        });                                                                                                           // 256\n      }                                                                                                               // 241\n    }                                                                                                                 // 490\n                                                                                                                      //\n    if (dependsQuery.length > 0) {                                                                                    // 258\n      this.find({                                                                                                     // 259\n        status: {                                                                                                     // 261\n          $in: jobStatuses                                                                                            // 262\n        },                                                                                                            // 262\n        $or: dependsQuery                                                                                             // 263\n      }, {                                                                                                            // 260\n        fields: {                                                                                                     // 266\n          _id: 1                                                                                                      // 267\n        },                                                                                                            // 267\n        transform: null                                                                                               // 268\n      }).forEach(function (d) {                                                                                       // 265\n        var ref;                                                                                                      // 271\n                                                                                                                      //\n        if (ref = d._id, indexOf.call(dependsIds, ref) < 0) {                                                         // 271\n          return dependsIds.push(d._id);                                                                              // 505\n        }                                                                                                             // 506\n      });                                                                                                             // 259\n    }                                                                                                                 // 508\n                                                                                                                      //\n    return dependsIds;                                                                                                // 272\n  };                                                                                                                  // 230\n                                                                                                                      //\n  JobCollectionBase.prototype._rerun_job = function (doc, repeats, wait, repeatUntil) {                               // 512\n    var id, jobId, logObj, runId, time;                                                                               // 276\n                                                                                                                      //\n    if (repeats == null) {                                                                                            // 514\n      repeats = doc.repeats - 1;                                                                                      // 274\n    }                                                                                                                 // 516\n                                                                                                                      //\n    if (wait == null) {                                                                                               // 517\n      wait = doc.repeatWait;                                                                                          // 274\n    }                                                                                                                 // 519\n                                                                                                                      //\n    if (repeatUntil == null) {                                                                                        // 520\n      repeatUntil = doc.repeatUntil;                                                                                  // 274\n    }                                                                                                                 // 522\n                                                                                                                      //\n    id = doc._id;                                                                                                     // 276\n    runId = doc.runId;                                                                                                // 277\n    time = new Date();                                                                                                // 278\n    delete doc._id;                                                                                                   // 279\n    delete doc.result;                                                                                                // 280\n    delete doc.failures;                                                                                              // 281\n    delete doc.expiresAfter;                                                                                          // 282\n    delete doc.workTimeout;                                                                                           // 283\n    doc.runId = null;                                                                                                 // 284\n    doc.status = \"waiting\";                                                                                           // 285\n    doc.repeatRetries = doc.repeatRetries != null ? doc.repeatRetries : doc.retries + doc.retried;                    // 286\n    doc.retries = doc.repeatRetries;                                                                                  // 287\n                                                                                                                      //\n    if (doc.retries > this.forever) {                                                                                 // 288\n      doc.retries = this.forever;                                                                                     // 288\n    }                                                                                                                 // 537\n                                                                                                                      //\n    doc.retryUntil = repeatUntil;                                                                                     // 289\n    doc.retried = 0;                                                                                                  // 290\n    doc.repeats = repeats;                                                                                            // 291\n                                                                                                                      //\n    if (doc.repeats > this.forever) {                                                                                 // 292\n      doc.repeats = this.forever;                                                                                     // 292\n    }                                                                                                                 // 543\n                                                                                                                      //\n    doc.repeatUntil = repeatUntil;                                                                                    // 293\n    doc.repeated = doc.repeated + 1;                                                                                  // 294\n    doc.updated = time;                                                                                               // 295\n    doc.created = time;                                                                                               // 296\n    doc.progress = {                                                                                                  // 297\n      completed: 0,                                                                                                   // 298\n      total: 1,                                                                                                       // 299\n      percent: 0                                                                                                      // 300\n    };                                                                                                                // 298\n                                                                                                                      //\n    if (logObj = this._logMessage.rerun(id, runId)) {                                                                 // 301\n      doc.log = [logObj];                                                                                             // 302\n    } else {                                                                                                          // 301\n      doc.log = [];                                                                                                   // 304\n    }                                                                                                                 // 557\n                                                                                                                      //\n    doc.after = new Date(time.valueOf() + wait);                                                                      // 306\n                                                                                                                      //\n    if (jobId = this.insert(doc)) {                                                                                   // 307\n      this._DDPMethod_jobReady(jobId);                                                                                // 308\n                                                                                                                      //\n      return jobId;                                                                                                   // 309\n    } else {                                                                                                          // 307\n      console.warn(\"Job rerun/repeat failed to reschedule!\", id, runId);                                              // 311\n    }                                                                                                                 // 564\n                                                                                                                      //\n    return null;                                                                                                      // 312\n  };                                                                                                                  // 274\n                                                                                                                      //\n  JobCollectionBase.prototype._checkDeps = function (job, dryRun) {                                                   // 568\n    var cancel, cancelled, depJob, deps, failed, foundIds, j, k, len, len1, log, m, mods, n, ref, ref1, removed, resolved;\n                                                                                                                      //\n    if (dryRun == null) {                                                                                             // 570\n      dryRun = true;                                                                                                  // 314\n    }                                                                                                                 // 572\n                                                                                                                      //\n    cancel = false;                                                                                                   // 315\n    resolved = [];                                                                                                    // 316\n    failed = [];                                                                                                      // 317\n    cancelled = [];                                                                                                   // 318\n    removed = [];                                                                                                     // 319\n    log = [];                                                                                                         // 320\n                                                                                                                      //\n    if (job.depends.length > 0) {                                                                                     // 321\n      deps = this.find({                                                                                              // 322\n        _id: {                                                                                                        // 322\n          $in: job.depends                                                                                            // 322\n        }                                                                                                             // 322\n      }, {                                                                                                            // 322\n        fields: {                                                                                                     // 322\n          _id: 1,                                                                                                     // 322\n          runId: 1,                                                                                                   // 322\n          status: 1                                                                                                   // 322\n        }                                                                                                             // 322\n      }).fetch();                                                                                                     // 322\n                                                                                                                      //\n      if (deps.length !== job.depends.length) {                                                                       // 324\n        foundIds = deps.map(function (d) {                                                                            // 325\n          return d._id;                                                                                               // 593\n        });                                                                                                           // 325\n        ref = job.depends;                                                                                            // 326\n                                                                                                                      //\n        for (k = 0, len = ref.length; k < len; k++) {                                                                 // 326\n          j = ref[k];                                                                                                 // 597\n                                                                                                                      //\n          if (!!(indexOf.call(foundIds, j) >= 0)) {                                                                   // 598\n            continue;                                                                                                 // 599\n          }                                                                                                           // 600\n                                                                                                                      //\n          if (!dryRun) {                                                                                              // 327\n            this._DDPMethod_jobLog(job._id, null, \"Antecedent job \" + j + \" missing at save\");                        // 327\n          }                                                                                                           // 603\n                                                                                                                      //\n          removed.push(j);                                                                                            // 328\n        }                                                                                                             // 326\n                                                                                                                      //\n        cancel = true;                                                                                                // 329\n      }                                                                                                               // 607\n                                                                                                                      //\n      for (m = 0, len1 = deps.length; m < len1; m++) {                                                                // 331\n        depJob = deps[m];                                                                                             // 609\n                                                                                                                      //\n        if (ref1 = depJob.status, indexOf.call(this.jobStatusCancellable, ref1) < 0) {                                // 332\n          switch (depJob.status) {                                                                                    // 333\n            case \"completed\":                                                                                         // 333\n              resolved.push(depJob._id);                                                                              // 335\n              log.push(this._logMessage.resolved(depJob._id, depJob.runId));                                          // 336\n              break;                                                                                                  // 334\n                                                                                                                      //\n            case \"failed\":                                                                                            // 333\n              cancel = true;                                                                                          // 338\n              failed.push(depJob._id);                                                                                // 339\n                                                                                                                      //\n              if (!dryRun) {                                                                                          // 340\n                this._DDPMethod_jobLog(job._id, null, \"Antecedent job failed before save\");                           // 340\n              }                                                                                                       // 621\n                                                                                                                      //\n              break;                                                                                                  // 337\n                                                                                                                      //\n            case \"cancelled\":                                                                                         // 333\n              cancel = true;                                                                                          // 342\n              cancelled.push(depJob._id);                                                                             // 343\n                                                                                                                      //\n              if (!dryRun) {                                                                                          // 344\n                this._DDPMethod_jobLog(job._id, null, \"Antecedent job cancelled before save\");                        // 344\n              }                                                                                                       // 628\n                                                                                                                      //\n              break;                                                                                                  // 341\n                                                                                                                      //\n            default:                                                                                                  // 333\n              throw new Meteor.Error(\"Unknown status in jobSave Dependency check\");                                   // 346\n          }                                                                                                           // 333\n        }                                                                                                             // 633\n      }                                                                                                               // 331\n                                                                                                                      //\n      if (!(resolved.length === 0 || dryRun)) {                                                                       // 348\n        mods = {                                                                                                      // 349\n          $pull: {                                                                                                    // 350\n            depends: {                                                                                                // 351\n              $in: resolved                                                                                           // 352\n            }                                                                                                         // 352\n          },                                                                                                          // 351\n          $push: {                                                                                                    // 353\n            resolved: {                                                                                               // 354\n              $each: resolved                                                                                         // 355\n            },                                                                                                        // 355\n            log: {                                                                                                    // 356\n              $each: log                                                                                              // 357\n            }                                                                                                         // 357\n          }                                                                                                           // 354\n        };                                                                                                            // 350\n        n = this.update({                                                                                             // 359\n          _id: job._id,                                                                                               // 361\n          status: 'waiting'                                                                                           // 362\n        }, mods);                                                                                                     // 360\n                                                                                                                      //\n        if (!n) {                                                                                                     // 367\n          console.warn(\"Update for job \" + job._id + \" during dependency check failed.\");                             // 368\n        }                                                                                                             // 348\n      }                                                                                                               // 658\n                                                                                                                      //\n      if (cancel && !dryRun) {                                                                                        // 370\n        this._DDPMethod_jobCancel(job._id);                                                                           // 371\n                                                                                                                      //\n        return false;                                                                                                 // 372\n      }                                                                                                               // 321\n    }                                                                                                                 // 663\n                                                                                                                      //\n    if (dryRun) {                                                                                                     // 374\n      if (cancel || resolved.length > 0) {                                                                            // 375\n        return {                                                                                                      // 376\n          jobId: job._id,                                                                                             // 377\n          resolved: resolved,                                                                                         // 378\n          failed: failed,                                                                                             // 379\n          cancelled: cancelled,                                                                                       // 380\n          removed: removed                                                                                            // 381\n        };                                                                                                            // 376\n      } else {                                                                                                        // 375\n        return false;                                                                                                 // 384\n      }                                                                                                               // 374\n    } else {                                                                                                          // 374\n      return true;                                                                                                    // 386\n    }                                                                                                                 // 678\n  };                                                                                                                  // 314\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_startJobServer = function (options) {                                        // 681\n    check(options, Match.Optional({}));                                                                               // 389\n                                                                                                                      //\n    if (options == null) {                                                                                            // 683\n      options = {};                                                                                                   // 390\n    }                                                                                                                 // 685\n                                                                                                                      //\n    if (!this.isSimulation) {                                                                                         // 392\n      if (this.stopped && this.stopped !== true) {                                                                    // 393\n        Meteor.clearTimeout(this.stopped);                                                                            // 393\n      }                                                                                                               // 689\n                                                                                                                      //\n      this.stopped = false;                                                                                           // 394\n    }                                                                                                                 // 691\n                                                                                                                      //\n    return true;                                                                                                      // 395\n  };                                                                                                                  // 388\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_startJobs = function () {                                                    // 695\n    var depFlag;                                                                                                      // 398\n    depFlag = false;                                                                                                  // 398\n    return function (options) {                                                                                       // 698\n      if (!depFlag) {                                                                                                 // 400\n        depFlag = true;                                                                                               // 401\n        console.warn(\"Deprecation Warning: jc.startJobs() has been renamed to jc.startJobServer()\");                  // 402\n      }                                                                                                               // 702\n                                                                                                                      //\n      return this._DDPMethod_startJobServer(options);                                                                 // 403\n    };                                                                                                                // 399\n  }();                                                                                                                // 397\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_shutdownJobServer = function (options) {                                     // 707\n    check(options, Match.Optional({                                                                                   // 406\n      timeout: Match.Optional(Match.Where(_validIntGTEOne))                                                           // 407\n    }));                                                                                                              // 407\n                                                                                                                      //\n    if (options == null) {                                                                                            // 711\n      options = {};                                                                                                   // 408\n    }                                                                                                                 // 713\n                                                                                                                      //\n    if (options.timeout == null) {                                                                                    // 714\n      options.timeout = 60 * 1000;                                                                                    // 409\n    }                                                                                                                 // 716\n                                                                                                                      //\n    if (!this.isSimulation) {                                                                                         // 412\n      if (this.stopped && this.stopped !== true) {                                                                    // 413\n        Meteor.clearTimeout(this.stopped);                                                                            // 413\n      }                                                                                                               // 720\n                                                                                                                      //\n      this.stopped = Meteor.setTimeout(function (_this) {                                                             // 414\n        return function () {                                                                                          // 722\n          var cursor, failedJobs;                                                                                     // 416\n          cursor = _this.find({                                                                                       // 416\n            status: 'running'                                                                                         // 418\n          }, {                                                                                                        // 417\n            transform: null                                                                                           // 421\n          });                                                                                                         // 420\n          failedJobs = cursor.count();                                                                                // 424\n                                                                                                                      //\n          if (failedJobs !== 0) {                                                                                     // 425\n            console.warn(\"Failing \" + failedJobs + \" jobs on queue stop.\");                                           // 425\n          }                                                                                                           // 732\n                                                                                                                      //\n          cursor.forEach(function (d) {                                                                               // 426\n            return _this._DDPMethod_jobFail(d._id, d.runId, \"Running at Job Server shutdown.\");                       // 734\n          });                                                                                                         // 426\n                                                                                                                      //\n          if (_this.logStream != null) {                                                                              // 427\n            _this.logStream.end();                                                                                    // 428\n                                                                                                                      //\n            return _this.logStream = null;                                                                            // 738\n          }                                                                                                           // 739\n        };                                                                                                            // 415\n      }(this), options.timeout);                                                                                      // 415\n    }                                                                                                                 // 742\n                                                                                                                      //\n    return true;                                                                                                      // 432\n  };                                                                                                                  // 405\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_stopJobs = function () {                                                     // 746\n    var depFlag;                                                                                                      // 435\n    depFlag = false;                                                                                                  // 435\n    return function (options) {                                                                                       // 749\n      if (!depFlag) {                                                                                                 // 437\n        depFlag = true;                                                                                               // 438\n        console.warn(\"Deprecation Warning: jc.stopJobs() has been renamed to jc.shutdownJobServer()\");                // 439\n      }                                                                                                               // 753\n                                                                                                                      //\n      return this._DDPMethod_shutdownJobServer(options);                                                              // 440\n    };                                                                                                                // 436\n  }();                                                                                                                // 434\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_getJob = function (ids, options) {                                           // 758\n    var d, docs, fields, single;                                                                                      // 443\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 443\n    check(options, Match.Optional({                                                                                   // 444\n      getLog: Match.Optional(Boolean),                                                                                // 445\n      getFailures: Match.Optional(Boolean)                                                                            // 446\n    }));                                                                                                              // 445\n                                                                                                                      //\n    if (options == null) {                                                                                            // 765\n      options = {};                                                                                                   // 447\n    }                                                                                                                 // 767\n                                                                                                                      //\n    if (options.getLog == null) {                                                                                     // 768\n      options.getLog = false;                                                                                         // 448\n    }                                                                                                                 // 770\n                                                                                                                      //\n    if (options.getFailures == null) {                                                                                // 771\n      options.getFailures = false;                                                                                    // 449\n    }                                                                                                                 // 773\n                                                                                                                      //\n    single = false;                                                                                                   // 450\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 451\n      ids = [ids];                                                                                                    // 452\n      single = true;                                                                                                  // 453\n    }                                                                                                                 // 778\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 454\n      return null;                                                                                                    // 454\n    }                                                                                                                 // 781\n                                                                                                                      //\n    fields = {                                                                                                        // 455\n      _private: 0                                                                                                     // 455\n    };                                                                                                                // 455\n                                                                                                                      //\n    if (!options.getLog) {                                                                                            // 456\n      fields.log = 0;                                                                                                 // 456\n    }                                                                                                                 // 787\n                                                                                                                      //\n    if (!options.getFailures) {                                                                                       // 457\n      fields.failures = 0;                                                                                            // 457\n    }                                                                                                                 // 790\n                                                                                                                      //\n    docs = this.find({                                                                                                // 458\n      _id: {                                                                                                          // 460\n        $in: ids                                                                                                      // 461\n      }                                                                                                               // 461\n    }, {                                                                                                              // 459\n      fields: fields,                                                                                                 // 464\n      transform: null                                                                                                 // 465\n    }).fetch();                                                                                                       // 463\n                                                                                                                      //\n    if (docs != null ? docs.length : void 0) {                                                                        // 468\n      if (this.scrub != null) {                                                                                       // 469\n        docs = function () {                                                                                          // 470\n          var k, len, results;                                                                                        // 802\n          results = [];                                                                                               // 470\n                                                                                                                      //\n          for (k = 0, len = docs.length; k < len; k++) {                                                              // 804\n            d = docs[k];                                                                                              // 805\n            results.push(this.scrub(d));                                                                              // 806\n          }                                                                                                           // 470\n                                                                                                                      //\n          return results;                                                                                             // 808\n        }.call(this);                                                                                                 // 809\n      }                                                                                                               // 810\n                                                                                                                      //\n      check(docs, [_validJobDoc()]);                                                                                  // 471\n                                                                                                                      //\n      if (single) {                                                                                                   // 472\n        return docs[0];                                                                                               // 473\n      } else {                                                                                                        // 472\n        return docs;                                                                                                  // 475\n      }                                                                                                               // 468\n    }                                                                                                                 // 817\n                                                                                                                      //\n    return null;                                                                                                      // 476\n  };                                                                                                                  // 442\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_getWork = function (type, options) {                                         // 821\n    var d, docs, foundDocs, ids, logObj, mods, num, runId, time;                                                      // 479\n    check(type, Match.OneOf(String, [String]));                                                                       // 479\n    check(options, Match.Optional({                                                                                   // 480\n      maxJobs: Match.Optional(Match.Where(_validIntGTEOne)),                                                          // 481\n      workTimeout: Match.Optional(Match.Where(_validIntGTEOne))                                                       // 482\n    }));                                                                                                              // 481\n                                                                                                                      //\n    if (this.isSimulation) {                                                                                          // 485\n      return;                                                                                                         // 486\n    }                                                                                                                 // 830\n                                                                                                                      //\n    if (options == null) {                                                                                            // 831\n      options = {};                                                                                                   // 488\n    }                                                                                                                 // 833\n                                                                                                                      //\n    if (options.maxJobs == null) {                                                                                    // 834\n      options.maxJobs = 1;                                                                                            // 489\n    }                                                                                                                 // 836\n                                                                                                                      //\n    if (this.stopped) {                                                                                               // 491\n      return [];                                                                                                      // 492\n    }                                                                                                                 // 839\n                                                                                                                      //\n    if (typeof type === 'string') {                                                                                   // 495\n      type = [type];                                                                                                  // 496\n    }                                                                                                                 // 842\n                                                                                                                      //\n    time = new Date();                                                                                                // 497\n    docs = [];                                                                                                        // 498\n    runId = this._makeNewID();                                                                                        // 499\n                                                                                                                      //\n    while (docs.length < options.maxJobs) {                                                                           // 501\n      ids = this.find({                                                                                               // 503\n        type: {                                                                                                       // 505\n          $in: type                                                                                                   // 506\n        },                                                                                                            // 506\n        status: 'ready',                                                                                              // 507\n        runId: null                                                                                                   // 508\n      }, {                                                                                                            // 504\n        sort: {                                                                                                       // 511\n          priority: 1,                                                                                                // 512\n          retryUntil: 1,                                                                                              // 513\n          after: 1                                                                                                    // 514\n        },                                                                                                            // 512\n        limit: options.maxJobs - docs.length,                                                                         // 515\n        fields: {                                                                                                     // 516\n          _id: 1                                                                                                      // 517\n        },                                                                                                            // 517\n        transform: null                                                                                               // 518\n      }).map(function (d) {                                                                                           // 510\n        return d._id;                                                                                                 // 865\n      });                                                                                                             // 503\n                                                                                                                      //\n      if (!((ids != null ? ids.length : void 0) > 0)) {                                                               // 521\n        break;                                                                                                        // 522\n      }                                                                                                               // 869\n                                                                                                                      //\n      mods = {                                                                                                        // 524\n        $set: {                                                                                                       // 525\n          status: 'running',                                                                                          // 526\n          runId: runId,                                                                                               // 527\n          updated: time                                                                                               // 528\n        },                                                                                                            // 526\n        $inc: {                                                                                                       // 529\n          retries: -1,                                                                                                // 530\n          retried: 1                                                                                                  // 531\n        }                                                                                                             // 530\n      };                                                                                                              // 525\n                                                                                                                      //\n      if (logObj = this._logMessage.running(runId)) {                                                                 // 533\n        mods.$push = {                                                                                                // 534\n          log: logObj                                                                                                 // 535\n        };                                                                                                            // 535\n      }                                                                                                               // 885\n                                                                                                                      //\n      if (options.workTimeout != null) {                                                                              // 537\n        mods.$set.workTimeout = options.workTimeout;                                                                  // 538\n        mods.$set.expiresAfter = new Date(time.valueOf() + options.workTimeout);                                      // 539\n      } else {                                                                                                        // 537\n        if (mods.$unset == null) {                                                                                    // 890\n          mods.$unset = {};                                                                                           // 541\n        }                                                                                                             // 892\n                                                                                                                      //\n        mods.$unset.workTimeout = \"\";                                                                                 // 542\n        mods.$unset.expiresAfter = \"\";                                                                                // 543\n      }                                                                                                               // 895\n                                                                                                                      //\n      num = this.update({                                                                                             // 545\n        _id: {                                                                                                        // 547\n          $in: ids                                                                                                    // 548\n        },                                                                                                            // 548\n        status: 'ready',                                                                                              // 549\n        runId: null                                                                                                   // 550\n      }, mods, {                                                                                                      // 546\n        multi: true                                                                                                   // 554\n      });                                                                                                             // 553\n                                                                                                                      //\n      if (num > 0) {                                                                                                  // 558\n        foundDocs = this.find({                                                                                       // 559\n          _id: {                                                                                                      // 561\n            $in: ids                                                                                                  // 562\n          },                                                                                                          // 562\n          runId: runId                                                                                                // 563\n        }, {                                                                                                          // 560\n          fields: {                                                                                                   // 566\n            log: 0,                                                                                                   // 567\n            failures: 0,                                                                                              // 568\n            _private: 0                                                                                               // 569\n          },                                                                                                          // 567\n          transform: null                                                                                             // 570\n        }).fetch();                                                                                                   // 565\n                                                                                                                      //\n        if ((foundDocs != null ? foundDocs.length : void 0) > 0) {                                                    // 574\n          if (this.scrub != null) {                                                                                   // 575\n            foundDocs = function () {                                                                                 // 576\n              var k, len, results;                                                                                    // 922\n              results = [];                                                                                           // 576\n                                                                                                                      //\n              for (k = 0, len = foundDocs.length; k < len; k++) {                                                     // 924\n                d = foundDocs[k];                                                                                     // 925\n                results.push(this.scrub(d));                                                                          // 926\n              }                                                                                                       // 576\n                                                                                                                      //\n              return results;                                                                                         // 928\n            }.call(this);                                                                                             // 929\n          }                                                                                                           // 930\n                                                                                                                      //\n          check(docs, [_validJobDoc()]);                                                                              // 577\n          docs = docs.concat(foundDocs);                                                                              // 578\n        }                                                                                                             // 558\n      }                                                                                                               // 934\n    }                                                                                                                 // 501\n                                                                                                                      //\n    return docs;                                                                                                      // 581\n  };                                                                                                                  // 478\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobRemove = function (ids, options) {                                        // 939\n    var num;                                                                                                          // 584\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 584\n    check(options, Match.Optional({}));                                                                               // 585\n                                                                                                                      //\n    if (options == null) {                                                                                            // 943\n      options = {};                                                                                                   // 586\n    }                                                                                                                 // 945\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 587\n      ids = [ids];                                                                                                    // 588\n    }                                                                                                                 // 948\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 589\n      return false;                                                                                                   // 589\n    }                                                                                                                 // 951\n                                                                                                                      //\n    num = this.remove({                                                                                               // 590\n      _id: {                                                                                                          // 592\n        $in: ids                                                                                                      // 593\n      },                                                                                                              // 593\n      status: {                                                                                                       // 594\n        $in: this.jobStatusRemovable                                                                                  // 595\n      }                                                                                                               // 595\n    });                                                                                                               // 591\n                                                                                                                      //\n    if (num > 0) {                                                                                                    // 598\n      return true;                                                                                                    // 599\n    } else {                                                                                                          // 598\n      console.warn(\"jobRemove failed\");                                                                               // 601\n    }                                                                                                                 // 964\n                                                                                                                      //\n    return false;                                                                                                     // 602\n  };                                                                                                                  // 583\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobPause = function (ids, options) {                                         // 968\n    var logObj, mods, num, time;                                                                                      // 605\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 605\n    check(options, Match.Optional({}));                                                                               // 606\n                                                                                                                      //\n    if (options == null) {                                                                                            // 972\n      options = {};                                                                                                   // 607\n    }                                                                                                                 // 974\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 608\n      ids = [ids];                                                                                                    // 609\n    }                                                                                                                 // 977\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 610\n      return false;                                                                                                   // 610\n    }                                                                                                                 // 980\n                                                                                                                      //\n    time = new Date();                                                                                                // 611\n    mods = {                                                                                                          // 613\n      $set: {                                                                                                         // 614\n        status: \"paused\",                                                                                             // 615\n        updated: time                                                                                                 // 616\n      }                                                                                                               // 615\n    };                                                                                                                // 614\n                                                                                                                      //\n    if (logObj = this._logMessage.paused()) {                                                                         // 618\n      mods.$push = {                                                                                                  // 619\n        log: logObj                                                                                                   // 620\n      };                                                                                                              // 620\n    }                                                                                                                 // 992\n                                                                                                                      //\n    num = this.update({                                                                                               // 622\n      _id: {                                                                                                          // 624\n        $in: ids                                                                                                      // 625\n      },                                                                                                              // 625\n      status: {                                                                                                       // 626\n        $in: this.jobStatusPausable                                                                                   // 627\n      }                                                                                                               // 627\n    }, mods, {                                                                                                        // 623\n      multi: true                                                                                                     // 631\n    });                                                                                                               // 630\n                                                                                                                      //\n    if (num > 0) {                                                                                                    // 634\n      return true;                                                                                                    // 635\n    } else {                                                                                                          // 634\n      console.warn(\"jobPause failed\");                                                                                // 637\n    }                                                                                                                 // 1007\n                                                                                                                      //\n    return false;                                                                                                     // 638\n  };                                                                                                                  // 604\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobResume = function (ids, options) {                                        // 1011\n    var logObj, mods, num, time;                                                                                      // 641\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 641\n    check(options, Match.Optional({}));                                                                               // 642\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1015\n      options = {};                                                                                                   // 643\n    }                                                                                                                 // 1017\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 644\n      ids = [ids];                                                                                                    // 645\n    }                                                                                                                 // 1020\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 646\n      return false;                                                                                                   // 646\n    }                                                                                                                 // 1023\n                                                                                                                      //\n    time = new Date();                                                                                                // 647\n    mods = {                                                                                                          // 648\n      $set: {                                                                                                         // 649\n        status: \"waiting\",                                                                                            // 650\n        updated: time                                                                                                 // 651\n      }                                                                                                               // 650\n    };                                                                                                                // 649\n                                                                                                                      //\n    if (logObj = this._logMessage.resumed()) {                                                                        // 653\n      mods.$push = {                                                                                                  // 654\n        log: logObj                                                                                                   // 655\n      };                                                                                                              // 655\n    }                                                                                                                 // 1035\n                                                                                                                      //\n    num = this.update({                                                                                               // 657\n      _id: {                                                                                                          // 659\n        $in: ids                                                                                                      // 660\n      },                                                                                                              // 660\n      status: \"paused\",                                                                                               // 661\n      updated: {                                                                                                      // 662\n        $ne: time                                                                                                     // 663\n      }                                                                                                               // 663\n    }, mods, {                                                                                                        // 658\n      multi: true                                                                                                     // 667\n    });                                                                                                               // 666\n                                                                                                                      //\n    if (num > 0) {                                                                                                    // 670\n      this._DDPMethod_jobReady(ids);                                                                                  // 671\n                                                                                                                      //\n      return true;                                                                                                    // 672\n    } else {                                                                                                          // 670\n      console.warn(\"jobResume failed\");                                                                               // 674\n    }                                                                                                                 // 1052\n                                                                                                                      //\n    return false;                                                                                                     // 675\n  };                                                                                                                  // 640\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobReady = function (ids, options) {                                         // 1056\n    var l, logObj, mods, now, num, query;                                                                             // 678\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 678\n    check(options, Match.Optional({                                                                                   // 679\n      force: Match.Optional(Boolean),                                                                                 // 680\n      time: Match.Optional(Date)                                                                                      // 681\n    }));                                                                                                              // 680\n                                                                                                                      //\n    if (this.isSimulation) {                                                                                          // 686\n      return;                                                                                                         // 687\n    }                                                                                                                 // 1065\n                                                                                                                      //\n    now = new Date();                                                                                                 // 689\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1067\n      options = {};                                                                                                   // 691\n    }                                                                                                                 // 1069\n                                                                                                                      //\n    if (options.force == null) {                                                                                      // 1070\n      options.force = false;                                                                                          // 692\n    }                                                                                                                 // 1072\n                                                                                                                      //\n    if (options.time == null) {                                                                                       // 1073\n      options.time = now;                                                                                             // 693\n    }                                                                                                                 // 1075\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 695\n      ids = [ids];                                                                                                    // 696\n    }                                                                                                                 // 1078\n                                                                                                                      //\n    query = {                                                                                                         // 698\n      status: \"waiting\",                                                                                              // 699\n      after: {                                                                                                        // 700\n        $lte: options.time                                                                                            // 701\n      }                                                                                                               // 701\n    };                                                                                                                // 699\n    mods = {                                                                                                          // 703\n      $set: {                                                                                                         // 704\n        status: \"ready\",                                                                                              // 705\n        updated: now                                                                                                  // 706\n      }                                                                                                               // 705\n    };                                                                                                                // 704\n                                                                                                                      //\n    if (ids.length > 0) {                                                                                             // 708\n      query._id = {                                                                                                   // 709\n        $in: ids                                                                                                      // 710\n      };                                                                                                              // 710\n      mods.$set.after = now;                                                                                          // 711\n    }                                                                                                                 // 1096\n                                                                                                                      //\n    logObj = [];                                                                                                      // 713\n                                                                                                                      //\n    if (options.force) {                                                                                              // 715\n      mods.$set.depends = [];                                                                                         // 716\n      l = this._logMessage.forced();                                                                                  // 717\n                                                                                                                      //\n      if (l) {                                                                                                        // 718\n        logObj.push(l);                                                                                               // 718\n      }                                                                                                               // 715\n    } else {                                                                                                          // 715\n      query.depends = {                                                                                               // 720\n        $size: 0                                                                                                      // 721\n      };                                                                                                              // 721\n    }                                                                                                                 // 1108\n                                                                                                                      //\n    l = this._logMessage.readied();                                                                                   // 723\n                                                                                                                      //\n    if (l) {                                                                                                          // 724\n      logObj.push(l);                                                                                                 // 724\n    }                                                                                                                 // 1112\n                                                                                                                      //\n    if (logObj.length > 0) {                                                                                          // 726\n      mods.$push = {                                                                                                  // 727\n        log: {                                                                                                        // 728\n          $each: logObj                                                                                               // 729\n        }                                                                                                             // 729\n      };                                                                                                              // 728\n    }                                                                                                                 // 1119\n                                                                                                                      //\n    num = this.update(query, mods, {                                                                                  // 731\n      multi: true                                                                                                     // 735\n    });                                                                                                               // 734\n                                                                                                                      //\n    if (num > 0) {                                                                                                    // 739\n      return true;                                                                                                    // 740\n    } else {                                                                                                          // 739\n      return false;                                                                                                   // 742\n    }                                                                                                                 // 1127\n  };                                                                                                                  // 677\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobCancel = function (ids, options) {                                        // 1130\n    var cancelIds, depsCancelled, logObj, mods, num, time;                                                            // 745\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 745\n    check(options, Match.Optional({                                                                                   // 746\n      antecedents: Match.Optional(Boolean),                                                                           // 747\n      dependents: Match.Optional(Boolean)                                                                             // 748\n    }));                                                                                                              // 747\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1137\n      options = {};                                                                                                   // 749\n    }                                                                                                                 // 1139\n                                                                                                                      //\n    if (options.antecedents == null) {                                                                                // 1140\n      options.antecedents = false;                                                                                    // 750\n    }                                                                                                                 // 1142\n                                                                                                                      //\n    if (options.dependents == null) {                                                                                 // 1143\n      options.dependents = true;                                                                                      // 751\n    }                                                                                                                 // 1145\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 752\n      ids = [ids];                                                                                                    // 753\n    }                                                                                                                 // 1148\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 754\n      return false;                                                                                                   // 754\n    }                                                                                                                 // 1151\n                                                                                                                      //\n    time = new Date();                                                                                                // 755\n    mods = {                                                                                                          // 757\n      $set: {                                                                                                         // 758\n        status: \"cancelled\",                                                                                          // 759\n        runId: null,                                                                                                  // 760\n        progress: {                                                                                                   // 761\n          completed: 0,                                                                                               // 762\n          total: 1,                                                                                                   // 763\n          percent: 0                                                                                                  // 764\n        },                                                                                                            // 762\n        updated: time                                                                                                 // 765\n      }                                                                                                               // 759\n    };                                                                                                                // 758\n                                                                                                                      //\n    if (logObj = this._logMessage.cancelled()) {                                                                      // 767\n      mods.$push = {                                                                                                  // 768\n        log: logObj                                                                                                   // 769\n      };                                                                                                              // 769\n    }                                                                                                                 // 1169\n                                                                                                                      //\n    num = this.update({                                                                                               // 771\n      _id: {                                                                                                          // 773\n        $in: ids                                                                                                      // 774\n      },                                                                                                              // 774\n      status: {                                                                                                       // 775\n        $in: this.jobStatusCancellable                                                                                // 776\n      }                                                                                                               // 776\n    }, mods, {                                                                                                        // 772\n      multi: true                                                                                                     // 780\n    });                                                                                                               // 779\n    cancelIds = this._idsOfDeps(ids, options.antecedents, options.dependents, this.jobStatusCancellable);             // 784\n    depsCancelled = false;                                                                                            // 786\n                                                                                                                      //\n    if (cancelIds.length > 0) {                                                                                       // 787\n      depsCancelled = this._DDPMethod_jobCancel(cancelIds, options);                                                  // 788\n    }                                                                                                                 // 1184\n                                                                                                                      //\n    if (num > 0 || depsCancelled) {                                                                                   // 790\n      return true;                                                                                                    // 791\n    } else {                                                                                                          // 790\n      console.warn(\"jobCancel failed\");                                                                               // 793\n    }                                                                                                                 // 1189\n                                                                                                                      //\n    return false;                                                                                                     // 794\n  };                                                                                                                  // 744\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobRestart = function (ids, options) {                                       // 1193\n    var depsRestarted, logObj, mods, num, query, restartIds, time;                                                    // 797\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 797\n    check(options, Match.Optional({                                                                                   // 798\n      retries: Match.Optional(Match.Where(_validIntGTEZero)),                                                         // 799\n      until: Match.Optional(Date),                                                                                    // 800\n      antecedents: Match.Optional(Boolean),                                                                           // 801\n      dependents: Match.Optional(Boolean)                                                                             // 802\n    }));                                                                                                              // 799\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1202\n      options = {};                                                                                                   // 803\n    }                                                                                                                 // 1204\n                                                                                                                      //\n    if (options.retries == null) {                                                                                    // 1205\n      options.retries = 1;                                                                                            // 804\n    }                                                                                                                 // 1207\n                                                                                                                      //\n    if (options.retries > this.forever) {                                                                             // 805\n      options.retries = this.forever;                                                                                 // 805\n    }                                                                                                                 // 1210\n                                                                                                                      //\n    if (options.dependents == null) {                                                                                 // 1211\n      options.dependents = false;                                                                                     // 806\n    }                                                                                                                 // 1213\n                                                                                                                      //\n    if (options.antecedents == null) {                                                                                // 1214\n      options.antecedents = true;                                                                                     // 807\n    }                                                                                                                 // 1216\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 808\n      ids = [ids];                                                                                                    // 809\n    }                                                                                                                 // 1219\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 810\n      return false;                                                                                                   // 810\n    }                                                                                                                 // 1222\n                                                                                                                      //\n    time = new Date();                                                                                                // 811\n    query = {                                                                                                         // 813\n      _id: {                                                                                                          // 814\n        $in: ids                                                                                                      // 815\n      },                                                                                                              // 815\n      status: {                                                                                                       // 816\n        $in: this.jobStatusRestartable                                                                                // 817\n      }                                                                                                               // 817\n    };                                                                                                                // 814\n    mods = {                                                                                                          // 819\n      $set: {                                                                                                         // 820\n        status: \"waiting\",                                                                                            // 821\n        progress: {                                                                                                   // 822\n          completed: 0,                                                                                               // 823\n          total: 1,                                                                                                   // 824\n          percent: 0                                                                                                  // 825\n        },                                                                                                            // 823\n        updated: time                                                                                                 // 826\n      },                                                                                                              // 821\n      $inc: {                                                                                                         // 827\n        retries: options.retries                                                                                      // 828\n      }                                                                                                               // 828\n    };                                                                                                                // 820\n                                                                                                                      //\n    if (logObj = this._logMessage.restarted()) {                                                                      // 830\n      mods.$push = {                                                                                                  // 831\n        log: logObj                                                                                                   // 832\n      };                                                                                                              // 832\n    }                                                                                                                 // 1250\n                                                                                                                      //\n    if (options.until != null) {                                                                                      // 834\n      mods.$set.retryUntil = options.until;                                                                           // 835\n    }                                                                                                                 // 1253\n                                                                                                                      //\n    num = this.update(query, mods, {                                                                                  // 837\n      multi: true                                                                                                     // 837\n    });                                                                                                               // 837\n    restartIds = this._idsOfDeps(ids, options.antecedents, options.dependents, this.jobStatusRestartable);            // 840\n    depsRestarted = false;                                                                                            // 842\n                                                                                                                      //\n    if (restartIds.length > 0) {                                                                                      // 843\n      depsRestarted = this._DDPMethod_jobRestart(restartIds, options);                                                // 844\n    }                                                                                                                 // 1261\n                                                                                                                      //\n    if (num > 0 || depsRestarted) {                                                                                   // 846\n      this._DDPMethod_jobReady(ids);                                                                                  // 847\n                                                                                                                      //\n      return true;                                                                                                    // 848\n    } else {                                                                                                          // 846\n      console.warn(\"jobRestart failed\");                                                                              // 850\n    }                                                                                                                 // 1267\n                                                                                                                      //\n    return false;                                                                                                     // 851\n  };                                                                                                                  // 796\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobSave = function (doc, options) {                                          // 1271\n    var logObj, mods, next, nextDate, num, ref, schedule, time;                                                       // 856\n    check(doc, _validJobDoc());                                                                                       // 856\n    check(options, Match.Optional({                                                                                   // 857\n      cancelRepeats: Match.Optional(Boolean)                                                                          // 858\n    }));                                                                                                              // 858\n    check(doc.status, Match.Where(function (v) {                                                                      // 859\n      return Match.test(v, String) && (v === 'waiting' || v === 'paused');                                            // 1278\n    }));                                                                                                              // 859\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1280\n      options = {};                                                                                                   // 861\n    }                                                                                                                 // 1282\n                                                                                                                      //\n    if (options.cancelRepeats == null) {                                                                              // 1283\n      options.cancelRepeats = false;                                                                                  // 862\n    }                                                                                                                 // 1285\n                                                                                                                      //\n    if (doc.repeats > this.forever) {                                                                                 // 863\n      doc.repeats = this.forever;                                                                                     // 863\n    }                                                                                                                 // 1288\n                                                                                                                      //\n    if (doc.retries > this.forever) {                                                                                 // 864\n      doc.retries = this.forever;                                                                                     // 864\n    }                                                                                                                 // 1291\n                                                                                                                      //\n    time = new Date();                                                                                                // 866\n                                                                                                                      //\n    if (doc.after < time) {                                                                                           // 870\n      doc.after = time;                                                                                               // 870\n    }                                                                                                                 // 1295\n                                                                                                                      //\n    if (doc.retryUntil < time) {                                                                                      // 871\n      doc.retryUntil = time;                                                                                          // 871\n    }                                                                                                                 // 1298\n                                                                                                                      //\n    if (doc.repeatUntil < time) {                                                                                     // 872\n      doc.repeatUntil = time;                                                                                         // 872\n    }                                                                                                                 // 1301\n                                                                                                                      //\n    if (this.later != null && typeof doc.repeatWait !== 'number') {                                                   // 876\n      schedule = (ref = this.later) != null ? ref.schedule(doc.repeatWait) : void 0;                                  // 879\n                                                                                                                      //\n      if (!(schedule && (next = schedule.next(2, schedule.prev(1, doc.after))[1]))) {                                 // 880\n        console.warn(\"No valid available later.js times in schedule after \" + doc.after);                             // 881\n        return null;                                                                                                  // 882\n      }                                                                                                               // 1307\n                                                                                                                      //\n      nextDate = new Date(next);                                                                                      // 883\n                                                                                                                      //\n      if (!(nextDate <= doc.repeatUntil)) {                                                                           // 884\n        console.warn(\"No valid available later.js times in schedule before \" + doc.repeatUntil);                      // 885\n        return null;                                                                                                  // 886\n      }                                                                                                               // 1312\n                                                                                                                      //\n      doc.after = nextDate;                                                                                           // 887\n    } else if (this.later == null && doc.repeatWait !== 'number') {                                                   // 876\n      console.warn(\"Later.js not loaded...\");                                                                         // 889\n      return null;                                                                                                    // 890\n    }                                                                                                                 // 1317\n                                                                                                                      //\n    if (doc._id) {                                                                                                    // 892\n      mods = {                                                                                                        // 894\n        $set: {                                                                                                       // 895\n          status: 'waiting',                                                                                          // 896\n          data: doc.data,                                                                                             // 897\n          retries: doc.retries,                                                                                       // 898\n          repeatRetries: doc.repeatRetries != null ? doc.repeatRetries : doc.retries + doc.retried,                   // 899\n          retryUntil: doc.retryUntil,                                                                                 // 900\n          retryWait: doc.retryWait,                                                                                   // 901\n          retryBackoff: doc.retryBackoff,                                                                             // 902\n          repeats: doc.repeats,                                                                                       // 903\n          repeatUntil: doc.repeatUntil,                                                                               // 904\n          repeatWait: doc.repeatWait,                                                                                 // 905\n          depends: doc.depends,                                                                                       // 906\n          priority: doc.priority,                                                                                     // 907\n          after: doc.after,                                                                                           // 908\n          updated: time                                                                                               // 909\n        }                                                                                                             // 896\n      };                                                                                                              // 895\n                                                                                                                      //\n      if (logObj = this._logMessage.resubmitted()) {                                                                  // 911\n        mods.$push = {                                                                                                // 912\n          log: logObj                                                                                                 // 913\n        };                                                                                                            // 913\n      }                                                                                                               // 1341\n                                                                                                                      //\n      num = this.update({                                                                                             // 915\n        _id: doc._id,                                                                                                 // 917\n        status: 'paused',                                                                                             // 918\n        runId: null                                                                                                   // 919\n      }, mods);                                                                                                       // 916\n                                                                                                                      //\n      if (num && this._checkDeps(doc, false)) {                                                                       // 924\n        this._DDPMethod_jobReady(doc._id);                                                                            // 925\n                                                                                                                      //\n        return doc._id;                                                                                               // 926\n      } else {                                                                                                        // 924\n        return null;                                                                                                  // 928\n      }                                                                                                               // 892\n    } else {                                                                                                          // 892\n      if (doc.repeats === this.forever && options.cancelRepeats) {                                                    // 930\n        this.find({                                                                                                   // 932\n          type: doc.type,                                                                                             // 934\n          status: {                                                                                                   // 935\n            $in: this.jobStatusCancellable                                                                            // 936\n          }                                                                                                           // 936\n        }, {                                                                                                          // 933\n          transform: null                                                                                             // 939\n        }).forEach(function (_this) {                                                                                 // 938\n          return function (d) {                                                                                       // 1363\n            return _this._DDPMethod_jobCancel(d._id, {});                                                             // 1364\n          };                                                                                                          // 941\n        }(this));                                                                                                     // 941\n      }                                                                                                               // 1367\n                                                                                                                      //\n      doc.created = time;                                                                                             // 942\n      doc.log.push(this._logMessage.submitted());                                                                     // 943\n      doc._id = this.insert(doc);                                                                                     // 944\n                                                                                                                      //\n      if (doc._id && this._checkDeps(doc, false)) {                                                                   // 945\n        this._DDPMethod_jobReady(doc._id);                                                                            // 946\n                                                                                                                      //\n        return doc._id;                                                                                               // 947\n      } else {                                                                                                        // 945\n        return null;                                                                                                  // 949\n      }                                                                                                               // 892\n    }                                                                                                                 // 1377\n  };                                                                                                                  // 855\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobProgress = function (id, runId, completed, total, options) {              // 1380\n    var job, mods, num, progress, time;                                                                               // 954\n    check(id, Match.Where(_validId));                                                                                 // 954\n    check(runId, Match.Where(_validId));                                                                              // 955\n    check(completed, Match.Where(_validNumGTEZero));                                                                  // 956\n    check(total, Match.Where(_validNumGTZero));                                                                       // 957\n    check(options, Match.Optional({}));                                                                               // 958\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1387\n      options = {};                                                                                                   // 959\n    }                                                                                                                 // 1389\n                                                                                                                      //\n    if (this.stopped) {                                                                                               // 962\n      return null;                                                                                                    // 963\n    }                                                                                                                 // 1392\n                                                                                                                      //\n    progress = {                                                                                                      // 965\n      completed: completed,                                                                                           // 966\n      total: total,                                                                                                   // 967\n      percent: 100 * completed / total                                                                                // 968\n    };                                                                                                                // 966\n    check(progress, Match.Where(function (v) {                                                                        // 970\n      var ref;                                                                                                        // 971\n      return v.total >= v.completed && 0 <= (ref = v.percent) && ref <= 100;                                          // 1400\n    }));                                                                                                              // 970\n    time = new Date();                                                                                                // 973\n    job = this.findOne({                                                                                              // 975\n      _id: id                                                                                                         // 975\n    }, {                                                                                                              // 975\n      fields: {                                                                                                       // 975\n        workTimeout: 1                                                                                                // 975\n      }                                                                                                               // 975\n    });                                                                                                               // 975\n    mods = {                                                                                                          // 977\n      $set: {                                                                                                         // 978\n        progress: progress,                                                                                           // 979\n        updated: time                                                                                                 // 980\n      }                                                                                                               // 979\n    };                                                                                                                // 978\n                                                                                                                      //\n    if ((job != null ? job.workTimeout : void 0) != null) {                                                           // 982\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout);                                            // 983\n    }                                                                                                                 // 1418\n                                                                                                                      //\n    num = this.update({                                                                                               // 985\n      _id: id,                                                                                                        // 987\n      runId: runId,                                                                                                   // 988\n      status: \"running\"                                                                                               // 989\n    }, mods);                                                                                                         // 986\n                                                                                                                      //\n    if (num === 1) {                                                                                                  // 994\n      return true;                                                                                                    // 995\n    } else {                                                                                                          // 994\n      console.warn(\"jobProgress failed\");                                                                             // 997\n    }                                                                                                                 // 1428\n                                                                                                                      //\n    return false;                                                                                                     // 998\n  };                                                                                                                  // 953\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobLog = function (id, runId, message, options) {                            // 1432\n    var job, logObj, mods, num, ref, time;                                                                            // 1001\n    check(id, Match.Where(_validId));                                                                                 // 1001\n    check(runId, Match.OneOf(Match.Where(_validId), null));                                                           // 1002\n    check(message, String);                                                                                           // 1003\n    check(options, Match.Optional({                                                                                   // 1004\n      level: Match.Optional(Match.Where(_validLogLevel)),                                                             // 1005\n      data: Match.Optional(Object)                                                                                    // 1006\n    }));                                                                                                              // 1005\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1441\n      options = {};                                                                                                   // 1007\n    }                                                                                                                 // 1443\n                                                                                                                      //\n    time = new Date();                                                                                                // 1008\n    logObj = {                                                                                                        // 1009\n      time: time,                                                                                                     // 1010\n      runId: runId,                                                                                                   // 1011\n      level: (ref = options.level) != null ? ref : 'info',                                                            // 1012\n      message: message                                                                                                // 1013\n    };                                                                                                                // 1010\n                                                                                                                      //\n    if (options.data != null) {                                                                                       // 1014\n      logObj.data = options.data;                                                                                     // 1014\n    }                                                                                                                 // 1453\n                                                                                                                      //\n    job = this.findOne({                                                                                              // 1016\n      _id: id                                                                                                         // 1016\n    }, {                                                                                                              // 1016\n      fields: {                                                                                                       // 1016\n        status: 1,                                                                                                    // 1016\n        workTimeout: 1                                                                                                // 1016\n      }                                                                                                               // 1016\n    });                                                                                                               // 1016\n    mods = {                                                                                                          // 1018\n      $push: {                                                                                                        // 1019\n        log: logObj                                                                                                   // 1020\n      },                                                                                                              // 1020\n      $set: {                                                                                                         // 1021\n        updated: time                                                                                                 // 1022\n      }                                                                                                               // 1022\n    };                                                                                                                // 1019\n                                                                                                                      //\n    if ((job != null ? job.workTimeout : void 0) != null && job.status === 'running') {                               // 1024\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout);                                            // 1025\n    }                                                                                                                 // 1472\n                                                                                                                      //\n    num = this.update({                                                                                               // 1027\n      _id: id                                                                                                         // 1029\n    }, mods);                                                                                                         // 1028\n                                                                                                                      //\n    if (num === 1) {                                                                                                  // 1033\n      return true;                                                                                                    // 1034\n    } else {                                                                                                          // 1033\n      console.warn(\"jobLog failed\");                                                                                  // 1036\n    }                                                                                                                 // 1480\n                                                                                                                      //\n    return false;                                                                                                     // 1037\n  };                                                                                                                  // 1000\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobRerun = function (id, options) {                                          // 1484\n    var doc;                                                                                                          // 1040\n    check(id, Match.Where(_validId));                                                                                 // 1040\n    check(options, Match.Optional({                                                                                   // 1041\n      repeats: Match.Optional(Match.Where(_validIntGTEZero)),                                                         // 1042\n      until: Match.Optional(Date),                                                                                    // 1043\n      wait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj))                                 // 1044\n    }));                                                                                                              // 1042\n    doc = this.findOne({                                                                                              // 1046\n      _id: id,                                                                                                        // 1048\n      status: \"completed\"                                                                                             // 1049\n    }, {                                                                                                              // 1047\n      fields: {                                                                                                       // 1052\n        result: 0,                                                                                                    // 1053\n        failures: 0,                                                                                                  // 1054\n        log: 0,                                                                                                       // 1055\n        progress: 0,                                                                                                  // 1056\n        updated: 0,                                                                                                   // 1057\n        after: 0,                                                                                                     // 1058\n        status: 0                                                                                                     // 1059\n      },                                                                                                              // 1053\n      transform: null                                                                                                 // 1060\n    });                                                                                                               // 1051\n                                                                                                                      //\n    if (doc != null) {                                                                                                // 1064\n      if (options == null) {                                                                                          // 1508\n        options = {};                                                                                                 // 1065\n      }                                                                                                               // 1510\n                                                                                                                      //\n      if (options.repeats == null) {                                                                                  // 1511\n        options.repeats = 0;                                                                                          // 1066\n      }                                                                                                               // 1513\n                                                                                                                      //\n      if (options.repeats > this.forever) {                                                                           // 1067\n        options.repeats = this.forever;                                                                               // 1067\n      }                                                                                                               // 1516\n                                                                                                                      //\n      if (options.until == null) {                                                                                    // 1517\n        options.until = doc.repeatUntil;                                                                              // 1068\n      }                                                                                                               // 1519\n                                                                                                                      //\n      if (options.wait == null) {                                                                                     // 1520\n        options.wait = 0;                                                                                             // 1069\n      }                                                                                                               // 1522\n                                                                                                                      //\n      return this._rerun_job(doc, options.repeats, options.wait, options.until);                                      // 1070\n    }                                                                                                                 // 1524\n                                                                                                                      //\n    return false;                                                                                                     // 1072\n  };                                                                                                                  // 1039\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobDone = function (id, runId, result, options) {                            // 1528\n    var after, d, doc, ids, jobId, logObj, mods, n, next, num, ref, time, wait;                                       // 1075\n    check(id, Match.Where(_validId));                                                                                 // 1075\n    check(runId, Match.Where(_validId));                                                                              // 1076\n    check(result, Object);                                                                                            // 1077\n    check(options, Match.Optional({                                                                                   // 1078\n      repeatId: Match.Optional(Boolean),                                                                              // 1079\n      delayDeps: Match.Optional(Match.Where(_validIntGTEZero))                                                        // 1080\n    }));                                                                                                              // 1079\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1537\n      options = {                                                                                                     // 1082\n        repeatId: false                                                                                               // 1082\n      };                                                                                                              // 1082\n    }                                                                                                                 // 1541\n                                                                                                                      //\n    time = new Date();                                                                                                // 1083\n    doc = this.findOne({                                                                                              // 1084\n      _id: id,                                                                                                        // 1086\n      runId: runId,                                                                                                   // 1087\n      status: \"running\"                                                                                               // 1088\n    }, {                                                                                                              // 1085\n      fields: {                                                                                                       // 1091\n        log: 0,                                                                                                       // 1092\n        failures: 0,                                                                                                  // 1093\n        updated: 0,                                                                                                   // 1094\n        after: 0,                                                                                                     // 1095\n        status: 0                                                                                                     // 1096\n      },                                                                                                              // 1092\n      transform: null                                                                                                 // 1097\n    });                                                                                                               // 1090\n                                                                                                                      //\n    if (doc == null) {                                                                                                // 1100\n      if (!this.isSimulation) {                                                                                       // 1101\n        console.warn(\"Running job not found\", id, runId);                                                             // 1102\n      }                                                                                                               // 1560\n                                                                                                                      //\n      return false;                                                                                                   // 1103\n    }                                                                                                                 // 1562\n                                                                                                                      //\n    mods = {                                                                                                          // 1105\n      $set: {                                                                                                         // 1106\n        status: \"completed\",                                                                                          // 1107\n        result: result,                                                                                               // 1108\n        progress: {                                                                                                   // 1109\n          completed: doc.progress.total || 1,                                                                         // 1110\n          total: doc.progress.total || 1,                                                                             // 1111\n          percent: 100                                                                                                // 1112\n        },                                                                                                            // 1110\n        updated: time                                                                                                 // 1113\n      }                                                                                                               // 1107\n    };                                                                                                                // 1106\n                                                                                                                      //\n    if (logObj = this._logMessage.completed(runId)) {                                                                 // 1115\n      mods.$push = {                                                                                                  // 1116\n        log: logObj                                                                                                   // 1117\n      };                                                                                                              // 1117\n    }                                                                                                                 // 1579\n                                                                                                                      //\n    num = this.update({                                                                                               // 1119\n      _id: id,                                                                                                        // 1121\n      runId: runId,                                                                                                   // 1122\n      status: \"running\"                                                                                               // 1123\n    }, mods);                                                                                                         // 1120\n                                                                                                                      //\n    if (num === 1) {                                                                                                  // 1127\n      if (doc.repeats > 0) {                                                                                          // 1128\n        if (typeof doc.repeatWait === 'number') {                                                                     // 1129\n          if (doc.repeatUntil - doc.repeatWait >= time) {                                                             // 1130\n            jobId = this._rerun_job(doc);                                                                             // 1131\n          }                                                                                                           // 1129\n        } else {                                                                                                      // 1129\n          next = (ref = this.later) != null ? ref.schedule(doc.repeatWait).next(2) : void 0;                          // 1135\n                                                                                                                      //\n          if (next && next.length > 0) {                                                                              // 1136\n            d = new Date(next[0]);                                                                                    // 1137\n                                                                                                                      //\n            if (d - time > 500 || next.length > 1) {                                                                  // 1138\n              if (d - time <= 500) {                                                                                  // 1139\n                d = new Date(next[1]);                                                                                // 1140\n              }                                                                                                       // 1598\n                                                                                                                      //\n              wait = d - time;                                                                                        // 1141\n                                                                                                                      //\n              if (doc.repeatUntil - wait >= time) {                                                                   // 1142\n                jobId = this._rerun_job(doc, doc.repeats - 1, wait);                                                  // 1143\n              }                                                                                                       // 1138\n            }                                                                                                         // 1136\n          }                                                                                                           // 1129\n        }                                                                                                             // 1128\n      }                                                                                                               // 1606\n                                                                                                                      //\n      ids = this.find({                                                                                               // 1146\n        depends: {                                                                                                    // 1148\n          $all: [id]                                                                                                  // 1149\n        }                                                                                                             // 1149\n      }, {                                                                                                            // 1147\n        transform: null,                                                                                              // 1152\n        fields: {                                                                                                     // 1153\n          _id: 1                                                                                                      // 1154\n        }                                                                                                             // 1154\n      }).fetch().map(function (_this) {                                                                               // 1151\n        return function (d) {                                                                                         // 1617\n          return d._id;                                                                                               // 1618\n        };                                                                                                            // 1156\n      }(this));                                                                                                       // 1156\n                                                                                                                      //\n      if (ids.length > 0) {                                                                                           // 1158\n        mods = {                                                                                                      // 1160\n          $pull: {                                                                                                    // 1161\n            depends: id                                                                                               // 1162\n          },                                                                                                          // 1162\n          $push: {                                                                                                    // 1163\n            resolved: id                                                                                              // 1164\n          }                                                                                                           // 1164\n        };                                                                                                            // 1161\n                                                                                                                      //\n        if (options.delayDeps != null) {                                                                              // 1166\n          after = new Date(time.valueOf() + options.delayDeps);                                                       // 1167\n          mods.$max = {                                                                                               // 1168\n            after: after                                                                                              // 1169\n          };                                                                                                          // 1169\n        }                                                                                                             // 1635\n                                                                                                                      //\n        if (logObj = this._logMessage.resolved(id, runId)) {                                                          // 1171\n          mods.$push.log = logObj;                                                                                    // 1172\n        }                                                                                                             // 1638\n                                                                                                                      //\n        n = this.update({                                                                                             // 1174\n          _id: {                                                                                                      // 1176\n            $in: ids                                                                                                  // 1177\n          }                                                                                                           // 1177\n        }, mods, {                                                                                                    // 1175\n          multi: true                                                                                                 // 1181\n        });                                                                                                           // 1180\n                                                                                                                      //\n        if (n !== ids.length) {                                                                                       // 1184\n          console.warn(\"Not all dependent jobs were resolved \" + ids.length + \" > \" + n);                             // 1185\n        }                                                                                                             // 1648\n                                                                                                                      //\n        this._DDPMethod_jobReady(ids);                                                                                // 1187\n      }                                                                                                               // 1650\n                                                                                                                      //\n      if (options.repeatId && jobId != null) {                                                                        // 1188\n        return jobId;                                                                                                 // 1189\n      } else {                                                                                                        // 1188\n        return true;                                                                                                  // 1191\n      }                                                                                                               // 1127\n    } else {                                                                                                          // 1127\n      console.warn(\"jobDone failed\");                                                                                 // 1193\n    }                                                                                                                 // 1658\n                                                                                                                      //\n    return false;                                                                                                     // 1194\n  };                                                                                                                  // 1074\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobFail = function (id, runId, err, options) {                               // 1662\n    var after, doc, logObj, mods, newStatus, num, time;                                                               // 1197\n    check(id, Match.Where(_validId));                                                                                 // 1197\n    check(runId, Match.Where(_validId));                                                                              // 1198\n    check(err, Object);                                                                                               // 1199\n    check(options, Match.Optional({                                                                                   // 1200\n      fatal: Match.Optional(Boolean)                                                                                  // 1201\n    }));                                                                                                              // 1201\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1670\n      options = {};                                                                                                   // 1203\n    }                                                                                                                 // 1672\n                                                                                                                      //\n    if (options.fatal == null) {                                                                                      // 1673\n      options.fatal = false;                                                                                          // 1204\n    }                                                                                                                 // 1675\n                                                                                                                      //\n    time = new Date();                                                                                                // 1206\n    doc = this.findOne({                                                                                              // 1207\n      _id: id,                                                                                                        // 1209\n      runId: runId,                                                                                                   // 1210\n      status: \"running\"                                                                                               // 1211\n    }, {                                                                                                              // 1208\n      fields: {                                                                                                       // 1214\n        log: 0,                                                                                                       // 1215\n        failures: 0,                                                                                                  // 1216\n        progress: 0,                                                                                                  // 1217\n        updated: 0,                                                                                                   // 1218\n        after: 0,                                                                                                     // 1219\n        runId: 0,                                                                                                     // 1220\n        status: 0                                                                                                     // 1221\n      },                                                                                                              // 1215\n      transform: null                                                                                                 // 1222\n    });                                                                                                               // 1213\n                                                                                                                      //\n    if (doc == null) {                                                                                                // 1225\n      if (!this.isSimulation) {                                                                                       // 1226\n        console.warn(\"Running job not found\", id, runId);                                                             // 1227\n      }                                                                                                               // 1696\n                                                                                                                      //\n      return false;                                                                                                   // 1228\n    }                                                                                                                 // 1698\n                                                                                                                      //\n    after = function () {                                                                                             // 1230\n      switch (doc.retryBackoff) {                                                                                     // 1230\n        case 'exponential':                                                                                           // 1230\n          return new Date(time.valueOf() + doc.retryWait * Math.pow(2, doc.retried - 1));                             // 1702\n                                                                                                                      //\n        default:                                                                                                      // 1230\n          return new Date(time.valueOf() + doc.retryWait);                                                            // 1704\n      }                                                                                                               // 1230\n    }();                                                                                                              // 1706\n                                                                                                                      //\n    newStatus = !options.fatal && doc.retries > 0 && doc.retryUntil >= after ? \"waiting\" : \"failed\";                  // 1236\n    err.runId = runId;                                                                                                // 1240\n    mods = {                                                                                                          // 1242\n      $set: {                                                                                                         // 1243\n        status: newStatus,                                                                                            // 1244\n        runId: null,                                                                                                  // 1245\n        after: after,                                                                                                 // 1246\n        updated: time                                                                                                 // 1247\n      },                                                                                                              // 1244\n      $push: {                                                                                                        // 1248\n        failures: err                                                                                                 // 1249\n      }                                                                                                               // 1249\n    };                                                                                                                // 1243\n                                                                                                                      //\n    if (logObj = this._logMessage.failed(runId, newStatus === 'failed', err)) {                                       // 1252\n      mods.$push.log = logObj;                                                                                        // 1253\n    }                                                                                                                 // 1722\n                                                                                                                      //\n    num = this.update({                                                                                               // 1255\n      _id: id,                                                                                                        // 1257\n      runId: runId,                                                                                                   // 1258\n      status: \"running\"                                                                                               // 1259\n    }, mods);                                                                                                         // 1256\n                                                                                                                      //\n    if (newStatus === \"failed\" && num === 1) {                                                                        // 1263\n      this.find({                                                                                                     // 1265\n        depends: {                                                                                                    // 1267\n          $all: [id]                                                                                                  // 1268\n        }                                                                                                             // 1268\n      }, {                                                                                                            // 1266\n        transform: null                                                                                               // 1271\n      }).forEach(function (_this) {                                                                                   // 1270\n        return function (d) {                                                                                         // 1736\n          return _this._DDPMethod_jobCancel(d._id);                                                                   // 1737\n        };                                                                                                            // 1273\n      }(this));                                                                                                       // 1273\n    }                                                                                                                 // 1740\n                                                                                                                      //\n    if (num === 1) {                                                                                                  // 1274\n      return true;                                                                                                    // 1275\n    } else {                                                                                                          // 1274\n      console.warn(\"jobFail failed\");                                                                                 // 1277\n    }                                                                                                                 // 1745\n                                                                                                                      //\n    return false;                                                                                                     // 1278\n  };                                                                                                                  // 1196\n                                                                                                                      //\n  return JobCollectionBase;                                                                                           // 1749\n}(Mongo.Collection);                                                                                                  // 1751\n                                                                                                                      //\nshare.JobCollectionBase = JobCollectionBase;                                                                          // 1282\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/vsivsi_job-collection/src/client.coffee                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar bind = function (fn, me) {                                                                                        // 7\n  return function () {                                                                                                // 7\n    return fn.apply(me, arguments);                                                                                   // 7\n  };                                                                                                                  // 7\n},                                                                                                                    // 7\n    extend = function (child, parent) {                                                                               // 7\n  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                   // 3\n    if (hasProp.call(parent, key)) child[key] = parent[key];                                                          // 3\n  }                                                                                                                   // 3\n                                                                                                                      //\n  function ctor() {                                                                                                   // 3\n    this.constructor = child;                                                                                         // 3\n  }                                                                                                                   // 3\n                                                                                                                      //\n  ctor.prototype = parent.prototype;                                                                                  // 3\n  child.prototype = new ctor();                                                                                       // 3\n  child.__super__ = parent.prototype;                                                                                 // 3\n  return child;                                                                                                       // 3\n},                                                                                                                    // 3\n    hasProp = {}.hasOwnProperty;                                                                                      // 7\n                                                                                                                      //\nif (Meteor.isClient) {                                                                                                // 7\n  if (!Function.prototype.bind) {                                                                                     // 10\n    Function.prototype.bind = function (oThis) {                                                                      // 11\n      var aArgs, fBound, fNOP, fToBind;                                                                               // 12\n                                                                                                                      //\n      if (typeof this !== \"function\") {                                                                               // 12\n        throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");                  // 14\n      }                                                                                                               // 12\n                                                                                                                      //\n      aArgs = Array.prototype.slice.call(arguments, 1);                                                               // 16\n      fToBind = this;                                                                                                 // 17\n                                                                                                                      //\n      fNOP = function () {};                                                                                          // 18\n                                                                                                                      //\n      fBound = function () {                                                                                          // 19\n        var func;                                                                                                     // 20\n        func = this instanceof fNOP && oThis ? this : oThis;                                                          // 20\n        return fToBind.apply(func, aArgs.concat(Array.prototype.slice.call(arguments)));                              // 21\n      };                                                                                                              // 19\n                                                                                                                      //\n      fNOP.prototype = this.prototype;                                                                                // 23\n      fBound.prototype = new fNOP();                                                                                  // 24\n      return fBound;                                                                                                  // 25\n    };                                                                                                                // 11\n  }                                                                                                                   // 25\n                                                                                                                      //\n  JobCollection = function (superClass) {                                                                             // 30\n    extend(JobCollection, superClass);                                                                                // 27\n                                                                                                                      //\n    function JobCollection(root, options) {                                                                           // 32\n      if (root == null) {                                                                                             // 30\n        root = 'queue';                                                                                               // 32\n      }                                                                                                               // 32\n                                                                                                                      //\n      if (options == null) {                                                                                          // 33\n        options = {};                                                                                                 // 32\n      }                                                                                                               // 35\n                                                                                                                      //\n      this._toLog = bind(this._toLog, this);                                                                          // 36\n                                                                                                                      //\n      if (!(this instanceof JobCollection)) {                                                                         // 33\n        return new JobCollection(root, options);                                                                      // 34\n      }                                                                                                               // 39\n                                                                                                                      //\n      JobCollection.__super__.constructor.call(this, root, options);                                                  // 37\n                                                                                                                      //\n      this.logConsole = false;                                                                                        // 39\n      this.isSimulation = true;                                                                                       // 40\n                                                                                                                      //\n      if (options.connection == null) {                                                                               // 42\n        Meteor.methods(this._generateMethods());                                                                      // 43\n      } else {                                                                                                        // 42\n        options.connection.methods(this._generateMethods());                                                          // 45\n      }                                                                                                               // 47\n    }                                                                                                                 // 32\n                                                                                                                      //\n    JobCollection.prototype._toLog = function (userId, method, message) {                                             // 50\n      if (this.logConsole) {                                                                                          // 48\n        return console.log(new Date() + \", \" + userId + \", \" + method + \", \" + message + \"\\n\");                       // 52\n      }                                                                                                               // 53\n    };                                                                                                                // 47\n                                                                                                                      //\n    return JobCollection;                                                                                             // 56\n  }(share.JobCollectionBase);                                                                                         // 58\n}                                                                                                                     // 59\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['vsivsi:job-collection'] = {}, {\n  Job: Job,\n  JobCollection: JobCollection\n});\n\n})();\n","servePath":"/packages/vsivsi_job-collection.js","sourceMap":{"version":3,"sources":["/packages/vsivsi_job-collection/job/src/job_class.coffee","/job/src/job_class.coffee","/packages/vsivsi_job-collection/src/shared.coffee","/src/shared.coffee","/packages/vsivsi_job-collection/src/client.coffee","/src/client.coffee"],"names":["JobQueue","_clearInterval","_setImmediate","_setInterval","concatReduce","isBoolean","isFunction","isInteger","isNonEmptyString","isNonEmptyStringOrArrayOfNonEmptyStrings","methodCall","optionsHelp","reduceCallbacks","splitLongArray","slice","indexOf","item","i","l","length","root","method","params","cb","after","apply","name","ref","ref1","ref2","ref3","ret","Job","_ddp_apply","Error","_this","err","res","options","Array","arr","max","k","results","Math","ceil","push","num","reduce","init","cbCount","cbErr","cbRetVal","a","b","concat","floor","f","s","sa","len","args","func","arguments","call","Meteor","setTimeout","setImmediate","timeOut","setInterval","id","clearInterval","ref4","root1","type1","worker","type","ctor","prototype","child","result","Object","errorCallback","e","console","error","pollInterval","forever","concurrency","payload","prefetch","workTimeout","callbackStrict","_workers","_tasks","_taskNumber","_stoppingGetWork","_stoppingTasks","_interval","_getWorkOutstanding","paused","resume","_getWork","numJobsToGet","running","maxJobs","getWork","jobs","j","_process","bind","_only_once","fn","called","job","next","splice","shift","_taskId","_stopGetWork","callback","_waitForTasks","_failJobs","tasks","count","fail","_hard","r","_stop","_soft","keys","idle","full","pause","w","trigger","shutdown","level","quiet","warn","foreverDate","Date","jobPriorities","low","normal","medium","high","critical","jobRetryBackoffMethods","jobStatuses","jobLogLevels","jobStatusCancellable","jobStatusPausable","jobStatusRemovable","jobStatusRestartable","ddpMethods","ddpPermissionLevels","ddpMethodPermissions","_setDDPApply","collectionName","setDDP","ddp","collectionNames","Fiber","collName","close","subscribe","observe","fib","current","throwInto","run","doc","processJobs","makeJob","depFlag","getJob","getLog","getJobs","chunkOfIds","chunksOfIds","ids","myCb","retVal","d","len1","m","data","pauseJobs","resumeJobs","readyJobs","force","cancelJobs","antecedents","restartJobs","retries","dependents","removeJobs","startJobs","stopJobs","timeout","startJobServer","shutdownJobServer","rootVal","time","_root","_doc","runId","status","updated","created","priority","retry","repeat","progress","depends","log","_echo","message","info","_id","resolved","base","until","wait","backoff","repeatRetries","retryWait","retried","retryBackoff","retryUntil","repeats","schedule","schedules","exceptions","repeatWait","repeated","repeatUntil","delay","valueOf","echo","completed","total","percent","save","refresh","done","value","fatal","ready","cancel","restart","rerun","remove","defineProperties","get","set","module","exports","JobCollectionBase","_validId","_validIntGTEOne","_validIntGTEZero","_validJobDoc","_validLaterJSObj","_validLog","_validLogLevel","_validNumGTEOne","_validNumGTEZero","_validNumGTZero","_validProgress","_validRetryBackoff","_validStatus","extend","parent","key","hasProp","constructor","__super__","hasOwnProperty","v","Match","test","Number","String","OneOf","Mongo","Collection","ObjectID","Where","Optional","failures","Integer","expiresAfter","superClass","later","noCollectionSuffix","connection","_createLogEntry","_logMessage","previousJob","dependency","msg","jobDocPattern","allow","deny","promote","setLogStream","logConsole","dep","createJob","_methodWrapper","toLog","unblockDDPMethods","_toLog","_unblockDDPMethods","retval","user","userId","JSON","stringify","unblock","_generateMethods","baseMethodName","methodFunc","methodName","methodPrefix","methodsOut","_idsOfDeps","antsArray","dependsIds","dependsQuery","$elemMatch","$in","find","fields","transform","forEach","$or","_rerun_job","jobId","logObj","insert","_DDPMethod_jobReady","_checkDeps","dryRun","cancelled","depJob","deps","failed","foundIds","mods","n","removed","fetch","map","_DDPMethod_jobLog","$pull","$push","$each","update","_DDPMethod_jobCancel","_DDPMethod_startJobServer","check","isSimulation","stopped","clearTimeout","_DDPMethod_startJobs","_DDPMethod_shutdownJobServer","cursor","failedJobs","_DDPMethod_jobFail","logStream","end","_DDPMethod_stopJobs","_DDPMethod_getJob","docs","single","Boolean","getFailures","_private","scrub","_DDPMethod_getWork","foundDocs","_makeNewID","sort","limit","$set","$inc","$unset","multi","_DDPMethod_jobRemove","_DDPMethod_jobPause","_DDPMethod_jobResume","resumed","$ne","now","query","$lte","forced","$size","readied","cancelIds","depsCancelled","_DDPMethod_jobRestart","depsRestarted","restartIds","restarted","_DDPMethod_jobSave","nextDate","cancelRepeats","prev","resubmitted","submitted","_DDPMethod_jobProgress","findOne","_DDPMethod_jobRerun","_DDPMethod_jobDone","repeatId","delayDeps","$all","$max","newStatus","pow","share","me","isClient","Function","oThis","aArgs","fBound","fNOP","fToBind","TypeError","JobCollection","methods"],"mappings":"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AArN,IAAA,OAAM+F,cAAN,EAAsBzH,OAAtB;AAjDW;;ACkIb6N,oBAAkBrL,SAAlB,CD/EA8L,gBC+EA,GD/EkBA,gBC+ElB;AAEAT,oBAAkBrL,SAAlB,CDhFA+L,eCgFA,GDhFiBA,eCgFjB;AAEAV,oBAAkBrL,SAAlB,CDjFA6L,eCiFA,GDjFiBA,eCiFjB;AAEAR,oBAAkBrL,SAAlB,CDlFAwL,gBCkFA,GDlFkBA,gBCkFlB;AAEAH,oBAAkBrL,SAAlB,CDnFAuL,eCmFA,GDnFiBA,eCmFjB;AAEAF,oBAAkBrL,SAAlB,CDpFAkM,YCoFA,GDpFcA,YCoFd;AAEAb,oBAAkBrL,SAAlB,CDrFA4L,cCqFA,GDrFgBA,cCqFhB;AAEAP,oBAAkBrL,SAAlB,CDtFAiM,kBCsFA,GDtFoBA,kBCsFpB;AAEAZ,oBAAkBrL,SAAlB,CDvFAsL,QCuFA,GDvFUA,QCuFV;AAEAD,oBAAkBrL,SAAlB,CDxFA2L,SCwFA,GDxFWA,SCwFX;AAEAN,oBAAkBrL,SAAlB,CDzFAgM,cCyFA,GDzFgBA,cCyFhB;AAEAX,oBAAkBrL,SAAlB,CD1FAyL,YC0FA,GD1FcA,YC0Fd;AAEAJ,oBAAkBrL,SAAlB,CD1FAwE,YC0FA,GD1FctH,IAAIsH,YC0FlB;AAEA6G,oBAAkBrL,SAAlB,CD3FAgE,aC2FA,GD3Fe9G,IAAI8G,aC2FnB;AAEAqH,oBAAkBrL,SAAlB,CD5FAuE,WC4FA,GD5FarH,IAAIqH,WC4FjB;AAEA8G,oBAAkBrL,SAAlB,CD7FAyE,oBC6FA,GD7FsBvH,IAAIuH,oBC6F1B;AAEA4G,oBAAkBrL,SAAlB,CD9FA0E,iBC8FA,GD9FmBxH,IAAIwH,iBC8FvB;AAEA2G,oBAAkBrL,SAAlB,CD/FA2E,kBC+FA,GD/FoBzH,IAAIyH,kBC+FxB;AAEA0G,oBAAkBrL,SAAlB,CDhGA4E,oBCgGA,GDhGsB1H,IAAI0H,oBCgG1B;AAEAyG,oBAAkBrL,SAAlB,CDjGAS,OCiGA,GDjGSvD,IAAIuD,OCiGb;AAEA4K,oBAAkBrL,SAAlB,CDlGA8D,WCkGA,GDlGa5G,IAAI4G,WCkGjB;AAEAuH,oBAAkBrL,SAAlB,CDlG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","file":"/packages/vsivsi_job-collection.js","sourcesContent":["############################################################################\n#     Copyright (C) 2014-2017 by Vaughn Iverson\n#     meteor-job-class is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\n# Exports Job object\n\nmethodCall = (root, method, params, cb, after = ((ret) -> ret)) ->\n  apply = Job._ddp_apply?[root.root ? root] ? Job._ddp_apply\n  unless typeof apply is 'function'\n     throw new Error \"Job remote method call error, no valid invocation method found.\"\n  name = \"#{root.root ? root}_#{method}\"\n  if cb and typeof cb is 'function'\n    apply name, params, (err, res) =>\n      return cb err if err\n      cb null, after(res)\n  else\n    return after(apply name, params)\n\noptionsHelp = (options, cb) ->\n  # If cb isn't a function, it's assumed to be options...\n  if cb? and typeof cb isnt 'function'\n    options = cb\n    cb = undefined\n  else\n    unless (typeof options is 'object' and\n            options instanceof Array and\n            options.length < 2)\n      throw new Error 'options... in optionsHelp must be an Array with zero or one elements'\n    options = options?[0] ? {}\n  unless typeof options is 'object'\n    throw new Error 'in optionsHelp options not an object or bad callback'\n  return [options, cb]\n\nsplitLongArray = (arr, max) ->\n  throw new Error 'splitLongArray: bad params' unless arr instanceof Array and max > 0\n  arr[(i*max)...((i+1)*max)] for i in [0...Math.ceil(arr.length/max)]\n\n# This function soaks up num callbacks, by default returning the disjunction of Boolean results\n# or returning on first error.... Reduce function causes different reduce behavior, such as concatenation\nreduceCallbacks = (cb, num, reduce = ((a , b) -> (a or b)), init = false) ->\n  return undefined unless cb?\n  unless typeof cb is 'function' and num > 0 and typeof reduce is 'function'\n    throw new Error 'Bad params given to reduceCallbacks'\n  cbRetVal = init\n  cbCount = 0\n  cbErr = null\n  return (err, res) ->\n    unless cbErr\n      if err\n        cbErr = err\n        cb err\n      else\n        cbCount++\n        cbRetVal = reduce cbRetVal, res\n        if cbCount is num\n          cb null, cbRetVal\n        else if cbCount > num\n          throw new Error \"reduceCallbacks callback invoked more than requested #{num} times\"\n\nconcatReduce = (a, b) ->\n  a = [a] unless a instanceof Array\n  a.concat b\n\nisInteger = (i) -> typeof i is 'number' and Math.floor(i) is i\n\nisBoolean = (b) -> typeof b is 'boolean'\n\nisFunction = (f) -> typeof f is 'function'\n\nisNonEmptyString = (s) -> typeof s is 'string' and s.length > 0\n\nisNonEmptyStringOrArrayOfNonEmptyStrings = (sa) ->\n   isNonEmptyString(sa) or\n      sa instanceof Array and\n      sa.length isnt 0 and\n      (s for s in sa when isNonEmptyString(s)).length is sa.length\n\n# This smooths over the various different implementations...\n_setImmediate = (func, args...) ->\n  if Meteor?.setTimeout?\n    return Meteor.setTimeout func, 0, args...\n  else if setImmediate?\n    return setImmediate func, args...\n  else\n    # Browser fallback\n    return setTimeout func, 0, args...\n\n_setInterval = (func, timeOut, args...) ->\n  if Meteor?.setInterval?\n    return Meteor.setInterval func, timeOut, args...\n  else\n    # Browser / node.js fallback\n    return setInterval func, timeOut, args...\n\n_clearInterval = (id) ->\n  if Meteor?.clearInterval?\n    return Meteor.clearInterval id\n  else\n    # Browser / node.js fallback\n    return clearInterval id\n\n###################################################################\n\nclass JobQueue\n\n  constructor: (@root, @type, options..., @worker) ->\n    unless @ instanceof JobQueue\n      return new JobQueue @root, @type, options..., @worker\n    [options, @worker] = optionsHelp options, @worker\n\n    unless isNonEmptyString(@root)\n      throw new Error(\"JobQueue: Invalid root, must be nonempty string\")\n\n    unless isNonEmptyStringOrArrayOfNonEmptyStrings(@type)\n      throw new Error(\"JobQueue: Invalid type, must be nonempty string or array of nonempty strings\")\n\n    unless isFunction(@worker)\n      throw new Error(\"JobQueue: Invalid worker, must be a function\")\n\n    @errorCallback = options.errorCallback ? (e) ->\n      console.error \"JobQueue: \", e\n    unless isFunction(@errorCallback)\n      throw new Error(\"JobQueue: Invalid errorCallback, must be a function\")\n\n    @pollInterval =\n      if options.pollInterval? and not options.pollInterval\n        Job.forever\n      else if not (options.pollInterval? and isInteger(options.pollInterval))\n        5000  # ms\n      else\n        options.pollInterval\n    unless isInteger(@pollInterval) and @pollInterval >= 0\n      throw new Error \"JobQueue: Invalid pollInterval, must be a positive integer\"\n\n    @concurrency = options.concurrency ? 1\n    unless isInteger(@concurrency) and @concurrency >= 0\n      throw new Error \"JobQueue: Invalid concurrency, must be a positive integer\"\n\n    @payload = options.payload ? 1\n    unless isInteger(@payload) and @payload >= 0\n      throw new Error \"JobQueue: Invalid payload, must be a positive integer\"\n\n    @prefetch = options.prefetch ? 0\n    unless isInteger(@prefetch) and @prefetch >= 0\n      throw new Error \"JobQueue: Invalid prefetch, must be a positive integer\"\n\n    @workTimeout = options.workTimeout  # No default\n    if @workTimeout? and not (isInteger(@workTimeout) and @workTimeout >= 0)\n      throw new Error \"JobQueue: Invalid workTimeout, must be a positive integer\"\n\n    @callbackStrict = options.callbackStrict\n    if @callbackStrict? and not isBoolean(@callbackStrict)\n      throw new Error \"JobQueue: Invalid callbackStrict, must be a boolean\"\n\n    @_workers = {}\n    @_tasks = []\n    @_taskNumber = 0\n    @_stoppingGetWork = undefined\n    @_stoppingTasks = undefined\n    @_interval = null\n    @_getWorkOutstanding = false\n    @paused = true\n    @resume()\n\n  _getWork: () ->\n    # Don't reenter, or run when paused or stopping\n    unless @_getWorkOutstanding or @paused\n      numJobsToGet = @prefetch + @payload*(@concurrency - @running()) - @length()\n      if numJobsToGet > 0\n        @_getWorkOutstanding = true\n        options = { maxJobs: numJobsToGet }\n        options.workTimeout = @workTimeout if @workTimeout?\n        Job.getWork @root, @type, options, (err, jobs) =>\n          @_getWorkOutstanding = false\n          if err\n            @errorCallback new Error \"Received error from getWork(): #{err}\"\n          else if jobs? and jobs instanceof Array\n            if jobs.length > numJobsToGet\n              @errorCallback new Error \"getWork() returned jobs (#{jobs.length}) in excess of maxJobs (#{numJobsToGet})\"\n            for j in jobs\n              @_tasks.push j\n              _setImmediate @_process.bind(@) unless @_stoppingGetWork?\n            @_stoppingGetWork() if @_stoppingGetWork?\n          else\n            @errorCallback new Error \"Nonarray response from server from getWork()\"\n\n  _only_once: (fn) ->\n    called = false\n    return () =>\n      if called\n        @errorCallback new Error \"Worker callback called multiple times\"\n        if @callbackStrict\n          throw new Error \"JobQueue: worker callback was invoked multiple times\"\n      called = true\n      fn.apply @, arguments\n\n  _process: () ->\n    if not @paused and @running() < @concurrency and @length()\n      if @payload > 1\n        job = @_tasks.splice 0, @payload\n      else\n        job = @_tasks.shift()\n      job._taskId = \"Task_#{@_taskNumber++}\"\n      @_workers[job._taskId] = job\n      next = () =>\n        delete @_workers[job._taskId]\n        if @_stoppingTasks? and @running() is 0 and @length() is 0\n          @_stoppingTasks()\n        else\n          _setImmediate @_process.bind(@)\n          _setImmediate @_getWork.bind(@)\n      cb = @_only_once next\n      @worker job, cb\n\n  _stopGetWork: (callback) ->\n    _clearInterval @_interval\n    @_interval = null\n    if @_getWorkOutstanding\n      @_stoppingGetWork = callback\n    else\n      _setImmediate callback  # No Zalgo, thanks\n\n  _waitForTasks: (callback) ->\n    unless @running() is 0\n      @_stoppingTasks = callback\n    else\n      _setImmediate callback  # No Zalgo, thanks\n\n  _failJobs: (tasks, callback) ->\n    _setImmediate callback if tasks.length is 0  # No Zalgo, thanks\n    count = 0\n    for job in tasks\n      job.fail \"Worker shutdown\", (err, res) =>\n        count++\n        if count is tasks.length\n          callback()\n\n  _hard: (callback) ->\n    @paused = true\n    @_stopGetWork () =>\n      tasks = @_tasks\n      @_tasks = []\n      for i, r of @_workers\n        tasks = tasks.concat r\n      @_failJobs tasks, callback\n\n  _stop: (callback) ->\n    @paused = true\n    @_stopGetWork () =>\n      tasks = @_tasks\n      @_tasks = []\n      @_waitForTasks () =>\n        @_failJobs tasks, callback\n\n  _soft: (callback) ->\n    @_stopGetWork () =>\n      @_waitForTasks callback\n\n  length: () -> @_tasks.length\n\n  running: () -> Object.keys(@_workers).length\n\n  idle: () -> @length() + @running() is 0\n\n  full: () -> @running() is @concurrency\n\n  pause: () ->\n    return if @paused\n    unless @pollInterval >= Job.forever\n      _clearInterval @_interval\n      @_interval = null\n    @paused = true\n    @\n\n  resume: () ->\n    return unless @paused\n    @paused = false\n    _setImmediate @_getWork.bind(@)\n    unless @pollInterval >= Job.forever\n      @_interval = _setInterval @_getWork.bind(@), @pollInterval\n    for w in [1..@concurrency]\n      _setImmediate @_process.bind(@)\n    @\n\n  trigger: () ->\n    return if @paused\n    _setImmediate @_getWork.bind(@)\n    @\n\n  shutdown: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.level ?= 'normal'\n    options.quiet ?= false\n    unless cb?\n      console.warn \"using default shutdown callback!\" unless options.quiet\n      cb = () =>\n        console.warn \"Shutdown complete\"\n    switch options.level\n      when 'hard'\n        console.warn \"Shutting down hard\" unless options.quiet\n        @_hard cb\n      when 'soft'\n        console.warn \"Shutting down soft\" unless options.quiet\n        @_soft cb\n      else\n        console.warn \"Shutting down normally\" unless options.quiet\n        @_stop cb\n\n###################################################################\n\nclass Job\n\n  # This is the JS max int value = 2^53\n  @forever = 9007199254740992\n\n  # This is the maximum date value in JS\n  @foreverDate = new Date 8640000000000000\n\n  @jobPriorities:\n    low: 10\n    normal: 0\n    medium: -5\n    high: -10\n    critical: -15\n\n  @jobRetryBackoffMethods: [ 'constant', 'exponential' ]\n\n  @jobStatuses: [ 'waiting', 'paused', 'ready', 'running'\n                  'failed', 'cancelled', 'completed' ]\n\n  @jobLogLevels: [ 'info', 'success', 'warning', 'danger' ]\n\n  @jobStatusCancellable: [ 'running', 'ready', 'waiting', 'paused' ]\n  @jobStatusPausable: [ 'ready', 'waiting' ]\n  @jobStatusRemovable:   [ 'cancelled', 'completed', 'failed' ]\n  @jobStatusRestartable: [ 'cancelled', 'failed' ]\n\n  @ddpMethods = [ 'startJobs', 'stopJobs',  # Deprecated!\n                  'startJobServer', 'shutdownJobServer',\n                  'jobRemove', 'jobPause', 'jobResume', 'jobReady'\n                  'jobCancel', 'jobRestart', 'jobSave', 'jobRerun', 'getWork'\n                  'getJob', 'jobLog', 'jobProgress', 'jobDone', 'jobFail' ]\n\n  @ddpPermissionLevels = [ 'admin', 'manager', 'creator', 'worker' ]\n\n  # These are the four levels of the allow/deny permission heirarchy\n  @ddpMethodPermissions =\n    'startJobs': ['startJobs', 'admin']  # Deprecated!\n    'stopJobs': ['stopJobs', 'admin']    # Deprecated!\n    'startJobServer': ['startJobServer', 'admin']\n    'shutdownJobServer': ['shutdownJobServer', 'admin']\n    'jobRemove': ['jobRemove', 'admin', 'manager']\n    'jobPause': ['jobPause', 'admin', 'manager']\n    'jobResume': ['jobResume', 'admin', 'manager']\n    'jobCancel': ['jobCancel', 'admin', 'manager']\n    'jobReady': ['jobReady', 'admin', 'manager']\n    'jobRestart': ['jobRestart', 'admin', 'manager']\n    'jobSave': ['jobSave', 'admin', 'creator']\n    'jobRerun': ['jobRerun', 'admin', 'creator']\n    'getWork': ['getWork', 'admin', 'worker']\n    'getJob': ['getJob', 'admin', 'worker']\n    'jobLog': [ 'jobLog', 'admin', 'worker']\n    'jobProgress': ['jobProgress', 'admin', 'worker']\n    'jobDone': ['jobDone', 'admin', 'worker']\n    'jobFail': ['jobFail', 'admin', 'worker']\n\n  # Automatically work within Meteor, otherwise see @setDDP below\n  @_ddp_apply: undefined\n\n  # Class methods\n\n  @_setDDPApply: (apply, collectionName) ->\n    if typeof apply is 'function'\n      if typeof collectionName is 'string'\n         @_ddp_apply ?= {}\n         if typeof @_ddp_apply is 'function'\n            throw new Error \"Job.setDDP must specify a collection name each time if called more than once.\"\n         @_ddp_apply[collectionName] = apply\n      else unless @_ddp_apply\n         @_ddp_apply = apply\n      else\n         throw new Error \"Job.setDDP must specify a collection name each time if called more than once.\"\n    else\n      throw new Error \"Bad function in Job.setDDPApply()\"\n\n  # This needs to be called when not running in Meteor to use the local DDP connection.\n  @setDDP: (ddp = null, collectionNames = null, Fiber = null) ->\n    unless (typeof collectionNames is 'string') or (collectionNames instanceof Array)\n      # Handle optional collection string with Fiber present\n      Fiber = collectionNames\n      collectionNames = [ undefined ]\n    else if typeof collectionNames is 'string'\n      # If string, convert to array of strings\n      collectionNames = [ collectionNames ]\n    for collName in collectionNames\n      unless ddp? and ddp.close? and ddp.subscribe?\n        # Not the DDP npm package\n        if ddp is null and Meteor?.apply?\n          # Meteor local server/client\n          @_setDDPApply Meteor.apply, collName\n        else\n          # No other possibilities...\n          throw new Error \"Bad ddp object in Job.setDDP()\"\n      else unless ddp.observe?  # This is a Meteor DDP connection object\n        @_setDDPApply ddp.apply.bind(ddp), collName\n      else # This is the npm DDP package\n        unless Fiber?\n          @_setDDPApply ddp.call.bind(ddp), collName\n        else\n          # If Fibers in use under pure node.js,\n          # make sure to yield and throw errors when no callback\n          @_setDDPApply(((name, params, cb) ->\n            fib = Fiber.current\n            ddp.call name, params, (err, res) ->\n              if cb? and typeof cb is 'function'\n                cb err, res\n              else\n                if err\n                  fib.throwInto err\n                else\n                  fib.run res\n            if cb? and typeof cb is 'function'\n              return\n            else\n              return Fiber.yield()\n          ), collName)\n\n  # Creates a job object by reserving the next available job of\n  # the specified 'type' from the server queue root\n  # returns null if no such job exists\n  @getWork: (root, type, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    type = [type] if typeof type is 'string'\n    if options.workTimeout?\n      unless isInteger(options.workTimeout) and options.workTimeout > 0\n        throw new Error 'getWork: workTimeout must be a positive integer'\n    methodCall root, \"getWork\", [type, options], cb, (res) =>\n      jobs = (new Job(root, doc) for doc in res) or []\n      if options.maxJobs?\n        return jobs\n      else\n        return jobs[0]\n\n  # This is defined above\n  @processJobs: JobQueue\n\n  # Makes a job object from a job document\n  # This method is deprecated and will be removed\n  @makeJob: do () ->\n    depFlag = false\n    (root, doc) ->\n      unless depFlag\n        depFlag = true\n        console.warn \"Job.makeJob(root, jobDoc) has been deprecated and will be removed in a future release, use 'new Job(root, jobDoc)' instead.\"\n      new Job root, doc\n\n  # Creates a job object by id from the server queue root\n  # returns null if no such job exists\n  @getJob: (root, id, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.getLog ?= false\n    methodCall root, \"getJob\", [id, options], cb, (doc) =>\n      if doc\n        new Job root, doc\n      else\n        undefined\n\n  # Like the above, but takes an array of ids, returns array of jobs\n  @getJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.getLog ?= false\n    retVal = []\n    chunksOfIds = splitLongArray ids, 32\n    myCb = reduceCallbacks(cb, chunksOfIds.length, concatReduce, [])\n    for chunkOfIds in chunksOfIds\n      retVal = retVal.concat(methodCall root, \"getJob\", [chunkOfIds, options], myCb, (doc) =>\n        if doc\n          (new Job(root, d.type, d.data, d) for d in doc)\n        else\n          null)\n    return retVal\n\n  # Pause this job, only Ready and Waiting jobs can be paused\n  # Calling this toggles the paused state. Unpaused jobs go to waiting\n  @pauseJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobPause\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Resume this job, only Paused jobs can be resumed\n  # Calling this toggles the paused state. Unpaused jobs go to waiting\n  @resumeJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobResume\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Move waiting jobs to the ready state, jobs with dependencies will not\n  # be made ready unless force is used.\n  @readyJobs: (root, ids = [], options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.force ?= false\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    chunksOfIds = [[]] unless chunksOfIds.length > 0\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobReady\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Cancel this job if it is running or able to run (waiting, ready)\n  @cancelJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.antecedents ?= true\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobCancel\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Restart a failed or cancelled job\n  @restartJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.retries ?= 1\n    options.dependents ?= true\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobRestart\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Remove a job that is not able to run (completed, cancelled, failed) from the queue\n  @removeJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobRemove\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Start the job queue\n  # Deprecated!\n  @startJobs: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    methodCall root, \"startJobs\", [options], cb\n\n  # Stop the job queue, stop all running jobs\n  # Deprecated!\n  @stopJobs: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.timeout ?= 60*1000\n    methodCall root, \"stopJobs\", [options], cb\n\n  # Start the job queue\n  @startJobServer: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    methodCall root, \"startJobServer\", [options], cb\n\n  # Shutdown the job queue, stop all running jobs\n  @shutdownJobServer: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.timeout ?= 60*1000\n    methodCall root, \"shutdownJobServer\", [options], cb\n\n  # Job class instance constructor. When \"new Job(...)\" is run\n  constructor: (rootVal, type, data) ->\n    unless @ instanceof Job\n      return new Job rootVal, type, data\n\n    # Set the root value\n    @root = rootVal\n    # Keep a copy of the original root value, whatever type that is\n    @_root = rootVal\n\n    # Handle root as object with obj.root attribute\n    if @root?.root? and typeof @root.root is 'string'\n      @root = @_root.root\n\n    # Handle (root, doc) signature\n    if not data? and type?.data? and type?.type?\n      if type instanceof Job\n        return type\n\n      doc = type\n      data = doc.data\n      type = doc.type\n    else\n      doc = {}\n\n    unless typeof doc is 'object' and\n           typeof data is 'object' and\n           typeof type is 'string' and\n           typeof @root is 'string'\n      throw new Error \"new Job: bad parameter(s), #{@root} (#{typeof @root}), #{type} (#{typeof type}), #{data} (#{typeof data}), #{doc} (#{typeof doc})\"\n\n    else if doc.type? and doc.data? # This case is used to create local Job objects from DDP calls\n      @_doc = doc\n\n    else  # This is the normal \"create a new object\" case\n      time = new Date()\n      @_doc =\n        runId: null\n        type : type\n        data: data\n        status: 'waiting'\n        updated: time\n        created: time\n      @priority().retry().repeat().after().progress().depends().log(\"Constructed\")\n\n    return @\n\n  # Override point for methods that have an echo option\n  _echo: (message, level = null) ->\n    switch level\n      when 'danger' then console.error message\n      when 'warning' then console.warn message\n      when 'success' then console.log message\n      else console.info message\n    return\n\n  # Adds a run dependancy on one or more existing jobs to this job\n  # Calling with a falsy value resets the dependencies to []\n  depends: (jobs) ->\n    if jobs\n      if jobs instanceof Job\n        jobs = [ jobs ]\n      if jobs instanceof Array\n        depends = @_doc.depends\n        for j in jobs\n          unless j instanceof Job and j._doc._id?\n            throw new Error 'Each provided object must be a saved Job instance (with an _id)'\n          depends.push j._doc._id\n      else\n        throw new Error 'Bad input parameter: depends() accepts a falsy value, or Job or array of Jobs'\n    else\n      depends = []\n    @_doc.depends = depends\n    @_doc.resolved = []  # This is where prior depends go as they are satisfied\n    return @\n\n  # Set the run priority of this job\n  priority: (level = 0) ->\n    if typeof level is 'string'\n      priority = Job.jobPriorities[level]\n      unless priority?\n        throw new Error 'Invalid string priority level provided'\n    else if isInteger(level)\n      priority = level\n    else\n      throw new Error 'priority must be an integer or valid priority level'\n      priority = 0\n    @_doc.priority = priority\n    return @\n\n  # Sets the number of attempted runs of this job and\n  # the time to wait between successive attempts\n  # Default, do not retry\n  retry: (options = 0) ->\n    if isInteger(options) and options >= 0\n      options = { retries: options }\n    if typeof options isnt 'object'\n      throw new Error 'bad parameter: accepts either an integer >= 0 or an options object'\n    if options.retries?\n      unless isInteger(options.retries) and options.retries >= 0\n        throw new Error 'bad option: retries must be an integer >= 0'\n      options.retries++\n    else\n      options.retries = Job.forever\n    if options.until?\n      unless options.until instanceof Date\n        throw new Error 'bad option: until must be a Date object'\n    else\n      options.until = Job.foreverDate\n    if options.wait?\n      unless isInteger(options.wait) and options.wait >= 0\n        throw new Error 'bad option: wait must be an integer >= 0'\n    else\n      options.wait = 5*60*1000\n    if options.backoff?\n      unless options.backoff in Job.jobRetryBackoffMethods\n        throw new Error 'bad option: invalid retry backoff method'\n    else\n      options.backoff = 'constant'\n\n    @_doc.retries = options.retries\n    @_doc.repeatRetries = options.retries\n    @_doc.retryWait = options.wait\n    @_doc.retried ?= 0\n    @_doc.retryBackoff = options.backoff\n    @_doc.retryUntil = options.until\n    return @\n\n  # Sets the number of times to repeatedly run this job\n  # and the time to wait between successive runs\n  # Default: repeat every 5 minutes, forever...\n  repeat: (options = 0) ->\n    if isInteger(options) and options >= 0\n      options = { repeats: options }\n    if typeof options isnt 'object'\n      throw new Error 'bad parameter: accepts either an integer >= 0 or an options object'\n    if options.wait? and options.schedule?\n      throw new Error 'bad options: wait and schedule options are mutually exclusive'\n    if options.repeats?\n      unless isInteger(options.repeats) and options.repeats >= 0\n        throw new Error 'bad option: repeats must be an integer >= 0'\n    else\n      options.repeats = Job.forever\n    if options.until?\n      unless options.until instanceof Date\n        throw new Error 'bad option: until must be a Date object'\n    else\n      options.until = Job.foreverDate\n    if options.wait?\n      unless isInteger(options.wait) and options.wait >= 0\n        throw new Error 'bad option: wait must be an integer >= 0'\n    else\n      options.wait = 5*60*1000\n    if options.schedule?\n      unless typeof options.schedule is 'object'\n        throw new Error 'bad option, schedule option must be an object'\n      unless options.schedule?.schedules? and options.schedule.schedules instanceof Array\n        throw new Error 'bad option, schedule object requires a schedules attribute of type Array.'\n      if options.schedule.exceptions? and not (options.schedule.exceptions instanceof Array)\n        throw new Error 'bad option, schedule object exceptions attribute must be an Array'\n      options.wait =\n        schedules: options.schedule.schedules\n        exceptions: options.schedule.exceptions\n\n    @_doc.repeats = options.repeats\n    @_doc.repeatWait = options.wait\n    @_doc.repeated ?= 0\n    @_doc.repeatUntil = options.until\n    return @\n\n  # Sets the delay before this job can run after it is saved\n  delay: (wait = 0) ->\n    unless isInteger(wait) and wait >= 0\n      throw new Error 'Bad parameter, delay requires a non-negative integer.'\n    return @after new Date(new Date().valueOf() + wait)\n\n  # Sets a time after which this job can run once it is saved\n  after: (time = new Date(0)) ->\n    if typeof time is 'object' and time instanceof Date\n      after = time\n    else\n      throw new Error 'Bad parameter, after requires a valid Date object'\n    @_doc.after = after\n    return @\n\n  # Write a message to this job's log.\n  log: (message, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.level ?= 'info'\n    unless typeof message is 'string'\n      throw new Error 'Log message must be a string'\n    unless typeof options.level is 'string' and options.level in Job.jobLogLevels\n      throw new Error 'Log level options must be one of Job.jobLogLevels'\n    if options.echo?\n      if options.echo and Job.jobLogLevels.indexOf(options.level) >= Job.jobLogLevels.indexOf(options.echo)\n        @_echo \"LOG: #{options.level}, #{@_doc._id} #{@_doc.runId}: #{message}\", options.level\n      delete options.echo\n    if @_doc._id?\n      return methodCall @_root, \"jobLog\", [@_doc._id, @_doc.runId, message, options], cb\n    else  # Log can be called on an unsaved job\n      @_doc.log ?= []\n      @_doc.log.push { time: new Date(), runId: null, level: options.level, message: message }\n      if cb? and typeof cb is 'function'\n        _setImmediate cb, null, true   # DO NOT release Zalgo\n      return @  # Allow call chaining in this case\n\n  # Indicate progress made for a running job. This is important for\n  # long running jobs so the scheduler doesn't assume they are dead\n  progress: (completed = 0, total = 1, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if (typeof completed is 'number' and\n        typeof total is 'number' and\n        completed >= 0 and\n        total > 0 and\n        total >= completed)\n      progress =\n        completed: completed\n        total: total\n        percent: 100*completed/total\n      if options.echo\n        delete options.echo\n        @_echo \"PROGRESS: #{@_doc._id} #{@_doc.runId}: #{progress.completed} out of #{progress.total} (#{progress.percent}%)\"\n      if @_doc._id? and @_doc.runId?\n        return methodCall @_root, \"jobProgress\", [@_doc._id, @_doc.runId, completed, total, options], cb, (res) =>\n          if res\n            @_doc.progress = progress\n          res\n      else unless @_doc._id?\n        @_doc.progress = progress\n        if cb? and typeof cb is 'function'\n          _setImmediate cb, null, true   # DO NOT release Zalgo\n        return @\n    else\n      throw new Error \"job.progress: something is wrong with progress params: #{@id}, #{completed} out of #{total}\"\n    return null\n\n  # Save this job to the server job queue Collection it will also resave a modified job if the\n  # job is not running and hasn't completed.\n  save: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    return methodCall @_root, \"jobSave\", [@_doc, options], cb, (id) =>\n      if id\n        @_doc._id = id\n      id\n\n  # Refresh the local job state with the server job queue's version\n  refresh: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.getLog ?= false\n    if @_doc._id?\n      return methodCall @_root, \"getJob\", [@_doc._id, options], cb, (doc) =>\n        if doc?\n          @_doc = doc\n          @\n        else\n          false\n    else\n      throw new Error \"Can't call .refresh() on an unsaved job\"\n\n  # Indicate to the server that this run has successfully finished.\n  done: (result = {}, options..., cb) ->\n    if typeof result is 'function'\n      cb = result\n      result = {}\n    [options, cb] = optionsHelp options, cb\n    unless result? and typeof result is 'object'\n      result = { value: result }\n    if @_doc._id? and @_doc.runId?\n      return methodCall @_root, \"jobDone\", [@_doc._id, @_doc.runId, result, options], cb\n    else\n      throw new Error \"Can't call .done() on an unsaved or non-running job\"\n    return null\n\n  # Indicate to the server that this run has failed and provide an error message.\n  fail: (result = \"No error information provided\", options..., cb) ->\n    if typeof result is 'function'\n      cb = result\n      result = \"No error information provided\"\n    [options, cb] = optionsHelp options, cb\n    unless result? and typeof result is 'object'\n      result = { value: result }\n    options.fatal ?= false\n    if @_doc._id? and @_doc.runId?\n      return methodCall @_root, \"jobFail\", [@_doc._id, @_doc.runId, result, options], cb\n    else\n      throw new Error \"Can't call .fail() on an unsaved or non-running job\"\n    return null\n\n  # Pause this job, only Ready and Waiting jobs can be paused\n  pause: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if @_doc._id?\n      return methodCall @_root, \"jobPause\", [@_doc._id, options], cb\n    else\n      @_doc.status = 'paused'\n      if cb? and typeof cb is 'function'\n        _setImmediate cb, null, true  # DO NOT release Zalgo\n      return @\n    return null\n\n  # Resume this job, only Paused jobs can be resumed\n  # Resumed jobs go to waiting\n  resume: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if @_doc._id?\n      return methodCall @_root, \"jobResume\", [@_doc._id, options], cb\n    else\n      @_doc.status = 'waiting'\n      if cb? and typeof cb is 'function'\n        _setImmediate cb, null, true  # DO NOT release Zalgo\n      return @\n    return null\n\n  # Make a waiting job ready to run. Jobs with dependencies only when forced\n  ready: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.force ?= false\n    if @_doc._id?\n      return methodCall @_root, \"jobReady\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .ready() on an unsaved job\"\n    return null\n\n  # Cancel this job if it is running or able to run (waiting, ready)\n  cancel: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.antecedents ?= true\n    if @_doc._id?\n      return methodCall @_root, \"jobCancel\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .cancel() on an unsaved job\"\n    return null\n\n  # Restart a failed or cancelled job\n  restart: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.retries ?= 1\n    options.dependents ?= true\n    if @_doc._id?\n      return methodCall @_root, \"jobRestart\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .restart() on an unsaved job\"\n    return null\n\n  # Run a completed job again as a new job, essentially a manual repeat\n  rerun: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.repeats ?= 0\n    options.wait ?= @_doc.repeatWait\n    if @_doc._id?\n      return methodCall @_root, \"jobRerun\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .rerun() on an unsaved job\"\n    return null\n\n  # Remove a job that is not able to run (completed, cancelled, failed) from the queue\n  remove: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if @_doc._id?\n      return methodCall @_root, \"jobRemove\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .remove() on an unsaved job\"\n    return null\n\n    # Define convenience getters for some document properties\n  Object.defineProperties @prototype,\n    doc:\n      get: () -> @_doc\n      set: () -> console.warn \"Job.doc cannot be directly assigned.\"\n    type:\n      get: () -> @_doc.type\n      set: () -> console.warn \"Job.type cannot be directly assigned.\"\n    data:\n      get: () -> @_doc.data\n      set: () -> console.warn \"Job.data cannot be directly assigned.\"\n\n# Export Job in a npm package\nif module?.exports?\n  module.exports = Job\n","var JobQueue, _clearInterval, _setImmediate, _setInterval, concatReduce, isBoolean, isFunction, isInteger, isNonEmptyString, isNonEmptyStringOrArrayOfNonEmptyStrings, methodCall, optionsHelp, reduceCallbacks, splitLongArray,     \n  slice = [].slice,\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nmethodCall = function(root, method, params, cb, after) {\n  var apply, name, ref, ref1, ref2, ref3;\n  if (after == null) {\n    after = (function(ret) {\n      return ret;\n    });\n  }\n  apply = (ref = (ref1 = Job._ddp_apply) != null ? ref1[(ref2 = root.root) != null ? ref2 : root] : void 0) != null ? ref : Job._ddp_apply;\n  if (typeof apply !== 'function') {\n    throw new Error(\"Job remote method call error, no valid invocation method found.\");\n  }\n  name = ((ref3 = root.root) != null ? ref3 : root) + \"_\" + method;\n  if (cb && typeof cb === 'function') {\n    return apply(name, params, (function(_this) {\n      return function(err, res) {\n        if (err) {\n          return cb(err);\n        }\n        return cb(null, after(res));\n      };\n    })(this));\n  } else {\n    return after(apply(name, params));\n  }\n};\n\noptionsHelp = function(options, cb) {\n  var ref;\n  if ((cb != null) && typeof cb !== 'function') {\n    options = cb;\n    cb = void 0;\n  } else {\n    if (!(typeof options === 'object' && options instanceof Array && options.length < 2)) {\n      throw new Error('options... in optionsHelp must be an Array with zero or one elements');\n    }\n    options = (ref = options != null ? options[0] : void 0) != null ? ref : {};\n  }\n  if (typeof options !== 'object') {\n    throw new Error('in optionsHelp options not an object or bad callback');\n  }\n  return [options, cb];\n};\n\nsplitLongArray = function(arr, max) {\n  var i, k, ref, results;\n  if (!(arr instanceof Array && max > 0)) {\n    throw new Error('splitLongArray: bad params');\n  }\n  results = [];\n  for (i = k = 0, ref = Math.ceil(arr.length / max); 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n    results.push(arr.slice(i * max, (i + 1) * max));\n  }\n  return results;\n};\n\nreduceCallbacks = function(cb, num, reduce, init) {\n  var cbCount, cbErr, cbRetVal;\n  if (reduce == null) {\n    reduce = (function(a, b) {\n      return a || b;\n    });\n  }\n  if (init == null) {\n    init = false;\n  }\n  if (cb == null) {\n    return void 0;\n  }\n  if (!(typeof cb === 'function' && num > 0 && typeof reduce === 'function')) {\n    throw new Error('Bad params given to reduceCallbacks');\n  }\n  cbRetVal = init;\n  cbCount = 0;\n  cbErr = null;\n  return function(err, res) {\n    if (!cbErr) {\n      if (err) {\n        cbErr = err;\n        return cb(err);\n      } else {\n        cbCount++;\n        cbRetVal = reduce(cbRetVal, res);\n        if (cbCount === num) {\n          return cb(null, cbRetVal);\n        } else if (cbCount > num) {\n          throw new Error(\"reduceCallbacks callback invoked more than requested \" + num + \" times\");\n        }\n      }\n    }\n  };\n};\n\nconcatReduce = function(a, b) {\n  if (!(a instanceof Array)) {\n    a = [a];\n  }\n  return a.concat(b);\n};\n\nisInteger = function(i) {\n  return typeof i === 'number' && Math.floor(i) === i;\n};\n\nisBoolean = function(b) {\n  return typeof b === 'boolean';\n};\n\nisFunction = function(f) {\n  return typeof f === 'function';\n};\n\nisNonEmptyString = function(s) {\n  return typeof s === 'string' && s.length > 0;\n};\n\nisNonEmptyStringOrArrayOfNonEmptyStrings = function(sa) {\n  var s;\n  return isNonEmptyString(sa) || sa instanceof Array && sa.length !== 0 && ((function() {\n    var k, len, results;\n    results = [];\n    for (k = 0, len = sa.length; k < len; k++) {\n      s = sa[k];\n      if (isNonEmptyString(s)) {\n        results.push(s);\n      }\n    }\n    return results;\n  })()).length === sa.length;\n};\n\n_setImmediate = function() {\n  var args, func;\n  func = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.setTimeout : void 0) != null) {\n    return Meteor.setTimeout.apply(Meteor, [func, 0].concat(slice.call(args)));\n  } else if (typeof setImmediate !== \"undefined\" && setImmediate !== null) {\n    return setImmediate.apply(null, [func].concat(slice.call(args)));\n  } else {\n    return setTimeout.apply(null, [func, 0].concat(slice.call(args)));\n  }\n};\n\n_setInterval = function() {\n  var args, func, timeOut;\n  func = arguments[0], timeOut = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.setInterval : void 0) != null) {\n    return Meteor.setInterval.apply(Meteor, [func, timeOut].concat(slice.call(args)));\n  } else {\n    return setInterval.apply(null, [func, timeOut].concat(slice.call(args)));\n  }\n};\n\n_clearInterval = function(id) {\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.clearInterval : void 0) != null) {\n    return Meteor.clearInterval(id);\n  } else {\n    return clearInterval(id);\n  }\n};\n\nJobQueue = (function() {\n  function JobQueue() {\n    var k, options, ref, ref1, ref2, ref3, ref4, root1, type1, worker;\n    root1 = arguments[0], type1 = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), worker = arguments[k++];\n    this.root = root1;\n    this.type = type1;\n    this.worker = worker;\n    if (!(this instanceof JobQueue)) {\n      return (function(func, args, ctor) {\n        ctor.prototype = func.prototype;\n        var child = new ctor, result = func.apply(child, args);\n        return Object(result) === result ? result : child;\n      })(JobQueue, [this.root, this.type].concat(slice.call(options), [this.worker]), function(){});\n    }\n    ref = optionsHelp(options, this.worker), options = ref[0], this.worker = ref[1];\n    if (!isNonEmptyString(this.root)) {\n      throw new Error(\"JobQueue: Invalid root, must be nonempty string\");\n    }\n    if (!isNonEmptyStringOrArrayOfNonEmptyStrings(this.type)) {\n      throw new Error(\"JobQueue: Invalid type, must be nonempty string or array of nonempty strings\");\n    }\n    if (!isFunction(this.worker)) {\n      throw new Error(\"JobQueue: Invalid worker, must be a function\");\n    }\n    this.errorCallback = (ref1 = options.errorCallback) != null ? ref1 : function(e) {\n      return console.error(\"JobQueue: \", e);\n    };\n    if (!isFunction(this.errorCallback)) {\n      throw new Error(\"JobQueue: Invalid errorCallback, must be a function\");\n    }\n    this.pollInterval = (options.pollInterval != null) && !options.pollInterval ? Job.forever : !((options.pollInterval != null) && isInteger(options.pollInterval)) ? 5000 : options.pollInterval;\n    if (!(isInteger(this.pollInterval) && this.pollInterval >= 0)) {\n      throw new Error(\"JobQueue: Invalid pollInterval, must be a positive integer\");\n    }\n    this.concurrency = (ref2 = options.concurrency) != null ? ref2 : 1;\n    if (!(isInteger(this.concurrency) && this.concurrency >= 0)) {\n      throw new Error(\"JobQueue: Invalid concurrency, must be a positive integer\");\n    }\n    this.payload = (ref3 = options.payload) != null ? ref3 : 1;\n    if (!(isInteger(this.payload) && this.payload >= 0)) {\n      throw new Error(\"JobQueue: Invalid payload, must be a positive integer\");\n    }\n    this.prefetch = (ref4 = options.prefetch) != null ? ref4 : 0;\n    if (!(isInteger(this.prefetch) && this.prefetch >= 0)) {\n      throw new Error(\"JobQueue: Invalid prefetch, must be a positive integer\");\n    }\n    this.workTimeout = options.workTimeout;\n    if ((this.workTimeout != null) && !(isInteger(this.workTimeout) && this.workTimeout >= 0)) {\n      throw new Error(\"JobQueue: Invalid workTimeout, must be a positive integer\");\n    }\n    this.callbackStrict = options.callbackStrict;\n    if ((this.callbackStrict != null) && !isBoolean(this.callbackStrict)) {\n      throw new Error(\"JobQueue: Invalid callbackStrict, must be a boolean\");\n    }\n    this._workers = {};\n    this._tasks = [];\n    this._taskNumber = 0;\n    this._stoppingGetWork = void 0;\n    this._stoppingTasks = void 0;\n    this._interval = null;\n    this._getWorkOutstanding = false;\n    this.paused = true;\n    this.resume();\n  }\n\n  JobQueue.prototype._getWork = function() {\n    var numJobsToGet, options;\n    if (!(this._getWorkOutstanding || this.paused)) {\n      numJobsToGet = this.prefetch + this.payload * (this.concurrency - this.running()) - this.length();\n      if (numJobsToGet > 0) {\n        this._getWorkOutstanding = true;\n        options = {\n          maxJobs: numJobsToGet\n        };\n        if (this.workTimeout != null) {\n          options.workTimeout = this.workTimeout;\n        }\n        return Job.getWork(this.root, this.type, options, (function(_this) {\n          return function(err, jobs) {\n            var j, k, len;\n            _this._getWorkOutstanding = false;\n            if (err) {\n              return _this.errorCallback(new Error(\"Received error from getWork(): \" + err));\n            } else if ((jobs != null) && jobs instanceof Array) {\n              if (jobs.length > numJobsToGet) {\n                _this.errorCallback(new Error(\"getWork() returned jobs (\" + jobs.length + \") in excess of maxJobs (\" + numJobsToGet + \")\"));\n              }\n              for (k = 0, len = jobs.length; k < len; k++) {\n                j = jobs[k];\n                _this._tasks.push(j);\n                if (_this._stoppingGetWork == null) {\n                  _setImmediate(_this._process.bind(_this));\n                }\n              }\n              if (_this._stoppingGetWork != null) {\n                return _this._stoppingGetWork();\n              }\n            } else {\n              return _this.errorCallback(new Error(\"Nonarray response from server from getWork()\"));\n            }\n          };\n        })(this));\n      }\n    }\n  };\n\n  JobQueue.prototype._only_once = function(fn) {\n    var called;\n    called = false;\n    return (function(_this) {\n      return function() {\n        if (called) {\n          _this.errorCallback(new Error(\"Worker callback called multiple times\"));\n          if (_this.callbackStrict) {\n            throw new Error(\"JobQueue: worker callback was invoked multiple times\");\n          }\n        }\n        called = true;\n        return fn.apply(_this, arguments);\n      };\n    })(this);\n  };\n\n  JobQueue.prototype._process = function() {\n    var cb, job, next;\n    if (!this.paused && this.running() < this.concurrency && this.length()) {\n      if (this.payload > 1) {\n        job = this._tasks.splice(0, this.payload);\n      } else {\n        job = this._tasks.shift();\n      }\n      job._taskId = \"Task_\" + (this._taskNumber++);\n      this._workers[job._taskId] = job;\n      next = (function(_this) {\n        return function() {\n          delete _this._workers[job._taskId];\n          if ((_this._stoppingTasks != null) && _this.running() === 0 && _this.length() === 0) {\n            return _this._stoppingTasks();\n          } else {\n            _setImmediate(_this._process.bind(_this));\n            return _setImmediate(_this._getWork.bind(_this));\n          }\n        };\n      })(this);\n      cb = this._only_once(next);\n      return this.worker(job, cb);\n    }\n  };\n\n  JobQueue.prototype._stopGetWork = function(callback) {\n    _clearInterval(this._interval);\n    this._interval = null;\n    if (this._getWorkOutstanding) {\n      return this._stoppingGetWork = callback;\n    } else {\n      return _setImmediate(callback);\n    }\n  };\n\n  JobQueue.prototype._waitForTasks = function(callback) {\n    if (this.running() !== 0) {\n      return this._stoppingTasks = callback;\n    } else {\n      return _setImmediate(callback);\n    }\n  };\n\n  JobQueue.prototype._failJobs = function(tasks, callback) {\n    var count, job, k, len, results;\n    if (tasks.length === 0) {\n      _setImmediate(callback);\n    }\n    count = 0;\n    results = [];\n    for (k = 0, len = tasks.length; k < len; k++) {\n      job = tasks[k];\n      results.push(job.fail(\"Worker shutdown\", (function(_this) {\n        return function(err, res) {\n          count++;\n          if (count === tasks.length) {\n            return callback();\n          }\n        };\n      })(this)));\n    }\n    return results;\n  };\n\n  JobQueue.prototype._hard = function(callback) {\n    this.paused = true;\n    return this._stopGetWork((function(_this) {\n      return function() {\n        var i, r, ref, tasks;\n        tasks = _this._tasks;\n        _this._tasks = [];\n        ref = _this._workers;\n        for (i in ref) {\n          r = ref[i];\n          tasks = tasks.concat(r);\n        }\n        return _this._failJobs(tasks, callback);\n      };\n    })(this));\n  };\n\n  JobQueue.prototype._stop = function(callback) {\n    this.paused = true;\n    return this._stopGetWork((function(_this) {\n      return function() {\n        var tasks;\n        tasks = _this._tasks;\n        _this._tasks = [];\n        return _this._waitForTasks(function() {\n          return _this._failJobs(tasks, callback);\n        });\n      };\n    })(this));\n  };\n\n  JobQueue.prototype._soft = function(callback) {\n    return this._stopGetWork((function(_this) {\n      return function() {\n        return _this._waitForTasks(callback);\n      };\n    })(this));\n  };\n\n  JobQueue.prototype.length = function() {\n    return this._tasks.length;\n  };\n\n  JobQueue.prototype.running = function() {\n    return Object.keys(this._workers).length;\n  };\n\n  JobQueue.prototype.idle = function() {\n    return this.length() + this.running() === 0;\n  };\n\n  JobQueue.prototype.full = function() {\n    return this.running() === this.concurrency;\n  };\n\n  JobQueue.prototype.pause = function() {\n    if (this.paused) {\n      return;\n    }\n    if (!(this.pollInterval >= Job.forever)) {\n      _clearInterval(this._interval);\n      this._interval = null;\n    }\n    this.paused = true;\n    return this;\n  };\n\n  JobQueue.prototype.resume = function() {\n    var k, ref, w;\n    if (!this.paused) {\n      return;\n    }\n    this.paused = false;\n    _setImmediate(this._getWork.bind(this));\n    if (!(this.pollInterval >= Job.forever)) {\n      this._interval = _setInterval(this._getWork.bind(this), this.pollInterval);\n    }\n    for (w = k = 1, ref = this.concurrency; 1 <= ref ? k <= ref : k >= ref; w = 1 <= ref ? ++k : --k) {\n      _setImmediate(this._process.bind(this));\n    }\n    return this;\n  };\n\n  JobQueue.prototype.trigger = function() {\n    if (this.paused) {\n      return;\n    }\n    _setImmediate(this._getWork.bind(this));\n    return this;\n  };\n\n  JobQueue.prototype.shutdown = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.level == null) {\n      options.level = 'normal';\n    }\n    if (options.quiet == null) {\n      options.quiet = false;\n    }\n    if (cb == null) {\n      if (!options.quiet) {\n        console.warn(\"using default shutdown callback!\");\n      }\n      cb = (function(_this) {\n        return function() {\n          return console.warn(\"Shutdown complete\");\n        };\n      })(this);\n    }\n    switch (options.level) {\n      case 'hard':\n        if (!options.quiet) {\n          console.warn(\"Shutting down hard\");\n        }\n        return this._hard(cb);\n      case 'soft':\n        if (!options.quiet) {\n          console.warn(\"Shutting down soft\");\n        }\n        return this._soft(cb);\n      default:\n        if (!options.quiet) {\n          console.warn(\"Shutting down normally\");\n        }\n        return this._stop(cb);\n    }\n  };\n\n  return JobQueue;\n\n})();\n\nJob = (function() {\n  Job.forever = 9007199254740992;\n\n  Job.foreverDate = new Date(8640000000000000);\n\n  Job.jobPriorities = {\n    low: 10,\n    normal: 0,\n    medium: -5,\n    high: -10,\n    critical: -15\n  };\n\n  Job.jobRetryBackoffMethods = ['constant', 'exponential'];\n\n  Job.jobStatuses = ['waiting', 'paused', 'ready', 'running', 'failed', 'cancelled', 'completed'];\n\n  Job.jobLogLevels = ['info', 'success', 'warning', 'danger'];\n\n  Job.jobStatusCancellable = ['running', 'ready', 'waiting', 'paused'];\n\n  Job.jobStatusPausable = ['ready', 'waiting'];\n\n  Job.jobStatusRemovable = ['cancelled', 'completed', 'failed'];\n\n  Job.jobStatusRestartable = ['cancelled', 'failed'];\n\n  Job.ddpMethods = ['startJobs', 'stopJobs', 'startJobServer', 'shutdownJobServer', 'jobRemove', 'jobPause', 'jobResume', 'jobReady', 'jobCancel', 'jobRestart', 'jobSave', 'jobRerun', 'getWork', 'getJob', 'jobLog', 'jobProgress', 'jobDone', 'jobFail'];\n\n  Job.ddpPermissionLevels = ['admin', 'manager', 'creator', 'worker'];\n\n  Job.ddpMethodPermissions = {\n    'startJobs': ['startJobs', 'admin'],\n    'stopJobs': ['stopJobs', 'admin'],\n    'startJobServer': ['startJobServer', 'admin'],\n    'shutdownJobServer': ['shutdownJobServer', 'admin'],\n    'jobRemove': ['jobRemove', 'admin', 'manager'],\n    'jobPause': ['jobPause', 'admin', 'manager'],\n    'jobResume': ['jobResume', 'admin', 'manager'],\n    'jobCancel': ['jobCancel', 'admin', 'manager'],\n    'jobReady': ['jobReady', 'admin', 'manager'],\n    'jobRestart': ['jobRestart', 'admin', 'manager'],\n    'jobSave': ['jobSave', 'admin', 'creator'],\n    'jobRerun': ['jobRerun', 'admin', 'creator'],\n    'getWork': ['getWork', 'admin', 'worker'],\n    'getJob': ['getJob', 'admin', 'worker'],\n    'jobLog': ['jobLog', 'admin', 'worker'],\n    'jobProgress': ['jobProgress', 'admin', 'worker'],\n    'jobDone': ['jobDone', 'admin', 'worker'],\n    'jobFail': ['jobFail', 'admin', 'worker']\n  };\n\n  Job._ddp_apply = void 0;\n\n  Job._setDDPApply = function(apply, collectionName) {\n    if (typeof apply === 'function') {\n      if (typeof collectionName === 'string') {\n        if (this._ddp_apply == null) {\n          this._ddp_apply = {};\n        }\n        if (typeof this._ddp_apply === 'function') {\n          throw new Error(\"Job.setDDP must specify a collection name each time if called more than once.\");\n        }\n        return this._ddp_apply[collectionName] = apply;\n      } else if (!this._ddp_apply) {\n        return this._ddp_apply = apply;\n      } else {\n        throw new Error(\"Job.setDDP must specify a collection name each time if called more than once.\");\n      }\n    } else {\n      throw new Error(\"Bad function in Job.setDDPApply()\");\n    }\n  };\n\n  Job.setDDP = function(ddp, collectionNames, Fiber) {\n    var collName, k, len, results;\n    if (ddp == null) {\n      ddp = null;\n    }\n    if (collectionNames == null) {\n      collectionNames = null;\n    }\n    if (Fiber == null) {\n      Fiber = null;\n    }\n    if (!((typeof collectionNames === 'string') || (collectionNames instanceof Array))) {\n      Fiber = collectionNames;\n      collectionNames = [void 0];\n    } else if (typeof collectionNames === 'string') {\n      collectionNames = [collectionNames];\n    }\n    results = [];\n    for (k = 0, len = collectionNames.length; k < len; k++) {\n      collName = collectionNames[k];\n      if (!((ddp != null) && (ddp.close != null) && (ddp.subscribe != null))) {\n        if (ddp === null && ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.apply : void 0) != null)) {\n          results.push(this._setDDPApply(Meteor.apply, collName));\n        } else {\n          throw new Error(\"Bad ddp object in Job.setDDP()\");\n        }\n      } else if (ddp.observe == null) {\n        results.push(this._setDDPApply(ddp.apply.bind(ddp), collName));\n      } else {\n        if (Fiber == null) {\n          results.push(this._setDDPApply(ddp.call.bind(ddp), collName));\n        } else {\n          results.push(this._setDDPApply((function(name, params, cb) {\n            var fib;\n            fib = Fiber.current;\n            ddp.call(name, params, function(err, res) {\n              if ((cb != null) && typeof cb === 'function') {\n                return cb(err, res);\n              } else {\n                if (err) {\n                  return fib.throwInto(err);\n                } else {\n                  return fib.run(res);\n                }\n              }\n            });\n            if ((cb != null) && typeof cb === 'function') {\n\n            } else {\n              return Fiber[\"yield\"]();\n            }\n          }), collName));\n        }\n      }\n    }\n    return results;\n  };\n\n  Job.getWork = function() {\n    var cb, k, options, ref, root, type;\n    root = arguments[0], type = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (typeof type === 'string') {\n      type = [type];\n    }\n    if (options.workTimeout != null) {\n      if (!(isInteger(options.workTimeout) && options.workTimeout > 0)) {\n        throw new Error('getWork: workTimeout must be a positive integer');\n      }\n    }\n    return methodCall(root, \"getWork\", [type, options], cb, (function(_this) {\n      return function(res) {\n        var doc, jobs;\n        jobs = ((function() {\n          var l, len, results;\n          results = [];\n          for (l = 0, len = res.length; l < len; l++) {\n            doc = res[l];\n            results.push(new Job(root, doc));\n          }\n          return results;\n        })()) || [];\n        if (options.maxJobs != null) {\n          return jobs;\n        } else {\n          return jobs[0];\n        }\n      };\n    })(this));\n  };\n\n  Job.processJobs = JobQueue;\n\n  Job.makeJob = (function() {\n    var depFlag;\n    depFlag = false;\n    return function(root, doc) {\n      if (!depFlag) {\n        depFlag = true;\n        console.warn(\"Job.makeJob(root, jobDoc) has been deprecated and will be removed in a future release, use 'new Job(root, jobDoc)' instead.\");\n      }\n      return new Job(root, doc);\n    };\n  })();\n\n  Job.getJob = function() {\n    var cb, id, k, options, ref, root;\n    root = arguments[0], id = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.getLog == null) {\n      options.getLog = false;\n    }\n    return methodCall(root, \"getJob\", [id, options], cb, (function(_this) {\n      return function(doc) {\n        if (doc) {\n          return new Job(root, doc);\n        } else {\n          return void 0;\n        }\n      };\n    })(this));\n  };\n\n  Job.getJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.getLog == null) {\n      options.getLog = false;\n    }\n    retVal = [];\n    chunksOfIds = splitLongArray(ids, 32);\n    myCb = reduceCallbacks(cb, chunksOfIds.length, concatReduce, []);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = retVal.concat(methodCall(root, \"getJob\", [chunkOfIds, options], myCb, (function(_this) {\n        return function(doc) {\n          var d, len1, m, results;\n          if (doc) {\n            results = [];\n            for (m = 0, len1 = doc.length; m < len1; m++) {\n              d = doc[m];\n              results.push(new Job(root, d.type, d.data, d));\n            }\n            return results;\n          } else {\n            return null;\n          }\n        };\n      })(this)));\n    }\n    return retVal;\n  };\n\n  Job.pauseJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobPause\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.resumeJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobResume\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.readyJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    if (ids == null) {\n      ids = [];\n    }\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.force == null) {\n      options.force = false;\n    }\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    if (!(chunksOfIds.length > 0)) {\n      chunksOfIds = [[]];\n    }\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobReady\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.cancelJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.antecedents == null) {\n      options.antecedents = true;\n    }\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobCancel\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.restartJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.retries == null) {\n      options.retries = 1;\n    }\n    if (options.dependents == null) {\n      options.dependents = true;\n    }\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobRestart\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.removeJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobRemove\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.startJobs = function() {\n    var cb, k, options, ref, root;\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    return methodCall(root, \"startJobs\", [options], cb);\n  };\n\n  Job.stopJobs = function() {\n    var cb, k, options, ref, root;\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.timeout == null) {\n      options.timeout = 60 * 1000;\n    }\n    return methodCall(root, \"stopJobs\", [options], cb);\n  };\n\n  Job.startJobServer = function() {\n    var cb, k, options, ref, root;\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    return methodCall(root, \"startJobServer\", [options], cb);\n  };\n\n  Job.shutdownJobServer = function() {\n    var cb, k, options, ref, root;\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.timeout == null) {\n      options.timeout = 60 * 1000;\n    }\n    return methodCall(root, \"shutdownJobServer\", [options], cb);\n  };\n\n  function Job(rootVal, type, data) {\n    var doc, ref, time;\n    if (!(this instanceof Job)) {\n      return new Job(rootVal, type, data);\n    }\n    this.root = rootVal;\n    this._root = rootVal;\n    if ((((ref = this.root) != null ? ref.root : void 0) != null) && typeof this.root.root === 'string') {\n      this.root = this._root.root;\n    }\n    if ((data == null) && ((type != null ? type.data : void 0) != null) && ((type != null ? type.type : void 0) != null)) {\n      if (type instanceof Job) {\n        return type;\n      }\n      doc = type;\n      data = doc.data;\n      type = doc.type;\n    } else {\n      doc = {};\n    }\n    if (!(typeof doc === 'object' && typeof data === 'object' && typeof type === 'string' && typeof this.root === 'string')) {\n      throw new Error(\"new Job: bad parameter(s), \" + this.root + \" (\" + (typeof this.root) + \"), \" + type + \" (\" + (typeof type) + \"), \" + data + \" (\" + (typeof data) + \"), \" + doc + \" (\" + (typeof doc) + \")\");\n    } else if ((doc.type != null) && (doc.data != null)) {\n      this._doc = doc;\n    } else {\n      time = new Date();\n      this._doc = {\n        runId: null,\n        type: type,\n        data: data,\n        status: 'waiting',\n        updated: time,\n        created: time\n      };\n      this.priority().retry().repeat().after().progress().depends().log(\"Constructed\");\n    }\n    return this;\n  }\n\n  Job.prototype._echo = function(message, level) {\n    if (level == null) {\n      level = null;\n    }\n    switch (level) {\n      case 'danger':\n        console.error(message);\n        break;\n      case 'warning':\n        console.warn(message);\n        break;\n      case 'success':\n        console.log(message);\n        break;\n      default:\n        console.info(message);\n    }\n  };\n\n  Job.prototype.depends = function(jobs) {\n    var depends, j, k, len;\n    if (jobs) {\n      if (jobs instanceof Job) {\n        jobs = [jobs];\n      }\n      if (jobs instanceof Array) {\n        depends = this._doc.depends;\n        for (k = 0, len = jobs.length; k < len; k++) {\n          j = jobs[k];\n          if (!(j instanceof Job && (j._doc._id != null))) {\n            throw new Error('Each provided object must be a saved Job instance (with an _id)');\n          }\n          depends.push(j._doc._id);\n        }\n      } else {\n        throw new Error('Bad input parameter: depends() accepts a falsy value, or Job or array of Jobs');\n      }\n    } else {\n      depends = [];\n    }\n    this._doc.depends = depends;\n    this._doc.resolved = [];\n    return this;\n  };\n\n  Job.prototype.priority = function(level) {\n    var priority;\n    if (level == null) {\n      level = 0;\n    }\n    if (typeof level === 'string') {\n      priority = Job.jobPriorities[level];\n      if (priority == null) {\n        throw new Error('Invalid string priority level provided');\n      }\n    } else if (isInteger(level)) {\n      priority = level;\n    } else {\n      throw new Error('priority must be an integer or valid priority level');\n      priority = 0;\n    }\n    this._doc.priority = priority;\n    return this;\n  };\n\n  Job.prototype.retry = function(options) {\n    var base, ref;\n    if (options == null) {\n      options = 0;\n    }\n    if (isInteger(options) && options >= 0) {\n      options = {\n        retries: options\n      };\n    }\n    if (typeof options !== 'object') {\n      throw new Error('bad parameter: accepts either an integer >= 0 or an options object');\n    }\n    if (options.retries != null) {\n      if (!(isInteger(options.retries) && options.retries >= 0)) {\n        throw new Error('bad option: retries must be an integer >= 0');\n      }\n      options.retries++;\n    } else {\n      options.retries = Job.forever;\n    }\n    if (options.until != null) {\n      if (!(options.until instanceof Date)) {\n        throw new Error('bad option: until must be a Date object');\n      }\n    } else {\n      options.until = Job.foreverDate;\n    }\n    if (options.wait != null) {\n      if (!(isInteger(options.wait) && options.wait >= 0)) {\n        throw new Error('bad option: wait must be an integer >= 0');\n      }\n    } else {\n      options.wait = 5 * 60 * 1000;\n    }\n    if (options.backoff != null) {\n      if (ref = options.backoff, indexOf.call(Job.jobRetryBackoffMethods, ref) < 0) {\n        throw new Error('bad option: invalid retry backoff method');\n      }\n    } else {\n      options.backoff = 'constant';\n    }\n    this._doc.retries = options.retries;\n    this._doc.repeatRetries = options.retries;\n    this._doc.retryWait = options.wait;\n    if ((base = this._doc).retried == null) {\n      base.retried = 0;\n    }\n    this._doc.retryBackoff = options.backoff;\n    this._doc.retryUntil = options.until;\n    return this;\n  };\n\n  Job.prototype.repeat = function(options) {\n    var base, ref;\n    if (options == null) {\n      options = 0;\n    }\n    if (isInteger(options) && options >= 0) {\n      options = {\n        repeats: options\n      };\n    }\n    if (typeof options !== 'object') {\n      throw new Error('bad parameter: accepts either an integer >= 0 or an options object');\n    }\n    if ((options.wait != null) && (options.schedule != null)) {\n      throw new Error('bad options: wait and schedule options are mutually exclusive');\n    }\n    if (options.repeats != null) {\n      if (!(isInteger(options.repeats) && options.repeats >= 0)) {\n        throw new Error('bad option: repeats must be an integer >= 0');\n      }\n    } else {\n      options.repeats = Job.forever;\n    }\n    if (options.until != null) {\n      if (!(options.until instanceof Date)) {\n        throw new Error('bad option: until must be a Date object');\n      }\n    } else {\n      options.until = Job.foreverDate;\n    }\n    if (options.wait != null) {\n      if (!(isInteger(options.wait) && options.wait >= 0)) {\n        throw new Error('bad option: wait must be an integer >= 0');\n      }\n    } else {\n      options.wait = 5 * 60 * 1000;\n    }\n    if (options.schedule != null) {\n      if (typeof options.schedule !== 'object') {\n        throw new Error('bad option, schedule option must be an object');\n      }\n      if (!((((ref = options.schedule) != null ? ref.schedules : void 0) != null) && options.schedule.schedules instanceof Array)) {\n        throw new Error('bad option, schedule object requires a schedules attribute of type Array.');\n      }\n      if ((options.schedule.exceptions != null) && !(options.schedule.exceptions instanceof Array)) {\n        throw new Error('bad option, schedule object exceptions attribute must be an Array');\n      }\n      options.wait = {\n        schedules: options.schedule.schedules,\n        exceptions: options.schedule.exceptions\n      };\n    }\n    this._doc.repeats = options.repeats;\n    this._doc.repeatWait = options.wait;\n    if ((base = this._doc).repeated == null) {\n      base.repeated = 0;\n    }\n    this._doc.repeatUntil = options.until;\n    return this;\n  };\n\n  Job.prototype.delay = function(wait) {\n    if (wait == null) {\n      wait = 0;\n    }\n    if (!(isInteger(wait) && wait >= 0)) {\n      throw new Error('Bad parameter, delay requires a non-negative integer.');\n    }\n    return this.after(new Date(new Date().valueOf() + wait));\n  };\n\n  Job.prototype.after = function(time) {\n    var after;\n    if (time == null) {\n      time = new Date(0);\n    }\n    if (typeof time === 'object' && time instanceof Date) {\n      after = time;\n    } else {\n      throw new Error('Bad parameter, after requires a valid Date object');\n    }\n    this._doc.after = after;\n    return this;\n  };\n\n  Job.prototype.log = function() {\n    var base, cb, k, message, options, ref, ref1;\n    message = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.level == null) {\n      options.level = 'info';\n    }\n    if (typeof message !== 'string') {\n      throw new Error('Log message must be a string');\n    }\n    if (!(typeof options.level === 'string' && (ref1 = options.level, indexOf.call(Job.jobLogLevels, ref1) >= 0))) {\n      throw new Error('Log level options must be one of Job.jobLogLevels');\n    }\n    if (options.echo != null) {\n      if (options.echo && Job.jobLogLevels.indexOf(options.level) >= Job.jobLogLevels.indexOf(options.echo)) {\n        this._echo(\"LOG: \" + options.level + \", \" + this._doc._id + \" \" + this._doc.runId + \": \" + message, options.level);\n      }\n      delete options.echo;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobLog\", [this._doc._id, this._doc.runId, message, options], cb);\n    } else {\n      if ((base = this._doc).log == null) {\n        base.log = [];\n      }\n      this._doc.log.push({\n        time: new Date(),\n        runId: null,\n        level: options.level,\n        message: message\n      });\n      if ((cb != null) && typeof cb === 'function') {\n        _setImmediate(cb, null, true);\n      }\n      return this;\n    }\n  };\n\n  Job.prototype.progress = function() {\n    var cb, completed, k, options, progress, ref, total;\n    completed = arguments[0], total = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    if (completed == null) {\n      completed = 0;\n    }\n    if (total == null) {\n      total = 1;\n    }\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (typeof completed === 'number' && typeof total === 'number' && completed >= 0 && total > 0 && total >= completed) {\n      progress = {\n        completed: completed,\n        total: total,\n        percent: 100 * completed / total\n      };\n      if (options.echo) {\n        delete options.echo;\n        this._echo(\"PROGRESS: \" + this._doc._id + \" \" + this._doc.runId + \": \" + progress.completed + \" out of \" + progress.total + \" (\" + progress.percent + \"%)\");\n      }\n      if ((this._doc._id != null) && (this._doc.runId != null)) {\n        return methodCall(this._root, \"jobProgress\", [this._doc._id, this._doc.runId, completed, total, options], cb, (function(_this) {\n          return function(res) {\n            if (res) {\n              _this._doc.progress = progress;\n            }\n            return res;\n          };\n        })(this));\n      } else if (this._doc._id == null) {\n        this._doc.progress = progress;\n        if ((cb != null) && typeof cb === 'function') {\n          _setImmediate(cb, null, true);\n        }\n        return this;\n      }\n    } else {\n      throw new Error(\"job.progress: something is wrong with progress params: \" + this.id + \", \" + completed + \" out of \" + total);\n    }\n    return null;\n  };\n\n  Job.prototype.save = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    return methodCall(this._root, \"jobSave\", [this._doc, options], cb, (function(_this) {\n      return function(id) {\n        if (id) {\n          _this._doc._id = id;\n        }\n        return id;\n      };\n    })(this));\n  };\n\n  Job.prototype.refresh = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.getLog == null) {\n      options.getLog = false;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"getJob\", [this._doc._id, options], cb, (function(_this) {\n        return function(doc) {\n          if (doc != null) {\n            _this._doc = doc;\n            return _this;\n          } else {\n            return false;\n          }\n        };\n      })(this));\n    } else {\n      throw new Error(\"Can't call .refresh() on an unsaved job\");\n    }\n  };\n\n  Job.prototype.done = function() {\n    var cb, k, options, ref, result;\n    result = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    if (result == null) {\n      result = {};\n    }\n    if (typeof result === 'function') {\n      cb = result;\n      result = {};\n    }\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (!((result != null) && typeof result === 'object')) {\n      result = {\n        value: result\n      };\n    }\n    if ((this._doc._id != null) && (this._doc.runId != null)) {\n      return methodCall(this._root, \"jobDone\", [this._doc._id, this._doc.runId, result, options], cb);\n    } else {\n      throw new Error(\"Can't call .done() on an unsaved or non-running job\");\n    }\n    return null;\n  };\n\n  Job.prototype.fail = function() {\n    var cb, k, options, ref, result;\n    result = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    if (result == null) {\n      result = \"No error information provided\";\n    }\n    if (typeof result === 'function') {\n      cb = result;\n      result = \"No error information provided\";\n    }\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (!((result != null) && typeof result === 'object')) {\n      result = {\n        value: result\n      };\n    }\n    if (options.fatal == null) {\n      options.fatal = false;\n    }\n    if ((this._doc._id != null) && (this._doc.runId != null)) {\n      return methodCall(this._root, \"jobFail\", [this._doc._id, this._doc.runId, result, options], cb);\n    } else {\n      throw new Error(\"Can't call .fail() on an unsaved or non-running job\");\n    }\n    return null;\n  };\n\n  Job.prototype.pause = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobPause\", [this._doc._id, options], cb);\n    } else {\n      this._doc.status = 'paused';\n      if ((cb != null) && typeof cb === 'function') {\n        _setImmediate(cb, null, true);\n      }\n      return this;\n    }\n    return null;\n  };\n\n  Job.prototype.resume = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobResume\", [this._doc._id, options], cb);\n    } else {\n      this._doc.status = 'waiting';\n      if ((cb != null) && typeof cb === 'function') {\n        _setImmediate(cb, null, true);\n      }\n      return this;\n    }\n    return null;\n  };\n\n  Job.prototype.ready = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.force == null) {\n      options.force = false;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobReady\", [this._doc._id, options], cb);\n    } else {\n      throw new Error(\"Can't call .ready() on an unsaved job\");\n    }\n    return null;\n  };\n\n  Job.prototype.cancel = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.antecedents == null) {\n      options.antecedents = true;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobCancel\", [this._doc._id, options], cb);\n    } else {\n      throw new Error(\"Can't call .cancel() on an unsaved job\");\n    }\n    return null;\n  };\n\n  Job.prototype.restart = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.retries == null) {\n      options.retries = 1;\n    }\n    if (options.dependents == null) {\n      options.dependents = true;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobRestart\", [this._doc._id, options], cb);\n    } else {\n      throw new Error(\"Can't call .restart() on an unsaved job\");\n    }\n    return null;\n  };\n\n  Job.prototype.rerun = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.repeats == null) {\n      options.repeats = 0;\n    }\n    if (options.wait == null) {\n      options.wait = this._doc.repeatWait;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobRerun\", [this._doc._id, options], cb);\n    } else {\n      throw new Error(\"Can't call .rerun() on an unsaved job\");\n    }\n    return null;\n  };\n\n  Job.prototype.remove = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobRemove\", [this._doc._id, options], cb);\n    } else {\n      throw new Error(\"Can't call .remove() on an unsaved job\");\n    }\n    return null;\n  };\n\n  Object.defineProperties(Job.prototype, {\n    doc: {\n      get: function() {\n        return this._doc;\n      },\n      set: function() {\n        return console.warn(\"Job.doc cannot be directly assigned.\");\n      }\n    },\n    type: {\n      get: function() {\n        return this._doc.type;\n      },\n      set: function() {\n        return console.warn(\"Job.type cannot be directly assigned.\");\n      }\n    },\n    data: {\n      get: function() {\n        return this._doc.data;\n      },\n      set: function() {\n        return console.warn(\"Job.data cannot be directly assigned.\");\n      }\n    }\n  });\n\n  return Job;\n\n})();\n\nif ((typeof module !== \"undefined\" && module !== null ? module.exports : void 0) != null) {\n  module.exports = Job;\n}\n","############################################################################\n#     Copyright (C) 2014-2017 by Vaughn Iverson\n#     job-collection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\n_validNumGTEZero = (v) ->\n  Match.test(v, Number) and v >= 0.0\n\n_validNumGTZero = (v) ->\n  Match.test(v, Number) and v > 0.0\n\n_validNumGTEOne = (v) ->\n  Match.test(v, Number) and v >= 1.0\n\n_validIntGTEZero = (v) ->\n  _validNumGTEZero(v) and Math.floor(v) is v\n\n_validIntGTEOne = (v) ->\n  _validNumGTEOne(v) and Math.floor(v) is v\n\n_validStatus = (v) ->\n  Match.test(v, String) and v in Job.jobStatuses\n\n_validLogLevel = (v) ->\n  Match.test(v, String) and v in Job.jobLogLevels\n\n_validRetryBackoff = (v) ->\n  Match.test(v, String) and v in Job.jobRetryBackoffMethods\n\n_validId = (v) ->\n  Match.test(v, Match.OneOf(String, Mongo.Collection.ObjectID))\n\n_validLog = () ->\n  [{\n      time: Date\n      runId: Match.OneOf(Match.Where(_validId), null)\n      level: Match.Where(_validLogLevel)\n      message: String\n      data: Match.Optional Object\n  }]\n\n_validProgress = () ->\n  completed: Match.Where(_validNumGTEZero)\n  total: Match.Where(_validNumGTEZero)\n  percent: Match.Where(_validNumGTEZero)\n\n_validLaterJSObj = () ->\n  schedules: [ Object ]\n  exceptions: Match.Optional [ Object ]\n\n_validJobDoc = () ->\n  _id: Match.Optional Match.OneOf(Match.Where(_validId), null)\n  runId: Match.OneOf(Match.Where(_validId), null)\n  type: String\n  status: Match.Where _validStatus\n  data: Object\n  result: Match.Optional Object\n  failures: Match.Optional [ Object ]\n  priority: Match.Integer\n  depends: [ Match.Where(_validId) ]\n  resolved: [ Match.Where(_validId) ]\n  after: Date\n  updated: Date\n  workTimeout: Match.Optional Match.Where(_validIntGTEOne)\n  expiresAfter: Match.Optional Date\n  log: Match.Optional _validLog()\n  progress: _validProgress()\n  retries: Match.Where _validIntGTEZero\n  retried: Match.Where _validIntGTEZero\n  repeatRetries: Match.Optional Match.Where _validIntGTEZero\n  retryUntil: Date\n  retryWait: Match.Where _validIntGTEZero\n  retryBackoff: Match.Where _validRetryBackoff\n  repeats: Match.Where _validIntGTEZero\n  repeated: Match.Where _validIntGTEZero\n  repeatUntil: Date\n  repeatWait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj))\n  created: Date\n\nclass JobCollectionBase extends Mongo.Collection\n\n  constructor: (@root = 'queue', options = {}) ->\n    unless @ instanceof JobCollectionBase\n      return new JobCollectionBase(@root, options)\n\n    unless @ instanceof Mongo.Collection\n      throw new Meteor.Error 'The global definition of Mongo.Collection has changed since the job-collection package was loaded. Please ensure that any packages that redefine Mongo.Collection are loaded before job-collection.'\n\n    unless Mongo.Collection is Mongo.Collection.prototype.constructor\n      throw new Meteor.Error 'The global definition of Mongo.Collection has been patched by another package, and the prototype constructor has been left in an inconsistent state. Please see this link for a workaround: https://github.com/vsivsi/meteor-file-sample-app/issues/2#issuecomment-120780592'\n\n    @later = later  # later object, for convenience\n\n    options.noCollectionSuffix ?= false\n\n    collectionName = @root\n\n    unless options.noCollectionSuffix\n      collectionName += '.jobs'\n\n    # Remove non-standard options before\n    # calling Mongo.Collection constructor\n    delete options.noCollectionSuffix\n\n    Job.setDDP(options.connection, @root)\n\n    @_createLogEntry = (message = '', runId = null, level = 'info', time = new Date(), data = null) ->\n      l = { time: time, runId: runId, message: message, level: level }\n      return l\n\n    @_logMessage =\n      'readied': (() -> @_createLogEntry \"Promoted to ready\").bind(@)\n      'forced': ((id) -> @_createLogEntry \"Dependencies force resolved\", null, 'warning').bind(@)\n      'rerun': ((id, runId) -> @_createLogEntry \"Rerunning job\", null, 'info', new Date(), {previousJob:{id:id,runId:runId}}).bind(@)\n      'running': ((runId) -> @_createLogEntry \"Job Running\", runId).bind(@)\n      'paused': (() -> @_createLogEntry \"Job Paused\").bind(@)\n      'resumed': (() -> @_createLogEntry \"Job Resumed\").bind(@)\n      'cancelled': (() -> @_createLogEntry \"Job Cancelled\", null, 'warning').bind(@)\n      'restarted': (() -> @_createLogEntry \"Job Restarted\").bind(@)\n      'resubmitted': (() -> @_createLogEntry \"Job Resubmitted\").bind(@)\n      'submitted': (() -> @_createLogEntry \"Job Submitted\").bind(@)\n      'completed': ((runId) -> @_createLogEntry \"Job Completed\", runId, 'success').bind(@)\n      'resolved': ((id, runId) -> @_createLogEntry \"Dependency resolved\", null, 'info', new Date(), {dependency:{id:id,runId:runId}}).bind(@)\n      'failed': ((runId, fatal, err) ->\n        value = err.value\n        msg = \"Job Failed with#{if fatal then ' Fatal' else ''} Error#{if value? and typeof value is 'string' then ': ' + value else ''}.\"\n        level = if fatal then 'danger' else 'warning'\n        @_createLogEntry msg, runId, level).bind(@)\n\n    # Call super's constructor\n    super collectionName, options\n\n  _validNumGTEZero: _validNumGTEZero\n  _validNumGTZero: _validNumGTZero\n  _validNumGTEOne: _validNumGTEOne\n  _validIntGTEZero: _validIntGTEZero\n  _validIntGTEOne: _validIntGTEOne\n  _validStatus: _validStatus\n  _validLogLevel: _validLogLevel\n  _validRetryBackoff: _validRetryBackoff\n  _validId: _validId\n  _validLog: _validLog\n  _validProgress: _validProgress\n  _validJobDoc: _validJobDoc\n\n  jobLogLevels: Job.jobLogLevels\n  jobPriorities: Job.jobPriorities\n  jobStatuses: Job.jobStatuses\n  jobStatusCancellable: Job.jobStatusCancellable\n  jobStatusPausable: Job.jobStatusPausable\n  jobStatusRemovable: Job.jobStatusRemovable\n  jobStatusRestartable: Job.jobStatusRestartable\n  forever: Job.forever\n  foreverDate: Job.foreverDate\n\n  ddpMethods: Job.ddpMethods\n  ddpPermissionLevels: Job.ddpPermissionLevels\n  ddpMethodPermissions: Job.ddpMethodPermissions\n\n  processJobs: (params...) -> new Job.processJobs @root, params...\n  getJob: (params...) -> Job.getJob @root, params...\n  getWork: (params...) -> Job.getWork @root, params...\n  getJobs: (params...) -> Job.getJobs @root, params...\n  readyJobs: (params...) -> Job.readyJobs @root, params...\n  cancelJobs: (params...) -> Job.cancelJobs @root, params...\n  pauseJobs: (params...) -> Job.pauseJobs @root, params...\n  resumeJobs: (params...) -> Job.resumeJobs @root, params...\n  restartJobs: (params...) -> Job.restartJobs @root, params...\n  removeJobs: (params...) -> Job.removeJobs @root, params...\n\n  setDDP: (params...) -> Job.setDDP params...\n\n  startJobServer: (params...) -> Job.startJobServer @root, params...\n  shutdownJobServer: (params...) -> Job.shutdownJobServer @root, params...\n\n  # These are deprecated and will be removed\n  startJobs: (params...) -> Job.startJobs @root, params...\n  stopJobs: (params...) -> Job.stopJobs @root, params...\n\n  jobDocPattern: _validJobDoc()\n\n  # Warning Stubs for server-only calls\n  allow: () -> throw new Error \"Server-only function jc.allow() invoked on client.\"\n  deny: () -> throw new Error \"Server-only function jc.deny() invoked on client.\"\n  promote: () -> throw new Error \"Server-only function jc.promote() invoked on client.\"\n  setLogStream: () -> throw new Error \"Server-only function jc.setLogStream() invoked on client.\"\n\n  # Warning Stubs for client-only calls\n  logConsole: () -> throw new Error \"Client-only function jc.logConsole() invoked on server.\"\n\n  # Deprecated. Remove in next major version\n  makeJob: do () ->\n    dep = false\n    (params...) ->\n      unless dep\n        dep = true\n        console.warn \"WARNING: jc.makeJob() has been deprecated. Use new Job(jc, doc) instead.\"\n      new Job @root, params...\n\n  # Deprecated. Remove in next major version\n  createJob: do () ->\n    dep = false\n    (params...) ->\n      unless dep\n        dep = true\n        console.warn \"WARNING: jc.createJob() has been deprecated. Use new Job(jc, type, data) instead.\"\n      new Job @root, params...\n\n  _methodWrapper: (method, func) ->\n    toLog = @_toLog\n    unblockDDPMethods = @_unblockDDPMethods ? false\n    # Return the wrapper function that the Meteor method will actually invoke\n    return (params...) ->\n      user = this.userId ? \"[UNAUTHENTICATED]\"\n      toLog user, method, \"params: \" + JSON.stringify(params)\n      this.unblock() if unblockDDPMethods\n      retval = func(params...)\n      toLog user, method, \"returned: \" + JSON.stringify(retval)\n      return retval\n\n  _generateMethods: () ->\n    methodsOut = {}\n    methodPrefix = '_DDPMethod_'\n    for methodName, methodFunc of @ when methodName[0...methodPrefix.length] is methodPrefix\n      baseMethodName = methodName[methodPrefix.length..]\n      methodsOut[\"#{@root}_#{baseMethodName}\"] = @_methodWrapper(baseMethodName, methodFunc.bind(@))\n    return methodsOut\n\n  _idsOfDeps: (ids, antecedents, dependents, jobStatuses) ->\n    # Cancel the entire tree of antecedents and/or dependents\n    # Dependents: jobs that list one of the ids in their depends list\n    # Antecedents: jobs with an id listed in the depends list of one of the jobs in ids\n    dependsQuery = []\n    dependsIds = []\n    if dependents\n      dependsQuery.push\n        depends:\n          $elemMatch:\n            $in: ids\n    if antecedents\n      antsArray = []\n      @find(\n        {\n          _id:\n            $in: ids\n        }\n        {\n          fields:\n            depends: 1\n          transform: null\n        }\n      ).forEach (d) -> antsArray.push(i) for i in d.depends unless i in antsArray\n      if antsArray.length > 0\n        dependsQuery.push\n          _id:\n            $in: antsArray\n    if dependsQuery.length > 0\n      @find(\n        {\n          status:\n            $in: jobStatuses\n          $or: dependsQuery\n        }\n        {\n          fields:\n            _id: 1\n          transform: null\n        }\n      ).forEach (d) ->\n        dependsIds.push d._id unless d._id in dependsIds\n    return dependsIds\n\n  _rerun_job: (doc, repeats = doc.repeats - 1, wait = doc.repeatWait, repeatUntil = doc.repeatUntil) ->\n    # Repeat? if so, make a new job from the old one\n    id = doc._id\n    runId = doc.runId\n    time = new Date()\n    delete doc._id\n    delete doc.result\n    delete doc.failures\n    delete doc.expiresAfter\n    delete doc.workTimeout\n    doc.runId = null\n    doc.status = \"waiting\"\n    doc.repeatRetries = if doc.repeatRetries? then doc.repeatRetries else doc.retries + doc.retried\n    doc.retries = doc.repeatRetries\n    doc.retries = @forever if doc.retries > @forever\n    doc.retryUntil = repeatUntil\n    doc.retried = 0\n    doc.repeats = repeats\n    doc.repeats = @forever if doc.repeats > @forever\n    doc.repeatUntil = repeatUntil\n    doc.repeated = doc.repeated + 1\n    doc.updated = time\n    doc.created = time\n    doc.progress =\n      completed: 0\n      total: 1\n      percent: 0\n    if logObj = @_logMessage.rerun id, runId\n      doc.log = [logObj]\n    else\n      doc.log = []\n\n    doc.after = new Date(time.valueOf() + wait)\n    if jobId = @insert doc\n      @_DDPMethod_jobReady jobId\n      return jobId\n    else\n      console.warn \"Job rerun/repeat failed to reschedule!\", id, runId\n    return null\n\n  _checkDeps: (job, dryRun = true) ->\n    cancel = false\n    resolved = []\n    failed = []\n    cancelled = []\n    removed = []\n    log = []\n    if job.depends.length > 0\n      deps = @find({_id: { $in: job.depends }},{ fields: { _id: 1, runId: 1, status: 1 } }).fetch()\n\n      if deps.length isnt job.depends.length\n        foundIds = deps.map (d) -> d._id\n        for j in job.depends when not (j in foundIds)\n          @_DDPMethod_jobLog job._id, null, \"Antecedent job #{j} missing at save\" unless dryRun\n          removed.push j\n        cancel = true\n\n      for depJob in deps\n        unless depJob.status in @jobStatusCancellable\n          switch depJob.status\n            when \"completed\"\n              resolved.push depJob._id\n              log.push @_logMessage.resolved depJob._id, depJob.runId\n            when \"failed\"\n              cancel = true\n              failed.push depJob._id\n              @_DDPMethod_jobLog job._id, null, \"Antecedent job failed before save\" unless dryRun\n            when \"cancelled\"\n              cancel = true\n              cancelled.push depJob._id\n              @_DDPMethod_jobLog job._id, null, \"Antecedent job cancelled before save\" unless dryRun\n            else  # Unknown status\n              throw new Meteor.Error \"Unknown status in jobSave Dependency check\"\n\n      unless resolved.length is 0 or dryRun\n        mods =\n          $pull:\n            depends:\n              $in: resolved\n          $push:\n            resolved:\n              $each: resolved\n            log:\n              $each: log\n\n        n = @update(\n          {\n            _id: job._id\n            status: 'waiting'\n          }\n          mods\n        )\n\n        unless n\n          console.warn \"Update for job #{job._id} during dependency check failed.\"\n\n      if cancel and not dryRun\n        @_DDPMethod_jobCancel job._id\n        return false\n\n    if dryRun\n      if cancel or resolved.length > 0\n        return {\n          jobId: job._id\n          resolved: resolved\n          failed: failed\n          cancelled: cancelled\n          removed: removed\n        }\n      else\n        return false\n    else\n      return true\n\n  _DDPMethod_startJobServer: (options) ->\n    check options, Match.Optional {}\n    options ?= {}\n    # The client can't actually do this, so skip it\n    unless @isSimulation\n      Meteor.clearTimeout(@stopped) if @stopped and @stopped isnt true\n      @stopped = false\n    return true\n\n  _DDPMethod_startJobs: do () =>\n    depFlag = false\n    (options) ->\n      unless depFlag\n        depFlag = true\n        console.warn \"Deprecation Warning: jc.startJobs() has been renamed to jc.startJobServer()\"\n      return @_DDPMethod_startJobServer options\n\n  _DDPMethod_shutdownJobServer: (options) ->\n    check options, Match.Optional\n      timeout: Match.Optional(Match.Where _validIntGTEOne)\n    options ?= {}\n    options.timeout ?= 60*1000\n\n    # The client can't actually do any of this, so skip it\n    unless @isSimulation\n      Meteor.clearTimeout(@stopped) if @stopped and @stopped isnt true\n      @stopped = Meteor.setTimeout(\n        () =>\n          cursor = @find(\n            {\n              status: 'running'\n            },\n            {\n              transform: null\n            }\n          )\n          failedJobs = cursor.count()\n          console.warn \"Failing #{failedJobs} jobs on queue stop.\" if failedJobs isnt 0\n          cursor.forEach (d) => @_DDPMethod_jobFail d._id, d.runId, \"Running at Job Server shutdown.\"\n          if @logStream? # Shutting down closes the logStream!\n            @logStream.end()\n            @logStream = null\n        options.timeout\n      )\n    return true\n\n  _DDPMethod_stopJobs: do () =>\n    depFlag = false\n    (options) ->\n      unless depFlag\n        depFlag = true\n        console.warn \"Deprecation Warning: jc.stopJobs() has been renamed to jc.shutdownJobServer()\"\n      return @_DDPMethod_shutdownJobServer options\n\n  _DDPMethod_getJob: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      getLog: Match.Optional Boolean\n      getFailures: Match.Optional Boolean\n    options ?= {}\n    options.getLog ?= false\n    options.getFailures ?= false\n    single = false\n    if _validId(ids)\n      ids = [ids]\n      single = true\n    return null if ids.length is 0\n    fields = {_private:0}\n    fields.log = 0 if !options.getLog\n    fields.failures = 0 if !options.getFailures\n    docs = @find(\n      {\n        _id:\n          $in: ids\n      }\n      {\n        fields: fields\n        transform: null\n      }\n    ).fetch()\n    if docs?.length\n      if @scrub?\n        docs = (@scrub d for d in docs)\n      check docs, [_validJobDoc()]\n      if single\n        return docs[0]\n      else\n        return docs\n    return null\n\n  _DDPMethod_getWork: (type, options) ->\n    check type, Match.OneOf String, [ String ]\n    check options, Match.Optional\n      maxJobs: Match.Optional(Match.Where _validIntGTEOne)\n      workTimeout: Match.Optional(Match.Where _validIntGTEOne)\n\n    # Don't simulate getWork!\n    if @isSimulation\n      return\n\n    options ?= {}\n    options.maxJobs ?= 1\n    # Don't put out any more jobs while shutting down\n    if @stopped\n      return []\n\n    # Support string types or arrays of string types\n    if typeof type is 'string'\n      type = [ type ]\n    time = new Date()\n    docs = []\n    runId = @_makeNewID() # This is meteor internal, but it will fail hard if it goes away.\n\n    while docs.length < options.maxJobs\n\n      ids = @find(\n        {\n          type:\n            $in: type\n          status: 'ready'\n          runId: null\n        }\n        {\n          sort:\n            priority: 1\n            retryUntil: 1\n            after: 1\n          limit: options.maxJobs - docs.length # never ask for more than is needed\n          fields:\n            _id: 1\n          transform: null\n        }).map (d) -> d._id\n\n      unless ids?.length > 0\n        break  # Don't keep looping when there's no available work\n\n      mods =\n        $set:\n          status: 'running'\n          runId: runId\n          updated: time\n        $inc:\n          retries: -1\n          retried: 1\n\n      if logObj = @_logMessage.running runId\n        mods.$push =\n          log: logObj\n\n      if options.workTimeout?\n        mods.$set.workTimeout = options.workTimeout\n        mods.$set.expiresAfter = new Date(time.valueOf() + options.workTimeout)\n      else\n        mods.$unset ?= {}\n        mods.$unset.workTimeout = \"\"\n        mods.$unset.expiresAfter = \"\"\n\n      num = @update(\n        {\n          _id:\n            $in: ids\n          status: 'ready'\n          runId: null\n        }\n        mods\n        {\n          multi: true\n        }\n      )\n\n      if num > 0\n        foundDocs = @find(\n          {\n            _id:\n              $in: ids\n            runId: runId\n          }\n          {\n            fields:\n              log: 0\n              failures: 0\n              _private: 0\n            transform: null\n          }\n        ).fetch()\n\n        if foundDocs?.length > 0\n          if @scrub?\n            foundDocs = (@scrub d for d in foundDocs)\n          check docs, [ _validJobDoc() ]\n          docs = docs.concat foundDocs\n        # else\n        #   console.warn \"getWork: find after update failed\"\n    return docs\n\n  _DDPMethod_jobRemove: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional {}\n    options ?= {}\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    num = @remove(\n      {\n        _id:\n          $in: ids\n        status:\n          $in: @jobStatusRemovable\n      }\n    )\n    if num > 0\n      return true\n    else\n      console.warn \"jobRemove failed\"\n    return false\n\n  _DDPMethod_jobPause: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional {}\n    options ?= {}\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n\n    mods =\n      $set:\n        status: \"paused\"\n        updated: time\n\n    if logObj = @_logMessage.paused()\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id:\n          $in: ids\n        status:\n          $in: @jobStatusPausable\n      }\n      mods\n      {\n        multi: true\n      }\n    )\n    if num > 0\n      return true\n    else\n      console.warn \"jobPause failed\"\n    return false\n\n  _DDPMethod_jobResume: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional {}\n    options ?= {}\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n    mods =\n      $set:\n        status: \"waiting\"\n        updated: time\n\n    if logObj = @_logMessage.resumed()\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id:\n          $in: ids\n        status: \"paused\"\n        updated:\n          $ne: time\n      }\n      mods\n      {\n        multi: true\n      }\n    )\n    if num > 0\n      @_DDPMethod_jobReady ids\n      return true\n    else\n      console.warn \"jobResume failed\"\n    return false\n\n  _DDPMethod_jobReady: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      force: Match.Optional Boolean\n      time: Match.Optional Date\n\n    # Don't simulate jobReady. It has a strong chance of causing issues with\n    # Meteor on the client, particularly if an observeChanges() is triggering\n    # a processJobs queue (which in turn sets timers.)\n    if @isSimulation\n      return\n\n    now = new Date()\n\n    options ?= {}\n    options.force ?= false\n    options.time ?= now\n\n    if _validId(ids)\n      ids = [ids]\n\n    query =\n      status: \"waiting\"\n      after:\n        $lte: options.time\n\n    mods =\n      $set:\n        status: \"ready\"\n        updated: now\n\n    if ids.length > 0\n      query._id =\n        $in: ids\n      mods.$set.after = now\n\n    logObj = []\n\n    if options.force\n      mods.$set.depends = []  # Don't move to resolved, because they weren't!\n      l = @_logMessage.forced()\n      logObj.push l if l\n    else\n      query.depends =\n        $size: 0\n\n    l = @_logMessage.readied()\n    logObj.push l if l\n\n    if logObj.length > 0\n      mods.$push =\n        log:\n          $each: logObj\n\n    num = @update(\n      query\n      mods\n      {\n        multi: true\n      }\n    )\n\n    if num > 0\n      return true\n    else\n      return false\n\n  _DDPMethod_jobCancel: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      antecedents: Match.Optional Boolean\n      dependents: Match.Optional Boolean\n    options ?= {}\n    options.antecedents ?= false\n    options.dependents ?= true\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n\n    mods =\n      $set:\n        status: \"cancelled\"\n        runId: null\n        progress:\n          completed: 0\n          total: 1\n          percent: 0\n        updated: time\n\n    if logObj = @_logMessage.cancelled()\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id:\n          $in: ids\n        status:\n          $in: @jobStatusCancellable\n      }\n      mods\n      {\n        multi: true\n      }\n    )\n    # Cancel the entire tree of dependents\n    cancelIds = @_idsOfDeps ids, options.antecedents, options.dependents, @jobStatusCancellable\n\n    depsCancelled = false\n    if cancelIds.length > 0\n      depsCancelled = @_DDPMethod_jobCancel cancelIds, options\n\n    if num > 0 or depsCancelled\n      return true\n    else\n      console.warn \"jobCancel failed\"\n    return false\n\n  _DDPMethod_jobRestart: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      retries: Match.Optional(Match.Where _validIntGTEZero)\n      until: Match.Optional Date\n      antecedents: Match.Optional Boolean\n      dependents: Match.Optional Boolean\n    options ?= {}\n    options.retries ?= 1\n    options.retries = @forever if options.retries > @forever\n    options.dependents ?= false\n    options.antecedents ?= true\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n\n    query =\n      _id:\n        $in: ids\n      status:\n        $in: @jobStatusRestartable\n\n    mods =\n      $set:\n        status: \"waiting\"\n        progress:\n          completed: 0\n          total: 1\n          percent: 0\n        updated: time\n      $inc:\n        retries: options.retries\n\n    if logObj = @_logMessage.restarted()\n      mods.$push =\n        log: logObj\n\n    if options.until?\n      mods.$set.retryUntil = options.until\n\n    num = @update query, mods, {multi: true}\n\n    # Restart the entire tree of dependents\n    restartIds = @_idsOfDeps ids, options.antecedents, options.dependents, @jobStatusRestartable\n\n    depsRestarted = false\n    if restartIds.length > 0\n      depsRestarted = @_DDPMethod_jobRestart restartIds, options\n\n    if num > 0 or depsRestarted\n      @_DDPMethod_jobReady ids\n      return true\n    else\n      console.warn \"jobRestart failed\"\n    return false\n\n  # Job creator methods\n\n  _DDPMethod_jobSave: (doc, options) ->\n    check doc, _validJobDoc()\n    check options, Match.Optional\n      cancelRepeats: Match.Optional Boolean\n    check doc.status, Match.Where (v) ->\n      Match.test(v, String) and v in [ 'waiting', 'paused' ]\n    options ?= {}\n    options.cancelRepeats ?= false\n    doc.repeats = @forever if doc.repeats > @forever\n    doc.retries = @forever if doc.retries > @forever\n\n    time = new Date()\n\n    # This enables the default case of \"run immediately\" to\n    # not be impacted by a client's clock\n    doc.after = time if doc.after < time\n    doc.retryUntil = time if doc.retryUntil < time\n    doc.repeatUntil = time if doc.repeatUntil < time\n\n    # If doc.repeatWait is a later.js object, then don't run before\n    # the first valid scheduled time that occurs after doc.after\n    if @later? and typeof doc.repeatWait isnt 'number'\n      # Using a workaround to find next time after doc.after.\n      # See: https://github.com/vsivsi/meteor-job-collection/issues/217\n      schedule = @later?.schedule(doc.repeatWait)\n      unless schedule and next = schedule.next(2, schedule.prev(1, doc.after))[1]\n        console.warn \"No valid available later.js times in schedule after #{doc.after}\"\n        return null\n      nextDate = new Date(next)\n      unless nextDate <= doc.repeatUntil\n        console.warn \"No valid available later.js times in schedule before #{doc.repeatUntil}\"\n        return null\n      doc.after = nextDate\n    else if not @later? and doc.repeatWait isnt 'number'\n      console.warn \"Later.js not loaded...\"\n      return null\n\n    if doc._id\n\n      mods =\n        $set:\n          status: 'waiting'\n          data: doc.data\n          retries: doc.retries\n          repeatRetries: if doc.repeatRetries? then doc.repeatRetries else doc.retries + doc.retried\n          retryUntil: doc.retryUntil\n          retryWait: doc.retryWait\n          retryBackoff: doc.retryBackoff\n          repeats: doc.repeats\n          repeatUntil: doc.repeatUntil\n          repeatWait: doc.repeatWait\n          depends: doc.depends\n          priority: doc.priority\n          after: doc.after\n          updated: time\n\n      if logObj = @_logMessage.resubmitted()\n        mods.$push =\n          log: logObj\n\n      num = @update(\n        {\n          _id: doc._id\n          status: 'paused'\n          runId: null\n        }\n        mods\n      )\n\n      if num and @_checkDeps doc, false\n        @_DDPMethod_jobReady doc._id\n        return doc._id\n      else\n        return null\n    else\n      if doc.repeats is @forever and options.cancelRepeats\n        # If this is unlimited repeating job, then cancel any existing jobs of the same type\n        @find(\n          {\n            type: doc.type\n            status:\n              $in: @jobStatusCancellable\n          },\n          {\n            transform: null\n          }\n        ).forEach (d) => @_DDPMethod_jobCancel d._id, {}\n      doc.created = time\n      doc.log.push @_logMessage.submitted()\n      doc._id = @insert doc\n      if doc._id and @_checkDeps doc, false\n        @_DDPMethod_jobReady doc._id\n        return doc._id\n      else\n        return null\n\n  # Worker methods\n\n  _DDPMethod_jobProgress: (id, runId, completed, total, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.Where(_validId)\n    check completed, Match.Where _validNumGTEZero\n    check total, Match.Where _validNumGTZero\n    check options, Match.Optional {}\n    options ?= {}\n\n    # Notify the worker to stop running if we are shutting down\n    if @stopped\n      return null\n\n    progress =\n      completed: completed\n      total: total\n      percent: 100*completed/total\n\n    check progress, Match.Where (v) ->\n      v.total >= v.completed and 0 <= v.percent <= 100\n\n    time = new Date()\n\n    job = @findOne { _id: id }, { fields: { workTimeout: 1 } }\n\n    mods =\n      $set:\n        progress: progress\n        updated: time\n\n    if job?.workTimeout?\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout)\n\n    num = @update(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      mods\n    )\n\n    if num is 1\n      return true\n    else\n      console.warn \"jobProgress failed\"\n    return false\n\n  _DDPMethod_jobLog: (id, runId, message, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.OneOf(Match.Where(_validId), null)\n    check message, String\n    check options, Match.Optional\n      level: Match.Optional(Match.Where _validLogLevel)\n      data: Match.Optional Object\n    options ?= {}\n    time = new Date()\n    logObj =\n        time: time\n        runId: runId\n        level: options.level ? 'info'\n        message: message\n    logObj.data = options.data if options.data?\n\n    job = @findOne { _id: id }, { fields: { status: 1, workTimeout: 1 } }\n\n    mods =\n      $push:\n        log: logObj\n      $set:\n        updated: time\n\n    if job?.workTimeout? and job.status is 'running'\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout)\n\n    num = @update(\n      {\n        _id: id\n      }\n      mods\n    )\n    if num is 1\n      return true\n    else\n      console.warn \"jobLog failed\"\n    return false\n\n  _DDPMethod_jobRerun: (id, options) ->\n    check id, Match.Where(_validId)\n    check options, Match.Optional\n      repeats: Match.Optional(Match.Where _validIntGTEZero)\n      until: Match.Optional Date\n      wait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj))\n\n    doc = @findOne(\n      {\n        _id: id\n        status: \"completed\"\n      }\n      {\n        fields:\n          result: 0\n          failures: 0\n          log: 0\n          progress: 0\n          updated: 0\n          after: 0\n          status: 0\n        transform: null\n      }\n    )\n\n    if doc?\n      options ?= {}\n      options.repeats ?= 0\n      options.repeats = @forever if options.repeats > @forever\n      options.until ?= doc.repeatUntil\n      options.wait ?= 0\n      return @_rerun_job doc, options.repeats, options.wait, options.until\n\n    return false\n\n  _DDPMethod_jobDone: (id, runId, result, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.Where(_validId)\n    check result, Object\n    check options, Match.Optional\n      repeatId: Match.Optional Boolean\n      delayDeps: Match.Optional(Match.Where(_validIntGTEZero))\n\n    options ?= { repeatId: false }\n    time = new Date()\n    doc = @findOne(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      {\n        fields:\n          log: 0\n          failures: 0\n          updated: 0\n          after: 0\n          status: 0\n        transform: null\n      }\n    )\n    unless doc?\n      unless @isSimulation\n        console.warn \"Running job not found\", id, runId\n      return false\n\n    mods =\n      $set:\n        status: \"completed\"\n        result: result\n        progress:\n          completed: doc.progress.total or 1\n          total: doc.progress.total or 1\n          percent: 100\n        updated: time\n\n    if logObj = @_logMessage.completed runId\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      mods\n    )\n    if num is 1\n      if doc.repeats > 0\n        if typeof doc.repeatWait is 'number'\n          if doc.repeatUntil - doc.repeatWait >= time\n            jobId = @_rerun_job doc\n        else\n          # This code prevents a job that just ran and finished\n          # instantly from being immediately rerun on the same occurance\n          next = @later?.schedule(doc.repeatWait).next(2)\n          if next and next.length > 0\n            d = new Date(next[0])\n            if (d - time > 500) or (next.length > 1)\n              if d - time <= 500\n                d = new Date(next[1])\n              wait = d - time\n              if doc.repeatUntil - wait >= time\n                jobId = @_rerun_job doc, doc.repeats - 1, wait\n\n      # Resolve depends\n      ids = @find(\n        {\n          depends:\n            $all: [ id ]\n        },\n        {\n          transform: null\n          fields:\n            _id: 1\n        }\n      ).fetch().map (d) => d._id\n\n      if ids.length > 0\n\n        mods =\n          $pull:\n            depends: id\n          $push:\n            resolved: id\n\n        if options.delayDeps?\n          after = new Date(time.valueOf() + options.delayDeps)\n          mods.$max =\n            after: after\n\n        if logObj = @_logMessage.resolved id, runId\n          mods.$push.log = logObj\n\n        n = @update(\n          {\n            _id:\n              $in: ids\n          }\n          mods\n          {\n            multi: true\n          }\n        )\n        if n isnt ids.length\n          console.warn \"Not all dependent jobs were resolved #{ids.length} > #{n}\"\n        # Try to promote any jobs that just had a dependency resolved\n        @_DDPMethod_jobReady ids\n      if options.repeatId and jobId?\n        return jobId\n      else\n        return true\n    else\n      console.warn \"jobDone failed\"\n    return false\n\n  _DDPMethod_jobFail: (id, runId, err, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.Where(_validId)\n    check err, Object\n    check options, Match.Optional\n      fatal: Match.Optional Boolean\n\n    options ?= {}\n    options.fatal ?= false\n\n    time = new Date()\n    doc = @findOne(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      {\n        fields:\n          log: 0\n          failures: 0\n          progress: 0\n          updated: 0\n          after: 0\n          runId: 0\n          status: 0\n        transform: null\n      }\n    )\n    unless doc?\n      unless @isSimulation\n        console.warn \"Running job not found\", id, runId\n      return false\n\n    after = switch doc.retryBackoff\n      when 'exponential'\n        new Date(time.valueOf() + doc.retryWait*Math.pow(2, doc.retried-1))\n      else\n        new Date(time.valueOf() + doc.retryWait)  # 'constant'\n\n    newStatus = if (not options.fatal and\n                    doc.retries > 0 and\n                    doc.retryUntil >= after) then \"waiting\" else \"failed\"\n\n    err.runId = runId  # Link each failure to the run that generated it.\n\n    mods =\n      $set:\n        status: newStatus\n        runId: null\n        after: after\n        updated: time\n      $push:\n        failures:\n          err\n\n    if logObj = @_logMessage.failed runId, newStatus is 'failed', err\n      mods.$push.log = logObj\n\n    num = @update(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      mods\n    )\n    if newStatus is \"failed\" and num is 1\n      # Cancel any dependent jobs too\n      @find(\n        {\n          depends:\n            $all: [ id ]\n        },\n        {\n          transform: null\n        }\n      ).forEach (d) => @_DDPMethod_jobCancel d._id\n    if num is 1\n      return true\n    else\n      console.warn \"jobFail failed\"\n    return false\n\n# Share these methods so they'll be available on server and client\n\nshare.JobCollectionBase = JobCollectionBase\n","var JobCollectionBase, _validId, _validIntGTEOne, _validIntGTEZero, _validJobDoc, _validLaterJSObj, _validLog, _validLogLevel, _validNumGTEOne, _validNumGTEZero, _validNumGTZero, _validProgress, _validRetryBackoff, _validStatus,\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty,\n  slice = [].slice;\n\n_validNumGTEZero = function(v) {\n  return Match.test(v, Number) && v >= 0.0;\n};\n\n_validNumGTZero = function(v) {\n  return Match.test(v, Number) && v > 0.0;\n};\n\n_validNumGTEOne = function(v) {\n  return Match.test(v, Number) && v >= 1.0;\n};\n\n_validIntGTEZero = function(v) {\n  return _validNumGTEZero(v) && Math.floor(v) === v;\n};\n\n_validIntGTEOne = function(v) {\n  return _validNumGTEOne(v) && Math.floor(v) === v;\n};\n\n_validStatus = function(v) {\n  return Match.test(v, String) && indexOf.call(Job.jobStatuses, v) >= 0;\n};\n\n_validLogLevel = function(v) {\n  return Match.test(v, String) && indexOf.call(Job.jobLogLevels, v) >= 0;\n};\n\n_validRetryBackoff = function(v) {\n  return Match.test(v, String) && indexOf.call(Job.jobRetryBackoffMethods, v) >= 0;\n};\n\n_validId = function(v) {\n  return Match.test(v, Match.OneOf(String, Mongo.Collection.ObjectID));\n};\n\n_validLog = function() {\n  return [\n    {\n      time: Date,\n      runId: Match.OneOf(Match.Where(_validId), null),\n      level: Match.Where(_validLogLevel),\n      message: String,\n      data: Match.Optional(Object)\n    }\n  ];\n};\n\n_validProgress = function() {\n  return {\n    completed: Match.Where(_validNumGTEZero),\n    total: Match.Where(_validNumGTEZero),\n    percent: Match.Where(_validNumGTEZero)\n  };\n};\n\n_validLaterJSObj = function() {\n  return {\n    schedules: [Object],\n    exceptions: Match.Optional([Object])\n  };\n};\n\n_validJobDoc = function() {\n  return {\n    _id: Match.Optional(Match.OneOf(Match.Where(_validId), null)),\n    runId: Match.OneOf(Match.Where(_validId), null),\n    type: String,\n    status: Match.Where(_validStatus),\n    data: Object,\n    result: Match.Optional(Object),\n    failures: Match.Optional([Object]),\n    priority: Match.Integer,\n    depends: [Match.Where(_validId)],\n    resolved: [Match.Where(_validId)],\n    after: Date,\n    updated: Date,\n    workTimeout: Match.Optional(Match.Where(_validIntGTEOne)),\n    expiresAfter: Match.Optional(Date),\n    log: Match.Optional(_validLog()),\n    progress: _validProgress(),\n    retries: Match.Where(_validIntGTEZero),\n    retried: Match.Where(_validIntGTEZero),\n    repeatRetries: Match.Optional(Match.Where(_validIntGTEZero)),\n    retryUntil: Date,\n    retryWait: Match.Where(_validIntGTEZero),\n    retryBackoff: Match.Where(_validRetryBackoff),\n    repeats: Match.Where(_validIntGTEZero),\n    repeated: Match.Where(_validIntGTEZero),\n    repeatUntil: Date,\n    repeatWait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj)),\n    created: Date\n  };\n};\n\nJobCollectionBase = (function(superClass) {\n  extend(JobCollectionBase, superClass);\n\n  function JobCollectionBase(root, options) {\n    var collectionName;\n    this.root = root != null ? root : 'queue';\n    if (options == null) {\n      options = {};\n    }\n    if (!(this instanceof JobCollectionBase)) {\n      return new JobCollectionBase(this.root, options);\n    }\n    if (!(this instanceof Mongo.Collection)) {\n      throw new Meteor.Error('The global definition of Mongo.Collection has changed since the job-collection package was loaded. Please ensure that any packages that redefine Mongo.Collection are loaded before job-collection.');\n    }\n    if (Mongo.Collection !== Mongo.Collection.prototype.constructor) {\n      throw new Meteor.Error('The global definition of Mongo.Collection has been patched by another package, and the prototype constructor has been left in an inconsistent state. Please see this link for a workaround: https://github.com/vsivsi/meteor-file-sample-app/issues/2#issuecomment-120780592');\n    }\n    this.later = later;\n    if (options.noCollectionSuffix == null) {\n      options.noCollectionSuffix = false;\n    }\n    collectionName = this.root;\n    if (!options.noCollectionSuffix) {\n      collectionName += '.jobs';\n    }\n    delete options.noCollectionSuffix;\n    Job.setDDP(options.connection, this.root);\n    this._createLogEntry = function(message, runId, level, time, data) {\n      var l;\n      if (message == null) {\n        message = '';\n      }\n      if (runId == null) {\n        runId = null;\n      }\n      if (level == null) {\n        level = 'info';\n      }\n      if (time == null) {\n        time = new Date();\n      }\n      if (data == null) {\n        data = null;\n      }\n      l = {\n        time: time,\n        runId: runId,\n        message: message,\n        level: level\n      };\n      return l;\n    };\n    this._logMessage = {\n      'readied': (function() {\n        return this._createLogEntry(\"Promoted to ready\");\n      }).bind(this),\n      'forced': (function(id) {\n        return this._createLogEntry(\"Dependencies force resolved\", null, 'warning');\n      }).bind(this),\n      'rerun': (function(id, runId) {\n        return this._createLogEntry(\"Rerunning job\", null, 'info', new Date(), {\n          previousJob: {\n            id: id,\n            runId: runId\n          }\n        });\n      }).bind(this),\n      'running': (function(runId) {\n        return this._createLogEntry(\"Job Running\", runId);\n      }).bind(this),\n      'paused': (function() {\n        return this._createLogEntry(\"Job Paused\");\n      }).bind(this),\n      'resumed': (function() {\n        return this._createLogEntry(\"Job Resumed\");\n      }).bind(this),\n      'cancelled': (function() {\n        return this._createLogEntry(\"Job Cancelled\", null, 'warning');\n      }).bind(this),\n      'restarted': (function() {\n        return this._createLogEntry(\"Job Restarted\");\n      }).bind(this),\n      'resubmitted': (function() {\n        return this._createLogEntry(\"Job Resubmitted\");\n      }).bind(this),\n      'submitted': (function() {\n        return this._createLogEntry(\"Job Submitted\");\n      }).bind(this),\n      'completed': (function(runId) {\n        return this._createLogEntry(\"Job Completed\", runId, 'success');\n      }).bind(this),\n      'resolved': (function(id, runId) {\n        return this._createLogEntry(\"Dependency resolved\", null, 'info', new Date(), {\n          dependency: {\n            id: id,\n            runId: runId\n          }\n        });\n      }).bind(this),\n      'failed': (function(runId, fatal, err) {\n        var level, msg, value;\n        value = err.value;\n        msg = \"Job Failed with\" + (fatal ? ' Fatal' : '') + \" Error\" + ((value != null) && typeof value === 'string' ? ': ' + value : '') + \".\";\n        level = fatal ? 'danger' : 'warning';\n        return this._createLogEntry(msg, runId, level);\n      }).bind(this)\n    };\n    JobCollectionBase.__super__.constructor.call(this, collectionName, options);\n  }\n\n  JobCollectionBase.prototype._validNumGTEZero = _validNumGTEZero;\n\n  JobCollectionBase.prototype._validNumGTZero = _validNumGTZero;\n\n  JobCollectionBase.prototype._validNumGTEOne = _validNumGTEOne;\n\n  JobCollectionBase.prototype._validIntGTEZero = _validIntGTEZero;\n\n  JobCollectionBase.prototype._validIntGTEOne = _validIntGTEOne;\n\n  JobCollectionBase.prototype._validStatus = _validStatus;\n\n  JobCollectionBase.prototype._validLogLevel = _validLogLevel;\n\n  JobCollectionBase.prototype._validRetryBackoff = _validRetryBackoff;\n\n  JobCollectionBase.prototype._validId = _validId;\n\n  JobCollectionBase.prototype._validLog = _validLog;\n\n  JobCollectionBase.prototype._validProgress = _validProgress;\n\n  JobCollectionBase.prototype._validJobDoc = _validJobDoc;\n\n  JobCollectionBase.prototype.jobLogLevels = Job.jobLogLevels;\n\n  JobCollectionBase.prototype.jobPriorities = Job.jobPriorities;\n\n  JobCollectionBase.prototype.jobStatuses = Job.jobStatuses;\n\n  JobCollectionBase.prototype.jobStatusCancellable = Job.jobStatusCancellable;\n\n  JobCollectionBase.prototype.jobStatusPausable = Job.jobStatusPausable;\n\n  JobCollectionBase.prototype.jobStatusRemovable = Job.jobStatusRemovable;\n\n  JobCollectionBase.prototype.jobStatusRestartable = Job.jobStatusRestartable;\n\n  JobCollectionBase.prototype.forever = Job.forever;\n\n  JobCollectionBase.prototype.foreverDate = Job.foreverDate;\n\n  JobCollectionBase.prototype.ddpMethods = Job.ddpMethods;\n\n  JobCollectionBase.prototype.ddpPermissionLevels = Job.ddpPermissionLevels;\n\n  JobCollectionBase.prototype.ddpMethodPermissions = Job.ddpMethodPermissions;\n\n  JobCollectionBase.prototype.processJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Job.processJobs, [this.root].concat(slice.call(params)), function(){});\n  };\n\n  JobCollectionBase.prototype.getJob = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.getJob.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.getWork = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.getWork.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.getJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.getJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.readyJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.readyJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.cancelJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.cancelJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.pauseJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.pauseJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.resumeJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.resumeJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.restartJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.restartJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.removeJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.removeJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.setDDP = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.setDDP.apply(Job, params);\n  };\n\n  JobCollectionBase.prototype.startJobServer = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.startJobServer.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.shutdownJobServer = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.shutdownJobServer.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.startJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.startJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.stopJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.stopJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.jobDocPattern = _validJobDoc();\n\n  JobCollectionBase.prototype.allow = function() {\n    throw new Error(\"Server-only function jc.allow() invoked on client.\");\n  };\n\n  JobCollectionBase.prototype.deny = function() {\n    throw new Error(\"Server-only function jc.deny() invoked on client.\");\n  };\n\n  JobCollectionBase.prototype.promote = function() {\n    throw new Error(\"Server-only function jc.promote() invoked on client.\");\n  };\n\n  JobCollectionBase.prototype.setLogStream = function() {\n    throw new Error(\"Server-only function jc.setLogStream() invoked on client.\");\n  };\n\n  JobCollectionBase.prototype.logConsole = function() {\n    throw new Error(\"Client-only function jc.logConsole() invoked on server.\");\n  };\n\n  JobCollectionBase.prototype.makeJob = (function() {\n    var dep;\n    dep = false;\n    return function() {\n      var params;\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!dep) {\n        dep = true;\n        console.warn(\"WARNING: jc.makeJob() has been deprecated. Use new Job(jc, doc) instead.\");\n      }\n      return (function(func, args, ctor) {\n        ctor.prototype = func.prototype;\n        var child = new ctor, result = func.apply(child, args);\n        return Object(result) === result ? result : child;\n      })(Job, [this.root].concat(slice.call(params)), function(){});\n    };\n  })();\n\n  JobCollectionBase.prototype.createJob = (function() {\n    var dep;\n    dep = false;\n    return function() {\n      var params;\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!dep) {\n        dep = true;\n        console.warn(\"WARNING: jc.createJob() has been deprecated. Use new Job(jc, type, data) instead.\");\n      }\n      return (function(func, args, ctor) {\n        ctor.prototype = func.prototype;\n        var child = new ctor, result = func.apply(child, args);\n        return Object(result) === result ? result : child;\n      })(Job, [this.root].concat(slice.call(params)), function(){});\n    };\n  })();\n\n  JobCollectionBase.prototype._methodWrapper = function(method, func) {\n    var ref, toLog, unblockDDPMethods;\n    toLog = this._toLog;\n    unblockDDPMethods = (ref = this._unblockDDPMethods) != null ? ref : false;\n    return function() {\n      var params, ref1, retval, user;\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      user = (ref1 = this.userId) != null ? ref1 : \"[UNAUTHENTICATED]\";\n      toLog(user, method, \"params: \" + JSON.stringify(params));\n      if (unblockDDPMethods) {\n        this.unblock();\n      }\n      retval = func.apply(null, params);\n      toLog(user, method, \"returned: \" + JSON.stringify(retval));\n      return retval;\n    };\n  };\n\n  JobCollectionBase.prototype._generateMethods = function() {\n    var baseMethodName, methodFunc, methodName, methodPrefix, methodsOut, ref;\n    methodsOut = {};\n    methodPrefix = '_DDPMethod_';\n    ref = this;\n    for (methodName in ref) {\n      methodFunc = ref[methodName];\n      if (!(methodName.slice(0, methodPrefix.length) === methodPrefix)) {\n        continue;\n      }\n      baseMethodName = methodName.slice(methodPrefix.length);\n      methodsOut[this.root + \"_\" + baseMethodName] = this._methodWrapper(baseMethodName, methodFunc.bind(this));\n    }\n    return methodsOut;\n  };\n\n  JobCollectionBase.prototype._idsOfDeps = function(ids, antecedents, dependents, jobStatuses) {\n    var antsArray, dependsIds, dependsQuery;\n    dependsQuery = [];\n    dependsIds = [];\n    if (dependents) {\n      dependsQuery.push({\n        depends: {\n          $elemMatch: {\n            $in: ids\n          }\n        }\n      });\n    }\n    if (antecedents) {\n      antsArray = [];\n      this.find({\n        _id: {\n          $in: ids\n        }\n      }, {\n        fields: {\n          depends: 1\n        },\n        transform: null\n      }).forEach(function(d) {\n        var i, k, len, ref, results;\n        if (indexOf.call(antsArray, i) < 0) {\n          ref = d.depends;\n          results = [];\n          for (k = 0, len = ref.length; k < len; k++) {\n            i = ref[k];\n            results.push(antsArray.push(i));\n          }\n          return results;\n        }\n      });\n      if (antsArray.length > 0) {\n        dependsQuery.push({\n          _id: {\n            $in: antsArray\n          }\n        });\n      }\n    }\n    if (dependsQuery.length > 0) {\n      this.find({\n        status: {\n          $in: jobStatuses\n        },\n        $or: dependsQuery\n      }, {\n        fields: {\n          _id: 1\n        },\n        transform: null\n      }).forEach(function(d) {\n        var ref;\n        if (ref = d._id, indexOf.call(dependsIds, ref) < 0) {\n          return dependsIds.push(d._id);\n        }\n      });\n    }\n    return dependsIds;\n  };\n\n  JobCollectionBase.prototype._rerun_job = function(doc, repeats, wait, repeatUntil) {\n    var id, jobId, logObj, runId, time;\n    if (repeats == null) {\n      repeats = doc.repeats - 1;\n    }\n    if (wait == null) {\n      wait = doc.repeatWait;\n    }\n    if (repeatUntil == null) {\n      repeatUntil = doc.repeatUntil;\n    }\n    id = doc._id;\n    runId = doc.runId;\n    time = new Date();\n    delete doc._id;\n    delete doc.result;\n    delete doc.failures;\n    delete doc.expiresAfter;\n    delete doc.workTimeout;\n    doc.runId = null;\n    doc.status = \"waiting\";\n    doc.repeatRetries = doc.repeatRetries != null ? doc.repeatRetries : doc.retries + doc.retried;\n    doc.retries = doc.repeatRetries;\n    if (doc.retries > this.forever) {\n      doc.retries = this.forever;\n    }\n    doc.retryUntil = repeatUntil;\n    doc.retried = 0;\n    doc.repeats = repeats;\n    if (doc.repeats > this.forever) {\n      doc.repeats = this.forever;\n    }\n    doc.repeatUntil = repeatUntil;\n    doc.repeated = doc.repeated + 1;\n    doc.updated = time;\n    doc.created = time;\n    doc.progress = {\n      completed: 0,\n      total: 1,\n      percent: 0\n    };\n    if (logObj = this._logMessage.rerun(id, runId)) {\n      doc.log = [logObj];\n    } else {\n      doc.log = [];\n    }\n    doc.after = new Date(time.valueOf() + wait);\n    if (jobId = this.insert(doc)) {\n      this._DDPMethod_jobReady(jobId);\n      return jobId;\n    } else {\n      console.warn(\"Job rerun/repeat failed to reschedule!\", id, runId);\n    }\n    return null;\n  };\n\n  JobCollectionBase.prototype._checkDeps = function(job, dryRun) {\n    var cancel, cancelled, depJob, deps, failed, foundIds, j, k, len, len1, log, m, mods, n, ref, ref1, removed, resolved;\n    if (dryRun == null) {\n      dryRun = true;\n    }\n    cancel = false;\n    resolved = [];\n    failed = [];\n    cancelled = [];\n    removed = [];\n    log = [];\n    if (job.depends.length > 0) {\n      deps = this.find({\n        _id: {\n          $in: job.depends\n        }\n      }, {\n        fields: {\n          _id: 1,\n          runId: 1,\n          status: 1\n        }\n      }).fetch();\n      if (deps.length !== job.depends.length) {\n        foundIds = deps.map(function(d) {\n          return d._id;\n        });\n        ref = job.depends;\n        for (k = 0, len = ref.length; k < len; k++) {\n          j = ref[k];\n          if (!(!(indexOf.call(foundIds, j) >= 0))) {\n            continue;\n          }\n          if (!dryRun) {\n            this._DDPMethod_jobLog(job._id, null, \"Antecedent job \" + j + \" missing at save\");\n          }\n          removed.push(j);\n        }\n        cancel = true;\n      }\n      for (m = 0, len1 = deps.length; m < len1; m++) {\n        depJob = deps[m];\n        if (ref1 = depJob.status, indexOf.call(this.jobStatusCancellable, ref1) < 0) {\n          switch (depJob.status) {\n            case \"completed\":\n              resolved.push(depJob._id);\n              log.push(this._logMessage.resolved(depJob._id, depJob.runId));\n              break;\n            case \"failed\":\n              cancel = true;\n              failed.push(depJob._id);\n              if (!dryRun) {\n                this._DDPMethod_jobLog(job._id, null, \"Antecedent job failed before save\");\n              }\n              break;\n            case \"cancelled\":\n              cancel = true;\n              cancelled.push(depJob._id);\n              if (!dryRun) {\n                this._DDPMethod_jobLog(job._id, null, \"Antecedent job cancelled before save\");\n              }\n              break;\n            default:\n              throw new Meteor.Error(\"Unknown status in jobSave Dependency check\");\n          }\n        }\n      }\n      if (!(resolved.length === 0 || dryRun)) {\n        mods = {\n          $pull: {\n            depends: {\n              $in: resolved\n            }\n          },\n          $push: {\n            resolved: {\n              $each: resolved\n            },\n            log: {\n              $each: log\n            }\n          }\n        };\n        n = this.update({\n          _id: job._id,\n          status: 'waiting'\n        }, mods);\n        if (!n) {\n          console.warn(\"Update for job \" + job._id + \" during dependency check failed.\");\n        }\n      }\n      if (cancel && !dryRun) {\n        this._DDPMethod_jobCancel(job._id);\n        return false;\n      }\n    }\n    if (dryRun) {\n      if (cancel || resolved.length > 0) {\n        return {\n          jobId: job._id,\n          resolved: resolved,\n          failed: failed,\n          cancelled: cancelled,\n          removed: removed\n        };\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  };\n\n  JobCollectionBase.prototype._DDPMethod_startJobServer = function(options) {\n    check(options, Match.Optional({}));\n    if (options == null) {\n      options = {};\n    }\n    if (!this.isSimulation) {\n      if (this.stopped && this.stopped !== true) {\n        Meteor.clearTimeout(this.stopped);\n      }\n      this.stopped = false;\n    }\n    return true;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_startJobs = (function() {\n    var depFlag;\n    depFlag = false;\n    return function(options) {\n      if (!depFlag) {\n        depFlag = true;\n        console.warn(\"Deprecation Warning: jc.startJobs() has been renamed to jc.startJobServer()\");\n      }\n      return this._DDPMethod_startJobServer(options);\n    };\n  })();\n\n  JobCollectionBase.prototype._DDPMethod_shutdownJobServer = function(options) {\n    check(options, Match.Optional({\n      timeout: Match.Optional(Match.Where(_validIntGTEOne))\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.timeout == null) {\n      options.timeout = 60 * 1000;\n    }\n    if (!this.isSimulation) {\n      if (this.stopped && this.stopped !== true) {\n        Meteor.clearTimeout(this.stopped);\n      }\n      this.stopped = Meteor.setTimeout((function(_this) {\n        return function() {\n          var cursor, failedJobs;\n          cursor = _this.find({\n            status: 'running'\n          }, {\n            transform: null\n          });\n          failedJobs = cursor.count();\n          if (failedJobs !== 0) {\n            console.warn(\"Failing \" + failedJobs + \" jobs on queue stop.\");\n          }\n          cursor.forEach(function(d) {\n            return _this._DDPMethod_jobFail(d._id, d.runId, \"Running at Job Server shutdown.\");\n          });\n          if (_this.logStream != null) {\n            _this.logStream.end();\n            return _this.logStream = null;\n          }\n        };\n      })(this), options.timeout);\n    }\n    return true;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_stopJobs = (function() {\n    var depFlag;\n    depFlag = false;\n    return function(options) {\n      if (!depFlag) {\n        depFlag = true;\n        console.warn(\"Deprecation Warning: jc.stopJobs() has been renamed to jc.shutdownJobServer()\");\n      }\n      return this._DDPMethod_shutdownJobServer(options);\n    };\n  })();\n\n  JobCollectionBase.prototype._DDPMethod_getJob = function(ids, options) {\n    var d, docs, fields, single;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({\n      getLog: Match.Optional(Boolean),\n      getFailures: Match.Optional(Boolean)\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.getLog == null) {\n      options.getLog = false;\n    }\n    if (options.getFailures == null) {\n      options.getFailures = false;\n    }\n    single = false;\n    if (_validId(ids)) {\n      ids = [ids];\n      single = true;\n    }\n    if (ids.length === 0) {\n      return null;\n    }\n    fields = {\n      _private: 0\n    };\n    if (!options.getLog) {\n      fields.log = 0;\n    }\n    if (!options.getFailures) {\n      fields.failures = 0;\n    }\n    docs = this.find({\n      _id: {\n        $in: ids\n      }\n    }, {\n      fields: fields,\n      transform: null\n    }).fetch();\n    if (docs != null ? docs.length : void 0) {\n      if (this.scrub != null) {\n        docs = (function() {\n          var k, len, results;\n          results = [];\n          for (k = 0, len = docs.length; k < len; k++) {\n            d = docs[k];\n            results.push(this.scrub(d));\n          }\n          return results;\n        }).call(this);\n      }\n      check(docs, [_validJobDoc()]);\n      if (single) {\n        return docs[0];\n      } else {\n        return docs;\n      }\n    }\n    return null;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_getWork = function(type, options) {\n    var d, docs, foundDocs, ids, logObj, mods, num, runId, time;\n    check(type, Match.OneOf(String, [String]));\n    check(options, Match.Optional({\n      maxJobs: Match.Optional(Match.Where(_validIntGTEOne)),\n      workTimeout: Match.Optional(Match.Where(_validIntGTEOne))\n    }));\n    if (this.isSimulation) {\n      return;\n    }\n    if (options == null) {\n      options = {};\n    }\n    if (options.maxJobs == null) {\n      options.maxJobs = 1;\n    }\n    if (this.stopped) {\n      return [];\n    }\n    if (typeof type === 'string') {\n      type = [type];\n    }\n    time = new Date();\n    docs = [];\n    runId = this._makeNewID();\n    while (docs.length < options.maxJobs) {\n      ids = this.find({\n        type: {\n          $in: type\n        },\n        status: 'ready',\n        runId: null\n      }, {\n        sort: {\n          priority: 1,\n          retryUntil: 1,\n          after: 1\n        },\n        limit: options.maxJobs - docs.length,\n        fields: {\n          _id: 1\n        },\n        transform: null\n      }).map(function(d) {\n        return d._id;\n      });\n      if (!((ids != null ? ids.length : void 0) > 0)) {\n        break;\n      }\n      mods = {\n        $set: {\n          status: 'running',\n          runId: runId,\n          updated: time\n        },\n        $inc: {\n          retries: -1,\n          retried: 1\n        }\n      };\n      if (logObj = this._logMessage.running(runId)) {\n        mods.$push = {\n          log: logObj\n        };\n      }\n      if (options.workTimeout != null) {\n        mods.$set.workTimeout = options.workTimeout;\n        mods.$set.expiresAfter = new Date(time.valueOf() + options.workTimeout);\n      } else {\n        if (mods.$unset == null) {\n          mods.$unset = {};\n        }\n        mods.$unset.workTimeout = \"\";\n        mods.$unset.expiresAfter = \"\";\n      }\n      num = this.update({\n        _id: {\n          $in: ids\n        },\n        status: 'ready',\n        runId: null\n      }, mods, {\n        multi: true\n      });\n      if (num > 0) {\n        foundDocs = this.find({\n          _id: {\n            $in: ids\n          },\n          runId: runId\n        }, {\n          fields: {\n            log: 0,\n            failures: 0,\n            _private: 0\n          },\n          transform: null\n        }).fetch();\n        if ((foundDocs != null ? foundDocs.length : void 0) > 0) {\n          if (this.scrub != null) {\n            foundDocs = (function() {\n              var k, len, results;\n              results = [];\n              for (k = 0, len = foundDocs.length; k < len; k++) {\n                d = foundDocs[k];\n                results.push(this.scrub(d));\n              }\n              return results;\n            }).call(this);\n          }\n          check(docs, [_validJobDoc()]);\n          docs = docs.concat(foundDocs);\n        }\n      }\n    }\n    return docs;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobRemove = function(ids, options) {\n    var num;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({}));\n    if (options == null) {\n      options = {};\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    if (ids.length === 0) {\n      return false;\n    }\n    num = this.remove({\n      _id: {\n        $in: ids\n      },\n      status: {\n        $in: this.jobStatusRemovable\n      }\n    });\n    if (num > 0) {\n      return true;\n    } else {\n      console.warn(\"jobRemove failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobPause = function(ids, options) {\n    var logObj, mods, num, time;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({}));\n    if (options == null) {\n      options = {};\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    if (ids.length === 0) {\n      return false;\n    }\n    time = new Date();\n    mods = {\n      $set: {\n        status: \"paused\",\n        updated: time\n      }\n    };\n    if (logObj = this._logMessage.paused()) {\n      mods.$push = {\n        log: logObj\n      };\n    }\n    num = this.update({\n      _id: {\n        $in: ids\n      },\n      status: {\n        $in: this.jobStatusPausable\n      }\n    }, mods, {\n      multi: true\n    });\n    if (num > 0) {\n      return true;\n    } else {\n      console.warn(\"jobPause failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobResume = function(ids, options) {\n    var logObj, mods, num, time;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({}));\n    if (options == null) {\n      options = {};\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    if (ids.length === 0) {\n      return false;\n    }\n    time = new Date();\n    mods = {\n      $set: {\n        status: \"waiting\",\n        updated: time\n      }\n    };\n    if (logObj = this._logMessage.resumed()) {\n      mods.$push = {\n        log: logObj\n      };\n    }\n    num = this.update({\n      _id: {\n        $in: ids\n      },\n      status: \"paused\",\n      updated: {\n        $ne: time\n      }\n    }, mods, {\n      multi: true\n    });\n    if (num > 0) {\n      this._DDPMethod_jobReady(ids);\n      return true;\n    } else {\n      console.warn(\"jobResume failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobReady = function(ids, options) {\n    var l, logObj, mods, now, num, query;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({\n      force: Match.Optional(Boolean),\n      time: Match.Optional(Date)\n    }));\n    if (this.isSimulation) {\n      return;\n    }\n    now = new Date();\n    if (options == null) {\n      options = {};\n    }\n    if (options.force == null) {\n      options.force = false;\n    }\n    if (options.time == null) {\n      options.time = now;\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    query = {\n      status: \"waiting\",\n      after: {\n        $lte: options.time\n      }\n    };\n    mods = {\n      $set: {\n        status: \"ready\",\n        updated: now\n      }\n    };\n    if (ids.length > 0) {\n      query._id = {\n        $in: ids\n      };\n      mods.$set.after = now;\n    }\n    logObj = [];\n    if (options.force) {\n      mods.$set.depends = [];\n      l = this._logMessage.forced();\n      if (l) {\n        logObj.push(l);\n      }\n    } else {\n      query.depends = {\n        $size: 0\n      };\n    }\n    l = this._logMessage.readied();\n    if (l) {\n      logObj.push(l);\n    }\n    if (logObj.length > 0) {\n      mods.$push = {\n        log: {\n          $each: logObj\n        }\n      };\n    }\n    num = this.update(query, mods, {\n      multi: true\n    });\n    if (num > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobCancel = function(ids, options) {\n    var cancelIds, depsCancelled, logObj, mods, num, time;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({\n      antecedents: Match.Optional(Boolean),\n      dependents: Match.Optional(Boolean)\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.antecedents == null) {\n      options.antecedents = false;\n    }\n    if (options.dependents == null) {\n      options.dependents = true;\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    if (ids.length === 0) {\n      return false;\n    }\n    time = new Date();\n    mods = {\n      $set: {\n        status: \"cancelled\",\n        runId: null,\n        progress: {\n          completed: 0,\n          total: 1,\n          percent: 0\n        },\n        updated: time\n      }\n    };\n    if (logObj = this._logMessage.cancelled()) {\n      mods.$push = {\n        log: logObj\n      };\n    }\n    num = this.update({\n      _id: {\n        $in: ids\n      },\n      status: {\n        $in: this.jobStatusCancellable\n      }\n    }, mods, {\n      multi: true\n    });\n    cancelIds = this._idsOfDeps(ids, options.antecedents, options.dependents, this.jobStatusCancellable);\n    depsCancelled = false;\n    if (cancelIds.length > 0) {\n      depsCancelled = this._DDPMethod_jobCancel(cancelIds, options);\n    }\n    if (num > 0 || depsCancelled) {\n      return true;\n    } else {\n      console.warn(\"jobCancel failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobRestart = function(ids, options) {\n    var depsRestarted, logObj, mods, num, query, restartIds, time;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({\n      retries: Match.Optional(Match.Where(_validIntGTEZero)),\n      until: Match.Optional(Date),\n      antecedents: Match.Optional(Boolean),\n      dependents: Match.Optional(Boolean)\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.retries == null) {\n      options.retries = 1;\n    }\n    if (options.retries > this.forever) {\n      options.retries = this.forever;\n    }\n    if (options.dependents == null) {\n      options.dependents = false;\n    }\n    if (options.antecedents == null) {\n      options.antecedents = true;\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    if (ids.length === 0) {\n      return false;\n    }\n    time = new Date();\n    query = {\n      _id: {\n        $in: ids\n      },\n      status: {\n        $in: this.jobStatusRestartable\n      }\n    };\n    mods = {\n      $set: {\n        status: \"waiting\",\n        progress: {\n          completed: 0,\n          total: 1,\n          percent: 0\n        },\n        updated: time\n      },\n      $inc: {\n        retries: options.retries\n      }\n    };\n    if (logObj = this._logMessage.restarted()) {\n      mods.$push = {\n        log: logObj\n      };\n    }\n    if (options.until != null) {\n      mods.$set.retryUntil = options.until;\n    }\n    num = this.update(query, mods, {\n      multi: true\n    });\n    restartIds = this._idsOfDeps(ids, options.antecedents, options.dependents, this.jobStatusRestartable);\n    depsRestarted = false;\n    if (restartIds.length > 0) {\n      depsRestarted = this._DDPMethod_jobRestart(restartIds, options);\n    }\n    if (num > 0 || depsRestarted) {\n      this._DDPMethod_jobReady(ids);\n      return true;\n    } else {\n      console.warn(\"jobRestart failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobSave = function(doc, options) {\n    var logObj, mods, next, nextDate, num, ref, schedule, time;\n    check(doc, _validJobDoc());\n    check(options, Match.Optional({\n      cancelRepeats: Match.Optional(Boolean)\n    }));\n    check(doc.status, Match.Where(function(v) {\n      return Match.test(v, String) && (v === 'waiting' || v === 'paused');\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.cancelRepeats == null) {\n      options.cancelRepeats = false;\n    }\n    if (doc.repeats > this.forever) {\n      doc.repeats = this.forever;\n    }\n    if (doc.retries > this.forever) {\n      doc.retries = this.forever;\n    }\n    time = new Date();\n    if (doc.after < time) {\n      doc.after = time;\n    }\n    if (doc.retryUntil < time) {\n      doc.retryUntil = time;\n    }\n    if (doc.repeatUntil < time) {\n      doc.repeatUntil = time;\n    }\n    if ((this.later != null) && typeof doc.repeatWait !== 'number') {\n      schedule = (ref = this.later) != null ? ref.schedule(doc.repeatWait) : void 0;\n      if (!(schedule && (next = schedule.next(2, schedule.prev(1, doc.after))[1]))) {\n        console.warn(\"No valid available later.js times in schedule after \" + doc.after);\n        return null;\n      }\n      nextDate = new Date(next);\n      if (!(nextDate <= doc.repeatUntil)) {\n        console.warn(\"No valid available later.js times in schedule before \" + doc.repeatUntil);\n        return null;\n      }\n      doc.after = nextDate;\n    } else if ((this.later == null) && doc.repeatWait !== 'number') {\n      console.warn(\"Later.js not loaded...\");\n      return null;\n    }\n    if (doc._id) {\n      mods = {\n        $set: {\n          status: 'waiting',\n          data: doc.data,\n          retries: doc.retries,\n          repeatRetries: doc.repeatRetries != null ? doc.repeatRetries : doc.retries + doc.retried,\n          retryUntil: doc.retryUntil,\n          retryWait: doc.retryWait,\n          retryBackoff: doc.retryBackoff,\n          repeats: doc.repeats,\n          repeatUntil: doc.repeatUntil,\n          repeatWait: doc.repeatWait,\n          depends: doc.depends,\n          priority: doc.priority,\n          after: doc.after,\n          updated: time\n        }\n      };\n      if (logObj = this._logMessage.resubmitted()) {\n        mods.$push = {\n          log: logObj\n        };\n      }\n      num = this.update({\n        _id: doc._id,\n        status: 'paused',\n        runId: null\n      }, mods);\n      if (num && this._checkDeps(doc, false)) {\n        this._DDPMethod_jobReady(doc._id);\n        return doc._id;\n      } else {\n        return null;\n      }\n    } else {\n      if (doc.repeats === this.forever && options.cancelRepeats) {\n        this.find({\n          type: doc.type,\n          status: {\n            $in: this.jobStatusCancellable\n          }\n        }, {\n          transform: null\n        }).forEach((function(_this) {\n          return function(d) {\n            return _this._DDPMethod_jobCancel(d._id, {});\n          };\n        })(this));\n      }\n      doc.created = time;\n      doc.log.push(this._logMessage.submitted());\n      doc._id = this.insert(doc);\n      if (doc._id && this._checkDeps(doc, false)) {\n        this._DDPMethod_jobReady(doc._id);\n        return doc._id;\n      } else {\n        return null;\n      }\n    }\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobProgress = function(id, runId, completed, total, options) {\n    var job, mods, num, progress, time;\n    check(id, Match.Where(_validId));\n    check(runId, Match.Where(_validId));\n    check(completed, Match.Where(_validNumGTEZero));\n    check(total, Match.Where(_validNumGTZero));\n    check(options, Match.Optional({}));\n    if (options == null) {\n      options = {};\n    }\n    if (this.stopped) {\n      return null;\n    }\n    progress = {\n      completed: completed,\n      total: total,\n      percent: 100 * completed / total\n    };\n    check(progress, Match.Where(function(v) {\n      var ref;\n      return v.total >= v.completed && (0 <= (ref = v.percent) && ref <= 100);\n    }));\n    time = new Date();\n    job = this.findOne({\n      _id: id\n    }, {\n      fields: {\n        workTimeout: 1\n      }\n    });\n    mods = {\n      $set: {\n        progress: progress,\n        updated: time\n      }\n    };\n    if ((job != null ? job.workTimeout : void 0) != null) {\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout);\n    }\n    num = this.update({\n      _id: id,\n      runId: runId,\n      status: \"running\"\n    }, mods);\n    if (num === 1) {\n      return true;\n    } else {\n      console.warn(\"jobProgress failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobLog = function(id, runId, message, options) {\n    var job, logObj, mods, num, ref, time;\n    check(id, Match.Where(_validId));\n    check(runId, Match.OneOf(Match.Where(_validId), null));\n    check(message, String);\n    check(options, Match.Optional({\n      level: Match.Optional(Match.Where(_validLogLevel)),\n      data: Match.Optional(Object)\n    }));\n    if (options == null) {\n      options = {};\n    }\n    time = new Date();\n    logObj = {\n      time: time,\n      runId: runId,\n      level: (ref = options.level) != null ? ref : 'info',\n      message: message\n    };\n    if (options.data != null) {\n      logObj.data = options.data;\n    }\n    job = this.findOne({\n      _id: id\n    }, {\n      fields: {\n        status: 1,\n        workTimeout: 1\n      }\n    });\n    mods = {\n      $push: {\n        log: logObj\n      },\n      $set: {\n        updated: time\n      }\n    };\n    if (((job != null ? job.workTimeout : void 0) != null) && job.status === 'running') {\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout);\n    }\n    num = this.update({\n      _id: id\n    }, mods);\n    if (num === 1) {\n      return true;\n    } else {\n      console.warn(\"jobLog failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobRerun = function(id, options) {\n    var doc;\n    check(id, Match.Where(_validId));\n    check(options, Match.Optional({\n      repeats: Match.Optional(Match.Where(_validIntGTEZero)),\n      until: Match.Optional(Date),\n      wait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj))\n    }));\n    doc = this.findOne({\n      _id: id,\n      status: \"completed\"\n    }, {\n      fields: {\n        result: 0,\n        failures: 0,\n        log: 0,\n        progress: 0,\n        updated: 0,\n        after: 0,\n        status: 0\n      },\n      transform: null\n    });\n    if (doc != null) {\n      if (options == null) {\n        options = {};\n      }\n      if (options.repeats == null) {\n        options.repeats = 0;\n      }\n      if (options.repeats > this.forever) {\n        options.repeats = this.forever;\n      }\n      if (options.until == null) {\n        options.until = doc.repeatUntil;\n      }\n      if (options.wait == null) {\n        options.wait = 0;\n      }\n      return this._rerun_job(doc, options.repeats, options.wait, options.until);\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobDone = function(id, runId, result, options) {\n    var after, d, doc, ids, jobId, logObj, mods, n, next, num, ref, time, wait;\n    check(id, Match.Where(_validId));\n    check(runId, Match.Where(_validId));\n    check(result, Object);\n    check(options, Match.Optional({\n      repeatId: Match.Optional(Boolean),\n      delayDeps: Match.Optional(Match.Where(_validIntGTEZero))\n    }));\n    if (options == null) {\n      options = {\n        repeatId: false\n      };\n    }\n    time = new Date();\n    doc = this.findOne({\n      _id: id,\n      runId: runId,\n      status: \"running\"\n    }, {\n      fields: {\n        log: 0,\n        failures: 0,\n        updated: 0,\n        after: 0,\n        status: 0\n      },\n      transform: null\n    });\n    if (doc == null) {\n      if (!this.isSimulation) {\n        console.warn(\"Running job not found\", id, runId);\n      }\n      return false;\n    }\n    mods = {\n      $set: {\n        status: \"completed\",\n        result: result,\n        progress: {\n          completed: doc.progress.total || 1,\n          total: doc.progress.total || 1,\n          percent: 100\n        },\n        updated: time\n      }\n    };\n    if (logObj = this._logMessage.completed(runId)) {\n      mods.$push = {\n        log: logObj\n      };\n    }\n    num = this.update({\n      _id: id,\n      runId: runId,\n      status: \"running\"\n    }, mods);\n    if (num === 1) {\n      if (doc.repeats > 0) {\n        if (typeof doc.repeatWait === 'number') {\n          if (doc.repeatUntil - doc.repeatWait >= time) {\n            jobId = this._rerun_job(doc);\n          }\n        } else {\n          next = (ref = this.later) != null ? ref.schedule(doc.repeatWait).next(2) : void 0;\n          if (next && next.length > 0) {\n            d = new Date(next[0]);\n            if ((d - time > 500) || (next.length > 1)) {\n              if (d - time <= 500) {\n                d = new Date(next[1]);\n              }\n              wait = d - time;\n              if (doc.repeatUntil - wait >= time) {\n                jobId = this._rerun_job(doc, doc.repeats - 1, wait);\n              }\n            }\n          }\n        }\n      }\n      ids = this.find({\n        depends: {\n          $all: [id]\n        }\n      }, {\n        transform: null,\n        fields: {\n          _id: 1\n        }\n      }).fetch().map((function(_this) {\n        return function(d) {\n          return d._id;\n        };\n      })(this));\n      if (ids.length > 0) {\n        mods = {\n          $pull: {\n            depends: id\n          },\n          $push: {\n            resolved: id\n          }\n        };\n        if (options.delayDeps != null) {\n          after = new Date(time.valueOf() + options.delayDeps);\n          mods.$max = {\n            after: after\n          };\n        }\n        if (logObj = this._logMessage.resolved(id, runId)) {\n          mods.$push.log = logObj;\n        }\n        n = this.update({\n          _id: {\n            $in: ids\n          }\n        }, mods, {\n          multi: true\n        });\n        if (n !== ids.length) {\n          console.warn(\"Not all dependent jobs were resolved \" + ids.length + \" > \" + n);\n        }\n        this._DDPMethod_jobReady(ids);\n      }\n      if (options.repeatId && (jobId != null)) {\n        return jobId;\n      } else {\n        return true;\n      }\n    } else {\n      console.warn(\"jobDone failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobFail = function(id, runId, err, options) {\n    var after, doc, logObj, mods, newStatus, num, time;\n    check(id, Match.Where(_validId));\n    check(runId, Match.Where(_validId));\n    check(err, Object);\n    check(options, Match.Optional({\n      fatal: Match.Optional(Boolean)\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.fatal == null) {\n      options.fatal = false;\n    }\n    time = new Date();\n    doc = this.findOne({\n      _id: id,\n      runId: runId,\n      status: \"running\"\n    }, {\n      fields: {\n        log: 0,\n        failures: 0,\n        progress: 0,\n        updated: 0,\n        after: 0,\n        runId: 0,\n        status: 0\n      },\n      transform: null\n    });\n    if (doc == null) {\n      if (!this.isSimulation) {\n        console.warn(\"Running job not found\", id, runId);\n      }\n      return false;\n    }\n    after = (function() {\n      switch (doc.retryBackoff) {\n        case 'exponential':\n          return new Date(time.valueOf() + doc.retryWait * Math.pow(2, doc.retried - 1));\n        default:\n          return new Date(time.valueOf() + doc.retryWait);\n      }\n    })();\n    newStatus = (!options.fatal && doc.retries > 0 && doc.retryUntil >= after) ? \"waiting\" : \"failed\";\n    err.runId = runId;\n    mods = {\n      $set: {\n        status: newStatus,\n        runId: null,\n        after: after,\n        updated: time\n      },\n      $push: {\n        failures: err\n      }\n    };\n    if (logObj = this._logMessage.failed(runId, newStatus === 'failed', err)) {\n      mods.$push.log = logObj;\n    }\n    num = this.update({\n      _id: id,\n      runId: runId,\n      status: \"running\"\n    }, mods);\n    if (newStatus === \"failed\" && num === 1) {\n      this.find({\n        depends: {\n          $all: [id]\n        }\n      }, {\n        transform: null\n      }).forEach((function(_this) {\n        return function(d) {\n          return _this._DDPMethod_jobCancel(d._id);\n        };\n      })(this));\n    }\n    if (num === 1) {\n      return true;\n    } else {\n      console.warn(\"jobFail failed\");\n    }\n    return false;\n  };\n\n  return JobCollectionBase;\n\n})(Mongo.Collection);\n\nshare.JobCollectionBase = JobCollectionBase;\n","############################################################################\n#     Copyright (C) 2014-2017 by Vaughn Iverson\n#     job-collection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isClient\n\n  # This is a polyfill for bind(), added to make phantomjs 1.9.7 work\n  unless Function.prototype.bind\n    Function.prototype.bind = (oThis) ->\n       if typeof this isnt \"function\"\n          # closest thing possible to the ECMAScript 5 internal IsCallable function\n          throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\")\n\n       aArgs = Array.prototype.slice.call arguments, 1\n       fToBind = this\n       fNOP = () ->\n       fBound = () ->\n          func = if (this instanceof fNOP and oThis) then this else oThis\n          return fToBind.apply(func, aArgs.concat(Array.prototype.slice.call(arguments)))\n\n       fNOP.prototype = this.prototype\n       fBound.prototype = new fNOP()\n       return fBound\n\n  ################################################################\n  ## job-collection client class\n\n  class JobCollection extends share.JobCollectionBase\n\n    constructor: (root = 'queue', options = {}) ->\n      unless @ instanceof JobCollection\n        return new JobCollection(root, options)\n\n      # Call super's constructor\n      super root, options\n\n      @logConsole = false\n      @isSimulation = true\n\n      unless options.connection?\n        Meteor.methods @_generateMethods()\n      else\n        options.connection.methods @_generateMethods()\n\n    _toLog: (userId, method, message) =>\n      if @logConsole\n        console.log \"#{new Date()}, #{userId}, #{method}, #{message}\\n\"\n","var               \n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nif (Meteor.isClient) {\n  if (!Function.prototype.bind) {\n    Function.prototype.bind = function(oThis) {\n      var aArgs, fBound, fNOP, fToBind;\n      if (typeof this !== \"function\") {\n        throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n      }\n      aArgs = Array.prototype.slice.call(arguments, 1);\n      fToBind = this;\n      fNOP = function() {};\n      fBound = function() {\n        var func;\n        func = (this instanceof fNOP && oThis) ? this : oThis;\n        return fToBind.apply(func, aArgs.concat(Array.prototype.slice.call(arguments)));\n      };\n      fNOP.prototype = this.prototype;\n      fBound.prototype = new fNOP();\n      return fBound;\n    };\n  }\n  JobCollection = (function(superClass) {\n    extend(JobCollection, superClass);\n\n    function JobCollection(root, options) {\n      if (root == null) {\n        root = 'queue';\n      }\n      if (options == null) {\n        options = {};\n      }\n      this._toLog = bind(this._toLog, this);\n      if (!(this instanceof JobCollection)) {\n        return new JobCollection(root, options);\n      }\n      JobCollection.__super__.constructor.call(this, root, options);\n      this.logConsole = false;\n      this.isSimulation = true;\n      if (options.connection == null) {\n        Meteor.methods(this._generateMethods());\n      } else {\n        options.connection.methods(this._generateMethods());\n      }\n    }\n\n    JobCollection.prototype._toLog = function(userId, method, message) {\n      if (this.logConsole) {\n        return console.log((new Date()) + \", \" + userId + \", \" + method + \", \" + message + \"\\n\");\n      }\n    };\n\n    return JobCollection;\n\n  })(share.JobCollectionBase);\n}\n"]}}]
{"metadata":{"usedHelpers":["slicedToArray","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"./query/query.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Query"}]},{"source":"./namedQuery/namedQuery.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"NamedQuery"}]},{"source":"./namedQuery/store.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"NamedQueryStore"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/extension.js","filenameRelative":"packages/cultofcoders:grapher/lib/extension.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/extension.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/extension.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"extension"},"ignored":false,"code":"var _slicedToArray2 = require(\"babel-runtime/helpers/slicedToArray\");\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Query = void 0;\nmodule.watch(require(\"./query/query.js\"), {\n    \"default\": function (v) {\n        Query = v;\n    }\n}, 0);\nvar NamedQuery = void 0;\nmodule.watch(require(\"./namedQuery/namedQuery.js\"), {\n    \"default\": function (v) {\n        NamedQuery = v;\n    }\n}, 1);\nvar NamedQueryStore = void 0;\nmodule.watch(require(\"./namedQuery/store.js\"), {\n    \"default\": function (v) {\n        NamedQueryStore = v;\n    }\n}, 2);\n\n_.extend(Mongo.Collection.prototype, {\n    createQuery: function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        if (typeof args[0] === 'string') {\n            //NamedQuery\n            var _args = (0, _slicedToArray3.default)(args, 3),\n                name = _args[0],\n                body = _args[1],\n                options = _args[2];\n\n            var query = new NamedQuery(name, this, body, options);\n            NamedQueryStore.add(name, query);\n            return query;\n        } else {\n            var _args2 = (0, _slicedToArray3.default)(args, 2),\n                _body = _args2[0],\n                _options = _args2[1];\n\n            return new Query(this, _body, _options);\n        }\n    }\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/extension.js"],"names":["Query","module","watch","require","v","NamedQuery","NamedQueryStore","_","extend","Mongo","Collection","prototype","createQuery","args","name","body","options","query","add"],"mappings":";;;;;;AAAA,IAAIA,cAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAAA,yBAASC,CAAT,EAAW;AAACJ,gBAAMI,CAAN;AAAQ;AAApB,CAAzC,EAA+D,CAA/D;AAAkE,IAAIC,mBAAJ;AAAeJ,OAAOC,KAAP,CAAaC,QAAQ,4BAAR,CAAb,EAAmD;AAAA,yBAASC,CAAT,EAAW;AAACC,qBAAWD,CAAX;AAAa;AAAzB,CAAnD,EAA8E,CAA9E;AAAiF,IAAIE,wBAAJ;AAAoBL,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAAA,yBAASC,CAAT,EAAW;AAACE,0BAAgBF,CAAhB;AAAkB;AAA9B,CAA9C,EAA8E,CAA9E;;AAIhMG,EAAEC,MAAF,CAASC,MAAMC,UAAN,CAAiBC,SAA1B,EAAqC;AACjCC,eADiC,cACZ;AAAA,0CAANC,IAAM;AAANA,gBAAM;AAAA;;AACjB,YAAI,OAAOA,KAAK,CAAL,CAAP,KAAmB,QAAvB,EAAiC;AAC7B;AAD6B,qDAECA,IAFD;AAAA,gBAEtBC,IAFsB;AAAA,gBAEhBC,IAFgB;AAAA,gBAEVC,OAFU;;AAG7B,gBAAMC,QAAQ,IAAIZ,UAAJ,CAAeS,IAAf,EAAqB,IAArB,EAA2BC,IAA3B,EAAiCC,OAAjC,CAAd;AACAV,4BAAgBY,GAAhB,CAAoBJ,IAApB,EAA0BG,KAA1B;AAEA,mBAAOA,KAAP;AACH,SAPD,MAOO;AAAA,sDACqBJ,IADrB;AAAA,gBACIE,KADJ;AAAA,gBACUC,QADV;;AAGH,mBAAO,IAAIhB,KAAJ,CAAU,IAAV,EAAgBe,KAAhB,EAAsBC,QAAtB,CAAP;AACH;AACJ;AAdgC,CAArC","file":"packages/cultofcoders:grapher/lib/extension.js.map","sourcesContent":["import Query from './query/query.js';\nimport NamedQuery from './namedQuery/namedQuery.js';\nimport NamedQueryStore from './namedQuery/store.js';\n\n_.extend(Mongo.Collection.prototype, {\n    createQuery(...args) {\n        if (typeof args[0] === 'string') {\n            //NamedQuery\n            const [name, body, options] = args;\n            const query = new NamedQuery(name, this, body, options);\n            NamedQueryStore.add(name, query);\n\n            return query;\n        } else {\n            const [body, options] = args;\n\n            return new Query(this, body, options);\n        }\n    }\n});"]},"hash":"d3aca0c734cc0e30484fcbce95349c2de443803a"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"./migrations.js","imported":["addMigration"],"specifiers":[{"kind":"named","imported":"addMigration","local":"addMigration"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/herteby:denormalize/cacheCount.js","filenameRelative":"packages/herteby:denormalize/cacheCount.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/herteby:denormalize/cacheCount.js.map","sourceFileName":"packages/herteby:denormalize/cacheCount.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cacheCount"},"ignored":false,"code":"let _;\n\nmodule.watch(require(\"lodash\"), {\n  default(v) {\n    _ = v;\n  }\n\n}, 0);\nlet addMigration;\nmodule.watch(require(\"./migrations.js\"), {\n  addMigration(v) {\n    addMigration = v;\n  }\n\n}, 1);\n\nMongo.Collection.prototype.cacheCount = function (options) {\n  check(options, {\n    collection: Mongo.Collection,\n    cacheField: String,\n    referenceField: String,\n    selector: Match.Optional(Object),\n    bypassSchema: Match.Optional(Boolean)\n  });\n  let parentCollection = options.bypassSchema && Package['aldeed:collection2'] ? this._collection : this;\n  let childCollection = options.collection;\n  let selector = options.selector || {};\n  let cacheField = options.cacheField;\n  let referenceField = options.referenceField;\n\n  let watchedFields = _.union([referenceField], _.keys(selector));\n\n  if (referenceField.split(/[.:]/)[0] == cacheField.split(/[.:]/)[0]) {\n    throw new Error('referenceField and cacheField must not share the same top field');\n  }\n\n  function update(child) {\n    let ref = _.get(child, referenceField);\n\n    if (ref) {\n      let select = _.merge(selector, {\n        [referenceField]: ref\n      });\n\n      parentCollection.update({\n        _id: ref\n      }, {\n        $set: {\n          [cacheField]: childCollection.find(select).count()\n        }\n      });\n    }\n  }\n\n  function insert(userId, parent) {\n    let select = _.merge(selector, {\n      [referenceField]: parent._id\n    });\n\n    parentCollection.update(parent._id, {\n      $set: {\n        [cacheField]: childCollection.find(select).count()\n      }\n    });\n  }\n\n  addMigration(parentCollection, insert, options);\n  parentCollection.after.insert(insert);\n  childCollection.after.insert((userId, child) => {\n    update(child);\n  });\n  childCollection.after.update((userId, child, changedFields) => {\n    if (_.intersection(changedFields, watchedFields).length) {\n      update(child);\n      update(this.previous);\n    }\n  });\n  childCollection.after.remove((userId, child) => {\n    update(child);\n  });\n};","map":{"version":3,"sources":["packages/herteby:denormalize/cacheCount.js"],"names":["_","module","watch","require","default","v","addMigration","Mongo","Collection","prototype","cacheCount","options","check","collection","cacheField","String","referenceField","selector","Match","Optional","Object","bypassSchema","Boolean","parentCollection","Package","_collection","childCollection","watchedFields","union","keys","split","Error","update","child","ref","get","select","merge","_id","$set","find","count","insert","userId","parent","after","changedFields","intersection","length","previous","remove"],"mappings":"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","file":"packages/herteby:denormalize/cacheCount.js.map","sourcesContent":["import _ from 'lodash'\nimport {addMigration} from './migrations.js'\n\nMongo.Collection.prototype.cacheCount = function(options) {\n  check(options, {\n    collection:Mongo.Collection,\n    cacheField:String,\n    referenceField:String,\n    selector:Match.Optional(Object),\n    bypassSchema:Match.Optional(Boolean)\n  })\n\n  let parentCollection = options.bypassSchema && Package['aldeed:collection2'] ? this._collection : this\n  let childCollection = options.collection\n  let selector = options.selector || {}\n  let cacheField = options.cacheField\n  let referenceField = options.referenceField\n  let watchedFields = _.union([referenceField], _.keys(selector))\n\n  if(referenceField.split(/[.:]/)[0] == cacheField.split(/[.:]/)[0]){\n    throw new Error('referenceField and cacheField must not share the same top field')\n  }\n\n  function update(child){\n    let ref = _.get(child, referenceField)\n    if(ref){\n      let select = _.merge(selector, {[referenceField]:ref})\n      parentCollection.update({_id:ref}, {$set:{[cacheField]:childCollection.find(select).count()}})\n    }\n  }\n\n  function insert(userId, parent){\n    let select = _.merge(selector, {[referenceField]:parent._id})\n    parentCollection.update(parent._id, {$set:{[cacheField]:childCollection.find(select).count()}})\n  }\n\n  addMigration(parentCollection, insert, options)\n\n  parentCollection.after.insert(insert)\n  \n  childCollection.after.insert((userId, child) => {\n    update(child)\n  })\n\n  childCollection.after.update((userId, child, changedFields) => {\n    if(_.intersection(changedFields, watchedFields).length){\n      update(child)\n      update(this.previous)\n    }\n  })\n\n  childCollection.after.remove((userId, child) => {\n    update(child)\n  })\n}"]},"hash":"71f1bae636ee9b260d489277dff9a92ab97ff7b0"}

{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"./base.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Link"}]},{"source":"./lib/smartArguments.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SmartArgs"}]}],"exports":{"exported":["LinkManyMeta"],"specifiers":[{"kind":"local","local":"LinkManyMeta","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"linkManyMeta"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n    \"default\": function () {\n        return LinkManyMeta;\n    }\n});\nvar Link = void 0;\nmodule.watch(require(\"./base.js\"), {\n    \"default\": function (v) {\n        Link = v;\n    }\n}, 0);\nvar SmartArgs = void 0;\nmodule.watch(require(\"./lib/smartArguments.js\"), {\n    \"default\": function (v) {\n        SmartArgs = v;\n    }\n}, 1);\n\nvar LinkManyMeta = function (_Link) {\n    (0, _inherits3.default)(LinkManyMeta, _Link);\n\n    function LinkManyMeta() {\n        (0, _classCallCheck3.default)(this, LinkManyMeta);\n        return (0, _possibleConstructorReturn3.default)(this, _Link.apply(this, arguments));\n    }\n\n    LinkManyMeta.prototype.clean = function () {\n        function clean() {\n            if (!this.object[this.linkStorageField]) {\n                this.object[this.linkStorageField] = [];\n            }\n        }\n\n        return clean;\n    }(); /**\n          * @param what\n          * @param metadata\n          */\n\n    LinkManyMeta.prototype.add = function () {\n        function add(what) {\n            var _this2 = this,\n                _$addToSet;\n\n            var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            if (this.isVirtual) {\n                this._virtualAction('add', what, metadata);\n\n                return this;\n            }\n\n            var _ids = this.identifyIds(what, true);\n\n            this._validateIds(_ids);\n\n            var field = this.linkStorageField;\n            this.object[field] = this.object[field] || [];\n            var metadatas = [];\n\n            _.each(_ids, function (_id) {\n                var localMetadata = _.clone(metadata);\n\n                localMetadata._id = _id;\n\n                _this2.object[field].push(localMetadata);\n\n                metadatas.push(localMetadata);\n            });\n\n            var modifier = {\n                $addToSet: (_$addToSet = {}, _$addToSet[field] = {\n                    $each: metadatas\n                }, _$addToSet)\n            };\n            this.linker.mainCollection.update(this.object._id, modifier);\n            return this;\n        }\n\n        return add;\n    }(); /**\n          * @param what\n          * @param extendMetadata\n          */\n\n    LinkManyMeta.prototype.metadata = function () {\n        function metadata(what, extendMetadata) {\n            if (this.isVirtual) {\n                this._virtualAction('metadata', what, extendMetadata);\n\n                return this;\n            }\n\n            var field = this.linkStorageField;\n\n            if (what === undefined) {\n                return this.object[field];\n            }\n\n            if (_.isArray(what)) {\n                throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');\n            }\n\n            var _id = this.identifyId(what);\n\n            var existingMetadata = _.find(this.object[field], function (metadata) {\n                return metadata._id == _id;\n            });\n\n            if (extendMetadata === undefined) {\n                return existingMetadata;\n            } else {\n                var _linker$mainCollectio, _$set;\n\n                _.extend(existingMetadata, extendMetadata);\n\n                var subfield = field + '._id';\n                var subfieldUpdate = field + '.$';\n                this.linker.mainCollection.update((_linker$mainCollectio = {\n                    _id: this.object._id\n                }, _linker$mainCollectio[subfield] = _id, _linker$mainCollectio), {\n                    $set: (_$set = {}, _$set[subfieldUpdate] = existingMetadata, _$set)\n                });\n            }\n\n            return this;\n        }\n\n        return metadata;\n    }();\n\n    LinkManyMeta.prototype.remove = function () {\n        function remove(what) {\n            var _$pull;\n\n            if (this.isVirtual) {\n                this._virtualAction('remove', what);\n\n                return this;\n            }\n\n            var _ids = this.identifyIds(what);\n\n            var field = this.linkStorageField;\n            this.object[field] = _.filter(this.object[field], function (link) {\n                return !_.contains(_ids, link._id);\n            });\n            var modifier = {\n                $pull: (_$pull = {}, _$pull[field] = {\n                    $elemMatch: {\n                        _id: {\n                            $in: _ids\n                        }\n                    }\n                }, _$pull)\n            };\n            this.linker.mainCollection.update(this.object._id, modifier);\n            return this;\n        }\n\n        return remove;\n    }();\n\n    LinkManyMeta.prototype.set = function () {\n        function set(what, metadata) {\n            if (this.isVirtual) {\n                this._virtualAction('set', what, metadata);\n\n                return this;\n            }\n\n            throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n        }\n\n        return set;\n    }();\n\n    LinkManyMeta.prototype.unset = function () {\n        function unset(what) {\n            if (this.isVirtual) {\n                this._virtualAction('unset', what);\n\n                return this;\n            }\n\n            throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n        }\n\n        return unset;\n    }();\n\n    return LinkManyMeta;\n}(Link);","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js"],"names":["module","export","LinkManyMeta","Link","watch","require","v","SmartArgs","clean","object","linkStorageField","add","what","metadata","isVirtual","_virtualAction","_ids","identifyIds","_validateIds","field","metadatas","_","each","localMetadata","clone","_id","push","modifier","$addToSet","$each","linker","mainCollection","update","extendMetadata","undefined","isArray","Meteor","Error","identifyId","existingMetadata","find","extend","subfield","subfieldUpdate","$set","remove","filter","contains","link","$pull","$elemMatch","$in","set","unset"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js.map","sourcesContent":["import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkManyMeta extends Link {\n    clean() {\n        if (!this.object[this.linkStorageField]) {\n            this.object[this.linkStorageField] = [];\n        }\n    }\n\n    /**\n     * @param what\n     * @param metadata\n     */\n    add(what, metadata = {}) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what, metadata);\n            return this;\n        }\n\n        const _ids = this.identifyIds(what, true);\n        this._validateIds(_ids);\n\n        let field = this.linkStorageField;\n\n        this.object[field] = this.object[field] || [];\n        let metadatas = [];\n\n        _.each(_ids, _id => {\n            let localMetadata = _.clone(metadata);\n            localMetadata._id = _id;\n\n            this.object[field].push(localMetadata);\n            metadatas.push(localMetadata);\n        });\n\n        let modifier = {\n            $addToSet: {\n                [field]: {$each: metadatas}\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    /**\n     * @param what\n     * @param extendMetadata\n     */\n    metadata(what, extendMetadata) {\n        if (this.isVirtual) {\n            this._virtualAction('metadata', what, extendMetadata);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n\n        if (what === undefined) {\n            return this.object[field];\n        }\n\n        if (_.isArray(what)) {\n            throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');\n        }\n\n        const _id = this.identifyId(what);\n\n        let existingMetadata = _.find(this.object[field], metadata => metadata._id == _id);\n        if (extendMetadata === undefined) {\n            return existingMetadata;\n        } else {\n            _.extend(existingMetadata, extendMetadata);\n            let subfield = field + '._id';\n            let subfieldUpdate = field + '.$';\n\n            this.linker.mainCollection.update({\n                _id: this.object._id,\n                [subfield]: _id\n            }, {\n               $set: {\n                   [subfieldUpdate]: existingMetadata\n               }\n            });\n        }\n\n        return this;\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        const _ids = this.identifyIds(what);\n        let field = this.linkStorageField;\n\n        this.object[field] = _.filter(this.object[field], link => !_.contains(_ids, link._id));\n\n        let modifier = {\n            $pull: {\n                [field]: {\n                    $elemMatch: {\n                        _id: {\n                            $in: _ids\n                        }\n                    }\n                }\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    set(what, metadata) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what, metadata);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n    unset(what) {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n}"]},"hash":"462549baa386c8b3314a7c74da2556d08f191e63"}

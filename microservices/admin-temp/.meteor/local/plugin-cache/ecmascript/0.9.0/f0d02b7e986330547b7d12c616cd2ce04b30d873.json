{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./applyProps.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"applyProps"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"recursiveCompose"},"ignored":false,"code":"let applyProps;\nmodule.watch(require(\"./applyProps.js\"), {\n    default(v) {\n        applyProps = v;\n    }\n\n}, 0);\n\nfunction compose(node, userId) {\n    return {\n        find(parent) {\n            if (parent) {\n                let {\n                    filters,\n                    options\n                } = applyProps(node); // composition\n\n                let linker = node.linker;\n                let accessor = linker.createLink(parent); // the rule is this, if a child I want to fetch is virtual, then I want to fetch the link storage of those fields\n\n                if (linker.isVirtual()) {\n                    options.fields = options.fields || {};\n\n                    _.extend(options.fields, {\n                        [linker.linkStorageField]: 1\n                    });\n                }\n\n                return accessor.find(filters, options, userId);\n            }\n        },\n\n        children: _.map(node.collectionNodes, n => compose(n, userId))\n    };\n}\n\nmodule.exportDefault((node, userId, config = {\n    bypassFirewalls: false\n}) => {\n    return {\n        find() {\n            let {\n                filters,\n                options\n            } = applyProps(node);\n            return node.collection.find(filters, options, userId);\n        },\n\n        children: _.map(node.collectionNodes, n => {\n            const userIdToPass = config.bypassFirewalls ? undefined : userId;\n            return compose(n, userIdToPass);\n        })\n    };\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js"],"names":["applyProps","module","watch","require","default","v","compose","node","userId","find","parent","filters","options","linker","accessor","createLink","isVirtual","fields","_","extend","linkStorageField","children","map","collectionNodes","n","exportDefault","config","bypassFirewalls","collection","userIdToPass","undefined"],"mappings":"AAAA,IAAIA,UAAJ;AAAeC,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACC,YAAQC,CAAR,EAAU;AAACL,qBAAWK,CAAX;AAAa;;AAAzB,CAAxC,EAAmE,CAAnE;;AAEf,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,MAAvB,EAA+B;AAC3B,WAAO;AACHC,aAAKC,MAAL,EAAa;AACT,gBAAIA,MAAJ,EAAY;AACR,oBAAI;AAACC,2BAAD;AAAUC;AAAV,oBAAqBZ,WAAWO,IAAX,CAAzB,CADQ,CAGR;;AACA,oBAAIM,SAASN,KAAKM,MAAlB;AACA,oBAAIC,WAAWD,OAAOE,UAAP,CAAkBL,MAAlB,CAAf,CALQ,CAOR;;AACA,oBAAIG,OAAOG,SAAP,EAAJ,EAAwB;AACpBJ,4BAAQK,MAAR,GAAiBL,QAAQK,MAAR,IAAkB,EAAnC;;AACAC,sBAAEC,MAAF,CAASP,QAAQK,MAAjB,EAAyB;AACrB,yBAACJ,OAAOO,gBAAR,GAA2B;AADN,qBAAzB;AAGH;;AAED,uBAAON,SAASL,IAAT,CAAcE,OAAd,EAAuBC,OAAvB,EAAgCJ,MAAhC,CAAP;AACH;AACJ,SAnBE;;AAqBHa,kBAAUH,EAAEI,GAAF,CAAMf,KAAKgB,eAAX,EAA4BC,KAAKlB,QAAQkB,CAAR,EAAWhB,MAAX,CAAjC;AArBP,KAAP;AAuBH;;AA1BDP,OAAOwB,aAAP,CA4Be,CAAClB,IAAD,EAAOC,MAAP,EAAekB,SAAS;AAACC,qBAAiB;AAAlB,CAAxB,KAAqD;AAChE,WAAO;AACHlB,eAAO;AACH,gBAAI;AAACE,uBAAD;AAAUC;AAAV,gBAAqBZ,WAAWO,IAAX,CAAzB;AAEA,mBAAOA,KAAKqB,UAAL,CAAgBnB,IAAhB,CAAqBE,OAArB,EAA8BC,OAA9B,EAAuCJ,MAAvC,CAAP;AACH,SALE;;AAOHa,kBAAUH,EAAEI,GAAF,CAAMf,KAAKgB,eAAX,EAA4BC,KAAK;AACvC,kBAAMK,eAAgBH,OAAOC,eAAR,GAA2BG,SAA3B,GAAuCtB,MAA5D;AAEA,mBAAOF,QAAQkB,CAAR,EAAWK,YAAX,CAAP;AACH,SAJS;AAPP,KAAP;AAaH,CA1CD","file":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js.map","sourcesContent":["import applyProps from './applyProps.js';\n\nfunction compose(node, userId) {\n    return {\n        find(parent) {\n            if (parent) {\n                let {filters, options} = applyProps(node);\n\n                // composition\n                let linker = node.linker;\n                let accessor = linker.createLink(parent);\n\n                // the rule is this, if a child I want to fetch is virtual, then I want to fetch the link storage of those fields\n                if (linker.isVirtual()) {\n                    options.fields = options.fields || {};\n                    _.extend(options.fields, {\n                        [linker.linkStorageField]: 1\n                    });\n                }\n\n                return accessor.find(filters, options, userId);\n            }\n        },\n\n        children: _.map(node.collectionNodes, n => compose(n, userId))\n    }\n}\n\nexport default (node, userId, config = {bypassFirewalls: false}) => {\n    return {\n        find() {\n            let {filters, options} = applyProps(node);\n\n            return node.collection.find(filters, options, userId);\n        },\n\n        children: _.map(node.collectionNodes, n => {\n            const userIdToPass = (config.bypassFirewalls) ? undefined : userId;\n\n            return compose(n, userIdToPass);\n        })\n    }\n}"]},"hash":"f0d02b7e986330547b7d12c616cd2ce04b30d873"}

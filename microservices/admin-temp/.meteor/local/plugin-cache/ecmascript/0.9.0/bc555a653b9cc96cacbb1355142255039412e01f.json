{"metadata":{"usedHelpers":["extends","typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"./constants","imported":["default","logismataValues"],"specifiers":[{"kind":"named","imported":"default","local":"constants"},{"kind":"named","imported":"logismataValues","local":"logismataValues"}]}],"exports":{"exported":["handleResponse","getAuthToken","setToken","convertParamsToLogismata","convertToLogismataTaxBase","getParamsArray","getTaxBase","callApi","getLocationId","getIndirectAmortization","getDirectAmortization"],"specifiers":[{"kind":"local","local":"handleResponse","exported":"handleResponse"},{"kind":"local","local":"getAuthToken","exported":"getAuthToken"},{"kind":"local","local":"setToken","exported":"setToken"},{"kind":"local","local":"convertParamsToLogismata","exported":"convertParamsToLogismata"},{"kind":"local","local":"convertToLogismataTaxBase","exported":"convertToLogismataTaxBase"},{"kind":"local","local":"getParamsArray","exported":"getParamsArray"},{"kind":"local","local":"getTaxBase","exported":"getTaxBase"},{"kind":"local","local":"callApi","exported":"callApi"},{"kind":"local","local":"getLocationId","exported":"getLocationId"},{"kind":"local","local":"getIndirectAmortization","exported":"getIndirectAmortization"},{"kind":"local","local":"getDirectAmortization","exported":"getDirectAmortization"}]}}},"options":{"filename":"imports/core/utils/logismata/api.js","filenameRelative":"imports/core/utils/logismata/api.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/utils/logismata/api.js.map","sourceFileName":"imports/core/utils/logismata/api.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"api"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleResponse = undefined;\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nmodule.export({\n  handleResponse: function handleResponse() {\n    return _handleResponse;\n  },\n  getAuthToken: function getAuthToken() {\n    return _getAuthToken;\n  },\n  setToken: function setToken() {\n    return _setToken;\n  },\n  convertParamsToLogismata: function convertParamsToLogismata() {\n    return _convertParamsToLogismata;\n  },\n  convertToLogismataTaxBase: function convertToLogismataTaxBase() {\n    return _convertToLogismataTaxBase;\n  },\n  getParamsArray: function getParamsArray() {\n    return _getParamsArray;\n  },\n  getTaxBase: function getTaxBase() {\n    return _getTaxBase;\n  },\n  callApi: function callApi() {\n    return _callApi;\n  },\n  getLocationId: function getLocationId() {\n    return _getLocationId;\n  },\n  getIndirectAmortization: function getIndirectAmortization() {\n    return _getIndirectAmortization;\n  },\n  getDirectAmortization: function getDirectAmortization() {\n    return _getDirectAmortization;\n  }\n});\n\nvar _2 = void 0;\n\nmodule.watch(require(\"lodash\"), {\n  _: function _(v) {\n    _2 = v;\n  }\n}, 0);\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 1);\n\nvar constants = void 0,\n    _logismataValues = void 0;\n\nmodule.watch(require(\"./constants\"), {\n  default: function _default(v) {\n    constants = v;\n  },\n  logismataValues: function logismataValues(v) {\n    _logismataValues = v;\n  }\n}, 2);\nexports.handleResponse = _handleResponse;\nvar fetch = void 0;\n\nif (_Meteor.isServer) {\n  fetch = require('node-fetch');\n} else {\n  fetch = global.fetch;\n}\n\n// Where the current token will be stored\nvar token = void 0;\n\nvar _handleResponse = function _handleResponse(response) {\n  if (response.status !== 200) {\n    throw response;\n  }\n\n  return response.json();\n}; /**\n    * getAuthToken - verifies if the token exists, and fetches a new one if not\n    *\n    * @param {String} testKey an optional string used for testing\n    *\n    * @return {String} The authentication token\n    */\n\nvar _getAuthToken = function _getAuthToken(testKey) {\n  return token ? Promise.resolve(token) : fetch(constants.authUrl(testKey), {\n    method: 'GET'\n  }).then(_handleResponse).then(function (body) {\n    token = body.authToken;\n    return body.authToken;\n  });\n};\n\nvar _setToken = function _setToken(authToken) {\n  return Promise.resolve(authToken).then(function () {\n    token = authToken;\n  });\n};\n\nvar _convertParamsToLogismata = function _convertParamsToLogismata() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var newParams = (0, _extends3.default)({}, params);\n  Object.keys(_logismataValues).forEach(function (key) {\n    if (params[key] !== undefined) {\n      var newValue = _2.findKey(_logismataValues[key], function (val) {\n        return val === params[key];\n      });\n\n      if (!newValue) {\n        throw new Error('invalid logismata value provided');\n      }\n\n      newParams[key] = Number(newValue);\n    } else {\n      newParams[key] = _logismataValues[key].default;\n    }\n  });\n  return newParams;\n};\n\nvar _convertToLogismataTaxBase = function _convertToLogismataTaxBase(taxBase) {\n  var params = _convertParamsToLogismata(taxBase);\n\n  return {\n    age: params.age,\n    children: params.childrenCount,\n    civil: params.civilStatus,\n    confession: params.confession,\n    gross_fortune: params.grossFortune,\n    gross_income: params.grossIncome,\n    income_type: params.incomeBase,\n    locationid: params.locationId,\n    sex: params.sex\n  };\n};\n\nvar _getParamsArray = function _getParamsArray(method, params) {\n  var logismataParams = _convertParamsToLogismata(params);\n\n  switch (method) {\n    case 'getLocationInfo':\n      return [logismataParams.locationId];\n\n    case 'searchLocations':\n      return [logismataParams.search, logismataParams.language, logismataParams.country];\n\n    case 'calcTaxableIncomeState': // Same as calcTaxableIncomeCountry\n\n    case 'calcTaxableIncomeCountry':\n      return [logismataParams.locationId, logismataParams.age, logismataParams.civilStatus, logismataParams.confession, logismataParams.childrenCount, logismataParams.grossIncome, logismataParams.isEmployee];\n\n    case 'calcTaxableFortune':\n      return [logismataParams.locationId, logismataParams.age, logismataParams.civilStatus, logismataParams.childrenCount, logismataParams.grossFortune];\n\n    case 'calcDirectAmortization':\n      return ['', // customization\n      _convertToLogismataTaxBase(params.taxBase), {\n        amortization_goal: logismataParams.amortizationGoal,\n        duration: logismataParams.duration,\n        has_detailed_amortization: logismataParams.isDetailed,\n        rental_value: logismataParams.rentalValue,\n        maintenance_costs: logismataParams.maintenanceCosts,\n        mortgages: logismataParams.mortgages,\n        new_mortgages: logismataParams.newMortgages\n      }];\n\n    case 'calcIndirectAmortization':\n      return ['', // customization\n      _convertToLogismataTaxBase(params.taxBase), {\n        amortization_goal: logismataParams.amortizationGoal,\n        duration: logismataParams.duration,\n        saving_type: logismataParams.savingType,\n        saving_interestrate: logismataParams.savingRate,\n        saving_amount_manual: false,\n        saving_amount: logismataParams.savingAmount,\n        rental_value: logismataParams.rentalValue,\n        maintenance_costs: logismataParams.maintenanceCosts,\n        mortgages: logismataParams.mortgages,\n        new_mortgages: logismataParams.newMortgages\n      }];\n\n    default:\n      throw new Error('invalid logismata method name');\n  }\n};\n\nvar _getTaxBase = function _getTaxBase(data) {};\n\nvar _callApi = function _callApi(method, params) {\n  var data = JSON.stringify({\n    authToken: token,\n    loan: {\n      method: method,\n      // Stringify objects in the array, do not stringify strings once again\n      params: [].concat(_toConsumableArray(_getParamsArray(method, params).map(function (i) {\n        return (typeof i === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(i)) === 'object' ? JSON.stringify(i) : i;\n      })))\n    }\n  });\n  return fetch(constants.calcUrl(), {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: '*/*'\n    },\n    body: data\n  }).then(function (response) {\n    return response.json();\n  });\n};\n\nvar _getLocationId = function _getLocationId(search) {\n  return _callApi('searchLocations', {\n    search: search,\n    country: 'CH',\n    language: 'all'\n  }).then(function (result) {\n    if (result.response && result.response.length) {\n      return result.response[result.response.length - 1].id;\n    }\n\n    throw new Error('Could not find locationId through logismata');\n  });\n};\n\nvar _getIndirectAmortization = function _getIndirectAmortization() {};\n\nvar _getDirectAmortization = function _getDirectAmortization() {};","map":{"version":3,"sources":["imports/core/utils/logismata/api.js"],"names":["module","export","handleResponse","getAuthToken","setToken","convertParamsToLogismata","convertToLogismataTaxBase","getParamsArray","getTaxBase","callApi","getLocationId","getIndirectAmortization","getDirectAmortization","_","watch","require","v","Meteor","constants","logismataValues","default","fetch","isServer","global","token","response","status","json","Promise","resolve","authUrl","testKey","method","then","body","authToken","params","newParams","Object","keys","forEach","key","undefined","newValue","findKey","val","Error","Number","taxBase","age","children","childrenCount","civil","civilStatus","confession","gross_fortune","grossFortune","gross_income","grossIncome","income_type","incomeBase","locationid","locationId","sex","logismataParams","search","language","country","isEmployee","amortization_goal","amortizationGoal","duration","has_detailed_amortization","isDetailed","rental_value","rentalValue","maintenance_costs","maintenanceCosts","mortgages","new_mortgages","newMortgages","saving_type","savingType","saving_interestrate","savingRate","saving_amount_manual","saving_amount","savingAmount","data","JSON","stringify","loan","map","i","calcUrl","headers","Accept","result","length","id"],"mappings":"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","file":"imports/core/utils/logismata/api.js.map","sourcesContent":["import { _ } from 'lodash';\nimport { Meteor } from 'meteor/meteor';\n\nlet fetch;\nif (Meteor.isServer) {\n  fetch = require('node-fetch');\n} else {\n  fetch = global.fetch;\n}\n\nimport constants, { logismataValues } from './constants';\n\n// Where the current token will be stored\nlet token;\n\nexport const handleResponse = (response) => {\n  if (response.status !== 200) {\n    throw response;\n  }\n\n  return response.json();\n};\n\n/**\n * getAuthToken - verifies if the token exists, and fetches a new one if not\n *\n * @param {String} testKey an optional string used for testing\n *\n * @return {String} The authentication token\n */\nexport const getAuthToken = testKey =>\n  (token\n    ? Promise.resolve(token)\n    : fetch(constants.authUrl(testKey), { method: 'GET' })\n      .then(handleResponse)\n      .then((body) => {\n        token = body.authToken;\n        return body.authToken;\n      }));\n\nexport const setToken = authToken =>\n  Promise.resolve(authToken).then(() => {\n    token = authToken;\n  });\n\nexport const convertParamsToLogismata = (params = {}) => {\n  const newParams = { ...params };\n\n  Object.keys(logismataValues).forEach((key) => {\n    if (params[key] !== undefined) {\n      const newValue = _.findKey(\n        logismataValues[key],\n        val => val === params[key],\n      );\n\n      if (!newValue) {\n        throw new Error('invalid logismata value provided');\n      }\n\n      newParams[key] = Number(newValue);\n    } else {\n      newParams[key] = logismataValues[key].default;\n    }\n  });\n\n  return newParams;\n};\n\nexport const convertToLogismataTaxBase = (taxBase) => {\n  const params = convertParamsToLogismata(taxBase);\n\n  return {\n    age: params.age,\n    children: params.childrenCount,\n    civil: params.civilStatus,\n    confession: params.confession,\n    gross_fortune: params.grossFortune,\n    gross_income: params.grossIncome,\n    income_type: params.incomeBase,\n    locationid: params.locationId,\n    sex: params.sex,\n  };\n};\n\n/**\n * getParamsArray - Returns an array of parameters in the right order\n * for logismata's API\n *\n * @param {String} method the name of the logismata method\n * @param {Object} params an object of values\n *\n * @return {Array}\n */\n\nexport const getParamsArray = (method, params) => {\n  const logismataParams = convertParamsToLogismata(params);\n  switch (method) {\n  case 'getLocationInfo':\n    return [logismataParams.locationId];\n  case 'searchLocations':\n    return [\n      logismataParams.search,\n      logismataParams.language,\n      logismataParams.country,\n    ];\n  case 'calcTaxableIncomeState':\n    // Same as calcTaxableIncomeCountry\n  case 'calcTaxableIncomeCountry':\n    return [\n      logismataParams.locationId,\n      logismataParams.age,\n      logismataParams.civilStatus,\n      logismataParams.confession,\n      logismataParams.childrenCount,\n      logismataParams.grossIncome,\n      logismataParams.isEmployee,\n    ];\n  case 'calcTaxableFortune':\n    return [\n      logismataParams.locationId,\n      logismataParams.age,\n      logismataParams.civilStatus,\n      logismataParams.childrenCount,\n      logismataParams.grossFortune,\n    ];\n  case 'calcDirectAmortization':\n    return [\n      '', // customization\n      convertToLogismataTaxBase(params.taxBase),\n      {\n        amortization_goal: logismataParams.amortizationGoal,\n        duration: logismataParams.duration,\n        has_detailed_amortization: logismataParams.isDetailed,\n        rental_value: logismataParams.rentalValue,\n        maintenance_costs: logismataParams.maintenanceCosts,\n        mortgages: logismataParams.mortgages,\n        new_mortgages: logismataParams.newMortgages,\n      },\n    ];\n  case 'calcIndirectAmortization':\n    return [\n      '', // customization\n      convertToLogismataTaxBase(params.taxBase),\n      {\n        amortization_goal: logismataParams.amortizationGoal,\n        duration: logismataParams.duration,\n        saving_type: logismataParams.savingType,\n        saving_interestrate: logismataParams.savingRate,\n        saving_amount_manual: false,\n        saving_amount: logismataParams.savingAmount,\n        rental_value: logismataParams.rentalValue,\n        maintenance_costs: logismataParams.maintenanceCosts,\n        mortgages: logismataParams.mortgages,\n        new_mortgages: logismataParams.newMortgages,\n      },\n    ];\n  default:\n    throw new Error('invalid logismata method name');\n  }\n};\n\nexport const getTaxBase = (data) => {};\n\nexport const callApi = (method, params) => {\n  const data = JSON.stringify({\n    authToken: token,\n    loan: {\n      method,\n      // Stringify objects in the array, do not stringify strings once again\n      params: [\n        ...getParamsArray(method, params).map(i => (typeof i === 'object' ? JSON.stringify(i) : i)),\n      ],\n    },\n  });\n  return fetch(constants.calcUrl(), {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json', Accept: '*/*' },\n    body: data,\n  }).then(response => response.json());\n};\n\nexport const getLocationId = search =>\n  callApi('searchLocations', {\n    search,\n    country: 'CH',\n    language: 'all',\n  }).then((result) => {\n    if (result.response && result.response.length) {\n      return result.response[result.response.length - 1].id;\n    }\n    throw new Error('Could not find locationId through logismata');\n  });\n\nexport const getIndirectAmortization = () => {};\n\nexport const getDirectAmortization = () => {};\n"]},"hash":"bc555a653b9cc96cacbb1355142255039412e01f"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./bootstrap/demo.js","imported":["default","DemoMethod","DemoPublication"],"specifiers":[{"kind":"named","imported":"default","local":"Demo"},{"kind":"named","imported":"DemoMethod","local":"DemoMethod"},{"kind":"named","imported":"DemoPublication","local":"DemoPublication"}]},{"source":"./bootstrap/intersect","imported":["default","CollectionLink"],"specifiers":[{"kind":"named","imported":"default","local":"Intersect"},{"kind":"named","imported":"CollectionLink","local":"IntersectLink"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/exposure/testing/client.js","filenameRelative":"packages/cultofcoders:grapher/lib/exposure/testing/client.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/exposure/testing/client.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/exposure/testing/client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"client"},"ignored":false,"code":"let Demo, DemoMethod, DemoPublication;\nmodule.watch(require(\"./bootstrap/demo.js\"), {\n    default(v) {\n        Demo = v;\n    },\n\n    DemoMethod(v) {\n        DemoMethod = v;\n    },\n\n    DemoPublication(v) {\n        DemoPublication = v;\n    }\n\n}, 0);\nlet Intersect, IntersectLink;\nmodule.watch(require(\"./bootstrap/intersect\"), {\n    default(v) {\n        Intersect = v;\n    },\n\n    CollectionLink(v) {\n        IntersectLink = v;\n    }\n\n}, 1);\ndescribe('Exposure Tests', function () {\n    it('Should fetch only allowed data and limitations should be applied', function (done) {\n        const query = Demo.createQuery({\n            $options: {\n                limit: 3\n            },\n            restrictedField: 1\n        });\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n            assert.isDefined(res);\n            assert.lengthOf(res, 2);\n            done();\n        });\n    });\n    it('Should not allow me to fetch the graph data, because of maxDepth', function (done) {\n        const query = Demo.createQuery({\n            $options: {\n                limit: 3\n            },\n            restrictedField: 1,\n            children: {\n                myself: {}\n            }\n        });\n        query.fetch((err, res) => {\n            assert.isUndefined(res);\n            assert.isDefined(err);\n            done();\n        });\n    });\n    it('Should return the correct count', function (done) {\n        Meteor.call('exposure_exposure_test.count', {}, function (err, res) {\n            assert.isUndefined(err);\n            assert.equal(3, res);\n            done();\n        });\n    });\n    it('Should return the correct count via query', function (done) {\n        const query = Demo.createQuery({\n            $options: {\n                limit: 1\n            }\n        });\n        query.getCount(function (err, res) {\n            assert.isUndefined(err);\n            assert.equal(3, res);\n            done();\n        });\n    });\n    it('Should should not allow publish but only method', function (done) {\n        const query = DemoMethod.createQuery({\n            _id: 1\n        });\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n            assert.isDefined(res);\n        });\n        const handler = query.subscribe({\n            onStop(e) {\n                done();\n            }\n\n        });\n    });\n    it('Should should not allow method but only publish', function (done) {\n        const query = DemoPublication.createQuery({\n            _id: 1\n        });\n        query.fetch((err, res) => {\n            assert.isDefined(err);\n            assert.isUndefined(res);\n        });\n        query.subscribe({\n            onReady() {\n                done();\n            }\n\n        });\n    });\n    it('Should restrict links # restrictLinks ', function (done) {\n        const query = Demo.createQuery({\n            _id: 1,\n            restrictedLink: {}\n        });\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n\n            _.each(res, item => {\n                assert.isUndefined(item.restrictedLink);\n            });\n\n            assert.isArray(res);\n            assert.isFalse(res.length === 0);\n            done();\n        });\n    });\n    it('Should intersect the body graphs - Method', function (done) {\n        const query = Intersect.createQuery({\n            $filters: {\n                value: 'Hello'\n            },\n            value: 1,\n            privateValue: 1,\n            link: {\n                value: 1,\n                privateValue: 1,\n                myself: {\n                    value: 1\n                }\n            },\n            privateLink: {\n                value: 1,\n                privateValue: 1\n            }\n        });\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n            assert.lengthOf(res, 1);\n\n            const result = _.first(res);\n\n            assert.isDefined(result.value);\n            assert.isUndefined(result.privateValue);\n            assert.isUndefined(result.privateLink);\n            assert.isObject(result.link);\n            assert.isDefined(result.link.value);\n            assert.isUndefined(result.link.privateValue);\n            assert.isUndefined(result.link.myself);\n            done();\n        });\n    });\n    it('Should intersect the body graphs - Subscription', function (done) {\n        const query = Intersect.createQuery({\n            $filters: {\n                value: 'Hello'\n            },\n            value: 1,\n            privateValue: 1,\n            link: {\n                value: 1,\n                privateValue: 1,\n                myself: {\n                    value: 1\n                }\n            },\n            privateLink: {\n                value: 1,\n                privateValue: 1\n            }\n        });\n        const handle = query.subscribe();\n        Tracker.autorun(c => {\n            if (handle.ready()) {\n                c.stop();\n                const res = query.fetch();\n                assert.lengthOf(res, 1);\n\n                const result = _.first(res);\n\n                assert.isDefined(result.value);\n                assert.isUndefined(result.privateValue);\n                assert.isUndefined(result.privateLink);\n                assert.isObject(result.link);\n                assert.isDefined(result.link.value);\n                assert.isUndefined(result.link.privateValue);\n                assert.isUndefined(result.link.myself);\n                done();\n            }\n        });\n    });\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/exposure/testing/client.js"],"names":["Demo","DemoMethod","DemoPublication","module","watch","require","default","v","Intersect","IntersectLink","CollectionLink","describe","it","done","query","createQuery","$options","limit","restrictedField","fetch","err","res","assert","isUndefined","isDefined","lengthOf","children","myself","Meteor","call","equal","getCount","_id","handler","subscribe","onStop","e","onReady","restrictedLink","_","each","item","isArray","isFalse","length","$filters","value","privateValue","link","privateLink","result","first","isObject","handle","Tracker","autorun","c","ready","stop"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/exposure/testing/client.js.map","sourcesContent":["import Demo, {\n    DemoMethod,\n    DemoPublication\n} from './bootstrap/demo.js';\n\nimport Intersect, { CollectionLink as IntersectLink } from './bootstrap/intersect';\n\ndescribe('Exposure Tests', function () {\n    it('Should fetch only allowed data and limitations should be applied', function (done) {\n        const query = Demo.createQuery({\n            $options: {limit: 3},\n            restrictedField: 1\n        });\n\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n            assert.isDefined(res);\n\n            assert.lengthOf(res, 2);\n            done();\n        });\n    });\n\n    it('Should not allow me to fetch the graph data, because of maxDepth', function (done) {\n        const query = Demo.createQuery({\n            $options: {limit: 3},\n            restrictedField: 1,\n            children: {\n                myself: {\n\n                }\n            }\n        });\n\n        query.fetch((err, res) => {\n            assert.isUndefined(res);\n            assert.isDefined(err);\n\n            done();\n        });\n    });\n\n    it('Should return the correct count', function (done) {\n        Meteor.call('exposure_exposure_test.count', {}, function (err, res) {\n            assert.isUndefined(err);\n\n            assert.equal(3, res);\n            done();\n        })\n    });\n\n    it('Should return the correct count via query', function (done) {\n        const query = Demo.createQuery({\n            $options: {limit: 1}\n        });\n\n        query.getCount(function (err, res) {\n            assert.isUndefined(err);\n\n            assert.equal(3, res);\n            done();\n        })\n    });\n\n    it('Should should not allow publish but only method', function (done) {\n        const query = DemoMethod.createQuery({\n            _id: 1\n        });\n\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n            assert.isDefined(res);\n        });\n\n        const handler = query.subscribe({\n            onStop(e) {\n                done();\n            }\n        });\n    });\n\n    it('Should should not allow method but only publish', function (done) {\n        const query = DemoPublication.createQuery({\n            _id: 1\n        });\n\n        query.fetch((err, res) => {\n            assert.isDefined(err);\n            assert.isUndefined(res);\n        });\n\n        query.subscribe({\n            onReady() {\n                done();\n            }\n        });\n    });\n\n\n    it('Should restrict links # restrictLinks ', function (done) {\n        const query = Demo.createQuery({\n            _id: 1,\n            restrictedLink: {}\n        });\n\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n\n            _.each(res, item => {\n                assert.isUndefined(item.restrictedLink)\n            });\n\n            assert.isArray(res);\n            assert.isFalse(res.length === 0);\n\n            done();\n        });\n    });\n\n    it('Should intersect the body graphs - Method', function (done) {\n        const query = Intersect.createQuery({\n            $filters: {\n                value: 'Hello'\n            },\n            value: 1,\n            privateValue: 1,\n            link: {\n                value: 1,\n                privateValue: 1,\n                myself: {\n                    value: 1\n                }\n            },\n            privateLink: {\n                value: 1,\n                privateValue: 1\n            }\n        });\n\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n            assert.lengthOf(res, 1);\n\n            const result = _.first(res);\n\n            assert.isDefined(result.value);\n            assert.isUndefined(result.privateValue);\n            assert.isUndefined(result.privateLink);\n\n            assert.isObject(result.link);\n            assert.isDefined(result.link.value);\n            assert.isUndefined(result.link.privateValue);\n            assert.isUndefined(result.link.myself);\n\n            done();\n        });\n    });\n\n    it('Should intersect the body graphs - Subscription', function (done) {\n        const query = Intersect.createQuery({\n            $filters: {\n                value: 'Hello'\n            },\n            value: 1,\n            privateValue: 1,\n            link: {\n                value: 1,\n                privateValue: 1,\n                myself: {\n                    value: 1\n                }\n            },\n            privateLink: {\n                value: 1,\n                privateValue: 1\n            }\n        });\n\n        const handle = query.subscribe();\n\n        Tracker.autorun((c) => {\n            if (handle.ready()) {\n                c.stop();\n                const res = query.fetch();\n\n                assert.lengthOf(res, 1);\n\n                const result = _.first(res);\n\n                assert.isDefined(result.value);\n                assert.isUndefined(result.privateValue);\n                assert.isUndefined(result.privateLink);\n\n                assert.isObject(result.link);\n                assert.isDefined(result.link.value);\n                assert.isUndefined(result.link.privateValue);\n                assert.isUndefined(result.link.myself);\n\n                done();\n            }\n        });\n    })\n});\n"]},"hash":"3cb8568e0700a2264824552ab9e5def48d48fb45"}

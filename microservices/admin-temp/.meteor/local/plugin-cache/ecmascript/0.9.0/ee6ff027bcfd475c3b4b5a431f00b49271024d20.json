{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"../UserService","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"UserService"}]},{"source":"../..","imported":["Tasks","callMutation","mutations"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"},{"kind":"named","imported":"callMutation","local":"callMutation"},{"kind":"named","imported":"mutations","local":"mutations"}]},{"source":"../../tasks/tasksConstants","imported":["TASK_STATUS","TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"},{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]},{"source":"../..","imported":["SecurityService","createMutator"],"specifiers":[{"kind":"named","imported":"SecurityService","local":"SecurityService"},{"kind":"named","imported":"createMutator","local":"createMutator"}]},{"source":"../mutationDefinitions","imported":["*"],"specifiers":[{"kind":"namespace","local":"defs"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/users/server/mutations.js","filenameRelative":"imports/core/api/users/server/mutations.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/users/server/mutations.js.map","sourceFileName":"imports/core/api/users/server/mutations.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"mutations"},"ignored":false,"code":"\"use strict\";\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 0);\n\nvar _Accounts = void 0;\n\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts: function Accounts(v) {\n    _Accounts = v;\n  }\n}, 1);\nvar UserService = void 0;\nmodule.watch(require(\"../UserService\"), {\n  default: function _default(v) {\n    UserService = v;\n  }\n}, 2);\n\nvar _Tasks = void 0,\n    _callMutation = void 0,\n    _mutations = void 0;\n\nmodule.watch(require(\"../..\"), {\n  Tasks: function Tasks(v) {\n    _Tasks = v;\n  },\n  callMutation: function callMutation(v) {\n    _callMutation = v;\n  },\n  mutations: function mutations(v) {\n    _mutations = v;\n  }\n}, 3);\n\nvar _TASK_STATUS = void 0,\n    _TASK_TYPE = void 0;\n\nmodule.watch(require(\"../../tasks/tasksConstants\"), {\n  TASK_STATUS: function TASK_STATUS(v) {\n    _TASK_STATUS = v;\n  },\n  TASK_TYPE: function TASK_TYPE(v) {\n    _TASK_TYPE = v;\n  }\n}, 4);\n\nvar _SecurityService = void 0,\n    _createMutator = void 0;\n\nmodule.watch(require(\"../..\"), {\n  SecurityService: function SecurityService(v) {\n    _SecurityService = v;\n  },\n  createMutator: function createMutator(v) {\n    _createMutator = v;\n  }\n}, 5);\nvar defs = void 0;\nmodule.watch(require(\"../mutationDefinitions\"), {\n  \"*\": function _(v) {\n    defs = v;\n  }\n}, 6);\n\n_createMutator(defs.DOES_USER_EXIST, function (_ref) {\n  var email = _ref.email;\n  return _Accounts.findUserByEmail(email) != null;\n});\n\n_createMutator(defs.SEND_VERIFICATION_LINK, function (_ref2) {\n  var userId = _ref2.userId;\n\n  if (userId) {\n    _SecurityService.checkCurrentUserIsAdmin();\n  } else {\n    _SecurityService.checkLoggedIn();\n  }\n\n  var id = userId || _Meteor.userId();\n\n  if (_Meteor.isDevelopment) {\n    console.log(\"Not sending verification link in development for userId: \" + id);\n    return false;\n  }\n\n  return _Accounts.sendVerificationEmail(id);\n});\n\n_createMutator(defs.ASSIGN_ADMIN_TO_USER, function (_ref3) {\n  var userId = _ref3.userId,\n      adminId = _ref3.adminId;\n  return UserService.assignAdminToUser({\n    userId: userId,\n    adminId: adminId\n  });\n});\n\n_createMutator(defs.ASSIGN_ADMIN_TO_NEW_USER_TASK, function (_ref4) {\n  var userId = _ref4.userId,\n      adminId = _ref4.adminId,\n      taskId = _ref4.taskId,\n      taskType = _ref4.taskType;\n\n  var assignAdminToUserResult = _callMutation(_mutations.ASSIGN_ADMIN_TO_USER, {\n    userId: userId,\n    adminId: adminId\n  });\n\n  if (assignAdminToUserResult) {\n    _SecurityService.tasks.isAllowedToUpdate(taskId);\n\n    var changeTaskAssignedToResult = _callMutation(_mutations.TASK_CHANGE_ASSIGNED_TO, {\n      taskId: taskId,\n      newAssignee: adminId\n    });\n\n    if (changeTaskAssignedToResult) {\n      _callMutation(_mutations.TASK_CHANGE_STATUS, {\n        taskId: taskId,\n        newStatus: _TASK_STATUS.COMPLETED\n      });\n\n      if (taskType !== _TASK_TYPE.ADD_ASSIGN_TO) {\n        console.log(\"type: \" + _TASK_TYPE.ADD_ASSIGN_TO + \", userId: \" + userId);\n\n        var assignmentTaskId = _Tasks.findOne({\n          type: _TASK_TYPE.ADD_ASSIGNED_TO,\n          userId: userId\n        })._id;\n\n        _callMutation(_mutations.TASK_CHANGE_STATUS, {\n          taskId: assignmentTaskId,\n          newStatus: _TASK_STATUS.COMPLETED\n        });\n      }\n    }\n  }\n});","map":{"version":3,"sources":["imports/core/api/users/server/mutations.js"],"names":["Meteor","module","watch","require","v","Accounts","UserService","default","Tasks","callMutation","mutations","TASK_STATUS","TASK_TYPE","SecurityService","createMutator","defs","DOES_USER_EXIST","email","findUserByEmail","SEND_VERIFICATION_LINK","userId","checkCurrentUserIsAdmin","checkLoggedIn","id","isDevelopment","console","log","sendVerificationEmail","ASSIGN_ADMIN_TO_USER","adminId","assignAdminToUser","ASSIGN_ADMIN_TO_NEW_USER_TASK","taskId","taskType","assignAdminToUserResult","tasks","isAllowedToUpdate","changeTaskAssignedToResult","TASK_CHANGE_ASSIGNED_TO","newAssignee","TASK_CHANGE_STATUS","newStatus","COMPLETED","ADD_ASSIGN_TO","assignmentTaskId","findOne","type","ADD_ASSIGNED_TO","_id"],"mappings":"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","file":"imports/core/api/users/server/mutations.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport UserService from 'core/api/users/UserService';\n// import TaskService from 'core/api/tasks/TaskService';\nimport { Tasks, callMutation, mutations } from 'core/api';\nimport { TASK_STATUS, TASK_TYPE } from 'core/api/tasks/tasksConstants';\nimport { SecurityService, createMutator } from '../..';\nimport * as defs from '../mutationDefinitions';\n\ncreateMutator(\n  defs.DOES_USER_EXIST,\n  ({ email }) => Accounts.findUserByEmail(email) != null,\n);\n\ncreateMutator(defs.SEND_VERIFICATION_LINK, ({ userId }) => {\n  if (userId) {\n    SecurityService.checkCurrentUserIsAdmin();\n  } else {\n    SecurityService.checkLoggedIn();\n  }\n  const id = userId || Meteor.userId();\n\n  if (Meteor.isDevelopment) {\n    console.log(`Not sending verification link in development for userId: ${id}`);\n    return false;\n  }\n\n  return Accounts.sendVerificationEmail(id);\n});\n\ncreateMutator(defs.ASSIGN_ADMIN_TO_USER, ({ userId, adminId }) =>\n  UserService.assignAdminToUser({ userId, adminId }));\n\ncreateMutator(\n  defs.ASSIGN_ADMIN_TO_NEW_USER_TASK,\n  ({ userId, adminId, taskId, taskType }) => {\n    const assignAdminToUserResult = callMutation(\n      mutations.ASSIGN_ADMIN_TO_USER,\n      {\n        userId,\n        adminId,\n      },\n    );\n    if (assignAdminToUserResult) {\n      SecurityService.tasks.isAllowedToUpdate(taskId);\n      const changeTaskAssignedToResult = callMutation(\n        mutations.TASK_CHANGE_ASSIGNED_TO,\n        {\n          taskId,\n          newAssignee: adminId,\n        },\n      );\n      if (changeTaskAssignedToResult) {\n        callMutation(mutations.TASK_CHANGE_STATUS, {\n          taskId,\n          newStatus: TASK_STATUS.COMPLETED,\n        });\n        if (taskType !== TASK_TYPE.ADD_ASSIGN_TO) {\n          console.log(`type: ${TASK_TYPE.ADD_ASSIGN_TO}, userId: ${userId}`);\n          const assignmentTaskId = Tasks.findOne({\n            type: TASK_TYPE.ADD_ASSIGNED_TO,\n            userId,\n          })._id;\n          callMutation(mutations.TASK_CHANGE_STATUS, {\n            taskId: assignmentTaskId,\n            newStatus: TASK_STATUS.COMPLETED,\n          });\n        }\n      }\n    }\n  },\n);\n"]},"hash":"ee6ff027bcfd475c3b4b5a431f00b49271024d20"}

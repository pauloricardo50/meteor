{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./query/query.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Query"}]},{"source":"./namedQuery/namedQuery.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"NamedQuery"}]},{"source":"./namedQuery/store.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"NamedQueryStore"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/createQuery.js","filenameRelative":"packages/cultofcoders:grapher/lib/createQuery.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/createQuery.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/createQuery.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"createQuery"},"ignored":false,"code":"let Query;\nmodule.watch(require(\"./query/query.js\"), {\n    default(v) {\n        Query = v;\n    }\n\n}, 0);\nlet NamedQuery;\nmodule.watch(require(\"./namedQuery/namedQuery.js\"), {\n    default(v) {\n        NamedQuery = v;\n    }\n\n}, 1);\nlet NamedQueryStore;\nmodule.watch(require(\"./namedQuery/store.js\"), {\n    default(v) {\n        NamedQueryStore = v;\n    }\n\n}, 2);\nmodule.exportDefault((...args) => {\n    if (typeof args[0] === 'string') {\n        let [name, body, options] = args;\n        options = options || {}; // It's a resolver query\n\n        if (_.isFunction(body)) {\n            return createNamedQuery(name, null, body, options);\n        }\n\n        const entryPointName = _.first(_.keys(body));\n\n        const collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            throw new Meteor.Error('invalid-name', `We could not find any collection with the name \"${entryPointName}\". Make sure it is imported prior to using this`);\n        }\n\n        return createNamedQuery(name, collection, body[entryPointName], options);\n    } else {\n        // Query Creation, it can have an endpoint as collection or as a NamedQuery\n        let [body, options] = args;\n        options = options || {};\n\n        const entryPointName = _.first(_.keys(body));\n\n        const collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            if (Meteor.isDevelopment && !NamedQueryStore.get(entryPointName)) {\n                console.warn(`You are creating a query with the entry point \"${entryPointName}\", but there was no collection found for it (maybe you forgot to import it client-side?). It's assumed that it's referencing a NamedQuery.`);\n            }\n\n            return createNamedQuery(entryPointName, null, {}, {\n                params: body[entryPointName]\n            });\n        } else {\n            return createNormalQuery(collection, body[entryPointName], options);\n        }\n    }\n});\n\nfunction createNamedQuery(name, collection, body, options = {}) {\n    // if it exists already, we re-use it\n    const namedQuery = NamedQueryStore.get(name);\n    let query;\n\n    if (!namedQuery) {\n        query = new NamedQuery(name, collection, body, options);\n        NamedQueryStore.add(name, query);\n    } else {\n        query = namedQuery.clone(options.params);\n    }\n\n    return query;\n}\n\nfunction createNormalQuery(collection, body, options) {\n    return new Query(collection, body, options);\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/createQuery.js"],"names":["Query","module","watch","require","default","v","NamedQuery","NamedQueryStore","exportDefault","args","name","body","options","_","isFunction","createNamedQuery","entryPointName","first","keys","collection","Mongo","Collection","get","Meteor","Error","isDevelopment","console","warn","params","createNormalQuery","namedQuery","query","add","clone"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/createQuery.js.map","sourcesContent":["import Query from './query/query.js';\nimport NamedQuery from './namedQuery/namedQuery.js';\nimport NamedQueryStore from './namedQuery/store.js';\n\n/**\n * This is a polymorphic function, it allows you to create a query as an object\n * or it also allows you to re-use an existing query if it's a named one\n *\n * @param args\n * @returns {*}\n */\nexport default (...args) => {\n    if (typeof args[0] === 'string') {\n        let [name, body, options] = args;\n        options = options || {};\n\n        // It's a resolver query\n        if (_.isFunction(body)) {\n            return createNamedQuery(name, null, body, options);\n        }\n\n        const entryPointName = _.first(_.keys(body));\n        const collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            throw new Meteor.Error('invalid-name', `We could not find any collection with the name \"${entryPointName}\". Make sure it is imported prior to using this`)\n        }\n\n        return createNamedQuery(name, collection, body[entryPointName], options);\n    } else {\n        // Query Creation, it can have an endpoint as collection or as a NamedQuery\n        let [body, options] = args;\n        options = options || {};\n\n        const entryPointName = _.first(_.keys(body));\n        const collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            if (Meteor.isDevelopment && !NamedQueryStore.get(entryPointName)) {\n                console.warn(`You are creating a query with the entry point \"${entryPointName}\", but there was no collection found for it (maybe you forgot to import it client-side?). It's assumed that it's referencing a NamedQuery.`)\n            }\n\n            return createNamedQuery(entryPointName, null, {}, {params: body[entryPointName]});\n        } else {\n            return createNormalQuery(collection, body[entryPointName], options);\n        }\n    }\n}\n\nfunction createNamedQuery(name, collection, body, options = {}) {\n    // if it exists already, we re-use it\n    const namedQuery = NamedQueryStore.get(name);\n    let query;\n\n    if (!namedQuery) {\n        query = new NamedQuery(name, collection, body, options);\n        NamedQueryStore.add(name, query);\n    } else {\n        query = namedQuery.clone(options.params);\n    }\n\n    return query;\n}\n\nfunction createNormalQuery(collection, body, options)  {\n    return new Query(collection, body, options);\n}\n"]},"hash":"6126a8c1a4b70326d69d20e01b0158851235d80a"}

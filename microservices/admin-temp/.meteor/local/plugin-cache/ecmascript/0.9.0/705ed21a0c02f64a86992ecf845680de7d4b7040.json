{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"lodash/isArray","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"isArray"}]},{"source":"lodash/omit","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"omit"}]},{"source":"react-intl","imported":["FormattedMessage"],"specifiers":[{"kind":"named","imported":"FormattedMessage","local":"FormattedMessage"}]},{"source":"react-bootstrap/lib/Popover","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Popover"}]},{"source":"../DialogSimple","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DialogSimple"}]},{"source":"../../utils/analytics","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"track"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/Translation/Tooltip.jsx","filenameRelative":"imports/core/components/Translation/Tooltip.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/Translation/Tooltip.jsx.map","sourceFileName":"imports/core/components/Translation/Tooltip.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Tooltip"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  default: function _default(v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  default: function _default(v) {\n    PropTypes = v;\n  }\n}, 1);\nvar isArray = void 0;\nmodule.watch(require(\"lodash/isArray\"), {\n  default: function _default(v) {\n    isArray = v;\n  }\n}, 2);\nvar omit = void 0;\nmodule.watch(require(\"lodash/omit\"), {\n  default: function _default(v) {\n    omit = v;\n  }\n}, 3);\n\nvar _FormattedMessage = void 0;\n\nmodule.watch(require(\"react-intl\"), {\n  FormattedMessage: function FormattedMessage(v) {\n    _FormattedMessage = v;\n  }\n}, 4);\nvar Popover = void 0;\nmodule.watch(require(\"react-bootstrap/lib/Popover\"), {\n  default: function _default(v) {\n    Popover = v;\n  }\n}, 5);\nvar DialogSimple = void 0;\nmodule.watch(require(\"../DialogSimple\"), {\n  default: function _default(v) {\n    DialogSimple = v;\n  }\n}, 6);\nvar track = void 0;\nmodule.watch(require(\"../../utils/analytics\"), {\n  default: function _default(v) {\n    track = v;\n  }\n}, 7);\n\n// Required functions if react motion is used, which wraps the popover\n// and shifts it down or right depending on the placement\nvar getPositionTop = function getPositionTop(top, id, placement) {\n  if ((placement === 'left' || placement === 'right') && document.getElementById(id)) {\n    return top - 0.5 * document.getElementById(id).clientHeight;\n  }\n\n  return top;\n};\n\nvar getPositionLeft = function getPositionLeft(left, id, placement) {\n  if ((placement === 'top' || placement === 'bottom') && document.getElementById(id)) {\n    return left - 0.5 * document.getElementById(id).clientWidth;\n  }\n\n  return left;\n};\n\nvar Tooltip = function Tooltip(props) {\n  var placement = props.placement,\n      positionTop = props.positionTop,\n      positionLeft = props.positionLeft,\n      id = props.id,\n      pureId = props.pureId,\n      hide = props.hide,\n      match = props.match,\n      dialogLabel = props.dialogLabel;\n  var content = null;\n  var baseId = id;\n\n  if (isArray(id)) {\n    baseId = id[0];\n    content = React.createElement(\n      \"span\",\n      {\n        style: {\n          display: 'flex',\n          flexDirection: 'column'\n        }\n      },\n      React.createElement(_FormattedMessage, {\n        id: pureId ? baseId : \"tooltip.\" + baseId\n      }),\n      React.createElement(\n        DialogSimple,\n        {\n          title: match // rootStyle={{ alignSelf: 'center' }}\n          // Dialogs normally have zIndex of 1500\n          // Usually dialogs should be behind tooltips (which are\n          // at zindex 1501), but when you trigger a dialog from a tooltip,\n          // it should be above the previous tooltip, hence 1502\n          ,\n          style: {\n            zIndex: 1502\n          },\n          buttonStyle: {\n            marginTop: 16\n          },\n          label: dialogLabel || React.createElement(_FormattedMessage, {\n            id: \"general.learnMore\"\n          }),\n          autoFocus: true,\n          onEntered: function onEntered() {\n            return track('Tooltip - opened dialog', {\n              tooltipId: baseId\n            });\n          },\n          cancelOnly: true\n        },\n        React.createElement(_FormattedMessage, {\n          id: pureId ? baseId + \"2\" : \"tooltip2.\" + baseId,\n          values: {\n            verticalSpace: React.createElement(\n              \"span\",\n              null,\n              React.createElement(\"br\", null),\n              React.createElement(\"br\", null)\n            )\n          }\n        })\n      )\n    );\n  } else {\n    content = React.createElement(_FormattedMessage, {\n      id: pureId ? id : \"tooltip.\" + id\n    });\n  }\n\n  var passedProps = omit(props, ['trigger', 'pureId', 'hide', 'match']);\n  return (// <Transition hide={hide}>\n    //   {({ key, style }) =>\n    React.createElement(\n      Popover,\n      (0, _extends3.default)({}, passedProps, {\n        id: baseId // key={key}\n        // style={{ opacity: style.opacity, transform: `scale(${style.scale})` }}\n        // positionTop={getPositionTop(positionTop, baseId, placement)}\n        // positionLeft={getPositionLeft(positionLeft, baseId, placement)}\n\n      }),\n      content\n    ) // }\n    // </Transition>\n\n  );\n};\n\nTooltip.propTypes = {};\nmodule.exportDefault(Tooltip);","map":{"version":3,"sources":["imports/core/components/Translation/Tooltip.jsx"],"names":["React","module","watch","require","default","v","PropTypes","isArray","omit","FormattedMessage","Popover","DialogSimple","track","getPositionTop","top","id","placement","document","getElementById","clientHeight","getPositionLeft","left","clientWidth","Tooltip","props","positionTop","positionLeft","pureId","hide","match","dialogLabel","content","baseId","display","flexDirection","zIndex","marginTop","tooltipId","verticalSpace","passedProps","propTypes","exportDefault"],"mappings":"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","file":"imports/core/components/Translation/Tooltip.jsx.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport isArray from 'lodash/isArray';\nimport omit from 'lodash/omit';\n\nimport { FormattedMessage } from 'react-intl';\nimport Popover from 'react-bootstrap/lib/Popover';\n// import Transition from './Transition';\nimport DialogSimple from 'core/components/DialogSimple';\n\nimport track from 'core/utils/analytics';\n\n// Required functions if react motion is used, which wraps the popover\n// and shifts it down or right depending on the placement\nconst getPositionTop = (top, id, placement) => {\n  if (\n    (placement === 'left' || placement === 'right') &&\n    document.getElementById(id)\n  ) {\n    return top - 0.5 * document.getElementById(id).clientHeight;\n  }\n\n  return top;\n};\n\nconst getPositionLeft = (left, id, placement) => {\n  if (\n    (placement === 'top' || placement === 'bottom') &&\n    document.getElementById(id)\n  ) {\n    return left - 0.5 * document.getElementById(id).clientWidth;\n  }\n\n  return left;\n};\n\nconst Tooltip = (props) => {\n  const {\n    placement,\n    positionTop,\n    positionLeft,\n    id,\n    pureId,\n    hide,\n    match,\n    dialogLabel,\n  } = props;\n\n  let content = null;\n  let baseId = id;\n\n  if (isArray(id)) {\n    baseId = id[0];\n    content = (\n      <span style={{ display: 'flex', flexDirection: 'column' }}>\n        <FormattedMessage id={pureId ? baseId : `tooltip.${baseId}`} />\n        <DialogSimple\n          title={match}\n          // rootStyle={{ alignSelf: 'center' }}\n          // Dialogs normally have zIndex of 1500\n          // Usually dialogs should be behind tooltips (which are\n          // at zindex 1501), but when you trigger a dialog from a tooltip,\n          // it should be above the previous tooltip, hence 1502\n          style={{ zIndex: 1502 }}\n          buttonStyle={{ marginTop: 16 }}\n          label={dialogLabel || <FormattedMessage id=\"general.learnMore\" />}\n          autoFocus\n          onEntered={() =>\n            track('Tooltip - opened dialog', { tooltipId: baseId })\n          }\n          cancelOnly\n        >\n          <FormattedMessage\n            id={pureId ? `${baseId}2` : `tooltip2.${baseId}`}\n            values={{\n              verticalSpace: (\n                <span>\n                  <br />\n                  <br />\n                </span>\n              ),\n            }}\n          />\n        </DialogSimple>\n      </span>\n    );\n  } else {\n    content = <FormattedMessage id={pureId ? id : `tooltip.${id}`} />;\n  }\n\n  const passedProps = omit(props, ['trigger', 'pureId', 'hide', 'match']);\n\n  return (\n    // <Transition hide={hide}>\n    //   {({ key, style }) =>\n    <Popover\n      {...passedProps}\n      id={baseId}\n      // key={key}\n      // style={{ opacity: style.opacity, transform: `scale(${style.scale})` }}\n      // positionTop={getPositionTop(positionTop, baseId, placement)}\n      // positionLeft={getPositionLeft(positionLeft, baseId, placement)}\n    >\n      {content}\n    </Popover>\n    // }\n    // </Transition>\n  );\n};\n\nTooltip.propTypes = {};\n\nexport default Tooltip;\n"]},"hash":"705ed21a0c02f64a86992ecf845680de7d4b7040"}

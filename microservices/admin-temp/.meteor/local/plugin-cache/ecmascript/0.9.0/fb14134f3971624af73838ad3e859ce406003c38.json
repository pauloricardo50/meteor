{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/alanning:roles","imported":["Roles"],"specifiers":[{"kind":"named","imported":"Roles","local":"Roles"}]},{"source":"../events","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"EventService"}]},{"source":"./userConstants","imported":["USER_EVENTS"],"specifiers":[{"kind":"named","imported":"USER_EVENTS","local":"USER_EVENTS"}]},{"source":"../users","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Users"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/users/UserService.js","filenameRelative":"imports/core/api/users/UserService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/users/UserService.js.map","sourceFileName":"imports/core/api/users/UserService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"UserService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _Accounts = void 0;\n\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts: function Accounts(v) {\n    _Accounts = v;\n  }\n}, 0);\n\nvar _Roles = void 0;\n\nmodule.watch(require(\"meteor/alanning:roles\"), {\n  Roles: function Roles(v) {\n    _Roles = v;\n  }\n}, 1);\nvar EventService = void 0;\nmodule.watch(require(\"../events\"), {\n  default: function _default(v) {\n    EventService = v;\n  }\n}, 2);\n\nvar _USER_EVENTS = void 0;\n\nmodule.watch(require(\"./userConstants\"), {\n  USER_EVENTS: function USER_EVENTS(v) {\n    _USER_EVENTS = v;\n  }\n}, 3);\nvar Users = void 0;\nmodule.watch(require(\"../users\"), {\n  default: function _default(v) {\n    Users = v;\n  }\n}, 4);\n\nvar UserService = function UserService() {\n  var _this = this;\n\n  (0, _classCallCheck3.default)(this, UserService);\n\n  this.createUser = function (_ref) {\n    var options = _ref.options,\n        role = _ref.role;\n\n    var newUserId = _Accounts.createUser(options, function (err) {\n      if (err) console.log(err);else {\n        _Roles.addUsersToRoles(newUserId, role); // Emitter.emit(Events.ITEM_CREATED, { newUserId });\n\n\n        if (role === 'user') {\n          EventService.emit(_USER_EVENTS.USER_CREATED, {\n            newUserId: newUserId\n          });\n        }\n\n        return newUserId;\n      }\n      return null;\n    });\n  };\n\n  this.remove = function (_ref2) {\n    var userId = _ref2.userId;\n    Users.remove(userId);\n  };\n\n  this.update = function (_ref3) {\n    var userId = _ref3.userId,\n        user = _ref3.user;\n    Users.update(userId, {\n      $set: user\n    });\n  };\n\n  this.assignAdminToUser = function (_ref4) {\n    var userId = _ref4.userId,\n        adminId = _ref4.adminId;\n\n    _this.update({\n      userId: userId,\n      user: {\n        assignedTo: adminId\n      }\n    });\n  };\n\n  this.getAdmins = function () {\n    return Users.find({\n      roles: {\n        $in: ['admin']\n      }\n    }).fetch();\n  };\n};\n\nmodule.exportDefault(new UserService());","map":{"version":3,"sources":["imports/core/api/users/UserService.js"],"names":["Accounts","module","watch","require","v","Roles","EventService","default","USER_EVENTS","Users","UserService","createUser","options","role","newUserId","err","console","log","addUsersToRoles","emit","USER_CREATED","remove","userId","update","user","$set","assignAdminToUser","adminId","assignedTo","getAdmins","find","roles","$in","fetch","exportDefault"],"mappings":";;;;;;;;AAAA,IAAIA,kBAAJ;;AAAaC,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACH,UAAD,oBAAUI,CAAV,EAAY;AAACJ,gBAASI,CAAT;AAAW;AAAxB,CAA7C,EAAuE,CAAvE;;AAA0E,IAAIC,eAAJ;;AAAUJ,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACE,OAAD,iBAAOD,CAAP,EAAS;AAACC,aAAMD,CAAN;AAAQ;AAAlB,CAA9C,EAAkE,CAAlE;AAAqE,IAAIE,qBAAJ;AAAiBL,OAAOC,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACI,SAAD,oBAASH,CAAT,EAAW;AAACE,mBAAaF,CAAb;AAAe;AAA3B,CAAlC,EAA+D,CAA/D;;AAAkE,IAAII,qBAAJ;;AAAgBP,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACK,aAAD,uBAAaJ,CAAb,EAAe;AAACI,mBAAYJ,CAAZ;AAAc;AAA9B,CAAxC,EAAwE,CAAxE;AAA2E,IAAIK,cAAJ;AAAUR,OAAOC,KAAP,CAAaC,QAAQ,UAAR,CAAb,EAAiC;AAACI,SAAD,oBAASH,CAAT,EAAW;AAACK,YAAML,CAAN;AAAQ;AAApB,CAAjC,EAAuD,CAAvD;;IAOxVM,W;;;;;OACJC,U,GAAa,gBAAuB;AAAA,QAApBC,OAAoB,QAApBA,OAAoB;AAAA,QAAXC,IAAW,QAAXA,IAAW;;AAClC,QAAMC,YAAYd,UAASW,UAAT,CAAoBC,OAApB,EAA6B,UAACG,GAAD,EAAS;AACtD,UAAIA,GAAJ,EAASC,QAAQC,GAAR,CAAYF,GAAZ,EAAT,KACK;AACHV,eAAMa,eAAN,CAAsBJ,SAAtB,EAAiCD,IAAjC,EADG,CAEH;;;AACA,YAAIA,SAAS,MAAb,EAAqB;AACnBP,uBAAaa,IAAb,CAAkBX,aAAYY,YAA9B,EAA4C;AAAEN;AAAF,WAA5C;AACD;;AACD,eAAOA,SAAP;AACD;AACD,aAAO,IAAP;AACD,KAXiB,CAAlB;AAYD,G;;OAEDO,M,GAAS,iBAAgB;AAAA,QAAbC,MAAa,SAAbA,MAAa;AACvBb,UAAMY,MAAN,CAAaC,MAAb;AACD,G;;OAEDC,M,GAAS,iBAAsB;AAAA,QAAnBD,MAAmB,SAAnBA,MAAmB;AAAA,QAAXE,IAAW,SAAXA,IAAW;AAC7Bf,UAAMc,MAAN,CAAaD,MAAb,EAAqB;AAAEG,YAAMD;AAAR,KAArB;AACD,G;;OAEDE,iB,GAAoB,iBAAyB;AAAA,QAAtBJ,MAAsB,SAAtBA,MAAsB;AAAA,QAAdK,OAAc,SAAdA,OAAc;;AAC3C,UAAKJ,MAAL,CAAY;AACVD,oBADU;AAEVE,YAAM;AAAEI,oBAAYD;AAAd;AAFI,KAAZ;AAID,G;;OAEDE,S,GAAY;AAAA,WAAMpB,MAAMqB,IAAN,CAAW;AAAEC,aAAO;AAAEC,aAAK,CAAC,OAAD;AAAP;AAAT,KAAX,EAA0CC,KAA1C,EAAN;AAAA,G;;;AAtCdhC,OAAOiC,aAAP,CAyCe,IAAIxB,WAAJ,EAzCf","file":"imports/core/api/users/UserService.js.map","sourcesContent":["import { Accounts } from 'meteor/accounts-base';\nimport { Roles } from 'meteor/alanning:roles';\n// import { Emitter, Events } from '/core/api/users';\nimport EventService from 'core/api/events';\nimport { USER_EVENTS } from './userConstants';\nimport Users from '../users';\n\nclass UserService {\n  createUser = ({ options, role }) => {\n    const newUserId = Accounts.createUser(options, (err) => {\n      if (err) console.log(err);\n      else {\n        Roles.addUsersToRoles(newUserId, role);\n        // Emitter.emit(Events.ITEM_CREATED, { newUserId });\n        if (role === 'user') {\n          EventService.emit(USER_EVENTS.USER_CREATED, { newUserId });\n        }\n        return newUserId;\n      }\n      return null;\n    });\n  };\n\n  remove = ({ userId }) => {\n    Users.remove(userId);\n  };\n\n  update = ({ userId, user }) => {\n    Users.update(userId, { $set: user });\n  };\n\n  assignAdminToUser = ({ userId, adminId }) => {\n    this.update({\n      userId,\n      user: { assignedTo: adminId },\n    });\n  };\n\n  getAdmins = () => Users.find({ roles: { $in: ['admin'] } }).fetch();\n}\n\nexport default new UserService();\n"]},"hash":"fb14134f3971624af73838ad3e859ce406003c38"}

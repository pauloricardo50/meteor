{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"..","imported":["Borrowers","Loans","Properties","Tasks"],"specifiers":[{"kind":"named","imported":"Borrowers","local":"Borrowers"},{"kind":"named","imported":"Loans","local":"Loans"},{"kind":"named","imported":"Properties","local":"Properties"},{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"./queries/tasksUnassigned","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"unassignedTasksQuery"}]},{"source":"../borrowers/queries/borrowerAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"borrowerAssignedToQuery"}]},{"source":"../loans/queries/loanAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"loanAssignedToQuery"}]},{"source":"../properties/queries/propertyAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"propertyAssignedToQuery"}]},{"source":"./tasksConstants","imported":["TASK_STATUS","TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"},{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]},{"source":"fs","imported":["truncateSync"],"specifiers":[{"kind":"named","imported":"truncateSync","local":"truncateSync"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/tasks/TaskService.js","filenameRelative":"imports/core/api/tasks/TaskService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/tasks/TaskService.js.map","sourceFileName":"imports/core/api/tasks/TaskService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TaskService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 0);\n\nvar _Borrowers = void 0,\n    _Loans = void 0,\n    _Properties = void 0,\n    _Tasks = void 0;\n\nmodule.watch(require(\"..\"), {\n  Borrowers: function Borrowers(v) {\n    _Borrowers = v;\n  },\n  Loans: function Loans(v) {\n    _Loans = v;\n  },\n  Properties: function Properties(v) {\n    _Properties = v;\n  },\n  Tasks: function Tasks(v) {\n    _Tasks = v;\n  }\n}, 1);\nvar unassignedTasksQuery = void 0;\nmodule.watch(require(\"./queries/tasksUnassigned\"), {\n  default: function _default(v) {\n    unassignedTasksQuery = v;\n  }\n}, 2);\nvar borrowerAssignedToQuery = void 0;\nmodule.watch(require(\"../borrowers/queries/borrowerAssignedTo\"), {\n  default: function _default(v) {\n    borrowerAssignedToQuery = v;\n  }\n}, 3);\nvar loanAssignedToQuery = void 0;\nmodule.watch(require(\"../loans/queries/loanAssignedTo\"), {\n  default: function _default(v) {\n    loanAssignedToQuery = v;\n  }\n}, 4);\nvar propertyAssignedToQuery = void 0;\nmodule.watch(require(\"../properties/queries/propertyAssignedTo\"), {\n  default: function _default(v) {\n    propertyAssignedToQuery = v;\n  }\n}, 5);\n\nvar _TASK_STATUS = void 0,\n    _TASK_TYPE = void 0;\n\nmodule.watch(require(\"./tasksConstants\"), {\n  TASK_STATUS: function TASK_STATUS(v) {\n    _TASK_STATUS = v;\n  },\n  TASK_TYPE: function TASK_TYPE(v) {\n    _TASK_TYPE = v;\n  }\n}, 6);\n\nvar _truncateSync = void 0;\n\nmodule.watch(require(\"fs\"), {\n  truncateSync: function truncateSync(v) {\n    _truncateSync = v;\n  }\n}, 7);\n\nvar TaskService = function TaskService() {\n  var _this = this;\n\n  (0, _classCallCheck3.default)(this, TaskService);\n\n  this.insert = function (params) {\n    var type = params.type,\n        borrowerId = params.borrowerId,\n        loanId = params.loanId,\n        propertyId = params.propertyId,\n        assignedTo = params.assignedTo,\n        createdBy = params.createdBy;\n    console.log(params);\n\n    if (type !== _TASK_TYPE.ADD_ASSIGNED_TO) {\n      var existingTask = _Tasks.findOne({\n        type: type,\n        borrowerId: borrowerId,\n        loanId: loanId,\n        propertyId: propertyId,\n        status: _TASK_STATUS.ACTIVE\n      });\n\n      if (existingTask) {\n        throw new _Meteor.Error('duplicate active task');\n      }\n    }\n\n    var relatedAssignedTo = assignedTo;\n\n    if (!relatedAssignedTo) {\n      // some tasks may not be related to any doc,\n      // in that case no need for assignedTo field\n      if (borrowerId || loanId || propertyId) {\n        relatedAssignedTo = _this.getRelatedDocAssignedTo({\n          borrowerId: borrowerId,\n          loanId: loanId,\n          propertyId: propertyId\n        });\n      }\n    }\n\n    console.log(relatedAssignedTo);\n    return _Tasks.insert({\n      type: type,\n      assignedTo: relatedAssignedTo,\n      createdBy: createdBy,\n      borrowerId: borrowerId,\n      loanId: loanId,\n      propertyId: propertyId\n    });\n  };\n\n  this.insertNewUserTask = function (_ref) {\n    var type = _ref.type,\n        userId = _ref.userId;\n\n    if (type !== _TASK_TYPE.ADD_ASSIGNED_TO) {\n      return undefined;\n    }\n\n    return _Tasks.insert({\n      type: type,\n      userId: userId\n    });\n  };\n\n  this.getRelatedDocAssignedTo = function (_ref2) {\n    var borrowerId = _ref2.borrowerId,\n        loanId = _ref2.loanId,\n        propertyId = _ref2.propertyId;\n\n    if (loanId) {\n      return loanAssignedToQuery.clone({\n        loanId: loanId\n      }).fetch().user.assignedTo;\n    }\n\n    if (borrowerId) {\n      return borrowerAssignedToQuery.clone({\n        borrowerId: borrowerId\n      }).fetch().user.assignedTo;\n    }\n\n    if (propertyId) {\n      return propertyAssignedToQuery.clone({\n        propertyId: propertyId\n      }).fetch().user.assignedTo;\n    }\n\n    return undefined;\n  };\n\n  this.remove = function (_ref3) {\n    var taskId = _ref3.taskId;\n    return _Tasks.remove(taskId);\n  };\n\n  this.update = function (_ref4) {\n    var taskId = _ref4.taskId,\n        task = _ref4.task;\n    return _Tasks.update(taskId, {\n      $set: task\n    });\n  };\n\n  this.complete = function (_ref5) {\n    var taskId = _ref5.taskId;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        status: _TASK_STATUS.COMPLETED,\n        completedAt: new Date()\n      }\n    });\n  };\n\n  this.completeByType = function (_ref6) {\n    var type = _ref6.type,\n        loanId = _ref6.loanId,\n        newStatus = _ref6.newStatus;\n\n    var taskToComplete = _Tasks.findOne({\n      loanId: loanId,\n      type: type,\n      status: _TASK_STATUS.ACTIVE\n    });\n\n    if (!taskToComplete) {\n      throw new _Meteor.Error(\"task couldn't be found\");\n    }\n\n    return _this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || _TASK_STATUS.COMPLETED,\n        completedAt: new Date()\n      }\n    });\n  };\n\n  this.changeStatus = function (_ref7) {\n    var taskId = _ref7.taskId,\n        newStatus = _ref7.newStatus;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        status: newStatus\n      }\n    });\n  };\n\n  this.changeAssignedTo = function (_ref8) {\n    var taskId = _ref8.taskId,\n        newAssignee = _ref8.newAssignee;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        assignedTo: newAssignee\n      }\n    });\n  };\n\n  this.isRelatedToUser = function (_ref9) {\n    var task = _ref9.task,\n        userId = _ref9.userId;\n\n    if (task.userId && task.userId === userId) {\n      return true;\n    }\n\n    if (task.borrower && task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n\n    if (task.loan && task.loan.user._id === userId) {\n      return true;\n    }\n\n    if (task.property && task.property.propertyAssignee === userId) {\n      return true;\n    }\n\n    return false;\n  };\n\n  this.getRelatedTo = function (_ref10) {\n    var task = _ref10.task;\n\n    if (task.borrower) {\n      return task.borrower.user._id;\n    }\n\n    if (task.loan) {\n      return task.loan.user._id;\n    }\n\n    if (task.property) {\n      return task.property.user._id;\n    }\n\n    return undefined;\n  };\n\n  this.assignAllTasksToAdmin = function (_ref11) {\n    var userId = _ref11.userId,\n        newAssignee = _ref11.newAssignee;\n    var unassignedTasks = unassignedTasksQuery.fetch();\n    unassignedTasks.map(function (task) {\n      var isRelatedToUser = _this.isRelatedToUser({\n        task: task,\n        userId: userId\n      });\n\n      if (isRelatedToUser) {\n        var taskId = task._id;\n\n        _this.update({\n          taskId: taskId,\n          task: {\n            assignedTo: newAssignee\n          }\n        });\n      }\n\n      return task;\n    });\n  };\n};\n\nmodule.exportDefault(new TaskService());","map":{"version":3,"sources":["imports/core/api/tasks/TaskService.js"],"names":["Meteor","module","watch","require","v","Borrowers","Loans","Properties","Tasks","unassignedTasksQuery","default","borrowerAssignedToQuery","loanAssignedToQuery","propertyAssignedToQuery","TASK_STATUS","TASK_TYPE","truncateSync","TaskService","insert","params","type","borrowerId","loanId","propertyId","assignedTo","createdBy","console","log","ADD_ASSIGNED_TO","existingTask","findOne","status","ACTIVE","Error","relatedAssignedTo","getRelatedDocAssignedTo","insertNewUserTask","userId","undefined","clone","fetch","user","remove","taskId","update","task","$set","complete","COMPLETED","completedAt","Date","completeByType","newStatus","taskToComplete","_id","changeStatus","changeAssignedTo","newAssignee","isRelatedToUser","borrower","borrowerAssignee","loan","property","propertyAssignee","getRelatedTo","assignAllTasksToAdmin","unassignedTasks","map","exportDefault"],"mappings":"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","file":"imports/core/api/tasks/TaskService.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Borrowers, Loans, Properties, Tasks } from 'core/api';\nimport unassignedTasksQuery from 'core/api/tasks/queries/tasksUnassigned';\nimport borrowerAssignedToQuery from 'core/api/borrowers/queries/borrowerAssignedTo';\nimport loanAssignedToQuery from 'core/api/loans/queries/loanAssignedTo';\nimport propertyAssignedToQuery from 'core/api/properties/queries/propertyAssignedTo';\nimport { TASK_STATUS, TASK_TYPE } from './tasksConstants';\nimport { truncateSync } from 'fs';\n\nclass TaskService {\n  insert = (params) => {\n    const {\n      type,\n      borrowerId,\n      loanId,\n      propertyId,\n      assignedTo,\n      createdBy,\n    } = params;\n    console.log(params);\n    if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n      const existingTask = Tasks.findOne({\n        type,\n        borrowerId,\n        loanId,\n        propertyId,\n        status: TASK_STATUS.ACTIVE,\n      });\n      if (existingTask) {\n        throw new Meteor.Error('duplicate active task');\n      }\n    }\n\n    let relatedAssignedTo = assignedTo;\n    if (!relatedAssignedTo) {\n      // some tasks may not be related to any doc,\n      // in that case no need for assignedTo field\n      if (borrowerId || loanId || propertyId) {\n        relatedAssignedTo = this.getRelatedDocAssignedTo({\n          borrowerId,\n          loanId,\n          propertyId,\n        });\n      }\n    }\n    console.log(relatedAssignedTo);\n\n    return Tasks.insert({\n      type,\n      assignedTo: relatedAssignedTo,\n      createdBy,\n      borrowerId,\n      loanId,\n      propertyId,\n    });\n  };\n\n  insertNewUserTask = ({ type, userId }) => {\n    if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n      return undefined;\n    }\n\n    return Tasks.insert({\n      type,\n      userId,\n    });\n  };\n\n  getRelatedDocAssignedTo = ({ borrowerId, loanId, propertyId }) => {\n    if (loanId) {\n      return loanAssignedToQuery\n        .clone({\n          loanId,\n        })\n        .fetch().user.assignedTo;\n    }\n    if (borrowerId) {\n      return borrowerAssignedToQuery\n        .clone({\n          borrowerId,\n        })\n        .fetch().user.assignedTo;\n    }\n    if (propertyId) {\n      return propertyAssignedToQuery\n        .clone({\n          propertyId,\n        })\n        .fetch().user.assignedTo;\n    }\n    return undefined;\n  };\n\n  remove = ({ taskId }) => Tasks.remove(taskId);\n\n  update = ({ taskId, task }) => Tasks.update(taskId, { $set: task });\n\n  complete = ({ taskId }) =>\n    this.update({\n      taskId,\n      task: {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n\n  completeByType = ({ type, loanId, newStatus }) => {\n    const taskToComplete = Tasks.findOne({\n      loanId,\n      type,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (!taskToComplete) {\n      throw new Meteor.Error(\"task couldn't be found\");\n    }\n\n    return this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n  };\n\n  changeStatus = ({ taskId, newStatus }) =>\n    this.update({ taskId, task: { status: newStatus } });\n\n  changeAssignedTo = ({ taskId, newAssignee }) =>\n    this.update({\n      taskId,\n      task: { assignedTo: newAssignee },\n    });\n\n  isRelatedToUser = ({ task, userId }) => {\n    if (task.userId && task.userId === userId) {\n      return true;\n    }\n    if (task.borrower && task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n    if (task.loan && task.loan.user._id === userId) {\n      return true;\n    }\n    if (task.property && task.property.propertyAssignee === userId) {\n      return true;\n    }\n    return false;\n  };\n\n  getRelatedTo = ({ task }) => {\n    if (task.borrower) {\n      return task.borrower.user._id;\n    }\n    if (task.loan) {\n      return task.loan.user._id;\n    }\n    if (task.property) {\n      return task.property.user._id;\n    }\n    return undefined;\n  };\n\n  assignAllTasksToAdmin = ({ userId, newAssignee }) => {\n    const unassignedTasks = unassignedTasksQuery.fetch();\n    unassignedTasks.map((task) => {\n      const isRelatedToUser = this.isRelatedToUser({ task, userId });\n      if (isRelatedToUser) {\n        const taskId = task._id;\n        this.update({\n          taskId,\n          task: { assignedTo: newAssignee },\n        });\n      }\n\n      return task;\n    });\n  };\n}\n\nexport default new TaskService();\n"]},"hash":"9b9da67f7f5c0cce6071708c6a3a99534810cdca"}

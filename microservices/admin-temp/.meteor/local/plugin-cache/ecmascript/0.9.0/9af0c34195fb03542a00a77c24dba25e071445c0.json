{"metadata":{"usedHelpers":["createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"./fieldNode.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"FieldNode"}]},{"source":"./reducerNode.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReducerNode"}]},{"source":"lodash.clonedeep","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"deepClone"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]}],"exports":{"exported":["CollectionNode"],"specifiers":[{"kind":"local","local":"CollectionNode","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"collectionNode"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n    \"default\": function () {\n        return CollectionNode;\n    }\n});\nvar FieldNode = void 0;\nmodule.watch(require(\"./fieldNode.js\"), {\n    \"default\": function (v) {\n        FieldNode = v;\n    }\n}, 0);\nvar ReducerNode = void 0;\nmodule.watch(require(\"./reducerNode.js\"), {\n    \"default\": function (v) {\n        ReducerNode = v;\n    }\n}, 1);\nvar deepClone = void 0;\nmodule.watch(require(\"lodash.clonedeep\"), {\n    \"default\": function (v) {\n        deepClone = v;\n    }\n}, 2);\nvar check = void 0,\n    Match = void 0;\nmodule.watch(require(\"meteor/check\"), {\n    check: function (v) {\n        check = v;\n    },\n    Match: function (v) {\n        Match = v;\n    }\n}, 3);\n\nvar CollectionNode = function () {\n    function CollectionNode(collection) {\n        var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var linkName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        (0, _classCallCheck3.default)(this, CollectionNode);\n\n        if (collection && !_.isObject(body)) {\n            throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');\n        }\n\n        this.body = deepClone(body);\n        this.linkName = linkName;\n        this.collection = collection;\n        this.nodes = [];\n        this.props = {};\n        this.parent = null;\n        this.linker = null;\n        this.linkStorageField = null;\n        this.scheduledForDeletion = false;\n        this.reducers = [];\n        this.results = [];\n        this.snapCaches = {}; // {cacheField: linkName}\n\n        this.snapCachesSingles = []; // [cacheField1, cacheField2]\n    }\n\n    /**\n     * Adds children to itself\n     *\n     * @param node\n     * @param linker\n     */CollectionNode.prototype.add = function () {\n        function add(node, linker) {\n            node.parent = this;\n\n            if (linker) {\n                node.linker = linker;\n                node.linkStorageField = linker.linkStorageField;\n                node.isMeta = linker.isMeta();\n                node.isVirtual = linker.isVirtual();\n                node.isOneResult = linker.isOneResult();\n                node.shouldCleanStorage = this._shouldCleanStorage(node);\n            }\n\n            this.nodes.push(node);\n        }\n\n        return add;\n    }(); /**\n          * @param prop\n          * @param value\n          */\n\n    CollectionNode.prototype.addProp = function () {\n        function addProp(prop, value) {\n            var _$extend;\n\n            if (prop === '$postFilter') {\n                check(value, Match.OneOf(Function, [Function]));\n            }\n\n            _.extend(this.props, (_$extend = {}, _$extend[prop] = value, _$extend));\n        }\n\n        return addProp;\n    }(); /**\n          * @param _node\n          */\n\n    CollectionNode.prototype.remove = function () {\n        function remove(_node) {\n            this.nodes = _.filter(this.nodes, function (node) {\n                return _node !== node;\n            });\n        }\n\n        return remove;\n    }(); /**\n          * @param filters\n          * @param options\n          */\n\n    CollectionNode.prototype.applyFields = function () {\n        function applyFields(filters, options) {\n            var hasAddedAnyField = false;\n\n            _.each(this.fieldNodes, function (n) {\n                hasAddedAnyField = true;\n                n.applyFields(options.fields);\n            }); // it will only get here if it has collectionNodes children\n\n\n            _.each(this.collectionNodes, function (collectionNode) {\n                var linker = collectionNode.linker;\n\n                if (linker && !linker.isVirtual()) {\n                    options.fields[linker.linkStorageField] = 1;\n                    hasAddedAnyField = true;\n                }\n            }); // if he selected filters, we should automatically add those fields\n\n\n            _.each(filters, function (value, field) {\n                // special handling for the $meta filter and conditional operators\n                if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {\n                    // if the field or the parent of the field already exists, don't add it\n                    if (!_.has(options.fields, field.split('.')[0])) {\n                        hasAddedAnyField = true;\n                        options.fields[field] = 1;\n                    }\n                }\n            });\n\n            if (!hasAddedAnyField) {\n                options.fields = {\n                    _id: 1\n                };\n            }\n        }\n\n        return applyFields;\n    }(); /**\n          * @param fieldName\n          * @returns {boolean}\n          */\n\n    CollectionNode.prototype.hasField = function () {\n        function hasField(fieldName) {\n            return !!_.find(this.fieldNodes, function (fieldNode) {\n                return fieldNode.name == fieldName;\n            });\n        }\n\n        return hasField;\n    }(); /**\n          * @param fieldName\n          * @returns {FieldNode}\n          */\n\n    CollectionNode.prototype.getField = function () {\n        function getField(fieldName) {\n            return _.find(this.fieldNodes, function (fieldNode) {\n                return fieldNode.name == fieldName;\n            });\n        }\n\n        return getField;\n    }(); /**\n          * @param name\n          * @returns {boolean}\n          */\n\n    CollectionNode.prototype.hasCollectionNode = function () {\n        function hasCollectionNode(name) {\n            return !!_.find(this.collectionNodes, function (node) {\n                return node.linkName == name;\n            });\n        }\n\n        return hasCollectionNode;\n    }(); /**\n          * @param name\n          * @returns {boolean}\n          */\n\n    CollectionNode.prototype.hasReducerNode = function () {\n        function hasReducerNode(name) {\n            return !!_.find(this.reducerNodes, function (node) {\n                return node.name == name;\n            });\n        }\n\n        return hasReducerNode;\n    }(); /**\n          * @param name\n          * @returns {ReducerNode}\n          */\n\n    CollectionNode.prototype.getReducerNode = function () {\n        function getReducerNode(name) {\n            return _.find(this.reducerNodes, function (node) {\n                return node.name == name;\n            });\n        }\n\n        return getReducerNode;\n    }(); /**\n          * @param name\n          * @returns {CollectionNode}\n          */\n\n    CollectionNode.prototype.getCollectionNode = function () {\n        function getCollectionNode(name) {\n            return _.find(this.collectionNodes, function (node) {\n                return node.linkName == name;\n            });\n        }\n\n        return getCollectionNode;\n    }(); /**\n          * @returns {*}\n          */\n\n    CollectionNode.prototype.getName = function () {\n        function getName() {\n            return this.linkName ? this.linkName : this.collection ? this.collection._name : 'N/A';\n        }\n\n        return getName;\n    }(); /**\n          * This is used for caching links\n          *\n          * @param cacheField\n          * @param subLinkName\n          */\n\n    CollectionNode.prototype.snapCache = function () {\n        function snapCache(cacheField, subLinkName) {\n            this.snapCaches[cacheField] = subLinkName;\n\n            if (this.collection.getLinker(subLinkName).isOneResult()) {\n                this.snapCachesSingles.push(cacheField);\n            }\n        }\n\n        return snapCache;\n    }(); /**\n          * This method verifies whether to remove the linkStorageField form the results\n          * unless you specify it in your query.\n          *\n          * @param node\n          * @returns {boolean}\n          * @private\n          */\n\n    CollectionNode.prototype._shouldCleanStorage = function () {\n        function _shouldCleanStorage(node) {\n            if (node.linkStorageField === '_id') {\n                return false;\n            } else {\n                if (node.isVirtual) {\n                    return !node.hasField(node.linkStorageField);\n                } else {\n                    return !this.hasField(node.linkStorageField);\n                }\n            }\n        }\n\n        return _shouldCleanStorage;\n    }();\n\n    (0, _createClass3.default)(CollectionNode, [{\n        key: \"collectionNodes\",\n        get: function () {\n            return _.filter(this.nodes, function (n) {\n                return n instanceof CollectionNode;\n            });\n        }\n    }, {\n        key: \"fieldNodes\",\n        get: function () {\n            return _.filter(this.nodes, function (n) {\n                return n instanceof FieldNode;\n            });\n        }\n    }, {\n        key: \"reducerNodes\",\n        get: function () {\n            return _.filter(this.nodes, function (n) {\n                return n instanceof ReducerNode;\n            });\n        }\n    }]);\n    return CollectionNode;\n}();","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js"],"names":["module","export","CollectionNode","FieldNode","watch","require","v","ReducerNode","deepClone","check","Match","collection","body","linkName","_","isObject","Meteor","Error","nodes","props","parent","linker","linkStorageField","scheduledForDeletion","reducers","results","snapCaches","snapCachesSingles","add","node","isMeta","isVirtual","isOneResult","shouldCleanStorage","_shouldCleanStorage","push","addProp","prop","value","OneOf","Function","extend","remove","_node","filter","applyFields","filters","options","hasAddedAnyField","each","fieldNodes","n","fields","collectionNodes","collectionNode","field","contains","has","split","_id","hasField","fieldName","find","fieldNode","name","getField","hasCollectionNode","hasReducerNode","reducerNodes","getReducerNode","getCollectionNode","getName","_name","snapCache","cacheField","subLinkName","getLinker"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js.map","sourcesContent":["import FieldNode from './fieldNode.js';\nimport ReducerNode from './reducerNode.js';\nimport deepClone from 'lodash.clonedeep';\nimport {check, Match} from 'meteor/check';\n\nexport default class CollectionNode {\n    constructor(collection, body = {}, linkName = null) {\n        if (collection && !_.isObject(body)) {\n            throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');\n        }\n\n        this.body = deepClone(body);\n        this.linkName = linkName;\n        this.collection = collection;\n\n        this.nodes = [];\n        this.props = {};\n        this.parent = null;\n        this.linker = null;\n        this.linkStorageField = null;\n        this.scheduledForDeletion = false;\n        this.reducers = [];\n        this.results = [];\n        this.snapCaches = {}; // {cacheField: linkName}\n        this.snapCachesSingles = []; // [cacheField1, cacheField2]\n    }\n\n    get collectionNodes() {\n        return _.filter(this.nodes, n => n instanceof CollectionNode)\n    }\n\n    get fieldNodes() {\n        return _.filter(this.nodes, n => n instanceof FieldNode);\n    }\n\n    get reducerNodes() {\n        return _.filter(this.nodes, n => n instanceof ReducerNode);\n    }\n\n    /**\n     * Adds children to itself\n     *\n     * @param node\n     * @param linker\n     */\n    add(node, linker) {\n        node.parent = this;\n\n        if (linker) {\n            node.linker = linker;\n            node.linkStorageField = linker.linkStorageField;\n            node.isMeta = linker.isMeta();\n            node.isVirtual = linker.isVirtual();\n            node.isOneResult = linker.isOneResult();\n            node.shouldCleanStorage = this._shouldCleanStorage(node);\n        }\n\n        this.nodes.push(node);\n    }\n\n    /**\n     * @param prop\n     * @param value\n     */\n    addProp(prop, value) {\n        if (prop === '$postFilter') {\n            check(value, Match.OneOf(Function, [Function]))\n        }\n\n        _.extend(this.props, {\n            [prop]: value\n        });\n    }\n\n    /**\n     * @param _node\n     */\n    remove(_node) {\n        this.nodes = _.filter(this.nodes, node => _node !== node);\n    }\n\n    /**\n     * @param filters\n     * @param options\n     */\n    applyFields(filters, options) {\n        let hasAddedAnyField = false;\n\n        _.each(this.fieldNodes, n => {\n            hasAddedAnyField = true;\n            n.applyFields(options.fields)\n        });\n\n        // it will only get here if it has collectionNodes children\n        _.each(this.collectionNodes, (collectionNode) => {\n            let linker = collectionNode.linker;\n\n            if (linker && !linker.isVirtual()) {\n                options.fields[linker.linkStorageField] = 1;\n                hasAddedAnyField = true;\n            }\n        });\n\n        // if he selected filters, we should automatically add those fields\n        _.each(filters, (value, field) => {\n            // special handling for the $meta filter and conditional operators\n            if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {\n                // if the field or the parent of the field already exists, don't add it\n                if (!_.has(options.fields, field.split('.')[0])){\n                    hasAddedAnyField = true;\n                    options.fields[field] = 1;\n                }\n            }\n        });\n\n        if (!hasAddedAnyField) {\n            options.fields = {_id: 1};\n        }\n    }\n\n    /**\n     * @param fieldName\n     * @returns {boolean}\n     */\n    hasField(fieldName) {\n        return !!_.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param fieldName\n     * @returns {FieldNode}\n     */\n    getField(fieldName) {\n        return _.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasCollectionNode(name) {\n        return !!_.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasReducerNode(name) {\n        return !!_.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {ReducerNode}\n     */\n    getReducerNode(name) {\n        return _.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {CollectionNode}\n     */\n    getCollectionNode(name) {\n        return _.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @returns {*}\n     */\n    getName() {\n        return this.linkName\n            ? this.linkName\n            : (this.collection ? this.collection._name : 'N/A');\n    }\n\n    /**\n     * This is used for caching links\n     *\n     * @param cacheField\n     * @param subLinkName\n     */\n    snapCache(cacheField, subLinkName) {\n        this.snapCaches[cacheField] = subLinkName;\n\n        if (this.collection.getLinker(subLinkName).isOneResult()) {\n            this.snapCachesSingles.push(cacheField);\n        }\n    }\n\n    /**\n     * This method verifies whether to remove the linkStorageField form the results\n     * unless you specify it in your query.\n     *\n     * @param node\n     * @returns {boolean}\n     * @private\n     */\n    _shouldCleanStorage(node) {\n        if (node.linkStorageField === '_id') {\n            return false;\n        } else {\n            if (node.isVirtual) {\n                return !node.hasField(node.linkStorageField);\n            } else {\n                return !this.hasField(node.linkStorageField);\n            }\n        }\n    }\n}\n"]},"hash":"9af0c34195fb03542a00a77c24dba25e071445c0"}

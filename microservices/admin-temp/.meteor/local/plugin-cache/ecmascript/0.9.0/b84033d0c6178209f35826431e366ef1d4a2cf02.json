{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/softwarerero:accounts-t9n","imported":["T9n"],"specifiers":[{"kind":"named","imported":"T9n","local":"T9n"}]},{"source":"../../login_session.js","imported":["KEY_PREFIX"],"specifiers":[{"kind":"named","imported":"KEY_PREFIX","local":"KEY_PREFIX"}]},{"source":"./Form.jsx","imported":[],"specifiers":[]},{"source":"../../helpers.js","imported":["STATES","passwordSignupFields","validateEmail","validatePassword","validateUsername","loginResultCallback","getLoginServices","hasPasswordService","capitalize"],"specifiers":[{"kind":"named","imported":"STATES","local":"STATES"},{"kind":"named","imported":"passwordSignupFields","local":"passwordSignupFields"},{"kind":"named","imported":"validateEmail","local":"validateEmail"},{"kind":"named","imported":"validatePassword","local":"validatePassword"},{"kind":"named","imported":"validateUsername","local":"validateUsername"},{"kind":"named","imported":"loginResultCallback","local":"loginResultCallback"},{"kind":"named","imported":"getLoginServices","local":"getLoginServices"},{"kind":"named","imported":"hasPasswordService","local":"hasPasswordService"},{"kind":"named","imported":"capitalize","local":"capitalize"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/std:accounts-ui/imports/ui/components/LoginForm.jsx","filenameRelative":"packages/std:accounts-ui/imports/ui/components/LoginForm.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/std:accounts-ui/imports/ui/components/LoginForm.jsx.map","sourceFileName":"packages/std:accounts-ui/imports/ui/components/LoginForm.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"LoginForm"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet React, Component;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  },\n\n  Component(v) {\n    Component = v;\n  }\n\n}, 0);\nlet PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 1);\nlet ReactDOM;\nmodule.watch(require(\"react-dom\"), {\n  default(v) {\n    ReactDOM = v;\n  }\n\n}, 2);\nlet createContainer;\nmodule.watch(require(\"meteor/react-meteor-data\"), {\n  createContainer(v) {\n    createContainer = v;\n  }\n\n}, 3);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 4);\nlet T9n;\nmodule.watch(require(\"meteor/softwarerero:accounts-t9n\"), {\n  T9n(v) {\n    T9n = v;\n  }\n\n}, 5);\nlet KEY_PREFIX;\nmodule.watch(require(\"../../login_session.js\"), {\n  KEY_PREFIX(v) {\n    KEY_PREFIX = v;\n  }\n\n}, 6);\nmodule.watch(require(\"./Form.jsx\"));\nlet STATES, passwordSignupFields, validateEmail, validatePassword, validateUsername, loginResultCallback, getLoginServices, hasPasswordService, capitalize;\nmodule.watch(require(\"../../helpers.js\"), {\n  STATES(v) {\n    STATES = v;\n  },\n\n  passwordSignupFields(v) {\n    passwordSignupFields = v;\n  },\n\n  validateEmail(v) {\n    validateEmail = v;\n  },\n\n  validatePassword(v) {\n    validatePassword = v;\n  },\n\n  validateUsername(v) {\n    validateUsername = v;\n  },\n\n  loginResultCallback(v) {\n    loginResultCallback = v;\n  },\n\n  getLoginServices(v) {\n    getLoginServices = v;\n  },\n\n  hasPasswordService(v) {\n    hasPasswordService = v;\n  },\n\n  capitalize(v) {\n    capitalize = v;\n  }\n\n}, 7);\n\nfunction indexBy(array, key) {\n  const result = {};\n  array.forEach(function (obj) {\n    result[obj[key]] = obj;\n  });\n  return result;\n}\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    let {\n      formState,\n      loginPath,\n      signUpPath,\n      resetPasswordPath,\n      profilePath,\n      changePasswordPath\n    } = props;\n\n    if (formState === STATES.SIGN_IN && Package['accounts-password']) {\n      console.warn('Do not force the state to SIGN_IN on Accounts.ui.LoginForm, it will make it impossible to reset password in your app, this state is also the default state if logged out, so no need to force it.');\n    } // Set inital state.\n\n\n    this.state = {\n      messages: [],\n      waiting: true,\n      formState: formState ? formState : Accounts.user() ? STATES.PROFILE : STATES.SIGN_IN,\n      onSubmitHook: props.onSubmitHook || Accounts.ui._options.onSubmitHook,\n      onSignedInHook: props.onSignedInHook || Accounts.ui._options.onSignedInHook,\n      onSignedOutHook: props.onSignedOutHook || Accounts.ui._options.onSignedOutHook,\n      onPreSignUpHook: props.onPreSignUpHook || Accounts.ui._options.onPreSignUpHook,\n      onPostSignUpHook: props.onPostSignUpHook || Accounts.ui._options.onPostSignUpHook\n    };\n    this.translate = this.translate.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({\n      waiting: false,\n      ready: true\n    }));\n    let changeState = Session.get(KEY_PREFIX + 'state');\n\n    switch (changeState) {\n      case 'enrollAccountToken':\n        this.setState(prevState => ({\n          formState: STATES.ENROLL_ACCOUNT\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n\n      case 'resetPasswordToken':\n        this.setState(prevState => ({\n          formState: STATES.PASSWORD_CHANGE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n\n      case 'justVerifiedEmail':\n        this.setState(prevState => ({\n          formState: STATES.PROFILE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n    } // Add default field values once the form did mount on the client\n\n\n    this.setState(prevState => (0, _extends3.default)({}, this.getDefaultFieldValues()));\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.formState && nextProps.formState !== this.state.formState) {\n      this.setState((0, _extends3.default)({\n        formState: nextProps.formState\n      }, this.getDefaultFieldValues()));\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevProps.user !== !this.props.user) {\n      this.setState({\n        formState: this.props.user ? STATES.PROFILE : STATES.SIGN_IN\n      });\n    }\n  }\n\n  translate(text) {\n    // if (this.props.t) {\n    //   return this.props.t(text);\n    // }\n    return T9n.get(text);\n  }\n\n  validateField(field, value) {\n    const {\n      formState\n    } = this.state;\n\n    switch (field) {\n      case 'email':\n        return validateEmail(value, this.showMessage.bind(this), this.clearMessage.bind(this));\n\n      case 'password':\n        return validatePassword(value, this.showMessage.bind(this), this.clearMessage.bind(this));\n\n      case 'username':\n        return validateUsername(value, this.showMessage.bind(this), this.clearMessage.bind(this), formState);\n    }\n  }\n\n  getUsernameOrEmailField() {\n    return {\n      id: 'usernameOrEmail',\n      hint: this.translate('enterUsernameOrEmail'),\n      label: this.translate('usernameOrEmail'),\n      required: true,\n      defaultValue: this.state.username || \"\",\n      onChange: this.handleChange.bind(this, 'usernameOrEmail'),\n      message: this.getMessageForField('usernameOrEmail')\n    };\n  }\n\n  getUsernameField() {\n    return {\n      id: 'username',\n      hint: this.translate('enterUsername'),\n      label: this.translate('username'),\n      required: true,\n      defaultValue: this.state.username || \"\",\n      onChange: this.handleChange.bind(this, 'username'),\n      message: this.getMessageForField('username')\n    };\n  }\n\n  getEmailField() {\n    return {\n      id: 'email',\n      hint: this.translate('enterEmail'),\n      label: this.translate('email'),\n      type: 'email',\n      required: true,\n      defaultValue: this.state.email || \"\",\n      onChange: this.handleChange.bind(this, 'email'),\n      message: this.getMessageForField('email')\n    };\n  }\n\n  getPasswordField() {\n    return {\n      id: 'password',\n      hint: this.translate('enterPassword'),\n      label: this.translate('password'),\n      type: 'password',\n      required: true,\n      defaultValue: this.state.password || \"\",\n      onChange: this.handleChange.bind(this, 'password'),\n      message: this.getMessageForField('password')\n    };\n  }\n\n  getSetPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterPassword'),\n      label: this.translate('choosePassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword')\n    };\n  }\n\n  getNewPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterNewPassword'),\n      label: this.translate('newPassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword'),\n      message: this.getMessageForField('newPassword')\n    };\n  }\n\n  handleChange(field, evt) {\n    let value = evt.target.value;\n\n    switch (field) {\n      case 'password':\n        break;\n\n      default:\n        value = value.trim();\n        break;\n    }\n\n    this.setState({\n      [field]: value\n    });\n    this.setDefaultFieldValues({\n      [field]: value\n    });\n  }\n\n  fields() {\n    const loginFields = [];\n    const {\n      formState\n    } = this.state;\n\n    if (!hasPasswordService() && getLoginServices().length == 0) {\n      loginFields.push({\n        label: 'No login service added, i.e. accounts-password',\n        type: 'notice'\n      });\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_IN) {\n      if ([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameOrEmailField());\n      }\n\n      if (passwordSignupFields() === \"USERNAME_ONLY\") {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if ([\"EMAIL_ONLY\", \"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if (![\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_UP) {\n      if ([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if ([\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\", \"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if ([\"USERNAME_AND_OPTIONAL_EMAIL\"].includes(passwordSignupFields())) {\n        loginFields.push(Object.assign(this.getEmailField(), {\n          required: false\n        }));\n      }\n\n      if (![\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginFields.push(this.getEmailField());\n    }\n\n    if (this.showPasswordChangeForm()) {\n      if (Meteor.isClient && !Accounts._loginButtonsSession.get('resetPasswordToken')) {\n        loginFields.push(this.getPasswordField());\n      }\n\n      loginFields.push(this.getNewPasswordField());\n    }\n\n    if (this.showEnrollAccountForm()) {\n      loginFields.push(this.getSetPasswordField());\n    }\n\n    return indexBy(loginFields, 'id');\n  }\n\n  buttons() {\n    const {\n      loginPath = Accounts.ui._options.loginPath,\n      signUpPath = Accounts.ui._options.signUpPath,\n      resetPasswordPath = Accounts.ui._options.resetPasswordPath,\n      changePasswordPath = Accounts.ui._options.changePasswordPath,\n      profilePath = Accounts.ui._options.profilePath\n    } = this.props;\n    const {\n      user\n    } = this.props;\n    const {\n      formState,\n      waiting\n    } = this.state;\n    let loginButtons = [];\n\n    if (user && formState == STATES.PROFILE) {\n      loginButtons.push({\n        id: 'signOut',\n        label: this.translate('signOut'),\n        disabled: waiting,\n        onClick: this.signOut.bind(this)\n      });\n    }\n\n    if (this.showCreateAccountLink()) {\n      loginButtons.push({\n        id: 'switchToSignUp',\n        label: this.translate('signUp'),\n        type: 'link',\n        href: signUpPath,\n        onClick: this.switchToSignUp.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP || formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'switchToSignIn',\n        label: this.translate('signIn'),\n        type: 'link',\n        href: loginPath,\n        onClick: this.switchToSignIn.bind(this)\n      });\n    }\n\n    if (this.showForgotPasswordLink()) {\n      loginButtons.push({\n        id: 'switchToPasswordReset',\n        label: this.translate('forgotPassword'),\n        type: 'link',\n        href: resetPasswordPath,\n        onClick: this.switchToPasswordReset.bind(this)\n      });\n    }\n\n    if (user && ![\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields()) && formState == STATES.PROFILE && user.services && 'password' in user.services) {\n      loginButtons.push({\n        id: 'switchToChangePassword',\n        label: this.translate('changePassword'),\n        type: 'link',\n        href: changePasswordPath,\n        onClick: this.switchToChangePassword.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP) {\n      loginButtons.push({\n        id: 'signUp',\n        label: this.translate('signUp'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signUp.bind(this, {}) : null\n      });\n    }\n\n    if (this.showSignInLink()) {\n      loginButtons.push({\n        id: 'signIn',\n        label: this.translate('signIn'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signIn.bind(this) : null\n      });\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'emailResetLink',\n        label: this.translate('resetYourPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordReset.bind(this)\n      });\n    }\n\n    if (this.showPasswordChangeForm() || this.showEnrollAccountForm()) {\n      loginButtons.push({\n        id: 'changePassword',\n        label: this.showPasswordChangeForm() ? this.translate('changePassword') : this.translate('setPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordChange.bind(this)\n      });\n\n      if (Accounts.user()) {\n        loginButtons.push({\n          id: 'switchToSignOut',\n          label: this.translate('cancel'),\n          type: 'link',\n          href: profilePath,\n          onClick: this.switchToSignOut.bind(this)\n        });\n      } else {\n        loginButtons.push({\n          id: 'cancelResetPassword',\n          label: this.translate('cancel'),\n          type: 'link',\n          onClick: this.cancelResetPassword.bind(this)\n        });\n      }\n    } // Sort the button array so that the submit button always comes first, and\n    // buttons should also come before links.\n\n\n    loginButtons.sort((a, b) => {\n      return (b.type == 'submit' && a.type != undefined) - (a.type == 'submit' && b.type != undefined);\n    });\n    return indexBy(loginButtons, 'id');\n  }\n\n  showSignInLink() {\n    return this.state.formState == STATES.SIGN_IN && Package['accounts-password'];\n  }\n\n  showPasswordChangeForm() {\n    return Package['accounts-password'] && this.state.formState == STATES.PASSWORD_CHANGE;\n  }\n\n  showEnrollAccountForm() {\n    return Package['accounts-password'] && this.state.formState == STATES.ENROLL_ACCOUNT;\n  }\n\n  showCreateAccountLink() {\n    return this.state.formState == STATES.SIGN_IN && !Accounts._options.forbidClientAccountCreation && Package['accounts-password'];\n  }\n\n  showForgotPasswordLink() {\n    return !this.props.user && this.state.formState == STATES.SIGN_IN && [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"].includes(passwordSignupFields());\n  } /**\n     * Helper to store field values while using the form.\n     */\n\n  setDefaultFieldValues(defaults) {\n    if (typeof defaults !== 'object') {\n      throw new Error('Argument to setDefaultFieldValues is not of type object');\n    } else if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.setItem('accounts_ui', JSON.stringify((0, _extends3.default)({\n        passwordSignupFields: passwordSignupFields()\n      }, this.getDefaultFieldValues(), defaults)));\n    }\n  } /**\n     * Helper to get field values when switching states in the form.\n     */\n\n  getDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      const defaultFieldValues = JSON.parse(localStorage.getItem('accounts_ui') || null);\n\n      if (defaultFieldValues && defaultFieldValues.passwordSignupFields === passwordSignupFields()) {\n        return defaultFieldValues;\n      }\n    }\n  } /**\n     * Helper to clear field values when signing in, up or out.\n     */\n\n  clearDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.removeItem('accounts_ui');\n    }\n  }\n\n  switchToSignUp(event) {\n    event.preventDefault();\n    this.setState((0, _extends3.default)({\n      formState: STATES.SIGN_UP\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToSignIn(event) {\n    event.preventDefault();\n    this.setState((0, _extends3.default)({\n      formState: STATES.SIGN_IN\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToPasswordReset(event) {\n    event.preventDefault();\n    this.setState((0, _extends3.default)({\n      formState: STATES.PASSWORD_RESET\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToChangePassword(event) {\n    event.preventDefault();\n    this.setState((0, _extends3.default)({\n      formState: STATES.PASSWORD_CHANGE\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToSignOut(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PROFILE\n    });\n    this.clearMessages();\n  }\n\n  cancelResetPassword(event) {\n    event.preventDefault();\n\n    Accounts._loginButtonsSession.set('resetPasswordToken', null);\n\n    this.setState({\n      formState: STATES.SIGN_IN,\n      messages: []\n    });\n  }\n\n  signOut() {\n    Meteor.logout(() => {\n      this.setState({\n        formState: STATES.SIGN_IN,\n        password: null\n      });\n      this.state.onSignedOutHook();\n      this.clearMessages();\n      this.clearDefaultFieldValues();\n    });\n  }\n\n  signIn() {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    let loginSelector;\n    this.clearMessages();\n\n    if (usernameOrEmail !== null) {\n      if (!this.validateField('username', usernameOrEmail)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n\n        error = true;\n      } else {\n        if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          return;\n        } else {\n          loginSelector = usernameOrEmail;\n        }\n      }\n    } else if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n\n        error = true;\n      } else {\n        loginSelector = {\n          username: username\n        };\n      }\n    } else if (usernameOrEmail == null) {\n      if (!this.validateField('email', email)) {\n        error = true;\n      } else {\n        if ([\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          error = true;\n        } else {\n          loginSelector = {\n            email\n          };\n        }\n      }\n    }\n\n    if (![\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields()) && !this.validateField('password', password)) {\n      error = true;\n    }\n\n    if (!error) {\n      Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n        onSubmitHook(error, formState);\n\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        } else {\n          loginResultCallback(() => this.state.onSignedInHook());\n          this.setState({\n            formState: STATES.PROFILE,\n            password: null\n          });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  oauthButtons() {\n    const {\n      formState,\n      waiting\n    } = this.state;\n    let oauthButtons = [];\n\n    if (formState == STATES.SIGN_IN || formState == STATES.SIGN_UP) {\n      if (Accounts.oauth) {\n        Accounts.oauth.serviceNames().map(service => {\n          oauthButtons.push({\n            id: service,\n            label: capitalize(service),\n            disabled: waiting,\n            type: 'button',\n            className: `btn-${service} ${service}`,\n            onClick: this.oauthSignIn.bind(this, service)\n          });\n        });\n      }\n    }\n\n    return indexBy(oauthButtons, 'id');\n  }\n\n  oauthSignIn(serviceName) {\n    const {\n      user\n    } = this.props;\n    const {\n      formState,\n      waiting,\n      onSubmitHook\n    } = this.state; //Thanks Josh Owens for this one.\n\n    function capitalService() {\n      return serviceName.charAt(0).toUpperCase() + serviceName.slice(1);\n    }\n\n    if (serviceName === 'meteor-developer') {\n      serviceName = 'meteorDeveloperAccount';\n    }\n\n    const loginWithService = Meteor[\"loginWith\" + capitalService()];\n    let options = {}; // use default scope unless specified\n\n    if (Accounts.ui._options.requestPermissions[serviceName]) options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName]) options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName]) options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n    this.clearMessages();\n    const self = this;\n    loginWithService(options, error => {\n      onSubmitHook(error, formState);\n\n      if (error) {\n        this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\");\n      } else {\n        this.setState({\n          formState: STATES.PROFILE\n        });\n        this.clearDefaultFieldValues();\n        loginResultCallback(() => {\n          Meteor.setTimeout(() => this.state.onSignedInHook(), 100);\n        });\n      }\n    });\n  }\n\n  signUp(options = {}) {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    this.clearMessages();\n\n    if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n\n        error = true;\n      } else {\n        options.username = username;\n      }\n    } else {\n      if ([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields()) && !this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n\n        error = true;\n      }\n    }\n\n    if (!this.validateField('email', email)) {\n      error = true;\n    } else {\n      options.email = email;\n    }\n\n    if ([\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n      // Generate a random password.\n      options.password = Meteor.uuid();\n    } else if (!this.validateField('password', password)) {\n      onSubmitHook(\"Invalid password\", formState);\n      error = true;\n    } else {\n      options.password = password;\n    }\n\n    const SignUp = function (_options) {\n      Accounts.createUser(_options, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n\n          if (this.translate(`error.accounts.${error.reason}`)) {\n            onSubmitHook(`error.accounts.${error.reason}`, formState);\n          } else {\n            onSubmitHook(\"unknown_error\", formState);\n          }\n        } else {\n          onSubmitHook(null, formState);\n          this.setState({\n            formState: STATES.PROFILE,\n            password: null\n          });\n          let user = Accounts.user();\n          loginResultCallback(this.state.onPostSignUpHook.bind(this, _options, user));\n          this.clearDefaultFieldValues();\n        }\n\n        this.setState({\n          waiting: false\n        });\n      });\n    };\n\n    if (!error) {\n      this.setState({\n        waiting: true\n      }); // Allow for Promises to return.\n\n      let promise = this.state.onPreSignUpHook(options);\n\n      if (promise instanceof Promise) {\n        promise.then(SignUp.bind(this, options));\n      } else {\n        SignUp(options);\n      }\n    }\n  }\n\n  loginWithoutPassword() {\n    const {\n      email = '',\n      usernameOrEmail = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    if (this.validateField('email', email)) {\n      this.setState({\n        waiting: true\n      });\n      Accounts.loginWithoutPassword({\n        email: email\n      }, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        } else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n\n        onSubmitHook(error, formState);\n        this.setState({\n          waiting: false\n        });\n      });\n    } else if (this.validateField('username', usernameOrEmail)) {\n      this.setState({\n        waiting: true\n      });\n      Accounts.loginWithoutPassword({\n        email: usernameOrEmail,\n        username: usernameOrEmail\n      }, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        } else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n\n        onSubmitHook(error, formState);\n        this.setState({\n          waiting: false\n        });\n      });\n    } else {\n      let errMsg = null;\n\n      if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        errMsg = this.translate(\"error.accounts.invalid_email\");\n      } else {\n        errMsg = this.translate(\"error.accounts.invalid_email\");\n      }\n\n      this.showMessage(errMsg, 'warning');\n      onSubmitHook(errMsg, formState);\n    }\n  }\n\n  passwordReset() {\n    const {\n      email = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    this.clearMessages();\n\n    if (this.validateField('email', email)) {\n      this.setState({\n        waiting: true\n      });\n      Accounts.forgotPassword({\n        email: email\n      }, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        } else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n\n        onSubmitHook(error, formState);\n        this.setState({\n          waiting: false\n        });\n      });\n    }\n  }\n\n  passwordChange() {\n    const {\n      password,\n      newPassword,\n      formState,\n      onSubmitHook,\n      onSignedInHook\n    } = this.state;\n\n    if (!this.validateField('password', newPassword)) {\n      onSubmitHook('err.minChar', formState);\n      return;\n    }\n\n    let token = Accounts._loginButtonsSession.get('resetPasswordToken');\n\n    if (!token) {\n      token = Accounts._loginButtonsSession.get('enrollAccountToken');\n    }\n\n    if (token) {\n      Accounts.resetPassword(token, newPassword, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          onSubmitHook(error, formState);\n        } else {\n          this.showMessage(this.translate('info.passwordChanged'), 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({\n            formState: STATES.PROFILE\n          });\n\n          Accounts._loginButtonsSession.set('resetPasswordToken', null);\n\n          Accounts._loginButtonsSession.set('enrollAccountToken', null);\n\n          onSignedInHook();\n        }\n      });\n    } else {\n      Accounts.changePassword(password, newPassword, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          onSubmitHook(error, formState);\n        } else {\n          this.showMessage('info.passwordChanged', 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({\n            formState: STATES.PROFILE\n          });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  showMessage(message, type, clearTimeout, field) {\n    message = this.translate(message).trim();\n\n    if (message) {\n      this.setState(({\n        messages = []\n      }) => {\n        messages.push((0, _extends3.default)({\n          message,\n          type\n        }, field && {\n          field\n        }));\n        return {\n          messages\n        };\n      });\n\n      if (clearTimeout) {\n        this.hideMessageTimout = setTimeout(() => {\n          // Filter out the message that timed out.\n          this.clearMessage(message);\n        }, clearTimeout);\n      }\n    }\n  }\n\n  getMessageForField(field) {\n    const {\n      messages = []\n    } = this.state;\n    return messages.find(({\n      field: key\n    }) => key === field);\n  }\n\n  clearMessage(message) {\n    if (message) {\n      this.setState(({\n        messages = []\n      }) => ({\n        messages: messages.filter(({\n          message: a\n        }) => a !== message)\n      }));\n    }\n  }\n\n  clearMessages() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n\n    this.setState({\n      messages: []\n    });\n  }\n\n  componentWillMount() {\n    // XXX Check for backwards compatibility.\n    if (Meteor.isClient) {\n      const container = document.createElement('div');\n      ReactDOM.render(React.createElement(Accounts.ui.Field, {\n        message: \"test\"\n      }), container);\n\n      if (container.getElementsByClassName('message').length == 0) {\n        // Found backwards compatibility issue with 1.3.x\n        console.warn(`Implementations of Accounts.ui.Field must render message in v1.2.11.\n          https://github.com/studiointeract/accounts-ui/#deprecations`);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n  }\n\n  render() {\n    this.oauthButtons(); // Backwords compatibility with v1.2.x.\n\n    const {\n      messages = []\n    } = this.state;\n    const message = {\n      deprecated: true,\n      message: messages.map(({\n        message\n      }) => message).join(', ')\n    };\n    return React.createElement(Accounts.ui.Form, (0, _extends3.default)({\n      oauthServices: this.oauthButtons(),\n      fields: this.fields(),\n      buttons: this.buttons()\n    }, this.state, {\n      message: message,\n      translate: text => this.translate(text)\n    }));\n  }\n\n}\n\nLoginForm.propTypes = {\n  formState: PropTypes.symbol,\n  loginPath: PropTypes.string,\n  signUpPath: PropTypes.string,\n  resetPasswordPath: PropTypes.string,\n  profilePath: PropTypes.string,\n  changePasswordPath: PropTypes.string\n};\nLoginForm.defaultProps = {\n  formState: null,\n  loginPath: null,\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: null,\n  changePasswordPath: null\n};\nAccounts.ui.LoginForm = LoginForm;\nmodule.exportDefault(createContainer(() => {\n  // Listen for the user to login/logout and the services list to the user.\n  Meteor.subscribe('servicesList');\n  return {\n    user: Accounts.user()\n  };\n}, LoginForm));","map":{"version":3,"sources":["packages/std:accounts-ui/imports/ui/components/LoginForm.jsx"],"names":["React","Component","module","watch","require","default","v","PropTypes","ReactDOM","createContainer","Accounts","T9n","KEY_PREFIX","STATES","passwordSignupFields","validateEmail","validatePassword","validateUsername","loginResultCallback","getLoginServices","hasPasswordService","capitalize","indexBy","array","key","result","forEach","obj","LoginForm","constructor","props","formState","loginPath","signUpPath","resetPasswordPath","profilePath","changePasswordPath","SIGN_IN","Package","console","warn","state","messages","waiting","user","PROFILE","onSubmitHook","ui","_options","onSignedInHook","onSignedOutHook","onPreSignUpHook","onPostSignUpHook","translate","bind","componentDidMount","setState","prevState","ready","changeState","Session","get","ENROLL_ACCOUNT","set","PASSWORD_CHANGE","getDefaultFieldValues","componentWillReceiveProps","nextProps","nextContext","componentDidUpdate","prevProps","text","validateField","field","value","showMessage","clearMessage","getUsernameOrEmailField","id","hint","label","required","defaultValue","username","onChange","handleChange","message","getMessageForField","getUsernameField","getEmailField","type","email","getPasswordField","password","getSetPasswordField","getNewPasswordField","evt","target","trim","setDefaultFieldValues","fields","loginFields","length","push","includes","SIGN_UP","Object","assign","PASSWORD_RESET","showPasswordChangeForm","Meteor","isClient","_loginButtonsSession","showEnrollAccountForm","buttons","loginButtons","disabled","onClick","signOut","showCreateAccountLink","href","switchToSignUp","switchToSignIn","showForgotPasswordLink","switchToPasswordReset","services","switchToChangePassword","className","signUp","showSignInLink","signIn","passwordReset","passwordChange","switchToSignOut","cancelResetPassword","sort","a","b","undefined","forbidClientAccountCreation","defaults","Error","localStorage","setItem","JSON","stringify","defaultFieldValues","parse","getItem","clearDefaultFieldValues","removeItem","event","preventDefault","clearMessages","logout","usernameOrEmail","error","loginSelector","loginWithoutPassword","loginWithPassword","reason","oauthButtons","oauth","serviceNames","map","service","oauthSignIn","serviceName","capitalService","charAt","toUpperCase","slice","loginWithService","options","requestPermissions","requestOfflineToken","forceApprovalPrompt","self","setTimeout","uuid","SignUp","createUser","promise","Promise","then","errMsg","forgotPassword","newPassword","token","resetPassword","changePassword","clearTimeout","hideMessageTimout","find","filter","componentWillMount","container","document","createElement","render","getElementsByClassName","componentWillUnmount","deprecated","join","propTypes","symbol","string","defaultProps","exportDefault","subscribe"],"mappings":"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","file":"packages/std:accounts-ui/imports/ui/components/LoginForm.jsx.map","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { createContainer } from 'meteor/react-meteor-data';\nimport { Accounts } from 'meteor/accounts-base';\nimport { T9n } from 'meteor/softwarerero:accounts-t9n';\nimport { KEY_PREFIX } from '../../login_session.js';\nimport './Form.jsx';\n\nimport {\n  STATES,\n  passwordSignupFields,\n  validateEmail,\n  validatePassword,\n  validateUsername,\n  loginResultCallback,\n  getLoginServices,\n  hasPasswordService,\n  capitalize\n} from '../../helpers.js';\n\nfunction indexBy(array, key) {\n  const result = {};\n  array.forEach(function(obj) {\n    result[obj[key]] = obj;\n  });\n  return result;\n}\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    let {\n      formState,\n      loginPath,\n      signUpPath,\n      resetPasswordPath,\n      profilePath,\n      changePasswordPath\n    } = props;\n\n    if (formState === STATES.SIGN_IN && Package['accounts-password']) {\n      console.warn('Do not force the state to SIGN_IN on Accounts.ui.LoginForm, it will make it impossible to reset password in your app, this state is also the default state if logged out, so no need to force it.');\n    }\n\n    // Set inital state.\n    this.state = {\n      messages: [],\n      waiting: true,\n      formState: formState ? formState : Accounts.user() ? STATES.PROFILE : STATES.SIGN_IN,\n      onSubmitHook: props.onSubmitHook || Accounts.ui._options.onSubmitHook,\n      onSignedInHook: props.onSignedInHook || Accounts.ui._options.onSignedInHook,\n      onSignedOutHook: props.onSignedOutHook || Accounts.ui._options.onSignedOutHook,\n      onPreSignUpHook: props.onPreSignUpHook || Accounts.ui._options.onPreSignUpHook,\n      onPostSignUpHook: props.onPostSignUpHook || Accounts.ui._options.onPostSignUpHook,\n    };\n    this.translate = this.translate.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({ waiting: false, ready: true }));\n    let changeState = Session.get(KEY_PREFIX + 'state');\n    switch (changeState) {\n      case 'enrollAccountToken':\n        this.setState(prevState => ({\n          formState: STATES.ENROLL_ACCOUNT\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n      case 'resetPasswordToken':\n        this.setState(prevState => ({\n          formState: STATES.PASSWORD_CHANGE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n\n      case 'justVerifiedEmail':\n        this.setState(prevState => ({\n          formState: STATES.PROFILE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n    }\n\n    // Add default field values once the form did mount on the client\n    this.setState(prevState => ({\n      ...this.getDefaultFieldValues(),\n    }));\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.formState && nextProps.formState !== this.state.formState) {\n      this.setState({\n        formState: nextProps.formState,\n        ...this.getDefaultFieldValues(),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevProps.user !== !this.props.user) {\n      this.setState({\n        formState: this.props.user ? STATES.PROFILE : STATES.SIGN_IN\n      });\n    }\n  }\n\n  translate(text) {\n    // if (this.props.t) {\n    //   return this.props.t(text);\n    // }\n    return T9n.get(text);\n  }\n\n  validateField(field, value) {\n    const { formState } = this.state;\n    switch(field) {\n      case 'email':\n        return validateEmail(value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this),\n        );\n      case 'password':\n        return validatePassword(value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this),\n        );\n      case 'username':\n        return validateUsername(value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this),\n          formState,\n        );\n    }\n  }\n\n  getUsernameOrEmailField() {\n    return {\n      id: 'usernameOrEmail',\n      hint: this.translate('enterUsernameOrEmail'),\n      label: this.translate('usernameOrEmail'),\n      required: true,\n      defaultValue: this.state.username || \"\",\n      onChange: this.handleChange.bind(this, 'usernameOrEmail'),\n      message: this.getMessageForField('usernameOrEmail'),\n    };\n  }\n\n  getUsernameField() {\n    return {\n      id: 'username',\n      hint: this.translate('enterUsername'),\n      label: this.translate('username'),\n      required: true,\n      defaultValue: this.state.username || \"\",\n      onChange: this.handleChange.bind(this, 'username'),\n      message: this.getMessageForField('username'),\n    };\n  }\n\n  getEmailField() {\n    return {\n      id: 'email',\n      hint: this.translate('enterEmail'),\n      label: this.translate('email'),\n      type: 'email',\n      required: true,\n      defaultValue: this.state.email || \"\",\n      onChange: this.handleChange.bind(this, 'email'),\n      message: this.getMessageForField('email'),\n    };\n  }\n\n  getPasswordField() {\n    return {\n      id: 'password',\n      hint: this.translate('enterPassword'),\n      label: this.translate('password'),\n      type: 'password',\n      required: true,\n      defaultValue: this.state.password || \"\",\n      onChange: this.handleChange.bind(this, 'password'),\n      message: this.getMessageForField('password'),\n    };\n  }\n\n  getSetPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterPassword'),\n      label: this.translate('choosePassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword')\n    };\n  }\n\n  getNewPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterNewPassword'),\n      label: this.translate('newPassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword'),\n      message: this.getMessageForField('newPassword'),\n    };\n  }\n\n  handleChange(field, evt) {\n    let value = evt.target.value;\n    switch (field) {\n      case 'password': break;\n      default:\n        value = value.trim();\n        break;\n    }\n    this.setState({ [field]: value });\n    this.setDefaultFieldValues({ [field]: value });\n  }\n\n  fields() {\n    const loginFields = [];\n    const { formState } = this.state;\n\n    if (!hasPasswordService() && getLoginServices().length == 0) {\n      loginFields.push({\n        label: 'No login service added, i.e. accounts-password',\n        type: 'notice'\n      });\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_IN) {\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"USERNAME_AND_OPTIONAL_EMAIL\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameOrEmailField());\n      }\n\n      if (passwordSignupFields() === \"USERNAME_ONLY\") {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if ([\n        \"EMAIL_ONLY\",\n        \"EMAIL_ONLY_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if (![\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_UP) {\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"USERNAME_AND_OPTIONAL_EMAIL\",\n        \"USERNAME_ONLY\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"EMAIL_ONLY\",\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if ([\"USERNAME_AND_OPTIONAL_EMAIL\"].includes(passwordSignupFields())) {\n        loginFields.push(Object.assign(this.getEmailField(), {required: false}));\n      }\n\n      if (![\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginFields.push(this.getEmailField());\n    }\n\n    if (this.showPasswordChangeForm()) {\n      if (Meteor.isClient && !Accounts._loginButtonsSession.get('resetPasswordToken')) {\n        loginFields.push(this.getPasswordField());\n      }\n      loginFields.push(this.getNewPasswordField());\n    }\n\n    if (this.showEnrollAccountForm()) {\n      loginFields.push(this.getSetPasswordField());\n    }\n    return indexBy(loginFields, 'id');\n  }\n\n  buttons() {\n    const {\n      loginPath = Accounts.ui._options.loginPath,\n      signUpPath = Accounts.ui._options.signUpPath,\n      resetPasswordPath = Accounts.ui._options.resetPasswordPath,\n      changePasswordPath = Accounts.ui._options.changePasswordPath,\n      profilePath = Accounts.ui._options.profilePath,\n    } = this.props;\n    const { user } = this.props;\n    const { formState, waiting } = this.state;\n    let loginButtons = [];\n\n    if (user && formState == STATES.PROFILE) {\n      loginButtons.push({\n        id: 'signOut',\n        label: this.translate('signOut'),\n        disabled: waiting,\n        onClick: this.signOut.bind(this)\n      });\n    }\n\n    if (this.showCreateAccountLink()) {\n      loginButtons.push({\n        id: 'switchToSignUp',\n        label: this.translate('signUp'),\n        type: 'link',\n        href: signUpPath,\n        onClick: this.switchToSignUp.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP || formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'switchToSignIn',\n        label: this.translate('signIn'),\n        type: 'link',\n        href: loginPath,\n        onClick: this.switchToSignIn.bind(this)\n      });\n    }\n\n    if (this.showForgotPasswordLink()) {\n      loginButtons.push({\n        id: 'switchToPasswordReset',\n        label: this.translate('forgotPassword'),\n        type: 'link',\n        href: resetPasswordPath,\n        onClick: this.switchToPasswordReset.bind(this)\n      });\n    }\n\n    if (user && ![\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())\n      && formState == STATES.PROFILE\n      && (user.services && 'password' in user.services)) {\n      loginButtons.push({\n        id: 'switchToChangePassword',\n        label: this.translate('changePassword'),\n        type: 'link',\n        href: changePasswordPath,\n        onClick: this.switchToChangePassword.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP) {\n      loginButtons.push({\n        id: 'signUp',\n        label: this.translate('signUp'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signUp.bind(this, {}) : null\n      });\n    }\n\n    if (this.showSignInLink()) {\n      loginButtons.push({\n        id: 'signIn',\n        label: this.translate('signIn'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signIn.bind(this) : null\n      });\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'emailResetLink',\n        label: this.translate('resetYourPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordReset.bind(this)\n      });\n    }\n\n    if (this.showPasswordChangeForm() || this.showEnrollAccountForm()) {\n      loginButtons.push({\n        id: 'changePassword',\n        label: (this.showPasswordChangeForm() ? this.translate('changePassword') : this.translate('setPassword')),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordChange.bind(this)\n      });\n\n      if (Accounts.user()) {\n        loginButtons.push({\n          id: 'switchToSignOut',\n          label: this.translate('cancel'),\n          type: 'link',\n          href: profilePath,\n          onClick: this.switchToSignOut.bind(this)\n        });\n      } else {\n        loginButtons.push({\n          id: 'cancelResetPassword',\n          label: this.translate('cancel'),\n          type: 'link',\n          onClick: this.cancelResetPassword.bind(this),\n        });\n      }\n    }\n\n    // Sort the button array so that the submit button always comes first, and\n    // buttons should also come before links.\n    loginButtons.sort((a, b) => {\n      return (\n        b.type == 'submit' &&\n        a.type != undefined) - (\n          a.type == 'submit' &&\n          b.type != undefined);\n    });\n\n    return indexBy(loginButtons, 'id');\n  }\n\n  showSignInLink(){\n    return this.state.formState == STATES.SIGN_IN && Package['accounts-password'];\n  }\n\n  showPasswordChangeForm() {\n    return(Package['accounts-password']\n      && this.state.formState == STATES.PASSWORD_CHANGE);\n  }\n\n  showEnrollAccountForm() {\n    return(Package['accounts-password']\n      && this.state.formState == STATES.ENROLL_ACCOUNT);\n  }\n\n  showCreateAccountLink() {\n    return this.state.formState == STATES.SIGN_IN && !Accounts._options.forbidClientAccountCreation && Package['accounts-password'];\n  }\n\n  showForgotPasswordLink() {\n    return !this.props.user\n      && this.state.formState == STATES.SIGN_IN\n      && [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"].includes(passwordSignupFields());\n  }\n\n  /**\n   * Helper to store field values while using the form.\n   */\n  setDefaultFieldValues(defaults) {\n    if (typeof defaults !== 'object') {\n      throw new Error('Argument to setDefaultFieldValues is not of type object');\n    } else if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.setItem('accounts_ui', JSON.stringify({\n        passwordSignupFields: passwordSignupFields(),\n        ...this.getDefaultFieldValues(),\n        ...defaults,\n      }));\n    }\n  }\n\n  /**\n   * Helper to get field values when switching states in the form.\n   */\n  getDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      const defaultFieldValues = JSON.parse(localStorage.getItem('accounts_ui') || null);\n      if (defaultFieldValues\n        && defaultFieldValues.passwordSignupFields === passwordSignupFields()) {\n        return defaultFieldValues;\n      }\n    }\n  }\n\n  /**\n   * Helper to clear field values when signing in, up or out.\n   */\n  clearDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.removeItem('accounts_ui');\n    }\n  }\n\n  switchToSignUp(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.SIGN_UP,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToSignIn(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.SIGN_IN,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToPasswordReset(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PASSWORD_RESET,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToChangePassword(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PASSWORD_CHANGE,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToSignOut(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PROFILE,\n    });\n    this.clearMessages();\n  }\n\n  cancelResetPassword(event) {\n    event.preventDefault();\n    Accounts._loginButtonsSession.set('resetPasswordToken', null);\n    this.setState({\n      formState: STATES.SIGN_IN,\n      messages: [],\n    });\n  }\n\n  signOut() {\n    Meteor.logout(() => {\n      this.setState({\n        formState: STATES.SIGN_IN,\n        password: null,\n      });\n      this.state.onSignedOutHook();\n      this.clearMessages();\n      this.clearDefaultFieldValues();\n    });\n  }\n\n  signIn() {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    let loginSelector;\n    this.clearMessages();\n\n    if (usernameOrEmail !== null) {\n      if (!this.validateField('username', usernameOrEmail)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      }\n      else {\n        if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          return;\n        } else {\n          loginSelector = usernameOrEmail;\n        }\n      }\n    } else if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      }\n      else {\n        loginSelector = { username: username };\n      }\n    }\n    else if (usernameOrEmail == null) {\n      if (!this.validateField('email', email)) {\n        error = true;\n      }\n      else {\n        if ([\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          error = true;\n        } else {\n          loginSelector = { email };\n        }\n      }\n    }\n    if (![\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())\n      && !this.validateField('password', password)) {\n      error = true;\n    }\n\n    if (!error) {\n      Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n        onSubmitHook(error,formState);\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          loginResultCallback(() => this.state.onSignedInHook());\n          this.setState({\n            formState: STATES.PROFILE,\n            password: null,\n          });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  oauthButtons() {\n    const { formState, waiting } = this.state;\n    let oauthButtons = [];\n    if (formState == STATES.SIGN_IN || formState == STATES.SIGN_UP ) {\n      if(Accounts.oauth) {\n        Accounts.oauth.serviceNames().map((service) => {\n          oauthButtons.push({\n            id: service,\n            label: capitalize(service),\n            disabled: waiting,\n            type: 'button',\n            className: `btn-${service} ${service}`,\n            onClick: this.oauthSignIn.bind(this, service)\n          });\n        });\n      }\n    }\n    return indexBy(oauthButtons, 'id');\n  }\n\n  oauthSignIn(serviceName) {\n    const { user } = this.props;\n    const { formState, waiting, onSubmitHook } = this.state;\n    //Thanks Josh Owens for this one.\n    function capitalService() {\n      return serviceName.charAt(0).toUpperCase() + serviceName.slice(1);\n    }\n\n    if(serviceName === 'meteor-developer'){\n      serviceName = 'meteorDeveloperAccount';\n    }\n\n    const loginWithService = Meteor[\"loginWith\" + capitalService()];\n\n    let options = {}; // use default scope unless specified\n    if (Accounts.ui._options.requestPermissions[serviceName])\n      options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName])\n      options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName])\n      options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n\n    this.clearMessages();\n    const self = this\n    loginWithService(options, (error) => {\n      onSubmitHook(error,formState);\n      if (error) {\n        this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\");\n      } else {\n        this.setState({ formState: STATES.PROFILE });\n        this.clearDefaultFieldValues();\n        loginResultCallback(() => {\n          Meteor.setTimeout(() => this.state.onSignedInHook(), 100);\n        });\n      }\n    });\n\n  }\n\n  signUp(options = {}) {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    this.clearMessages();\n\n    if (username !== null) {\n      if ( !this.validateField('username', username) ) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      } else {\n        options.username = username;\n      }\n    } else {\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields()) && !this.validateField('username', username) ) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      }\n    }\n\n    if (!this.validateField('email', email)){\n      error = true;\n    } else {\n      options.email = email;\n    }\n\n    if ([\n      \"EMAIL_ONLY_NO_PASSWORD\",\n      \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n    ].includes(passwordSignupFields())) {\n      // Generate a random password.\n      options.password = Meteor.uuid();\n    } else if (!this.validateField('password', password)) {\n      onSubmitHook(\"Invalid password\", formState);\n      error = true;\n    } else {\n      options.password = password;\n    }\n\n    const SignUp = function(_options) {\n      Accounts.createUser(_options, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          if (this.translate(`error.accounts.${error.reason}`)) {\n            onSubmitHook(`error.accounts.${error.reason}`, formState);\n          }\n          else {\n            onSubmitHook(\"unknown_error\", formState);\n          }\n        }\n        else {\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE, password: null });\n          let user = Accounts.user();\n          loginResultCallback(this.state.onPostSignUpHook.bind(this, _options, user));\n          this.clearDefaultFieldValues();\n        }\n\n        this.setState({ waiting: false });\n      });\n    };\n\n    if (!error) {\n      this.setState({ waiting: true });\n      // Allow for Promises to return.\n      let promise = this.state.onPreSignUpHook(options);\n      if (promise instanceof Promise) {\n        promise.then(SignUp.bind(this, options));\n      }\n      else {\n        SignUp(options);\n      }\n    }\n  }\n\n  loginWithoutPassword(){\n    const {\n      email = '',\n      usernameOrEmail = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    if (this.validateField('email', email)) {\n      this.setState({ waiting: true });\n\n      Accounts.loginWithoutPassword({ email: email }, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    } else if (this.validateField('username', usernameOrEmail)) {\n      this.setState({ waiting: true });\n\n      Accounts.loginWithoutPassword({ email: usernameOrEmail, username: usernameOrEmail }, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    } else {\n      let errMsg = null;\n      if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        errMsg = this.translate(\"error.accounts.invalid_email\");\n      }\n      else {\n        errMsg = this.translate(\"error.accounts.invalid_email\");\n      }\n      this.showMessage(errMsg,'warning');\n      onSubmitHook(errMsg, formState);\n    }\n  }\n\n  passwordReset() {\n    const {\n      email = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    this.clearMessages();\n    if (this.validateField('email', email)) {\n      this.setState({ waiting: true });\n\n      Accounts.forgotPassword({ email: email }, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    }\n  }\n\n  passwordChange() {\n    const {\n      password,\n      newPassword,\n      formState,\n      onSubmitHook,\n      onSignedInHook,\n    } = this.state;\n\n    if (!this.validateField('password', newPassword)){\n      onSubmitHook('err.minChar',formState);\n      return;\n    }\n\n    let token = Accounts._loginButtonsSession.get('resetPasswordToken');\n    if (!token) {\n      token = Accounts._loginButtonsSession.get('enrollAccountToken');\n    }\n    if (token) {\n      Accounts.resetPassword(token, newPassword, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          onSubmitHook(error, formState);\n        }\n        else {\n          this.showMessage(this.translate('info.passwordChanged'), 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE });\n          Accounts._loginButtonsSession.set('resetPasswordToken', null);\n          Accounts._loginButtonsSession.set('enrollAccountToken', null);\n          onSignedInHook();\n        }\n      });\n    }\n    else {\n      Accounts.changePassword(password, newPassword, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          onSubmitHook(error, formState);\n        }\n        else {\n          this.showMessage('info.passwordChanged', 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  showMessage(message, type, clearTimeout, field){\n    message = this.translate(message).trim();\n    if (message) {\n      this.setState(({ messages = [] }) => {\n        messages.push({\n          message,\n          type,\n          ...(field && { field }),\n        });\n        return  { messages };\n      });\n      if (clearTimeout) {\n        this.hideMessageTimout = setTimeout(() => {\n          // Filter out the message that timed out.\n          this.clearMessage(message);\n        }, clearTimeout);\n      }\n    }\n  }\n\n  getMessageForField(field) {\n    const { messages = [] } = this.state;\n    return messages.find(({ field:key }) => key === field);\n  }\n\n  clearMessage(message) {\n    if (message) {\n      this.setState(({ messages = [] }) => ({\n        messages: messages.filter(({ message:a }) => a !== message),\n      }));\n    }\n  }\n\n  clearMessages() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n    this.setState({ messages: [] });\n  }\n\n  componentWillMount() {\n    // XXX Check for backwards compatibility.\n    if (Meteor.isClient) {\n      const container = document.createElement('div');\n      ReactDOM.render(<Accounts.ui.Field message=\"test\" />, container);\n      if (container.getElementsByClassName('message').length == 0) {\n        // Found backwards compatibility issue with 1.3.x\n        console.warn(`Implementations of Accounts.ui.Field must render message in v1.2.11.\n          https://github.com/studiointeract/accounts-ui/#deprecations`);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n  }\n\n  render() {\n    this.oauthButtons();\n    // Backwords compatibility with v1.2.x.\n    const { messages = [] } = this.state;\n    const message = {\n      deprecated: true,\n      message: messages.map(({ message }) => message).join(', '),\n    };\n    return (\n      <Accounts.ui.Form\n        oauthServices={this.oauthButtons()}\n        fields={this.fields()} \n        buttons={this.buttons()}\n        {...this.state}\n        message={message}\n        translate={text => this.translate(text)}\n      />\n    );\n  }\n}\nLoginForm.propTypes = {\n  formState: PropTypes.symbol,\n  loginPath: PropTypes.string,\n  signUpPath: PropTypes.string,\n  resetPasswordPath: PropTypes.string,\n  profilePath: PropTypes.string,\n  changePasswordPath: PropTypes.string,\n};\nLoginForm.defaultProps = {\n  formState: null,\n  loginPath: null,\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: null,\n  changePasswordPath: null,\n};\n\nAccounts.ui.LoginForm = LoginForm;\n\nexport default createContainer(() => {\n  // Listen for the user to login/logout and the services list to the user.\n  Meteor.subscribe('servicesList');\n  return ({\n    user: Accounts.user(),\n  });\n}, LoginForm);\n"]},"hash":"b84033d0c6178209f35826431e366ef1d4a2cf02"}

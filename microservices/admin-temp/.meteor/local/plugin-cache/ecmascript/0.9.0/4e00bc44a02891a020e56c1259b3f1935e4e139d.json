{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./base.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Link"}]},{"source":"./lib/smartArguments.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SmartArgs"}]}],"exports":{"exported":["LinkOne"],"specifiers":[{"kind":"local","local":"LinkOne","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/linkTypes/linkOne.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/linkTypes/linkOne.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/linkTypes/linkOne.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/linkOne.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"linkOne"},"ignored":false,"code":"module.export({\n    default: () => LinkOne\n});\nlet Link;\nmodule.watch(require(\"./base.js\"), {\n    default(v) {\n        Link = v;\n    }\n\n}, 0);\nlet SmartArgs;\nmodule.watch(require(\"./lib/smartArguments.js\"), {\n    default(v) {\n        SmartArgs = v;\n    }\n\n}, 1);\n\nclass LinkOne extends Link {\n    set(what) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n\n        const _id = this.identifyId(what, true);\n\n        this._validateIds([_id]);\n\n        this.object[field] = _id;\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: _id\n            }\n        });\n        return this;\n    }\n\n    unset() {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        this.object[field] = null;\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: null\n            }\n        });\n        return this;\n    }\n\n    add(what) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what);\n\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *add* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *remove* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/linkOne.js"],"names":["module","export","default","LinkOne","Link","watch","require","v","SmartArgs","set","what","isVirtual","_virtualAction","field","linkStorageField","_id","identifyId","_validateIds","object","linker","mainCollection","update","$set","unset","add","Meteor","Error","remove"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,aAAQ,MAAIC;AAAb,CAAd;AAAqC,IAAIC,IAAJ;AAASJ,OAAOK,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACJ,YAAQK,CAAR,EAAU;AAACH,eAAKG,CAAL;AAAO;;AAAnB,CAAlC,EAAuD,CAAvD;AAA0D,IAAIC,SAAJ;AAAcR,OAAOK,KAAP,CAAaC,QAAQ,yBAAR,CAAb,EAAgD;AAACJ,YAAQK,CAAR,EAAU;AAACC,oBAAUD,CAAV;AAAY;;AAAxB,CAAhD,EAA0E,CAA1E;;AAGvG,MAAMJ,OAAN,SAAsBC,IAAtB,CAA2B;AACtCK,QAAIC,IAAJ,EAAU;AACN,YAAI,KAAKC,SAAT,EAAoB;AAChB,iBAAKC,cAAL,CAAoB,KAApB,EAA2BF,IAA3B;;AACA,mBAAO,IAAP;AACH;;AAED,YAAIG,QAAQ,KAAKC,gBAAjB;;AACA,cAAMC,MAAM,KAAKC,UAAL,CAAgBN,IAAhB,EAAsB,IAAtB,CAAZ;;AACA,aAAKO,YAAL,CAAkB,CAACF,GAAD,CAAlB;;AAEA,aAAKG,MAAL,CAAYL,KAAZ,IAAqBE,GAArB;AAEA,aAAKI,MAAL,CAAYC,cAAZ,CAA2BC,MAA3B,CAAkC,KAAKH,MAAL,CAAYH,GAA9C,EAAmD;AAC/CO,kBAAM;AACF,iBAACT,KAAD,GAASE;AADP;AADyC,SAAnD;AAMA,eAAO,IAAP;AACH;;AAEDQ,YAAQ;AACJ,YAAI,KAAKZ,SAAT,EAAoB;AAChB,iBAAKC,cAAL,CAAoB,OAApB,EAA6BF,IAA7B;;AACA,mBAAO,IAAP;AACH;;AAED,YAAIG,QAAQ,KAAKC,gBAAjB;AACA,aAAKI,MAAL,CAAYL,KAAZ,IAAqB,IAArB;AAEA,aAAKM,MAAL,CAAYC,cAAZ,CAA2BC,MAA3B,CAAkC,KAAKH,MAAL,CAAYH,GAA9C,EAAmD;AAC/CO,kBAAM;AACF,iBAACT,KAAD,GAAS;AADP;AADyC,SAAnD;AAMA,eAAO,IAAP;AACH;;AAEDW,QAAId,IAAJ,EAAU;AACN,YAAI,KAAKC,SAAT,EAAoB;AAChB,iBAAKC,cAAL,CAAoB,KAApB,EAA2BF,IAA3B;;AACA,mBAAO,IAAP;AACH;;AAED,cAAM,IAAIe,OAAOC,KAAX,CAAiB,iBAAjB,EAAoC,2GAApC,CAAN;AACH;;AAEDC,WAAOjB,IAAP,EAAa;AACT,YAAI,KAAKC,SAAT,EAAoB;AAChB,iBAAKC,cAAL,CAAoB,QAApB,EAA8BF,IAA9B;;AACA,mBAAO,IAAP;AACH;;AAED,cAAM,IAAIe,OAAOC,KAAX,CAAiB,iBAAjB,EAAoC,8GAApC,CAAN;AACH;;AAxDqC","file":"packages/cultofcoders:grapher/lib/links/linkTypes/linkOne.js.map","sourcesContent":["import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkOne extends Link {\n    set(what) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what);\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        const _id = this.identifyId(what, true);\n        this._validateIds([_id]);\n\n        this.object[field] = _id;\n\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: _id\n            }\n        });\n\n        return this;\n    }\n\n    unset() {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        this.object[field] = null;\n\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: null\n            }\n        });\n\n        return this;\n    }\n\n    add(what) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *add* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *remove* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n}"]},"hash":"4e00bc44a02891a020e56c1259b3f1935e4e139d"}

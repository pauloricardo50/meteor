{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./collections","imported":["Authors","Groups","Posts","Categories","AuthorProfiles"],"specifiers":[{"kind":"named","imported":"Authors","local":"Authors"},{"kind":"named","imported":"Groups","local":"Groups"},{"kind":"named","imported":"Posts","local":"Posts"},{"kind":"named","imported":"Categories","local":"Categories"},{"kind":"named","imported":"AuthorProfiles","local":"AuthorProfiles"}]}],"exports":{"exported":["categoryIds","groupIds","authorIds","postIds"],"specifiers":[{"kind":"local","local":"categoryIds","exported":"categoryIds"},{"kind":"local","local":"groupIds","exported":"groupIds"},{"kind":"local","local":"authorIds","exported":"authorIds"},{"kind":"local","local":"postIds","exported":"postIds"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/testing/link-cache/fixtures.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/testing/link-cache/fixtures.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/testing/link-cache/fixtures.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/testing/link-cache/fixtures.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"fixtures"},"ignored":false,"code":"module.export({\n    categoryIds: function () {\n        return categoryIds;\n    },\n    groupIds: function () {\n        return groupIds;\n    },\n    authorIds: function () {\n        return authorIds;\n    },\n    postIds: function () {\n        return postIds;\n    }\n});\nvar Authors = void 0,\n    Groups = void 0,\n    Posts = void 0,\n    Categories = void 0,\n    AuthorProfiles = void 0;\nmodule.watch(require(\"./collections\"), {\n    Authors: function (v) {\n        Authors = v;\n    },\n    Groups: function (v) {\n        Groups = v;\n    },\n    Posts: function (v) {\n        Posts = v;\n    },\n    Categories: function (v) {\n        Categories = v;\n    },\n    AuthorProfiles: function (v) {\n        AuthorProfiles = v;\n    }\n}, 0);\nvar GROUPS = 3;\nvar CATEGORIES = 3;\nvar AUTHOR_PER_GROUPS = 3;\nvar POSTS_PER_AUTHOR = 3;\nvar categoryIds = [];\nvar groupIds = [];\nvar authorIds = [];\nvar postIds = [];\nMeteor.startup(function () {\n    for (var i = 0; i < CATEGORIES; i++) {\n        var categoryId = Categories.insert({\n            name: \"Category \" + i\n        });\n        categoryIds.push(categoryId);\n    }\n\n    for (var _i = 0; _i < GROUPS; _i++) {\n        var groupId = Groups.insert({\n            name: \"Group \" + _i\n        });\n        groupIds.push(groupId);\n    }\n\n    groupIds.forEach(function (groupId) {\n        for (var _i2 = 0; _i2 < AUTHOR_PER_GROUPS; _i2++) {\n            var authorId = Authors.insert({\n                name: \"Author \" + authorIds.length,\n                createdAt: new Date()\n            });\n            var authorProfileId = AuthorProfiles.insert({\n                name: \"Author \" + authorIds.length,\n                createdAt: new Date()\n            });\n            Authors.getLink(authorId, 'profile').set(authorProfileId);\n            authorIds.push(authorId); // link it to the group\n\n            var groupLink = Authors.getLink(authorId, 'groups');\n            groupLink.add(groupId);\n\n            for (var j = 0; j < POSTS_PER_AUTHOR; j++) {\n                createPost(authorId);\n            }\n        }\n    });\n\n    function createPost(authorId) {\n        var postId = Posts.insert({\n            title: \"Post \" + postIds.length,\n            createdAt: new Date()\n        });\n        postIds.push(postId);\n        var authorLink = Posts.getLink(postId, 'author');\n        authorLink.set(authorId);\n        var randomCategoryId = categoryIds[Math.floor(Math.random() * categoryIds.length)];\n        var categoriesLink = Posts.getLink(postId, 'categories');\n        categoriesLink.add(randomCategoryId, {\n            createdAt: new Date()\n        });\n        return postId;\n    }\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/testing/link-cache/fixtures.js"],"names":["module","export","categoryIds","groupIds","authorIds","postIds","Authors","Groups","Posts","Categories","AuthorProfiles","watch","require","v","GROUPS","CATEGORIES","AUTHOR_PER_GROUPS","POSTS_PER_AUTHOR","Meteor","startup","i","categoryId","insert","name","push","groupId","forEach","authorId","length","createdAt","Date","authorProfileId","getLink","set","groupLink","add","j","createPost","postId","title","authorLink","randomCategoryId","Math","floor","random","categoriesLink"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/query/testing/link-cache/fixtures.js.map","sourcesContent":["import {Authors, Groups, Posts, Categories, AuthorProfiles} from './collections';\n\nconst GROUPS = 3;\nconst CATEGORIES = 3;\nconst AUTHOR_PER_GROUPS = 3;\nconst POSTS_PER_AUTHOR = 3;\n\nexport let categoryIds = [];\nexport let groupIds = [];\nexport let authorIds = [];\nexport let postIds = [];\n\nMeteor.startup(() => {\n    for (let i = 0; i < CATEGORIES; i++) {\n        const categoryId = Categories.insert({\n            name: `Category ${i}`\n        });\n\n        categoryIds.push(categoryId);\n    }\n\n\n    for (let i = 0; i < GROUPS; i++) {\n        const groupId = Groups.insert({\n            name: `Group ${i}`\n        });\n\n        groupIds.push(groupId);\n    }\n\n    groupIds.forEach(groupId => {\n        for (let i = 0; i < AUTHOR_PER_GROUPS; i++) {\n            const authorId = Authors.insert({\n                name: `Author ${authorIds.length}`,\n                createdAt: new Date(),\n            });\n\n            const authorProfileId = AuthorProfiles.insert({\n                name: `Author ${authorIds.length}`,\n                createdAt: new Date(),\n            });\n\n            Authors.getLink(authorId, 'profile').set(authorProfileId);\n\n            authorIds.push(authorId);\n\n            // link it to the group\n            const groupLink = Authors.getLink(authorId, 'groups');\n            groupLink.add(groupId);\n\n            for (let j = 0; j < POSTS_PER_AUTHOR; j++) {\n                createPost(authorId);\n            }\n        }\n    });\n\n    function createPost(authorId) {\n        const postId = Posts.insert({\n            title: `Post ${postIds.length}`,\n            createdAt: new Date(),\n        });\n\n        postIds.push(postId);\n\n        const authorLink = Posts.getLink(postId, 'author');\n        authorLink.set(authorId);\n\n        const randomCategoryId = categoryIds[Math.floor(Math.random()*categoryIds.length)];\n\n        const categoriesLink = Posts.getLink(postId, 'categories');\n        categoriesLink.add(randomCategoryId, {\n            createdAt: new Date(),\n        });\n\n        return postId;\n    }\n});\n"]},"hash":"4592bbe3868021b58bca8aa35a21ae9d5cec5ae4"}

{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]}],"exports":{"exported":["FormMessage"],"specifiers":[{"kind":"local","local":"FormMessage","exported":"FormMessage"}]}}},"options":{"filename":"packages/std:accounts-ui/imports/ui/components/FormMessage.jsx","filenameRelative":"packages/std:accounts-ui/imports/ui/components/FormMessage.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/std:accounts-ui/imports/ui/components/FormMessage.jsx.map","sourceFileName":"packages/std:accounts-ui/imports/ui/components/FormMessage.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"FormMessage"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  FormMessage: function () {\n    return FormMessage;\n  }\n});\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar Accounts = void 0;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 1);\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\nvar FormMessage = function (_React$Component) {\n  (0, _inherits3.default)(FormMessage, _React$Component);\n\n  function FormMessage() {\n    (0, _classCallCheck3.default)(this, FormMessage);\n    return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));\n  }\n\n  FormMessage.prototype.render = function () {\n    function render() {\n      var _props = this.props,\n          message = _props.message,\n          type = _props.type,\n          _props$className = _props.className,\n          className = _props$className === undefined ? \"message\" : _props$className,\n          _props$style = _props.style,\n          style = _props$style === undefined ? {} : _props$style,\n          deprecated = _props.deprecated; // XXX Check for deprecations.\n\n      if (deprecated) {\n        // Found backwords compatibility issue.\n        console.warn('You are overriding Accounts.ui.Form and using FormMessage, the use of FormMessage in Form has been depreacted in v1.2.11, update your implementation to use FormMessages: https://github.com/studiointeract/accounts-ui/#deprecations');\n      }\n\n      message = isObject(message) ? message.message : message; // If message is object, then try to get message from it\n\n      return message ? React.createElement(\n        \"div\",\n        {\n          style: style,\n          className: [className, type].join(' ')\n        },\n        message\n      ) : null;\n    }\n\n    return render;\n  }();\n\n  return FormMessage;\n}(React.Component);\n\nAccounts.ui.FormMessage = FormMessage;","map":{"version":3,"sources":["packages/std:accounts-ui/imports/ui/components/FormMessage.jsx"],"names":["module","export","FormMessage","React","watch","require","v","Accounts","isObject","obj","Object","render","props","message","type","className","style","deprecated","console","warn","join","Component","ui"],"mappings":";;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,eAAY;AAAA,WAAIA,WAAJ;AAAA;AAAb,CAAd;AAA6C,IAAIC,cAAJ;AAAUH,OAAOI,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAAA,uBAASC,CAAT,EAAW;AAACH,YAAMG,CAAN;AAAQ;AAApB,CAA9B,EAAoD,CAApD;AAAuD,IAAIC,iBAAJ;AAAaP,OAAOI,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACE,UAAD,YAAUD,CAAV,EAAY;AAACC,eAASD,CAAT;AAAW;AAAxB,CAA7C,EAAuE,CAAvE;;AAG3H,SAASE,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAOA,QAAQC,OAAOD,GAAP,CAAf;AACD;;IAEYP,W;;;;;;;;wBACXS,M;sBAAU;AAAA,mBAC+D,KAAKC,KADpE;AAAA,UACFC,OADE,UACFA,OADE;AAAA,UACOC,IADP,UACOA,IADP;AAAA,oCACaC,SADb;AAAA,UACaA,SADb,oCACyB,SADzB;AAAA,gCACoCC,KADpC;AAAA,UACoCA,KADpC,gCAC4C,EAD5C;AAAA,UACgDC,UADhD,UACgDA,UADhD,EAER;;AACA,UAAIA,UAAJ,EAAgB;AACd;AACAC,gBAAQC,IAAR,CAAa,uOAAb;AACD;;AACDN,gBAAUL,SAASK,OAAT,IAAoBA,QAAQA,OAA5B,GAAsCA,OAAhD,CAPQ,CAOiD;;AACzD,aAAOA,UACL;AAAA;AAAA;AAAK,iBAAQG,KAAb;AACK,qBAAW,CAAED,SAAF,EAAaD,IAAb,EAAoBM,IAApB,CAAyB,GAAzB;AADhB;AACiDP;AADjD,OADK,GAGH,IAHJ;AAID;;;;;;EAb8BV,MAAMkB,S;;AAgBvCd,SAASe,EAAT,CAAYpB,WAAZ,GAA0BA,WAA1B","file":"packages/std:accounts-ui/imports/ui/components/FormMessage.jsx.map","sourcesContent":["import React from 'react';\nimport { Accounts } from 'meteor/accounts-base';\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\nexport class FormMessage extends React.Component {\n  render () {\n    let { message, type, className = \"message\", style = {}, deprecated } = this.props;\n    // XXX Check for deprecations.\n    if (deprecated) {\n      // Found backwords compatibility issue.\n      console.warn('You are overriding Accounts.ui.Form and using FormMessage, the use of FormMessage in Form has been depreacted in v1.2.11, update your implementation to use FormMessages: https://github.com/studiointeract/accounts-ui/#deprecations');\n    }\n    message = isObject(message) ? message.message : message; // If message is object, then try to get message from it\n    return message ? (\n      <div style={ style }Â \n           className={[ className, type ].join(' ')}>{ message }</div>\n    ) : null;\n  }\n}\n\nAccounts.ui.FormMessage = FormMessage;\n"]},"hash":"ea797044fe5023b2eacc018ed28d63c4570af00d"}

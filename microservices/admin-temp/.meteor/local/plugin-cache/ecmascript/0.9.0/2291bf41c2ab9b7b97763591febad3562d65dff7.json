{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../","imported":["Tasks"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"./queries/tasksUnassigned","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"unassignedTasksQuery"}]},{"source":"../borrowers/queries/borrowerAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"borrowerAssignedToQuery"}]},{"source":"../loans/queries/loanAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"loanAssignedToQuery"}]},{"source":"../properties/queries/propertyAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"propertyAssignedToQuery"}]},{"source":"./tasksConstants","imported":["TASK_STATUS","TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"},{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/tasks/TaskService.js","filenameRelative":"imports/core/api/tasks/TaskService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/tasks/TaskService.js.map","sourceFileName":"imports/core/api/tasks/TaskService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TaskService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 0);\n\nvar _Tasks = void 0;\n\nmodule.watch(require(\"../\"), {\n  Tasks: function Tasks(v) {\n    _Tasks = v;\n  }\n}, 1);\nvar unassignedTasksQuery = void 0;\nmodule.watch(require(\"./queries/tasksUnassigned\"), {\n  default: function _default(v) {\n    unassignedTasksQuery = v;\n  }\n}, 2);\nvar borrowerAssignedToQuery = void 0;\nmodule.watch(require(\"../borrowers/queries/borrowerAssignedTo\"), {\n  default: function _default(v) {\n    borrowerAssignedToQuery = v;\n  }\n}, 3);\nvar loanAssignedToQuery = void 0;\nmodule.watch(require(\"../loans/queries/loanAssignedTo\"), {\n  default: function _default(v) {\n    loanAssignedToQuery = v;\n  }\n}, 4);\nvar propertyAssignedToQuery = void 0;\nmodule.watch(require(\"../properties/queries/propertyAssignedTo\"), {\n  default: function _default(v) {\n    propertyAssignedToQuery = v;\n  }\n}, 5);\n\nvar _TASK_STATUS = void 0,\n    _TASK_TYPE = void 0;\n\nmodule.watch(require(\"./tasksConstants\"), {\n  TASK_STATUS: function TASK_STATUS(v) {\n    _TASK_STATUS = v;\n  },\n  TASK_TYPE: function TASK_TYPE(v) {\n    _TASK_TYPE = v;\n  }\n}, 6);\n\nvar TaskService = function TaskService() {\n  var _this = this;\n\n  (0, _classCallCheck3.default)(this, TaskService);\n\n  this.insert = function (_ref) {\n    var type = _ref.type,\n        borrowerId = _ref.borrowerId,\n        loanId = _ref.loanId,\n        propertyId = _ref.propertyId,\n        userId = _ref.userId,\n        assignedTo = _ref.assignedTo,\n        createdBy = _ref.createdBy;\n\n    if (type === _TASK_TYPE.ADD_ASSIGNED_TO) {\n      return _Tasks.insert({\n        type: type,\n        userId: userId\n      });\n    }\n\n    var existingTask = _Tasks.findOne({\n      type: type,\n      borrowerId: borrowerId,\n      loanId: loanId,\n      propertyId: propertyId,\n      status: _TASK_STATUS.ACTIVE\n    });\n\n    if (existingTask) {\n      throw new _Meteor.Error('duplicate active task');\n    }\n\n    var relatedAssignedTo = assignedTo;\n\n    if (!relatedAssignedTo) {\n      // some tasks may not be related to any doc,\n      // in that case no need for assignedTo field\n      if (borrowerId || loanId || propertyId) {\n        relatedAssignedTo = _this.getRelatedDocAssignedTo({\n          borrowerId: borrowerId,\n          loanId: loanId,\n          propertyId: propertyId\n        });\n      }\n    }\n\n    return _Tasks.insert({\n      type: type,\n      assignedTo: relatedAssignedTo,\n      createdBy: createdBy,\n      borrowerId: borrowerId,\n      loanId: loanId,\n      propertyId: propertyId\n    });\n  };\n\n  this.getRelatedDocAssignedTo = function (_ref2) {\n    var borrowerId = _ref2.borrowerId,\n        loanId = _ref2.loanId,\n        propertyId = _ref2.propertyId;\n\n    if (loanId) {\n      var loans = loanAssignedToQuery.clone({\n        loanId: loanId\n      }).fetchOne();\n      return loans.user.assignedTo;\n    }\n\n    if (borrowerId) {\n      var borrowers = borrowerAssignedToQuery.clone({\n        borrowerId: borrowerId\n      }).fetchOne();\n      return borrowers.user.assignedTo;\n    }\n\n    if (propertyId) {\n      var properties = propertyAssignedToQuery.clone({\n        propertyId: propertyId\n      }).fetchOne();\n      return properties.user.assignedTo;\n    }\n\n    return undefined;\n  };\n\n  this.remove = function (_ref3) {\n    var taskId = _ref3.taskId;\n    return _Tasks.remove(taskId);\n  };\n\n  this.update = function (_ref4) {\n    var taskId = _ref4.taskId,\n        task = _ref4.task;\n    return _Tasks.update(taskId, {\n      $set: task\n    });\n  };\n\n  this.complete = function (_ref5) {\n    var taskId = _ref5.taskId;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        status: _TASK_STATUS.COMPLETED,\n        completedAt: new Date()\n      }\n    });\n  };\n\n  this.completeByType = function (_ref6) {\n    var type = _ref6.type,\n        loanId = _ref6.loanId,\n        newStatus = _ref6.newStatus;\n\n    var taskToComplete = _Tasks.findOne({\n      loanId: loanId,\n      type: type,\n      status: _TASK_STATUS.ACTIVE\n    });\n\n    if (!taskToComplete) {\n      throw new _Meteor.Error(\"task couldn't be found\");\n    }\n\n    return _this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || _TASK_STATUS.COMPLETED,\n        completedAt: new Date()\n      }\n    });\n  };\n\n  this.changeStatus = function (_ref7) {\n    var taskId = _ref7.taskId,\n        newStatus = _ref7.newStatus;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        status: newStatus\n      }\n    });\n  };\n\n  this.changeAssignedTo = function (_ref8) {\n    var taskId = _ref8.taskId,\n        newAssignee = _ref8.newAssignee;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        assignedTo: newAssignee\n      }\n    });\n  };\n\n  this.isRelatedToUser = function (_ref9) {\n    var task = _ref9.task,\n        userId = _ref9.userId;\n\n    if (task.userId === userId) {\n      return true;\n    }\n\n    if (task.borrower && task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n\n    if (task.loan && task.loan.user._id === userId) {\n      return true;\n    }\n\n    if (task.property && task.property.propertyAssignee === userId) {\n      return true;\n    }\n\n    return false;\n  };\n\n  this.getRelatedTo = function (_ref10) {\n    var task = _ref10.task;\n\n    if (task.borrower) {\n      return task.borrower.user._id;\n    }\n\n    if (task.loan) {\n      return task.loan.user._id;\n    }\n\n    if (task.property) {\n      return task.property.user._id;\n    }\n\n    return undefined;\n  };\n\n  this.assignAllTasksToAdmin = function (_ref11) {\n    var userId = _ref11.userId,\n        newAssignee = _ref11.newAssignee;\n    var unassignedTasks = unassignedTasksQuery.fetch();\n    unassignedTasks.map(function (task) {\n      var isRelatedToUser = _this.isRelatedToUser({\n        task: task,\n        userId: userId\n      });\n\n      if (isRelatedToUser) {\n        var taskId = task._id;\n\n        _this.update({\n          taskId: taskId,\n          task: {\n            assignedTo: newAssignee\n          }\n        });\n      }\n\n      return task;\n    });\n  };\n} // insertNewUserTask = ({ type, userId }) => {\n//   if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n//     return undefined;\n//   }\n//   return Tasks.insert({\n//     type,\n//     userId,\n//   });\n// };\n;\n\nmodule.exportDefault(new TaskService());","map":{"version":3,"sources":["imports/core/api/tasks/TaskService.js"],"names":["Meteor","module","watch","require","v","Tasks","unassignedTasksQuery","default","borrowerAssignedToQuery","loanAssignedToQuery","propertyAssignedToQuery","TASK_STATUS","TASK_TYPE","TaskService","insert","type","borrowerId","loanId","propertyId","userId","assignedTo","createdBy","ADD_ASSIGNED_TO","existingTask","findOne","status","ACTIVE","Error","relatedAssignedTo","getRelatedDocAssignedTo","loans","clone","fetchOne","user","borrowers","properties","undefined","remove","taskId","update","task","$set","complete","COMPLETED","completedAt","Date","completeByType","newStatus","taskToComplete","_id","changeStatus","changeAssignedTo","newAssignee","isRelatedToUser","borrower","borrowerAssignee","loan","property","propertyAssignee","getRelatedTo","assignAllTasksToAdmin","unassignedTasks","fetch","map","exportDefault"],"mappings":"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","file":"imports/core/api/tasks/TaskService.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Tasks } from '../';\nimport unassignedTasksQuery from './queries/tasksUnassigned';\nimport borrowerAssignedToQuery from '../borrowers/queries/borrowerAssignedTo';\nimport loanAssignedToQuery from '../loans/queries/loanAssignedTo';\nimport propertyAssignedToQuery from '../properties/queries/propertyAssignedTo';\nimport { TASK_STATUS, TASK_TYPE } from './tasksConstants';\n\nclass TaskService {\n  insert = ({\n    type,\n    borrowerId,\n    loanId,\n    propertyId,\n    userId,\n    assignedTo,\n    createdBy,\n  }) => {\n    if (type === TASK_TYPE.ADD_ASSIGNED_TO) {\n      return Tasks.insert({\n        type,\n        userId,\n      });\n    }\n    const existingTask = Tasks.findOne({\n      type,\n      borrowerId,\n      loanId,\n      propertyId,\n      status: TASK_STATUS.ACTIVE,\n    });\n    if (existingTask) {\n      throw new Meteor.Error('duplicate active task');\n    }\n\n    let relatedAssignedTo = assignedTo;\n    if (!relatedAssignedTo) {\n      // some tasks may not be related to any doc,\n      // in that case no need for assignedTo field\n      if (borrowerId || loanId || propertyId) {\n        relatedAssignedTo = this.getRelatedDocAssignedTo({\n          borrowerId,\n          loanId,\n          propertyId,\n        });\n      }\n    }\n\n    return Tasks.insert({\n      type,\n      assignedTo: relatedAssignedTo,\n      createdBy,\n      borrowerId,\n      loanId,\n      propertyId,\n    });\n  };\n\n  // insertNewUserTask = ({ type, userId }) => {\n  //   if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n  //     return undefined;\n  //   }\n\n  //   return Tasks.insert({\n  //     type,\n  //     userId,\n  //   });\n  // };\n\n  getRelatedDocAssignedTo = ({ borrowerId, loanId, propertyId }) => {\n    if (loanId) {\n      const loans = loanAssignedToQuery.clone({ loanId }).fetchOne();\n      return loans.user.assignedTo;\n    }\n    if (borrowerId) {\n      const borrowers = borrowerAssignedToQuery\n        .clone({ borrowerId })\n        .fetchOne();\n      return borrowers.user.assignedTo;\n    }\n    if (propertyId) {\n      const properties = propertyAssignedToQuery\n        .clone({ propertyId })\n        .fetchOne();\n      return properties.user.assignedTo;\n    }\n    return undefined;\n  };\n\n  remove = ({ taskId }) => Tasks.remove(taskId);\n\n  update = ({ taskId, task }) => Tasks.update(taskId, { $set: task });\n\n  complete = ({ taskId }) =>\n    this.update({\n      taskId,\n      task: {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n\n  completeByType = ({ type, loanId, newStatus }) => {\n    const taskToComplete = Tasks.findOne({\n      loanId,\n      type,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (!taskToComplete) {\n      throw new Meteor.Error(\"task couldn't be found\");\n    }\n\n    return this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n  };\n\n  changeStatus = ({ taskId, newStatus }) =>\n    this.update({ taskId, task: { status: newStatus } });\n\n  changeAssignedTo = ({ taskId, newAssignee }) =>\n    this.update({\n      taskId,\n      task: { assignedTo: newAssignee },\n    });\n\n  isRelatedToUser = ({ task, userId }) => {\n    if (task.userId === userId) {\n      return true;\n    }\n    if (task.borrower && task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n    if (task.loan && task.loan.user._id === userId) {\n      return true;\n    }\n    if (task.property && task.property.propertyAssignee === userId) {\n      return true;\n    }\n    return false;\n  };\n\n  getRelatedTo = ({ task }) => {\n    if (task.borrower) {\n      return task.borrower.user._id;\n    }\n    if (task.loan) {\n      return task.loan.user._id;\n    }\n    if (task.property) {\n      return task.property.user._id;\n    }\n    return undefined;\n  };\n\n  assignAllTasksToAdmin = ({ userId, newAssignee }) => {\n    const unassignedTasks = unassignedTasksQuery.fetch();\n    unassignedTasks.map((task) => {\n      const isRelatedToUser = this.isRelatedToUser({ task, userId });\n      if (isRelatedToUser) {\n        const taskId = task._id;\n        this.update({\n          taskId,\n          task: { assignedTo: newAssignee },\n        });\n      }\n\n      return task;\n    });\n  };\n}\n\nexport default new TaskService();\n"]},"hash":"2291bf41c2ab9b7b97763591febad3562d65dff7"}

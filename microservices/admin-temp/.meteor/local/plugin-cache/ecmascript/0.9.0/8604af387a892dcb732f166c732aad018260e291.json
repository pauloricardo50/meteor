{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"react-scroll","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Scroll"}]},{"source":"../components/DialogSimple","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DialogSimple"}]},{"source":"../components/Translation","imported":["T","IntlNumber"],"specifiers":[{"kind":"named","imported":"T","local":"T"},{"kind":"named","imported":"IntlNumber","local":"IntlNumber"}]},{"source":"../config/constants","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"constants"}]},{"source":"../utils/conversionFunctions","imported":["toMoney"],"specifiers":[{"kind":"named","imported":"toMoney","local":"toMoney"}]},{"source":"../api/constants","imported":["USAGE_TYPE","OTHER_INCOME","REAL_ESTATE","GENDER","EXPENSES","PURCHASE_TYPE"],"specifiers":[{"kind":"named","imported":"USAGE_TYPE","local":"USAGE_TYPE"},{"kind":"named","imported":"OTHER_INCOME","local":"OTHER_INCOME"},{"kind":"named","imported":"REAL_ESTATE","local":"REAL_ESTATE"},{"kind":"named","imported":"GENDER","local":"GENDER"},{"kind":"named","imported":"EXPENSES","local":"EXPENSES"},{"kind":"named","imported":"PURCHASE_TYPE","local":"PURCHASE_TYPE"}]}],"exports":{"exported":["getAcquisitionArray","getErrorArray","getFinalArray"],"specifiers":[{"kind":"local","local":"getAcquisitionArray","exported":"getAcquisitionArray"},{"kind":"local","local":"getErrorArray","exported":"getErrorArray"},{"kind":"local","local":"getFinalArray","exported":"getFinalArray"}]}}},"options":{"filename":"imports/core/arrays/StartFormArray.js","filenameRelative":"imports/core/arrays/StartFormArray.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/arrays/StartFormArray.js.map","sourceFileName":"imports/core/arrays/StartFormArray.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"StartFormArray"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nmodule.export({\n  getAcquisitionArray: function () {\n    function getAcquisitionArray() {\n      return _getAcquisitionArray;\n    }\n\n    return getAcquisitionArray;\n  }(),\n  getErrorArray: function () {\n    function getErrorArray() {\n      return _getErrorArray;\n    }\n\n    return getErrorArray;\n  }(),\n  getFinalArray: function () {\n    function getFinalArray() {\n      return _getFinalArray;\n    }\n\n    return getFinalArray;\n  }()\n});\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function () {\n    function _default(v) {\n      React = v;\n    }\n\n    return _default;\n  }()\n}, 0);\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function () {\n    function Meteor(v) {\n      _Meteor = v;\n    }\n\n    return Meteor;\n  }()\n}, 1);\nvar Scroll = void 0;\nmodule.watch(require(\"react-scroll\"), {\n  \"default\": function () {\n    function _default(v) {\n      Scroll = v;\n    }\n\n    return _default;\n  }()\n}, 2);\nvar DialogSimple = void 0;\nmodule.watch(require(\"../components/DialogSimple\"), {\n  \"default\": function () {\n    function _default(v) {\n      DialogSimple = v;\n    }\n\n    return _default;\n  }()\n}, 3);\nexports.getAcquisitionArray = _getAcquisitionArray;\n\nvar _T = void 0,\n    _IntlNumber = void 0;\n\nmodule.watch(require(\"../components/Translation\"), {\n  T: function () {\n    function T(v) {\n      _T = v;\n    }\n\n    return T;\n  }(),\n  IntlNumber: function () {\n    function IntlNumber(v) {\n      _IntlNumber = v;\n    }\n\n    return IntlNumber;\n  }()\n}, 4);\nvar constants = void 0;\nmodule.watch(require(\"../config/constants\"), {\n  \"default\": function () {\n    function _default(v) {\n      constants = v;\n    }\n\n    return _default;\n  }()\n}, 5);\n\nvar _toMoney = void 0;\n\nmodule.watch(require(\"../utils/conversionFunctions\"), {\n  toMoney: function () {\n    function toMoney(v) {\n      _toMoney = v;\n    }\n\n    return toMoney;\n  }()\n}, 6);\n\nvar _USAGE_TYPE = void 0,\n    _OTHER_INCOME = void 0,\n    _REAL_ESTATE = void 0,\n    _GENDER = void 0,\n    _EXPENSES = void 0,\n    _PURCHASE_TYPE = void 0;\n\nmodule.watch(require(\"../api/constants\"), {\n  USAGE_TYPE: function () {\n    function USAGE_TYPE(v) {\n      _USAGE_TYPE = v;\n    }\n\n    return USAGE_TYPE;\n  }(),\n  OTHER_INCOME: function () {\n    function OTHER_INCOME(v) {\n      _OTHER_INCOME = v;\n    }\n\n    return OTHER_INCOME;\n  }(),\n  REAL_ESTATE: function () {\n    function REAL_ESTATE(v) {\n      _REAL_ESTATE = v;\n    }\n\n    return REAL_ESTATE;\n  }(),\n  GENDER: function () {\n    function GENDER(v) {\n      _GENDER = v;\n    }\n\n    return GENDER;\n  }(),\n  EXPENSES: function () {\n    function EXPENSES(v) {\n      _EXPENSES = v;\n    }\n\n    return EXPENSES;\n  }(),\n  PURCHASE_TYPE: function () {\n    function PURCHASE_TYPE(v) {\n      _PURCHASE_TYPE = v;\n    }\n\n    return PURCHASE_TYPE;\n  }()\n}, 7);\n\nvar _getAcquisitionArray = function () {\n  function _getAcquisitionArray(state, props, setFormState) {\n    return [{\n      id: 'propertyValue',\n      type: 'textInput',\n      condition: state.knowsProperty === true,\n      money: true\n    }, {\n      id: 'notaryFeesAgreed',\n      type: 'buttons',\n      condition: state.knowsProperty === true,\n      intlValues: {\n        value: React.createElement(\n          \"span\",\n          {\n            className: \"active\"\n          },\n          React.createElement(_IntlNumber, {\n            value: 0.05 * state.propertyValue,\n            format: \"money\"\n          })\n        )\n      },\n      hideResult: true,\n      buttons: [{\n        id: true,\n        noPrimary: true,\n        secondary: true,\n        className: 'animated infinite pulse',\n        label: React.createElement(_T, {\n          id: \"general.continue\"\n        })\n      }]\n    }, {\n      id: 'propertyWorkExists',\n      type: 'buttons',\n      condition: state.knowsProperty === true,\n      question: true,\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.yes\"\n        })\n      }, {\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.no\"\n        })\n      }],\n      deleteId: 'propertyWork'\n    }, {\n      id: 'propertyWork',\n      condition: state.propertyWorkExists === true,\n      type: 'textInput',\n      money: true\n    }, {\n      id: 'projectAgreed',\n      type: 'buttons',\n      condition: state.propertyWork !== undefined && state.propertyWork !== 0,\n      intlValues: {\n        value: React.createElement(\n          \"span\",\n          {\n            className: \"active\"\n          },\n          React.createElement(_IntlNumber, {\n            value: 1.05 * state.propertyValue + (state.propertyWork || 0),\n            format: \"money\"\n          })\n        )\n      },\n      hideResult: true,\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.continue\"\n        })\n      }]\n    }, {\n      id: 'usageType',\n      type: 'buttons',\n      question: true,\n      buttons: Object.values(_USAGE_TYPE).map(function (value) {\n        return {\n          id: value,\n          label: React.createElement(_T, {\n            id: \"Start2Form.usageTypeButton\" + value\n          })\n        };\n      })\n    }, {\n      id: 'propertyRent',\n      type: 'textInput',\n      condition: state.usageType === _USAGE_TYPE.INVESTMENT,\n      money: true\n    }, {\n      id: 'borrowerCount',\n      type: 'buttons',\n      question: true,\n      buttons: [{\n        id: 1,\n        label: React.createElement(_T, {\n          id: \"general.1\"\n        })\n      }, {\n        id: 2,\n        label: React.createElement(_T, {\n          id: \"general.2\"\n        })\n      }]\n    }, {\n      id: 'age',\n      type: 'textInput',\n      condition: state.borrowerCount === 1,\n      text2: true,\n      number: true,\n      width: 50,\n      validation: {\n        min: 18,\n        max: 120\n      }\n    }, {\n      id: 'oldestAge',\n      type: 'textInput',\n      condition: state.borrowerCount > 1,\n      text2: true,\n      number: true,\n      width: 50,\n      validation: {\n        min: 18,\n        max: 120\n      }\n    }, {\n      id: 'gender',\n      type: 'buttons',\n      condition: state.borrowerCount === 1 && state.age >= 50,\n      text2: true,\n      buttons: Object.values(_GENDER).map(function (value) {\n        return {\n          id: value,\n          label: React.createElement(_T, {\n            id: \"Start2Form.gender.\" + value\n          })\n        };\n      })\n    }, {\n      id: 'oldestGender',\n      type: 'buttons',\n      condition: state.borrowerCount > 1 && state.oldestAge >= 50,\n      buttons: Object.values(_GENDER).map(function (value) {\n        return {\n          id: value,\n          label: React.createElement(_T, {\n            id: \"Start2Form.gender.\" + value\n          })\n        };\n      })\n    }, {\n      id: 'initialIncomeAgreed',\n      type: 'buttons',\n      intlValues: {\n        value: React.createElement(\n          \"span\",\n          {\n            className: \"active\"\n          },\n          React.createElement(_IntlNumber, {\n            value: state.initialIncome,\n            format: \"money\"\n          })\n        )\n      },\n      hideResult: true,\n      buttons: [{\n        id: true,\n        label: 'Ok'\n      }]\n    }, {\n      id: 'income',\n      type: 'multipleInput',\n      firstMultiple: true,\n      money: true,\n      zeroAllowed: true,\n      placeholder: \"CHF \" + _toMoney(state.initialIncome)\n    }, {\n      id: 'bonusExists',\n      type: 'buttons',\n      question: true,\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.yes\"\n        })\n      }, {\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.no\"\n        })\n      }]\n    }, {\n      id: 'bonus4',\n      type: 'multipleInput',\n      condition: state.bonusExists === true,\n      money: true,\n      zeroAllowed: true\n    }, {\n      id: 'bonus3',\n      type: 'multipleInput',\n      condition: state.bonusExists === true,\n      money: true,\n      zeroAllowed: true\n    }, {\n      id: 'bonus2',\n      type: 'multipleInput',\n      condition: state.bonusExists === true,\n      money: true,\n      zeroAllowed: true\n    }, {\n      id: 'bonus1',\n      type: 'multipleInput',\n      condition: state.bonusExists === true,\n      money: true,\n      zeroAllowed: true\n    }, {\n      id: 'otherIncomeExists',\n      type: 'buttons',\n      question: true,\n      deleteId: 'otherIncome',\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.yes\"\n        })\n      }, {\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.no\"\n        })\n      }]\n    }, {\n      id: 'otherIncome',\n      type: 'arrayInput',\n      condition: state.otherIncomeExists === true,\n      existId: 'otherIncomeExists',\n      inputs: [{\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(_OTHER_INCOME).map(function (value) {\n          return {\n            id: value\n          };\n        })\n      }, {\n        id: 'value',\n        type: 'textInput',\n        money: true\n      }]\n    }, {\n      id: 'expensesExists',\n      type: 'buttons',\n      intlValues: {\n        optional: state.usageType !== _USAGE_TYPE.PRIMARY ? 'rentes, ' : ''\n      },\n      question: true,\n      deleteId: 'expenses',\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.yes\"\n        })\n      }, {\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.no\"\n        })\n      }]\n    }, {\n      id: 'expenses',\n      type: 'arrayInput',\n      condition: state.expensesExists === true,\n      existId: 'expensesExists',\n      inputs: [{\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(_EXPENSES).map(function (value) {\n          return {\n            id: value\n          };\n        })\n      }, {\n        id: 'value',\n        type: 'textInput',\n        money: true,\n        zeroAllowed: true\n      }]\n    }, {\n      id: 'initialFortuneAgreed',\n      type: 'buttons',\n      intlValues: {\n        value: React.createElement(\n          \"span\",\n          {\n            className: \"active\"\n          },\n          React.createElement(_IntlNumber, {\n            value: state.initialFortune,\n            format: \"money\"\n          })\n        )\n      },\n      hideResult: true,\n      buttons: [{\n        id: true,\n        label: 'Ok'\n      }]\n    }, {\n      id: 'fortune',\n      type: 'multipleInput',\n      firstMultiple: true,\n      question: true,\n      money: true,\n      zeroAllowed: state.borrowerCount > 1,\n      placeholder: \"CHF \" + _toMoney(state.initialFortune)\n    }, {\n      id: 'insurance1Exists',\n      condition: state.usageType === _USAGE_TYPE.PRIMARY,\n      type: 'buttons',\n      question: true,\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.yes\"\n        })\n      }, {\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.no\"\n        }),\n        onClick: function () {\n          function onClick() {\n            setFormState('insurance11', 0);\n            setFormState('insurance12', 0);\n          }\n\n          return onClick;\n        }()\n      }]\n    }, {\n      id: 'insurance1',\n      condition: state.usageType === _USAGE_TYPE.PRIMARY && state.insurance1Exists === true,\n      type: 'multipleInput',\n      money: true,\n      zeroAllowed: true\n    }, {\n      id: 'insurance2Exists',\n      condition: state.usageType === _USAGE_TYPE.PRIMARY,\n      type: 'buttons',\n      question: true,\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.yes\"\n        })\n      }, {\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.no\"\n        }),\n        onClick: function () {\n          function onClick() {\n            setFormState('insurance21', 0);\n            setFormState('insurance22', 0);\n          }\n\n          return onClick;\n        }()\n      }]\n    }, {\n      id: 'insurance2',\n      condition: state.usageType === _USAGE_TYPE.PRIMARY && state.insurance2Exists === true,\n      type: 'multipleInput',\n      money: true,\n      zeroAllowed: true\n    }, {\n      id: 'realEstateExists',\n      type: 'buttons',\n      question: true,\n      deleteId: 'realEstate',\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.yes\"\n        })\n      }, {\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.no\"\n        })\n      }]\n    }, {\n      id: 'realEstate',\n      condition: state.realEstateExists === true,\n      existId: 'realEstateExists',\n      type: 'arrayInput',\n      allOptions: true,\n      inputs: [{\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(_REAL_ESTATE).map(function (value) {\n          return {\n            id: value\n          };\n        })\n      }, {\n        id: 'value',\n        type: 'textInput',\n        money: true\n      }, {\n        id: 'loan',\n        type: 'textInput',\n        money: true,\n        zeroAllowed: true\n      }]\n    }];\n  }\n\n  return _getAcquisitionArray;\n}();\n\nvar _getErrorArray = function () {\n  function _getErrorArray(state, props, setFormState) {\n    return [{\n      id: 'notEnoughCash',\n      error: true,\n      condition: state.usageType === _USAGE_TYPE.PRIMARY && props.fortune < props.minCash && props.insuranceFortune >= 0.1 * props.propAndWork,\n      type: 'buttons',\n      intlValues: {\n        value: React.createElement(\n          \"span\",\n          {\n            className: \"body\"\n          },\n          React.createElement(_IntlNumber, {\n            value: props.minCash,\n            format: \"money\"\n          })\n        )\n      },\n      buttons: [{\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.modify\"\n        }),\n        onClick: function () {\n          function onClick() {\n            setFormState('activeLine', 'fortune', function () {\n              var options = {\n                duration: 350,\n                delay: 0,\n                smooth: true,\n                offset: -86\n              };\n\n              _Meteor.defer(function () {\n                Scroll.scroller.scrollTo('fortune', options);\n              });\n            });\n          }\n\n          return onClick;\n        }()\n      }, {\n        id: undefined,\n        help: true,\n        component: React.createElement(\n          DialogSimple,\n          {\n            label: React.createElement(_T, {\n              id: \"Start2Form.whyButton\"\n            }),\n            title: React.createElement(_T, {\n              id: \"Start2Form.notEnoughCash.dialogTitle\"\n            }),\n            key: 2,\n            rootStyle: {\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8\n            }\n          },\n          React.createElement(_T, {\n            id: \"Start2Form.notEnoughCash.description\"\n          })\n        )\n      }]\n    }, {\n      id: 'notEnoughOwnFunds',\n      error: true,\n      condition: props.fortune + props.insuranceFortune < props.minFortune,\n      type: 'buttons',\n      intlValues: {\n        value: React.createElement(\n          \"span\",\n          {\n            className: \"body\"\n          },\n          React.createElement(_IntlNumber, {\n            value: props.minFortune,\n            format: \"money\"\n          })\n        )\n      },\n      buttons: [{\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.modify\"\n        }),\n        onClick: function () {\n          function onClick() {\n            setFormState('activeLine', 'fortune', function () {\n              var options = {\n                duration: 350,\n                delay: 0,\n                smooth: true,\n                offset: -86\n              };\n\n              _Meteor.defer(function () {\n                Scroll.scroller.scrollTo('fortune', options);\n              });\n            });\n          }\n\n          return onClick;\n        }()\n      }, {\n        id: undefined,\n        help: true,\n        component: React.createElement(\n          DialogSimple,\n          {\n            label: React.createElement(_T, {\n              id: \"Start2Form.whyButton\"\n            }),\n            title: React.createElement(_T, {\n              id: \"Start2Form.notEnoughOwnFunds.dialogTitle\"\n            }),\n            key: 2,\n            rootStyle: {\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8\n            }\n          },\n          React.createElement(_T, {\n            id: \"Start2Form.notEnoughOwnFunds.description\"\n          })\n        )\n      }]\n    }];\n  }\n\n  return _getErrorArray;\n}();\n\nvar _getFinalArray = function () {\n  function _getFinalArray(state, props, setFormState, components) {\n    return [{\n      id: 'acceptedLoan',\n      condition: state.type === 'acquisition',\n      type: 'buttons',\n      intlValues: {\n        value: React.createElement(\n          \"span\",\n          {\n            className: \"active\"\n          },\n          React.createElement(_IntlNumber, {\n            value: props.maxLoan,\n            format: \"money\"\n          })\n        )\n      },\n      hideResult: true,\n      buttons: [{\n        id: true,\n        label: 'Ok',\n        onClick: function () {\n          function onClick() {\n            setFormState('loanWanted', props.maxLoan);\n          }\n\n          return onClick;\n        }()\n      }, {\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.modify\"\n        }),\n        onClick: function () {\n          function onClick() {\n            setFormState('loanWanted', undefined);\n          }\n\n          return onClick;\n        }()\n      }]\n    }, {\n      id: 'loanWanted',\n      condition: state.type === 'acquisition' && state.acceptedLoan === false,\n      type: 'sliderInput',\n      child1: React.createElement(\n        \"span\",\n        {\n          className: \"loanWanted-slider\"\n        },\n        React.createElement(\n          \"div\",\n          null,\n          React.createElement(\n            \"label\",\n            {\n              htmlFor: \"\"\n            },\n            React.createElement(_T, {\n              id: \"general.mortgageLoan\"\n            })\n          ),\n          React.createElement(\n            \"span\",\n            {\n              className: \"active\"\n            },\n            React.createElement(_IntlNumber, {\n              value: state.loanWanted || props.maxLoan,\n              format: \"money\"\n            })\n          )\n        ),\n        React.createElement(\n          \"div\",\n          null,\n          React.createElement(\n            \"label\",\n            {\n              htmlFor: \"\"\n            },\n            React.createElement(_T, {\n              id: \"general.ownFunds\"\n            })\n          ),\n          React.createElement(\n            \"span\",\n            {\n              className: \"body\"\n            },\n            React.createElement(_IntlNumber, {\n              value: props.fortuneNeeded || props.project - props.maxLoan,\n              format: \"money\"\n            })\n          )\n        )\n      ),\n      money: true,\n      question: true,\n      sliderMin: Math.max(100000, props.minLoan),\n      sliderMax: props.maxLoan,\n      initialValue: props.maxLoan,\n      sliderLabels: [React.createElement(_T, {\n        id: \"Start2Form.loanWanted.sliderMin\"\n      }), React.createElement(_T, {\n        id: \"Start2Form.loanWanted.sliderMax\"\n      })],\n      onDragStart: function () {\n        function onDragStart() {\n          // Make sure we reset the next sliders if this is modified afterwards\n          if (state.fortuneUsed) {\n            setFormState('fortuneUsed', undefined);\n          }\n\n          if (state.insuranceFortuneUsed) {\n            setFormState('insuranceFortuneUsed', undefined);\n          }\n        }\n\n        return onDragStart;\n      }(),\n      validation: {\n        min: Math.max(100000, props.minLoan),\n        max: state.usageType === _USAGE_TYPE.SECONDARY ? Math.ceil(0.7 * props.propAndWork) : Math.ceil(0.8 * props.propAndWork)\n      }\n    }, {\n      id: 'fortuneRequiredAgreed',\n      condition: state.type === 'acquisition' && (state.usageType !== _USAGE_TYPE.PRIMARY || state.usageType === _USAGE_TYPE.PRIMARY && props.insuranceFortune <= 0),\n      type: 'buttons',\n      intlValues: {\n        value: React.createElement(\n          \"span\",\n          {\n            className: \"active\"\n          },\n          React.createElement(_IntlNumber, {\n            value: props.fortuneNeeded,\n            format: \"money\"\n          })\n        )\n      },\n      hideResult: true,\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.continue\"\n        }),\n        onClick: function () {\n          function onClick() {\n            setFormState('fortuneUsed', props.fortuneNeeded);\n          }\n\n          return onClick;\n        }()\n      }]\n    }, {\n      // insurance is not needed, but still propose to use it\n      id: 'useInsurance1',\n      condition: state.type === 'acquisition' && state.usageType === _USAGE_TYPE.PRIMARY && props.fortune >= props.fortuneNeeded && props.insuranceFortune > 0,\n      type: 'buttons',\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.yes\"\n        }),\n        onClick: function () {\n          function onClick() {\n            // fortuneUsed value is undefined at this point, however,\n            // if the user changes his mind, set it back to undefined if it was previously set\n            setFormState('fortuneUsed', undefined);\n          }\n\n          return onClick;\n        }()\n      }, {\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.no\"\n        }),\n        onClick: function () {\n          function onClick() {\n            setFormState('fortuneUsed', props.fortuneNeeded);\n            setFormState('insuranceFortuneUsed', 0);\n          }\n\n          return onClick;\n        }()\n      }, {\n        id: undefined,\n        help: true,\n        component: React.createElement(\n          DialogSimple,\n          {\n            label: React.createElement(_T, {\n              id: \"Start2Form.whyButton\"\n            }),\n            title: React.createElement(_T, {\n              id: \"Start2Form.useInsurance1.dialogTitle\"\n            }),\n            key: 2,\n            rootStyle: {\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8\n            }\n          },\n          React.createElement(_T, {\n            id: \"Start2Form.useInsurance1.description\"\n          })\n        )\n      }],\n      question: true\n    }, {\n      // insurance is necessary\n      id: 'useInsurance2',\n      condition: state.type === 'acquisition' && state.usageType === _USAGE_TYPE.PRIMARY && props.fortune < props.fortuneNeeded,\n      type: 'buttons',\n      buttons: [{\n        id: true,\n        label: 'Ok'\n      }, {\n        id: undefined,\n        help: true,\n        component: React.createElement(\n          DialogSimple,\n          {\n            label: React.createElement(_T, {\n              id: \"Start2Form.whyButton\"\n            }),\n            title: React.createElement(_T, {\n              id: \"Start2Form.useInsurance1.dialogTitle\"\n            }),\n            key: 2,\n            rootStyle: {\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8\n            }\n          },\n          React.createElement(_T, {\n            id: \"Start2Form.useInsurance2.description\"\n          })\n        )\n      }],\n      question: true\n    }, {\n      id: 'insuranceConditions',\n      condition: state.useInsurance1 === true || state.useInsurance2 === true,\n      type: 'buttons',\n      question: true,\n      buttons: [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"general.yes\"\n        }),\n        onClick: function () {\n          function onClick() {\n            setFormState('cantUseInsurance', false);\n          }\n\n          return onClick;\n        }()\n      }, {\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.no\"\n        }),\n        onClick: function () {\n          function onClick() {\n            setFormState('cantUseInsurance', true);\n            setFormState('insuranceFortuneUsed', 0);\n          }\n\n          return onClick;\n        }()\n      }, {\n        id: undefined,\n        help: true,\n        component: React.createElement(\n          DialogSimple,\n          {\n            secondary: true,\n            label: React.createElement(_T, {\n              id: \"Start2Form.insuranceConditions.button\"\n            }),\n            title: React.createElement(_T, {\n              id: \"Start2Form.insuranceConditions.title\"\n            }),\n            key: 2,\n            rootStyle: {\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8\n            }\n          },\n          React.createElement(_T, {\n            id: \"Start2Form.insuranceConditions.description\"\n          }),\n          React.createElement(\"br\", null),\n          React.createElement(\"br\", null),\n          React.createElement(\n            \"ul\",\n            null,\n            React.createElement(\n              \"li\",\n              null,\n              React.createElement(_T, {\n                id: \"Start2Form.insuranceConditions.1\"\n              })\n            ),\n            React.createElement(\n              \"li\",\n              null,\n              React.createElement(_T, {\n                id: \"Start2Form.insuranceConditions.2\"\n              })\n            )\n          )\n        )\n      }]\n    }, {\n      id: 'fortuneSliders',\n      condition: state.type === 'acquisition' && state.usageType === _USAGE_TYPE.PRIMARY && (state.useInsurance1 === true || state.useInsurance2 === true) && state.insuranceConditions === true,\n      type: 'custom',\n      component: components && components.FortuneSliders,\n      // minFortune is required to do math in the FortuneSliders component\n      minFortune: props.minFortune,\n      fortune: props.fortune,\n      validation: function () {\n        function validation() {\n          return state.fortuneUsed + (state.insuranceFortuneUsed || 0) >= props.minFortune && state.fortuneUsed >= props.minCash;\n        }\n\n        return validation;\n      }(),\n      intlValues: {\n        value: React.createElement(\n          \"span\",\n          {\n            className: \"active\"\n          },\n          React.createElement(_IntlNumber, {\n            value: props.project - state.loanWanted,\n            format: \"money\"\n          })\n        )\n      },\n      sliders: [{\n        id: 'fortuneUsed',\n        sliderMin: Math.max(props.fortuneNeeded - props.insuranceFortune, props.minCash),\n        sliderMax: props.fortune >= props.fortuneNeeded ? props.fortuneNeeded : props.fortune\n      }, {\n        id: 'insuranceFortuneUsed',\n        sliderMin: props.fortune >= props.fortuneNeeded ? 0 : props.fortuneNeeded - props.fortune,\n        sliderMax: Math.min(props.insuranceFortune, props.fortuneNeeded - props.minCash)\n      }]\n    }, {\n      id: 'notEnoughIncome',\n      error: true,\n      condition: (props.income && props.monthly / ((props.income - props.expenses) / 12)) > 0.38,\n      type: 'buttons',\n      intlValues: {\n        value: React.createElement(\n          \"span\",\n          {\n            className: \"body\"\n          },\n          React.createElement(_IntlNumber // props.monthly represents 38% of the monthly cost,\n          // then convert it to yearly, and round it up to avoid errors.\n          , {\n            value: Math.round(props.monthly / constants.maxRatio * 12 / 1000) * 1000,\n            format: \"money\"\n          })\n        )\n      },\n      buttons: [{\n        id: false,\n        label: React.createElement(_T, {\n          id: \"general.modify\"\n        }),\n        onClick: function () {\n          function onClick() {\n            setFormState('activeLine', 'income', function () {\n              var options = {\n                duration: 350,\n                delay: 0,\n                smooth: true,\n                offset: -86\n              };\n\n              _Meteor.defer(function () {\n                Scroll.scroller.scrollTo('income', options);\n              });\n            });\n          }\n\n          return onClick;\n        }()\n      }, {\n        id: undefined,\n        help: true,\n        component: React.createElement(\n          DialogSimple,\n          {\n            label: React.createElement(_T, {\n              id: \"Start2Form.whyButton\"\n            }),\n            title: React.createElement(_T, {\n              id: \"Start2Form.notEnoughIncome.dialogTitle\"\n            }),\n            key: 2,\n            rootStyle: {\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8\n            }\n          },\n          React.createElement(_T, {\n            id: \"Start2Form.notEnoughIncome.description\"\n          })\n        )\n      }]\n    }, {\n      id: 'finalized',\n      condition: state.type === 'test' || state.fortuneUsed + (state.insuranceFortuneUsed || 0) >= props.minFortune,\n      type: 'buttons',\n      hideResult: true,\n      buttons: !state.hideFinalButton ? [{\n        id: true,\n        label: React.createElement(_T, {\n          id: \"Start2Form.finalized.button\"\n        }),\n        onClick: function () {\n          function onClick() {\n            // After clicking on this button, hide it\n            setFormState('hideFinalButton', true);\n            var options = {\n              duration: 350,\n              delay: 0,\n              smooth: true\n            };\n\n            _Meteor.defer(function () {\n              return Scroll.scroller.scrollTo('final', options);\n            });\n          }\n\n          return onClick;\n        }()\n      }] : []\n    }];\n  }\n\n  return _getFinalArray;\n}();\n\nvar getFormArray = function () {\n  function getFormArray(state, props, setFormState, components) {\n    return _getAcquisitionArray(state, props, setFormState).concat(state.type === 'acquisition' ? _getErrorArray(state, props, setFormState) : [], // these errors only for acquisitions\n    _getFinalArray(state, props, setFormState, components));\n  }\n\n  return getFormArray;\n}();\n\nmodule.exportDefault(getFormArray);","map":{"version":3,"sources":["imports/core/arrays/StartFormArray.js"],"names":["module","export","getAcquisitionArray","getErrorArray","getFinalArray","React","watch","require","v","Meteor","Scroll","DialogSimple","T","IntlNumber","constants","toMoney","USAGE_TYPE","OTHER_INCOME","REAL_ESTATE","GENDER","EXPENSES","PURCHASE_TYPE","state","props","setFormState","id","type","condition","knowsProperty","money","intlValues","value","propertyValue","hideResult","buttons","noPrimary","secondary","className","label","question","deleteId","propertyWorkExists","propertyWork","undefined","Object","values","map","usageType","INVESTMENT","borrowerCount","text2","number","width","validation","min","max","age","oldestAge","initialIncome","firstMultiple","zeroAllowed","placeholder","bonusExists","otherIncomeExists","existId","inputs","options","optional","PRIMARY","expensesExists","initialFortune","onClick","insurance1Exists","insurance2Exists","realEstateExists","allOptions","error","fortune","minCash","insuranceFortune","propAndWork","duration","delay","smooth","offset","defer","scroller","scrollTo","help","component","display","marginRight","marginBottom","minFortune","components","maxLoan","acceptedLoan","child1","loanWanted","fortuneNeeded","project","sliderMin","Math","minLoan","sliderMax","initialValue","sliderLabels","onDragStart","fortuneUsed","insuranceFortuneUsed","SECONDARY","ceil","useInsurance1","useInsurance2","insuranceConditions","FortuneSliders","sliders","income","monthly","expenses","round","maxRatio","hideFinalButton","getFormArray","concat","exportDefault"],"mappings":"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","file":"imports/core/arrays/StartFormArray.js.map","sourcesContent":["import React from 'react';\nimport { Meteor } from 'meteor/meteor';\nimport Scroll from 'react-scroll';\n\nimport DialogSimple from 'core/components/DialogSimple';\nimport { T, IntlNumber } from 'core/components/Translation';\nimport constants from 'core/config/constants';\nimport { toMoney } from 'core/utils/conversionFunctions';\nimport {\n  USAGE_TYPE,\n  OTHER_INCOME,\n  REAL_ESTATE,\n  GENDER,\n  EXPENSES,\n  PURCHASE_TYPE,\n} from 'core/api/constants';\n\nexport const getAcquisitionArray = (state, props, setFormState) => [\n  {\n    id: 'propertyValue',\n    type: 'textInput',\n    condition: state.knowsProperty === true,\n    money: true,\n  },\n  {\n    id: 'notaryFeesAgreed',\n    type: 'buttons',\n    condition: state.knowsProperty === true,\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={0.05 * state.propertyValue} format=\"money\" />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [\n      {\n        id: true,\n        noPrimary: true,\n        secondary: true,\n        className: 'animated infinite pulse',\n        label: <T id=\"general.continue\" />,\n      },\n    ],\n  },\n  {\n    id: 'propertyWorkExists',\n    type: 'buttons',\n    condition: state.knowsProperty === true,\n    question: true,\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      { id: false, label: <T id=\"general.no\" /> },\n    ],\n    deleteId: 'propertyWork',\n  },\n  {\n    id: 'propertyWork',\n    condition: state.propertyWorkExists === true,\n    type: 'textInput',\n    money: true,\n  },\n  {\n    id: 'projectAgreed',\n    type: 'buttons',\n    condition: state.propertyWork !== undefined && state.propertyWork !== 0,\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber\n            value={1.05 * state.propertyValue + (state.propertyWork || 0)}\n            format=\"money\"\n          />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [{ id: true, label: <T id=\"general.continue\" /> }],\n  },\n  {\n    id: 'usageType',\n    type: 'buttons',\n    question: true,\n    buttons: Object.values(USAGE_TYPE).map(value => ({\n      id: value,\n      label: <T id={`Start2Form.usageTypeButton${value}`} />,\n    })),\n  },\n  {\n    id: 'propertyRent',\n    type: 'textInput',\n    condition: state.usageType === USAGE_TYPE.INVESTMENT,\n    money: true,\n  },\n  {\n    id: 'borrowerCount',\n    type: 'buttons',\n    question: true,\n    buttons: [\n      { id: 1, label: <T id=\"general.1\" /> },\n      { id: 2, label: <T id=\"general.2\" /> },\n    ],\n  },\n  {\n    id: 'age',\n    type: 'textInput',\n    condition: state.borrowerCount === 1,\n    text2: true,\n    number: true,\n    width: 50,\n    validation: { min: 18, max: 120 },\n  },\n  {\n    id: 'oldestAge',\n    type: 'textInput',\n    condition: state.borrowerCount > 1,\n    text2: true,\n    number: true,\n    width: 50,\n    validation: { min: 18, max: 120 },\n  },\n  {\n    id: 'gender',\n    type: 'buttons',\n    condition: state.borrowerCount === 1 && state.age >= 50,\n    text2: true,\n    buttons: Object.values(GENDER).map(value => ({\n      id: value,\n      label: <T id={`Start2Form.gender.${value}`} />,\n    })),\n  },\n  {\n    id: 'oldestGender',\n    type: 'buttons',\n    condition: state.borrowerCount > 1 && state.oldestAge >= 50,\n    buttons: Object.values(GENDER).map(value => ({\n      id: value,\n      label: <T id={`Start2Form.gender.${value}`} />,\n    })),\n  },\n  {\n    id: 'initialIncomeAgreed',\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={state.initialIncome} format=\"money\" />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [{ id: true, label: 'Ok' }],\n  },\n  {\n    id: 'income',\n    type: 'multipleInput',\n    firstMultiple: true,\n    money: true,\n    zeroAllowed: true,\n    placeholder: `CHF ${toMoney(state.initialIncome)}`,\n  },\n  {\n    id: 'bonusExists',\n    type: 'buttons',\n    question: true,\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      { id: false, label: <T id=\"general.no\" /> },\n    ],\n  },\n  {\n    id: 'bonus4',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'bonus3',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'bonus2',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'bonus1',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'otherIncomeExists',\n    type: 'buttons',\n    question: true,\n    deleteId: 'otherIncome',\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      { id: false, label: <T id=\"general.no\" /> },\n    ],\n  },\n  {\n    id: 'otherIncome',\n    type: 'arrayInput',\n    condition: state.otherIncomeExists === true,\n    existId: 'otherIncomeExists',\n    inputs: [\n      {\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(OTHER_INCOME).map(value => ({ id: value })),\n      },\n      {\n        id: 'value',\n        type: 'textInput',\n        money: true,\n      },\n    ],\n  },\n  {\n    id: 'expensesExists',\n    type: 'buttons',\n    intlValues: {\n      optional: state.usageType !== USAGE_TYPE.PRIMARY ? 'rentes, ' : '',\n    },\n    question: true,\n    deleteId: 'expenses',\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      { id: false, label: <T id=\"general.no\" /> },\n    ],\n  },\n  {\n    id: 'expenses',\n    type: 'arrayInput',\n    condition: state.expensesExists === true,\n    existId: 'expensesExists',\n    inputs: [\n      {\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(EXPENSES).map(value => ({ id: value })),\n      },\n      {\n        id: 'value',\n        type: 'textInput',\n        money: true,\n        zeroAllowed: true,\n      },\n    ],\n  },\n  {\n    id: 'initialFortuneAgreed',\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={state.initialFortune} format=\"money\" />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [{ id: true, label: 'Ok' }],\n  },\n  {\n    id: 'fortune',\n    type: 'multipleInput',\n    firstMultiple: true,\n    question: true,\n    money: true,\n    zeroAllowed: state.borrowerCount > 1,\n    placeholder: `CHF ${toMoney(state.initialFortune)}`,\n  },\n  {\n    id: 'insurance1Exists',\n    condition: state.usageType === USAGE_TYPE.PRIMARY,\n    type: 'buttons',\n    question: true,\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      {\n        id: false,\n        label: <T id=\"general.no\" />,\n        onClick() {\n          setFormState('insurance11', 0);\n          setFormState('insurance12', 0);\n        },\n      },\n    ],\n  },\n  {\n    id: 'insurance1',\n    condition:\n      state.usageType === USAGE_TYPE.PRIMARY && state.insurance1Exists === true,\n    type: 'multipleInput',\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'insurance2Exists',\n    condition: state.usageType === USAGE_TYPE.PRIMARY,\n    type: 'buttons',\n    question: true,\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      {\n        id: false,\n        label: <T id=\"general.no\" />,\n        onClick() {\n          setFormState('insurance21', 0);\n          setFormState('insurance22', 0);\n        },\n      },\n    ],\n  },\n  {\n    id: 'insurance2',\n    condition:\n      state.usageType === USAGE_TYPE.PRIMARY && state.insurance2Exists === true,\n    type: 'multipleInput',\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'realEstateExists',\n    type: 'buttons',\n    question: true,\n    deleteId: 'realEstate',\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      { id: false, label: <T id=\"general.no\" /> },\n    ],\n  },\n  {\n    id: 'realEstate',\n    condition: state.realEstateExists === true,\n    existId: 'realEstateExists',\n    type: 'arrayInput',\n    allOptions: true,\n    inputs: [\n      {\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(REAL_ESTATE).map(value => ({ id: value })),\n      },\n      {\n        id: 'value',\n        type: 'textInput',\n        money: true,\n      },\n      {\n        id: 'loan',\n        type: 'textInput',\n        money: true,\n        zeroAllowed: true,\n      },\n    ],\n  },\n];\n\nexport const getErrorArray = (state, props, setFormState) => [\n  {\n    id: 'notEnoughCash',\n    error: true,\n    condition:\n      state.usageType === USAGE_TYPE.PRIMARY &&\n      (props.fortune < props.minCash &&\n        props.insuranceFortune >= 0.1 * props.propAndWork),\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"body\">\n          <IntlNumber value={props.minCash} format=\"money\" />\n        </span>\n      ),\n    },\n    buttons: [\n      {\n        id: false,\n        label: <T id=\"general.modify\" />,\n        onClick() {\n          setFormState('activeLine', 'fortune', () => {\n            const options = {\n              duration: 350,\n              delay: 0,\n              smooth: true,\n              offset: -86,\n            };\n            Meteor.defer(() => {\n              Scroll.scroller.scrollTo('fortune', options);\n            });\n          });\n        },\n      },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            label={<T id=\"Start2Form.whyButton\" />}\n            title={<T id=\"Start2Form.notEnoughCash.dialogTitle\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.notEnoughCash.description\" />\n          </DialogSimple>\n        ),\n      },\n    ],\n  },\n  {\n    id: 'notEnoughOwnFunds',\n    error: true,\n    condition: props.fortune + props.insuranceFortune < props.minFortune,\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"body\">\n          <IntlNumber value={props.minFortune} format=\"money\" />\n        </span>\n      ),\n    },\n    buttons: [\n      {\n        id: false,\n        label: <T id=\"general.modify\" />,\n        onClick() {\n          setFormState('activeLine', 'fortune', () => {\n            const options = {\n              duration: 350,\n              delay: 0,\n              smooth: true,\n              offset: -86,\n            };\n            Meteor.defer(() => {\n              Scroll.scroller.scrollTo('fortune', options);\n            });\n          });\n        },\n      },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            label={<T id=\"Start2Form.whyButton\" />}\n            title={<T id=\"Start2Form.notEnoughOwnFunds.dialogTitle\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.notEnoughOwnFunds.description\" />\n          </DialogSimple>\n        ),\n      },\n    ],\n  },\n];\n\nexport const getFinalArray = (state, props, setFormState, components) => [\n  {\n    id: 'acceptedLoan',\n    condition: state.type === 'acquisition',\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={props.maxLoan} format=\"money\" />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [\n      {\n        id: true,\n        label: 'Ok',\n        onClick() {\n          setFormState('loanWanted', props.maxLoan);\n        },\n      },\n      {\n        id: false,\n        label: <T id=\"general.modify\" />,\n        onClick() {\n          setFormState('loanWanted', undefined);\n        },\n      },\n    ],\n  },\n  {\n    id: 'loanWanted',\n    condition: state.type === 'acquisition' && state.acceptedLoan === false,\n    type: 'sliderInput',\n    child1: (\n      <span className=\"loanWanted-slider\">\n        <div>\n          <label htmlFor=\"\">\n            <T id=\"general.mortgageLoan\" />\n          </label>\n          <span className=\"active\">\n            <IntlNumber\n              value={state.loanWanted || props.maxLoan}\n              format=\"money\"\n            />\n          </span>\n        </div>\n        <div>\n          <label htmlFor=\"\">\n            <T id=\"general.ownFunds\" />\n          </label>\n          <span className=\"body\">\n            <IntlNumber\n              value={props.fortuneNeeded || props.project - props.maxLoan}\n              format=\"money\"\n            />\n          </span>\n        </div>\n      </span>\n    ),\n    money: true,\n    question: true,\n    sliderMin: Math.max(100000, props.minLoan),\n    sliderMax: props.maxLoan,\n    initialValue: props.maxLoan,\n    sliderLabels: [\n      <T id=\"Start2Form.loanWanted.sliderMin\" />,\n      <T id=\"Start2Form.loanWanted.sliderMax\" />,\n    ],\n    onDragStart() {\n      // Make sure we reset the next sliders if this is modified afterwards\n      if (state.fortuneUsed) {\n        setFormState('fortuneUsed', undefined);\n      }\n      if (state.insuranceFortuneUsed) {\n        setFormState('insuranceFortuneUsed', undefined);\n      }\n    },\n    validation: {\n      min: Math.max(100000, props.minLoan),\n      max:\n        state.usageType === USAGE_TYPE.SECONDARY\n          ? Math.ceil(0.7 * props.propAndWork)\n          : Math.ceil(0.8 * props.propAndWork),\n    },\n  },\n  {\n    id: 'fortuneRequiredAgreed',\n    condition:\n      state.type === 'acquisition' &&\n      (state.usageType !== USAGE_TYPE.PRIMARY ||\n        (state.usageType === USAGE_TYPE.PRIMARY &&\n          props.insuranceFortune <= 0)),\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={props.fortuneNeeded} format=\"money\" />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [\n      {\n        id: true,\n        label: <T id=\"general.continue\" />,\n        onClick() {\n          setFormState('fortuneUsed', props.fortuneNeeded);\n        },\n      },\n    ],\n  },\n  {\n    // insurance is not needed, but still propose to use it\n    id: 'useInsurance1',\n    condition:\n      state.type === 'acquisition' &&\n      state.usageType === USAGE_TYPE.PRIMARY &&\n      props.fortune >= props.fortuneNeeded &&\n      props.insuranceFortune > 0,\n    type: 'buttons',\n    buttons: [\n      {\n        id: true,\n        label: <T id=\"general.yes\" />,\n        onClick() {\n          // fortuneUsed value is undefined at this point, however,\n          // if the user changes his mind, set it back to undefined if it was previously set\n          setFormState('fortuneUsed', undefined);\n        },\n      },\n      {\n        id: false,\n        label: <T id=\"general.no\" />,\n        onClick() {\n          setFormState('fortuneUsed', props.fortuneNeeded);\n          setFormState('insuranceFortuneUsed', 0);\n        },\n      },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            label={<T id=\"Start2Form.whyButton\" />}\n            title={<T id=\"Start2Form.useInsurance1.dialogTitle\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.useInsurance1.description\" />\n          </DialogSimple>\n        ),\n      },\n    ],\n    question: true,\n  },\n  {\n    // insurance is necessary\n    id: 'useInsurance2',\n    condition:\n      state.type === 'acquisition' &&\n      state.usageType === USAGE_TYPE.PRIMARY &&\n      props.fortune < props.fortuneNeeded,\n    type: 'buttons',\n    buttons: [\n      { id: true, label: 'Ok' },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            label={<T id=\"Start2Form.whyButton\" />}\n            title={<T id=\"Start2Form.useInsurance1.dialogTitle\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.useInsurance2.description\" />\n          </DialogSimple>\n        ),\n      },\n    ],\n    question: true,\n  },\n  {\n    id: 'insuranceConditions',\n    condition: state.useInsurance1 === true || state.useInsurance2 === true,\n    type: 'buttons',\n    question: true,\n    buttons: [\n      {\n        id: true,\n        label: <T id=\"general.yes\" />,\n        onClick() {\n          setFormState('cantUseInsurance', false);\n        },\n      },\n      {\n        id: false,\n        label: <T id=\"general.no\" />,\n        onClick() {\n          setFormState('cantUseInsurance', true);\n          setFormState('insuranceFortuneUsed', 0);\n        },\n      },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            secondary\n            label={<T id=\"Start2Form.insuranceConditions.button\" />}\n            title={<T id=\"Start2Form.insuranceConditions.title\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.insuranceConditions.description\" />\n            <br />\n            <br />\n            <ul>\n              <li>\n                <T id=\"Start2Form.insuranceConditions.1\" />\n              </li>\n              <li>\n                <T id=\"Start2Form.insuranceConditions.2\" />\n              </li>\n            </ul>\n          </DialogSimple>\n        ),\n      },\n    ],\n  },\n  {\n    id: 'fortuneSliders',\n    condition:\n      state.type === 'acquisition' &&\n      state.usageType === USAGE_TYPE.PRIMARY &&\n      (state.useInsurance1 === true || state.useInsurance2 === true) &&\n      state.insuranceConditions === true,\n    type: 'custom',\n    component: components && components.FortuneSliders,\n    // minFortune is required to do math in the FortuneSliders component\n    minFortune: props.minFortune,\n    fortune: props.fortune,\n    validation: () =>\n      state.fortuneUsed + (state.insuranceFortuneUsed || 0) >=\n        props.minFortune && state.fortuneUsed >= props.minCash,\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={props.project - state.loanWanted} format=\"money\" />\n        </span>\n      ),\n    },\n    sliders: [\n      {\n        id: 'fortuneUsed',\n        sliderMin: Math.max(\n          props.fortuneNeeded - props.insuranceFortune,\n          props.minCash,\n        ),\n        sliderMax:\n          props.fortune >= props.fortuneNeeded\n            ? props.fortuneNeeded\n            : props.fortune,\n      },\n      {\n        id: 'insuranceFortuneUsed',\n        sliderMin:\n          props.fortune >= props.fortuneNeeded\n            ? 0\n            : props.fortuneNeeded - props.fortune,\n        sliderMax: Math.min(\n          props.insuranceFortune,\n          props.fortuneNeeded - props.minCash,\n        ),\n      },\n    ],\n  },\n  {\n    id: 'notEnoughIncome',\n    error: true,\n    condition:\n      (props.income && props.monthly / ((props.income - props.expenses) / 12)) >\n      0.38,\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"body\">\n          <IntlNumber\n            // props.monthly represents 38% of the monthly cost,\n            // then convert it to yearly, and round it up to avoid errors.\n            value={\n              Math.round(props.monthly / constants.maxRatio * 12 / 1000) * 1000\n            }\n            format=\"money\"\n          />\n        </span>\n      ),\n    },\n    buttons: [\n      {\n        id: false,\n        label: <T id=\"general.modify\" />,\n        onClick() {\n          setFormState('activeLine', 'income', () => {\n            const options = {\n              duration: 350,\n              delay: 0,\n              smooth: true,\n              offset: -86,\n            };\n            Meteor.defer(() => {\n              Scroll.scroller.scrollTo('income', options);\n            });\n          });\n        },\n      },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            label={<T id=\"Start2Form.whyButton\" />}\n            title={<T id=\"Start2Form.notEnoughIncome.dialogTitle\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.notEnoughIncome.description\" />\n          </DialogSimple>\n        ),\n      },\n    ],\n  },\n  {\n    id: 'finalized',\n    condition:\n      state.type === 'test' ||\n      state.fortuneUsed + (state.insuranceFortuneUsed || 0) >= props.minFortune,\n    type: 'buttons',\n    hideResult: true,\n    buttons: !state.hideFinalButton\n      ? [\n        {\n          id: true,\n          label: <T id=\"Start2Form.finalized.button\" />,\n          onClick() {\n            // After clicking on this button, hide it\n            setFormState('hideFinalButton', true);\n            const options = {\n              duration: 350,\n              delay: 0,\n              smooth: true,\n            };\n            Meteor.defer(() => Scroll.scroller.scrollTo('final', options));\n          },\n        },\n      ]\n      : [],\n  },\n];\n\nconst getFormArray = (state, props, setFormState, components) =>\n  getAcquisitionArray(state, props, setFormState).concat(\n    state.type === 'acquisition'\n      ? getErrorArray(state, props, setFormState)\n      : [], // these errors only for acquisitions\n    getFinalArray(state, props, setFormState, components),\n  );\n\nexport default getFormArray;\n"]},"hash":"8604af387a892dcb732f166c732aad018260e291"}

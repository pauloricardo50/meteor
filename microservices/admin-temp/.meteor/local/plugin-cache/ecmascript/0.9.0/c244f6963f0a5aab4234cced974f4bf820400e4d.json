{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"../api","imported":["Borrowers","Loans","Offers","Properties","Tasks","Users","SecurityService"],"specifiers":[{"kind":"named","imported":"Borrowers","local":"Borrowers"},{"kind":"named","imported":"Loans","local":"Loans"},{"kind":"named","imported":"Offers","local":"Offers"},{"kind":"named","imported":"Properties","local":"Properties"},{"kind":"named","imported":"Tasks","local":"Tasks"},{"kind":"named","imported":"Users","local":"Users"},{"kind":"named","imported":"SecurityService","local":"SecurityService"}]},{"source":"../api/users/UserService","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"UserService"}]},{"source":"../api/tasks/TaskService","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TaskService"}]},{"source":"../api/tasks/tasksConstants","imported":["TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]},{"source":"./config","imported":["USER_COUNT","ADMIN_COUNT","MAX_LOANS_PER_USER"],"specifiers":[{"kind":"named","imported":"USER_COUNT","local":"USER_COUNT"},{"kind":"named","imported":"ADMIN_COUNT","local":"ADMIN_COUNT"},{"kind":"named","imported":"MAX_LOANS_PER_USER","local":"MAX_LOANS_PER_USER"}]},{"source":"./loans","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createFakeLoan"}]},{"source":"./tasks","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createFakeTask"}]},{"source":"./users","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createFakeUsers"}]},{"source":"./offers","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createFakeOffer"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/fixtures/methods.js","filenameRelative":"imports/core/fixtures/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/fixtures/methods.js.map","sourceFileName":"imports/core/fixtures/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"\"use strict\";\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 0);\n\nvar _check = void 0;\n\nmodule.watch(require(\"meteor/check\"), {\n  check: function check(v) {\n    _check = v;\n  }\n}, 1);\n\nvar _Borrowers = void 0,\n    _Loans = void 0,\n    _Offers = void 0,\n    _Properties = void 0,\n    _Tasks = void 0,\n    _Users = void 0,\n    _SecurityService = void 0;\n\nmodule.watch(require(\"../api\"), {\n  Borrowers: function Borrowers(v) {\n    _Borrowers = v;\n  },\n  Loans: function Loans(v) {\n    _Loans = v;\n  },\n  Offers: function Offers(v) {\n    _Offers = v;\n  },\n  Properties: function Properties(v) {\n    _Properties = v;\n  },\n  Tasks: function Tasks(v) {\n    _Tasks = v;\n  },\n  Users: function Users(v) {\n    _Users = v;\n  },\n  SecurityService: function SecurityService(v) {\n    _SecurityService = v;\n  }\n}, 2);\nvar UserService = void 0;\nmodule.watch(require(\"../api/users/UserService\"), {\n  default: function _default(v) {\n    UserService = v;\n  }\n}, 3);\nvar TaskService = void 0;\nmodule.watch(require(\"../api/tasks/TaskService\"), {\n  default: function _default(v) {\n    TaskService = v;\n  }\n}, 4);\n\nvar _TASK_TYPE = void 0;\n\nmodule.watch(require(\"../api/tasks/tasksConstants\"), {\n  TASK_TYPE: function TASK_TYPE(v) {\n    _TASK_TYPE = v;\n  }\n}, 5);\n\nvar _USER_COUNT = void 0,\n    _ADMIN_COUNT = void 0,\n    _MAX_LOANS_PER_USER = void 0;\n\nmodule.watch(require(\"./config\"), {\n  USER_COUNT: function USER_COUNT(v) {\n    _USER_COUNT = v;\n  },\n  ADMIN_COUNT: function ADMIN_COUNT(v) {\n    _ADMIN_COUNT = v;\n  },\n  MAX_LOANS_PER_USER: function MAX_LOANS_PER_USER(v) {\n    _MAX_LOANS_PER_USER = v;\n  }\n}, 6);\nvar createFakeLoan = void 0;\nmodule.watch(require(\"./loans\"), {\n  default: function _default(v) {\n    createFakeLoan = v;\n  }\n}, 7);\nvar createFakeTask = void 0;\nmodule.watch(require(\"./tasks\"), {\n  default: function _default(v) {\n    createFakeTask = v;\n  }\n}, 8);\nvar createFakeUsers = void 0;\nmodule.watch(require(\"./users\"), {\n  default: function _default(v) {\n    createFakeUsers = v;\n  }\n}, 9);\nvar createFakeOffer = void 0;\nmodule.watch(require(\"./offers\"), {\n  default: function _default(v) {\n    createFakeOffer = v;\n  }\n}, 10);\n\nvar generateNumberOfLoans = function generateNumberOfLoans(max) {\n  return Math.floor(Math.random() * max + 1);\n};\n\nvar getAdmins = function getAdmins() {\n  var admins = _Users.find({\n    roles: {\n      $in: ['admin']\n    }\n  }).fetch();\n\n  if (admins.length === 0) {\n    var newAdmins = createFakeUsers(_ADMIN_COUNT, 'admin');\n    return newAdmins;\n  }\n\n  return admins.map(function (admin) {\n    return admin._id;\n  });\n};\n\n_Meteor.methods({\n  generateTestData: function generateTestData() {\n    if (_SecurityService.currentUserHasRole('dev') && !_Meteor.isProduction) {\n      var admins = getAdmins();\n      var newUsers = createFakeUsers(_USER_COUNT, 'user');\n      newUsers.map(function (userId) {\n        var adminId = admins[Math.floor(Math.random() * admins.length)];\n        UserService.assignAdminToUser({\n          userId: userId,\n          adminId: adminId\n        });\n        var numberOfLoans = generateNumberOfLoans(_MAX_LOANS_PER_USER);\n\n        for (var i = 0; i < numberOfLoans; i += 1) {\n          var loanId = createFakeLoan(userId, adminId);\n          createFakeTask(loanId, adminId);\n          createFakeOffer(loanId, userId);\n        }\n\n        return userId;\n      });\n    }\n  },\n  purgeDatabase: function purgeDatabase(currentUserId) {\n    _check(currentUserId, String);\n\n    if (_SecurityService.currentUserHasRole('dev') && !_Meteor.isProduction) {\n      _Borrowers.remove({});\n\n      _Loans.remove({});\n\n      _Offers.remove({});\n\n      _Properties.remove({});\n\n      _Tasks.remove({});\n\n      _Users.remove({\n        _id: {\n          $ne: currentUserId\n        }\n      });\n    }\n  },\n  insertBorrowerRelatedTask: function insertBorrowerRelatedTask() {\n    var borrower = _Borrowers.aggregate([{\n      $sample: {\n        size: 1\n      }\n    }]); // const borrowerId = Borrowers.findOne({})._id;\n\n\n    var type = _TASK_TYPE.VERIFY;\n    console.log(borrower._id);\n\n    if (borrower._id) {\n      TaskService.insert({\n        type: type,\n        borrowerId: borrower._id\n      });\n    }\n  },\n  insertLoanRelatedTask: function insertLoanRelatedTask() {\n    var loanId = _Loans.findOne({})._id;\n\n    var type = _TASK_TYPE.VERIFY;\n\n    if (loanId) {\n      TaskService.insert({\n        type: type,\n        loanId: loanId\n      });\n    }\n  },\n  insertPropertyRelatedTask: function insertPropertyRelatedTask() {\n    var propertyId = _Properties.findOne({})._id;\n\n    var type = _TASK_TYPE.CUSTOM;\n\n    if (propertyId) {\n      TaskService.insert({\n        type: type,\n        propertyId: propertyId\n      });\n    }\n  }\n});","map":{"version":3,"sources":["imports/core/fixtures/methods.js"],"names":["Meteor","module","watch","require","v","check","Borrowers","Loans","Offers","Properties","Tasks","Users","SecurityService","UserService","default","TaskService","TASK_TYPE","USER_COUNT","ADMIN_COUNT","MAX_LOANS_PER_USER","createFakeLoan","createFakeTask","createFakeUsers","createFakeOffer","generateNumberOfLoans","Math","floor","random","max","getAdmins","admins","find","roles","$in","fetch","length","newAdmins","map","admin","_id","methods","generateTestData","currentUserHasRole","isProduction","newUsers","userId","adminId","assignAdminToUser","numberOfLoans","i","loanId","purgeDatabase","currentUserId","String","remove","$ne","insertBorrowerRelatedTask","borrower","aggregate","$sample","size","type","VERIFY","console","log","insert","borrowerId","insertLoanRelatedTask","findOne","insertPropertyRelatedTask","propertyId","CUSTOM"],"mappings":"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","file":"imports/core/fixtures/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport {\n  Borrowers,\n  Loans,\n  Offers,\n  Properties,\n  Tasks,\n  Users,\n  SecurityService,\n} from 'core/api';\nimport UserService from 'core/api/users/UserService';\nimport TaskService from 'core/api/tasks/TaskService';\nimport { TASK_TYPE } from 'core/api/tasks/tasksConstants';\nimport { USER_COUNT, ADMIN_COUNT, MAX_LOANS_PER_USER } from './config';\nimport createFakeLoan from './loans';\nimport createFakeTask from './tasks';\nimport createFakeUsers from './users';\nimport createFakeOffer from './offers';\n\nconst generateNumberOfLoans = max => Math.floor(Math.random() * max + 1);\n\nconst getAdmins = () => {\n  const admins = Users.find({ roles: { $in: ['admin'] } }).fetch();\n  if (admins.length === 0) {\n    const newAdmins = createFakeUsers(ADMIN_COUNT, 'admin');\n    return newAdmins;\n  }\n  return admins.map(admin => admin._id);\n};\n\nMeteor.methods({\n  generateTestData() {\n    if (SecurityService.currentUserHasRole('dev') && !Meteor.isProduction) {\n      const admins = getAdmins();\n      const newUsers = createFakeUsers(USER_COUNT, 'user');\n      newUsers.map((userId) => {\n        const adminId = admins[Math.floor(Math.random() * admins.length)];\n        UserService.assignAdminToUser({ userId, adminId });\n        const numberOfLoans = generateNumberOfLoans(MAX_LOANS_PER_USER);\n        for (let i = 0; i < numberOfLoans; i += 1) {\n          const loanId = createFakeLoan(userId, adminId);\n          createFakeTask(loanId, adminId);\n          createFakeOffer(loanId, userId);\n        }\n        return userId;\n      });\n    }\n  },\n\n  purgeDatabase(currentUserId) {\n    check(currentUserId, String);\n    if (SecurityService.currentUserHasRole('dev') && !Meteor.isProduction) {\n      Borrowers.remove({});\n      Loans.remove({});\n      Offers.remove({});\n      Properties.remove({});\n      Tasks.remove({});\n      Users.remove({ _id: { $ne: currentUserId } });\n    }\n  },\n\n  insertBorrowerRelatedTask() {\n    const borrower = Borrowers.aggregate([{ $sample: { size: 1 } }]);\n    // const borrowerId = Borrowers.findOne({})._id;\n    const type = TASK_TYPE.VERIFY;\n    console.log(borrower._id);\n    if (borrower._id) {\n      TaskService.insert({ type, borrowerId: borrower._id });\n    }\n  },\n\n  insertLoanRelatedTask() {\n    const loanId = Loans.findOne({})._id;\n    const type = TASK_TYPE.VERIFY;\n    if (loanId) {\n      TaskService.insert({ type, loanId });\n    }\n  },\n\n  insertPropertyRelatedTask() {\n    const propertyId = Properties.findOne({})._id;\n    const type = TASK_TYPE.CUSTOM;\n    if (propertyId) {\n      TaskService.insert({ type, propertyId });\n    }\n  },\n});\n"]},"hash":"c244f6963f0a5aab4234cced974f4bf820400e4d"}

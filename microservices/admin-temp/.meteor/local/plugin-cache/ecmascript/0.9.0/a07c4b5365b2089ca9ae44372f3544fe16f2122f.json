{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/themeteorchef:bert","imported":["Bert"],"specifiers":[{"kind":"named","imported":"Bert","local":"Bert"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/cleanMethods.js","filenameRelative":"imports/core/api/cleanMethods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/cleanMethods.js.map","sourceFileName":"imports/core/api/cleanMethods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cleanMethods"},"ignored":false,"code":"\"use strict\";\n\nvar module1 = module;\n\nvar _Meteor = void 0;\n\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor: function () {\n    function Meteor(v) {\n      _Meteor = v;\n    }\n\n    return Meteor;\n  }()\n}, 0);\n\nvar _Bert = void 0;\n\nmodule1.watch(require(\"meteor/themeteorchef:bert\"), {\n  Bert: function () {\n    function Bert(v) {\n      _Bert = v;\n    }\n\n    return Bert;\n  }()\n}, 1);\n\n// Passed to all methods, shows a Bert error when it happens\nvar handleResult = function () {\n  function handleResult(result, bertObject) {\n    if (_Meteor.isClient && !!bertObject) {\n      var delay = bertObject.delay,\n          title = bertObject.title,\n          message = bertObject.message,\n          type = bertObject.type,\n          style = bertObject.style;\n\n      if (delay) {\n        _Bert.defaults.hideDelay = delay;\n      }\n\n      _Bert.alert({\n        title: title || \"C'est réussi\",\n        message: message === undefined ? '<h3 class=\"bert\">Bien joué!</h3>' : message,\n        type: type || 'success',\n        style: style || 'growl-top-right'\n      });\n    }\n\n    return result;\n  }\n\n  return handleResult;\n}(); // Passed to all methods, shows a bert alert\n\n\nvar handleError = function () {\n  function handleError(error) {\n    if (_Meteor.isClient) {\n      _Bert.defaults.hideDelay = 7500;\n\n      _Bert.alert({\n        title: 'Misère, une erreur!',\n        message: \"<h3 class=\\\"bert\\\">\" + error.message + \"</h3>\",\n        type: 'danger',\n        style: 'fixed-top'\n      });\n    }\n\n    console.log(error); // Throw the error again so that it can be catched again via promise chaining\n    // All uses of this module should catch and implement proper fail-safe logic\n\n    throw error;\n  }\n\n  return handleError;\n}(); // A wrapper method that displays an error if it occurs\n\n\nvar cleanMethod = function () {\n  function cleanMethod(name, params, bertObject) {\n    console.log('cleanmethod!', name, params);\n    return new Promise(function (resolve, reject) {\n      _Meteor.call(name, params, function (error, result) {\n        if (error) {\n          reject(handleError(error));\n        } else {\n          resolve(handleResult(result, bertObject));\n        }\n      });\n    });\n  }\n\n  return cleanMethod;\n}();\n\nmodule1.exportDefault(cleanMethod);","map":{"version":3,"sources":["imports/core/api/cleanMethods.js"],"names":["module1","module","Meteor","watch","require","v","Bert","handleResult","result","bertObject","isClient","delay","title","message","type","style","defaults","hideDelay","alert","undefined","handleError","error","console","log","cleanMethod","name","params","Promise","resolve","reject","call","exportDefault"],"mappings":";;AAAA,IAAMA,UAAQC,MAAd;;AAAqB,IAAIC,gBAAJ;;AAAWF,QAAQG,KAAR,CAAcC,QAAQ,eAAR,CAAd,EAAuC;AAACF,QAAD;AAAA,oBAAQG,CAAR,EAAU;AAACH,gBAAOG,CAAP;AAAS;;AAApB;AAAA;AAAA,CAAvC,EAA6D,CAA7D;;AAAgE,IAAIC,cAAJ;;AAASN,QAAQG,KAAR,CAAcC,QAAQ,2BAAR,CAAd,EAAmD;AAACE,MAAD;AAAA,kBAAMD,CAAN,EAAQ;AAACC,cAAKD,CAAL;AAAO;;AAAhB;AAAA;AAAA,CAAnD,EAAqE,CAArE;;AAGzG;AACA,IAAME;AAAe,WAAfA,YAAe,CAACC,MAAD,EAASC,UAAT,EAAwB;AAC3C,QAAIP,QAAOQ,QAAP,IAAmB,CAAC,CAACD,UAAzB,EAAqC;AAAA,UAC3BE,KAD2B,GACYF,UADZ,CAC3BE,KAD2B;AAAA,UACpBC,KADoB,GACYH,UADZ,CACpBG,KADoB;AAAA,UACbC,OADa,GACYJ,UADZ,CACbI,OADa;AAAA,UACJC,IADI,GACYL,UADZ,CACJK,IADI;AAAA,UACEC,KADF,GACYN,UADZ,CACEM,KADF;;AAEnC,UAAIJ,KAAJ,EAAW;AACTL,cAAKU,QAAL,CAAcC,SAAd,GAA0BN,KAA1B;AACD;;AAEDL,YAAKY,KAAL,CAAW;AACTN,eAAOA,SAAS,cADP;AAETC,iBACEA,YAAYM,SAAZ,GAAwB,kCAAxB,GAA6DN,OAHtD;AAITC,cAAMA,QAAQ,SAJL;AAKTC,eAAOA,SAAS;AALP,OAAX;AAOD;;AAED,WAAOP,MAAP;AACD;;AAjBK;AAAA,GAAN,C,CAmBA;;;AACA,IAAMY;AAAc,WAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,QAAInB,QAAOQ,QAAX,EAAqB;AACnBJ,YAAKU,QAAL,CAAcC,SAAd,GAA0B,IAA1B;;AACAX,YAAKY,KAAL,CAAW;AACTN,eAAO,qBADE;AAETC,yCAA6BQ,MAAMR,OAAnC,UAFS;AAGTC,cAAM,QAHG;AAITC,eAAO;AAJE,OAAX;AAMD;;AAEDO,YAAQC,GAAR,CAAYF,KAAZ,EAX6B,CAa7B;AACA;;AACA,UAAMA,KAAN;AACD;;AAhBK;AAAA,GAAN,C,CAkBA;;;AACA,IAAMG;AAAc,WAAdA,WAAc,CAACC,IAAD,EAAOC,MAAP,EAAejB,UAAf,EAA8B;AAChDa,YAAQC,GAAR,CAAY,cAAZ,EAA4BE,IAA5B,EAAkCC,MAAlC;AAEA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC3B,cAAO4B,IAAP,CAAYL,IAAZ,EAAkBC,MAAlB,EAA0B,UAACL,KAAD,EAAQb,MAAR,EAAmB;AAC3C,YAAIa,KAAJ,EAAW;AACTQ,iBAAOT,YAAYC,KAAZ,CAAP;AACD,SAFD,MAEO;AACLO,kBAAQrB,aAAaC,MAAb,EAAqBC,UAArB,CAAR;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;;AAZK;AAAA,GAAN;;AA3CAT,QAAQ+B,aAAR,CAyDeP,WAzDf","file":"imports/core/api/cleanMethods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Bert } from 'meteor/themeteorchef:bert';\n\n// Passed to all methods, shows a Bert error when it happens\nconst handleResult = (result, bertObject) => {\n  if (Meteor.isClient && !!bertObject) {\n    const { delay, title, message, type, style } = bertObject;\n    if (delay) {\n      Bert.defaults.hideDelay = delay;\n    }\n\n    Bert.alert({\n      title: title || \"C'est réussi\",\n      message:\n        message === undefined ? '<h3 class=\"bert\">Bien joué!</h3>' : message,\n      type: type || 'success',\n      style: style || 'growl-top-right',\n    });\n  }\n\n  return result;\n};\n\n// Passed to all methods, shows a bert alert\nconst handleError = (error) => {\n  if (Meteor.isClient) {\n    Bert.defaults.hideDelay = 7500;\n    Bert.alert({\n      title: 'Misère, une erreur!',\n      message: `<h3 class=\"bert\">${error.message}</h3>`,\n      type: 'danger',\n      style: 'fixed-top',\n    });\n  }\n\n  console.log(error);\n\n  // Throw the error again so that it can be catched again via promise chaining\n  // All uses of this module should catch and implement proper fail-safe logic\n  throw error;\n};\n\n// A wrapper method that displays an error if it occurs\nconst cleanMethod = (name, params, bertObject) => {\n  console.log('cleanmethod!', name, params);\n\n  return new Promise((resolve, reject) => {\n    Meteor.call(name, params, (error, result) => {\n      if (error) {\n        reject(handleError(error));\n      } else {\n        resolve(handleResult(result, bertObject));\n      }\n    });\n  });\n};\n\nexport default cleanMethod;\n"]},"hash":"a07c4b5365b2089ca9ae44372f3544fe16f2122f"}

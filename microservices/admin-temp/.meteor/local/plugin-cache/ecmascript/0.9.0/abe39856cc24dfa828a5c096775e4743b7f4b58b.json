{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"simpl-schema","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SimpleSchema"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"./userConstants","imported":["ROLES"],"specifiers":[{"kind":"named","imported":"ROLES","local":"ROLES"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/users/users.js","filenameRelative":"imports/core/api/users/users.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/users/users.js.map","sourceFileName":"imports/core/api/users/users.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"users"},"ignored":false,"code":"\"use strict\";\n\nvar SimpleSchema = void 0;\nmodule.watch(require(\"simpl-schema\"), {\n  default: function _default(v) {\n    SimpleSchema = v;\n  }\n}, 0);\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 1);\n\nvar _ROLES = void 0;\n\nmodule.watch(require(\"./userConstants\"), {\n  ROLES: function ROLES(v) {\n    _ROLES = v;\n  }\n}, 2);\nvar UserSchema = new SimpleSchema({\n  username: {\n    type: String,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true\n  },\n  emails: {\n    type: Array,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true\n  },\n  'emails.$': {\n    type: Object\n  },\n  'emails.$.address': {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  'emails.$.verified': {\n    type: Boolean\n  },\n  createdAt: {\n    type: Date\n  },\n  // Make sure this services field is in your schema if you're using any of the accounts packages\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  // Add `roles` to your schema if you use the meteor-roles package.\n  // Option 1: Object type\n  // If you specify that type as Object, you must also specify the\n  // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.\n  // Example:\n  // Roles.addUsersToRoles(userId, [\"admin\"], Roles.GLOBAL_GROUP);\n  // You can't mix and match adding with and without a group since\n  // you will fail validation in some cases.\n  // roles: {\n  //   type: Object,\n  //   optional: true,\n  //   blackbox: true,\n  // },\n  // Option 2: [String] type\n  // If you are sure you will never need to use role groups, then\n  // you can specify [String] as the type\n  roles: {\n    type: Array,\n    optional: true\n  },\n  'roles.$': {\n    type: String,\n    allowedValues: Object.values(_ROLES)\n  },\n  // In order to avoid an 'Exception in setInterval callback' from Meteor\n  heartbeat: {\n    type: Date,\n    optional: true\n  },\n  assignedTo: {\n    type: String,\n    optional: true\n  }\n});\n\n_Meteor.users.attachSchema(UserSchema);\n\nvar Users = _Meteor.users;\nmodule.exportDefault(Users);","map":{"version":3,"sources":["imports/core/api/users/users.js"],"names":["SimpleSchema","module","watch","require","default","v","Meteor","ROLES","UserSchema","username","type","String","optional","emails","Array","Object","regEx","RegEx","Email","Boolean","createdAt","Date","services","blackbox","roles","allowedValues","values","heartbeat","assignedTo","users","attachSchema","Users","exportDefault"],"mappings":";;AAAA,IAAIA,qBAAJ;AAAiBC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACC,SAAD,oBAASC,CAAT,EAAW;AAACL,mBAAaK,CAAb;AAAe;AAA3B,CAArC,EAAkE,CAAlE;;AAAqE,IAAIC,gBAAJ;;AAAWL,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACG,QAAD,kBAAQD,CAAR,EAAU;AAACC,cAAOD,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;;AAA+D,IAAIE,eAAJ;;AAAUN,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACI,OAAD,iBAAOF,CAAP,EAAS;AAACE,aAAMF,CAAN;AAAQ;AAAlB,CAAxC,EAA4D,CAA5D;AAK1K,IAAMG,aAAa,IAAIR,YAAJ,CAAiB;AAClCS,YAAU;AACRC,UAAMC,MADE;AAER;AACA;AACA;AACAC,cAAU;AALF,GADwB;AAQlCC,UAAQ;AACNH,UAAMI,KADA;AAEN;AACA;AACA;AACAF,cAAU;AALJ,GAR0B;AAelC,cAAY;AACVF,UAAMK;AADI,GAfsB;AAkBlC,sBAAoB;AAClBL,UAAMC,MADY;AAElBK,WAAOhB,aAAaiB,KAAb,CAAmBC;AAFR,GAlBc;AAsBlC,uBAAqB;AACnBR,UAAMS;AADa,GAtBa;AAyBlCC,aAAW;AACTV,UAAMW;AADG,GAzBuB;AA4BlC;AACAC,YAAU;AACRZ,UAAMK,MADE;AAERH,cAAU,IAFF;AAGRW,cAAU;AAHF,GA7BwB;AAkClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,SAAO;AACLd,UAAMI,KADD;AAELF,cAAU;AAFL,GAlD2B;AAsDlC,aAAW;AACTF,UAAMC,MADG;AAETc,mBAAeV,OAAOW,MAAP,CAAcnB,MAAd;AAFN,GAtDuB;AA0DlC;AACAoB,aAAW;AACTjB,UAAMW,IADG;AAETT,cAAU;AAFD,GA3DuB;AA+DlCgB,cAAY;AACVlB,UAAMC,MADI;AAEVC,cAAU;AAFA;AA/DsB,CAAjB,CAAnB;;AAqEAN,QAAOuB,KAAP,CAAaC,YAAb,CAA0BtB,UAA1B;;AAEA,IAAMuB,QAAQzB,QAAOuB,KAArB;AA5EA5B,OAAO+B,aAAP,CA6EeD,KA7Ef","file":"imports/core/api/users/users.js.map","sourcesContent":["import SimpleSchema from 'simpl-schema';\nimport { Meteor } from 'meteor/meteor';\n\nimport { ROLES } from './userConstants';\n\nconst UserSchema = new SimpleSchema({\n  username: {\n    type: String,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true,\n  },\n  emails: {\n    type: Array,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true,\n  },\n  'emails.$': {\n    type: Object,\n  },\n  'emails.$.address': {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n  },\n  'emails.$.verified': {\n    type: Boolean,\n  },\n  createdAt: {\n    type: Date,\n  },\n  // Make sure this services field is in your schema if you're using any of the accounts packages\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true,\n  },\n  // Add `roles` to your schema if you use the meteor-roles package.\n  // Option 1: Object type\n  // If you specify that type as Object, you must also specify the\n  // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.\n  // Example:\n  // Roles.addUsersToRoles(userId, [\"admin\"], Roles.GLOBAL_GROUP);\n  // You can't mix and match adding with and without a group since\n  // you will fail validation in some cases.\n  // roles: {\n  //   type: Object,\n  //   optional: true,\n  //   blackbox: true,\n  // },\n  // Option 2: [String] type\n  // If you are sure you will never need to use role groups, then\n  // you can specify [String] as the type\n  roles: {\n    type: Array,\n    optional: true,\n  },\n  'roles.$': {\n    type: String,\n    allowedValues: Object.values(ROLES),\n  },\n  // In order to avoid an 'Exception in setInterval callback' from Meteor\n  heartbeat: {\n    type: Date,\n    optional: true,\n  },\n  assignedTo: {\n    type: String,\n    optional: true,\n  },\n});\n\nMeteor.users.attachSchema(UserSchema);\n\nconst Users = Meteor.users;\nexport default Users;\n"]},"hash":"abe39856cc24dfa828a5c096775e4743b7f4b58b"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"intl-messageformat","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"IntlMessageFormat"}]},{"source":"./localization","imported":["getUserLocale","getFormats"],"specifiers":[{"kind":"named","imported":"getUserLocale","local":"getUserLocale"},{"kind":"named","imported":"getFormats","local":"getFormats"}]},{"source":"../lang/fr.json","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"messagesFR"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/utils/intl.js","filenameRelative":"imports/core/utils/intl.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/utils/intl.js.map","sourceFileName":"imports/core/utils/intl.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"intl"},"ignored":false,"code":"\"use strict\";\n\nvar IntlMessageFormat = void 0;\nmodule.watch(require(\"intl-messageformat\"), {\n  \"default\": function () {\n    function _default(v) {\n      IntlMessageFormat = v;\n    }\n\n    return _default;\n  }()\n}, 0);\n\nvar _getUserLocale = void 0,\n    _getFormats = void 0;\n\nmodule.watch(require(\"./localization\"), {\n  getUserLocale: function () {\n    function getUserLocale(v) {\n      _getUserLocale = v;\n    }\n\n    return getUserLocale;\n  }(),\n  getFormats: function () {\n    function getFormats(v) {\n      _getFormats = v;\n    }\n\n    return getFormats;\n  }()\n}, 1);\nvar messagesFR = void 0;\nmodule.watch(require(\"../lang/fr.json\"), {\n  \"default\": function () {\n    function _default(v) {\n      messagesFR = v;\n    }\n\n    return _default;\n  }()\n}, 2);\n\n/**\n * formatMessage - A server-side method to use the intl package\n *\n * @param {type}   id          the id of the message\n * @param {object} [values={}] any additional values you want to use in the\n * string\n *\n * @return {type} The formatted string\n */var formatMessage = function () {\n  function formatMessage(id) {\n    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var customFallback = arguments[2];\n\n    if (id === undefined) {\n      throw new Error('an id is required in formatMessage');\n    }\n\n    var message = new IntlMessageFormat(messagesFR[id] || (customFallback !== undefined ? customFallback : id), _getUserLocale());\n    return message.format(values);\n  }\n\n  return formatMessage;\n}();\n\nmodule.exportDefault(formatMessage);","map":{"version":3,"sources":["imports/core/utils/intl.js"],"names":["IntlMessageFormat","module","watch","require","v","getUserLocale","getFormats","messagesFR","formatMessage","id","values","customFallback","undefined","Error","message","format","exportDefault"],"mappings":";;AAAA,IAAIA,0BAAJ;AAAsBC,OAAOC,KAAP,CAAaC,QAAQ,oBAAR,CAAb,EAA2C;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACJ,0BAAkBI,CAAlB;AAAoB;;AAAhC;AAAA;AAAA,CAA3C,EAA6E,CAA7E;;AAAgF,IAAIC,uBAAJ;AAAA,IAAkBC,oBAAlB;;AAA6BL,OAAOC,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACE,eAAD;AAAA,2BAAeD,CAAf,EAAiB;AAACC,uBAAcD,CAAd;AAAgB;;AAAlC;AAAA;AAAmCE,YAAnC;AAAA,wBAA8CF,CAA9C,EAAgD;AAACE,oBAAWF,CAAX;AAAa;;AAA9D;AAAA;AAAA,CAAvC,EAAuG,CAAvG;AAA0G,IAAIG,mBAAJ;AAAeN,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACG,mBAAWH,CAAX;AAAa;;AAAzB;AAAA;AAAA,CAAxC,EAAmE,CAAnE;;AAI5P;;;;;;;;GASA,IAAMI;AAAgB,WAAhBA,aAAgB,CAACC,EAAD,EAAqC;AAAA,QAAhCC,MAAgC,uEAAvB,EAAuB;AAAA,QAAnBC,cAAmB;;AACzD,QAAIF,OAAOG,SAAX,EAAsB;AACpB,YAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,QAAMC,UAAU,IAAId,iBAAJ,CACdO,WAAWE,EAAX,MAAmBE,mBAAmBC,SAAnB,GAA+BD,cAA/B,GAAgDF,EAAnE,CADc,EAEdJ,gBAFc,CAAhB;AAKA,WAAOS,QAAQC,MAAR,CAAeL,MAAf,CAAP;AACD;;AAVK;AAAA,GAAN;;AAbAT,OAAOe,aAAP,CAyBeR,aAzBf","file":"imports/core/utils/intl.js.map","sourcesContent":["import IntlMessageFormat from 'intl-messageformat';\nimport { getUserLocale, getFormats } from 'core/utils/localization';\nimport messagesFR from 'core/lang/fr.json';\n\n/**\n * formatMessage - A server-side method to use the intl package\n *\n * @param {type}   id          the id of the message\n * @param {object} [values={}] any additional values you want to use in the\n * string\n *\n * @return {type} The formatted string\n */\nconst formatMessage = (id, values = {}, customFallback) => {\n  if (id === undefined) {\n    throw new Error('an id is required in formatMessage');\n  }\n  const message = new IntlMessageFormat(\n    messagesFR[id] || (customFallback !== undefined ? customFallback : id),\n    getUserLocale(),\n    // getFormats(),\n  );\n  return message.format(values);\n};\n\nexport default formatMessage;\n"]},"hash":"03bd30a296715d836de7dfff6a930b830dced278"}

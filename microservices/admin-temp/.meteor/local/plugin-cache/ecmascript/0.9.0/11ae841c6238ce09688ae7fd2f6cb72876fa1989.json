{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"../lib/applyProps.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"applyProps"}]},{"source":"./aggregateSearchFilters.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AggregateFilters"}]},{"source":"./assembler.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"assemble"}]},{"source":"./assembleAggregateResults.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"assembleAggregateResults"}]},{"source":"./buildAggregatePipeline.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"buildAggregatePipeline"}]},{"source":"./lib/snapBackDottedFields","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"snapBackDottedFields"}]}],"exports":{"exported":["storeHypernovaResults","childCollectionNode","userId"],"specifiers":[{"kind":"local","local":"storeHypernovaResults","exported":"default"},{"kind":"local","local":"childCollectionNode","exported":"default"},{"kind":"local","local":"userId","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"storeHypernovaResults"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n    \"default\": function () {\n        return storeHypernovaResults;\n    }\n});\nvar applyProps = void 0;\nmodule.watch(require(\"../lib/applyProps.js\"), {\n    \"default\": function (v) {\n        applyProps = v;\n    }\n}, 0);\nvar AggregateFilters = void 0;\nmodule.watch(require(\"./aggregateSearchFilters.js\"), {\n    \"default\": function (v) {\n        AggregateFilters = v;\n    }\n}, 1);\nvar assemble = void 0;\nmodule.watch(require(\"./assembler.js\"), {\n    \"default\": function (v) {\n        assemble = v;\n    }\n}, 2);\nvar assembleAggregateResults = void 0;\nmodule.watch(require(\"./assembleAggregateResults.js\"), {\n    \"default\": function (v) {\n        assembleAggregateResults = v;\n    }\n}, 3);\nvar buildAggregatePipeline = void 0;\nmodule.watch(require(\"./buildAggregatePipeline.js\"), {\n    \"default\": function (v) {\n        buildAggregatePipeline = v;\n    }\n}, 4);\nvar snapBackDottedFields = void 0;\nmodule.watch(require(\"./lib/snapBackDottedFields\"), {\n    \"default\": function (v) {\n        snapBackDottedFields = v;\n    }\n}, 5);\n\nfunction storeHypernovaResults(childCollectionNode, userId) {\n    if (childCollectionNode.parent.results.length === 0) {\n        return childCollectionNode.results = [];\n    }\n\n    var _applyProps = applyProps(childCollectionNode),\n        filters = _applyProps.filters,\n        options = _applyProps.options;\n\n    var metaFilters = filters.$meta;\n    var aggregateFilters = new AggregateFilters(childCollectionNode, metaFilters);\n    delete filters.$meta;\n    var linker = childCollectionNode.linker;\n    var isVirtual = linker.isVirtual();\n    var collection = childCollectionNode.collection;\n\n    _.extend(filters, aggregateFilters.create()); // if it's not virtual then we retrieve them and assemble them here.\n\n\n    if (!isVirtual) {\n        var filteredOptions = _.omit(options, 'limit');\n\n        childCollectionNode.results = collection.find(filters, filteredOptions, userId).fetch();\n        assemble(childCollectionNode, (0, _extends3.default)({}, options, {\n            metaFilters: metaFilters\n        }));\n    } else {\n        // virtuals arrive here\n        var _buildAggregatePipeli = buildAggregatePipeline(childCollectionNode, filters, options, userId),\n            pipeline = _buildAggregatePipeli.pipeline,\n            containsDottedFields = _buildAggregatePipeli.containsDottedFields;\n\n        var aggregateResults = collection.aggregate(pipeline, {\n            explains: true\n        }); /**\n             * If in aggregation it contains '.', we replace it with a custom string '___'\n             * And then after aggregation is complete we need to snap-it back to how it was.\n             */\n\n        if (containsDottedFields) {\n            snapBackDottedFields(aggregateResults);\n        }\n\n        assembleAggregateResults(childCollectionNode, aggregateResults, metaFilters);\n    }\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js"],"names":["module","export","storeHypernovaResults","applyProps","watch","require","v","AggregateFilters","assemble","assembleAggregateResults","buildAggregatePipeline","snapBackDottedFields","childCollectionNode","userId","parent","results","length","filters","options","metaFilters","$meta","aggregateFilters","linker","isVirtual","collection","_","extend","create","filteredOptions","omit","find","fetch","pipeline","containsDottedFields","aggregateResults","aggregate","explains"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js.map","sourcesContent":["import applyProps from '../lib/applyProps.js';\nimport AggregateFilters from './aggregateSearchFilters.js';\nimport assemble from './assembler.js';\nimport assembleAggregateResults from './assembleAggregateResults.js';\nimport buildAggregatePipeline from './buildAggregatePipeline.js';\nimport snapBackDottedFields from './lib/snapBackDottedFields';\n\nexport default function storeHypernovaResults(childCollectionNode, userId) {\n    if (childCollectionNode.parent.results.length === 0) {\n        return childCollectionNode.results = [];\n    }\n\n    let {filters, options} = applyProps(childCollectionNode);\n\n    const metaFilters = filters.$meta;\n    const aggregateFilters = new AggregateFilters(childCollectionNode, metaFilters);\n    delete filters.$meta;\n\n    const linker = childCollectionNode.linker;\n    const isVirtual = linker.isVirtual();\n    const collection = childCollectionNode.collection;\n\n    _.extend(filters, aggregateFilters.create());\n\n    // if it's not virtual then we retrieve them and assemble them here.\n    if (!isVirtual) {\n        const filteredOptions = _.omit(options, 'limit');\n\n        childCollectionNode.results = collection.find(filters, filteredOptions, userId).fetch();\n\n        assemble(childCollectionNode, {\n            ...options,\n            metaFilters\n        });\n    } else {\n        // virtuals arrive here\n        let {pipeline, containsDottedFields} = buildAggregatePipeline(childCollectionNode, filters, options, userId);\n\n        let aggregateResults = collection.aggregate(pipeline, {explains: true});\n\n        /**\n         * If in aggregation it contains '.', we replace it with a custom string '___'\n         * And then after aggregation is complete we need to snap-it back to how it was.\n         */\n        if (containsDottedFields) {\n            snapBackDottedFields(aggregateResults);\n        }\n\n        assembleAggregateResults(childCollectionNode, aggregateResults, metaFilters);\n    }\n}\n"]},"hash":"11ae841c6238ce09688ae7fd2f6cb72876fa1989"}

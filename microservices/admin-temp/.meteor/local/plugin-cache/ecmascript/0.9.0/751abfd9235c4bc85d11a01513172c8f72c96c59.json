{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../api/constants","imported":["GENDER","USAGE_TYPE"],"specifiers":[{"kind":"named","imported":"GENDER","local":"GENDER"},{"kind":"named","imported":"USAGE_TYPE","local":"USAGE_TYPE"}]},{"source":"../config/constants","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"constants"}]},{"source":"./loanFunctions","imported":["getLoanValue","getPropAndWork","getMaintenance","getFees"],"specifiers":[{"kind":"named","imported":"getLoanValue","local":"getLoanValue"},{"kind":"named","imported":"getPropAndWork","local":"getPropAndWork"},{"kind":"named","imported":"getMaintenance","local":"getMaintenance"},{"kind":"named","imported":"getFees","local":"getFees"}]},{"source":"./borrowerFunctions","imported":["getFortune","getInsuranceFortune","getTotalFortune","getBorrowerIncome"],"specifiers":[{"kind":"named","imported":"getFortune","local":"getFortune"},{"kind":"named","imported":"getInsuranceFortune","local":"getInsuranceFortune"},{"kind":"named","imported":"getTotalFortune","local":"getTotalFortune"},{"kind":"named","imported":"getBorrowerIncome","local":"getBorrowerIncome"}]},{"source":"./general","imported":["arrayify"],"specifiers":[{"kind":"named","imported":"arrayify","local":"arrayify"}]}],"exports":{"exported":["getYearsToRetirement","getAmortization","getInterests","getMonthlyPayment","getTheoreticalMonthly","getIncomeRatio","canAffordRank1"],"specifiers":[{"kind":"local","local":"getYearsToRetirement","exported":"getYearsToRetirement"},{"kind":"local","local":"getAmortization","exported":"getAmortization"},{"kind":"local","local":"getInterests","exported":"getInterests"},{"kind":"local","local":"getMonthlyPayment","exported":"getMonthlyPayment"},{"kind":"local","local":"getTheoreticalMonthly","exported":"getTheoreticalMonthly"},{"kind":"local","local":"getIncomeRatio","exported":"getIncomeRatio"},{"kind":"local","local":"canAffordRank1","exported":"canAffordRank1"}]}}},"options":{"filename":"imports/core/utils/finance-math.js","filenameRelative":"imports/core/utils/finance-math.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/utils/finance-math.js.map","sourceFileName":"imports/core/utils/finance-math.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"finance-math"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nmodule.export({\n  getYearsToRetirement: function getYearsToRetirement() {\n    return _getYearsToRetirement;\n  },\n  getAmortization: function getAmortization() {\n    return _getAmortization;\n  },\n  getInterests: function getInterests() {\n    return _getInterests;\n  },\n  getMonthlyPayment: function getMonthlyPayment() {\n    return _getMonthlyPayment;\n  },\n  getTheoreticalMonthly: function getTheoreticalMonthly() {\n    return _getTheoreticalMonthly;\n  },\n  getIncomeRatio: function getIncomeRatio() {\n    return _getIncomeRatio;\n  },\n  canAffordRank1: function canAffordRank1() {\n    return _canAffordRank;\n  }\n});\n\nvar _GENDER = void 0,\n    _USAGE_TYPE = void 0;\n\nmodule.watch(require(\"../api/constants\"), {\n  GENDER: function GENDER(v) {\n    _GENDER = v;\n  },\n  USAGE_TYPE: function USAGE_TYPE(v) {\n    _USAGE_TYPE = v;\n  }\n}, 0);\nvar constants = void 0;\nmodule.watch(require(\"../config/constants\"), {\n  default: function _default(v) {\n    constants = v;\n  }\n}, 1);\n\nvar _getLoanValue = void 0,\n    _getPropAndWork = void 0,\n    _getMaintenance = void 0,\n    _getFees = void 0;\n\nexports.getYearsToRetirement = _getYearsToRetirement;\nmodule.watch(require(\"./loanFunctions\"), {\n  getLoanValue: function getLoanValue(v) {\n    _getLoanValue = v;\n  },\n  getPropAndWork: function getPropAndWork(v) {\n    _getPropAndWork = v;\n  },\n  getMaintenance: function getMaintenance(v) {\n    _getMaintenance = v;\n  },\n  getFees: function getFees(v) {\n    _getFees = v;\n  }\n}, 2);\n\nvar _getFortune = void 0,\n    _getInsuranceFortune = void 0,\n    _getTotalFortune = void 0,\n    _getBorrowerIncome = void 0;\n\nmodule.watch(require(\"./borrowerFunctions\"), {\n  getFortune: function getFortune(v) {\n    _getFortune = v;\n  },\n  getInsuranceFortune: function getInsuranceFortune(v) {\n    _getInsuranceFortune = v;\n  },\n  getTotalFortune: function getTotalFortune(v) {\n    _getTotalFortune = v;\n  },\n  getBorrowerIncome: function getBorrowerIncome(v) {\n    _getBorrowerIncome = v;\n  }\n}, 3);\n\nvar _arrayify = void 0;\n\nmodule.watch(require(\"./general\"), {\n  arrayify: function arrayify(v) {\n    _arrayify = v;\n  }\n}, 4);\n\n// Determine retirement age depending on the gender of the borrowers\n// Return a positive value only, negative values rounded to 0\nvar _getYearsToRetirement = function _getYearsToRetirement(age1, age2, gender1, gender2) {\n  var retirement1 = gender1 === _GENDER.F ? 64 : 65;\n  var retirement2 = null;\n\n  if (gender2) {\n    retirement2 = gender2 === _GENDER.F ? 64 : 65;\n  } // Substract age to determine remaining time to retirement for both borrowers\n\n\n  var toRetirement1 = retirement1 - age1;\n  var toRetirement2 = void 0;\n\n  if (retirement2 && age2) {\n    toRetirement2 = retirement2 - age2;\n  } // Get the most limiting time to retirement for both borrowers, in years\n\n\n  var yearsToRetirement = void 0;\n\n  if (toRetirement2) {\n    yearsToRetirement = Math.min(toRetirement1, toRetirement2);\n  } else {\n    yearsToRetirement = toRetirement1;\n  }\n\n  return Math.max(yearsToRetirement, 0);\n}; // get monthly amortization for a loan loan\n\n\nvar _getAmortization = function _getAmortization(_ref) {\n  var loan = _ref.loan,\n      borrowers = _ref.borrowers,\n      property = _ref.property;\n\n  var loanValue = _getLoanValue({\n    loan: loan,\n    property: property\n  });\n\n  var propAndWork = _getPropAndWork({\n    loan: loan,\n    property: property\n  });\n\n  var safeBorrowers = _arrayify(borrowers);\n\n  var yearsToRetirement = _getYearsToRetirement(safeBorrowers[0] ? Number(safeBorrowers[0].age) : undefined, safeBorrowers[1] && safeBorrowers[1].age ? Number(safeBorrowers[1].age) : 0, safeBorrowers[0] ? safeBorrowers[0].gender : undefined, safeBorrowers[1] && safeBorrowers[1].gender); // fallback if the loan is smaller than 0\n\n\n  if (loanValue <= 0) {\n    return 0;\n  }\n\n  var loanPercent = loanValue / propAndWork;\n  var yearlyAmortization = 0;\n  var remainingYears = Math.min(yearsToRetirement, 15);\n\n  if (loanPercent > 0.65) {\n    // The loan has to be below 65% before 15 years or before retirement,\n    // whichever comes first\n    var amountToAmortize = (loanPercent - 0.65) * propAndWork; // Make sure we don't create a black hole, or use negative values by error\n\n    if (remainingYears > 0) {\n      // Amortization is the amount to amortize divided by the amount\n      // of years before the deadline\n      yearlyAmortization = amountToAmortize / remainingYears;\n    }\n  } else {// For projects below 65%, stop amortizing\n    // yearlyAmortization = propAndWork * constants.amortization;\n  }\n\n  return {\n    amortization: yearlyAmortization / 12,\n    years: remainingYears\n  };\n};\n\nvar _getInterests = function _getInterests(_ref2, rate, loanValue) {\n  var loan = _ref2.loan,\n      property = _ref2.property;\n  loanValue = loanValue || _getLoanValue({\n    loan: loan,\n    property: property\n  });\n\n  if (loanValue <= 0) {\n    throw new Error('negative loan');\n  } // Use a base interest rate of 1.5%\n\n\n  var interests = rate || 0.015;\n  return loanValue * interests / 12;\n};\n\nvar _getMonthlyPayment = function _getMonthlyPayment(_ref3) {\n  var loan = _ref3.loan,\n      borrowers = _ref3.borrowers,\n      property = _ref3.property;\n\n  var interests = _getInterests({\n    loan: loan,\n    property: property\n  });\n\n  var _getAmortization2 = _getAmortization({\n    loan: loan,\n    borrowers: borrowers,\n    property: property\n  }),\n      amortization = _getAmortization2.amortization;\n\n  var maintenance = _getMaintenance({\n    loan: loan,\n    property: property\n  });\n\n  return {\n    total: amortization + interests + maintenance,\n    amortization: amortization,\n    interests: interests,\n    maintenance: maintenance\n  };\n};\n\nvar _getTheoreticalMonthly = function _getTheoreticalMonthly(_ref4) {\n  var loan = _ref4.loan,\n      borrowers = _ref4.borrowers,\n      property = _ref4.property;\n  var maintenance = _getPropAndWork({\n    loan: loan,\n    property: property\n  }) * constants.maintenance / 12;\n\n  var loanValue = _getLoanValue({\n    loan: loan,\n    property: property\n  });\n\n  var interests = loanValue * constants.interests / 12;\n\n  var _getAmortization3 = _getAmortization({\n    loan: loan,\n    borrowers: borrowers,\n    property: property\n  }),\n      amortization = _getAmortization3.amortization;\n\n  return {\n    total: amortization + interests + maintenance,\n    amortization: amortization,\n    interests: interests,\n    maintenance: maintenance\n  };\n};\n\nvar _getIncomeRatio = function _getIncomeRatio(_ref5) {\n  var loan = _ref5.loan,\n      borrowers = _ref5.borrowers,\n      property = _ref5.property;\n\n  var monthlyPayment = _getTheoreticalMonthly({\n    loan: loan,\n    borrowers: borrowers,\n    property: property\n  }).total;\n\n  var borrowerIncome = _getBorrowerIncome({\n    borrowers: borrowers\n  }) / 12; // Add infinity check\n\n  if (borrowerIncome > 0) {\n    return monthlyPayment / borrowerIncome;\n  }\n\n  return '-';\n};\n\nvar _canAffordRank = function _canAffordRank(_ref6) {\n  var loan = _ref6.loan,\n      borrowers = _ref6.borrowers,\n      property = _ref6.property;\n\n  var propAndWork = _getPropAndWork({\n    loan: loan,\n    property: property\n  });\n\n  var totalFortune = _getTotalFortune({\n    borrowers: borrowers\n  });\n\n  var fortune = _getFortune({\n    borrowers: borrowers\n  });\n\n  var insuranceFortune = _getInsuranceFortune({\n    borrowers: borrowers\n  });\n\n  var fortuneRequired = 0.35 * propAndWork + property.value * constants.notaryFees;\n\n  if (fortune >= fortuneRequired) {\n    return true;\n  }\n\n  if (loan.general && loan.general.usageType === _USAGE_TYPE.PRIMARY) {\n    if (fortune + insuranceFortune >= fortuneRequired) {\n      // ignore lppFees\n      return true;\n    }\n  }\n\n  return false;\n};","map":{"version":3,"sources":["imports/core/utils/finance-math.js"],"names":["module","export","getYearsToRetirement","getAmortization","getInterests","getMonthlyPayment","getTheoreticalMonthly","getIncomeRatio","canAffordRank1","GENDER","USAGE_TYPE","watch","require","v","constants","default","getLoanValue","getPropAndWork","getMaintenance","getFees","getFortune","getInsuranceFortune","getTotalFortune","getBorrowerIncome","arrayify","age1","age2","gender1","gender2","retirement1","F","retirement2","toRetirement1","toRetirement2","yearsToRetirement","Math","min","max","loan","borrowers","property","loanValue","propAndWork","safeBorrowers","Number","age","undefined","gender","loanPercent","yearlyAmortization","remainingYears","amountToAmortize","amortization","years","rate","Error","interests","maintenance","total","monthlyPayment","borrowerIncome","totalFortune","fortune","insuranceFortune","fortuneRequired","value","notaryFees","general","usageType","PRIMARY"],"mappings":"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","file":"imports/core/utils/finance-math.js.map","sourcesContent":["import { GENDER, USAGE_TYPE } from '../api/constants';\nimport constants from '../config/constants';\nimport {\n  getLoanValue,\n  getPropAndWork,\n  getMaintenance,\n  getFees,\n} from './loanFunctions';\nimport {\n  getFortune,\n  getInsuranceFortune,\n  getTotalFortune,\n  getBorrowerIncome,\n} from './borrowerFunctions';\nimport { arrayify } from './general';\n\n// Determine retirement age depending on the gender of the borrowers\n// Return a positive value only, negative values rounded to 0\nexport const getYearsToRetirement = (age1, age2, gender1, gender2) => {\n  const retirement1 = gender1 === GENDER.F ? 64 : 65;\n  let retirement2 = null;\n  if (gender2) {\n    retirement2 = gender2 === GENDER.F ? 64 : 65;\n  }\n\n  // Substract age to determine remaining time to retirement for both borrowers\n  const toRetirement1 = retirement1 - age1;\n  let toRetirement2;\n  if (retirement2 && age2) {\n    toRetirement2 = retirement2 - age2;\n  }\n\n  // Get the most limiting time to retirement for both borrowers, in years\n  let yearsToRetirement;\n  if (toRetirement2) {\n    yearsToRetirement = Math.min(toRetirement1, toRetirement2);\n  } else {\n    yearsToRetirement = toRetirement1;\n  }\n\n  return Math.max(yearsToRetirement, 0);\n};\n\n// get monthly amortization for a loan loan\nexport const getAmortization = ({ loan, borrowers, property }) => {\n  const loanValue = getLoanValue({ loan, property });\n  const propAndWork = getPropAndWork({ loan, property });\n  const safeBorrowers = arrayify(borrowers);\n  const yearsToRetirement = getYearsToRetirement(\n    safeBorrowers[0] ? Number(safeBorrowers[0].age) : undefined,\n    safeBorrowers[1] && safeBorrowers[1].age ? Number(safeBorrowers[1].age) : 0,\n    safeBorrowers[0] ? safeBorrowers[0].gender : undefined,\n    safeBorrowers[1] && safeBorrowers[1].gender,\n  );\n\n  // fallback if the loan is smaller than 0\n  if (loanValue <= 0) {\n    return 0;\n  }\n\n  const loanPercent = loanValue / propAndWork;\n\n  let yearlyAmortization = 0;\n  const remainingYears = Math.min(yearsToRetirement, 15);\n  if (loanPercent > 0.65) {\n    // The loan has to be below 65% before 15 years or before retirement,\n    // whichever comes first\n    const amountToAmortize = (loanPercent - 0.65) * propAndWork;\n\n    // Make sure we don't create a black hole, or use negative values by error\n    if (remainingYears > 0) {\n      // Amortization is the amount to amortize divided by the amount\n      // of years before the deadline\n      yearlyAmortization = amountToAmortize / remainingYears;\n    }\n  } else {\n    // For projects below 65%, stop amortizing\n    // yearlyAmortization = propAndWork * constants.amortization;\n  }\n\n  return { amortization: yearlyAmortization / 12, years: remainingYears };\n};\n\n// get interest to pay for a loan every month\nexport const getInterests = ({ loan, property }, rate, loanValue) => {\n  loanValue = loanValue || getLoanValue({ loan, property });\n\n  if (loanValue <= 0) {\n    throw new Error('negative loan');\n  }\n\n  // Use a base interest rate of 1.5%\n  const interests = rate || 0.015;\n\n  return loanValue * interests / 12;\n};\n\nexport const getMonthlyPayment = ({ loan, borrowers, property }) => {\n  const interests = getInterests({ loan, property });\n  const { amortization } = getAmortization({\n    loan,\n    borrowers,\n    property,\n  });\n  const maintenance = getMaintenance({ loan, property });\n\n  return {\n    total: amortization + interests + maintenance,\n    amortization,\n    interests,\n    maintenance,\n  };\n};\n\nexport const getTheoreticalMonthly = ({ loan, borrowers, property }) => {\n  const maintenance =\n    getPropAndWork({ loan, property }) * constants.maintenance / 12;\n  const loanValue = getLoanValue({ loan, property });\n\n  const interests = loanValue * constants.interests / 12;\n  const { amortization } = getAmortization({\n    loan,\n    borrowers,\n    property,\n  });\n\n  return {\n    total: amortization + interests + maintenance,\n    amortization,\n    interests,\n    maintenance,\n  };\n};\n\nexport const getIncomeRatio = ({ loan, borrowers, property }) => {\n  const monthlyPayment = getTheoreticalMonthly({\n    loan,\n    borrowers,\n    property,\n  }).total;\n  const borrowerIncome = getBorrowerIncome({ borrowers }) / 12;\n\n  // Add infinity check\n  if (borrowerIncome > 0) {\n    return monthlyPayment / borrowerIncome;\n  }\n  return '-';\n};\n\nexport const canAffordRank1 = ({ loan, borrowers, property }) => {\n  const propAndWork = getPropAndWork({ loan, property });\n  const totalFortune = getTotalFortune({ borrowers });\n  const fortune = getFortune({ borrowers });\n  const insuranceFortune = getInsuranceFortune({ borrowers });\n  const fortuneRequired =\n    0.35 * propAndWork + property.value * constants.notaryFees;\n\n  if (fortune >= fortuneRequired) {\n    return true;\n  }\n\n  if (loan.general && loan.general.usageType === USAGE_TYPE.PRIMARY) {\n    if (fortune + insuranceFortune >= fortuneRequired) {\n      // ignore lppFees\n      return true;\n    }\n  }\n  return false;\n};\n"]},"hash":"751abfd9235c4bc85d11a01513172c8f72c96c59"}

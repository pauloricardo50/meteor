{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"../../utils/loadable","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Loadable"}]},{"source":"react-intl","imported":["injectIntl"],"specifiers":[{"kind":"named","imported":"injectIntl","local":"injectIntl"}]},{"source":"../../utils/conversionFunctions","imported":["toMoney"],"specifiers":[{"kind":"named","imported":"toMoney","local":"toMoney"}]},{"source":"../../utils/loanFunctions","imported":["getLoanValue","getProjectValue","getPropAndWork"],"specifiers":[{"kind":"named","imported":"getLoanValue","local":"getLoanValue"},{"kind":"named","imported":"getProjectValue","local":"getProjectValue"},{"kind":"named","imported":"getPropAndWork","local":"getPropAndWork"}]},{"source":"../../config/constants","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"constants"}]},{"source":"../../config/colors","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"colors"}]},{"source":"../../containers/withLoan","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"withLoan"}]},{"source":"./chartSettings","imported":["legendConfig","adjustLegend"],"specifiers":[{"kind":"named","imported":"legendConfig","local":"legendConfig"},{"kind":"named","imported":"adjustLegend","local":"adjustLegend"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/charts/ProjectBarChart.jsx","filenameRelative":"imports/core/components/charts/ProjectBarChart.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/charts/ProjectBarChart.jsx.map","sourceFileName":"imports/core/components/charts/ProjectBarChart.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ProjectBarChart"},"ignored":false,"code":"\"use strict\";\n\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function () {\n    function _default(v) {\n      PropTypes = v;\n    }\n\n    return _default;\n  }()\n}, 0);\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function () {\n    function _default(v) {\n      React = v;\n    }\n\n    return _default;\n  }()\n}, 1);\nvar Loadable = void 0;\nmodule.watch(require(\"../../utils/loadable\"), {\n  \"default\": function () {\n    function _default(v) {\n      Loadable = v;\n    }\n\n    return _default;\n  }()\n}, 2);\n\nvar _injectIntl = void 0;\n\nmodule.watch(require(\"react-intl\"), {\n  injectIntl: function () {\n    function injectIntl(v) {\n      _injectIntl = v;\n    }\n\n    return injectIntl;\n  }()\n}, 3);\n\nvar _toMoney = void 0;\n\nmodule.watch(require(\"../../utils/conversionFunctions\"), {\n  toMoney: function () {\n    function toMoney(v) {\n      _toMoney = v;\n    }\n\n    return toMoney;\n  }()\n}, 4);\n\nvar _getLoanValue = void 0,\n    _getProjectValue = void 0,\n    _getPropAndWork = void 0;\n\nmodule.watch(require(\"../../utils/loanFunctions\"), {\n  getLoanValue: function () {\n    function getLoanValue(v) {\n      _getLoanValue = v;\n    }\n\n    return getLoanValue;\n  }(),\n  getProjectValue: function () {\n    function getProjectValue(v) {\n      _getProjectValue = v;\n    }\n\n    return getProjectValue;\n  }(),\n  getPropAndWork: function () {\n    function getPropAndWork(v) {\n      _getPropAndWork = v;\n    }\n\n    return getPropAndWork;\n  }()\n}, 5);\nvar constants = void 0;\nmodule.watch(require(\"../../config/constants\"), {\n  \"default\": function () {\n    function _default(v) {\n      constants = v;\n    }\n\n    return _default;\n  }()\n}, 6);\nvar colors = void 0;\nmodule.watch(require(\"../../config/colors\"), {\n  \"default\": function () {\n    function _default(v) {\n      colors = v;\n    }\n\n    return _default;\n  }()\n}, 7);\nvar withLoan = void 0;\nmodule.watch(require(\"../../containers/withLoan\"), {\n  \"default\": function () {\n    function _default(v) {\n      withLoan = v;\n    }\n\n    return _default;\n  }()\n}, 8);\n\nvar _legendConfig = void 0,\n    _adjustLegend = void 0;\n\nmodule.watch(require(\"./chartSettings\"), {\n  legendConfig: function () {\n    function legendConfig(v) {\n      _legendConfig = v;\n    }\n\n    return legendConfig;\n  }(),\n  adjustLegend: function () {\n    function adjustLegend(v) {\n      _adjustLegend = v;\n    }\n\n    return adjustLegend;\n  }()\n}, 9);\nvar ReactHighcharts = Loadable({\n  loader: function () {\n    function loader() {\n      return module.dynamicImport('react-highcharts');\n    }\n\n    return loader;\n  }()\n});\nvar chartColors = {\n  notaryFees: colors.charts[4],\n  lppFees: colors.charts[3],\n  fortune: colors.charts[2],\n  insuranceFortune: colors.charts[1],\n  loan: colors.charts[0]\n};\n\nvar getConfig = function () {\n  function getConfig(props) {\n    var r = props.loan;\n\n    var total = _getProjectValue(props);\n\n    var f = props.intl.formatMessage;\n    var fN = props.intl.formatNumber;\n    var options = {\n      chart: {\n        type: 'bar',\n        style: {\n          fontFamily: 'Source Sans Pro'\n        },\n        animation: {\n          duration: 400\n        },\n        height: 220,\n        spacingTop: 0,\n        spacingBottom: 0,\n        marginTop: 0,\n        marginBottom: 0 // events: {\n        //   load() {\n        //     adjustLegend(this);\n        //   },\n        //   redraw() {\n        //     adjustLegend(this);\n        //   },\n        // },\n\n      },\n      title: {\n        text: f({\n          id: 'ProjectBarChart.title'\n        }),\n        style: {\n          fontSize: '18px',\n          color: '#222',\n          fontWeight: 400\n        },\n        align: props.titleAlign\n      },\n      subtitle: {\n        text: fN(total, {\n          format: 'money'\n        }),\n        style: {\n          fontSize: '14px'\n        },\n        align: props.titleAlign\n      },\n      tooltip: {\n        formatter: function () {\n          function formatter() {\n            var y = this.y,\n                color = this.color,\n                series = this.series;\n            var value = fN(Math.round(y), {\n              format: 'money'\n            });\n            var percent = fN(y / total, {\n              format: 'percentage'\n            });\n            return \"<span style=\\\"color:\" + color + \"\\\">\\u25CF</span> \" + series.name + \"<br /> <b>\" + value + \"</b><br />\" + percent;\n          }\n\n          return formatter;\n        }(),\n        style: {\n          fontSize: '14px'\n        }\n      },\n      plotOptions: {\n        bar: {\n          borderWidth: 0,\n          allowPointSelect: false,\n          cursor: 'pointer',\n          showInLegend: true\n        },\n        series: {\n          pointWidth: 40,\n          stacking: 'percent',\n          animation: true\n        }\n      },\n      legend: _legendConfig,\n      xAxis: {\n        visible: false\n      },\n      yAxis: {\n        visible: false,\n        reversedStacks: false\n      },\n      // series: [\n      //   {\n      //     name: 'Emprunt',\n      //     data: [['Emprunt', getLoanValue(r)]],\n      //   },\n      //   {\n      //     data: [['2ème Pilier', r.general.insuranceFortuneUsed || 0]],\n      //     name: '2ème Pilier',\n      //   },\n      //   {\n      //     data: [\n      //       [\n      //         'Épargne', // subtract fees from this\n      //         r.general.fortuneUsed -\n      //           r.propertyId.value * constants.notaryFees -\n      //           (r.general.insuranceFortuneUsed * constants.lppFees || 0),\n      //       ],\n      //     ],\n      //     name: 'Épargne',\n      //   },\n      //   {\n      //     data: [['Frais de Notaire', r.propertyId.value * constants.notaryFees]],\n      //     name: 'Frais de Notaire',\n      //   },\n      //   {\n      //     data: [['Frais 2ème Pilier', r.general.insuranceFortuneUsed * constants.lppFees || 0]],\n      //     name: 'Frais 2ème Pilier',\n      //   },\n      // ],\n      series: [{\n        name: f({\n          id: 'ProjectBarChart.property'\n        }),\n        data: [_getPropAndWork(props)],\n        stack: 1\n      }, {\n        name: f({\n          id: 'ProjectBarChart.fees'\n        }),\n        data: [props.property.value * constants.notaryFees + (r.general.insuranceFortuneUsed * constants.lppFees || 0)],\n        stack: 1\n      }, {\n        name: f({\n          id: 'general.mortgageLoan'\n        }),\n        data: [_getLoanValue(props)],\n        stack: 2\n      }, {\n        name: f({\n          id: 'general.ownFunds'\n        }),\n        data: [total - _getLoanValue(props)],\n        stack: 2\n      }],\n      colors: [chartColors.loan, chartColors.insuranceFortune, chartColors.lppFees, chartColors.notaryFees],\n      lang: {\n        thousandsSep: \"'\"\n      },\n      credits: {\n        enabled: false\n      }\n    };\n    return options;\n  }\n\n  return getConfig;\n}();\n\nvar ProjectBarChart = function () {\n  function ProjectBarChart(props) {\n    return React.createElement(ReactHighcharts, {\n      config: getConfig(props)\n    });\n  }\n\n  return ProjectBarChart;\n}();\n\nProjectBarChart.defaultProps = {\n  divName: 'projectBarChart',\n  titleAlign: 'center'\n};\nProjectBarChart.propTypes = {\n  loan: PropTypes.objectOf(PropTypes.any).isRequired,\n  divName: PropTypes.string,\n  titleAlign: PropTypes.string\n};\nmodule.exportDefault(_injectIntl(withLoan(ProjectBarChart)));","map":{"version":3,"sources":["imports/core/components/charts/ProjectBarChart.jsx"],"names":["PropTypes","module","watch","require","v","React","Loadable","injectIntl","toMoney","getLoanValue","getProjectValue","getPropAndWork","constants","colors","withLoan","legendConfig","adjustLegend","ReactHighcharts","loader","chartColors","notaryFees","charts","lppFees","fortune","insuranceFortune","loan","getConfig","props","r","total","f","intl","formatMessage","fN","formatNumber","options","chart","type","style","fontFamily","animation","duration","height","spacingTop","spacingBottom","marginTop","marginBottom","title","text","id","fontSize","color","fontWeight","align","titleAlign","subtitle","format","tooltip","formatter","y","series","value","Math","round","percent","name","plotOptions","bar","borderWidth","allowPointSelect","cursor","showInLegend","pointWidth","stacking","legend","xAxis","visible","yAxis","reversedStacks","data","stack","property","general","insuranceFortuneUsed","lang","thousandsSep","credits","enabled","ProjectBarChart","defaultProps","divName","propTypes","objectOf","any","isRequired","string","exportDefault"],"mappings":"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","file":"imports/core/components/charts/ProjectBarChart.jsx.map","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport Loadable from 'core/utils/loadable';\nimport { injectIntl } from 'react-intl';\n\nimport { toMoney } from 'core/utils/conversionFunctions';\nimport {\n  getLoanValue,\n  getProjectValue,\n  getPropAndWork,\n} from 'core/utils/loanFunctions';\nimport constants from 'core/config/constants';\nimport colors from 'core/config/colors';\nimport withLoan from 'core/containers/withLoan';\n\nimport { legendConfig, adjustLegend } from './chartSettings';\n\nconst ReactHighcharts = Loadable({\n  loader: () => import('react-highcharts'),\n});\n\nconst chartColors = {\n  notaryFees: colors.charts[4],\n  lppFees: colors.charts[3],\n  fortune: colors.charts[2],\n  insuranceFortune: colors.charts[1],\n  loan: colors.charts[0],\n};\n\nconst getConfig = (props) => {\n  const r = props.loan;\n  const total = getProjectValue(props);\n  const f = props.intl.formatMessage;\n  const fN = props.intl.formatNumber;\n  const options = {\n    chart: {\n      type: 'bar',\n      style: { fontFamily: 'Source Sans Pro' },\n      animation: { duration: 400 },\n      height: 220,\n      spacingTop: 0,\n      spacingBottom: 0,\n      marginTop: 0,\n      marginBottom: 0,\n      // events: {\n      //   load() {\n      //     adjustLegend(this);\n      //   },\n      //   redraw() {\n      //     adjustLegend(this);\n      //   },\n      // },\n    },\n    title: {\n      text: f({ id: 'ProjectBarChart.title' }),\n      style: { fontSize: '18px', color: '#222', fontWeight: 400 },\n      align: props.titleAlign,\n    },\n    subtitle: {\n      text: fN(total, { format: 'money' }),\n      style: { fontSize: '14px' },\n      align: props.titleAlign,\n    },\n    tooltip: {\n      formatter() {\n        const { y, color, series } = this;\n        const value = fN(Math.round(y), { format: 'money' });\n        const percent = fN(y / total, { format: 'percentage' });\n\n        return `<span style=\"color:${color}\">\\u25CF</span> ${\n          series.name\n        }<br /> <b>${value}</b><br />${percent}`;\n      },\n      style: { fontSize: '14px' },\n    },\n    plotOptions: {\n      bar: {\n        borderWidth: 0,\n        allowPointSelect: false,\n        cursor: 'pointer',\n        showInLegend: true,\n      },\n      series: {\n        pointWidth: 40,\n        stacking: 'percent',\n        animation: true,\n      },\n    },\n    legend: legendConfig,\n    xAxis: {\n      visible: false,\n    },\n    yAxis: {\n      visible: false,\n      reversedStacks: false,\n    },\n    // series: [\n    //   {\n    //     name: 'Emprunt',\n    //     data: [['Emprunt', getLoanValue(r)]],\n    //   },\n    //   {\n    //     data: [['2ème Pilier', r.general.insuranceFortuneUsed || 0]],\n    //     name: '2ème Pilier',\n    //   },\n    //   {\n    //     data: [\n    //       [\n    //         'Épargne', // subtract fees from this\n    //         r.general.fortuneUsed -\n    //           r.propertyId.value * constants.notaryFees -\n    //           (r.general.insuranceFortuneUsed * constants.lppFees || 0),\n    //       ],\n    //     ],\n    //     name: 'Épargne',\n    //   },\n    //   {\n    //     data: [['Frais de Notaire', r.propertyId.value * constants.notaryFees]],\n    //     name: 'Frais de Notaire',\n    //   },\n    //   {\n    //     data: [['Frais 2ème Pilier', r.general.insuranceFortuneUsed * constants.lppFees || 0]],\n    //     name: 'Frais 2ème Pilier',\n    //   },\n    // ],\n    series: [\n      {\n        name: f({ id: 'ProjectBarChart.property' }),\n        data: [getPropAndWork(props)],\n        stack: 1,\n      },\n      {\n        name: f({ id: 'ProjectBarChart.fees' }),\n        data: [\n          props.property.value * constants.notaryFees +\n            (r.general.insuranceFortuneUsed * constants.lppFees || 0),\n        ],\n        stack: 1,\n      },\n      {\n        name: f({ id: 'general.mortgageLoan' }),\n        data: [getLoanValue(props)],\n        stack: 2,\n      },\n      {\n        name: f({ id: 'general.ownFunds' }),\n        data: [total - getLoanValue(props)],\n        stack: 2,\n      },\n    ],\n    colors: [\n      chartColors.loan,\n      chartColors.insuranceFortune,\n      chartColors.lppFees,\n      chartColors.notaryFees,\n      // chartColors.fortune,\n    ],\n    lang: { thousandsSep: \"'\" },\n    credits: { enabled: false },\n  };\n\n  return options;\n};\n\nconst ProjectBarChart = props => <ReactHighcharts config={getConfig(props)} />;\n\nProjectBarChart.defaultProps = {\n  divName: 'projectBarChart',\n  titleAlign: 'center',\n};\n\nProjectBarChart.propTypes = {\n  loan: PropTypes.objectOf(PropTypes.any).isRequired,\n  divName: PropTypes.string,\n  titleAlign: PropTypes.string,\n};\n\nexport default injectIntl(withLoan(ProjectBarChart));\n"]},"hash":"287fcfe040c44f330535574cca4363e5b1de74cb"}

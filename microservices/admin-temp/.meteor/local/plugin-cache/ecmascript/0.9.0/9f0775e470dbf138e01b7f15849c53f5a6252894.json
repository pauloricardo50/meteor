{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./base.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Link"}]},{"source":"./lib/smartArguments.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SmartArgs"}]}],"exports":{"exported":["LinkMany"],"specifiers":[{"kind":"local","local":"LinkMany","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"linkMany"},"ignored":false,"code":"module.export({\n    default: () => LinkMany\n});\nlet Link;\nmodule.watch(require(\"./base.js\"), {\n    default(v) {\n        Link = v;\n    }\n\n}, 0);\nlet SmartArgs;\nmodule.watch(require(\"./lib/smartArguments.js\"), {\n    default(v) {\n        SmartArgs = v;\n    }\n\n}, 1);\n\nclass LinkMany extends Link {\n    clean() {\n        if (!this.object[this.linkStorageField]) {\n            this.object[this.linkStorageField] = [];\n        }\n    } /**\n       * Ads the _ids to the object.\n       * @param what\n       */\n\n    add(what) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what);\n\n            return this;\n        } //if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/remove operations must be done from the owning-link of the relationship');\n\n\n        this.clean();\n\n        const _ids = this.identifyIds(what, true);\n\n        this._validateIds(_ids);\n\n        const field = this.linkStorageField; // update the field\n\n        this.object[field] = _.union(this.object[field], _ids); // update the db\n\n        let modifier = {\n            $addToSet: {\n                [field]: {\n                    $each: _ids\n                }\n            }\n        };\n        this.linker.mainCollection.update(this.object._id, modifier);\n        return this;\n    } /**\n       * @param what\n       */\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n\n            return this;\n        }\n\n        if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/Remove operations should be done from the owner of the relationship');\n        this.clean();\n        const field = this.linkStorageField;\n\n        const _ids = this.identifyIds(what); // update the field\n\n\n        this.object[field] = _.filter(this.object[field], _id => !_.contains(_ids, _id)); // update the db\n\n        let modifier = {\n            $pullAll: {\n                [field]: _ids\n            }\n        };\n        this.linker.mainCollection.update(this.object._id, modifier);\n        return this;\n    }\n\n    set(what) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what);\n\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n    unset(what) {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js"],"names":["module","export","default","LinkMany","Link","watch","require","v","SmartArgs","clean","object","linkStorageField","add","what","isVirtual","_virtualAction","_ids","identifyIds","_validateIds","field","_","union","modifier","$addToSet","$each","linker","mainCollection","update","_id","remove","Meteor","Error","filter","contains","$pullAll","set","unset"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js.map","sourcesContent":["import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkMany extends Link {\n    clean() {\n        if (!this.object[this.linkStorageField]) {\n            this.object[this.linkStorageField] = [];\n        }\n    }\n\n    /**\n     * Ads the _ids to the object.\n     * @param what\n     */\n    add(what) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what);\n            return this;\n        }\n\n        //if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/remove operations must be done from the owning-link of the relationship');\n\n        this.clean();\n\n        const _ids = this.identifyIds(what, true);\n        this._validateIds(_ids);\n\n        const field = this.linkStorageField;\n\n        // update the field\n        this.object[field] = _.union(this.object[field], _ids);\n\n        // update the db\n        let modifier = {\n            $addToSet: {\n                [field]: {$each: _ids}\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    /**\n     * @param what\n     */\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/Remove operations should be done from the owner of the relationship');\n\n        this.clean();\n        const field = this.linkStorageField;\n\n        const _ids = this.identifyIds(what);\n\n        // update the field\n        this.object[field] = _.filter(this.object[field], _id => !_.contains(_ids, _id));\n\n        // update the db\n        let modifier = {\n            $pullAll: {\n                [field]: _ids\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    set(what) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n    unset(what) {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n}"]},"hash":"9f0775e470dbf138e01b7f15849c53f5a6252894"}

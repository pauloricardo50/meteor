{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/ejson","imported":["EJSON"],"specifiers":[{"kind":"named","imported":"EJSON","local":"EJSON"}]}],"exports":{"exported":["BaseResultCacher"],"specifiers":[{"kind":"local","local":"BaseResultCacher","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/namedQuery/cache/BaseResultCacher.js","filenameRelative":"packages/cultofcoders:grapher/lib/namedQuery/cache/BaseResultCacher.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/namedQuery/cache/BaseResultCacher.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/cache/BaseResultCacher.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"BaseResultCacher"},"ignored":false,"code":"module.export({\n    default: () => BaseResultCacher\n});\nlet EJSON;\nmodule.watch(require(\"meteor/ejson\"), {\n    EJSON(v) {\n        EJSON = v;\n    }\n\n}, 0);\n\nclass BaseResultCacher {\n    constructor(config = {}) {\n        this.config = config;\n    } /**\n       * @param queryName\n       * @param params\n       * @returns {string}\n       */\n\n    generateQueryId(queryName, params) {\n        return `${queryName}::${EJSON.stringify(params)}`;\n    } /**\n       * Dummy function\n       */\n\n    fetch(cacheId, {\n        query,\n        countCursor\n    }) {\n        throw 'Not implemented';\n    } /**\n       * @param query\n       * @param countCursor\n       * @returns {*}\n       */\n\n    static fetchData({\n        query,\n        countCursor\n    }) {\n        if (query) {\n            return query.fetch();\n        } else {\n            return countCursor.count();\n        }\n    }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/namedQuery/cache/BaseResultCacher.js"],"names":["module","export","default","BaseResultCacher","EJSON","watch","require","v","constructor","config","generateQueryId","queryName","params","stringify","fetch","cacheId","query","countCursor","fetchData","count"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,aAAQ,MAAIC;AAAb,CAAd;AAA8C,IAAIC,KAAJ;AAAUJ,OAAOK,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACF,UAAMG,CAAN,EAAQ;AAACH,gBAAMG,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;;AAKzC,MAAMJ,gBAAN,CAAuB;AAClCK,gBAAYC,SAAS,EAArB,EAAyB;AACrB,aAAKA,MAAL,GAAcA,MAAd;AACH,KAHiC,CAKlC;;;;;;AAKAC,oBAAgBC,SAAhB,EAA2BC,MAA3B,EAAmC;AAC/B,eAAQ,GAAED,SAAU,KAAIP,MAAMS,SAAN,CAAgBD,MAAhB,CAAwB,EAAhD;AACH,KAZiC,CAclC;;;;AAGAE,UAAMC,OAAN,EAAe;AAACC,aAAD;AAAQC;AAAR,KAAf,EAAqC;AACjC,cAAM,iBAAN;AACH,KAnBiC,CAqBlC;;;;;;AAKA,WAAOC,SAAP,CAAiB;AAACF,aAAD;AAAQC;AAAR,KAAjB,EAAuC;AACnC,YAAID,KAAJ,EAAW;AACP,mBAAOA,MAAMF,KAAN,EAAP;AACH,SAFD,MAEO;AACH,mBAAOG,YAAYE,KAAZ,EAAP;AACH;AACJ;;AAhCiC","file":"packages/cultofcoders:grapher/lib/namedQuery/cache/BaseResultCacher.js.map","sourcesContent":["import {EJSON} from 'meteor/ejson';\n\n/**\n * This is a very basic in-memory result caching functionality\n */\nexport default class BaseResultCacher {\n    constructor(config = {}) {\n        this.config = config;\n    }\n\n    /**\n     * @param queryName\n     * @param params\n     * @returns {string}\n     */\n    generateQueryId(queryName, params) {\n        return `${queryName}::${EJSON.stringify(params)}`;\n    }\n\n    /**\n     * Dummy function\n     */\n    fetch(cacheId, {query, countCursor}) {\n        throw 'Not implemented';\n    }\n\n    /**\n     * @param query\n     * @param countCursor\n     * @returns {*}\n     */\n    static fetchData({query, countCursor}) {\n        if (query) {\n            return query.fetch();\n        } else {\n            return countCursor.count();\n        }\n    }\n}\n"]},"hash":"9b30a93a107a63ef903d6774feeb00edc03b69aa"}

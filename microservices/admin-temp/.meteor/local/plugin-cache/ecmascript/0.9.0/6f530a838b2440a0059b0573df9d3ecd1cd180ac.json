{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../api","imported":["constants"],"specifiers":[{"kind":"named","imported":"constants","local":"constants"}]}],"exports":{"exported":["getBorrowerInfoArray","getBorrowerFinanceArray"],"specifiers":[{"kind":"local","local":"getBorrowerInfoArray","exported":"getBorrowerInfoArray"},{"kind":"local","local":"getBorrowerFinanceArray","exported":"getBorrowerFinanceArray"}]}}},"options":{"filename":"imports/core/arrays/BorrowerFormArray.js","filenameRelative":"imports/core/arrays/BorrowerFormArray.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/arrays/BorrowerFormArray.js.map","sourceFileName":"imports/core/arrays/BorrowerFormArray.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"BorrowerFormArray"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nmodule.export({\n  getBorrowerInfoArray: function () {\n    function getBorrowerInfoArray() {\n      return _getBorrowerInfoArray;\n    }\n\n    return getBorrowerInfoArray;\n  }(),\n  getBorrowerFinanceArray: function () {\n    function getBorrowerFinanceArray() {\n      return _getBorrowerFinanceArray;\n    }\n\n    return getBorrowerFinanceArray;\n  }()\n});\n\nvar _constants = void 0;\n\nexports.getBorrowerInfoArray = _getBorrowerInfoArray;\nmodule.watch(require(\"../api\"), {\n  constants: function () {\n    function constants(v) {\n      _constants = v;\n    }\n\n    return constants;\n  }()\n}, 0);\n\nvar _getBorrowerInfoArray = function () {\n  function _getBorrowerInfoArray(_ref) {\n    var borrowers = _ref.borrowers,\n        id = _ref.borrowerId;\n    var b = borrowers.find(function (borrower) {\n      return borrower._id === id;\n    });\n    var multiple = borrowers.length > 1; // If this is the first borrower in the array of borrowers, don't ask for same address\n\n    var isFirst = borrowers[0]._id === id;\n\n    if (!b) {\n      throw new Error(\"couldn't find borrower\");\n    }\n\n    var disableAddress = !!b.sameAddress && !isFirst;\n    return [{\n      id: 'firstName',\n      type: 'textInput'\n    }, {\n      id: 'lastName',\n      type: 'textInput'\n    }, {\n      id: 'gender',\n      type: 'radioInput',\n      options: Object.values(_constants.GENDER)\n    }, {\n      type: 'h3',\n      id: 'yourAddress',\n      ignore: true,\n      required: false\n    }, {\n      id: 'sameAddress',\n      type: 'radioInput',\n      intlValues: {\n        name: borrowers[0].firstName || 'Emprunteur 1'\n      },\n      options: [true, false],\n      condition: multiple && !isFirst\n    }, {\n      id: 'address1',\n      type: 'textInput',\n      disabled: disableAddress,\n      placeholder: disableAddress && borrowers[0].address1,\n      noIntl: disableAddress\n    }, {\n      id: 'address2',\n      type: 'textInput',\n      disabled: !!b.sameAddress && !isFirst,\n      required: false,\n      placeholder: disableAddress && borrowers[0].address2,\n      noIntl: disableAddress\n    }, {\n      id: 'zipCode',\n      type: 'custom',\n      component: 'ZipAutoComplete',\n      componentProps: {\n        savePath: '',\n        initialValue: b.zipCode && b.city ? b.zipCode + \" \" + b.city : ''\n      },\n      disabled: !!b.sameAddress && !isFirst,\n      placeholder: disableAddress && (borrowers[0].zipCode && borrowers[0].city ? borrowers[0].zipCode + \" \" + borrowers[0].city : ''),\n      noIntl: disableAddress\n    }, {\n      type: 'conditionalInput',\n      conditionalTrueValue: false,\n      inputs: [{\n        id: 'isSwiss',\n        type: 'radioInput',\n        options: [true, false]\n      }, {\n        id: 'residencyPermit',\n        type: 'selectFieldInput',\n        options: Object.values(_constants.RESIDENCY_PERMIT)\n      }]\n    }, {\n      id: 'age',\n      type: 'textInput',\n      number: true,\n      saveOnChange: false\n    }, {\n      id: 'birthPlace',\n      type: 'textInput',\n      condition: !!b.isSwiss\n    }, {\n      id: 'citizenship',\n      type: 'textInput',\n      condition: !b.isSwiss\n    }, {\n      id: 'isUSPerson',\n      type: 'radioInput',\n      options: [true, false]\n    }, {\n      id: 'civilStatus',\n      type: 'radioInput',\n      options: Object.values(_constants.CIVIL_STATUS).map(function (value) {\n        return {\n          id: value,\n          intlValues: {\n            gender: b.gender\n          }\n        };\n      })\n    }, {\n      id: 'childrenCount',\n      type: 'textInput',\n      number: true\n    }, {\n      id: 'company',\n      type: 'textInput',\n      required: false,\n      autoComplete: 'organization'\n    }, {\n      id: 'worksForOwnCompany',\n      type: 'radioInput',\n      options: [true, false]\n    }, {\n      id: 'personalBank',\n      type: 'textInput'\n    }];\n  }\n\n  return _getBorrowerInfoArray;\n}();\n\nvar _getBorrowerFinanceArray = function () {\n  function _getBorrowerFinanceArray(_ref2) {\n    var borrowers = _ref2.borrowers,\n        id = _ref2.borrowerId,\n        loan = _ref2.loan;\n    var b = borrowers.find(function (borr) {\n      return borr._id === id;\n    });\n    var multiple = borrowers.length > 1; // If this is the first borrower in the array of borrowers, don't ask for same address\n\n    var isFirst = borrowers[0]._id === id;\n\n    if (!b) {\n      throw new Error(\"couldn't find borrower\");\n    }\n\n    var incomeArray = [{\n      type: 'h3',\n      id: 'incomeAndExpenses',\n      ignore: true,\n      required: false\n    }, {\n      id: 'salary',\n      type: 'textInput',\n      money: true\n    }, {\n      type: 'conditionalInput',\n      conditionalTrueValue: true,\n      inputs: [{\n        id: 'bonusExists',\n        type: 'radioInput',\n        options: [true, false]\n      }].concat(_toConsumableArray([2017, 2016, 2015, 2014].map(function (year) {\n        return {\n          id: \"bonus.bonus\" + year,\n          type: 'textInput',\n          money: true\n        };\n      })))\n    }, {\n      id: 'expenses',\n      type: 'arrayInput',\n      required: false,\n      inputs: [{\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(_constants.EXPENSES)\n      }, {\n        id: 'value',\n        type: 'textInput',\n        money: true\n      }]\n    }, {\n      id: 'otherIncome',\n      type: 'arrayInput',\n      required: false,\n      inputs: [{\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(_constants.OTHER_INCOME)\n      }, {\n        id: 'value',\n        type: 'textInput',\n        money: true\n      }]\n    }];\n    var fortuneArray = [{\n      type: 'h3',\n      id: 'fortune',\n      ignore: true,\n      required: false\n    }, {\n      id: 'bankFortune',\n      type: 'textInput',\n      money: true\n    }, {\n      id: 'realEstate',\n      type: 'arrayInput',\n      inputs: [{\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(_constants.REAL_ESTATE)\n      }, {\n        id: 'value',\n        type: 'textInput',\n        money: true\n      }, {\n        id: 'loan',\n        type: 'textInput',\n        money: true\n      }]\n    }, {\n      id: 'otherFortune',\n      type: 'arrayInput',\n      required: false,\n      inputs: [{\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(_constants.OTHER_FORTUNE)\n      }, {\n        id: 'value',\n        type: 'textInput',\n        money: true\n      }]\n    }];\n    var insuranceArray = [{\n      type: 'h3',\n      id: 'insurance',\n      required: false,\n      ignore: true\n    }, {\n      id: 'insuranceSecondPillar',\n      type: 'textInput',\n      money: true,\n      required: false\n    }, {\n      id: 'insuranceThirdPillar',\n      type: 'textInput',\n      money: true,\n      required: false\n    }, {\n      id: 'insurance3B',\n      type: 'textInput',\n      money: true,\n      required: false\n    }, {\n      id: 'insurancePureRisk',\n      type: 'textInput',\n      money: true,\n      required: false\n    }];\n    return incomeArray.concat([].concat(fortuneArray, insuranceArray));\n  }\n\n  return _getBorrowerFinanceArray;\n}();","map":{"version":3,"sources":["imports/core/arrays/BorrowerFormArray.js"],"names":["module","export","getBorrowerInfoArray","getBorrowerFinanceArray","constants","watch","require","v","borrowers","id","borrowerId","b","find","borrower","_id","multiple","length","isFirst","Error","disableAddress","sameAddress","type","options","Object","values","GENDER","ignore","required","intlValues","name","firstName","condition","disabled","placeholder","address1","noIntl","address2","component","componentProps","savePath","initialValue","zipCode","city","conditionalTrueValue","inputs","RESIDENCY_PERMIT","number","saveOnChange","isSwiss","CIVIL_STATUS","map","value","gender","autoComplete","loan","borr","incomeArray","money","year","EXPENSES","OTHER_INCOME","fortuneArray","REAL_ESTATE","OTHER_FORTUNE","insuranceArray","concat"],"mappings":"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","file":"imports/core/arrays/BorrowerFormArray.js.map","sourcesContent":["import { constants } from 'core/api';\n\nexport const getBorrowerInfoArray = ({ borrowers, borrowerId: id }) => {\n  const b = borrowers.find(borrower => borrower._id === id);\n  const multiple = borrowers.length > 1;\n  // If this is the first borrower in the array of borrowers, don't ask for same address\n  const isFirst = borrowers[0]._id === id;\n\n  if (!b) {\n    throw new Error(\"couldn't find borrower\");\n  }\n\n  const disableAddress = !!b.sameAddress && !isFirst;\n\n  return [\n    { id: 'firstName', type: 'textInput' },\n    { id: 'lastName', type: 'textInput' },\n    {\n      id: 'gender',\n      type: 'radioInput',\n      options: Object.values(constants.GENDER),\n    },\n    {\n      type: 'h3',\n      id: 'yourAddress',\n      ignore: true,\n      required: false,\n    },\n    {\n      id: 'sameAddress',\n      type: 'radioInput',\n      intlValues: { name: borrowers[0].firstName || 'Emprunteur 1' },\n      options: [true, false],\n      condition: multiple && !isFirst,\n    },\n    {\n      id: 'address1',\n      type: 'textInput',\n      disabled: disableAddress,\n      placeholder: disableAddress && borrowers[0].address1,\n      noIntl: disableAddress,\n    },\n    {\n      id: 'address2',\n      type: 'textInput',\n      disabled: !!b.sameAddress && !isFirst,\n      required: false,\n      placeholder: disableAddress && borrowers[0].address2,\n      noIntl: disableAddress,\n    },\n    {\n      id: 'zipCode',\n      type: 'custom',\n      component: 'ZipAutoComplete',\n      componentProps: {\n        savePath: '',\n        initialValue: b.zipCode && b.city ? `${b.zipCode} ${b.city}` : '',\n      },\n      disabled: !!b.sameAddress && !isFirst,\n      placeholder:\n        disableAddress &&\n        (borrowers[0].zipCode && borrowers[0].city\n          ? `${borrowers[0].zipCode} ${borrowers[0].city}`\n          : ''),\n      noIntl: disableAddress,\n    },\n    {\n      type: 'conditionalInput',\n      conditionalTrueValue: false,\n      inputs: [\n        {\n          id: 'isSwiss',\n          type: 'radioInput',\n          options: [true, false],\n        },\n        {\n          id: 'residencyPermit',\n          type: 'selectFieldInput',\n          options: Object.values(constants.RESIDENCY_PERMIT),\n        },\n      ],\n    },\n    {\n      id: 'age',\n      type: 'textInput',\n      number: true,\n      saveOnChange: false,\n    },\n    { id: 'birthPlace', type: 'textInput', condition: !!b.isSwiss },\n    { id: 'citizenship', type: 'textInput', condition: !b.isSwiss },\n    { id: 'isUSPerson', type: 'radioInput', options: [true, false] },\n    {\n      id: 'civilStatus',\n      type: 'radioInput',\n      options: Object.values(constants.CIVIL_STATUS).map(value => ({\n        id: value,\n        intlValues: { gender: b.gender },\n      })),\n    },\n    { id: 'childrenCount', type: 'textInput', number: true },\n    {\n      id: 'company',\n      type: 'textInput',\n      required: false,\n      autoComplete: 'organization',\n    },\n    {\n      id: 'worksForOwnCompany',\n      type: 'radioInput',\n      options: [true, false],\n    },\n    { id: 'personalBank', type: 'textInput' },\n  ];\n};\n\nexport const getBorrowerFinanceArray = ({\n  borrowers,\n  borrowerId: id,\n  loan,\n}) => {\n  const b = borrowers.find(borr => borr._id === id);\n  const multiple = borrowers.length > 1;\n  // If this is the first borrower in the array of borrowers, don't ask for same address\n  const isFirst = borrowers[0]._id === id;\n\n  if (!b) {\n    throw new Error(\"couldn't find borrower\");\n  }\n\n  const incomeArray = [\n    {\n      type: 'h3',\n      id: 'incomeAndExpenses',\n      ignore: true,\n      required: false,\n    },\n    { id: 'salary', type: 'textInput', money: true },\n    {\n      type: 'conditionalInput',\n      conditionalTrueValue: true,\n      inputs: [\n        {\n          id: 'bonusExists',\n          type: 'radioInput',\n          options: [true, false],\n        },\n        ...[2017, 2016, 2015, 2014].map(year => ({\n          id: `bonus.bonus${year}`,\n          type: 'textInput',\n          money: true,\n        })),\n      ],\n    },\n    {\n      id: 'expenses',\n      type: 'arrayInput',\n      required: false,\n      inputs: [\n        {\n          id: 'description',\n          type: 'selectInput',\n          options: Object.values(constants.EXPENSES),\n        },\n        { id: 'value', type: 'textInput', money: true },\n      ],\n    },\n    {\n      id: 'otherIncome',\n      type: 'arrayInput',\n      required: false,\n      inputs: [\n        {\n          id: 'description',\n          type: 'selectInput',\n          options: Object.values(constants.OTHER_INCOME),\n        },\n        { id: 'value', type: 'textInput', money: true },\n      ],\n    },\n  ];\n\n  const fortuneArray = [\n    {\n      type: 'h3',\n      id: 'fortune',\n      ignore: true,\n      required: false,\n    },\n    {\n      id: 'bankFortune',\n      type: 'textInput',\n      money: true,\n    },\n    {\n      id: 'realEstate',\n      type: 'arrayInput',\n      inputs: [\n        {\n          id: 'description',\n          type: 'selectInput',\n          options: Object.values(constants.REAL_ESTATE),\n        },\n        {\n          id: 'value',\n          type: 'textInput',\n          money: true,\n        },\n        {\n          id: 'loan',\n          type: 'textInput',\n          money: true,\n        },\n      ],\n    },\n    {\n      id: 'otherFortune',\n      type: 'arrayInput',\n      required: false,\n      inputs: [\n        {\n          id: 'description',\n          type: 'selectInput',\n          options: Object.values(constants.OTHER_FORTUNE),\n        },\n        {\n          id: 'value',\n          type: 'textInput',\n          money: true,\n        },\n      ],\n    },\n  ];\n\n  const insuranceArray = [\n    {\n      type: 'h3',\n      id: 'insurance',\n      required: false,\n      ignore: true,\n    },\n    {\n      id: 'insuranceSecondPillar',\n      type: 'textInput',\n      money: true,\n      required: false,\n    },\n    {\n      id: 'insuranceThirdPillar',\n      type: 'textInput',\n      money: true,\n      required: false,\n    },\n    {\n      id: 'insurance3B',\n      type: 'textInput',\n      money: true,\n      required: false,\n    },\n    {\n      id: 'insurancePureRisk',\n      type: 'textInput',\n      money: true,\n      required: false,\n    },\n  ];\n\n  return incomeArray.concat([...fortuneArray, ...insuranceArray]);\n};\n"]},"hash":"6f530a838b2440a0059b0573df9d3ecd1cd180ac"}

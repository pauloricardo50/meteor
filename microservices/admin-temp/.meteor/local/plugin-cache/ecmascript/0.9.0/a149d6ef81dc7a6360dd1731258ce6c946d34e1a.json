{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","createClass","classCallCheck","extends","defineProperty","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react","imported":["default","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"../../api/cleanMethods","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"cleanMethod"}]},{"source":"../Button","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Button"}]},{"source":"../Translation","imported":["T"],"specifiers":[{"kind":"named","imported":"T","local":"T"}]},{"source":"./TextInput","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TextInput"}]},{"source":"./SelectFieldInput","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SelectFieldInput"}]},{"source":"./FormValidator","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"FormValidator"}]}],"exports":{"exported":["ArrayInput"],"specifiers":[{"kind":"local","local":"ArrayInput","exported":"default"}]}}},"options":{"filename":"imports/core/components/AutoForm/ArrayInput.jsx","filenameRelative":"imports/core/components/AutoForm/ArrayInput.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/AutoForm/ArrayInput.jsx.map","sourceFileName":"imports/core/components/AutoForm/ArrayInput.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ArrayInput"},"ignored":false,"code":"\"use strict\";\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\");\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.export({\n  default: function _default() {\n    return ArrayInput;\n  }\n});\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  default: function _default(v) {\n    PropTypes = v;\n  }\n}, 0);\n\nvar React = void 0,\n    _Component = void 0;\n\nmodule.watch(require(\"react\"), {\n  default: function _default(v) {\n    React = v;\n  },\n  Component: function Component(v) {\n    _Component = v;\n  }\n}, 1);\nvar cleanMethod = void 0;\nmodule.watch(require(\"../../api/cleanMethods\"), {\n  default: function _default(v) {\n    cleanMethod = v;\n  }\n}, 2);\nvar Button = void 0;\nmodule.watch(require(\"../Button\"), {\n  default: function _default(v) {\n    Button = v;\n  }\n}, 3);\n\nvar _T = void 0;\n\nmodule.watch(require(\"../Translation\"), {\n  T: function T(v) {\n    _T = v;\n  }\n}, 4);\nvar TextInput = void 0;\nmodule.watch(require(\"./TextInput\"), {\n  default: function _default(v) {\n    TextInput = v;\n  }\n}, 5);\nvar SelectFieldInput = void 0;\nmodule.watch(require(\"./SelectFieldInput\"), {\n  default: function _default(v) {\n    SelectFieldInput = v;\n  }\n}, 6);\nvar FormValidator = void 0;\nmodule.watch(require(\"./FormValidator\"), {\n  default: function _default(v) {\n    FormValidator = v;\n  }\n}, 7);\nvar styles = {\n  button: {\n    marginRight: 8\n  },\n  arrayItem: {\n    marginBottom: 16,\n    overflow: 'unset'\n  }\n};\n\nvar ArrayInput = function (_Component2) {\n  (0, _inherits3.default)(ArrayInput, _Component2);\n\n  function ArrayInput(props) {\n    (0, _classCallCheck3.default)(this, ArrayInput);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (ArrayInput.__proto__ || Object.getPrototypeOf(ArrayInput)).call(this, props));\n\n    _this.getArray = function () {\n      var array = [];\n      var _this$props$inputProp = _this.props.inputProps,\n          id = _this$props$inputProp.id,\n          currentValue = _this$props$inputProp.currentValue,\n          inputs = _this$props$inputProp.inputs;\n\n      var mapInput = function mapInput(input, i) {\n        var inputId = input.id,\n            type = input.type,\n            options = input.options;\n        var childProps = (0, _extends3.default)({}, _this.props, {\n          inputProps: (0, _extends3.default)({}, input, {\n            id: id + \".\" + i + \".\" + inputId,\n            currentValue: currentValue && currentValue[i] && currentValue[i][inputId],\n            key: inputId,\n            label: React.createElement(_T, {\n              id: \"Forms.\" + id + \".\" + inputId\n            }),\n            placeholder: \"Forms.\" + id + \".\" + inputId + \".placeholder\",\n            required: true,\n            disabled: _this.props.disabled\n          })\n        });\n\n        if (type === 'textInput') {\n          return React.createElement(TextInput, (0, _extends3.default)({}, childProps, {\n            noValidator: true\n          }));\n        } else if (type === 'selectInput') {\n          // Map these labels here to prevent having the id being xxx.0 or xxx.1\n          // and mess up the labels in the SelectFieldInput\n          childProps.inputProps.options = options.map(function (opt) {\n            return opt.id === undefined ? {\n              id: opt,\n              label: React.createElement(_T, {\n                id: \"Forms.\" + id + \".\" + opt\n              })\n            } : (0, _extends3.default)({}, opt, {\n              label: React.createElement(_T, {\n                id: \"Forms.\" + id + \".\" + opt.id\n              })\n            });\n          });\n          return React.createElement(SelectFieldInput, (0, _extends3.default)({}, childProps, {\n            noValidator: true\n          }));\n        }\n      };\n\n      var _loop = function _loop(i) {\n        // If there are multiple components per array item\n        array.push(React.createElement(\n          \"div\",\n          {\n            className: \"mask1\",\n            style: styles.arrayItem,\n            key: i\n          },\n          inputs.map(function (input) {\n            return mapInput(input, i);\n          })\n        ));\n      };\n\n      for (var i = 0; i < _this.state.count; i += 1) {\n        _loop(i);\n      }\n\n      return array;\n    };\n\n    _this.addValue = function () {\n      return _this.setState({\n        count: _this.state.count + 1\n      });\n    };\n\n    _this.removeValue = function () {\n      return _this.state.count > 0 && cleanMethod(_this.props.popFunc, {\n        object: (0, _defineProperty3.default)({}, \"\" + _this.props.inputProps.id, 1),\n        id: _this.props.docId\n      }).then(function () {\n        return _this.setState({\n          count: _this.state.count - 1\n        });\n      });\n    };\n\n    _this.state = {\n      count: (_this.props.inputProps.currentValue || []).length\n    };\n    return _this;\n  } // Only remove a value if there's more than 1 left\n\n\n  (0, _createClass3.default)(ArrayInput, [{\n    key: \"render\",\n    value: function render() {\n      var _props$inputProps = this.props.inputProps,\n          style = _props$inputProps.style,\n          label = _props$inputProps.label,\n          disabled = _props$inputProps.disabled;\n      var count = this.state.count;\n      return React.createElement(\n        \"div\",\n        {\n          className: \"flex-col\",\n          style: (0, _extends3.default)({}, style, {\n            marginBottom: 24,\n            position: 'relative'\n          })\n        },\n        React.createElement(\n          \"label\",\n          {\n            htmlFor: \"\",\n            style: {\n              marginBottom: 8\n            }\n          },\n          label\n        ),\n        this.getArray(),\n        React.createElement(FormValidator, this.props),\n        React.createElement(\n          \"div\",\n          {\n            className: \"text-center\"\n          },\n          count <= 0 && React.createElement(Button, {\n            raised: true,\n            label: React.createElement(_T, {\n              id: \"ArrayInput.add\"\n            }),\n            onClick: this.addValue,\n            disabled: disabled\n          }),\n          count > 0 && React.createElement(Button, {\n            raised: true,\n            label: \"-\",\n            onClick: this.removeValue,\n            style: styles.button,\n            disabled: count <= 0 || disabled\n          }),\n          count > 0 && React.createElement(Button, {\n            raised: true,\n            label: \"+\",\n            onClick: this.addValue,\n            primary: true,\n            disabled: disabled\n          })\n        )\n      );\n    }\n  }]);\n  return ArrayInput;\n}(_Component);\n\nArrayInput.propTypes = {\n  inputs: PropTypes.arrayOf(PropTypes.object).isRequired,\n  currentValue: PropTypes.arrayOf(PropTypes.any),\n  id: PropTypes.string.isRequired,\n  label: PropTypes.node.isRequired,\n  popFunc: PropTypes.string.isRequired,\n  docId: PropTypes.string.isRequired\n};\nArrayInput.defaultProps = {\n  currentValue: []\n};","map":{"version":3,"sources":["imports/core/components/AutoForm/ArrayInput.jsx"],"names":["module","export","default","ArrayInput","PropTypes","watch","require","v","React","Component","cleanMethod","Button","T","TextInput","SelectFieldInput","FormValidator","styles","button","marginRight","arrayItem","marginBottom","overflow","props","getArray","array","inputProps","id","currentValue","inputs","mapInput","input","i","inputId","type","options","childProps","key","label","placeholder","required","disabled","map","opt","undefined","push","state","count","addValue","setState","removeValue","popFunc","object","docId","then","length","style","position","propTypes","arrayOf","isRequired","any","string","node","defaultProps"],"mappings":"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","file":"imports/core/components/AutoForm/ArrayInput.jsx.map","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cleanMethod from 'core/api/cleanMethods';\n\nimport Button from 'core/components/Button';\n\nimport { T } from 'core/components/Translation';\nimport TextInput from './TextInput';\nimport SelectFieldInput from './SelectFieldInput';\n\nimport FormValidator from './FormValidator';\n\nconst styles = {\n  button: {\n    marginRight: 8,\n  },\n  arrayItem: {\n    marginBottom: 16,\n    overflow: 'unset',\n  },\n};\n\nexport default class ArrayInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: (this.props.inputProps.currentValue || []).length,\n    };\n  }\n\n  getArray = () => {\n    const array = [];\n    const { inputProps: { id, currentValue, inputs } } = this.props;\n\n    const mapInput = (input, i) => {\n      const { id: inputId, type, options } = input;\n      const childProps = {\n        ...this.props,\n        inputProps: {\n          ...input,\n          id: `${id}.${i}.${inputId}`,\n          currentValue:\n            currentValue && currentValue[i] && currentValue[i][inputId],\n          key: inputId,\n          label: <T id={`Forms.${id}.${inputId}`} />,\n          placeholder: `Forms.${id}.${inputId}.placeholder`,\n          required: true,\n          disabled: this.props.disabled,\n        },\n      };\n\n      if (type === 'textInput') {\n        return <TextInput {...childProps} noValidator />;\n      } else if (type === 'selectInput') {\n        // Map these labels here to prevent having the id being xxx.0 or xxx.1\n        // and mess up the labels in the SelectFieldInput\n        childProps.inputProps.options = options.map(opt =>\n          (opt.id === undefined\n            ? { id: opt, label: <T id={`Forms.${id}.${opt}`} /> }\n            : { ...opt, label: <T id={`Forms.${id}.${opt.id}`} /> }));\n        return <SelectFieldInput {...childProps} noValidator />;\n      }\n    };\n\n    for (let i = 0; i < this.state.count; i += 1) {\n      // If there are multiple components per array item\n      array.push(<div className=\"mask1\" style={styles.arrayItem} key={i}>\n        {inputs.map(input => mapInput(input, i))}\n      </div>);\n    }\n\n    return array;\n  };\n\n  addValue = () => this.setState({ count: this.state.count + 1 });\n\n  // Only remove a value if there's more than 1 left\n  removeValue = () =>\n    this.state.count > 0 &&\n    cleanMethod(this.props.popFunc, {\n      object: { [`${this.props.inputProps.id}`]: 1 },\n      id: this.props.docId,\n    }).then(() => this.setState({ count: this.state.count - 1 }));\n\n  render() {\n    const { inputProps: { style, label, disabled } } = this.props;\n    const { count } = this.state;\n\n    return (\n      <div\n        className=\"flex-col\"\n        style={{ ...style, marginBottom: 24, position: 'relative' }}\n      >\n        <label htmlFor=\"\" style={{ marginBottom: 8 }}>\n          {label}\n        </label>\n\n        {this.getArray()}\n        <FormValidator {...this.props} />\n\n        <div className=\"text-center\">\n          {count <= 0 && (\n            <Button\n              raised\n              label={<T id=\"ArrayInput.add\" />}\n              onClick={this.addValue}\n              disabled={disabled}\n            />\n          )}\n          {count > 0 && (\n            <Button\n              raised\n              label=\"-\"\n              onClick={this.removeValue}\n              style={styles.button}\n              disabled={count <= 0 || disabled}\n            />\n          )}\n          {count > 0 && (\n            <Button\n              raised\n              label=\"+\"\n              onClick={this.addValue}\n              primary\n              disabled={disabled}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nArrayInput.propTypes = {\n  inputs: PropTypes.arrayOf(PropTypes.object).isRequired,\n  currentValue: PropTypes.arrayOf(PropTypes.any),\n  id: PropTypes.string.isRequired,\n  label: PropTypes.node.isRequired,\n  popFunc: PropTypes.string.isRequired,\n  docId: PropTypes.string.isRequired,\n};\n\nArrayInput.defaultProps = {\n  currentValue: [],\n};\n"]},"hash":"a149d6ef81dc7a6360dd1731258ce6c946d34e1a"}

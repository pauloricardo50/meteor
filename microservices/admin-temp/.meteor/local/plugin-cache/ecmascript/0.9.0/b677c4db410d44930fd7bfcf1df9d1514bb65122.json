{"metadata":{"usedHelpers":["objectWithoutProperties","defineProperty","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-intl","imported":["injectIntl"],"specifiers":[{"kind":"named","imported":"injectIntl","local":"injectIntl"}]},{"source":"react-text-mask","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"MaskedInput"}]},{"source":"material-ui/Input","imported":["default","InputLabel"],"specifiers":[{"kind":"named","imported":"default","local":"Input"},{"kind":"named","imported":"InputLabel","local":"InputLabel"}]},{"source":"material-ui/Form","imported":["FormControl","FormHelperText"],"specifiers":[{"kind":"named","imported":"FormControl","local":"FormControl"},{"kind":"named","imported":"FormHelperText","local":"FormHelperText"}]},{"source":"classnames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classnames"}]},{"source":"../utils/textMasks","imported":["swissFrancMask","percentMask"],"specifiers":[{"kind":"named","imported":"swissFrancMask","local":"swissFrancMask"},{"kind":"named","imported":"percentMask","local":"percentMask"}]},{"source":"../utils/conversionFunctions","imported":["toNumber"],"specifiers":[{"kind":"named","imported":"toNumber","local":"toNumber"}]},{"source":"../config/constants","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"constants"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/TextInput.jsx","filenameRelative":"imports/core/components/TextInput.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/TextInput.jsx.map","sourceFileName":"imports/core/components/TextInput.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TextInput"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\");\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _objectWithoutProperties2 = require(\"babel-runtime/helpers/objectWithoutProperties\");\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  default: function _default(v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  default: function _default(v) {\n    PropTypes = v;\n  }\n}, 1);\n\nvar _injectIntl = void 0;\n\nmodule.watch(require(\"react-intl\"), {\n  injectIntl: function injectIntl(v) {\n    _injectIntl = v;\n  }\n}, 2);\nvar MaskedInput = void 0;\nmodule.watch(require(\"react-text-mask\"), {\n  default: function _default(v) {\n    MaskedInput = v;\n  }\n}, 3);\n\nvar Input = void 0,\n    _InputLabel = void 0;\n\nmodule.watch(require(\"material-ui/Input\"), {\n  default: function _default(v) {\n    Input = v;\n  },\n  InputLabel: function InputLabel(v) {\n    _InputLabel = v;\n  }\n}, 4);\n\nvar _FormControl = void 0,\n    _FormHelperText = void 0;\n\nmodule.watch(require(\"material-ui/Form\"), {\n  FormControl: function FormControl(v) {\n    _FormControl = v;\n  },\n  FormHelperText: function FormHelperText(v) {\n    _FormHelperText = v;\n  }\n}, 5);\nvar classnames = void 0;\nmodule.watch(require(\"classnames\"), {\n  default: function _default(v) {\n    classnames = v;\n  }\n}, 6);\n\nvar _swissFrancMask = void 0,\n    _percentMask = void 0;\n\nmodule.watch(require(\"../utils/textMasks\"), {\n  swissFrancMask: function swissFrancMask(v) {\n    _swissFrancMask = v;\n  },\n  percentMask: function percentMask(v) {\n    _percentMask = v;\n  }\n}, 7);\n\nvar _toNumber = void 0;\n\nmodule.watch(require(\"../utils/conversionFunctions\"), {\n  toNumber: function toNumber(v) {\n    _toNumber = v;\n  }\n}, 8);\nvar constants = void 0;\nmodule.watch(require(\"../config/constants\"), {\n  default: function _default(v) {\n    constants = v;\n  }\n}, 9);\n\nvar getDefaults = function getDefaults(_ref) {\n  var type = _ref.type,\n      id = _ref.id,\n      onChange = _ref.onChange,\n      value = _ref.value;\n\n  switch (type) {\n    case 'money':\n      return {\n        onChangeHandler: function onChangeHandler(event) {\n          return onChange(id, _toNumber(event.target.value));\n        },\n        showMask: true,\n        mask: _swissFrancMask,\n        placeholder: constants.getCurrency(),\n        value: value\n      };\n\n    case 'percent':\n      return {\n        onChangeHandler: function onChangeHandler(event) {\n          return onChange(id, Math.round(parseFloat(event.target.value) * 100) / 10000);\n        },\n        showMask: true,\n        mask: _percentMask,\n        placeholder: '%',\n        value: (value * 100).toFixed(2)\n      };\n\n    case 'number':\n      return {\n        onChangeHandler: function onChangeHandler(event) {\n          return onChange(id, _toNumber(event.target.value));\n        },\n        showMask: false,\n        value: value\n      };\n\n    case 'date':\n      return {\n        onChangeHandler: undefined,\n        showMask: false,\n        value: ''\n      };\n\n    default:\n      return {\n        // Pass event as third argument, for some components which need it\n        // like react-autosuggest\n        onChangeHandler: function onChangeHandler(event) {\n          return onChange(id, event.target.value, event);\n        },\n        showMask: false,\n        value: value\n      };\n  }\n};\n\nvar TextInput = function TextInput(props) {\n  var className = props.className,\n      label = props.label,\n      style = props.style,\n      labelStyle = props.labelStyle,\n      id = props.id,\n      info = props.info,\n      error = props.error,\n      inputRef = props.inputRef,\n      placeholder = props.placeholder,\n      fullWidth = props.fullWidth,\n      onChange = props.onChange,\n      intl = props.intl,\n      inputComponent = props.inputComponent,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      noIntl = props.noIntl,\n      classes = props.classes,\n      otherProps = (0, _objectWithoutProperties3.default)(props, [\"className\", \"label\", \"style\", \"labelStyle\", \"id\", \"info\", \"error\", \"inputRef\", \"placeholder\", \"fullWidth\", \"onChange\", \"intl\", \"inputComponent\", \"inputProps\", \"InputProps\", \"noIntl\", \"classes\"]);\n\n  var _getDefaults = getDefaults(props),\n      onChangeHandler = _getDefaults.onChangeHandler,\n      showMask = _getDefaults.showMask,\n      mask = _getDefaults.mask,\n      defaultPlaceholder = _getDefaults.placeholder,\n      value = _getDefaults.value;\n\n  var finalPlaceholder = void 0;\n\n  if (noIntl) {\n    finalPlaceholder = placeholder || defaultPlaceholder;\n  } else {\n    finalPlaceholder = placeholder && typeof placeholder === 'string' ? intl.formatMessage({\n      id: placeholder\n    }) : defaultPlaceholder;\n  } // Ignore placeholder for money inputs, and just show the currency\n  // Showing an amount is confusing\n\n\n  if (props.type === 'money') {\n    finalPlaceholder = defaultPlaceholder;\n  }\n\n  return React.createElement(\n    _FormControl,\n    {\n      error: error,\n      className: classnames((0, _defineProperty3.default)({\n        'mui-text-input': true\n      }, className, true)),\n      style: style\n    },\n    label && React.createElement(\n      _InputLabel,\n      {\n        htmlFor: id,\n        style: labelStyle,\n        shrink: true\n      },\n      label\n    ),\n    React.createElement(Input, (0, _extends3.default)({}, otherProps, {\n      className: classes ? Object.values(classes).join(' ') : '',\n      id: id,\n      onChange: onChangeHandler,\n      type: \"text\",\n      style: {\n        fontSize: 'inherit'\n      },\n      inputComponent: showMask ? MaskedInput : inputComponent || undefined,\n      inputProps: (0, _extends3.default)({}, inputProps, InputProps, {\n        value: value,\n        placeholder: finalPlaceholder,\n        noValidate: true,\n        mask: mask || undefined,\n        pattern: mask ? '[0-9]*' : undefined,\n        ref: inputRef\n      })\n    })),\n    info && React.createElement(\n      _FormHelperText,\n      null,\n      info\n    )\n  );\n};\n\nTextInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onChange: PropTypes.func,\n  type: PropTypes.string,\n  info: PropTypes.node,\n  placeholder: PropTypes.string,\n  error: PropTypes.bool,\n  inputComponent: PropTypes.func,\n  inputProps: PropTypes.object,\n  noIntl: PropTypes.bool,\n  inputRef: PropTypes.func\n};\nTextInput.defaultProps = {\n  onChange: undefined,\n  label: '',\n  value: undefined,\n  type: undefined,\n  info: undefined,\n  placeholder: undefined,\n  error: false,\n  inputComponent: null,\n  inputProps: undefined,\n  noIntl: false,\n  inputRef: undefined\n};\nmodule.exportDefault(_injectIntl(TextInput));","map":{"version":3,"sources":["imports/core/components/TextInput.jsx"],"names":["React","module","watch","require","default","v","PropTypes","injectIntl","MaskedInput","Input","InputLabel","FormControl","FormHelperText","classnames","swissFrancMask","percentMask","toNumber","constants","getDefaults","type","id","onChange","value","onChangeHandler","event","target","showMask","mask","placeholder","getCurrency","Math","round","parseFloat","toFixed","undefined","TextInput","props","className","label","style","labelStyle","info","error","inputRef","fullWidth","intl","inputComponent","inputProps","InputProps","noIntl","classes","otherProps","defaultPlaceholder","finalPlaceholder","formatMessage","Object","values","join","fontSize","noValidate","pattern","ref","propTypes","string","isRequired","oneOfType","element","number","func","node","bool","object","defaultProps","exportDefault"],"mappings":"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","file":"imports/core/components/TextInput.jsx.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport MaskedInput from 'react-text-mask';\n\nimport Input, { InputLabel } from 'material-ui/Input';\nimport { FormControl, FormHelperText } from 'material-ui/Form';\nimport classnames from 'classnames';\n\nimport { swissFrancMask, percentMask } from '../utils/textMasks';\nimport { toNumber } from '../utils/conversionFunctions';\nimport constants from '../config/constants';\n\nconst getDefaults = ({ type, id, onChange, value }) => {\n  switch (type) {\n  case 'money':\n    return {\n      onChangeHandler: event => onChange(id, toNumber(event.target.value)),\n      showMask: true,\n      mask: swissFrancMask,\n      placeholder: constants.getCurrency(),\n      value,\n    };\n  case 'percent':\n    return {\n      onChangeHandler: event =>\n        onChange(\n          id,\n          Math.round(parseFloat(event.target.value) * 100) / 10000,\n        ),\n      showMask: true,\n      mask: percentMask,\n      placeholder: '%',\n      value: (value * 100).toFixed(2),\n    };\n  case 'number':\n    return {\n      onChangeHandler: event => onChange(id, toNumber(event.target.value)),\n      showMask: false,\n      value,\n    };\n  case 'date':\n    return {\n      onChangeHandler: undefined,\n      showMask: false,\n      value: '',\n    };\n  default:\n    return {\n      // Pass event as third argument, for some components which need it\n      // like react-autosuggest\n      onChangeHandler: event => onChange(id, event.target.value, event),\n      showMask: false,\n      value,\n    };\n  }\n};\n\nconst TextInput = (props) => {\n  const {\n    className,\n    label,\n    style,\n    labelStyle,\n    id,\n    info,\n    error,\n    inputRef,\n    placeholder,\n    fullWidth,\n    onChange,\n    intl,\n    inputComponent,\n    inputProps,\n    InputProps,\n    noIntl,\n    classes,\n    ...otherProps\n  } = props;\n\n  const {\n    onChangeHandler,\n    showMask,\n    mask,\n    placeholder: defaultPlaceholder,\n    value,\n  } = getDefaults(props);\n\n  let finalPlaceholder;\n  if (noIntl) {\n    finalPlaceholder = placeholder || defaultPlaceholder;\n  } else {\n    finalPlaceholder =\n      placeholder && typeof placeholder === 'string'\n        ? intl.formatMessage({ id: placeholder })\n        : defaultPlaceholder;\n  }\n\n  // Ignore placeholder for money inputs, and just show the currency\n  // Showing an amount is confusing\n  if (props.type === 'money') {\n    finalPlaceholder = defaultPlaceholder;\n  }\n\n  return (\n    <FormControl\n      error={error}\n      className={classnames({ 'mui-text-input': true, [className]: true })}\n      style={style}\n    >\n      {label && (\n        <InputLabel htmlFor={id} style={labelStyle} shrink>\n          {label}\n        </InputLabel>\n      )}\n      <Input\n        {...otherProps}\n        className={classes ? Object.values(classes).join(' ') : ''}\n        id={id}\n        onChange={onChangeHandler}\n        type=\"text\"\n        style={{ fontSize: 'inherit' }}\n        inputComponent={showMask ? MaskedInput : inputComponent || undefined}\n        inputProps={{\n          ...inputProps, // Backwards compatible\n          ...InputProps,\n          value,\n          placeholder: finalPlaceholder,\n          noValidate: true,\n          mask: mask || undefined,\n          pattern: mask ? '[0-9]*' : undefined,\n          ref: inputRef,\n        }}\n      />\n      {info && <FormHelperText>{info}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nTextInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onChange: PropTypes.func,\n  type: PropTypes.string,\n  info: PropTypes.node,\n  placeholder: PropTypes.string,\n  error: PropTypes.bool,\n  inputComponent: PropTypes.func,\n  inputProps: PropTypes.object,\n  noIntl: PropTypes.bool,\n  inputRef: PropTypes.func,\n};\n\nTextInput.defaultProps = {\n  onChange: undefined,\n  label: '',\n  value: undefined,\n  type: undefined,\n  info: undefined,\n  placeholder: undefined,\n  error: false,\n  inputComponent: null,\n  inputProps: undefined,\n  noIntl: false,\n  inputRef: undefined,\n};\n\nexport default injectIntl(TextInput);\n"]},"hash":"b677c4db410d44930fd7bfcf1df9d1514bb65122"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":["toMoney","value","toNumber","value","toDecimalNumber","value","toDistanceString"],"specifiers":[{"kind":"local","local":"toMoney","exported":"toMoney"},{"kind":"local","local":"value","exported":"value"},{"kind":"local","local":"toNumber","exported":"toNumber"},{"kind":"local","local":"value","exported":"value"},{"kind":"local","local":"toDecimalNumber","exported":"toDecimalNumber"},{"kind":"local","local":"value","exported":"value"},{"kind":"local","local":"toDistanceString","exported":"toDistanceString"}]}}},"options":{"filename":"imports/core/utils/conversionFunctions.js","filenameRelative":"imports/core/utils/conversionFunctions.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/utils/conversionFunctions.js.map","sourceFileName":"imports/core/utils/conversionFunctions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"conversionFunctions"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nmodule.export({\n  toMoney: function toMoney() {\n    return _toMoney;\n  },\n  toNumber: function toNumber() {\n    return _toNumber;\n  },\n  toDecimalNumber: function toDecimalNumber() {\n    return _toDecimalNumber;\n  },\n  toDistanceString: function toDistanceString() {\n    return _toDistanceString;\n  }\n});\nexports.toMoney = _toMoney;\n\n// Rounds the value, adds thousands markers every 3 digits (and removes non-digit characters)\nfunction _toMoney(value) {\n  if (value === 0) {\n    return 0;\n  }\n\n  return String(Math.round(Number(Math.round(value)))).replace(/\\D/g, '').replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n} // Replaces any nondigit character by an empty character, to prevent the use of non-digits\n// Only do this if the value actually exists\n\n\nexports.toNumber = _toNumber;\n\nfunction _toNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return value ? Number(String(value).replace(/\\D/g, '')) : value;\n} // Replaces any nondigit character by an empty character, to prevent the use of non-digits\n// Only do this if the value actually exists\n\n\nexports.toDecimalNumber = _toDecimalNumber;\n\nfunction _toDecimalNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  } // Remove unwanted characters, except digits, dots and commas\n\n\n  var newValue = value ? String(value).replace(/[^\\d.,]/g, '') : value; // replace commas with dots\n\n  var commaReplaced = newValue ? Number(newValue.replace(',', '.')) : newValue;\n  return commaReplaced;\n}\n\nvar _toDistanceString = function _toDistanceString(dist) {\n  if (dist <= 0) {\n    return '0 m';\n  } else if (dist < 1000) {\n    return Math.round(dist / 10) * 10 + \" m\";\n  } else if (dist < 10000) {\n    return (Math.round(dist / 100) / 10).toFixed(1) + \" km\";\n  }\n\n  return Math.round(dist / 1000) + \" km\";\n};","map":{"version":3,"sources":["imports/core/utils/conversionFunctions.js"],"names":["module","export","toMoney","toNumber","toDecimalNumber","toDistanceString","value","String","Math","round","Number","replace","newValue","commaReplaced","dist","toFixed"],"mappings":";;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAQ;AAAA,WAAIA,QAAJ;AAAA,GAAT;AAAqBC,YAAS;AAAA,WAAIA,SAAJ;AAAA,GAA9B;AAA2CC,mBAAgB;AAAA,WAAIA,gBAAJ;AAAA,GAA3D;AAA+EC,oBAAiB;AAAA,WAAIA,iBAAJ;AAAA;AAAhG,CAAd;;;AAAA;AACO,SAASH,QAAT,CAAiBI,KAAjB,EAAwB;AAC7B,MAAIA,UAAU,CAAd,EAAiB;AACf,WAAO,CAAP;AACD;;AACD,SAAOC,OAAOC,KAAKC,KAAL,CAAWC,OAAOF,KAAKC,KAAL,CAAWH,KAAX,CAAP,CAAX,CAAP,EACJK,OADI,CACI,KADJ,EACW,EADX,EAEJA,OAFI,CAEI,uBAFJ,EAE6B,GAF7B,CAAP;AAGD,C,CAED;AACA;;;;;AACO,SAASR,SAAT,CAAkBG,KAAlB,EAAyB;AAC9B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AACD,SAAOA,QAAQI,OAAOH,OAAOD,KAAP,EAAcK,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,CAAP,CAAR,GAAmDL,KAA1D;AACD,C,CAED;AACA;;;;;AACO,SAASF,gBAAT,CAAyBE,KAAzB,EAAgC;AACrC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD,GAHoC,CAIrC;;;AACA,MAAMM,WAAWN,QAAQC,OAAOD,KAAP,EAAcK,OAAd,CAAsB,UAAtB,EAAkC,EAAlC,CAAR,GAAgDL,KAAjE,CALqC,CAMrC;;AACA,MAAMO,gBAAgBD,WAClBF,OAAOE,SAASD,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,CAAP,CADkB,GAElBC,QAFJ;AAGA,SAAOC,aAAP;AACD;;AAEM,IAAMR,oBAAmB,SAAnBA,iBAAmB,CAACS,IAAD,EAAU;AACxC,MAAIA,QAAQ,CAAZ,EAAe;AACb,WAAO,KAAP;AACD,GAFD,MAEO,IAAIA,OAAO,IAAX,EAAiB;AACtB,WAAUN,KAAKC,KAAL,CAAWK,OAAO,EAAlB,IAAwB,EAAlC;AACD,GAFM,MAEA,IAAIA,OAAO,KAAX,EAAkB;AACvB,WAAU,CAACN,KAAKC,KAAL,CAAWK,OAAO,GAAlB,IAAyB,EAA1B,EAA8BC,OAA9B,CAAsC,CAAtC,CAAV;AACD;;AAED,SAAUP,KAAKC,KAAL,CAAWK,OAAO,IAAlB,CAAV;AACD,CAVM","file":"imports/core/utils/conversionFunctions.js.map","sourcesContent":["// Rounds the value, adds thousands markers every 3 digits (and removes non-digit characters)\nexport function toMoney(value) {\n  if (value === 0) {\n    return 0;\n  }\n  return String(Math.round(Number(Math.round(value))))\n    .replace(/\\D/g, '')\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n}\n\n// Replaces any nondigit character by an empty character, to prevent the use of non-digits\n// Only do this if the value actually exists\nexport function toNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value ? Number(String(value).replace(/\\D/g, '')) : value;\n}\n\n// Replaces any nondigit character by an empty character, to prevent the use of non-digits\n// Only do this if the value actually exists\nexport function toDecimalNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  // Remove unwanted characters, except digits, dots and commas\n  const newValue = value ? String(value).replace(/[^\\d.,]/g, '') : value;\n  // replace commas with dots\n  const commaReplaced = newValue\n    ? Number(newValue.replace(',', '.'))\n    : newValue;\n  return commaReplaced;\n}\n\nexport const toDistanceString = (dist) => {\n  if (dist <= 0) {\n    return '0 m';\n  } else if (dist < 1000) {\n    return `${Math.round(dist / 10) * 10} m`;\n  } else if (dist < 10000) {\n    return `${(Math.round(dist / 100) / 10).toFixed(1)} km`;\n  }\n\n  return `${Math.round(dist / 1000)} km`;\n};\n"]},"hash":"d3fa48e130f76ed2362f26d898257f771eb6b996"}

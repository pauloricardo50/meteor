{"metadata":{"usedHelpers":["createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"./lib/smartArguments.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SmartArgs"}]},{"source":"../lib/createSearchFilters","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createSearchFilters"}]}],"exports":{"exported":["Link"],"specifiers":[{"kind":"local","local":"Link","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"base"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n    \"default\": function () {\n        return Link;\n    }\n});\nvar SmartArgs = void 0;\nmodule.watch(require(\"./lib/smartArguments.js\"), {\n    \"default\": function (v) {\n        SmartArgs = v;\n    }\n}, 0);\nvar createSearchFilters = void 0;\nmodule.watch(require(\"../lib/createSearchFilters\"), {\n    \"default\": function (v) {\n        createSearchFilters = v;\n    }\n}, 1);\n\nvar Link = function () {\n    (0, _createClass3.default)(Link, [{\n        key: \"config\",\n        get: function () {\n            return this.linker.linkConfig;\n        }\n    }, {\n        key: \"isVirtual\",\n        get: function () {\n            return this.linker.isVirtual();\n        }\n    }]);\n\n    function Link(linker, object, collection) {\n        (0, _classCallCheck3.default)(this, Link);\n        this.linker = linker;\n        this.object = object;\n        this.linkedCollection = collection ? collection : linker.getLinkedCollection();\n\n        if (this.linker.isVirtual()) {\n            this.linkStorageField = this.config.relatedLinker.linkConfig.field;\n        } else {\n            this.linkStorageField = this.config.field;\n        }\n    } /**\n       * Gets the stored link information value\n       * @returns {*}\n       */\n\n    Link.prototype.value = function () {\n        function value() {\n            if (this.isVirtual) {\n                throw new Meteor.Error('You can only take the value from the main link.');\n            }\n\n            return this.object[this.linkStorageField];\n        }\n\n        return value;\n    }(); /**\n          * Finds linked data.\n          *\n          * @param filters\n          * @param options\n          * @returns {*}\n          * @param userId\n          */\n\n    Link.prototype.find = function () {\n        function find() {\n            var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            var userId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n            var linker = this.linker;\n            var linkedCollection = this.linkedCollection;\n            var $metaFilters = void 0;\n\n            if (filters.$meta) {\n                $metaFilters = filters.$meta;\n                delete filters.$meta;\n            }\n\n            var searchFilters = createSearchFilters(this.object, this.linkStorageField, linker.strategy, linker.isVirtual(), $metaFilters);\n\n            var appliedFilters = _.extend({}, filters, searchFilters); // see https://github.com/cult-of-coders/grapher/issues/134\n            // happens due to recursive importing of modules\n            // TODO: find another way to do this\n\n\n            if (linkedCollection.find) {\n                return linkedCollection.find(appliedFilters, options, userId);\n            } else {\n                return linkedCollection.default.find(appliedFilters, options, userId);\n            }\n        }\n\n        return find;\n    }(); /**\n          * @param filters\n          * @param options\n          * @param others\n          * @returns {*|{content}|any}\n          */\n\n    Link.prototype.fetch = function () {\n        function fetch(filters, options) {\n            for (var _len = arguments.length, others = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                others[_key - 2] = arguments[_key];\n            }\n\n            var result = this.find.apply(this, [filters, options].concat(others)).fetch();\n\n            if (this.linker.isOneResult()) {\n                return _.first(result);\n            }\n\n            return result;\n        }\n\n        return fetch;\n    }(); /**\n          * When we are dealing with multiple type relationships, $in would require an array. If the field value is null, it will fail\n          * We use clean to make it an empty array by default.\n          */\n\n    Link.prototype.clean = function () {\n        function clean() {}\n\n        return clean;\n    }(); /**\n          * Extracts a single id\n          */\n\n    Link.prototype.identifyId = function () {\n        function identifyId(what, saveToDatabase) {\n            return SmartArgs.getId(what, {\n                saveToDatabase: saveToDatabase,\n                collection: this.linkedCollection\n            });\n        }\n\n        return identifyId;\n    }(); /**\n          * Extracts the ids of object(s) or strings and returns an array.\n          */\n\n    Link.prototype.identifyIds = function () {\n        function identifyIds(what, saveToDatabase) {\n            return SmartArgs.getIds(what, {\n                saveToDatabase: saveToDatabase,\n                collection: this.linkedCollection\n            });\n        }\n\n        return identifyIds;\n    }(); /**\n          * Checks when linking data, if the ids are valid with the linked collection.\n          * @throws Meteor.Error\n          * @param ids\n          *\n          * @protected\n          */\n\n    Link.prototype._validateIds = function () {\n        function _validateIds(ids) {\n            if (!_.isArray(ids)) {\n                ids = [ids];\n            }\n\n            var validIds = this.linkedCollection.find({\n                _id: {\n                    $in: ids\n                }\n            }, {\n                fields: {\n                    _id: 1\n                }\n            }).fetch().map(function (doc) {\n                return doc._id;\n            });\n\n            if (validIds.length != ids.length) {\n                throw new Meteor.Error('not-found', \"You tried to create links with non-existing id(s) inside \\\"\" + this.linkedCollection._name + \"\\\": \" + _.difference(ids, validIds).join(', '));\n            }\n        }\n\n        return _validateIds;\n    }(); /**\n          * This is for allowing commands such as set/unset/add/remove/metadata from the virtual link.\n          *\n          * @param action\n          * @param what\n          * @param metadata\n          *\n          * @protected\n          */\n\n    Link.prototype._virtualAction = function () {\n        function _virtualAction(action, what, metadata) {\n            var _this = this;\n\n            var linker = this.linker.linkConfig.relatedLinker; // its an unset operation most likely.\n\n            if (what === undefined) {\n                var reversedLink = linker.createLink(this.fetch());\n                reversedLink.unset();\n                return;\n            }\n\n            if (!_.isArray(what)) {\n                what = [what];\n            }\n\n            what = _.map(what, function (element) {\n                if (!_.isObject(element)) {\n                    return linker.mainCollection.findOne(element);\n                } else {\n                    if (!element._id) {\n                        var elementId = linker.mainCollection.insert(element);\n\n                        _.extend(element, linker.mainCollection.findOne(elementId));\n                    }\n\n                    return element;\n                }\n            });\n            return _.map(what, function (element) {\n                var reversedLink = linker.createLink(element);\n\n                if (action == 'metadata') {\n                    if (linker.isSingle()) {\n                        return reversedLink.metadata(metadata);\n                    } else {\n                        return reversedLink.metadata(_this.object, metadata);\n                    }\n                } else if (action == 'add' || action == 'set') {\n                    if (linker.isSingle()) {\n                        reversedLink.set(_this.object, metadata);\n                    } else {\n                        reversedLink.add(_this.object, metadata);\n                    }\n                } else {\n                    if (linker.isSingle()) {\n                        reversedLink.unset();\n                    } else {\n                        reversedLink.remove(_this.object);\n                    }\n                }\n            });\n        }\n\n        return _virtualAction;\n    }();\n\n    return Link;\n}();","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/base.js"],"names":["module","export","Link","SmartArgs","watch","require","v","createSearchFilters","linker","linkConfig","isVirtual","object","collection","linkedCollection","getLinkedCollection","linkStorageField","config","relatedLinker","field","value","Meteor","Error","find","filters","options","userId","undefined","$metaFilters","$meta","searchFilters","strategy","appliedFilters","_","extend","default","fetch","others","result","isOneResult","first","clean","identifyId","what","saveToDatabase","getId","identifyIds","getIds","_validateIds","ids","isArray","validIds","_id","$in","fields","map","doc","length","_name","difference","join","_virtualAction","action","metadata","reversedLink","createLink","unset","isObject","element","mainCollection","findOne","elementId","insert","isSingle","set","add","remove"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js.map","sourcesContent":["import SmartArgs from './lib/smartArguments.js';\nimport createSearchFilters from '../lib/createSearchFilters';\n\nexport default class Link {\n    get config() { return this.linker.linkConfig; }\n\n    get isVirtual() { return this.linker.isVirtual() }\n\n    constructor(linker, object, collection) {\n        this.linker = linker;\n        this.object = object;\n        this.linkedCollection = (collection) ? collection : linker.getLinkedCollection();\n\n        if (this.linker.isVirtual()) {\n            this.linkStorageField = this.config.relatedLinker.linkConfig.field;\n        } else {\n            this.linkStorageField = this.config.field;\n        }\n    }\n\n    /**\n     * Gets the stored link information value\n     * @returns {*}\n     */\n    value() {\n        if (this.isVirtual) {\n            throw new Meteor.Error('You can only take the value from the main link.');\n        }\n\n        return this.object[this.linkStorageField];\n    }\n\n    /**\n     * Finds linked data.\n     *\n     * @param filters\n     * @param options\n     * @returns {*}\n     * @param userId\n     */\n    find(filters = {}, options = {}, userId = undefined) {\n        let linker = this.linker;\n        const linkedCollection = this.linkedCollection;\n\n        let $metaFilters;\n        if (filters.$meta) {\n            $metaFilters = filters.$meta;\n            delete filters.$meta;\n        }\n\n        const searchFilters = createSearchFilters(\n            this.object,\n            this.linkStorageField,\n            linker.strategy,\n            linker.isVirtual(),\n            $metaFilters\n        );\n\n        let appliedFilters = _.extend({}, filters, searchFilters);\n\n        // see https://github.com/cult-of-coders/grapher/issues/134\n        // happens due to recursive importing of modules\n        // TODO: find another way to do this\n        if (linkedCollection.find) {\n            return linkedCollection.find(appliedFilters, options, userId)\n        } else {\n            return linkedCollection.default.find(appliedFilters, options, userId);\n        }\n    }\n\n    /**\n     * @param filters\n     * @param options\n     * @param others\n     * @returns {*|{content}|any}\n     */\n    fetch(filters, options, ...others) {\n        let result = this.find(filters, options, ...others).fetch();\n\n        if (this.linker.isOneResult()) {\n            return _.first(result);\n        }\n\n        return result;\n    }\n\n    /**\n     * When we are dealing with multiple type relationships, $in would require an array. If the field value is null, it will fail\n     * We use clean to make it an empty array by default.\n     */\n    clean() {}\n\n    /**\n     * Extracts a single id\n     */\n    identifyId(what, saveToDatabase) {\n        return SmartArgs.getId(what, {\n            saveToDatabase,\n            collection: this.linkedCollection\n        });\n    }\n\n    /**\n     * Extracts the ids of object(s) or strings and returns an array.\n     */\n    identifyIds(what, saveToDatabase) {\n        return SmartArgs.getIds(what, {\n            saveToDatabase,\n            collection: this.linkedCollection\n        });\n    }\n\n    /**\n     * Checks when linking data, if the ids are valid with the linked collection.\n     * @throws Meteor.Error\n     * @param ids\n     *\n     * @protected\n     */\n    _validateIds(ids) {\n        if (!_.isArray(ids)) {\n            ids = [ids];\n        }\n\n        const validIds = this.linkedCollection.find({\n            _id: {$in: ids}\n        }, {fields: {_id: 1}}).fetch().map(doc => doc._id);\n\n        if (validIds.length != ids.length) {\n            throw new Meteor.Error('not-found', `You tried to create links with non-existing id(s) inside \"${this.linkedCollection._name}\": ${_.difference(ids, validIds).join(', ')}`)\n        }\n    }\n\n    /**\n     * This is for allowing commands such as set/unset/add/remove/metadata from the virtual link.\n     *\n     * @param action\n     * @param what\n     * @param metadata\n     *\n     * @protected\n     */\n    _virtualAction(action, what, metadata) {\n        const linker = this.linker.linkConfig.relatedLinker;\n\n        // its an unset operation most likely.\n        if (what === undefined) {\n            const reversedLink = linker.createLink(this.fetch());\n            reversedLink.unset();\n\n            return;\n        }\n\n        if (!_.isArray(what)) {\n            what = [what];\n        }\n\n        what = _.map(what, element => {\n            if (!_.isObject(element)) {\n                return linker.mainCollection.findOne(element);\n            } else {\n                if (!element._id) {\n                    const elementId = linker.mainCollection.insert(element);\n                    _.extend(element, linker.mainCollection.findOne(elementId));\n                }\n\n                return element;\n            }\n        });\n\n        return _.map(what, element => {\n            const reversedLink = linker.createLink(element);\n\n            if (action == 'metadata') {\n                if (linker.isSingle()) {\n                    return reversedLink.metadata(metadata);\n                } else {\n                    return reversedLink.metadata(this.object, metadata);\n                }\n            } else if (action == 'add' || action == 'set') {\n                if (linker.isSingle()) {\n                    reversedLink.set(this.object, metadata);\n                } else {\n                    reversedLink.add(this.object, metadata);\n                }\n            } else {\n                if (linker.isSingle()) {\n                    reversedLink.unset();\n                } else {\n                    reversedLink.remove(this.object);\n                }\n            }\n        });\n    }\n}\n"]},"hash":"181e3232f31413f8df9e89ade925a9ff8169b62c"}

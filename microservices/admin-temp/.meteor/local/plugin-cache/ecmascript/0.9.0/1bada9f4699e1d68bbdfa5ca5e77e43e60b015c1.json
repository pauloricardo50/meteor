{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"classnames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classnames"}]},{"source":"../utils/conversionFunctions","imported":["toMoney"],"specifiers":[{"kind":"named","imported":"toMoney","local":"toMoney"}]},{"source":"../config/constants","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"constants"}]},{"source":"./Translation","imported":["T","IntlNumber"],"specifiers":[{"kind":"named","imported":"T","local":"T"},{"kind":"named","imported":"IntlNumber","local":"IntlNumber"}]},{"source":"../utils/loanFunctions","imported":["getPropAndWork","getProjectValue","getTotalUsed","getLoanValue","getLenderCount","getBorrowRatio"],"specifiers":[{"kind":"named","imported":"getPropAndWork","local":"getPropAndWork"},{"kind":"named","imported":"getProjectValue","local":"getProjectValue"},{"kind":"named","imported":"getTotalUsed","local":"getTotalUsed"},{"kind":"named","imported":"getLoanValue","local":"getLoanValue"},{"kind":"named","imported":"getLenderCount","local":"getLenderCount"},{"kind":"named","imported":"getBorrowRatio","local":"getBorrowRatio"}]},{"source":"../utils/borrowerFunctions","imported":["getExpenses","getBorrowerIncome","getRealEstateFortune","getTotalFortune","getRealEstateDebt","getFortune","getBonusIncome","getOtherIncome","getBorrowerSalary","getRealEstateValue","getInsuranceFortune"],"specifiers":[{"kind":"named","imported":"getExpenses","local":"getExpenses"},{"kind":"named","imported":"getBorrowerIncome","local":"getBorrowerIncome"},{"kind":"named","imported":"getRealEstateFortune","local":"getRealEstateFortune"},{"kind":"named","imported":"getTotalFortune","local":"getTotalFortune"},{"kind":"named","imported":"getRealEstateDebt","local":"getRealEstateDebt"},{"kind":"named","imported":"getFortune","local":"getFortune"},{"kind":"named","imported":"getBonusIncome","local":"getBonusIncome"},{"kind":"named","imported":"getOtherIncome","local":"getOtherIncome"},{"kind":"named","imported":"getBorrowerSalary","local":"getBorrowerSalary"},{"kind":"named","imported":"getRealEstateValue","local":"getRealEstateValue"},{"kind":"named","imported":"getInsuranceFortune","local":"getInsuranceFortune"}]},{"source":"../utils/finance-math","imported":["getMonthlyPayment","getIncomeRatio"],"specifiers":[{"kind":"named","imported":"getMonthlyPayment","local":"getMonthlyPayment"},{"kind":"named","imported":"getIncomeRatio","local":"getIncomeRatio"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/Recap.jsx","filenameRelative":"imports/core/components/Recap.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/Recap.jsx.map","sourceFileName":"imports/core/components/Recap.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Recap"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function () {\n    function _default(v) {\n      PropTypes = v;\n    }\n\n    return _default;\n  }()\n}, 0);\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function () {\n    function _default(v) {\n      React = v;\n    }\n\n    return _default;\n  }()\n}, 1);\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function () {\n    function Meteor(v) {\n      _Meteor = v;\n    }\n\n    return Meteor;\n  }()\n}, 2);\nvar classnames = void 0;\nmodule.watch(require(\"classnames\"), {\n  \"default\": function () {\n    function _default(v) {\n      classnames = v;\n    }\n\n    return _default;\n  }()\n}, 3);\n\nvar _toMoney = void 0;\n\nmodule.watch(require(\"../utils/conversionFunctions\"), {\n  toMoney: function () {\n    function toMoney(v) {\n      _toMoney = v;\n    }\n\n    return toMoney;\n  }()\n}, 4);\nvar constants = void 0;\nmodule.watch(require(\"../config/constants\"), {\n  \"default\": function () {\n    function _default(v) {\n      constants = v;\n    }\n\n    return _default;\n  }()\n}, 5);\n\nvar _T = void 0,\n    _IntlNumber = void 0;\n\nmodule.watch(require(\"./Translation\"), {\n  T: function () {\n    function T(v) {\n      _T = v;\n    }\n\n    return T;\n  }(),\n  IntlNumber: function () {\n    function IntlNumber(v) {\n      _IntlNumber = v;\n    }\n\n    return IntlNumber;\n  }()\n}, 6);\n\nvar _getPropAndWork = void 0,\n    _getProjectValue = void 0,\n    _getTotalUsed = void 0,\n    _getLoanValue = void 0,\n    _getLenderCount = void 0,\n    _getBorrowRatio = void 0;\n\nmodule.watch(require(\"../utils/loanFunctions\"), {\n  getPropAndWork: function () {\n    function getPropAndWork(v) {\n      _getPropAndWork = v;\n    }\n\n    return getPropAndWork;\n  }(),\n  getProjectValue: function () {\n    function getProjectValue(v) {\n      _getProjectValue = v;\n    }\n\n    return getProjectValue;\n  }(),\n  getTotalUsed: function () {\n    function getTotalUsed(v) {\n      _getTotalUsed = v;\n    }\n\n    return getTotalUsed;\n  }(),\n  getLoanValue: function () {\n    function getLoanValue(v) {\n      _getLoanValue = v;\n    }\n\n    return getLoanValue;\n  }(),\n  getLenderCount: function () {\n    function getLenderCount(v) {\n      _getLenderCount = v;\n    }\n\n    return getLenderCount;\n  }(),\n  getBorrowRatio: function () {\n    function getBorrowRatio(v) {\n      _getBorrowRatio = v;\n    }\n\n    return getBorrowRatio;\n  }()\n}, 7);\n\nvar _getExpenses = void 0,\n    _getBorrowerIncome = void 0,\n    _getRealEstateFortune = void 0,\n    _getTotalFortune = void 0,\n    _getRealEstateDebt = void 0,\n    _getFortune = void 0,\n    _getBonusIncome = void 0,\n    _getOtherIncome = void 0,\n    _getBorrowerSalary = void 0,\n    _getRealEstateValue = void 0,\n    _getInsuranceFortune = void 0;\n\nmodule.watch(require(\"../utils/borrowerFunctions\"), {\n  getExpenses: function () {\n    function getExpenses(v) {\n      _getExpenses = v;\n    }\n\n    return getExpenses;\n  }(),\n  getBorrowerIncome: function () {\n    function getBorrowerIncome(v) {\n      _getBorrowerIncome = v;\n    }\n\n    return getBorrowerIncome;\n  }(),\n  getRealEstateFortune: function () {\n    function getRealEstateFortune(v) {\n      _getRealEstateFortune = v;\n    }\n\n    return getRealEstateFortune;\n  }(),\n  getTotalFortune: function () {\n    function getTotalFortune(v) {\n      _getTotalFortune = v;\n    }\n\n    return getTotalFortune;\n  }(),\n  getRealEstateDebt: function () {\n    function getRealEstateDebt(v) {\n      _getRealEstateDebt = v;\n    }\n\n    return getRealEstateDebt;\n  }(),\n  getFortune: function () {\n    function getFortune(v) {\n      _getFortune = v;\n    }\n\n    return getFortune;\n  }(),\n  getBonusIncome: function () {\n    function getBonusIncome(v) {\n      _getBonusIncome = v;\n    }\n\n    return getBonusIncome;\n  }(),\n  getOtherIncome: function () {\n    function getOtherIncome(v) {\n      _getOtherIncome = v;\n    }\n\n    return getOtherIncome;\n  }(),\n  getBorrowerSalary: function () {\n    function getBorrowerSalary(v) {\n      _getBorrowerSalary = v;\n    }\n\n    return getBorrowerSalary;\n  }(),\n  getRealEstateValue: function () {\n    function getRealEstateValue(v) {\n      _getRealEstateValue = v;\n    }\n\n    return getRealEstateValue;\n  }(),\n  getInsuranceFortune: function () {\n    function getInsuranceFortune(v) {\n      _getInsuranceFortune = v;\n    }\n\n    return getInsuranceFortune;\n  }()\n}, 8);\n\nvar _getMonthlyPayment = void 0,\n    _getIncomeRatio = void 0;\n\nmodule.watch(require(\"../utils/finance-math\"), {\n  getMonthlyPayment: function () {\n    function getMonthlyPayment(v) {\n      _getMonthlyPayment = v;\n    }\n\n    return getMonthlyPayment;\n  }(),\n  getIncomeRatio: function () {\n    function getIncomeRatio(v) {\n      _getIncomeRatio = v;\n    }\n\n    return getIncomeRatio;\n  }()\n}, 9);\n\nvar getDashboardArray = function () {\n  function getDashboardArray(props) {\n    var r = props.loan;\n    var b = props.borrowers;\n    var p = props.property;\n\n    var incomeRatio = _getIncomeRatio(props);\n\n    var borrowRatio = _getBorrowRatio(props);\n\n    var loanValue = _getLoanValue(props);\n\n    var project = _getProjectValue(props);\n\n    var totalUsed = _getTotalUsed(props);\n\n    var propAndWork = _getPropAndWork(props);\n\n    var monthly = _getMonthlyPayment(props).total;\n\n    var expenses = _getExpenses(props);\n\n    var bonusIncome = _getBonusIncome(props);\n\n    var otherIncome = _getOtherIncome(props);\n\n    var realEstateFortune = _getRealEstateFortune(props);\n\n    var realEstateValue = _getRealEstateValue(props);\n\n    var realEstateDebt = _getRealEstateDebt(props);\n\n    var fortune = _getFortune(props);\n\n    var insuranceFortune = _getInsuranceFortune(props);\n\n    var totalFortune = _getTotalFortune(props);\n\n    var lenderCount = _getLenderCount(props);\n\n    return [{\n      title: true,\n      label: 'Recap.title',\n      props: {\n        style: {\n          marginTop: 0\n        }\n      }\n    }, {\n      label: 'Recap.purchasePrice',\n      value: _toMoney(Math.round(p.value))\n    }, {\n      label: 'Recap.propertyWork',\n      value: _toMoney(Math.round(r.general.propertyWork)),\n      hide: !r.general.propertyWork,\n      spacing: true\n    }, {\n      label: 'Recap.propAndWork',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(Math.round(propAndWork))\n      ),\n      hide: !r.general.propertyWork\n    }, {\n      label: 'general.notaryFees',\n      value: _toMoney(Math.round(p.value * constants.notaryFees))\n    }, {\n      label: 'general.insuranceFees',\n      value: _toMoney(Math.round(r.general.insuranceFortuneUsed * constants.lppFees)),\n      hide: !r.general.insuranceFortuneUsed\n    }, {\n      label: 'Recap.totalCost',\n      labelStyle: {\n        fontWeight: 400\n      },\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(project)\n      ),\n      spacingTop: true,\n      spacing: true,\n      bold: true\n    }, {\n      title: true,\n      label: 'Recap.financing'\n    }, {\n      label: 'general.ownFunds',\n      value: _toMoney(totalUsed),\n      hide: r.general.insuranceFortuneUsed\n    }, {\n      label: 'Recap.ownFundsCash',\n      value: _toMoney(r.general.fortuneUsed),\n      hide: !r.general.insuranceFortuneUsed\n    }, {\n      label: 'Recap.ownFundsInsurance',\n      value: _toMoney(r.general.insuranceFortuneUsed),\n      hide: !r.general.insuranceFortuneUsed\n    }, {\n      label: 'Recap.ownFundsTotal',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(totalUsed)\n      ),\n      spacingTop: true,\n      hide: !r.general.insuranceFortuneUsed,\n      bold: true\n    }, {\n      label: 'general.mortgageLoan',\n      value: _toMoney(loanValue)\n    }, {\n      label: 'Recap.totalFinancing',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(project)\n      ),\n      spacingTop: true,\n      spacing: true,\n      bold: true\n    }, {\n      label: 'Recap.monthlyCost',\n      value: React.createElement(\n        \"span\",\n        null,\n        _toMoney(monthly),\n        \" \",\n        React.createElement(\n          \"small\",\n          null,\n          \"/mois\"\n        )\n      )\n    }, {\n      title: true,\n      label: 'Recap.finmaRules'\n    }, {\n      label: r.general.propertyWork ? 'Recap.borrowRatio2' : 'Recap.borrowRatio1',\n      value: React.createElement(\n        \"span\",\n        null,\n        React.createElement(_IntlNumber, {\n          value: borrowRatio,\n          format: \"percentage\"\n        }),\n        ' ',\n        React.createElement(\"span\", {\n          className: borrowRatio <= constants.maxLoan(r.general.usageType) + 0.001 // add 0.1% to avoid rounding errors\n          ? 'fa fa-check success' : 'fa fa-times error'\n        })\n      )\n    }, {\n      label: 'Recap.incomeRatio',\n      value: React.createElement(\n        \"span\",\n        null,\n        React.createElement(_IntlNumber, {\n          value: incomeRatio,\n          format: \"percentage\"\n        }),\n        ' ',\n        React.createElement(\"span\", {\n          className: incomeRatio <= 1 / 3 ? 'fa fa-check success' : incomeRatio <= 0.38 ? 'fa fa-exclamation warning' : 'fa fa-times error'\n        })\n      )\n    }, {\n      title: true,\n      label: 'Recap.fortune',\n      hide: !(realEstateFortune || insuranceFortune)\n    }, {\n      label: 'Recap.bankFortune',\n      value: _toMoney(fortune)\n    }, {\n      label: 'Recap.insuranceFortune',\n      value: _toMoney(insuranceFortune),\n      hide: !insuranceFortune\n    }, {\n      label: 'Recap.availableFunds',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(totalFortune)\n      ),\n      hide: !realEstateFortune,\n      spacingTop: true,\n      bold: true\n    }, {\n      label: 'Recap.realEstate',\n      value: _toMoney(realEstateValue),\n      hide: !realEstateFortune,\n      spacingTop: true\n    }, {\n      label: 'Recap.realEstateLoans',\n      value: \"- \" + _toMoney(realEstateDebt),\n      hide: !realEstateFortune\n    }, {\n      label: 'Recap.netFortune',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(totalFortune + realEstateFortune)\n      ),\n      spacingTop: true,\n      hide: !realEstateFortune\n    }, {\n      title: true,\n      label: 'general.income'\n    }, {\n      label: 'general.salary',\n      value: _toMoney(_getBorrowerSalary(props))\n    }, {\n      label: 'Recap.consideredBonus',\n      value: _toMoney(bonusIncome),\n      hide: !bonusIncome\n    }, {\n      label: 'Recap.otherIncome',\n      value: _toMoney(otherIncome),\n      hide: !otherIncome\n    }, {\n      label: 'Recap.expenses',\n      value: \"- \" + _toMoney(expenses),\n      hide: !expenses\n    }, {\n      label: 'Recap.consideredIncome',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(_getBorrowerIncome(props))\n      ),\n      spacingTop: true,\n      bold: true\n    }, {\n      title: true,\n      label: 'general.lenders'\n    }, {\n      label: 'Recap.interestedLenders',\n      value: lenderCount,\n      spacing: true\n    }];\n  }\n\n  return getDashboardArray;\n}();\n\nvar getSmallDashboardArray = function () {\n  function getSmallDashboardArray(props) {\n    var r = props.loan;\n    var b = props.borrowers;\n    var p = props.property;\n\n    var loanValue = _getLoanValue(props);\n\n    var monthly = _getMonthlyPayment(props).total;\n\n    var totalUsed = _getTotalUsed(props);\n\n    var propAndWork = _getPropAndWork(props);\n\n    var project = _getProjectValue(props);\n\n    return [{\n      title: true,\n      label: 'Recap.title',\n      props: {\n        style: {\n          marginTop: 0\n        }\n      }\n    }, {\n      label: 'Recap.purchasePrice',\n      value: _toMoney(Math.round(p.value))\n    }, {\n      label: 'Recap.propertyWork',\n      value: _toMoney(Math.round(r.general.propertyWork)),\n      hide: !r.general.propertyWork\n    }, {\n      label: 'general.notaryFees',\n      value: _toMoney(Math.round(p.value * constants.notaryFees))\n    }, {\n      label: 'general.insuranceFees',\n      value: _toMoney(Math.round(r.general.insuranceFortuneUsed * constants.lppFees)),\n      hide: !r.general.insuranceFortuneUsed\n    }, {\n      label: 'Recap.totalCost',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(project)\n      ),\n      spacingTop: true,\n      spacing: true,\n      bold: true\n    }, {\n      title: true,\n      label: 'Recap.financing'\n    }, {\n      label: 'general.mortgageLoan',\n      value: _toMoney(loanValue)\n    }, {\n      label: 'Recap.ownFundsCash',\n      value: _toMoney(r.general.fortuneUsed),\n      hide: !r.general.insuranceFortuneUsed\n    }, {\n      label: 'Recap.ownFundsInsurance',\n      value: _toMoney(r.general.insuranceFortuneUsed),\n      hide: !r.general.insuranceFortuneUsed\n    }, {\n      label: 'Recap.totalFinancing',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(project)\n      ),\n      spacingTop: true,\n      spacing: true,\n      bold: true\n    }, {\n      label: 'Recap.monthlyCost',\n      value: React.createElement(\n        \"span\",\n        null,\n        _toMoney(monthly),\n        \" \",\n        React.createElement(\n          \"small\",\n          null,\n          \"/mois\"\n        )\n      )\n    }];\n  }\n\n  return getSmallDashboardArray;\n}();\n\nvar getStart2Array = function () {\n  function getStart2Array(props) {\n    var p = props;\n    return [{\n      title: true,\n      label: 'Recap.title',\n      props: {\n        style: {\n          marginTop: 0\n        }\n      }\n    }, {\n      label: p.type === 'test' ? 'Recap.purchasePrice' : 'Recap.maxPurchasePrice',\n      value: _toMoney(Math.round(p.property))\n    }, {\n      label: 'Recap.propertyWork',\n      value: _toMoney(Math.round(p.propertyWork)),\n      hide: !p.propertyWork,\n      spacing: true\n    }, {\n      label: 'Recap.propAndWork',\n      value: _toMoney(Math.round(p.propAndWork)),\n      hide: !p.propertyWork\n    }, {\n      label: 'general.notaryFees',\n      value: _toMoney(Math.round(p.property * constants.notaryFees))\n    }, {\n      label: 'general.insuranceFees',\n      value: _toMoney(Math.round(p.lppFees)),\n      hide: !p.insuranceFortuneUsed\n    }, {\n      label: 'Recap.totalCost',\n      labelStyle: {\n        fontWeight: 400\n      },\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"bold sum\"\n        },\n        _toMoney(Math.round(p.property * (1 + constants.notaryFees) + p.propertyWork + p.lppFees))\n      ),\n      spacingTop: true,\n      spacing: p.fortuneUsed\n    }, {\n      label: 'general.ownFunds',\n      value: _toMoney(Math.round(p.fortuneUsed)),\n      hide: !p.fortuneUsed || p.insuranceFortuneUsed\n    }, {\n      label: 'Recap.ownFundsCash',\n      value: _toMoney(p.fortuneUsed),\n      hide: !p.fortuneUsed || !p.insuranceFortuneUsed\n    }, {\n      label: 'Recap.ownFundsInsurance',\n      value: _toMoney(p.insuranceFortuneUsed),\n      hide: !p.fortuneUsed || !p.insuranceFortuneUsed\n    }, {\n      label: 'Recap.ownFundsTotal',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(Math.round(p.fortuneUsed + p.insuranceFortuneUsed))\n      ),\n      spacingTop: true,\n      hide: !p.fortuneUsed || !p.insuranceFortuneUsed,\n      bold: true\n    }, {\n      label: 'general.mortgageLoan',\n      value: _toMoney(Math.round(p.loanWanted)),\n      hide: !p.loanWanted,\n      spacing: !p.loanWanted\n    }, {\n      label: 'Recap.monthlyCost',\n      value: React.createElement(\n        \"span\",\n        null,\n        _toMoney(Math.round(p.monthlyReal)),\n        \" \",\n        React.createElement(\n          \"small\",\n          null,\n          \"/mois\"\n        )\n      ),\n      hide: !p.fortuneUsed\n    }, {\n      title: true,\n      label: 'Recap.finmaRules',\n      hide: !p.fortuneUsed\n    }, {\n      label: p.propertyWork ? 'Recap.borrowRatio2' : 'Recap.borrowRatio1',\n      value: React.createElement(\n        \"span\",\n        null,\n        React.createElement(_IntlNumber, {\n          value: p.borrow,\n          format: \"percentage\"\n        }),\n        ' ',\n        React.createElement(\"span\", {\n          className: p.borrow <= constants.maxLoan(p.usageType) + 0.001 // add 0.1% to avoid rounding errors\n          ? 'fa fa-check success' : 'fa fa-times error'\n        })\n      ),\n      hide: !p.fortuneUsed\n    }, {\n      label: 'Recap.incomeRatio',\n      value: React.createElement(\n        \"span\",\n        null,\n        React.createElement(_IntlNumber, {\n          value: p.ratio,\n          format: \"percentage\"\n        }),\n        ' ',\n        React.createElement(\"span\", {\n          className: p.ratio <= 1 / 3 ? 'fa fa-check success' : p.ratio <= 0.38 ? 'fa fa-exclamation warning' : 'fa fa-times error'\n        })\n      ),\n      hide: !p.fortuneUsed\n    }, {\n      title: true,\n      label: 'Recap.fortune',\n      hide: !(p.fortune || p.realEstate || p.insuranceFortune)\n    }, {\n      label: 'Recap.bankFortune',\n      value: _toMoney(Math.round(p.fortune)),\n      hide: !p.fortune\n    }, {\n      label: 'Recap.insuranceFortune',\n      value: _toMoney(Math.round(p.insuranceFortuneDisplayed)),\n      hide: !p.insuranceFortuneDisplayed\n    }, {\n      label: 'Recap.availableFunds',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(Math.round(p.fortune + p.insuranceFortuneDisplayed))\n      ),\n      hide: !p.insuranceFortuneDisplayed,\n      spacingTop: true,\n      bold: true\n    }, {\n      label: 'Recap.realEstate',\n      value: _toMoney(Math.round(p.realEstateValue)),\n      hide: !p.realEstate,\n      spacingTop: true\n    }, {\n      label: 'Recap.realEstateLoans',\n      value: \"- \" + _toMoney(Math.round(p.realEstateDebt)),\n      hide: !p.realEstate\n    }, {\n      label: 'Recap.netFortune',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(Math.round(p.fortune + p.insuranceFortuneDisplayed + p.realEstate))\n      ),\n      spacingTop: true,\n      hide: !p.realEstate,\n      bold: true\n    }, {\n      title: true,\n      label: 'general.income',\n      hide: !(p.salary || p.bonus || p.otherIncome || p.expenses || p.propertyRent)\n    }, {\n      label: 'Recap.receivedRent',\n      value: _toMoney(Math.round(p.propertyRent * 12)),\n      hide: p.usageType !== 'investment'\n    }, {\n      label: 'general.salary',\n      value: _toMoney(Math.round(p.salary)),\n      hide: !p.salary\n    }, {\n      label: 'Recap.consideredBonus',\n      value: _toMoney(Math.round(p.bonus)),\n      hide: !p.bonus\n    }, {\n      label: 'Recap.otherIncome',\n      value: _toMoney(Math.round(p.otherIncome)),\n      hide: !p.otherIncome\n    }, {\n      label: 'Recap.expenses',\n      value: \"- \" + _toMoney(Math.round(p.expenses)),\n      hide: !p.expenses\n    }, {\n      label: 'Recap.consideredIncome',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(Math.round(p.income - p.expenses))\n      ),\n      hide: !(p.salary || p.bonus || p.otherIncome || p.expenses),\n      spacingTop: true,\n      bold: true\n    }, {\n      title: true,\n      label: 'e-Potek'\n    }, {\n      label: 'Recap.interestedLenders',\n      value: p.lenderCount,\n      spacing: true\n    }];\n  }\n\n  return getStart2Array;\n}();\n\nvar getBorrowerArray = function () {\n  function getBorrowerArray(props) {\n    var b = [props.borrower];\n\n    var expenses = _getExpenses({\n      borrowers: b\n    });\n\n    var bonusIncome = _getBonusIncome({\n      borrowers: b\n    });\n\n    var otherIncome = _getOtherIncome({\n      borrowers: b\n    });\n\n    var realEstateFortune = _getRealEstateFortune({\n      borrowers: b\n    });\n\n    var realEstateValue = _getRealEstateValue({\n      borrowers: b\n    });\n\n    var realEstateDebt = _getRealEstateDebt({\n      borrowers: b\n    });\n\n    var fortune = _getFortune({\n      borrowers: b\n    });\n\n    var insuranceFortune = _getInsuranceFortune({\n      borrowers: b\n    });\n\n    var totalFortune = _getTotalFortune({\n      borrowers: b\n    });\n\n    var salary = _getBorrowerSalary({\n      borrowers: b\n    });\n\n    var income = _getBorrowerIncome({\n      borrowers: b\n    });\n\n    return [{\n      title: true,\n      label: 'Recap.fortune',\n      hide: !(realEstateFortune && insuranceFortune)\n    }, {\n      label: 'Recap.bankFortune',\n      value: _toMoney(fortune)\n    }, {\n      label: 'Recap.insuranceFortune',\n      value: _toMoney(insuranceFortune),\n      hide: !insuranceFortune\n    }, {\n      label: 'Recap.availableFunds',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(totalFortune)\n      ),\n      hide: !realEstateFortune,\n      spacingTop: true,\n      bold: true\n    }, {\n      label: 'Recap.realEstate',\n      value: _toMoney(realEstateValue),\n      hide: !realEstateFortune,\n      spacingTop: true\n    }, {\n      label: 'Recap.realEstateLoans',\n      value: \"- \" + _toMoney(realEstateDebt),\n      hide: !realEstateFortune\n    }, {\n      label: 'Recap.netFortune',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(totalFortune + realEstateFortune)\n      ),\n      spacingTop: true,\n      hide: !realEstateFortune\n    }, {\n      title: true,\n      label: 'general.income'\n    }, {\n      label: 'general.salary',\n      value: _toMoney(salary)\n    }, {\n      label: 'Recap.consideredBonus',\n      value: _toMoney(bonusIncome),\n      hide: !bonusIncome\n    }, {\n      label: 'Recap.otherIncome',\n      value: _toMoney(otherIncome),\n      hide: !otherIncome\n    }, {\n      label: 'Recap.expenses',\n      value: \"- \" + _toMoney(expenses),\n      hide: !expenses\n    }, {\n      label: 'Recap.consideredIncome',\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(income)\n      ),\n      spacingTop: true,\n      bold: true\n    }];\n  }\n\n  return getBorrowerArray;\n}();\n\nvar getStructureArray = function () {\n  function getStructureArray(props) {\n    var r = props.loan;\n    var b = props.borrowers;\n    var p = props.property;\n\n    var project = _getProjectValue(props);\n\n    var loanValue = _getLoanValue(props);\n\n    var monthly = _getMonthlyPayment(props).total;\n\n    var totalUsed = _getTotalUsed(props);\n\n    var propAndWork = _getPropAndWork(props);\n\n    var lenderCount = _getLenderCount(props);\n\n    var incomeRatio = _getIncomeRatio(props);\n\n    var borrowRatio = _getBorrowRatio(props);\n\n    return [{\n      title: true,\n      label: 'Recap.title',\n      props: {\n        style: {\n          marginTop: 0\n        }\n      }\n    }, {\n      label: 'Recap.propAndWork',\n      value: _toMoney(Math.round(propAndWork)),\n      hide: !r.general.propertyWork\n    }, {\n      label: 'general.notaryFees',\n      value: _toMoney(Math.round(p.value * constants.notaryFees))\n    }, {\n      label: 'general.insuranceFees',\n      value: _toMoney(Math.round(r.general.insuranceFortuneUsed * constants.lppFees)),\n      hide: !r.general.insuranceFortuneUsed\n    }, {\n      label: 'Recap.totalCost',\n      labelStyle: {\n        fontWeight: 400\n      },\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"sum\"\n        },\n        _toMoney(project)\n      ),\n      spacingTop: true,\n      spacing: true,\n      bold: true\n    }, {\n      label: 'general.mortgageLoan',\n      value: _toMoney(loanValue)\n    }, {\n      label: 'Recap.ownFundsTotal',\n      value: _toMoney(totalUsed),\n      spacing: true\n    }, {\n      label: 'Recap.monthlyCost',\n      value: React.createElement(\n        \"span\",\n        null,\n        _toMoney(monthly),\n        \" \",\n        React.createElement(\n          \"small\",\n          null,\n          \"/mois\"\n        )\n      )\n    }, {\n      title: true,\n      label: 'Recap.finmaRules'\n    }, {\n      label: r.general.propertyWork ? 'Recap.borrowRatio2' : 'Recap.borrowRatio1',\n      value: React.createElement(\n        \"span\",\n        null,\n        React.createElement(_IntlNumber, {\n          value: borrowRatio,\n          format: \"percentage\"\n        }),\n        ' ',\n        React.createElement(\"span\", {\n          className: borrowRatio <= constants.maxLoan(r.general.usageType) + 0.001 // add 0.1% to avoid rounding errors\n          ? 'fa fa-check success' : 'fa fa-times error'\n        })\n      )\n    }, {\n      label: 'Recap.incomeRatio',\n      value: React.createElement(\n        \"span\",\n        null,\n        React.createElement(_IntlNumber, {\n          value: incomeRatio,\n          format: \"percentage\"\n        }),\n        ' ',\n        React.createElement(\"span\", {\n          className: incomeRatio <= 1 / 3 ? 'fa fa-check success' : incomeRatio <= 0.38 ? 'fa fa-exclamation warning' : 'fa fa-times error'\n        })\n      ),\n      spacing: true\n    }, {\n      label: 'Recap.interestedLenders',\n      value: lenderCount,\n      spacing: true\n    }];\n  }\n\n  return getStructureArray;\n}();\n\nvar arraySwitch = function () {\n  function arraySwitch(props) {\n    switch (props.arrayName) {\n      case 'start1':\n        return null;\n\n      case 'start2':\n        return getStart2Array(props);\n\n      case 'dashboard':\n        return getDashboardArray(props);\n\n      case 'dashboard-small':\n        return getSmallDashboardArray(props);\n\n      case 'borrower':\n        return getBorrowerArray(props);\n\n      case 'structure':\n        return getStructureArray(props);\n\n      default:\n        throw new _Meteor.Error('Not a valid recap array');\n    }\n  }\n\n  return arraySwitch;\n}();\n\nvar Recap = function () {\n  function Recap(props) {\n    var array = props.array || arraySwitch(props);\n    return React.createElement(\n      \"article\",\n      {\n        className: \"validator\"\n      },\n      React.createElement(\n        \"div\",\n        {\n          className: \"result animated fadeIn\"\n        },\n        array.map(function (item) {\n          if (item.hide) {\n            return null;\n          } else if (item.title) {\n            return React.createElement(\n              \"label\",\n              (0, _extends3.default)({\n                className: \"text-center\"\n              }, item.props, {\n                key: item.label,\n                style: item.labelStyle\n              }),\n              React.createElement(_T, {\n                id: item.label\n              })\n            );\n          }\n\n          return React.createElement(\n            \"div\",\n            {\n              className: classnames({\n                'fixed-size': true,\n                'no-scale': props.noScale,\n                bold: item.bold\n              }),\n              style: {\n                marginBottom: item.spacing && 16,\n                marginTop: item.spacingTop && 16\n              },\n              key: item.label\n            },\n            React.createElement(\n              \"h4\",\n              {\n                className: \"secondary\"\n              },\n              React.createElement(_T, {\n                id: item.label,\n                tooltipPlacement: \"bottom\"\n              })\n            ),\n            React.createElement(\n              \"h3\",\n              item.props,\n              item.value\n            )\n          );\n        })\n      )\n    );\n  }\n\n  return Recap;\n}();\n\nRecap.propTypes = {\n  loan: PropTypes.objectOf(PropTypes.any),\n  borrowers: PropTypes.arrayOf(PropTypes.object),\n  borrower: PropTypes.objectOf(PropTypes.any),\n  array: PropTypes.arrayOf(PropTypes.object),\n  noScale: PropTypes.bool\n};\nRecap.defaultProps = {\n  loan: {},\n  borrowers: [{}],\n  borrower: {},\n  array: undefined,\n  noScale: false\n};\nmodule.exportDefault(Recap);","map":{"version":3,"sources":["imports/core/components/Recap.jsx"],"names":["PropTypes","module","watch","require","v","React","Meteor","classnames","toMoney","constants","T","IntlNumber","getPropAndWork","getProjectValue","getTotalUsed","getLoanValue","getLenderCount","getBorrowRatio","getExpenses","getBorrowerIncome","getRealEstateFortune","getTotalFortune","getRealEstateDebt","getFortune","getBonusIncome","getOtherIncome","getBorrowerSalary","getRealEstateValue","getInsuranceFortune","getMonthlyPayment","getIncomeRatio","getDashboardArray","props","r","loan","b","borrowers","p","property","incomeRatio","borrowRatio","loanValue","project","totalUsed","propAndWork","monthly","total","expenses","bonusIncome","otherIncome","realEstateFortune","realEstateValue","realEstateDebt","fortune","insuranceFortune","totalFortune","lenderCount","title","label","style","marginTop","value","Math","round","general","propertyWork","hide","spacing","notaryFees","insuranceFortuneUsed","lppFees","labelStyle","fontWeight","spacingTop","bold","fortuneUsed","maxLoan","usageType","getSmallDashboardArray","getStart2Array","type","loanWanted","monthlyReal","borrow","ratio","realEstate","insuranceFortuneDisplayed","salary","bonus","propertyRent","income","getBorrowerArray","borrower","getStructureArray","arraySwitch","arrayName","Error","Recap","array","map","item","noScale","marginBottom","propTypes","objectOf","any","arrayOf","object","bool","defaultProps","undefined","exportDefault"],"mappings":"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","file":"imports/core/components/Recap.jsx.map","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Meteor } from 'meteor/meteor';\nimport classnames from 'classnames';\n\nimport { toMoney } from 'core/utils/conversionFunctions';\nimport constants from 'core/config/constants';\nimport { T, IntlNumber } from 'core/components/Translation';\n\nimport {\n  getPropAndWork,\n  getProjectValue,\n  getTotalUsed,\n  getLoanValue,\n  getLenderCount,\n  getBorrowRatio,\n} from 'core/utils/loanFunctions';\n\nimport {\n  getExpenses,\n  getBorrowerIncome,\n  getRealEstateFortune,\n  getTotalFortune,\n  getRealEstateDebt,\n  getFortune,\n  getBonusIncome,\n  getOtherIncome,\n  getBorrowerSalary,\n  getRealEstateValue,\n  getInsuranceFortune,\n} from 'core/utils/borrowerFunctions';\n\nimport { getMonthlyPayment, getIncomeRatio } from 'core/utils/finance-math';\n\nconst getDashboardArray = (props) => {\n  const r = props.loan;\n  const b = props.borrowers;\n  const p = props.property;\n\n  const incomeRatio = getIncomeRatio(props);\n  const borrowRatio = getBorrowRatio(props);\n  const loanValue = getLoanValue(props);\n  const project = getProjectValue(props);\n  const totalUsed = getTotalUsed(props);\n  const propAndWork = getPropAndWork(props);\n  const monthly = getMonthlyPayment(props).total;\n  const expenses = getExpenses(props);\n  const bonusIncome = getBonusIncome(props);\n  const otherIncome = getOtherIncome(props);\n  const realEstateFortune = getRealEstateFortune(props);\n  const realEstateValue = getRealEstateValue(props);\n  const realEstateDebt = getRealEstateDebt(props);\n\n  const fortune = getFortune(props);\n  const insuranceFortune = getInsuranceFortune(props);\n  const totalFortune = getTotalFortune(props);\n  const lenderCount = getLenderCount(props);\n\n  return [\n    {\n      title: true,\n      label: 'Recap.title',\n      props: {\n        style: {\n          marginTop: 0,\n        },\n      },\n    },\n    {\n      label: 'Recap.purchasePrice',\n      value: toMoney(Math.round(p.value)),\n    },\n    {\n      label: 'Recap.propertyWork',\n      value: toMoney(Math.round(r.general.propertyWork)),\n      hide: !r.general.propertyWork,\n      spacing: true,\n    },\n    {\n      label: 'Recap.propAndWork',\n      value: <span className=\"sum\">{toMoney(Math.round(propAndWork))}</span>,\n      hide: !r.general.propertyWork,\n    },\n    {\n      label: 'general.notaryFees',\n      value: toMoney(Math.round(p.value * constants.notaryFees)),\n    },\n    {\n      label: 'general.insuranceFees',\n      value: toMoney(Math.round(r.general.insuranceFortuneUsed * constants.lppFees)),\n      hide: !r.general.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.totalCost',\n      labelStyle: {\n        fontWeight: 400,\n      },\n      value: <span className=\"sum\">{toMoney(project)}</span>,\n      spacingTop: true,\n      spacing: true,\n      bold: true,\n    },\n    {\n      title: true,\n      label: 'Recap.financing',\n    },\n    {\n      label: 'general.ownFunds',\n      value: toMoney(totalUsed),\n      hide: r.general.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.ownFundsCash',\n      value: toMoney(r.general.fortuneUsed),\n      hide: !r.general.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.ownFundsInsurance',\n      value: toMoney(r.general.insuranceFortuneUsed),\n      hide: !r.general.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.ownFundsTotal',\n      value: <span className=\"sum\">{toMoney(totalUsed)}</span>,\n      spacingTop: true,\n      hide: !r.general.insuranceFortuneUsed,\n      bold: true,\n    },\n    {\n      label: 'general.mortgageLoan',\n      value: toMoney(loanValue),\n    },\n    {\n      label: 'Recap.totalFinancing',\n      value: <span className=\"sum\">{toMoney(project)}</span>,\n      spacingTop: true,\n      spacing: true,\n      bold: true,\n    },\n    {\n      label: 'Recap.monthlyCost',\n      value: (\n        <span>\n          {toMoney(monthly)} <small>/mois</small>\n        </span>\n      ),\n    },\n    {\n      title: true,\n      label: 'Recap.finmaRules',\n    },\n    {\n      label: r.general.propertyWork\n        ? 'Recap.borrowRatio2'\n        : 'Recap.borrowRatio1',\n      value: (\n        <span>\n          <IntlNumber value={borrowRatio} format=\"percentage\" />{' '}\n          <span\n            className={\n              borrowRatio <= constants.maxLoan(r.general.usageType) + 0.001 // add 0.1% to avoid rounding errors\n                ? 'fa fa-check success'\n                : 'fa fa-times error'\n            }\n          />\n        </span>\n      ),\n    },\n    {\n      label: 'Recap.incomeRatio',\n      value: (\n        <span>\n          <IntlNumber value={incomeRatio} format=\"percentage\" />{' '}\n          <span\n            className={\n              incomeRatio <= 1 / 3\n                ? 'fa fa-check success'\n                : incomeRatio <= 0.38\n                  ? 'fa fa-exclamation warning'\n                  : 'fa fa-times error'\n            }\n          />\n        </span>\n      ),\n    },\n    {\n      title: true,\n      label: 'Recap.fortune',\n      hide: !(realEstateFortune || insuranceFortune),\n    },\n    {\n      label: 'Recap.bankFortune',\n      value: toMoney(fortune),\n    },\n    {\n      label: 'Recap.insuranceFortune',\n      value: toMoney(insuranceFortune),\n      hide: !insuranceFortune,\n    },\n    {\n      label: 'Recap.availableFunds',\n      value: <span className=\"sum\">{toMoney(totalFortune)}</span>,\n      hide: !realEstateFortune,\n      spacingTop: true,\n      bold: true,\n    },\n    {\n      label: 'Recap.realEstate',\n      value: toMoney(realEstateValue),\n      hide: !realEstateFortune,\n      spacingTop: true,\n    },\n    {\n      label: 'Recap.realEstateLoans',\n      value: `- ${toMoney(realEstateDebt)}`,\n      hide: !realEstateFortune,\n    },\n    {\n      label: 'Recap.netFortune',\n      value: (\n        <span className=\"sum\">{toMoney(totalFortune + realEstateFortune)}</span>\n      ),\n      spacingTop: true,\n      hide: !realEstateFortune,\n    },\n    {\n      title: true,\n      label: 'general.income',\n    },\n    {\n      label: 'general.salary',\n      value: toMoney(getBorrowerSalary(props)),\n    },\n    {\n      label: 'Recap.consideredBonus',\n      value: toMoney(bonusIncome),\n      hide: !bonusIncome,\n    },\n    {\n      label: 'Recap.otherIncome',\n      value: toMoney(otherIncome),\n      hide: !otherIncome,\n    },\n    {\n      label: 'Recap.expenses',\n      value: `- ${toMoney(expenses)}`,\n      hide: !expenses,\n    },\n    {\n      label: 'Recap.consideredIncome',\n      value: <span className=\"sum\">{toMoney(getBorrowerIncome(props))}</span>,\n      spacingTop: true,\n      bold: true,\n    },\n    {\n      title: true,\n      label: 'general.lenders',\n    },\n    {\n      label: 'Recap.interestedLenders',\n      value: lenderCount,\n      spacing: true,\n    },\n  ];\n};\n\nconst getSmallDashboardArray = (props) => {\n  const r = props.loan;\n  const b = props.borrowers;\n  const p = props.property;\n  const loanValue = getLoanValue(props);\n  const monthly = getMonthlyPayment(props).total;\n  const totalUsed = getTotalUsed(props);\n  const propAndWork = getPropAndWork(props);\n  const project = getProjectValue(props);\n\n  return [\n    {\n      title: true,\n      label: 'Recap.title',\n      props: {\n        style: {\n          marginTop: 0,\n        },\n      },\n    },\n    {\n      label: 'Recap.purchasePrice',\n      value: toMoney(Math.round(p.value)),\n    },\n    {\n      label: 'Recap.propertyWork',\n      value: toMoney(Math.round(r.general.propertyWork)),\n      hide: !r.general.propertyWork,\n    },\n    {\n      label: 'general.notaryFees',\n      value: toMoney(Math.round(p.value * constants.notaryFees)),\n    },\n    {\n      label: 'general.insuranceFees',\n      value: toMoney(Math.round(r.general.insuranceFortuneUsed * constants.lppFees)),\n      hide: !r.general.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.totalCost',\n      value: <span className=\"sum\">{toMoney(project)}</span>,\n      spacingTop: true,\n      spacing: true,\n      bold: true,\n    },\n    {\n      title: true,\n      label: 'Recap.financing',\n    },\n    {\n      label: 'general.mortgageLoan',\n      value: toMoney(loanValue),\n    },\n    {\n      label: 'Recap.ownFundsCash',\n      value: toMoney(r.general.fortuneUsed),\n      hide: !r.general.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.ownFundsInsurance',\n      value: toMoney(r.general.insuranceFortuneUsed),\n      hide: !r.general.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.totalFinancing',\n      value: <span className=\"sum\">{toMoney(project)}</span>,\n      spacingTop: true,\n      spacing: true,\n      bold: true,\n    },\n    {\n      label: 'Recap.monthlyCost',\n      value: (\n        <span>\n          {toMoney(monthly)} <small>/mois</small>\n        </span>\n      ),\n    },\n  ];\n};\n\nconst getStart2Array = (props) => {\n  const p = props;\n\n  return [\n    {\n      title: true,\n      label: 'Recap.title',\n      props: {\n        style: {\n          marginTop: 0,\n        },\n      },\n    },\n    {\n      label:\n        p.type === 'test' ? 'Recap.purchasePrice' : 'Recap.maxPurchasePrice',\n      value: toMoney(Math.round(p.property)),\n    },\n    {\n      label: 'Recap.propertyWork',\n      value: toMoney(Math.round(p.propertyWork)),\n      hide: !p.propertyWork,\n      spacing: true,\n    },\n    {\n      label: 'Recap.propAndWork',\n      value: toMoney(Math.round(p.propAndWork)),\n      hide: !p.propertyWork,\n    },\n    {\n      label: 'general.notaryFees',\n      value: toMoney(Math.round(p.property * constants.notaryFees)),\n    },\n    {\n      label: 'general.insuranceFees',\n      value: toMoney(Math.round(p.lppFees)),\n      hide: !p.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.totalCost',\n      labelStyle: {\n        fontWeight: 400,\n      },\n      value: (\n        <span className=\"bold sum\">\n          {toMoney(Math.round(p.property * (1 + constants.notaryFees) +\n                p.propertyWork +\n                p.lppFees))}\n        </span>\n      ),\n      spacingTop: true,\n      spacing: p.fortuneUsed,\n    },\n    {\n      label: 'general.ownFunds',\n      value: toMoney(Math.round(p.fortuneUsed)),\n      hide: !p.fortuneUsed || p.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.ownFundsCash',\n      value: toMoney(p.fortuneUsed),\n      hide: !p.fortuneUsed || !p.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.ownFundsInsurance',\n      value: toMoney(p.insuranceFortuneUsed),\n      hide: !p.fortuneUsed || !p.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.ownFundsTotal',\n      value: (\n        <span className=\"sum\">\n          {toMoney(Math.round(p.fortuneUsed + p.insuranceFortuneUsed))}\n        </span>\n      ),\n      spacingTop: true,\n      hide: !p.fortuneUsed || !p.insuranceFortuneUsed,\n      bold: true,\n    },\n    {\n      label: 'general.mortgageLoan',\n      value: toMoney(Math.round(p.loanWanted)),\n      hide: !p.loanWanted,\n      spacing: !p.loanWanted,\n    },\n    {\n      label: 'Recap.monthlyCost',\n      value: (\n        <span>\n          {toMoney(Math.round(p.monthlyReal))} <small>/mois</small>\n        </span>\n      ),\n      hide: !p.fortuneUsed,\n    },\n    {\n      title: true,\n      label: 'Recap.finmaRules',\n      hide: !p.fortuneUsed,\n    },\n    {\n      label: p.propertyWork ? 'Recap.borrowRatio2' : 'Recap.borrowRatio1',\n      value: (\n        <span>\n          <IntlNumber value={p.borrow} format=\"percentage\" />{' '}\n          <span\n            className={\n              p.borrow <= constants.maxLoan(p.usageType) + 0.001 // add 0.1% to avoid rounding errors\n                ? 'fa fa-check success'\n                : 'fa fa-times error'\n            }\n          />\n        </span>\n      ),\n      hide: !p.fortuneUsed,\n    },\n    {\n      label: 'Recap.incomeRatio',\n      value: (\n        <span>\n          <IntlNumber value={p.ratio} format=\"percentage\" />{' '}\n          <span\n            className={\n              p.ratio <= 1 / 3\n                ? 'fa fa-check success'\n                : p.ratio <= 0.38\n                  ? 'fa fa-exclamation warning'\n                  : 'fa fa-times error'\n            }\n          />\n        </span>\n      ),\n      hide: !p.fortuneUsed,\n    },\n    {\n      title: true,\n      label: 'Recap.fortune',\n      hide: !(p.fortune || p.realEstate || p.insuranceFortune),\n    },\n    {\n      label: 'Recap.bankFortune',\n      value: toMoney(Math.round(p.fortune)),\n      hide: !p.fortune,\n    },\n\n    {\n      label: 'Recap.insuranceFortune',\n      value: toMoney(Math.round(p.insuranceFortuneDisplayed)),\n      hide: !p.insuranceFortuneDisplayed,\n    },\n    {\n      label: 'Recap.availableFunds',\n      value: (\n        <span className=\"sum\">\n          {toMoney(Math.round(p.fortune + p.insuranceFortuneDisplayed))}\n        </span>\n      ),\n      hide: !p.insuranceFortuneDisplayed,\n      spacingTop: true,\n      bold: true,\n    },\n    {\n      label: 'Recap.realEstate',\n      value: toMoney(Math.round(p.realEstateValue)),\n      hide: !p.realEstate,\n      spacingTop: true,\n    },\n    {\n      label: 'Recap.realEstateLoans',\n      value: `- ${toMoney(Math.round(p.realEstateDebt))}`,\n      hide: !p.realEstate,\n    },\n\n    {\n      label: 'Recap.netFortune',\n      value: (\n        <span className=\"sum\">\n          {toMoney(Math.round(p.fortune + p.insuranceFortuneDisplayed + p.realEstate))}\n        </span>\n      ),\n      spacingTop: true,\n      hide: !p.realEstate,\n      bold: true,\n    },\n    {\n      title: true,\n      label: 'general.income',\n      hide: !(\n        p.salary ||\n        p.bonus ||\n        p.otherIncome ||\n        p.expenses ||\n        p.propertyRent\n      ),\n    },\n    {\n      label: 'Recap.receivedRent',\n      value: toMoney(Math.round(p.propertyRent * 12)),\n      hide: p.usageType !== 'investment',\n    },\n    {\n      label: 'general.salary',\n      value: toMoney(Math.round(p.salary)),\n      hide: !p.salary,\n    },\n    {\n      label: 'Recap.consideredBonus',\n      value: toMoney(Math.round(p.bonus)),\n      hide: !p.bonus,\n    },\n    {\n      label: 'Recap.otherIncome',\n      value: toMoney(Math.round(p.otherIncome)),\n      hide: !p.otherIncome,\n    },\n    {\n      label: 'Recap.expenses',\n      value: `- ${toMoney(Math.round(p.expenses))}`,\n      hide: !p.expenses,\n    },\n    {\n      label: 'Recap.consideredIncome',\n      value: (\n        <span className=\"sum\">\n          {toMoney(Math.round(p.income - p.expenses))}\n        </span>\n      ),\n      hide: !(p.salary || p.bonus || p.otherIncome || p.expenses),\n      spacingTop: true,\n      bold: true,\n    },\n    {\n      title: true,\n      label: 'e-Potek',\n    },\n    {\n      label: 'Recap.interestedLenders',\n      value: p.lenderCount,\n      spacing: true,\n    },\n  ];\n};\n\nconst getBorrowerArray = (props) => {\n  const b = [props.borrower];\n\n  const expenses = getExpenses({ borrowers: b });\n  const bonusIncome = getBonusIncome({ borrowers: b });\n  const otherIncome = getOtherIncome({ borrowers: b });\n  const realEstateFortune = getRealEstateFortune({ borrowers: b });\n  const realEstateValue = getRealEstateValue({ borrowers: b });\n  const realEstateDebt = getRealEstateDebt({ borrowers: b });\n  const fortune = getFortune({ borrowers: b });\n  const insuranceFortune = getInsuranceFortune({ borrowers: b });\n  const totalFortune = getTotalFortune({ borrowers: b });\n  const salary = getBorrowerSalary({ borrowers: b });\n  const income = getBorrowerIncome({ borrowers: b });\n\n  return [\n    {\n      title: true,\n      label: 'Recap.fortune',\n      hide: !(realEstateFortune && insuranceFortune),\n    },\n    {\n      label: 'Recap.bankFortune',\n      value: toMoney(fortune),\n    },\n\n    {\n      label: 'Recap.insuranceFortune',\n      value: toMoney(insuranceFortune),\n      hide: !insuranceFortune,\n    },\n    {\n      label: 'Recap.availableFunds',\n      value: <span className=\"sum\">{toMoney(totalFortune)}</span>,\n      hide: !realEstateFortune,\n      spacingTop: true,\n      bold: true,\n    },\n    {\n      label: 'Recap.realEstate',\n      value: toMoney(realEstateValue),\n      hide: !realEstateFortune,\n      spacingTop: true,\n    },\n    {\n      label: 'Recap.realEstateLoans',\n      value: `- ${toMoney(realEstateDebt)}`,\n      hide: !realEstateFortune,\n    },\n    {\n      label: 'Recap.netFortune',\n      value: (\n        <span className=\"sum\">{toMoney(totalFortune + realEstateFortune)}</span>\n      ),\n      spacingTop: true,\n      hide: !realEstateFortune,\n    },\n    {\n      title: true,\n      label: 'general.income',\n    },\n    {\n      label: 'general.salary',\n      value: toMoney(salary),\n    },\n    {\n      label: 'Recap.consideredBonus',\n      value: toMoney(bonusIncome),\n      hide: !bonusIncome,\n    },\n    {\n      label: 'Recap.otherIncome',\n      value: toMoney(otherIncome),\n      hide: !otherIncome,\n    },\n    {\n      label: 'Recap.expenses',\n      value: `- ${toMoney(expenses)}`,\n      hide: !expenses,\n    },\n    {\n      label: 'Recap.consideredIncome',\n      value: <span className=\"sum\">{toMoney(income)}</span>,\n      spacingTop: true,\n      bold: true,\n    },\n  ];\n};\n\nconst getStructureArray = (props) => {\n  const r = props.loan;\n  const b = props.borrowers;\n  const p = props.property;\n\n  const project = getProjectValue(props);\n  const loanValue = getLoanValue(props);\n  const monthly = getMonthlyPayment(props).total;\n  const totalUsed = getTotalUsed(props);\n  const propAndWork = getPropAndWork(props);\n  const lenderCount = getLenderCount(props);\n  const incomeRatio = getIncomeRatio(props);\n  const borrowRatio = getBorrowRatio(props);\n\n  return [\n    {\n      title: true,\n      label: 'Recap.title',\n      props: {\n        style: {\n          marginTop: 0,\n        },\n      },\n    },\n    {\n      label: 'Recap.propAndWork',\n      value: toMoney(Math.round(propAndWork)),\n      hide: !r.general.propertyWork,\n    },\n    {\n      label: 'general.notaryFees',\n      value: toMoney(Math.round(p.value * constants.notaryFees)),\n    },\n    {\n      label: 'general.insuranceFees',\n      value: toMoney(Math.round(r.general.insuranceFortuneUsed * constants.lppFees)),\n      hide: !r.general.insuranceFortuneUsed,\n    },\n    {\n      label: 'Recap.totalCost',\n      labelStyle: {\n        fontWeight: 400,\n      },\n      value: <span className=\"sum\">{toMoney(project)}</span>,\n      spacingTop: true,\n      spacing: true,\n      bold: true,\n    },\n    {\n      label: 'general.mortgageLoan',\n      value: toMoney(loanValue),\n    },\n    {\n      label: 'Recap.ownFundsTotal',\n      value: toMoney(totalUsed),\n      spacing: true,\n    },\n    {\n      label: 'Recap.monthlyCost',\n      value: (\n        <span>\n          {toMoney(monthly)} <small>/mois</small>\n        </span>\n      ),\n    },\n    {\n      title: true,\n      label: 'Recap.finmaRules',\n    },\n    {\n      label: r.general.propertyWork\n        ? 'Recap.borrowRatio2'\n        : 'Recap.borrowRatio1',\n      value: (\n        <span>\n          <IntlNumber value={borrowRatio} format=\"percentage\" />{' '}\n          <span\n            className={\n              borrowRatio <= constants.maxLoan(r.general.usageType) + 0.001 // add 0.1% to avoid rounding errors\n                ? 'fa fa-check success'\n                : 'fa fa-times error'\n            }\n          />\n        </span>\n      ),\n    },\n    {\n      label: 'Recap.incomeRatio',\n      value: (\n        <span>\n          <IntlNumber value={incomeRatio} format=\"percentage\" />{' '}\n          <span\n            className={\n              incomeRatio <= 1 / 3\n                ? 'fa fa-check success'\n                : incomeRatio <= 0.38\n                  ? 'fa fa-exclamation warning'\n                  : 'fa fa-times error'\n            }\n          />\n        </span>\n      ),\n      spacing: true,\n    },\n    {\n      label: 'Recap.interestedLenders',\n      value: lenderCount,\n      spacing: true,\n    },\n  ];\n};\n\nconst arraySwitch = (props) => {\n  switch (props.arrayName) {\n  case 'start1':\n    return null;\n  case 'start2':\n    return getStart2Array(props);\n  case 'dashboard':\n    return getDashboardArray(props);\n  case 'dashboard-small':\n    return getSmallDashboardArray(props);\n  case 'borrower':\n    return getBorrowerArray(props);\n  case 'structure':\n    return getStructureArray(props);\n  default:\n    throw new Meteor.Error('Not a valid recap array');\n  }\n};\n\nconst Recap = (props) => {\n  const array = props.array || arraySwitch(props);\n  return (\n    <article className=\"validator\">\n      <div className=\"result animated fadeIn\">\n        {array.map((item) => {\n          if (item.hide) {\n            return null;\n          } else if (item.title) {\n            return (\n              <label\n                className=\"text-center\"\n                {...item.props}\n                key={item.label}\n                style={item.labelStyle}\n              >\n                <T id={item.label} />\n              </label>\n            );\n          }\n          return (\n            <div\n              className={classnames({\n                'fixed-size': true,\n                'no-scale': props.noScale,\n                bold: item.bold,\n              })}\n              style={{\n                marginBottom: item.spacing && 16,\n                marginTop: item.spacingTop && 16,\n              }}\n              key={item.label}\n            >\n              <h4 className=\"secondary\">\n                <T id={item.label} tooltipPlacement=\"bottom\" />\n              </h4>\n              <h3 {...item.props}>{item.value}</h3>\n            </div>\n          );\n        })}\n      </div>\n    </article>\n  );\n};\n\nRecap.propTypes = {\n  loan: PropTypes.objectOf(PropTypes.any),\n  borrowers: PropTypes.arrayOf(PropTypes.object),\n  borrower: PropTypes.objectOf(PropTypes.any),\n  array: PropTypes.arrayOf(PropTypes.object),\n  noScale: PropTypes.bool,\n};\n\nRecap.defaultProps = {\n  loan: {},\n  borrowers: [{}],\n  borrower: {},\n  array: undefined,\n  noScale: false,\n};\n\nexport default Recap;\n"]},"hash":"1bada9f4699e1d68bbdfa5ca5e77e43e60b015c1"}

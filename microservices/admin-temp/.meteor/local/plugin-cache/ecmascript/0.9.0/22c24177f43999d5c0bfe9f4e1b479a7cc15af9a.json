{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"../UserService","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"UserService"}]},{"source":"../../tasks/TaskService","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TaskService"}]},{"source":"../..","imported":["Tasks"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"../../tasks/tasksConstants","imported":["TASK_STATUS","TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"},{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]},{"source":"../..","imported":["SecurityService","createMutator"],"specifiers":[{"kind":"named","imported":"SecurityService","local":"SecurityService"},{"kind":"named","imported":"createMutator","local":"createMutator"}]},{"source":"../mutationDefinitions","imported":["*"],"specifiers":[{"kind":"namespace","local":"defs"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/users/server/mutations.js","filenameRelative":"imports/core/api/users/server/mutations.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/users/server/mutations.js.map","sourceFileName":"imports/core/api/users/server/mutations.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"mutations"},"ignored":false,"code":"\"use strict\";\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 0);\n\nvar _Accounts = void 0;\n\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts: function Accounts(v) {\n    _Accounts = v;\n  }\n}, 1);\nvar UserService = void 0;\nmodule.watch(require(\"../UserService\"), {\n  default: function _default(v) {\n    UserService = v;\n  }\n}, 2);\nvar TaskService = void 0;\nmodule.watch(require(\"../../tasks/TaskService\"), {\n  default: function _default(v) {\n    TaskService = v;\n  }\n}, 3);\n\nvar _Tasks = void 0;\n\nmodule.watch(require(\"../..\"), {\n  Tasks: function Tasks(v) {\n    _Tasks = v;\n  }\n}, 4);\n\nvar _TASK_STATUS = void 0,\n    _TASK_TYPE = void 0;\n\nmodule.watch(require(\"../../tasks/tasksConstants\"), {\n  TASK_STATUS: function TASK_STATUS(v) {\n    _TASK_STATUS = v;\n  },\n  TASK_TYPE: function TASK_TYPE(v) {\n    _TASK_TYPE = v;\n  }\n}, 5);\n\nvar _SecurityService = void 0,\n    _createMutator = void 0;\n\nmodule.watch(require(\"../..\"), {\n  SecurityService: function SecurityService(v) {\n    _SecurityService = v;\n  },\n  createMutator: function createMutator(v) {\n    _createMutator = v;\n  }\n}, 6);\nvar defs = void 0;\nmodule.watch(require(\"../mutationDefinitions\"), {\n  \"*\": function _(v) {\n    defs = v;\n  }\n}, 7);\n\n_createMutator(defs.DOES_USER_EXIST, function (_ref) {\n  var email = _ref.email;\n  return _Accounts.findUserByEmail(email) != null;\n});\n\n_createMutator(defs.SEND_VERIFICATION_LINK, function (_ref2) {\n  var userId = _ref2.userId;\n\n  if (userId) {\n    _SecurityService.checkCurrentUserIsAdmin();\n  } else {\n    _SecurityService.checkLoggedIn();\n  }\n\n  var id = userId || _Meteor.userId();\n\n  if (_Meteor.isDevelopment) {\n    console.log(\"Not sending verification link in development for userId: \" + id);\n    return false;\n  }\n\n  return _Accounts.sendVerificationEmail(id);\n});\n\n_createMutator(defs.ASSIGN_ADMIN_TO_USER, function (_ref3) {\n  var userId = _ref3.userId,\n      adminId = _ref3.adminId;\n  return UserService.assignAdminToUser({\n    userId: userId,\n    adminId: adminId\n  });\n});\n\n_createMutator(defs.ASSIGN_ADMIN_TO_NEW_USER_TASK, function (_ref4) {\n  var userId = _ref4.userId,\n      adminId = _ref4.adminId,\n      taskId = _ref4.taskId,\n      taskType = _ref4.taskType;\n  var assignAdminToUserResult = callMutation(mutations.ASSIGN_ADMIN_TO_USER, {\n    userId: relatedUserId,\n    adminId: user._id\n  });\n\n  if (assignAdminToUserResult) {\n    _SecurityService.tasks.isAllowedToUpdate(taskId);\n\n    var changeTaskAssignedToResult = callMutation(mutations.TASK_CHANGE_ASSIGNED_TO, {\n      taskId: taskId,\n      newAssignee: adminId\n    });\n\n    if (changeTaskAssignedToResult) {\n      callMutation(mutations.TASK_CHANGE_STATUS, {\n        taskId: taskId,\n        newStatus: _TASK_STATUS.COMPLETED\n      });\n\n      if (taskType !== _TASK_TYPE.ADD_ASSIGN_TO) {\n        var assignmentTaskId = _Tasks.findOne({\n          type: _TASK_TYPE.ADD_ASSIGN_TO,\n          userId: userId\n        })._id;\n\n        callMutation(mutations.TASK_CHANGE_STATUS, {\n          assignmentTaskId: assignmentTaskId,\n          newStatus: _TASK_STATUS.COMPLETED\n        });\n      }\n    }\n  }\n});","map":{"version":3,"sources":["imports/core/api/users/server/mutations.js"],"names":["Meteor","module","watch","require","v","Accounts","UserService","default","TaskService","Tasks","TASK_STATUS","TASK_TYPE","SecurityService","createMutator","defs","DOES_USER_EXIST","email","findUserByEmail","SEND_VERIFICATION_LINK","userId","checkCurrentUserIsAdmin","checkLoggedIn","id","isDevelopment","console","log","sendVerificationEmail","ASSIGN_ADMIN_TO_USER","adminId","assignAdminToUser","ASSIGN_ADMIN_TO_NEW_USER_TASK","taskId","taskType","assignAdminToUserResult","callMutation","mutations","relatedUserId","user","_id","tasks","isAllowedToUpdate","changeTaskAssignedToResult","TASK_CHANGE_ASSIGNED_TO","newAssignee","TASK_CHANGE_STATUS","newStatus","COMPLETED","ADD_ASSIGN_TO","assignmentTaskId","findOne","type"],"mappings":"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","file":"imports/core/api/users/server/mutations.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport UserService from 'core/api/users/UserService';\nimport TaskService from 'core/api/tasks/TaskService';\nimport { Tasks } from 'core/api';\nimport { TASK_STATUS, TASK_TYPE } from 'core/api/tasks/tasksConstants';\nimport { SecurityService, createMutator } from '../..';\nimport * as defs from '../mutationDefinitions';\n\ncreateMutator(\n  defs.DOES_USER_EXIST,\n  ({ email }) => Accounts.findUserByEmail(email) != null,\n);\n\ncreateMutator(defs.SEND_VERIFICATION_LINK, ({ userId }) => {\n  if (userId) {\n    SecurityService.checkCurrentUserIsAdmin();\n  } else {\n    SecurityService.checkLoggedIn();\n  }\n  const id = userId || Meteor.userId();\n\n  if (Meteor.isDevelopment) {\n    console.log(`Not sending verification link in development for userId: ${id}`);\n    return false;\n  }\n\n  return Accounts.sendVerificationEmail(id);\n});\n\ncreateMutator(defs.ASSIGN_ADMIN_TO_USER, ({ userId, adminId }) =>\n  UserService.assignAdminToUser({ userId, adminId }));\n\ncreateMutator(defs.ASSIGN_ADMIN_TO_NEW_USER_TASK, ({ \n  userId, adminId, taskId, taskType }) => {\n  const assignAdminToUserResult = callMutation(mutations.ASSIGN_ADMIN_TO_USER, {\n    userId: relatedUserId,\n    adminId: user._id,\n  });\n  if (assignAdminToUserResult) {\n    SecurityService.tasks.isAllowedToUpdate(taskId);\n    const changeTaskAssignedToResult = callMutation(mutations.TASK_CHANGE_ASSIGNED_TO, {\n      taskId,\n      newAssignee: adminId,\n    });\n    if (changeTaskAssignedToResult) {\n      callMutation(mutations.TASK_CHANGE_STATUS, {\n        taskId,\n        newStatus: TASK_STATUS.COMPLETED,\n      });\n      if (taskType !== TASK_TYPE.ADD_ASSIGN_TO) {\n        const assignmentTaskId = Tasks.findOne({ type: TASK_TYPE.ADD_ASSIGN_TO, userId: userId })._id;\n        callMutation(mutations.TASK_CHANGE_STATUS, {\n          assignmentTaskId,\n          newStatus: TASK_STATUS.COMPLETED,\n        });\n      }\n    }    \n  }\n});\n  "]},"hash":"22c24177f43999d5c0bfe9f4e1b479a7cc15af9a"}

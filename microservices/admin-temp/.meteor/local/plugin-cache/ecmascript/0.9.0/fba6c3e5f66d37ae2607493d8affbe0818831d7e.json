{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":["cleanOptions","options","ensureFields","cleanFilters","filters","ensureFields","fieldExists","fields","key"],"specifiers":[{"kind":"local","local":"cleanOptions","exported":"cleanOptions"},{"kind":"local","local":"options","exported":"options"},{"kind":"local","local":"ensureFields","exported":"ensureFields"},{"kind":"local","local":"cleanFilters","exported":"cleanFilters"},{"kind":"local","local":"filters","exported":"filters"},{"kind":"local","local":"ensureFields","exported":"ensureFields"},{"kind":"local","local":"fieldExists","exported":"fieldExists"},{"kind":"local","local":"fields","exported":"fields"},{"kind":"local","local":"key","exported":"key"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/exposure/lib/cleanSelectors.js","filenameRelative":"packages/cultofcoders:grapher/lib/exposure/lib/cleanSelectors.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/exposure/lib/cleanSelectors.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/exposure/lib/cleanSelectors.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cleanSelectors"},"ignored":false,"code":"module.export({\n    cleanOptions: () => cleanOptions,\n    cleanFilters: () => cleanFilters,\n    fieldExists: () => fieldExists\n});\n\nfunction cleanOptions(options, ensureFields) {\n    if (!options) {\n        return;\n    }\n\n    if (options.fields) {\n        options.fields = _.pick(options.fields, ...ensureFields);\n    }\n\n    if (options.sort) {\n        options.sort = _.pick(options.sort, ...ensureFields);\n    }\n}\n\nconst deepFilterFieldsArray = ['$and', '$or', '$nor'];\nconst deepFilterFieldsObject = ['$not'];\nconst special = [...deepFilterFieldsArray, ...deepFilterFieldsObject];\n\nfunction cleanFilters(filters, ensureFields) {\n    if (!filters) {\n        return;\n    }\n\n    _.each(filters, (value, key) => {\n        if (!_.contains(special, key)) {\n            if (!fieldExists(ensureFields, key)) {\n                delete filters[key];\n            }\n        }\n    });\n\n    deepFilterFieldsArray.forEach(field => {\n        if (filters[field]) {\n            filters[field].forEach(element => cleanFilters(element, ensureFields));\n        }\n    });\n    deepFilterFieldsObject.forEach(field => {\n        if (filters[field]) {\n            cleanFilters(filters[field], ensureFields);\n        }\n    });\n}\n\nfunction fieldExists(fields, key) {\n    for (let i = 0; i < fields.length; i++) {\n        if (fields[i] === key || key.indexOf(fields[i] + '.') === 0) {\n            return true;\n        }\n    }\n\n    return false;\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/exposure/lib/cleanSelectors.js"],"names":["module","export","cleanOptions","cleanFilters","fieldExists","options","ensureFields","fields","_","pick","sort","deepFilterFieldsArray","deepFilterFieldsObject","special","filters","each","value","key","contains","forEach","field","element","i","length","indexOf"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,kBAAa,MAAIA,YAAlB;AAA+BC,kBAAa,MAAIA,YAAhD;AAA6DC,iBAAY,MAAIA;AAA7E,CAAd;;AAAO,SAASF,YAAT,CAAsBG,OAAtB,EAA+BC,YAA/B,EAA6C;AAChD,QAAI,CAACD,OAAL,EAAc;AACV;AACH;;AAED,QAAIA,QAAQE,MAAZ,EAAoB;AAChBF,gBAAQE,MAAR,GAAiBC,EAAEC,IAAF,CAAOJ,QAAQE,MAAf,EAAuB,GAAGD,YAA1B,CAAjB;AACH;;AAED,QAAID,QAAQK,IAAZ,EAAkB;AACdL,gBAAQK,IAAR,GAAeF,EAAEC,IAAF,CAAOJ,QAAQK,IAAf,EAAqB,GAAGJ,YAAxB,CAAf;AACH;AACJ;;AAED,MAAMK,wBAAwB,CAAC,MAAD,EAAS,KAAT,EAAgB,MAAhB,CAA9B;AACA,MAAMC,yBAAyB,CAAC,MAAD,CAA/B;AACA,MAAMC,UAAU,CAAC,GAAGF,qBAAJ,EAA2B,GAAGC,sBAA9B,CAAhB;;AAEO,SAAST,YAAT,CAAsBW,OAAtB,EAA+BR,YAA/B,EAA6C;AAChD,QAAI,CAACQ,OAAL,EAAc;AACV;AACH;;AAEDN,MAAEO,IAAF,CAAOD,OAAP,EAAgB,CAACE,KAAD,EAAQC,GAAR,KAAgB;AAC5B,YAAI,CAACT,EAAEU,QAAF,CAAWL,OAAX,EAAoBI,GAApB,CAAL,EAA+B;AAC3B,gBAAI,CAACb,YAAYE,YAAZ,EAA0BW,GAA1B,CAAL,EAAqC;AACjC,uBAAOH,QAAQG,GAAR,CAAP;AACH;AACJ;AACJ,KAND;;AAQAN,0BAAsBQ,OAAtB,CAA8BC,SAAS;AACnC,YAAIN,QAAQM,KAAR,CAAJ,EAAoB;AAChBN,oBAAQM,KAAR,EAAeD,OAAf,CAAuBE,WAAWlB,aAAakB,OAAb,EAAsBf,YAAtB,CAAlC;AACH;AACJ,KAJD;AAMAM,2BAAuBO,OAAvB,CAA+BC,SAAS;AACpC,YAAIN,QAAQM,KAAR,CAAJ,EAAoB;AAChBjB,yBAAaW,QAAQM,KAAR,CAAb,EAA6Bd,YAA7B;AACH;AACJ,KAJD;AAKH;;AAUM,SAASF,WAAT,CAAqBG,MAArB,EAA6BU,GAA7B,EAAkC;AACrC,SAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIf,OAAOgB,MAA3B,EAAmCD,GAAnC,EAAwC;AACpC,YAAIf,OAAOe,CAAP,MAAcL,GAAd,IAAqBA,IAAIO,OAAJ,CAAYjB,OAAOe,CAAP,IAAY,GAAxB,MAAiC,CAA1D,EAA6D;AACzD,mBAAO,IAAP;AACH;AACJ;;AAED,WAAO,KAAP;AACH","file":"packages/cultofcoders:grapher/lib/exposure/lib/cleanSelectors.js.map","sourcesContent":["export function cleanOptions(options, ensureFields) {\n    if (!options) {\n        return;\n    }\n\n    if (options.fields) {\n        options.fields = _.pick(options.fields, ...ensureFields);\n    }\n\n    if (options.sort) {\n        options.sort = _.pick(options.sort, ...ensureFields);\n    }\n}\n\nconst deepFilterFieldsArray = ['$and', '$or', '$nor'];\nconst deepFilterFieldsObject = ['$not'];\nconst special = [...deepFilterFieldsArray, ...deepFilterFieldsObject];\n\nexport function cleanFilters(filters, ensureFields) {\n    if (!filters) {\n        return;\n    }\n\n    _.each(filters, (value, key) => {\n        if (!_.contains(special, key)) {\n            if (!fieldExists(ensureFields, key)) {\n                delete filters[key];\n            }\n        }\n    });\n\n    deepFilterFieldsArray.forEach(field => {\n        if (filters[field]) {\n            filters[field].forEach(element => cleanFilters(element, ensureFields));\n        }\n    });\n\n    deepFilterFieldsObject.forEach(field => {\n        if (filters[field]) {\n            cleanFilters(filters[field], ensureFields);\n        }\n    });\n}\n\n/**\n * This will check if a field exists in a set of fields\n * If fields contains [\"profile\"], then \"profile.something\" will return true\n *\n * @param fields\n * @param key\n * @returns {boolean}\n */\nexport function fieldExists(fields, key) {\n    for (let i = 0; i < fields.length; i++) {\n        if (fields[i] === key || key.indexOf(fields[i] + '.') === 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n"]},"hash":"fba6c3e5f66d37ae2607493d8affbe0818831d7e"}

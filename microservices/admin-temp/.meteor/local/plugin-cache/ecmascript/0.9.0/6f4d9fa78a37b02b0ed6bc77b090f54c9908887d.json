{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./collections","imported":["Authors","Groups","Posts","Categories","AuthorProfiles"],"specifiers":[{"kind":"named","imported":"Authors","local":"Authors"},{"kind":"named","imported":"Groups","local":"Groups"},{"kind":"named","imported":"Posts","local":"Posts"},{"kind":"named","imported":"Categories","local":"Categories"},{"kind":"named","imported":"AuthorProfiles","local":"AuthorProfiles"}]}],"exports":{"exported":["categoryIds","groupIds","authorIds","postIds"],"specifiers":[{"kind":"local","local":"categoryIds","exported":"categoryIds"},{"kind":"local","local":"groupIds","exported":"groupIds"},{"kind":"local","local":"authorIds","exported":"authorIds"},{"kind":"local","local":"postIds","exported":"postIds"}]}}},"options":{"filename":"packages/cultofcoders:grapher-react/__tests__/bootstrap/fixtures.js","filenameRelative":"packages/cultofcoders:grapher-react/__tests__/bootstrap/fixtures.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher-react/__tests__/bootstrap/fixtures.js.map","sourceFileName":"packages/cultofcoders:grapher-react/__tests__/bootstrap/fixtures.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"fixtures"},"ignored":false,"code":"module.export({\n    categoryIds: () => categoryIds,\n    groupIds: () => groupIds,\n    authorIds: () => authorIds,\n    postIds: () => postIds\n});\nlet Authors, Groups, Posts, Categories, AuthorProfiles;\nmodule.watch(require(\"./collections\"), {\n    Authors(v) {\n        Authors = v;\n    },\n\n    Groups(v) {\n        Groups = v;\n    },\n\n    Posts(v) {\n        Posts = v;\n    },\n\n    Categories(v) {\n        Categories = v;\n    },\n\n    AuthorProfiles(v) {\n        AuthorProfiles = v;\n    }\n\n}, 0);\nconst GROUPS = 3;\nconst CATEGORIES = 3;\nconst AUTHOR_PER_GROUPS = 3;\nconst POSTS_PER_AUTHOR = 3;\nlet categoryIds = [];\nlet groupIds = [];\nlet authorIds = [];\nlet postIds = [];\nAuthors.remove({});\nAuthorProfiles.remove({});\nPosts.remove({});\nGroups.remove({});\nCategories.remove({});\n\nfor (let i = 0; i < CATEGORIES; i++) {\n    const categoryId = Categories.insert({\n        name: `Category ${i}`\n    });\n    categoryIds.push(categoryId);\n}\n\nfor (let i = 0; i < GROUPS; i++) {\n    const groupId = Groups.insert({\n        name: `Group ${i}`\n    });\n    groupIds.push(groupId);\n}\n\ngroupIds.forEach(groupId => {\n    for (let i = 0; i < AUTHOR_PER_GROUPS; i++) {\n        const authorId = Authors.insert({\n            name: `Author ${authorIds.length}`,\n            createdAt: new Date()\n        });\n        const authorProfileId = AuthorProfiles.insert({\n            name: `Author ${authorIds.length}`,\n            createdAt: new Date()\n        });\n        Authors.getLink(authorId, 'profile').set(authorProfileId);\n        authorIds.push(authorId); // link it to the group\n\n        const groupLink = Authors.getLink(authorId, 'groups');\n        groupLink.add(groupId);\n\n        for (let j = 0; j < POSTS_PER_AUTHOR; j++) {\n            createPost(authorId);\n        }\n    }\n});\n\nfunction createPost(authorId) {\n    const postId = Posts.insert({\n        title: `Post ${postIds.length}`,\n        createdAt: new Date()\n    });\n    postIds.push(postId);\n    const authorLink = Posts.getLink(postId, 'author');\n    authorLink.set(authorId);\n    const randomCategoryId = categoryIds[Math.floor(Math.random() * categoryIds.length)];\n    const categoriesLink = Posts.getLink(postId, 'categories');\n    categoriesLink.add(randomCategoryId, {\n        createdAt: new Date()\n    });\n    return postId;\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher-react/__tests__/bootstrap/fixtures.js"],"names":["module","export","categoryIds","groupIds","authorIds","postIds","Authors","Groups","Posts","Categories","AuthorProfiles","watch","require","v","GROUPS","CATEGORIES","AUTHOR_PER_GROUPS","POSTS_PER_AUTHOR","remove","i","categoryId","insert","name","push","groupId","forEach","authorId","length","createdAt","Date","authorProfileId","getLink","set","groupLink","add","j","createPost","postId","title","authorLink","randomCategoryId","Math","floor","random","categoriesLink"],"mappings":"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","file":"packages/cultofcoders:grapher-react/__tests__/bootstrap/fixtures.js.map","sourcesContent":["import {Authors, Groups, Posts, Categories, AuthorProfiles} from './collections';\n\nconst GROUPS = 3;\nconst CATEGORIES = 3;\nconst AUTHOR_PER_GROUPS = 3;\nconst POSTS_PER_AUTHOR = 3;\n\nexport let categoryIds = [];\nexport let groupIds = [];\nexport let authorIds = [];\nexport let postIds = [];\n\nAuthors.remove({});\nAuthorProfiles.remove({});\nPosts.remove({});\nGroups.remove({});\nCategories.remove({});\n\nfor (let i = 0; i < CATEGORIES; i++) {\n    const categoryId = Categories.insert({\n        name: `Category ${i}`\n    });\n\n    categoryIds.push(categoryId);\n}\n\n\nfor (let i = 0; i < GROUPS; i++) {\n    const groupId = Groups.insert({\n        name: `Group ${i}`\n    });\n\n    groupIds.push(groupId);\n}\n\ngroupIds.forEach(groupId => {\n    for (let i = 0; i < AUTHOR_PER_GROUPS; i++) {\n        const authorId = Authors.insert({\n            name: `Author ${authorIds.length}`,\n            createdAt: new Date(),\n        });\n\n        const authorProfileId = AuthorProfiles.insert({\n            name: `Author ${authorIds.length}`,\n            createdAt: new Date(),\n        });\n\n        Authors.getLink(authorId, 'profile').set(authorProfileId);\n\n        authorIds.push(authorId);\n\n        // link it to the group\n        const groupLink = Authors.getLink(authorId, 'groups');\n        groupLink.add(groupId);\n\n        for (let j = 0; j < POSTS_PER_AUTHOR; j++) {\n            createPost(authorId);\n        }\n    }\n});\n\nfunction createPost(authorId) {\n    const postId = Posts.insert({\n        title: `Post ${postIds.length}`,\n        createdAt: new Date(),\n    });\n\n    postIds.push(postId);\n\n    const authorLink = Posts.getLink(postId, 'author');\n    authorLink.set(authorId);\n\n    const randomCategoryId = categoryIds[Math.floor(Math.random()*categoryIds.length)];\n\n    const categoriesLink = Posts.getLink(postId, 'categories');\n    categoriesLink.add(randomCategoryId, {\n        createdAt: new Date(),\n    });\n\n    return postId;\n}\n"]},"hash":"6f4d9fa78a37b02b0ed6bc77b090f54c9908887d"}

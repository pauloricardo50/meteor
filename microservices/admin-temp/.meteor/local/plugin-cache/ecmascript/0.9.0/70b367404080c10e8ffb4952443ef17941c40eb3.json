{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]}],"exports":{"exported":["Field"],"specifiers":[{"kind":"local","local":"Field","exported":"Field"}]}}},"options":{"filename":"packages/std:accounts-ui/imports/ui/components/Field.jsx","filenameRelative":"packages/std:accounts-ui/imports/ui/components/Field.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/std:accounts-ui/imports/ui/components/Field.jsx.map","sourceFileName":"packages/std:accounts-ui/imports/ui/components/Field.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Field"},"ignored":false,"code":"module.export({\n  Field: () => Field\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet PropTypes;\nmodule.watch(require(\"prop-types\"), {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\n\nclass Field extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mount: true\n    };\n  }\n\n  triggerUpdate() {\n    // Trigger an onChange on inital load, to support browser prefilled values.\n    const {\n      onChange\n    } = this.props;\n\n    if (this.input && onChange) {\n      onChange({\n        target: {\n          value: this.input.value\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.triggerUpdate();\n  }\n\n  componentDidUpdate(prevProps) {\n    // Re-mount component so that we don't expose browser prefilled passwords if the component was\n    // a password before and now something else.\n    if (prevProps.id !== this.props.id) {\n      this.setState({\n        mount: false\n      });\n    } else if (!this.state.mount) {\n      this.setState({\n        mount: true\n      });\n      this.triggerUpdate();\n    }\n  }\n\n  render() {\n    const {\n      id,\n      hint,\n      label,\n      type = 'text',\n      onChange,\n      required = false,\n      className = \"field\",\n      defaultValue = \"\",\n      message\n    } = this.props;\n    const {\n      mount = true\n    } = this.state;\n\n    if (type == 'notice') {\n      return React.createElement(\n        \"div\",\n        {\n          className: className\n        },\n        label\n      );\n    }\n\n    return mount ? React.createElement(\n      \"div\",\n      {\n        className: className\n      },\n      React.createElement(\n        \"label\",\n        {\n          htmlFor: id\n        },\n        label\n      ),\n      React.createElement(\"input\", {\n        id: id,\n        ref: ref => this.input = ref,\n        type: type,\n        onChange: onChange,\n        placeholder: hint,\n        defaultValue: defaultValue\n      }),\n      message && React.createElement(\n        \"span\",\n        {\n          className: ['message', message.type].join(' ').trim()\n        },\n        message.message\n      )\n    ) : null;\n  }\n\n}\n\nField.propTypes = {\n  onChange: PropTypes.func\n};\nAccounts.ui.Field = Field;","map":{"version":3,"sources":["packages/std:accounts-ui/imports/ui/components/Field.jsx"],"names":["module","export","Field","React","watch","require","default","v","PropTypes","Accounts","Component","constructor","props","state","mount","triggerUpdate","onChange","input","target","value","componentDidMount","componentDidUpdate","prevProps","id","setState","render","hint","label","type","required","className","defaultValue","message","ref","join","trim","propTypes","func","ui"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,SAAM,MAAIA;AAAX,CAAd;AAAiC,IAAIC,KAAJ;AAAUH,OAAOI,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAACC,UAAQC,CAAR,EAAU;AAACJ,YAAMI,CAAN;AAAQ;;AAApB,CAA9B,EAAoD,CAApD;AAAuD,IAAIC,SAAJ;AAAcR,OAAOI,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAACC,UAAQC,CAAR,EAAU;AAACC,gBAAUD,CAAV;AAAY;;AAAxB,CAAnC,EAA6D,CAA7D;AAAgE,IAAIE,QAAJ;AAAaT,OAAOI,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACI,WAASF,CAAT,EAAW;AAACE,eAASF,CAAT;AAAW;;AAAxB,CAA7C,EAAuE,CAAvE;;AAItL,MAAML,KAAN,SAAoBC,MAAMO,SAA1B,CAAoC;AACzCC,cAAYC,KAAZ,EAAmB;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,aAAO;AADI,KAAb;AAGD;;AAEDC,kBAAgB;AACd;AACA,UAAM;AAAEC;AAAF,QAAe,KAAKJ,KAA1B;;AACA,QAAI,KAAKK,KAAL,IAAcD,QAAlB,EAA4B;AAC1BA,eAAS;AAAEE,gBAAQ;AAAEC,iBAAO,KAAKF,KAAL,CAAWE;AAApB;AAAV,OAAT;AACD;AACF;;AAEDC,sBAAoB;AAClB,SAAKL,aAAL;AACD;;AAEDM,qBAAmBC,SAAnB,EAA8B;AAC5B;AACA;AACA,QAAIA,UAAUC,EAAV,KAAiB,KAAKX,KAAL,CAAWW,EAAhC,EAAoC;AAClC,WAAKC,QAAL,CAAc;AAACV,eAAO;AAAR,OAAd;AACD,KAFD,MAGK,IAAI,CAAC,KAAKD,KAAL,CAAWC,KAAhB,EAAuB;AAC1B,WAAKU,QAAL,CAAc;AAACV,eAAO;AAAR,OAAd;AACA,WAAKC,aAAL;AACD;AACF;;AAEDU,WAAS;AACP,UAAM;AACJF,QADI;AAEJG,UAFI;AAGJC,WAHI;AAIJC,aAAO,MAJH;AAKJZ,cALI;AAMJa,iBAAW,KANP;AAOJC,kBAAY,OAPR;AAQJC,qBAAe,EARX;AASJC;AATI,QAUF,KAAKpB,KAVT;AAWA,UAAM;AAAEE,cAAQ;AAAV,QAAmB,KAAKD,KAA9B;;AACA,QAAIe,QAAQ,QAAZ,EAAsB;AACpB,aAAO;AAAA;AAAA;AAAK,qBAAYE;AAAjB;AAA+BH;AAA/B,OAAP;AACD;;AACD,WAAOb,QACL;AAAA;AAAA;AAAK,mBAAYgB;AAAjB;AACE;AAAA;AAAA;AAAO,mBAAUP;AAAjB;AAAwBI;AAAxB,OADF;AAEE;AACE,YAAKJ,EADP;AAEE,aAAOU,GAAD,IAAS,KAAKhB,KAAL,GAAagB,GAF9B;AAGE,cAAOL,IAHT;AAIE,kBAAWZ,QAJb;AAKE,qBAAcU,IALhB;AAME,sBAAeK;AANjB,QAFF;AAUGC,iBACC;AAAA;AAAA;AAAM,qBAAW,CAAC,SAAD,EAAYA,QAAQJ,IAApB,EAA0BM,IAA1B,CAA+B,GAA/B,EAAoCC,IAApC;AAAjB;AACGH,gBAAQA;AADX;AAXJ,KADK,GAgBH,IAhBJ;AAiBD;;AAjEwC;;AAoE3C9B,MAAMkC,SAAN,GAAkB;AAChBpB,YAAUR,UAAU6B;AADJ,CAAlB;AAIA5B,SAAS6B,EAAT,CAAYpC,KAAZ,GAAoBA,KAApB","file":"packages/std:accounts-ui/imports/ui/components/Field.jsx.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accounts } from 'meteor/accounts-base';\n\nexport class Field extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mount: true\n    };\n  }\n\n  triggerUpdate() {\n    // Trigger an onChange on inital load, to support browser prefilled values.\n    const { onChange } = this.props;\n    if (this.input && onChange) {\n      onChange({ target: { value: this.input.value } });\n    }\n  }\n\n  componentDidMount() {\n    this.triggerUpdate();\n  }\n\n  componentDidUpdate(prevProps) {\n    // Re-mount component so that we don't expose browser prefilled passwords if the component was\n    // a password before and now something else.\n    if (prevProps.id !== this.props.id) {\n      this.setState({mount: false});\n    }\n    else if (!this.state.mount) {\n      this.setState({mount: true});\n      this.triggerUpdate();\n    }\n  }\n\n  render() {\n    const {\n      id,\n      hint,\n      label,\n      type = 'text',\n      onChange,\n      required = false,\n      className = \"field\",\n      defaultValue = \"\",\n      message,\n    } = this.props;\n    const { mount = true } = this.state;\n    if (type == 'notice') {\n      return <div className={ className }>{ label }</div>;\n    }\n    return mount ? (\n      <div className={ className }>\n        <label htmlFor={ id }>{ label }</label>\n        <input\n          id={ id }\n          ref={ (ref) => this.input = ref }\n          type={ type }\n          onChange={ onChange }\n          placeholder={ hint }\n          defaultValue={ defaultValue }\n        />\n        {message && (\n          <span className={['message', message.type].join(' ').trim()}>\n            {message.message}</span>\n        )}\n      </div>\n    ) : null;\n  }\n}\n\nField.propTypes = {\n  onChange: PropTypes.func\n};\n\nAccounts.ui.Field = Field;\n"]},"hash":"70b367404080c10e8ffb4952443ef17941c40eb3"}

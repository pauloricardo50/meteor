{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../namedQuery.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"NamedQuery"}]},{"source":"./schema.js","imported":["ExposeSchema","ExposeDefaults"],"specifiers":[{"kind":"named","imported":"ExposeSchema","local":"ExposeSchema"},{"kind":"named","imported":"ExposeDefaults","local":"ExposeDefaults"}]},{"source":"./lib/mergeDeep.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"mergeDeep"}]},{"source":"../../query/lib/createGraph.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createGraph"}]},{"source":"../../query/lib/recursiveCompose.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"recursiveCompose"}]},{"source":"../../query/lib/prepareForProcess.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"prepareForProcess"}]},{"source":"lodash.clonedeep","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"deepClone"}]},{"source":"../../query/lib/intersectDeep","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"intersectDeep"}]},{"source":"../../query/counts/genEndpoint.server","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"genCountEndpoint"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js","filenameRelative":"packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"extension"},"ignored":false,"code":"var NamedQuery = void 0;\nmodule.watch(require(\"../namedQuery.js\"), {\n    \"default\": function (v) {\n        NamedQuery = v;\n    }\n}, 0);\nvar ExposeSchema = void 0,\n    ExposeDefaults = void 0;\nmodule.watch(require(\"./schema.js\"), {\n    ExposeSchema: function (v) {\n        ExposeSchema = v;\n    },\n    ExposeDefaults: function (v) {\n        ExposeDefaults = v;\n    }\n}, 1);\nvar mergeDeep = void 0;\nmodule.watch(require(\"./lib/mergeDeep.js\"), {\n    \"default\": function (v) {\n        mergeDeep = v;\n    }\n}, 2);\nvar createGraph = void 0;\nmodule.watch(require(\"../../query/lib/createGraph.js\"), {\n    \"default\": function (v) {\n        createGraph = v;\n    }\n}, 3);\nvar recursiveCompose = void 0;\nmodule.watch(require(\"../../query/lib/recursiveCompose.js\"), {\n    \"default\": function (v) {\n        recursiveCompose = v;\n    }\n}, 4);\nvar prepareForProcess = void 0;\nmodule.watch(require(\"../../query/lib/prepareForProcess.js\"), {\n    \"default\": function (v) {\n        prepareForProcess = v;\n    }\n}, 5);\nvar deepClone = void 0;\nmodule.watch(require(\"lodash.clonedeep\"), {\n    \"default\": function (v) {\n        deepClone = v;\n    }\n}, 6);\nvar intersectDeep = void 0;\nmodule.watch(require(\"../../query/lib/intersectDeep\"), {\n    \"default\": function (v) {\n        intersectDeep = v;\n    }\n}, 7);\nvar genCountEndpoint = void 0;\nmodule.watch(require(\"../../query/counts/genEndpoint.server\"), {\n    \"default\": function (v) {\n        genCountEndpoint = v;\n    }\n}, 8);\nvar check = void 0;\nmodule.watch(require(\"meteor/check\"), {\n    check: function (v) {\n        check = v;\n    }\n}, 9);\n\n_.extend(NamedQuery.prototype, {\n    /**\n     * @param config\n     */expose: function () {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        if (!Meteor.isServer) {\n            throw new Meteor.Error('invalid-environment', \"You must run this in server-side code\");\n        }\n\n        if (this.isExposed) {\n            throw new Meteor.Error('query-already-exposed', \"You have already exposed: \\\"\" + this.name + \"\\\" named query\");\n        }\n\n        this.exposeConfig = Object.assign({}, ExposeDefaults, config);\n        check(this.exposeConfig, ExposeSchema);\n\n        if (this.exposeConfig.validateParams) {\n            this.options.validateParams = this.exposeConfig.validateParams;\n        }\n\n        if (!this.isResolver) {\n            this._initNormalQuery();\n        } else {\n            this._initMethod();\n        }\n\n        this.isExposed = true;\n    },\n    /**\n     * Initializes a normal NamedQuery (normal == not a resolver)\n     * @private\n     */_initNormalQuery: function () {\n        var config = this.exposeConfig;\n\n        if (config.method) {\n            this._initMethod();\n        }\n\n        if (config.publication) {\n            this._initPublication();\n        }\n\n        if (!config.method && !config.publication) {\n            throw new Meteor.Error('weird', 'If you want to expose your named query you need to specify at least one of [\"method\", \"publication\"] options to true');\n        }\n\n        this._initCountMethod();\n\n        this._initCountPublication();\n    },\n    /**\n     * Returns the embodied body of the request\n     * @param {*} _embody \n     * @param {*} body \n     */doEmbodimentIfItApplies: function (body) {\n        // query is not exposed yet, so it doesn't have embodiment logic\n        if (!this.exposeConfig) {\n            return;\n        }\n\n        var embody = this.exposeConfig.embody;\n\n        if (!embody) {\n            return;\n        }\n\n        if (_.isFunction(embody)) {\n            embody.call(this, body, this.params);\n        } else {\n            mergeDeep(body, embody);\n        }\n    },\n    /**\n     * @private\n     */_initMethod: function () {\n        var _Meteor$methods;\n\n        var self = this;\n        Meteor.methods((_Meteor$methods = {}, _Meteor$methods[this.name] = function (newParams) {\n            self._unblockIfNecessary(this); // security is done in the fetching because we provide a context\n\n\n            return self.clone(newParams).fetch(this);\n        }, _Meteor$methods));\n    },\n    /**\n     * @returns {void}\n     * @private\n     */_initCountMethod: function () {\n        var _Meteor$methods2;\n\n        var self = this;\n        Meteor.methods((_Meteor$methods2 = {}, _Meteor$methods2[this.name + '.count'] = function (newParams) {\n            self._unblockIfNecessary(this); // security is done in the fetching because we provide a context\n\n\n            return self.clone(newParams).getCount(this);\n        }, _Meteor$methods2));\n    },\n    /**\n     * @returns {*}\n     * @private\n     */_initCountPublication: function () {\n        var self = this;\n        genCountEndpoint(self.name, {\n            getCursor: function (session) {\n                var query = self.clone(session.params);\n                return query.getCursorForCounting();\n            },\n            getSession: function (newParams) {\n                self.doValidateParams(newParams);\n\n                self._callFirewall(this, this.userId, params);\n\n                return {\n                    params: newParams\n                };\n            }\n        });\n    },\n    /**\n     * @private\n     */_initPublication: function () {\n        var self = this;\n        Meteor.publishComposite(this.name, function () {\n            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            self._unblockIfNecessary(this);\n\n            self.doValidateParams(params);\n\n            self._callFirewall(this, this.userId, params);\n\n            var body = deepClone(self.body);\n\n            if (params.$body) {\n                body = intersectDeep(body, params.$body);\n            }\n\n            self.doEmbodimentIfItApplies(body);\n            body = prepareForProcess(body, params);\n            var rootNode = createGraph(self.collection, body);\n            return recursiveCompose(rootNode);\n        });\n    },\n    /**\n     * @param context\n     * @param userId\n     * @param params\n     * @private\n     */_callFirewall: function (context, userId, params) {\n        var firewall = this.exposeConfig.firewall;\n\n        if (!firewall) {\n            return;\n        }\n\n        if (_.isArray(firewall)) {\n            firewall.forEach(function (fire) {\n                fire.call(context, userId, params);\n            });\n        } else {\n            firewall.call(context, userId, params);\n        }\n    },\n    /**\n     * @param context\n     * @private\n     */_unblockIfNecessary: function (context) {\n        if (this.exposeConfig.unblock) {\n            if (context.unblock) {\n                context.unblock();\n            }\n        }\n    }\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js"],"names":["NamedQuery","module","watch","require","v","ExposeSchema","ExposeDefaults","mergeDeep","createGraph","recursiveCompose","prepareForProcess","deepClone","intersectDeep","genCountEndpoint","check","_","extend","prototype","expose","config","Meteor","isServer","Error","isExposed","name","exposeConfig","Object","assign","validateParams","options","isResolver","_initNormalQuery","_initMethod","method","publication","_initPublication","_initCountMethod","_initCountPublication","doEmbodimentIfItApplies","body","embody","isFunction","call","params","self","methods","newParams","_unblockIfNecessary","clone","fetch","getCount","getCursor","session","query","getCursorForCounting","getSession","doValidateParams","_callFirewall","userId","publishComposite","$body","rootNode","collection","context","firewall","isArray","forEach","fire","unblock"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js.map","sourcesContent":["import NamedQuery from '../namedQuery.js';\nimport {ExposeSchema, ExposeDefaults} from './schema.js';\nimport mergeDeep from './lib/mergeDeep.js';\nimport createGraph from '../../query/lib/createGraph.js';\nimport recursiveCompose from '../../query/lib/recursiveCompose.js';\nimport prepareForProcess from '../../query/lib/prepareForProcess.js';\nimport deepClone from 'lodash.clonedeep';\nimport intersectDeep from '../../query/lib/intersectDeep';\nimport genCountEndpoint from '../../query/counts/genEndpoint.server';\nimport {check} from 'meteor/check';\n\n_.extend(NamedQuery.prototype, {\n    /**\n     * @param config\n     */\n    expose(config = {}) {\n        if (!Meteor.isServer) {\n            throw new Meteor.Error('invalid-environment', `You must run this in server-side code`);\n        }\n\n        if (this.isExposed) {\n            throw new Meteor.Error('query-already-exposed', `You have already exposed: \"${this.name}\" named query`);\n        }\n\n        this.exposeConfig = Object.assign({}, ExposeDefaults, config);\n        check(this.exposeConfig, ExposeSchema);\n\n        if (this.exposeConfig.validateParams) {\n            this.options.validateParams = this.exposeConfig.validateParams;\n        }\n\n        if (!this.isResolver) {\n            this._initNormalQuery();\n        } else {\n            this._initMethod();\n        }\n\n        this.isExposed = true;\n    },\n\n    /**\n     * Initializes a normal NamedQuery (normal == not a resolver)\n     * @private\n     */\n    _initNormalQuery() {\n        const config = this.exposeConfig;\n        if (config.method) {\n            this._initMethod();\n        }\n\n        if (config.publication) {\n            this._initPublication();\n        }\n\n        if (!config.method && !config.publication) {\n            throw new Meteor.Error('weird', 'If you want to expose your named query you need to specify at least one of [\"method\", \"publication\"] options to true')\n        }\n\n        this._initCountMethod();\n        this._initCountPublication();\n    },\n\n    /**\n     * Returns the embodied body of the request\n     * @param {*} _embody \n     * @param {*} body \n     */\n    doEmbodimentIfItApplies(body) {\n        // query is not exposed yet, so it doesn't have embodiment logic\n        if (!this.exposeConfig) {\n            return;\n        }\n\n        const {embody} = this.exposeConfig;\n\n        if (!embody) {\n            return;\n        }\n\n        if (_.isFunction(embody)) {\n            embody.call(this, body, this.params)\n        } else {\n            mergeDeep(\n                body,\n                embody\n            );\n        }\n    },\n\n    /**\n     * @private\n     */\n    _initMethod() {\n        const self = this;\n        Meteor.methods({\n            [this.name](newParams) {\n                self._unblockIfNecessary(this);\n\n                // security is done in the fetching because we provide a context\n                return self.clone(newParams).fetch(this);\n            }\n        })\n    },\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    _initCountMethod() {\n        const self = this;\n\n        Meteor.methods({\n            [this.name + '.count'](newParams) {\n                self._unblockIfNecessary(this);\n\n                // security is done in the fetching because we provide a context\n                return self.clone(newParams).getCount(this);\n            }\n        });\n    },\n\n    /**\n     * @returns {*}\n     * @private\n     */\n    _initCountPublication() {\n        const self = this;\n\n        genCountEndpoint(self.name, {\n            getCursor(session) {\n                const query = self.clone(session.params);\n                return query.getCursorForCounting();\n            },\n\n            getSession(newParams) {\n                self.doValidateParams(newParams);\n                self._callFirewall(this, this.userId, params);\n\n                return { params: newParams };\n            },\n        });\n    },\n\n    /**\n     * @private\n     */\n    _initPublication() {\n        const self = this;\n\n        Meteor.publishComposite(this.name, function (params = {}) {\n            self._unblockIfNecessary(this);\n            self.doValidateParams(params);\n            self._callFirewall(this, this.userId, params);\n\n            let body = deepClone(self.body);\n            if (params.$body) {\n                body = intersectDeep(body, params.$body);\n            }\n\n            self.doEmbodimentIfItApplies(body);\n            body = prepareForProcess(body, params);\n\n            const rootNode = createGraph(self.collection, body);\n\n            return recursiveCompose(rootNode);\n        });\n    },\n\n    /**\n     * @param context\n     * @param userId\n     * @param params\n     * @private\n     */\n    _callFirewall(context, userId, params) {\n        const {firewall} = this.exposeConfig;\n        if (!firewall) {\n            return;\n        }\n\n        if (_.isArray(firewall)) {\n            firewall.forEach(fire => {\n                fire.call(context, userId, params);\n            })\n        } else {\n            firewall.call(context, userId, params);\n        }\n    },\n\n    /**\n     * @param context\n     * @private\n     */\n    _unblockIfNecessary(context) {\n        if (this.exposeConfig.unblock) {\n            if (context.unblock) {\n                context.unblock();\n            }\n        }\n    },\n});\n"]},"hash":"565d011b70ade4654aa53b9578422baceb706857"}

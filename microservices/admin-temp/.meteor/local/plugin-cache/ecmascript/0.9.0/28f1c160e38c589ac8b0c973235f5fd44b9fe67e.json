{"metadata":{"usedHelpers":["defineProperty","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/edgee:slingshot","imported":["Slingshot"],"specifiers":[{"kind":"named","imported":"Slingshot","local":"Slingshot"}]},{"source":"react-dropzone-component","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DropzoneComponent"}]},{"source":"react-intl","imported":["injectIntl"],"specifiers":[{"kind":"named","imported":"injectIntl","local":"injectIntl"}]},{"source":"../../api/cleanMethods","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"cleanMethod"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/AutoForm/DropzoneInput.jsx","filenameRelative":"imports/core/components/AutoForm/DropzoneInput.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/AutoForm/DropzoneInput.jsx.map","sourceFileName":"imports/core/components/AutoForm/DropzoneInput.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"DropzoneInput"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\");\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function () {\n    function _default(v) {\n      PropTypes = v;\n    }\n\n    return _default;\n  }()\n}, 0);\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function () {\n    function _default(v) {\n      React = v;\n    }\n\n    return _default;\n  }()\n}, 1);\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function () {\n    function Meteor(v) {\n      _Meteor = v;\n    }\n\n    return Meteor;\n  }()\n}, 2);\n\nvar _Slingshot = void 0;\n\nmodule.watch(require(\"meteor/edgee:slingshot\"), {\n  Slingshot: function () {\n    function Slingshot(v) {\n      _Slingshot = v;\n    }\n\n    return Slingshot;\n  }()\n}, 3);\nvar DropzoneComponent = void 0;\nmodule.watch(require(\"react-dropzone-component\"), {\n  \"default\": function () {\n    function _default(v) {\n      DropzoneComponent = v;\n    }\n\n    return _default;\n  }()\n}, 4);\n\nvar _injectIntl = void 0;\n\nmodule.watch(require(\"react-intl\"), {\n  injectIntl: function () {\n    function injectIntl(v) {\n      _injectIntl = v;\n    }\n\n    return injectIntl;\n  }()\n}, 5);\nvar cleanMethod = void 0;\nmodule.watch(require(\"../../api/cleanMethods\"), {\n  \"default\": function () {\n    function _default(v) {\n      cleanMethod = v;\n    }\n\n    return _default;\n  }()\n}, 6);\n\nvar handleSave = function () {\n  function handleSave(props, file) {\n    var fileNameCount = '00';\n    var fileCount = 0;\n\n    if (props.currentValue) {\n      // Get a file count and prepend it to the file name\n      fileCount = Math.max.apply(Math, _toConsumableArray(props.currentValue.map(function (f) {\n        return f.fileCount;\n      }))) + 1;\n      fileNameCount = fileCount < 10 ? \"0\" + fileCount : fileCount;\n    }\n\n    var object = (0, _defineProperty3.default)({}, props.mongoId, {\n      name: \"\" + fileNameCount + file.name,\n      initialName: file.name,\n      size: file.size,\n      type: file.type,\n      url: file.xhr.responseURL,\n      key: file.postData[0].value,\n      status: 'UNVERIFIED',\n      fileCount: fileCount\n    });\n    cleanMethod(props.pushFunc, {\n      object: object,\n      id: props.docId\n    });\n  }\n\n  return handleSave;\n}();\n\nvar handleDelete = function () {\n  function handleDelete(props, fileToDelete) {\n    // Filter out the file we want to delete\n    var newFileArray = props.currentValue.filter(function (file) {\n      return file.key !== fileToDelete.key;\n    });\n    var object = {};\n    object[props.mongoId] = newFileArray;\n    cleanMethod(props.updateFunc, {\n      object: object,\n      id: props.docId\n    });\n  }\n\n  return handleDelete;\n}(); // Gets already uploaded files and simulates them being added to the dropzone\n// so they appear properly\n\n\nvar getUploadedFiles = function () {\n  function getUploadedFiles(_ref, myDropzone) {\n    var currentValue = _ref.currentValue;\n\n    // https://github.com/enyo/dropzone/wiki/FAQ#how-to-show-files-already-stored-on-server\n    if (currentValue) {\n      currentValue.forEach(function (file) {\n        myDropzone.emit('addedfile', file);\n        myDropzone.emit('complete', file);\n      });\n    }\n  }\n\n  return getUploadedFiles;\n}();\n\nvar componentConfig = function () {\n  function componentConfig(_ref2) {\n    var currentValue = _ref2.currentValue;\n    return {\n      iconFiletypes: ['.jpg', '.png', '.pdf'],\n      showFiletypeIcon: !currentValue || currentValue && currentValue.length < 1,\n      // Show if there are no uploaded files\n      postUrl: '/' // Modified later\n\n    };\n  }\n\n  return componentConfig;\n}();\n\nvar djsConfig = function () {\n  function djsConfig(props) {\n    return {\n      method: 'POST',\n      autoProcessQueue: true,\n      dictDefaultMessage: props.intl.formatMessage({\n        id: 'DropzoneInput.message'\n      }),\n      dictCancelUpload: props.intl.formatMessage({\n        id: 'DropzoneInput.cancelUpload'\n      }),\n      dictCancelUploadConfirmation: props.intl.formatMessage({\n        id: 'DropzoneInput.cancelUploadConfirmation'\n      }),\n      dictRemoveFile: props.intl.formatMessage({\n        id: 'DropzoneInput.removeFile'\n      }),\n      dictInvalidFileType: props.intl.formatMessage({\n        id: 'DropzoneInput.invalidFileType'\n      }),\n      maxFilesize: 100,\n      // MB\n      clickable: true,\n      acceptedFiles: 'image/*,application/pdf',\n      renameFileName: function () {\n        function renameFileName(fileName) {\n          // not working\n          return \"hi\" + fileName;\n        }\n\n        return renameFileName;\n      }(),\n      addRemoveLinks: true,\n      // TODO\n      parallelUploads: 1,\n      uploadMultiple: false,\n      accept: function () {\n        function accept(file, done) {\n          var _this = this;\n\n          var uploader = new _Slingshot.Upload('myFileUploads', (0, _extends3.default)({}, props, {\n            docId: props.docId\n          }));\n          uploader.file = file;\n          uploader.loan(function (error, instructions) {\n            if (error) {\n              done(error.message);\n            } else {\n              // options.url = instructions.upload + '/' + instructions.postData[0].value;\n              _this.options.url = instructions.upload;\n              file.postData = instructions.postData;\n              done();\n            }\n          });\n        }\n\n        return accept;\n      }()\n    };\n  }\n\n  return djsConfig;\n}();\n\nvar eventHandlers = function () {\n  function eventHandlers(props) {\n    return {\n      init: function () {\n        function init(dropzone) {\n          return getUploadedFiles(props, dropzone);\n        }\n\n        return init;\n      }(),\n      success: function () {\n        function success(file, response) {\n          handleSave(props, file);\n        }\n\n        return success;\n      }(),\n      removedfile: function () {\n        function removedfile(file) {\n          var _this2 = this;\n\n          _Meteor.call('deleteFile', file.key, function (err, result) {\n            if (err) {\n              // Put the file back\n              _this2.emit('addedfile', file);\n\n              _this2.emit('complete', file);\n            } else {\n              handleDelete(props, file);\n            }\n          });\n        }\n\n        return removedfile;\n      }(),\n      sending: function () {\n        function sending(file, xhr, formData) {\n          file.postData.forEach(function (field) {\n            formData.append(field.name, field.value);\n          });\n        }\n\n        return sending;\n      }()\n    };\n  }\n\n  return eventHandlers;\n}();\n\nvar DropzoneInput = function () {\n  function DropzoneInput(props) {\n    return React.createElement(\n      \"div\",\n      null,\n      props.label && React.createElement(\n        \"h3\",\n        {\n          htmlFor: props.id\n        },\n        props.label\n      ),\n      React.createElement(DropzoneComponent, {\n        name: props.id,\n        config: componentConfig(props),\n        eventHandlers: eventHandlers(props),\n        djsConfig: djsConfig(props)\n      })\n    );\n  }\n\n  return DropzoneInput;\n}();\n\nDropzoneInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  currentValue: PropTypes.arrayOf(PropTypes.object),\n  mongoId: PropTypes.string.isRequired,\n  docId: PropTypes.string.isRequired,\n  pushFunc: PropTypes.string.isRequired,\n  updateFunc: PropTypes.string.isRequired,\n  collection: PropTypes.string.isRequired\n};\nDropzoneInput.defaultProps = {\n  label: '',\n  currentValue: undefined\n};\nmodule.exportDefault(_injectIntl(DropzoneInput));","map":{"version":3,"sources":["imports/core/components/AutoForm/DropzoneInput.jsx"],"names":["PropTypes","module","watch","require","v","React","Meteor","Slingshot","DropzoneComponent","injectIntl","cleanMethod","handleSave","props","file","fileNameCount","fileCount","currentValue","Math","max","map","f","object","mongoId","name","initialName","size","type","url","xhr","responseURL","key","postData","value","status","pushFunc","id","docId","handleDelete","fileToDelete","newFileArray","filter","updateFunc","getUploadedFiles","myDropzone","forEach","emit","componentConfig","iconFiletypes","showFiletypeIcon","length","postUrl","djsConfig","method","autoProcessQueue","dictDefaultMessage","intl","formatMessage","dictCancelUpload","dictCancelUploadConfirmation","dictRemoveFile","dictInvalidFileType","maxFilesize","clickable","acceptedFiles","renameFileName","fileName","addRemoveLinks","parallelUploads","uploadMultiple","accept","done","uploader","Upload","loan","error","instructions","message","options","upload","eventHandlers","init","dropzone","success","response","removedfile","call","err","result","sending","formData","field","append","DropzoneInput","label","propTypes","string","isRequired","arrayOf","collection","defaultProps","undefined","exportDefault"],"mappings":";;;;;;;;;;;;;;AAAA,IAAIA,kBAAJ;AAAcC,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACJ,kBAAUI,CAAV;AAAY;;AAAxB;AAAA;AAAA,CAAnC,EAA6D,CAA7D;AAAgE,IAAIC,cAAJ;AAAUJ,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACC,cAAMD,CAAN;AAAQ;;AAApB;AAAA;AAAA,CAA9B,EAAoD,CAApD;;AAAuD,IAAIE,gBAAJ;;AAAWL,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACG,QAAD;AAAA,oBAAQF,CAAR,EAAU;AAACE,gBAAOF,CAAP;AAAS;;AAApB;AAAA;AAAA,CAAtC,EAA4D,CAA5D;;AAA+D,IAAIG,mBAAJ;;AAAcN,OAAOC,KAAP,CAAaC,QAAQ,wBAAR,CAAb,EAA+C;AAACI,WAAD;AAAA,uBAAWH,CAAX,EAAa;AAACG,mBAAUH,CAAV;AAAY;;AAA1B;AAAA;AAAA,CAA/C,EAA2E,CAA3E;AAA8E,IAAII,0BAAJ;AAAsBP,OAAOC,KAAP,CAAaC,QAAQ,0BAAR,CAAb,EAAiD;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACI,0BAAkBJ,CAAlB;AAAoB;;AAAhC;AAAA;AAAA,CAAjD,EAAmF,CAAnF;;AAAsF,IAAIK,oBAAJ;;AAAeR,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAACM,YAAD;AAAA,wBAAYL,CAAZ,EAAc;AAACK,oBAAWL,CAAX;AAAa;;AAA5B;AAAA;AAAA,CAAnC,EAAiE,CAAjE;AAAoE,IAAIM,oBAAJ;AAAgBT,OAAOC,KAAP,CAAaC,QAAQ,wBAAR,CAAb,EAA+C;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACM,oBAAYN,CAAZ;AAAc;;AAA1B;AAAA;AAAA,CAA/C,EAA2E,CAA3E;;AASpgB,IAAMO;AAAa,WAAbA,UAAa,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAClC,QAAIC,gBAAgB,IAApB;AACA,QAAIC,YAAY,CAAhB;;AACA,QAAIH,MAAMI,YAAV,EAAwB;AACtB;AACAD,kBAAYE,KAAKC,GAAL,gCAAYN,MAAMI,YAAN,CAAmBG,GAAnB,CAAuB;AAAA,eAAKC,EAAEL,SAAP;AAAA,OAAvB,CAAZ,KAAwD,CAApE;AACAD,sBAAgBC,YAAY,EAAZ,SAAqBA,SAArB,GAAmCA,SAAnD;AACD;;AAED,QAAMM,2CACHT,MAAMU,OADH,EACa;AACfC,iBAAST,aAAT,GAAyBD,KAAKU,IADf;AAEfC,mBAAaX,KAAKU,IAFH;AAGfE,YAAMZ,KAAKY,IAHI;AAIfC,YAAMb,KAAKa,IAJI;AAKfC,WAAKd,KAAKe,GAAL,CAASC,WALC;AAMfC,WAAKjB,KAAKkB,QAAL,CAAc,CAAd,EAAiBC,KANP;AAOfC,cAAQ,YAPO;AAQflB;AARe,KADb,CAAN;AAaAL,gBAAYE,MAAMsB,QAAlB,EAA4B;AAAEb,oBAAF;AAAUc,UAAIvB,MAAMwB;AAApB,KAA5B;AACD;;AAvBK;AAAA,GAAN;;AAyBA,IAAMC;AAAe,WAAfA,YAAe,CAACzB,KAAD,EAAQ0B,YAAR,EAAyB;AAC5C;AACA,QAAMC,eAAe3B,MAAMI,YAAN,CAAmBwB,MAAnB,CAA0B;AAAA,aAAQ3B,KAAKiB,GAAL,KAAaQ,aAAaR,GAAlC;AAAA,KAA1B,CAArB;AACA,QAAMT,SAAS,EAAf;AACAA,WAAOT,MAAMU,OAAb,IAAwBiB,YAAxB;AAEA7B,gBAAYE,MAAM6B,UAAlB,EAA8B;AAAEpB,oBAAF;AAAUc,UAAIvB,MAAMwB;AAApB,KAA9B;AACD;;AAPK;AAAA,GAAN,C,CASA;AACA;;;AACA,IAAMM;AAAmB,WAAnBA,gBAAmB,OAAmBC,UAAnB,EAAkC;AAAA,QAA/B3B,YAA+B,QAA/BA,YAA+B;;AACzD;AACA,QAAIA,YAAJ,EAAkB;AAChBA,mBAAa4B,OAAb,CAAqB,UAAC/B,IAAD,EAAU;AAC7B8B,mBAAWE,IAAX,CAAgB,WAAhB,EAA6BhC,IAA7B;AACA8B,mBAAWE,IAAX,CAAgB,UAAhB,EAA4BhC,IAA5B;AACD,OAHD;AAID;AACF;;AARK;AAAA,GAAN;;AAUA,IAAMiC;AAAkB,WAAlBA,eAAkB;AAAA,QAAG9B,YAAH,SAAGA,YAAH;AAAA,WAAuB;AAC7C+B,qBAAe,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAD8B;AAE7CC,wBAAkB,CAAChC,YAAD,IAAkBA,gBAAgBA,aAAaiC,MAAb,GAAsB,CAF7B;AAEiC;AAC9EC,eAAS,GAHoC,CAG/B;;AAH+B,KAAvB;AAAA;;AAAlB;AAAA,GAAN;;AAMA,IAAMC;AAAY,WAAZA,SAAY;AAAA,WAAU;AAC1BC,cAAQ,MADkB;AAE1BC,wBAAkB,IAFQ;AAG1BC,0BAAoB1C,MAAM2C,IAAN,CAAWC,aAAX,CAAyB;AAAErB,YAAI;AAAN,OAAzB,CAHM;AAI1BsB,wBAAkB7C,MAAM2C,IAAN,CAAWC,aAAX,CAAyB;AACzCrB,YAAI;AADqC,OAAzB,CAJQ;AAO1BuB,oCAA8B9C,MAAM2C,IAAN,CAAWC,aAAX,CAAyB;AACrDrB,YAAI;AADiD,OAAzB,CAPJ;AAU1BwB,sBAAgB/C,MAAM2C,IAAN,CAAWC,aAAX,CAAyB;AAAErB,YAAI;AAAN,OAAzB,CAVU;AAW1ByB,2BAAqBhD,MAAM2C,IAAN,CAAWC,aAAX,CAAyB;AAC5CrB,YAAI;AADwC,OAAzB,CAXK;AAc1B0B,mBAAa,GAda;AAcR;AAClBC,iBAAW,IAfe;AAgB1BC,qBAAe,yBAhBW;AAiB1BC,oBAjB0B;AAAA,gCAiBXC,QAjBW,EAiBD;AACvB;AACA,wBAAYA,QAAZ;AACD;;AApByB;AAAA;AAqB1BC,sBAAgB,IArBU;AAqBJ;AACtBC,uBAAiB,CAtBS;AAuB1BC,sBAAgB,KAvBU;AAwB1BC,YAxB0B;AAAA,wBAwBnBxD,IAxBmB,EAwBbyD,IAxBa,EAwBP;AAAA;;AACjB,cAAMC,WAAW,IAAIhE,WAAUiE,MAAd,CAAqB,eAArB,6BACZ5D,KADY;AAEfwB,mBAAOxB,MAAMwB;AAFE,aAAjB;AAKAmC,mBAAS1D,IAAT,GAAgBA,IAAhB;AACA0D,mBAASE,IAAT,CAAc,UAACC,KAAD,EAAQC,YAAR,EAAyB;AACrC,gBAAID,KAAJ,EAAW;AACTJ,mBAAKI,MAAME,OAAX;AACD,aAFD,MAEO;AACL;AACA,oBAAKC,OAAL,CAAalD,GAAb,GAAmBgD,aAAaG,MAAhC;AACAjE,mBAAKkB,QAAL,GAAgB4C,aAAa5C,QAA7B;AACAuC;AACD;AACF,WATD;AAUD;;AAzCyB;AAAA;AAAA,KAAV;AAAA;;AAAZ;AAAA,GAAN;;AA4CA,IAAMS;AAAgB,WAAhBA,aAAgB;AAAA,WAAU;AAC9BC;AAAM;AAAA,iBAAYtC,iBAAiB9B,KAAjB,EAAwBqE,QAAxB,CAAZ;AAAA;;AAAN;AAAA,SAD8B;AAE9BC;AAAS,yBAACrE,IAAD,EAAOsE,QAAP,EAAoB;AAC3BxE,qBAAWC,KAAX,EAAkBC,IAAlB;AACD;;AAFD;AAAA,SAF8B;AAK9BuE,iBAL8B;AAAA,6BAKlBvE,IALkB,EAKZ;AAAA;;AAChBP,kBAAO+E,IAAP,CAAY,YAAZ,EAA0BxE,KAAKiB,GAA/B,EAAoC,UAACwD,GAAD,EAAMC,MAAN,EAAiB;AACnD,gBAAID,GAAJ,EAAS;AACP;AACA,qBAAKzC,IAAL,CAAU,WAAV,EAAuBhC,IAAvB;;AACA,qBAAKgC,IAAL,CAAU,UAAV,EAAsBhC,IAAtB;AACD,aAJD,MAIO;AACLwB,2BAAazB,KAAb,EAAoBC,IAApB;AACD;AACF,WARD;AASD;;AAf6B;AAAA;AAgB9B2E,aAhB8B;AAAA,yBAgBtB3E,IAhBsB,EAgBhBe,GAhBgB,EAgBX6D,QAhBW,EAgBD;AAC3B5E,eAAKkB,QAAL,CAAca,OAAd,CAAsB,UAAC8C,KAAD,EAAW;AAC/BD,qBAASE,MAAT,CAAgBD,MAAMnE,IAAtB,EAA4BmE,MAAM1D,KAAlC;AACD,WAFD;AAGD;;AApB6B;AAAA;AAAA,KAAV;AAAA;;AAAhB;AAAA,GAAN;;AAuBA,IAAM4D;AAAgB,WAAhBA,aAAgB;AAAA,WACpB;AAAA;AAAA;AACGhF,YAAMiF,KAAN,IAAe;AAAA;AAAA;AAAI,mBAASjF,MAAMuB;AAAnB;AAAwBvB,cAAMiF;AAA9B,OADlB;AAEE,0BAAC,iBAAD;AACE,cAAMjF,MAAMuB,EADd;AAEE,gBAAQW,gBAAgBlC,KAAhB,CAFV;AAGE,uBAAemE,cAAcnE,KAAd,CAHjB;AAIE,mBAAWuC,UAAUvC,KAAV;AAJb;AAFF,KADoB;AAAA;;AAAhB;AAAA,GAAN;;AAYAgF,cAAcE,SAAd,GAA0B;AACxB3D,MAAInC,UAAU+F,MAAV,CAAiBC,UADG;AAExBH,SAAO7F,UAAU+F,MAFO;AAGxB/E,gBAAchB,UAAUiG,OAAV,CAAkBjG,UAAUqB,MAA5B,CAHU;AAIxBC,WAAStB,UAAU+F,MAAV,CAAiBC,UAJF;AAKxB5D,SAAOpC,UAAU+F,MAAV,CAAiBC,UALA;AAMxB9D,YAAUlC,UAAU+F,MAAV,CAAiBC,UANH;AAOxBvD,cAAYzC,UAAU+F,MAAV,CAAiBC,UAPL;AAQxBE,cAAYlG,UAAU+F,MAAV,CAAiBC;AARL,CAA1B;AAWAJ,cAAcO,YAAd,GAA6B;AAC3BN,SAAO,EADoB;AAE3B7E,gBAAcoF;AAFa,CAA7B;AAvJAnG,OAAOoG,aAAP,CA4Je5F,YAAWmF,aAAX,CA5Jf","file":"imports/core/components/AutoForm/DropzoneInput.jsx.map","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Meteor } from 'meteor/meteor';\nimport { Slingshot } from 'meteor/edgee:slingshot';\nimport DropzoneComponent from 'react-dropzone-component';\nimport { injectIntl } from 'react-intl';\n\nimport cleanMethod from 'core/api/cleanMethods';\n\nconst handleSave = (props, file) => {\n  let fileNameCount = '00';\n  let fileCount = 0;\n  if (props.currentValue) {\n    // Get a file count and prepend it to the file name\n    fileCount = Math.max(...props.currentValue.map(f => f.fileCount)) + 1;\n    fileNameCount = fileCount < 10 ? `0${fileCount}` : fileCount;\n  }\n\n  const object = {\n    [props.mongoId]: {\n      name: `${fileNameCount}${file.name}`,\n      initialName: file.name,\n      size: file.size,\n      type: file.type,\n      url: file.xhr.responseURL,\n      key: file.postData[0].value,\n      status: 'UNVERIFIED',\n      fileCount,\n    },\n  };\n\n  cleanMethod(props.pushFunc, { object, id: props.docId });\n};\n\nconst handleDelete = (props, fileToDelete) => {\n  // Filter out the file we want to delete\n  const newFileArray = props.currentValue.filter(file => file.key !== fileToDelete.key);\n  const object = {};\n  object[props.mongoId] = newFileArray;\n\n  cleanMethod(props.updateFunc, { object, id: props.docId });\n};\n\n// Gets already uploaded files and simulates them being added to the dropzone\n// so they appear properly\nconst getUploadedFiles = ({ currentValue }, myDropzone) => {\n  // https://github.com/enyo/dropzone/wiki/FAQ#how-to-show-files-already-stored-on-server\n  if (currentValue) {\n    currentValue.forEach((file) => {\n      myDropzone.emit('addedfile', file);\n      myDropzone.emit('complete', file);\n    });\n  }\n};\n\nconst componentConfig = ({ currentValue }) => ({\n  iconFiletypes: ['.jpg', '.png', '.pdf'],\n  showFiletypeIcon: !currentValue || (currentValue && currentValue.length < 1), // Show if there are no uploaded files\n  postUrl: '/', // Modified later\n});\n\nconst djsConfig = props => ({\n  method: 'POST',\n  autoProcessQueue: true,\n  dictDefaultMessage: props.intl.formatMessage({ id: 'DropzoneInput.message' }),\n  dictCancelUpload: props.intl.formatMessage({\n    id: 'DropzoneInput.cancelUpload',\n  }),\n  dictCancelUploadConfirmation: props.intl.formatMessage({\n    id: 'DropzoneInput.cancelUploadConfirmation',\n  }),\n  dictRemoveFile: props.intl.formatMessage({ id: 'DropzoneInput.removeFile' }),\n  dictInvalidFileType: props.intl.formatMessage({\n    id: 'DropzoneInput.invalidFileType',\n  }),\n  maxFilesize: 100, // MB\n  clickable: true,\n  acceptedFiles: 'image/*,application/pdf',\n  renameFileName(fileName) {\n    // not working\n    return `hi${fileName}`;\n  },\n  addRemoveLinks: true, // TODO\n  parallelUploads: 1,\n  uploadMultiple: false,\n  accept(file, done) {\n    const uploader = new Slingshot.Upload('myFileUploads', {\n      ...props,\n      docId: props.docId,\n    });\n\n    uploader.file = file;\n    uploader.loan((error, instructions) => {\n      if (error) {\n        done(error.message);\n      } else {\n        // options.url = instructions.upload + '/' + instructions.postData[0].value;\n        this.options.url = instructions.upload;\n        file.postData = instructions.postData;\n        done();\n      }\n    });\n  },\n});\n\nconst eventHandlers = props => ({\n  init: dropzone => getUploadedFiles(props, dropzone),\n  success: (file, response) => {\n    handleSave(props, file);\n  },\n  removedfile(file) {\n    Meteor.call('deleteFile', file.key, (err, result) => {\n      if (err) {\n        // Put the file back\n        this.emit('addedfile', file);\n        this.emit('complete', file);\n      } else {\n        handleDelete(props, file);\n      }\n    });\n  },\n  sending(file, xhr, formData) {\n    file.postData.forEach((field) => {\n      formData.append(field.name, field.value);\n    });\n  },\n});\n\nconst DropzoneInput = props => (\n  <div>\n    {props.label && <h3 htmlFor={props.id}>{props.label}</h3>}\n    <DropzoneComponent\n      name={props.id}\n      config={componentConfig(props)}\n      eventHandlers={eventHandlers(props)}\n      djsConfig={djsConfig(props)}\n    />\n  </div>\n);\n\nDropzoneInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  currentValue: PropTypes.arrayOf(PropTypes.object),\n  mongoId: PropTypes.string.isRequired,\n  docId: PropTypes.string.isRequired,\n  pushFunc: PropTypes.string.isRequired,\n  updateFunc: PropTypes.string.isRequired,\n  collection: PropTypes.string.isRequired,\n};\n\nDropzoneInput.defaultProps = {\n  label: '',\n  currentValue: undefined,\n};\n\nexport default injectIntl(DropzoneInput);\n"]},"hash":"28f1c160e38c589ac8b0c973235f5fd44b9fe67e"}

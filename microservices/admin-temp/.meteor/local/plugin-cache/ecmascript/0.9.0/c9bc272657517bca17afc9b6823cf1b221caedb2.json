{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./fieldNode.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"FieldNode"}]},{"source":"./reducerNode.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReducerNode"}]},{"source":"lodash.clonedeep","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"deepClone"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]}],"exports":{"exported":["CollectionNode"],"specifiers":[{"kind":"local","local":"CollectionNode","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"collectionNode"},"ignored":false,"code":"module.export({\n    default: () => CollectionNode\n});\nlet FieldNode;\nmodule.watch(require(\"./fieldNode.js\"), {\n    default(v) {\n        FieldNode = v;\n    }\n\n}, 0);\nlet ReducerNode;\nmodule.watch(require(\"./reducerNode.js\"), {\n    default(v) {\n        ReducerNode = v;\n    }\n\n}, 1);\nlet deepClone;\nmodule.watch(require(\"lodash.clonedeep\"), {\n    default(v) {\n        deepClone = v;\n    }\n\n}, 2);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n    check(v) {\n        check = v;\n    },\n\n    Match(v) {\n        Match = v;\n    }\n\n}, 3);\n\nclass CollectionNode {\n    constructor(collection, body = {}, linkName = null) {\n        if (collection && !_.isObject(body)) {\n            throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');\n        }\n\n        this.body = deepClone(body);\n        this.linkName = linkName;\n        this.collection = collection;\n        this.nodes = [];\n        this.props = {};\n        this.parent = null;\n        this.linker = null;\n        this.linkStorageField = null;\n        this.scheduledForDeletion = false;\n        this.reducers = [];\n        this.results = [];\n        this.snapCaches = {}; // {cacheField: linkName}\n\n        this.snapCachesSingles = []; // [cacheField1, cacheField2]\n    }\n\n    get collectionNodes() {\n        return _.filter(this.nodes, n => n instanceof CollectionNode);\n    }\n\n    get fieldNodes() {\n        return _.filter(this.nodes, n => n instanceof FieldNode);\n    }\n\n    get reducerNodes() {\n        return _.filter(this.nodes, n => n instanceof ReducerNode);\n    } /**\n       * Adds children to itself\n       *\n       * @param node\n       * @param linker\n       */\n\n    add(node, linker) {\n        node.parent = this;\n\n        if (linker) {\n            node.linker = linker;\n            node.linkStorageField = linker.linkStorageField;\n            node.isMeta = linker.isMeta();\n            node.isVirtual = linker.isVirtual();\n            node.isOneResult = linker.isOneResult();\n            node.shouldCleanStorage = this._shouldCleanStorage(node);\n        }\n\n        this.nodes.push(node);\n    } /**\n       * @param prop\n       * @param value\n       */\n\n    addProp(prop, value) {\n        if (prop === '$postFilter') {\n            check(value, Match.OneOf(Function, [Function]));\n        }\n\n        _.extend(this.props, {\n            [prop]: value\n        });\n    } /**\n       * @param _node\n       */\n\n    remove(_node) {\n        this.nodes = _.filter(this.nodes, node => _node !== node);\n    } /**\n       * @param filters\n       * @param options\n       */\n\n    applyFields(filters, options) {\n        let hasAddedAnyField = false;\n\n        _.each(this.fieldNodes, n => {\n            hasAddedAnyField = true;\n            n.applyFields(options.fields);\n        }); // it will only get here if it has collectionNodes children\n\n\n        _.each(this.collectionNodes, collectionNode => {\n            let linker = collectionNode.linker;\n\n            if (linker && !linker.isVirtual()) {\n                options.fields[linker.linkStorageField] = 1;\n                hasAddedAnyField = true;\n            }\n        }); // if he selected filters, we should automatically add those fields\n\n\n        _.each(filters, (value, field) => {\n            // special handling for the $meta filter and conditional operators\n            if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {\n                // if the field or the parent of the field already exists, don't add it\n                if (!_.has(options.fields, field.split('.')[0])) {\n                    hasAddedAnyField = true;\n                    options.fields[field] = 1;\n                }\n            }\n        });\n\n        if (!hasAddedAnyField) {\n            options.fields = {\n                _id: 1\n            };\n        }\n    } /**\n       * @param fieldName\n       * @returns {boolean}\n       */\n\n    hasField(fieldName) {\n        return !!_.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName;\n        });\n    } /**\n       * @param fieldName\n       * @returns {FieldNode}\n       */\n\n    getField(fieldName) {\n        return _.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName;\n        });\n    } /**\n       * @param name\n       * @returns {boolean}\n       */\n\n    hasCollectionNode(name) {\n        return !!_.find(this.collectionNodes, node => {\n            return node.linkName == name;\n        });\n    } /**\n       * @param name\n       * @returns {boolean}\n       */\n\n    hasReducerNode(name) {\n        return !!_.find(this.reducerNodes, node => {\n            return node.name == name;\n        });\n    } /**\n       * @param name\n       * @returns {ReducerNode}\n       */\n\n    getReducerNode(name) {\n        return _.find(this.reducerNodes, node => {\n            return node.name == name;\n        });\n    } /**\n       * @param name\n       * @returns {CollectionNode}\n       */\n\n    getCollectionNode(name) {\n        return _.find(this.collectionNodes, node => {\n            return node.linkName == name;\n        });\n    } /**\n       * @returns {*}\n       */\n\n    getName() {\n        return this.linkName ? this.linkName : this.collection ? this.collection._name : 'N/A';\n    } /**\n       * This is used for caching links\n       *\n       * @param cacheField\n       * @param subLinkName\n       */\n\n    snapCache(cacheField, subLinkName) {\n        this.snapCaches[cacheField] = subLinkName;\n\n        if (this.collection.getLinker(subLinkName).isOneResult()) {\n            this.snapCachesSingles.push(cacheField);\n        }\n    } /**\n       * This method verifies whether to remove the linkStorageField form the results\n       * unless you specify it in your query.\n       *\n       * @param node\n       * @returns {boolean}\n       * @private\n       */\n\n    _shouldCleanStorage(node) {\n        if (node.linkStorageField === '_id') {\n            return false;\n        } else {\n            if (node.isVirtual) {\n                return !node.hasField(node.linkStorageField);\n            } else {\n                return !this.hasField(node.linkStorageField);\n            }\n        }\n    }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js"],"names":["module","export","default","CollectionNode","FieldNode","watch","require","v","ReducerNode","deepClone","check","Match","constructor","collection","body","linkName","_","isObject","Meteor","Error","nodes","props","parent","linker","linkStorageField","scheduledForDeletion","reducers","results","snapCaches","snapCachesSingles","collectionNodes","filter","n","fieldNodes","reducerNodes","add","node","isMeta","isVirtual","isOneResult","shouldCleanStorage","_shouldCleanStorage","push","addProp","prop","value","OneOf","Function","extend","remove","_node","applyFields","filters","options","hasAddedAnyField","each","fields","collectionNode","field","contains","has","split","_id","hasField","fieldName","find","fieldNode","name","getField","hasCollectionNode","hasReducerNode","getReducerNode","getCollectionNode","getName","_name","snapCache","cacheField","subLinkName","getLinker"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js.map","sourcesContent":["import FieldNode from './fieldNode.js';\nimport ReducerNode from './reducerNode.js';\nimport deepClone from 'lodash.clonedeep';\nimport {check, Match} from 'meteor/check';\n\nexport default class CollectionNode {\n    constructor(collection, body = {}, linkName = null) {\n        if (collection && !_.isObject(body)) {\n            throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');\n        }\n\n        this.body = deepClone(body);\n        this.linkName = linkName;\n        this.collection = collection;\n\n        this.nodes = [];\n        this.props = {};\n        this.parent = null;\n        this.linker = null;\n        this.linkStorageField = null;\n        this.scheduledForDeletion = false;\n        this.reducers = [];\n        this.results = [];\n        this.snapCaches = {}; // {cacheField: linkName}\n        this.snapCachesSingles = []; // [cacheField1, cacheField2]\n    }\n\n    get collectionNodes() {\n        return _.filter(this.nodes, n => n instanceof CollectionNode)\n    }\n\n    get fieldNodes() {\n        return _.filter(this.nodes, n => n instanceof FieldNode);\n    }\n\n    get reducerNodes() {\n        return _.filter(this.nodes, n => n instanceof ReducerNode);\n    }\n\n    /**\n     * Adds children to itself\n     *\n     * @param node\n     * @param linker\n     */\n    add(node, linker) {\n        node.parent = this;\n\n        if (linker) {\n            node.linker = linker;\n            node.linkStorageField = linker.linkStorageField;\n            node.isMeta = linker.isMeta();\n            node.isVirtual = linker.isVirtual();\n            node.isOneResult = linker.isOneResult();\n            node.shouldCleanStorage = this._shouldCleanStorage(node);\n        }\n\n        this.nodes.push(node);\n    }\n\n    /**\n     * @param prop\n     * @param value\n     */\n    addProp(prop, value) {\n        if (prop === '$postFilter') {\n            check(value, Match.OneOf(Function, [Function]))\n        }\n\n        _.extend(this.props, {\n            [prop]: value\n        });\n    }\n\n    /**\n     * @param _node\n     */\n    remove(_node) {\n        this.nodes = _.filter(this.nodes, node => _node !== node);\n    }\n\n    /**\n     * @param filters\n     * @param options\n     */\n    applyFields(filters, options) {\n        let hasAddedAnyField = false;\n\n        _.each(this.fieldNodes, n => {\n            hasAddedAnyField = true;\n            n.applyFields(options.fields)\n        });\n\n        // it will only get here if it has collectionNodes children\n        _.each(this.collectionNodes, (collectionNode) => {\n            let linker = collectionNode.linker;\n\n            if (linker && !linker.isVirtual()) {\n                options.fields[linker.linkStorageField] = 1;\n                hasAddedAnyField = true;\n            }\n        });\n\n        // if he selected filters, we should automatically add those fields\n        _.each(filters, (value, field) => {\n            // special handling for the $meta filter and conditional operators\n            if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {\n                // if the field or the parent of the field already exists, don't add it\n                if (!_.has(options.fields, field.split('.')[0])){\n                    hasAddedAnyField = true;\n                    options.fields[field] = 1;\n                }\n            }\n        });\n\n        if (!hasAddedAnyField) {\n            options.fields = {_id: 1};\n        }\n    }\n\n    /**\n     * @param fieldName\n     * @returns {boolean}\n     */\n    hasField(fieldName) {\n        return !!_.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param fieldName\n     * @returns {FieldNode}\n     */\n    getField(fieldName) {\n        return _.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasCollectionNode(name) {\n        return !!_.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasReducerNode(name) {\n        return !!_.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {ReducerNode}\n     */\n    getReducerNode(name) {\n        return _.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {CollectionNode}\n     */\n    getCollectionNode(name) {\n        return _.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @returns {*}\n     */\n    getName() {\n        return this.linkName\n            ? this.linkName\n            : (this.collection ? this.collection._name : 'N/A');\n    }\n\n    /**\n     * This is used for caching links\n     *\n     * @param cacheField\n     * @param subLinkName\n     */\n    snapCache(cacheField, subLinkName) {\n        this.snapCaches[cacheField] = subLinkName;\n\n        if (this.collection.getLinker(subLinkName).isOneResult()) {\n            this.snapCachesSingles.push(cacheField);\n        }\n    }\n\n    /**\n     * This method verifies whether to remove the linkStorageField form the results\n     * unless you specify it in your query.\n     *\n     * @param node\n     * @returns {boolean}\n     * @private\n     */\n    _shouldCleanStorage(node) {\n        if (node.linkStorageField === '_id') {\n            return false;\n        } else {\n            if (node.isVirtual) {\n                return !node.hasField(node.linkStorageField);\n            } else {\n                return !this.hasField(node.linkStorageField);\n            }\n        }\n    }\n}\n"]},"hash":"c9bc272657517bca17afc9b6823cf1b221caedb2"}

{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","createClass","classCallCheck","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react","imported":["default","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"./FormValidator","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"FormValidator"}]}],"exports":{"exported":["ConditionalInput"],"specifiers":[{"kind":"local","local":"ConditionalInput","exported":"default"}]}}},"options":{"filename":"imports/core/components/AutoForm/ConditionalInput.jsx","filenameRelative":"imports/core/components/AutoForm/ConditionalInput.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/AutoForm/ConditionalInput.jsx.map","sourceFileName":"imports/core/components/AutoForm/ConditionalInput.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ConditionalInput"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  \"default\": function () {\n    function _default() {\n      return ConditionalInput;\n    }\n\n    return _default;\n  }()\n});\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function () {\n    function _default(v) {\n      PropTypes = v;\n    }\n\n    return _default;\n  }()\n}, 0);\n\nvar React = void 0,\n    _Component = void 0;\n\nmodule.watch(require(\"react\"), {\n  \"default\": function () {\n    function _default(v) {\n      React = v;\n    }\n\n    return _default;\n  }(),\n  Component: function () {\n    function Component(v) {\n      _Component = v;\n    }\n\n    return Component;\n  }()\n}, 1);\nvar FormValidator = void 0;\nmodule.watch(require(\"./FormValidator\"), {\n  \"default\": function () {\n    function _default(v) {\n      FormValidator = v;\n    }\n\n    return _default;\n  }()\n}, 2);\n\nvar ConditionalInput = function (_Component2) {\n  (0, _inherits3.default)(ConditionalInput, _Component2);\n\n  function ConditionalInput(props) {\n    (0, _classCallCheck3.default)(this, ConditionalInput);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (ConditionalInput.__proto__ || Object.getPrototypeOf(ConditionalInput)).call(this, props));\n\n    _this.onConditionalChange = function (value) {\n      // Make sure boolean values are treated as booleans\n      var safeValue = value;\n\n      if (value === 'true') {\n        safeValue = true;\n      } else if (value === 'false') {\n        safeValue = false;\n      }\n\n      _this.setConditional(safeValue);\n    };\n\n    _this.setConditional = function (value) {\n      return _this.setState({\n        conditional: value === _this.props.conditionalTrueValue\n      });\n    };\n\n    _this.state = {\n      conditional: false\n    };\n    return _this;\n  } // Set the state of the conditional on load\n\n\n  (0, _createClass3.default)(ConditionalInput, [{\n    key: \"componentDidMount\",\n    value: function () {\n      function componentDidMount() {\n        this.setConditional(this.props.children[0].props.inputProps.currentValue);\n      }\n\n      return componentDidMount;\n    }() // If the event's value matches the one that is correct, change state to true\n\n  }, {\n    key: \"render\",\n    value: function () {\n      function render() {\n        var _props = this.props,\n            children = _props.children,\n            style = _props.style;\n        var conditionalChildren = React.Children.toArray(children).slice(1);\n        return React.createElement(\n          \"div\",\n          {\n            className: \"form-group\",\n            style: (0, _extends3.default)({}, style, {\n              position: 'relative'\n            })\n          },\n          React.cloneElement( // The conditional input\n          children[0], {\n            inputProps: (0, _extends3.default)({}, children[0].props.inputProps, {\n              onConditionalChange: this.onConditionalChange,\n              noValidator: true\n            })\n          }),\n          this.state.conditional ? // The hidden elements that will appear if the conditional input is true\n          React.createElement(\n            \"div\",\n            {\n              className: \"animated fadeIn\"\n            },\n            React.Children.map(conditionalChildren, function (child) {\n              return React.cloneElement(child, {\n                inputProps: (0, _extends3.default)({}, child.props.inputProps, {\n                  noValidator: true\n                })\n              });\n            })\n          ) : '',\n          React.createElement(FormValidator, (0, _extends3.default)({}, this.props, {\n            id: children[0].id\n          }))\n        );\n      }\n\n      return render;\n    }()\n  }]);\n  return ConditionalInput;\n}(_Component);\n\nConditionalInput.propTypes = {\n  conditionalTrueValue: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]).isRequired,\n  children: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.array, PropTypes.object]))\n};","map":{"version":3,"sources":["imports/core/components/AutoForm/ConditionalInput.jsx"],"names":["module","export","ConditionalInput","PropTypes","watch","require","v","React","Component","FormValidator","props","onConditionalChange","value","safeValue","setConditional","setState","conditional","conditionalTrueValue","state","children","inputProps","currentValue","style","conditionalChildren","Children","toArray","slice","position","cloneElement","noValidator","map","child","id","propTypes","oneOfType","bool","string","isRequired","arrayOf","array","object"],"mappings":"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","file":"imports/core/components/AutoForm/ConditionalInput.jsx.map","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport FormValidator from './FormValidator';\n\nexport default class ConditionalInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { conditional: false };\n  }\n\n  // Set the state of the conditional on load\n  componentDidMount() {\n    this.setConditional(this.props.children[0].props.inputProps.currentValue);\n  }\n\n  onConditionalChange = (value) => {\n    // Make sure boolean values are treated as booleans\n    let safeValue = value;\n    if (value === 'true') {\n      safeValue = true;\n    } else if (value === 'false') {\n      safeValue = false;\n    }\n\n    this.setConditional(safeValue);\n  };\n\n  // If the event's value matches the one that is correct, change state to true\n  setConditional = value =>\n    this.setState({\n      conditional: value === this.props.conditionalTrueValue,\n    });\n\n  render() {\n    const { children, style } = this.props;\n    const conditionalChildren = React.Children.toArray(children).slice(1);\n    return (\n      <div className=\"form-group\" style={{ ...style, position: 'relative' }}>\n        {React.cloneElement(\n          // The conditional input\n          children[0],\n          {\n            inputProps: {\n              // Merge with old props because React.cloneElement only uses\n              // a shallow merge here\n              ...children[0].props.inputProps,\n              onConditionalChange: this.onConditionalChange,\n              noValidator: true,\n            },\n          },\n        )}\n        {this.state.conditional ? (\n          // The hidden elements that will appear if the conditional input is true\n          <div className=\"animated fadeIn\">\n            {/* Don't show a validator for conditional child elements */}\n            {React.Children.map(conditionalChildren, child =>\n              React.cloneElement(child, {\n                inputProps: {\n                  ...child.props.inputProps,\n                  noValidator: true,\n                },\n              }))}\n          </div>\n        ) : (\n          ''\n        )}\n        <FormValidator {...this.props} id={children[0].id} />\n      </div>\n    );\n  }\n}\n\nConditionalInput.propTypes = {\n  conditionalTrueValue: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n    .isRequired,\n  children: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.array, PropTypes.object])),\n};\n"]},"hash":"5d0cc282264e41563d7699f8cc4e8e665b5465df"}

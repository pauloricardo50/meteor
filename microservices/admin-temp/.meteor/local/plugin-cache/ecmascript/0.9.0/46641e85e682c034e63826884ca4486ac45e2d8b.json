{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/lib/dotize.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/lib/dotize.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/lib/dotize.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/dotize.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"dotize"},"ignored":false,"code":"module.exportDefault(dotize = {});\n\ndotize.convert = function (obj, prefix) {\n    if ((!obj || typeof obj != \"object\") && !Array.isArray(obj)) {\n        if (prefix) {\n            var newObj = {};\n            newObj[prefix] = obj;\n            return newObj;\n        } else {\n            return obj;\n        }\n    }\n\n    var newObj = {};\n\n    function recurse(o, p, isArrayItem) {\n        for (var f in o) {\n            if (o[f] && typeof o[f] === \"object\") {\n                if (Array.isArray(o[f])) {\n                    if (isEmptyArray(o[f])) {\n                        newObj[getFieldName(f, p, true)] = o[f]; // empty array\n                    } else {\n                        newObj = recurse(o[f], getFieldName(f, p, false, true), true); // array\n                    }\n                } else {\n                    if (isArrayItem) {\n                        if (isEmptyObj(o[f])) {\n                            newObj[getFieldName(f, p, true)] = o[f]; // empty object\n                        } else {\n                            newObj = recurse(o[f], getFieldName(f, p, true)); // array item object\n                        }\n                    } else {\n                        if (isEmptyObj(o[f])) {\n                            newObj[getFieldName(f, p)] = o[f]; // empty object\n                        } else {\n                            newObj = recurse(o[f], getFieldName(f, p)); // object\n                        }\n                    }\n                }\n            } else {\n                if (isArrayItem || isNumber(f)) {\n                    newObj[getFieldName(f, p, true)] = o[f]; // array item primitive\n                } else {\n                    newObj[getFieldName(f, p)] = o[f]; // primitive\n                }\n            }\n        }\n\n        if (isEmptyObj(newObj)) return obj;\n        return newObj;\n    }\n\n    function isNumber(f) {\n        return !isNaN(parseInt(f));\n    }\n\n    function isEmptyObj(obj) {\n        for (var prop in obj) {\n            if (Object.hasOwnProperty.call(obj, prop)) return false;\n        }\n\n        return true;\n    }\n\n    function isEmptyArray(o) {\n        if (Array.isArray(o) && o.length == 0) return true;\n        return false;\n    }\n\n    function getFieldName(field, prefix, isArrayItem, isArray) {\n        if (isArray) return (prefix ? prefix : \"\") + (isNumber(field) ? \"[\" + field + \"]\" : \".\" + field);else if (isArrayItem) return (prefix ? prefix : \"\") + \"[\" + field + \"]\";else return (prefix ? prefix + \".\" : \"\") + field;\n    }\n\n    return recurse(obj, prefix, Array.isArray(obj));\n};","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/dotize.js"],"names":["module","exportDefault","dotize","convert","obj","prefix","Array","isArray","newObj","recurse","o","p","isArrayItem","f","isEmptyArray","getFieldName","isEmptyObj","isNumber","isNaN","parseInt","prop","Object","hasOwnProperty","call","length","field"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/query/lib/dotize.js.map","sourcesContent":["// https://github.com/vardars/dotize\nexport default dotize = {};\n\ndotize.convert = function(obj, prefix) {\n    if ((!obj || typeof obj != \"object\") && !Array.isArray(obj)) {\n        if (prefix) {\n            var newObj = {};\n            newObj[prefix] = obj;\n            return newObj;\n        } else {\n            return obj;\n        }\n    }\n\n    var newObj = {};\n\n    function recurse(o, p, isArrayItem) {\n        for (var f in o) {\n            if (o[f] && typeof o[f] === \"object\") {\n                if (Array.isArray(o[f])) {\n                    if (isEmptyArray(o[f])) {\n                        newObj[getFieldName(f, p, true)] = o[f]; // empty array\n                    } else {\n                        newObj = recurse(o[f], getFieldName(f, p, false, true), true); // array\n                    }\n                } else {\n                    if (isArrayItem) {\n                        if (isEmptyObj(o[f])) {\n                            newObj[getFieldName(f, p, true)] = o[f]; // empty object\n                        } else {\n                            newObj = recurse(o[f], getFieldName(f, p, true)); // array item object\n                        }\n                    } else {\n                        if (isEmptyObj(o[f])) {\n                            newObj[getFieldName(f, p)] = o[f]; // empty object\n                        } else {\n                            newObj = recurse(o[f], getFieldName(f, p)); // object\n                        }\n                    }\n                }\n            } else {\n                if (isArrayItem || isNumber(f)) {\n                    newObj[getFieldName(f, p, true)] = o[f]; // array item primitive\n                } else {\n                    newObj[getFieldName(f, p)] = o[f]; // primitive\n                }\n            }\n        }\n\n        if (isEmptyObj(newObj))\n            return obj;\n\n        return newObj;\n    }\n\n    function isNumber(f) {\n        return !isNaN(parseInt(f));\n    }\n\n    function isEmptyObj(obj) {\n        for (var prop in obj) {\n            if (Object.hasOwnProperty.call(obj, prop))\n                return false;\n        }\n\n        return true;\n    }\n\n    function isEmptyArray(o) {\n        if (Array.isArray(o) && o.length == 0)\n            return true;\n        return false;\n    }\n\n    function getFieldName(field, prefix, isArrayItem, isArray) {\n        if (isArray)\n            return (prefix ? prefix : \"\") + (isNumber(field) ? \"[\" + field + \"]\" : \".\" + field);\n        else if (isArrayItem)\n            return (prefix ? prefix : \"\") + \"[\" + field + \"]\";\n        else\n            return (prefix ? prefix + \".\" : \"\") + field;\n    }\n\n    return recurse(obj, prefix, Array.isArray(obj));\n};"]},"hash":"46641e85e682c034e63826884ca4486ac45e2d8b"}

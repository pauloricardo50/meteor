{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"react-scroll","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Scroll"}]},{"source":"../components/DialogSimple","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DialogSimple"}]},{"source":"../components/Translation","imported":["T","IntlNumber"],"specifiers":[{"kind":"named","imported":"T","local":"T"},{"kind":"named","imported":"IntlNumber","local":"IntlNumber"}]},{"source":"../config/constants","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"constants"}]},{"source":"../utils/conversionFunctions","imported":["toMoney"],"specifiers":[{"kind":"named","imported":"toMoney","local":"toMoney"}]},{"source":"../api/constants","imported":["USAGE_TYPE","OTHER_INCOME","REAL_ESTATE","GENDER","EXPENSES","PURCHASE_TYPE"],"specifiers":[{"kind":"named","imported":"USAGE_TYPE","local":"USAGE_TYPE"},{"kind":"named","imported":"OTHER_INCOME","local":"OTHER_INCOME"},{"kind":"named","imported":"REAL_ESTATE","local":"REAL_ESTATE"},{"kind":"named","imported":"GENDER","local":"GENDER"},{"kind":"named","imported":"EXPENSES","local":"EXPENSES"},{"kind":"named","imported":"PURCHASE_TYPE","local":"PURCHASE_TYPE"}]}],"exports":{"exported":["getAcquisitionArray","getErrorArray","getFinalArray"],"specifiers":[{"kind":"local","local":"getAcquisitionArray","exported":"getAcquisitionArray"},{"kind":"local","local":"getErrorArray","exported":"getErrorArray"},{"kind":"local","local":"getFinalArray","exported":"getFinalArray"}]}}},"options":{"filename":"imports/core/arrays/StartFormArray.js","filenameRelative":"imports/core/arrays/StartFormArray.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/arrays/StartFormArray.js.map","sourceFileName":"imports/core/arrays/StartFormArray.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"StartFormArray"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nmodule.export({\n  getAcquisitionArray: function getAcquisitionArray() {\n    return _getAcquisitionArray;\n  },\n  getErrorArray: function getErrorArray() {\n    return _getErrorArray;\n  },\n  getFinalArray: function getFinalArray() {\n    return _getFinalArray;\n  }\n});\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  default: function _default(v) {\n    React = v;\n  }\n}, 0);\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 1);\nvar Scroll = void 0;\nmodule.watch(require(\"react-scroll\"), {\n  default: function _default(v) {\n    Scroll = v;\n  }\n}, 2);\nvar DialogSimple = void 0;\nmodule.watch(require(\"../components/DialogSimple\"), {\n  default: function _default(v) {\n    DialogSimple = v;\n  }\n}, 3);\nexports.getAcquisitionArray = _getAcquisitionArray;\n\nvar _T = void 0,\n    _IntlNumber = void 0;\n\nmodule.watch(require(\"../components/Translation\"), {\n  T: function T(v) {\n    _T = v;\n  },\n  IntlNumber: function IntlNumber(v) {\n    _IntlNumber = v;\n  }\n}, 4);\nvar constants = void 0;\nmodule.watch(require(\"../config/constants\"), {\n  default: function _default(v) {\n    constants = v;\n  }\n}, 5);\n\nvar _toMoney = void 0;\n\nmodule.watch(require(\"../utils/conversionFunctions\"), {\n  toMoney: function toMoney(v) {\n    _toMoney = v;\n  }\n}, 6);\n\nvar _USAGE_TYPE = void 0,\n    _OTHER_INCOME = void 0,\n    _REAL_ESTATE = void 0,\n    _GENDER = void 0,\n    _EXPENSES = void 0,\n    _PURCHASE_TYPE = void 0;\n\nmodule.watch(require(\"../api/constants\"), {\n  USAGE_TYPE: function USAGE_TYPE(v) {\n    _USAGE_TYPE = v;\n  },\n  OTHER_INCOME: function OTHER_INCOME(v) {\n    _OTHER_INCOME = v;\n  },\n  REAL_ESTATE: function REAL_ESTATE(v) {\n    _REAL_ESTATE = v;\n  },\n  GENDER: function GENDER(v) {\n    _GENDER = v;\n  },\n  EXPENSES: function EXPENSES(v) {\n    _EXPENSES = v;\n  },\n  PURCHASE_TYPE: function PURCHASE_TYPE(v) {\n    _PURCHASE_TYPE = v;\n  }\n}, 7);\n\nvar _getAcquisitionArray = function _getAcquisitionArray(state, props, setFormState) {\n  return [{\n    id: 'propertyValue',\n    type: 'textInput',\n    condition: state.knowsProperty === true,\n    money: true\n  }, {\n    id: 'notaryFeesAgreed',\n    type: 'buttons',\n    condition: state.knowsProperty === true,\n    intlValues: {\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"active\"\n        },\n        React.createElement(_IntlNumber, {\n          value: 0.05 * state.propertyValue,\n          format: \"money\"\n        })\n      )\n    },\n    hideResult: true,\n    buttons: [{\n      id: true,\n      noPrimary: true,\n      secondary: true,\n      className: 'animated infinite pulse',\n      label: React.createElement(_T, {\n        id: \"general.continue\"\n      })\n    }]\n  }, {\n    id: 'propertyWorkExists',\n    type: 'buttons',\n    condition: state.knowsProperty === true,\n    question: true,\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.yes\"\n      })\n    }, {\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.no\"\n      })\n    }],\n    deleteId: 'propertyWork'\n  }, {\n    id: 'propertyWork',\n    condition: state.propertyWorkExists === true,\n    type: 'textInput',\n    money: true\n  }, {\n    id: 'projectAgreed',\n    type: 'buttons',\n    condition: state.propertyWork !== undefined && state.propertyWork !== 0,\n    intlValues: {\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"active\"\n        },\n        React.createElement(_IntlNumber, {\n          value: 1.05 * state.propertyValue + (state.propertyWork || 0),\n          format: \"money\"\n        })\n      )\n    },\n    hideResult: true,\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.continue\"\n      })\n    }]\n  }, {\n    id: 'usageType',\n    type: 'buttons',\n    question: true,\n    buttons: Object.values(_USAGE_TYPE).map(function (value) {\n      return {\n        id: value,\n        label: React.createElement(_T, {\n          id: \"Start2Form.usageTypeButton\" + value\n        })\n      };\n    })\n  }, {\n    id: 'propertyRent',\n    type: 'textInput',\n    condition: state.usageType === _USAGE_TYPE.INVESTMENT,\n    money: true\n  }, {\n    id: 'borrowerCount',\n    type: 'buttons',\n    question: true,\n    buttons: [{\n      id: 1,\n      label: React.createElement(_T, {\n        id: \"general.1\"\n      })\n    }, {\n      id: 2,\n      label: React.createElement(_T, {\n        id: \"general.2\"\n      })\n    }]\n  }, {\n    id: 'age',\n    type: 'textInput',\n    condition: state.borrowerCount === 1,\n    text2: true,\n    number: true,\n    width: 50,\n    validation: {\n      min: 18,\n      max: 120\n    }\n  }, {\n    id: 'oldestAge',\n    type: 'textInput',\n    condition: state.borrowerCount > 1,\n    text2: true,\n    number: true,\n    width: 50,\n    validation: {\n      min: 18,\n      max: 120\n    }\n  }, {\n    id: 'gender',\n    type: 'buttons',\n    condition: state.borrowerCount === 1 && state.age >= 50,\n    text2: true,\n    buttons: Object.values(_GENDER).map(function (value) {\n      return {\n        id: value,\n        label: React.createElement(_T, {\n          id: \"Start2Form.gender.\" + value\n        })\n      };\n    })\n  }, {\n    id: 'oldestGender',\n    type: 'buttons',\n    condition: state.borrowerCount > 1 && state.oldestAge >= 50,\n    buttons: Object.values(_GENDER).map(function (value) {\n      return {\n        id: value,\n        label: React.createElement(_T, {\n          id: \"Start2Form.gender.\" + value\n        })\n      };\n    })\n  }, {\n    id: 'initialIncomeAgreed',\n    type: 'buttons',\n    intlValues: {\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"active\"\n        },\n        React.createElement(_IntlNumber, {\n          value: state.initialIncome,\n          format: \"money\"\n        })\n      )\n    },\n    hideResult: true,\n    buttons: [{\n      id: true,\n      label: 'Ok'\n    }]\n  }, {\n    id: 'income',\n    type: 'multipleInput',\n    firstMultiple: true,\n    money: true,\n    zeroAllowed: true,\n    placeholder: \"CHF \" + _toMoney(state.initialIncome)\n  }, {\n    id: 'bonusExists',\n    type: 'buttons',\n    question: true,\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.yes\"\n      })\n    }, {\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.no\"\n      })\n    }]\n  }, {\n    id: 'bonus4',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true\n  }, {\n    id: 'bonus3',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true\n  }, {\n    id: 'bonus2',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true\n  }, {\n    id: 'bonus1',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true\n  }, {\n    id: 'otherIncomeExists',\n    type: 'buttons',\n    question: true,\n    deleteId: 'otherIncome',\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.yes\"\n      })\n    }, {\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.no\"\n      })\n    }]\n  }, {\n    id: 'otherIncome',\n    type: 'arrayInput',\n    condition: state.otherIncomeExists === true,\n    existId: 'otherIncomeExists',\n    inputs: [{\n      id: 'description',\n      type: 'selectInput',\n      options: Object.values(_OTHER_INCOME).map(function (value) {\n        return {\n          id: value\n        };\n      })\n    }, {\n      id: 'value',\n      type: 'textInput',\n      money: true\n    }]\n  }, {\n    id: 'expensesExists',\n    type: 'buttons',\n    intlValues: {\n      optional: state.usageType !== _USAGE_TYPE.PRIMARY ? 'rentes, ' : ''\n    },\n    question: true,\n    deleteId: 'expenses',\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.yes\"\n      })\n    }, {\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.no\"\n      })\n    }]\n  }, {\n    id: 'expenses',\n    type: 'arrayInput',\n    condition: state.expensesExists === true,\n    existId: 'expensesExists',\n    inputs: [{\n      id: 'description',\n      type: 'selectInput',\n      options: Object.values(_EXPENSES).map(function (value) {\n        return {\n          id: value\n        };\n      })\n    }, {\n      id: 'value',\n      type: 'textInput',\n      money: true,\n      zeroAllowed: true\n    }]\n  }, {\n    id: 'initialFortuneAgreed',\n    type: 'buttons',\n    intlValues: {\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"active\"\n        },\n        React.createElement(_IntlNumber, {\n          value: state.initialFortune,\n          format: \"money\"\n        })\n      )\n    },\n    hideResult: true,\n    buttons: [{\n      id: true,\n      label: 'Ok'\n    }]\n  }, {\n    id: 'fortune',\n    type: 'multipleInput',\n    firstMultiple: true,\n    question: true,\n    money: true,\n    zeroAllowed: state.borrowerCount > 1,\n    placeholder: \"CHF \" + _toMoney(state.initialFortune)\n  }, {\n    id: 'insurance1Exists',\n    condition: state.usageType === _USAGE_TYPE.PRIMARY,\n    type: 'buttons',\n    question: true,\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.yes\"\n      })\n    }, {\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.no\"\n      }),\n      onClick: function onClick() {\n        setFormState('insurance11', 0);\n        setFormState('insurance12', 0);\n      }\n    }]\n  }, {\n    id: 'insurance1',\n    condition: state.usageType === _USAGE_TYPE.PRIMARY && state.insurance1Exists === true,\n    type: 'multipleInput',\n    money: true,\n    zeroAllowed: true\n  }, {\n    id: 'insurance2Exists',\n    condition: state.usageType === _USAGE_TYPE.PRIMARY,\n    type: 'buttons',\n    question: true,\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.yes\"\n      })\n    }, {\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.no\"\n      }),\n      onClick: function onClick() {\n        setFormState('insurance21', 0);\n        setFormState('insurance22', 0);\n      }\n    }]\n  }, {\n    id: 'insurance2',\n    condition: state.usageType === _USAGE_TYPE.PRIMARY && state.insurance2Exists === true,\n    type: 'multipleInput',\n    money: true,\n    zeroAllowed: true\n  }, {\n    id: 'realEstateExists',\n    type: 'buttons',\n    question: true,\n    deleteId: 'realEstate',\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.yes\"\n      })\n    }, {\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.no\"\n      })\n    }]\n  }, {\n    id: 'realEstate',\n    condition: state.realEstateExists === true,\n    existId: 'realEstateExists',\n    type: 'arrayInput',\n    allOptions: true,\n    inputs: [{\n      id: 'description',\n      type: 'selectInput',\n      options: Object.values(_REAL_ESTATE).map(function (value) {\n        return {\n          id: value\n        };\n      })\n    }, {\n      id: 'value',\n      type: 'textInput',\n      money: true\n    }, {\n      id: 'loan',\n      type: 'textInput',\n      money: true,\n      zeroAllowed: true\n    }]\n  }];\n};\n\nvar _getErrorArray = function _getErrorArray(state, props, setFormState) {\n  return [{\n    id: 'notEnoughCash',\n    error: true,\n    condition: state.usageType === _USAGE_TYPE.PRIMARY && props.fortune < props.minCash && props.insuranceFortune >= 0.1 * props.propAndWork,\n    type: 'buttons',\n    intlValues: {\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"body\"\n        },\n        React.createElement(_IntlNumber, {\n          value: props.minCash,\n          format: \"money\"\n        })\n      )\n    },\n    buttons: [{\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.modify\"\n      }),\n      onClick: function onClick() {\n        setFormState('activeLine', 'fortune', function () {\n          var options = {\n            duration: 350,\n            delay: 0,\n            smooth: true,\n            offset: -86\n          };\n\n          _Meteor.defer(function () {\n            Scroll.scroller.scrollTo('fortune', options);\n          });\n        });\n      }\n    }, {\n      id: undefined,\n      help: true,\n      component: React.createElement(\n        DialogSimple,\n        {\n          label: React.createElement(_T, {\n            id: \"Start2Form.whyButton\"\n          }),\n          title: React.createElement(_T, {\n            id: \"Start2Form.notEnoughCash.dialogTitle\"\n          }),\n          key: 2,\n          rootStyle: {\n            display: 'inline-block',\n            marginRight: 8,\n            marginBottom: 8\n          }\n        },\n        React.createElement(_T, {\n          id: \"Start2Form.notEnoughCash.description\"\n        })\n      )\n    }]\n  }, {\n    id: 'notEnoughOwnFunds',\n    error: true,\n    condition: props.fortune + props.insuranceFortune < props.minFortune,\n    type: 'buttons',\n    intlValues: {\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"body\"\n        },\n        React.createElement(_IntlNumber, {\n          value: props.minFortune,\n          format: \"money\"\n        })\n      )\n    },\n    buttons: [{\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.modify\"\n      }),\n      onClick: function onClick() {\n        setFormState('activeLine', 'fortune', function () {\n          var options = {\n            duration: 350,\n            delay: 0,\n            smooth: true,\n            offset: -86\n          };\n\n          _Meteor.defer(function () {\n            Scroll.scroller.scrollTo('fortune', options);\n          });\n        });\n      }\n    }, {\n      id: undefined,\n      help: true,\n      component: React.createElement(\n        DialogSimple,\n        {\n          label: React.createElement(_T, {\n            id: \"Start2Form.whyButton\"\n          }),\n          title: React.createElement(_T, {\n            id: \"Start2Form.notEnoughOwnFunds.dialogTitle\"\n          }),\n          key: 2,\n          rootStyle: {\n            display: 'inline-block',\n            marginRight: 8,\n            marginBottom: 8\n          }\n        },\n        React.createElement(_T, {\n          id: \"Start2Form.notEnoughOwnFunds.description\"\n        })\n      )\n    }]\n  }];\n};\n\nvar _getFinalArray = function _getFinalArray(state, props, setFormState, components) {\n  return [{\n    id: 'acceptedLoan',\n    condition: state.type === 'acquisition',\n    type: 'buttons',\n    intlValues: {\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"active\"\n        },\n        React.createElement(_IntlNumber, {\n          value: props.maxLoan,\n          format: \"money\"\n        })\n      )\n    },\n    hideResult: true,\n    buttons: [{\n      id: true,\n      label: 'Ok',\n      onClick: function onClick() {\n        setFormState('loanWanted', props.maxLoan);\n      }\n    }, {\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.modify\"\n      }),\n      onClick: function onClick() {\n        setFormState('loanWanted', undefined);\n      }\n    }]\n  }, {\n    id: 'loanWanted',\n    condition: state.type === 'acquisition' && state.acceptedLoan === false,\n    type: 'sliderInput',\n    child1: React.createElement(\n      \"span\",\n      {\n        className: \"loanWanted-slider\"\n      },\n      React.createElement(\n        \"div\",\n        null,\n        React.createElement(\n          \"label\",\n          {\n            htmlFor: \"\"\n          },\n          React.createElement(_T, {\n            id: \"general.mortgageLoan\"\n          })\n        ),\n        React.createElement(\n          \"span\",\n          {\n            className: \"active\"\n          },\n          React.createElement(_IntlNumber, {\n            value: state.loanWanted || props.maxLoan,\n            format: \"money\"\n          })\n        )\n      ),\n      React.createElement(\n        \"div\",\n        null,\n        React.createElement(\n          \"label\",\n          {\n            htmlFor: \"\"\n          },\n          React.createElement(_T, {\n            id: \"general.ownFunds\"\n          })\n        ),\n        React.createElement(\n          \"span\",\n          {\n            className: \"body\"\n          },\n          React.createElement(_IntlNumber, {\n            value: props.fortuneNeeded || props.project - props.maxLoan,\n            format: \"money\"\n          })\n        )\n      )\n    ),\n    money: true,\n    question: true,\n    sliderMin: Math.max(100000, props.minLoan),\n    sliderMax: props.maxLoan,\n    initialValue: props.maxLoan,\n    sliderLabels: [React.createElement(_T, {\n      id: \"Start2Form.loanWanted.sliderMin\"\n    }), React.createElement(_T, {\n      id: \"Start2Form.loanWanted.sliderMax\"\n    })],\n    onDragStart: function onDragStart() {\n      // Make sure we reset the next sliders if this is modified afterwards\n      if (state.fortuneUsed) {\n        setFormState('fortuneUsed', undefined);\n      }\n\n      if (state.insuranceFortuneUsed) {\n        setFormState('insuranceFortuneUsed', undefined);\n      }\n    },\n    validation: {\n      min: Math.max(100000, props.minLoan),\n      max: state.usageType === _USAGE_TYPE.SECONDARY ? Math.ceil(0.7 * props.propAndWork) : Math.ceil(0.8 * props.propAndWork)\n    }\n  }, {\n    id: 'fortuneRequiredAgreed',\n    condition: state.type === 'acquisition' && (state.usageType !== _USAGE_TYPE.PRIMARY || state.usageType === _USAGE_TYPE.PRIMARY && props.insuranceFortune <= 0),\n    type: 'buttons',\n    intlValues: {\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"active\"\n        },\n        React.createElement(_IntlNumber, {\n          value: props.fortuneNeeded,\n          format: \"money\"\n        })\n      )\n    },\n    hideResult: true,\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.continue\"\n      }),\n      onClick: function onClick() {\n        setFormState('fortuneUsed', props.fortuneNeeded);\n      }\n    }]\n  }, {\n    // insurance is not needed, but still propose to use it\n    id: 'useInsurance1',\n    condition: state.type === 'acquisition' && state.usageType === _USAGE_TYPE.PRIMARY && props.fortune >= props.fortuneNeeded && props.insuranceFortune > 0,\n    type: 'buttons',\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.yes\"\n      }),\n      onClick: function onClick() {\n        // fortuneUsed value is undefined at this point, however,\n        // if the user changes his mind, set it back to undefined if it was previously set\n        setFormState('fortuneUsed', undefined);\n      }\n    }, {\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.no\"\n      }),\n      onClick: function onClick() {\n        setFormState('fortuneUsed', props.fortuneNeeded);\n        setFormState('insuranceFortuneUsed', 0);\n      }\n    }, {\n      id: undefined,\n      help: true,\n      component: React.createElement(\n        DialogSimple,\n        {\n          label: React.createElement(_T, {\n            id: \"Start2Form.whyButton\"\n          }),\n          title: React.createElement(_T, {\n            id: \"Start2Form.useInsurance1.dialogTitle\"\n          }),\n          key: 2,\n          rootStyle: {\n            display: 'inline-block',\n            marginRight: 8,\n            marginBottom: 8\n          }\n        },\n        React.createElement(_T, {\n          id: \"Start2Form.useInsurance1.description\"\n        })\n      )\n    }],\n    question: true\n  }, {\n    // insurance is necessary\n    id: 'useInsurance2',\n    condition: state.type === 'acquisition' && state.usageType === _USAGE_TYPE.PRIMARY && props.fortune < props.fortuneNeeded,\n    type: 'buttons',\n    buttons: [{\n      id: true,\n      label: 'Ok'\n    }, {\n      id: undefined,\n      help: true,\n      component: React.createElement(\n        DialogSimple,\n        {\n          label: React.createElement(_T, {\n            id: \"Start2Form.whyButton\"\n          }),\n          title: React.createElement(_T, {\n            id: \"Start2Form.useInsurance1.dialogTitle\"\n          }),\n          key: 2,\n          rootStyle: {\n            display: 'inline-block',\n            marginRight: 8,\n            marginBottom: 8\n          }\n        },\n        React.createElement(_T, {\n          id: \"Start2Form.useInsurance2.description\"\n        })\n      )\n    }],\n    question: true\n  }, {\n    id: 'insuranceConditions',\n    condition: state.useInsurance1 === true || state.useInsurance2 === true,\n    type: 'buttons',\n    question: true,\n    buttons: [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"general.yes\"\n      }),\n      onClick: function onClick() {\n        setFormState('cantUseInsurance', false);\n      }\n    }, {\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.no\"\n      }),\n      onClick: function onClick() {\n        setFormState('cantUseInsurance', true);\n        setFormState('insuranceFortuneUsed', 0);\n      }\n    }, {\n      id: undefined,\n      help: true,\n      component: React.createElement(\n        DialogSimple,\n        {\n          secondary: true,\n          label: React.createElement(_T, {\n            id: \"Start2Form.insuranceConditions.button\"\n          }),\n          title: React.createElement(_T, {\n            id: \"Start2Form.insuranceConditions.title\"\n          }),\n          key: 2,\n          rootStyle: {\n            display: 'inline-block',\n            marginRight: 8,\n            marginBottom: 8\n          }\n        },\n        React.createElement(_T, {\n          id: \"Start2Form.insuranceConditions.description\"\n        }),\n        React.createElement(\"br\", null),\n        React.createElement(\"br\", null),\n        React.createElement(\n          \"ul\",\n          null,\n          React.createElement(\n            \"li\",\n            null,\n            React.createElement(_T, {\n              id: \"Start2Form.insuranceConditions.1\"\n            })\n          ),\n          React.createElement(\n            \"li\",\n            null,\n            React.createElement(_T, {\n              id: \"Start2Form.insuranceConditions.2\"\n            })\n          )\n        )\n      )\n    }]\n  }, {\n    id: 'fortuneSliders',\n    condition: state.type === 'acquisition' && state.usageType === _USAGE_TYPE.PRIMARY && (state.useInsurance1 === true || state.useInsurance2 === true) && state.insuranceConditions === true,\n    type: 'custom',\n    component: components && components.FortuneSliders,\n    // minFortune is required to do math in the FortuneSliders component\n    minFortune: props.minFortune,\n    fortune: props.fortune,\n    validation: function validation() {\n      return state.fortuneUsed + (state.insuranceFortuneUsed || 0) >= props.minFortune && state.fortuneUsed >= props.minCash;\n    },\n    intlValues: {\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"active\"\n        },\n        React.createElement(_IntlNumber, {\n          value: props.project - state.loanWanted,\n          format: \"money\"\n        })\n      )\n    },\n    sliders: [{\n      id: 'fortuneUsed',\n      sliderMin: Math.max(props.fortuneNeeded - props.insuranceFortune, props.minCash),\n      sliderMax: props.fortune >= props.fortuneNeeded ? props.fortuneNeeded : props.fortune\n    }, {\n      id: 'insuranceFortuneUsed',\n      sliderMin: props.fortune >= props.fortuneNeeded ? 0 : props.fortuneNeeded - props.fortune,\n      sliderMax: Math.min(props.insuranceFortune, props.fortuneNeeded - props.minCash)\n    }]\n  }, {\n    id: 'notEnoughIncome',\n    error: true,\n    condition: (props.income && props.monthly / ((props.income - props.expenses) / 12)) > 0.38,\n    type: 'buttons',\n    intlValues: {\n      value: React.createElement(\n        \"span\",\n        {\n          className: \"body\"\n        },\n        React.createElement(_IntlNumber // props.monthly represents 38% of the monthly cost,\n        // then convert it to yearly, and round it up to avoid errors.\n        , {\n          value: Math.round(props.monthly / constants.maxRatio * 12 / 1000) * 1000,\n          format: \"money\"\n        })\n      )\n    },\n    buttons: [{\n      id: false,\n      label: React.createElement(_T, {\n        id: \"general.modify\"\n      }),\n      onClick: function onClick() {\n        setFormState('activeLine', 'income', function () {\n          var options = {\n            duration: 350,\n            delay: 0,\n            smooth: true,\n            offset: -86\n          };\n\n          _Meteor.defer(function () {\n            Scroll.scroller.scrollTo('income', options);\n          });\n        });\n      }\n    }, {\n      id: undefined,\n      help: true,\n      component: React.createElement(\n        DialogSimple,\n        {\n          label: React.createElement(_T, {\n            id: \"Start2Form.whyButton\"\n          }),\n          title: React.createElement(_T, {\n            id: \"Start2Form.notEnoughIncome.dialogTitle\"\n          }),\n          key: 2,\n          rootStyle: {\n            display: 'inline-block',\n            marginRight: 8,\n            marginBottom: 8\n          }\n        },\n        React.createElement(_T, {\n          id: \"Start2Form.notEnoughIncome.description\"\n        })\n      )\n    }]\n  }, {\n    id: 'finalized',\n    condition: state.type === 'test' || state.fortuneUsed + (state.insuranceFortuneUsed || 0) >= props.minFortune,\n    type: 'buttons',\n    hideResult: true,\n    buttons: !state.hideFinalButton ? [{\n      id: true,\n      label: React.createElement(_T, {\n        id: \"Start2Form.finalized.button\"\n      }),\n      onClick: function onClick() {\n        // After clicking on this button, hide it\n        setFormState('hideFinalButton', true);\n        var options = {\n          duration: 350,\n          delay: 0,\n          smooth: true\n        };\n\n        _Meteor.defer(function () {\n          return Scroll.scroller.scrollTo('final', options);\n        });\n      }\n    }] : []\n  }];\n};\n\nvar getFormArray = function getFormArray(state, props, setFormState, components) {\n  return _getAcquisitionArray(state, props, setFormState).concat(state.type === 'acquisition' ? _getErrorArray(state, props, setFormState) : [], // these errors only for acquisitions\n  _getFinalArray(state, props, setFormState, components));\n};\n\nmodule.exportDefault(getFormArray);","map":{"version":3,"sources":["imports/core/arrays/StartFormArray.js"],"names":["module","export","getAcquisitionArray","getErrorArray","getFinalArray","React","watch","require","default","v","Meteor","Scroll","DialogSimple","T","IntlNumber","constants","toMoney","USAGE_TYPE","OTHER_INCOME","REAL_ESTATE","GENDER","EXPENSES","PURCHASE_TYPE","state","props","setFormState","id","type","condition","knowsProperty","money","intlValues","value","propertyValue","hideResult","buttons","noPrimary","secondary","className","label","question","deleteId","propertyWorkExists","propertyWork","undefined","Object","values","map","usageType","INVESTMENT","borrowerCount","text2","number","width","validation","min","max","age","oldestAge","initialIncome","firstMultiple","zeroAllowed","placeholder","bonusExists","otherIncomeExists","existId","inputs","options","optional","PRIMARY","expensesExists","initialFortune","onClick","insurance1Exists","insurance2Exists","realEstateExists","allOptions","error","fortune","minCash","insuranceFortune","propAndWork","duration","delay","smooth","offset","defer","scroller","scrollTo","help","component","display","marginRight","marginBottom","minFortune","components","maxLoan","acceptedLoan","child1","loanWanted","fortuneNeeded","project","sliderMin","Math","minLoan","sliderMax","initialValue","sliderLabels","onDragStart","fortuneUsed","insuranceFortuneUsed","SECONDARY","ceil","useInsurance1","useInsurance2","insuranceConditions","FortuneSliders","sliders","income","monthly","expenses","round","maxRatio","hideFinalButton","getFormArray","concat","exportDefault"],"mappings":"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","file":"imports/core/arrays/StartFormArray.js.map","sourcesContent":["import React from 'react';\nimport { Meteor } from 'meteor/meteor';\nimport Scroll from 'react-scroll';\n\nimport DialogSimple from 'core/components/DialogSimple';\nimport { T, IntlNumber } from 'core/components/Translation';\nimport constants from 'core/config/constants';\nimport { toMoney } from 'core/utils/conversionFunctions';\nimport {\n  USAGE_TYPE,\n  OTHER_INCOME,\n  REAL_ESTATE,\n  GENDER,\n  EXPENSES,\n  PURCHASE_TYPE,\n} from 'core/api/constants';\n\nexport const getAcquisitionArray = (state, props, setFormState) => [\n  {\n    id: 'propertyValue',\n    type: 'textInput',\n    condition: state.knowsProperty === true,\n    money: true,\n  },\n  {\n    id: 'notaryFeesAgreed',\n    type: 'buttons',\n    condition: state.knowsProperty === true,\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={0.05 * state.propertyValue} format=\"money\" />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [\n      {\n        id: true,\n        noPrimary: true,\n        secondary: true,\n        className: 'animated infinite pulse',\n        label: <T id=\"general.continue\" />,\n      },\n    ],\n  },\n  {\n    id: 'propertyWorkExists',\n    type: 'buttons',\n    condition: state.knowsProperty === true,\n    question: true,\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      { id: false, label: <T id=\"general.no\" /> },\n    ],\n    deleteId: 'propertyWork',\n  },\n  {\n    id: 'propertyWork',\n    condition: state.propertyWorkExists === true,\n    type: 'textInput',\n    money: true,\n  },\n  {\n    id: 'projectAgreed',\n    type: 'buttons',\n    condition: state.propertyWork !== undefined && state.propertyWork !== 0,\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber\n            value={1.05 * state.propertyValue + (state.propertyWork || 0)}\n            format=\"money\"\n          />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [{ id: true, label: <T id=\"general.continue\" /> }],\n  },\n  {\n    id: 'usageType',\n    type: 'buttons',\n    question: true,\n    buttons: Object.values(USAGE_TYPE).map(value => ({\n      id: value,\n      label: <T id={`Start2Form.usageTypeButton${value}`} />,\n    })),\n  },\n  {\n    id: 'propertyRent',\n    type: 'textInput',\n    condition: state.usageType === USAGE_TYPE.INVESTMENT,\n    money: true,\n  },\n  {\n    id: 'borrowerCount',\n    type: 'buttons',\n    question: true,\n    buttons: [\n      { id: 1, label: <T id=\"general.1\" /> },\n      { id: 2, label: <T id=\"general.2\" /> },\n    ],\n  },\n  {\n    id: 'age',\n    type: 'textInput',\n    condition: state.borrowerCount === 1,\n    text2: true,\n    number: true,\n    width: 50,\n    validation: { min: 18, max: 120 },\n  },\n  {\n    id: 'oldestAge',\n    type: 'textInput',\n    condition: state.borrowerCount > 1,\n    text2: true,\n    number: true,\n    width: 50,\n    validation: { min: 18, max: 120 },\n  },\n  {\n    id: 'gender',\n    type: 'buttons',\n    condition: state.borrowerCount === 1 && state.age >= 50,\n    text2: true,\n    buttons: Object.values(GENDER).map(value => ({\n      id: value,\n      label: <T id={`Start2Form.gender.${value}`} />,\n    })),\n  },\n  {\n    id: 'oldestGender',\n    type: 'buttons',\n    condition: state.borrowerCount > 1 && state.oldestAge >= 50,\n    buttons: Object.values(GENDER).map(value => ({\n      id: value,\n      label: <T id={`Start2Form.gender.${value}`} />,\n    })),\n  },\n  {\n    id: 'initialIncomeAgreed',\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={state.initialIncome} format=\"money\" />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [{ id: true, label: 'Ok' }],\n  },\n  {\n    id: 'income',\n    type: 'multipleInput',\n    firstMultiple: true,\n    money: true,\n    zeroAllowed: true,\n    placeholder: `CHF ${toMoney(state.initialIncome)}`,\n  },\n  {\n    id: 'bonusExists',\n    type: 'buttons',\n    question: true,\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      { id: false, label: <T id=\"general.no\" /> },\n    ],\n  },\n  {\n    id: 'bonus4',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'bonus3',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'bonus2',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'bonus1',\n    type: 'multipleInput',\n    condition: state.bonusExists === true,\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'otherIncomeExists',\n    type: 'buttons',\n    question: true,\n    deleteId: 'otherIncome',\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      { id: false, label: <T id=\"general.no\" /> },\n    ],\n  },\n  {\n    id: 'otherIncome',\n    type: 'arrayInput',\n    condition: state.otherIncomeExists === true,\n    existId: 'otherIncomeExists',\n    inputs: [\n      {\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(OTHER_INCOME).map(value => ({ id: value })),\n      },\n      {\n        id: 'value',\n        type: 'textInput',\n        money: true,\n      },\n    ],\n  },\n  {\n    id: 'expensesExists',\n    type: 'buttons',\n    intlValues: {\n      optional: state.usageType !== USAGE_TYPE.PRIMARY ? 'rentes, ' : '',\n    },\n    question: true,\n    deleteId: 'expenses',\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      { id: false, label: <T id=\"general.no\" /> },\n    ],\n  },\n  {\n    id: 'expenses',\n    type: 'arrayInput',\n    condition: state.expensesExists === true,\n    existId: 'expensesExists',\n    inputs: [\n      {\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(EXPENSES).map(value => ({ id: value })),\n      },\n      {\n        id: 'value',\n        type: 'textInput',\n        money: true,\n        zeroAllowed: true,\n      },\n    ],\n  },\n  {\n    id: 'initialFortuneAgreed',\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={state.initialFortune} format=\"money\" />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [{ id: true, label: 'Ok' }],\n  },\n  {\n    id: 'fortune',\n    type: 'multipleInput',\n    firstMultiple: true,\n    question: true,\n    money: true,\n    zeroAllowed: state.borrowerCount > 1,\n    placeholder: `CHF ${toMoney(state.initialFortune)}`,\n  },\n  {\n    id: 'insurance1Exists',\n    condition: state.usageType === USAGE_TYPE.PRIMARY,\n    type: 'buttons',\n    question: true,\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      {\n        id: false,\n        label: <T id=\"general.no\" />,\n        onClick() {\n          setFormState('insurance11', 0);\n          setFormState('insurance12', 0);\n        },\n      },\n    ],\n  },\n  {\n    id: 'insurance1',\n    condition:\n      state.usageType === USAGE_TYPE.PRIMARY && state.insurance1Exists === true,\n    type: 'multipleInput',\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'insurance2Exists',\n    condition: state.usageType === USAGE_TYPE.PRIMARY,\n    type: 'buttons',\n    question: true,\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      {\n        id: false,\n        label: <T id=\"general.no\" />,\n        onClick() {\n          setFormState('insurance21', 0);\n          setFormState('insurance22', 0);\n        },\n      },\n    ],\n  },\n  {\n    id: 'insurance2',\n    condition:\n      state.usageType === USAGE_TYPE.PRIMARY && state.insurance2Exists === true,\n    type: 'multipleInput',\n    money: true,\n    zeroAllowed: true,\n  },\n  {\n    id: 'realEstateExists',\n    type: 'buttons',\n    question: true,\n    deleteId: 'realEstate',\n    buttons: [\n      { id: true, label: <T id=\"general.yes\" /> },\n      { id: false, label: <T id=\"general.no\" /> },\n    ],\n  },\n  {\n    id: 'realEstate',\n    condition: state.realEstateExists === true,\n    existId: 'realEstateExists',\n    type: 'arrayInput',\n    allOptions: true,\n    inputs: [\n      {\n        id: 'description',\n        type: 'selectInput',\n        options: Object.values(REAL_ESTATE).map(value => ({ id: value })),\n      },\n      {\n        id: 'value',\n        type: 'textInput',\n        money: true,\n      },\n      {\n        id: 'loan',\n        type: 'textInput',\n        money: true,\n        zeroAllowed: true,\n      },\n    ],\n  },\n];\n\nexport const getErrorArray = (state, props, setFormState) => [\n  {\n    id: 'notEnoughCash',\n    error: true,\n    condition:\n      state.usageType === USAGE_TYPE.PRIMARY &&\n      (props.fortune < props.minCash &&\n        props.insuranceFortune >= 0.1 * props.propAndWork),\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"body\">\n          <IntlNumber value={props.minCash} format=\"money\" />\n        </span>\n      ),\n    },\n    buttons: [\n      {\n        id: false,\n        label: <T id=\"general.modify\" />,\n        onClick() {\n          setFormState('activeLine', 'fortune', () => {\n            const options = {\n              duration: 350,\n              delay: 0,\n              smooth: true,\n              offset: -86,\n            };\n            Meteor.defer(() => {\n              Scroll.scroller.scrollTo('fortune', options);\n            });\n          });\n        },\n      },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            label={<T id=\"Start2Form.whyButton\" />}\n            title={<T id=\"Start2Form.notEnoughCash.dialogTitle\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.notEnoughCash.description\" />\n          </DialogSimple>\n        ),\n      },\n    ],\n  },\n  {\n    id: 'notEnoughOwnFunds',\n    error: true,\n    condition: props.fortune + props.insuranceFortune < props.minFortune,\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"body\">\n          <IntlNumber value={props.minFortune} format=\"money\" />\n        </span>\n      ),\n    },\n    buttons: [\n      {\n        id: false,\n        label: <T id=\"general.modify\" />,\n        onClick() {\n          setFormState('activeLine', 'fortune', () => {\n            const options = {\n              duration: 350,\n              delay: 0,\n              smooth: true,\n              offset: -86,\n            };\n            Meteor.defer(() => {\n              Scroll.scroller.scrollTo('fortune', options);\n            });\n          });\n        },\n      },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            label={<T id=\"Start2Form.whyButton\" />}\n            title={<T id=\"Start2Form.notEnoughOwnFunds.dialogTitle\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.notEnoughOwnFunds.description\" />\n          </DialogSimple>\n        ),\n      },\n    ],\n  },\n];\n\nexport const getFinalArray = (state, props, setFormState, components) => [\n  {\n    id: 'acceptedLoan',\n    condition: state.type === 'acquisition',\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={props.maxLoan} format=\"money\" />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [\n      {\n        id: true,\n        label: 'Ok',\n        onClick() {\n          setFormState('loanWanted', props.maxLoan);\n        },\n      },\n      {\n        id: false,\n        label: <T id=\"general.modify\" />,\n        onClick() {\n          setFormState('loanWanted', undefined);\n        },\n      },\n    ],\n  },\n  {\n    id: 'loanWanted',\n    condition: state.type === 'acquisition' && state.acceptedLoan === false,\n    type: 'sliderInput',\n    child1: (\n      <span className=\"loanWanted-slider\">\n        <div>\n          <label htmlFor=\"\">\n            <T id=\"general.mortgageLoan\" />\n          </label>\n          <span className=\"active\">\n            <IntlNumber\n              value={state.loanWanted || props.maxLoan}\n              format=\"money\"\n            />\n          </span>\n        </div>\n        <div>\n          <label htmlFor=\"\">\n            <T id=\"general.ownFunds\" />\n          </label>\n          <span className=\"body\">\n            <IntlNumber\n              value={props.fortuneNeeded || props.project - props.maxLoan}\n              format=\"money\"\n            />\n          </span>\n        </div>\n      </span>\n    ),\n    money: true,\n    question: true,\n    sliderMin: Math.max(100000, props.minLoan),\n    sliderMax: props.maxLoan,\n    initialValue: props.maxLoan,\n    sliderLabels: [\n      <T id=\"Start2Form.loanWanted.sliderMin\" />,\n      <T id=\"Start2Form.loanWanted.sliderMax\" />,\n    ],\n    onDragStart() {\n      // Make sure we reset the next sliders if this is modified afterwards\n      if (state.fortuneUsed) {\n        setFormState('fortuneUsed', undefined);\n      }\n      if (state.insuranceFortuneUsed) {\n        setFormState('insuranceFortuneUsed', undefined);\n      }\n    },\n    validation: {\n      min: Math.max(100000, props.minLoan),\n      max:\n        state.usageType === USAGE_TYPE.SECONDARY\n          ? Math.ceil(0.7 * props.propAndWork)\n          : Math.ceil(0.8 * props.propAndWork),\n    },\n  },\n  {\n    id: 'fortuneRequiredAgreed',\n    condition:\n      state.type === 'acquisition' &&\n      (state.usageType !== USAGE_TYPE.PRIMARY ||\n        (state.usageType === USAGE_TYPE.PRIMARY &&\n          props.insuranceFortune <= 0)),\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={props.fortuneNeeded} format=\"money\" />\n        </span>\n      ),\n    },\n    hideResult: true,\n    buttons: [\n      {\n        id: true,\n        label: <T id=\"general.continue\" />,\n        onClick() {\n          setFormState('fortuneUsed', props.fortuneNeeded);\n        },\n      },\n    ],\n  },\n  {\n    // insurance is not needed, but still propose to use it\n    id: 'useInsurance1',\n    condition:\n      state.type === 'acquisition' &&\n      state.usageType === USAGE_TYPE.PRIMARY &&\n      props.fortune >= props.fortuneNeeded &&\n      props.insuranceFortune > 0,\n    type: 'buttons',\n    buttons: [\n      {\n        id: true,\n        label: <T id=\"general.yes\" />,\n        onClick() {\n          // fortuneUsed value is undefined at this point, however,\n          // if the user changes his mind, set it back to undefined if it was previously set\n          setFormState('fortuneUsed', undefined);\n        },\n      },\n      {\n        id: false,\n        label: <T id=\"general.no\" />,\n        onClick() {\n          setFormState('fortuneUsed', props.fortuneNeeded);\n          setFormState('insuranceFortuneUsed', 0);\n        },\n      },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            label={<T id=\"Start2Form.whyButton\" />}\n            title={<T id=\"Start2Form.useInsurance1.dialogTitle\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.useInsurance1.description\" />\n          </DialogSimple>\n        ),\n      },\n    ],\n    question: true,\n  },\n  {\n    // insurance is necessary\n    id: 'useInsurance2',\n    condition:\n      state.type === 'acquisition' &&\n      state.usageType === USAGE_TYPE.PRIMARY &&\n      props.fortune < props.fortuneNeeded,\n    type: 'buttons',\n    buttons: [\n      { id: true, label: 'Ok' },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            label={<T id=\"Start2Form.whyButton\" />}\n            title={<T id=\"Start2Form.useInsurance1.dialogTitle\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.useInsurance2.description\" />\n          </DialogSimple>\n        ),\n      },\n    ],\n    question: true,\n  },\n  {\n    id: 'insuranceConditions',\n    condition: state.useInsurance1 === true || state.useInsurance2 === true,\n    type: 'buttons',\n    question: true,\n    buttons: [\n      {\n        id: true,\n        label: <T id=\"general.yes\" />,\n        onClick() {\n          setFormState('cantUseInsurance', false);\n        },\n      },\n      {\n        id: false,\n        label: <T id=\"general.no\" />,\n        onClick() {\n          setFormState('cantUseInsurance', true);\n          setFormState('insuranceFortuneUsed', 0);\n        },\n      },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            secondary\n            label={<T id=\"Start2Form.insuranceConditions.button\" />}\n            title={<T id=\"Start2Form.insuranceConditions.title\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.insuranceConditions.description\" />\n            <br />\n            <br />\n            <ul>\n              <li>\n                <T id=\"Start2Form.insuranceConditions.1\" />\n              </li>\n              <li>\n                <T id=\"Start2Form.insuranceConditions.2\" />\n              </li>\n            </ul>\n          </DialogSimple>\n        ),\n      },\n    ],\n  },\n  {\n    id: 'fortuneSliders',\n    condition:\n      state.type === 'acquisition' &&\n      state.usageType === USAGE_TYPE.PRIMARY &&\n      (state.useInsurance1 === true || state.useInsurance2 === true) &&\n      state.insuranceConditions === true,\n    type: 'custom',\n    component: components && components.FortuneSliders,\n    // minFortune is required to do math in the FortuneSliders component\n    minFortune: props.minFortune,\n    fortune: props.fortune,\n    validation: () =>\n      state.fortuneUsed + (state.insuranceFortuneUsed || 0) >=\n        props.minFortune && state.fortuneUsed >= props.minCash,\n    intlValues: {\n      value: (\n        <span className=\"active\">\n          <IntlNumber value={props.project - state.loanWanted} format=\"money\" />\n        </span>\n      ),\n    },\n    sliders: [\n      {\n        id: 'fortuneUsed',\n        sliderMin: Math.max(\n          props.fortuneNeeded - props.insuranceFortune,\n          props.minCash,\n        ),\n        sliderMax:\n          props.fortune >= props.fortuneNeeded\n            ? props.fortuneNeeded\n            : props.fortune,\n      },\n      {\n        id: 'insuranceFortuneUsed',\n        sliderMin:\n          props.fortune >= props.fortuneNeeded\n            ? 0\n            : props.fortuneNeeded - props.fortune,\n        sliderMax: Math.min(\n          props.insuranceFortune,\n          props.fortuneNeeded - props.minCash,\n        ),\n      },\n    ],\n  },\n  {\n    id: 'notEnoughIncome',\n    error: true,\n    condition:\n      (props.income && props.monthly / ((props.income - props.expenses) / 12)) >\n      0.38,\n    type: 'buttons',\n    intlValues: {\n      value: (\n        <span className=\"body\">\n          <IntlNumber\n            // props.monthly represents 38% of the monthly cost,\n            // then convert it to yearly, and round it up to avoid errors.\n            value={\n              Math.round(props.monthly / constants.maxRatio * 12 / 1000) * 1000\n            }\n            format=\"money\"\n          />\n        </span>\n      ),\n    },\n    buttons: [\n      {\n        id: false,\n        label: <T id=\"general.modify\" />,\n        onClick() {\n          setFormState('activeLine', 'income', () => {\n            const options = {\n              duration: 350,\n              delay: 0,\n              smooth: true,\n              offset: -86,\n            };\n            Meteor.defer(() => {\n              Scroll.scroller.scrollTo('income', options);\n            });\n          });\n        },\n      },\n      {\n        id: undefined,\n        help: true,\n        component: (\n          <DialogSimple\n            label={<T id=\"Start2Form.whyButton\" />}\n            title={<T id=\"Start2Form.notEnoughIncome.dialogTitle\" />}\n            key={2}\n            rootStyle={{\n              display: 'inline-block',\n              marginRight: 8,\n              marginBottom: 8,\n            }}\n          >\n            <T id=\"Start2Form.notEnoughIncome.description\" />\n          </DialogSimple>\n        ),\n      },\n    ],\n  },\n  {\n    id: 'finalized',\n    condition:\n      state.type === 'test' ||\n      state.fortuneUsed + (state.insuranceFortuneUsed || 0) >= props.minFortune,\n    type: 'buttons',\n    hideResult: true,\n    buttons: !state.hideFinalButton\n      ? [\n        {\n          id: true,\n          label: <T id=\"Start2Form.finalized.button\" />,\n          onClick() {\n            // After clicking on this button, hide it\n            setFormState('hideFinalButton', true);\n            const options = {\n              duration: 350,\n              delay: 0,\n              smooth: true,\n            };\n            Meteor.defer(() => Scroll.scroller.scrollTo('final', options));\n          },\n        },\n      ]\n      : [],\n  },\n];\n\nconst getFormArray = (state, props, setFormState, components) =>\n  getAcquisitionArray(state, props, setFormState).concat(\n    state.type === 'acquisition'\n      ? getErrorArray(state, props, setFormState)\n      : [], // these errors only for acquisitions\n    getFinalArray(state, props, setFormState, components),\n  );\n\nexport default getFormArray;\n"]},"hash":"af97bc4acd60d0f49e288c4af9960920d16eb001"}

{"metadata":{"usedHelpers":["extends","defineProperty","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mdg:validated-method","imported":["ValidatedMethod"],"specifiers":[{"kind":"named","imported":"ValidatedMethod","local":"ValidatedMethod"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"meteor/alanning:roles","imported":["Roles"],"specifiers":[{"kind":"named","imported":"Roles","local":"Roles"}]},{"source":"meteor/didericis:callpromise-mixin","imported":["CallPromiseMixin"],"specifiers":[{"kind":"named","imported":"CallPromiseMixin","local":"CallPromiseMixin"}]},{"source":"../properties","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Properties"}]}],"exports":{"exported":["insertProperty","deleteProperty","updateProperty","pushPropertyValue","popPropertyValue","setPropertyField"],"specifiers":[{"kind":"local","local":"insertProperty","exported":"insertProperty"},{"kind":"local","local":"deleteProperty","exported":"deleteProperty"},{"kind":"local","local":"updateProperty","exported":"updateProperty"},{"kind":"local","local":"pushPropertyValue","exported":"pushPropertyValue"},{"kind":"local","local":"popPropertyValue","exported":"popPropertyValue"},{"kind":"local","local":"setPropertyField","exported":"setPropertyField"}]}}},"options":{"filename":"imports/core/api/properties/server/methods.js","filenameRelative":"imports/core/api/properties/server/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/properties/server/methods.js.map","sourceFileName":"imports/core/api/properties/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.insertProperty = undefined;\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\");\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.export({\n  insertProperty: function insertProperty() {\n    return _insertProperty;\n  },\n  deleteProperty: function deleteProperty() {\n    return _deleteProperty;\n  },\n  updateProperty: function updateProperty() {\n    return _updateProperty;\n  },\n  pushPropertyValue: function pushPropertyValue() {\n    return _pushPropertyValue;\n  },\n  popPropertyValue: function popPropertyValue() {\n    return _popPropertyValue;\n  },\n  setPropertyField: function setPropertyField() {\n    return _setPropertyField;\n  }\n});\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 0);\n\nvar _ValidatedMethod = void 0;\n\nmodule.watch(require(\"meteor/mdg:validated-method\"), {\n  ValidatedMethod: function ValidatedMethod(v) {\n    _ValidatedMethod = v;\n  }\n}, 1);\n\nvar _check = void 0,\n    _Match = void 0;\n\nmodule.watch(require(\"meteor/check\"), {\n  check: function check(v) {\n    _check = v;\n  },\n  Match: function Match(v) {\n    _Match = v;\n  }\n}, 2);\nexports.insertProperty = _insertProperty;\n\nvar _Roles = void 0;\n\nmodule.watch(require(\"meteor/alanning:roles\"), {\n  Roles: function Roles(v) {\n    _Roles = v;\n  }\n}, 3);\n\nvar _CallPromiseMixin = void 0;\n\nmodule.watch(require(\"meteor/didericis:callpromise-mixin\"), {\n  CallPromiseMixin: function CallPromiseMixin(v) {\n    _CallPromiseMixin = v;\n  }\n}, 4);\nvar Properties = void 0;\nmodule.watch(require(\"../properties\"), {\n  default: function _default(v) {\n    Properties = v;\n  }\n}, 5);\n\nvar _insertProperty = new _ValidatedMethod({\n  name: 'insertProperty',\n  mixins: [_CallPromiseMixin],\n  validate: function validate(_ref) {\n    var object = _ref.object,\n        userId = _ref.userId;\n\n    _check(object, Object);\n\n    if (userId) {\n      _check(userId, String);\n    }\n  },\n  run: function run(_ref2) {\n    var object = _ref2.object,\n        userId = _ref2.userId;\n    return Properties.insert((0, _extends3.default)({}, object, {\n      userId: userId === undefined ? _Meteor.userId() : userId\n    }));\n  }\n});\n\nvar _deleteProperty = new _ValidatedMethod({\n  name: 'deleteProperty',\n  mixins: [_CallPromiseMixin],\n  validate: function validate(_ref3) {\n    var id = _ref3.id;\n\n    _check(id, String);\n  },\n  run: function run(_ref4) {\n    var id = _ref4.id;\n    return Properties.remove(id);\n  }\n});\n\nvar _updateProperty = new _ValidatedMethod({\n  name: 'updateProperty',\n  mixins: [_CallPromiseMixin],\n  validate: function validate(_ref5) {\n    var id = _ref5.id,\n        object = _ref5.object;\n\n    _check(id, String);\n\n    _check(object, Object);\n  },\n  run: function run(_ref6) {\n    var id = _ref6.id,\n        object = _ref6.object;\n    return Properties.update(id, {\n      $set: object\n    });\n  }\n});\n\nvar _pushPropertyValue = new _ValidatedMethod({\n  name: 'pushPropertyValue',\n  mixins: [_CallPromiseMixin],\n  validate: function validate(_ref7) {\n    var id = _ref7.id;\n\n    _check(id, String);\n  },\n  run: function run(_ref8) {\n    var object = _ref8.object,\n        id = _ref8.id;\n    return Properties.update(id, {\n      $push: object\n    });\n  }\n});\n\nvar _popPropertyValue = new _ValidatedMethod({\n  name: 'popPropertyValue',\n  mixins: [_CallPromiseMixin],\n  validate: function validate(_ref9) {\n    var id = _ref9.id;\n\n    _check(id, String);\n  },\n  run: function run(_ref10) {\n    var object = _ref10.object,\n        id = _ref10.id;\n    return Properties.update(id, {\n      $pop: object\n    }, {\n      getAutoValues: false\n    });\n  }\n});\n\nvar _setPropertyField = new _ValidatedMethod({\n  name: 'setPropertyField',\n  mixins: [_CallPromiseMixin],\n  validate: function validate(_ref11) {\n    var id = _ref11.id,\n        key = _ref11.key;\n\n    _check(id, String);\n\n    _check(key, String);\n  },\n  run: function run(_ref12) {\n    var id = _ref12.id,\n        key = _ref12.key,\n        value = _ref12.value;\n    return Properties.update(id, {\n      $set: (0, _defineProperty3.default)({}, \"fields.\" + key, value)\n    });\n  }\n});","map":{"version":3,"sources":["imports/core/api/properties/server/methods.js"],"names":["module","export","insertProperty","deleteProperty","updateProperty","pushPropertyValue","popPropertyValue","setPropertyField","Meteor","watch","require","v","ValidatedMethod","check","Match","Roles","CallPromiseMixin","Properties","default","name","mixins","validate","object","userId","Object","String","run","insert","undefined","id","remove","update","$set","$push","$pop","getAutoValues","key","value"],"mappings":"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","file":"imports/core/api/properties/server/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { check, Match } from 'meteor/check';\nimport { Roles } from 'meteor/alanning:roles';\nimport { CallPromiseMixin } from 'meteor/didericis:callpromise-mixin';\n\nimport Properties from '../properties';\n\nexport const insertProperty = new ValidatedMethod({\n  name: 'insertProperty',\n  mixins: [CallPromiseMixin],\n  validate({ object, userId }) {\n    check(object, Object);\n    if (userId) {\n      check(userId, String);\n    }\n  },\n  run({ object, userId }) {\n    return Properties.insert({\n      ...object,\n      userId: userId === undefined ? Meteor.userId() : userId,\n    });\n  },\n});\n\nexport const deleteProperty = new ValidatedMethod({\n  name: 'deleteProperty',\n  mixins: [CallPromiseMixin],\n  validate({ id }) {\n    check(id, String);\n  },\n  run({ id }) {\n    return Properties.remove(id);\n  },\n});\n\nexport const updateProperty = new ValidatedMethod({\n  name: 'updateProperty',\n  mixins: [CallPromiseMixin],\n  validate({ id, object }) {\n    check(id, String);\n    check(object, Object);\n  },\n  run({ id, object }) {\n    return Properties.update(id, { $set: object });\n  },\n});\n\n// Lets you push a value to an array\nexport const pushPropertyValue = new ValidatedMethod({\n  name: 'pushPropertyValue',\n  mixins: [CallPromiseMixin],\n  validate({ id }) {\n    check(id, String);\n  },\n  run({ object, id }) {\n    return Properties.update(id, { $push: object });\n  },\n});\n\n// Lets you pop a value from the end of an array\nexport const popPropertyValue = new ValidatedMethod({\n  name: 'popPropertyValue',\n  mixins: [CallPromiseMixin],\n  validate({ id }) {\n    check(id, String);\n  },\n  run({ object, id }) {\n    return Properties.update(id, { $pop: object }, { getAutoValues: false });\n  },\n});\n\nexport const setPropertyField = new ValidatedMethod({\n  name: 'setPropertyField',\n  mixins: [CallPromiseMixin],\n  validate({ id, key }) {\n    check(id, String);\n    check(key, String);\n  },\n  run({ id, key, value }) {\n    return Properties.update(id, { $set: { [`fields.${key}`]: value } });\n  },\n});\n"]},"hash":"c4dbfe7c51af105e7b20cc5222d47bcefeeb3dc9"}

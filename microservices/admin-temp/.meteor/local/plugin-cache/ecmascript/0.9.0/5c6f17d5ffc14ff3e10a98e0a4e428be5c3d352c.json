{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"./base.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Link"}]},{"source":"./lib/smartArguments.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SmartArgs"}]}],"exports":{"exported":["LinkMany"],"specifiers":[{"kind":"local","local":"LinkMany","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"linkMany"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n    \"default\": function () {\n        return LinkMany;\n    }\n});\nvar Link = void 0;\nmodule.watch(require(\"./base.js\"), {\n    \"default\": function (v) {\n        Link = v;\n    }\n}, 0);\nvar SmartArgs = void 0;\nmodule.watch(require(\"./lib/smartArguments.js\"), {\n    \"default\": function (v) {\n        SmartArgs = v;\n    }\n}, 1);\n\nvar LinkMany = function (_Link) {\n    (0, _inherits3.default)(LinkMany, _Link);\n\n    function LinkMany() {\n        (0, _classCallCheck3.default)(this, LinkMany);\n        return (0, _possibleConstructorReturn3.default)(this, _Link.apply(this, arguments));\n    }\n\n    LinkMany.prototype.clean = function () {\n        function clean() {\n            if (!this.object[this.linkStorageField]) {\n                this.object[this.linkStorageField] = [];\n            }\n        }\n\n        return clean;\n    }(); /**\n          * Ads the _ids to the object.\n          * @param what\n          */\n\n    LinkMany.prototype.add = function () {\n        function add(what) {\n            var _$addToSet;\n\n            if (this.isVirtual) {\n                this._virtualAction('add', what);\n\n                return this;\n            } //if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/remove operations must be done from the owning-link of the relationship');\n\n\n            this.clean();\n\n            var _ids = this.identifyIds(what, true);\n\n            this._validateIds(_ids);\n\n            var field = this.linkStorageField; // update the field\n\n            this.object[field] = _.union(this.object[field], _ids); // update the db\n\n            var modifier = {\n                $addToSet: (_$addToSet = {}, _$addToSet[field] = {\n                    $each: _ids\n                }, _$addToSet)\n            };\n            this.linker.mainCollection.update(this.object._id, modifier);\n            return this;\n        }\n\n        return add;\n    }(); /**\n          * @param what\n          */\n\n    LinkMany.prototype.remove = function () {\n        function remove(what) {\n            var _$pullAll;\n\n            if (this.isVirtual) {\n                this._virtualAction('remove', what);\n\n                return this;\n            }\n\n            if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/Remove operations should be done from the owner of the relationship');\n            this.clean();\n            var field = this.linkStorageField;\n\n            var _ids = this.identifyIds(what); // update the field\n\n\n            this.object[field] = _.filter(this.object[field], function (_id) {\n                return !_.contains(_ids, _id);\n            }); // update the db\n\n            var modifier = {\n                $pullAll: (_$pullAll = {}, _$pullAll[field] = _ids, _$pullAll)\n            };\n            this.linker.mainCollection.update(this.object._id, modifier);\n            return this;\n        }\n\n        return remove;\n    }();\n\n    LinkMany.prototype.set = function () {\n        function set(what) {\n            if (this.isVirtual) {\n                this._virtualAction('set', what);\n\n                return this;\n            }\n\n            throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n        }\n\n        return set;\n    }();\n\n    LinkMany.prototype.unset = function () {\n        function unset(what) {\n            if (this.isVirtual) {\n                this._virtualAction('unset', what);\n\n                return this;\n            }\n\n            throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n        }\n\n        return unset;\n    }();\n\n    return LinkMany;\n}(Link);","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js"],"names":["module","export","LinkMany","Link","watch","require","v","SmartArgs","clean","object","linkStorageField","add","what","isVirtual","_virtualAction","_ids","identifyIds","_validateIds","field","_","union","modifier","$addToSet","$each","linker","mainCollection","update","_id","remove","Meteor","Error","filter","contains","$pullAll","set","unset"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/links/linkTypes/linkMany.js.map","sourcesContent":["import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkMany extends Link {\n    clean() {\n        if (!this.object[this.linkStorageField]) {\n            this.object[this.linkStorageField] = [];\n        }\n    }\n\n    /**\n     * Ads the _ids to the object.\n     * @param what\n     */\n    add(what) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what);\n            return this;\n        }\n\n        //if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/remove operations must be done from the owning-link of the relationship');\n\n        this.clean();\n\n        const _ids = this.identifyIds(what, true);\n        this._validateIds(_ids);\n\n        const field = this.linkStorageField;\n\n        // update the field\n        this.object[field] = _.union(this.object[field], _ids);\n\n        // update the db\n        let modifier = {\n            $addToSet: {\n                [field]: {$each: _ids}\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    /**\n     * @param what\n     */\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        if (this.isVirtual) throw new Meteor.Error('not-allowed', 'Add/Remove operations should be done from the owner of the relationship');\n\n        this.clean();\n        const field = this.linkStorageField;\n\n        const _ids = this.identifyIds(what);\n\n        // update the field\n        this.object[field] = _.filter(this.object[field], _id => !_.contains(_ids, _id));\n\n        // update the db\n        let modifier = {\n            $pullAll: {\n                [field]: _ids\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    set(what) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n    unset(what) {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n}"]},"hash":"5c6f17d5ffc14ff3e10a98e0a4e428be5c3d352c"}

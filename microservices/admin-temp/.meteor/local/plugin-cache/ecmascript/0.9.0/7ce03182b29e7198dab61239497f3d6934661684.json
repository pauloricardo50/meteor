{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./query/query.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Query"}]},{"source":"./namedQuery/namedQuery.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"NamedQuery"}]},{"source":"./namedQuery/store.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"NamedQueryStore"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/createQuery.js","filenameRelative":"packages/cultofcoders:grapher/lib/createQuery.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/createQuery.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/createQuery.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"createQuery"},"ignored":false,"code":"var Query = void 0;\nmodule.watch(require(\"./query/query.js\"), {\n    \"default\": function (v) {\n        Query = v;\n    }\n}, 0);\nvar NamedQuery = void 0;\nmodule.watch(require(\"./namedQuery/namedQuery.js\"), {\n    \"default\": function (v) {\n        NamedQuery = v;\n    }\n}, 1);\nvar NamedQueryStore = void 0;\nmodule.watch(require(\"./namedQuery/store.js\"), {\n    \"default\": function (v) {\n        NamedQueryStore = v;\n    }\n}, 2);\nmodule.exportDefault(function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n\n    if (typeof args[0] === 'string') {\n        var name = args[0],\n            body = args[1],\n            options = args[2];\n        options = options || {}; // It's a resolver query\n\n        if (_.isFunction(body)) {\n            return createNamedQuery(name, null, body, options);\n        }\n\n        var entryPointName = _.first(_.keys(body));\n\n        var collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            throw new Meteor.Error('invalid-name', \"We could not find any collection with the name \\\"\" + entryPointName + \"\\\". Make sure it is imported prior to using this\");\n        }\n\n        return createNamedQuery(name, collection, body[entryPointName], options);\n    } else {\n        // Query Creation, it can have an endpoint as collection or as a NamedQuery\n        var _body = args[0],\n            _options = args[1];\n        _options = _options || {};\n\n        var _entryPointName = _.first(_.keys(_body));\n\n        var _collection = Mongo.Collection.get(_entryPointName);\n\n        if (!_collection) {\n            if (Meteor.isDevelopment && !NamedQueryStore.get(_entryPointName)) {\n                console.warn(\"You are creating a query with the entry point \\\"\" + _entryPointName + \"\\\", but there was no collection found for it (maybe you forgot to import it client-side?). It's assumed that it's referencing a NamedQuery.\");\n            }\n\n            return createNamedQuery(_entryPointName, null, {}, {\n                params: _body[_entryPointName]\n            });\n        } else {\n            return createNormalQuery(_collection, _body[_entryPointName], _options);\n        }\n    }\n});\n\nfunction createNamedQuery(name, collection, body) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    // if it exists already, we re-use it\n    var namedQuery = NamedQueryStore.get(name);\n    var query = void 0;\n\n    if (!namedQuery) {\n        query = new NamedQuery(name, collection, body, options);\n        NamedQueryStore.add(name, query);\n    } else {\n        query = namedQuery.clone(options.params);\n    }\n\n    return query;\n}\n\nfunction createNormalQuery(collection, body, options) {\n    return new Query(collection, body, options);\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/createQuery.js"],"names":["Query","module","watch","require","v","NamedQuery","NamedQueryStore","exportDefault","args","name","body","options","_","isFunction","createNamedQuery","entryPointName","first","keys","collection","Mongo","Collection","get","Meteor","Error","isDevelopment","console","warn","params","createNormalQuery","namedQuery","query","add","clone"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/createQuery.js.map","sourcesContent":["import Query from './query/query.js';\nimport NamedQuery from './namedQuery/namedQuery.js';\nimport NamedQueryStore from './namedQuery/store.js';\n\n/**\n * This is a polymorphic function, it allows you to create a query as an object\n * or it also allows you to re-use an existing query if it's a named one\n *\n * @param args\n * @returns {*}\n */\nexport default (...args) => {\n    if (typeof args[0] === 'string') {\n        let [name, body, options] = args;\n        options = options || {};\n\n        // It's a resolver query\n        if (_.isFunction(body)) {\n            return createNamedQuery(name, null, body, options);\n        }\n\n        const entryPointName = _.first(_.keys(body));\n        const collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            throw new Meteor.Error('invalid-name', `We could not find any collection with the name \"${entryPointName}\". Make sure it is imported prior to using this`)\n        }\n\n        return createNamedQuery(name, collection, body[entryPointName], options);\n    } else {\n        // Query Creation, it can have an endpoint as collection or as a NamedQuery\n        let [body, options] = args;\n        options = options || {};\n\n        const entryPointName = _.first(_.keys(body));\n        const collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            if (Meteor.isDevelopment && !NamedQueryStore.get(entryPointName)) {\n                console.warn(`You are creating a query with the entry point \"${entryPointName}\", but there was no collection found for it (maybe you forgot to import it client-side?). It's assumed that it's referencing a NamedQuery.`)\n            }\n\n            return createNamedQuery(entryPointName, null, {}, {params: body[entryPointName]});\n        } else {\n            return createNormalQuery(collection, body[entryPointName], options);\n        }\n    }\n}\n\nfunction createNamedQuery(name, collection, body, options = {}) {\n    // if it exists already, we re-use it\n    const namedQuery = NamedQueryStore.get(name);\n    let query;\n\n    if (!namedQuery) {\n        query = new NamedQuery(name, collection, body, options);\n        NamedQueryStore.add(name, query);\n    } else {\n        query = namedQuery.clone(options.params);\n    }\n\n    return query;\n}\n\nfunction createNormalQuery(collection, body, options)  {\n    return new Query(collection, body, options);\n}\n"]},"hash":"7ce03182b29e7198dab61239497f3d6934661684"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./lib/createGraph.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createGraph"}]},{"source":"./lib/prepareForProcess.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"prepareForProcess"}]},{"source":"./hypernova/hypernova.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"hypernova"}]},{"source":"./query.base","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Base"}]}],"exports":{"exported":["Query"],"specifiers":[{"kind":"local","local":"Query","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/query.server.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/query.server.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/query.server.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/query.server.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"query.server"},"ignored":false,"code":"module.export({\n    default: () => Query\n});\nlet createGraph;\nmodule.watch(require(\"./lib/createGraph.js\"), {\n    default(v) {\n        createGraph = v;\n    }\n\n}, 0);\nlet prepareForProcess;\nmodule.watch(require(\"./lib/prepareForProcess.js\"), {\n    default(v) {\n        prepareForProcess = v;\n    }\n\n}, 1);\nlet hypernova;\nmodule.watch(require(\"./hypernova/hypernova.js\"), {\n    default(v) {\n        hypernova = v;\n    }\n\n}, 2);\nlet Base;\nmodule.watch(require(\"./query.base\"), {\n    default(v) {\n        Base = v;\n    }\n\n}, 3);\n\nclass Query extends Base {\n    /**\n     * Retrieves the data.\n     * @param context\n     * @returns {*}\n     */fetch(context = {}) {\n        const node = createGraph(this.collection, prepareForProcess(this.body, this.params));\n        return hypernova(node, context.userId, {\n            params: this.params\n        });\n    } /**\n       * @param args\n       * @returns {*}\n       */\n\n    fetchOne(...args) {\n        return _.first(this.fetch(...args));\n    } /**\n       * Gets the count of matching elements.\n       * @returns {integer}\n       */\n\n    getCount() {\n        return this.collection.find(this.body.$filters || {}, {}).count();\n    }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/query.server.js"],"names":["module","export","default","Query","createGraph","watch","require","v","prepareForProcess","hypernova","Base","fetch","context","node","collection","body","params","userId","fetchOne","args","_","first","getCount","find","$filters","count"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,aAAQ,MAAIC;AAAb,CAAd;AAAmC,IAAIC,WAAJ;AAAgBJ,OAAOK,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACJ,YAAQK,CAAR,EAAU;AAACH,sBAAYG,CAAZ;AAAc;;AAA1B,CAA7C,EAAyE,CAAzE;AAA4E,IAAIC,iBAAJ;AAAsBR,OAAOK,KAAP,CAAaC,QAAQ,4BAAR,CAAb,EAAmD;AAACJ,YAAQK,CAAR,EAAU;AAACC,4BAAkBD,CAAlB;AAAoB;;AAAhC,CAAnD,EAAqF,CAArF;AAAwF,IAAIE,SAAJ;AAAcT,OAAOK,KAAP,CAAaC,QAAQ,0BAAR,CAAb,EAAiD;AAACJ,YAAQK,CAAR,EAAU;AAACE,oBAAUF,CAAV;AAAY;;AAAxB,CAAjD,EAA2E,CAA3E;AAA8E,IAAIG,IAAJ;AAASV,OAAOK,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACJ,YAAQK,CAAR,EAAU;AAACG,eAAKH,CAAL;AAAO;;AAAnB,CAArC,EAA0D,CAA1D;;AAKnU,MAAMJ,KAAN,SAAoBO,IAApB,CAAyB;AACpC;;;;OAKAC,MAAMC,UAAU,EAAhB,EAAoB;AAChB,cAAMC,OAAOT,YACT,KAAKU,UADI,EAETN,kBAAkB,KAAKO,IAAvB,EAA6B,KAAKC,MAAlC,CAFS,CAAb;AAKA,eAAOP,UAAUI,IAAV,EAAgBD,QAAQK,MAAxB,EAAgC;AAACD,oBAAQ,KAAKA;AAAd,SAAhC,CAAP;AACH,KAbmC,CAepC;;;;;AAIAE,aAAS,GAAGC,IAAZ,EAAkB;AACd,eAAOC,EAAEC,KAAF,CAAQ,KAAKV,KAAL,CAAW,GAAGQ,IAAd,CAAR,CAAP;AACH,KArBmC,CAuBpC;;;;;AAIAG,eAAW;AACP,eAAO,KAAKR,UAAL,CAAgBS,IAAhB,CAAqB,KAAKR,IAAL,CAAUS,QAAV,IAAsB,EAA3C,EAA+C,EAA/C,EAAmDC,KAAnD,EAAP;AACH;;AA7BmC","file":"packages/cultofcoders:grapher/lib/query/query.server.js.map","sourcesContent":["import createGraph from './lib/createGraph.js';\nimport prepareForProcess from './lib/prepareForProcess.js';\nimport hypernova from './hypernova/hypernova.js';\nimport Base from './query.base';\n\nexport default class Query extends Base {\n    /**\n     * Retrieves the data.\n     * @param context\n     * @returns {*}\n     */\n    fetch(context = {}) {\n        const node = createGraph(\n            this.collection,\n            prepareForProcess(this.body, this.params)\n        );\n\n        return hypernova(node, context.userId, {params: this.params});\n    }\n\n    /**\n     * @param args\n     * @returns {*}\n     */\n    fetchOne(...args) {\n        return _.first(this.fetch(...args));\n    }\n\n    /**\n     * Gets the count of matching elements.\n     * @returns {integer}\n     */\n    getCount() {\n        return this.collection.find(this.body.$filters || {}, {}).count();\n    }\n}"]},"hash":"79be6b75ec47ff2bc6d7caea8772d7978c887ef8"}

{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]}],"exports":{"exported":["Field"],"specifiers":[{"kind":"local","local":"Field","exported":"Field"}]}}},"options":{"filename":"packages/std:accounts-ui/imports/ui/components/Field.jsx","filenameRelative":"packages/std:accounts-ui/imports/ui/components/Field.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/std:accounts-ui/imports/ui/components/Field.jsx.map","sourceFileName":"packages/std:accounts-ui/imports/ui/components/Field.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Field"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  Field: function () {\n    return Field;\n  }\n});\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar Accounts = void 0;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 2);\n\nvar Field = function (_React$Component) {\n  (0, _inherits3.default)(Field, _React$Component);\n\n  function Field(props) {\n    (0, _classCallCheck3.default)(this, Field);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this, props));\n\n    _this.state = {\n      mount: true\n    };\n    return _this;\n  }\n\n  Field.prototype.triggerUpdate = function () {\n    function triggerUpdate() {\n      // Trigger an onChange on inital load, to support browser prefilled values.\n      var onChange = this.props.onChange;\n\n      if (this.input && onChange) {\n        onChange({\n          target: {\n            value: this.input.value\n          }\n        });\n      }\n    }\n\n    return triggerUpdate;\n  }();\n\n  Field.prototype.componentDidMount = function () {\n    function componentDidMount() {\n      this.triggerUpdate();\n    }\n\n    return componentDidMount;\n  }();\n\n  Field.prototype.componentDidUpdate = function () {\n    function componentDidUpdate(prevProps) {\n      // Re-mount component so that we don't expose browser prefilled passwords if the component was\n      // a password before and now something else.\n      if (prevProps.id !== this.props.id) {\n        this.setState({\n          mount: false\n        });\n      } else if (!this.state.mount) {\n        this.setState({\n          mount: true\n        });\n        this.triggerUpdate();\n      }\n    }\n\n    return componentDidUpdate;\n  }();\n\n  Field.prototype.render = function () {\n    function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          id = _props.id,\n          hint = _props.hint,\n          label = _props.label,\n          _props$type = _props.type,\n          type = _props$type === undefined ? 'text' : _props$type,\n          onChange = _props.onChange,\n          _props$required = _props.required,\n          required = _props$required === undefined ? false : _props$required,\n          _props$className = _props.className,\n          className = _props$className === undefined ? \"field\" : _props$className,\n          _props$defaultValue = _props.defaultValue,\n          defaultValue = _props$defaultValue === undefined ? \"\" : _props$defaultValue,\n          message = _props.message;\n      var _state$mount = this.state.mount,\n          mount = _state$mount === undefined ? true : _state$mount;\n\n      if (type == 'notice') {\n        return React.createElement(\n          \"div\",\n          {\n            className: className\n          },\n          label\n        );\n      }\n\n      return mount ? React.createElement(\n        \"div\",\n        {\n          className: className\n        },\n        React.createElement(\n          \"label\",\n          {\n            htmlFor: id\n          },\n          label\n        ),\n        React.createElement(\"input\", {\n          id: id,\n          ref: function (ref) {\n            return _this2.input = ref;\n          },\n          type: type,\n          onChange: onChange,\n          placeholder: hint,\n          defaultValue: defaultValue\n        }),\n        message && React.createElement(\n          \"span\",\n          {\n            className: ['message', message.type].join(' ').trim()\n          },\n          message.message\n        )\n      ) : null;\n    }\n\n    return render;\n  }();\n\n  return Field;\n}(React.Component);\n\nField.propTypes = {\n  onChange: PropTypes.func\n};\nAccounts.ui.Field = Field;","map":{"version":3,"sources":["packages/std:accounts-ui/imports/ui/components/Field.jsx"],"names":["module","export","Field","React","watch","require","v","PropTypes","Accounts","props","state","mount","triggerUpdate","onChange","input","target","value","componentDidMount","componentDidUpdate","prevProps","id","setState","render","hint","label","type","required","className","defaultValue","message","ref","join","trim","Component","propTypes","func","ui"],"mappings":"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","file":"packages/std:accounts-ui/imports/ui/components/Field.jsx.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accounts } from 'meteor/accounts-base';\n\nexport class Field extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mount: true\n    };\n  }\n\n  triggerUpdate() {\n    // Trigger an onChange on inital load, to support browser prefilled values.\n    const { onChange } = this.props;\n    if (this.input && onChange) {\n      onChange({ target: { value: this.input.value } });\n    }\n  }\n\n  componentDidMount() {\n    this.triggerUpdate();\n  }\n\n  componentDidUpdate(prevProps) {\n    // Re-mount component so that we don't expose browser prefilled passwords if the component was\n    // a password before and now something else.\n    if (prevProps.id !== this.props.id) {\n      this.setState({mount: false});\n    }\n    else if (!this.state.mount) {\n      this.setState({mount: true});\n      this.triggerUpdate();\n    }\n  }\n\n  render() {\n    const {\n      id,\n      hint,\n      label,\n      type = 'text',\n      onChange,\n      required = false,\n      className = \"field\",\n      defaultValue = \"\",\n      message,\n    } = this.props;\n    const { mount = true } = this.state;\n    if (type == 'notice') {\n      return <div className={ className }>{ label }</div>;\n    }\n    return mount ? (\n      <div className={ className }>\n        <label htmlFor={ id }>{ label }</label>\n        <input\n          id={ id }\n          ref={ (ref) => this.input = ref }\n          type={ type }\n          onChange={ onChange }\n          placeholder={ hint }\n          defaultValue={ defaultValue }\n        />\n        {message && (\n          <span className={['message', message.type].join(' ').trim()}>\n            {message.message}</span>\n        )}\n      </div>\n    ) : null;\n  }\n}\n\nField.propTypes = {\n  onChange: PropTypes.func\n};\n\nAccounts.ui.Field = Field;\n"]},"hash":"037d07e057b63bd5094e3181c8d5fe05b7103e1d"}

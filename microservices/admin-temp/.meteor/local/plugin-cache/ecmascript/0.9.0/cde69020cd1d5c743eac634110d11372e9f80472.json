{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./applyProps.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"applyProps"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"recursiveCompose"},"ignored":false,"code":"var applyProps = void 0;\nmodule.watch(require(\"./applyProps.js\"), {\n    \"default\": function (v) {\n        applyProps = v;\n    }\n}, 0);\n\nfunction compose(node, userId) {\n    return {\n        find: function (parent) {\n            if (parent) {\n                var _applyProps = applyProps(node),\n                    filters = _applyProps.filters,\n                    options = _applyProps.options; // composition\n\n\n                var linker = node.linker;\n                var accessor = linker.createLink(parent); // the rule is this, if a child I want to fetch is virtual, then I want to fetch the link storage of those fields\n\n                if (linker.isVirtual()) {\n                    var _$extend;\n\n                    options.fields = options.fields || {};\n\n                    _.extend(options.fields, (_$extend = {}, _$extend[linker.linkStorageField] = 1, _$extend));\n                }\n\n                return accessor.find(filters, options, userId);\n            }\n        },\n        children: _.map(node.collectionNodes, function (n) {\n            return compose(n, userId);\n        })\n    };\n}\n\nmodule.exportDefault(function (node, userId) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        bypassFirewalls: false\n    };\n    return {\n        find: function () {\n            var _applyProps2 = applyProps(node),\n                filters = _applyProps2.filters,\n                options = _applyProps2.options;\n\n            return node.collection.find(filters, options, userId);\n        },\n        children: _.map(node.collectionNodes, function (n) {\n            var userIdToPass = config.bypassFirewalls ? undefined : userId;\n            return compose(n, userIdToPass);\n        })\n    };\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js"],"names":["applyProps","module","watch","require","v","compose","node","userId","find","parent","filters","options","linker","accessor","createLink","isVirtual","fields","_","extend","linkStorageField","children","map","collectionNodes","n","exportDefault","config","bypassFirewalls","collection","userIdToPass","undefined"],"mappings":"AAAA,IAAIA,mBAAJ;AAAeC,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAAA,yBAASC,CAAT,EAAW;AAACJ,qBAAWI,CAAX;AAAa;AAAzB,CAAxC,EAAmE,CAAnE;;AAEf,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,MAAvB,EAA+B;AAC3B,WAAO;AACHC,YADG,YACEC,MADF,EACU;AACT,gBAAIA,MAAJ,EAAY;AAAA,kCACiBT,WAAWM,IAAX,CADjB;AAAA,oBACHI,OADG,eACHA,OADG;AAAA,oBACMC,OADN,eACMA,OADN,EAGR;;;AACA,oBAAIC,SAASN,KAAKM,MAAlB;AACA,oBAAIC,WAAWD,OAAOE,UAAP,CAAkBL,MAAlB,CAAf,CALQ,CAOR;;AACA,oBAAIG,OAAOG,SAAP,EAAJ,EAAwB;AAAA;;AACpBJ,4BAAQK,MAAR,GAAiBL,QAAQK,MAAR,IAAkB,EAAnC;;AACAC,sBAAEC,MAAF,CAASP,QAAQK,MAAjB,2BACKJ,OAAOO,gBADZ,IAC+B,CAD/B;AAGH;;AAED,uBAAON,SAASL,IAAT,CAAcE,OAAd,EAAuBC,OAAvB,EAAgCJ,MAAhC,CAAP;AACH;AACJ,SAnBE;AAqBHa,kBAAUH,EAAEI,GAAF,CAAMf,KAAKgB,eAAX,EAA4B;AAAA,mBAAKjB,QAAQkB,CAAR,EAAWhB,MAAX,CAAL;AAAA,SAA5B;AArBP,KAAP;AAuBH;;AA1BDN,OAAOuB,aAAP,CA4Be,UAAClB,IAAD,EAAOC,MAAP,EAAqD;AAAA,QAAtCkB,MAAsC,uEAA7B;AAACC,yBAAiB;AAAlB,KAA6B;AAChE,WAAO;AACHlB,YADG,cACI;AAAA,+BACsBR,WAAWM,IAAX,CADtB;AAAA,gBACEI,OADF,gBACEA,OADF;AAAA,gBACWC,OADX,gBACWA,OADX;;AAGH,mBAAOL,KAAKqB,UAAL,CAAgBnB,IAAhB,CAAqBE,OAArB,EAA8BC,OAA9B,EAAuCJ,MAAvC,CAAP;AACH,SALE;AAOHa,kBAAUH,EAAEI,GAAF,CAAMf,KAAKgB,eAAX,EAA4B,aAAK;AACvC,gBAAMM,eAAgBH,OAAOC,eAAR,GAA2BG,SAA3B,GAAuCtB,MAA5D;AAEA,mBAAOF,QAAQkB,CAAR,EAAWK,YAAX,CAAP;AACH,SAJS;AAPP,KAAP;AAaH,CA1CD","file":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js.map","sourcesContent":["import applyProps from './applyProps.js';\n\nfunction compose(node, userId) {\n    return {\n        find(parent) {\n            if (parent) {\n                let {filters, options} = applyProps(node);\n\n                // composition\n                let linker = node.linker;\n                let accessor = linker.createLink(parent);\n\n                // the rule is this, if a child I want to fetch is virtual, then I want to fetch the link storage of those fields\n                if (linker.isVirtual()) {\n                    options.fields = options.fields || {};\n                    _.extend(options.fields, {\n                        [linker.linkStorageField]: 1\n                    });\n                }\n\n                return accessor.find(filters, options, userId);\n            }\n        },\n\n        children: _.map(node.collectionNodes, n => compose(n, userId))\n    }\n}\n\nexport default (node, userId, config = {bypassFirewalls: false}) => {\n    return {\n        find() {\n            let {filters, options} = applyProps(node);\n\n            return node.collection.find(filters, options, userId);\n        },\n\n        children: _.map(node.collectionNodes, n => {\n            const userIdToPass = (config.bypassFirewalls) ? undefined : userId;\n\n            return compose(n, userIdToPass);\n        })\n    }\n}"]},"hash":"cde69020cd1d5c743eac634110d11372e9f80472"}

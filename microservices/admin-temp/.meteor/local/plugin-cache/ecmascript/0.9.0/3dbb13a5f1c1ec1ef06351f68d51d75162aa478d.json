{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":["restrictFields","filters","options","restrictedFields"],"specifiers":[{"kind":"local","local":"restrictFields","exported":"default"},{"kind":"local","local":"filters","exported":"default"},{"kind":"local","local":"options","exported":"default"},{"kind":"local","local":"restrictedFields","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js","filenameRelative":"packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"restrictFields"},"ignored":false,"code":"module.export({\n    \"default\": function () {\n        return restrictFields;\n    }\n});\nvar deepFilterFieldsArray = ['$and', '$or', '$nor'];\nvar deepFilterFieldsObject = ['$not']; /**\n                                        * This is used to restrict some fields to some users, by passing the fields as array in the exposure object\n                                        * For example in an user exposure: restrictFields(options, ['services', 'createdAt'])\n                                        *\n                                        * @param filters Object\n                                        * @param options Object\n                                        * @param restrictedFields Array\n                                        */\n\nfunction restrictFields(filters, options, restrictedFields) {\n    if (!_.isArray(restrictedFields)) {\n        throw new Meteor.Error('invalid-parameters', 'Please specify an array of restricted fields.');\n    }\n\n    cleanFilters(filters, restrictedFields);\n    cleanOptions(options, restrictedFields);\n}\n\n/**\n * Deep cleans filters\n *\n * @param filters\n * @param restrictedFields\n */function cleanFilters(filters, restrictedFields) {\n    if (filters) {\n        cleanObject(filters, restrictedFields);\n    }\n\n    deepFilterFieldsArray.forEach(function (field) {\n        if (filters[field]) {\n            filters[field].forEach(function (element) {\n                return cleanFilters(element, restrictedFields);\n            });\n        }\n    });\n    deepFilterFieldsObject.forEach(function (field) {\n        if (filters[field]) {\n            cleanFilters(filters[field], restrictedFields);\n        }\n    });\n} /**\n   * Deeply cleans options\n   *\n   * @param options\n   * @param restrictedFields\n   */\n\nfunction cleanOptions(options, restrictedFields) {\n    if (options.fields) {\n        cleanObject(options.fields, restrictedFields);\n\n        if (_.keys(options.fields).length === 0) {\n            _.extend(options.fields, {\n                _id: 1\n            });\n        }\n    } else {\n        options.fields = {\n            _id: 1\n        };\n    }\n\n    if (options.sort) {\n        cleanObject(options.sort, restrictedFields);\n    }\n} /**\n   * Cleans the object (not deeply)\n   *\n   * @param object\n   * @param restrictedFields\n   */\n\nfunction cleanObject(object, restrictedFields) {\n    _.each(object, function (value, key) {\n        restrictedFields.forEach(function (restrictedField) {\n            if (matching(restrictedField, key)) {\n                delete object[key];\n            }\n        });\n    });\n} /**\n   * Returns true if field == subfield or if `${field}.` INCLUDED in subfield\n   * Example: \"profile\" and \"profile.firstName\" will be a matching field\n   * @param field\n   * @param subfield\n   * @returns {boolean}\n   */\n\nfunction matching(field, subfield) {\n    if (field === subfield) {\n        return true;\n    }\n\n    return subfield.slice(0, field.length + 1) === field + '.';\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js"],"names":["module","export","restrictFields","deepFilterFieldsArray","deepFilterFieldsObject","filters","options","restrictedFields","_","isArray","Meteor","Error","cleanFilters","cleanOptions","cleanObject","forEach","field","element","fields","keys","length","extend","_id","sort","object","each","value","key","restrictedField","matching","subfield","slice"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAAC,eAAQ;AAAA,eAAIC,cAAJ;AAAA;AAAT,CAAd;AAAA,IAAMC,wBAAwB,CAAC,MAAD,EAAS,KAAT,EAAgB,MAAhB,CAA9B;AACA,IAAMC,yBAAyB,CAAC,MAAD,CAA/B,C,CAEA;;;;;;;;;AAQe,SAASF,cAAT,CAAwBG,OAAxB,EAAiCC,OAAjC,EAA0CC,gBAA1C,EAA4D;AACvE,QAAI,CAACC,EAAEC,OAAF,CAAUF,gBAAV,CAAL,EAAkC;AAC9B,cAAM,IAAIG,OAAOC,KAAX,CAAiB,oBAAjB,EAAuC,+CAAvC,CAAN;AACH;;AAEDC,iBAAaP,OAAb,EAAsBE,gBAAtB;AACAM,iBAAaP,OAAb,EAAsBC,gBAAtB;AACH;;AAED;;;;;GAMA,SAASK,YAAT,CAAsBP,OAAtB,EAA+BE,gBAA/B,EAAiD;AAC7C,QAAIF,OAAJ,EAAa;AACTS,oBAAYT,OAAZ,EAAqBE,gBAArB;AACH;;AAEDJ,0BAAsBY,OAAtB,CAA8B,iBAAS;AACnC,YAAIV,QAAQW,KAAR,CAAJ,EAAoB;AAChBX,oBAAQW,KAAR,EAAeD,OAAf,CAAuB;AAAA,uBAAWH,aAAaK,OAAb,EAAsBV,gBAAtB,CAAX;AAAA,aAAvB;AACH;AACJ,KAJD;AAMAH,2BAAuBW,OAAvB,CAA+B,iBAAS;AACpC,YAAIV,QAAQW,KAAR,CAAJ,EAAoB;AAChBJ,yBAAaP,QAAQW,KAAR,CAAb,EAA6BT,gBAA7B;AACH;AACJ,KAJD;AAKH,C,CAED;;;;;;;AAMA,SAASM,YAAT,CAAsBP,OAAtB,EAA+BC,gBAA/B,EAAiD;AAC7C,QAAID,QAAQY,MAAZ,EAAoB;AAChBJ,oBAAYR,QAAQY,MAApB,EAA4BX,gBAA5B;;AAEA,YAAIC,EAAEW,IAAF,CAAOb,QAAQY,MAAf,EAAuBE,MAAvB,KAAkC,CAAtC,EAAyC;AACrCZ,cAAEa,MAAF,CAASf,QAAQY,MAAjB,EAAyB;AAACI,qBAAK;AAAN,aAAzB;AACH;AACJ,KAND,MAMO;AACHhB,gBAAQY,MAAR,GAAiB;AAACI,iBAAK;AAAN,SAAjB;AACH;;AAED,QAAIhB,QAAQiB,IAAZ,EAAkB;AACdT,oBAAYR,QAAQiB,IAApB,EAA0BhB,gBAA1B;AACH;AACJ,C,CAED;;;;;;;AAMA,SAASO,WAAT,CAAqBU,MAArB,EAA6BjB,gBAA7B,EAA+C;AAC3CC,MAAEiB,IAAF,CAAOD,MAAP,EAAe,UAACE,KAAD,EAAQC,GAAR,EAAgB;AAC3BpB,yBAAiBQ,OAAjB,CAAyB,UAACa,eAAD,EAAqB;AAC1C,gBAAIC,SAASD,eAAT,EAA0BD,GAA1B,CAAJ,EAAoC;AAChC,uBAAOH,OAAOG,GAAP,CAAP;AACH;AACJ,SAJD;AAKH,KAND;AAOH,C,CAED;;;;;;;;AAOA,SAASE,QAAT,CAAkBb,KAAlB,EAAyBc,QAAzB,EAAmC;AAC/B,QAAId,UAAUc,QAAd,EAAwB;AACpB,eAAO,IAAP;AACH;;AAED,WAAOA,SAASC,KAAT,CAAe,CAAf,EAAkBf,MAAMI,MAAN,GAAe,CAAjC,MAAwCJ,QAAQ,GAAvD;AACH","file":"packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js.map","sourcesContent":["const deepFilterFieldsArray = ['$and', '$or', '$nor'];\nconst deepFilterFieldsObject = ['$not'];\n\n/**\n * This is used to restrict some fields to some users, by passing the fields as array in the exposure object\n * For example in an user exposure: restrictFields(options, ['services', 'createdAt'])\n *\n * @param filters Object\n * @param options Object\n * @param restrictedFields Array\n */\nexport default function restrictFields(filters, options, restrictedFields) {\n    if (!_.isArray(restrictedFields)) {\n        throw new Meteor.Error('invalid-parameters', 'Please specify an array of restricted fields.');\n    }\n\n    cleanFilters(filters, restrictedFields);\n    cleanOptions(options, restrictedFields)\n}\n\n/**\n * Deep cleans filters\n *\n * @param filters\n * @param restrictedFields\n */\nfunction cleanFilters(filters, restrictedFields) {\n    if (filters) {\n        cleanObject(filters, restrictedFields);\n    }\n\n    deepFilterFieldsArray.forEach(field => {\n        if (filters[field]) {\n            filters[field].forEach(element => cleanFilters(element, restrictedFields));\n        }\n    });\n\n    deepFilterFieldsObject.forEach(field => {\n        if (filters[field]) {\n            cleanFilters(filters[field], restrictedFields);\n        }\n    });\n}\n\n/**\n * Deeply cleans options\n *\n * @param options\n * @param restrictedFields\n */\nfunction cleanOptions(options, restrictedFields) {\n    if (options.fields) {\n        cleanObject(options.fields, restrictedFields);\n\n        if (_.keys(options.fields).length === 0) {\n            _.extend(options.fields, {_id: 1})\n        }\n    } else {\n        options.fields = {_id: 1};\n    }\n\n    if (options.sort) {\n        cleanObject(options.sort, restrictedFields);\n    }\n}\n\n/**\n * Cleans the object (not deeply)\n *\n * @param object\n * @param restrictedFields\n */\nfunction cleanObject(object, restrictedFields) {\n    _.each(object, (value, key) => {\n        restrictedFields.forEach((restrictedField) => {\n            if (matching(restrictedField, key)) {\n                delete object[key];\n            }\n        })\n    });\n}\n\n/**\n * Returns true if field == subfield or if `${field}.` INCLUDED in subfield\n * Example: \"profile\" and \"profile.firstName\" will be a matching field\n * @param field\n * @param subfield\n * @returns {boolean}\n */\nfunction matching(field, subfield) {\n    if (field === subfield) {\n        return true;\n    }\n\n    return subfield.slice(0, field.length + 1) === field + '.';\n}"]},"hash":"3dbb13a5f1c1ec1ef06351f68d51d75162aa478d"}

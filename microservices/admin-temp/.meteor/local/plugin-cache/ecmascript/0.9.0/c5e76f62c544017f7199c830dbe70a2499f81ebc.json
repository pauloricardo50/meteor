{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../../helpers.js","imported":["getLoginServices"],"specifiers":[{"kind":"named","imported":"getLoginServices","local":"getLoginServices"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/std:accounts-ui/imports/api/server/servicesListPublication.js","filenameRelative":"packages/std:accounts-ui/imports/api/server/servicesListPublication.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/std:accounts-ui/imports/api/server/servicesListPublication.js.map","sourceFileName":"packages/std:accounts-ui/imports/api/server/servicesListPublication.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"servicesListPublication"},"ignored":false,"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet getLoginServices;\nmodule.watch(require(\"../../helpers.js\"), {\n  getLoginServices(v) {\n    getLoginServices = v;\n  }\n\n}, 1);\nMeteor.publish('servicesList', function () {\n  let services = getLoginServices();\n\n  if (Package['accounts-password']) {\n    services.push({\n      name: 'password'\n    });\n  }\n\n  let fields = {}; // Publish the existing services for a user, only name or nothing else.\n\n  services.forEach(service => fields[`services.${service.name}.name`] = 1);\n  return Meteor.users.find({\n    _id: this.userId\n  }, {\n    fields: fields\n  });\n});","map":{"version":3,"sources":["packages/std:accounts-ui/imports/api/server/servicesListPublication.js"],"names":["Meteor","module","watch","require","v","getLoginServices","publish","services","Package","push","name","fields","forEach","service","users","find","_id","userId"],"mappings":"AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,SAAOI,CAAP,EAAS;AAACJ,aAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,gBAAJ;AAAqBJ,OAAOC,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACE,mBAAiBD,CAAjB,EAAmB;AAACC,uBAAiBD,CAAjB;AAAmB;;AAAxC,CAAzC,EAAmF,CAAnF;AAG/FJ,OAAOM,OAAP,CAAe,cAAf,EAA+B,YAAW;AACxC,MAAIC,WAAWF,kBAAf;;AACA,MAAIG,QAAQ,mBAAR,CAAJ,EAAkC;AAChCD,aAASE,IAAT,CAAc;AAACC,YAAM;AAAP,KAAd;AACD;;AACD,MAAIC,SAAS,EAAb,CALwC,CAMxC;;AACAJ,WAASK,OAAT,CAAiBC,WAAWF,OAAQ,YAAWE,QAAQH,IAAK,OAAhC,IAA0C,CAAtE;AACA,SAAOV,OAAOc,KAAP,CAAaC,IAAb,CAAkB;AAAEC,SAAK,KAAKC;AAAZ,GAAlB,EAAwC;AAAEN,YAAQA;AAAV,GAAxC,CAAP;AACD,CATD","file":"packages/std:accounts-ui/imports/api/server/servicesListPublication.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { getLoginServices } from '../../helpers.js';\n\nMeteor.publish('servicesList', function() {\n  let services = getLoginServices();\n  if (Package['accounts-password']) {\n    services.push({name: 'password'});\n  }\n  let fields = {};\n  // Publish the existing services for a user, only name or nothing else.\n  services.forEach(service => fields[`services.${service.name}.name`] = 1);\n  return Meteor.users.find({ _id: this.userId }, { fields: fields});\n});\n"]},"hash":"c5e76f62c544017f7199c830dbe70a2499f81ebc"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"../../utils/loadable","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Loadable"}]},{"source":"react-intl","imported":["injectIntl"],"specifiers":[{"kind":"named","imported":"injectIntl","local":"injectIntl"}]},{"source":"../../utils/conversionFunctions","imported":["toMoney"],"specifiers":[{"kind":"named","imported":"toMoney","local":"toMoney"}]},{"source":"../../utils/loanFunctions","imported":["getLoanValue","getProjectValue","getPropAndWork"],"specifiers":[{"kind":"named","imported":"getLoanValue","local":"getLoanValue"},{"kind":"named","imported":"getProjectValue","local":"getProjectValue"},{"kind":"named","imported":"getPropAndWork","local":"getPropAndWork"}]},{"source":"../../config/constants","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"constants"}]},{"source":"../../config/colors","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"colors"}]},{"source":"../../containers/withLoan","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"withLoan"}]},{"source":"./chartSettings","imported":["legendConfig","adjustLegend"],"specifiers":[{"kind":"named","imported":"legendConfig","local":"legendConfig"},{"kind":"named","imported":"adjustLegend","local":"adjustLegend"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/charts/ProjectBarChart.jsx","filenameRelative":"imports/core/components/charts/ProjectBarChart.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/charts/ProjectBarChart.jsx.map","sourceFileName":"imports/core/components/charts/ProjectBarChart.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ProjectBarChart"},"ignored":false,"code":"\"use strict\";\n\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  default: function _default(v) {\n    PropTypes = v;\n  }\n}, 0);\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  default: function _default(v) {\n    React = v;\n  }\n}, 1);\nvar Loadable = void 0;\nmodule.watch(require(\"../../utils/loadable\"), {\n  default: function _default(v) {\n    Loadable = v;\n  }\n}, 2);\n\nvar _injectIntl = void 0;\n\nmodule.watch(require(\"react-intl\"), {\n  injectIntl: function injectIntl(v) {\n    _injectIntl = v;\n  }\n}, 3);\n\nvar _toMoney = void 0;\n\nmodule.watch(require(\"../../utils/conversionFunctions\"), {\n  toMoney: function toMoney(v) {\n    _toMoney = v;\n  }\n}, 4);\n\nvar _getLoanValue = void 0,\n    _getProjectValue = void 0,\n    _getPropAndWork = void 0;\n\nmodule.watch(require(\"../../utils/loanFunctions\"), {\n  getLoanValue: function getLoanValue(v) {\n    _getLoanValue = v;\n  },\n  getProjectValue: function getProjectValue(v) {\n    _getProjectValue = v;\n  },\n  getPropAndWork: function getPropAndWork(v) {\n    _getPropAndWork = v;\n  }\n}, 5);\nvar constants = void 0;\nmodule.watch(require(\"../../config/constants\"), {\n  default: function _default(v) {\n    constants = v;\n  }\n}, 6);\nvar colors = void 0;\nmodule.watch(require(\"../../config/colors\"), {\n  default: function _default(v) {\n    colors = v;\n  }\n}, 7);\nvar withLoan = void 0;\nmodule.watch(require(\"../../containers/withLoan\"), {\n  default: function _default(v) {\n    withLoan = v;\n  }\n}, 8);\n\nvar _legendConfig = void 0,\n    _adjustLegend = void 0;\n\nmodule.watch(require(\"./chartSettings\"), {\n  legendConfig: function legendConfig(v) {\n    _legendConfig = v;\n  },\n  adjustLegend: function adjustLegend(v) {\n    _adjustLegend = v;\n  }\n}, 9);\nvar ReactHighcharts = Loadable({\n  loader: function loader() {\n    return module.dynamicImport('react-highcharts');\n  }\n});\nvar chartColors = {\n  notaryFees: colors.charts[4],\n  lppFees: colors.charts[3],\n  fortune: colors.charts[2],\n  insuranceFortune: colors.charts[1],\n  loan: colors.charts[0]\n};\n\nvar getConfig = function getConfig(props) {\n  var r = props.loan;\n\n  var total = _getProjectValue(props);\n\n  var f = props.intl.formatMessage;\n  var fN = props.intl.formatNumber;\n  var options = {\n    chart: {\n      type: 'bar',\n      style: {\n        fontFamily: 'Source Sans Pro'\n      },\n      animation: {\n        duration: 400\n      },\n      height: 220,\n      spacingTop: 0,\n      spacingBottom: 0,\n      marginTop: 0,\n      marginBottom: 0 // events: {\n      //   load() {\n      //     adjustLegend(this);\n      //   },\n      //   redraw() {\n      //     adjustLegend(this);\n      //   },\n      // },\n\n    },\n    title: {\n      text: f({\n        id: 'ProjectBarChart.title'\n      }),\n      style: {\n        fontSize: '18px',\n        color: '#222',\n        fontWeight: 400\n      },\n      align: props.titleAlign\n    },\n    subtitle: {\n      text: fN(total, {\n        format: 'money'\n      }),\n      style: {\n        fontSize: '14px'\n      },\n      align: props.titleAlign\n    },\n    tooltip: {\n      formatter: function formatter() {\n        var y = this.y,\n            color = this.color,\n            series = this.series;\n        var value = fN(Math.round(y), {\n          format: 'money'\n        });\n        var percent = fN(y / total, {\n          format: 'percentage'\n        });\n        return \"<span style=\\\"color:\" + color + \"\\\">\\u25CF</span> \" + series.name + \"<br /> <b>\" + value + \"</b><br />\" + percent;\n      },\n      style: {\n        fontSize: '14px'\n      }\n    },\n    plotOptions: {\n      bar: {\n        borderWidth: 0,\n        allowPointSelect: false,\n        cursor: 'pointer',\n        showInLegend: true\n      },\n      series: {\n        pointWidth: 40,\n        stacking: 'percent',\n        animation: true\n      }\n    },\n    legend: _legendConfig,\n    xAxis: {\n      visible: false\n    },\n    yAxis: {\n      visible: false,\n      reversedStacks: false\n    },\n    // series: [\n    //   {\n    //     name: 'Emprunt',\n    //     data: [['Emprunt', getLoanValue(r)]],\n    //   },\n    //   {\n    //     data: [['2ème Pilier', r.general.insuranceFortuneUsed || 0]],\n    //     name: '2ème Pilier',\n    //   },\n    //   {\n    //     data: [\n    //       [\n    //         'Épargne', // subtract fees from this\n    //         r.general.fortuneUsed -\n    //           r.propertyId.value * constants.notaryFees -\n    //           (r.general.insuranceFortuneUsed * constants.lppFees || 0),\n    //       ],\n    //     ],\n    //     name: 'Épargne',\n    //   },\n    //   {\n    //     data: [['Frais de Notaire', r.propertyId.value * constants.notaryFees]],\n    //     name: 'Frais de Notaire',\n    //   },\n    //   {\n    //     data: [['Frais 2ème Pilier', r.general.insuranceFortuneUsed * constants.lppFees || 0]],\n    //     name: 'Frais 2ème Pilier',\n    //   },\n    // ],\n    series: [{\n      name: f({\n        id: 'ProjectBarChart.property'\n      }),\n      data: [_getPropAndWork(props)],\n      stack: 1\n    }, {\n      name: f({\n        id: 'ProjectBarChart.fees'\n      }),\n      data: [props.property.value * constants.notaryFees + (r.general.insuranceFortuneUsed * constants.lppFees || 0)],\n      stack: 1\n    }, {\n      name: f({\n        id: 'general.mortgageLoan'\n      }),\n      data: [_getLoanValue(props)],\n      stack: 2\n    }, {\n      name: f({\n        id: 'general.ownFunds'\n      }),\n      data: [total - _getLoanValue(props)],\n      stack: 2\n    }],\n    colors: [chartColors.loan, chartColors.insuranceFortune, chartColors.lppFees, chartColors.notaryFees],\n    lang: {\n      thousandsSep: \"'\"\n    },\n    credits: {\n      enabled: false\n    }\n  };\n  return options;\n};\n\nvar ProjectBarChart = function ProjectBarChart(props) {\n  return React.createElement(ReactHighcharts, {\n    config: getConfig(props)\n  });\n};\n\nProjectBarChart.defaultProps = {\n  divName: 'projectBarChart',\n  titleAlign: 'center'\n};\nProjectBarChart.propTypes = {\n  loan: PropTypes.objectOf(PropTypes.any).isRequired,\n  divName: PropTypes.string,\n  titleAlign: PropTypes.string\n};\nmodule.exportDefault(_injectIntl(withLoan(ProjectBarChart)));","map":{"version":3,"sources":["imports/core/components/charts/ProjectBarChart.jsx"],"names":["PropTypes","module","watch","require","default","v","React","Loadable","injectIntl","toMoney","getLoanValue","getProjectValue","getPropAndWork","constants","colors","withLoan","legendConfig","adjustLegend","ReactHighcharts","loader","chartColors","notaryFees","charts","lppFees","fortune","insuranceFortune","loan","getConfig","props","r","total","f","intl","formatMessage","fN","formatNumber","options","chart","type","style","fontFamily","animation","duration","height","spacingTop","spacingBottom","marginTop","marginBottom","title","text","id","fontSize","color","fontWeight","align","titleAlign","subtitle","format","tooltip","formatter","y","series","value","Math","round","percent","name","plotOptions","bar","borderWidth","allowPointSelect","cursor","showInLegend","pointWidth","stacking","legend","xAxis","visible","yAxis","reversedStacks","data","stack","property","general","insuranceFortuneUsed","lang","thousandsSep","credits","enabled","ProjectBarChart","defaultProps","divName","propTypes","objectOf","any","isRequired","string","exportDefault"],"mappings":"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","file":"imports/core/components/charts/ProjectBarChart.jsx.map","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport Loadable from 'core/utils/loadable';\nimport { injectIntl } from 'react-intl';\n\nimport { toMoney } from 'core/utils/conversionFunctions';\nimport {\n  getLoanValue,\n  getProjectValue,\n  getPropAndWork,\n} from 'core/utils/loanFunctions';\nimport constants from 'core/config/constants';\nimport colors from 'core/config/colors';\nimport withLoan from 'core/containers/withLoan';\n\nimport { legendConfig, adjustLegend } from './chartSettings';\n\nconst ReactHighcharts = Loadable({\n  loader: () => import('react-highcharts'),\n});\n\nconst chartColors = {\n  notaryFees: colors.charts[4],\n  lppFees: colors.charts[3],\n  fortune: colors.charts[2],\n  insuranceFortune: colors.charts[1],\n  loan: colors.charts[0],\n};\n\nconst getConfig = (props) => {\n  const r = props.loan;\n  const total = getProjectValue(props);\n  const f = props.intl.formatMessage;\n  const fN = props.intl.formatNumber;\n  const options = {\n    chart: {\n      type: 'bar',\n      style: { fontFamily: 'Source Sans Pro' },\n      animation: { duration: 400 },\n      height: 220,\n      spacingTop: 0,\n      spacingBottom: 0,\n      marginTop: 0,\n      marginBottom: 0,\n      // events: {\n      //   load() {\n      //     adjustLegend(this);\n      //   },\n      //   redraw() {\n      //     adjustLegend(this);\n      //   },\n      // },\n    },\n    title: {\n      text: f({ id: 'ProjectBarChart.title' }),\n      style: { fontSize: '18px', color: '#222', fontWeight: 400 },\n      align: props.titleAlign,\n    },\n    subtitle: {\n      text: fN(total, { format: 'money' }),\n      style: { fontSize: '14px' },\n      align: props.titleAlign,\n    },\n    tooltip: {\n      formatter() {\n        const { y, color, series } = this;\n        const value = fN(Math.round(y), { format: 'money' });\n        const percent = fN(y / total, { format: 'percentage' });\n\n        return `<span style=\"color:${color}\">\\u25CF</span> ${\n          series.name\n        }<br /> <b>${value}</b><br />${percent}`;\n      },\n      style: { fontSize: '14px' },\n    },\n    plotOptions: {\n      bar: {\n        borderWidth: 0,\n        allowPointSelect: false,\n        cursor: 'pointer',\n        showInLegend: true,\n      },\n      series: {\n        pointWidth: 40,\n        stacking: 'percent',\n        animation: true,\n      },\n    },\n    legend: legendConfig,\n    xAxis: {\n      visible: false,\n    },\n    yAxis: {\n      visible: false,\n      reversedStacks: false,\n    },\n    // series: [\n    //   {\n    //     name: 'Emprunt',\n    //     data: [['Emprunt', getLoanValue(r)]],\n    //   },\n    //   {\n    //     data: [['2ème Pilier', r.general.insuranceFortuneUsed || 0]],\n    //     name: '2ème Pilier',\n    //   },\n    //   {\n    //     data: [\n    //       [\n    //         'Épargne', // subtract fees from this\n    //         r.general.fortuneUsed -\n    //           r.propertyId.value * constants.notaryFees -\n    //           (r.general.insuranceFortuneUsed * constants.lppFees || 0),\n    //       ],\n    //     ],\n    //     name: 'Épargne',\n    //   },\n    //   {\n    //     data: [['Frais de Notaire', r.propertyId.value * constants.notaryFees]],\n    //     name: 'Frais de Notaire',\n    //   },\n    //   {\n    //     data: [['Frais 2ème Pilier', r.general.insuranceFortuneUsed * constants.lppFees || 0]],\n    //     name: 'Frais 2ème Pilier',\n    //   },\n    // ],\n    series: [\n      {\n        name: f({ id: 'ProjectBarChart.property' }),\n        data: [getPropAndWork(props)],\n        stack: 1,\n      },\n      {\n        name: f({ id: 'ProjectBarChart.fees' }),\n        data: [\n          props.property.value * constants.notaryFees +\n            (r.general.insuranceFortuneUsed * constants.lppFees || 0),\n        ],\n        stack: 1,\n      },\n      {\n        name: f({ id: 'general.mortgageLoan' }),\n        data: [getLoanValue(props)],\n        stack: 2,\n      },\n      {\n        name: f({ id: 'general.ownFunds' }),\n        data: [total - getLoanValue(props)],\n        stack: 2,\n      },\n    ],\n    colors: [\n      chartColors.loan,\n      chartColors.insuranceFortune,\n      chartColors.lppFees,\n      chartColors.notaryFees,\n      // chartColors.fortune,\n    ],\n    lang: { thousandsSep: \"'\" },\n    credits: { enabled: false },\n  };\n\n  return options;\n};\n\nconst ProjectBarChart = props => <ReactHighcharts config={getConfig(props)} />;\n\nProjectBarChart.defaultProps = {\n  divName: 'projectBarChart',\n  titleAlign: 'center',\n};\n\nProjectBarChart.propTypes = {\n  loan: PropTypes.objectOf(PropTypes.any).isRequired,\n  divName: PropTypes.string,\n  titleAlign: PropTypes.string,\n};\n\nexport default injectIntl(withLoan(ProjectBarChart));\n"]},"hash":"4515aa35b1c170679136b7ea774950c97223b379"}

{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"./emailConfigs","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"emailConfigs"}]},{"source":"./emailHelpers","imported":["getEmailContent","getEmailPart"],"specifiers":[{"kind":"named","imported":"getEmailContent","local":"getEmailContent"},{"kind":"named","imported":"getEmailPart","local":"getEmailPart"}]},{"source":"./mandrill","imported":["sendMandrillTemplate","getMandrillTemplate","getSimpleMandrillTemplate","renderMandrillTemplate"],"specifiers":[{"kind":"named","imported":"sendMandrillTemplate","local":"sendMandrillTemplate"},{"kind":"named","imported":"getMandrillTemplate","local":"getMandrillTemplate"},{"kind":"named","imported":"getSimpleMandrillTemplate","local":"getSimpleMandrillTemplate"},{"kind":"named","imported":"renderMandrillTemplate","local":"renderMandrillTemplate"}]},{"source":"../emailConstants","imported":["FROM_NAME","FROM_EMAIL"],"specifiers":[{"kind":"named","imported":"FROM_NAME","local":"FROM_NAME"},{"kind":"named","imported":"FROM_EMAIL","local":"FROM_EMAIL"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/email/server/EmailService.js","filenameRelative":"imports/core/api/email/server/EmailService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/email/server/EmailService.js.map","sourceFileName":"imports/core/api/email/server/EmailService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"EmailService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 0);\nvar emailConfigs = void 0;\nmodule.watch(require(\"./emailConfigs\"), {\n  default: function _default(v) {\n    emailConfigs = v;\n  }\n}, 1);\n\nvar _getEmailContent = void 0,\n    _getEmailPart = void 0;\n\nmodule.watch(require(\"./emailHelpers\"), {\n  getEmailContent: function getEmailContent(v) {\n    _getEmailContent = v;\n  },\n  getEmailPart: function getEmailPart(v) {\n    _getEmailPart = v;\n  }\n}, 2);\n\nvar _sendMandrillTemplate = void 0,\n    _getMandrillTemplate = void 0,\n    _getSimpleMandrillTemplate = void 0,\n    _renderMandrillTemplate = void 0;\n\nmodule.watch(require(\"./mandrill\"), {\n  sendMandrillTemplate: function sendMandrillTemplate(v) {\n    _sendMandrillTemplate = v;\n  },\n  getMandrillTemplate: function getMandrillTemplate(v) {\n    _getMandrillTemplate = v;\n  },\n  getSimpleMandrillTemplate: function getSimpleMandrillTemplate(v) {\n    _getSimpleMandrillTemplate = v;\n  },\n  renderMandrillTemplate: function renderMandrillTemplate(v) {\n    _renderMandrillTemplate = v;\n  }\n}, 3);\n\nvar _FROM_NAME = void 0,\n    _FROM_EMAIL = void 0;\n\nmodule.watch(require(\"../emailConstants\"), {\n  FROM_NAME: function FROM_NAME(v) {\n    _FROM_NAME = v;\n  },\n  FROM_EMAIL: function FROM_EMAIL(v) {\n    _FROM_EMAIL = v;\n  }\n}, 4);\n\nvar EmailService = function EmailService() {\n  var _this = this;\n\n  (0, _classCallCheck3.default)(this, EmailService);\n\n  this.sendEmail = function (emailId, address, params) {\n    var templateOptions = _this.createTemplateOptions({\n      emailId: emailId,\n      address: address,\n      params: params\n    });\n\n    var template = _this.getTemplate(templateOptions);\n\n    if (_Meteor.isDevelopment || _Meteor.isTest) {\n      _this.emailLogger({\n        emailId: emailId,\n        address: address,\n        template: template\n      });\n    } else {\n      _sendMandrillTemplate(template);\n    }\n  };\n\n  this.sendEmailToUser = function (emailId, userId, params) {\n    var user = _Meteor.users.findOne(userId);\n\n    var emailAddress = user && user.emails[0].address;\n\n    _this.sendEmail(emailId, emailAddress, params);\n  };\n\n  this.sendEmailToLoggedInUser = function (emailId, params) {\n    _this.sendEmailToUser(emailId, _Meteor.userId(), params);\n  };\n\n  this.getEmailConfig = function (emailId) {\n    return emailConfigs[emailId];\n  };\n\n  this.createTemplateOptions = function (_ref) {\n    var emailId = _ref.emailId,\n        address = _ref.address,\n        params = _ref.params;\n\n    var emailConfig = _this.getEmailConfig(emailId);\n\n    var mandrillId = emailConfig.template.mandrillId,\n        createIntlValues = emailConfig.createIntlValues;\n    var intlValues = createIntlValues(params);\n\n    var emailContent = _getEmailContent(emailId, intlValues); // Make sure you call `createOverrides` from emailConfig, to preserve `this`\n    // See: https://github.com/Microsoft/vscode/issues/43930\n\n\n    var _emailConfig$createOv = emailConfig.createOverrides(params, emailContent),\n        variables = _emailConfig$createOv.variables,\n        allowUnsubscribe = _emailConfig$createOv.allowUnsubscribe;\n\n    return {\n      templateName: mandrillId,\n      allowUnsubscribe: allowUnsubscribe,\n      variables: variables,\n      recipientAddress: address,\n      senderAddress: _FROM_EMAIL,\n      senderName: _FROM_NAME,\n      subject: emailContent.subject,\n      sendAt: undefined\n    };\n  };\n\n  this.getAccountsTemplate = function (emailId) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var templateOptions = _this.createTemplateOptions({\n      emailId: emailId,\n      params: params\n    });\n\n    return _getSimpleMandrillTemplate(templateOptions);\n  };\n\n  this.getTemplate = function (templateOptions) {\n    return _getMandrillTemplate(templateOptions);\n  };\n\n  this.getEmailPart = function (emailId, part) {\n    return _getEmailPart({\n      emailId: emailId,\n      part: part\n    });\n  };\n\n  this.renderTemplate = function (templateOptions, emailId) {\n    var result = void 0;\n\n    _this.emailLogger({\n      emailId: emailId,\n      template: templateOptions\n    });\n\n    try {\n      result = _renderMandrillTemplate(templateOptions);\n    } catch (error) {\n      throw new _Meteor.Error('MANDRILL_ERROR', \"Error while rendering mandrill template for \" + emailId, error.reason || error.message || error);\n    }\n\n    return result;\n  };\n\n  this.emailLogger = function (_ref2) {\n    var emailId = _ref2.emailId,\n        address = _ref2.address,\n        template = _ref2.template;\n\n    if (_Meteor.isDevelopment || _Meteor.isTest) {\n      if (address) {\n        console.log(\"EmailService dev: Would've sent \" + emailId + \" to \" + address + \" with this template:\");\n      } else {\n        console.log(\"EmailService dev: Would've sent \" + emailId + \" with this template:\");\n      }\n\n      console.log(JSON.stringify(template, null, 2));\n    }\n  };\n};\n\nmodule.exportDefault(new EmailService());","map":{"version":3,"sources":["imports/core/api/email/server/EmailService.js"],"names":["Meteor","module","watch","require","v","emailConfigs","default","getEmailContent","getEmailPart","sendMandrillTemplate","getMandrillTemplate","getSimpleMandrillTemplate","renderMandrillTemplate","FROM_NAME","FROM_EMAIL","EmailService","sendEmail","emailId","address","params","templateOptions","createTemplateOptions","template","getTemplate","isDevelopment","isTest","emailLogger","sendEmailToUser","userId","user","users","findOne","emailAddress","emails","sendEmailToLoggedInUser","getEmailConfig","emailConfig","mandrillId","createIntlValues","intlValues","emailContent","createOverrides","variables","allowUnsubscribe","templateName","recipientAddress","senderAddress","senderName","subject","sendAt","undefined","getAccountsTemplate","part","renderTemplate","result","error","Error","reason","message","console","log","JSON","stringify","exportDefault"],"mappings":"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","file":"imports/core/api/email/server/EmailService.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport emailConfigs from './emailConfigs';\nimport { getEmailContent, getEmailPart } from './emailHelpers';\nimport {\n  sendMandrillTemplate,\n  getMandrillTemplate,\n  getSimpleMandrillTemplate,\n  renderMandrillTemplate,\n} from './mandrill';\nimport { FROM_NAME, FROM_EMAIL } from '../emailConstants';\n\nclass EmailService {\n  sendEmail = (emailId, address, params) => {\n    const templateOptions = this.createTemplateOptions({\n      emailId,\n      address,\n      params,\n    });\n    const template = this.getTemplate(templateOptions);\n    if (Meteor.isDevelopment || Meteor.isTest) {\n      this.emailLogger({ emailId, address, template });\n    } else {\n      sendMandrillTemplate(template);\n    }\n  };\n\n  sendEmailToUser = (emailId, userId, params) => {\n    const user = Meteor.users.findOne(userId);\n    const emailAddress = user && user.emails[0].address;\n    this.sendEmail(emailId, emailAddress, params);\n  };\n\n  sendEmailToLoggedInUser = (emailId, params) => {\n    this.sendEmailToUser(emailId, Meteor.userId(), params);\n  };\n\n  getEmailConfig = emailId => emailConfigs[emailId];\n\n  createTemplateOptions = ({ emailId, address, params }) => {\n    const emailConfig = this.getEmailConfig(emailId);\n    const { template: { mandrillId }, createIntlValues } = emailConfig;\n\n    const intlValues = createIntlValues(params);\n    const emailContent = getEmailContent(emailId, intlValues);\n\n    // Make sure you call `createOverrides` from emailConfig, to preserve `this`\n    // See: https://github.com/Microsoft/vscode/issues/43930\n    const { variables, allowUnsubscribe } = emailConfig.createOverrides(\n      params,\n      emailContent,\n    );\n\n    return {\n      templateName: mandrillId,\n      allowUnsubscribe,\n      variables,\n      recipientAddress: address,\n      senderAddress: FROM_EMAIL,\n      senderName: FROM_NAME,\n      subject: emailContent.subject,\n      sendAt: undefined,\n    };\n  };\n\n  getAccountsTemplate = (emailId, params = {}) => {\n    const templateOptions = this.createTemplateOptions({ emailId, params });\n    return getSimpleMandrillTemplate(templateOptions);\n  };\n\n  getTemplate = templateOptions => getMandrillTemplate(templateOptions);\n\n  getEmailPart = (emailId, part) => getEmailPart({ emailId, part });\n\n  renderTemplate = (templateOptions, emailId) => {\n    let result;\n    this.emailLogger({ emailId, template: templateOptions });\n\n    try {\n      result = renderMandrillTemplate(templateOptions);\n    } catch (error) {\n      throw new Meteor.Error(\n        'MANDRILL_ERROR',\n        `Error while rendering mandrill template for ${emailId}`,\n        error.reason || error.message || error,\n      );\n    }\n\n    return result;\n  };\n\n  emailLogger = ({ emailId, address, template }) => {\n    if (Meteor.isDevelopment || Meteor.isTest) {\n      if (address) {\n        console.log(`EmailService dev: Would've sent ${emailId} to ${address} with this template:`);\n      } else {\n        console.log(`EmailService dev: Would've sent ${emailId} with this template:`);\n      }\n      console.log(JSON.stringify(template, null, 2));\n    }\n  };\n}\n\nexport default new EmailService();\n"]},"hash":"76c043777d90c46190acc52add79604f419f93df"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"simpl-schema","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SimpleSchema"}]},{"source":"../files/files","imported":["getFileSchema"],"specifiers":[{"kind":"named","imported":"getFileSchema","local":"getFileSchema"}]},{"source":"./propertyConstants","imported":["PROPERTY_STATUS","USAGE_TYPE","PROPERTY_STYLE","VOLUME_NORM"],"specifiers":[{"kind":"named","imported":"PROPERTY_STATUS","local":"PROPERTY_STATUS"},{"kind":"named","imported":"USAGE_TYPE","local":"USAGE_TYPE"},{"kind":"named","imported":"PROPERTY_STYLE","local":"PROPERTY_STYLE"},{"kind":"named","imported":"VOLUME_NORM","local":"VOLUME_NORM"}]}],"exports":{"exported":["PropertySchema"],"specifiers":[{"kind":"local","local":"PropertySchema","exported":"PropertySchema"}]}}},"options":{"filename":"imports/core/api/properties/properties.js","filenameRelative":"imports/core/api/properties/properties.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/properties/properties.js.map","sourceFileName":"imports/core/api/properties/properties.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"properties"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nmodule.export({\n  PropertySchema: function PropertySchema() {\n    return _PropertySchema;\n  }\n});\n\nvar _Mongo = void 0;\n\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function Mongo(v) {\n    _Mongo = v;\n  }\n}, 0);\nvar SimpleSchema = void 0;\nmodule.watch(require(\"simpl-schema\"), {\n  default: function _default(v) {\n    SimpleSchema = v;\n  }\n}, 1);\n\nvar _getFileSchema = void 0;\n\nmodule.watch(require(\"../files/files\"), {\n  getFileSchema: function getFileSchema(v) {\n    _getFileSchema = v;\n  }\n}, 2);\n\nvar _PROPERTY_STATUS = void 0,\n    _USAGE_TYPE = void 0,\n    _PROPERTY_STYLE = void 0,\n    _VOLUME_NORM = void 0;\n\nmodule.watch(require(\"./propertyConstants\"), {\n  PROPERTY_STATUS: function PROPERTY_STATUS(v) {\n    _PROPERTY_STATUS = v;\n  },\n  USAGE_TYPE: function USAGE_TYPE(v) {\n    _USAGE_TYPE = v;\n  },\n  PROPERTY_STYLE: function PROPERTY_STYLE(v) {\n    _PROPERTY_STYLE = v;\n  },\n  VOLUME_NORM: function VOLUME_NORM(v) {\n    _VOLUME_NORM = v;\n  }\n}, 3);\nexports.PropertySchema = _PropertySchema;\nvar Properties = new _Mongo.Collection('properties'); // Prevent all client side modifications of mongoDB\n\nProperties.deny({\n  insert: function insert() {\n    return true;\n  },\n  update: function update() {\n    return true;\n  },\n  remove: function remove() {\n    return true;\n  }\n});\nProperties.allow({\n  insert: function insert() {\n    return false;\n  },\n  update: function update() {\n    return false;\n  },\n  remove: function remove() {\n    return false;\n  }\n});\nvar PropertyFilesSchema = new SimpleSchema(_getFileSchema('property'));\n\nvar _PropertySchema = new SimpleSchema({\n  userId: {\n    type: String,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function autoValue() {\n      if (this.isInsert) {\n        return new Date();\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function autoValue() {\n      if (this.isInsert || this.isUpdate) {\n        return new Date();\n      }\n    }\n  },\n  status: {\n    type: String,\n    defaultValue: _PROPERTY_STATUS.FOR_SALE,\n    allowedValues: Object.values(_PROPERTY_STATUS)\n  },\n  value: {\n    // Cost of the property\n    type: Number,\n    min: 0,\n    max: 100000000,\n    optional: true\n  },\n  propertyWork: {\n    // Additional work on property\n    type: Number,\n    min: 0,\n    max: 100000000,\n    optional: true\n  },\n  usageType: {\n    type: String,\n    defaultValue: _USAGE_TYPE.PRIMARY,\n    allowedValues: Object.values(_USAGE_TYPE)\n  },\n  investmentRent: {\n    // Rent of property if investment\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100000000\n  },\n  style: {\n    type: String,\n    optional: true,\n    defaultValue: _PROPERTY_STYLE.FLAT,\n    allowedValues: Object.values(_PROPERTY_STYLE)\n  },\n  address: {\n    // For condensed, google places addresses\n    type: String,\n    optional: true\n  },\n  address1: {\n    type: String,\n    optional: true\n  },\n  address2: {\n    type: String,\n    optional: true\n  },\n  zipCode: {\n    type: Number,\n    optional: true,\n    min: 1000,\n    max: 9999\n  },\n  city: {\n    type: String,\n    optional: true\n  },\n  constructionYear: {\n    type: Number,\n    min: 0,\n    max: 2030,\n    optional: true\n  },\n  renovationYear: {\n    type: Number,\n    min: 0,\n    max: 2030,\n    optional: true\n  },\n  insideArea: {\n    type: Number,\n    optional: true,\n    min: 0\n  },\n  landArea: {\n    type: Number,\n    optional: true,\n    min: 0\n  },\n  balconyArea: {\n    type: Number,\n    optional: true,\n    min: 0\n  },\n  terraceArea: {\n    type: Number,\n    optional: true,\n    min: 0\n  },\n  roomCount: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100\n  },\n  bathroomCount: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100\n  },\n  toiletCount: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100\n  },\n  volume: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 5000\n  },\n  volumeNorm: {\n    type: String,\n    defaultValue: _VOLUME_NORM.SIA,\n    allowedValues: Object.keys(_VOLUME_NORM)\n  },\n  parking: {\n    type: Object,\n    defaultValue: {}\n  },\n  'parking.box': {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100\n  },\n  'parking.inside': {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100\n  },\n  'parking.outside': {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100\n  },\n  minergie: {\n    type: Boolean,\n    defaultValue: false\n  },\n  isCoproperty: {\n    type: Boolean,\n    defaultValue: false\n  },\n  isNew: {\n    type: Boolean,\n    defaultValue: false\n  },\n  copropertyPercentage: {\n    type: Number,\n    min: 0,\n    max: 1000,\n    optional: true\n  },\n  cityPlacementQuality: {\n    type: Number,\n    min: 0,\n    max: 5,\n    optional: true\n  },\n  buildingPlacementQuality: {\n    type: Number,\n    min: 0,\n    max: 5,\n    optional: true\n  },\n  buildingQuality: {\n    type: Number,\n    min: 0,\n    max: 5,\n    optional: true\n  },\n  flatQuality: {\n    type: Number,\n    min: 0,\n    max: 5,\n    optional: true\n  },\n  materialsQuality: {\n    type: Number,\n    min: 0,\n    max: 5,\n    optional: true\n  },\n  otherNotes: {\n    type: String,\n    optional: true\n  },\n  name: {\n    type: String,\n    optional: true\n  },\n  latitude: {\n    type: Number,\n    optional: true,\n    min: -90,\n    max: 90\n  },\n  longitude: {\n    type: Number,\n    optional: true,\n    min: -180,\n    max: 180\n  },\n  nearestBusStation: {\n    type: Object,\n    blackbox: true,\n    optional: true\n  },\n  nearestTrainStation: {\n    type: Object,\n    blackbox: true,\n    optional: true\n  },\n  customFields: {\n    // Allows storing custom fields that aren't allowed by the default schema\n    type: Object,\n    blackbox: true,\n    defaultValue: {}\n  },\n  adminValidation: {\n    type: Object,\n    defaultValue: {},\n    blackbox: true\n  },\n  files: {\n    type: PropertyFilesSchema,\n    defaultValue: {}\n  }\n}); // Attach schema\n\n\nProperties.attachSchema(_PropertySchema);\nmodule.exportDefault(Properties);","map":{"version":3,"sources":["imports/core/api/properties/properties.js"],"names":["module","export","PropertySchema","Mongo","watch","require","v","SimpleSchema","default","getFileSchema","PROPERTY_STATUS","USAGE_TYPE","PROPERTY_STYLE","VOLUME_NORM","Properties","Collection","deny","insert","update","remove","allow","PropertyFilesSchema","userId","type","String","optional","createdAt","Date","autoValue","isInsert","updatedAt","isUpdate","status","defaultValue","FOR_SALE","allowedValues","Object","values","value","Number","min","max","propertyWork","usageType","PRIMARY","investmentRent","style","FLAT","address","address1","address2","zipCode","city","constructionYear","renovationYear","insideArea","landArea","balconyArea","terraceArea","roomCount","bathroomCount","toiletCount","volume","volumeNorm","SIA","keys","parking","minergie","Boolean","isCoproperty","isNew","copropertyPercentage","cityPlacementQuality","buildingPlacementQuality","buildingQuality","flatQuality","materialsQuality","otherNotes","name","latitude","longitude","nearestBusStation","blackbox","nearestTrainStation","customFields","adminValidation","files","attachSchema","exportDefault"],"mappings":"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","file":"imports/core/api/properties/properties.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\nimport { getFileSchema } from '../files/files';\nimport {\n  PROPERTY_STATUS,\n  USAGE_TYPE,\n  PROPERTY_STYLE,\n  VOLUME_NORM,\n} from './propertyConstants';\n\nconst Properties = new Mongo.Collection('properties');\n\n// Prevent all client side modifications of mongoDB\nProperties.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\nProperties.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nconst PropertyFilesSchema = new SimpleSchema(getFileSchema('property'));\n\nexport const PropertySchema = new SimpleSchema({\n  userId: {\n    type: String,\n    optional: true,\n  },\n  createdAt: {\n    type: Date,\n    autoValue() {\n      if (this.isInsert) {\n        return new Date();\n      }\n    },\n  },\n  updatedAt: {\n    type: Date,\n    autoValue() {\n      if (this.isInsert || this.isUpdate) {\n        return new Date();\n      }\n    },\n  },\n  status: {\n    type: String,\n    defaultValue: PROPERTY_STATUS.FOR_SALE,\n    allowedValues: Object.values(PROPERTY_STATUS),\n  },\n  value: {\n    // Cost of the property\n    type: Number,\n    min: 0,\n    max: 100000000,\n    optional: true,\n  },\n  propertyWork: {\n    // Additional work on property\n    type: Number,\n    min: 0,\n    max: 100000000,\n    optional: true,\n  },\n  usageType: {\n    type: String,\n    defaultValue: USAGE_TYPE.PRIMARY,\n    allowedValues: Object.values(USAGE_TYPE),\n  },\n  investmentRent: {\n    // Rent of property if investment\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100000000,\n  },\n  style: {\n    type: String,\n    optional: true,\n    defaultValue: PROPERTY_STYLE.FLAT,\n    allowedValues: Object.values(PROPERTY_STYLE),\n  },\n  address: {\n    // For condensed, google places addresses\n    type: String,\n    optional: true,\n  },\n  address1: {\n    type: String,\n    optional: true,\n  },\n  address2: {\n    type: String,\n    optional: true,\n  },\n  zipCode: {\n    type: Number,\n    optional: true,\n    min: 1000,\n    max: 9999,\n  },\n  city: {\n    type: String,\n    optional: true,\n  },\n  constructionYear: {\n    type: Number,\n    min: 0,\n    max: 2030,\n    optional: true,\n  },\n  renovationYear: {\n    type: Number,\n    min: 0,\n    max: 2030,\n    optional: true,\n  },\n  insideArea: {\n    type: Number,\n    optional: true,\n    min: 0,\n  },\n  landArea: {\n    type: Number,\n    optional: true,\n    min: 0,\n  },\n  balconyArea: {\n    type: Number,\n    optional: true,\n    min: 0,\n  },\n  terraceArea: {\n    type: Number,\n    optional: true,\n    min: 0,\n  },\n  roomCount: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100,\n  },\n  bathroomCount: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100,\n  },\n  toiletCount: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100,\n  },\n  volume: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 5000,\n  },\n  volumeNorm: {\n    type: String,\n    defaultValue: VOLUME_NORM.SIA,\n    allowedValues: Object.keys(VOLUME_NORM),\n  },\n  parking: {\n    type: Object,\n    defaultValue: {},\n  },\n  'parking.box': {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100,\n  },\n  'parking.inside': {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100,\n  },\n  'parking.outside': {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100,\n  },\n  minergie: {\n    type: Boolean,\n    defaultValue: false,\n  },\n  isCoproperty: {\n    type: Boolean,\n    defaultValue: false,\n  },\n  isNew: {\n    type: Boolean,\n    defaultValue: false,\n  },\n  copropertyPercentage: {\n    type: Number,\n    min: 0,\n    max: 1000,\n    optional: true,\n  },\n  cityPlacementQuality: {\n    type: Number,\n    min: 0,\n    max: 5,\n    optional: true,\n  },\n  buildingPlacementQuality: {\n    type: Number,\n    min: 0,\n    max: 5,\n    optional: true,\n  },\n  buildingQuality: {\n    type: Number,\n    min: 0,\n    max: 5,\n    optional: true,\n  },\n  flatQuality: {\n    type: Number,\n    min: 0,\n    max: 5,\n    optional: true,\n  },\n  materialsQuality: {\n    type: Number,\n    min: 0,\n    max: 5,\n    optional: true,\n  },\n  otherNotes: {\n    type: String,\n    optional: true,\n  },\n  name: {\n    type: String,\n    optional: true,\n  },\n  latitude: {\n    type: Number,\n    optional: true,\n    min: -90,\n    max: 90,\n  },\n  longitude: {\n    type: Number,\n    optional: true,\n    min: -180,\n    max: 180,\n  },\n  nearestBusStation: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n  nearestTrainStation: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n  customFields: {\n    // Allows storing custom fields that aren't allowed by the default schema\n    type: Object,\n    blackbox: true,\n    defaultValue: {},\n  },\n  adminValidation: { type: Object, defaultValue: {}, blackbox: true },\n  files: {\n    type: PropertyFilesSchema,\n    defaultValue: {},\n  },\n});\n\n// Attach schema\nProperties.attachSchema(PropertySchema);\nexport default Properties;\n"]},"hash":"a7ecb60381934c6ca562ae256ae25663c0e5b2fe"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./linkTypes/linkMany.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"LinkMany"}]},{"source":"./linkTypes/linkManyMeta.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"LinkManyMeta"}]},{"source":"./linkTypes/linkOne.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"LinkOne"}]},{"source":"./linkTypes/linkOneMeta.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"LinkOneMeta"}]},{"source":"./config.schema.js","imported":["LinkConfigSchema","LinkConfigDefaults"],"specifiers":[{"kind":"named","imported":"LinkConfigSchema","local":"LinkConfigSchema"},{"kind":"named","imported":"LinkConfigDefaults","local":"LinkConfigDefaults"}]},{"source":"./linkTypes/lib/smartArguments","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"smartArguments"}]},{"source":"dot-object","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"dot"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]}],"exports":{"exported":["Linker"],"specifiers":[{"kind":"local","local":"Linker","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/linker.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/linker.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/linker.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/linker.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"linker"},"ignored":false,"code":"module.export({\n    default: () => Linker\n});\nlet LinkMany;\nmodule.watch(require(\"./linkTypes/linkMany.js\"), {\n    default(v) {\n        LinkMany = v;\n    }\n\n}, 0);\nlet LinkManyMeta;\nmodule.watch(require(\"./linkTypes/linkManyMeta.js\"), {\n    default(v) {\n        LinkManyMeta = v;\n    }\n\n}, 1);\nlet LinkOne;\nmodule.watch(require(\"./linkTypes/linkOne.js\"), {\n    default(v) {\n        LinkOne = v;\n    }\n\n}, 2);\nlet LinkOneMeta;\nmodule.watch(require(\"./linkTypes/linkOneMeta.js\"), {\n    default(v) {\n        LinkOneMeta = v;\n    }\n\n}, 3);\nlet LinkConfigSchema, LinkConfigDefaults;\nmodule.watch(require(\"./config.schema.js\"), {\n    LinkConfigSchema(v) {\n        LinkConfigSchema = v;\n    },\n\n    LinkConfigDefaults(v) {\n        LinkConfigDefaults = v;\n    }\n\n}, 4);\nlet smartArguments;\nmodule.watch(require(\"./linkTypes/lib/smartArguments\"), {\n    default(v) {\n        smartArguments = v;\n    }\n\n}, 5);\nlet dot;\nmodule.watch(require(\"dot-object\"), {\n    default(v) {\n        dot = v;\n    }\n\n}, 6);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n    check(v) {\n        check = v;\n    }\n\n}, 7);\n\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n    _(v) {\n        _ = v;\n    }\n\n}, 8);\n\nclass Linker {\n    /**\n     * @param mainCollection\n     * @param linkName\n     * @param linkConfig\n     */constructor(mainCollection, linkName, linkConfig) {\n        this.mainCollection = mainCollection;\n        this.linkConfig = Object.assign({}, LinkConfigDefaults, linkConfig);\n        this.linkName = linkName; // check linkName must not exist in schema\n\n        this._validateAndClean(); // initialize cascade removal hooks.\n\n\n        this._initAutoremove();\n\n        this._initDenormalization();\n\n        if (this.isVirtual()) {\n            // if it's a virtual field make sure that when this is deleted, it will be removed from the references\n            if (!linkConfig.autoremove) {\n                this._handleReferenceRemovalForVirtualLinks();\n            }\n        } else {\n            this._initIndex();\n        }\n    } /**\n       * Values which represent for the relation a single link\n       * @returns {string[]}\n       */\n\n    get oneTypes() {\n        return ['one', '1'];\n    } /**\n       * Returns the strategies: one, many, one-meta, many-meta\n       * @returns {string}\n       */\n\n    get strategy() {\n        let strategy = this.isMany() ? 'many' : 'one';\n\n        if (this.linkConfig.metadata) {\n            strategy += '-meta';\n        }\n\n        return strategy;\n    } /**\n       * Returns the field name in the document where the actual relationships are stored.\n       * @returns string\n       */\n\n    get linkStorageField() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.linkStorageField;\n        }\n\n        return this.linkConfig.field;\n    } /**\n       * The collection that is linked with the current collection\n       * @returns Mongo.Collection\n       */\n\n    getLinkedCollection() {\n        return this.linkConfig.collection;\n    } /**\n       * If the relationship for this link is of \"many\" type.\n       */\n\n    isMany() {\n        return !this.isSingle();\n    } /**\n       * If the relationship for this link contains metadata\n       */\n\n    isMeta() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.isMeta();\n        }\n\n        return !!this.linkConfig.metadata;\n    } /**\n       * @returns {boolean}\n       */\n\n    isSingle() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.isSingle();\n        }\n\n        return _.contains(this.oneTypes, this.linkConfig.type);\n    } /**\n       * @returns {boolean}\n       */\n\n    isVirtual() {\n        return !!this.linkConfig.inversedBy;\n    } /**\n       * Should return a single result.\n       */\n\n    isOneResult() {\n        return this.isVirtual() && this.linkConfig.relatedLinker.linkConfig.unique || !this.isVirtual() && this.isSingle();\n    } /**\n       * @param object\n       * @param collection To impersonate the getLinkedCollection() of the \"Linker\"\n       *\n       * @returns {LinkOne|LinkMany|LinkManyMeta|LinkOneMeta|LinkResolve}\n       */\n\n    createLink(object, collection = null) {\n        let helperClass = this._getHelperClass();\n\n        return new helperClass(this, object, collection);\n    } /**\n       * @returns {*}\n       * @private\n       */\n\n    _validateAndClean() {\n        if (!this.linkConfig.collection) {\n            throw new Meteor.Error('invalid-config', `For the link ${this.linkName} you did not provide a collection.`);\n        }\n\n        if (typeof this.linkConfig.collection === 'string') {\n            const collectionName = this.linkConfig.collection;\n            this.linkConfig.collection = Mongo.Collection.get(collectionName);\n\n            if (!this.linkConfig.collection) {\n                throw new Meteor.Error('invalid-collection', `Could not find a collection with the name: ${collectionName}`);\n            }\n        }\n\n        if (this.isVirtual()) {\n            return this._prepareVirtual();\n        } else {\n            if (!this.linkConfig.type) {\n                this.linkConfig.type = 'one';\n            }\n\n            if (!this.linkConfig.field) {\n                this.linkConfig.field = this._generateFieldName();\n            } else {\n                if (this.linkConfig.field == this.linkName) {\n                    throw new Meteor.Error('invalid-config', `For the link ${this.linkName} you must not use the same name for the field, otherwise it will cause conflicts when fetching data`);\n                }\n            }\n        }\n\n        check(this.linkConfig, LinkConfigSchema);\n    } /**\n       * We need to apply same type of rules in this case.\n       * @private\n       */\n\n    _prepareVirtual() {\n        const {\n            collection,\n            inversedBy\n        } = this.linkConfig;\n        let linker = collection.getLinker(inversedBy);\n\n        if (!linker) {\n            // it is possible that the collection doesn't have a linker created yet.\n            // so we will create it on startup after all links have been defined\n            Meteor.startup(() => {\n                linker = collection.getLinker(inversedBy);\n\n                if (!linker) {\n                    throw new Meteor.Error(`You tried setting up an inversed link in \"${this.mainCollection._name}\" pointing to collection: \"${collection._name}\" link: \"${inversedBy}\", but no such link was found. Maybe a typo ?`);\n                } else {\n                    this._setupVirtualConfig(linker);\n                }\n            });\n        } else {\n            this._setupVirtualConfig(linker);\n        }\n    } /**\n       * @param linker\n       * @private\n       */\n\n    _setupVirtualConfig(linker) {\n        const virtualLinkConfig = linker.linkConfig;\n\n        if (!virtualLinkConfig) {\n            throw new Meteor.Error(`There is no link-config for the related collection on ${inversedBy}. Make sure you added the direct links before specifying virtual ones.`);\n        }\n\n        _.extend(this.linkConfig, {\n            metadata: virtualLinkConfig.metadata,\n            relatedLinker: linker\n        });\n    } /**\n       * Depending on the strategy, we create the proper helper class\n       * @private\n       */\n\n    _getHelperClass() {\n        switch (this.strategy) {\n            case 'many-meta':\n                return LinkManyMeta;\n\n            case 'many':\n                return LinkMany;\n\n            case 'one-meta':\n                return LinkOneMeta;\n\n            case 'one':\n                return LinkOne;\n        }\n\n        throw new Meteor.Error('invalid-strategy', `${this.strategy} is not a valid strategy`);\n    } /**\n       * If field name not present, we generate it.\n       * @private\n       */\n\n    _generateFieldName() {\n        let cleanedCollectionName = this.linkConfig.collection._name.replace(/\\./g, '_');\n\n        let defaultFieldPrefix = this.linkName + '_' + cleanedCollectionName;\n\n        switch (this.strategy) {\n            case 'many-meta':\n                return `${defaultFieldPrefix}_metas`;\n\n            case 'many':\n                return `${defaultFieldPrefix}_ids`;\n\n            case 'one-meta':\n                return `${defaultFieldPrefix}_meta`;\n\n            case 'one':\n                return `${defaultFieldPrefix}_id`;\n        }\n    } /**\n       * When a link that is declared virtual is removed, the reference will be removed from every other link.\n       * @private\n       */\n\n    _handleReferenceRemovalForVirtualLinks() {\n        this.mainCollection.after.remove((userId, doc) => {\n            // this problem may occur when you do a .remove() before Meteor.startup()\n            if (!this.linkConfig.relatedLinker) {\n                console.warn(`There was an error finding the link for removal for collection: \"${this.mainCollection._name}\" with link: \"${this.linkName}\". This may occur when you do a .remove() before Meteor.startup()`);\n                return;\n            }\n\n            let accessor = this.createLink(doc);\n\n            _.each(accessor.fetch(), linkedObj => {\n                const {\n                    relatedLinker\n                } = this.linkConfig; // We do this check, to avoid self-referencing hell when defining virtual links\n                // Virtual links if not found \"compile-time\", we will try again to reprocess them on Meteor.startup\n                // if a removal happens before Meteor.startup this may fail\n\n                if (relatedLinker) {\n                    let link = relatedLinker.createLink(linkedObj);\n\n                    if (relatedLinker.isSingle()) {\n                        link.unset();\n                    } else {\n                        link.remove(doc);\n                    }\n                }\n            });\n        });\n    }\n\n    _initIndex() {\n        if (Meteor.isServer) {\n            let field = this.linkConfig.field;\n\n            if (this.linkConfig.metadata) {\n                field = field + '._id';\n            }\n\n            if (this.linkConfig.index) {\n                if (this.isVirtual()) {\n                    throw new Meteor.Error('You cannot set index on an inversed link.');\n                }\n\n                let options;\n\n                if (this.linkConfig.unique) {\n                    if (this.isMany()) {\n                        throw new Meteor.Error('You cannot set unique property on a multi field.');\n                    }\n\n                    options = {\n                        unique: true\n                    };\n                }\n\n                this.mainCollection._ensureIndex({\n                    [field]: 1\n                }, options);\n            } else {\n                if (this.linkConfig.unique) {\n                    if (this.isVirtual()) {\n                        throw new Meteor.Error('You cannot set unique property on an inversed link.');\n                    }\n\n                    if (this.isMany()) {\n                        throw new Meteor.Error('You cannot set unique property on a multi field.');\n                    }\n\n                    this.mainCollection._ensureIndex({\n                        [field]: 1\n                    }, {\n                        unique: true\n                    });\n                }\n            }\n        }\n    }\n\n    _initAutoremove() {\n        if (!this.linkConfig.autoremove) {\n            return;\n        }\n\n        if (!this.isVirtual()) {\n            this.mainCollection.after.remove((userId, doc) => {\n                this.getLinkedCollection().remove({\n                    _id: {\n                        $in: smartArguments.getIds(doc[this.linkStorageField])\n                    }\n                });\n            });\n        } else {\n            this.mainCollection.after.remove((userId, doc) => {\n                const linker = this.mainCollection.getLink(doc, this.linkName);\n                const ids = linker.find({}, {\n                    fields: {\n                        _id: 1\n                    }\n                }).fetch().map(item => item._id);\n                this.getLinkedCollection().remove({\n                    _id: {\n                        $in: ids\n                    }\n                });\n            });\n        }\n    } /**\n       * Initializes denormalization using herteby:denormalize\n       * @private\n       */\n\n    _initDenormalization() {\n        if (!this.linkConfig.denormalize || !Meteor.isServer) {\n            return;\n        }\n\n        const packageExists = !!Package['herteby:denormalize'];\n\n        if (!packageExists) {\n            throw new Meteor.Error('missing-package', `Please add the herteby:denormalize package to your Meteor application in order to make caching work`);\n        }\n\n        const {\n            field,\n            body,\n            bypassSchema\n        } = this.linkConfig.denormalize;\n        let cacheConfig;\n        let referenceFieldSuffix = '';\n\n        if (this.isMeta()) {\n            referenceFieldSuffix = this.isSingle() ? '._id' : ':_id';\n        }\n\n        if (this.isVirtual()) {\n            let inversedLink = this.linkConfig.relatedLinker.linkConfig;\n            let type = inversedLink.type == 'many' ? 'many-inverse' : 'inversed';\n            cacheConfig = {\n                type: type,\n                collection: this.linkConfig.collection,\n                fields: body,\n                referenceField: inversedLink.field + referenceFieldSuffix,\n                cacheField: field,\n                bypassSchema: !!bypassSchema\n            };\n        } else {\n            cacheConfig = {\n                type: this.linkConfig.type,\n                collection: this.linkConfig.collection,\n                fields: body,\n                referenceField: this.linkConfig.field + referenceFieldSuffix,\n                cacheField: field,\n                bypassSchema: !!bypassSchema\n            };\n        }\n\n        if (this.isVirtual()) {\n            Meteor.startup(() => {\n                this.mainCollection.cache(cacheConfig);\n            });\n        } else {\n            this.mainCollection.cache(cacheConfig);\n        }\n    } /**\n       * Verifies if this linker is denormalized. It can be denormalized from the inverse side as well.\n       *\n       * @returns {boolean}\n       * @private\n       */\n\n    isDenormalized() {\n        return !!this.linkConfig.denormalize;\n    } /**\n       * Verifies if the body of the linked element does not contain fields outside the cache body\n       *\n       * @param body\n       * @returns {boolean}\n       * @private\n       */\n\n    isSubBodyDenormalized(body) {\n        const cacheBody = this.linkConfig.denormalize.body;\n\n        const cacheBodyFields = _.keys(dot.dot(cacheBody));\n\n        const bodyFields = _.keys(dot.dot(_.omit(body, '_id')));\n\n        return _.difference(bodyFields, cacheBodyFields).length === 0;\n    }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linker.js"],"names":["module","export","default","Linker","LinkMany","watch","require","v","LinkManyMeta","LinkOne","LinkOneMeta","LinkConfigSchema","LinkConfigDefaults","smartArguments","dot","check","_","constructor","mainCollection","linkName","linkConfig","Object","assign","_validateAndClean","_initAutoremove","_initDenormalization","isVirtual","autoremove","_handleReferenceRemovalForVirtualLinks","_initIndex","oneTypes","strategy","isMany","metadata","linkStorageField","relatedLinker","field","getLinkedCollection","collection","isSingle","isMeta","contains","type","inversedBy","isOneResult","unique","createLink","object","helperClass","_getHelperClass","Meteor","Error","collectionName","Mongo","Collection","get","_prepareVirtual","_generateFieldName","linker","getLinker","startup","_name","_setupVirtualConfig","virtualLinkConfig","extend","cleanedCollectionName","replace","defaultFieldPrefix","after","remove","userId","doc","console","warn","accessor","each","fetch","linkedObj","link","unset","isServer","index","options","_ensureIndex","_id","$in","getIds","getLink","ids","find","fields","map","item","denormalize","packageExists","Package","body","bypassSchema","cacheConfig","referenceFieldSuffix","inversedLink","referenceField","cacheField","cache","isDenormalized","isSubBodyDenormalized","cacheBody","cacheBodyFields","keys","bodyFields","omit","difference","length"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/links/linker.js.map","sourcesContent":["import LinkMany from './linkTypes/linkMany.js';\nimport LinkManyMeta from './linkTypes/linkManyMeta.js';\nimport LinkOne from './linkTypes/linkOne.js';\nimport LinkOneMeta from './linkTypes/linkOneMeta.js';\nimport {LinkConfigSchema, LinkConfigDefaults} from './config.schema.js';\nimport smartArguments from './linkTypes/lib/smartArguments';\nimport dot from 'dot-object';\nimport {check} from 'meteor/check';\nimport {_} from 'meteor/underscore';\n\nexport default class Linker {\n    /**\n     * @param mainCollection\n     * @param linkName\n     * @param linkConfig\n     */\n    constructor(mainCollection, linkName, linkConfig) {\n        this.mainCollection = mainCollection;\n        this.linkConfig = Object.assign({}, LinkConfigDefaults, linkConfig);\n        this.linkName = linkName;\n\n        // check linkName must not exist in schema\n        this._validateAndClean();\n\n        // initialize cascade removal hooks.\n        this._initAutoremove();\n        this._initDenormalization();\n\n        if (this.isVirtual()) {\n            // if it's a virtual field make sure that when this is deleted, it will be removed from the references\n            if (!linkConfig.autoremove) {\n                this._handleReferenceRemovalForVirtualLinks();\n            }\n        } else {\n            this._initIndex();\n        }\n    }\n\n    /**\n     * Values which represent for the relation a single link\n     * @returns {string[]}\n     */\n    get oneTypes() {\n        return ['one', '1'];\n    }\n\n    /**\n     * Returns the strategies: one, many, one-meta, many-meta\n     * @returns {string}\n     */\n    get strategy() {\n        let strategy = this.isMany() ? 'many' : 'one';\n        if (this.linkConfig.metadata) {\n            strategy += '-meta';\n        }\n\n        return strategy;\n    }\n\n    /**\n     * Returns the field name in the document where the actual relationships are stored.\n     * @returns string\n     */\n    get linkStorageField() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.linkStorageField;\n        }\n\n        return this.linkConfig.field;\n    }\n\n    /**\n     * The collection that is linked with the current collection\n     * @returns Mongo.Collection\n     */\n    getLinkedCollection() {\n        return this.linkConfig.collection;\n    }\n\n    /**\n     * If the relationship for this link is of \"many\" type.\n     */\n    isMany() {\n        return !this.isSingle();\n    }\n\n    /**\n     * If the relationship for this link contains metadata\n     */\n    isMeta() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.isMeta();\n        }\n\n        return !!this.linkConfig.metadata;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSingle() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.isSingle();\n        }\n\n        return _.contains(this.oneTypes, this.linkConfig.type);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isVirtual() {\n        return !!this.linkConfig.inversedBy;\n    }\n\n    /**\n     * Should return a single result.\n     */\n    isOneResult() {\n        return (\n            (this.isVirtual() && this.linkConfig.relatedLinker.linkConfig.unique)\n            || (!this.isVirtual() && this.isSingle())\n        );\n    }\n\n    /**\n     * @param object\n     * @param collection To impersonate the getLinkedCollection() of the \"Linker\"\n     *\n     * @returns {LinkOne|LinkMany|LinkManyMeta|LinkOneMeta|LinkResolve}\n     */\n    createLink(object, collection = null) {\n        let helperClass = this._getHelperClass();\n\n        return new helperClass(this, object, collection);\n    }\n\n    /**\n     * @returns {*}\n     * @private\n     */\n    _validateAndClean() {\n        if (!this.linkConfig.collection) {\n            throw new Meteor.Error('invalid-config', `For the link ${this.linkName} you did not provide a collection.`)\n        }\n\n        if (typeof(this.linkConfig.collection) === 'string') {\n            const collectionName = this.linkConfig.collection;\n            this.linkConfig.collection = Mongo.Collection.get(collectionName);\n\n            if (!this.linkConfig.collection) {\n                throw new Meteor.Error('invalid-collection', `Could not find a collection with the name: ${collectionName}`);\n            }\n        }\n\n        if (this.isVirtual()) {\n            return this._prepareVirtual();\n        } else {\n            if (!this.linkConfig.type) {\n                this.linkConfig.type = 'one';\n            }\n\n            if (!this.linkConfig.field) {\n                this.linkConfig.field = this._generateFieldName();\n            } else {\n                if (this.linkConfig.field == this.linkName) {\n                    throw new Meteor.Error('invalid-config', `For the link ${this.linkName} you must not use the same name for the field, otherwise it will cause conflicts when fetching data`);\n                }\n            }\n        }\n\n        check(this.linkConfig, LinkConfigSchema);\n    }\n\n    /**\n     * We need to apply same type of rules in this case.\n     * @private\n     */\n    _prepareVirtual() {\n        const {collection, inversedBy} = this.linkConfig;\n        let linker = collection.getLinker(inversedBy);\n\n        if (!linker) {\n            // it is possible that the collection doesn't have a linker created yet.\n            // so we will create it on startup after all links have been defined\n            Meteor.startup(() => {\n                linker = collection.getLinker(inversedBy);\n                if (!linker) {\n                    throw new Meteor.Error(`You tried setting up an inversed link in \"${this.mainCollection._name}\" pointing to collection: \"${collection._name}\" link: \"${inversedBy}\", but no such link was found. Maybe a typo ?`)\n                } else {\n                    this._setupVirtualConfig(linker);\n                }\n            })\n        } else {\n            this._setupVirtualConfig(linker);\n        }\n    }\n\n    /**\n     * @param linker\n     * @private\n     */\n    _setupVirtualConfig(linker) {\n        const virtualLinkConfig = linker.linkConfig;\n\n        if (!virtualLinkConfig) {\n            throw new Meteor.Error(`There is no link-config for the related collection on ${inversedBy}. Make sure you added the direct links before specifying virtual ones.`)\n        }\n\n        _.extend(this.linkConfig, {\n            metadata: virtualLinkConfig.metadata,\n            relatedLinker: linker\n        });\n    }\n\n    /**\n     * Depending on the strategy, we create the proper helper class\n     * @private\n     */\n    _getHelperClass() {\n        switch (this.strategy) {\n            case 'many-meta':\n                return LinkManyMeta;\n            case 'many':\n                return LinkMany;\n            case 'one-meta':\n                return LinkOneMeta;\n            case 'one':\n                return LinkOne;\n        }\n\n        throw new Meteor.Error('invalid-strategy', `${this.strategy} is not a valid strategy`);\n    }\n\n    /**\n     * If field name not present, we generate it.\n     * @private\n     */\n    _generateFieldName() {\n        let cleanedCollectionName = this.linkConfig.collection._name.replace(/\\./g, '_');\n        let defaultFieldPrefix = this.linkName + '_' + cleanedCollectionName;\n\n        switch (this.strategy) {\n            case 'many-meta':\n                return `${defaultFieldPrefix}_metas`;\n            case 'many':\n                return `${defaultFieldPrefix}_ids`;\n            case 'one-meta':\n                return `${defaultFieldPrefix}_meta`;\n            case 'one':\n                return `${defaultFieldPrefix}_id`;\n        }\n    }\n\n    /**\n     * When a link that is declared virtual is removed, the reference will be removed from every other link.\n     * @private\n     */\n    _handleReferenceRemovalForVirtualLinks() {\n        this.mainCollection.after.remove((userId, doc) => {\n            // this problem may occur when you do a .remove() before Meteor.startup()\n            if (!this.linkConfig.relatedLinker) {\n                console.warn(`There was an error finding the link for removal for collection: \"${this.mainCollection._name}\" with link: \"${this.linkName}\". This may occur when you do a .remove() before Meteor.startup()`);\n                return;\n            }\n\n            let accessor = this.createLink(doc);\n\n            _.each(accessor.fetch(), linkedObj => {\n                const {relatedLinker} = this.linkConfig;\n                // We do this check, to avoid self-referencing hell when defining virtual links\n                // Virtual links if not found \"compile-time\", we will try again to reprocess them on Meteor.startup\n                // if a removal happens before Meteor.startup this may fail\n                if (relatedLinker) {\n                    let link = relatedLinker.createLink(linkedObj);\n\n                    if (relatedLinker.isSingle()) {\n                        link.unset();\n                    } else {\n                        link.remove(doc);\n                    }\n                }\n            });\n        })\n    }\n\n    _initIndex() {\n        if (Meteor.isServer) {\n            let field = this.linkConfig.field;\n            if (this.linkConfig.metadata) {\n                field = field + '._id';\n            }\n\n            if (this.linkConfig.index) {\n                if (this.isVirtual()) {\n                    throw new Meteor.Error('You cannot set index on an inversed link.');\n                }\n\n                let options;\n                if (this.linkConfig.unique) {\n                    if (this.isMany()) {\n                        throw new Meteor.Error('You cannot set unique property on a multi field.');\n                    }\n\n                    options = {unique: true}\n                }\n\n                this.mainCollection._ensureIndex({[field]: 1}, options);\n            } else {\n                if (this.linkConfig.unique) {\n                    if (this.isVirtual()) {\n                        throw new Meteor.Error('You cannot set unique property on an inversed link.');\n                    }\n\n                    if (this.isMany()) {\n                        throw new Meteor.Error('You cannot set unique property on a multi field.');\n                    }\n\n                    this.mainCollection._ensureIndex({\n                        [field]: 1\n                    }, {unique: true})\n                }\n            }\n        }\n    }\n\n    _initAutoremove() {\n        if (!this.linkConfig.autoremove) {\n            return;\n        }\n\n        if (!this.isVirtual()) {\n            this.mainCollection.after.remove((userId, doc) => {\n                this.getLinkedCollection().remove({\n                    _id: {\n                        $in: smartArguments.getIds(doc[this.linkStorageField])\n                    }\n                })\n            })\n        } else {\n            this.mainCollection.after.remove((userId, doc) => {\n                const linker = this.mainCollection.getLink(doc, this.linkName);\n                const ids = linker.find({}, {fields: {_id: 1}}).fetch().map(item => item._id);\n\n                this.getLinkedCollection().remove({\n                    _id: {$in: ids}\n                })\n            })\n        }\n    }\n\n    /**\n     * Initializes denormalization using herteby:denormalize\n     * @private\n     */\n    _initDenormalization() {\n        if (!this.linkConfig.denormalize || !Meteor.isServer) {\n            return;\n        }\n\n        const packageExists = !!Package['herteby:denormalize'];\n        if (!packageExists) {\n            throw new Meteor.Error('missing-package', `Please add the herteby:denormalize package to your Meteor application in order to make caching work`)\n        }\n\n        const {field, body, bypassSchema} = this.linkConfig.denormalize;\n        let cacheConfig;\n\n        let referenceFieldSuffix = '';\n        if (this.isMeta()) {\n            referenceFieldSuffix = (this.isSingle() ? '._id' : ':_id');\n        }\n\n        if (this.isVirtual()) {\n            let inversedLink = this.linkConfig.relatedLinker.linkConfig;\n\n            let type = inversedLink.type == 'many' ? 'many-inverse' : 'inversed';\n\n            cacheConfig = {\n                type: type,\n                collection: this.linkConfig.collection,\n                fields: body,\n                referenceField: inversedLink.field + referenceFieldSuffix,\n                cacheField: field,\n                bypassSchema: !!bypassSchema\n            };\n        } else {\n            cacheConfig = {\n                type: this.linkConfig.type,\n                collection: this.linkConfig.collection,\n                fields: body,\n                referenceField: this.linkConfig.field + referenceFieldSuffix,\n                cacheField: field,\n                bypassSchema: !!bypassSchema\n            };\n        }\n\n        if (this.isVirtual()) {\n            Meteor.startup(() => {\n                this.mainCollection.cache(cacheConfig);\n            })\n        } else {\n            this.mainCollection.cache(cacheConfig);\n        }\n    }\n\n    /**\n     * Verifies if this linker is denormalized. It can be denormalized from the inverse side as well.\n     *\n     * @returns {boolean}\n     * @private\n     */\n    isDenormalized() {\n        return !!this.linkConfig.denormalize;\n    }\n\n    /**\n     * Verifies if the body of the linked element does not contain fields outside the cache body\n     *\n     * @param body\n     * @returns {boolean}\n     * @private\n     */\n    isSubBodyDenormalized(body) {\n        const cacheBody = this.linkConfig.denormalize.body;\n\n        const cacheBodyFields = _.keys(dot.dot(cacheBody));\n        const bodyFields = _.keys(\n            dot.dot(\n                _.omit(body, '_id')\n            )\n        );\n\n        return _.difference(bodyFields, cacheBodyFields).length === 0;\n    }\n}"]},"hash":"471ffcb3358e99ee5e0144282a28c486ae37a65a"}

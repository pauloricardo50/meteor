{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/reducers/extension.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/reducers/extension.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/reducers/extension.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/reducers/extension.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"extension"},"ignored":false,"code":"var check = void 0;\nmodule.watch(require(\"meteor/check\"), {\n    check: function (v) {\n        check = v;\n    }\n}, 0);\nvar storage = '__reducers';\nObject.assign(Mongo.Collection.prototype, {\n    /**\n     * @param data\n     */addReducers: function (data) {\n        var _this = this;\n\n        if (!this[storage]) {\n            this[storage] = {};\n        }\n\n        _.each(data, function (reducerConfig, reducerName) {\n            var _$extend;\n\n            if (!_this[reducerConfig]) {\n                _this[reducerConfig] = {};\n            }\n\n            if (_this.getLinker(reducerName)) {\n                throw new Meteor.Error(\"You cannot add the reducer with name: \" + reducerName + \" because it is already defined as a link in \" + _this._name + \" collection\");\n            }\n\n            if (_this[reducerConfig][reducerName]) {\n                throw new Meteor.Error(\"You cannot add the reducer with name: \" + reducerName + \" because it was already added to \" + _this._name + \" collection\");\n            }\n\n            check(reducerConfig, {\n                body: Object,\n                reduce: Function\n            });\n\n            _.extend(_this[storage], (_$extend = {}, _$extend[reducerName] = reducerConfig, _$extend));\n        });\n    },\n    /**\n     * @param name\n     * @returns {*}\n     */getReducer: function (name) {\n        if (this[storage]) {\n            return this[storage][name];\n        }\n    }\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/reducers/extension.js"],"names":["check","module","watch","require","v","storage","Object","assign","Mongo","Collection","prototype","addReducers","data","_","each","reducerConfig","reducerName","getLinker","Meteor","Error","_name","body","reduce","Function","extend","getReducer","name"],"mappings":"AAAA,IAAIA,cAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACH,SAAD,YAAOI,CAAP,EAAS;AAACJ,gBAAMI,CAAN;AAAQ;AAAlB,CAArC,EAAyD,CAAzD;AAEV,IAAMC,UAAU,YAAhB;AACAC,OAAOC,MAAP,CAAcC,MAAMC,UAAN,CAAiBC,SAA/B,EAA0C;AACtC;;OAGAC,WAJsC,YAI1BC,IAJ0B,EAIpB;AAAA;;AACd,YAAI,CAAC,KAAKP,OAAL,CAAL,EAAoB;AAChB,iBAAKA,OAAL,IAAgB,EAAhB;AACH;;AAEDQ,UAAEC,IAAF,CAAOF,IAAP,EAAa,UAACG,aAAD,EAAgBC,WAAhB,EAAgC;AAAA;;AACzC,gBAAI,CAAC,MAAKD,aAAL,CAAL,EAA0B;AACtB,sBAAKA,aAAL,IAAsB,EAAtB;AACH;;AAED,gBAAI,MAAKE,SAAL,CAAeD,WAAf,CAAJ,EAAiC;AAC7B,sBAAM,IAAIE,OAAOC,KAAX,4CAA0DH,WAA1D,oDAAoH,MAAKI,KAAzH,iBAAN;AACH;;AAED,gBAAI,MAAKL,aAAL,EAAoBC,WAApB,CAAJ,EAAsC;AAClC,sBAAM,IAAIE,OAAOC,KAAX,4CAA0DH,WAA1D,yCAAyG,MAAKI,KAA9G,iBAAN;AACH;;AAEDpB,kBAAMe,aAAN,EAAqB;AACjBM,sBAAMf,MADW;AAEjBgB,wBAAQC;AAFS,aAArB;;AAKAV,cAAEW,MAAF,CAAS,MAAKnB,OAAL,CAAT,2BACKW,WADL,IACmBD,aADnB;AAGH,SArBD;AAsBH,KA/BqC;AAiCtC;;;OAIAU,UArCsC,YAqC3BC,IArC2B,EAqCrB;AACb,YAAI,KAAKrB,OAAL,CAAJ,EAAmB;AACf,mBAAO,KAAKA,OAAL,EAAcqB,IAAd,CAAP;AACH;AACJ;AAzCqC,CAA1C","file":"packages/cultofcoders:grapher/lib/query/reducers/extension.js.map","sourcesContent":["import {check} from 'meteor/check';\n\nconst storage = '__reducers';\nObject.assign(Mongo.Collection.prototype, {\n    /**\n     * @param data\n     */\n    addReducers(data) {\n        if (!this[storage]) {\n            this[storage] = {};\n        }\n\n        _.each(data, (reducerConfig, reducerName) => {\n            if (!this[reducerConfig]) {\n                this[reducerConfig] = {};\n            }\n\n            if (this.getLinker(reducerName)) {\n                throw new Meteor.Error(`You cannot add the reducer with name: ${reducerName} because it is already defined as a link in ${this._name} collection`)\n            }\n\n            if (this[reducerConfig][reducerName]) {\n                throw new Meteor.Error(`You cannot add the reducer with name: ${reducerName} because it was already added to ${this._name} collection`)\n            }\n\n            check(reducerConfig, {\n                body: Object,\n                reduce: Function\n            });\n\n            _.extend(this[storage], {\n                [reducerName]: reducerConfig\n            });\n        });\n    },\n\n    /**\n     * @param name\n     * @returns {*}\n     */\n    getReducer(name) {\n        if (this[storage]) {\n            return this[storage][name];\n        }\n    }\n});"]},"hash":"a15f15b878d164dacac2ed572c3626497ea7864c"}

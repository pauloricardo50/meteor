{"metadata":{"usedHelpers":["createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"./linkTypes/linkMany.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"LinkMany"}]},{"source":"./linkTypes/linkManyMeta.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"LinkManyMeta"}]},{"source":"./linkTypes/linkOne.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"LinkOne"}]},{"source":"./linkTypes/linkOneMeta.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"LinkOneMeta"}]},{"source":"./config.schema.js","imported":["LinkConfigSchema","LinkConfigDefaults"],"specifiers":[{"kind":"named","imported":"LinkConfigSchema","local":"LinkConfigSchema"},{"kind":"named","imported":"LinkConfigDefaults","local":"LinkConfigDefaults"}]},{"source":"./linkTypes/lib/smartArguments","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"smartArguments"}]},{"source":"dot-object","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"dot"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]}],"exports":{"exported":["Linker"],"specifiers":[{"kind":"local","local":"Linker","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/linker.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/linker.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/linker.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/linker.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"linker"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n    \"default\": function () {\n        return Linker;\n    }\n});\nvar LinkMany = void 0;\nmodule.watch(require(\"./linkTypes/linkMany.js\"), {\n    \"default\": function (v) {\n        LinkMany = v;\n    }\n}, 0);\nvar LinkManyMeta = void 0;\nmodule.watch(require(\"./linkTypes/linkManyMeta.js\"), {\n    \"default\": function (v) {\n        LinkManyMeta = v;\n    }\n}, 1);\nvar LinkOne = void 0;\nmodule.watch(require(\"./linkTypes/linkOne.js\"), {\n    \"default\": function (v) {\n        LinkOne = v;\n    }\n}, 2);\nvar LinkOneMeta = void 0;\nmodule.watch(require(\"./linkTypes/linkOneMeta.js\"), {\n    \"default\": function (v) {\n        LinkOneMeta = v;\n    }\n}, 3);\nvar LinkConfigSchema = void 0,\n    LinkConfigDefaults = void 0;\nmodule.watch(require(\"./config.schema.js\"), {\n    LinkConfigSchema: function (v) {\n        LinkConfigSchema = v;\n    },\n    LinkConfigDefaults: function (v) {\n        LinkConfigDefaults = v;\n    }\n}, 4);\nvar smartArguments = void 0;\nmodule.watch(require(\"./linkTypes/lib/smartArguments\"), {\n    \"default\": function (v) {\n        smartArguments = v;\n    }\n}, 5);\nvar dot = void 0;\nmodule.watch(require(\"dot-object\"), {\n    \"default\": function (v) {\n        dot = v;\n    }\n}, 6);\nvar check = void 0;\nmodule.watch(require(\"meteor/check\"), {\n    check: function (v) {\n        check = v;\n    }\n}, 7);\n\nvar _ = void 0;\n\nmodule.watch(require(\"meteor/underscore\"), {\n    _: function (v) {\n        _ = v;\n    }\n}, 8);\n\nvar Linker = function () {\n    /**\n     * @param mainCollection\n     * @param linkName\n     * @param linkConfig\n     */function Linker(mainCollection, linkName, linkConfig) {\n        (0, _classCallCheck3.default)(this, Linker);\n        this.mainCollection = mainCollection;\n        this.linkConfig = Object.assign({}, LinkConfigDefaults, linkConfig);\n        this.linkName = linkName; // check linkName must not exist in schema\n\n        this._validateAndClean(); // initialize cascade removal hooks.\n\n\n        this._initAutoremove();\n\n        this._initDenormalization();\n\n        if (this.isVirtual()) {\n            // if it's a virtual field make sure that when this is deleted, it will be removed from the references\n            if (!linkConfig.autoremove) {\n                this._handleReferenceRemovalForVirtualLinks();\n            }\n        } else {\n            this._initIndex();\n        }\n    } /**\n       * Values which represent for the relation a single link\n       * @returns {string[]}\n       */\n\n    /**\n     * The collection that is linked with the current collection\n     * @returns Mongo.Collection\n     */Linker.prototype.getLinkedCollection = function () {\n        function getLinkedCollection() {\n            return this.linkConfig.collection;\n        }\n\n        return getLinkedCollection;\n    }(); /**\n          * If the relationship for this link is of \"many\" type.\n          */\n\n    Linker.prototype.isMany = function () {\n        function isMany() {\n            return !this.isSingle();\n        }\n\n        return isMany;\n    }(); /**\n          * If the relationship for this link contains metadata\n          */\n\n    Linker.prototype.isMeta = function () {\n        function isMeta() {\n            if (this.isVirtual()) {\n                return this.linkConfig.relatedLinker.isMeta();\n            }\n\n            return !!this.linkConfig.metadata;\n        }\n\n        return isMeta;\n    }(); /**\n          * @returns {boolean}\n          */\n\n    Linker.prototype.isSingle = function () {\n        function isSingle() {\n            if (this.isVirtual()) {\n                return this.linkConfig.relatedLinker.isSingle();\n            }\n\n            return _.contains(this.oneTypes, this.linkConfig.type);\n        }\n\n        return isSingle;\n    }(); /**\n          * @returns {boolean}\n          */\n\n    Linker.prototype.isVirtual = function () {\n        function isVirtual() {\n            return !!this.linkConfig.inversedBy;\n        }\n\n        return isVirtual;\n    }(); /**\n          * Should return a single result.\n          */\n\n    Linker.prototype.isOneResult = function () {\n        function isOneResult() {\n            return this.isVirtual() && this.linkConfig.relatedLinker.linkConfig.unique || !this.isVirtual() && this.isSingle();\n        }\n\n        return isOneResult;\n    }(); /**\n          * @param object\n          * @param collection To impersonate the getLinkedCollection() of the \"Linker\"\n          *\n          * @returns {LinkOne|LinkMany|LinkManyMeta|LinkOneMeta|LinkResolve}\n          */\n\n    Linker.prototype.createLink = function () {\n        function createLink(object) {\n            var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            var helperClass = this._getHelperClass();\n\n            return new helperClass(this, object, collection);\n        }\n\n        return createLink;\n    }(); /**\n          * @returns {*}\n          * @private\n          */\n\n    Linker.prototype._validateAndClean = function () {\n        function _validateAndClean() {\n            if (!this.linkConfig.collection) {\n                throw new Meteor.Error('invalid-config', \"For the link \" + this.linkName + \" you did not provide a collection.\");\n            }\n\n            if (typeof this.linkConfig.collection === 'string') {\n                var collectionName = this.linkConfig.collection;\n                this.linkConfig.collection = Mongo.Collection.get(collectionName);\n\n                if (!this.linkConfig.collection) {\n                    throw new Meteor.Error('invalid-collection', \"Could not find a collection with the name: \" + collectionName);\n                }\n            }\n\n            if (this.isVirtual()) {\n                return this._prepareVirtual();\n            } else {\n                if (!this.linkConfig.type) {\n                    this.linkConfig.type = 'one';\n                }\n\n                if (!this.linkConfig.field) {\n                    this.linkConfig.field = this._generateFieldName();\n                } else {\n                    if (this.linkConfig.field == this.linkName) {\n                        throw new Meteor.Error('invalid-config', \"For the link \" + this.linkName + \" you must not use the same name for the field, otherwise it will cause conflicts when fetching data\");\n                    }\n                }\n            }\n\n            check(this.linkConfig, LinkConfigSchema);\n        }\n\n        return _validateAndClean;\n    }(); /**\n          * We need to apply same type of rules in this case.\n          * @private\n          */\n\n    Linker.prototype._prepareVirtual = function () {\n        function _prepareVirtual() {\n            var _this = this;\n\n            var _linkConfig = this.linkConfig,\n                collection = _linkConfig.collection,\n                inversedBy = _linkConfig.inversedBy;\n            var linker = collection.getLinker(inversedBy);\n\n            if (!linker) {\n                // it is possible that the collection doesn't have a linker created yet.\n                // so we will create it on startup after all links have been defined\n                Meteor.startup(function () {\n                    linker = collection.getLinker(inversedBy);\n\n                    if (!linker) {\n                        throw new Meteor.Error(\"You tried setting up an inversed link in \\\"\" + _this.mainCollection._name + \"\\\" pointing to collection: \\\"\" + collection._name + \"\\\" link: \\\"\" + inversedBy + \"\\\", but no such link was found. Maybe a typo ?\");\n                    } else {\n                        _this._setupVirtualConfig(linker);\n                    }\n                });\n            } else {\n                this._setupVirtualConfig(linker);\n            }\n        }\n\n        return _prepareVirtual;\n    }(); /**\n          * @param linker\n          * @private\n          */\n\n    Linker.prototype._setupVirtualConfig = function () {\n        function _setupVirtualConfig(linker) {\n            var virtualLinkConfig = linker.linkConfig;\n\n            if (!virtualLinkConfig) {\n                throw new Meteor.Error(\"There is no link-config for the related collection on \" + inversedBy + \". Make sure you added the direct links before specifying virtual ones.\");\n            }\n\n            _.extend(this.linkConfig, {\n                metadata: virtualLinkConfig.metadata,\n                relatedLinker: linker\n            });\n        }\n\n        return _setupVirtualConfig;\n    }(); /**\n          * Depending on the strategy, we create the proper helper class\n          * @private\n          */\n\n    Linker.prototype._getHelperClass = function () {\n        function _getHelperClass() {\n            switch (this.strategy) {\n                case 'many-meta':\n                    return LinkManyMeta;\n\n                case 'many':\n                    return LinkMany;\n\n                case 'one-meta':\n                    return LinkOneMeta;\n\n                case 'one':\n                    return LinkOne;\n            }\n\n            throw new Meteor.Error('invalid-strategy', this.strategy + \" is not a valid strategy\");\n        }\n\n        return _getHelperClass;\n    }(); /**\n          * If field name not present, we generate it.\n          * @private\n          */\n\n    Linker.prototype._generateFieldName = function () {\n        function _generateFieldName() {\n            var cleanedCollectionName = this.linkConfig.collection._name.replace(/\\./g, '_');\n\n            var defaultFieldPrefix = this.linkName + '_' + cleanedCollectionName;\n\n            switch (this.strategy) {\n                case 'many-meta':\n                    return defaultFieldPrefix + \"_metas\";\n\n                case 'many':\n                    return defaultFieldPrefix + \"_ids\";\n\n                case 'one-meta':\n                    return defaultFieldPrefix + \"_meta\";\n\n                case 'one':\n                    return defaultFieldPrefix + \"_id\";\n            }\n        }\n\n        return _generateFieldName;\n    }(); /**\n          * When a link that is declared virtual is removed, the reference will be removed from every other link.\n          * @private\n          */\n\n    Linker.prototype._handleReferenceRemovalForVirtualLinks = function () {\n        function _handleReferenceRemovalForVirtualLinks() {\n            var _this2 = this;\n\n            this.mainCollection.after.remove(function (userId, doc) {\n                // this problem may occur when you do a .remove() before Meteor.startup()\n                if (!_this2.linkConfig.relatedLinker) {\n                    console.warn(\"There was an error finding the link for removal for collection: \\\"\" + _this2.mainCollection._name + \"\\\" with link: \\\"\" + _this2.linkName + \"\\\". This may occur when you do a .remove() before Meteor.startup()\");\n                    return;\n                }\n\n                var accessor = _this2.createLink(doc);\n\n                _.each(accessor.fetch(), function (linkedObj) {\n                    var relatedLinker = _this2.linkConfig.relatedLinker; // We do this check, to avoid self-referencing hell when defining virtual links\n                    // Virtual links if not found \"compile-time\", we will try again to reprocess them on Meteor.startup\n                    // if a removal happens before Meteor.startup this may fail\n\n                    if (relatedLinker) {\n                        var link = relatedLinker.createLink(linkedObj);\n\n                        if (relatedLinker.isSingle()) {\n                            link.unset();\n                        } else {\n                            link.remove(doc);\n                        }\n                    }\n                });\n            });\n        }\n\n        return _handleReferenceRemovalForVirtualLinks;\n    }();\n\n    Linker.prototype._initIndex = function () {\n        function _initIndex() {\n            if (Meteor.isServer) {\n                var field = this.linkConfig.field;\n\n                if (this.linkConfig.metadata) {\n                    field = field + '._id';\n                }\n\n                if (this.linkConfig.index) {\n                    var _mainCollection$_ensu;\n\n                    if (this.isVirtual()) {\n                        throw new Meteor.Error('You cannot set index on an inversed link.');\n                    }\n\n                    var options = void 0;\n\n                    if (this.linkConfig.unique) {\n                        if (this.isMany()) {\n                            throw new Meteor.Error('You cannot set unique property on a multi field.');\n                        }\n\n                        options = {\n                            unique: true\n                        };\n                    }\n\n                    this.mainCollection._ensureIndex((_mainCollection$_ensu = {}, _mainCollection$_ensu[field] = 1, _mainCollection$_ensu), options);\n                } else {\n                    if (this.linkConfig.unique) {\n                        var _mainCollection$_ensu2;\n\n                        if (this.isVirtual()) {\n                            throw new Meteor.Error('You cannot set unique property on an inversed link.');\n                        }\n\n                        if (this.isMany()) {\n                            throw new Meteor.Error('You cannot set unique property on a multi field.');\n                        }\n\n                        this.mainCollection._ensureIndex((_mainCollection$_ensu2 = {}, _mainCollection$_ensu2[field] = 1, _mainCollection$_ensu2), {\n                            unique: true\n                        });\n                    }\n                }\n            }\n        }\n\n        return _initIndex;\n    }();\n\n    Linker.prototype._initAutoremove = function () {\n        function _initAutoremove() {\n            var _this3 = this;\n\n            if (!this.linkConfig.autoremove) {\n                return;\n            }\n\n            if (!this.isVirtual()) {\n                this.mainCollection.after.remove(function (userId, doc) {\n                    _this3.getLinkedCollection().remove({\n                        _id: {\n                            $in: smartArguments.getIds(doc[_this3.linkStorageField])\n                        }\n                    });\n                });\n            } else {\n                this.mainCollection.after.remove(function (userId, doc) {\n                    var linker = _this3.mainCollection.getLink(doc, _this3.linkName);\n\n                    var ids = linker.find({}, {\n                        fields: {\n                            _id: 1\n                        }\n                    }).fetch().map(function (item) {\n                        return item._id;\n                    });\n\n                    _this3.getLinkedCollection().remove({\n                        _id: {\n                            $in: ids\n                        }\n                    });\n                });\n            }\n        }\n\n        return _initAutoremove;\n    }(); /**\n          * Initializes denormalization using herteby:denormalize\n          * @private\n          */\n\n    Linker.prototype._initDenormalization = function () {\n        function _initDenormalization() {\n            var _this4 = this;\n\n            if (!this.linkConfig.denormalize || !Meteor.isServer) {\n                return;\n            }\n\n            var packageExists = !!Package['herteby:denormalize'];\n\n            if (!packageExists) {\n                throw new Meteor.Error('missing-package', \"Please add the herteby:denormalize package to your Meteor application in order to make caching work\");\n            }\n\n            var _linkConfig$denormali = this.linkConfig.denormalize,\n                field = _linkConfig$denormali.field,\n                body = _linkConfig$denormali.body,\n                bypassSchema = _linkConfig$denormali.bypassSchema;\n            var cacheConfig = void 0;\n            var referenceFieldSuffix = '';\n\n            if (this.isMeta()) {\n                referenceFieldSuffix = this.isSingle() ? '._id' : ':_id';\n            }\n\n            if (this.isVirtual()) {\n                var inversedLink = this.linkConfig.relatedLinker.linkConfig;\n                var type = inversedLink.type == 'many' ? 'many-inverse' : 'inversed';\n                cacheConfig = {\n                    type: type,\n                    collection: this.linkConfig.collection,\n                    fields: body,\n                    referenceField: inversedLink.field + referenceFieldSuffix,\n                    cacheField: field,\n                    bypassSchema: !!bypassSchema\n                };\n            } else {\n                cacheConfig = {\n                    type: this.linkConfig.type,\n                    collection: this.linkConfig.collection,\n                    fields: body,\n                    referenceField: this.linkConfig.field + referenceFieldSuffix,\n                    cacheField: field,\n                    bypassSchema: !!bypassSchema\n                };\n            }\n\n            if (this.isVirtual()) {\n                Meteor.startup(function () {\n                    _this4.mainCollection.cache(cacheConfig);\n                });\n            } else {\n                this.mainCollection.cache(cacheConfig);\n            }\n        }\n\n        return _initDenormalization;\n    }(); /**\n          * Verifies if this linker is denormalized. It can be denormalized from the inverse side as well.\n          *\n          * @returns {boolean}\n          * @private\n          */\n\n    Linker.prototype.isDenormalized = function () {\n        function isDenormalized() {\n            return !!this.linkConfig.denormalize;\n        }\n\n        return isDenormalized;\n    }(); /**\n          * Verifies if the body of the linked element does not contain fields outside the cache body\n          *\n          * @param body\n          * @returns {boolean}\n          * @private\n          */\n\n    Linker.prototype.isSubBodyDenormalized = function () {\n        function isSubBodyDenormalized(body) {\n            var cacheBody = this.linkConfig.denormalize.body;\n\n            var cacheBodyFields = _.keys(dot.dot(cacheBody));\n\n            var bodyFields = _.keys(dot.dot(_.omit(body, '_id')));\n\n            return _.difference(bodyFields, cacheBodyFields).length === 0;\n        }\n\n        return isSubBodyDenormalized;\n    }();\n\n    (0, _createClass3.default)(Linker, [{\n        key: \"oneTypes\",\n        get: function () {\n            return ['one', '1'];\n        } /**\n           * Returns the strategies: one, many, one-meta, many-meta\n           * @returns {string}\n           */\n    }, {\n        key: \"strategy\",\n        get: function () {\n            var strategy = this.isMany() ? 'many' : 'one';\n\n            if (this.linkConfig.metadata) {\n                strategy += '-meta';\n            }\n\n            return strategy;\n        } /**\n           * Returns the field name in the document where the actual relationships are stored.\n           * @returns string\n           */\n    }, {\n        key: \"linkStorageField\",\n        get: function () {\n            if (this.isVirtual()) {\n                return this.linkConfig.relatedLinker.linkStorageField;\n            }\n\n            return this.linkConfig.field;\n        }\n    }]);\n    return Linker;\n}();","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linker.js"],"names":["module","export","Linker","LinkMany","watch","require","v","LinkManyMeta","LinkOne","LinkOneMeta","LinkConfigSchema","LinkConfigDefaults","smartArguments","dot","check","_","mainCollection","linkName","linkConfig","Object","assign","_validateAndClean","_initAutoremove","_initDenormalization","isVirtual","autoremove","_handleReferenceRemovalForVirtualLinks","_initIndex","getLinkedCollection","collection","isMany","isSingle","isMeta","relatedLinker","metadata","contains","oneTypes","type","inversedBy","isOneResult","unique","createLink","object","helperClass","_getHelperClass","Meteor","Error","collectionName","Mongo","Collection","get","_prepareVirtual","field","_generateFieldName","linker","getLinker","startup","_name","_setupVirtualConfig","virtualLinkConfig","extend","strategy","cleanedCollectionName","replace","defaultFieldPrefix","after","remove","userId","doc","console","warn","accessor","each","fetch","link","linkedObj","unset","isServer","index","options","_ensureIndex","_id","$in","getIds","linkStorageField","getLink","ids","find","fields","map","item","denormalize","packageExists","Package","body","bypassSchema","cacheConfig","referenceFieldSuffix","inversedLink","referenceField","cacheField","cache","isDenormalized","isSubBodyDenormalized","cacheBody","cacheBodyFields","keys","bodyFields","omit","difference","length"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/links/linker.js.map","sourcesContent":["import LinkMany from './linkTypes/linkMany.js';\nimport LinkManyMeta from './linkTypes/linkManyMeta.js';\nimport LinkOne from './linkTypes/linkOne.js';\nimport LinkOneMeta from './linkTypes/linkOneMeta.js';\nimport {LinkConfigSchema, LinkConfigDefaults} from './config.schema.js';\nimport smartArguments from './linkTypes/lib/smartArguments';\nimport dot from 'dot-object';\nimport {check} from 'meteor/check';\nimport {_} from 'meteor/underscore';\n\nexport default class Linker {\n    /**\n     * @param mainCollection\n     * @param linkName\n     * @param linkConfig\n     */\n    constructor(mainCollection, linkName, linkConfig) {\n        this.mainCollection = mainCollection;\n        this.linkConfig = Object.assign({}, LinkConfigDefaults, linkConfig);\n        this.linkName = linkName;\n\n        // check linkName must not exist in schema\n        this._validateAndClean();\n\n        // initialize cascade removal hooks.\n        this._initAutoremove();\n        this._initDenormalization();\n\n        if (this.isVirtual()) {\n            // if it's a virtual field make sure that when this is deleted, it will be removed from the references\n            if (!linkConfig.autoremove) {\n                this._handleReferenceRemovalForVirtualLinks();\n            }\n        } else {\n            this._initIndex();\n        }\n    }\n\n    /**\n     * Values which represent for the relation a single link\n     * @returns {string[]}\n     */\n    get oneTypes() {\n        return ['one', '1'];\n    }\n\n    /**\n     * Returns the strategies: one, many, one-meta, many-meta\n     * @returns {string}\n     */\n    get strategy() {\n        let strategy = this.isMany() ? 'many' : 'one';\n        if (this.linkConfig.metadata) {\n            strategy += '-meta';\n        }\n\n        return strategy;\n    }\n\n    /**\n     * Returns the field name in the document where the actual relationships are stored.\n     * @returns string\n     */\n    get linkStorageField() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.linkStorageField;\n        }\n\n        return this.linkConfig.field;\n    }\n\n    /**\n     * The collection that is linked with the current collection\n     * @returns Mongo.Collection\n     */\n    getLinkedCollection() {\n        return this.linkConfig.collection;\n    }\n\n    /**\n     * If the relationship for this link is of \"many\" type.\n     */\n    isMany() {\n        return !this.isSingle();\n    }\n\n    /**\n     * If the relationship for this link contains metadata\n     */\n    isMeta() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.isMeta();\n        }\n\n        return !!this.linkConfig.metadata;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSingle() {\n        if (this.isVirtual()) {\n            return this.linkConfig.relatedLinker.isSingle();\n        }\n\n        return _.contains(this.oneTypes, this.linkConfig.type);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isVirtual() {\n        return !!this.linkConfig.inversedBy;\n    }\n\n    /**\n     * Should return a single result.\n     */\n    isOneResult() {\n        return (\n            (this.isVirtual() && this.linkConfig.relatedLinker.linkConfig.unique)\n            || (!this.isVirtual() && this.isSingle())\n        );\n    }\n\n    /**\n     * @param object\n     * @param collection To impersonate the getLinkedCollection() of the \"Linker\"\n     *\n     * @returns {LinkOne|LinkMany|LinkManyMeta|LinkOneMeta|LinkResolve}\n     */\n    createLink(object, collection = null) {\n        let helperClass = this._getHelperClass();\n\n        return new helperClass(this, object, collection);\n    }\n\n    /**\n     * @returns {*}\n     * @private\n     */\n    _validateAndClean() {\n        if (!this.linkConfig.collection) {\n            throw new Meteor.Error('invalid-config', `For the link ${this.linkName} you did not provide a collection.`)\n        }\n\n        if (typeof(this.linkConfig.collection) === 'string') {\n            const collectionName = this.linkConfig.collection;\n            this.linkConfig.collection = Mongo.Collection.get(collectionName);\n\n            if (!this.linkConfig.collection) {\n                throw new Meteor.Error('invalid-collection', `Could not find a collection with the name: ${collectionName}`);\n            }\n        }\n\n        if (this.isVirtual()) {\n            return this._prepareVirtual();\n        } else {\n            if (!this.linkConfig.type) {\n                this.linkConfig.type = 'one';\n            }\n\n            if (!this.linkConfig.field) {\n                this.linkConfig.field = this._generateFieldName();\n            } else {\n                if (this.linkConfig.field == this.linkName) {\n                    throw new Meteor.Error('invalid-config', `For the link ${this.linkName} you must not use the same name for the field, otherwise it will cause conflicts when fetching data`);\n                }\n            }\n        }\n\n        check(this.linkConfig, LinkConfigSchema);\n    }\n\n    /**\n     * We need to apply same type of rules in this case.\n     * @private\n     */\n    _prepareVirtual() {\n        const {collection, inversedBy} = this.linkConfig;\n        let linker = collection.getLinker(inversedBy);\n\n        if (!linker) {\n            // it is possible that the collection doesn't have a linker created yet.\n            // so we will create it on startup after all links have been defined\n            Meteor.startup(() => {\n                linker = collection.getLinker(inversedBy);\n                if (!linker) {\n                    throw new Meteor.Error(`You tried setting up an inversed link in \"${this.mainCollection._name}\" pointing to collection: \"${collection._name}\" link: \"${inversedBy}\", but no such link was found. Maybe a typo ?`)\n                } else {\n                    this._setupVirtualConfig(linker);\n                }\n            })\n        } else {\n            this._setupVirtualConfig(linker);\n        }\n    }\n\n    /**\n     * @param linker\n     * @private\n     */\n    _setupVirtualConfig(linker) {\n        const virtualLinkConfig = linker.linkConfig;\n\n        if (!virtualLinkConfig) {\n            throw new Meteor.Error(`There is no link-config for the related collection on ${inversedBy}. Make sure you added the direct links before specifying virtual ones.`)\n        }\n\n        _.extend(this.linkConfig, {\n            metadata: virtualLinkConfig.metadata,\n            relatedLinker: linker\n        });\n    }\n\n    /**\n     * Depending on the strategy, we create the proper helper class\n     * @private\n     */\n    _getHelperClass() {\n        switch (this.strategy) {\n            case 'many-meta':\n                return LinkManyMeta;\n            case 'many':\n                return LinkMany;\n            case 'one-meta':\n                return LinkOneMeta;\n            case 'one':\n                return LinkOne;\n        }\n\n        throw new Meteor.Error('invalid-strategy', `${this.strategy} is not a valid strategy`);\n    }\n\n    /**\n     * If field name not present, we generate it.\n     * @private\n     */\n    _generateFieldName() {\n        let cleanedCollectionName = this.linkConfig.collection._name.replace(/\\./g, '_');\n        let defaultFieldPrefix = this.linkName + '_' + cleanedCollectionName;\n\n        switch (this.strategy) {\n            case 'many-meta':\n                return `${defaultFieldPrefix}_metas`;\n            case 'many':\n                return `${defaultFieldPrefix}_ids`;\n            case 'one-meta':\n                return `${defaultFieldPrefix}_meta`;\n            case 'one':\n                return `${defaultFieldPrefix}_id`;\n        }\n    }\n\n    /**\n     * When a link that is declared virtual is removed, the reference will be removed from every other link.\n     * @private\n     */\n    _handleReferenceRemovalForVirtualLinks() {\n        this.mainCollection.after.remove((userId, doc) => {\n            // this problem may occur when you do a .remove() before Meteor.startup()\n            if (!this.linkConfig.relatedLinker) {\n                console.warn(`There was an error finding the link for removal for collection: \"${this.mainCollection._name}\" with link: \"${this.linkName}\". This may occur when you do a .remove() before Meteor.startup()`);\n                return;\n            }\n\n            let accessor = this.createLink(doc);\n\n            _.each(accessor.fetch(), linkedObj => {\n                const {relatedLinker} = this.linkConfig;\n                // We do this check, to avoid self-referencing hell when defining virtual links\n                // Virtual links if not found \"compile-time\", we will try again to reprocess them on Meteor.startup\n                // if a removal happens before Meteor.startup this may fail\n                if (relatedLinker) {\n                    let link = relatedLinker.createLink(linkedObj);\n\n                    if (relatedLinker.isSingle()) {\n                        link.unset();\n                    } else {\n                        link.remove(doc);\n                    }\n                }\n            });\n        })\n    }\n\n    _initIndex() {\n        if (Meteor.isServer) {\n            let field = this.linkConfig.field;\n            if (this.linkConfig.metadata) {\n                field = field + '._id';\n            }\n\n            if (this.linkConfig.index) {\n                if (this.isVirtual()) {\n                    throw new Meteor.Error('You cannot set index on an inversed link.');\n                }\n\n                let options;\n                if (this.linkConfig.unique) {\n                    if (this.isMany()) {\n                        throw new Meteor.Error('You cannot set unique property on a multi field.');\n                    }\n\n                    options = {unique: true}\n                }\n\n                this.mainCollection._ensureIndex({[field]: 1}, options);\n            } else {\n                if (this.linkConfig.unique) {\n                    if (this.isVirtual()) {\n                        throw new Meteor.Error('You cannot set unique property on an inversed link.');\n                    }\n\n                    if (this.isMany()) {\n                        throw new Meteor.Error('You cannot set unique property on a multi field.');\n                    }\n\n                    this.mainCollection._ensureIndex({\n                        [field]: 1\n                    }, {unique: true})\n                }\n            }\n        }\n    }\n\n    _initAutoremove() {\n        if (!this.linkConfig.autoremove) {\n            return;\n        }\n\n        if (!this.isVirtual()) {\n            this.mainCollection.after.remove((userId, doc) => {\n                this.getLinkedCollection().remove({\n                    _id: {\n                        $in: smartArguments.getIds(doc[this.linkStorageField])\n                    }\n                })\n            })\n        } else {\n            this.mainCollection.after.remove((userId, doc) => {\n                const linker = this.mainCollection.getLink(doc, this.linkName);\n                const ids = linker.find({}, {fields: {_id: 1}}).fetch().map(item => item._id);\n\n                this.getLinkedCollection().remove({\n                    _id: {$in: ids}\n                })\n            })\n        }\n    }\n\n    /**\n     * Initializes denormalization using herteby:denormalize\n     * @private\n     */\n    _initDenormalization() {\n        if (!this.linkConfig.denormalize || !Meteor.isServer) {\n            return;\n        }\n\n        const packageExists = !!Package['herteby:denormalize'];\n        if (!packageExists) {\n            throw new Meteor.Error('missing-package', `Please add the herteby:denormalize package to your Meteor application in order to make caching work`)\n        }\n\n        const {field, body, bypassSchema} = this.linkConfig.denormalize;\n        let cacheConfig;\n\n        let referenceFieldSuffix = '';\n        if (this.isMeta()) {\n            referenceFieldSuffix = (this.isSingle() ? '._id' : ':_id');\n        }\n\n        if (this.isVirtual()) {\n            let inversedLink = this.linkConfig.relatedLinker.linkConfig;\n\n            let type = inversedLink.type == 'many' ? 'many-inverse' : 'inversed';\n\n            cacheConfig = {\n                type: type,\n                collection: this.linkConfig.collection,\n                fields: body,\n                referenceField: inversedLink.field + referenceFieldSuffix,\n                cacheField: field,\n                bypassSchema: !!bypassSchema\n            };\n        } else {\n            cacheConfig = {\n                type: this.linkConfig.type,\n                collection: this.linkConfig.collection,\n                fields: body,\n                referenceField: this.linkConfig.field + referenceFieldSuffix,\n                cacheField: field,\n                bypassSchema: !!bypassSchema\n            };\n        }\n\n        if (this.isVirtual()) {\n            Meteor.startup(() => {\n                this.mainCollection.cache(cacheConfig);\n            })\n        } else {\n            this.mainCollection.cache(cacheConfig);\n        }\n    }\n\n    /**\n     * Verifies if this linker is denormalized. It can be denormalized from the inverse side as well.\n     *\n     * @returns {boolean}\n     * @private\n     */\n    isDenormalized() {\n        return !!this.linkConfig.denormalize;\n    }\n\n    /**\n     * Verifies if the body of the linked element does not contain fields outside the cache body\n     *\n     * @param body\n     * @returns {boolean}\n     * @private\n     */\n    isSubBodyDenormalized(body) {\n        const cacheBody = this.linkConfig.denormalize.body;\n\n        const cacheBodyFields = _.keys(dot.dot(cacheBody));\n        const bodyFields = _.keys(\n            dot.dot(\n                _.omit(body, '_id')\n            )\n        );\n\n        return _.difference(bodyFields, cacheBodyFields).length === 0;\n    }\n}"]},"hash":"24259120b5e910f3dad580ae6402ffea5dfaa7be"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./base.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Link"}]},{"source":"./lib/smartArguments.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SmartArgs"}]}],"exports":{"exported":["LinkOneMeta"],"specifiers":[{"kind":"local","local":"LinkOneMeta","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/linkTypes/linkOneMeta.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/linkTypes/linkOneMeta.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/linkTypes/linkOneMeta.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/linkOneMeta.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"linkOneMeta"},"ignored":false,"code":"module.export({\n    default: () => LinkOneMeta\n});\nlet Link;\nmodule.watch(require(\"./base.js\"), {\n    default(v) {\n        Link = v;\n    }\n\n}, 0);\nlet SmartArgs;\nmodule.watch(require(\"./lib/smartArguments.js\"), {\n    default(v) {\n        SmartArgs = v;\n    }\n\n}, 1);\n\nclass LinkOneMeta extends Link {\n    set(what, metadata = {}) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        metadata._id = this.identifyId(what, true);\n\n        this._validateIds([metadata._id]);\n\n        this.object[field] = metadata;\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: metadata\n            }\n        });\n        return this;\n    }\n\n    metadata(extendMetadata) {\n        if (this.isVirtual) {\n            this._virtualAction('metadata', undefined, extendMetadata);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n\n        if (!extendMetadata) {\n            return this.object[field];\n        } else {\n            _.extend(this.object[field], extendMetadata);\n\n            this.linker.mainCollection.update(this.object._id, {\n                $set: {\n                    [field]: this.object[field]\n                }\n            });\n        }\n\n        return this;\n    }\n\n    unset() {\n        if (this.isVirtual) {\n            this._virtualAction('unset');\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        this.object[field] = {};\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: {}\n            }\n        });\n        return this;\n    }\n\n    add(what, metadata) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what, metadata);\n\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *add* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *remove* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/linkOneMeta.js"],"names":["module","export","default","LinkOneMeta","Link","watch","require","v","SmartArgs","set","what","metadata","isVirtual","_virtualAction","field","linkStorageField","_id","identifyId","_validateIds","object","linker","mainCollection","update","$set","extendMetadata","undefined","_","extend","unset","add","Meteor","Error","remove"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,aAAQ,MAAIC;AAAb,CAAd;AAAyC,IAAIC,IAAJ;AAASJ,OAAOK,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACJ,YAAQK,CAAR,EAAU;AAACH,eAAKG,CAAL;AAAO;;AAAnB,CAAlC,EAAuD,CAAvD;AAA0D,IAAIC,SAAJ;AAAcR,OAAOK,KAAP,CAAaC,QAAQ,yBAAR,CAAb,EAAgD;AAACJ,YAAQK,CAAR,EAAU;AAACC,oBAAUD,CAAV;AAAY;;AAAxB,CAAhD,EAA0E,CAA1E;;AAG3G,MAAMJ,WAAN,SAA0BC,IAA1B,CAA+B;AAC1CK,QAAIC,IAAJ,EAAUC,WAAW,EAArB,EAAyB;AACrB,YAAI,KAAKC,SAAT,EAAoB;AAChB,iBAAKC,cAAL,CAAoB,KAApB,EAA2BH,IAA3B;;AACA,mBAAO,IAAP;AACH;;AAED,YAAII,QAAQ,KAAKC,gBAAjB;AACAJ,iBAASK,GAAT,GAAe,KAAKC,UAAL,CAAgBP,IAAhB,EAAsB,IAAtB,CAAf;;AACA,aAAKQ,YAAL,CAAkB,CAACP,SAASK,GAAV,CAAlB;;AAEA,aAAKG,MAAL,CAAYL,KAAZ,IAAqBH,QAArB;AAEA,aAAKS,MAAL,CAAYC,cAAZ,CAA2BC,MAA3B,CAAkC,KAAKH,MAAL,CAAYH,GAA9C,EAAmD;AAC/CO,kBAAM;AACF,iBAACT,KAAD,GAASH;AADP;AADyC,SAAnD;AAMA,eAAO,IAAP;AACH;;AAEDA,aAASa,cAAT,EAAyB;AACrB,YAAI,KAAKZ,SAAT,EAAoB;AAChB,iBAAKC,cAAL,CAAoB,UAApB,EAAgCY,SAAhC,EAA2CD,cAA3C;;AAEA,mBAAO,IAAP;AACH;;AAED,YAAIV,QAAQ,KAAKC,gBAAjB;;AAEA,YAAI,CAACS,cAAL,EAAqB;AACjB,mBAAO,KAAKL,MAAL,CAAYL,KAAZ,CAAP;AACH,SAFD,MAEO;AACHY,cAAEC,MAAF,CAAS,KAAKR,MAAL,CAAYL,KAAZ,CAAT,EAA6BU,cAA7B;;AAEA,iBAAKJ,MAAL,CAAYC,cAAZ,CAA2BC,MAA3B,CAAkC,KAAKH,MAAL,CAAYH,GAA9C,EAAmD;AAC/CO,sBAAM;AACF,qBAACT,KAAD,GAAS,KAAKK,MAAL,CAAYL,KAAZ;AADP;AADyC,aAAnD;AAKH;;AAED,eAAO,IAAP;AACH;;AAEDc,YAAQ;AACJ,YAAI,KAAKhB,SAAT,EAAoB;AAChB,iBAAKC,cAAL,CAAoB,OAApB;;AACA,mBAAO,IAAP;AACH;;AAED,YAAIC,QAAQ,KAAKC,gBAAjB;AACA,aAAKI,MAAL,CAAYL,KAAZ,IAAqB,EAArB;AAEA,aAAKM,MAAL,CAAYC,cAAZ,CAA2BC,MAA3B,CAAkC,KAAKH,MAAL,CAAYH,GAA9C,EAAmD;AAC/CO,kBAAM;AACF,iBAACT,KAAD,GAAS;AADP;AADyC,SAAnD;AAMA,eAAO,IAAP;AACH;;AAEDe,QAAInB,IAAJ,EAAUC,QAAV,EAAoB;AAChB,YAAI,KAAKC,SAAT,EAAoB;AAChB,iBAAKC,cAAL,CAAoB,KAApB,EAA2BH,IAA3B,EAAiCC,QAAjC;;AACA,mBAAO,IAAP;AACH;;AAED,cAAM,IAAImB,OAAOC,KAAX,CAAiB,iBAAjB,EAAoC,2GAApC,CAAN;AACH;;AAEDC,WAAOtB,IAAP,EAAa;AACT,YAAI,KAAKE,SAAT,EAAoB;AAChB,iBAAKC,cAAL,CAAoB,QAApB,EAA8BH,IAA9B;;AACA,mBAAO,IAAP;AACH;;AAED,cAAM,IAAIoB,OAAOC,KAAX,CAAiB,iBAAjB,EAAoC,8GAApC,CAAN;AACH;;AAhFyC","file":"packages/cultofcoders:grapher/lib/links/linkTypes/linkOneMeta.js.map","sourcesContent":["import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkOneMeta extends Link {\n    set(what, metadata = {}) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what);\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        metadata._id = this.identifyId(what, true);\n        this._validateIds([metadata._id]);\n\n        this.object[field] = metadata;\n\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: metadata\n            }\n        });\n\n        return this;\n    }\n\n    metadata(extendMetadata) {\n        if (this.isVirtual) {\n            this._virtualAction('metadata', undefined, extendMetadata);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n\n        if (!extendMetadata) {\n            return this.object[field];\n        } else {\n            _.extend(this.object[field], extendMetadata);\n\n            this.linker.mainCollection.update(this.object._id, {\n                $set: {\n                    [field]: this.object[field]\n                }\n            });\n        }\n\n        return this;\n    }\n\n    unset() {\n        if (this.isVirtual) {\n            this._virtualAction('unset');\n            return this;\n        }\n\n        let field = this.linkStorageField;\n        this.object[field] = {};\n\n        this.linker.mainCollection.update(this.object._id, {\n            $set: {\n                [field]: {}\n            }\n        });\n\n        return this;\n    }\n\n    add(what, metadata) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what, metadata);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *add* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *remove* in a relationship that is single. Please use set/unset for *single* relationships');\n    }\n}"]},"hash":"4cbe74153577b366142f33374859f85a23599388"}

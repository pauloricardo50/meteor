{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/dburles:factory/factory_tests.js","filenameRelative":"packages/dburles:factory/factory_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/dburles:factory/factory_tests.js.map","sourceFileName":"packages/dburles:factory/factory_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"factory_tests"},"ignored":false,"code":"/* global Factory */ /* global Authors:true, Books:true */Authors = new Meteor.Collection('authors');\nBooks = new Meteor.Collection('books');\nTinytest.add(\"Factory - Build - Basic build works\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\nTinytest.add(\"Factory - Define - After hook\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  }).after(doc => {\n    var author = Factory.create('author');\n    test.equal(author.name, \"John Smith\");\n    test.equal(doc.name, \"John Smith\");\n  });\n});\nTinytest.add(\"Factory - Build - Functions - Basic\", test => {\n  Factory.define('author', Authors, {\n    name() {\n      return \"John Smith\";\n    }\n\n  });\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Functions - Context\", test => {\n  Factory.define('author', Authors, {\n    test: \"John Smith\",\n\n    name() {\n      return this.test;\n    }\n\n  });\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Dotted properties - Basic\", test => {\n  Factory.define('author', Authors, {\n    \"profile.name\": \"John Smith\"\n  });\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Dotted properties - Context\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n\n    'profile.name'() {\n      return this.name;\n    }\n\n  });\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Deep objects\", test => {\n  Factory.define('author', Authors, {\n    profile: {\n      name: \"John Smith\"\n    }\n  });\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Functions - Deep object - Basic\", test => {\n  Factory.define('author', Authors, {\n    profile: {\n      name() {\n        return \"John Smith\";\n      }\n\n    }\n  });\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Functions - Deep object - Context\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    profile: {\n      name() {\n        return this.name;\n      }\n\n    }\n  });\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Extend - Basic\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('authorOne', Authors, Factory.extend('author'));\n  test.equal(Factory.build('authorOne').name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Extend - With attributes\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('authorOne', Authors, Factory.extend('author', {\n    test: \"testing!\"\n  }));\n  test.equal(Factory.build('authorOne').name, \"John Smith\");\n  test.equal(Factory.build('authorOne').test, \"testing!\");\n});\nTinytest.add(\"Factory - Build - Extend - With attributes (check that we don't modify the parent)\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('authorOne', Books, Factory.extend('author', {\n    test: \"testing!\"\n  }));\n  var authorOne = Factory.build('authorOne');\n  var author = Factory.build('author');\n  test.equal(authorOne.name, \"John Smith\");\n  test.equal(authorOne.test, \"testing!\");\n  test.equal(_.isUndefined(author.test), true);\n});\nTinytest.add(\"Factory - Build - Extend - Parent with relationship\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n  Factory.define('bookOne', Books, Factory.extend('book'));\n  var bookOne = Factory.create('bookOne');\n  test.equal(bookOne.name, \"A book\");\n});\nTinytest.add(\"Factory - Build - Extend - Parent with relationship - Extra attributes\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n  Factory.define('bookOne', Books, Factory.extend('book', {\n    name: \"A better book\"\n  }));\n  var bookOne = Factory.create('bookOne');\n  test.equal(bookOne.name, \"A better book\"); // same year as parent\n\n  test.equal(bookOne.year, 2014);\n});\nTinytest.add(\"Factory - Create - Basic\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  var author = Factory.create('author');\n  test.equal(author.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Create - Relationship\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n  var book = Factory.create('book');\n  test.equal(Authors.findOne(book.authorId).name, \"John Smith\");\n});\nTinytest.add(\"Factory - Create - Relationship - return a Factory from function\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorId() {\n      return Factory.get('author');\n    },\n\n    name: \"A book\",\n    year: 2014\n  });\n  var book = Factory.create('book');\n  test.equal(Authors.findOne(book.authorId).name, \"John Smith\");\n});\nTinytest.add(\"Factory - Create - Relationship - return a Factory from deep function (dotted)\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    'good.authorId'() {\n      return Factory.get('author');\n    },\n\n    name: \"A book\",\n    year: 2014\n  });\n  var book = Factory.create('book');\n  test.equal(Authors.findOne(book.good.authorId).name, \"John Smith\");\n});\nTinytest.add(\"Factory - Create - Relationship - return a Factory from deep function\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    good: {\n      authorId() {\n        return Factory.get('author');\n      }\n\n    },\n    name: \"A book\",\n    year: 2014\n  });\n  var book = Factory.create('book');\n  test.equal(Authors.findOne(book.good.authorId).name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - Sequence\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n\n    email(factory) {\n      return factory.sequence(n => 'person' + n + '@example.com');\n    }\n\n  });\n  var author = Factory.build('author');\n  test.equal(author.email, \"person1@example.com\");\n  var author2 = Factory.build('author');\n  test.equal(author2.email, \"person2@example.com\");\n});\nTinytest.add(\"Factory - Create - Sequence\", test => {\n  Authors.remove({});\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n\n    email(factory) {\n      return factory.sequence(n => 'person' + n + '@example.com');\n    }\n\n  });\n  var author = Factory.create('author');\n  test.equal(author.email, \"person1@example.com\");\n  var foundAuthor = Authors.find({\n    email: \"person1@example.com\"\n  }).count();\n  test.equal(foundAuthor, 1);\n  var author2 = Factory.create('author');\n  test.equal(author2.email, \"person2@example.com\");\n  var foundAuthor2 = Authors.find({\n    email: \"person2@example.com\"\n  }).count();\n  test.equal(foundAuthor2, 1);\n});\nTinytest.add(\"Factory - Build - Array with Factory\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorIds: [Factory.get('author'), 'PXm6dye7A8vgoB7uY']\n  });\n  const book = Factory.build('book');\n  test.length(book.authorIds, 2);\n  test.length(book.authorIds[0], 17);\n});\nTinytest.add(\"Factory - Build - Array with function returning a Factory\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    authorIds: [() => Factory.get('author'), 'PXm6dye7A8vgoB7uY']\n  });\n  const book = Factory.build('book');\n  test.length(book.authorIds, 2);\n  test.length(book.authorIds[0], 17);\n});\nTinytest.add(\"Factory - Build - Array with an object\", test => {\n  Factory.define('book', Books, {\n    array: [{\n      objectInArray: true\n    }]\n  });\n  const book = Factory.build('book');\n  test.isTrue(book.array[0].objectInArray);\n}); // Could possibly make this a feature:\n// Tinytest.add(\"Factory - Build - Array with an object containing a function\", test => {\n//   Factory.define('book', Books, {\n//     array: [{objectInArrayWithFn: () => true}]\n//   });\n//   const book = Factory.build('book');\n//   test.equal(book.array[0].objectInArrayWithFn, true);\n// });\n\nTinytest.add(\"Factory - Tree - Basic\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n  Factory.define('book', Books, {\n    name: \"A book\",\n    author: Factory.get('author')\n  });\n  const book = Factory.tree('book');\n  test.equal(book.author.name, \"John Smith\");\n});\nTinytest.add(\"Factory - Build - With options\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n\n    books(factory, options = {\n      bookCount: 2\n    }) {\n      return _(options.bookCount).times(n => `${n + 1} book by ${this.name}`);\n    }\n\n  });\n  const author = Factory.build('author', {}, {\n    bookCount: 3\n  });\n  test.length(author.books, 3);\n  test.equal(author.books, ['1 book by John Smith', '2 book by John Smith', '3 book by John Smith']);\n});\nTinytest.add(\"Factory - Create - With options\", test => {\n  Factory.define('book', Books, {\n    name: \"A book\",\n\n    pages(factory, options = {\n      pageCount: 2\n    }) {\n      return _(options.pageCount).times(n => `Page ${n + 1}`);\n    }\n\n  });\n  const book = Factory.create('book', {}, {\n    pageCount: 2\n  });\n  test.length(book.pages, 2);\n  test.equal(book.pages, ['Page 1', 'Page 2']);\n});","map":{"version":3,"sources":["packages/dburles:factory/factory_tests.js"],"names":["Authors","Meteor","Collection","Books","Tinytest","add","test","Factory","define","name","equal","build","after","doc","author","create","profile","extend","authorOne","_","isUndefined","authorId","get","year","bookOne","book","findOne","good","email","factory","sequence","n","author2","remove","foundAuthor","find","count","foundAuthor2","authorIds","length","array","objectInArray","isTrue","tree","books","options","bookCount","times","pages","pageCount"],"mappings":"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","file":"packages/dburles:factory/factory_tests.js.map","sourcesContent":["/* global Factory */\n/* global Authors:true, Books:true */\n\nAuthors = new Meteor.Collection('authors');\nBooks = new Meteor.Collection('books');\n\nTinytest.add(\"Factory - Build - Basic build works\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Define - After hook\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  }).after(doc => {\n    var author = Factory.create('author');\n    test.equal(author.name, \"John Smith\");\n    test.equal(doc.name, \"John Smith\");\n  });\n});\n\nTinytest.add(\"Factory - Build - Functions - Basic\", test => {\n  Factory.define('author', Authors, {\n    name() {\n      return \"John Smith\";\n    }\n  });\n\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Functions - Context\", test => {\n  Factory.define('author', Authors, {\n    test: \"John Smith\",\n    name() {\n      return this.test;\n    }\n  });\n\n  test.equal(Factory.build('author').name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Dotted properties - Basic\", test => {\n  Factory.define('author', Authors, {\n    \"profile.name\": \"John Smith\"\n  });\n\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Dotted properties - Context\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    'profile.name'() {\n      return this.name;\n    }\n  });\n\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Deep objects\", test => {\n  Factory.define('author', Authors, {\n    profile: {\n      name: \"John Smith\"\n    }\n  });\n\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Functions - Deep object - Basic\", test => {\n  Factory.define('author', Authors, {\n    profile: {\n      name() {\n        return \"John Smith\";\n      }\n    }\n  });\n\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Functions - Deep object - Context\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    profile: {\n      name() {\n        return this.name;\n      }\n    }\n  });\n\n  test.equal(Factory.build('author').profile.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Extend - Basic\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('authorOne', Authors, Factory.extend('author'));\n\n  test.equal(Factory.build('authorOne').name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Extend - With attributes\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('authorOne', Authors, Factory.extend('author', {\n    test: \"testing!\"\n  }));\n\n  test.equal(Factory.build('authorOne').name, \"John Smith\");\n  test.equal(Factory.build('authorOne').test, \"testing!\");\n});\n\nTinytest.add(\"Factory - Build - Extend - With attributes (check that we don't modify the parent)\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('authorOne', Books, Factory.extend('author', {\n    test: \"testing!\"\n  }));\n\n  var authorOne = Factory.build('authorOne');\n  var author = Factory.build('author');\n\n  test.equal(authorOne.name, \"John Smith\");\n  test.equal(authorOne.test, \"testing!\");\n  test.equal(_.isUndefined(author.test), true);\n});\n\nTinytest.add(\"Factory - Build - Extend - Parent with relationship\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n\n  Factory.define('bookOne', Books, Factory.extend('book'));\n\n  var bookOne = Factory.create('bookOne');\n\n  test.equal(bookOne.name, \"A book\");\n});\n\nTinytest.add(\"Factory - Build - Extend - Parent with relationship - Extra attributes\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n\n  Factory.define('bookOne', Books, Factory.extend('book', {\n    name: \"A better book\"\n  }));\n\n  var bookOne = Factory.create('bookOne');\n\n  test.equal(bookOne.name, \"A better book\");\n  // same year as parent\n  test.equal(bookOne.year, 2014);\n});\n\nTinytest.add(\"Factory - Create - Basic\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  var author = Factory.create('author');\n\n  test.equal(author.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Create - Relationship\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorId: Factory.get('author'),\n    name: \"A book\",\n    year: 2014\n  });\n\n  var book = Factory.create('book');\n\n  test.equal(Authors.findOne(book.authorId).name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Create - Relationship - return a Factory from function\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorId() {\n      return Factory.get('author');\n    },\n    name: \"A book\",\n    year: 2014\n  });\n\n  var book = Factory.create('book');\n\n  test.equal(Authors.findOne(book.authorId).name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Create - Relationship - return a Factory from deep function (dotted)\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    'good.authorId'() {\n      return Factory.get('author');\n    },\n    name: \"A book\",\n    year: 2014\n  });\n\n  var book = Factory.create('book');\n\n  test.equal(Authors.findOne(book.good.authorId).name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Create - Relationship - return a Factory from deep function\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    good: {\n      authorId() {\n        return Factory.get('author');\n      }\n    },\n    name: \"A book\",\n    year: 2014\n  });\n\n  var book = Factory.create('book');\n\n  test.equal(Authors.findOne(book.good.authorId).name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - Sequence\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    email(factory) {\n      return factory.sequence(n => 'person' + n + '@example.com');\n    }\n  });\n\n  var author = Factory.build('author');\n  test.equal(author.email, \"person1@example.com\");\n  var author2 = Factory.build('author');\n  test.equal(author2.email, \"person2@example.com\");\n});\n\nTinytest.add(\"Factory - Create - Sequence\", test => {\n  Authors.remove({});\n\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    email(factory) {\n      return factory.sequence(n => 'person' + n + '@example.com');\n    }\n  });\n\n  var author = Factory.create('author');\n  test.equal(author.email, \"person1@example.com\");\n  var foundAuthor = Authors.find({email: \"person1@example.com\"}).count();\n  test.equal(foundAuthor, 1);\n\n  var author2 = Factory.create('author');\n  test.equal(author2.email, \"person2@example.com\");\n  var foundAuthor2 = Authors.find({email: \"person2@example.com\"}).count();\n  test.equal(foundAuthor2, 1);\n});\n\nTinytest.add(\"Factory - Build - Array with Factory\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorIds: [Factory.get('author'), 'PXm6dye7A8vgoB7uY']\n  });\n\n  const book = Factory.build('book');\n\n  test.length(book.authorIds, 2);\n  test.length(book.authorIds[0], 17);\n});\n\nTinytest.add(\"Factory - Build - Array with function returning a Factory\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    authorIds: [() => Factory.get('author'), 'PXm6dye7A8vgoB7uY']\n  });\n\n  const book = Factory.build('book');\n\n  test.length(book.authorIds, 2);\n  test.length(book.authorIds[0], 17);\n});\n\nTinytest.add(\"Factory - Build - Array with an object\", test => {\n  Factory.define('book', Books, {\n    array: [{objectInArray: true}]\n  });\n\n  const book = Factory.build('book');\n\n  test.isTrue(book.array[0].objectInArray);\n});\n\n// Could possibly make this a feature:\n// Tinytest.add(\"Factory - Build - Array with an object containing a function\", test => {\n//   Factory.define('book', Books, {\n//     array: [{objectInArrayWithFn: () => true}]\n//   });\n\n//   const book = Factory.build('book');\n\n//   test.equal(book.array[0].objectInArrayWithFn, true);\n// });\n\nTinytest.add(\"Factory - Tree - Basic\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\"\n  });\n\n  Factory.define('book', Books, {\n    name: \"A book\",\n    author: Factory.get('author')\n  });\n\n  const book = Factory.tree('book');\n\n  test.equal(book.author.name, \"John Smith\");\n});\n\nTinytest.add(\"Factory - Build - With options\", test => {\n  Factory.define('author', Authors, {\n    name: \"John Smith\",\n    books(factory, options = { bookCount: 2 }) {\n      return _(options.bookCount).times((n) => `${n + 1} book by ${this.name}`)\n    }\n  });\n\n  const author = Factory.build('author', {}, { bookCount: 3 });\n\n  test.length(author.books, 3);\n  test.equal(author.books, [\n    '1 book by John Smith',\n    '2 book by John Smith',\n    '3 book by John Smith',\n  ]);\n});\n\nTinytest.add(\"Factory - Create - With options\", test => {\n  Factory.define('book', Books, {\n    name: \"A book\",\n    pages(factory, options = { pageCount: 2 }) {\n      return _(options.pageCount).times((n) => `Page ${n + 1}`)\n    }\n  });\n\n  const book = Factory.create('book', {}, { pageCount: 2 });\n\n  test.length(book.pages, 2);\n  test.equal(book.pages, [\n    'Page 1',\n    'Page 2',\n  ]);\n});\n"]},"hash":"34c2d381f024b9dee8e023c3685f13bd85c239a4"}

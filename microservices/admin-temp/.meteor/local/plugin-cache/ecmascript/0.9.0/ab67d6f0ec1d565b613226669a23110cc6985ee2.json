{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"./Material/Radio","imported":["default","RadioGroup"],"specifiers":[{"kind":"named","imported":"default","local":"Radio"},{"kind":"named","imported":"RadioGroup","local":"RadioGroup"}]},{"source":"material-ui/Form","imported":["FormLabel","FormControl","FormControlLabel"],"specifiers":[{"kind":"named","imported":"FormLabel","local":"FormLabel"},{"kind":"named","imported":"FormControl","local":"FormControl"},{"kind":"named","imported":"FormControlLabel","local":"FormControlLabel"}]},{"source":"./Translation","imported":["T"],"specifiers":[{"kind":"named","imported":"T","local":"T"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/RadioButtons.jsx","filenameRelative":"imports/core/components/RadioButtons.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/RadioButtons.jsx.map","sourceFileName":"imports/core/components/RadioButtons.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"RadioButtons"},"ignored":false,"code":"\"use strict\";\n\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  default: function _default(v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  default: function _default(v) {\n    PropTypes = v;\n  }\n}, 1);\n\nvar Radio = void 0,\n    _RadioGroup = void 0;\n\nmodule.watch(require(\"./Material/Radio\"), {\n  default: function _default(v) {\n    Radio = v;\n  },\n  RadioGroup: function RadioGroup(v) {\n    _RadioGroup = v;\n  }\n}, 2);\n\nvar _FormLabel = void 0,\n    _FormControl = void 0,\n    _FormControlLabel = void 0;\n\nmodule.watch(require(\"material-ui/Form\"), {\n  FormLabel: function FormLabel(v) {\n    _FormLabel = v;\n  },\n  FormControl: function FormControl(v) {\n    _FormControl = v;\n  },\n  FormControlLabel: function FormControlLabel(v) {\n    _FormControlLabel = v;\n  }\n}, 3);\n\nvar _T = void 0;\n\nmodule.watch(require(\"./Translation\"), {\n  T: function T(v) {\n    _T = v;\n  }\n}, 4);\n\nvar safeChange = function safeChange(value, id, onChange, options) {\n  // If all options are booleans, transform the onChange handler's value\n  // to booleans\n  if (options.every(function (o) {\n    return typeof o === 'boolean' || typeof o.id === 'boolean';\n  })) {\n    return onChange(id, value === 'true');\n  }\n\n  return onChange(id, value);\n}; // Cast value to strings, so that is plays nicely with material-ui,\n// in the onChange handler, convert back to boolean\n\n\nvar RadioButtons = function RadioButtons(_ref) {\n  var options = _ref.options,\n      _onChange = _ref.onChange,\n      id = _ref.id,\n      intlPrefix = _ref.intlPrefix,\n      value = _ref.value,\n      label = _ref.label,\n      style = _ref.style,\n      disabled = _ref.disabled;\n  return React.createElement(\n    _FormControl,\n    {\n      style: style,\n      className: \"mui-radio-group\"\n    },\n    React.createElement(\n      _FormLabel,\n      {\n        htmlFor: id\n      },\n      label\n    ),\n    React.createElement(\n      _RadioGroup,\n      {\n        onChange: function onChange(event, newValue) {\n          return safeChange(newValue, id, _onChange, options);\n        },\n        value: \"\" + value,\n        name: id,\n        className: \"flex\",\n        style: {\n          justifyContent: 'flex-start'\n        }\n      },\n      options.map(function (option) {\n        return React.createElement(_FormControlLabel, {\n          control: React.createElement(Radio, null),\n          key: option.id || option,\n          value: \"\" + (option.id !== undefined ? option.id : option),\n          label: option.label || React.createElement(_T, {\n            id: intlPrefix + \".\" + option\n          }),\n          disabled: disabled\n        });\n      })\n    )\n  );\n};\n\nRadioButtons.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.node,\n  intlPrefix: PropTypes.string,\n  options: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.any,\n  style: PropTypes.object,\n  disabled: PropTypes.bool\n};\nRadioButtons.defaultProps = {\n  label: '',\n  style: {},\n  value: undefined,\n  intlPrefix: '',\n  disabled: false\n};\nmodule.exportDefault(RadioButtons);","map":{"version":3,"sources":["imports/core/components/RadioButtons.jsx"],"names":["React","module","watch","require","default","v","PropTypes","Radio","RadioGroup","FormLabel","FormControl","FormControlLabel","T","safeChange","value","id","onChange","options","every","o","RadioButtons","intlPrefix","label","style","disabled","event","newValue","justifyContent","map","option","undefined","propTypes","string","isRequired","node","array","func","any","object","bool","defaultProps","exportDefault"],"mappings":"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","file":"imports/core/components/RadioButtons.jsx.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Radio, { RadioGroup } from 'core/components/Material/Radio';\nimport { FormLabel, FormControl, FormControlLabel } from 'material-ui/Form';\n\nimport { T } from 'core/components/Translation';\n\nconst safeChange = (value, id, onChange, options) => {\n  // If all options are booleans, transform the onChange handler's value\n  // to booleans\n  if (options.every(o => typeof o === 'boolean' || typeof o.id === 'boolean')) {\n    return onChange(id, value === 'true');\n  }\n  return onChange(id, value);\n};\n\n// Cast value to strings, so that is plays nicely with material-ui,\n// in the onChange handler, convert back to boolean\nconst RadioButtons = ({\n  options,\n  onChange,\n  id,\n  intlPrefix,\n  value,\n  label,\n  style,\n  disabled,\n}) => (\n  <FormControl style={style} className=\"mui-radio-group\">\n    <FormLabel htmlFor={id}>{label}</FormLabel>\n    <RadioGroup\n      onChange={(event, newValue) =>\n        safeChange(newValue, id, onChange, options)\n      }\n      value={`${value}`}\n      name={id}\n      className=\"flex\"\n      style={{ justifyContent: 'flex-start' }}\n    >\n      {options.map(option => (\n        <FormControlLabel\n          control={<Radio />}\n          key={option.id || option}\n          value={`${option.id !== undefined ? option.id : option}`}\n          label={option.label || <T id={`${intlPrefix}.${option}`} />}\n          disabled={disabled}\n        />\n      ))}\n    </RadioGroup>\n  </FormControl>\n);\n\nRadioButtons.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.node,\n  intlPrefix: PropTypes.string,\n  options: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.any,\n  style: PropTypes.object,\n  disabled: PropTypes.bool,\n};\n\nRadioButtons.defaultProps = {\n  label: '',\n  style: {},\n  value: undefined,\n  intlPrefix: '',\n  disabled: false,\n};\n\nexport default RadioButtons;\n"]},"hash":"ab67d6f0ec1d565b613226669a23110cc6985ee2"}

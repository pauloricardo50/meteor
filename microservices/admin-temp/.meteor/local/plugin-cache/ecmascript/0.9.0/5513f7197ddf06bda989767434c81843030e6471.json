{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","extends","typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/softwarerero:accounts-t9n","imported":["T9n"],"specifiers":[{"kind":"named","imported":"T9n","local":"T9n"}]},{"source":"../../login_session.js","imported":["KEY_PREFIX"],"specifiers":[{"kind":"named","imported":"KEY_PREFIX","local":"KEY_PREFIX"}]},{"source":"./Form.jsx","imported":[],"specifiers":[]},{"source":"../../helpers.js","imported":["STATES","passwordSignupFields","validateEmail","validatePassword","validateUsername","loginResultCallback","getLoginServices","hasPasswordService","capitalize"],"specifiers":[{"kind":"named","imported":"STATES","local":"STATES"},{"kind":"named","imported":"passwordSignupFields","local":"passwordSignupFields"},{"kind":"named","imported":"validateEmail","local":"validateEmail"},{"kind":"named","imported":"validatePassword","local":"validatePassword"},{"kind":"named","imported":"validateUsername","local":"validateUsername"},{"kind":"named","imported":"loginResultCallback","local":"loginResultCallback"},{"kind":"named","imported":"getLoginServices","local":"getLoginServices"},{"kind":"named","imported":"hasPasswordService","local":"hasPasswordService"},{"kind":"named","imported":"capitalize","local":"capitalize"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/std:accounts-ui/imports/ui/components/LoginForm.jsx","filenameRelative":"packages/std:accounts-ui/imports/ui/components/LoginForm.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/std:accounts-ui/imports/ui/components/LoginForm.jsx.map","sourceFileName":"packages/std:accounts-ui/imports/ui/components/LoginForm.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"LoginForm"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar ReactDOM = void 0;\nmodule.watch(require(\"react-dom\"), {\n  \"default\": function (v) {\n    ReactDOM = v;\n  }\n}, 2);\nvar createContainer = void 0;\nmodule.watch(require(\"meteor/react-meteor-data\"), {\n  createContainer: function (v) {\n    createContainer = v;\n  }\n}, 3);\nvar Accounts = void 0;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 4);\nvar T9n = void 0;\nmodule.watch(require(\"meteor/softwarerero:accounts-t9n\"), {\n  T9n: function (v) {\n    T9n = v;\n  }\n}, 5);\nvar KEY_PREFIX = void 0;\nmodule.watch(require(\"../../login_session.js\"), {\n  KEY_PREFIX: function (v) {\n    KEY_PREFIX = v;\n  }\n}, 6);\nmodule.watch(require(\"./Form.jsx\"));\nvar STATES = void 0,\n    passwordSignupFields = void 0,\n    validateEmail = void 0,\n    validatePassword = void 0,\n    validateUsername = void 0,\n    loginResultCallback = void 0,\n    getLoginServices = void 0,\n    hasPasswordService = void 0,\n    capitalize = void 0;\nmodule.watch(require(\"../../helpers.js\"), {\n  STATES: function (v) {\n    STATES = v;\n  },\n  passwordSignupFields: function (v) {\n    passwordSignupFields = v;\n  },\n  validateEmail: function (v) {\n    validateEmail = v;\n  },\n  validatePassword: function (v) {\n    validatePassword = v;\n  },\n  validateUsername: function (v) {\n    validateUsername = v;\n  },\n  loginResultCallback: function (v) {\n    loginResultCallback = v;\n  },\n  getLoginServices: function (v) {\n    getLoginServices = v;\n  },\n  hasPasswordService: function (v) {\n    hasPasswordService = v;\n  },\n  capitalize: function (v) {\n    capitalize = v;\n  }\n}, 7);\n\nfunction indexBy(array, key) {\n  var result = {};\n  array.forEach(function (obj) {\n    result[obj[key]] = obj;\n  });\n  return result;\n}\n\nvar LoginForm = function (_Component) {\n  (0, _inherits3.default)(LoginForm, _Component);\n\n  function LoginForm(props) {\n    (0, _classCallCheck3.default)(this, LoginForm);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    var formState = props.formState,\n        loginPath = props.loginPath,\n        signUpPath = props.signUpPath,\n        resetPasswordPath = props.resetPasswordPath,\n        profilePath = props.profilePath,\n        changePasswordPath = props.changePasswordPath;\n\n    if (formState === STATES.SIGN_IN && Package['accounts-password']) {\n      console.warn('Do not force the state to SIGN_IN on Accounts.ui.LoginForm, it will make it impossible to reset password in your app, this state is also the default state if logged out, so no need to force it.');\n    } // Set inital state.\n\n\n    _this.state = {\n      messages: [],\n      waiting: true,\n      formState: formState ? formState : Accounts.user() ? STATES.PROFILE : STATES.SIGN_IN,\n      onSubmitHook: props.onSubmitHook || Accounts.ui._options.onSubmitHook,\n      onSignedInHook: props.onSignedInHook || Accounts.ui._options.onSignedInHook,\n      onSignedOutHook: props.onSignedOutHook || Accounts.ui._options.onSignedOutHook,\n      onPreSignUpHook: props.onPreSignUpHook || Accounts.ui._options.onPreSignUpHook,\n      onPostSignUpHook: props.onPostSignUpHook || Accounts.ui._options.onPostSignUpHook\n    };\n    _this.translate = _this.translate.bind(_this);\n    return _this;\n  }\n\n  LoginForm.prototype.componentDidMount = function () {\n    function componentDidMount() {\n      var _this2 = this;\n\n      this.setState(function (prevState) {\n        return {\n          waiting: false,\n          ready: true\n        };\n      });\n      var changeState = Session.get(KEY_PREFIX + 'state');\n\n      switch (changeState) {\n        case 'enrollAccountToken':\n          this.setState(function (prevState) {\n            return {\n              formState: STATES.ENROLL_ACCOUNT\n            };\n          });\n          Session.set(KEY_PREFIX + 'state', null);\n          break;\n\n        case 'resetPasswordToken':\n          this.setState(function (prevState) {\n            return {\n              formState: STATES.PASSWORD_CHANGE\n            };\n          });\n          Session.set(KEY_PREFIX + 'state', null);\n          break;\n\n        case 'justVerifiedEmail':\n          this.setState(function (prevState) {\n            return {\n              formState: STATES.PROFILE\n            };\n          });\n          Session.set(KEY_PREFIX + 'state', null);\n          break;\n      } // Add default field values once the form did mount on the client\n\n\n      this.setState(function (prevState) {\n        return (0, _extends3.default)({}, _this2.getDefaultFieldValues());\n      });\n    }\n\n    return componentDidMount;\n  }();\n\n  LoginForm.prototype.componentWillReceiveProps = function () {\n    function componentWillReceiveProps(nextProps, nextContext) {\n      if (nextProps.formState && nextProps.formState !== this.state.formState) {\n        this.setState((0, _extends3.default)({\n          formState: nextProps.formState\n        }, this.getDefaultFieldValues()));\n      }\n    }\n\n    return componentWillReceiveProps;\n  }();\n\n  LoginForm.prototype.componentDidUpdate = function () {\n    function componentDidUpdate(prevProps, prevState) {\n      if (!prevProps.user !== !this.props.user) {\n        this.setState({\n          formState: this.props.user ? STATES.PROFILE : STATES.SIGN_IN\n        });\n      }\n    }\n\n    return componentDidUpdate;\n  }();\n\n  LoginForm.prototype.translate = function () {\n    function translate(text) {\n      // if (this.props.t) {\n      //   return this.props.t(text);\n      // }\n      return T9n.get(text);\n    }\n\n    return translate;\n  }();\n\n  LoginForm.prototype.validateField = function () {\n    function validateField(field, value) {\n      var formState = this.state.formState;\n\n      switch (field) {\n        case 'email':\n          return validateEmail(value, this.showMessage.bind(this), this.clearMessage.bind(this));\n\n        case 'password':\n          return validatePassword(value, this.showMessage.bind(this), this.clearMessage.bind(this));\n\n        case 'username':\n          return validateUsername(value, this.showMessage.bind(this), this.clearMessage.bind(this), formState);\n      }\n    }\n\n    return validateField;\n  }();\n\n  LoginForm.prototype.getUsernameOrEmailField = function () {\n    function getUsernameOrEmailField() {\n      return {\n        id: 'usernameOrEmail',\n        hint: this.translate('enterUsernameOrEmail'),\n        label: this.translate('usernameOrEmail'),\n        required: true,\n        defaultValue: this.state.username || \"\",\n        onChange: this.handleChange.bind(this, 'usernameOrEmail'),\n        message: this.getMessageForField('usernameOrEmail')\n      };\n    }\n\n    return getUsernameOrEmailField;\n  }();\n\n  LoginForm.prototype.getUsernameField = function () {\n    function getUsernameField() {\n      return {\n        id: 'username',\n        hint: this.translate('enterUsername'),\n        label: this.translate('username'),\n        required: true,\n        defaultValue: this.state.username || \"\",\n        onChange: this.handleChange.bind(this, 'username'),\n        message: this.getMessageForField('username')\n      };\n    }\n\n    return getUsernameField;\n  }();\n\n  LoginForm.prototype.getEmailField = function () {\n    function getEmailField() {\n      return {\n        id: 'email',\n        hint: this.translate('enterEmail'),\n        label: this.translate('email'),\n        type: 'email',\n        required: true,\n        defaultValue: this.state.email || \"\",\n        onChange: this.handleChange.bind(this, 'email'),\n        message: this.getMessageForField('email')\n      };\n    }\n\n    return getEmailField;\n  }();\n\n  LoginForm.prototype.getPasswordField = function () {\n    function getPasswordField() {\n      return {\n        id: 'password',\n        hint: this.translate('enterPassword'),\n        label: this.translate('password'),\n        type: 'password',\n        required: true,\n        defaultValue: this.state.password || \"\",\n        onChange: this.handleChange.bind(this, 'password'),\n        message: this.getMessageForField('password')\n      };\n    }\n\n    return getPasswordField;\n  }();\n\n  LoginForm.prototype.getSetPasswordField = function () {\n    function getSetPasswordField() {\n      return {\n        id: 'newPassword',\n        hint: this.translate('enterPassword'),\n        label: this.translate('choosePassword'),\n        type: 'password',\n        required: true,\n        onChange: this.handleChange.bind(this, 'newPassword')\n      };\n    }\n\n    return getSetPasswordField;\n  }();\n\n  LoginForm.prototype.getNewPasswordField = function () {\n    function getNewPasswordField() {\n      return {\n        id: 'newPassword',\n        hint: this.translate('enterNewPassword'),\n        label: this.translate('newPassword'),\n        type: 'password',\n        required: true,\n        onChange: this.handleChange.bind(this, 'newPassword'),\n        message: this.getMessageForField('newPassword')\n      };\n    }\n\n    return getNewPasswordField;\n  }();\n\n  LoginForm.prototype.handleChange = function () {\n    function handleChange(field, evt) {\n      var _setState, _setDefaultFieldValue;\n\n      var value = evt.target.value;\n\n      switch (field) {\n        case 'password':\n          break;\n\n        default:\n          value = value.trim();\n          break;\n      }\n\n      this.setState((_setState = {}, _setState[field] = value, _setState));\n      this.setDefaultFieldValues((_setDefaultFieldValue = {}, _setDefaultFieldValue[field] = value, _setDefaultFieldValue));\n    }\n\n    return handleChange;\n  }();\n\n  LoginForm.prototype.fields = function () {\n    function fields() {\n      var loginFields = [];\n      var formState = this.state.formState;\n\n      if (!hasPasswordService() && getLoginServices().length == 0) {\n        loginFields.push({\n          label: 'No login service added, i.e. accounts-password',\n          type: 'notice'\n        });\n      }\n\n      if (hasPasswordService() && formState == STATES.SIGN_IN) {\n        if ([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          loginFields.push(this.getUsernameOrEmailField());\n        }\n\n        if (passwordSignupFields() === \"USERNAME_ONLY\") {\n          loginFields.push(this.getUsernameField());\n        }\n\n        if ([\"EMAIL_ONLY\", \"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          loginFields.push(this.getEmailField());\n        }\n\n        if (![\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          loginFields.push(this.getPasswordField());\n        }\n      }\n\n      if (hasPasswordService() && formState == STATES.SIGN_UP) {\n        if ([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          loginFields.push(this.getUsernameField());\n        }\n\n        if ([\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\", \"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          loginFields.push(this.getEmailField());\n        }\n\n        if ([\"USERNAME_AND_OPTIONAL_EMAIL\"].includes(passwordSignupFields())) {\n          loginFields.push(Object.assign(this.getEmailField(), {\n            required: false\n          }));\n        }\n\n        if (![\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          loginFields.push(this.getPasswordField());\n        }\n      }\n\n      if (formState == STATES.PASSWORD_RESET) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if (this.showPasswordChangeForm()) {\n        if (Meteor.isClient && !Accounts._loginButtonsSession.get('resetPasswordToken')) {\n          loginFields.push(this.getPasswordField());\n        }\n\n        loginFields.push(this.getNewPasswordField());\n      }\n\n      if (this.showEnrollAccountForm()) {\n        loginFields.push(this.getSetPasswordField());\n      }\n\n      return indexBy(loginFields, 'id');\n    }\n\n    return fields;\n  }();\n\n  LoginForm.prototype.buttons = function () {\n    function buttons() {\n      var _props = this.props,\n          _props$loginPath = _props.loginPath,\n          loginPath = _props$loginPath === undefined ? Accounts.ui._options.loginPath : _props$loginPath,\n          _props$signUpPath = _props.signUpPath,\n          signUpPath = _props$signUpPath === undefined ? Accounts.ui._options.signUpPath : _props$signUpPath,\n          _props$resetPasswordP = _props.resetPasswordPath,\n          resetPasswordPath = _props$resetPasswordP === undefined ? Accounts.ui._options.resetPasswordPath : _props$resetPasswordP,\n          _props$changePassword = _props.changePasswordPath,\n          changePasswordPath = _props$changePassword === undefined ? Accounts.ui._options.changePasswordPath : _props$changePassword,\n          _props$profilePath = _props.profilePath,\n          profilePath = _props$profilePath === undefined ? Accounts.ui._options.profilePath : _props$profilePath;\n      var user = this.props.user;\n      var _state = this.state,\n          formState = _state.formState,\n          waiting = _state.waiting;\n      var loginButtons = [];\n\n      if (user && formState == STATES.PROFILE) {\n        loginButtons.push({\n          id: 'signOut',\n          label: this.translate('signOut'),\n          disabled: waiting,\n          onClick: this.signOut.bind(this)\n        });\n      }\n\n      if (this.showCreateAccountLink()) {\n        loginButtons.push({\n          id: 'switchToSignUp',\n          label: this.translate('signUp'),\n          type: 'link',\n          href: signUpPath,\n          onClick: this.switchToSignUp.bind(this)\n        });\n      }\n\n      if (formState == STATES.SIGN_UP || formState == STATES.PASSWORD_RESET) {\n        loginButtons.push({\n          id: 'switchToSignIn',\n          label: this.translate('signIn'),\n          type: 'link',\n          href: loginPath,\n          onClick: this.switchToSignIn.bind(this)\n        });\n      }\n\n      if (this.showForgotPasswordLink()) {\n        loginButtons.push({\n          id: 'switchToPasswordReset',\n          label: this.translate('forgotPassword'),\n          type: 'link',\n          href: resetPasswordPath,\n          onClick: this.switchToPasswordReset.bind(this)\n        });\n      }\n\n      if (user && ![\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields()) && formState == STATES.PROFILE && user.services && 'password' in user.services) {\n        loginButtons.push({\n          id: 'switchToChangePassword',\n          label: this.translate('changePassword'),\n          type: 'link',\n          href: changePasswordPath,\n          onClick: this.switchToChangePassword.bind(this)\n        });\n      }\n\n      if (formState == STATES.SIGN_UP) {\n        loginButtons.push({\n          id: 'signUp',\n          label: this.translate('signUp'),\n          type: hasPasswordService() ? 'submit' : 'link',\n          className: 'active',\n          disabled: waiting,\n          onClick: hasPasswordService() ? this.signUp.bind(this, {}) : null\n        });\n      }\n\n      if (this.showSignInLink()) {\n        loginButtons.push({\n          id: 'signIn',\n          label: this.translate('signIn'),\n          type: hasPasswordService() ? 'submit' : 'link',\n          className: 'active',\n          disabled: waiting,\n          onClick: hasPasswordService() ? this.signIn.bind(this) : null\n        });\n      }\n\n      if (formState == STATES.PASSWORD_RESET) {\n        loginButtons.push({\n          id: 'emailResetLink',\n          label: this.translate('resetYourPassword'),\n          type: 'submit',\n          disabled: waiting,\n          onClick: this.passwordReset.bind(this)\n        });\n      }\n\n      if (this.showPasswordChangeForm() || this.showEnrollAccountForm()) {\n        loginButtons.push({\n          id: 'changePassword',\n          label: this.showPasswordChangeForm() ? this.translate('changePassword') : this.translate('setPassword'),\n          type: 'submit',\n          disabled: waiting,\n          onClick: this.passwordChange.bind(this)\n        });\n\n        if (Accounts.user()) {\n          loginButtons.push({\n            id: 'switchToSignOut',\n            label: this.translate('cancel'),\n            type: 'link',\n            href: profilePath,\n            onClick: this.switchToSignOut.bind(this)\n          });\n        } else {\n          loginButtons.push({\n            id: 'cancelResetPassword',\n            label: this.translate('cancel'),\n            type: 'link',\n            onClick: this.cancelResetPassword.bind(this)\n          });\n        }\n      } // Sort the button array so that the submit button always comes first, and\n      // buttons should also come before links.\n\n\n      loginButtons.sort(function (a, b) {\n        return (b.type == 'submit' && a.type != undefined) - (a.type == 'submit' && b.type != undefined);\n      });\n      return indexBy(loginButtons, 'id');\n    }\n\n    return buttons;\n  }();\n\n  LoginForm.prototype.showSignInLink = function () {\n    function showSignInLink() {\n      return this.state.formState == STATES.SIGN_IN && Package['accounts-password'];\n    }\n\n    return showSignInLink;\n  }();\n\n  LoginForm.prototype.showPasswordChangeForm = function () {\n    function showPasswordChangeForm() {\n      return Package['accounts-password'] && this.state.formState == STATES.PASSWORD_CHANGE;\n    }\n\n    return showPasswordChangeForm;\n  }();\n\n  LoginForm.prototype.showEnrollAccountForm = function () {\n    function showEnrollAccountForm() {\n      return Package['accounts-password'] && this.state.formState == STATES.ENROLL_ACCOUNT;\n    }\n\n    return showEnrollAccountForm;\n  }();\n\n  LoginForm.prototype.showCreateAccountLink = function () {\n    function showCreateAccountLink() {\n      return this.state.formState == STATES.SIGN_IN && !Accounts._options.forbidClientAccountCreation && Package['accounts-password'];\n    }\n\n    return showCreateAccountLink;\n  }();\n\n  LoginForm.prototype.showForgotPasswordLink = function () {\n    function showForgotPasswordLink() {\n      return !this.props.user && this.state.formState == STATES.SIGN_IN && [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"].includes(passwordSignupFields());\n    }\n\n    return showForgotPasswordLink;\n  }(); /**\n        * Helper to store field values while using the form.\n        */\n\n  LoginForm.prototype.setDefaultFieldValues = function () {\n    function setDefaultFieldValues(defaults) {\n      if ((typeof defaults === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(defaults)) !== 'object') {\n        throw new Error('Argument to setDefaultFieldValues is not of type object');\n      } else if (typeof localStorage !== 'undefined' && localStorage) {\n        localStorage.setItem('accounts_ui', JSON.stringify((0, _extends3.default)({\n          passwordSignupFields: passwordSignupFields()\n        }, this.getDefaultFieldValues(), defaults)));\n      }\n    }\n\n    return setDefaultFieldValues;\n  }(); /**\n        * Helper to get field values when switching states in the form.\n        */\n\n  LoginForm.prototype.getDefaultFieldValues = function () {\n    function getDefaultFieldValues() {\n      if (typeof localStorage !== 'undefined' && localStorage) {\n        var defaultFieldValues = JSON.parse(localStorage.getItem('accounts_ui') || null);\n\n        if (defaultFieldValues && defaultFieldValues.passwordSignupFields === passwordSignupFields()) {\n          return defaultFieldValues;\n        }\n      }\n    }\n\n    return getDefaultFieldValues;\n  }(); /**\n        * Helper to clear field values when signing in, up or out.\n        */\n\n  LoginForm.prototype.clearDefaultFieldValues = function () {\n    function clearDefaultFieldValues() {\n      if (typeof localStorage !== 'undefined' && localStorage) {\n        localStorage.removeItem('accounts_ui');\n      }\n    }\n\n    return clearDefaultFieldValues;\n  }();\n\n  LoginForm.prototype.switchToSignUp = function () {\n    function switchToSignUp(event) {\n      event.preventDefault();\n      this.setState((0, _extends3.default)({\n        formState: STATES.SIGN_UP\n      }, this.getDefaultFieldValues()));\n      this.clearMessages();\n    }\n\n    return switchToSignUp;\n  }();\n\n  LoginForm.prototype.switchToSignIn = function () {\n    function switchToSignIn(event) {\n      event.preventDefault();\n      this.setState((0, _extends3.default)({\n        formState: STATES.SIGN_IN\n      }, this.getDefaultFieldValues()));\n      this.clearMessages();\n    }\n\n    return switchToSignIn;\n  }();\n\n  LoginForm.prototype.switchToPasswordReset = function () {\n    function switchToPasswordReset(event) {\n      event.preventDefault();\n      this.setState((0, _extends3.default)({\n        formState: STATES.PASSWORD_RESET\n      }, this.getDefaultFieldValues()));\n      this.clearMessages();\n    }\n\n    return switchToPasswordReset;\n  }();\n\n  LoginForm.prototype.switchToChangePassword = function () {\n    function switchToChangePassword(event) {\n      event.preventDefault();\n      this.setState((0, _extends3.default)({\n        formState: STATES.PASSWORD_CHANGE\n      }, this.getDefaultFieldValues()));\n      this.clearMessages();\n    }\n\n    return switchToChangePassword;\n  }();\n\n  LoginForm.prototype.switchToSignOut = function () {\n    function switchToSignOut(event) {\n      event.preventDefault();\n      this.setState({\n        formState: STATES.PROFILE\n      });\n      this.clearMessages();\n    }\n\n    return switchToSignOut;\n  }();\n\n  LoginForm.prototype.cancelResetPassword = function () {\n    function cancelResetPassword(event) {\n      event.preventDefault();\n\n      Accounts._loginButtonsSession.set('resetPasswordToken', null);\n\n      this.setState({\n        formState: STATES.SIGN_IN,\n        messages: []\n      });\n    }\n\n    return cancelResetPassword;\n  }();\n\n  LoginForm.prototype.signOut = function () {\n    function signOut() {\n      var _this3 = this;\n\n      Meteor.logout(function () {\n        _this3.setState({\n          formState: STATES.SIGN_IN,\n          password: null\n        });\n\n        _this3.state.onSignedOutHook();\n\n        _this3.clearMessages();\n\n        _this3.clearDefaultFieldValues();\n      });\n    }\n\n    return signOut;\n  }();\n\n  LoginForm.prototype.signIn = function () {\n    function signIn() {\n      var _this4 = this;\n\n      var _state2 = this.state,\n          _state2$username = _state2.username,\n          username = _state2$username === undefined ? null : _state2$username,\n          _state2$email = _state2.email,\n          email = _state2$email === undefined ? null : _state2$email,\n          _state2$usernameOrEma = _state2.usernameOrEmail,\n          usernameOrEmail = _state2$usernameOrEma === undefined ? null : _state2$usernameOrEma,\n          password = _state2.password,\n          formState = _state2.formState,\n          onSubmitHook = _state2.onSubmitHook;\n      var error = false;\n      var loginSelector = void 0;\n      this.clearMessages();\n\n      if (usernameOrEmail !== null) {\n        if (!this.validateField('username', usernameOrEmail)) {\n          if (this.state.formState == STATES.SIGN_UP) {\n            this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n          }\n\n          error = true;\n        } else {\n          if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n            this.loginWithoutPassword();\n            return;\n          } else {\n            loginSelector = usernameOrEmail;\n          }\n        }\n      } else if (username !== null) {\n        if (!this.validateField('username', username)) {\n          if (this.state.formState == STATES.SIGN_UP) {\n            this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n          }\n\n          error = true;\n        } else {\n          loginSelector = {\n            username: username\n          };\n        }\n      } else if (usernameOrEmail == null) {\n        if (!this.validateField('email', email)) {\n          error = true;\n        } else {\n          if ([\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())) {\n            this.loginWithoutPassword();\n            error = true;\n          } else {\n            loginSelector = {\n              email: email\n            };\n          }\n        }\n      }\n\n      if (![\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields()) && !this.validateField('password', password)) {\n        error = true;\n      }\n\n      if (!error) {\n        Meteor.loginWithPassword(loginSelector, password, function (error, result) {\n          onSubmitHook(error, formState);\n\n          if (error) {\n            _this4.showMessage(\"error.accounts.\" + error.reason || \"unknown_error\", 'error');\n          } else {\n            loginResultCallback(function () {\n              return _this4.state.onSignedInHook();\n            });\n\n            _this4.setState({\n              formState: STATES.PROFILE,\n              password: null\n            });\n\n            _this4.clearDefaultFieldValues();\n          }\n        });\n      }\n    }\n\n    return signIn;\n  }();\n\n  LoginForm.prototype.oauthButtons = function () {\n    function oauthButtons() {\n      var _this5 = this;\n\n      var _state3 = this.state,\n          formState = _state3.formState,\n          waiting = _state3.waiting;\n      var oauthButtons = [];\n\n      if (formState == STATES.SIGN_IN || formState == STATES.SIGN_UP) {\n        if (Accounts.oauth) {\n          Accounts.oauth.serviceNames().map(function (service) {\n            oauthButtons.push({\n              id: service,\n              label: capitalize(service),\n              disabled: waiting,\n              type: 'button',\n              className: \"btn-\" + service + \" \" + service,\n              onClick: _this5.oauthSignIn.bind(_this5, service)\n            });\n          });\n        }\n      }\n\n      return indexBy(oauthButtons, 'id');\n    }\n\n    return oauthButtons;\n  }();\n\n  LoginForm.prototype.oauthSignIn = function () {\n    function oauthSignIn(serviceName) {\n      var _this6 = this;\n\n      var user = this.props.user;\n      var _state4 = this.state,\n          formState = _state4.formState,\n          waiting = _state4.waiting,\n          onSubmitHook = _state4.onSubmitHook; //Thanks Josh Owens for this one.\n\n      function capitalService() {\n        return serviceName.charAt(0).toUpperCase() + serviceName.slice(1);\n      }\n\n      if (serviceName === 'meteor-developer') {\n        serviceName = 'meteorDeveloperAccount';\n      }\n\n      var loginWithService = Meteor[\"loginWith\" + capitalService()];\n      var options = {}; // use default scope unless specified\n\n      if (Accounts.ui._options.requestPermissions[serviceName]) options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n      if (Accounts.ui._options.requestOfflineToken[serviceName]) options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n      if (Accounts.ui._options.forceApprovalPrompt[serviceName]) options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n      this.clearMessages();\n      var self = this;\n      loginWithService(options, function (error) {\n        onSubmitHook(error, formState);\n\n        if (error) {\n          _this6.showMessage(\"error.accounts.\" + error.reason || \"unknown_error\");\n        } else {\n          _this6.setState({\n            formState: STATES.PROFILE\n          });\n\n          _this6.clearDefaultFieldValues();\n\n          loginResultCallback(function () {\n            Meteor.setTimeout(function () {\n              return _this6.state.onSignedInHook();\n            }, 100);\n          });\n        }\n      });\n    }\n\n    return oauthSignIn;\n  }();\n\n  LoginForm.prototype.signUp = function () {\n    function signUp() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _state5 = this.state,\n          _state5$username = _state5.username,\n          username = _state5$username === undefined ? null : _state5$username,\n          _state5$email = _state5.email,\n          email = _state5$email === undefined ? null : _state5$email,\n          _state5$usernameOrEma = _state5.usernameOrEmail,\n          usernameOrEmail = _state5$usernameOrEma === undefined ? null : _state5$usernameOrEma,\n          password = _state5.password,\n          formState = _state5.formState,\n          onSubmitHook = _state5.onSubmitHook;\n      var error = false;\n      this.clearMessages();\n\n      if (username !== null) {\n        if (!this.validateField('username', username)) {\n          if (this.state.formState == STATES.SIGN_UP) {\n            this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n          }\n\n          error = true;\n        } else {\n          options.username = username;\n        }\n      } else {\n        if ([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields()) && !this.validateField('username', username)) {\n          if (this.state.formState == STATES.SIGN_UP) {\n            this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n          }\n\n          error = true;\n        }\n      }\n\n      if (!this.validateField('email', email)) {\n        error = true;\n      } else {\n        options.email = email;\n      }\n\n      if ([\"EMAIL_ONLY_NO_PASSWORD\", \"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        // Generate a random password.\n        options.password = Meteor.uuid();\n      } else if (!this.validateField('password', password)) {\n        onSubmitHook(\"Invalid password\", formState);\n        error = true;\n      } else {\n        options.password = password;\n      }\n\n      var SignUp = function (_options) {\n        var _this7 = this;\n\n        Accounts.createUser(_options, function (error) {\n          if (error) {\n            _this7.showMessage(\"error.accounts.\" + error.reason || \"unknown_error\", 'error');\n\n            if (_this7.translate(\"error.accounts.\" + error.reason)) {\n              onSubmitHook(\"error.accounts.\" + error.reason, formState);\n            } else {\n              onSubmitHook(\"unknown_error\", formState);\n            }\n          } else {\n            onSubmitHook(null, formState);\n\n            _this7.setState({\n              formState: STATES.PROFILE,\n              password: null\n            });\n\n            var user = Accounts.user();\n            loginResultCallback(_this7.state.onPostSignUpHook.bind(_this7, _options, user));\n\n            _this7.clearDefaultFieldValues();\n          }\n\n          _this7.setState({\n            waiting: false\n          });\n        });\n      };\n\n      if (!error) {\n        this.setState({\n          waiting: true\n        }); // Allow for Promises to return.\n\n        var promise = this.state.onPreSignUpHook(options);\n\n        if (promise instanceof Promise) {\n          promise.then(SignUp.bind(this, options));\n        } else {\n          SignUp(options);\n        }\n      }\n    }\n\n    return signUp;\n  }();\n\n  LoginForm.prototype.loginWithoutPassword = function () {\n    function loginWithoutPassword() {\n      var _this8 = this;\n\n      var _state6 = this.state,\n          _state6$email = _state6.email,\n          email = _state6$email === undefined ? '' : _state6$email,\n          _state6$usernameOrEma = _state6.usernameOrEmail,\n          usernameOrEmail = _state6$usernameOrEma === undefined ? '' : _state6$usernameOrEma,\n          waiting = _state6.waiting,\n          formState = _state6.formState,\n          onSubmitHook = _state6.onSubmitHook;\n\n      if (waiting) {\n        return;\n      }\n\n      if (this.validateField('email', email)) {\n        this.setState({\n          waiting: true\n        });\n        Accounts.loginWithoutPassword({\n          email: email\n        }, function (error) {\n          if (error) {\n            _this8.showMessage(\"error.accounts.\" + error.reason || \"unknown_error\", 'error');\n          } else {\n            _this8.showMessage(_this8.translate(\"info.emailSent\"), 'success', 5000);\n\n            _this8.clearDefaultFieldValues();\n          }\n\n          onSubmitHook(error, formState);\n\n          _this8.setState({\n            waiting: false\n          });\n        });\n      } else if (this.validateField('username', usernameOrEmail)) {\n        this.setState({\n          waiting: true\n        });\n        Accounts.loginWithoutPassword({\n          email: usernameOrEmail,\n          username: usernameOrEmail\n        }, function (error) {\n          if (error) {\n            _this8.showMessage(\"error.accounts.\" + error.reason || \"unknown_error\", 'error');\n          } else {\n            _this8.showMessage(_this8.translate(\"info.emailSent\"), 'success', 5000);\n\n            _this8.clearDefaultFieldValues();\n          }\n\n          onSubmitHook(error, formState);\n\n          _this8.setState({\n            waiting: false\n          });\n        });\n      } else {\n        var errMsg = null;\n\n        if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          errMsg = this.translate(\"error.accounts.invalid_email\");\n        } else {\n          errMsg = this.translate(\"error.accounts.invalid_email\");\n        }\n\n        this.showMessage(errMsg, 'warning');\n        onSubmitHook(errMsg, formState);\n      }\n    }\n\n    return loginWithoutPassword;\n  }();\n\n  LoginForm.prototype.passwordReset = function () {\n    function passwordReset() {\n      var _this9 = this;\n\n      var _state7 = this.state,\n          _state7$email = _state7.email,\n          email = _state7$email === undefined ? '' : _state7$email,\n          waiting = _state7.waiting,\n          formState = _state7.formState,\n          onSubmitHook = _state7.onSubmitHook;\n\n      if (waiting) {\n        return;\n      }\n\n      this.clearMessages();\n\n      if (this.validateField('email', email)) {\n        this.setState({\n          waiting: true\n        });\n        Accounts.forgotPassword({\n          email: email\n        }, function (error) {\n          if (error) {\n            _this9.showMessage(\"error.accounts.\" + error.reason || \"unknown_error\", 'error');\n          } else {\n            _this9.showMessage(_this9.translate(\"info.emailSent\"), 'success', 5000);\n\n            _this9.clearDefaultFieldValues();\n          }\n\n          onSubmitHook(error, formState);\n\n          _this9.setState({\n            waiting: false\n          });\n        });\n      }\n    }\n\n    return passwordReset;\n  }();\n\n  LoginForm.prototype.passwordChange = function () {\n    function passwordChange() {\n      var _this10 = this;\n\n      var _state8 = this.state,\n          password = _state8.password,\n          newPassword = _state8.newPassword,\n          formState = _state8.formState,\n          onSubmitHook = _state8.onSubmitHook,\n          onSignedInHook = _state8.onSignedInHook;\n\n      if (!this.validateField('password', newPassword)) {\n        onSubmitHook('err.minChar', formState);\n        return;\n      }\n\n      var token = Accounts._loginButtonsSession.get('resetPasswordToken');\n\n      if (!token) {\n        token = Accounts._loginButtonsSession.get('enrollAccountToken');\n      }\n\n      if (token) {\n        Accounts.resetPassword(token, newPassword, function (error) {\n          if (error) {\n            _this10.showMessage(\"error.accounts.\" + error.reason || \"unknown_error\", 'error');\n\n            onSubmitHook(error, formState);\n          } else {\n            _this10.showMessage(_this10.translate('info.passwordChanged'), 'success', 5000);\n\n            onSubmitHook(null, formState);\n\n            _this10.setState({\n              formState: STATES.PROFILE\n            });\n\n            Accounts._loginButtonsSession.set('resetPasswordToken', null);\n\n            Accounts._loginButtonsSession.set('enrollAccountToken', null);\n\n            onSignedInHook();\n          }\n        });\n      } else {\n        Accounts.changePassword(password, newPassword, function (error) {\n          if (error) {\n            _this10.showMessage(\"error.accounts.\" + error.reason || \"unknown_error\", 'error');\n\n            onSubmitHook(error, formState);\n          } else {\n            _this10.showMessage('info.passwordChanged', 'success', 5000);\n\n            onSubmitHook(null, formState);\n\n            _this10.setState({\n              formState: STATES.PROFILE\n            });\n\n            _this10.clearDefaultFieldValues();\n          }\n        });\n      }\n    }\n\n    return passwordChange;\n  }();\n\n  LoginForm.prototype.showMessage = function () {\n    function showMessage(message, type, clearTimeout, field) {\n      var _this11 = this;\n\n      message = this.translate(message).trim();\n\n      if (message) {\n        this.setState(function (_ref) {\n          var _ref$messages = _ref.messages,\n              messages = _ref$messages === undefined ? [] : _ref$messages;\n          messages.push((0, _extends3.default)({\n            message: message,\n            type: type\n          }, field && {\n            field: field\n          }));\n          return {\n            messages: messages\n          };\n        });\n\n        if (clearTimeout) {\n          this.hideMessageTimout = setTimeout(function () {\n            // Filter out the message that timed out.\n            _this11.clearMessage(message);\n          }, clearTimeout);\n        }\n      }\n    }\n\n    return showMessage;\n  }();\n\n  LoginForm.prototype.getMessageForField = function () {\n    function getMessageForField(field) {\n      var _state$messages = this.state.messages,\n          messages = _state$messages === undefined ? [] : _state$messages;\n      return messages.find(function (_ref2) {\n        var key = _ref2.field;\n        return key === field;\n      });\n    }\n\n    return getMessageForField;\n  }();\n\n  LoginForm.prototype.clearMessage = function () {\n    function clearMessage(message) {\n      if (message) {\n        this.setState(function (_ref3) {\n          var _ref3$messages = _ref3.messages,\n              messages = _ref3$messages === undefined ? [] : _ref3$messages;\n          return {\n            messages: messages.filter(function (_ref4) {\n              var a = _ref4.message;\n              return a !== message;\n            })\n          };\n        });\n      }\n    }\n\n    return clearMessage;\n  }();\n\n  LoginForm.prototype.clearMessages = function () {\n    function clearMessages() {\n      if (this.hideMessageTimout) {\n        clearTimeout(this.hideMessageTimout);\n      }\n\n      this.setState({\n        messages: []\n      });\n    }\n\n    return clearMessages;\n  }();\n\n  LoginForm.prototype.componentWillMount = function () {\n    function componentWillMount() {\n      // XXX Check for backwards compatibility.\n      if (Meteor.isClient) {\n        var container = document.createElement('div');\n        ReactDOM.render(React.createElement(Accounts.ui.Field, {\n          message: \"test\"\n        }), container);\n\n        if (container.getElementsByClassName('message').length == 0) {\n          // Found backwards compatibility issue with 1.3.x\n          console.warn(\"Implementations of Accounts.ui.Field must render message in v1.2.11.\\n          https://github.com/studiointeract/accounts-ui/#deprecations\");\n        }\n      }\n    }\n\n    return componentWillMount;\n  }();\n\n  LoginForm.prototype.componentWillUnmount = function () {\n    function componentWillUnmount() {\n      if (this.hideMessageTimout) {\n        clearTimeout(this.hideMessageTimout);\n      }\n    }\n\n    return componentWillUnmount;\n  }();\n\n  LoginForm.prototype.render = function () {\n    function render() {\n      var _this12 = this;\n\n      this.oauthButtons(); // Backwords compatibility with v1.2.x.\n\n      var _state$messages2 = this.state.messages,\n          messages = _state$messages2 === undefined ? [] : _state$messages2;\n      var message = {\n        deprecated: true,\n        message: messages.map(function (_ref5) {\n          var message = _ref5.message;\n          return message;\n        }).join(', ')\n      };\n      return React.createElement(Accounts.ui.Form, (0, _extends3.default)({\n        oauthServices: this.oauthButtons(),\n        fields: this.fields(),\n        buttons: this.buttons()\n      }, this.state, {\n        message: message,\n        translate: function (text) {\n          return _this12.translate(text);\n        }\n      }));\n    }\n\n    return render;\n  }();\n\n  return LoginForm;\n}(Component);\n\nLoginForm.propTypes = {\n  formState: PropTypes.symbol,\n  loginPath: PropTypes.string,\n  signUpPath: PropTypes.string,\n  resetPasswordPath: PropTypes.string,\n  profilePath: PropTypes.string,\n  changePasswordPath: PropTypes.string\n};\nLoginForm.defaultProps = {\n  formState: null,\n  loginPath: null,\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: null,\n  changePasswordPath: null\n};\nAccounts.ui.LoginForm = LoginForm;\nmodule.exportDefault(createContainer(function () {\n  // Listen for the user to login/logout and the services list to the user.\n  Meteor.subscribe('servicesList');\n  return {\n    user: Accounts.user()\n  };\n}, LoginForm));","map":{"version":3,"sources":["packages/std:accounts-ui/imports/ui/components/LoginForm.jsx"],"names":["React","Component","module","watch","require","v","PropTypes","ReactDOM","createContainer","Accounts","T9n","KEY_PREFIX","STATES","passwordSignupFields","validateEmail","validatePassword","validateUsername","loginResultCallback","getLoginServices","hasPasswordService","capitalize","indexBy","array","key","result","forEach","obj","LoginForm","props","formState","loginPath","signUpPath","resetPasswordPath","profilePath","changePasswordPath","SIGN_IN","Package","console","warn","state","messages","waiting","user","PROFILE","onSubmitHook","ui","_options","onSignedInHook","onSignedOutHook","onPreSignUpHook","onPostSignUpHook","translate","bind","componentDidMount","setState","ready","changeState","Session","get","ENROLL_ACCOUNT","set","PASSWORD_CHANGE","getDefaultFieldValues","componentWillReceiveProps","nextProps","nextContext","componentDidUpdate","prevProps","prevState","text","validateField","field","value","showMessage","clearMessage","getUsernameOrEmailField","id","hint","label","required","defaultValue","username","onChange","handleChange","message","getMessageForField","getUsernameField","getEmailField","type","email","getPasswordField","password","getSetPasswordField","getNewPasswordField","evt","target","trim","setDefaultFieldValues","fields","loginFields","length","push","includes","SIGN_UP","Object","assign","PASSWORD_RESET","showPasswordChangeForm","Meteor","isClient","_loginButtonsSession","showEnrollAccountForm","buttons","loginButtons","disabled","onClick","signOut","showCreateAccountLink","href","switchToSignUp","switchToSignIn","showForgotPasswordLink","switchToPasswordReset","services","switchToChangePassword","className","signUp","showSignInLink","signIn","passwordReset","passwordChange","switchToSignOut","cancelResetPassword","sort","a","b","undefined","forbidClientAccountCreation","defaults","Error","localStorage","setItem","JSON","stringify","defaultFieldValues","parse","getItem","clearDefaultFieldValues","removeItem","event","preventDefault","clearMessages","logout","usernameOrEmail","error","loginSelector","loginWithoutPassword","loginWithPassword","reason","oauthButtons","oauth","serviceNames","map","service","oauthSignIn","serviceName","capitalService","charAt","toUpperCase","slice","loginWithService","options","requestPermissions","requestOfflineToken","forceApprovalPrompt","self","setTimeout","uuid","SignUp","createUser","promise","Promise","then","errMsg","forgotPassword","newPassword","token","resetPassword","changePassword","clearTimeout","hideMessageTimout","find","filter","componentWillMount","container","document","createElement","render","getElementsByClassName","componentWillUnmount","deprecated","join","propTypes","symbol","string","defaultProps","exportDefault","subscribe"],"mappings":"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","file":"packages/std:accounts-ui/imports/ui/components/LoginForm.jsx.map","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { createContainer } from 'meteor/react-meteor-data';\nimport { Accounts } from 'meteor/accounts-base';\nimport { T9n } from 'meteor/softwarerero:accounts-t9n';\nimport { KEY_PREFIX } from '../../login_session.js';\nimport './Form.jsx';\n\nimport {\n  STATES,\n  passwordSignupFields,\n  validateEmail,\n  validatePassword,\n  validateUsername,\n  loginResultCallback,\n  getLoginServices,\n  hasPasswordService,\n  capitalize\n} from '../../helpers.js';\n\nfunction indexBy(array, key) {\n  const result = {};\n  array.forEach(function(obj) {\n    result[obj[key]] = obj;\n  });\n  return result;\n}\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    let {\n      formState,\n      loginPath,\n      signUpPath,\n      resetPasswordPath,\n      profilePath,\n      changePasswordPath\n    } = props;\n\n    if (formState === STATES.SIGN_IN && Package['accounts-password']) {\n      console.warn('Do not force the state to SIGN_IN on Accounts.ui.LoginForm, it will make it impossible to reset password in your app, this state is also the default state if logged out, so no need to force it.');\n    }\n\n    // Set inital state.\n    this.state = {\n      messages: [],\n      waiting: true,\n      formState: formState ? formState : Accounts.user() ? STATES.PROFILE : STATES.SIGN_IN,\n      onSubmitHook: props.onSubmitHook || Accounts.ui._options.onSubmitHook,\n      onSignedInHook: props.onSignedInHook || Accounts.ui._options.onSignedInHook,\n      onSignedOutHook: props.onSignedOutHook || Accounts.ui._options.onSignedOutHook,\n      onPreSignUpHook: props.onPreSignUpHook || Accounts.ui._options.onPreSignUpHook,\n      onPostSignUpHook: props.onPostSignUpHook || Accounts.ui._options.onPostSignUpHook,\n    };\n    this.translate = this.translate.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({ waiting: false, ready: true }));\n    let changeState = Session.get(KEY_PREFIX + 'state');\n    switch (changeState) {\n      case 'enrollAccountToken':\n        this.setState(prevState => ({\n          formState: STATES.ENROLL_ACCOUNT\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n      case 'resetPasswordToken':\n        this.setState(prevState => ({\n          formState: STATES.PASSWORD_CHANGE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n\n      case 'justVerifiedEmail':\n        this.setState(prevState => ({\n          formState: STATES.PROFILE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n    }\n\n    // Add default field values once the form did mount on the client\n    this.setState(prevState => ({\n      ...this.getDefaultFieldValues(),\n    }));\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.formState && nextProps.formState !== this.state.formState) {\n      this.setState({\n        formState: nextProps.formState,\n        ...this.getDefaultFieldValues(),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevProps.user !== !this.props.user) {\n      this.setState({\n        formState: this.props.user ? STATES.PROFILE : STATES.SIGN_IN\n      });\n    }\n  }\n\n  translate(text) {\n    // if (this.props.t) {\n    //   return this.props.t(text);\n    // }\n    return T9n.get(text);\n  }\n\n  validateField(field, value) {\n    const { formState } = this.state;\n    switch(field) {\n      case 'email':\n        return validateEmail(value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this),\n        );\n      case 'password':\n        return validatePassword(value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this),\n        );\n      case 'username':\n        return validateUsername(value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this),\n          formState,\n        );\n    }\n  }\n\n  getUsernameOrEmailField() {\n    return {\n      id: 'usernameOrEmail',\n      hint: this.translate('enterUsernameOrEmail'),\n      label: this.translate('usernameOrEmail'),\n      required: true,\n      defaultValue: this.state.username || \"\",\n      onChange: this.handleChange.bind(this, 'usernameOrEmail'),\n      message: this.getMessageForField('usernameOrEmail'),\n    };\n  }\n\n  getUsernameField() {\n    return {\n      id: 'username',\n      hint: this.translate('enterUsername'),\n      label: this.translate('username'),\n      required: true,\n      defaultValue: this.state.username || \"\",\n      onChange: this.handleChange.bind(this, 'username'),\n      message: this.getMessageForField('username'),\n    };\n  }\n\n  getEmailField() {\n    return {\n      id: 'email',\n      hint: this.translate('enterEmail'),\n      label: this.translate('email'),\n      type: 'email',\n      required: true,\n      defaultValue: this.state.email || \"\",\n      onChange: this.handleChange.bind(this, 'email'),\n      message: this.getMessageForField('email'),\n    };\n  }\n\n  getPasswordField() {\n    return {\n      id: 'password',\n      hint: this.translate('enterPassword'),\n      label: this.translate('password'),\n      type: 'password',\n      required: true,\n      defaultValue: this.state.password || \"\",\n      onChange: this.handleChange.bind(this, 'password'),\n      message: this.getMessageForField('password'),\n    };\n  }\n\n  getSetPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterPassword'),\n      label: this.translate('choosePassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword')\n    };\n  }\n\n  getNewPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterNewPassword'),\n      label: this.translate('newPassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword'),\n      message: this.getMessageForField('newPassword'),\n    };\n  }\n\n  handleChange(field, evt) {\n    let value = evt.target.value;\n    switch (field) {\n      case 'password': break;\n      default:\n        value = value.trim();\n        break;\n    }\n    this.setState({ [field]: value });\n    this.setDefaultFieldValues({ [field]: value });\n  }\n\n  fields() {\n    const loginFields = [];\n    const { formState } = this.state;\n\n    if (!hasPasswordService() && getLoginServices().length == 0) {\n      loginFields.push({\n        label: 'No login service added, i.e. accounts-password',\n        type: 'notice'\n      });\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_IN) {\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"USERNAME_AND_OPTIONAL_EMAIL\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameOrEmailField());\n      }\n\n      if (passwordSignupFields() === \"USERNAME_ONLY\") {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if ([\n        \"EMAIL_ONLY\",\n        \"EMAIL_ONLY_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if (![\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_UP) {\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"USERNAME_AND_OPTIONAL_EMAIL\",\n        \"USERNAME_ONLY\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"EMAIL_ONLY\",\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if ([\"USERNAME_AND_OPTIONAL_EMAIL\"].includes(passwordSignupFields())) {\n        loginFields.push(Object.assign(this.getEmailField(), {required: false}));\n      }\n\n      if (![\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginFields.push(this.getEmailField());\n    }\n\n    if (this.showPasswordChangeForm()) {\n      if (Meteor.isClient && !Accounts._loginButtonsSession.get('resetPasswordToken')) {\n        loginFields.push(this.getPasswordField());\n      }\n      loginFields.push(this.getNewPasswordField());\n    }\n\n    if (this.showEnrollAccountForm()) {\n      loginFields.push(this.getSetPasswordField());\n    }\n    return indexBy(loginFields, 'id');\n  }\n\n  buttons() {\n    const {\n      loginPath = Accounts.ui._options.loginPath,\n      signUpPath = Accounts.ui._options.signUpPath,\n      resetPasswordPath = Accounts.ui._options.resetPasswordPath,\n      changePasswordPath = Accounts.ui._options.changePasswordPath,\n      profilePath = Accounts.ui._options.profilePath,\n    } = this.props;\n    const { user } = this.props;\n    const { formState, waiting } = this.state;\n    let loginButtons = [];\n\n    if (user && formState == STATES.PROFILE) {\n      loginButtons.push({\n        id: 'signOut',\n        label: this.translate('signOut'),\n        disabled: waiting,\n        onClick: this.signOut.bind(this)\n      });\n    }\n\n    if (this.showCreateAccountLink()) {\n      loginButtons.push({\n        id: 'switchToSignUp',\n        label: this.translate('signUp'),\n        type: 'link',\n        href: signUpPath,\n        onClick: this.switchToSignUp.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP || formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'switchToSignIn',\n        label: this.translate('signIn'),\n        type: 'link',\n        href: loginPath,\n        onClick: this.switchToSignIn.bind(this)\n      });\n    }\n\n    if (this.showForgotPasswordLink()) {\n      loginButtons.push({\n        id: 'switchToPasswordReset',\n        label: this.translate('forgotPassword'),\n        type: 'link',\n        href: resetPasswordPath,\n        onClick: this.switchToPasswordReset.bind(this)\n      });\n    }\n\n    if (user && ![\n        \"EMAIL_ONLY_NO_PASSWORD\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields())\n      && formState == STATES.PROFILE\n      && (user.services && 'password' in user.services)) {\n      loginButtons.push({\n        id: 'switchToChangePassword',\n        label: this.translate('changePassword'),\n        type: 'link',\n        href: changePasswordPath,\n        onClick: this.switchToChangePassword.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP) {\n      loginButtons.push({\n        id: 'signUp',\n        label: this.translate('signUp'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signUp.bind(this, {}) : null\n      });\n    }\n\n    if (this.showSignInLink()) {\n      loginButtons.push({\n        id: 'signIn',\n        label: this.translate('signIn'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signIn.bind(this) : null\n      });\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'emailResetLink',\n        label: this.translate('resetYourPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordReset.bind(this)\n      });\n    }\n\n    if (this.showPasswordChangeForm() || this.showEnrollAccountForm()) {\n      loginButtons.push({\n        id: 'changePassword',\n        label: (this.showPasswordChangeForm() ? this.translate('changePassword') : this.translate('setPassword')),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordChange.bind(this)\n      });\n\n      if (Accounts.user()) {\n        loginButtons.push({\n          id: 'switchToSignOut',\n          label: this.translate('cancel'),\n          type: 'link',\n          href: profilePath,\n          onClick: this.switchToSignOut.bind(this)\n        });\n      } else {\n        loginButtons.push({\n          id: 'cancelResetPassword',\n          label: this.translate('cancel'),\n          type: 'link',\n          onClick: this.cancelResetPassword.bind(this),\n        });\n      }\n    }\n\n    // Sort the button array so that the submit button always comes first, and\n    // buttons should also come before links.\n    loginButtons.sort((a, b) => {\n      return (\n        b.type == 'submit' &&\n        a.type != undefined) - (\n          a.type == 'submit' &&\n          b.type != undefined);\n    });\n\n    return indexBy(loginButtons, 'id');\n  }\n\n  showSignInLink(){\n    return this.state.formState == STATES.SIGN_IN && Package['accounts-password'];\n  }\n\n  showPasswordChangeForm() {\n    return(Package['accounts-password']\n      && this.state.formState == STATES.PASSWORD_CHANGE);\n  }\n\n  showEnrollAccountForm() {\n    return(Package['accounts-password']\n      && this.state.formState == STATES.ENROLL_ACCOUNT);\n  }\n\n  showCreateAccountLink() {\n    return this.state.formState == STATES.SIGN_IN && !Accounts._options.forbidClientAccountCreation && Package['accounts-password'];\n  }\n\n  showForgotPasswordLink() {\n    return !this.props.user\n      && this.state.formState == STATES.SIGN_IN\n      && [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"].includes(passwordSignupFields());\n  }\n\n  /**\n   * Helper to store field values while using the form.\n   */\n  setDefaultFieldValues(defaults) {\n    if (typeof defaults !== 'object') {\n      throw new Error('Argument to setDefaultFieldValues is not of type object');\n    } else if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.setItem('accounts_ui', JSON.stringify({\n        passwordSignupFields: passwordSignupFields(),\n        ...this.getDefaultFieldValues(),\n        ...defaults,\n      }));\n    }\n  }\n\n  /**\n   * Helper to get field values when switching states in the form.\n   */\n  getDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      const defaultFieldValues = JSON.parse(localStorage.getItem('accounts_ui') || null);\n      if (defaultFieldValues\n        && defaultFieldValues.passwordSignupFields === passwordSignupFields()) {\n        return defaultFieldValues;\n      }\n    }\n  }\n\n  /**\n   * Helper to clear field values when signing in, up or out.\n   */\n  clearDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.removeItem('accounts_ui');\n    }\n  }\n\n  switchToSignUp(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.SIGN_UP,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToSignIn(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.SIGN_IN,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToPasswordReset(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PASSWORD_RESET,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToChangePassword(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PASSWORD_CHANGE,\n      ...this.getDefaultFieldValues(),\n    });\n    this.clearMessages();\n  }\n\n  switchToSignOut(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PROFILE,\n    });\n    this.clearMessages();\n  }\n\n  cancelResetPassword(event) {\n    event.preventDefault();\n    Accounts._loginButtonsSession.set('resetPasswordToken', null);\n    this.setState({\n      formState: STATES.SIGN_IN,\n      messages: [],\n    });\n  }\n\n  signOut() {\n    Meteor.logout(() => {\n      this.setState({\n        formState: STATES.SIGN_IN,\n        password: null,\n      });\n      this.state.onSignedOutHook();\n      this.clearMessages();\n      this.clearDefaultFieldValues();\n    });\n  }\n\n  signIn() {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    let loginSelector;\n    this.clearMessages();\n\n    if (usernameOrEmail !== null) {\n      if (!this.validateField('username', usernameOrEmail)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      }\n      else {\n        if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          return;\n        } else {\n          loginSelector = usernameOrEmail;\n        }\n      }\n    } else if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      }\n      else {\n        loginSelector = { username: username };\n      }\n    }\n    else if (usernameOrEmail == null) {\n      if (!this.validateField('email', email)) {\n        error = true;\n      }\n      else {\n        if ([\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          error = true;\n        } else {\n          loginSelector = { email };\n        }\n      }\n    }\n    if (![\"EMAIL_ONLY_NO_PASSWORD\"].includes(passwordSignupFields())\n      && !this.validateField('password', password)) {\n      error = true;\n    }\n\n    if (!error) {\n      Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n        onSubmitHook(error,formState);\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          loginResultCallback(() => this.state.onSignedInHook());\n          this.setState({\n            formState: STATES.PROFILE,\n            password: null,\n          });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  oauthButtons() {\n    const { formState, waiting } = this.state;\n    let oauthButtons = [];\n    if (formState == STATES.SIGN_IN || formState == STATES.SIGN_UP ) {\n      if(Accounts.oauth) {\n        Accounts.oauth.serviceNames().map((service) => {\n          oauthButtons.push({\n            id: service,\n            label: capitalize(service),\n            disabled: waiting,\n            type: 'button',\n            className: `btn-${service} ${service}`,\n            onClick: this.oauthSignIn.bind(this, service)\n          });\n        });\n      }\n    }\n    return indexBy(oauthButtons, 'id');\n  }\n\n  oauthSignIn(serviceName) {\n    const { user } = this.props;\n    const { formState, waiting, onSubmitHook } = this.state;\n    //Thanks Josh Owens for this one.\n    function capitalService() {\n      return serviceName.charAt(0).toUpperCase() + serviceName.slice(1);\n    }\n\n    if(serviceName === 'meteor-developer'){\n      serviceName = 'meteorDeveloperAccount';\n    }\n\n    const loginWithService = Meteor[\"loginWith\" + capitalService()];\n\n    let options = {}; // use default scope unless specified\n    if (Accounts.ui._options.requestPermissions[serviceName])\n      options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName])\n      options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName])\n      options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n\n    this.clearMessages();\n    const self = this\n    loginWithService(options, (error) => {\n      onSubmitHook(error,formState);\n      if (error) {\n        this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\");\n      } else {\n        this.setState({ formState: STATES.PROFILE });\n        this.clearDefaultFieldValues();\n        loginResultCallback(() => {\n          Meteor.setTimeout(() => this.state.onSignedInHook(), 100);\n        });\n      }\n    });\n\n  }\n\n  signUp(options = {}) {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    this.clearMessages();\n\n    if (username !== null) {\n      if ( !this.validateField('username', username) ) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      } else {\n        options.username = username;\n      }\n    } else {\n      if ([\n        \"USERNAME_AND_EMAIL\",\n        \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n      ].includes(passwordSignupFields()) && !this.validateField('username', username) ) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\"error.accounts.usernameRequired\", this.state.formState);\n        }\n        error = true;\n      }\n    }\n\n    if (!this.validateField('email', email)){\n      error = true;\n    } else {\n      options.email = email;\n    }\n\n    if ([\n      \"EMAIL_ONLY_NO_PASSWORD\",\n      \"USERNAME_AND_EMAIL_NO_PASSWORD\"\n    ].includes(passwordSignupFields())) {\n      // Generate a random password.\n      options.password = Meteor.uuid();\n    } else if (!this.validateField('password', password)) {\n      onSubmitHook(\"Invalid password\", formState);\n      error = true;\n    } else {\n      options.password = password;\n    }\n\n    const SignUp = function(_options) {\n      Accounts.createUser(_options, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          if (this.translate(`error.accounts.${error.reason}`)) {\n            onSubmitHook(`error.accounts.${error.reason}`, formState);\n          }\n          else {\n            onSubmitHook(\"unknown_error\", formState);\n          }\n        }\n        else {\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE, password: null });\n          let user = Accounts.user();\n          loginResultCallback(this.state.onPostSignUpHook.bind(this, _options, user));\n          this.clearDefaultFieldValues();\n        }\n\n        this.setState({ waiting: false });\n      });\n    };\n\n    if (!error) {\n      this.setState({ waiting: true });\n      // Allow for Promises to return.\n      let promise = this.state.onPreSignUpHook(options);\n      if (promise instanceof Promise) {\n        promise.then(SignUp.bind(this, options));\n      }\n      else {\n        SignUp(options);\n      }\n    }\n  }\n\n  loginWithoutPassword(){\n    const {\n      email = '',\n      usernameOrEmail = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    if (this.validateField('email', email)) {\n      this.setState({ waiting: true });\n\n      Accounts.loginWithoutPassword({ email: email }, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    } else if (this.validateField('username', usernameOrEmail)) {\n      this.setState({ waiting: true });\n\n      Accounts.loginWithoutPassword({ email: usernameOrEmail, username: usernameOrEmail }, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    } else {\n      let errMsg = null;\n      if ([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(passwordSignupFields())) {\n        errMsg = this.translate(\"error.accounts.invalid_email\");\n      }\n      else {\n        errMsg = this.translate(\"error.accounts.invalid_email\");\n      }\n      this.showMessage(errMsg,'warning');\n      onSubmitHook(errMsg, formState);\n    }\n  }\n\n  passwordReset() {\n    const {\n      email = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    this.clearMessages();\n    if (this.validateField('email', email)) {\n      this.setState({ waiting: true });\n\n      Accounts.forgotPassword({ email: email }, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n        }\n        else {\n          this.showMessage(this.translate(\"info.emailSent\"), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    }\n  }\n\n  passwordChange() {\n    const {\n      password,\n      newPassword,\n      formState,\n      onSubmitHook,\n      onSignedInHook,\n    } = this.state;\n\n    if (!this.validateField('password', newPassword)){\n      onSubmitHook('err.minChar',formState);\n      return;\n    }\n\n    let token = Accounts._loginButtonsSession.get('resetPasswordToken');\n    if (!token) {\n      token = Accounts._loginButtonsSession.get('enrollAccountToken');\n    }\n    if (token) {\n      Accounts.resetPassword(token, newPassword, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          onSubmitHook(error, formState);\n        }\n        else {\n          this.showMessage(this.translate('info.passwordChanged'), 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE });\n          Accounts._loginButtonsSession.set('resetPasswordToken', null);\n          Accounts._loginButtonsSession.set('enrollAccountToken', null);\n          onSignedInHook();\n        }\n      });\n    }\n    else {\n      Accounts.changePassword(password, newPassword, (error) => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || \"unknown_error\", 'error');\n          onSubmitHook(error, formState);\n        }\n        else {\n          this.showMessage('info.passwordChanged', 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  showMessage(message, type, clearTimeout, field){\n    message = this.translate(message).trim();\n    if (message) {\n      this.setState(({ messages = [] }) => {\n        messages.push({\n          message,\n          type,\n          ...(field && { field }),\n        });\n        return  { messages };\n      });\n      if (clearTimeout) {\n        this.hideMessageTimout = setTimeout(() => {\n          // Filter out the message that timed out.\n          this.clearMessage(message);\n        }, clearTimeout);\n      }\n    }\n  }\n\n  getMessageForField(field) {\n    const { messages = [] } = this.state;\n    return messages.find(({ field:key }) => key === field);\n  }\n\n  clearMessage(message) {\n    if (message) {\n      this.setState(({ messages = [] }) => ({\n        messages: messages.filter(({ message:a }) => a !== message),\n      }));\n    }\n  }\n\n  clearMessages() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n    this.setState({ messages: [] });\n  }\n\n  componentWillMount() {\n    // XXX Check for backwards compatibility.\n    if (Meteor.isClient) {\n      const container = document.createElement('div');\n      ReactDOM.render(<Accounts.ui.Field message=\"test\" />, container);\n      if (container.getElementsByClassName('message').length == 0) {\n        // Found backwards compatibility issue with 1.3.x\n        console.warn(`Implementations of Accounts.ui.Field must render message in v1.2.11.\n          https://github.com/studiointeract/accounts-ui/#deprecations`);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n  }\n\n  render() {\n    this.oauthButtons();\n    // Backwords compatibility with v1.2.x.\n    const { messages = [] } = this.state;\n    const message = {\n      deprecated: true,\n      message: messages.map(({ message }) => message).join(', '),\n    };\n    return (\n      <Accounts.ui.Form\n        oauthServices={this.oauthButtons()}\n        fields={this.fields()} \n        buttons={this.buttons()}\n        {...this.state}\n        message={message}\n        translate={text => this.translate(text)}\n      />\n    );\n  }\n}\nLoginForm.propTypes = {\n  formState: PropTypes.symbol,\n  loginPath: PropTypes.string,\n  signUpPath: PropTypes.string,\n  resetPasswordPath: PropTypes.string,\n  profilePath: PropTypes.string,\n  changePasswordPath: PropTypes.string,\n};\nLoginForm.defaultProps = {\n  formState: null,\n  loginPath: null,\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: null,\n  changePasswordPath: null,\n};\n\nAccounts.ui.LoginForm = LoginForm;\n\nexport default createContainer(() => {\n  // Listen for the user to login/logout and the services list to the user.\n  Meteor.subscribe('servicesList');\n  return ({\n    user: Accounts.user(),\n  });\n}, LoginForm);\n"]},"hash":"5513f7197ddf06bda989767434c81843030e6471"}

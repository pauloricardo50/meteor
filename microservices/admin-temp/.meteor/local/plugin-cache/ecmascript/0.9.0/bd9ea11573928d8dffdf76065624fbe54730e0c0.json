{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"../api","imported":["Borrowers","Loans","Offers","Properties","Tasks","Users","SecurityService"],"specifiers":[{"kind":"named","imported":"Borrowers","local":"Borrowers"},{"kind":"named","imported":"Loans","local":"Loans"},{"kind":"named","imported":"Offers","local":"Offers"},{"kind":"named","imported":"Properties","local":"Properties"},{"kind":"named","imported":"Tasks","local":"Tasks"},{"kind":"named","imported":"Users","local":"Users"},{"kind":"named","imported":"SecurityService","local":"SecurityService"}]},{"source":"../api/users/UserService","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"UserService"}]},{"source":"../api/tasks/TaskService","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TaskService"}]},{"source":"../api/tasks/tasksConstants","imported":["TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]},{"source":"./config","imported":["USER_COUNT","ADMIN_COUNT","MAX_LOANS_PER_USER"],"specifiers":[{"kind":"named","imported":"USER_COUNT","local":"USER_COUNT"},{"kind":"named","imported":"ADMIN_COUNT","local":"ADMIN_COUNT"},{"kind":"named","imported":"MAX_LOANS_PER_USER","local":"MAX_LOANS_PER_USER"}]},{"source":"./loans","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createFakeLoan"}]},{"source":"./tasks","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createFakeTask"}]},{"source":"./users","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createFakeUsers"}]},{"source":"./offers","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createFakeOffer"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/fixtures/methods.js","filenameRelative":"imports/core/fixtures/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/fixtures/methods.js.map","sourceFileName":"imports/core/fixtures/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"\"use strict\";\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function () {\n    function Meteor(v) {\n      _Meteor = v;\n    }\n\n    return Meteor;\n  }()\n}, 0);\n\nvar _check = void 0;\n\nmodule.watch(require(\"meteor/check\"), {\n  check: function () {\n    function check(v) {\n      _check = v;\n    }\n\n    return check;\n  }()\n}, 1);\n\nvar _Borrowers = void 0,\n    _Loans = void 0,\n    _Offers = void 0,\n    _Properties = void 0,\n    _Tasks = void 0,\n    _Users = void 0,\n    _SecurityService = void 0;\n\nmodule.watch(require(\"../api\"), {\n  Borrowers: function () {\n    function Borrowers(v) {\n      _Borrowers = v;\n    }\n\n    return Borrowers;\n  }(),\n  Loans: function () {\n    function Loans(v) {\n      _Loans = v;\n    }\n\n    return Loans;\n  }(),\n  Offers: function () {\n    function Offers(v) {\n      _Offers = v;\n    }\n\n    return Offers;\n  }(),\n  Properties: function () {\n    function Properties(v) {\n      _Properties = v;\n    }\n\n    return Properties;\n  }(),\n  Tasks: function () {\n    function Tasks(v) {\n      _Tasks = v;\n    }\n\n    return Tasks;\n  }(),\n  Users: function () {\n    function Users(v) {\n      _Users = v;\n    }\n\n    return Users;\n  }(),\n  SecurityService: function () {\n    function SecurityService(v) {\n      _SecurityService = v;\n    }\n\n    return SecurityService;\n  }()\n}, 2);\nvar UserService = void 0;\nmodule.watch(require(\"../api/users/UserService\"), {\n  \"default\": function () {\n    function _default(v) {\n      UserService = v;\n    }\n\n    return _default;\n  }()\n}, 3);\nvar TaskService = void 0;\nmodule.watch(require(\"../api/tasks/TaskService\"), {\n  \"default\": function () {\n    function _default(v) {\n      TaskService = v;\n    }\n\n    return _default;\n  }()\n}, 4);\n\nvar _TASK_TYPE = void 0;\n\nmodule.watch(require(\"../api/tasks/tasksConstants\"), {\n  TASK_TYPE: function () {\n    function TASK_TYPE(v) {\n      _TASK_TYPE = v;\n    }\n\n    return TASK_TYPE;\n  }()\n}, 5);\n\nvar _USER_COUNT = void 0,\n    _ADMIN_COUNT = void 0,\n    _MAX_LOANS_PER_USER = void 0;\n\nmodule.watch(require(\"./config\"), {\n  USER_COUNT: function () {\n    function USER_COUNT(v) {\n      _USER_COUNT = v;\n    }\n\n    return USER_COUNT;\n  }(),\n  ADMIN_COUNT: function () {\n    function ADMIN_COUNT(v) {\n      _ADMIN_COUNT = v;\n    }\n\n    return ADMIN_COUNT;\n  }(),\n  MAX_LOANS_PER_USER: function () {\n    function MAX_LOANS_PER_USER(v) {\n      _MAX_LOANS_PER_USER = v;\n    }\n\n    return MAX_LOANS_PER_USER;\n  }()\n}, 6);\nvar createFakeLoan = void 0;\nmodule.watch(require(\"./loans\"), {\n  \"default\": function () {\n    function _default(v) {\n      createFakeLoan = v;\n    }\n\n    return _default;\n  }()\n}, 7);\nvar createFakeTask = void 0;\nmodule.watch(require(\"./tasks\"), {\n  \"default\": function () {\n    function _default(v) {\n      createFakeTask = v;\n    }\n\n    return _default;\n  }()\n}, 8);\nvar createFakeUsers = void 0;\nmodule.watch(require(\"./users\"), {\n  \"default\": function () {\n    function _default(v) {\n      createFakeUsers = v;\n    }\n\n    return _default;\n  }()\n}, 9);\nvar createFakeOffer = void 0;\nmodule.watch(require(\"./offers\"), {\n  \"default\": function () {\n    function _default(v) {\n      createFakeOffer = v;\n    }\n\n    return _default;\n  }()\n}, 10);\n\nvar generateNumberOfLoans = function () {\n  function generateNumberOfLoans(max) {\n    return Math.floor(Math.random() * max + 1);\n  }\n\n  return generateNumberOfLoans;\n}();\n\nvar getAdmins = function () {\n  function getAdmins() {\n    var admins = _Users.find({\n      roles: {\n        $in: ['admin']\n      }\n    }).fetch();\n\n    if (admins.length === 0) {\n      var newAdmins = createFakeUsers(_ADMIN_COUNT, 'admin');\n      return newAdmins;\n    }\n\n    return admins.map(function (admin) {\n      return admin._id;\n    });\n  }\n\n  return getAdmins;\n}();\n\n_Meteor.methods({\n  generateTestData: function () {\n    function generateTestData() {\n      if (_SecurityService.currentUserHasRole('dev') && !_Meteor.isProduction) {\n        var admins = getAdmins();\n        var newUsers = createFakeUsers(_USER_COUNT, 'user');\n        newUsers.map(function (userId) {\n          var adminId = admins[Math.floor(Math.random() * admins.length)];\n          UserService.assignAdminToUser({\n            userId: userId,\n            adminId: adminId\n          });\n          var numberOfLoans = generateNumberOfLoans(_MAX_LOANS_PER_USER);\n\n          for (var i = 0; i < numberOfLoans; i += 1) {\n            var loanId = createFakeLoan(userId, adminId);\n            createFakeTask(loanId, adminId);\n            createFakeOffer(loanId, userId);\n          }\n\n          return userId;\n        });\n      }\n    }\n\n    return generateTestData;\n  }(),\n  purgeDatabase: function () {\n    function purgeDatabase(currentUserId) {\n      _check(currentUserId, String);\n\n      if (_SecurityService.currentUserHasRole('dev') && !_Meteor.isProduction) {\n        _Borrowers.remove({});\n\n        _Loans.remove({});\n\n        _Offers.remove({});\n\n        _Properties.remove({});\n\n        _Tasks.remove({});\n\n        _Users.remove({\n          _id: {\n            $ne: currentUserId\n          }\n        });\n      }\n    }\n\n    return purgeDatabase;\n  }(),\n  insertBorrowerRelatedTask: function () {\n    function insertBorrowerRelatedTask() {\n      var borrowerId = _Borrowers.findOne({})._id;\n\n      var type = _TASK_TYPE.VERIFY;\n      console.log(borrowerId);\n\n      if (borrowerId) {\n        TaskService.insert({\n          type: type,\n          borrowerId: borrowerId\n        });\n      }\n    }\n\n    return insertBorrowerRelatedTask;\n  }(),\n  insertLoanRelatedTask: function () {\n    function insertLoanRelatedTask() {\n      var loanId = _Loans.findOne({})._id;\n\n      var type = _TASK_TYPE.CUSTOM;\n\n      if (loanId) {\n        TaskService.insert({\n          type: type,\n          loanId: loanId\n        });\n      }\n    }\n\n    return insertLoanRelatedTask;\n  }(),\n  insertPropertyRelatedTask: function () {\n    function insertPropertyRelatedTask() {\n      var propertyId = _Properties.findOne({})._id;\n\n      var type = _TASK_TYPE.CUSTOM;\n\n      if (propertyId) {\n        TaskService.insert({\n          type: type,\n          propertyId: propertyId\n        });\n      }\n    }\n\n    return insertPropertyRelatedTask;\n  }()\n});","map":{"version":3,"sources":["imports/core/fixtures/methods.js"],"names":["Meteor","module","watch","require","v","check","Borrowers","Loans","Offers","Properties","Tasks","Users","SecurityService","UserService","TaskService","TASK_TYPE","USER_COUNT","ADMIN_COUNT","MAX_LOANS_PER_USER","createFakeLoan","createFakeTask","createFakeUsers","createFakeOffer","generateNumberOfLoans","Math","floor","random","max","getAdmins","admins","find","roles","$in","fetch","length","newAdmins","map","admin","_id","methods","generateTestData","currentUserHasRole","isProduction","newUsers","userId","adminId","assignAdminToUser","numberOfLoans","i","loanId","purgeDatabase","currentUserId","String","remove","$ne","insertBorrowerRelatedTask","borrowerId","findOne","type","VERIFY","console","log","insert","insertLoanRelatedTask","CUSTOM","insertPropertyRelatedTask","propertyId"],"mappings":"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","file":"imports/core/fixtures/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport {\n  Borrowers,\n  Loans,\n  Offers,\n  Properties,\n  Tasks,\n  Users,\n  SecurityService,\n} from 'core/api';\nimport UserService from 'core/api/users/UserService';\nimport TaskService from 'core/api/tasks/TaskService';\nimport { TASK_TYPE } from 'core/api/tasks/tasksConstants';\nimport { USER_COUNT, ADMIN_COUNT, MAX_LOANS_PER_USER } from './config';\nimport createFakeLoan from './loans';\nimport createFakeTask from './tasks';\nimport createFakeUsers from './users';\nimport createFakeOffer from './offers';\n\nconst generateNumberOfLoans = max => Math.floor(Math.random() * max + 1);\n\nconst getAdmins = () => {\n  const admins = Users.find({ roles: { $in: ['admin'] } }).fetch();\n  if (admins.length === 0) {\n    const newAdmins = createFakeUsers(ADMIN_COUNT, 'admin');\n    return newAdmins;\n  }\n  return admins.map(admin => admin._id);\n};\n\nMeteor.methods({\n  generateTestData() {\n    if (SecurityService.currentUserHasRole('dev') && !Meteor.isProduction) {\n      const admins = getAdmins();\n      const newUsers = createFakeUsers(USER_COUNT, 'user');\n      newUsers.map((userId) => {\n        const adminId = admins[Math.floor(Math.random() * admins.length)];\n        UserService.assignAdminToUser({ userId, adminId });\n        const numberOfLoans = generateNumberOfLoans(MAX_LOANS_PER_USER);\n        for (let i = 0; i < numberOfLoans; i += 1) {\n          const loanId = createFakeLoan(userId, adminId);\n          createFakeTask(loanId, adminId);\n          createFakeOffer(loanId, userId);\n        }\n        return userId;\n      });\n    }\n  },\n\n  purgeDatabase(currentUserId) {\n    check(currentUserId, String);\n    if (SecurityService.currentUserHasRole('dev') && !Meteor.isProduction) {\n      Borrowers.remove({});\n      Loans.remove({});\n      Offers.remove({});\n      Properties.remove({});\n      Tasks.remove({});\n      Users.remove({ _id: { $ne: currentUserId } });\n    }\n  },\n\n  insertBorrowerRelatedTask() {\n    const borrowerId = Borrowers.findOne({})._id;\n    const type = TASK_TYPE.VERIFY;\n    console.log(borrowerId);\n    if (borrowerId) {\n      TaskService.insert({ type, borrowerId });\n    }\n  },\n\n  insertLoanRelatedTask() {\n    const loanId = Loans.findOne({})._id;\n    const type = TASK_TYPE.CUSTOM;\n    if (loanId) {\n      TaskService.insert({ type, loanId });\n    }\n  },\n\n  insertPropertyRelatedTask() {\n    const propertyId = Properties.findOne({})._id;\n    const type = TASK_TYPE.CUSTOM;\n    if (propertyId) {\n      TaskService.insert({ type, propertyId });\n    }\n  },\n});\n"]},"hash":"bd9ea11573928d8dffdf76065624fbe54730e0c0"}

{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../","imported":["Tasks"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"../tasks/queries/unassignedTasks","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"unassignedTasksQuery"}]},{"source":"../borrowers/queries/borrowerAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"borrowerAssignedToQuery"}]},{"source":"../loans/queries/loanAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"loanAssignedToQuery"}]},{"source":"../properties/queries/propertyAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"propertyAssignedToQuery"}]},{"source":"./tasksConstants","imported":["TASK_STATUS","TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"},{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/tasks/TaskService.js","filenameRelative":"imports/core/api/tasks/TaskService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/tasks/TaskService.js.map","sourceFileName":"imports/core/api/tasks/TaskService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TaskService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function () {\n    function Meteor(v) {\n      _Meteor = v;\n    }\n\n    return Meteor;\n  }()\n}, 0);\n\nvar _Tasks = void 0;\n\nmodule.watch(require(\"../\"), {\n  Tasks: function () {\n    function Tasks(v) {\n      _Tasks = v;\n    }\n\n    return Tasks;\n  }()\n}, 1);\nvar unassignedTasksQuery = void 0;\nmodule.watch(require(\"../tasks/queries/unassignedTasks\"), {\n  \"default\": function () {\n    function _default(v) {\n      unassignedTasksQuery = v;\n    }\n\n    return _default;\n  }()\n}, 2);\nvar borrowerAssignedToQuery = void 0;\nmodule.watch(require(\"../borrowers/queries/borrowerAssignedTo\"), {\n  \"default\": function () {\n    function _default(v) {\n      borrowerAssignedToQuery = v;\n    }\n\n    return _default;\n  }()\n}, 3);\nvar loanAssignedToQuery = void 0;\nmodule.watch(require(\"../loans/queries/loanAssignedTo\"), {\n  \"default\": function () {\n    function _default(v) {\n      loanAssignedToQuery = v;\n    }\n\n    return _default;\n  }()\n}, 4);\nvar propertyAssignedToQuery = void 0;\nmodule.watch(require(\"../properties/queries/propertyAssignedTo\"), {\n  \"default\": function () {\n    function _default(v) {\n      propertyAssignedToQuery = v;\n    }\n\n    return _default;\n  }()\n}, 5);\n\nvar _TASK_STATUS = void 0,\n    _TASK_TYPE = void 0;\n\nmodule.watch(require(\"./tasksConstants\"), {\n  TASK_STATUS: function () {\n    function TASK_STATUS(v) {\n      _TASK_STATUS = v;\n    }\n\n    return TASK_STATUS;\n  }(),\n  TASK_TYPE: function () {\n    function TASK_TYPE(v) {\n      _TASK_TYPE = v;\n    }\n\n    return TASK_TYPE;\n  }()\n}, 6);\n\nvar TaskService = function () {\n  function TaskService() {\n    var _this = this;\n\n    (0, _classCallCheck3.default)(this, TaskService);\n\n    this.insert = function (_ref) {\n      var type = _ref.type,\n          borrowerId = _ref.borrowerId,\n          loanId = _ref.loanId,\n          propertyId = _ref.propertyId,\n          userId = _ref.userId,\n          assignedTo = _ref.assignedTo,\n          createdBy = _ref.createdBy;\n\n      if (type === _TASK_TYPE.ADD_ASSIGNED_TO) {\n        return _Tasks.insert({\n          type: type,\n          userId: userId\n        });\n      }\n\n      var existingTask = _Tasks.findOne({\n        type: type,\n        borrowerId: borrowerId,\n        loanId: loanId,\n        propertyId: propertyId,\n        status: _TASK_STATUS.ACTIVE\n      });\n\n      if (existingTask) {\n        throw new _Meteor.Error('duplicate active task');\n      }\n\n      var relatedAssignedTo = assignedTo;\n\n      if (!relatedAssignedTo) {\n        // some tasks may not be related to any doc,\n        // in that case no need for assignedTo field\n        if (borrowerId || loanId || propertyId) {\n          relatedAssignedTo = _this.getRelatedDocAssignedTo({\n            borrowerId: borrowerId,\n            loanId: loanId,\n            propertyId: propertyId\n          });\n        }\n      }\n\n      return _Tasks.insert({\n        type: type,\n        assignedTo: relatedAssignedTo,\n        createdBy: createdBy,\n        borrowerId: borrowerId,\n        loanId: loanId,\n        propertyId: propertyId\n      });\n    };\n\n    this.getRelatedDocAssignedTo = function (_ref2) {\n      var borrowerId = _ref2.borrowerId,\n          loanId = _ref2.loanId,\n          propertyId = _ref2.propertyId;\n\n      if (loanId) {\n        var loans = loanAssignedToQuery.clone({\n          loanId: loanId\n        }).fetchOne();\n        return loans.user.assignedTo;\n      }\n\n      if (borrowerId) {\n        var borrowers = borrowerAssignedToQuery.clone({\n          borrowerId: borrowerId\n        }).fetchOne();\n        return borrowers.user.assignedTo;\n      }\n\n      if (propertyId) {\n        var properties = propertyAssignedToQuery.clone({\n          propertyId: propertyId\n        }).fetchOne();\n        return properties.user.assignedTo;\n      }\n\n      return undefined;\n    };\n\n    this.remove = function (_ref3) {\n      var taskId = _ref3.taskId;\n      return _Tasks.remove(taskId);\n    };\n\n    this.update = function (_ref4) {\n      var taskId = _ref4.taskId,\n          task = _ref4.task;\n      return _Tasks.update(taskId, {\n        $set: task\n      });\n    };\n\n    this.complete = function (_ref5) {\n      var taskId = _ref5.taskId;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          status: _TASK_STATUS.COMPLETED,\n          completedAt: new Date()\n        }\n      });\n    };\n\n    this.completeByType = function (_ref6) {\n      var type = _ref6.type,\n          loanId = _ref6.loanId,\n          newStatus = _ref6.newStatus;\n\n      var taskToComplete = _Tasks.findOne({\n        loanId: loanId,\n        type: type,\n        status: _TASK_STATUS.ACTIVE\n      });\n\n      if (!taskToComplete) {\n        throw new _Meteor.Error(\"task couldn't be found\");\n      }\n\n      return _this.update({\n        taskId: taskToComplete._id,\n        task: {\n          status: newStatus || _TASK_STATUS.COMPLETED,\n          completedAt: new Date()\n        }\n      });\n    };\n\n    this.changeStatus = function (_ref7) {\n      var taskId = _ref7.taskId,\n          newStatus = _ref7.newStatus;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          status: newStatus\n        }\n      });\n    };\n\n    this.changeAssignedTo = function (_ref8) {\n      var taskId = _ref8.taskId,\n          newAssignee = _ref8.newAssignee;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          assignedTo: newAssignee\n        }\n      });\n    };\n\n    this.isRelatedToUser = function (_ref9) {\n      var task = _ref9.task,\n          userId = _ref9.userId;\n\n      if (task.userId === userId) {\n        return true;\n      }\n\n      if (task.borrower && task.borrower.borrowerAssignee === userId) {\n        return true;\n      }\n\n      if (task.loan && task.loan.user._id === userId) {\n        return true;\n      }\n\n      if (task.property && task.property.propertyAssignee === userId) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.getRelatedTo = function (_ref10) {\n      var task = _ref10.task;\n\n      if (task.borrower) {\n        return task.borrower.user._id;\n      }\n\n      if (task.loan) {\n        return task.loan.user._id;\n      }\n\n      if (task.property) {\n        return task.property.user._id;\n      }\n\n      return undefined;\n    };\n\n    this.assignAllTasksToAdmin = function (_ref11) {\n      var userId = _ref11.userId,\n          newAssignee = _ref11.newAssignee;\n      var unassignedTasks = unassignedTasksQuery.fetch();\n      unassignedTasks.map(function (task) {\n        var isRelatedToUser = _this.isRelatedToUser({\n          task: task,\n          userId: userId\n        });\n\n        if (isRelatedToUser) {\n          var taskId = task._id;\n\n          _this.update({\n            taskId: taskId,\n            task: {\n              assignedTo: newAssignee\n            }\n          });\n        }\n\n        return task;\n      });\n    };\n  }\n\n  return TaskService;\n}();\n\nmodule.exportDefault(new TaskService());","map":{"version":3,"sources":["imports/core/api/tasks/TaskService.js"],"names":["Meteor","module","watch","require","v","Tasks","unassignedTasksQuery","borrowerAssignedToQuery","loanAssignedToQuery","propertyAssignedToQuery","TASK_STATUS","TASK_TYPE","TaskService","insert","type","borrowerId","loanId","propertyId","userId","assignedTo","createdBy","ADD_ASSIGNED_TO","existingTask","findOne","status","ACTIVE","Error","relatedAssignedTo","getRelatedDocAssignedTo","loans","clone","fetchOne","user","borrowers","properties","undefined","remove","taskId","update","task","$set","complete","COMPLETED","completedAt","Date","completeByType","newStatus","taskToComplete","_id","changeStatus","changeAssignedTo","newAssignee","isRelatedToUser","borrower","borrowerAssignee","loan","property","propertyAssignee","getRelatedTo","assignAllTasksToAdmin","unassignedTasks","fetch","map","exportDefault"],"mappings":"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","file":"imports/core/api/tasks/TaskService.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Tasks } from '../';\nimport unassignedTasksQuery from '../tasks/queries/unassignedTasks';\nimport borrowerAssignedToQuery from '../borrowers/queries/borrowerAssignedTo';\nimport loanAssignedToQuery from '../loans/queries/loanAssignedTo';\nimport propertyAssignedToQuery from '../properties/queries/propertyAssignedTo';\nimport { TASK_STATUS, TASK_TYPE } from './tasksConstants';\n\nclass TaskService {\n  insert = ({\n    type,\n    borrowerId,\n    loanId,\n    propertyId,\n    userId,\n    assignedTo,\n    createdBy,\n  }) => {\n    if (type === TASK_TYPE.ADD_ASSIGNED_TO) {\n      return Tasks.insert({\n        type,\n        userId,\n      });\n    }\n    const existingTask = Tasks.findOne({\n      type,\n      borrowerId,\n      loanId,\n      propertyId,\n      status: TASK_STATUS.ACTIVE,\n    });\n    if (existingTask) {\n      throw new Meteor.Error('duplicate active task');\n    }\n\n    let relatedAssignedTo = assignedTo;\n    if (!relatedAssignedTo) {\n      // some tasks may not be related to any doc,\n      // in that case no need for assignedTo field\n      if (borrowerId || loanId || propertyId) {\n        relatedAssignedTo = this.getRelatedDocAssignedTo({\n          borrowerId,\n          loanId,\n          propertyId,\n        });\n      }\n    }\n\n    return Tasks.insert({\n      type,\n      assignedTo: relatedAssignedTo,\n      createdBy,\n      borrowerId,\n      loanId,\n      propertyId,\n    });\n  };\n\n  getRelatedDocAssignedTo = ({ borrowerId, loanId, propertyId }) => {\n    if (loanId) {\n      const loans = loanAssignedToQuery.clone({ loanId }).fetchOne();\n      return loans.user.assignedTo;\n    }\n    if (borrowerId) {\n      const borrowers = borrowerAssignedToQuery\n        .clone({ borrowerId })\n        .fetchOne();\n      return borrowers.user.assignedTo;\n    }\n    if (propertyId) {\n      const properties = propertyAssignedToQuery\n        .clone({ propertyId })\n        .fetchOne();\n      return properties.user.assignedTo;\n    }\n    return undefined;\n  };\n\n  remove = ({ taskId }) => Tasks.remove(taskId);\n\n  update = ({ taskId, task }) => Tasks.update(taskId, { $set: task });\n\n  complete = ({ taskId }) =>\n    this.update({\n      taskId,\n      task: {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n\n  completeByType = ({ type, loanId, newStatus }) => {\n    const taskToComplete = Tasks.findOne({\n      loanId,\n      type,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (!taskToComplete) {\n      throw new Meteor.Error(\"task couldn't be found\");\n    }\n\n    return this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n  };\n\n  changeStatus = ({ taskId, newStatus }) =>\n    this.update({ taskId, task: { status: newStatus } });\n\n  changeAssignedTo = ({ taskId, newAssignee }) =>\n    this.update({\n      taskId,\n      task: { assignedTo: newAssignee },\n    });\n\n  isRelatedToUser = ({ task, userId }) => {\n    if (task.userId === userId) {\n      return true;\n    }\n    if (task.borrower && task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n    if (task.loan && task.loan.user._id === userId) {\n      return true;\n    }\n    if (task.property && task.property.propertyAssignee === userId) {\n      return true;\n    }\n    return false;\n  };\n\n  getRelatedTo = ({ task }) => {\n    if (task.borrower) {\n      return task.borrower.user._id;\n    }\n    if (task.loan) {\n      return task.loan.user._id;\n    }\n    if (task.property) {\n      return task.property.user._id;\n    }\n    return undefined;\n  };\n\n  assignAllTasksToAdmin = ({ userId, newAssignee }) => {\n    const unassignedTasks = unassignedTasksQuery.fetch();\n    unassignedTasks.map((task) => {\n      const isRelatedToUser = this.isRelatedToUser({ task, userId });\n      if (isRelatedToUser) {\n        const taskId = task._id;\n        this.update({\n          taskId,\n          task: { assignedTo: newAssignee },\n        });\n      }\n\n      return task;\n    });\n  };\n}\n\nexport default new TaskService();\n"]},"hash":"70b3c570e60f37e25c899956212cbae4133a46c4"}

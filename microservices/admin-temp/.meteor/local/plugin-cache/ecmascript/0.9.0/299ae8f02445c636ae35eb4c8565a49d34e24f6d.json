{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"sift","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"sift"}]}],"exports":{"exported":["createSearchFilters","object","fieldStorage","strategy","isVirtual","metaFilters","createOne","object","fieldStorage","createOneVirtual","object","fieldStorage","createOneMeta","object","fieldStorage","metaFilters","createOneMetaVirtual","object","fieldStorage","metaFilters","createMany","object","fieldStorage","createManyVirtual","object","fieldStorage","createManyMeta","object","fieldStorage","metaFilters","createManyMetaVirtual","object","fieldStorage","metaFilters"],"specifiers":[{"kind":"local","local":"createSearchFilters","exported":"default"},{"kind":"local","local":"object","exported":"default"},{"kind":"local","local":"fieldStorage","exported":"default"},{"kind":"local","local":"strategy","exported":"default"},{"kind":"local","local":"isVirtual","exported":"default"},{"kind":"local","local":"metaFilters","exported":"default"},{"kind":"local","local":"createOne","exported":"createOne"},{"kind":"local","local":"object","exported":"object"},{"kind":"local","local":"fieldStorage","exported":"fieldStorage"},{"kind":"local","local":"createOneVirtual","exported":"createOneVirtual"},{"kind":"local","local":"object","exported":"object"},{"kind":"local","local":"fieldStorage","exported":"fieldStorage"},{"kind":"local","local":"createOneMeta","exported":"createOneMeta"},{"kind":"local","local":"object","exported":"object"},{"kind":"local","local":"fieldStorage","exported":"fieldStorage"},{"kind":"local","local":"metaFilters","exported":"metaFilters"},{"kind":"local","local":"createOneMetaVirtual","exported":"createOneMetaVirtual"},{"kind":"local","local":"object","exported":"object"},{"kind":"local","local":"fieldStorage","exported":"fieldStorage"},{"kind":"local","local":"metaFilters","exported":"metaFilters"},{"kind":"local","local":"createMany","exported":"createMany"},{"kind":"local","local":"object","exported":"object"},{"kind":"local","local":"fieldStorage","exported":"fieldStorage"},{"kind":"local","local":"createManyVirtual","exported":"createManyVirtual"},{"kind":"local","local":"object","exported":"object"},{"kind":"local","local":"fieldStorage","exported":"fieldStorage"},{"kind":"local","local":"createManyMeta","exported":"createManyMeta"},{"kind":"local","local":"object","exported":"object"},{"kind":"local","local":"fieldStorage","exported":"fieldStorage"},{"kind":"local","local":"metaFilters","exported":"metaFilters"},{"kind":"local","local":"createManyMetaVirtual","exported":"createManyMetaVirtual"},{"kind":"local","local":"object","exported":"object"},{"kind":"local","local":"fieldStorage","exported":"fieldStorage"},{"kind":"local","local":"metaFilters","exported":"metaFilters"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/lib/createSearchFilters.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/lib/createSearchFilters.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/lib/createSearchFilters.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/lib/createSearchFilters.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"createSearchFilters"},"ignored":false,"code":"module.export({\n    \"default\": function () {\n        return createSearchFilters;\n    },\n    createOne: function () {\n        return createOne;\n    },\n    createOneVirtual: function () {\n        return createOneVirtual;\n    },\n    createOneMeta: function () {\n        return createOneMeta;\n    },\n    createOneMetaVirtual: function () {\n        return createOneMetaVirtual;\n    },\n    createMany: function () {\n        return createMany;\n    },\n    createManyVirtual: function () {\n        return createManyVirtual;\n    },\n    createManyMeta: function () {\n        return createManyMeta;\n    },\n    createManyMetaVirtual: function () {\n        return createManyMetaVirtual;\n    }\n});\nvar sift = void 0;\nmodule.watch(require(\"sift\"), {\n    \"default\": function (v) {\n        sift = v;\n    }\n}, 0);\n\nfunction createSearchFilters(object, fieldStorage, strategy, isVirtual, metaFilters) {\n    if (!isVirtual) {\n        switch (strategy) {\n            case 'one':\n                return createOne(object, fieldStorage);\n\n            case 'one-meta':\n                return createOneMeta(object, fieldStorage, metaFilters);\n\n            case 'many':\n                return createMany(object, fieldStorage);\n\n            case 'many-meta':\n                return createManyMeta(object, fieldStorage, metaFilters);\n\n            default:\n                throw new Meteor.Error(\"Invalid linking strategy: \" + strategy);\n        }\n    } else {\n        switch (strategy) {\n            case 'one':\n                return createOneVirtual(object, fieldStorage);\n\n            case 'one-meta':\n                return createOneMetaVirtual(object, fieldStorage, metaFilters);\n\n            case 'many':\n                return createManyVirtual(object, fieldStorage);\n\n            case 'many-meta':\n                return createManyMetaVirtual(object, fieldStorage, metaFilters);\n\n            default:\n                throw new Meteor.Error(\"Invalid linking strategy: \" + strategy);\n        }\n    }\n}\n\nfunction createOne(object, fieldStorage) {\n    return {\n        _id: object[fieldStorage]\n    };\n}\n\nfunction createOneVirtual(object, fieldStorage) {\n    var _ref;\n\n    return _ref = {}, _ref[fieldStorage] = object._id, _ref;\n}\n\nfunction createOneMeta(object, fieldStorage, metaFilters) {\n    var value = object[fieldStorage];\n\n    if (metaFilters) {\n        if (!sift(metaFilters)(value)) {\n            return {\n                _id: undefined\n            };\n        }\n    }\n\n    return {\n        _id: value ? value._id : value\n    };\n}\n\nfunction createOneMetaVirtual(object, fieldStorage, metaFilters) {\n    var filters = {};\n\n    if (metaFilters) {\n        _.each(metaFilters, function (value, key) {\n            filters[fieldStorage + '.' + key] = value;\n        });\n    }\n\n    filters[fieldStorage + '._id'] = object._id;\n    return filters;\n}\n\nfunction createMany(object, fieldStorage) {\n    return {\n        _id: {\n            $in: object[fieldStorage] || []\n        }\n    };\n}\n\nfunction createManyVirtual(object, fieldStorage) {\n    var _ref2;\n\n    return _ref2 = {}, _ref2[fieldStorage] = object._id, _ref2;\n}\n\nfunction createManyMeta(object, fieldStorage, metaFilters) {\n    var value = object[fieldStorage];\n\n    if (metaFilters) {\n        value = sift(metaFilters, value);\n    }\n\n    return {\n        _id: {\n            $in: _.pluck(value, '_id') || []\n        }\n    };\n}\n\nfunction createManyMetaVirtual(object, fieldStorage, metaFilters) {\n    var _ref3;\n\n    var filters = {};\n\n    if (metaFilters) {\n        _.each(metaFilters, function (value, key) {\n            filters[key] = value;\n        });\n    }\n\n    filters._id = object._id;\n    return _ref3 = {}, _ref3[fieldStorage] = {\n        $elemMatch: filters\n    }, _ref3;\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/lib/createSearchFilters.js"],"names":["module","export","createSearchFilters","createOne","createOneVirtual","createOneMeta","createOneMetaVirtual","createMany","createManyVirtual","createManyMeta","createManyMetaVirtual","sift","watch","require","v","object","fieldStorage","strategy","isVirtual","metaFilters","Meteor","Error","_id","value","undefined","filters","_","each","key","$in","pluck","$elemMatch"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/links/lib/createSearchFilters.js.map","sourcesContent":["import sift from 'sift';\n\nexport default function createSearchFilters(object, fieldStorage, strategy, isVirtual, metaFilters) {\n    if (!isVirtual) {\n        switch (strategy) {\n            case 'one': return createOne(object, fieldStorage);\n            case 'one-meta': return createOneMeta(object, fieldStorage, metaFilters);\n            case 'many': return createMany(object, fieldStorage);\n            case 'many-meta': return createManyMeta(object, fieldStorage, metaFilters);\n            default:\n                throw new Meteor.Error(`Invalid linking strategy: ${strategy}`)\n        }\n    } else {\n        switch (strategy) {\n            case 'one': return createOneVirtual(object, fieldStorage);\n            case 'one-meta': return createOneMetaVirtual(object, fieldStorage, metaFilters);\n            case 'many': return createManyVirtual(object, fieldStorage);\n            case 'many-meta': return createManyMetaVirtual(object, fieldStorage, metaFilters);\n            default:\n                throw new Meteor.Error(`Invalid linking strategy: ${strategy}`)\n        }\n    }\n}\n\nexport function createOne(object, fieldStorage) {\n    return {\n        _id: object[fieldStorage]\n    };\n}\n\nexport function createOneVirtual(object, fieldStorage) {\n    return {\n        [fieldStorage]: object._id\n    };\n}\n\nexport function createOneMeta(object, fieldStorage, metaFilters) {\n    const value = object[fieldStorage];\n\n    if (metaFilters) {\n        if (!sift(metaFilters)(value)) {\n            return {_id: undefined};\n        }\n    }\n\n    return {\n        _id: value ? value._id : value\n    };\n}\n\nexport function createOneMetaVirtual(object, fieldStorage, metaFilters) {\n    let filters = {};\n    if (metaFilters) {\n        _.each(metaFilters, (value, key) => {\n            filters[fieldStorage + '.' + key] = value;\n        })\n    }\n\n    filters[fieldStorage + '._id'] = object._id;\n\n    return filters;\n}\n\nexport function createMany(object, fieldStorage) {\n    return {\n        _id: {\n            $in: object[fieldStorage] || []\n        }\n    };\n}\n\nexport function createManyVirtual(object, fieldStorage) {\n    return {\n        [fieldStorage]: object._id\n    };\n}\n\nexport function createManyMeta(object, fieldStorage, metaFilters) {\n    let value = object[fieldStorage];\n\n    if (metaFilters) {\n        value = sift(metaFilters, value)\n    }\n\n    return {\n        _id: {\n            $in: _.pluck(value, '_id') || []\n        }\n    };\n}\n\nexport function createManyMetaVirtual(object, fieldStorage, metaFilters) {\n    let filters = {};\n    if (metaFilters) {\n        _.each(metaFilters, (value, key) => {\n            filters[key] = value;\n        })\n    }\n\n    filters._id = object._id;\n\n    return {\n        [fieldStorage]: {$elemMatch: filters}\n    };\n}"]},"hash":"299ae8f02445c636ae35eb4c8565a49d34e24f6d"}

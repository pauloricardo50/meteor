{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]}],"exports":{"exported":["childCollectionNode","filters","options","userId"],"specifiers":[{"kind":"local","local":"childCollectionNode","exported":"default"},{"kind":"local","local":"filters","exported":"default"},{"kind":"local","local":"options","exported":"default"},{"kind":"local","local":"userId","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/hypernova/buildAggregatePipeline.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/hypernova/buildAggregatePipeline.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/hypernova/buildAggregatePipeline.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/buildAggregatePipeline.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"buildAggregatePipeline"},"ignored":false,"code":"var _ = void 0;\n\nmodule.watch(require(\"meteor/underscore\"), {\n    _: function (v) {\n        _ = v;\n    }\n}, 0);\nmodule.exportDefault(function (childCollectionNode, filters, options, userId) {\n    var containsDottedFields = false;\n    var linker = childCollectionNode.linker;\n    var linkStorageField = linker.linkStorageField;\n    var collection = childCollectionNode.collection;\n    var pipeline = [];\n\n    if (collection.firewall) {\n        collection.firewall(filters, options, userId);\n    }\n\n    pipeline.push({\n        $match: filters\n    });\n\n    if (options.sort && _.keys(options.sort).length > 0) {\n        pipeline.push({\n            $sort: options.sort\n        });\n    }\n\n    var _id = linkStorageField;\n\n    if (linker.isMeta()) {\n        _id += '._id';\n    }\n\n    var dataPush = {\n        _id: '$_id'\n    };\n\n    _.each(options.fields, function (value, field) {\n        if (field.indexOf('.') >= 0) {\n            containsDottedFields = true;\n        }\n\n        var safeField = field.replace('.', '___');\n        dataPush[safeField] = '$' + field;\n    });\n\n    if (linker.isMeta()) {\n        dataPush[linkStorageField] = '$' + linkStorageField;\n    }\n\n    pipeline.push({\n        $group: {\n            _id: \"$\" + _id,\n            data: {\n                $push: dataPush\n            }\n        }\n    });\n\n    if (options.limit || options.skip) {\n        var $slice = [\"$data\"];\n        if (options.skip) $slice.push(options.skip);\n        if (options.limit) $slice.push(options.limit);\n        pipeline.push({\n            $project: {\n                _id: 1,\n                data: {\n                    $slice: $slice\n                }\n            }\n        });\n    }\n\n    return {\n        pipeline: pipeline,\n        containsDottedFields: containsDottedFields\n    };\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/hypernova/buildAggregatePipeline.js"],"names":["_","module","watch","require","v","exportDefault","childCollectionNode","filters","options","userId","containsDottedFields","linker","linkStorageField","collection","pipeline","firewall","push","$match","sort","keys","length","$sort","_id","isMeta","dataPush","each","fields","value","field","indexOf","safeField","replace","$group","data","$push","limit","skip","$slice","$project"],"mappings":"AAAA,IAAIA,UAAJ;;AAAMC,OAAOC,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACH,KAAD,YAAGI,CAAH,EAAK;AAACJ,YAAEI,CAAF;AAAI;AAAV,CAA1C,EAAsD,CAAtD;AAANH,OAAOI,aAAP,CAEe,UAAUC,mBAAV,EAA+BC,OAA/B,EAAwCC,OAAxC,EAAiDC,MAAjD,EAAyD;AACpE,QAAIC,uBAAuB,KAA3B;AACA,QAAMC,SAASL,oBAAoBK,MAAnC;AACA,QAAMC,mBAAmBD,OAAOC,gBAAhC;AACA,QAAMC,aAAaP,oBAAoBO,UAAvC;AAEA,QAAIC,WAAW,EAAf;;AAEA,QAAID,WAAWE,QAAf,EAAyB;AACrBF,mBAAWE,QAAX,CAAoBR,OAApB,EAA6BC,OAA7B,EAAsCC,MAAtC;AACH;;AAEDK,aAASE,IAAT,CAAc;AAACC,gBAAQV;AAAT,KAAd;;AAEA,QAAIC,QAAQU,IAAR,IAAgBlB,EAAEmB,IAAF,CAAOX,QAAQU,IAAf,EAAqBE,MAArB,GAA8B,CAAlD,EAAqD;AACjDN,iBAASE,IAAT,CAAc;AAACK,mBAAOb,QAAQU;AAAhB,SAAd;AACH;;AAED,QAAII,MAAMV,gBAAV;;AACA,QAAID,OAAOY,MAAP,EAAJ,EAAqB;AACjBD,eAAO,MAAP;AACH;;AAED,QAAIE,WAAW;AACXF,aAAK;AADM,KAAf;;AAIAtB,MAAEyB,IAAF,CAAOjB,QAAQkB,MAAf,EAAuB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACrC,YAAIA,MAAMC,OAAN,CAAc,GAAd,KAAsB,CAA1B,EAA6B;AACzBnB,mCAAuB,IAAvB;AACH;;AACD,YAAMoB,YAAYF,MAAMG,OAAN,CAAc,GAAd,EAAmB,KAAnB,CAAlB;AACAP,iBAASM,SAAT,IAAsB,MAAMF,KAA5B;AACH,KAND;;AAQA,QAAIjB,OAAOY,MAAP,EAAJ,EAAqB;AACjBC,iBAASZ,gBAAT,IAA6B,MAAMA,gBAAnC;AACH;;AAEDE,aAASE,IAAT,CAAc;AACVgB,gBAAQ;AACJV,iBAAK,MAAMA,GADP;AAEJW,kBAAM;AACFC,uBAAOV;AADL;AAFF;AADE,KAAd;;AASA,QAAIhB,QAAQ2B,KAAR,IAAiB3B,QAAQ4B,IAA7B,EAAmC;AAC/B,YAAIC,SAAS,CAAC,OAAD,CAAb;AACA,YAAI7B,QAAQ4B,IAAZ,EAAkBC,OAAOrB,IAAP,CAAYR,QAAQ4B,IAApB;AAClB,YAAI5B,QAAQ2B,KAAZ,EAAmBE,OAAOrB,IAAP,CAAYR,QAAQ2B,KAApB;AAEnBrB,iBAASE,IAAT,CAAc;AACVsB,sBAAU;AACNhB,qBAAK,CADC;AAENW,sBAAM;AAACI;AAAD;AAFA;AADA,SAAd;AAMH;;AAED,WAAO;AAACvB,0BAAD;AAAWJ;AAAX,KAAP;AACH,CAhED","file":"packages/cultofcoders:grapher/lib/query/hypernova/buildAggregatePipeline.js.map","sourcesContent":["import { _ } from 'meteor/underscore';\n\nexport default function (childCollectionNode, filters, options, userId) {\n    let containsDottedFields = false;\n    const linker = childCollectionNode.linker;\n    const linkStorageField = linker.linkStorageField;\n    const collection = childCollectionNode.collection;\n\n    let pipeline = [];\n\n    if (collection.firewall) {\n        collection.firewall(filters, options, userId);\n    }\n\n    pipeline.push({$match: filters});\n\n    if (options.sort && _.keys(options.sort).length > 0) {\n        pipeline.push({$sort: options.sort})\n    }\n\n    let _id = linkStorageField;\n    if (linker.isMeta()) {\n        _id += '._id';\n    }\n\n    let dataPush = {\n        _id: '$_id'\n    };\n\n    _.each(options.fields, (value, field) => {\n        if (field.indexOf('.') >= 0) {\n            containsDottedFields = true;\n        }\n        const safeField = field.replace('.', '___');\n        dataPush[safeField] = '$' + field\n    });\n\n    if (linker.isMeta()) {\n        dataPush[linkStorageField] = '$' + linkStorageField;\n    }\n\n    pipeline.push({\n        $group: {\n            _id: \"$\" + _id,\n            data: {\n                $push: dataPush\n            }\n        }\n    });\n\n    if (options.limit || options.skip) {\n        let $slice = [\"$data\"];\n        if (options.skip) $slice.push(options.skip);\n        if (options.limit) $slice.push(options.limit);\n\n        pipeline.push({\n            $project: {\n                _id: 1,\n                data: {$slice}\n            }\n        })\n    }\n\n    return {pipeline, containsDottedFields};\n}"]},"hash":"3b08da295f1e51799654f22c8db4fe0f99afc0ce"}

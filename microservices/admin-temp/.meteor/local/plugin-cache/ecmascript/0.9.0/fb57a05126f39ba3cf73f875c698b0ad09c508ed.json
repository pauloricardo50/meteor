{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"../query/lib/prepareForProcess.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"prepareForProcess"}]},{"source":"./namedQuery.base","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Base"}]},{"source":"lodash.clonedeep","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"deepClone"}]},{"source":"./cache/MemoryResultCacher","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"MemoryResultCacher"}]},{"source":"../query/lib/intersectDeep","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"intersectDeep"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","filenameRelative":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"namedQuery.server"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar prepareForProcess = void 0;\nmodule.watch(require(\"../query/lib/prepareForProcess.js\"), {\n    \"default\": function (v) {\n        prepareForProcess = v;\n    }\n}, 0);\nvar Base = void 0;\nmodule.watch(require(\"./namedQuery.base\"), {\n    \"default\": function (v) {\n        Base = v;\n    }\n}, 1);\nvar deepClone = void 0;\nmodule.watch(require(\"lodash.clonedeep\"), {\n    \"default\": function (v) {\n        deepClone = v;\n    }\n}, 2);\nvar MemoryResultCacher = void 0;\nmodule.watch(require(\"./cache/MemoryResultCacher\"), {\n    \"default\": function (v) {\n        MemoryResultCacher = v;\n    }\n}, 3);\nvar intersectDeep = void 0;\nmodule.watch(require(\"../query/lib/intersectDeep\"), {\n    \"default\": function (v) {\n        intersectDeep = v;\n    }\n}, 4);\nmodule.exportDefault(function (_Base) {\n    (0, _inherits3.default)(_class, _Base);\n\n    function _class() {\n        (0, _classCallCheck3.default)(this, _class);\n        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n    }\n\n    /**\n     * Retrieves the data.\n     * @returns {*}\n     */_class.prototype.fetch = function () {\n        function fetch(context) {\n            this._performSecurityChecks(context, this.params);\n\n            if (this.isResolver) {\n                return this._fetchResolverData(context);\n            } else {\n                body = deepClone(this.body);\n\n                if (this.params.$body) {\n                    body = intersectDeep(body, this.params.$body);\n                } // we must apply emobdyment here\n\n\n                this.doEmbodimentIfItApplies(body);\n                var query = this.collection.createQuery(deepClone(body), {\n                    params: deepClone(this.params)\n                });\n\n                if (this.cacher) {\n                    var cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n                    return this.cacher.fetch(cacheId, {\n                        query: query\n                    });\n                }\n\n                return query.fetch();\n            }\n        }\n\n        return fetch;\n    }(); /**\n          * @param args\n          * @returns {*}\n          */\n\n    _class.prototype.fetchOne = function () {\n        function fetchOne() {\n            return _.first(this.fetch.apply(this, arguments));\n        }\n\n        return fetchOne;\n    }(); /**\n          * Gets the count of matching elements.\n          *\n          * @returns {any}\n          */\n\n    _class.prototype.getCount = function () {\n        function getCount(context) {\n            this._performSecurityChecks(context, this.params);\n\n            var countCursor = this.getCursorForCounting();\n\n            if (this.cacher) {\n                var cacheId = 'count::' + this.cacher.generateQueryId(this.queryName, this.params);\n                return this.cacher.fetch(cacheId, {\n                    countCursor: countCursor\n                });\n            }\n\n            return countCursor.count();\n        }\n\n        return getCount;\n    }(); /**\n          * Returns the cursor for counting\n          * This is most likely used for counts cursor\n          */\n\n    _class.prototype.getCursorForCounting = function () {\n        function getCursorForCounting() {\n            var body = deepClone(this.body);\n            this.doEmbodimentIfItApplies(body);\n            body = prepareForProcess(body, this.params);\n            return this.collection.find(body.$filters || {}, {\n                fields: {\n                    _id: 1\n                }\n            });\n        }\n\n        return getCursorForCounting;\n    }(); /**\n          * @param cacher\n          */\n\n    _class.prototype.cacheResults = function () {\n        function cacheResults(cacher) {\n            if (!cacher) {\n                cacher = new MemoryResultCacher();\n            }\n\n            this.cacher = cacher;\n        }\n\n        return cacheResults;\n    }(); /**\n          * Configure resolve. This doesn't actually call the resolver, it just sets it\n          * @param fn\n          */\n\n    _class.prototype.resolve = function () {\n        function resolve(fn) {\n            if (!this.isResolver) {\n                throw new Meteor.Error('invalid-call', \"You cannot use resolve() on a non resolver NamedQuery\");\n            }\n\n            this.resolver = fn;\n        }\n\n        return resolve;\n    }(); /**\n          * @returns {*}\n          * @private\n          */\n\n    _class.prototype._fetchResolverData = function () {\n        function _fetchResolverData(context) {\n            var resolver = this.resolver;\n            var self = this;\n            var query = {\n                fetch: function () {\n                    return resolver.call(context, self.params);\n                }\n            };\n\n            if (this.cacher) {\n                var cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n                return this.cacher.fetch(cacheId, {\n                    query: query\n                });\n            }\n\n            return query.fetch();\n        }\n\n        return _fetchResolverData;\n    }(); /**\n          * @param context Meteor method/publish context\n          * @param params\n          *\n          * @private\n          */\n\n    _class.prototype._performSecurityChecks = function () {\n        function _performSecurityChecks(context, params) {\n            if (context && this.exposeConfig) {\n                this._callFirewall(context, context.userId, params);\n            }\n\n            this.doValidateParams(params);\n        }\n\n        return _performSecurityChecks;\n    }();\n\n    return _class;\n}(Base));","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js"],"names":["prepareForProcess","module","watch","require","v","Base","deepClone","MemoryResultCacher","intersectDeep","exportDefault","fetch","context","_performSecurityChecks","params","isResolver","_fetchResolverData","body","$body","doEmbodimentIfItApplies","query","collection","createQuery","cacher","cacheId","generateQueryId","queryName","fetchOne","_","first","getCount","countCursor","getCursorForCounting","count","find","$filters","fields","_id","cacheResults","resolve","fn","Meteor","Error","resolver","self","call","exposeConfig","_callFirewall","userId","doValidateParams"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js.map","sourcesContent":["import prepareForProcess from '../query/lib/prepareForProcess.js';\nimport Base from './namedQuery.base';\nimport deepClone from 'lodash.clonedeep';\nimport MemoryResultCacher from './cache/MemoryResultCacher';\nimport intersectDeep from '../query/lib/intersectDeep';\n\nexport default class extends Base {\n    /**\n     * Retrieves the data.\n     * @returns {*}\n     */\n    fetch(context) {\n        this._performSecurityChecks(context, this.params);\n\n        if (this.isResolver) {\n            return this._fetchResolverData(context);\n        } else {\n            body = deepClone(this.body);\n            if (this.params.$body) {\n                body = intersectDeep(body, this.params.$body);\n            }\n            \n            // we must apply emobdyment here\n            this.doEmbodimentIfItApplies(body);\n\n            const query = this.collection.createQuery(\n                deepClone(body),\n                {\n                    params: deepClone(this.params)\n                }\n            );\n\n            if (this.cacher) {\n                const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n                return this.cacher.fetch(cacheId, {query});\n            }\n\n            return query.fetch();\n        }\n    }\n\n    /**\n     * @param args\n     * @returns {*}\n     */\n    fetchOne(...args) {\n        return _.first(this.fetch(...args));\n    }\n\n    /**\n     * Gets the count of matching elements.\n     *\n     * @returns {any}\n     */\n    getCount(context) {\n        this._performSecurityChecks(context, this.params);\n\n        const countCursor = this.getCursorForCounting();\n\n        if (this.cacher) {\n            const cacheId = 'count::' + this.cacher.generateQueryId(this.queryName, this.params);\n\n            return this.cacher.fetch(cacheId, {countCursor});\n        }\n\n        return countCursor.count();\n    }\n\n    /**\n     * Returns the cursor for counting\n     * This is most likely used for counts cursor\n     */\n    getCursorForCounting() {\n        let body = deepClone(this.body);\n        this.doEmbodimentIfItApplies(body);\n        body = prepareForProcess(body, this.params);\n\n        return this.collection.find(body.$filters || {}, {fields: {_id: 1}});\n    }\n\n    /**\n     * @param cacher\n     */\n    cacheResults(cacher) {\n        if (!cacher) {\n            cacher = new MemoryResultCacher();\n        }\n\n        this.cacher = cacher;\n    }\n\n    /**\n     * Configure resolve. This doesn't actually call the resolver, it just sets it\n     * @param fn\n     */\n    resolve(fn) {\n        if (!this.isResolver) {\n            throw new Meteor.Error('invalid-call', `You cannot use resolve() on a non resolver NamedQuery`);\n        }\n\n        this.resolver = fn;\n    }\n\n    /**\n     * @returns {*}\n     * @private\n     */\n    _fetchResolverData(context) {\n        const resolver = this.resolver;\n        const self = this;\n        const query = {\n            fetch() {\n                return resolver.call(context, self.params);\n            }\n        };\n\n        if (this.cacher) {\n            const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n            return this.cacher.fetch(cacheId, {query});\n        }\n\n        return query.fetch();\n    }\n\n    /**\n     * @param context Meteor method/publish context\n     * @param params\n     *\n     * @private\n     */\n    _performSecurityChecks(context, params) {\n        if (context && this.exposeConfig) {\n            this._callFirewall(context, context.userId, params);\n        }\n\n        this.doValidateParams(params);\n    }\n}"]},"hash":"fb57a05126f39ba3cf73f875c698b0ad09c508ed"}

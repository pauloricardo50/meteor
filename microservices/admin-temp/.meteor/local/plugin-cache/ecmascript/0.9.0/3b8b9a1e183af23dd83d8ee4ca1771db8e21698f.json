{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"..","imported":["Borrowers","Loans","Properties","Tasks"],"specifiers":[{"kind":"named","imported":"Borrowers","local":"Borrowers"},{"kind":"named","imported":"Loans","local":"Loans"},{"kind":"named","imported":"Properties","local":"Properties"},{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"./tasksConstants","imported":["TASK_STATUS","TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"},{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]},{"source":"./queries/tasksUnassigned","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"unassignedTasksQuery"}]},{"source":"fs","imported":["truncateSync"],"specifiers":[{"kind":"named","imported":"truncateSync","local":"truncateSync"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/tasks/TaskService.js","filenameRelative":"imports/core/api/tasks/TaskService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/tasks/TaskService.js.map","sourceFileName":"imports/core/api/tasks/TaskService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TaskService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function () {\n    function Meteor(v) {\n      _Meteor = v;\n    }\n\n    return Meteor;\n  }()\n}, 0);\n\nvar _Borrowers = void 0,\n    _Loans = void 0,\n    _Properties = void 0,\n    _Tasks = void 0;\n\nmodule.watch(require(\"..\"), {\n  Borrowers: function () {\n    function Borrowers(v) {\n      _Borrowers = v;\n    }\n\n    return Borrowers;\n  }(),\n  Loans: function () {\n    function Loans(v) {\n      _Loans = v;\n    }\n\n    return Loans;\n  }(),\n  Properties: function () {\n    function Properties(v) {\n      _Properties = v;\n    }\n\n    return Properties;\n  }(),\n  Tasks: function () {\n    function Tasks(v) {\n      _Tasks = v;\n    }\n\n    return Tasks;\n  }()\n}, 1);\n\nvar _TASK_STATUS = void 0,\n    _TASK_TYPE = void 0;\n\nmodule.watch(require(\"./tasksConstants\"), {\n  TASK_STATUS: function () {\n    function TASK_STATUS(v) {\n      _TASK_STATUS = v;\n    }\n\n    return TASK_STATUS;\n  }(),\n  TASK_TYPE: function () {\n    function TASK_TYPE(v) {\n      _TASK_TYPE = v;\n    }\n\n    return TASK_TYPE;\n  }()\n}, 2);\nvar unassignedTasksQuery = void 0;\nmodule.watch(require(\"./queries/tasksUnassigned\"), {\n  \"default\": function () {\n    function _default(v) {\n      unassignedTasksQuery = v;\n    }\n\n    return _default;\n  }()\n}, 3);\n\nvar _truncateSync = void 0;\n\nmodule.watch(require(\"fs\"), {\n  truncateSync: function () {\n    function truncateSync(v) {\n      _truncateSync = v;\n    }\n\n    return truncateSync;\n  }()\n}, 4);\n\nvar TaskService = function () {\n  function TaskService() {\n    var _this = this;\n\n    (0, _classCallCheck3.default)(this, TaskService);\n\n    this.insert = function (_ref) {\n      var type = _ref.type,\n          borrowerId = _ref.borrowerId,\n          loanId = _ref.loanId,\n          propertyId = _ref.propertyId,\n          assignedTo = _ref.assignedTo,\n          createdBy = _ref.createdBy;\n\n      if (type !== _TASK_TYPE.ADD_ASSIGNED_TO) {\n        var existingTask = _Tasks.findOne({\n          type: type,\n          borrowerId: borrowerId,\n          loanId: loanId,\n          propertyId: propertyId,\n          status: _TASK_STATUS.ACTIVE\n        });\n\n        if (existingTask) {\n          throw new _Meteor.Error('duplicate active task');\n        }\n      } // check userId in loan and pass it as assignedTo\n\n\n      var relatedAssignedTo = assignedTo;\n\n      if (!relatedAssignedTo) {\n        if (loanId) {\n          relatedAssignedTo = _Loans.findOne(loanId).assignedTo;\n        }\n\n        if (borrowerId) {\n          relatedAssignedTo = _Borrowers.findOne(borrowerId).assignedTo;\n        }\n\n        if (propertyId) {\n          relatedAssignedTo = _Properties.findOne(propertyId).assignedTo;\n        }\n      }\n\n      return _Tasks.insert({\n        type: type,\n        relatedAssignedTo: relatedAssignedTo,\n        createdBy: createdBy,\n        borrowerId: borrowerId,\n        loanId: loanId,\n        propertyId: propertyId\n      });\n    };\n\n    this.insertUserTask = function (_ref2) {\n      var type = _ref2.type,\n          userId = _ref2.userId;\n\n      if (type !== _TASK_TYPE.ADD_ASSIGNED_TO) {\n        var existingTask = _Tasks.findOne({\n          type: type,\n          userId: userId,\n          status: _TASK_STATUS.ACTIVE\n        });\n\n        if (existingTask) {\n          throw new _Meteor.Error('duplicate active task');\n        }\n      }\n\n      return _Tasks.insert({\n        type: type,\n        userId: userId\n      });\n    };\n\n    this.remove = function (_ref3) {\n      var taskId = _ref3.taskId;\n      return _Tasks.remove(taskId);\n    };\n\n    this.update = function (_ref4) {\n      var taskId = _ref4.taskId,\n          task = _ref4.task;\n      return _Tasks.update(taskId, {\n        $set: task\n      });\n    };\n\n    this.complete = function (_ref5) {\n      var taskId = _ref5.taskId;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          status: _TASK_STATUS.COMPLETED,\n          completedAt: new Date()\n        }\n      });\n    };\n\n    this.completeByType = function (_ref6) {\n      var type = _ref6.type,\n          loanId = _ref6.loanId,\n          newStatus = _ref6.newStatus;\n\n      var taskToComplete = _Tasks.findOne({\n        loanId: loanId,\n        type: type,\n        status: _TASK_STATUS.ACTIVE\n      });\n\n      if (!taskToComplete) {\n        throw new _Meteor.Error(\"task couldn't be found\");\n      }\n\n      return _this.update({\n        taskId: taskToComplete._id,\n        task: {\n          status: newStatus || _TASK_STATUS.COMPLETED,\n          completedAt: new Date()\n        }\n      });\n    };\n\n    this.changeStatus = function (_ref7) {\n      var taskId = _ref7.taskId,\n          newStatus = _ref7.newStatus;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          status: newStatus\n        }\n      });\n    };\n\n    this.changeAssignedTo = function (_ref8) {\n      var taskId = _ref8.taskId,\n          newAssignee = _ref8.newAssignee;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          assignedTo: newAssignee\n        }\n      });\n    };\n\n    this.isRelatedToUser = function (_ref9) {\n      var task = _ref9.task,\n          userId = _ref9.userId;\n\n      // if (task.userId === userId) {\n      //   return true;\n      // }\n      if (task.borrower.borrowerAssignee === userId) {\n        return true;\n      }\n\n      if (task.loan.loanAssignee === userId) {\n        return true;\n      }\n\n      if (task.property.propertyAssignee === userId) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.assignAllTasksToAdmin = function (_ref10) {\n      var userId = _ref10.userId,\n          newAssignee = _ref10.newAssignee;\n      var unassignedTasks = unassignedTasksQuery.fetch(); // console.log(unassignedTasks);\n\n      unassignedTasks.map(function (task) {\n        if (_this.isRelatedToUser({\n          task: task,\n          userId: userId\n        })) {\n          var taskId = task._id;\n\n          _this.update({\n            taskId: taskId,\n            task: {\n              assignedTo: newAssignee\n            }\n          });\n        }\n\n        return task;\n      });\n    };\n  }\n\n  return TaskService;\n}();\n\nmodule.exportDefault(new TaskService());","map":{"version":3,"sources":["imports/core/api/tasks/TaskService.js"],"names":["Meteor","module","watch","require","v","Borrowers","Loans","Properties","Tasks","TASK_STATUS","TASK_TYPE","unassignedTasksQuery","truncateSync","TaskService","insert","type","borrowerId","loanId","propertyId","assignedTo","createdBy","ADD_ASSIGNED_TO","existingTask","findOne","status","ACTIVE","Error","relatedAssignedTo","insertUserTask","userId","remove","taskId","update","task","$set","complete","COMPLETED","completedAt","Date","completeByType","newStatus","taskToComplete","_id","changeStatus","changeAssignedTo","newAssignee","isRelatedToUser","borrower","borrowerAssignee","loan","loanAssignee","property","propertyAssignee","assignAllTasksToAdmin","unassignedTasks","fetch","map","exportDefault"],"mappings":"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","file":"imports/core/api/tasks/TaskService.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Borrowers, Loans, Properties, Tasks} from 'core/api';\nimport { TASK_STATUS, TASK_TYPE } from './tasksConstants';\nimport unassignedTasksQuery from 'core/api/tasks/queries/tasksUnassigned';\nimport { truncateSync } from 'fs';\n\nclass TaskService {\n  insert = ({ type, borrowerId, loanId, propertyId, assignedTo, createdBy }) => {\n    if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n      const existingTask = Tasks.findOne({\n        type,\n        borrowerId,\n        loanId,\n        propertyId,\n        status: TASK_STATUS.ACTIVE,\n      });\n      if (existingTask) {\n        throw new Meteor.Error('duplicate active task');\n      }\n    }\n    // check userId in loan and pass it as assignedTo\n    let relatedAssignedTo = assignedTo;\n    if (!relatedAssignedTo) {\n      if (loanId) {\n        relatedAssignedTo = Loans.findOne(loanId).assignedTo;\n      }\n      if (borrowerId) {\n        relatedAssignedTo = Borrowers.findOne(borrowerId).assignedTo;\n      }\n      if (propertyId) {\n        relatedAssignedTo = Properties.findOne(propertyId).assignedTo;\n      }      \n    }\n    return Tasks.insert({\n      type,\n      relatedAssignedTo,\n      createdBy,\n      borrowerId,\n      loanId,\n      propertyId,\n    });\n  };\n\n  insertUserTask = ({ type, userId }) => {\n    if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n      const existingTask = Tasks.findOne({\n        type,\n        userId,\n        status: TASK_STATUS.ACTIVE,\n      });\n      if (existingTask) {\n        throw new Meteor.Error('duplicate active task');\n      }\n    }\n    return Tasks.insert({\n      type,\n      userId,\n    });\n  };\n\n  remove = ({ taskId }) => Tasks.remove(taskId);\n\n  update = ({ taskId, task }) => Tasks.update(taskId, { $set: task });\n\n  complete = ({ taskId }) =>\n    this.update({\n      taskId,\n      task: {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n\n  completeByType = ({ type, loanId, newStatus }) => {\n    const taskToComplete = Tasks.findOne({\n      loanId,\n      type,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (!taskToComplete) {\n      throw new Meteor.Error(\"task couldn't be found\");\n    }\n\n    return this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n  };\n\n  changeStatus = ({ taskId, newStatus }) =>\n    this.update({ taskId, task: { status: newStatus } });\n\n  changeAssignedTo = ({ taskId, newAssignee }) =>\n    this.update({\n      taskId,\n      task: { assignedTo: newAssignee },\n    });\n\n  isRelatedToUser = ({ task, userId }) => {\n    // if (task.userId === userId) {\n    //   return true;\n    // }\n    if (task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n    if (task.loan.loanAssignee === userId) {\n      return true;\n    }\n    if (task.property.propertyAssignee === userId) {\n      return true;\n    }\n    return false;\n  };\n\n  assignAllTasksToAdmin = ({ userId, newAssignee }) => {\n    const unassignedTasks = unassignedTasksQuery.fetch();\n    // console.log(unassignedTasks);\n    unassignedTasks.map((task) => {\n      if (this.isRelatedToUser({ task, userId })) {\n        const taskId = task._id;\n        this.update({\n          taskId,\n          task: { assignedTo: newAssignee },\n        });\n      }\n      \n      return task;\n    });\n  };\n}\n\nexport default new TaskService();\n"]},"hash":"3b8b9a1e183af23dd83d8ee4ca1771db8e21698f"}

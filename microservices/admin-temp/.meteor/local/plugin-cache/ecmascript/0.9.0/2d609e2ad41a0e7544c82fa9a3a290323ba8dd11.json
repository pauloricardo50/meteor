{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/std:accounts-ui/imports/api/server/loginWithoutPassword.js","filenameRelative":"packages/std:accounts-ui/imports/api/server/loginWithoutPassword.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/std:accounts-ui/imports/api/server/loginWithoutPassword.js.map","sourceFileName":"packages/std:accounts-ui/imports/api/server/loginWithoutPassword.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"loginWithoutPassword"},"ignored":false,"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\n///\n/// LOGIN WITHOUT PASSWORD\n///\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({\n  loginWithoutPassword: function ({\n    email,\n    username = null\n  }) {\n    if (username !== null) {\n      check(username, String);\n      var user = Meteor.users.findOne({\n        $or: [{\n          \"username\": username,\n          \"emails.address\": {\n            $exists: 1\n          }\n        }, {\n          \"emails.address\": email\n        }]\n      });\n      if (!user) throw new Meteor.Error(403, \"User not found\");\n      email = user.emails[0].address;\n    } else {\n      check(email, String);\n      var user = Meteor.users.findOne({\n        \"emails.address\": email\n      });\n      if (!user) throw new Meteor.Error(403, \"User not found\");\n    }\n\n    if (Accounts.ui._options.requireEmailVerification) {\n      if (!user.emails[0].verified) {\n        throw new Meteor.Error(403, \"Email not verified\");\n      }\n    }\n\n    Accounts.sendLoginEmail(user._id, email);\n  }\n}); /**\n     * @summary Send an email with a link the user can use verify their email address.\n     * @locus Server\n     * @param {String} userId The id of the user to send email to.\n     * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n     */\n\nAccounts.sendLoginEmail = function (userId, address) {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n  // Make sure the user exists, and address is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user) throw new Error(\"Can't find user\"); // pick the first unverified address if we weren't passed an address.\n\n  if (!address) {\n    var email = (user.emails || []).find(({\n      verified\n    }) => !verified);\n    address = (email || {}).address;\n  } // make sure we have a valid address\n\n\n  if (!address || !(user.emails || []).map(({\n    address\n  }) => address).includes(address)) throw new Error(\"No such email address for user.\");\n  var tokenRecord = {\n    token: Random.secret(),\n    address: address,\n    when: new Date()\n  };\n  Meteor.users.update({\n    _id: userId\n  }, {\n    $push: {\n      'services.email.verificationTokens': tokenRecord\n    }\n  }); // before passing to template, update user object with new token\n\n  Meteor._ensure(user, 'services', 'email');\n\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n\n  user.services.email.verificationTokens.push(tokenRecord);\n  var loginUrl = Accounts.urls.verifyEmail(tokenRecord.token);\n  var options = {\n    to: address,\n    from: Accounts.emailTemplates.loginNoPassword.from ? Accounts.emailTemplates.loginNoPassword.from(user) : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.loginNoPassword.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.loginNoPassword.text === 'function') {\n    options.text = Accounts.emailTemplates.loginNoPassword.text(user, loginUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.loginNoPassword.html === 'function') options.html = Accounts.emailTemplates.loginNoPassword.html(user, loginUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n}; // Check for installed accounts-password dependency.\n\n\nif (Accounts.emailTemplates) {\n  Accounts.emailTemplates.loginNoPassword = {\n    subject: function (user) {\n      return \"Login on \" + Accounts.emailTemplates.siteName;\n    },\n    text: function (user, url) {\n      var greeting = user.profile && user.profile.name ? \"Hello \" + user.profile.name + \",\" : \"Hello,\";\n      return `${greeting}\nTo login, simply click the link below.\n${url}\nThanks.\n`;\n    }\n  };\n}","map":{"version":3,"sources":["packages/std:accounts-ui/imports/api/server/loginWithoutPassword.js"],"names":["Meteor","module","watch","require","v","Accounts","methods","loginWithoutPassword","email","username","check","String","user","users","findOne","$or","$exists","Error","emails","address","ui","_options","requireEmailVerification","verified","sendLoginEmail","_id","userId","find","map","includes","tokenRecord","token","Random","secret","when","Date","update","$push","_ensure","services","verificationTokens","push","loginUrl","urls","verifyEmail","options","to","from","emailTemplates","loginNoPassword","subject","text","html","headers","Email","send","siteName","url","greeting","profile","name"],"mappings":"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","file":"packages/std:accounts-ui/imports/api/server/loginWithoutPassword.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\n///\n/// LOGIN WITHOUT PASSWORD\n///\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({\n  loginWithoutPassword: function ({ email, username = null }) {\n    if (username !== null) {\n      check(username, String);\n\n      var user = Meteor.users.findOne({ $or: [{\n          \"username\": username, \"emails.address\": { $exists: 1 }\n        }, {\n          \"emails.address\": email\n        }]\n      });\n      if (!user)\n        throw new Meteor.Error(403, \"User not found\");\n\n      email = user.emails[0].address;\n    }\n    else {\n      check(email, String);\n\n      var user = Meteor.users.findOne({ \"emails.address\": email });\n      if (!user)\n        throw new Meteor.Error(403, \"User not found\");\n    }\n\n    if (Accounts.ui._options.requireEmailVerification) {\n      if (!user.emails[0].verified) {\n        throw new Meteor.Error(403, \"Email not verified\");\n      }\n    }\n\n    Accounts.sendLoginEmail(user._id, email);\n  },\n});\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n */\nAccounts.sendLoginEmail = function (userId, address) {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n\n  // Make sure the user exists, and address is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first unverified address if we weren't passed an address.\n  if (!address) {\n    var email = (user.emails || []).find(({ verified }) => !verified);\n    address = (email || {}).address;\n  }\n  // make sure we have a valid address\n  if (!address || !(user.emails || []).map(({ address }) => address).includes(address))\n    throw new Error(\"No such email address for user.\");\n\n\n  var tokenRecord = {\n    token: Random.secret(),\n    address: address,\n    when: new Date()};\n  Meteor.users.update(\n    {_id: userId},\n    {$push: {'services.email.verificationTokens': tokenRecord}});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'email');\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n  user.services.email.verificationTokens.push(tokenRecord);\n\n  var loginUrl = Accounts.urls.verifyEmail(tokenRecord.token);\n\n  var options = {\n    to: address,\n    from: Accounts.emailTemplates.loginNoPassword.from\n      ? Accounts.emailTemplates.loginNoPassword.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.loginNoPassword.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.loginNoPassword.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.loginNoPassword.text(user, loginUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.loginNoPassword.html === 'function')\n    options.html =\n      Accounts.emailTemplates.loginNoPassword.html(user, loginUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n// Check for installed accounts-password dependency.\nif (Accounts.emailTemplates) {\n  Accounts.emailTemplates.loginNoPassword = {\n    subject: function(user) {\n      return \"Login on \" + Accounts.emailTemplates.siteName;\n    },\n    text: function(user, url) {\n      var greeting = (user.profile && user.profile.name) ?\n            (\"Hello \" + user.profile.name + \",\") : \"Hello,\";\n      return `${greeting}\nTo login, simply click the link below.\n${url}\nThanks.\n`;\n    }\n  };\n}\n"]},"hash":"2d609e2ad41a0e7544c82fa9a3a290323ba8dd11"}

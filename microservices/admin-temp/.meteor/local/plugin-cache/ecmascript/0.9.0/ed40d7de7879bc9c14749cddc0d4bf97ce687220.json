{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../tasks","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Tasks"}]},{"source":"./tasksConstants","imported":["TASK_STATUS"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/tasks/TaskService.js","filenameRelative":"imports/core/api/tasks/TaskService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/tasks/TaskService.js.map","sourceFileName":"imports/core/api/tasks/TaskService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TaskService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function () {\n    function Meteor(v) {\n      _Meteor = v;\n    }\n\n    return Meteor;\n  }()\n}, 0);\nvar Tasks = void 0;\nmodule.watch(require(\"../tasks\"), {\n  \"default\": function () {\n    function _default(v) {\n      Tasks = v;\n    }\n\n    return _default;\n  }()\n}, 1);\n\nvar _TASK_STATUS = void 0;\n\nmodule.watch(require(\"./tasksConstants\"), {\n  TASK_STATUS: function () {\n    function TASK_STATUS(v) {\n      _TASK_STATUS = v;\n    }\n\n    return TASK_STATUS;\n  }()\n}, 2);\n\nvar TaskService = function () {\n  function TaskService() {\n    var _this = this;\n\n    (0, _classCallCheck3.default)(this, TaskService);\n\n    this.insert = function (_ref) {\n      var type = _ref.type,\n          loanId = _ref.loanId,\n          assignedTo = _ref.assignedTo,\n          createdBy = _ref.createdBy;\n      var existingTask = Tasks.findOne({\n        type: type,\n        loanId: loanId,\n        status: _TASK_STATUS.ACTIVE\n      });\n\n      if (existingTask) {\n        throw new _Meteor.Error('duplicate active task');\n      }\n\n      return Tasks.insert({\n        type: type,\n        loanId: loanId,\n        assignedTo: assignedTo,\n        createdBy: createdBy\n      });\n    };\n\n    this.remove = function (_ref2) {\n      var taskId = _ref2.taskId;\n      return Tasks.remove(taskId);\n    };\n\n    this.update = function (_ref3) {\n      var taskId = _ref3.taskId,\n          task = _ref3.task;\n      return Tasks.update(taskId, {\n        $set: task\n      });\n    };\n\n    this.complete = function (_ref4) {\n      var taskId = _ref4.taskId;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          status: _TASK_STATUS.COMPLETED,\n          completedAt: new Date()\n        }\n      });\n    };\n\n    this.completeByType = function (_ref5) {\n      var type = _ref5.type,\n          loanId = _ref5.loanId,\n          newStatus = _ref5.newStatus;\n      var taskToComplete = Tasks.findOne({\n        loanId: loanId,\n        type: type,\n        status: _TASK_STATUS.ACTIVE\n      });\n\n      if (!taskToComplete) {\n        throw new _Meteor.Error(\"task couldn't be found\");\n      }\n\n      return _this.update({\n        taskId: taskToComplete._id,\n        task: {\n          status: newStatus || _TASK_STATUS.COMPLETED,\n          completedAt: new Date()\n        }\n      });\n    };\n\n    this.changeStatus = function (_ref6) {\n      var taskId = _ref6.taskId,\n          newStatus = _ref6.newStatus;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          status: newStatus\n        }\n      });\n    };\n\n    this.changeUser = function (_ref7) {\n      var taskId = _ref7.taskId,\n          newUser = _ref7.newUser;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          userId: newUser\n        }\n      });\n    };\n  }\n\n  return TaskService;\n}();\n\nmodule.exportDefault(new TaskService());","map":{"version":3,"sources":["imports/core/api/tasks/TaskService.js"],"names":["Meteor","module","watch","require","v","Tasks","TASK_STATUS","TaskService","insert","type","loanId","assignedTo","createdBy","existingTask","findOne","status","ACTIVE","Error","remove","taskId","update","task","$set","complete","COMPLETED","completedAt","Date","completeByType","newStatus","taskToComplete","_id","changeStatus","changeUser","newUser","userId","exportDefault"],"mappings":"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","file":"imports/core/api/tasks/TaskService.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport Tasks from '../tasks';\nimport { TASK_STATUS } from './tasksConstants';\n\nclass TaskService {\n  insert = ({ type, loanId, assignedTo, createdBy }) => {\n    const existingTask = Tasks.findOne({\n      type,\n      loanId,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (existingTask) {\n      throw new Meteor.Error('duplicate active task');\n    }\n\n    return Tasks.insert({\n      type,\n      loanId,\n      assignedTo,\n      createdBy,\n    });\n  };\n\n  remove = ({ taskId }) => Tasks.remove(taskId);\n\n  update = ({ taskId, task }) => Tasks.update(taskId, { $set: task });\n\n  complete = ({ taskId }) =>\n    this.update({\n      taskId,\n      task: {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n\n  completeByType = ({ type, loanId, newStatus }) => {\n    const taskToComplete = Tasks.findOne({\n      loanId,\n      type,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (!taskToComplete) {\n      throw new Meteor.Error(\"task couldn't be found\");\n    }\n\n    return this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n  };\n\n  changeStatus = ({ taskId, newStatus }) =>\n    this.update({ taskId, task: { status: newStatus } });\n\n  changeUser = ({ taskId, newUser }) =>\n    this.update({\n      taskId,\n      task: { userId: newUser },\n    });\n}\n\nexport default new TaskService();\n"]},"hash":"ed40d7de7879bc9c14749cddc0d4bf97ce687220"}

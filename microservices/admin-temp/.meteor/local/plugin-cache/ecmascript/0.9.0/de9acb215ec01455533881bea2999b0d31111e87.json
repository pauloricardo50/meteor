{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./applyProps.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"applyProps"}]},{"source":"./prepareForDelivery","imported":["assembleMetadata","removeLinkStorages","storeOneResults"],"specifiers":[{"kind":"named","imported":"assembleMetadata","local":"assembleMetadata"},{"kind":"named","imported":"removeLinkStorages","local":"removeLinkStorages"},{"kind":"named","imported":"storeOneResults","local":"storeOneResults"}]},{"source":"./prepareForDelivery","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"prepareForDelivery"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"recursiveFetch"},"ignored":false,"code":"let applyProps;\nmodule.watch(require(\"./applyProps.js\"), {\n    default(v) {\n        applyProps = v;\n    }\n\n}, 0);\nlet assembleMetadata, removeLinkStorages, storeOneResults;\nmodule.watch(require(\"./prepareForDelivery\"), {\n    assembleMetadata(v) {\n        assembleMetadata = v;\n    },\n\n    removeLinkStorages(v) {\n        removeLinkStorages = v;\n    },\n\n    storeOneResults(v) {\n        storeOneResults = v;\n    }\n\n}, 1);\nlet prepareForDelivery;\nmodule.watch(require(\"./prepareForDelivery\"), {\n    default(v) {\n        prepareForDelivery = v;\n    }\n\n}, 2);\n\n/**\n * This is always run client side to build the data graph out of client-side collections.\n *\n * @param node\n * @param parentObject\n * @returns {*}\n */function fetch(node, parentObject) {\n    let {\n        filters,\n        options\n    } = applyProps(node);\n    let results = [];\n\n    if (parentObject) {\n        let accessor = node.linker.createLink(parentObject, node.collection);\n\n        if (node.isVirtual) {\n            options.fields = options.fields || {};\n\n            _.extend(options.fields, {\n                [node.linkStorageField]: 1\n            });\n        }\n\n        results = accessor.find(filters, options).fetch();\n    } else {\n        results = node.collection.find(filters, options).fetch();\n    }\n\n    _.each(node.collectionNodes, collectionNode => {\n        _.each(results, result => {\n            result[collectionNode.linkName] = fetch(collectionNode, result); //delete result[node.linker.linkStorageField];\n        });\n    });\n\n    return results;\n}\n\nmodule.exportDefault((node, params) => {\n    node.results = fetch(node);\n    prepareForDelivery(node, params);\n    return node.results;\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js"],"names":["applyProps","module","watch","require","default","v","assembleMetadata","removeLinkStorages","storeOneResults","prepareForDelivery","fetch","node","parentObject","filters","options","results","accessor","linker","createLink","collection","isVirtual","fields","_","extend","linkStorageField","find","each","collectionNodes","collectionNode","result","linkName","exportDefault","params"],"mappings":"AAAA,IAAIA,UAAJ;AAAeC,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACC,YAAQC,CAAR,EAAU;AAACL,qBAAWK,CAAX;AAAa;;AAAzB,CAAxC,EAAmE,CAAnE;AAAsE,IAAIC,gBAAJ,EAAqBC,kBAArB,EAAwCC,eAAxC;AAAwDP,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACG,qBAAiBD,CAAjB,EAAmB;AAACC,2BAAiBD,CAAjB;AAAmB,KAAxC;;AAAyCE,uBAAmBF,CAAnB,EAAqB;AAACE,6BAAmBF,CAAnB;AAAqB,KAApF;;AAAqFG,oBAAgBH,CAAhB,EAAkB;AAACG,0BAAgBH,CAAhB;AAAkB;;AAA1H,CAA7C,EAAyK,CAAzK;AAA4K,IAAII,kBAAJ;AAAuBR,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACC,YAAQC,CAAR,EAAU;AAACI,6BAAmBJ,CAAnB;AAAqB;;AAAjC,CAA7C,EAAgF,CAAhF;;AAIhV;;;;;;GAOA,SAASK,KAAT,CAAeC,IAAf,EAAqBC,YAArB,EAAmC;AAC/B,QAAI;AAACC,eAAD;AAAUC;AAAV,QAAqBd,WAAWW,IAAX,CAAzB;AAEA,QAAII,UAAU,EAAd;;AAEA,QAAIH,YAAJ,EAAkB;AACd,YAAII,WAAWL,KAAKM,MAAL,CAAYC,UAAZ,CAAuBN,YAAvB,EAAqCD,KAAKQ,UAA1C,CAAf;;AAEA,YAAIR,KAAKS,SAAT,EAAoB;AAChBN,oBAAQO,MAAR,GAAiBP,QAAQO,MAAR,IAAkB,EAAnC;;AACAC,cAAEC,MAAF,CAAST,QAAQO,MAAjB,EAAyB;AACrB,iBAACV,KAAKa,gBAAN,GAAyB;AADJ,aAAzB;AAGH;;AAEDT,kBAAUC,SAASS,IAAT,CAAcZ,OAAd,EAAuBC,OAAvB,EAAgCJ,KAAhC,EAAV;AACH,KAXD,MAWO;AACHK,kBAAUJ,KAAKQ,UAAL,CAAgBM,IAAhB,CAAqBZ,OAArB,EAA8BC,OAA9B,EAAuCJ,KAAvC,EAAV;AACH;;AAEDY,MAAEI,IAAF,CAAOf,KAAKgB,eAAZ,EAA6BC,kBAAkB;AAC3CN,UAAEI,IAAF,CAAOX,OAAP,EAAgBc,UAAU;AACtBA,mBAAOD,eAAeE,QAAtB,IAAkCpB,MAAMkB,cAAN,EAAsBC,MAAtB,CAAlC,CADsB,CAEtB;AACH,SAHD;AAIH,KALD;;AAOA,WAAOd,OAAP;AACH;;AAvCDd,OAAO8B,aAAP,CAyCe,CAACpB,IAAD,EAAOqB,MAAP,KAAkB;AAC7BrB,SAAKI,OAAL,GAAeL,MAAMC,IAAN,CAAf;AAEAF,uBAAmBE,IAAnB,EAAyBqB,MAAzB;AAEA,WAAOrB,KAAKI,OAAZ;AACH,CA/CD","file":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js.map","sourcesContent":["import applyProps from './applyProps.js';\nimport { assembleMetadata, removeLinkStorages, storeOneResults } from './prepareForDelivery';\nimport prepareForDelivery from './prepareForDelivery';\n\n/**\n * This is always run client side to build the data graph out of client-side collections.\n *\n * @param node\n * @param parentObject\n * @returns {*}\n */\nfunction fetch(node, parentObject) {\n    let {filters, options} = applyProps(node);\n\n    let results = [];\n\n    if (parentObject) {\n        let accessor = node.linker.createLink(parentObject, node.collection);\n\n        if (node.isVirtual) {\n            options.fields = options.fields || {};\n            _.extend(options.fields, {\n                [node.linkStorageField]: 1\n            });\n        }\n\n        results = accessor.find(filters, options).fetch();\n    } else {\n        results = node.collection.find(filters, options).fetch();\n    }\n\n    _.each(node.collectionNodes, collectionNode => {\n        _.each(results, result => {\n            result[collectionNode.linkName] = fetch(collectionNode, result);\n            //delete result[node.linker.linkStorageField];\n        })\n    });\n\n    return results;\n}\n\nexport default (node, params) => {\n    node.results = fetch(node);\n\n    prepareForDelivery(node, params);\n\n    return node.results;\n}\n"]},"hash":"de9acb215ec01455533881bea2999b0d31111e87"}

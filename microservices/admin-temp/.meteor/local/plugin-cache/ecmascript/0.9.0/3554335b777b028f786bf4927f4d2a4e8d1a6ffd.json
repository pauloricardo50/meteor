{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"..","imported":["Borrowers","Loans","Properties","Tasks"],"specifiers":[{"kind":"named","imported":"Borrowers","local":"Borrowers"},{"kind":"named","imported":"Loans","local":"Loans"},{"kind":"named","imported":"Properties","local":"Properties"},{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"./tasksConstants","imported":["TASK_STATUS","TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"},{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]},{"source":"./queries/tasksUnassigned","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"unassignedTasksQuery"}]},{"source":"fs","imported":["truncateSync"],"specifiers":[{"kind":"named","imported":"truncateSync","local":"truncateSync"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/tasks/TaskService.js","filenameRelative":"imports/core/api/tasks/TaskService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/tasks/TaskService.js.map","sourceFileName":"imports/core/api/tasks/TaskService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TaskService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 0);\n\nvar _Borrowers = void 0,\n    _Loans = void 0,\n    _Properties = void 0,\n    _Tasks = void 0;\n\nmodule.watch(require(\"..\"), {\n  Borrowers: function Borrowers(v) {\n    _Borrowers = v;\n  },\n  Loans: function Loans(v) {\n    _Loans = v;\n  },\n  Properties: function Properties(v) {\n    _Properties = v;\n  },\n  Tasks: function Tasks(v) {\n    _Tasks = v;\n  }\n}, 1);\n\nvar _TASK_STATUS = void 0,\n    _TASK_TYPE = void 0;\n\nmodule.watch(require(\"./tasksConstants\"), {\n  TASK_STATUS: function TASK_STATUS(v) {\n    _TASK_STATUS = v;\n  },\n  TASK_TYPE: function TASK_TYPE(v) {\n    _TASK_TYPE = v;\n  }\n}, 2);\nvar unassignedTasksQuery = void 0;\nmodule.watch(require(\"./queries/tasksUnassigned\"), {\n  default: function _default(v) {\n    unassignedTasksQuery = v;\n  }\n}, 3);\n\nvar _truncateSync = void 0;\n\nmodule.watch(require(\"fs\"), {\n  truncateSync: function truncateSync(v) {\n    _truncateSync = v;\n  }\n}, 4);\n\nvar TaskService = function TaskService() {\n  var _this = this;\n\n  (0, _classCallCheck3.default)(this, TaskService);\n\n  this.insert = function (_ref) {\n    var type = _ref.type,\n        borrowerId = _ref.borrowerId,\n        loanId = _ref.loanId,\n        propertyId = _ref.propertyId,\n        assignedTo = _ref.assignedTo,\n        createdBy = _ref.createdBy;\n\n    if (type !== _TASK_TYPE.ADD_ASSIGNED_TO) {\n      var existingTask = _Tasks.findOne({\n        type: type,\n        borrowerId: borrowerId,\n        loanId: loanId,\n        propertyId: propertyId,\n        status: _TASK_STATUS.ACTIVE\n      });\n\n      if (existingTask) {\n        throw new _Meteor.Error('duplicate active task');\n      }\n    }\n\n    var relatedAssignedTo = assignedTo;\n\n    if (!relatedAssignedTo) {\n      relatedAssignedTo = _this.getRelatedDocAssignedTo({\n        borrowerId: borrowerId,\n        loanId: loanId,\n        propertyId: propertyId\n      });\n    }\n\n    return _Tasks.insert({\n      type: type,\n      assignedTo: relatedAssignedTo,\n      createdBy: createdBy,\n      borrowerId: borrowerId,\n      loanId: loanId,\n      propertyId: propertyId\n    });\n  };\n\n  this.insertUserTask = function (_ref2) {\n    var type = _ref2.type,\n        userId = _ref2.userId;\n\n    if (type !== _TASK_TYPE.ADD_ASSIGNED_TO) {\n      return undefined;\n    }\n\n    return _Tasks.insert({\n      type: type,\n      userId: userId\n    });\n  };\n\n  this.getRelatedDocAssignedTo = function (_ref3) {\n    var borrowerId = _ref3.borrowerId,\n        loanId = _ref3.loanId,\n        propertyId = _ref3.propertyId;\n\n    if (loanId) {\n      return _Loans.findOne(loanId).assignedTo;\n    }\n\n    if (borrowerId) {\n      return _Borrowers.findOne(borrowerId).assignedTo;\n    }\n\n    if (propertyId) {\n      return _Properties.findOne(propertyId).assignedTo;\n    }\n\n    return undefined;\n  };\n\n  this.remove = function (_ref4) {\n    var taskId = _ref4.taskId;\n    return _Tasks.remove(taskId);\n  };\n\n  this.update = function (_ref5) {\n    var taskId = _ref5.taskId,\n        task = _ref5.task;\n    return _Tasks.update(taskId, {\n      $set: task\n    });\n  };\n\n  this.complete = function (_ref6) {\n    var taskId = _ref6.taskId;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        status: _TASK_STATUS.COMPLETED,\n        completedAt: new Date()\n      }\n    });\n  };\n\n  this.completeByType = function (_ref7) {\n    var type = _ref7.type,\n        loanId = _ref7.loanId,\n        newStatus = _ref7.newStatus;\n\n    var taskToComplete = _Tasks.findOne({\n      loanId: loanId,\n      type: type,\n      status: _TASK_STATUS.ACTIVE\n    });\n\n    if (!taskToComplete) {\n      throw new _Meteor.Error(\"task couldn't be found\");\n    }\n\n    return _this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || _TASK_STATUS.COMPLETED,\n        completedAt: new Date()\n      }\n    });\n  };\n\n  this.changeStatus = function (_ref8) {\n    var taskId = _ref8.taskId,\n        newStatus = _ref8.newStatus;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        status: newStatus\n      }\n    });\n  };\n\n  this.changeAssignedTo = function (_ref9) {\n    var taskId = _ref9.taskId,\n        newAssignee = _ref9.newAssignee;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        assignedTo: newAssignee\n      }\n    });\n  };\n\n  this.isRelatedToUser = function (_ref10) {\n    var task = _ref10.task,\n        userId = _ref10.userId;\n\n    // if (task.userId === userId) {\n    //   return true;\n    // }\n    if (task.borrower && task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n\n    if (task.loan && task.loan.loanAssignee === userId) {\n      return true;\n    }\n\n    if (task.property && task.property.propertyAssignee === userId) {\n      return true;\n    }\n\n    return false;\n  };\n\n  this.assignAllTasksToAdmin = function (_ref11) {\n    var userId = _ref11.userId,\n        newAssignee = _ref11.newAssignee;\n    var unassignedTasks = unassignedTasksQuery.fetch();\n    console.log(unassignedTasks);\n    unassignedTasks.map(function (task) {\n      var isRelatedToUser = _this.isRelatedToUser({\n        task: task,\n        userId: userId\n      });\n\n      console.log(isRelatedToUser);\n\n      if (isRelatedToUser) {\n        var taskId = task._id;\n\n        _this.update({\n          taskId: taskId,\n          task: {\n            assignedTo: newAssignee\n          }\n        });\n      }\n\n      return task;\n    });\n  };\n};\n\nmodule.exportDefault(new TaskService());","map":{"version":3,"sources":["imports/core/api/tasks/TaskService.js"],"names":["Meteor","module","watch","require","v","Borrowers","Loans","Properties","Tasks","TASK_STATUS","TASK_TYPE","unassignedTasksQuery","default","truncateSync","TaskService","insert","type","borrowerId","loanId","propertyId","assignedTo","createdBy","ADD_ASSIGNED_TO","existingTask","findOne","status","ACTIVE","Error","relatedAssignedTo","getRelatedDocAssignedTo","insertUserTask","userId","undefined","remove","taskId","update","task","$set","complete","COMPLETED","completedAt","Date","completeByType","newStatus","taskToComplete","_id","changeStatus","changeAssignedTo","newAssignee","isRelatedToUser","borrower","borrowerAssignee","loan","loanAssignee","property","propertyAssignee","assignAllTasksToAdmin","unassignedTasks","fetch","console","log","map","exportDefault"],"mappings":"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","file":"imports/core/api/tasks/TaskService.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Borrowers, Loans, Properties, Tasks } from 'core/api';\nimport { TASK_STATUS, TASK_TYPE } from './tasksConstants';\nimport unassignedTasksQuery from 'core/api/tasks/queries/tasksUnassigned';\nimport { truncateSync } from 'fs';\n\nclass TaskService {\n  insert = ({\n    type,\n    borrowerId,\n    loanId,\n    propertyId,\n    assignedTo,\n    createdBy,\n  }) => {\n    if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n      const existingTask = Tasks.findOne({\n        type,\n        borrowerId,\n        loanId,\n        propertyId,\n        status: TASK_STATUS.ACTIVE,\n      });\n      if (existingTask) {\n        throw new Meteor.Error('duplicate active task');\n      }\n    }\n\n    let relatedAssignedTo = assignedTo;\n    if (!relatedAssignedTo) {\n      relatedAssignedTo = this.getRelatedDocAssignedTo({\n        borrowerId,\n        loanId,\n        propertyId,\n      });\n    }\n\n    return Tasks.insert({\n      type,\n      assignedTo: relatedAssignedTo,\n      createdBy,\n      borrowerId,\n      loanId,\n      propertyId,\n    });\n  };\n\n  insertUserTask = ({ type, userId }) => {\n    if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n      return undefined;\n    }\n\n    return Tasks.insert({\n      type,\n      userId,\n    });\n  };\n\n  getRelatedDocAssignedTo = ({ borrowerId, loanId, propertyId }) => {\n    if (loanId) {\n      return Loans.findOne(loanId).assignedTo;\n    }\n    if (borrowerId) {\n      return Borrowers.findOne(borrowerId).assignedTo;\n    }\n    if (propertyId) {\n      return Properties.findOne(propertyId).assignedTo;\n    }\n    return undefined;\n  };\n\n  remove = ({ taskId }) => Tasks.remove(taskId);\n\n  update = ({ taskId, task }) => Tasks.update(taskId, { $set: task });\n\n  complete = ({ taskId }) =>\n    this.update({\n      taskId,\n      task: {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n\n  completeByType = ({ type, loanId, newStatus }) => {\n    const taskToComplete = Tasks.findOne({\n      loanId,\n      type,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (!taskToComplete) {\n      throw new Meteor.Error(\"task couldn't be found\");\n    }\n\n    return this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n  };\n\n  changeStatus = ({ taskId, newStatus }) =>\n    this.update({ taskId, task: { status: newStatus } });\n\n  changeAssignedTo = ({ taskId, newAssignee }) =>\n    this.update({\n      taskId,\n      task: { assignedTo: newAssignee },\n    });\n\n  isRelatedToUser = ({ task, userId }) => {\n    // if (task.userId === userId) {\n    //   return true;\n    // }\n    if (task.borrower && task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n    if (task.loan && task.loan.loanAssignee === userId) {\n      return true;\n    }\n    if (task.property && task.property.propertyAssignee === userId) {\n      return true;\n    }\n    return false;\n  };\n\n  assignAllTasksToAdmin = ({ userId, newAssignee }) => {\n    const unassignedTasks = unassignedTasksQuery.fetch();\n    console.log(unassignedTasks);\n    unassignedTasks.map((task) => {\n      const isRelatedToUser = this.isRelatedToUser({ task, userId });\n      console.log(isRelatedToUser);\n      if (isRelatedToUser) {\n        const taskId = task._id;\n        this.update({\n          taskId,\n          task: { assignedTo: newAssignee },\n        });\n      }\n\n      return task;\n    });\n  };\n}\n\nexport default new TaskService();\n"]},"hash":"3554335b777b028f786bf4927f4d2a4e8d1a6ffd"}

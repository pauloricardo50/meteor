{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./base.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Link"}]},{"source":"./lib/smartArguments.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SmartArgs"}]}],"exports":{"exported":["LinkManyMeta"],"specifiers":[{"kind":"local","local":"LinkManyMeta","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"linkManyMeta"},"ignored":false,"code":"module.export({\n    default: () => LinkManyMeta\n});\nlet Link;\nmodule.watch(require(\"./base.js\"), {\n    default(v) {\n        Link = v;\n    }\n\n}, 0);\nlet SmartArgs;\nmodule.watch(require(\"./lib/smartArguments.js\"), {\n    default(v) {\n        SmartArgs = v;\n    }\n\n}, 1);\n\nclass LinkManyMeta extends Link {\n    clean() {\n        if (!this.object[this.linkStorageField]) {\n            this.object[this.linkStorageField] = [];\n        }\n    } /**\n       * @param what\n       * @param metadata\n       */\n\n    add(what, metadata = {}) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what, metadata);\n\n            return this;\n        }\n\n        const _ids = this.identifyIds(what, true);\n\n        this._validateIds(_ids);\n\n        let field = this.linkStorageField;\n        this.object[field] = this.object[field] || [];\n        let metadatas = [];\n\n        _.each(_ids, _id => {\n            let localMetadata = _.clone(metadata);\n\n            localMetadata._id = _id;\n            this.object[field].push(localMetadata);\n            metadatas.push(localMetadata);\n        });\n\n        let modifier = {\n            $addToSet: {\n                [field]: {\n                    $each: metadatas\n                }\n            }\n        };\n        this.linker.mainCollection.update(this.object._id, modifier);\n        return this;\n    } /**\n       * @param what\n       * @param extendMetadata\n       */\n\n    metadata(what, extendMetadata) {\n        if (this.isVirtual) {\n            this._virtualAction('metadata', what, extendMetadata);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n\n        if (what === undefined) {\n            return this.object[field];\n        }\n\n        if (_.isArray(what)) {\n            throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');\n        }\n\n        const _id = this.identifyId(what);\n\n        let existingMetadata = _.find(this.object[field], metadata => metadata._id == _id);\n\n        if (extendMetadata === undefined) {\n            return existingMetadata;\n        } else {\n            _.extend(existingMetadata, extendMetadata);\n\n            let subfield = field + '._id';\n            let subfieldUpdate = field + '.$';\n            this.linker.mainCollection.update({\n                _id: this.object._id,\n                [subfield]: _id\n            }, {\n                $set: {\n                    [subfieldUpdate]: existingMetadata\n                }\n            });\n        }\n\n        return this;\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n\n            return this;\n        }\n\n        const _ids = this.identifyIds(what);\n\n        let field = this.linkStorageField;\n        this.object[field] = _.filter(this.object[field], link => !_.contains(_ids, link._id));\n        let modifier = {\n            $pull: {\n                [field]: {\n                    $elemMatch: {\n                        _id: {\n                            $in: _ids\n                        }\n                    }\n                }\n            }\n        };\n        this.linker.mainCollection.update(this.object._id, modifier);\n        return this;\n    }\n\n    set(what, metadata) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what, metadata);\n\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n    unset(what) {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js"],"names":["module","export","default","LinkManyMeta","Link","watch","require","v","SmartArgs","clean","object","linkStorageField","add","what","metadata","isVirtual","_virtualAction","_ids","identifyIds","_validateIds","field","metadatas","_","each","_id","localMetadata","clone","push","modifier","$addToSet","$each","linker","mainCollection","update","extendMetadata","undefined","isArray","Meteor","Error","identifyId","existingMetadata","find","extend","subfield","subfieldUpdate","$set","remove","filter","link","contains","$pull","$elemMatch","$in","set","unset"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js.map","sourcesContent":["import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkManyMeta extends Link {\n    clean() {\n        if (!this.object[this.linkStorageField]) {\n            this.object[this.linkStorageField] = [];\n        }\n    }\n\n    /**\n     * @param what\n     * @param metadata\n     */\n    add(what, metadata = {}) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what, metadata);\n            return this;\n        }\n\n        const _ids = this.identifyIds(what, true);\n        this._validateIds(_ids);\n\n        let field = this.linkStorageField;\n\n        this.object[field] = this.object[field] || [];\n        let metadatas = [];\n\n        _.each(_ids, _id => {\n            let localMetadata = _.clone(metadata);\n            localMetadata._id = _id;\n\n            this.object[field].push(localMetadata);\n            metadatas.push(localMetadata);\n        });\n\n        let modifier = {\n            $addToSet: {\n                [field]: {$each: metadatas}\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    /**\n     * @param what\n     * @param extendMetadata\n     */\n    metadata(what, extendMetadata) {\n        if (this.isVirtual) {\n            this._virtualAction('metadata', what, extendMetadata);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n\n        if (what === undefined) {\n            return this.object[field];\n        }\n\n        if (_.isArray(what)) {\n            throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');\n        }\n\n        const _id = this.identifyId(what);\n\n        let existingMetadata = _.find(this.object[field], metadata => metadata._id == _id);\n        if (extendMetadata === undefined) {\n            return existingMetadata;\n        } else {\n            _.extend(existingMetadata, extendMetadata);\n            let subfield = field + '._id';\n            let subfieldUpdate = field + '.$';\n\n            this.linker.mainCollection.update({\n                _id: this.object._id,\n                [subfield]: _id\n            }, {\n               $set: {\n                   [subfieldUpdate]: existingMetadata\n               }\n            });\n        }\n\n        return this;\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        const _ids = this.identifyIds(what);\n        let field = this.linkStorageField;\n\n        this.object[field] = _.filter(this.object[field], link => !_.contains(_ids, link._id));\n\n        let modifier = {\n            $pull: {\n                [field]: {\n                    $elemMatch: {\n                        _id: {\n                            $in: _ids\n                        }\n                    }\n                }\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    set(what, metadata) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what, metadata);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n    unset(what) {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n}"]},"hash":"3cebd9139f823bac8ffb09819167e5a68a73a0e8"}

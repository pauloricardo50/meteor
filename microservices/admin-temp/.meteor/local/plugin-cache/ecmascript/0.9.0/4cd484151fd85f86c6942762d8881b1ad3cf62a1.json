{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-string-replace","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"reactStringReplace"}]},{"source":"../../arrays/tooltips","imported":["tooltips"],"specifiers":[{"kind":"named","imported":"tooltips","local":"tooltips"}]},{"source":"./TooltipOverlay","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TooltipOverlay"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/Translation/AutoTooltip.jsx","filenameRelative":"imports/core/components/Translation/AutoTooltip.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/Translation/AutoTooltip.jsx.map","sourceFileName":"imports/core/components/Translation/AutoTooltip.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"AutoTooltip"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function () {\n    function _default(v) {\n      React = v;\n    }\n\n    return _default;\n  }()\n}, 0);\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function () {\n    function _default(v) {\n      PropTypes = v;\n    }\n\n    return _default;\n  }()\n}, 1);\nvar reactStringReplace = void 0;\nmodule.watch(require(\"react-string-replace\"), {\n  \"default\": function () {\n    function _default(v) {\n      reactStringReplace = v;\n    }\n\n    return _default;\n  }()\n}, 2);\n\nvar _tooltips = void 0;\n\nmodule.watch(require(\"../../arrays/tooltips\"), {\n  tooltips: function () {\n    function tooltips(v) {\n      _tooltips = v;\n    }\n\n    return tooltips;\n  }()\n}, 3);\nvar TooltipOverlay = void 0;\nmodule.watch(require(\"./TooltipOverlay\"), {\n  \"default\": function () {\n    function _default(v) {\n      TooltipOverlay = v;\n    }\n\n    return _default;\n  }()\n}, 4);\n\nvar AutoTooltip = function () {\n  function AutoTooltip(props) {\n    var content = null;\n\n    if (!props.children) {\n      return null;\n    }\n\n    if (props.id) {\n      // If an id is given, get that specific tooltip and wrap it around the children\n      content = React.createElement(\n        TooltipOverlay,\n        (0, _extends3.default)({}, props, {\n          match: props.children\n        }),\n        props.children\n      );\n    } else if (typeof props.children !== 'string') {\n      // If no id is given and children is not a string, return\n      return props.children;\n    } else {\n      // If no id is given and children is a string,\n      // automatically replace all matching strings with tooltips\n      content = reactStringReplace(props.children, new RegExp(\"(\" + Object.keys(_tooltips(props.list)).join('|') + \")\", 'gi'), function (match, i) {\n        return React.createElement(\n          TooltipOverlay,\n          (0, _extends3.default)({}, props, {\n            key: i,\n            match: match\n          }),\n          match\n        );\n      });\n    }\n\n    return React.createElement(\n      \"span\",\n      null,\n      content\n    );\n  }\n\n  return AutoTooltip;\n}();\n\nAutoTooltip.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  list: PropTypes.string,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired\n};\nAutoTooltip.defaultProps = {\n  children: null,\n  list: 'general',\n  id: ''\n};\nmodule.exportDefault(AutoTooltip);","map":{"version":3,"sources":["imports/core/components/Translation/AutoTooltip.jsx"],"names":["React","module","watch","require","v","PropTypes","reactStringReplace","tooltips","TooltipOverlay","AutoTooltip","props","content","children","id","RegExp","Object","keys","list","join","match","i","propTypes","oneOfType","element","string","arrayOf","isRequired","defaultProps","exportDefault"],"mappings":";;;;;;;;AAAA,IAAIA,cAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACJ,cAAMI,CAAN;AAAQ;;AAApB;AAAA;AAAA,CAA9B,EAAoD,CAApD;AAAuD,IAAIC,kBAAJ;AAAcJ,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACC,kBAAUD,CAAV;AAAY;;AAAxB;AAAA;AAAA,CAAnC,EAA6D,CAA7D;AAAgE,IAAIE,2BAAJ;AAAuBL,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACE,2BAAmBF,CAAnB;AAAqB;;AAAjC;AAAA;AAAA,CAA7C,EAAgF,CAAhF;;AAAmF,IAAIG,kBAAJ;;AAAaN,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACI,UAAD;AAAA,sBAAUH,CAAV,EAAY;AAACG,kBAASH,CAAT;AAAW;;AAAxB;AAAA;AAAA,CAA9C,EAAwE,CAAxE;AAA2E,IAAII,uBAAJ;AAAmBP,OAAOC,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACI,uBAAeJ,CAAf;AAAiB;;AAA7B;AAAA;AAAA,CAAzC,EAAwE,CAAxE;;AAQpW,IAAMK;AAAc,WAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,QAAIC,UAAU,IAAd;;AAEA,QAAI,CAACD,MAAME,QAAX,EAAqB;AACnB,aAAO,IAAP;AACD;;AAED,QAAIF,MAAMG,EAAV,EAAc;AACZ;AACAF,gBACE;AAAC,sBAAD;AAAA,mCAAoBD,KAApB;AAA2B,iBAAOA,MAAME;AAAxC;AACGF,cAAME;AADT,OADF;AAKD,KAPD,MAOO,IAAI,OAAOF,MAAME,QAAb,KAA0B,QAA9B,EAAwC;AAC7C;AACA,aAAOF,MAAME,QAAb;AACD,KAHM,MAGA;AACL;AACA;AACAD,gBAAUL,mBACRI,MAAME,QADE,EAER,IAAIE,MAAJ,OAAeC,OAAOC,IAAP,CAAYT,UAASG,MAAMO,IAAf,CAAZ,EAAkCC,IAAlC,CAAuC,GAAvC,CAAf,QAA+D,IAA/D,CAFQ,EAGR,UAACC,KAAD,EAAQC,CAAR;AAAA,eACE;AAAC,wBAAD;AAAA,qCAAoBV,KAApB;AAA2B,iBAAKU,CAAhC;AAAmC,mBAAOD;AAA1C;AACGA;AADH,SADF;AAAA,OAHQ,CAAV;AASD;;AAED,WAAO;AAAA;AAAA;AAAOR;AAAP,KAAP;AACD;;AAhCK;AAAA,GAAN;;AAkCAF,YAAYY,SAAZ,GAAwB;AACtBT,YAAUP,UAAUiB,SAAV,CAAoB,CAACjB,UAAUkB,OAAX,EAAoBlB,UAAUmB,MAA9B,CAApB,CADY;AAEtBP,QAAMZ,UAAUmB,MAFM;AAGtBX,MAAIR,UAAUiB,SAAV,CAAoB,CACtBjB,UAAUmB,MADY,EAEtBnB,UAAUoB,OAAV,CAAkBpB,UAAUmB,MAA5B,CAFsB,CAApB,EAGDE;AANmB,CAAxB;AASAjB,YAAYkB,YAAZ,GAA2B;AACzBf,YAAU,IADe;AAEzBK,QAAM,SAFmB;AAGzBJ,MAAI;AAHqB,CAA3B;AAnDAZ,OAAO2B,aAAP,CAyDenB,WAzDf","file":"imports/core/components/Translation/AutoTooltip.jsx.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport reactStringReplace from 'react-string-replace';\n\nimport { tooltips } from 'core/arrays/tooltips';\nimport TooltipOverlay from './TooltipOverlay';\n\nconst AutoTooltip = (props) => {\n  let content = null;\n\n  if (!props.children) {\n    return null;\n  }\n\n  if (props.id) {\n    // If an id is given, get that specific tooltip and wrap it around the children\n    content = (\n      <TooltipOverlay {...props} match={props.children}>\n        {props.children}\n      </TooltipOverlay>\n    );\n  } else if (typeof props.children !== 'string') {\n    // If no id is given and children is not a string, return\n    return props.children;\n  } else {\n    // If no id is given and children is a string,\n    // automatically replace all matching strings with tooltips\n    content = reactStringReplace(\n      props.children,\n      new RegExp(`(${Object.keys(tooltips(props.list)).join('|')})`, 'gi'),\n      (match, i) => (\n        <TooltipOverlay {...props} key={i} match={match}>\n          {match}\n        </TooltipOverlay>\n      ),\n    );\n  }\n\n  return <span>{content}</span>;\n};\n\nAutoTooltip.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  list: PropTypes.string,\n  id: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]).isRequired,\n};\n\nAutoTooltip.defaultProps = {\n  children: null,\n  list: 'general',\n  id: '',\n};\n\nexport default AutoTooltip;\n"]},"hash":"4cd484151fd85f86c6942762d8881b1ad3cf62a1"}

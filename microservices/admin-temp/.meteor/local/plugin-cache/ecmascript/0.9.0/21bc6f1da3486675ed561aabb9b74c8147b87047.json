{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"..","imported":["Borrowers","Loans","Properties","Tasks"],"specifiers":[{"kind":"named","imported":"Borrowers","local":"Borrowers"},{"kind":"named","imported":"Loans","local":"Loans"},{"kind":"named","imported":"Properties","local":"Properties"},{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"./queries/tasksUnassigned","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"unassignedTasksQuery"}]},{"source":"../borrowers/queries/borrowerAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"borrowerAssignedToQuery"}]},{"source":"../loans/queries/loanAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"loanAssignedToQuery"}]},{"source":"../properties/queries/propertyAssignedTo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"propertyAssignedToQuery"}]},{"source":"./tasksConstants","imported":["TASK_STATUS","TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"},{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]},{"source":"fs","imported":["truncateSync"],"specifiers":[{"kind":"named","imported":"truncateSync","local":"truncateSync"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/tasks/TaskService.js","filenameRelative":"imports/core/api/tasks/TaskService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/tasks/TaskService.js.map","sourceFileName":"imports/core/api/tasks/TaskService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TaskService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function () {\n    function Meteor(v) {\n      _Meteor = v;\n    }\n\n    return Meteor;\n  }()\n}, 0);\n\nvar _Borrowers = void 0,\n    _Loans = void 0,\n    _Properties = void 0,\n    _Tasks = void 0;\n\nmodule.watch(require(\"..\"), {\n  Borrowers: function () {\n    function Borrowers(v) {\n      _Borrowers = v;\n    }\n\n    return Borrowers;\n  }(),\n  Loans: function () {\n    function Loans(v) {\n      _Loans = v;\n    }\n\n    return Loans;\n  }(),\n  Properties: function () {\n    function Properties(v) {\n      _Properties = v;\n    }\n\n    return Properties;\n  }(),\n  Tasks: function () {\n    function Tasks(v) {\n      _Tasks = v;\n    }\n\n    return Tasks;\n  }()\n}, 1);\nvar unassignedTasksQuery = void 0;\nmodule.watch(require(\"./queries/tasksUnassigned\"), {\n  \"default\": function () {\n    function _default(v) {\n      unassignedTasksQuery = v;\n    }\n\n    return _default;\n  }()\n}, 2);\nvar borrowerAssignedToQuery = void 0;\nmodule.watch(require(\"../borrowers/queries/borrowerAssignedTo\"), {\n  \"default\": function () {\n    function _default(v) {\n      borrowerAssignedToQuery = v;\n    }\n\n    return _default;\n  }()\n}, 3);\nvar loanAssignedToQuery = void 0;\nmodule.watch(require(\"../loans/queries/loanAssignedTo\"), {\n  \"default\": function () {\n    function _default(v) {\n      loanAssignedToQuery = v;\n    }\n\n    return _default;\n  }()\n}, 4);\nvar propertyAssignedToQuery = void 0;\nmodule.watch(require(\"../properties/queries/propertyAssignedTo\"), {\n  \"default\": function () {\n    function _default(v) {\n      propertyAssignedToQuery = v;\n    }\n\n    return _default;\n  }()\n}, 5);\n\nvar _TASK_STATUS = void 0,\n    _TASK_TYPE = void 0;\n\nmodule.watch(require(\"./tasksConstants\"), {\n  TASK_STATUS: function () {\n    function TASK_STATUS(v) {\n      _TASK_STATUS = v;\n    }\n\n    return TASK_STATUS;\n  }(),\n  TASK_TYPE: function () {\n    function TASK_TYPE(v) {\n      _TASK_TYPE = v;\n    }\n\n    return TASK_TYPE;\n  }()\n}, 6);\n\nvar _truncateSync = void 0;\n\nmodule.watch(require(\"fs\"), {\n  truncateSync: function () {\n    function truncateSync(v) {\n      _truncateSync = v;\n    }\n\n    return truncateSync;\n  }()\n}, 7);\n\nvar TaskService = function () {\n  function TaskService() {\n    var _this = this;\n\n    (0, _classCallCheck3.default)(this, TaskService);\n\n    this.insert = function (params) {\n      var type = params.type,\n          borrowerId = params.borrowerId,\n          loanId = params.loanId,\n          propertyId = params.propertyId,\n          assignedTo = params.assignedTo,\n          createdBy = params.createdBy;\n      console.log(params);\n\n      if (type !== _TASK_TYPE.ADD_ASSIGNED_TO) {\n        var existingTask = _Tasks.findOne({\n          type: type,\n          borrowerId: borrowerId,\n          loanId: loanId,\n          propertyId: propertyId,\n          status: _TASK_STATUS.ACTIVE\n        });\n\n        if (existingTask) {\n          throw new _Meteor.Error('duplicate active task');\n        }\n      }\n\n      var relatedAssignedTo = assignedTo;\n\n      if (!relatedAssignedTo) {\n        // some tasks may not be related to any doc,\n        // in that case no need for assignedTo field\n        if (borrowerId || loanId || propertyId) {\n          relatedAssignedTo = _this.getRelatedDocAssignedTo({\n            borrowerId: borrowerId,\n            loanId: loanId,\n            propertyId: propertyId\n          });\n        }\n      }\n\n      console.log(relatedAssignedTo);\n      return _Tasks.insert({\n        type: type,\n        assignedTo: relatedAssignedTo,\n        createdBy: createdBy,\n        borrowerId: borrowerId,\n        loanId: loanId,\n        propertyId: propertyId\n      });\n    };\n\n    this.insertNewUserTask = function (_ref) {\n      var type = _ref.type,\n          userId = _ref.userId;\n\n      if (type !== _TASK_TYPE.ADD_ASSIGNED_TO) {\n        return undefined;\n      }\n\n      return _Tasks.insert({\n        type: type,\n        userId: userId\n      });\n    };\n\n    this.getRelatedDocAssignedTo = function (_ref2) {\n      var borrowerId = _ref2.borrowerId,\n          loanId = _ref2.loanId,\n          propertyId = _ref2.propertyId;\n\n      if (loanId) {\n        return loanAssignedToQuery.clone({\n          loanId: loanId\n        }).fetch().assignedTo;\n      }\n\n      if (borrowerId) {\n        return borrowerAssignedToQuery.clone({\n          borrowerId: borrowerId\n        }).fetch().assignedTo;\n      }\n\n      if (propertyId) {\n        return propertyAssignedToQuery.clone({\n          propertyId: propertyId\n        }).fetch().assignedTo;\n      }\n\n      return undefined;\n    };\n\n    this.remove = function (_ref3) {\n      var taskId = _ref3.taskId;\n      return _Tasks.remove(taskId);\n    };\n\n    this.update = function (_ref4) {\n      var taskId = _ref4.taskId,\n          task = _ref4.task;\n      return _Tasks.update(taskId, {\n        $set: task\n      });\n    };\n\n    this.complete = function (_ref5) {\n      var taskId = _ref5.taskId;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          status: _TASK_STATUS.COMPLETED,\n          completedAt: new Date()\n        }\n      });\n    };\n\n    this.completeByType = function (_ref6) {\n      var type = _ref6.type,\n          loanId = _ref6.loanId,\n          newStatus = _ref6.newStatus;\n\n      var taskToComplete = _Tasks.findOne({\n        loanId: loanId,\n        type: type,\n        status: _TASK_STATUS.ACTIVE\n      });\n\n      if (!taskToComplete) {\n        throw new _Meteor.Error(\"task couldn't be found\");\n      }\n\n      return _this.update({\n        taskId: taskToComplete._id,\n        task: {\n          status: newStatus || _TASK_STATUS.COMPLETED,\n          completedAt: new Date()\n        }\n      });\n    };\n\n    this.changeStatus = function (_ref7) {\n      var taskId = _ref7.taskId,\n          newStatus = _ref7.newStatus;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          status: newStatus\n        }\n      });\n    };\n\n    this.changeAssignedTo = function (_ref8) {\n      var taskId = _ref8.taskId,\n          newAssignee = _ref8.newAssignee;\n      return _this.update({\n        taskId: taskId,\n        task: {\n          assignedTo: newAssignee\n        }\n      });\n    };\n\n    this.isRelatedToUser = function (_ref9) {\n      var task = _ref9.task,\n          userId = _ref9.userId;\n\n      if (task.userId && task.userId === userId) {\n        return true;\n      }\n\n      if (task.borrower && task.borrower.borrowerAssignee === userId) {\n        return true;\n      }\n\n      if (task.loan && task.loan.user._id === userId) {\n        return true;\n      }\n\n      if (task.property && task.property.propertyAssignee === userId) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.getRelatedTo = function (_ref10) {\n      var task = _ref10.task;\n\n      if (task.borrower) {\n        return task.borrower.user._id;\n      }\n\n      if (task.loan) {\n        return task.loan.user._id;\n      }\n\n      if (task.property) {\n        return task.property.user._id;\n      }\n\n      return undefined;\n    };\n\n    this.assignAllTasksToAdmin = function (_ref11) {\n      var userId = _ref11.userId,\n          newAssignee = _ref11.newAssignee;\n      var unassignedTasks = unassignedTasksQuery.fetch();\n      unassignedTasks.map(function (task) {\n        var isRelatedToUser = _this.isRelatedToUser({\n          task: task,\n          userId: userId\n        });\n\n        if (isRelatedToUser) {\n          var taskId = task._id;\n\n          _this.update({\n            taskId: taskId,\n            task: {\n              assignedTo: newAssignee\n            }\n          });\n        }\n\n        return task;\n      });\n    };\n  }\n\n  return TaskService;\n}();\n\nmodule.exportDefault(new TaskService());","map":{"version":3,"sources":["imports/core/api/tasks/TaskService.js"],"names":["Meteor","module","watch","require","v","Borrowers","Loans","Properties","Tasks","unassignedTasksQuery","borrowerAssignedToQuery","loanAssignedToQuery","propertyAssignedToQuery","TASK_STATUS","TASK_TYPE","truncateSync","TaskService","insert","params","type","borrowerId","loanId","propertyId","assignedTo","createdBy","console","log","ADD_ASSIGNED_TO","existingTask","findOne","status","ACTIVE","Error","relatedAssignedTo","getRelatedDocAssignedTo","insertNewUserTask","userId","undefined","clone","fetch","remove","taskId","update","task","$set","complete","COMPLETED","completedAt","Date","completeByType","newStatus","taskToComplete","_id","changeStatus","changeAssignedTo","newAssignee","isRelatedToUser","borrower","borrowerAssignee","loan","user","property","propertyAssignee","getRelatedTo","assignAllTasksToAdmin","unassignedTasks","map","exportDefault"],"mappings":"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","file":"imports/core/api/tasks/TaskService.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Borrowers, Loans, Properties, Tasks } from 'core/api';\nimport unassignedTasksQuery from 'core/api/tasks/queries/tasksUnassigned';\nimport borrowerAssignedToQuery from 'core/api/borrowers/queries/borrowerAssignedTo';\nimport loanAssignedToQuery from 'core/api/loans/queries/loanAssignedTo';\nimport propertyAssignedToQuery from 'core/api/properties/queries/propertyAssignedTo';\nimport { TASK_STATUS, TASK_TYPE } from './tasksConstants';\nimport { truncateSync } from 'fs';\n\nclass TaskService {\n  insert = (params) => {\n    const {\n      type,\n      borrowerId,\n      loanId,\n      propertyId,\n      assignedTo,\n      createdBy,\n    } = params;\n    console.log(params);\n    if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n      const existingTask = Tasks.findOne({\n        type,\n        borrowerId,\n        loanId,\n        propertyId,\n        status: TASK_STATUS.ACTIVE,\n      });\n      if (existingTask) {\n        throw new Meteor.Error('duplicate active task');\n      }\n    }\n\n    let relatedAssignedTo = assignedTo;\n    if (!relatedAssignedTo) {\n      // some tasks may not be related to any doc,\n      // in that case no need for assignedTo field\n      if (borrowerId || loanId || propertyId) {\n        relatedAssignedTo = this.getRelatedDocAssignedTo({\n          borrowerId,\n          loanId,\n          propertyId,\n        });\n      }\n    }\n    console.log(relatedAssignedTo);\n\n    return Tasks.insert({\n      type,\n      assignedTo: relatedAssignedTo,\n      createdBy,\n      borrowerId,\n      loanId,\n      propertyId,\n    });\n  };\n\n  insertNewUserTask = ({ type, userId }) => {\n    if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n      return undefined;\n    }\n\n    return Tasks.insert({\n      type,\n      userId,\n    });\n  };\n\n  getRelatedDocAssignedTo = ({ borrowerId, loanId, propertyId }) => {\n    if (loanId) {\n      return loanAssignedToQuery\n        .clone({\n          loanId,\n        })\n        .fetch().assignedTo;\n    }\n    if (borrowerId) {\n      return borrowerAssignedToQuery\n        .clone({\n          borrowerId,\n        })\n        .fetch().assignedTo;\n    }\n    if (propertyId) {\n      return propertyAssignedToQuery\n        .clone({\n          propertyId,\n        })\n        .fetch().assignedTo;\n    }\n    return undefined;\n  };\n\n  remove = ({ taskId }) => Tasks.remove(taskId);\n\n  update = ({ taskId, task }) => Tasks.update(taskId, { $set: task });\n\n  complete = ({ taskId }) =>\n    this.update({\n      taskId,\n      task: {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n\n  completeByType = ({ type, loanId, newStatus }) => {\n    const taskToComplete = Tasks.findOne({\n      loanId,\n      type,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (!taskToComplete) {\n      throw new Meteor.Error(\"task couldn't be found\");\n    }\n\n    return this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n  };\n\n  changeStatus = ({ taskId, newStatus }) =>\n    this.update({ taskId, task: { status: newStatus } });\n\n  changeAssignedTo = ({ taskId, newAssignee }) =>\n    this.update({\n      taskId,\n      task: { assignedTo: newAssignee },\n    });\n\n  isRelatedToUser = ({ task, userId }) => {\n    if (task.userId && task.userId === userId) {\n      return true;\n    }\n    if (task.borrower && task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n    if (task.loan && task.loan.user._id === userId) {\n      return true;\n    }\n    if (task.property && task.property.propertyAssignee === userId) {\n      return true;\n    }\n    return false;\n  };\n\n  getRelatedTo = ({ task }) => {\n    if (task.borrower) {\n      return task.borrower.user._id;\n    }\n    if (task.loan) {\n      return task.loan.user._id;\n    }\n    if (task.property) {\n      return task.property.user._id;\n    }\n    return undefined;\n  };\n\n  assignAllTasksToAdmin = ({ userId, newAssignee }) => {\n    const unassignedTasks = unassignedTasksQuery.fetch();\n    unassignedTasks.map((task) => {\n      const isRelatedToUser = this.isRelatedToUser({ task, userId });\n      if (isRelatedToUser) {\n        const taskId = task._id;\n        this.update({\n          taskId,\n          task: { assignedTo: newAssignee },\n        });\n      }\n\n      return task;\n    });\n  };\n}\n\nexport default new TaskService();\n"]},"hash":"21bc6f1da3486675ed561aabb9b74c8147b87047"}

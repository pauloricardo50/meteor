{"metadata":{"usedHelpers":["createClass","classCallCheck","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash.clonedeep","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"deepClone"}]}],"exports":{"exported":["NamedQueryBase"],"specifiers":[{"kind":"local","local":"NamedQueryBase","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js","filenameRelative":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"namedQuery.base"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n    \"default\": function () {\n        return NamedQueryBase;\n    }\n});\nvar deepClone = void 0;\nmodule.watch(require(\"lodash.clonedeep\"), {\n    \"default\": function (v) {\n        deepClone = v;\n    }\n}, 0);\n\nvar NamedQueryBase = function () {\n    function NamedQueryBase(name, collection, body) {\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        (0, _classCallCheck3.default)(this, NamedQueryBase);\n        this.isNamedQuery = true;\n        this.queryName = name;\n\n        if (_.isFunction(body)) {\n            this.resolver = body;\n        } else {\n            this.body = deepClone(body);\n        }\n\n        this.subscriptionHandle = null;\n        this.params = options.params || {};\n        this.options = options;\n        this.collection = collection;\n        this.isExposed = false;\n    }\n\n    NamedQueryBase.prototype.setParams = function () {\n        function setParams(params) {\n            this.params = _.extend({}, this.params, params);\n            return this;\n        }\n\n        return setParams;\n    }(); /**\n          * Validates the parameters\n          */\n\n    NamedQueryBase.prototype.doValidateParams = function () {\n        function doValidateParams(params) {\n            params = params || this.params;\n            var validateParams = this.options.validateParams;\n            if (!validateParams) return;\n\n            try {\n                this._validate(validateParams, params);\n            } catch (validationError) {\n                console.error(\"Invalid parameters supplied to the query \\\"\" + this.queryName + \"\\\"\\n\", validationError);\n                throw validationError; // rethrow\n            }\n        }\n\n        return doValidateParams;\n    }();\n\n    NamedQueryBase.prototype.clone = function () {\n        function clone(newParams) {\n            var params = _.extend({}, deepClone(this.params), newParams);\n\n            var clone = new this.constructor(this.queryName, this.collection, this.isResolver ? this.resolver : deepClone(this.body), (0, _extends3.default)({}, this.options, {\n                params: params\n            }));\n            clone.cacher = this.cacher;\n\n            if (this.exposeConfig) {\n                clone.exposeConfig = this.exposeConfig;\n            }\n\n            return clone;\n        }\n\n        return clone;\n    }(); /**\n          * @param {function|object} validator\n          * @param {object} params\n          * @private\n          */\n\n    NamedQueryBase.prototype._validate = function () {\n        function _validate(validator, params) {\n            if (_.isFunction(validator)) {\n                validator.call(null, params);\n            } else {\n                check(params, validator);\n            }\n        }\n\n        return _validate;\n    }();\n\n    (0, _createClass3.default)(NamedQueryBase, [{\n        key: \"name\",\n        get: function () {\n            return \"named_query_\" + this.queryName;\n        }\n    }, {\n        key: \"isResolver\",\n        get: function () {\n            return !!this.resolver;\n        }\n    }]);\n    return NamedQueryBase;\n}();","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js"],"names":["module","export","NamedQueryBase","deepClone","watch","require","v","name","collection","body","options","isNamedQuery","queryName","_","isFunction","resolver","subscriptionHandle","params","isExposed","setParams","extend","doValidateParams","validateParams","_validate","validationError","console","error","clone","newParams","constructor","isResolver","cacher","exposeConfig","validator","call","check"],"mappings":";;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAAC,eAAQ;AAAA,eAAIC,cAAJ;AAAA;AAAT,CAAd;AAA4C,IAAIC,kBAAJ;AAAcH,OAAOI,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAAA,yBAASC,CAAT,EAAW;AAACH,oBAAUG,CAAV;AAAY;AAAxB,CAAzC,EAAmE,CAAnE;;IAErCJ,c;AAGjB,4BAAYK,IAAZ,EAAkBC,UAAlB,EAA8BC,IAA9B,EAAkD;AAAA,YAAdC,OAAc,uEAAJ,EAAI;AAAA;AAAA,aAFlDC,YAEkD,GAFnC,IAEmC;AAC9C,aAAKC,SAAL,GAAiBL,IAAjB;;AAEA,YAAIM,EAAEC,UAAF,CAAaL,IAAb,CAAJ,EAAwB;AACpB,iBAAKM,QAAL,GAAgBN,IAAhB;AACH,SAFD,MAEO;AACH,iBAAKA,IAAL,GAAYN,UAAUM,IAAV,CAAZ;AACH;;AAED,aAAKO,kBAAL,GAA0B,IAA1B;AACA,aAAKC,MAAL,GAAcP,QAAQO,MAAR,IAAkB,EAAhC;AACA,aAAKP,OAAL,GAAeA,OAAf;AACA,aAAKF,UAAL,GAAkBA,UAAlB;AACA,aAAKU,SAAL,GAAiB,KAAjB;AACH;;6BAUDC,S;2BAAUF,M,EAAQ;AACd,iBAAKA,MAAL,GAAcJ,EAAEO,MAAF,CAAS,EAAT,EAAa,KAAKH,MAAlB,EAA0BA,MAA1B,CAAd;AAEA,mBAAO,IAAP;AACH;;;SAED;;;;6BAGAI,gB;kCAAiBJ,M,EAAQ;AACrBA,qBAASA,UAAU,KAAKA,MAAxB;AADqB,gBAGdK,cAHc,GAGI,KAAKZ,OAHT,CAGdY,cAHc;AAIrB,gBAAI,CAACA,cAAL,EAAqB;;AAErB,gBAAI;AACA,qBAAKC,SAAL,CAAeD,cAAf,EAA+BL,MAA/B;AACH,aAFD,CAEE,OAAOO,eAAP,EAAwB;AACtBC,wBAAQC,KAAR,iDAA2D,KAAKd,SAAhE,WAAgFY,eAAhF;AACA,sBAAMA,eAAN,CAFsB,CAEC;AAC1B;AACJ;;;;;6BAEDG,K;uBAAMC,S,EAAW;AACb,gBAAMX,SAASJ,EAAEO,MAAF,CAAS,EAAT,EAAajB,UAAU,KAAKc,MAAf,CAAb,EAAqCW,SAArC,CAAf;;AAEA,gBAAID,QAAQ,IAAI,KAAKE,WAAT,CACR,KAAKjB,SADG,EAER,KAAKJ,UAFG,EAGR,KAAKsB,UAAL,GAAkB,KAAKf,QAAvB,GAAkCZ,UAAU,KAAKM,IAAf,CAH1B,6BAKD,KAAKC,OALJ;AAMJO;AANI,eAAZ;AAUAU,kBAAMI,MAAN,GAAe,KAAKA,MAApB;;AACA,gBAAI,KAAKC,YAAT,EAAuB;AACnBL,sBAAMK,YAAN,GAAqB,KAAKA,YAA1B;AACH;;AAED,mBAAOL,KAAP;AACH;;;SAED;;;;;;6BAKAJ,S;2BAAUU,S,EAAWhB,M,EAAQ;AACzB,gBAAIJ,EAAEC,UAAF,CAAamB,SAAb,CAAJ,EAA6B;AACzBA,0BAAUC,IAAV,CAAe,IAAf,EAAqBjB,MAArB;AACH,aAFD,MAEO;AACHkB,sBAAMlB,MAAN,EAAcgB,SAAd;AACH;AACJ;;;;;;;yBA/DU;AACP,oCAAsB,KAAKrB,SAA3B;AACH;;;yBAEgB;AACb,mBAAO,CAAC,CAAC,KAAKG,QAAd;AACH","file":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js.map","sourcesContent":["import deepClone from 'lodash.clonedeep';\n\nexport default class NamedQueryBase {\n    isNamedQuery = true;\n\n    constructor(name, collection, body, options = {}) {\n        this.queryName = name;\n\n        if (_.isFunction(body)) {\n            this.resolver = body;\n        } else {\n            this.body = deepClone(body);\n        }\n\n        this.subscriptionHandle = null;\n        this.params = options.params || {};\n        this.options = options;\n        this.collection = collection;\n        this.isExposed = false;\n    }\n\n    get name() {\n        return `named_query_${this.queryName}`;\n    }\n\n    get isResolver() {\n        return !!this.resolver;\n    }\n\n    setParams(params) {\n        this.params = _.extend({}, this.params, params);\n\n        return this;\n    }\n\n    /**\n     * Validates the parameters\n     */\n    doValidateParams(params) {\n        params = params || this.params;\n\n        const {validateParams} = this.options;\n        if (!validateParams) return;\n\n        try {\n            this._validate(validateParams, params);\n        } catch (validationError) {\n            console.error(`Invalid parameters supplied to the query \"${this.queryName}\"\\n`, validationError);\n            throw validationError; // rethrow\n        }\n    }\n\n    clone(newParams) {\n        const params = _.extend({}, deepClone(this.params), newParams);\n\n        let clone = new this.constructor(\n            this.queryName,\n            this.collection,\n            this.isResolver ? this.resolver : deepClone(this.body),\n            {\n                ...this.options,\n                params,\n            }\n        );\n\n        clone.cacher = this.cacher;\n        if (this.exposeConfig) {\n            clone.exposeConfig = this.exposeConfig;\n        }\n\n        return clone;\n    }\n\n    /**\n     * @param {function|object} validator\n     * @param {object} params\n     * @private\n     */\n    _validate(validator, params) {\n        if (_.isFunction(validator)) {\n            validator.call(null, params)\n        } else {\n            check(params, validator)\n        }\n    }\n}"]},"hash":"65a88073a676b171b3232fea232521d6cd1060a6"}

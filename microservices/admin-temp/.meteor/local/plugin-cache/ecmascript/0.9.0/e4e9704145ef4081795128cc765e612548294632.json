{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","createClass","classCallCheck","defineProperty","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"../../utils/APIs","imported":["getLocations"],"specifiers":[{"kind":"named","imported":"getLocations","local":"getLocations"}]},{"source":"../../api/cleanMethods","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"cleanMethod"}]},{"source":"../AutoForm/ValidIcon","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ValidIcon"}]},{"source":"../AutoComplete","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AutoComplete"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/ZipAutoComplete/ZipAutoComplete.jsx","filenameRelative":"imports/core/components/ZipAutoComplete/ZipAutoComplete.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/ZipAutoComplete/ZipAutoComplete.jsx.map","sourceFileName":"imports/core/components/ZipAutoComplete/ZipAutoComplete.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ZipAutoComplete"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\");\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar React = void 0,\n    _Component = void 0;\n\nmodule.watch(require(\"react\"), {\n  default: function _default(v) {\n    React = v;\n  },\n  Component: function Component(v) {\n    _Component = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  default: function _default(v) {\n    PropTypes = v;\n  }\n}, 1);\n\nvar _getLocations = void 0;\n\nmodule.watch(require(\"../../utils/APIs\"), {\n  getLocations: function getLocations(v) {\n    _getLocations = v;\n  }\n}, 2);\nvar cleanMethod = void 0;\nmodule.watch(require(\"../../api/cleanMethods\"), {\n  default: function _default(v) {\n    cleanMethod = v;\n  }\n}, 3);\nvar ValidIcon = void 0;\nmodule.watch(require(\"../AutoForm/ValidIcon\"), {\n  default: function _default(v) {\n    ValidIcon = v;\n  }\n}, 4);\nvar AutoComplete = void 0;\nmodule.watch(require(\"../AutoComplete\"), {\n  default: function _default(v) {\n    AutoComplete = v;\n  }\n}, 5);\nvar styles = {\n  div: {\n    position: 'relative'\n  },\n  savingIcon: {\n    position: 'absolute',\n    top: 16,\n    right: -25\n  }\n};\n\nvar ZipAutoComplete = function (_Component2) {\n  (0, _inherits3.default)(ZipAutoComplete, _Component2);\n\n  function ZipAutoComplete(props) {\n    (0, _classCallCheck3.default)(this, ZipAutoComplete);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (ZipAutoComplete.__proto__ || Object.getPrototypeOf(ZipAutoComplete)).call(this));\n\n    _this.handleChange = function (event) {\n      return _this.setState({\n        searchText: event.target.value,\n        isValid: event.target.value === _this.state.searchText\n      }, _this.fetchResults);\n    };\n\n    _this.fetchResults = function () {\n      var searchText = _this.state.searchText;\n      var zipCode = searchText.slice(0, 4);\n\n      if (zipCode && zipCode.length === 4) {\n        _getLocations(zipCode).then(function (array) {\n          if (array && array.length) {\n            _this.setState({\n              data: array.map(function (city) {\n                return {\n                  value: zipCode + \" \" + city,\n                  label: zipCode + \" \" + city\n                };\n              })\n            });\n          } else {\n            _this.setState({\n              data: [{\n                label: '-',\n                value: '-'\n              }]\n            });\n          }\n        }).catch(console.log);\n      } else {\n        // Remove data, and save undefined values to DB if the input is empty\n        _this.setState({\n          data: [],\n          isValid: false\n        }, function () {\n          return !searchText && _this.saveValue();\n        });\n      }\n    };\n\n    _this.handleSelect = function (_ref) {\n      var value = _ref.value;\n\n      if (value !== '-') {\n        var zipCode = parseInt(value, 10);\n        var city = value.slice(5); // Set the text input\n\n        _this.setState({\n          searchText: value,\n          isValid: true\n        }, function () {\n          return _this.saveValue(zipCode, city);\n        });\n      }\n    };\n\n    _this.saveValue = function () {\n      var _object;\n\n      var zipCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var city = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var _this$props = _this.props,\n          updateFunc = _this$props.updateFunc,\n          docId = _this$props.docId,\n          savePath = _this$props.inputProps.componentProps.savePath; // Save data to DB\n\n      var object = (_object = {}, (0, _defineProperty3.default)(_object, savePath + \"zipCode\", zipCode), (0, _defineProperty3.default)(_object, savePath + \"city\", city), _object);\n      cleanMethod(updateFunc, {\n        object: object,\n        id: docId\n      }).then(function () {\n        return (// on success, set saving briefly to true,\n          // before setting it to false again to trigger icon\n          _this.setState({\n            errorText: '',\n            saving: true\n          }, _this.setState({\n            saving: false\n          }))\n        );\n      }).catch(function () {\n        // If there was an error, reset value to the backend value\n        _this.setState({\n          saving: false,\n          searchText: _this.props.initialValue\n        });\n      });\n    };\n\n    _this.handleBlur = function () {\n      // If the user enters random stuff in the input and blurs it out, remove\n      // content and save undefined values to DB\n      if (!_this.state.isValid) {\n        _this.setState({\n          searchText: ''\n        }, _this.saveValue);\n      }\n    };\n\n    _this.state = {\n      searchText: props.initialValue || '',\n      data: [],\n      saving: false,\n      isValid: !!props.initialValue\n    };\n    return _this;\n  } // Has to be done via event to accomodate react-autosuggest\n\n\n  (0, _createClass3.default)(ZipAutoComplete, [{\n    key: \"render\",\n    value: function render() {\n      var _state = this.state,\n          searchText = _state.searchText,\n          data = _state.data,\n          saving = _state.saving,\n          isValid = _state.isValid;\n      var _props = this.props,\n          _props$inputProps = _props.inputProps,\n          disabled = _props$inputProps.disabled,\n          style = _props$inputProps.style,\n          label = _props$inputProps.label,\n          placeholder = _props$inputProps.placeholder,\n          admin = _props.admin;\n      return React.createElement(\n        \"div\",\n        {\n          style: (0, _extends3.default)({}, styles.div, style)\n        },\n        React.createElement(AutoComplete, {\n          id: \"ZipAutoComplete\",\n          label: label,\n          value: searchText,\n          placeholder: placeholder,\n          onChange: this.handleChange,\n          onSelect: this.handleSelect,\n          onBlur: this.handleBlur,\n          suggestions: data,\n          disabled: disabled,\n          textFieldStyle: style,\n          style: style\n        }),\n        React.createElement(ValidIcon, {\n          saving: saving,\n          style: styles.savingIcon,\n          error: false // Only show the valid icon when isValid is true\n          ,\n          value: isValid === true ? true : undefined,\n          required: true,\n          hide: admin\n        })\n      );\n    }\n  }]);\n  return ZipAutoComplete;\n}(_Component);\n\nZipAutoComplete.propTypes = {\n  savePath: PropTypes.string.isRequired,\n  updateFunc: PropTypes.string.isRequired,\n  docId: PropTypes.string.isRequired,\n  initialValue: PropTypes.string,\n  inputProps: PropTypes.shape({\n    label: PropTypes.node.isRequired,\n    disabled: PropTypes.bool,\n    style: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nZipAutoComplete.defaultProps = {\n  initialValue: ''\n};\nmodule.exportDefault(ZipAutoComplete);","map":{"version":3,"sources":["imports/core/components/ZipAutoComplete/ZipAutoComplete.jsx"],"names":["React","Component","module","watch","require","default","v","PropTypes","getLocations","cleanMethod","ValidIcon","AutoComplete","styles","div","position","savingIcon","top","right","ZipAutoComplete","props","handleChange","setState","searchText","event","target","value","isValid","state","fetchResults","zipCode","slice","length","then","array","data","map","city","label","catch","console","log","saveValue","handleSelect","parseInt","updateFunc","docId","savePath","inputProps","componentProps","object","id","errorText","saving","initialValue","handleBlur","disabled","style","placeholder","admin","undefined","propTypes","string","isRequired","shape","node","bool","objectOf","any","defaultProps","exportDefault"],"mappings":"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","file":"imports/core/components/ZipAutoComplete/ZipAutoComplete.jsx.map","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getLocations } from 'core/utils/APIs';\nimport cleanMethod from 'core/api/cleanMethods';\n\nimport ValidIcon from 'core/components/AutoForm/ValidIcon';\nimport AutoComplete from '../AutoComplete';\n\nconst styles = {\n  div: {\n    position: 'relative',\n  },\n  savingIcon: {\n    position: 'absolute',\n    top: 16,\n    right: -25,\n  },\n};\n\nclass ZipAutoComplete extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      searchText: props.initialValue || '',\n      data: [],\n      saving: false,\n      isValid: !!props.initialValue,\n    };\n  }\n\n  // Has to be done via event to accomodate react-autosuggest\n  handleChange = event =>\n    this.setState(\n      {\n        searchText: event.target.value,\n        isValid: event.target.value === this.state.searchText,\n      },\n      this.fetchResults,\n    );\n\n  fetchResults = () => {\n    const { searchText } = this.state;\n    const zipCode = searchText.slice(0, 4);\n\n    if (zipCode && zipCode.length === 4) {\n      getLocations(zipCode)\n        .then((array) => {\n          if (array && array.length) {\n            this.setState({\n              data: array.map(city => ({\n                value: `${zipCode} ${city}`,\n                label: `${zipCode} ${city}`,\n              })),\n            });\n          } else {\n            this.setState({\n              data: [\n                {\n                  label: '-',\n                  value: '-',\n                },\n              ],\n            });\n          }\n        })\n        .catch(console.log);\n    } else {\n      // Remove data, and save undefined values to DB if the input is empty\n      this.setState(\n        { data: [], isValid: false },\n        () => !searchText && this.saveValue(),\n      );\n    }\n  };\n\n  handleSelect = ({ value }) => {\n    if (value !== '-') {\n      const zipCode = parseInt(value, 10);\n      const city = value.slice(5);\n      // Set the text input\n      this.setState({ searchText: value, isValid: true }, () =>\n        this.saveValue(zipCode, city));\n    }\n  };\n\n  saveValue = (zipCode = null, city = '') => {\n    const {\n      updateFunc,\n      docId,\n      inputProps: { componentProps: { savePath } },\n    } = this.props;\n\n    // Save data to DB\n    const object = {\n      [`${savePath}zipCode`]: zipCode,\n      [`${savePath}city`]: city,\n    };\n\n    cleanMethod(updateFunc, { object, id: docId })\n      .then(() =>\n        // on success, set saving briefly to true,\n        // before setting it to false again to trigger icon\n        this.setState(\n          { errorText: '', saving: true },\n          this.setState({ saving: false }),\n        ))\n      .catch(() => {\n        // If there was an error, reset value to the backend value\n        this.setState({\n          saving: false,\n          searchText: this.props.initialValue,\n        });\n      });\n  };\n\n  handleBlur = () => {\n    // If the user enters random stuff in the input and blurs it out, remove\n    // content and save undefined values to DB\n    if (!this.state.isValid) {\n      this.setState({ searchText: '' }, this.saveValue);\n    }\n  };\n\n  render() {\n    const { searchText, data, saving, isValid } = this.state;\n    const {\n      inputProps: { disabled, style, label, placeholder },\n      admin,\n    } = this.props;\n\n    return (\n      <div style={{ ...styles.div, ...style }}>\n        <AutoComplete\n          id=\"ZipAutoComplete\"\n          label={label}\n          value={searchText}\n          placeholder={placeholder}\n          onChange={this.handleChange}\n          onSelect={this.handleSelect}\n          onBlur={this.handleBlur}\n          suggestions={data}\n          disabled={disabled}\n          textFieldStyle={style}\n          style={style}\n        />\n        <ValidIcon\n          saving={saving}\n          style={styles.savingIcon}\n          error={false}\n          // Only show the valid icon when isValid is true\n          value={isValid === true ? true : undefined}\n          required\n          hide={admin}\n        />\n      </div>\n    );\n  }\n}\n\nZipAutoComplete.propTypes = {\n  savePath: PropTypes.string.isRequired,\n  updateFunc: PropTypes.string.isRequired,\n  docId: PropTypes.string.isRequired,\n  initialValue: PropTypes.string,\n  inputProps: PropTypes.shape({\n    label: PropTypes.node.isRequired,\n    disabled: PropTypes.bool,\n    style: PropTypes.objectOf(PropTypes.any),\n  }).isRequired,\n};\n\nZipAutoComplete.defaultProps = {\n  initialValue: '',\n};\n\nexport default ZipAutoComplete;\n"]},"hash":"e4e9704145ef4081795128cc765e612548294632"}

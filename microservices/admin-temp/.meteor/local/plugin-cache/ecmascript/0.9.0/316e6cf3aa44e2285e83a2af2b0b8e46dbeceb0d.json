{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./lib/smartArguments.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SmartArgs"}]},{"source":"../lib/createSearchFilters","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createSearchFilters"}]}],"exports":{"exported":["Link"],"specifiers":[{"kind":"local","local":"Link","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"base"},"ignored":false,"code":"module.export({\n    default: () => Link\n});\nlet SmartArgs;\nmodule.watch(require(\"./lib/smartArguments.js\"), {\n    default(v) {\n        SmartArgs = v;\n    }\n\n}, 0);\nlet createSearchFilters;\nmodule.watch(require(\"../lib/createSearchFilters\"), {\n    default(v) {\n        createSearchFilters = v;\n    }\n\n}, 1);\n\nclass Link {\n    get config() {\n        return this.linker.linkConfig;\n    }\n\n    get isVirtual() {\n        return this.linker.isVirtual();\n    }\n\n    constructor(linker, object, collection) {\n        this.linker = linker;\n        this.object = object;\n        this.linkedCollection = collection ? collection : linker.getLinkedCollection();\n\n        if (this.linker.isVirtual()) {\n            this.linkStorageField = this.config.relatedLinker.linkConfig.field;\n        } else {\n            this.linkStorageField = this.config.field;\n        }\n    } /**\n       * Gets the stored link information value\n       * @returns {*}\n       */\n\n    value() {\n        if (this.isVirtual) {\n            throw new Meteor.Error('You can only take the value from the main link.');\n        }\n\n        return this.object[this.linkStorageField];\n    } /**\n       * Finds linked data.\n       *\n       * @param filters\n       * @param options\n       * @returns {*}\n       * @param userId\n       */\n\n    find(filters = {}, options = {}, userId = undefined) {\n        let linker = this.linker;\n        const linkedCollection = this.linkedCollection;\n        let $metaFilters;\n\n        if (filters.$meta) {\n            $metaFilters = filters.$meta;\n            delete filters.$meta;\n        }\n\n        const searchFilters = createSearchFilters(this.object, this.linkStorageField, linker.strategy, linker.isVirtual(), $metaFilters);\n\n        let appliedFilters = _.extend({}, filters, searchFilters); // see https://github.com/cult-of-coders/grapher/issues/134\n        // happens due to recursive importing of modules\n        // TODO: find another way to do this\n\n\n        if (linkedCollection.find) {\n            return linkedCollection.find(appliedFilters, options, userId);\n        } else {\n            return linkedCollection.default.find(appliedFilters, options, userId);\n        }\n    } /**\n       * @param filters\n       * @param options\n       * @param others\n       * @returns {*|{content}|any}\n       */\n\n    fetch(filters, options, ...others) {\n        let result = this.find(filters, options, ...others).fetch();\n\n        if (this.linker.isOneResult()) {\n            return _.first(result);\n        }\n\n        return result;\n    } /**\n       * When we are dealing with multiple type relationships, $in would require an array. If the field value is null, it will fail\n       * We use clean to make it an empty array by default.\n       */\n\n    clean() {} /**\n                * Extracts a single id\n                */\n\n    identifyId(what, saveToDatabase) {\n        return SmartArgs.getId(what, {\n            saveToDatabase,\n            collection: this.linkedCollection\n        });\n    } /**\n       * Extracts the ids of object(s) or strings and returns an array.\n       */\n\n    identifyIds(what, saveToDatabase) {\n        return SmartArgs.getIds(what, {\n            saveToDatabase,\n            collection: this.linkedCollection\n        });\n    } /**\n       * Checks when linking data, if the ids are valid with the linked collection.\n       * @throws Meteor.Error\n       * @param ids\n       *\n       * @protected\n       */\n\n    _validateIds(ids) {\n        if (!_.isArray(ids)) {\n            ids = [ids];\n        }\n\n        const validIds = this.linkedCollection.find({\n            _id: {\n                $in: ids\n            }\n        }, {\n            fields: {\n                _id: 1\n            }\n        }).fetch().map(doc => doc._id);\n\n        if (validIds.length != ids.length) {\n            throw new Meteor.Error('not-found', `You tried to create links with non-existing id(s) inside \"${this.linkedCollection._name}\": ${_.difference(ids, validIds).join(', ')}`);\n        }\n    } /**\n       * This is for allowing commands such as set/unset/add/remove/metadata from the virtual link.\n       *\n       * @param action\n       * @param what\n       * @param metadata\n       *\n       * @protected\n       */\n\n    _virtualAction(action, what, metadata) {\n        const linker = this.linker.linkConfig.relatedLinker; // its an unset operation most likely.\n\n        if (what === undefined) {\n            const reversedLink = linker.createLink(this.fetch());\n            reversedLink.unset();\n            return;\n        }\n\n        if (!_.isArray(what)) {\n            what = [what];\n        }\n\n        what = _.map(what, element => {\n            if (!_.isObject(element)) {\n                return linker.mainCollection.findOne(element);\n            } else {\n                if (!element._id) {\n                    const elementId = linker.mainCollection.insert(element);\n\n                    _.extend(element, linker.mainCollection.findOne(elementId));\n                }\n\n                return element;\n            }\n        });\n        return _.map(what, element => {\n            const reversedLink = linker.createLink(element);\n\n            if (action == 'metadata') {\n                if (linker.isSingle()) {\n                    return reversedLink.metadata(metadata);\n                } else {\n                    return reversedLink.metadata(this.object, metadata);\n                }\n            } else if (action == 'add' || action == 'set') {\n                if (linker.isSingle()) {\n                    reversedLink.set(this.object, metadata);\n                } else {\n                    reversedLink.add(this.object, metadata);\n                }\n            } else {\n                if (linker.isSingle()) {\n                    reversedLink.unset();\n                } else {\n                    reversedLink.remove(this.object);\n                }\n            }\n        });\n    }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/base.js"],"names":["module","export","default","Link","SmartArgs","watch","require","v","createSearchFilters","config","linker","linkConfig","isVirtual","constructor","object","collection","linkedCollection","getLinkedCollection","linkStorageField","relatedLinker","field","value","Meteor","Error","find","filters","options","userId","undefined","$metaFilters","$meta","searchFilters","strategy","appliedFilters","_","extend","fetch","others","result","isOneResult","first","clean","identifyId","what","saveToDatabase","getId","identifyIds","getIds","_validateIds","ids","isArray","validIds","_id","$in","fields","map","doc","length","_name","difference","join","_virtualAction","action","metadata","reversedLink","createLink","unset","element","isObject","mainCollection","findOne","elementId","insert","isSingle","set","add","remove"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js.map","sourcesContent":["import SmartArgs from './lib/smartArguments.js';\nimport createSearchFilters from '../lib/createSearchFilters';\n\nexport default class Link {\n    get config() { return this.linker.linkConfig; }\n\n    get isVirtual() { return this.linker.isVirtual() }\n\n    constructor(linker, object, collection) {\n        this.linker = linker;\n        this.object = object;\n        this.linkedCollection = (collection) ? collection : linker.getLinkedCollection();\n\n        if (this.linker.isVirtual()) {\n            this.linkStorageField = this.config.relatedLinker.linkConfig.field;\n        } else {\n            this.linkStorageField = this.config.field;\n        }\n    }\n\n    /**\n     * Gets the stored link information value\n     * @returns {*}\n     */\n    value() {\n        if (this.isVirtual) {\n            throw new Meteor.Error('You can only take the value from the main link.');\n        }\n\n        return this.object[this.linkStorageField];\n    }\n\n    /**\n     * Finds linked data.\n     *\n     * @param filters\n     * @param options\n     * @returns {*}\n     * @param userId\n     */\n    find(filters = {}, options = {}, userId = undefined) {\n        let linker = this.linker;\n        const linkedCollection = this.linkedCollection;\n\n        let $metaFilters;\n        if (filters.$meta) {\n            $metaFilters = filters.$meta;\n            delete filters.$meta;\n        }\n\n        const searchFilters = createSearchFilters(\n            this.object,\n            this.linkStorageField,\n            linker.strategy,\n            linker.isVirtual(),\n            $metaFilters\n        );\n\n        let appliedFilters = _.extend({}, filters, searchFilters);\n\n        // see https://github.com/cult-of-coders/grapher/issues/134\n        // happens due to recursive importing of modules\n        // TODO: find another way to do this\n        if (linkedCollection.find) {\n            return linkedCollection.find(appliedFilters, options, userId)\n        } else {\n            return linkedCollection.default.find(appliedFilters, options, userId);\n        }\n    }\n\n    /**\n     * @param filters\n     * @param options\n     * @param others\n     * @returns {*|{content}|any}\n     */\n    fetch(filters, options, ...others) {\n        let result = this.find(filters, options, ...others).fetch();\n\n        if (this.linker.isOneResult()) {\n            return _.first(result);\n        }\n\n        return result;\n    }\n\n    /**\n     * When we are dealing with multiple type relationships, $in would require an array. If the field value is null, it will fail\n     * We use clean to make it an empty array by default.\n     */\n    clean() {}\n\n    /**\n     * Extracts a single id\n     */\n    identifyId(what, saveToDatabase) {\n        return SmartArgs.getId(what, {\n            saveToDatabase,\n            collection: this.linkedCollection\n        });\n    }\n\n    /**\n     * Extracts the ids of object(s) or strings and returns an array.\n     */\n    identifyIds(what, saveToDatabase) {\n        return SmartArgs.getIds(what, {\n            saveToDatabase,\n            collection: this.linkedCollection\n        });\n    }\n\n    /**\n     * Checks when linking data, if the ids are valid with the linked collection.\n     * @throws Meteor.Error\n     * @param ids\n     *\n     * @protected\n     */\n    _validateIds(ids) {\n        if (!_.isArray(ids)) {\n            ids = [ids];\n        }\n\n        const validIds = this.linkedCollection.find({\n            _id: {$in: ids}\n        }, {fields: {_id: 1}}).fetch().map(doc => doc._id);\n\n        if (validIds.length != ids.length) {\n            throw new Meteor.Error('not-found', `You tried to create links with non-existing id(s) inside \"${this.linkedCollection._name}\": ${_.difference(ids, validIds).join(', ')}`)\n        }\n    }\n\n    /**\n     * This is for allowing commands such as set/unset/add/remove/metadata from the virtual link.\n     *\n     * @param action\n     * @param what\n     * @param metadata\n     *\n     * @protected\n     */\n    _virtualAction(action, what, metadata) {\n        const linker = this.linker.linkConfig.relatedLinker;\n\n        // its an unset operation most likely.\n        if (what === undefined) {\n            const reversedLink = linker.createLink(this.fetch());\n            reversedLink.unset();\n\n            return;\n        }\n\n        if (!_.isArray(what)) {\n            what = [what];\n        }\n\n        what = _.map(what, element => {\n            if (!_.isObject(element)) {\n                return linker.mainCollection.findOne(element);\n            } else {\n                if (!element._id) {\n                    const elementId = linker.mainCollection.insert(element);\n                    _.extend(element, linker.mainCollection.findOne(elementId));\n                }\n\n                return element;\n            }\n        });\n\n        return _.map(what, element => {\n            const reversedLink = linker.createLink(element);\n\n            if (action == 'metadata') {\n                if (linker.isSingle()) {\n                    return reversedLink.metadata(metadata);\n                } else {\n                    return reversedLink.metadata(this.object, metadata);\n                }\n            } else if (action == 'add' || action == 'set') {\n                if (linker.isSingle()) {\n                    reversedLink.set(this.object, metadata);\n                } else {\n                    reversedLink.add(this.object, metadata);\n                }\n            } else {\n                if (linker.isSingle()) {\n                    reversedLink.unset();\n                } else {\n                    reversedLink.remove(this.object);\n                }\n            }\n        });\n    }\n}\n"]},"hash":"316e6cf3aa44e2285e83a2af2b0b8e46dbeceb0d"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/kadira:dochead/test/client.js","filenameRelative":"packages/kadira:dochead/test/client.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/kadira:dochead/test/client.js.map","sourceFileName":"packages/kadira:dochead/test/client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"client"},"ignored":false,"code":"Tinytest.add('Client - setTitle', function (test) {\n  const id = Random.id();\n  DocHead.setTitle(id);\n  test.equal(document.title, id);\n});\nTinytest.add('Client - getTitle', function (test) {\n  const id = Random.id();\n  document.title = id;\n  test.equal(DocHead.getTitle(), id);\n});\nTinytest.addAsync('Client - getTitle reactivity', function (test, next) {\n  // Call the next function after we reactively received 3 title changes (+1\n  // for Tracker.autorun immediate invocation).\n  const n = 3;\n\n  const titleChanged = _.after(n + 1, next);\n\n  Tracker.autorun(() => {\n    DocHead.getTitle();\n    titleChanged();\n  });\n\n  _.times(n, () => {\n    const id = Random.id();\n    DocHead.setTitle(id);\n    Tracker.flush();\n  });\n});\nTinytest.add('Client - addMeta', function (test) {\n  const metaInfo = {\n    name: \"description\",\n    content: \"awesome content\"\n  };\n  DocHead.addMeta(metaInfo);\n  const metaDom = document.querySelectorAll('meta[name=description]')[0];\n  test.equal(metaDom.getAttribute('name'), metaInfo.name);\n  test.equal(metaDom.getAttribute('content'), metaInfo.content);\n});\nTinytest.add('Client - addLdJsonScript', function (test, done) {\n  const snippet = {\n    '@context': 'http://schema.org',\n    '@type': 'Organization',\n    url: 'http://www.example.com',\n    logo: 'http://www.example.com/images/logo.png'\n  };\n  DocHead.addLdJsonScript(snippet);\n  const tag = document.querySelectorAll('script[dochead=\"1\"]')[0];\n  const obj = JSON.parse(tag.innerHTML);\n  test.equal(obj, snippet);\n});\nTinytest.add('Client - remove exising meta tags', function (test) {\n  const metaInfo = {\n    name: \"description\",\n    content: \"awesome content\"\n  };\n  DocHead.addMeta(metaInfo);\n  DocHead.removeDocHeadAddedTags();\n  metaInfo.content = \"nice one\";\n  DocHead.addMeta(metaInfo);\n  const metaDom = document.querySelectorAll('meta[name=description]');\n  const metaDomSingle = metaDom[0];\n  test.equal(metaDomSingle.getAttribute('name'), metaInfo.name);\n  test.equal(metaDomSingle.getAttribute('content'), metaInfo.content); // Only have the last one, even we add the same meta twice\n  // DocHead differenciate meta by name\n  // If not provided, it simply ignore them\n\n  test.equal(metaDom.length, 1);\n});\nTinytest.addAsync('Client - loadScript', function (test, done) {\n  const scriptUrl = '/packages/local-test_kadira_dochead/test/fakescript.js';\n  test.equal(window.fakeScriptLoaded, undefined);\n  DocHead.loadScript(scriptUrl, function () {\n    test.equal(window.fakeScriptLoaded, true);\n    done();\n  });\n});","map":{"version":3,"sources":["packages/kadira:dochead/test/client.js"],"names":["Tinytest","add","test","id","Random","DocHead","setTitle","equal","document","title","getTitle","addAsync","next","n","titleChanged","_","after","Tracker","autorun","times","flush","metaInfo","name","content","addMeta","metaDom","querySelectorAll","getAttribute","done","snippet","url","logo","addLdJsonScript","tag","obj","JSON","parse","innerHTML","removeDocHeadAddedTags","metaDomSingle","length","scriptUrl","window","fakeScriptLoaded","undefined","loadScript"],"mappings":"AAAAA,SAASC,GAAT,CAAa,mBAAb,EAAkC,UAASC,IAAT,EAAe;AAC/C,QAAMC,KAAKC,OAAOD,EAAP,EAAX;AACAE,UAAQC,QAAR,CAAiBH,EAAjB;AACAD,OAAKK,KAAL,CAAWC,SAASC,KAApB,EAA2BN,EAA3B;AACD,CAJD;AAMAH,SAASC,GAAT,CAAa,mBAAb,EAAkC,UAASC,IAAT,EAAe;AAC/C,QAAMC,KAAKC,OAAOD,EAAP,EAAX;AACAK,WAASC,KAAT,GAAiBN,EAAjB;AACAD,OAAKK,KAAL,CAAWF,QAAQK,QAAR,EAAX,EAA+BP,EAA/B;AACD,CAJD;AAMAH,SAASW,QAAT,CAAkB,8BAAlB,EAAkD,UAAST,IAAT,EAAeU,IAAf,EAAqB;AACrE;AACA;AACA,QAAMC,IAAI,CAAV;;AACA,QAAMC,eAAeC,EAAEC,KAAF,CAAQH,IAAI,CAAZ,EAAeD,IAAf,CAArB;;AACAK,UAAQC,OAAR,CAAgB,MAAM;AACpBb,YAAQK,QAAR;AACAI;AACD,GAHD;;AAIAC,IAAEI,KAAF,CAAQN,CAAR,EAAW,MAAM;AACf,UAAMV,KAAKC,OAAOD,EAAP,EAAX;AACAE,YAAQC,QAAR,CAAiBH,EAAjB;AACAc,YAAQG,KAAR;AACD,GAJD;AAKD,CAdD;AAiBApB,SAASC,GAAT,CAAa,kBAAb,EAAiC,UAASC,IAAT,EAAe;AAC9C,QAAMmB,WAAW;AAACC,UAAM,aAAP;AAAsBC,aAAS;AAA/B,GAAjB;AACAlB,UAAQmB,OAAR,CAAgBH,QAAhB;AACA,QAAMI,UAAUjB,SAASkB,gBAAT,CAA0B,wBAA1B,EAAoD,CAApD,CAAhB;AACAxB,OAAKK,KAAL,CAAWkB,QAAQE,YAAR,CAAqB,MAArB,CAAX,EAAyCN,SAASC,IAAlD;AACApB,OAAKK,KAAL,CAAWkB,QAAQE,YAAR,CAAqB,SAArB,CAAX,EAA4CN,SAASE,OAArD;AACD,CAND;AAQAvB,SAASC,GAAT,CAAa,0BAAb,EAAyC,UAASC,IAAT,EAAe0B,IAAf,EAAqB;AAC5D,QAAMC,UAAU;AACd,gBAAY,mBADE;AAEd,aAAS,cAFK;AAGdC,SAAK,wBAHS;AAIdC,UAAM;AAJQ,GAAhB;AAMA1B,UAAQ2B,eAAR,CAAwBH,OAAxB;AACA,QAAMI,MAAMzB,SAASkB,gBAAT,CAA0B,qBAA1B,EAAiD,CAAjD,CAAZ;AACA,QAAMQ,MAAMC,KAAKC,KAAL,CAAWH,IAAII,SAAf,CAAZ;AACAnC,OAAKK,KAAL,CAAW2B,GAAX,EAAgBL,OAAhB;AACD,CAXD;AAaA7B,SAASC,GAAT,CAAa,mCAAb,EAAkD,UAASC,IAAT,EAAe;AAC/D,QAAMmB,WAAW;AAACC,UAAM,aAAP;AAAsBC,aAAS;AAA/B,GAAjB;AACAlB,UAAQmB,OAAR,CAAgBH,QAAhB;AAEAhB,UAAQiC,sBAAR;AAEAjB,WAASE,OAAT,GAAmB,UAAnB;AACAlB,UAAQmB,OAAR,CAAgBH,QAAhB;AAEA,QAAMI,UAAUjB,SAASkB,gBAAT,CAA0B,wBAA1B,CAAhB;AACA,QAAMa,gBAAgBd,QAAQ,CAAR,CAAtB;AACAvB,OAAKK,KAAL,CAAWgC,cAAcZ,YAAd,CAA2B,MAA3B,CAAX,EAA+CN,SAASC,IAAxD;AACApB,OAAKK,KAAL,CAAWgC,cAAcZ,YAAd,CAA2B,SAA3B,CAAX,EAAkDN,SAASE,OAA3D,EAZ+D,CAc/D;AACA;AACA;;AACArB,OAAKK,KAAL,CAAWkB,QAAQe,MAAnB,EAA2B,CAA3B;AACD,CAlBD;AAoBAxC,SAASW,QAAT,CAAkB,qBAAlB,EAAyC,UAAST,IAAT,EAAe0B,IAAf,EAAqB;AAC5D,QAAMa,YAAY,wDAAlB;AACAvC,OAAKK,KAAL,CAAWmC,OAAOC,gBAAlB,EAAoCC,SAApC;AACAvC,UAAQwC,UAAR,CAAmBJ,SAAnB,EAA8B,YAAW;AACvCvC,SAAKK,KAAL,CAAWmC,OAAOC,gBAAlB,EAAoC,IAApC;AACAf;AACD,GAHD;AAID,CAPD","file":"packages/kadira:dochead/test/client.js.map","sourcesContent":["Tinytest.add('Client - setTitle', function(test) {\n  const id = Random.id();\n  DocHead.setTitle(id);\n  test.equal(document.title, id);\n});\n\nTinytest.add('Client - getTitle', function(test) {\n  const id = Random.id();\n  document.title = id;\n  test.equal(DocHead.getTitle(), id);\n});\n\nTinytest.addAsync('Client - getTitle reactivity', function(test, next) {\n  // Call the next function after we reactively received 3 title changes (+1\n  // for Tracker.autorun immediate invocation).\n  const n = 3;\n  const titleChanged = _.after(n + 1, next);\n  Tracker.autorun(() => {\n    DocHead.getTitle();\n    titleChanged();\n  });\n  _.times(n, () => {\n    const id = Random.id();\n    DocHead.setTitle(id);\n    Tracker.flush();\n  });\n});\n\n\nTinytest.add('Client - addMeta', function(test) {\n  const metaInfo = {name: \"description\", content: \"awesome content\"};\n  DocHead.addMeta(metaInfo);\n  const metaDom = document.querySelectorAll('meta[name=description]')[0];\n  test.equal(metaDom.getAttribute('name'), metaInfo.name);\n  test.equal(metaDom.getAttribute('content'), metaInfo.content);\n});\n\nTinytest.add('Client - addLdJsonScript', function(test, done) {\n  const snippet = {\n    '@context': 'http://schema.org',\n    '@type': 'Organization',\n    url: 'http://www.example.com',\n    logo: 'http://www.example.com/images/logo.png'\n  };\n  DocHead.addLdJsonScript(snippet);\n  const tag = document.querySelectorAll('script[dochead=\"1\"]')[0];\n  const obj = JSON.parse(tag.innerHTML);\n  test.equal(obj, snippet);\n});\n\nTinytest.add('Client - remove exising meta tags', function(test) {\n  const metaInfo = {name: \"description\", content: \"awesome content\"};\n  DocHead.addMeta(metaInfo);\n\n  DocHead.removeDocHeadAddedTags();\n\n  metaInfo.content = \"nice one\";\n  DocHead.addMeta(metaInfo);\n\n  const metaDom = document.querySelectorAll('meta[name=description]');\n  const metaDomSingle = metaDom[0];\n  test.equal(metaDomSingle.getAttribute('name'), metaInfo.name);\n  test.equal(metaDomSingle.getAttribute('content'), metaInfo.content);\n\n  // Only have the last one, even we add the same meta twice\n  // DocHead differenciate meta by name\n  // If not provided, it simply ignore them\n  test.equal(metaDom.length, 1);\n});\n\nTinytest.addAsync('Client - loadScript', function(test, done) {\n  const scriptUrl = '/packages/local-test_kadira_dochead/test/fakescript.js';\n  test.equal(window.fakeScriptLoaded, undefined);\n  DocHead.loadScript(scriptUrl, function() {\n    test.equal(window.fakeScriptLoaded, true);\n    done();\n  });\n});\n"]},"hash":"bc93a0930c9f5c94a961ee9be6f3c8ed852c3d68"}

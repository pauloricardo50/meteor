{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"../query/counts/countSubscription","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"CountSubscription"}]},{"source":"../query/lib/createGraph.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createGraph"}]},{"source":"../query/lib/recursiveFetch.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"recursiveFetch"}]},{"source":"../query/lib/prepareForProcess.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"prepareForProcess"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"../query/lib/callWithPromise","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"callWithPromise"}]},{"source":"./namedQuery.base","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Base"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.client.js","filenameRelative":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.client.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.client.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"namedQuery.client"},"ignored":false,"code":"var _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar CountSubscription = void 0;\nmodule.watch(require(\"../query/counts/countSubscription\"), {\n    \"default\": function (v) {\n        CountSubscription = v;\n    }\n}, 0);\nvar createGraph = void 0;\nmodule.watch(require(\"../query/lib/createGraph.js\"), {\n    \"default\": function (v) {\n        createGraph = v;\n    }\n}, 1);\nvar recursiveFetch = void 0;\nmodule.watch(require(\"../query/lib/recursiveFetch.js\"), {\n    \"default\": function (v) {\n        recursiveFetch = v;\n    }\n}, 2);\nvar prepareForProcess = void 0;\nmodule.watch(require(\"../query/lib/prepareForProcess.js\"), {\n    \"default\": function (v) {\n        prepareForProcess = v;\n    }\n}, 3);\n\nvar _ = void 0;\n\nmodule.watch(require(\"meteor/underscore\"), {\n    _: function (v) {\n        _ = v;\n    }\n}, 4);\nvar callWithPromise = void 0;\nmodule.watch(require(\"../query/lib/callWithPromise\"), {\n    \"default\": function (v) {\n        callWithPromise = v;\n    }\n}, 5);\nvar Base = void 0;\nmodule.watch(require(\"./namedQuery.base\"), {\n    \"default\": function (v) {\n        Base = v;\n    }\n}, 6);\nmodule.exportDefault(function (_Base) {\n    (0, _inherits3.default)(_class, _Base);\n\n    function _class() {\n        (0, _classCallCheck3.default)(this, _class);\n        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n    }\n\n    /**\n     * Subscribe\n     *\n     * @param callback\n     * @returns {null|any|*}\n     */_class.prototype.subscribe = function () {\n        function subscribe(callback) {\n            if (this.isResolver) {\n                throw new Meteor.Error('not-allowed', \"You cannot subscribe to a resolver query\");\n            }\n\n            this.subscriptionHandle = Meteor.subscribe(this.name, this.params, callback);\n            return this.subscriptionHandle;\n        }\n\n        return subscribe;\n    }(); /**\n          * Subscribe to the counts for this query\n          *\n          * @param callback\n          * @returns {Object}\n          */\n\n    _class.prototype.subscribeCount = function () {\n        function subscribeCount(callback) {\n            if (this.isResolver) {\n                throw new Meteor.Error('not-allowed', \"You cannot subscribe to a resolver query\");\n            }\n\n            if (!this._counter) {\n                this._counter = new CountSubscription(this);\n            }\n\n            return this._counter.subscribe(this.params, callback);\n        }\n\n        return subscribeCount;\n    }(); /**\n          * Unsubscribe if an existing subscription exists\n          */\n\n    _class.prototype.unsubscribe = function () {\n        function unsubscribe() {\n            if (this.subscriptionHandle) {\n                this.subscriptionHandle.stop();\n            }\n\n            this.subscriptionHandle = null;\n        }\n\n        return unsubscribe;\n    }(); /**\n          * Unsubscribe to the counts if a subscription exists.\n          */\n\n    _class.prototype.unsubscribeCount = function () {\n        function unsubscribeCount() {\n            if (this._counter) {\n                this._counter.unsubscribe();\n\n                this._counter = null;\n            }\n        }\n\n        return unsubscribeCount;\n    }(); /**\n          * Fetches elements in sync using promises\n          * @return {*}\n          */\n\n    _class.prototype.fetchSync = function () {\n        function fetchSync() {\n            return _regenerator2.default.async(function () {\n                function fetchSync$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                if (!this.subscriptionHandle) {\n                                    _context.next = 2;\n                                    break;\n                                }\n\n                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n\n                            case 2:\n                                _context.next = 4;\n                                return _regenerator2.default.awrap(callWithPromise(this.name, prepareForProcess(this.body, this.params)));\n\n                            case 4:\n                                return _context.abrupt(\"return\", _context.sent);\n\n                            case 5:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }\n\n                return fetchSync$;\n            }(), null, this);\n        }\n\n        return fetchSync;\n    }(); /**\n          * Fetches one element in sync\n          * @return {*}\n          */\n\n    _class.prototype.fetchOneSync = function () {\n        function fetchOneSync() {\n            return _regenerator2.default.async(function () {\n                function fetchOneSync$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                _context2.t0 = _;\n                                _context2.next = 3;\n                                return _regenerator2.default.awrap(this.fetchSync());\n\n                            case 3:\n                                _context2.t1 = _context2.sent;\n                                return _context2.abrupt(\"return\", _context2.t0.first.call(_context2.t0, _context2.t1));\n\n                            case 5:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }\n\n                return fetchOneSync$;\n            }(), null, this);\n        }\n\n        return fetchOneSync;\n    }(); /**\n          * Retrieves the data.\n          * @param callbackOrOptions\n          * @returns {*}\n          */\n\n    _class.prototype.fetch = function () {\n        function fetch(callbackOrOptions) {\n            if (!this.subscriptionHandle) {\n                return this._fetchStatic(callbackOrOptions);\n            } else {\n                return this._fetchReactive(callbackOrOptions);\n            }\n        }\n\n        return fetch;\n    }(); /**\n          * @param args\n          * @returns {*}\n          */\n\n    _class.prototype.fetchOne = function () {\n        function fetchOne() {\n            if (!this.subscriptionHandle) {\n                var callback = arguments.length <= 0 ? undefined : arguments[0];\n\n                if (!_.isFunction(callback)) {\n                    throw new Meteor.Error('You did not provide a valid callback');\n                }\n\n                this.fetch(function (err, res) {\n                    callback(err, res ? _.first(res) : null);\n                });\n            } else {\n                return _.first(this.fetch.apply(this, arguments));\n            }\n        }\n\n        return fetchOne;\n    }(); /**\n          * Gets the count of matching elements in sync.\n          * @returns {any}\n          */\n\n    _class.prototype.getCountSync = function () {\n        function getCountSync() {\n            return _regenerator2.default.async(function () {\n                function getCountSync$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                if (!this._counter) {\n                                    _context3.next = 2;\n                                    break;\n                                }\n\n                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n\n                            case 2:\n                                _context3.next = 4;\n                                return _regenerator2.default.awrap(callWithPromise(this.name + '.count', prepareForProcess(this.body, this.params)));\n\n                            case 4:\n                                return _context3.abrupt(\"return\", _context3.sent);\n\n                            case 5:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }\n\n                return getCountSync$;\n            }(), null, this);\n        }\n\n        return getCountSync;\n    }(); /**\n          * Gets the count of matching elements.\n          * @param callback\n          * @returns {any}\n          */\n\n    _class.prototype.getCount = function () {\n        function getCount(callback) {\n            if (this._counter) {\n                return this._counter.getCount();\n            } else {\n                if (!callback) {\n                    throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the count or subscribe first.');\n                } else {\n                    return Meteor.call(this.name + '.count', this.params, callback);\n                }\n            }\n        }\n\n        return getCount;\n    }(); /**\n          * Fetching non-reactive queries\n          * @param callback\n          * @private\n          */\n\n    _class.prototype._fetchStatic = function () {\n        function _fetchStatic(callback) {\n            if (!callback) {\n                throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the data or subscribe first.');\n            }\n\n            Meteor.call(this.name, this.params, callback);\n        }\n\n        return _fetchStatic;\n    }(); /**\n          * Fetching when we've got an active publication\n          *\n          * @param options\n          * @returns {*}\n          * @private\n          */\n\n    _class.prototype._fetchReactive = function () {\n        function _fetchReactive() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var body = this.body;\n\n            if (this.params.$body) {\n                body = intersectDeep(body, this.params.$body);\n            }\n\n            body = prepareForProcess(body, this.params);\n\n            if (!options.allowSkip && body.$options && body.$options.skip) {\n                delete body.$options.skip;\n            }\n\n            return recursiveFetch(createGraph(this.collection, body));\n        }\n\n        return _fetchReactive;\n    }();\n\n    return _class;\n}(Base));","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/namedQuery/namedQuery.client.js"],"names":["CountSubscription","module","watch","require","v","createGraph","recursiveFetch","prepareForProcess","_","callWithPromise","Base","exportDefault","subscribe","callback","isResolver","Meteor","Error","subscriptionHandle","name","params","subscribeCount","_counter","unsubscribe","stop","unsubscribeCount","fetchSync","body","fetchOneSync","first","fetch","callbackOrOptions","_fetchStatic","_fetchReactive","fetchOne","isFunction","err","res","getCountSync","getCount","call","options","$body","intersectDeep","allowSkip","$options","skip","collection"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.client.js.map","sourcesContent":["import CountSubscription from '../query/counts/countSubscription';\nimport createGraph from '../query/lib/createGraph.js';\nimport recursiveFetch from '../query/lib/recursiveFetch.js';\nimport prepareForProcess from '../query/lib/prepareForProcess.js';\nimport { _ } from 'meteor/underscore';\nimport callWithPromise from '../query/lib/callWithPromise';\nimport Base from './namedQuery.base';\n\nexport default class extends Base {\n    /**\n     * Subscribe\n     *\n     * @param callback\n     * @returns {null|any|*}\n     */\n    subscribe(callback) {\n        if (this.isResolver) {\n            throw new Meteor.Error('not-allowed', `You cannot subscribe to a resolver query`);\n        }\n\n        this.subscriptionHandle = Meteor.subscribe(\n            this.name,\n            this.params,\n            callback\n        );\n\n        return this.subscriptionHandle;\n    }\n\n    /**\n     * Subscribe to the counts for this query\n     *\n     * @param callback\n     * @returns {Object}\n     */\n    subscribeCount(callback) {\n        if (this.isResolver) {\n            throw new Meteor.Error('not-allowed', `You cannot subscribe to a resolver query`);\n        }\n\n        if (!this._counter) {\n            this._counter = new CountSubscription(this);\n        }\n\n        return this._counter.subscribe(this.params, callback);\n    }\n\n    /**\n     * Unsubscribe if an existing subscription exists\n     */\n    unsubscribe() {\n        if (this.subscriptionHandle) {\n            this.subscriptionHandle.stop();\n        }\n\n        this.subscriptionHandle = null;\n    }\n\n    /**\n     * Unsubscribe to the counts if a subscription exists.\n     */\n    unsubscribeCount() {\n        if (this._counter) {\n            this._counter.unsubscribe();\n            this._counter = null;\n        }\n    }\n\n    /**\n     * Fetches elements in sync using promises\n     * @return {*}\n     */\n    async fetchSync() {\n        if (this.subscriptionHandle) {\n            throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n        }\n\n        return await callWithPromise(this.name, prepareForProcess(this.body, this.params));\n    }\n\n    /**\n     * Fetches one element in sync\n     * @return {*}\n     */\n    async fetchOneSync() {\n        return _.first(await this.fetchSync())\n    }\n\n    /**\n     * Retrieves the data.\n     * @param callbackOrOptions\n     * @returns {*}\n     */\n    fetch(callbackOrOptions) {\n        if (!this.subscriptionHandle) {\n            return this._fetchStatic(callbackOrOptions)\n        } else {\n            return this._fetchReactive(callbackOrOptions);\n        }\n    }\n\n    /**\n     * @param args\n     * @returns {*}\n     */\n    fetchOne(...args) {\n        if (!this.subscriptionHandle) {\n            const callback = args[0];\n            if (!_.isFunction(callback)) {\n                throw new Meteor.Error('You did not provide a valid callback');\n            }\n\n            this.fetch((err, res) => {\n                callback(err, res ? _.first(res) : null);\n            })\n        } else {\n            return _.first(this.fetch(...args));\n        }\n    }\n\n    /**\n     * Gets the count of matching elements in sync.\n     * @returns {any}\n     */\n    async getCountSync() {\n        if (this._counter) {\n            throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n        }\n\n        return await callWithPromise(this.name + '.count', prepareForProcess(this.body, this.params));\n    }\n\n    /**\n     * Gets the count of matching elements.\n     * @param callback\n     * @returns {any}\n     */\n    getCount(callback) {\n        if (this._counter) {\n            return this._counter.getCount();\n        } else {\n            if (!callback) {\n                throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the count or subscribe first.');\n            } else {\n                return Meteor.call(this.name + '.count', this.params, callback);\n            }\n        }\n    }\n\n    /**\n     * Fetching non-reactive queries\n     * @param callback\n     * @private\n     */\n    _fetchStatic(callback) {\n        if (!callback) {\n            throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the data or subscribe first.');\n        }\n\n        Meteor.call(this.name, this.params, callback);\n    }\n\n    /**\n     * Fetching when we've got an active publication\n     *\n     * @param options\n     * @returns {*}\n     * @private\n     */\n    _fetchReactive(options = {}) {\n        let body = this.body;\n        if (this.params.$body) {\n            body = intersectDeep(body, this.params.$body);\n        }\n\n        body = prepareForProcess(body, this.params);\n        if (!options.allowSkip && body.$options && body.$options.skip) {\n            delete body.$options.skip;\n        }\n\n        return recursiveFetch(\n            createGraph(this.collection, body)\n        );\n    }\n}\n"]},"hash":"906712acda097d907381d614f8674b25aac92423"}

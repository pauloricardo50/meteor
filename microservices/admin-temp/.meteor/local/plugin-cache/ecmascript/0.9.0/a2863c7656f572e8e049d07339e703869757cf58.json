{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"./counts/countSubscription","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"CountSubscription"}]},{"source":"./lib/createGraph.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createGraph"}]},{"source":"./lib/recursiveFetch.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"recursiveFetch"}]},{"source":"./lib/prepareForProcess.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"prepareForProcess"}]},{"source":"./lib/callWithPromise","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"callWithPromise"}]},{"source":"./query.base","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Base"}]}],"exports":{"exported":["Query"],"specifiers":[{"kind":"local","local":"Query","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/query.client.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/query.client.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/query.client.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/query.client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"query.client"},"ignored":false,"code":"var _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n    \"default\": function () {\n        return Query;\n    }\n});\n\nvar _ = void 0;\n\nmodule.watch(require(\"meteor/underscore\"), {\n    _: function (v) {\n        _ = v;\n    }\n}, 0);\nvar CountSubscription = void 0;\nmodule.watch(require(\"./counts/countSubscription\"), {\n    \"default\": function (v) {\n        CountSubscription = v;\n    }\n}, 1);\nvar createGraph = void 0;\nmodule.watch(require(\"./lib/createGraph.js\"), {\n    \"default\": function (v) {\n        createGraph = v;\n    }\n}, 2);\nvar recursiveFetch = void 0;\nmodule.watch(require(\"./lib/recursiveFetch.js\"), {\n    \"default\": function (v) {\n        recursiveFetch = v;\n    }\n}, 3);\nvar prepareForProcess = void 0;\nmodule.watch(require(\"./lib/prepareForProcess.js\"), {\n    \"default\": function (v) {\n        prepareForProcess = v;\n    }\n}, 4);\nvar callWithPromise = void 0;\nmodule.watch(require(\"./lib/callWithPromise\"), {\n    \"default\": function (v) {\n        callWithPromise = v;\n    }\n}, 5);\nvar Base = void 0;\nmodule.watch(require(\"./query.base\"), {\n    \"default\": function (v) {\n        Base = v;\n    }\n}, 6);\n\nvar Query = function (_Base) {\n    (0, _inherits3.default)(Query, _Base);\n\n    function Query() {\n        (0, _classCallCheck3.default)(this, Query);\n        return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n    }\n\n    /**\n     * Subscribe\n     *\n     * @param callback {Function} optional\n     * @returns {null|any|*}\n     */Query.prototype.subscribe = function () {\n        function subscribe(callback) {\n            this.doValidateParams();\n            this.subscriptionHandle = Meteor.subscribe(this.name, prepareForProcess(this.body, this.params), callback);\n            return this.subscriptionHandle;\n        }\n\n        return subscribe;\n    }(); /**\n          * Subscribe to the counts for this query\n          *\n          * @param callback\n          * @returns {Object}\n          */\n\n    Query.prototype.subscribeCount = function () {\n        function subscribeCount(callback) {\n            this.doValidateParams();\n\n            if (!this._counter) {\n                this._counter = new CountSubscription(this);\n            }\n\n            return this._counter.subscribe(prepareForProcess(this.body, this.params), callback);\n        }\n\n        return subscribeCount;\n    }(); /**\n          * Unsubscribe if an existing subscription exists\n          */\n\n    Query.prototype.unsubscribe = function () {\n        function unsubscribe() {\n            if (this.subscriptionHandle) {\n                this.subscriptionHandle.stop();\n            }\n\n            this.subscriptionHandle = null;\n        }\n\n        return unsubscribe;\n    }(); /**\n          * Unsubscribe to the counts if a subscription exists.\n          */\n\n    Query.prototype.unsubscribeCount = function () {\n        function unsubscribeCount() {\n            if (this._counter) {\n                this._counter.unsubscribe();\n\n                this._counter = null;\n            }\n        }\n\n        return unsubscribeCount;\n    }(); /**\n          * Fetches elements in sync using promises\n          * @return {*}\n          */\n\n    Query.prototype.fetchSync = function () {\n        function fetchSync() {\n            return _regenerator2.default.async(function () {\n                function fetchSync$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                this.doValidateParams();\n\n                                if (!this.subscriptionHandle) {\n                                    _context.next = 3;\n                                    break;\n                                }\n\n                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n\n                            case 3:\n                                _context.next = 5;\n                                return _regenerator2.default.awrap(callWithPromise(this.name, prepareForProcess(this.body, this.params)));\n\n                            case 5:\n                                return _context.abrupt(\"return\", _context.sent);\n\n                            case 6:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }\n\n                return fetchSync$;\n            }(), null, this);\n        }\n\n        return fetchSync;\n    }(); /**\n          * Fetches one element in sync\n          * @return {*}\n          */\n\n    Query.prototype.fetchOneSync = function () {\n        function fetchOneSync() {\n            return _regenerator2.default.async(function () {\n                function fetchOneSync$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                _context2.t0 = _;\n                                _context2.next = 3;\n                                return _regenerator2.default.awrap(this.fetchSync());\n\n                            case 3:\n                                _context2.t1 = _context2.sent;\n                                return _context2.abrupt(\"return\", _context2.t0.first.call(_context2.t0, _context2.t1));\n\n                            case 5:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }\n\n                return fetchOneSync$;\n            }(), null, this);\n        }\n\n        return fetchOneSync;\n    }(); /**\n          * Retrieves the data.\n          * @param callbackOrOptions\n          * @returns {*}\n          */\n\n    Query.prototype.fetch = function () {\n        function fetch(callbackOrOptions) {\n            this.doValidateParams();\n\n            if (!this.subscriptionHandle) {\n                return this._fetchStatic(callbackOrOptions);\n            } else {\n                return this._fetchReactive(callbackOrOptions);\n            }\n        }\n\n        return fetch;\n    }(); /**\n          * @param args\n          * @returns {*}\n          */\n\n    Query.prototype.fetchOne = function () {\n        function fetchOne() {\n            if (!this.subscriptionHandle) {\n                var callback = arguments.length <= 0 ? undefined : arguments[0];\n\n                if (!_.isFunction(callback)) {\n                    throw new Meteor.Error('You did not provide a valid callback');\n                }\n\n                this.fetch(function (err, res) {\n                    callback(err, res ? _.first(res) : null);\n                });\n            } else {\n                return _.first(this.fetch.apply(this, arguments));\n            }\n        }\n\n        return fetchOne;\n    }(); /**\n          * Gets the count of matching elements in sync.\n          * @returns {any}\n          */\n\n    Query.prototype.getCountSync = function () {\n        function getCountSync() {\n            return _regenerator2.default.async(function () {\n                function getCountSync$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                if (!this._counter) {\n                                    _context3.next = 2;\n                                    break;\n                                }\n\n                                throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n\n                            case 2:\n                                _context3.next = 4;\n                                return _regenerator2.default.awrap(callWithPromise(this.name + '.count', prepareForProcess(this.body, this.params)));\n\n                            case 4:\n                                return _context3.abrupt(\"return\", _context3.sent);\n\n                            case 5:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }\n\n                return getCountSync$;\n            }(), null, this);\n        }\n\n        return getCountSync;\n    }(); /**\n          * Gets the count of matching elements.\n          * @param callback\n          * @returns {any}\n          */\n\n    Query.prototype.getCount = function () {\n        function getCount(callback) {\n            if (this._counter) {\n                return this._counter.getCount();\n            } else {\n                if (!callback) {\n                    throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the count or subscribe first.');\n                } else {\n                    return Meteor.call(this.name + '.count', prepareForProcess(this.body, this.params), callback);\n                }\n            }\n        }\n\n        return getCount;\n    }(); /**\n          * Fetching non-reactive queries\n          * @param callback\n          * @private\n          */\n\n    Query.prototype._fetchStatic = function () {\n        function _fetchStatic(callback) {\n            if (!callback) {\n                throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the data or subscribe first.');\n            }\n\n            Meteor.call(this.name, prepareForProcess(this.body, this.params), callback);\n        }\n\n        return _fetchStatic;\n    }(); /**\n          * Fetching when we've got an active publication\n          *\n          * @param options\n          * @returns {*}\n          * @private\n          */\n\n    Query.prototype._fetchReactive = function () {\n        function _fetchReactive() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var body = prepareForProcess(this.body, this.params);\n\n            if (!options.allowSkip && body.$options && body.$options.skip) {\n                delete body.$options.skip;\n            }\n\n            return recursiveFetch(createGraph(this.collection, body), this.params);\n        }\n\n        return _fetchReactive;\n    }();\n\n    return Query;\n}(Base);","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/query.client.js"],"names":["module","export","Query","_","watch","require","v","CountSubscription","createGraph","recursiveFetch","prepareForProcess","callWithPromise","Base","subscribe","callback","doValidateParams","subscriptionHandle","Meteor","name","body","params","subscribeCount","_counter","unsubscribe","stop","unsubscribeCount","fetchSync","Error","fetchOneSync","first","fetch","callbackOrOptions","_fetchStatic","_fetchReactive","fetchOne","isFunction","err","res","getCountSync","getCount","call","options","allowSkip","$options","skip","collection"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/query/query.client.js.map","sourcesContent":["import { _ } from 'meteor/underscore';\nimport CountSubscription from './counts/countSubscription';\nimport createGraph from './lib/createGraph.js';\nimport recursiveFetch from './lib/recursiveFetch.js';\nimport prepareForProcess from './lib/prepareForProcess.js';\nimport callWithPromise from './lib/callWithPromise';\nimport Base from './query.base';\n\nexport default class Query extends Base {\n    /**\n     * Subscribe\n     *\n     * @param callback {Function} optional\n     * @returns {null|any|*}\n     */\n    subscribe(callback) {\n        this.doValidateParams();\n\n        this.subscriptionHandle = Meteor.subscribe(\n            this.name,\n            prepareForProcess(this.body, this.params),\n            callback\n        );\n\n        return this.subscriptionHandle;\n    }\n\n    /**\n     * Subscribe to the counts for this query\n     *\n     * @param callback\n     * @returns {Object}\n     */\n    subscribeCount(callback) {\n        this.doValidateParams();\n\n        if (!this._counter) {\n            this._counter = new CountSubscription(this);\n        }\n\n        return this._counter.subscribe(\n            prepareForProcess(this.body, this.params),\n            callback\n        );\n    }\n\n    /**\n     * Unsubscribe if an existing subscription exists\n     */\n    unsubscribe() {\n        if (this.subscriptionHandle) {\n            this.subscriptionHandle.stop();\n        }\n\n        this.subscriptionHandle = null;\n    }\n\n    /**\n     * Unsubscribe to the counts if a subscription exists.\n     */\n    unsubscribeCount() {\n        if (this._counter) {\n            this._counter.unsubscribe();\n            this._counter = null;\n        }\n    }\n\n    /**\n     * Fetches elements in sync using promises\n     * @return {*}\n     */\n    async fetchSync() {\n        this.doValidateParams();\n\n        if (this.subscriptionHandle) {\n            throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n        }\n\n        return await callWithPromise(this.name, prepareForProcess(this.body, this.params));\n    }\n\n    /**\n     * Fetches one element in sync\n     * @return {*}\n     */\n    async fetchOneSync() {\n        return _.first(await this.fetchSync())\n    }\n\n    /**\n     * Retrieves the data.\n     * @param callbackOrOptions\n     * @returns {*}\n     */\n    fetch(callbackOrOptions) {\n        this.doValidateParams();\n\n        if (!this.subscriptionHandle) {\n            return this._fetchStatic(callbackOrOptions)\n        } else {\n            return this._fetchReactive(callbackOrOptions);\n        }\n    }\n\n    /**\n     * @param args\n     * @returns {*}\n     */\n    fetchOne(...args) {\n        if (!this.subscriptionHandle) {\n            const callback = args[0];\n            if (!_.isFunction(callback)) {\n                throw new Meteor.Error('You did not provide a valid callback');\n            }\n\n            this.fetch((err, res) => {\n                callback(err, res ? _.first(res) : null);\n            })\n        } else {\n            return _.first(this.fetch(...args));\n        }\n    }\n\n    /**\n     * Gets the count of matching elements in sync.\n     * @returns {any}\n     */\n    async getCountSync() {\n        if (this._counter) {\n            throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n        }\n\n        return await callWithPromise(this.name + '.count', prepareForProcess(this.body, this.params));\n    }\n\n    /**\n     * Gets the count of matching elements.\n     * @param callback\n     * @returns {any}\n     */\n    getCount(callback) {\n        if (this._counter) {\n            return this._counter.getCount();\n        } else {\n            if (!callback) {\n                throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the count or subscribe first.');\n            } else {\n                return Meteor.call(\n                    this.name + '.count',\n                    prepareForProcess(this.body, this.params),\n                    callback\n                );\n            }\n        }\n    }\n\n    /**\n     * Fetching non-reactive queries\n     * @param callback\n     * @private\n     */\n    _fetchStatic(callback) {\n        if (!callback) {\n            throw new Meteor.Error('not-allowed', 'You are on client so you must either provide a callback to get the data or subscribe first.');\n        }\n\n        Meteor.call(this.name, prepareForProcess(this.body, this.params), callback);\n    }\n\n    /**\n     * Fetching when we've got an active publication\n     *\n     * @param options\n     * @returns {*}\n     * @private\n     */\n    _fetchReactive(options = {}) {\n        let body = prepareForProcess(this.body, this.params);\n        if (!options.allowSkip && body.$options && body.$options.skip) {\n            delete body.$options.skip;\n        }\n\n        return recursiveFetch(\n            createGraph(this.collection, body),\n            this.params\n        );\n    }\n}\n"]},"hash":"a2863c7656f572e8e049d07339e703869757cf58"}

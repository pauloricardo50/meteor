{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"./helpers.js","imported":["STATES","loginResultCallback","getLoginServices"],"specifiers":[{"kind":"named","imported":"STATES","local":"STATES"},{"kind":"named","imported":"loginResultCallback","local":"loginResultCallback"},{"kind":"named","imported":"getLoginServices","local":"getLoginServices"}]}],"exports":{"exported":["validateKey","KEY_PREFIX"],"specifiers":[{"kind":"local","local":"validateKey","exported":"validateKey"},{"kind":"local","local":"KEY_PREFIX","exported":"KEY_PREFIX"}]}}},"options":{"filename":"packages/std:accounts-ui/imports/login_session.js","filenameRelative":"packages/std:accounts-ui/imports/login_session.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/std:accounts-ui/imports/login_session.js.map","sourceFileName":"packages/std:accounts-ui/imports/login_session.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"login_session"},"ignored":false,"code":"module.export({\n  validateKey: function () {\n    return validateKey;\n  },\n  KEY_PREFIX: function () {\n    return KEY_PREFIX;\n  }\n});\nvar Accounts = void 0;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 0);\nvar STATES = void 0,\n    loginResultCallback = void 0,\n    getLoginServices = void 0;\nmodule.watch(require(\"./helpers.js\"), {\n  STATES: function (v) {\n    STATES = v;\n  },\n  loginResultCallback: function (v) {\n    loginResultCallback = v;\n  },\n  getLoginServices: function (v) {\n    getLoginServices = v;\n  }\n}, 1);\nvar VALID_KEYS = ['dropdownVisible', // XXX consider replacing these with one key that has an enum for values.\n'inSignupFlow', 'inForgotPasswordFlow', 'inChangePasswordFlow', 'inMessageOnlyFlow', 'errorMessage', 'infoMessage', // dialogs with messages (info and error)\n'resetPasswordToken', 'enrollAccountToken', 'justVerifiedEmail', 'justResetPassword', 'configureLoginServiceDialogVisible', 'configureLoginServiceDialogServiceName', 'configureLoginServiceDialogSaveDisabled', 'configureOnDesktopVisible'];\n\nvar validateKey = function (key) {\n  if (!VALID_KEYS.includes(key)) throw new Error(\"Invalid key in loginButtonsSession: \" + key);\n};\n\nvar KEY_PREFIX = \"Meteor.loginButtons.\";\n// XXX This should probably be package scope rather than exported\n// (there was even a comment to that effect here from before we had\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\n// now\nAccounts._loginButtonsSession = {\n  set: function (key, value) {\n    validateKey(key);\n    if (['errorMessage', 'infoMessage'].includes(key)) throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n\n    this._set(key, value);\n  },\n  _set: function (key, value) {\n    Session.set(KEY_PREFIX + key, value);\n  },\n  get: function (key) {\n    validateKey(key);\n    return Session.get(KEY_PREFIX + key);\n  }\n};\n\nif (Meteor.isClient) {\n  // In the login redirect flow, we'll have the result of the login\n  // attempt at page load time when we're redirected back to the\n  // application.  Register a callback to update the UI (i.e. to close\n  // the dialog on a successful login or display the error on a failed\n  // login).\n  //\n  Accounts.onPageLoadLogin(function (attemptInfo) {\n    // Ignore if we have a left over login attempt for a service that is no longer registered.\n    if (getLoginServices().map(function (_ref) {\n      var name = _ref.name;\n      return name;\n    }).includes(attemptInfo.type)) loginResultCallback(attemptInfo.type, attemptInfo.error);\n  });\n  var doneCallback = void 0;\n  Accounts.onResetPasswordLink(function (token, done) {\n    Accounts._loginButtonsSession.set('resetPasswordToken', token);\n\n    Session.set(KEY_PREFIX + 'state', 'resetPasswordToken');\n    doneCallback = done;\n\n    Accounts.ui._options.onResetPasswordHook();\n  });\n  Accounts.onEnrollmentLink(function (token, done) {\n    Accounts._loginButtonsSession.set('enrollAccountToken', token);\n\n    Session.set(KEY_PREFIX + 'state', 'enrollAccountToken');\n    doneCallback = done;\n\n    Accounts.ui._options.onEnrollAccountHook();\n  });\n  Accounts.onEmailVerificationLink(function (token, done) {\n    Accounts.verifyEmail(token, function (error) {\n      if (!error) {\n        Accounts._loginButtonsSession.set('justVerifiedEmail', true);\n\n        Session.set(KEY_PREFIX + 'state', 'justVerifiedEmail');\n\n        Accounts.ui._options.onSignedInHook();\n      } else {\n        Accounts.ui._options.onVerifyEmailHook();\n      }\n\n      done();\n    });\n  });\n}","map":{"version":3,"sources":["packages/std:accounts-ui/imports/login_session.js"],"names":["module","export","validateKey","KEY_PREFIX","Accounts","watch","require","v","STATES","loginResultCallback","getLoginServices","VALID_KEYS","key","includes","Error","_loginButtonsSession","set","value","_set","Session","get","Meteor","isClient","onPageLoadLogin","attemptInfo","map","name","type","error","doneCallback","onResetPasswordLink","token","done","ui","_options","onResetPasswordHook","onEnrollmentLink","onEnrollAccountHook","onEmailVerificationLink","verifyEmail","onSignedInHook","onVerifyEmailHook"],"mappings":"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","file":"packages/std:accounts-ui/imports/login_session.js.map","sourcesContent":["import {Accounts} from 'meteor/accounts-base';\nimport {\n  STATES,\n  loginResultCallback,\n  getLoginServices\n} from './helpers.js';\n\nconst VALID_KEYS = [\n  'dropdownVisible',\n\n  // XXX consider replacing these with one key that has an enum for values.\n  'inSignupFlow',\n  'inForgotPasswordFlow',\n  'inChangePasswordFlow',\n  'inMessageOnlyFlow',\n\n  'errorMessage',\n  'infoMessage',\n\n  // dialogs with messages (info and error)\n  'resetPasswordToken',\n  'enrollAccountToken',\n  'justVerifiedEmail',\n  'justResetPassword',\n\n  'configureLoginServiceDialogVisible',\n  'configureLoginServiceDialogServiceName',\n  'configureLoginServiceDialogSaveDisabled',\n  'configureOnDesktopVisible'\n];\n\nexport const validateKey = function (key) {\n  if (!VALID_KEYS.includes(key))\n    throw new Error(\"Invalid key in loginButtonsSession: \" + key);\n};\n\nexport const KEY_PREFIX = \"Meteor.loginButtons.\";\n\n// XXX This should probably be package scope rather than exported\n// (there was even a comment to that effect here from before we had\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\n// now\nAccounts._loginButtonsSession = {\n  set: function(key, value) {\n    validateKey(key);\n    if (['errorMessage', 'infoMessage'].includes(key))\n      throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n\n    this._set(key, value);\n  },\n\n  _set: function(key, value) {\n    Session.set(KEY_PREFIX + key, value);\n  },\n\n  get: function(key) {\n    validateKey(key);\n    return Session.get(KEY_PREFIX + key);\n  }\n};\n\nif (Meteor.isClient){\n  // In the login redirect flow, we'll have the result of the login\n  // attempt at page load time when we're redirected back to the\n  // application.  Register a callback to update the UI (i.e. to close\n  // the dialog on a successful login or display the error on a failed\n  // login).\n  //\n  Accounts.onPageLoadLogin(function (attemptInfo) {\n    // Ignore if we have a left over login attempt for a service that is no longer registered.\n    if (getLoginServices().map(({ name }) => name).includes(attemptInfo.type))\n      loginResultCallback(attemptInfo.type, attemptInfo.error);\n  });\n\n  let doneCallback;\n\n  Accounts.onResetPasswordLink(function (token, done) {\n    Accounts._loginButtonsSession.set('resetPasswordToken', token);\n    Session.set(KEY_PREFIX + 'state', 'resetPasswordToken');\n    doneCallback = done;\n\n    Accounts.ui._options.onResetPasswordHook();\n  });\n\n  Accounts.onEnrollmentLink(function (token, done) {\n    Accounts._loginButtonsSession.set('enrollAccountToken', token);\n    Session.set(KEY_PREFIX + 'state', 'enrollAccountToken');\n    doneCallback = done;\n\n    Accounts.ui._options.onEnrollAccountHook();\n  });\n\n  Accounts.onEmailVerificationLink(function (token, done) {\n    Accounts.verifyEmail(token, function (error) {\n      if (! error) {\n        Accounts._loginButtonsSession.set('justVerifiedEmail', true);\n        Session.set(KEY_PREFIX + 'state', 'justVerifiedEmail');\n        Accounts.ui._options.onSignedInHook();\n      }\n      else {\n        Accounts.ui._options.onVerifyEmailHook();\n      }\n\n      done();\n    });\n  });\n}\n"]},"hash":"38f2d7fea9244307184523533e7be13eb37c4a26"}

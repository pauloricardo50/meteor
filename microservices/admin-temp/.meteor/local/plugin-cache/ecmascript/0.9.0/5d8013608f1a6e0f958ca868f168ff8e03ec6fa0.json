{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"lodash/get","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"get"}]},{"source":"../Translation","imported":["T"],"specifiers":[{"kind":"named","imported":"T","local":"T"}]},{"source":"../ZipAutoComplete","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ZipAutoComplete"}]},{"source":"./TextInput","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TextInput"}]},{"source":"./RadioInput","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"RadioInput"}]},{"source":"./SelectFieldInput","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SelectFieldInput"}]},{"source":"./ConditionalInput","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ConditionalInput"}]},{"source":"./DateInput","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DateInput"}]},{"source":"../UploaderArray","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"UploaderArray"}]},{"source":"./ArrayInput","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ArrayInput"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/AutoForm/AutoForm.jsx","filenameRelative":"imports/core/components/AutoForm/AutoForm.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/AutoForm/AutoForm.jsx.map","sourceFileName":"imports/core/components/AutoForm/AutoForm.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"AutoForm"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function () {\n    function _default(v) {\n      PropTypes = v;\n    }\n\n    return _default;\n  }()\n}, 0);\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function () {\n    function _default(v) {\n      React = v;\n    }\n\n    return _default;\n  }()\n}, 1);\nvar get = void 0;\nmodule.watch(require(\"lodash/get\"), {\n  \"default\": function () {\n    function _default(v) {\n      get = v;\n    }\n\n    return _default;\n  }()\n}, 2);\n\nvar _T = void 0;\n\nmodule.watch(require(\"../Translation\"), {\n  T: function () {\n    function T(v) {\n      _T = v;\n    }\n\n    return T;\n  }()\n}, 3);\nvar ZipAutoComplete = void 0;\nmodule.watch(require(\"../ZipAutoComplete\"), {\n  \"default\": function () {\n    function _default(v) {\n      ZipAutoComplete = v;\n    }\n\n    return _default;\n  }()\n}, 4);\nvar TextInput = void 0;\nmodule.watch(require(\"./TextInput\"), {\n  \"default\": function () {\n    function _default(v) {\n      TextInput = v;\n    }\n\n    return _default;\n  }()\n}, 5);\nvar RadioInput = void 0;\nmodule.watch(require(\"./RadioInput\"), {\n  \"default\": function () {\n    function _default(v) {\n      RadioInput = v;\n    }\n\n    return _default;\n  }()\n}, 6);\nvar SelectFieldInput = void 0;\nmodule.watch(require(\"./SelectFieldInput\"), {\n  \"default\": function () {\n    function _default(v) {\n      SelectFieldInput = v;\n    }\n\n    return _default;\n  }()\n}, 7);\nvar ConditionalInput = void 0;\nmodule.watch(require(\"./ConditionalInput\"), {\n  \"default\": function () {\n    function _default(v) {\n      ConditionalInput = v;\n    }\n\n    return _default;\n  }()\n}, 8);\nvar DateInput = void 0;\nmodule.watch(require(\"./DateInput\"), {\n  \"default\": function () {\n    function _default(v) {\n      DateInput = v;\n    }\n\n    return _default;\n  }()\n}, 9);\nvar UploaderArray = void 0;\nmodule.watch(require(\"../UploaderArray\"), {\n  \"default\": function () {\n    function _default(v) {\n      UploaderArray = v;\n    }\n\n    return _default;\n  }()\n}, 10);\nvar ArrayInput = void 0;\nmodule.watch(require(\"./ArrayInput\"), {\n  \"default\": function () {\n    function _default(v) {\n      ArrayInput = v;\n    }\n\n    return _default;\n  }()\n}, 11);\nvar styles = {\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  subtitle: {\n    marginTop: 40\n  },\n  smallWidth: {\n    width: '100%',\n    maxWidth: 400\n  },\n  mediumWidth: {\n    width: '100%',\n    maxWidth: 600\n  },\n  fullWidth: {\n    width: '100%'\n  }\n};\n\nvar inputSwitch = function () {\n  function inputSwitch(childProps, index, parentProps) {\n    var _childProps$inputProp = childProps.inputProps,\n        type = _childProps$inputProp.type,\n        conditionalTrueValue = _childProps$inputProp.conditionalTrueValue,\n        style = _childProps$inputProp.style,\n        inputs = _childProps$inputProp.inputs,\n        label = _childProps$inputProp.label,\n        text = _childProps$inputProp.text,\n        component = _childProps$inputProp.component,\n        componentProps = _childProps$inputProp.componentProps,\n        height = _childProps$inputProp.height;\n\n    switch (type) {\n      case 'textInput':\n        return React.createElement(TextInput, (0, _extends3.default)({\n          multiline: false\n        }, childProps));\n\n      case 'radioInput':\n        return React.createElement(RadioInput, childProps);\n\n      case 'selectFieldInput':\n        return React.createElement(SelectFieldInput, childProps);\n\n      case 'conditionalInput':\n        return React.createElement(\n          ConditionalInput,\n          {\n            conditionalTrueValue: conditionalTrueValue,\n            key: index,\n            style: style,\n            doc: parentProps.doc\n          },\n          mapInputs(inputs[0], 0, parentProps),\n          inputs.slice(1).map(function (input, i) {\n            return mapInputs(input, i, parentProps);\n          })\n        );\n\n      case 'h3':\n        return React.createElement(\n          \"h3\",\n          {\n            style: styles.subtitle,\n            key: index\n          },\n          label\n        );\n\n      case 'h2':\n        return React.createElement(\n          \"h2\",\n          {\n            style: styles.subtitle,\n            key: index\n          },\n          label\n        );\n\n      case 'space':\n        return React.createElement(\n          \"div\",\n          {\n            style: {\n              width: '100%',\n              height: height\n            },\n            key: index\n          },\n          text\n        );\n\n      case 'dateInput':\n        return React.createElement(DateInput, childProps);\n      // case 'dropzoneInput':\n      //   return <UploaderArray {...childProps} />;\n\n      case 'arrayInput':\n        return React.createElement(ArrayInput, childProps);\n\n      case 'custom':\n        if (component === 'ZipAutoComplete') {\n          return React.createElement(ZipAutoComplete, (0, _extends3.default)({}, childProps, componentProps));\n        }\n\n        return null;\n\n      default:\n        throw new Error(type + \" is not a valid AutoForm type\");\n    }\n  }\n\n  return inputSwitch;\n}();\n\nvar mapInputs = function () {\n  function mapInputs(singleInput, index, parentProps) {\n    var childProps = (0, _extends3.default)({}, parentProps, {\n      key: index,\n      // Some inputs don't have id's, this means rendering a different form requires a re-render (or key prop on the form)\n      inputProps: (0, _extends3.default)({}, singleInput, {\n        placeholder: singleInput.placeholder || \"Forms.\" + (singleInput.intlId || singleInput.id) + \".placeholder\",\n        disabled: parentProps.disabled || singleInput.disabled,\n        currentValue: get(parentProps.doc, singleInput.id),\n        style: parentProps.fullWidth ? styles.fullWidth : styles.smallWidth,\n        required: singleInput.required !== false\n      })\n    });\n\n    if (parentProps.noPlaceholders) {\n      childProps.inputProps.placeholder = '';\n    } // Prevent undefined condition to trigger as well\n\n\n    if (childProps.inputProps.condition === false) {\n      return null;\n    }\n\n    if (childProps.inputProps.required === true) {\n      childProps.inputProps.label = React.createElement(\n        \"span\",\n        null,\n        React.createElement(_T, {\n          id: \"Forms.\" + (childProps.inputProps.intlId || childProps.inputProps.id),\n          values: childProps.inputProps.intlValues\n        }),\n        ' *'\n      );\n    } else {\n      childProps.inputProps.label = React.createElement(_T, {\n        id: \"Forms.\" + (childProps.inputProps.intlId || childProps.inputProps.id),\n        values: childProps.inputProps.intlValues\n      });\n    } // Support options that are only string/boolean ids instead of objects\n    // check for undefined because of boolean false ids\n\n\n    if (childProps.inputProps.type === 'radioInput' || childProps.inputProps.type === 'selectFieldInput') {\n      childProps.inputProps.options = childProps.inputProps.options.map(function (o) {\n        return o.id === undefined ? {\n          id: o\n        } : o;\n      });\n    } // if info is true, map it to a i18n string\n\n\n    if (childProps.inputProps.info) {\n      childProps.inputProps.info = React.createElement(_T, {\n        id: \"Forms.\" + (childProps.inputProps.intlId || childProps.inputProps.id) + \".info\"\n      });\n    }\n\n    return inputSwitch(childProps, index, parentProps);\n  }\n\n  return mapInputs;\n}();\n\nvar AutoForm = function () {\n  function AutoForm(props) {\n    return React.createElement(\n      \"div\",\n      {\n        className: props.formClasses\n      },\n      React.createElement(\n        \"div\",\n        {\n          style: styles.form,\n          onSubmit: function () {\n            function onSubmit(e) {\n              return e.preventDefault();\n            }\n\n            return onSubmit;\n          }()\n        },\n        props.inputs.map(function (input, i) {\n          return mapInputs(input, i, props);\n        })\n      )\n    );\n  }\n\n  return AutoForm;\n}();\n\nAutoForm.propTypes = {\n  inputs: PropTypes.arrayOf(PropTypes.object).isRequired,\n  formClasses: PropTypes.string,\n  loan: PropTypes.objectOf(PropTypes.any),\n  borrowers: PropTypes.arrayOf(PropTypes.object),\n  fullWidth: PropTypes.bool,\n  docId: PropTypes.string.isRequired,\n  updateFunc: PropTypes.string,\n  pushFunc: PropTypes.string,\n  popFunc: PropTypes.string,\n  disabled: PropTypes.bool,\n  noPlaceholders: PropTypes.bool\n};\nAutoForm.defaultProps = {\n  loan: {},\n  borrowers: [],\n  fullWidth: false,\n  updateFunc: 'updateLoan',\n  pushFunc: 'pushLoanValue',\n  popFunc: 'popLoanValue',\n  disabled: false,\n  noPlaceholders: false\n};\nmodule.exportDefault(AutoForm);","map":{"version":3,"sources":["imports/core/components/AutoForm/AutoForm.jsx"],"names":["PropTypes","module","watch","require","v","React","get","T","ZipAutoComplete","TextInput","RadioInput","SelectFieldInput","ConditionalInput","DateInput","UploaderArray","ArrayInput","styles","form","display","flexDirection","width","justifyContent","alignItems","subtitle","marginTop","smallWidth","maxWidth","mediumWidth","fullWidth","inputSwitch","childProps","index","parentProps","inputProps","type","conditionalTrueValue","style","inputs","label","text","component","componentProps","height","doc","mapInputs","slice","map","input","i","Error","singleInput","key","placeholder","intlId","id","disabled","currentValue","required","noPlaceholders","condition","intlValues","options","o","undefined","info","AutoForm","props","formClasses","e","preventDefault","propTypes","arrayOf","object","isRequired","string","loan","objectOf","any","borrowers","bool","docId","updateFunc","pushFunc","popFunc","defaultProps","exportDefault"],"mappings":";;;;;;;;AAAA,IAAIA,kBAAJ;AAAcC,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACJ,kBAAUI,CAAV;AAAY;;AAAxB;AAAA;AAAA,CAAnC,EAA6D,CAA7D;AAAgE,IAAIC,cAAJ;AAAUJ,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACC,cAAMD,CAAN;AAAQ;;AAApB;AAAA;AAAA,CAA9B,EAAoD,CAApD;AAAuD,IAAIE,YAAJ;AAAQL,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACE,YAAIF,CAAJ;AAAM;;AAAlB;AAAA;AAAA,CAAnC,EAAuD,CAAvD;;AAA0D,IAAIG,WAAJ;;AAAMN,OAAOC,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACI,GAAD;AAAA,eAAGH,CAAH,EAAK;AAACG,WAAEH,CAAF;AAAI;;AAAV;AAAA;AAAA,CAAvC,EAAmD,CAAnD;AAAsD,IAAII,wBAAJ;AAAoBP,OAAOC,KAAP,CAAaC,QAAQ,oBAAR,CAAb,EAA2C;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACI,wBAAgBJ,CAAhB;AAAkB;;AAA9B;AAAA;AAAA,CAA3C,EAA2E,CAA3E;AAA8E,IAAIK,kBAAJ;AAAcR,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACK,kBAAUL,CAAV;AAAY;;AAAxB;AAAA;AAAA,CAApC,EAA8D,CAA9D;AAAiE,IAAIM,mBAAJ;AAAeT,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACM,mBAAWN,CAAX;AAAa;;AAAzB;AAAA;AAAA,CAArC,EAAgE,CAAhE;AAAmE,IAAIO,yBAAJ;AAAqBV,OAAOC,KAAP,CAAaC,QAAQ,oBAAR,CAAb,EAA2C;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACO,yBAAiBP,CAAjB;AAAmB;;AAA/B;AAAA;AAAA,CAA3C,EAA4E,CAA5E;AAA+E,IAAIQ,yBAAJ;AAAqBX,OAAOC,KAAP,CAAaC,QAAQ,oBAAR,CAAb,EAA2C;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACQ,yBAAiBR,CAAjB;AAAmB;;AAA/B;AAAA;AAAA,CAA3C,EAA4E,CAA5E;AAA+E,IAAIS,kBAAJ;AAAcZ,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACS,kBAAUT,CAAV;AAAY;;AAAxB;AAAA;AAAA,CAApC,EAA8D,CAA9D;AAAiE,IAAIU,sBAAJ;AAAkBb,OAAOC,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACU,sBAAcV,CAAd;AAAgB;;AAA5B;AAAA;AAAA,CAAzC,EAAuE,EAAvE;AAA2E,IAAIW,mBAAJ;AAAed,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACW,mBAAWX,CAAX;AAAa;;AAAzB;AAAA;AAAA,CAArC,EAAgE,EAAhE;AAgBn5B,IAAMY,SAAS;AACbC,QAAM;AACJC,aAAS,MADL;AAEJC,mBAAe,QAFX;AAGJC,WAAO,MAHH;AAIJC,oBAAgB,QAJZ;AAKJC,gBAAY;AALR,GADO;AAQbC,YAAU;AACRC,eAAW;AADH,GARG;AAWbC,cAAY;AACVL,WAAO,MADG;AAEVM,cAAU;AAFA,GAXC;AAebC,eAAa;AACXP,WAAO,MADI;AAEXM,cAAU;AAFC,GAfA;AAmBbE,aAAW;AACTR,WAAO;AADE;AAnBE,CAAf;;AAwBA,IAAMS;AAAc,WAAdA,WAAc,CAACC,UAAD,EAAaC,KAAb,EAAoBC,WAApB,EAAoC;AAAA,gCAWlDF,WAAWG,UAXuC;AAAA,QAEpDC,IAFoD,yBAEpDA,IAFoD;AAAA,QAGpDC,oBAHoD,yBAGpDA,oBAHoD;AAAA,QAIpDC,KAJoD,yBAIpDA,KAJoD;AAAA,QAKpDC,MALoD,yBAKpDA,MALoD;AAAA,QAMpDC,KANoD,yBAMpDA,KANoD;AAAA,QAOpDC,IAPoD,yBAOpDA,IAPoD;AAAA,QAQpDC,SARoD,yBAQpDA,SARoD;AAAA,QASpDC,cAToD,yBASpDA,cAToD;AAAA,QAUpDC,MAVoD,yBAUpDA,MAVoD;;AAatD,YAAQR,IAAR;AACA,WAAK,WAAL;AACE,eAAO,oBAAC,SAAD;AAAW,qBAAW;AAAtB,WAAiCJ,UAAjC,EAAP;;AACF,WAAK,YAAL;AACE,eAAO,oBAAC,UAAD,EAAgBA,UAAhB,CAAP;;AACF,WAAK,kBAAL;AACE,eAAO,oBAAC,gBAAD,EAAsBA,UAAtB,CAAP;;AACF,WAAK,kBAAL;AACE,eACE;AAAC,0BAAD;AAAA;AACE,kCAAsBK,oBADxB;AAEE,iBAAKJ,KAFP;AAGE,mBAAOK,KAHT;AAIE,iBAAKJ,YAAYW;AAJnB;AAMGC,oBAAUP,OAAO,CAAP,CAAV,EAAqB,CAArB,EAAwBL,WAAxB,CANH;AAOGK,iBAAOQ,KAAP,CAAa,CAAb,EAAgBC,GAAhB,CAAoB,UAACC,KAAD,EAAQC,CAAR;AAAA,mBAAcJ,UAAUG,KAAV,EAAiBC,CAAjB,EAAoBhB,WAApB,CAAd;AAAA,WAApB;AAPH,SADF;;AAWF,WAAK,IAAL;AACE,eACE;AAAA;AAAA;AAAI,mBAAOhB,OAAOO,QAAlB;AAA4B,iBAAKQ;AAAjC;AACGO;AADH,SADF;;AAKF,WAAK,IAAL;AACE,eACE;AAAA;AAAA;AAAI,mBAAOtB,OAAOO,QAAlB;AAA4B,iBAAKQ;AAAjC;AACGO;AADH,SADF;;AAKF,WAAK,OAAL;AACE,eACE;AAAA;AAAA;AAAK,mBAAO;AAAElB,qBAAO,MAAT;AAAiBsB;AAAjB,aAAZ;AAAuC,iBAAKX;AAA5C;AACGQ;AADH,SADF;;AAKF,WAAK,WAAL;AACE,eAAO,oBAAC,SAAD,EAAeT,UAAf,CAAP;AACA;AACA;;AACF,WAAK,YAAL;AACE,eAAO,oBAAC,UAAD,EAAgBA,UAAhB,CAAP;;AACF,WAAK,QAAL;AACE,YAAIU,cAAc,iBAAlB,EAAqC;AACnC,iBAAO,oBAAC,eAAD,6BAAqBV,UAArB,EAAqCW,cAArC,EAAP;AACD;;AACD,eAAO,IAAP;;AACF;AACE,cAAM,IAAIQ,KAAJ,CAAaf,IAAb,mCAAN;AAjDF;AAmDD;;AAhEK;AAAA,GAAN;;AAkEA,IAAMU;AAAY,WAAZA,SAAY,CAACM,WAAD,EAAcnB,KAAd,EAAqBC,WAArB,EAAqC;AACrD,QAAMF,wCACDE,WADC;AAEJmB,WAAKpB,KAFD;AAEQ;AACZE,6CACKiB,WADL;AAEEE,qBACEF,YAAYE,WAAZ,gBACSF,YAAYG,MAAZ,IAAsBH,YAAYI,EAD3C,kBAHJ;AAKEC,kBAAUvB,YAAYuB,QAAZ,IAAwBL,YAAYK,QALhD;AAMEC,sBAAclD,IAAI0B,YAAYW,GAAhB,EAAqBO,YAAYI,EAAjC,CANhB;AAOElB,eAAOJ,YAAYJ,SAAZ,GAAwBZ,OAAOY,SAA/B,GAA2CZ,OAAOS,UAP3D;AAQEgC,kBAAUP,YAAYO,QAAZ,KAAyB;AARrC;AAHI,MAAN;;AAeA,QAAIzB,YAAY0B,cAAhB,EAAgC;AAC9B5B,iBAAWG,UAAX,CAAsBmB,WAAtB,GAAoC,EAApC;AACD,KAlBoD,CAoBrD;;;AACA,QAAItB,WAAWG,UAAX,CAAsB0B,SAAtB,KAAoC,KAAxC,EAA+C;AAC7C,aAAO,IAAP;AACD;;AAED,QAAI7B,WAAWG,UAAX,CAAsBwB,QAAtB,KAAmC,IAAvC,EAA6C;AAC3C3B,iBAAWG,UAAX,CAAsBK,KAAtB,GACE;AAAA;AAAA;AACE,4BAAC,EAAD;AACE,0BAAaR,WAAWG,UAAX,CAAsBoB,MAAtB,IACXvB,WAAWG,UAAX,CAAsBqB,EADxB,CADF;AAGE,kBAAQxB,WAAWG,UAAX,CAAsB2B;AAHhC,UADF;AAMG;AANH,OADF;AAUD,KAXD,MAWO;AACL9B,iBAAWG,UAAX,CAAsBK,KAAtB,GACE,oBAAC,EAAD;AACE,wBAAaR,WAAWG,UAAX,CAAsBoB,MAAtB,IAAgCvB,WAAWG,UAAX,CAAsBqB,EAAnE,CADF;AAEE,gBAAQxB,WAAWG,UAAX,CAAsB2B;AAFhC,QADF;AAMD,KA3CoD,CA6CrD;AACA;;;AACA,QACE9B,WAAWG,UAAX,CAAsBC,IAAtB,KAA+B,YAA/B,IACAJ,WAAWG,UAAX,CAAsBC,IAAtB,KAA+B,kBAFjC,EAGE;AACAJ,iBAAWG,UAAX,CAAsB4B,OAAtB,GAAgC/B,WAAWG,UAAX,CAAsB4B,OAAtB,CAA8Bf,GAA9B,CAAkC;AAAA,eAAMgB,EAAER,EAAF,KAASS,SAAT,GAAqB;AAAET,cAAIQ;AAAN,SAArB,GAAiCA,CAAvC;AAAA,OAAlC,CAAhC;AACD,KApDoD,CAsDrD;;;AACA,QAAIhC,WAAWG,UAAX,CAAsB+B,IAA1B,EAAgC;AAC9BlC,iBAAWG,UAAX,CAAsB+B,IAAtB,GACE,oBAAC,EAAD;AACE,wBAAalC,WAAWG,UAAX,CAAsBoB,MAAtB,IACXvB,WAAWG,UAAX,CAAsBqB,EADxB;AADF,QADF;AAMD;;AAED,WAAOzB,YAAYC,UAAZ,EAAwBC,KAAxB,EAA+BC,WAA/B,CAAP;AACD;;AAjEK;AAAA,GAAN;;AAmEA,IAAMiC;AAAW,WAAXA,QAAW;AAAA,WACf;AAAA;AAAA;AAAK,mBAAWC,MAAMC;AAAtB;AACE;AAAA;AAAA;AAAK,iBAAOnD,OAAOC,IAAnB;AAAyB;AAAU;AAAA,qBAAKmD,EAAEC,cAAF,EAAL;AAAA;;AAAV;AAAA;AAAzB;AACGH,cAAM7B,MAAN,CAAaS,GAAb,CAAiB,UAACC,KAAD,EAAQC,CAAR;AAAA,iBAAcJ,UAAUG,KAAV,EAAiBC,CAAjB,EAAoBkB,KAApB,CAAd;AAAA,SAAjB;AADH;AADF,KADe;AAAA;;AAAX;AAAA,GAAN;;AAQAD,SAASK,SAAT,GAAqB;AACnBjC,UAAQrC,UAAUuE,OAAV,CAAkBvE,UAAUwE,MAA5B,EAAoCC,UADzB;AAEnBN,eAAanE,UAAU0E,MAFJ;AAGnBC,QAAM3E,UAAU4E,QAAV,CAAmB5E,UAAU6E,GAA7B,CAHa;AAInBC,aAAW9E,UAAUuE,OAAV,CAAkBvE,UAAUwE,MAA5B,CAJQ;AAKnB5C,aAAW5B,UAAU+E,IALF;AAMnBC,SAAOhF,UAAU0E,MAAV,CAAiBD,UANL;AAOnBQ,cAAYjF,UAAU0E,MAPH;AAQnBQ,YAAUlF,UAAU0E,MARD;AASnBS,WAASnF,UAAU0E,MATA;AAUnBnB,YAAUvD,UAAU+E,IAVD;AAWnBrB,kBAAgB1D,UAAU+E;AAXP,CAArB;AAcAd,SAASmB,YAAT,GAAwB;AACtBT,QAAM,EADgB;AAEtBG,aAAW,EAFW;AAGtBlD,aAAW,KAHW;AAItBqD,cAAY,YAJU;AAKtBC,YAAU,eALY;AAMtBC,WAAS,cANa;AAOtB5B,YAAU,KAPY;AAQtBG,kBAAgB;AARM,CAAxB;AAnMAzD,OAAOoF,aAAP,CA8MepB,QA9Mf","file":"imports/core/components/AutoForm/AutoForm.jsx.map","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport get from 'lodash/get';\n\nimport { T } from 'core/components/Translation';\nimport ZipAutoComplete from 'core/components/ZipAutoComplete';\n\nimport TextInput from './TextInput';\nimport RadioInput from './RadioInput';\nimport SelectFieldInput from './SelectFieldInput';\nimport ConditionalInput from './ConditionalInput';\nimport DateInput from './DateInput';\nimport UploaderArray from '../UploaderArray';\nimport ArrayInput from './ArrayInput';\n\nconst styles = {\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  subtitle: {\n    marginTop: 40,\n  },\n  smallWidth: {\n    width: '100%',\n    maxWidth: 400,\n  },\n  mediumWidth: {\n    width: '100%',\n    maxWidth: 600,\n  },\n  fullWidth: {\n    width: '100%',\n  },\n};\n\nconst inputSwitch = (childProps, index, parentProps) => {\n  const {\n    type,\n    conditionalTrueValue,\n    style,\n    inputs,\n    label,\n    text,\n    component,\n    componentProps,\n    height,\n  } = childProps.inputProps;\n\n  switch (type) {\n  case 'textInput':\n    return <TextInput multiline={false} {...childProps} />;\n  case 'radioInput':\n    return <RadioInput {...childProps} />;\n  case 'selectFieldInput':\n    return <SelectFieldInput {...childProps} />;\n  case 'conditionalInput':\n    return (\n      <ConditionalInput\n        conditionalTrueValue={conditionalTrueValue}\n        key={index}\n        style={style}\n        doc={parentProps.doc}\n      >\n        {mapInputs(inputs[0], 0, parentProps)}\n        {inputs.slice(1).map((input, i) => mapInputs(input, i, parentProps))}\n      </ConditionalInput>\n    );\n  case 'h3':\n    return (\n      <h3 style={styles.subtitle} key={index}>\n        {label}\n      </h3>\n    );\n  case 'h2':\n    return (\n      <h2 style={styles.subtitle} key={index}>\n        {label}\n      </h2>\n    );\n  case 'space':\n    return (\n      <div style={{ width: '100%', height }} key={index}>\n        {text}\n      </div>\n    );\n  case 'dateInput':\n    return <DateInput {...childProps} />;\n    // case 'dropzoneInput':\n    //   return <UploaderArray {...childProps} />;\n  case 'arrayInput':\n    return <ArrayInput {...childProps} />;\n  case 'custom':\n    if (component === 'ZipAutoComplete') {\n      return <ZipAutoComplete {...childProps} {...componentProps} />;\n    }\n    return null;\n  default:\n    throw new Error(`${type} is not a valid AutoForm type`);\n  }\n};\n\nconst mapInputs = (singleInput, index, parentProps) => {\n  const childProps = {\n    ...parentProps,\n    key: index, // Some inputs don't have id's, this means rendering a different form requires a re-render (or key prop on the form)\n    inputProps: {\n      ...singleInput,\n      placeholder:\n        singleInput.placeholder ||\n        `Forms.${singleInput.intlId || singleInput.id}.placeholder`,\n      disabled: parentProps.disabled || singleInput.disabled,\n      currentValue: get(parentProps.doc, singleInput.id),\n      style: parentProps.fullWidth ? styles.fullWidth : styles.smallWidth,\n      required: singleInput.required !== false,\n    },\n  };\n\n  if (parentProps.noPlaceholders) {\n    childProps.inputProps.placeholder = '';\n  }\n\n  // Prevent undefined condition to trigger as well\n  if (childProps.inputProps.condition === false) {\n    return null;\n  }\n\n  if (childProps.inputProps.required === true) {\n    childProps.inputProps.label = (\n      <span>\n        <T\n          id={`Forms.${childProps.inputProps.intlId ||\n            childProps.inputProps.id}`}\n          values={childProps.inputProps.intlValues}\n        />\n        {' *'}\n      </span>\n    );\n  } else {\n    childProps.inputProps.label = (\n      <T\n        id={`Forms.${childProps.inputProps.intlId || childProps.inputProps.id}`}\n        values={childProps.inputProps.intlValues}\n      />\n    );\n  }\n\n  // Support options that are only string/boolean ids instead of objects\n  // check for undefined because of boolean false ids\n  if (\n    childProps.inputProps.type === 'radioInput' ||\n    childProps.inputProps.type === 'selectFieldInput'\n  ) {\n    childProps.inputProps.options = childProps.inputProps.options.map(o => (o.id === undefined ? { id: o } : o));\n  }\n\n  // if info is true, map it to a i18n string\n  if (childProps.inputProps.info) {\n    childProps.inputProps.info = (\n      <T\n        id={`Forms.${childProps.inputProps.intlId ||\n          childProps.inputProps.id}.info`}\n      />\n    );\n  }\n\n  return inputSwitch(childProps, index, parentProps);\n};\n\nconst AutoForm = props => (\n  <div className={props.formClasses}>\n    <div style={styles.form} onSubmit={e => e.preventDefault()}>\n      {props.inputs.map((input, i) => mapInputs(input, i, props))}\n    </div>\n  </div>\n);\n\nAutoForm.propTypes = {\n  inputs: PropTypes.arrayOf(PropTypes.object).isRequired,\n  formClasses: PropTypes.string,\n  loan: PropTypes.objectOf(PropTypes.any),\n  borrowers: PropTypes.arrayOf(PropTypes.object),\n  fullWidth: PropTypes.bool,\n  docId: PropTypes.string.isRequired,\n  updateFunc: PropTypes.string,\n  pushFunc: PropTypes.string,\n  popFunc: PropTypes.string,\n  disabled: PropTypes.bool,\n  noPlaceholders: PropTypes.bool,\n};\n\nAutoForm.defaultProps = {\n  loan: {},\n  borrowers: [],\n  fullWidth: false,\n  updateFunc: 'updateLoan',\n  pushFunc: 'pushLoanValue',\n  popFunc: 'popLoanValue',\n  disabled: false,\n  noPlaceholders: false,\n};\n\nexport default AutoForm;\n"]},"hash":"5d8013608f1a6e0f958ca868f168ff8e03ec6fa0"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./query/query.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Query"}]},{"source":"./namedQuery/namedQuery.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"NamedQuery"}]},{"source":"./namedQuery/store.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"NamedQueryStore"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/extension.js","filenameRelative":"packages/cultofcoders:grapher/lib/extension.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/extension.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/extension.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"extension"},"ignored":false,"code":"let Query;\nmodule.watch(require(\"./query/query.js\"), {\n    default(v) {\n        Query = v;\n    }\n\n}, 0);\nlet NamedQuery;\nmodule.watch(require(\"./namedQuery/namedQuery.js\"), {\n    default(v) {\n        NamedQuery = v;\n    }\n\n}, 1);\nlet NamedQueryStore;\nmodule.watch(require(\"./namedQuery/store.js\"), {\n    default(v) {\n        NamedQueryStore = v;\n    }\n\n}, 2);\n\n_.extend(Mongo.Collection.prototype, {\n    createQuery(...args) {\n        if (typeof args[0] === 'string') {\n            //NamedQuery\n            const [name, body, options] = args;\n            const query = new NamedQuery(name, this, body, options);\n            NamedQueryStore.add(name, query);\n            return query;\n        } else {\n            const [body, options] = args;\n            return new Query(this, body, options);\n        }\n    }\n\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/extension.js"],"names":["Query","module","watch","require","default","v","NamedQuery","NamedQueryStore","_","extend","Mongo","Collection","prototype","createQuery","args","name","body","options","query","add"],"mappings":"AAAA,IAAIA,KAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACC,YAAQC,CAAR,EAAU;AAACL,gBAAMK,CAAN;AAAQ;;AAApB,CAAzC,EAA+D,CAA/D;AAAkE,IAAIC,UAAJ;AAAeL,OAAOC,KAAP,CAAaC,QAAQ,4BAAR,CAAb,EAAmD;AAACC,YAAQC,CAAR,EAAU;AAACC,qBAAWD,CAAX;AAAa;;AAAzB,CAAnD,EAA8E,CAA9E;AAAiF,IAAIE,eAAJ;AAAoBN,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACC,YAAQC,CAAR,EAAU;AAACE,0BAAgBF,CAAhB;AAAkB;;AAA9B,CAA9C,EAA8E,CAA9E;;AAIhMG,EAAEC,MAAF,CAASC,MAAMC,UAAN,CAAiBC,SAA1B,EAAqC;AACjCC,gBAAY,GAAGC,IAAf,EAAqB;AACjB,YAAI,OAAOA,KAAK,CAAL,CAAP,KAAmB,QAAvB,EAAiC;AAC7B;AACA,kBAAM,CAACC,IAAD,EAAOC,IAAP,EAAaC,OAAb,IAAwBH,IAA9B;AACA,kBAAMI,QAAQ,IAAIZ,UAAJ,CAAeS,IAAf,EAAqB,IAArB,EAA2BC,IAA3B,EAAiCC,OAAjC,CAAd;AACAV,4BAAgBY,GAAhB,CAAoBJ,IAApB,EAA0BG,KAA1B;AAEA,mBAAOA,KAAP;AACH,SAPD,MAOO;AACH,kBAAM,CAACF,IAAD,EAAOC,OAAP,IAAkBH,IAAxB;AAEA,mBAAO,IAAId,KAAJ,CAAU,IAAV,EAAgBgB,IAAhB,EAAsBC,OAAtB,CAAP;AACH;AACJ;;AAdgC,CAArC","file":"packages/cultofcoders:grapher/lib/extension.js.map","sourcesContent":["import Query from './query/query.js';\nimport NamedQuery from './namedQuery/namedQuery.js';\nimport NamedQueryStore from './namedQuery/store.js';\n\n_.extend(Mongo.Collection.prototype, {\n    createQuery(...args) {\n        if (typeof args[0] === 'string') {\n            //NamedQuery\n            const [name, body, options] = args;\n            const query = new NamedQuery(name, this, body, options);\n            NamedQueryStore.add(name, query);\n\n            return query;\n        } else {\n            const [body, options] = args;\n\n            return new Query(this, body, options);\n        }\n    }\n});"]},"hash":"0f154cd7627cf8a6e9cac3a2496c5ff887971460"}

{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../tasks","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Tasks"}]},{"source":"./tasksConstants","imported":["TASK_STATUS"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/tasks/TaskService.js","filenameRelative":"imports/core/api/tasks/TaskService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/tasks/TaskService.js.map","sourceFileName":"imports/core/api/tasks/TaskService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TaskService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 0);\nvar Tasks = void 0;\nmodule.watch(require(\"../tasks\"), {\n  default: function _default(v) {\n    Tasks = v;\n  }\n}, 1);\n\nvar _TASK_STATUS = void 0;\n\nmodule.watch(require(\"./tasksConstants\"), {\n  TASK_STATUS: function TASK_STATUS(v) {\n    _TASK_STATUS = v;\n  }\n}, 2);\n\nvar TaskService = function TaskService() {\n  var _this = this;\n\n  (0, _classCallCheck3.default)(this, TaskService);\n\n  this.insert = function (_ref) {\n    var type = _ref.type,\n        loanId = _ref.loanId;\n    var existingTask = Tasks.findOne({\n      type: type,\n      loanId: loanId,\n      status: _TASK_STATUS.ACTIVE\n    });\n\n    if (existingTask) {\n      throw new _Meteor.Error('duplicate active task');\n    }\n\n    return Tasks.insert({\n      type: type,\n      loanId: loanId\n    });\n  };\n\n  this.update = function (_ref2) {\n    var taskId = _ref2.taskId,\n        object = _ref2.object;\n    return Tasks.update(taskId, {\n      $set: object\n    });\n  };\n\n  this.complete = function (_ref3) {\n    var taskId = _ref3.taskId;\n    return _this.update({\n      taskId: taskId,\n      object: {\n        status: _TASK_STATUS.COMPLETED,\n        completedAt: new Date()\n      }\n    });\n  };\n\n  this.completeByType = function (_ref4) {\n    var type = _ref4.type,\n        loanId = _ref4.loanId,\n        newStatus = _ref4.newStatus;\n    var taskToComplete = Tasks.findOne({\n      loanId: loanId,\n      type: type,\n      status: _TASK_STATUS.ACTIVE\n    });\n\n    if (!taskToComplete) {\n      throw new _Meteor.Error(\"task couldn't be found\");\n    }\n\n    return _this.update({\n      taskId: taskToComplete._id,\n      object: {\n        status: newStatus || _TASK_STATUS.COMPLETED,\n        completedAt: new Date()\n      }\n    });\n  };\n\n  this.changeStatus = function (_ref5) {\n    var taskId = _ref5.taskId,\n        newStatus = _ref5.newStatus;\n    return _this.update({\n      taskId: taskId,\n      object: {\n        status: newStatus\n      }\n    });\n  };\n\n  this.changeUser = function (_ref6) {\n    var taskId = _ref6.taskId,\n        newUser = _ref6.newUser;\n    return _this.update({\n      taskId: taskId,\n      object: {\n        userId: newUser\n      }\n    });\n  };\n};\n\nmodule.exportDefault(TaskService);","map":{"version":3,"sources":["imports/core/api/tasks/TaskService.js"],"names":["Meteor","module","watch","require","v","Tasks","default","TASK_STATUS","TaskService","insert","type","loanId","existingTask","findOne","status","ACTIVE","Error","update","taskId","object","$set","complete","COMPLETED","completedAt","Date","completeByType","newStatus","taskToComplete","_id","changeStatus","changeUser","newUser","userId","exportDefault"],"mappings":";;;;;;;;AAAA,IAAIA,gBAAJ;;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,QAAD,kBAAQI,CAAR,EAAU;AAACJ,cAAOI,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,cAAJ;AAAUJ,OAAOC,KAAP,CAAaC,QAAQ,UAAR,CAAb,EAAiC;AAACG,SAAD,oBAASF,CAAT,EAAW;AAACC,YAAMD,CAAN;AAAQ;AAApB,CAAjC,EAAuD,CAAvD;;AAA0D,IAAIG,qBAAJ;;AAAgBN,OAAOC,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACI,aAAD,uBAAaH,CAAb,EAAe;AAACG,mBAAYH,CAAZ;AAAc;AAA9B,CAAzC,EAAyE,CAAzE;;IAIxJI,W;;;;;OACJC,M,GAAS,gBAAsB;AAAA,QAAnBC,IAAmB,QAAnBA,IAAmB;AAAA,QAAbC,MAAa,QAAbA,MAAa;AAC7B,QAAMC,eAAeP,MAAMQ,OAAN,CAAc;AACjCH,gBADiC;AAEjCC,oBAFiC;AAGjCG,cAAQP,aAAYQ;AAHa,KAAd,CAArB;;AAMA,QAAIH,YAAJ,EAAkB;AAChB,YAAM,IAAIZ,QAAOgB,KAAX,CAAiB,uBAAjB,CAAN;AACD;;AAED,WAAOX,MAAMI,MAAN,CAAa;AAAEC,gBAAF;AAAQC;AAAR,KAAb,CAAP;AACD,G;;OAEDM,M,GAAS;AAAA,QAAGC,MAAH,SAAGA,MAAH;AAAA,QAAWC,MAAX,SAAWA,MAAX;AAAA,WAAwBd,MAAMY,MAAN,CAAaC,MAAb,EAAqB;AAAEE,YAAMD;AAAR,KAArB,CAAxB;AAAA,G;;OAETE,Q,GAAW;AAAA,QAAGH,MAAH,SAAGA,MAAH;AAAA,WACT,MAAKD,MAAL,CAAY;AACVC,oBADU;AAEVC,cAAQ;AACNL,gBAAQP,aAAYe,SADd;AAENC,qBAAa,IAAIC,IAAJ;AAFP;AAFE,KAAZ,CADS;AAAA,G;;OASXC,c,GAAiB,iBAAiC;AAAA,QAA9Bf,IAA8B,SAA9BA,IAA8B;AAAA,QAAxBC,MAAwB,SAAxBA,MAAwB;AAAA,QAAhBe,SAAgB,SAAhBA,SAAgB;AAChD,QAAMC,iBAAiBtB,MAAMQ,OAAN,CAAc;AACnCF,oBADmC;AAEnCD,gBAFmC;AAGnCI,cAAQP,aAAYQ;AAHe,KAAd,CAAvB;;AAMA,QAAI,CAACY,cAAL,EAAqB;AACnB,YAAM,IAAI3B,QAAOgB,KAAX,CAAiB,wBAAjB,CAAN;AACD;;AAED,WAAO,MAAKC,MAAL,CAAY;AACjBC,cAAQS,eAAeC,GADN;AAEjBT,cAAQ;AACNL,gBAAQY,aAAanB,aAAYe,SAD3B;AAENC,qBAAa,IAAIC,IAAJ;AAFP;AAFS,KAAZ,CAAP;AAOD,G;;OAEDK,Y,GAAe;AAAA,QAAGX,MAAH,SAAGA,MAAH;AAAA,QAAWQ,SAAX,SAAWA,SAAX;AAAA,WACb,MAAKT,MAAL,CAAY;AAAEC,oBAAF;AAAUC,cAAQ;AAAEL,gBAAQY;AAAV;AAAlB,KAAZ,CADa;AAAA,G;;OAGfI,U,GAAa;AAAA,QAAGZ,MAAH,SAAGA,MAAH;AAAA,QAAWa,OAAX,SAAWA,OAAX;AAAA,WACX,MAAKd,MAAL,CAAY;AACVC,oBADU;AAEVC,cAAQ;AAAEa,gBAAQD;AAAV;AAFE,KAAZ,CADW;AAAA,G;;;AArDf9B,OAAOgC,aAAP,CA4DezB,WA5Df","file":"imports/core/api/tasks/TaskService.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport Tasks from '../tasks';\nimport { TASK_STATUS } from './tasksConstants';\n\nclass TaskService {\n  insert = ({ type, loanId }) => {\n    const existingTask = Tasks.findOne({\n      type,\n      loanId,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (existingTask) {\n      throw new Meteor.Error('duplicate active task');\n    }\n\n    return Tasks.insert({ type, loanId });\n  };\n\n  update = ({ taskId, object }) => Tasks.update(taskId, { $set: object });\n\n  complete = ({ taskId }) =>\n    this.update({\n      taskId,\n      object: {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n\n  completeByType = ({ type, loanId, newStatus }) => {\n    const taskToComplete = Tasks.findOne({\n      loanId,\n      type,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (!taskToComplete) {\n      throw new Meteor.Error(\"task couldn't be found\");\n    }\n\n    return this.update({\n      taskId: taskToComplete._id,\n      object: {\n        status: newStatus || TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n  };\n\n  changeStatus = ({ taskId, newStatus }) =>\n    this.update({ taskId, object: { status: newStatus } });\n\n  changeUser = ({ taskId, newUser }) =>\n    this.update({\n      taskId,\n      object: { userId: newUser },\n    });\n}\n\nexport default TaskService;\n"]},"hash":"15bf1e19f242e03cb54be2fff62d3cdd25efbbf9"}

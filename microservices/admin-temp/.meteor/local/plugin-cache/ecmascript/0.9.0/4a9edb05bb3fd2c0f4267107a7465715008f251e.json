{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash.clonedeep","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"deepClone"}]}],"exports":{"exported":["NamedQueryBase"],"specifiers":[{"kind":"local","local":"NamedQueryBase","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js","filenameRelative":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"namedQuery.base"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.export({\n    default: () => NamedQueryBase\n});\nlet deepClone;\nmodule.watch(require(\"lodash.clonedeep\"), {\n    default(v) {\n        deepClone = v;\n    }\n\n}, 0);\n\nclass NamedQueryBase {\n    constructor(name, collection, body, options = {}) {\n        this.isNamedQuery = true;\n        this.queryName = name;\n\n        if (_.isFunction(body)) {\n            this.resolver = body;\n        } else {\n            this.body = deepClone(body);\n        }\n\n        this.subscriptionHandle = null;\n        this.params = options.params || {};\n        this.options = options;\n        this.collection = collection;\n        this.isExposed = false;\n    }\n\n    get name() {\n        return `named_query_${this.queryName}`;\n    }\n\n    get isResolver() {\n        return !!this.resolver;\n    }\n\n    setParams(params) {\n        this.params = _.extend({}, this.params, params);\n        return this;\n    } /**\n       * Validates the parameters\n       */\n\n    doValidateParams(params) {\n        params = params || this.params;\n        const {\n            validateParams\n        } = this.options;\n        if (!validateParams) return;\n\n        try {\n            this._validate(validateParams, params);\n        } catch (validationError) {\n            console.error(`Invalid parameters supplied to the query \"${this.queryName}\"\\n`, validationError);\n            throw validationError; // rethrow\n        }\n    }\n\n    clone(newParams) {\n        const params = _.extend({}, deepClone(this.params), newParams);\n\n        let clone = new this.constructor(this.queryName, this.collection, this.isResolver ? this.resolver : deepClone(this.body), (0, _extends3.default)({}, this.options, {\n            params\n        }));\n        clone.cacher = this.cacher;\n\n        if (this.exposeConfig) {\n            clone.exposeConfig = this.exposeConfig;\n        }\n\n        return clone;\n    } /**\n       * @param {function|object} validator\n       * @param {object} params\n       * @private\n       */\n\n    _validate(validator, params) {\n        if (_.isFunction(validator)) {\n            validator.call(null, params);\n        } else {\n            check(params, validator);\n        }\n    }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js"],"names":["module","export","default","NamedQueryBase","deepClone","watch","require","v","constructor","name","collection","body","options","isNamedQuery","queryName","_","isFunction","resolver","subscriptionHandle","params","isExposed","isResolver","setParams","extend","doValidateParams","validateParams","_validate","validationError","console","error","clone","newParams","cacher","exposeConfig","validator","call","check"],"mappings":";;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,aAAQ,MAAIC;AAAb,CAAd;AAA4C,IAAIC,SAAJ;AAAcJ,OAAOK,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACJ,YAAQK,CAAR,EAAU;AAACH,oBAAUG,CAAV;AAAY;;AAAxB,CAAzC,EAAmE,CAAnE;;AAE3C,MAAMJ,cAAN,CAAqB;AAGhCK,gBAAYC,IAAZ,EAAkBC,UAAlB,EAA8BC,IAA9B,EAAoCC,UAAU,EAA9C,EAAkD;AAAA,aAFlDC,YAEkD,GAFnC,IAEmC;AAC9C,aAAKC,SAAL,GAAiBL,IAAjB;;AAEA,YAAIM,EAAEC,UAAF,CAAaL,IAAb,CAAJ,EAAwB;AACpB,iBAAKM,QAAL,GAAgBN,IAAhB;AACH,SAFD,MAEO;AACH,iBAAKA,IAAL,GAAYP,UAAUO,IAAV,CAAZ;AACH;;AAED,aAAKO,kBAAL,GAA0B,IAA1B;AACA,aAAKC,MAAL,GAAcP,QAAQO,MAAR,IAAkB,EAAhC;AACA,aAAKP,OAAL,GAAeA,OAAf;AACA,aAAKF,UAAL,GAAkBA,UAAlB;AACA,aAAKU,SAAL,GAAiB,KAAjB;AACH;;AAED,QAAIX,IAAJ,GAAW;AACP,eAAQ,eAAc,KAAKK,SAAU,EAArC;AACH;;AAED,QAAIO,UAAJ,GAAiB;AACb,eAAO,CAAC,CAAC,KAAKJ,QAAd;AACH;;AAEDK,cAAUH,MAAV,EAAkB;AACd,aAAKA,MAAL,GAAcJ,EAAEQ,MAAF,CAAS,EAAT,EAAa,KAAKJ,MAAlB,EAA0BA,MAA1B,CAAd;AAEA,eAAO,IAAP;AACH,KA/B+B,CAiChC;;;;AAGAK,qBAAiBL,MAAjB,EAAyB;AACrBA,iBAASA,UAAU,KAAKA,MAAxB;AAEA,cAAM;AAACM;AAAD,YAAmB,KAAKb,OAA9B;AACA,YAAI,CAACa,cAAL,EAAqB;;AAErB,YAAI;AACA,iBAAKC,SAAL,CAAeD,cAAf,EAA+BN,MAA/B;AACH,SAFD,CAEE,OAAOQ,eAAP,EAAwB;AACtBC,oBAAQC,KAAR,CAAe,6CAA4C,KAAKf,SAAU,KAA1E,EAAgFa,eAAhF;AACA,kBAAMA,eAAN,CAFsB,CAEC;AAC1B;AACJ;;AAEDG,UAAMC,SAAN,EAAiB;AACb,cAAMZ,SAASJ,EAAEQ,MAAF,CAAS,EAAT,EAAanB,UAAU,KAAKe,MAAf,CAAb,EAAqCY,SAArC,CAAf;;AAEA,YAAID,QAAQ,IAAI,KAAKtB,WAAT,CACR,KAAKM,SADG,EAER,KAAKJ,UAFG,EAGR,KAAKW,UAAL,GAAkB,KAAKJ,QAAvB,GAAkCb,UAAU,KAAKO,IAAf,CAH1B,6BAKD,KAAKC,OALJ;AAMJO;AANI,WAAZ;AAUAW,cAAME,MAAN,GAAe,KAAKA,MAApB;;AACA,YAAI,KAAKC,YAAT,EAAuB;AACnBH,kBAAMG,YAAN,GAAqB,KAAKA,YAA1B;AACH;;AAED,eAAOH,KAAP;AACH,KArE+B,CAuEhC;;;;;;AAKAJ,cAAUQ,SAAV,EAAqBf,MAArB,EAA6B;AACzB,YAAIJ,EAAEC,UAAF,CAAakB,SAAb,CAAJ,EAA6B;AACzBA,sBAAUC,IAAV,CAAe,IAAf,EAAqBhB,MAArB;AACH,SAFD,MAEO;AACHiB,kBAAMjB,MAAN,EAAce,SAAd;AACH;AACJ;;AAlF+B","file":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.base.js.map","sourcesContent":["import deepClone from 'lodash.clonedeep';\n\nexport default class NamedQueryBase {\n    isNamedQuery = true;\n\n    constructor(name, collection, body, options = {}) {\n        this.queryName = name;\n\n        if (_.isFunction(body)) {\n            this.resolver = body;\n        } else {\n            this.body = deepClone(body);\n        }\n\n        this.subscriptionHandle = null;\n        this.params = options.params || {};\n        this.options = options;\n        this.collection = collection;\n        this.isExposed = false;\n    }\n\n    get name() {\n        return `named_query_${this.queryName}`;\n    }\n\n    get isResolver() {\n        return !!this.resolver;\n    }\n\n    setParams(params) {\n        this.params = _.extend({}, this.params, params);\n\n        return this;\n    }\n\n    /**\n     * Validates the parameters\n     */\n    doValidateParams(params) {\n        params = params || this.params;\n\n        const {validateParams} = this.options;\n        if (!validateParams) return;\n\n        try {\n            this._validate(validateParams, params);\n        } catch (validationError) {\n            console.error(`Invalid parameters supplied to the query \"${this.queryName}\"\\n`, validationError);\n            throw validationError; // rethrow\n        }\n    }\n\n    clone(newParams) {\n        const params = _.extend({}, deepClone(this.params), newParams);\n\n        let clone = new this.constructor(\n            this.queryName,\n            this.collection,\n            this.isResolver ? this.resolver : deepClone(this.body),\n            {\n                ...this.options,\n                params,\n            }\n        );\n\n        clone.cacher = this.cacher;\n        if (this.exposeConfig) {\n            clone.exposeConfig = this.exposeConfig;\n        }\n\n        return clone;\n    }\n\n    /**\n     * @param {function|object} validator\n     * @param {object} params\n     * @private\n     */\n    _validate(validator, params) {\n        if (_.isFunction(validator)) {\n            validator.call(null, params)\n        } else {\n            check(params, validator)\n        }\n    }\n}"]},"hash":"4a9edb05bb3fd2c0f4267107a7465715008f251e"}

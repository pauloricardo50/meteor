{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-string-replace","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"reactStringReplace"}]},{"source":"../../arrays/tooltips","imported":["tooltips"],"specifiers":[{"kind":"named","imported":"tooltips","local":"tooltips"}]},{"source":"./TooltipOverlay","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TooltipOverlay"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/Translation/AutoTooltip.jsx","filenameRelative":"imports/core/components/Translation/AutoTooltip.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/Translation/AutoTooltip.jsx.map","sourceFileName":"imports/core/components/Translation/AutoTooltip.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"AutoTooltip"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  default: function _default(v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  default: function _default(v) {\n    PropTypes = v;\n  }\n}, 1);\nvar reactStringReplace = void 0;\nmodule.watch(require(\"react-string-replace\"), {\n  default: function _default(v) {\n    reactStringReplace = v;\n  }\n}, 2);\n\nvar _tooltips = void 0;\n\nmodule.watch(require(\"../../arrays/tooltips\"), {\n  tooltips: function tooltips(v) {\n    _tooltips = v;\n  }\n}, 3);\nvar TooltipOverlay = void 0;\nmodule.watch(require(\"./TooltipOverlay\"), {\n  default: function _default(v) {\n    TooltipOverlay = v;\n  }\n}, 4);\n\nvar AutoTooltip = function AutoTooltip(props) {\n  var content = null;\n\n  if (!props.children) {\n    return null;\n  }\n\n  if (props.id) {\n    // If an id is given, get that specific tooltip and wrap it around the children\n    content = React.createElement(\n      TooltipOverlay,\n      (0, _extends3.default)({}, props, {\n        match: props.children\n      }),\n      props.children\n    );\n  } else if (typeof props.children !== 'string') {\n    // If no id is given and children is not a string, return\n    return props.children;\n  } else {\n    // If no id is given and children is a string,\n    // automatically replace all matching strings with tooltips\n    content = reactStringReplace(props.children, new RegExp(\"(\" + Object.keys(_tooltips(props.list)).join('|') + \")\", 'gi'), function (match, i) {\n      return React.createElement(\n        TooltipOverlay,\n        (0, _extends3.default)({}, props, {\n          key: i,\n          match: match\n        }),\n        match\n      );\n    });\n  }\n\n  return React.createElement(\n    \"span\",\n    null,\n    content\n  );\n};\n\nAutoTooltip.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  list: PropTypes.string,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired\n};\nAutoTooltip.defaultProps = {\n  children: null,\n  list: 'general',\n  id: ''\n};\nmodule.exportDefault(AutoTooltip);","map":{"version":3,"sources":["imports/core/components/Translation/AutoTooltip.jsx"],"names":["React","module","watch","require","default","v","PropTypes","reactStringReplace","tooltips","TooltipOverlay","AutoTooltip","props","content","children","id","RegExp","Object","keys","list","join","match","i","propTypes","oneOfType","element","string","arrayOf","isRequired","defaultProps","exportDefault"],"mappings":";;;;;;;;AAAA,IAAIA,cAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAACC,SAAD,oBAASC,CAAT,EAAW;AAACL,YAAMK,CAAN;AAAQ;AAApB,CAA9B,EAAoD,CAApD;AAAuD,IAAIC,kBAAJ;AAAcL,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAACC,SAAD,oBAASC,CAAT,EAAW;AAACC,gBAAUD,CAAV;AAAY;AAAxB,CAAnC,EAA6D,CAA7D;AAAgE,IAAIE,2BAAJ;AAAuBN,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACC,SAAD,oBAASC,CAAT,EAAW;AAACE,yBAAmBF,CAAnB;AAAqB;AAAjC,CAA7C,EAAgF,CAAhF;;AAAmF,IAAIG,kBAAJ;;AAAaP,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACK,UAAD,oBAAUH,CAAV,EAAY;AAACG,gBAASH,CAAT;AAAW;AAAxB,CAA9C,EAAwE,CAAxE;AAA2E,IAAII,uBAAJ;AAAmBR,OAAOC,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACC,SAAD,oBAASC,CAAT,EAAW;AAACI,qBAAeJ,CAAf;AAAiB;AAA7B,CAAzC,EAAwE,CAAxE;;AAQpW,IAAMK,cAAc,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,MAAIC,UAAU,IAAd;;AAEA,MAAI,CAACD,MAAME,QAAX,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,MAAIF,MAAMG,EAAV,EAAc;AACZ;AACAF,cACE;AAAC,oBAAD;AAAA,iCAAoBD,KAApB;AAA2B,eAAOA,MAAME;AAAxC;AACGF,YAAME;AADT,KADF;AAKD,GAPD,MAOO,IAAI,OAAOF,MAAME,QAAb,KAA0B,QAA9B,EAAwC;AAC7C;AACA,WAAOF,MAAME,QAAb;AACD,GAHM,MAGA;AACL;AACA;AACAD,cAAUL,mBACRI,MAAME,QADE,EAER,IAAIE,MAAJ,OAAeC,OAAOC,IAAP,CAAYT,UAASG,MAAMO,IAAf,CAAZ,EAAkCC,IAAlC,CAAuC,GAAvC,CAAf,QAA+D,IAA/D,CAFQ,EAGR,UAACC,KAAD,EAAQC,CAAR;AAAA,aACE;AAAC,sBAAD;AAAA,mCAAoBV,KAApB;AAA2B,eAAKU,CAAhC;AAAmC,iBAAOD;AAA1C;AACGA;AADH,OADF;AAAA,KAHQ,CAAV;AASD;;AAED,SAAO;AAAA;AAAA;AAAOR;AAAP,GAAP;AACD,CAhCD;;AAkCAF,YAAYY,SAAZ,GAAwB;AACtBT,YAAUP,UAAUiB,SAAV,CAAoB,CAACjB,UAAUkB,OAAX,EAAoBlB,UAAUmB,MAA9B,CAApB,CADY;AAEtBP,QAAMZ,UAAUmB,MAFM;AAGtBX,MAAIR,UAAUiB,SAAV,CAAoB,CACtBjB,UAAUmB,MADY,EAEtBnB,UAAUoB,OAAV,CAAkBpB,UAAUmB,MAA5B,CAFsB,CAApB,EAGDE;AANmB,CAAxB;AASAjB,YAAYkB,YAAZ,GAA2B;AACzBf,YAAU,IADe;AAEzBK,QAAM,SAFmB;AAGzBJ,MAAI;AAHqB,CAA3B;AAnDAb,OAAO4B,aAAP,CAyDenB,WAzDf","file":"imports/core/components/Translation/AutoTooltip.jsx.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport reactStringReplace from 'react-string-replace';\n\nimport { tooltips } from 'core/arrays/tooltips';\nimport TooltipOverlay from './TooltipOverlay';\n\nconst AutoTooltip = (props) => {\n  let content = null;\n\n  if (!props.children) {\n    return null;\n  }\n\n  if (props.id) {\n    // If an id is given, get that specific tooltip and wrap it around the children\n    content = (\n      <TooltipOverlay {...props} match={props.children}>\n        {props.children}\n      </TooltipOverlay>\n    );\n  } else if (typeof props.children !== 'string') {\n    // If no id is given and children is not a string, return\n    return props.children;\n  } else {\n    // If no id is given and children is a string,\n    // automatically replace all matching strings with tooltips\n    content = reactStringReplace(\n      props.children,\n      new RegExp(`(${Object.keys(tooltips(props.list)).join('|')})`, 'gi'),\n      (match, i) => (\n        <TooltipOverlay {...props} key={i} match={match}>\n          {match}\n        </TooltipOverlay>\n      ),\n    );\n  }\n\n  return <span>{content}</span>;\n};\n\nAutoTooltip.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  list: PropTypes.string,\n  id: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]).isRequired,\n};\n\nAutoTooltip.defaultProps = {\n  children: null,\n  list: 'general',\n  id: '',\n};\n\nexport default AutoTooltip;\n"]},"hash":"195420975606bed919fbd742d4bace9cc19045cb"}

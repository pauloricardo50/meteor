{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"lodash/isArray","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"isArray"}]},{"source":"lodash/omit","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"omit"}]},{"source":"react-intl","imported":["FormattedMessage"],"specifiers":[{"kind":"named","imported":"FormattedMessage","local":"FormattedMessage"}]},{"source":"react-bootstrap/lib/Popover","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Popover"}]},{"source":"../DialogSimple","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DialogSimple"}]},{"source":"../../utils/analytics","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"track"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/Translation/Tooltip.jsx","filenameRelative":"imports/core/components/Translation/Tooltip.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/Translation/Tooltip.jsx.map","sourceFileName":"imports/core/components/Translation/Tooltip.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Tooltip"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function () {\n    function _default(v) {\n      React = v;\n    }\n\n    return _default;\n  }()\n}, 0);\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  \"default\": function () {\n    function _default(v) {\n      PropTypes = v;\n    }\n\n    return _default;\n  }()\n}, 1);\nvar isArray = void 0;\nmodule.watch(require(\"lodash/isArray\"), {\n  \"default\": function () {\n    function _default(v) {\n      isArray = v;\n    }\n\n    return _default;\n  }()\n}, 2);\nvar omit = void 0;\nmodule.watch(require(\"lodash/omit\"), {\n  \"default\": function () {\n    function _default(v) {\n      omit = v;\n    }\n\n    return _default;\n  }()\n}, 3);\n\nvar _FormattedMessage = void 0;\n\nmodule.watch(require(\"react-intl\"), {\n  FormattedMessage: function () {\n    function FormattedMessage(v) {\n      _FormattedMessage = v;\n    }\n\n    return FormattedMessage;\n  }()\n}, 4);\nvar Popover = void 0;\nmodule.watch(require(\"react-bootstrap/lib/Popover\"), {\n  \"default\": function () {\n    function _default(v) {\n      Popover = v;\n    }\n\n    return _default;\n  }()\n}, 5);\nvar DialogSimple = void 0;\nmodule.watch(require(\"../DialogSimple\"), {\n  \"default\": function () {\n    function _default(v) {\n      DialogSimple = v;\n    }\n\n    return _default;\n  }()\n}, 6);\nvar track = void 0;\nmodule.watch(require(\"../../utils/analytics\"), {\n  \"default\": function () {\n    function _default(v) {\n      track = v;\n    }\n\n    return _default;\n  }()\n}, 7);\n\n// Required functions if react motion is used, which wraps the popover\n// and shifts it down or right depending on the placement\nvar getPositionTop = function () {\n  function getPositionTop(top, id, placement) {\n    if ((placement === 'left' || placement === 'right') && document.getElementById(id)) {\n      return top - 0.5 * document.getElementById(id).clientHeight;\n    }\n\n    return top;\n  }\n\n  return getPositionTop;\n}();\n\nvar getPositionLeft = function () {\n  function getPositionLeft(left, id, placement) {\n    if ((placement === 'top' || placement === 'bottom') && document.getElementById(id)) {\n      return left - 0.5 * document.getElementById(id).clientWidth;\n    }\n\n    return left;\n  }\n\n  return getPositionLeft;\n}();\n\nvar Tooltip = function () {\n  function Tooltip(props) {\n    var placement = props.placement,\n        positionTop = props.positionTop,\n        positionLeft = props.positionLeft,\n        id = props.id,\n        pureId = props.pureId,\n        hide = props.hide,\n        match = props.match,\n        dialogLabel = props.dialogLabel;\n    var content = null;\n    var baseId = id;\n\n    if (isArray(id)) {\n      baseId = id[0];\n      content = React.createElement(\n        \"span\",\n        {\n          style: {\n            display: 'flex',\n            flexDirection: 'column'\n          }\n        },\n        React.createElement(_FormattedMessage, {\n          id: pureId ? baseId : \"tooltip.\" + baseId\n        }),\n        React.createElement(\n          DialogSimple,\n          {\n            title: match // rootStyle={{ alignSelf: 'center' }}\n            // Dialogs normally have zIndex of 1500\n            // Usually dialogs should be behind tooltips (which are\n            // at zindex 1501), but when you trigger a dialog from a tooltip,\n            // it should be above the previous tooltip, hence 1502\n            ,\n            style: {\n              zIndex: 1502\n            },\n            buttonStyle: {\n              marginTop: 16\n            },\n            label: dialogLabel || React.createElement(_FormattedMessage, {\n              id: \"general.learnMore\"\n            }),\n            autoFocus: true,\n            onEntered: function () {\n              function onEntered() {\n                return track('Tooltip - opened dialog', {\n                  tooltipId: baseId\n                });\n              }\n\n              return onEntered;\n            }(),\n            cancelOnly: true\n          },\n          React.createElement(_FormattedMessage, {\n            id: pureId ? baseId + \"2\" : \"tooltip2.\" + baseId,\n            values: {\n              verticalSpace: React.createElement(\n                \"span\",\n                null,\n                React.createElement(\"br\", null),\n                React.createElement(\"br\", null)\n              )\n            }\n          })\n        )\n      );\n    } else {\n      content = React.createElement(_FormattedMessage, {\n        id: pureId ? id : \"tooltip.\" + id\n      });\n    }\n\n    var passedProps = omit(props, ['trigger', 'pureId', 'hide', 'match']);\n    return (// <Transition hide={hide}>\n      //   {({ key, style }) =>\n      React.createElement(\n        Popover,\n        (0, _extends3.default)({}, passedProps, {\n          id: baseId // key={key}\n          // style={{ opacity: style.opacity, transform: `scale(${style.scale})` }}\n          // positionTop={getPositionTop(positionTop, baseId, placement)}\n          // positionLeft={getPositionLeft(positionLeft, baseId, placement)}\n\n        }),\n        content\n      ) // }\n      // </Transition>\n\n    );\n  }\n\n  return Tooltip;\n}();\n\nTooltip.propTypes = {};\nmodule.exportDefault(Tooltip);","map":{"version":3,"sources":["imports/core/components/Translation/Tooltip.jsx"],"names":["React","module","watch","require","v","PropTypes","isArray","omit","FormattedMessage","Popover","DialogSimple","track","getPositionTop","top","id","placement","document","getElementById","clientHeight","getPositionLeft","left","clientWidth","Tooltip","props","positionTop","positionLeft","pureId","hide","match","dialogLabel","content","baseId","display","flexDirection","zIndex","marginTop","tooltipId","verticalSpace","passedProps","propTypes","exportDefault"],"mappings":";;;;;;;;AAAA,IAAIA,cAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACJ,cAAMI,CAAN;AAAQ;;AAApB;AAAA;AAAA,CAA9B,EAAoD,CAApD;AAAuD,IAAIC,kBAAJ;AAAcJ,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACC,kBAAUD,CAAV;AAAY;;AAAxB;AAAA;AAAA,CAAnC,EAA6D,CAA7D;AAAgE,IAAIE,gBAAJ;AAAYL,OAAOC,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACE,gBAAQF,CAAR;AAAU;;AAAtB;AAAA;AAAA,CAAvC,EAA+D,CAA/D;AAAkE,IAAIG,aAAJ;AAASN,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACG,aAAKH,CAAL;AAAO;;AAAnB;AAAA;AAAA,CAApC,EAAyD,CAAzD;;AAA4D,IAAII,0BAAJ;;AAAqBP,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAACK,kBAAD;AAAA,8BAAkBJ,CAAlB,EAAoB;AAACI,0BAAiBJ,CAAjB;AAAmB;;AAAxC;AAAA;AAAA,CAAnC,EAA6E,CAA7E;AAAgF,IAAIK,gBAAJ;AAAYR,OAAOC,KAAP,CAAaC,QAAQ,6BAAR,CAAb,EAAoD;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACK,gBAAQL,CAAR;AAAU;;AAAtB;AAAA;AAAA,CAApD,EAA4E,CAA5E;AAA+E,IAAIM,qBAAJ;AAAiBT,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACM,qBAAaN,CAAb;AAAe;;AAA3B;AAAA;AAAA,CAAxC,EAAqE,CAArE;AAAwE,IAAIO,cAAJ;AAAUV,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAAA;AAAA,sBAASC,CAAT,EAAW;AAACO,cAAMP,CAAN;AAAQ;;AAApB;AAAA;AAAA,CAA9C,EAAoE,CAApE;;AAYrkB;AACA;AACA,IAAMQ;AAAiB,WAAjBA,cAAiB,CAACC,GAAD,EAAMC,EAAN,EAAUC,SAAV,EAAwB;AAC7C,QACE,CAACA,cAAc,MAAd,IAAwBA,cAAc,OAAvC,KACAC,SAASC,cAAT,CAAwBH,EAAxB,CAFF,EAGE;AACA,aAAOD,MAAM,MAAMG,SAASC,cAAT,CAAwBH,EAAxB,EAA4BI,YAA/C;AACD;;AAED,WAAOL,GAAP;AACD;;AATK;AAAA,GAAN;;AAWA,IAAMM;AAAkB,WAAlBA,eAAkB,CAACC,IAAD,EAAON,EAAP,EAAWC,SAAX,EAAyB;AAC/C,QACE,CAACA,cAAc,KAAd,IAAuBA,cAAc,QAAtC,KACAC,SAASC,cAAT,CAAwBH,EAAxB,CAFF,EAGE;AACA,aAAOM,OAAO,MAAMJ,SAASC,cAAT,CAAwBH,EAAxB,EAA4BO,WAAhD;AACD;;AAED,WAAOD,IAAP;AACD;;AATK;AAAA,GAAN;;AAWA,IAAME;AAAU,WAAVA,OAAU,CAACC,KAAD,EAAW;AAAA,QAEvBR,SAFuB,GAUrBQ,KAVqB,CAEvBR,SAFuB;AAAA,QAGvBS,WAHuB,GAUrBD,KAVqB,CAGvBC,WAHuB;AAAA,QAIvBC,YAJuB,GAUrBF,KAVqB,CAIvBE,YAJuB;AAAA,QAKvBX,EALuB,GAUrBS,KAVqB,CAKvBT,EALuB;AAAA,QAMvBY,MANuB,GAUrBH,KAVqB,CAMvBG,MANuB;AAAA,QAOvBC,IAPuB,GAUrBJ,KAVqB,CAOvBI,IAPuB;AAAA,QAQvBC,KARuB,GAUrBL,KAVqB,CAQvBK,KARuB;AAAA,QASvBC,WATuB,GAUrBN,KAVqB,CASvBM,WATuB;AAYzB,QAAIC,UAAU,IAAd;AACA,QAAIC,SAASjB,EAAb;;AAEA,QAAIR,QAAQQ,EAAR,CAAJ,EAAiB;AACfiB,eAASjB,GAAG,CAAH,CAAT;AACAgB,gBACE;AAAA;AAAA;AAAM,iBAAO;AAAEE,qBAAS,MAAX;AAAmBC,2BAAe;AAAlC;AAAb;AACE,4BAAC,iBAAD;AAAkB,cAAIP,SAASK,MAAT,gBAA6BA;AAAnD,UADF;AAEE;AAAC,sBAAD;AAAA;AACE,mBAAOH,KADT,CAEE;AACA;AACA;AACA;AACA;AANF;AAOE,mBAAO;AAAEM,sBAAQ;AAAV,aAPT;AAQE,yBAAa;AAAEC,yBAAW;AAAb,aARf;AASE,mBAAON,eAAe,oBAAC,iBAAD;AAAkB,kBAAG;AAArB,cATxB;AAUE,2BAVF;AAWE;AAAW;AAAA,uBACTlB,MAAM,yBAAN,EAAiC;AAAEyB,6BAAWL;AAAb,iBAAjC,CADS;AAAA;;AAAX;AAAA,eAXF;AAcE;AAdF;AAgBE,8BAAC,iBAAD;AACE,gBAAIL,SAAYK,MAAZ,uBAAoCA,MAD1C;AAEE,oBAAQ;AACNM,6BACE;AAAA;AAAA;AACE,+CADF;AAEE;AAFF;AAFI;AAFV;AAhBF;AAFF,OADF;AAiCD,KAnCD,MAmCO;AACLP,gBAAU,oBAAC,iBAAD;AAAkB,YAAIJ,SAASZ,EAAT,gBAAyBA;AAA/C,QAAV;AACD;;AAED,QAAMwB,cAAc/B,KAAKgB,KAAL,EAAY,CAAC,SAAD,EAAY,QAAZ,EAAsB,MAAtB,EAA8B,OAA9B,CAAZ,CAApB;AAEA,WACE;AACA;AACA;AAAC,eAAD;AAAA,mCACMe,WADN;AAEE,cAAIP,MAFN,CAGE;AACA;AACA;AACA;;AANF;AAQGD;AARH,OAHF,CAaE;AACA;;AAdF;AAgBD;;AAxEK;AAAA,GAAN;;AA0EAR,QAAQiB,SAAR,GAAoB,EAApB;AA9GAtC,OAAOuC,aAAP,CAgHelB,OAhHf","file":"imports/core/components/Translation/Tooltip.jsx.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport isArray from 'lodash/isArray';\nimport omit from 'lodash/omit';\n\nimport { FormattedMessage } from 'react-intl';\nimport Popover from 'react-bootstrap/lib/Popover';\n// import Transition from './Transition';\nimport DialogSimple from 'core/components/DialogSimple';\n\nimport track from 'core/utils/analytics';\n\n// Required functions if react motion is used, which wraps the popover\n// and shifts it down or right depending on the placement\nconst getPositionTop = (top, id, placement) => {\n  if (\n    (placement === 'left' || placement === 'right') &&\n    document.getElementById(id)\n  ) {\n    return top - 0.5 * document.getElementById(id).clientHeight;\n  }\n\n  return top;\n};\n\nconst getPositionLeft = (left, id, placement) => {\n  if (\n    (placement === 'top' || placement === 'bottom') &&\n    document.getElementById(id)\n  ) {\n    return left - 0.5 * document.getElementById(id).clientWidth;\n  }\n\n  return left;\n};\n\nconst Tooltip = (props) => {\n  const {\n    placement,\n    positionTop,\n    positionLeft,\n    id,\n    pureId,\n    hide,\n    match,\n    dialogLabel,\n  } = props;\n\n  let content = null;\n  let baseId = id;\n\n  if (isArray(id)) {\n    baseId = id[0];\n    content = (\n      <span style={{ display: 'flex', flexDirection: 'column' }}>\n        <FormattedMessage id={pureId ? baseId : `tooltip.${baseId}`} />\n        <DialogSimple\n          title={match}\n          // rootStyle={{ alignSelf: 'center' }}\n          // Dialogs normally have zIndex of 1500\n          // Usually dialogs should be behind tooltips (which are\n          // at zindex 1501), but when you trigger a dialog from a tooltip,\n          // it should be above the previous tooltip, hence 1502\n          style={{ zIndex: 1502 }}\n          buttonStyle={{ marginTop: 16 }}\n          label={dialogLabel || <FormattedMessage id=\"general.learnMore\" />}\n          autoFocus\n          onEntered={() =>\n            track('Tooltip - opened dialog', { tooltipId: baseId })\n          }\n          cancelOnly\n        >\n          <FormattedMessage\n            id={pureId ? `${baseId}2` : `tooltip2.${baseId}`}\n            values={{\n              verticalSpace: (\n                <span>\n                  <br />\n                  <br />\n                </span>\n              ),\n            }}\n          />\n        </DialogSimple>\n      </span>\n    );\n  } else {\n    content = <FormattedMessage id={pureId ? id : `tooltip.${id}`} />;\n  }\n\n  const passedProps = omit(props, ['trigger', 'pureId', 'hide', 'match']);\n\n  return (\n    // <Transition hide={hide}>\n    //   {({ key, style }) =>\n    <Popover\n      {...passedProps}\n      id={baseId}\n      // key={key}\n      // style={{ opacity: style.opacity, transform: `scale(${style.scale})` }}\n      // positionTop={getPositionTop(positionTop, baseId, placement)}\n      // positionLeft={getPositionLeft(positionLeft, baseId, placement)}\n    >\n      {content}\n    </Popover>\n    // }\n    // </Transition>\n  );\n};\n\nTooltip.propTypes = {};\n\nexport default Tooltip;\n"]},"hash":"b422e00c3bed4f23eb8e77403dbbdcc956025191"}

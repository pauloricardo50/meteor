{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"./constants.js","imported":["LINK_STORAGE"],"specifiers":[{"kind":"named","imported":"LINK_STORAGE","local":"LINK_STORAGE"}]},{"source":"./linker.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Linker"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/links/extension.js","filenameRelative":"packages/cultofcoders:grapher/lib/links/extension.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/links/extension.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/links/extension.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"extension"},"ignored":false,"code":"let Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n    Mongo(v) {\n        Mongo = v;\n    }\n\n}, 0);\nlet LINK_STORAGE;\nmodule.watch(require(\"./constants.js\"), {\n    LINK_STORAGE(v) {\n        LINK_STORAGE = v;\n    }\n\n}, 1);\nlet Linker;\nmodule.watch(require(\"./linker.js\"), {\n    default(v) {\n        Linker = v;\n    }\n\n}, 2);\n\n_.extend(Mongo.Collection.prototype, {\n    /**\n     * The data we add should be valid for config.schema.js\n     */addLinks(data) {\n        if (!this[LINK_STORAGE]) {\n            this[LINK_STORAGE] = {};\n        }\n\n        _.each(data, (linkConfig, linkName) => {\n            if (this[LINK_STORAGE][linkName]) {\n                throw new Meteor.Error(`You cannot add the link with name: ${linkName} because it was already added to ${this._name} collection`);\n            }\n\n            const linker = new Linker(this, linkName, linkConfig);\n\n            _.extend(this[LINK_STORAGE], {\n                [linkName]: linker\n            });\n        });\n    },\n\n    getLinks() {\n        return this[LINK_STORAGE];\n    },\n\n    getLinker(name) {\n        if (this[LINK_STORAGE]) {\n            return this[LINK_STORAGE][name];\n        }\n    },\n\n    hasLink(name) {\n        if (!this[LINK_STORAGE]) {\n            return false;\n        }\n\n        return !!this[LINK_STORAGE][name];\n    },\n\n    getLink(objectOrId, name) {\n        let linkData = this[LINK_STORAGE];\n\n        if (!linkData) {\n            throw new Meteor.Error(`There are no links defined for collection: ${this._name}`);\n        }\n\n        if (!linkData[name]) {\n            throw new Meteor.Error(`There is no link ${name} for collection: ${this._name}`);\n        }\n\n        const linker = linkData[name];\n        let object = objectOrId;\n\n        if (typeof objectOrId == 'string') {\n            if (!linker.isVirtual()) {\n                object = this.findOne(objectOrId, {\n                    fields: {\n                        [linker.linkStorageField]: 1\n                    }\n                });\n            } else {\n                object = {\n                    _id: objectOrId\n                };\n            }\n\n            if (!object) {\n                throw new Meteor.Error(`We could not find any object with _id: \"${objectOrId}\" within the collection: ${this._name}`);\n            }\n        }\n\n        return linkData[name].createLink(object);\n    }\n\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/extension.js"],"names":["Mongo","module","watch","require","v","LINK_STORAGE","Linker","default","_","extend","Collection","prototype","addLinks","data","each","linkConfig","linkName","Meteor","Error","_name","linker","getLinks","getLinker","name","hasLink","getLink","objectOrId","linkData","object","isVirtual","findOne","fields","linkStorageField","_id","createLink"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/links/extension.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport {LINK_STORAGE} from './constants.js';\nimport Linker from './linker.js';\n\n_.extend(Mongo.Collection.prototype, {\n    /**\n     * The data we add should be valid for config.schema.js\n     */\n    addLinks(data) {\n        if (!this[LINK_STORAGE]) {\n            this[LINK_STORAGE] = {};\n        }\n\n        _.each(data, (linkConfig, linkName) => {\n            if (this[LINK_STORAGE][linkName]) {\n                throw new Meteor.Error(`You cannot add the link with name: ${linkName} because it was already added to ${this._name} collection`)\n            }\n\n            const linker = new Linker(this, linkName, linkConfig);\n\n            _.extend(this[LINK_STORAGE], {\n                [linkName]: linker\n            });\n        });\n    },\n    \n    getLinks() {\n        return this[LINK_STORAGE];\n    },\n\n    getLinker(name) {\n        if (this[LINK_STORAGE]) {\n            return this[LINK_STORAGE][name];\n        }\n    },\n\n    hasLink(name) {\n        if (!this[LINK_STORAGE]) {\n            return false;\n        }\n\n        return !!this[LINK_STORAGE][name];\n    },\n\n    getLink(objectOrId, name) {\n        let linkData = this[LINK_STORAGE];\n\n        if (!linkData) {\n            throw new Meteor.Error(`There are no links defined for collection: ${this._name}`);\n        }\n\n        if (!linkData[name]) {\n            throw new Meteor.Error(`There is no link ${name} for collection: ${this._name}`);\n        }\n\n        const linker = linkData[name];\n        let object = objectOrId;\n        if (typeof(objectOrId) == 'string') {\n            if (!linker.isVirtual()) {\n                object = this.findOne(objectOrId, {\n                    fields: {\n                        [linker.linkStorageField]: 1\n                    }\n                });\n            } else {\n                object = {_id: objectOrId};\n            }\n\n            if (!object) {\n                throw new Meteor.Error(`We could not find any object with _id: \"${objectOrId}\" within the collection: ${this._name}`);\n            }\n        }\n\n        return linkData[name].createLink(object);\n    }\n});\n\n"]},"hash":"63080cd9445773729d1df2333c75f12931e256e0"}

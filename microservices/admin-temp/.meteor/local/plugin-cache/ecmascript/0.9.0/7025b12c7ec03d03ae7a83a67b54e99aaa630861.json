{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"simpl-schema","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SimpleSchema"}]},{"source":"../files/files","imported":["getFileSchema"],"specifiers":[{"kind":"named","imported":"getFileSchema","local":"getFileSchema"}]},{"source":"./additionalSchemas","imported":["GeneralSchema","PropertySchema","LogicSchema"],"specifiers":[{"kind":"named","imported":"GeneralSchema","local":"GeneralSchema"},{"kind":"named","imported":"PropertySchema","local":"PropertySchema"},{"kind":"named","imported":"LogicSchema","local":"LogicSchema"}]},{"source":"./loanConstants","imported":["LOAN_STATUS"],"specifiers":[{"kind":"named","imported":"LOAN_STATUS","local":"LOAN_STATUS"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/loans/loans.js","filenameRelative":"imports/core/api/loans/loans.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/loans/loans.js.map","sourceFileName":"imports/core/api/loans/loans.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"loans"},"ignored":false,"code":"\"use strict\";\n\nvar _Mongo = void 0;\n\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function Mongo(v) {\n    _Mongo = v;\n  }\n}, 0);\nvar SimpleSchema = void 0;\nmodule.watch(require(\"simpl-schema\"), {\n  default: function _default(v) {\n    SimpleSchema = v;\n  }\n}, 1);\n\nvar _getFileSchema = void 0;\n\nmodule.watch(require(\"../files/files\"), {\n  getFileSchema: function getFileSchema(v) {\n    _getFileSchema = v;\n  }\n}, 2);\n\nvar _GeneralSchema = void 0,\n    _PropertySchema = void 0,\n    _LogicSchema = void 0;\n\nmodule.watch(require(\"./additionalSchemas\"), {\n  GeneralSchema: function GeneralSchema(v) {\n    _GeneralSchema = v;\n  },\n  PropertySchema: function PropertySchema(v) {\n    _PropertySchema = v;\n  },\n  LogicSchema: function LogicSchema(v) {\n    _LogicSchema = v;\n  }\n}, 3);\n\nvar _LOAN_STATUS = void 0;\n\nmodule.watch(require(\"./loanConstants\"), {\n  LOAN_STATUS: function LOAN_STATUS(v) {\n    _LOAN_STATUS = v;\n  }\n}, 4);\nvar Loans = new _Mongo.Collection('loans');\nvar LoanFilesSchema = new SimpleSchema(_getFileSchema('loan')); // Prevent all client side modifications of mongoDB\n\nLoans.deny({\n  insert: function insert() {\n    return true;\n  },\n  update: function update() {\n    return true;\n  },\n  remove: function remove() {\n    return true;\n  }\n});\nLoans.allow({\n  insert: function insert() {\n    return true;\n  },\n  update: function update() {\n    return false;\n  },\n  remove: function remove() {\n    return false;\n  }\n}); // Documentation is in the google drive dev/MongoDB Schemas\n\nvar LoanSchema = new SimpleSchema({\n  userId: {\n    type: String,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function autoValue() {\n      if (this.isInsert) {\n        return new Date();\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function autoValue() {\n      // Verify the update is from the user owning this doc, ignoring admin/partner updates\n      var doc = Loans.findOne({\n        _id: this.docId\n      }, {\n        fields: {\n          userId: 1\n        }\n      });\n\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpdate && doc && this.userId === doc.userId) {\n        return new Date();\n      }\n    }\n  },\n  status: {\n    type: String,\n    defaultValue: _LOAN_STATUS.ACTIVE,\n    allowedValues: Object.values(_LOAN_STATUS)\n  },\n  name: {\n    type: String,\n    optional: true,\n    defaultValue: ''\n  },\n  general: {\n    type: _GeneralSchema,\n    defaultValue: {}\n  },\n  borrowerIds: {\n    type: Array,\n    defaultValue: []\n  },\n  'borrowerIds.$': String,\n  // property: PropertySchema,\n  propertyId: {\n    type: String\n  },\n  files: {\n    type: LoanFilesSchema,\n    defaultValue: {}\n  },\n  logic: {\n    type: _LogicSchema,\n    defaultValue: {}\n  },\n  adminValidation: {\n    type: Object,\n    defaultValue: {},\n    blackbox: true\n  },\n  adminNote: {\n    type: String,\n    defaultValue: '',\n    optional: true\n  },\n  emails: {\n    type: Array,\n    defaultValue: []\n  },\n  'emails.$': Object,\n  'emails.$._id': String,\n  'emails.$.emailId': String,\n  'emails.$.status': String,\n  'emails.$.updatedAt': Date,\n  'emails.$.scheduledAt': {\n    type: Date,\n    optional: true\n  }\n}); // Finally, attach schema to the Mongo collection and export\n\nLoans.attachSchema(LoanSchema);\nmodule.exportDefault(Loans);","map":{"version":3,"sources":["imports/core/api/loans/loans.js"],"names":["Mongo","module","watch","require","v","SimpleSchema","default","getFileSchema","GeneralSchema","PropertySchema","LogicSchema","LOAN_STATUS","Loans","Collection","LoanFilesSchema","deny","insert","update","remove","allow","LoanSchema","userId","type","String","optional","createdAt","Date","autoValue","isInsert","updatedAt","doc","findOne","_id","docId","fields","isUpdate","status","defaultValue","ACTIVE","allowedValues","Object","values","name","general","borrowerIds","Array","propertyId","files","logic","adminValidation","blackbox","adminNote","emails","attachSchema","exportDefault"],"mappings":"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","file":"imports/core/api/loans/loans.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nimport { getFileSchema } from '../files/files';\nimport {\n  GeneralSchema,\n  PropertySchema,\n  LogicSchema,\n} from './additionalSchemas';\nimport { LOAN_STATUS } from './loanConstants';\n\nconst Loans = new Mongo.Collection('loans');\n\nconst LoanFilesSchema = new SimpleSchema(getFileSchema('loan'));\n\n// Prevent all client side modifications of mongoDB\nLoans.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\nLoans.allow({\n  insert: () => true,\n  update: () => false,\n  remove: () => false,\n});\n\n// Documentation is in the google drive dev/MongoDB Schemas\nconst LoanSchema = new SimpleSchema({\n  userId: {\n    type: String,\n    optional: true,\n  },\n  createdAt: {\n    type: Date,\n    autoValue() {\n      if (this.isInsert) {\n        return new Date();\n      }\n    },\n  },\n  updatedAt: {\n    type: Date,\n    autoValue() {\n      // Verify the update is from the user owning this doc, ignoring admin/partner updates\n      const doc = Loans.findOne({ _id: this.docId }, { fields: { userId: 1 } });\n\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpdate && doc && this.userId === doc.userId) {\n        return new Date();\n      }\n    },\n  },\n  status: {\n    type: String,\n    defaultValue: LOAN_STATUS.ACTIVE,\n    allowedValues: Object.values(LOAN_STATUS),\n  },\n  name: { type: String, optional: true, defaultValue: '' },\n  general: { type: GeneralSchema, defaultValue: {} },\n  borrowerIds: { type: Array, defaultValue: [] },\n  'borrowerIds.$': String,\n  // property: PropertySchema,\n  propertyId: { type: String },\n  files: { type: LoanFilesSchema, defaultValue: {} },\n  logic: { type: LogicSchema, defaultValue: {} },\n  adminValidation: { type: Object, defaultValue: {}, blackbox: true },\n  adminNote: { type: String, defaultValue: '', optional: true },\n  emails: { type: Array, defaultValue: [] },\n  'emails.$': Object,\n  'emails.$._id': String,\n  'emails.$.emailId': String,\n  'emails.$.status': String,\n  'emails.$.updatedAt': Date,\n  'emails.$.scheduledAt': { type: Date, optional: true },\n});\n\n// Finally, attach schema to the Mongo collection and export\nLoans.attachSchema(LoanSchema);\nexport default Loans;\n"]},"hash":"7025b12c7ec03d03ae7a83a67b54e99aaa630861"}

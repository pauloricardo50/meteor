{"metadata":{"usedHelpers":["extends","typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"./constants","imported":["default","logismataValues"],"specifiers":[{"kind":"named","imported":"default","local":"constants"},{"kind":"named","imported":"logismataValues","local":"logismataValues"}]}],"exports":{"exported":["handleResponse","getAuthToken","setToken","convertParamsToLogismata","convertToLogismataTaxBase","getParamsArray","getTaxBase","callApi","getLocationId","getIndirectAmortization","getDirectAmortization"],"specifiers":[{"kind":"local","local":"handleResponse","exported":"handleResponse"},{"kind":"local","local":"getAuthToken","exported":"getAuthToken"},{"kind":"local","local":"setToken","exported":"setToken"},{"kind":"local","local":"convertParamsToLogismata","exported":"convertParamsToLogismata"},{"kind":"local","local":"convertToLogismataTaxBase","exported":"convertToLogismataTaxBase"},{"kind":"local","local":"getParamsArray","exported":"getParamsArray"},{"kind":"local","local":"getTaxBase","exported":"getTaxBase"},{"kind":"local","local":"callApi","exported":"callApi"},{"kind":"local","local":"getLocationId","exported":"getLocationId"},{"kind":"local","local":"getIndirectAmortization","exported":"getIndirectAmortization"},{"kind":"local","local":"getDirectAmortization","exported":"getDirectAmortization"}]}}},"options":{"filename":"imports/core/utils/logismata/api.js","filenameRelative":"imports/core/utils/logismata/api.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/utils/logismata/api.js.map","sourceFileName":"imports/core/utils/logismata/api.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"api"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleResponse = undefined;\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nmodule.export({\n  handleResponse: function () {\n    function handleResponse() {\n      return _handleResponse;\n    }\n\n    return handleResponse;\n  }(),\n  getAuthToken: function () {\n    function getAuthToken() {\n      return _getAuthToken;\n    }\n\n    return getAuthToken;\n  }(),\n  setToken: function () {\n    function setToken() {\n      return _setToken;\n    }\n\n    return setToken;\n  }(),\n  convertParamsToLogismata: function () {\n    function convertParamsToLogismata() {\n      return _convertParamsToLogismata;\n    }\n\n    return convertParamsToLogismata;\n  }(),\n  convertToLogismataTaxBase: function () {\n    function convertToLogismataTaxBase() {\n      return _convertToLogismataTaxBase;\n    }\n\n    return convertToLogismataTaxBase;\n  }(),\n  getParamsArray: function () {\n    function getParamsArray() {\n      return _getParamsArray;\n    }\n\n    return getParamsArray;\n  }(),\n  getTaxBase: function () {\n    function getTaxBase() {\n      return _getTaxBase;\n    }\n\n    return getTaxBase;\n  }(),\n  callApi: function () {\n    function callApi() {\n      return _callApi;\n    }\n\n    return callApi;\n  }(),\n  getLocationId: function () {\n    function getLocationId() {\n      return _getLocationId;\n    }\n\n    return getLocationId;\n  }(),\n  getIndirectAmortization: function () {\n    function getIndirectAmortization() {\n      return _getIndirectAmortization;\n    }\n\n    return getIndirectAmortization;\n  }(),\n  getDirectAmortization: function () {\n    function getDirectAmortization() {\n      return _getDirectAmortization;\n    }\n\n    return getDirectAmortization;\n  }()\n});\n\nvar _2 = void 0;\n\nmodule.watch(require(\"lodash\"), {\n  _: function () {\n    function _(v) {\n      _2 = v;\n    }\n\n    return _;\n  }()\n}, 0);\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function () {\n    function Meteor(v) {\n      _Meteor = v;\n    }\n\n    return Meteor;\n  }()\n}, 1);\n\nvar constants = void 0,\n    _logismataValues = void 0;\n\nmodule.watch(require(\"./constants\"), {\n  \"default\": function () {\n    function _default(v) {\n      constants = v;\n    }\n\n    return _default;\n  }(),\n  logismataValues: function () {\n    function logismataValues(v) {\n      _logismataValues = v;\n    }\n\n    return logismataValues;\n  }()\n}, 2);\nexports.handleResponse = _handleResponse;\nvar fetch = void 0;\n\nif (_Meteor.isServer) {\n  fetch = require('node-fetch');\n} else {\n  fetch = global.fetch;\n}\n\n// Where the current token will be stored\nvar token = void 0;\n\nvar _handleResponse = function () {\n  function _handleResponse(response) {\n    if (response.status !== 200) {\n      throw response;\n    }\n\n    return response.json();\n  }\n\n  return _handleResponse;\n}(); /**\n      * getAuthToken - verifies if the token exists, and fetches a new one if not\n      *\n      * @param {String} testKey an optional string used for testing\n      *\n      * @return {String} The authentication token\n      */\n\nvar _getAuthToken = function () {\n  function _getAuthToken(testKey) {\n    return token ? Promise.resolve(token) : fetch(constants.authUrl(testKey), {\n      method: 'GET'\n    }).then(_handleResponse).then(function (body) {\n      token = body.authToken;\n      return body.authToken;\n    });\n  }\n\n  return _getAuthToken;\n}();\n\nvar _setToken = function () {\n  function _setToken(authToken) {\n    return Promise.resolve(authToken).then(function () {\n      token = authToken;\n    });\n  }\n\n  return _setToken;\n}();\n\nvar _convertParamsToLogismata = function () {\n  function _convertParamsToLogismata() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var newParams = (0, _extends3.default)({}, params);\n    Object.keys(_logismataValues).forEach(function (key) {\n      if (params[key] !== undefined) {\n        var newValue = _2.findKey(_logismataValues[key], function (val) {\n          return val === params[key];\n        });\n\n        if (!newValue) {\n          throw new Error('invalid logismata value provided');\n        }\n\n        newParams[key] = Number(newValue);\n      } else {\n        newParams[key] = _logismataValues[key].default;\n      }\n    });\n    return newParams;\n  }\n\n  return _convertParamsToLogismata;\n}();\n\nvar _convertToLogismataTaxBase = function () {\n  function _convertToLogismataTaxBase(taxBase) {\n    var params = _convertParamsToLogismata(taxBase);\n\n    return {\n      age: params.age,\n      children: params.childrenCount,\n      civil: params.civilStatus,\n      confession: params.confession,\n      gross_fortune: params.grossFortune,\n      gross_income: params.grossIncome,\n      income_type: params.incomeBase,\n      locationid: params.locationId,\n      sex: params.sex\n    };\n  }\n\n  return _convertToLogismataTaxBase;\n}();\n\nvar _getParamsArray = function () {\n  function _getParamsArray(method, params) {\n    var logismataParams = _convertParamsToLogismata(params);\n\n    switch (method) {\n      case 'getLocationInfo':\n        return [logismataParams.locationId];\n\n      case 'searchLocations':\n        return [logismataParams.search, logismataParams.language, logismataParams.country];\n\n      case 'calcTaxableIncomeState': // Same as calcTaxableIncomeCountry\n\n      case 'calcTaxableIncomeCountry':\n        return [logismataParams.locationId, logismataParams.age, logismataParams.civilStatus, logismataParams.confession, logismataParams.childrenCount, logismataParams.grossIncome, logismataParams.isEmployee];\n\n      case 'calcTaxableFortune':\n        return [logismataParams.locationId, logismataParams.age, logismataParams.civilStatus, logismataParams.childrenCount, logismataParams.grossFortune];\n\n      case 'calcDirectAmortization':\n        return ['', // customization\n        _convertToLogismataTaxBase(params.taxBase), {\n          amortization_goal: logismataParams.amortizationGoal,\n          duration: logismataParams.duration,\n          has_detailed_amortization: logismataParams.isDetailed,\n          rental_value: logismataParams.rentalValue,\n          maintenance_costs: logismataParams.maintenanceCosts,\n          mortgages: logismataParams.mortgages,\n          new_mortgages: logismataParams.newMortgages\n        }];\n\n      case 'calcIndirectAmortization':\n        return ['', // customization\n        _convertToLogismataTaxBase(params.taxBase), {\n          amortization_goal: logismataParams.amortizationGoal,\n          duration: logismataParams.duration,\n          saving_type: logismataParams.savingType,\n          saving_interestrate: logismataParams.savingRate,\n          saving_amount_manual: false,\n          saving_amount: logismataParams.savingAmount,\n          rental_value: logismataParams.rentalValue,\n          maintenance_costs: logismataParams.maintenanceCosts,\n          mortgages: logismataParams.mortgages,\n          new_mortgages: logismataParams.newMortgages\n        }];\n\n      default:\n        throw new Error('invalid logismata method name');\n    }\n  }\n\n  return _getParamsArray;\n}();\n\nvar _getTaxBase = function () {\n  function _getTaxBase(data) {}\n\n  return _getTaxBase;\n}();\n\nvar _callApi = function () {\n  function _callApi(method, params) {\n    var data = JSON.stringify({\n      authToken: token,\n      loan: {\n        method: method,\n        // Stringify objects in the array, do not stringify strings once again\n        params: [].concat(_toConsumableArray(_getParamsArray(method, params).map(function (i) {\n          return (typeof i === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(i)) === 'object' ? JSON.stringify(i) : i;\n        })))\n      }\n    });\n    return fetch(constants.calcUrl(), {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: '*/*'\n      },\n      body: data\n    }).then(function (response) {\n      return response.json();\n    });\n  }\n\n  return _callApi;\n}();\n\nvar _getLocationId = function () {\n  function _getLocationId(search) {\n    return _callApi('searchLocations', {\n      search: search,\n      country: 'CH',\n      language: 'all'\n    }).then(function (result) {\n      if (result.response && result.response.length) {\n        return result.response[result.response.length - 1].id;\n      }\n\n      throw new Error('Could not find locationId through logismata');\n    });\n  }\n\n  return _getLocationId;\n}();\n\nvar _getIndirectAmortization = function () {\n  function _getIndirectAmortization() {}\n\n  return _getIndirectAmortization;\n}();\n\nvar _getDirectAmortization = function () {\n  function _getDirectAmortization() {}\n\n  return _getDirectAmortization;\n}();","map":{"version":3,"sources":["imports/core/utils/logismata/api.js"],"names":["module","export","handleResponse","getAuthToken","setToken","convertParamsToLogismata","convertToLogismataTaxBase","getParamsArray","getTaxBase","callApi","getLocationId","getIndirectAmortization","getDirectAmortization","_","watch","require","v","Meteor","constants","logismataValues","fetch","isServer","global","token","response","status","json","Promise","resolve","authUrl","testKey","method","then","body","authToken","params","newParams","Object","keys","forEach","key","undefined","newValue","findKey","val","Error","Number","default","taxBase","age","children","childrenCount","civil","civilStatus","confession","gross_fortune","grossFortune","gross_income","grossIncome","income_type","incomeBase","locationid","locationId","sex","logismataParams","search","language","country","isEmployee","amortization_goal","amortizationGoal","duration","has_detailed_amortization","isDetailed","rental_value","rentalValue","maintenance_costs","maintenanceCosts","mortgages","new_mortgages","newMortgages","saving_type","savingType","saving_interestrate","savingRate","saving_amount_manual","saving_amount","savingAmount","data","JSON","stringify","loan","map","i","calcUrl","headers","Accept","result","length","id"],"mappings":"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","file":"imports/core/utils/logismata/api.js.map","sourcesContent":["import { _ } from 'lodash';\nimport { Meteor } from 'meteor/meteor';\n\nlet fetch;\nif (Meteor.isServer) {\n  fetch = require('node-fetch');\n} else {\n  fetch = global.fetch;\n}\n\nimport constants, { logismataValues } from './constants';\n\n// Where the current token will be stored\nlet token;\n\nexport const handleResponse = (response) => {\n  if (response.status !== 200) {\n    throw response;\n  }\n\n  return response.json();\n};\n\n/**\n * getAuthToken - verifies if the token exists, and fetches a new one if not\n *\n * @param {String} testKey an optional string used for testing\n *\n * @return {String} The authentication token\n */\nexport const getAuthToken = testKey =>\n  (token\n    ? Promise.resolve(token)\n    : fetch(constants.authUrl(testKey), { method: 'GET' })\n      .then(handleResponse)\n      .then((body) => {\n        token = body.authToken;\n        return body.authToken;\n      }));\n\nexport const setToken = authToken =>\n  Promise.resolve(authToken).then(() => {\n    token = authToken;\n  });\n\nexport const convertParamsToLogismata = (params = {}) => {\n  const newParams = { ...params };\n\n  Object.keys(logismataValues).forEach((key) => {\n    if (params[key] !== undefined) {\n      const newValue = _.findKey(\n        logismataValues[key],\n        val => val === params[key],\n      );\n\n      if (!newValue) {\n        throw new Error('invalid logismata value provided');\n      }\n\n      newParams[key] = Number(newValue);\n    } else {\n      newParams[key] = logismataValues[key].default;\n    }\n  });\n\n  return newParams;\n};\n\nexport const convertToLogismataTaxBase = (taxBase) => {\n  const params = convertParamsToLogismata(taxBase);\n\n  return {\n    age: params.age,\n    children: params.childrenCount,\n    civil: params.civilStatus,\n    confession: params.confession,\n    gross_fortune: params.grossFortune,\n    gross_income: params.grossIncome,\n    income_type: params.incomeBase,\n    locationid: params.locationId,\n    sex: params.sex,\n  };\n};\n\n/**\n * getParamsArray - Returns an array of parameters in the right order\n * for logismata's API\n *\n * @param {String} method the name of the logismata method\n * @param {Object} params an object of values\n *\n * @return {Array}\n */\n\nexport const getParamsArray = (method, params) => {\n  const logismataParams = convertParamsToLogismata(params);\n  switch (method) {\n  case 'getLocationInfo':\n    return [logismataParams.locationId];\n  case 'searchLocations':\n    return [\n      logismataParams.search,\n      logismataParams.language,\n      logismataParams.country,\n    ];\n  case 'calcTaxableIncomeState':\n    // Same as calcTaxableIncomeCountry\n  case 'calcTaxableIncomeCountry':\n    return [\n      logismataParams.locationId,\n      logismataParams.age,\n      logismataParams.civilStatus,\n      logismataParams.confession,\n      logismataParams.childrenCount,\n      logismataParams.grossIncome,\n      logismataParams.isEmployee,\n    ];\n  case 'calcTaxableFortune':\n    return [\n      logismataParams.locationId,\n      logismataParams.age,\n      logismataParams.civilStatus,\n      logismataParams.childrenCount,\n      logismataParams.grossFortune,\n    ];\n  case 'calcDirectAmortization':\n    return [\n      '', // customization\n      convertToLogismataTaxBase(params.taxBase),\n      {\n        amortization_goal: logismataParams.amortizationGoal,\n        duration: logismataParams.duration,\n        has_detailed_amortization: logismataParams.isDetailed,\n        rental_value: logismataParams.rentalValue,\n        maintenance_costs: logismataParams.maintenanceCosts,\n        mortgages: logismataParams.mortgages,\n        new_mortgages: logismataParams.newMortgages,\n      },\n    ];\n  case 'calcIndirectAmortization':\n    return [\n      '', // customization\n      convertToLogismataTaxBase(params.taxBase),\n      {\n        amortization_goal: logismataParams.amortizationGoal,\n        duration: logismataParams.duration,\n        saving_type: logismataParams.savingType,\n        saving_interestrate: logismataParams.savingRate,\n        saving_amount_manual: false,\n        saving_amount: logismataParams.savingAmount,\n        rental_value: logismataParams.rentalValue,\n        maintenance_costs: logismataParams.maintenanceCosts,\n        mortgages: logismataParams.mortgages,\n        new_mortgages: logismataParams.newMortgages,\n      },\n    ];\n  default:\n    throw new Error('invalid logismata method name');\n  }\n};\n\nexport const getTaxBase = (data) => {};\n\nexport const callApi = (method, params) => {\n  const data = JSON.stringify({\n    authToken: token,\n    loan: {\n      method,\n      // Stringify objects in the array, do not stringify strings once again\n      params: [\n        ...getParamsArray(method, params).map(i => (typeof i === 'object' ? JSON.stringify(i) : i)),\n      ],\n    },\n  });\n  return fetch(constants.calcUrl(), {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json', Accept: '*/*' },\n    body: data,\n  }).then(response => response.json());\n};\n\nexport const getLocationId = search =>\n  callApi('searchLocations', {\n    search,\n    country: 'CH',\n    language: 'all',\n  }).then((result) => {\n    if (result.response && result.response.length) {\n      return result.response[result.response.length - 1].id;\n    }\n    throw new Error('Could not find locationId through logismata');\n  });\n\nexport const getIndirectAmortization = () => {};\n\nexport const getDirectAmortization = () => {};\n"]},"hash":"16c0d948856694247bcde238cf51f94486f7d06a"}

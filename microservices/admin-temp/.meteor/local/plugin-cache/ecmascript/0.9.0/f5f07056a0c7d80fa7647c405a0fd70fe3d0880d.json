{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../tasks","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Tasks"}]},{"source":"./tasksConstants","imported":["TASK_STATUS","TASK_TYPE"],"specifiers":[{"kind":"named","imported":"TASK_STATUS","local":"TASK_STATUS"},{"kind":"named","imported":"TASK_TYPE","local":"TASK_TYPE"}]},{"source":"./queries/tasksUnassigned","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"unassignedTasksQuery"}]},{"source":"fs","imported":["truncateSync"],"specifiers":[{"kind":"named","imported":"truncateSync","local":"truncateSync"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/api/tasks/TaskService.js","filenameRelative":"imports/core/api/tasks/TaskService.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/api/tasks/TaskService.js.map","sourceFileName":"imports/core/api/tasks/TaskService.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TaskService"},"ignored":false,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 0);\nvar Tasks = void 0;\nmodule.watch(require(\"../tasks\"), {\n  default: function _default(v) {\n    Tasks = v;\n  }\n}, 1);\n\nvar _TASK_STATUS = void 0,\n    _TASK_TYPE = void 0;\n\nmodule.watch(require(\"./tasksConstants\"), {\n  TASK_STATUS: function TASK_STATUS(v) {\n    _TASK_STATUS = v;\n  },\n  TASK_TYPE: function TASK_TYPE(v) {\n    _TASK_TYPE = v;\n  }\n}, 2);\nvar unassignedTasksQuery = void 0;\nmodule.watch(require(\"./queries/tasksUnassigned\"), {\n  default: function _default(v) {\n    unassignedTasksQuery = v;\n  }\n}, 3);\n\nvar _truncateSync = void 0;\n\nmodule.watch(require(\"fs\"), {\n  truncateSync: function truncateSync(v) {\n    _truncateSync = v;\n  }\n}, 4);\n\nvar TaskService = function TaskService() {\n  var _this = this;\n\n  (0, _classCallCheck3.default)(this, TaskService);\n\n  this.insert = function (_ref) {\n    var type = _ref.type,\n        loanId = _ref.loanId,\n        userId = _ref.userId,\n        borrowerId = _ref.borrowerId,\n        propertyId = _ref.propertyId,\n        assignedTo = _ref.assignedTo,\n        createdBy = _ref.createdBy;\n\n    if (type !== _TASK_TYPE.ADD_ASSIGNED_TO) {\n      var existingTask = Tasks.findOne({\n        type: type,\n        loanId: loanId,\n        borrowerId: borrowerId,\n        propertyId: propertyId,\n        userId: userId,\n        status: _TASK_STATUS.ACTIVE\n      });\n\n      if (existingTask) {\n        throw new _Meteor.Error('duplicate active task');\n      }\n    } // check userId in loan and pass it as assignedTo\n\n\n    return Tasks.insert({\n      type: type,\n      assignedTo: assignedTo,\n      createdBy: createdBy,\n      borrowerId: borrowerId,\n      loanId: loanId,\n      propertyId: propertyId,\n      userId: userId\n    });\n  };\n\n  this.remove = function (_ref2) {\n    var taskId = _ref2.taskId;\n    return Tasks.remove(taskId);\n  };\n\n  this.update = function (_ref3) {\n    var taskId = _ref3.taskId,\n        task = _ref3.task;\n    return Tasks.update(taskId, {\n      $set: task\n    });\n  };\n\n  this.complete = function (_ref4) {\n    var taskId = _ref4.taskId;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        status: _TASK_STATUS.COMPLETED,\n        completedAt: new Date()\n      }\n    });\n  };\n\n  this.completeByType = function (_ref5) {\n    var type = _ref5.type,\n        loanId = _ref5.loanId,\n        newStatus = _ref5.newStatus;\n    var taskToComplete = Tasks.findOne({\n      loanId: loanId,\n      type: type,\n      status: _TASK_STATUS.ACTIVE\n    });\n\n    if (!taskToComplete) {\n      throw new _Meteor.Error(\"task couldn't be found\");\n    }\n\n    return _this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || _TASK_STATUS.COMPLETED,\n        completedAt: new Date()\n      }\n    });\n  };\n\n  this.changeStatus = function (_ref6) {\n    var taskId = _ref6.taskId,\n        newStatus = _ref6.newStatus;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        status: newStatus\n      }\n    });\n  };\n\n  this.changeAssignedTo = function (_ref7) {\n    var taskId = _ref7.taskId,\n        newAssignee = _ref7.newAssignee;\n    return _this.update({\n      taskId: taskId,\n      task: {\n        assignedTo: newAssignee\n      }\n    });\n  };\n\n  this.isRelatedToUser = function (_ref8) {\n    var task = _ref8.task,\n        userId = _ref8.userId;\n\n    // if (task.userId === userId) {\n    //   return true;\n    // }\n    if (task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n\n    if (task.loan.loanAssignee === userId) {\n      return true;\n    }\n\n    if (task.property.propertyAssignee === userId) {\n      return true;\n    }\n\n    return false;\n  };\n\n  this.assignAllTasksToAdmin = function (_ref9) {\n    var userId = _ref9.userId,\n        newAssignee = _ref9.newAssignee;\n    var unassignedTasks = unassignedTasksQuery.fetch(); // console.log(unassignedTasks);\n\n    unassignedTasks.map(function (task) {\n      if (_this.isRelatedToUser({\n        task: task,\n        userId: userId\n      })) {\n        var taskId = task._id;\n\n        _this.update({\n          taskId: taskId,\n          task: {\n            assignedTo: newAssignee\n          }\n        });\n      }\n\n      return task;\n    });\n  };\n};\n\nmodule.exportDefault(new TaskService());","map":{"version":3,"sources":["imports/core/api/tasks/TaskService.js"],"names":["Meteor","module","watch","require","v","Tasks","default","TASK_STATUS","TASK_TYPE","unassignedTasksQuery","truncateSync","TaskService","insert","type","loanId","userId","borrowerId","propertyId","assignedTo","createdBy","ADD_ASSIGNED_TO","existingTask","findOne","status","ACTIVE","Error","remove","taskId","update","task","$set","complete","COMPLETED","completedAt","Date","completeByType","newStatus","taskToComplete","_id","changeStatus","changeAssignedTo","newAssignee","isRelatedToUser","borrower","borrowerAssignee","loan","loanAssignee","property","propertyAssignee","assignAllTasksToAdmin","unassignedTasks","fetch","map","exportDefault"],"mappings":"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","file":"imports/core/api/tasks/TaskService.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport Tasks from '../tasks';\nimport { TASK_STATUS, TASK_TYPE } from './tasksConstants';\nimport unassignedTasksQuery from 'core/api/tasks/queries/tasksUnassigned';\nimport { truncateSync } from 'fs';\n\nclass TaskService {\n  insert = ({ type, loanId, userId, borrowerId, propertyId, assignedTo, createdBy }) => {\n    if (type !== TASK_TYPE.ADD_ASSIGNED_TO) {\n      const existingTask = Tasks.findOne({\n        type,\n        loanId,\n        borrowerId,\n        propertyId,\n        userId,\n        status: TASK_STATUS.ACTIVE,\n      });\n      if (existingTask) {\n        throw new Meteor.Error('duplicate active task');\n      }\n    }\n    // check userId in loan and pass it as assignedTo\n    return Tasks.insert({\n      type,\n      assignedTo,\n      createdBy,\n      borrowerId,\n      loanId,\n      propertyId,\n      userId,\n    });\n  };\n\n  remove = ({ taskId }) => Tasks.remove(taskId);\n\n  update = ({ taskId, task }) => Tasks.update(taskId, { $set: task });\n\n  complete = ({ taskId }) =>\n    this.update({\n      taskId,\n      task: {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n\n  completeByType = ({ type, loanId, newStatus }) => {\n    const taskToComplete = Tasks.findOne({\n      loanId,\n      type,\n      status: TASK_STATUS.ACTIVE,\n    });\n\n    if (!taskToComplete) {\n      throw new Meteor.Error(\"task couldn't be found\");\n    }\n\n    return this.update({\n      taskId: taskToComplete._id,\n      task: {\n        status: newStatus || TASK_STATUS.COMPLETED,\n        completedAt: new Date(),\n      },\n    });\n  };\n\n  changeStatus = ({ taskId, newStatus }) =>\n    this.update({ taskId, task: { status: newStatus } });\n\n  changeAssignedTo = ({ taskId, newAssignee }) =>\n    this.update({\n      taskId,\n      task: { assignedTo: newAssignee },\n    });\n\n  isRelatedToUser = ({ task, userId }) => {\n    // if (task.userId === userId) {\n    //   return true;\n    // }\n    if (task.borrower.borrowerAssignee === userId) {\n      return true;\n    }\n    if (task.loan.loanAssignee === userId) {\n      return true;\n    }\n    if (task.property.propertyAssignee === userId) {\n      return true;\n    }\n    return false;\n  };\n\n  assignAllTasksToAdmin = ({ userId, newAssignee }) => {\n    const unassignedTasks = unassignedTasksQuery.fetch();\n    // console.log(unassignedTasks);\n    unassignedTasks.map((task) => {\n      if (this.isRelatedToUser({ task, userId })) {\n        const taskId = task._id;\n        this.update({\n          taskId,\n          task: { assignedTo: newAssignee },\n        });\n      }\n      \n      return task;\n    });\n  };\n}\n\nexport default new TaskService();\n"]},"hash":"f5f07056a0c7d80fa7647c405a0fd70fe3d0880d"}

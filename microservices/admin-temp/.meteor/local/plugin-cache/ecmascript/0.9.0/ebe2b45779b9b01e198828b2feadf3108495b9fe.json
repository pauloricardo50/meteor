{"metadata":{"usedHelpers":["defineProperty","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/edgee:slingshot","imported":["Slingshot"],"specifiers":[{"kind":"named","imported":"Slingshot","local":"Slingshot"}]},{"source":"react-dropzone-component","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DropzoneComponent"}]},{"source":"react-intl","imported":["injectIntl"],"specifiers":[{"kind":"named","imported":"injectIntl","local":"injectIntl"}]},{"source":"../../api/cleanMethods","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"cleanMethod"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/components/AutoForm/DropzoneInput.jsx","filenameRelative":"imports/core/components/AutoForm/DropzoneInput.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/components/AutoForm/DropzoneInput.jsx.map","sourceFileName":"imports/core/components/AutoForm/DropzoneInput.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"DropzoneInput"},"ignored":false,"code":"\"use strict\";\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\");\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar PropTypes = void 0;\nmodule.watch(require(\"prop-types\"), {\n  default: function _default(v) {\n    PropTypes = v;\n  }\n}, 0);\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  default: function _default(v) {\n    React = v;\n  }\n}, 1);\n\nvar _Meteor = void 0;\n\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function Meteor(v) {\n    _Meteor = v;\n  }\n}, 2);\n\nvar _Slingshot = void 0;\n\nmodule.watch(require(\"meteor/edgee:slingshot\"), {\n  Slingshot: function Slingshot(v) {\n    _Slingshot = v;\n  }\n}, 3);\nvar DropzoneComponent = void 0;\nmodule.watch(require(\"react-dropzone-component\"), {\n  default: function _default(v) {\n    DropzoneComponent = v;\n  }\n}, 4);\n\nvar _injectIntl = void 0;\n\nmodule.watch(require(\"react-intl\"), {\n  injectIntl: function injectIntl(v) {\n    _injectIntl = v;\n  }\n}, 5);\nvar cleanMethod = void 0;\nmodule.watch(require(\"../../api/cleanMethods\"), {\n  default: function _default(v) {\n    cleanMethod = v;\n  }\n}, 6);\n\nvar handleSave = function handleSave(props, file) {\n  var fileNameCount = '00';\n  var fileCount = 0;\n\n  if (props.currentValue) {\n    // Get a file count and prepend it to the file name\n    fileCount = Math.max.apply(Math, _toConsumableArray(props.currentValue.map(function (f) {\n      return f.fileCount;\n    }))) + 1;\n    fileNameCount = fileCount < 10 ? \"0\" + fileCount : fileCount;\n  }\n\n  var object = (0, _defineProperty3.default)({}, props.mongoId, {\n    name: \"\" + fileNameCount + file.name,\n    initialName: file.name,\n    size: file.size,\n    type: file.type,\n    url: file.xhr.responseURL,\n    key: file.postData[0].value,\n    status: 'UNVERIFIED',\n    fileCount: fileCount\n  });\n  cleanMethod(props.pushFunc, {\n    object: object,\n    id: props.docId\n  });\n};\n\nvar handleDelete = function handleDelete(props, fileToDelete) {\n  // Filter out the file we want to delete\n  var newFileArray = props.currentValue.filter(function (file) {\n    return file.key !== fileToDelete.key;\n  });\n  var object = {};\n  object[props.mongoId] = newFileArray;\n  cleanMethod(props.updateFunc, {\n    object: object,\n    id: props.docId\n  });\n}; // Gets already uploaded files and simulates them being added to the dropzone\n// so they appear properly\n\n\nvar getUploadedFiles = function getUploadedFiles(_ref, myDropzone) {\n  var currentValue = _ref.currentValue;\n\n  // https://github.com/enyo/dropzone/wiki/FAQ#how-to-show-files-already-stored-on-server\n  if (currentValue) {\n    currentValue.forEach(function (file) {\n      myDropzone.emit('addedfile', file);\n      myDropzone.emit('complete', file);\n    });\n  }\n};\n\nvar componentConfig = function componentConfig(_ref2) {\n  var currentValue = _ref2.currentValue;\n  return {\n    iconFiletypes: ['.jpg', '.png', '.pdf'],\n    showFiletypeIcon: !currentValue || currentValue && currentValue.length < 1,\n    // Show if there are no uploaded files\n    postUrl: '/' // Modified later\n\n  };\n};\n\nvar djsConfig = function djsConfig(props) {\n  return {\n    method: 'POST',\n    autoProcessQueue: true,\n    dictDefaultMessage: props.intl.formatMessage({\n      id: 'DropzoneInput.message'\n    }),\n    dictCancelUpload: props.intl.formatMessage({\n      id: 'DropzoneInput.cancelUpload'\n    }),\n    dictCancelUploadConfirmation: props.intl.formatMessage({\n      id: 'DropzoneInput.cancelUploadConfirmation'\n    }),\n    dictRemoveFile: props.intl.formatMessage({\n      id: 'DropzoneInput.removeFile'\n    }),\n    dictInvalidFileType: props.intl.formatMessage({\n      id: 'DropzoneInput.invalidFileType'\n    }),\n    maxFilesize: 100,\n    // MB\n    clickable: true,\n    acceptedFiles: 'image/*,application/pdf',\n    renameFileName: function renameFileName(fileName) {\n      // not working\n      return \"hi\" + fileName;\n    },\n    addRemoveLinks: true,\n    // TODO\n    parallelUploads: 1,\n    uploadMultiple: false,\n    accept: function accept(file, done) {\n      var _this = this;\n\n      var uploader = new _Slingshot.Upload('myFileUploads', (0, _extends3.default)({}, props, {\n        docId: props.docId\n      }));\n      uploader.file = file;\n      uploader.loan(function (error, instructions) {\n        if (error) {\n          done(error.message);\n        } else {\n          // options.url = instructions.upload + '/' + instructions.postData[0].value;\n          _this.options.url = instructions.upload;\n          file.postData = instructions.postData;\n          done();\n        }\n      });\n    }\n  };\n};\n\nvar eventHandlers = function eventHandlers(props) {\n  return {\n    init: function init(dropzone) {\n      return getUploadedFiles(props, dropzone);\n    },\n    success: function success(file, response) {\n      handleSave(props, file);\n    },\n    removedfile: function removedfile(file) {\n      var _this2 = this;\n\n      _Meteor.call('deleteFile', file.key, function (err, result) {\n        if (err) {\n          // Put the file back\n          _this2.emit('addedfile', file);\n\n          _this2.emit('complete', file);\n        } else {\n          handleDelete(props, file);\n        }\n      });\n    },\n    sending: function sending(file, xhr, formData) {\n      file.postData.forEach(function (field) {\n        formData.append(field.name, field.value);\n      });\n    }\n  };\n};\n\nvar DropzoneInput = function DropzoneInput(props) {\n  return React.createElement(\n    \"div\",\n    null,\n    props.label && React.createElement(\n      \"h3\",\n      {\n        htmlFor: props.id\n      },\n      props.label\n    ),\n    React.createElement(DropzoneComponent, {\n      name: props.id,\n      config: componentConfig(props),\n      eventHandlers: eventHandlers(props),\n      djsConfig: djsConfig(props)\n    })\n  );\n};\n\nDropzoneInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  currentValue: PropTypes.arrayOf(PropTypes.object),\n  mongoId: PropTypes.string.isRequired,\n  docId: PropTypes.string.isRequired,\n  pushFunc: PropTypes.string.isRequired,\n  updateFunc: PropTypes.string.isRequired,\n  collection: PropTypes.string.isRequired\n};\nDropzoneInput.defaultProps = {\n  label: '',\n  currentValue: undefined\n};\nmodule.exportDefault(_injectIntl(DropzoneInput));","map":{"version":3,"sources":["imports/core/components/AutoForm/DropzoneInput.jsx"],"names":["PropTypes","module","watch","require","default","v","React","Meteor","Slingshot","DropzoneComponent","injectIntl","cleanMethod","handleSave","props","file","fileNameCount","fileCount","currentValue","Math","max","map","f","object","mongoId","name","initialName","size","type","url","xhr","responseURL","key","postData","value","status","pushFunc","id","docId","handleDelete","fileToDelete","newFileArray","filter","updateFunc","getUploadedFiles","myDropzone","forEach","emit","componentConfig","iconFiletypes","showFiletypeIcon","length","postUrl","djsConfig","method","autoProcessQueue","dictDefaultMessage","intl","formatMessage","dictCancelUpload","dictCancelUploadConfirmation","dictRemoveFile","dictInvalidFileType","maxFilesize","clickable","acceptedFiles","renameFileName","fileName","addRemoveLinks","parallelUploads","uploadMultiple","accept","done","uploader","Upload","loan","error","instructions","message","options","upload","eventHandlers","init","dropzone","success","response","removedfile","call","err","result","sending","formData","field","append","DropzoneInput","label","propTypes","string","isRequired","arrayOf","collection","defaultProps","undefined","exportDefault"],"mappings":"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","file":"imports/core/components/AutoForm/DropzoneInput.jsx.map","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Meteor } from 'meteor/meteor';\nimport { Slingshot } from 'meteor/edgee:slingshot';\nimport DropzoneComponent from 'react-dropzone-component';\nimport { injectIntl } from 'react-intl';\n\nimport cleanMethod from 'core/api/cleanMethods';\n\nconst handleSave = (props, file) => {\n  let fileNameCount = '00';\n  let fileCount = 0;\n  if (props.currentValue) {\n    // Get a file count and prepend it to the file name\n    fileCount = Math.max(...props.currentValue.map(f => f.fileCount)) + 1;\n    fileNameCount = fileCount < 10 ? `0${fileCount}` : fileCount;\n  }\n\n  const object = {\n    [props.mongoId]: {\n      name: `${fileNameCount}${file.name}`,\n      initialName: file.name,\n      size: file.size,\n      type: file.type,\n      url: file.xhr.responseURL,\n      key: file.postData[0].value,\n      status: 'UNVERIFIED',\n      fileCount,\n    },\n  };\n\n  cleanMethod(props.pushFunc, { object, id: props.docId });\n};\n\nconst handleDelete = (props, fileToDelete) => {\n  // Filter out the file we want to delete\n  const newFileArray = props.currentValue.filter(file => file.key !== fileToDelete.key);\n  const object = {};\n  object[props.mongoId] = newFileArray;\n\n  cleanMethod(props.updateFunc, { object, id: props.docId });\n};\n\n// Gets already uploaded files and simulates them being added to the dropzone\n// so they appear properly\nconst getUploadedFiles = ({ currentValue }, myDropzone) => {\n  // https://github.com/enyo/dropzone/wiki/FAQ#how-to-show-files-already-stored-on-server\n  if (currentValue) {\n    currentValue.forEach((file) => {\n      myDropzone.emit('addedfile', file);\n      myDropzone.emit('complete', file);\n    });\n  }\n};\n\nconst componentConfig = ({ currentValue }) => ({\n  iconFiletypes: ['.jpg', '.png', '.pdf'],\n  showFiletypeIcon: !currentValue || (currentValue && currentValue.length < 1), // Show if there are no uploaded files\n  postUrl: '/', // Modified later\n});\n\nconst djsConfig = props => ({\n  method: 'POST',\n  autoProcessQueue: true,\n  dictDefaultMessage: props.intl.formatMessage({ id: 'DropzoneInput.message' }),\n  dictCancelUpload: props.intl.formatMessage({\n    id: 'DropzoneInput.cancelUpload',\n  }),\n  dictCancelUploadConfirmation: props.intl.formatMessage({\n    id: 'DropzoneInput.cancelUploadConfirmation',\n  }),\n  dictRemoveFile: props.intl.formatMessage({ id: 'DropzoneInput.removeFile' }),\n  dictInvalidFileType: props.intl.formatMessage({\n    id: 'DropzoneInput.invalidFileType',\n  }),\n  maxFilesize: 100, // MB\n  clickable: true,\n  acceptedFiles: 'image/*,application/pdf',\n  renameFileName(fileName) {\n    // not working\n    return `hi${fileName}`;\n  },\n  addRemoveLinks: true, // TODO\n  parallelUploads: 1,\n  uploadMultiple: false,\n  accept(file, done) {\n    const uploader = new Slingshot.Upload('myFileUploads', {\n      ...props,\n      docId: props.docId,\n    });\n\n    uploader.file = file;\n    uploader.loan((error, instructions) => {\n      if (error) {\n        done(error.message);\n      } else {\n        // options.url = instructions.upload + '/' + instructions.postData[0].value;\n        this.options.url = instructions.upload;\n        file.postData = instructions.postData;\n        done();\n      }\n    });\n  },\n});\n\nconst eventHandlers = props => ({\n  init: dropzone => getUploadedFiles(props, dropzone),\n  success: (file, response) => {\n    handleSave(props, file);\n  },\n  removedfile(file) {\n    Meteor.call('deleteFile', file.key, (err, result) => {\n      if (err) {\n        // Put the file back\n        this.emit('addedfile', file);\n        this.emit('complete', file);\n      } else {\n        handleDelete(props, file);\n      }\n    });\n  },\n  sending(file, xhr, formData) {\n    file.postData.forEach((field) => {\n      formData.append(field.name, field.value);\n    });\n  },\n});\n\nconst DropzoneInput = props => (\n  <div>\n    {props.label && <h3 htmlFor={props.id}>{props.label}</h3>}\n    <DropzoneComponent\n      name={props.id}\n      config={componentConfig(props)}\n      eventHandlers={eventHandlers(props)}\n      djsConfig={djsConfig(props)}\n    />\n  </div>\n);\n\nDropzoneInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  currentValue: PropTypes.arrayOf(PropTypes.object),\n  mongoId: PropTypes.string.isRequired,\n  docId: PropTypes.string.isRequired,\n  pushFunc: PropTypes.string.isRequired,\n  updateFunc: PropTypes.string.isRequired,\n  collection: PropTypes.string.isRequired,\n};\n\nDropzoneInput.defaultProps = {\n  label: '',\n  currentValue: undefined,\n};\n\nexport default injectIntl(DropzoneInput);\n"]},"hash":"ebe2b45779b9b01e198828b2feadf3108495b9fe"}

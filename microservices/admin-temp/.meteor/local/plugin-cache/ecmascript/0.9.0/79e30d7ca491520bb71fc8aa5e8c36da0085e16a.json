{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]}],"exports":{"exported":["Authors","AuthorProfiles","Posts","Groups","Categories"],"specifiers":[{"kind":"local","local":"Authors","exported":"Authors"},{"kind":"local","local":"AuthorProfiles","exported":"AuthorProfiles"},{"kind":"local","local":"Posts","exported":"Posts"},{"kind":"local","local":"Groups","exported":"Groups"},{"kind":"local","local":"Categories","exported":"Categories"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/testing/link-cache/collections.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/testing/link-cache/collections.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/testing/link-cache/collections.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/testing/link-cache/collections.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"collections"},"ignored":false,"code":"module.export({\n    Authors: function () {\n        return Authors;\n    },\n    AuthorProfiles: function () {\n        return AuthorProfiles;\n    },\n    Posts: function () {\n        return Posts;\n    },\n    Groups: function () {\n        return Groups;\n    },\n    Categories: function () {\n        return Categories;\n    }\n});\nvar Mongo = void 0;\nmodule.watch(require(\"meteor/mongo\"), {\n    Mongo: function (v) {\n        Mongo = v;\n    }\n}, 0);\nvar Authors = new Mongo.Collection('cache_authors');\nvar AuthorProfiles = new Mongo.Collection('cache_author_profiles');\nvar Posts = new Mongo.Collection('cache_posts');\nvar Groups = new Mongo.Collection('cache_groups');\nvar Categories = new Mongo.Collection('cache_categories');\nAuthors.remove({});\nAuthorProfiles.remove({});\nPosts.remove({});\nGroups.remove({});\nCategories.remove({});\nPosts.addLinks({\n    author: {\n        type: 'one',\n        collection: Authors,\n        field: 'authorId',\n        denormalize: {\n            field: 'authorCache',\n            body: {\n                name: 1,\n                address: 1\n            }\n        }\n    },\n    categories: {\n        type: 'many',\n        metadata: true,\n        collection: Categories,\n        field: 'categoryIds',\n        denormalize: {\n            field: 'categoriesCache',\n            body: {\n                name: 1\n            }\n        }\n    }\n});\nAuthors.addLinks({\n    posts: {\n        collection: Posts,\n        inversedBy: 'author',\n        denormalize: {\n            field: 'postCache',\n            body: {\n                title: 1\n            }\n        }\n    },\n    groups: {\n        type: 'many',\n        collection: Groups,\n        field: 'groupIds',\n        denormalize: {\n            field: 'groupsCache',\n            body: {\n                name: 1\n            }\n        }\n    },\n    profile: {\n        type: 'one',\n        metadata: true,\n        collection: AuthorProfiles,\n        field: 'profileId',\n        unique: true,\n        denormalize: {\n            field: 'profileCache',\n            body: {\n                name: 1\n            }\n        }\n    }\n});\nAuthorProfiles.addLinks({\n    author: {\n        collection: Authors,\n        inversedBy: 'profile',\n        unique: true,\n        denormalize: {\n            field: 'authorCache',\n            body: {\n                name: 1\n            }\n        }\n    }\n});\nGroups.addLinks({\n    authors: {\n        collection: Authors,\n        inversedBy: 'groups',\n        denormalize: {\n            field: 'authorsCache',\n            body: {\n                name: 1\n            }\n        }\n    }\n});\nCategories.addLinks({\n    posts: {\n        collection: Posts,\n        inversedBy: 'categories',\n        denormalize: {\n            field: 'postsCache',\n            body: {\n                title: 1\n            }\n        }\n    }\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/testing/link-cache/collections.js"],"names":["module","export","Authors","AuthorProfiles","Posts","Groups","Categories","Mongo","watch","require","v","Collection","remove","addLinks","author","type","collection","field","denormalize","body","name","address","categories","metadata","posts","inversedBy","title","groups","profile","unique","authors"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/query/testing/link-cache/collections.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\n\nexport const Authors = new Mongo.Collection('cache_authors');\nexport const AuthorProfiles = new Mongo.Collection('cache_author_profiles');\nexport const Posts = new Mongo.Collection('cache_posts');\nexport const Groups = new Mongo.Collection('cache_groups');\nexport const Categories = new Mongo.Collection('cache_categories');\n\nAuthors.remove({});\nAuthorProfiles.remove({});\nPosts.remove({});\nGroups.remove({});\nCategories.remove({});\n\nPosts.addLinks({\n    author: {\n        type: 'one',\n        collection: Authors,\n        field: 'authorId',\n        denormalize: {\n            field: 'authorCache',\n            body: {\n                name: 1,\n                address: 1,\n            }\n        }\n    },\n    categories: {\n        type: 'many',\n        metadata: true,\n        collection: Categories,\n        field: 'categoryIds',\n        denormalize: {\n            field: 'categoriesCache',\n            body: {\n                name: 1,\n            }\n        }\n    }\n});\n\nAuthors.addLinks({\n    posts: {\n        collection: Posts,\n        inversedBy: 'author',\n        denormalize: {\n            field: 'postCache',\n            body: {\n                title: 1,\n            }\n        }\n    },\n    groups: {\n        type: 'many',\n        collection: Groups,\n        field: 'groupIds',\n        denormalize: {\n            field: 'groupsCache',\n            body: {\n                name: 1,\n            }\n        }\n    },\n    profile: {\n        type: 'one',\n        metadata: true,\n        collection: AuthorProfiles,\n        field: 'profileId',\n        unique: true,\n        denormalize: {\n            field: 'profileCache',\n            body: {\n                name: 1,\n            }\n        }\n    }\n});\n\nAuthorProfiles.addLinks({\n    author: {\n        collection: Authors,\n        inversedBy: 'profile',\n        unique: true,\n        denormalize: {\n            field: 'authorCache',\n            body: {\n                name: 1,\n            }\n        }\n    }\n});\n\nGroups.addLinks({\n    authors: {\n        collection: Authors,\n        inversedBy: 'groups',\n        denormalize: {\n            field: 'authorsCache',\n            body: {\n                name: 1,\n            }\n        }\n    }\n});\n\nCategories.addLinks({\n    posts: {\n        collection: Posts,\n        inversedBy: 'categories',\n        denormalize: {\n            field: 'postsCache',\n            body: {\n                title: 1,\n            }\n        }\n    }\n});\n"]},"hash":"79e30d7ca491520bb71fc8aa5e8c36da0085e16a"}

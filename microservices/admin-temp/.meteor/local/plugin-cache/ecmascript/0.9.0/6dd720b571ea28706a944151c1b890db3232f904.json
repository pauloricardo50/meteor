{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../config/constants","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"constants"}]},{"source":"../api/constants","imported":["USAGE_TYPE"],"specifiers":[{"kind":"named","imported":"USAGE_TYPE","local":"USAGE_TYPE"}]}],"exports":{"exported":["getMinIncome","getMinFortune","changeProperty","changeFortune","changeIncome","getRealMonthly","getTheoreticalMonthly","getIncomeRatio","getBorrowRatio","isFinished","getProject","getBonusIncome","getIncome","getOtherIncome","getFortune","getInsuranceFortune","getRealEstateFortune","getRealEstateValue","getRealEstateDebt","getExpenses","getMonthly","getMonthlyReal","calculateProperty","getLenderCount","getRatio","getBorrow","getRetirement","getMaxLoan"],"specifiers":[{"kind":"local","local":"getMinIncome","exported":"getMinIncome"},{"kind":"local","local":"getMinFortune","exported":"getMinFortune"},{"kind":"local","local":"changeProperty","exported":"changeProperty"},{"kind":"local","local":"changeFortune","exported":"changeFortune"},{"kind":"local","local":"changeIncome","exported":"changeIncome"},{"kind":"local","local":"getRealMonthly","exported":"getRealMonthly"},{"kind":"local","local":"getTheoreticalMonthly","exported":"getTheoreticalMonthly"},{"kind":"local","local":"getIncomeRatio","exported":"getIncomeRatio"},{"kind":"local","local":"getBorrowRatio","exported":"getBorrowRatio"},{"kind":"local","local":"isFinished","exported":"isFinished"},{"kind":"local","local":"getProject","exported":"getProject"},{"kind":"local","local":"getBonusIncome","exported":"getBonusIncome"},{"kind":"local","local":"getIncome","exported":"getIncome"},{"kind":"local","local":"getOtherIncome","exported":"getOtherIncome"},{"kind":"local","local":"getFortune","exported":"getFortune"},{"kind":"local","local":"getInsuranceFortune","exported":"getInsuranceFortune"},{"kind":"local","local":"getRealEstateFortune","exported":"getRealEstateFortune"},{"kind":"local","local":"getRealEstateValue","exported":"getRealEstateValue"},{"kind":"local","local":"getRealEstateDebt","exported":"getRealEstateDebt"},{"kind":"local","local":"getExpenses","exported":"getExpenses"},{"kind":"local","local":"getMonthly","exported":"getMonthly"},{"kind":"local","local":"getMonthlyReal","exported":"getMonthlyReal"},{"kind":"local","local":"calculateProperty","exported":"calculateProperty"},{"kind":"local","local":"getLenderCount","exported":"getLenderCount"},{"kind":"local","local":"getRatio","exported":"getRatio"},{"kind":"local","local":"getBorrow","exported":"getBorrow"},{"kind":"local","local":"getRetirement","exported":"getRetirement"},{"kind":"local","local":"getMaxLoan","exported":"getMaxLoan"}]}}},"options":{"filename":"imports/core/utils/startFunctions.js","filenameRelative":"imports/core/utils/startFunctions.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/utils/startFunctions.js.map","sourceFileName":"imports/core/utils/startFunctions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"startFunctions"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nmodule.export({\n  getMinIncome: function () {\n    function getMinIncome() {\n      return _getMinIncome;\n    }\n\n    return getMinIncome;\n  }(),\n  getMinFortune: function () {\n    function getMinFortune() {\n      return _getMinFortune;\n    }\n\n    return getMinFortune;\n  }(),\n  changeProperty: function () {\n    function changeProperty() {\n      return _changeProperty;\n    }\n\n    return changeProperty;\n  }(),\n  changeFortune: function () {\n    function changeFortune() {\n      return _changeFortune;\n    }\n\n    return changeFortune;\n  }(),\n  changeIncome: function () {\n    function changeIncome() {\n      return _changeIncome;\n    }\n\n    return changeIncome;\n  }(),\n  getRealMonthly: function () {\n    function getRealMonthly() {\n      return _getRealMonthly;\n    }\n\n    return getRealMonthly;\n  }(),\n  getTheoreticalMonthly: function () {\n    function getTheoreticalMonthly() {\n      return _getTheoreticalMonthly;\n    }\n\n    return getTheoreticalMonthly;\n  }(),\n  getIncomeRatio: function () {\n    function getIncomeRatio() {\n      return _getIncomeRatio;\n    }\n\n    return getIncomeRatio;\n  }(),\n  getBorrowRatio: function () {\n    function getBorrowRatio() {\n      return _getBorrowRatio;\n    }\n\n    return getBorrowRatio;\n  }(),\n  isFinished: function () {\n    function isFinished() {\n      return _isFinished;\n    }\n\n    return isFinished;\n  }(),\n  getProject: function () {\n    function getProject() {\n      return _getProject;\n    }\n\n    return getProject;\n  }(),\n  getBonusIncome: function () {\n    function getBonusIncome() {\n      return _getBonusIncome;\n    }\n\n    return getBonusIncome;\n  }(),\n  getIncome: function () {\n    function getIncome() {\n      return _getIncome;\n    }\n\n    return getIncome;\n  }(),\n  getOtherIncome: function () {\n    function getOtherIncome() {\n      return _getOtherIncome;\n    }\n\n    return getOtherIncome;\n  }(),\n  getFortune: function () {\n    function getFortune() {\n      return _getFortune;\n    }\n\n    return getFortune;\n  }(),\n  getInsuranceFortune: function () {\n    function getInsuranceFortune() {\n      return _getInsuranceFortune;\n    }\n\n    return getInsuranceFortune;\n  }(),\n  getRealEstateFortune: function () {\n    function getRealEstateFortune() {\n      return _getRealEstateFortune;\n    }\n\n    return getRealEstateFortune;\n  }(),\n  getRealEstateValue: function () {\n    function getRealEstateValue() {\n      return _getRealEstateValue;\n    }\n\n    return getRealEstateValue;\n  }(),\n  getRealEstateDebt: function () {\n    function getRealEstateDebt() {\n      return _getRealEstateDebt;\n    }\n\n    return getRealEstateDebt;\n  }(),\n  getExpenses: function () {\n    function getExpenses() {\n      return _getExpenses;\n    }\n\n    return getExpenses;\n  }(),\n  getMonthly: function () {\n    function getMonthly() {\n      return _getMonthly;\n    }\n\n    return getMonthly;\n  }(),\n  getMonthlyReal: function () {\n    function getMonthlyReal() {\n      return _getMonthlyReal;\n    }\n\n    return getMonthlyReal;\n  }(),\n  calculateProperty: function () {\n    function calculateProperty() {\n      return _calculateProperty;\n    }\n\n    return calculateProperty;\n  }(),\n  getLenderCount: function () {\n    function getLenderCount() {\n      return _getLenderCount;\n    }\n\n    return getLenderCount;\n  }(),\n  getRatio: function () {\n    function getRatio() {\n      return _getRatio;\n    }\n\n    return getRatio;\n  }(),\n  getBorrow: function () {\n    function getBorrow() {\n      return _getBorrow;\n    }\n\n    return getBorrow;\n  }(),\n  getRetirement: function () {\n    function getRetirement() {\n      return _getRetirement;\n    }\n\n    return getRetirement;\n  }(),\n  getMaxLoan: function () {\n    function getMaxLoan() {\n      return _getMaxLoan;\n    }\n\n    return getMaxLoan;\n  }()\n});\nvar constants = void 0;\nmodule.watch(require(\"../config/constants\"), {\n  \"default\": function () {\n    function _default(v) {\n      constants = v;\n    }\n\n    return _default;\n  }()\n}, 0);\n\nvar _USAGE_TYPE = void 0;\n\nexports.getMinIncome = _getMinIncome;\nmodule.watch(require(\"../api/constants\"), {\n  USAGE_TYPE: function () {\n    function USAGE_TYPE(v) {\n      _USAGE_TYPE = v;\n    }\n\n    return USAGE_TYPE;\n  }()\n}, 1);\n\n// if 2 values are not in auto mode, set both of their minValues to 0\nvar setDefaultMinValues = function () {\n  function setDefaultMinValues(s, o) {\n    var isNonAuto = [s.property, s.fortune, s.income].map(function (i) {\n      return !i.auto && true;\n    });\n    var labels = ['property', 'fortune', 'income'];\n    var count = isNonAuto.reduce(function (tot, val) {\n      return val ? tot + 1 : tot;\n    }, 0);\n\n    if (count === 2) {\n      labels.forEach(function (label, i) {\n        if (isNonAuto[i]) {\n          o[label].minValue = 0;\n        }\n      });\n    }\n\n    return o;\n  }\n\n  return setDefaultMinValues;\n}();\n\nvar _getMinIncome = function () {\n  function _getMinIncome(property, fortune) {\n    var loan = property * (1 + constants.notaryFees) - fortune;\n    var m = constants.maintenance;\n    var i = constants.interests;\n    var mR = constants.maxRatio;\n    var withAmortizing = (property * m + loan * (i + (loan - 0.65 * property) / (15 * loan))) / mR;\n    var withoutAmortizing = (property * m + loan * i) / mR;\n    return Math.ceil(Math.max(withAmortizing, withoutAmortizing) + 1);\n  }\n\n  return _getMinIncome;\n}();\n\nvar _getMinFortune = function () {\n  function _getMinFortune(property, income) {\n    var m = constants.maintenance;\n    var i = constants.interests;\n    var mR = constants.maxRatio;\n    var nF = constants.notaryFees; // It has to cover 20% and notaryfees\n\n    var basicValue = property * (0.2 + nF); // When there is very little income, go to rank 1 (basically, amortization = 0)\n\n    var rank1Fortune = (property * (m + i * (1 + nF)) - mR * income) / i; // For the case that there is a reasonable amount of fortune, go to rank 2\n    // Here amortization is complex and depends on the borrow Ratio\n\n    var rank2Fortune = (property * (15 * m + nF + 0.35 + 15 * i * (1 + nF)) - mR * 15 * income) / (15 * i + 1);\n    var rankFortune = Math.max(rank1Fortune, rank2Fortune);\n    var maxFortune = Math.ceil(Math.max(0, rankFortune, basicValue)); // Make sure fortune never goes above the property value\n\n    return Math.min(maxFortune, property);\n  }\n\n  return _getMinFortune;\n}();\n\nvar _changeProperty = function () {\n  function _changeProperty(state, o, property) {\n    if (state.fortune.auto && state.income.auto) {\n      o.fortune.minValue = property * (0.2 + 0.05);\n      o.income.minValue = 3 * property * (constants.maintenance + 0.8 * constants.loanCost(0.8));\n    } else if (state.fortune.auto) {\n      o.fortune.minValue = _getMinFortune(state.property.value, state.income.value);\n    } else if (state.income.auto) {\n      o.income.minValue = _getMinIncome(state.property.value, state.fortune.value);\n    }\n\n    o = setDefaultMinValues(state, o);\n    return o;\n  }\n\n  return _changeProperty;\n}();\n\nvar _changeFortune = function () {\n  function _changeFortune(state, o, fortune) {\n    if (state.property.auto && state.income.auto) {\n      o.property.minValue = fortune / (0.2 + 0.05);\n      o.income.minValue = fortune / (0.2 + 0.05) * constants.propertyToIncome(_USAGE_TYPE.PRIMARY, 0.8);\n    } else if (state.property.auto) {\n      o.property.minValue = constants.maxProperty(state.income.value, fortune);\n    } else if (state.income.auto) {\n      o.income.minValue = _getMinIncome(state.property.value, state.fortune.value);\n    }\n\n    o = setDefaultMinValues(state, o);\n    return o;\n  }\n\n  return _changeFortune;\n}();\n\nvar _changeIncome = function () {\n  function _changeIncome(state, o, income) {\n    if (state.property.auto && state.fortune.auto) {\n      o.property.minValue = income / constants.propertyToIncome(_USAGE_TYPE.PRIMARY, 0.8);\n      o.fortune.minValue = o.property.minValue * (0.2 + 0.05);\n    } else if (state.property.auto) {\n      o.property.minValue = constants.maxProperty(income, state.fortune.value);\n    } else if (state.fortune.auto) {\n      o.fortune.minValue = _getMinFortune(state.property.value, state.income.value);\n    }\n\n    o = setDefaultMinValues(state, o);\n    return o;\n  }\n\n  return _changeIncome;\n}();\n\nvar _getRealMonthly = function () {\n  function _getRealMonthly(fortune, property, borrow, interestRate) {\n    if (interestRate) {\n      return Math.max((property * constants.maintenanceReal + (property - fortune) * constants.loanCostReal(borrow, 15, interestRate)) / 12, 0);\n    }\n\n    return Math.max((property * constants.maintenanceReal + (property - fortune) * constants.loanCostReal(borrow)) / 12, 0);\n  }\n\n  return _getRealMonthly;\n}();\n\nvar _getTheoreticalMonthly = function () {\n  function _getTheoreticalMonthly(fortune, property, borrow) {\n    return Math.max((property * constants.maintenance + (property - fortune) * constants.loanCost(borrow)) / 12, 0);\n  }\n\n  return _getTheoreticalMonthly;\n}();\n\nvar _getIncomeRatio = function () {\n  function _getIncomeRatio(monthly, income) {\n    return monthly / (income / 12);\n  }\n\n  return _getIncomeRatio;\n}();\n\nvar _getBorrowRatio = function () {\n  function _getBorrowRatio(property, fortune) {\n    return Math.max((property * 1.05 - fortune) / property, 0);\n  }\n\n  return _getBorrowRatio;\n}();\n\nvar _isFinished = function () {\n  function _isFinished(state, minFortune) {\n    return state.finalized && !state.error && (state.fortuneUsed + (state.insuranceFortuneUsed || 0) >= minFortune || state.type === 'test');\n  }\n\n  return _isFinished;\n}();\n\nvar _getProject = function () {\n  function _getProject(state) {\n    var property = state.propertyValue || _calculateProperty(state) || 0;\n    var project = property + (state.propertyWork || 0) + property * constants.notaryFees + (state.insuranceFortuneUsed * constants.lppFees || 0);\n    return project || 0;\n  }\n\n  return _getProject;\n}();\n\nvar _getBonusIncome = function () {\n  function _getBonusIncome() {\n    var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    if (arr.length > 4) {\n      // Ignore any value beyond the first 4\n      arr = arr.slice(0, 4);\n    } // Sum all values, remove the lowest one, and return 50% of their average\n\n\n    var safeArray = arr.map(function (v) {\n      return v || 0;\n    });\n    var sum = safeArray.reduce(function (tot, val) {\n      return tot + val;\n    }, 0);\n    var bestSum = sum - Math.min.apply(Math, _toConsumableArray(safeArray));\n    return 0.5 * (bestSum / 3) || 0;\n  }\n\n  return _getBonusIncome;\n}();\n\nvar _getIncome = function () {\n  function _getIncome(state) {\n    var s = state;\n\n    var bonus1 = _getBonusIncome([s.bonus11, s.bonus21, s.bonus31, s.bonus41]);\n\n    var bonus2 = _getBonusIncome([s.bonus12, s.bonus22, s.bonus32, s.bonus42]);\n\n    return [state.usageType === _USAGE_TYPE.INVESTMENT ? s.propertyRent * 12 : 0, s.income1, s.income2, bonus1, bonus2, _getOtherIncome(s.otherIncome)].reduce(function (tot, val) {\n      return val > 0 && tot + val || tot;\n    }, 0);\n  }\n\n  return _getIncome;\n}();\n\nvar _getOtherIncome = function () {\n  function _getOtherIncome() {\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [].concat(_toConsumableArray(array.map(function (i) {\n      return i.value || 0;\n    }))).reduce(function (tot, val) {\n      return val > 0 && tot + val || tot;\n    }, 0);\n  }\n\n  return _getOtherIncome;\n}();\n\nvar _getFortune = function () {\n  function _getFortune(state) {\n    return [state.fortune1, state.fortune2].reduce(function (tot, val) {\n      return val > 0 && tot + val || tot;\n    }, 0);\n  }\n\n  return _getFortune;\n}();\n\nvar _getInsuranceFortune = function () {\n  function _getInsuranceFortune(state) {\n    return [state.insurance11, state.insurance12, state.insurance21, state.insurance22].reduce(function (tot, val) {\n      return val > 0 && tot + val || tot;\n    }, 0);\n  }\n\n  return _getInsuranceFortune;\n}();\n\nvar _getRealEstateFortune = function () {\n  function _getRealEstateFortune() {\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [].concat(_toConsumableArray(array.map(function (i) {\n      return i.value - i.loan || 0;\n    }))).reduce(function (tot, val) {\n      return val > 0 && tot + val || tot;\n    }, 0);\n  }\n\n  return _getRealEstateFortune;\n}();\n\nvar _getRealEstateValue = function () {\n  function _getRealEstateValue() {\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [].concat(_toConsumableArray(array.map(function (i) {\n      return i.value || 0;\n    }))).reduce(function (tot, val) {\n      return val > 0 && tot + val || tot;\n    }, 0);\n  }\n\n  return _getRealEstateValue;\n}();\n\nvar _getRealEstateDebt = function () {\n  function _getRealEstateDebt() {\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [].concat(_toConsumableArray(array.map(function (i) {\n      return i.loan || 0;\n    }))).reduce(function (tot, val) {\n      return val > 0 && tot + val || tot;\n    }, 0);\n  }\n\n  return _getRealEstateDebt;\n}();\n\nvar _getExpenses = function () {\n  function _getExpenses() {\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [].concat(_toConsumableArray(array.map(function (i) {\n      return i.value;\n    }))).reduce(function (tot, val) {\n      return val > 0 && tot + val || tot;\n    }, 0);\n  }\n\n  return _getExpenses;\n}();\n\nvar _getMonthly = function () {\n  function _getMonthly(state, borrow, toRetirement) {\n    var s = state;\n\n    var projectValue = _getProject(state);\n\n    var propAndWork = s.propertyValue + (s.propertyWorkExists ? s.propertyWork : 0);\n    var maintenance = propAndWork * constants.maintenance;\n    var interestsAndAmortizing = (projectValue - (s.fortuneUsed || 0) - (s.insuranceFortuneUsed || 0)) * constants.loanCost(borrow, toRetirement);\n    var cost = (maintenance + interestsAndAmortizing) / 12;\n    return Math.max(cost, 0);\n  }\n\n  return _getMonthly;\n}();\n\nvar _getMonthlyReal = function () {\n  function _getMonthlyReal(state, borrow, toRetirement) {\n    var s = state;\n\n    var projectValue = _getProject(state);\n\n    var propAndWork = s.propertyValue + (s.propertyWork || 0);\n    return Math.max((propAndWork * constants.maintenanceReal + (projectValue - (s.fortuneUsed || 0) - (s.insuranceFortuneUsed || 0)) * constants.loanCostReal(borrow, toRetirement)) / 12, 0);\n  }\n\n  return _getMonthlyReal;\n}();\n\nvar _calculateProperty = function () {\n  function _calculateProperty(fortune, insuranceFortune, income, usageType, toRetirement) {\n    return constants.maxProperty(income, fortune, insuranceFortune, usageType, toRetirement);\n  }\n\n  return _calculateProperty;\n}();\n\nvar _getLenderCount = function () {\n  function _getLenderCount(borrow, ratio) {\n    if (ratio > 0.38) {\n      return 0;\n    } else if (ratio > 1 / 3) {\n      return 4;\n    } else if (borrow <= 0.65) {\n      return 30;\n    } else if (borrow > 0.65 && borrow <= 0.9) {\n      return 20;\n    }\n\n    return 0;\n  }\n\n  return _getLenderCount;\n}();\n\nvar _getRatio = function () {\n  function _getRatio(income, expenses, monthly) {\n    return income - expenses !== 0 && monthly / ((income - expenses) / 12);\n  }\n\n  return _getRatio;\n}();\n\nvar _getBorrow = function () {\n  function _getBorrow(totalFortune, propAndWork, fees) {\n    return totalFortune && propAndWork !== 0 && Math.max((propAndWork - (totalFortune - fees)) / propAndWork, 0) || 0;\n  }\n\n  return _getBorrow;\n}();\n\nvar _getRetirement = function () {\n  function _getRetirement(state) {\n    var multiple = state.borrowerCount > 1;\n    var age = multiple ? state.oldestAge : state.age;\n    var gender = multiple ? state.oldestGender : state.gender;\n\n    if (age && gender) {\n      var retirement = gender === 'f' ? 64 : 65;\n      return Math.max(retirement - age, 0);\n    }\n\n    return 100;\n  }\n\n  return _getRetirement;\n}();\n\nvar _getMaxLoan = function () {\n  function _getMaxLoan(state, income, fortune, insuranceFortune, toRetirement, propAndWork) {\n    var property = state.propertyValue;\n    var maintenance = property * constants.maintenance;\n    var mR = constants.maxRatio;\n    var i = constants.interests;\n    var maxLoan = state.usageType === _USAGE_TYPE.SECONDARY ? Math.floor(0.7 * propAndWork) : Math.floor(0.8 * propAndWork); // Check LaTeX document, equation 15, and solve for the loan\n\n    var calculatedMaxLoan = (toRetirement * (mR * income - maintenance) + 0.65 * property) / (i * toRetirement + 1); // Floor this value to make sure the user can afford it if any rounding\n    // happens, If it had to round up, it would be too expensive\n\n    return Math.floor(Math.min(maxLoan, calculatedMaxLoan));\n  }\n\n  return _getMaxLoan;\n}();","map":{"version":3,"sources":["imports/core/utils/startFunctions.js"],"names":["module","export","getMinIncome","getMinFortune","changeProperty","changeFortune","changeIncome","getRealMonthly","getTheoreticalMonthly","getIncomeRatio","getBorrowRatio","isFinished","getProject","getBonusIncome","getIncome","getOtherIncome","getFortune","getInsuranceFortune","getRealEstateFortune","getRealEstateValue","getRealEstateDebt","getExpenses","getMonthly","getMonthlyReal","calculateProperty","getLenderCount","getRatio","getBorrow","getRetirement","getMaxLoan","constants","watch","require","v","USAGE_TYPE","setDefaultMinValues","s","o","isNonAuto","property","fortune","income","map","i","auto","labels","count","reduce","tot","val","forEach","label","minValue","loan","notaryFees","m","maintenance","interests","mR","maxRatio","withAmortizing","withoutAmortizing","Math","ceil","max","nF","basicValue","rank1Fortune","rank2Fortune","rankFortune","maxFortune","min","state","loanCost","value","propertyToIncome","PRIMARY","maxProperty","borrow","interestRate","maintenanceReal","loanCostReal","monthly","minFortune","finalized","error","fortuneUsed","insuranceFortuneUsed","type","propertyValue","project","propertyWork","lppFees","arr","length","slice","safeArray","sum","bestSum","bonus1","bonus11","bonus21","bonus31","bonus41","bonus2","bonus12","bonus22","bonus32","bonus42","usageType","INVESTMENT","propertyRent","income1","income2","otherIncome","array","fortune1","fortune2","insurance11","insurance12","insurance21","insurance22","toRetirement","projectValue","propAndWork","propertyWorkExists","interestsAndAmortizing","cost","insuranceFortune","ratio","expenses","totalFortune","fees","multiple","borrowerCount","age","oldestAge","gender","oldestGender","retirement","maxLoan","SECONDARY","floor","calculatedMaxLoan"],"mappings":"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","file":"imports/core/utils/startFunctions.js.map","sourcesContent":["import constants from '../config/constants';\nimport { USAGE_TYPE } from '../api/constants';\n\n// if 2 values are not in auto mode, set both of their minValues to 0\nconst setDefaultMinValues = (s, o) => {\n  const isNonAuto = [s.property, s.fortune, s.income].map(i => !i.auto && true);\n  const labels = ['property', 'fortune', 'income'];\n  const count = isNonAuto.reduce((tot, val) => (val ? tot + 1 : tot), 0);\n\n  if (count === 2) {\n    labels.forEach((label, i) => {\n      if (isNonAuto[i]) {\n        o[label].minValue = 0;\n      }\n    });\n  }\n\n  return o;\n};\n\nexport const getMinIncome = (property, fortune) => {\n  const loan = property * (1 + constants.notaryFees) - fortune;\n  const m = constants.maintenance;\n  const i = constants.interests;\n  const mR = constants.maxRatio;\n\n  const withAmortizing =\n    (property * m + loan * (i + (loan - 0.65 * property) / (15 * loan))) / mR;\n\n  const withoutAmortizing = (property * m + loan * i) / mR;\n\n  return Math.ceil(Math.max(withAmortizing, withoutAmortizing) + 1);\n};\n\nexport const getMinFortune = (property, income) => {\n  const m = constants.maintenance;\n  const i = constants.interests;\n  const mR = constants.maxRatio;\n  const nF = constants.notaryFees;\n\n  // It has to cover 20% and notaryfees\n  const basicValue = property * (0.2 + nF);\n\n  // When there is very little income, go to rank 1 (basically, amortization = 0)\n  const rank1Fortune = (property * (m + i * (1 + nF)) - mR * income) / i;\n\n  // For the case that there is a reasonable amount of fortune, go to rank 2\n  // Here amortization is complex and depends on the borrow Ratio\n  const rank2Fortune =\n    (property * (15 * m + nF + 0.35 + 15 * i * (1 + nF)) - mR * 15 * income) /\n    (15 * i + 1);\n\n  const rankFortune = Math.max(rank1Fortune, rank2Fortune);\n\n  const maxFortune = Math.ceil(Math.max(0, rankFortune, basicValue));\n\n  // Make sure fortune never goes above the property value\n  return Math.min(maxFortune, property);\n};\n\nexport const changeProperty = (state, o, property) => {\n  if (state.fortune.auto && state.income.auto) {\n    o.fortune.minValue = property * (0.2 + 0.05);\n    o.income.minValue =\n      3 * property * (constants.maintenance + 0.8 * constants.loanCost(0.8));\n  } else if (state.fortune.auto) {\n    o.fortune.minValue = getMinFortune(\n      state.property.value,\n      state.income.value,\n    );\n  } else if (state.income.auto) {\n    o.income.minValue = getMinIncome(state.property.value, state.fortune.value);\n  }\n\n  o = setDefaultMinValues(state, o);\n\n  return o;\n};\n\nexport const changeFortune = (state, o, fortune) => {\n  if (state.property.auto && state.income.auto) {\n    o.property.minValue = fortune / (0.2 + 0.05);\n    o.income.minValue =\n      fortune /\n      (0.2 + 0.05) *\n      constants.propertyToIncome(USAGE_TYPE.PRIMARY, 0.8);\n  } else if (state.property.auto) {\n    o.property.minValue = constants.maxProperty(state.income.value, fortune);\n  } else if (state.income.auto) {\n    o.income.minValue = getMinIncome(state.property.value, state.fortune.value);\n  }\n\n  o = setDefaultMinValues(state, o);\n\n  return o;\n};\n\nexport const changeIncome = (state, o, income) => {\n  if (state.property.auto && state.fortune.auto) {\n    o.property.minValue =\n      income / constants.propertyToIncome(USAGE_TYPE.PRIMARY, 0.8);\n    o.fortune.minValue = o.property.minValue * (0.2 + 0.05);\n  } else if (state.property.auto) {\n    o.property.minValue = constants.maxProperty(income, state.fortune.value);\n  } else if (state.fortune.auto) {\n    o.fortune.minValue = getMinFortune(\n      state.property.value,\n      state.income.value,\n    );\n  }\n\n  o = setDefaultMinValues(state, o);\n\n  return o;\n};\n\nexport const getRealMonthly = (fortune, property, borrow, interestRate) => {\n  if (interestRate) {\n    return Math.max(\n      (property * constants.maintenanceReal +\n        (property - fortune) *\n          constants.loanCostReal(borrow, 15, interestRate)) /\n        12,\n      0,\n    );\n  }\n  return Math.max(\n    (property * constants.maintenanceReal +\n      (property - fortune) * constants.loanCostReal(borrow)) /\n      12,\n    0,\n  );\n};\n\nexport const getTheoreticalMonthly = (fortune, property, borrow) =>\n  Math.max(\n    (property * constants.maintenance +\n      (property - fortune) * constants.loanCost(borrow)) /\n      12,\n    0,\n  );\n\nexport const getIncomeRatio = (monthly, income) => monthly / (income / 12);\n\nexport const getBorrowRatio = (property, fortune) =>\n  Math.max((property * 1.05 - fortune) / property, 0);\n\n//\n// The following functions are used in Start 2 Form\n//\n\nexport const isFinished = (state, minFortune) =>\n  state.finalized &&\n  !state.error &&\n  (state.fortuneUsed + (state.insuranceFortuneUsed || 0) >= minFortune ||\n    state.type === 'test');\n\nexport const getProject = (state) => {\n  const property = state.propertyValue || calculateProperty(state) || 0;\n  const project =\n    property +\n    (state.propertyWork || 0) +\n    property * constants.notaryFees +\n    (state.insuranceFortuneUsed * constants.lppFees || 0);\n  return project || 0;\n};\n\nexport const getBonusIncome = (arr = []) => {\n  if (arr.length > 4) {\n    // Ignore any value beyond the first 4\n    arr = arr.slice(0, 4);\n  }\n  // Sum all values, remove the lowest one, and return 50% of their average\n  const safeArray = arr.map(v => v || 0);\n  const sum = safeArray.reduce((tot, val) => tot + val, 0);\n  const bestSum = sum - Math.min(...safeArray);\n  return 0.5 * (bestSum / 3) || 0;\n};\n\nexport const getIncome = (state) => {\n  const s = state;\n  const bonus1 = getBonusIncome([s.bonus11, s.bonus21, s.bonus31, s.bonus41]);\n  const bonus2 = getBonusIncome([s.bonus12, s.bonus22, s.bonus32, s.bonus42]);\n  return [\n    state.usageType === USAGE_TYPE.INVESTMENT ? s.propertyRent * 12 : 0,\n    s.income1,\n    s.income2,\n    bonus1,\n    bonus2,\n    getOtherIncome(s.otherIncome),\n  ].reduce((tot, val) => (val > 0 && tot + val) || tot, 0);\n};\n\nexport const getOtherIncome = (array = []) =>\n  [...array.map(i => i.value || 0)].reduce(\n    (tot, val) => (val > 0 && tot + val) || tot,\n    0,\n  );\n\nexport const getFortune = state =>\n  [state.fortune1, state.fortune2].reduce(\n    (tot, val) => (val > 0 && tot + val) || tot,\n    0,\n  );\n\nexport const getInsuranceFortune = state =>\n  [\n    state.insurance11,\n    state.insurance12,\n    state.insurance21,\n    state.insurance22,\n  ].reduce((tot, val) => (val > 0 && tot + val) || tot, 0);\n\nexport const getRealEstateFortune = (array = []) =>\n  [...array.map(i => i.value - i.loan || 0)].reduce(\n    (tot, val) => (val > 0 && tot + val) || tot,\n    0,\n  );\n\nexport const getRealEstateValue = (array = []) =>\n  [...array.map(i => i.value || 0)].reduce(\n    (tot, val) => (val > 0 && tot + val) || tot,\n    0,\n  );\n\nexport const getRealEstateDebt = (array = []) =>\n  [...array.map(i => i.loan || 0)].reduce(\n    (tot, val) => (val > 0 && tot + val) || tot,\n    0,\n  );\n\nexport const getExpenses = (array = []) =>\n  [...array.map(i => i.value)].reduce(\n    (tot, val) => (val > 0 && tot + val) || tot,\n    0,\n  );\n\nexport const getMonthly = (state, borrow, toRetirement) => {\n  const s = state;\n  const projectValue = getProject(state);\n  const propAndWork =\n    s.propertyValue + (s.propertyWorkExists ? s.propertyWork : 0);\n\n  const maintenance = propAndWork * constants.maintenance;\n  const interestsAndAmortizing =\n    (projectValue - (s.fortuneUsed || 0) - (s.insuranceFortuneUsed || 0)) *\n    constants.loanCost(borrow, toRetirement);\n  const cost = (maintenance + interestsAndAmortizing) / 12;\n\n  return Math.max(cost, 0);\n};\n\nexport const getMonthlyReal = (state, borrow, toRetirement) => {\n  const s = state;\n  const projectValue = getProject(state);\n  const propAndWork = s.propertyValue + (s.propertyWork || 0);\n  return Math.max(\n    (propAndWork * constants.maintenanceReal +\n      (projectValue - (s.fortuneUsed || 0) - (s.insuranceFortuneUsed || 0)) *\n        constants.loanCostReal(borrow, toRetirement)) /\n      12,\n    0,\n  );\n};\n\nexport const calculateProperty = (\n  fortune,\n  insuranceFortune,\n  income,\n  usageType,\n  toRetirement,\n) =>\n  constants.maxProperty(\n    income,\n    fortune,\n    insuranceFortune,\n    usageType,\n    toRetirement,\n  );\n\nexport const getLenderCount = (borrow, ratio) => {\n  if (ratio > 0.38) {\n    return 0;\n  } else if (ratio > 1 / 3) {\n    return 4;\n  } else if (borrow <= 0.65) {\n    return 30;\n  } else if (borrow > 0.65 && borrow <= 0.9) {\n    return 20;\n  }\n\n  return 0;\n};\n\nexport const getRatio = (income, expenses, monthly) =>\n  income - expenses !== 0 && monthly / ((income - expenses) / 12);\n\nexport const getBorrow = (totalFortune, propAndWork, fees) =>\n  (totalFortune &&\n    propAndWork !== 0 &&\n    Math.max((propAndWork - (totalFortune - fees)) / propAndWork, 0)) ||\n  0;\n\nexport const getRetirement = (state) => {\n  const multiple = state.borrowerCount > 1;\n\n  const age = multiple ? state.oldestAge : state.age;\n  const gender = multiple ? state.oldestGender : state.gender;\n\n  if (age && gender) {\n    const retirement = gender === 'f' ? 64 : 65;\n\n    return Math.max(retirement - age, 0);\n  }\n\n  return 100;\n};\n\nexport const getMaxLoan = (\n  state,\n  income,\n  fortune,\n  insuranceFortune,\n  toRetirement,\n  propAndWork,\n) => {\n  const property = state.propertyValue;\n  const maintenance = property * constants.maintenance;\n  const mR = constants.maxRatio;\n  const i = constants.interests;\n\n  const maxLoan =\n    state.usageType === USAGE_TYPE.SECONDARY\n      ? Math.floor(0.7 * propAndWork)\n      : Math.floor(0.8 * propAndWork);\n\n  // Check LaTeX document, equation 15, and solve for the loan\n  const calculatedMaxLoan =\n    (toRetirement * (mR * income - maintenance) + 0.65 * property) /\n    (i * toRetirement + 1);\n\n  // Floor this value to make sure the user can afford it if any rounding\n  // happens, If it had to round up, it would be too expensive\n  return Math.floor(Math.min(maxLoan, calculatedMaxLoan));\n};\n"]},"hash":"6dd720b571ea28706a944151c1b890db3232f904"}

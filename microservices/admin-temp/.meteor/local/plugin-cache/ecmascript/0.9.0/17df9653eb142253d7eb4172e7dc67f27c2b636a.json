{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../nodes/collectionNode.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"CollectionNode"}]},{"source":"../nodes/fieldNode.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"FieldNode"}]},{"source":"../nodes/reducerNode.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReducerNode"}]},{"source":"./dotize.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"dotize"}]},{"source":"../reducers/lib/createReducers","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createReducers"}]}],"exports":{"exported":["createNodes","root","addFieldNode","body","fieldName","root","collection","body"],"specifiers":[{"kind":"local","local":"createNodes","exported":"createNodes"},{"kind":"local","local":"root","exported":"root"},{"kind":"local","local":"addFieldNode","exported":"addFieldNode"},{"kind":"local","local":"body","exported":"body"},{"kind":"local","local":"fieldName","exported":"fieldName"},{"kind":"local","local":"root","exported":"root"},{"kind":"local","local":"collection","exported":"default"},{"kind":"local","local":"body","exported":"default"}]}}},"options":{"filename":"packages/cultofcoders:grapher/lib/query/lib/createGraph.js","filenameRelative":"packages/cultofcoders:grapher/lib/query/lib/createGraph.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/cultofcoders:grapher/lib/query/lib/createGraph.js.map","sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/createGraph.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"createGraph"},"ignored":false,"code":"module.export({\n    createNodes: function () {\n        return createNodes;\n    },\n    addFieldNode: function () {\n        return addFieldNode;\n    }\n});\nvar CollectionNode = void 0;\nmodule.watch(require(\"../nodes/collectionNode.js\"), {\n    \"default\": function (v) {\n        CollectionNode = v;\n    }\n}, 0);\nvar FieldNode = void 0;\nmodule.watch(require(\"../nodes/fieldNode.js\"), {\n    \"default\": function (v) {\n        FieldNode = v;\n    }\n}, 1);\nvar ReducerNode = void 0;\nmodule.watch(require(\"../nodes/reducerNode.js\"), {\n    \"default\": function (v) {\n        ReducerNode = v;\n    }\n}, 2);\nvar dotize = void 0;\nmodule.watch(require(\"./dotize.js\"), {\n    \"default\": function (v) {\n        dotize = v;\n    }\n}, 3);\nvar createReducers = void 0;\nmodule.watch(require(\"../reducers/lib/createReducers\"), {\n    \"default\": function (v) {\n        createReducers = v;\n    }\n}, 4);\nvar specialFields = ['$filters', '$options', '$postFilters', '$postOptions', '$postFilter']; /**\n                                                                                              * Creates node objects from the body. The root is always a collection node.\n                                                                                              *\n                                                                                              * @param root\n                                                                                              */\n\nfunction createNodes(root) {\n    // this is a fix for phantomjs tests (don't really understand it.)\n    if (!_.isObject(root.body)) {\n        return;\n    }\n\n    _.each(root.body, function (body, fieldName) {\n        if (!body) {\n            return;\n        } // if it's a prop\n\n\n        if (_.contains(specialFields, fieldName)) {\n            root.addProp(fieldName, body);\n            return;\n        } // workaround, see https://github.com/cult-of-coders/grapher/issues/134\n        // TODO: find another way to do this\n\n\n        if (root.collection.default) {\n            root.collection = root.collection.default;\n        } // checking if it is a link.\n\n\n        var linker = root.collection.getLinker(fieldName);\n\n        if (linker) {\n            // check if it is a cached link\n            // if yes, then we need to explicitly define this at collection level\n            // so when we transform the data for delivery, we move it to the link name\n            if (linker.isDenormalized()) {\n                if (linker.isSubBodyDenormalized(body)) {\n                    handleDenormalized(root, linker, body, fieldName);\n                    return;\n                }\n            }\n\n            var subroot = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n            root.add(subroot, linker);\n            createNodes(subroot);\n            return;\n        } // checking if it's a reducer\n\n\n        var reducer = root.collection.getReducer(fieldName);\n\n        if (reducer) {\n            var reducerNode = new ReducerNode(fieldName, reducer);\n            root.add(reducerNode);\n        } // it's most likely a field then\n\n\n        addFieldNode(body, fieldName, root);\n    });\n\n    createReducers(root);\n\n    if (root.fieldNodes.length === 0) {\n        root.add(new FieldNode('_id', 1));\n    }\n}\n\nfunction addFieldNode(body, fieldName, root) {\n    // it's not a link and not a special variable => we assume it's a field\n    if (_.isObject(body)) {\n        var _dotize$convert;\n\n        var dotted = dotize.convert((_dotize$convert = {}, _dotize$convert[fieldName] = body, _dotize$convert));\n\n        _.each(dotted, function (value, key) {\n            root.add(new FieldNode(key, value));\n        });\n    } else {\n        var fieldNode = new FieldNode(fieldName, body);\n        root.add(fieldNode);\n    }\n}\n\nmodule.exportDefault(function (collection, body) {\n    var root = new CollectionNode(collection, body);\n    createNodes(root);\n    return root;\n});\n; /**\n   * Ads denormalization config properly, including _id\n   *\n   * @param root\n   * @param linker\n   * @param body\n   * @param fieldName\n   */\n\nfunction handleDenormalized(root, linker, body, fieldName) {\n    Object.assign(body, {\n        _id: 1\n    });\n    var cacheField = linker.linkConfig.denormalize.field;\n    root.snapCache(cacheField, fieldName); // if it's one and direct also include the link storage\n\n    if (!linker.isMany() && !linker.isVirtual()) {\n        addFieldNode(1, linker.linkStorageField, root);\n    }\n\n    addFieldNode(body, cacheField, root);\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/createGraph.js"],"names":["module","export","createNodes","addFieldNode","CollectionNode","watch","require","v","FieldNode","ReducerNode","dotize","createReducers","specialFields","root","_","isObject","body","each","fieldName","contains","addProp","collection","default","linker","getLinker","isDenormalized","isSubBodyDenormalized","handleDenormalized","subroot","getLinkedCollection","add","reducer","getReducer","reducerNode","fieldNodes","length","dotted","convert","value","key","fieldNode","exportDefault","Object","assign","_id","cacheField","linkConfig","denormalize","field","snapCache","isMany","isVirtual","linkStorageField"],"mappings":"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","file":"packages/cultofcoders:grapher/lib/query/lib/createGraph.js.map","sourcesContent":["import CollectionNode from '../nodes/collectionNode.js';\nimport FieldNode from '../nodes/fieldNode.js';\nimport ReducerNode from '../nodes/reducerNode.js';\nimport dotize from './dotize.js';\nimport createReducers from '../reducers/lib/createReducers';\n\nconst specialFields = [\n    '$filters',\n    '$options',\n    '$postFilters',\n    '$postOptions',\n    '$postFilter'\n];\n\n/**\n * Creates node objects from the body. The root is always a collection node.\n *\n * @param root\n */\nexport function createNodes(root) {\n    // this is a fix for phantomjs tests (don't really understand it.)\n    if (!_.isObject(root.body)) {\n        return;\n    }\n\n    _.each(root.body, (body, fieldName) => {\n        if (!body) {\n            return;\n        }\n\n        // if it's a prop\n        if (_.contains(specialFields, fieldName)) {\n            root.addProp(fieldName, body);\n\n            return;\n        }\n\n        // workaround, see https://github.com/cult-of-coders/grapher/issues/134\n        // TODO: find another way to do this\n        if (root.collection.default) {\n          root.collection = root.collection.default;\n        }\n\n        // checking if it is a link.\n        let linker = root.collection.getLinker(fieldName);\n\n        if (linker) {\n            // check if it is a cached link\n            // if yes, then we need to explicitly define this at collection level\n            // so when we transform the data for delivery, we move it to the link name\n            if (linker.isDenormalized()) {\n                if (linker.isSubBodyDenormalized(body)) {\n                    handleDenormalized(root, linker, body, fieldName);\n                    return;\n                }\n            }\n\n            let subroot = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n            root.add(subroot, linker);\n\n            createNodes(subroot);\n            return;\n        }\n\n        // checking if it's a reducer\n        const reducer = root.collection.getReducer(fieldName);\n\n        if (reducer) {\n            let reducerNode = new ReducerNode(fieldName, reducer);\n            root.add(reducerNode);\n        }\n\n        // it's most likely a field then\n        addFieldNode(body, fieldName, root);\n    });\n\n    createReducers(root);\n\n    if (root.fieldNodes.length === 0) {\n        root.add(new FieldNode('_id', 1));\n    }\n}\n\n/**\n * @param body\n * @param fieldName\n * @param root\n */\nexport function addFieldNode(body, fieldName, root) {\n    // it's not a link and not a special variable => we assume it's a field\n    if (_.isObject(body)) {\n        let dotted = dotize.convert({[fieldName]: body});\n        _.each(dotted, (value, key) => {\n            root.add(new FieldNode(key, value));\n        });\n    } else {\n        let fieldNode = new FieldNode(fieldName, body);\n        root.add(fieldNode);\n    }\n}\n\n/**\n * @param collection\n * @param body\n * @returns {CollectionNode}\n */\nexport default function (collection, body) {\n    let root = new CollectionNode(collection, body);\n    createNodes(root);\n\n    return root;\n};\n\n/**\n * Ads denormalization config properly, including _id\n *\n * @param root\n * @param linker\n * @param body\n * @param fieldName\n */\nfunction handleDenormalized(root, linker, body, fieldName) {\n    Object.assign(body, {_id: 1});\n\n    const cacheField = linker.linkConfig.denormalize.field;\n    root.snapCache(cacheField, fieldName);\n\n    // if it's one and direct also include the link storage\n    if (!linker.isMany() && !linker.isVirtual()) {\n        addFieldNode(1, linker.linkStorageField, root);\n    }\n\n    addFieldNode(body, cacheField, root);\n}"]},"hash":"17df9653eb142253d7eb4172e7dc67f27c2b636a"}

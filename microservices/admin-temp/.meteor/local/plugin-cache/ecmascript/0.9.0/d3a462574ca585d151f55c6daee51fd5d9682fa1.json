{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../../../core/api/cleanMethods","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"cleanMethod"}]}],"exports":{"exported":["createQuery"],"specifiers":[{"kind":"local","local":"createQuery","exported":"createQuery"}]}}},"options":{"filename":"imports/ui/components/MixpanelAnalytics/getMixpanelData.js","filenameRelative":"imports/ui/components/MixpanelAnalytics/getMixpanelData.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/ui/components/MixpanelAnalytics/getMixpanelData.js.map","sourceFileName":"imports/ui/components/MixpanelAnalytics/getMixpanelData.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"getMixpanelData"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nmodule.export({\n  createQuery: function createQuery() {\n    return _createQuery;\n  }\n});\nvar cleanMethod = void 0;\nmodule.watch(require(\"../../../core/api/cleanMethods\"), {\n  default: function _default(v) {\n    cleanMethod = v;\n  }\n}, 0);\nexports.createQuery = _createQuery;\nvar MIXPANEL_URL = 'https://mixpanel.com/api/2.0/';\n\nvar _createQuery = function _createQuery(params) {\n  return params ? \"?\" + Object.keys(params).map(function (param) {\n    return encodeURIComponent(param) + \"=\" + encodeURIComponent(params[param]);\n  }).join('&') : '';\n};\n\nvar buildUrl = function buildUrl(_ref) {\n  var params = _ref.params,\n      _ref$endpoint = _ref.endpoint,\n      endpoint = _ref$endpoint === undefined ? 'segmentation' : _ref$endpoint;\n\n  var url = MIXPANEL_URL + endpoint + _createQuery(params);\n\n  return url;\n};\n\nvar getData = function getData(url) {\n  return cleanMethod('getMixpanelAuthorization').then(function (Authorization) {\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: Authorization\n      }\n    });\n  }).then(function (result) {\n    return result.json();\n  }).catch(function (error) {\n    console.log('Mixpanel fetch error:', error);\n    throw error;\n  });\n};\n\nvar getEventsByUserId = function getEventsByUserId(userId) {\n  return getData(buildUrl({\n    params: {\n      distinct_ids: \"[\\\"\" + userId + \"\\\"]\"\n    },\n    endpoint: 'stream/query'\n  }));\n};\n\nmodule.exportDefault(getEventsByUserId);","map":{"version":3,"sources":["imports/ui/components/MixpanelAnalytics/getMixpanelData.js"],"names":["module","export","createQuery","cleanMethod","watch","require","default","v","MIXPANEL_URL","params","Object","keys","map","encodeURIComponent","param","join","buildUrl","endpoint","url","getData","then","fetch","method","headers","Authorization","result","json","catch","error","console","log","getEventsByUserId","distinct_ids","userId","exportDefault"],"mappings":";;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,eAAY;AAAA,WAAIA,YAAJ;AAAA;AAAb,CAAd;AAA6C,IAAIC,oBAAJ;AAAgBH,OAAOI,KAAP,CAAaC,QAAQ,gCAAR,CAAb,EAAuD;AAACC,SAAD,oBAASC,CAAT,EAAW;AAACJ,kBAAYI,CAAZ;AAAc;AAA1B,CAAvD,EAAmF,CAAnF;;AAE7D,IAAMC,eAAe,+BAArB;;AAEO,IAAMN,eAAc,SAAdA,YAAc;AAAA,SACxBO,eACOC,OAAOC,IAAP,CAAYF,MAAZ,EACHG,GADG,CACC;AAAA,WACAC,mBAAmBC,KAAnB,CADA,SAC6BD,mBAAmBJ,OAAOK,KAAP,CAAnB,CAD7B;AAAA,GADD,EAGHC,IAHG,CAGE,GAHF,CADP,GAKG,EANqB;AAAA,CAApB;;AAQP,IAAMC,WAAW,SAAXA,QAAW,OAA2C;AAAA,MAAxCP,MAAwC,QAAxCA,MAAwC;AAAA,2BAAhCQ,QAAgC;AAAA,MAAhCA,QAAgC,iCAArB,cAAqB;;AAC1D,MAAMC,MAAMV,eAAeS,QAAf,GAA0Bf,aAAYO,MAAZ,CAAtC;;AACA,SAAOS,GAAP;AACD,CAHD;;AAKA,IAAMC,UAAU,SAAVA,OAAU;AAAA,SACdhB,YAAY,0BAAZ,EACGiB,IADH,CACQ;AAAA,WACJC,MAAMH,GAAN,EAAW;AAAEI,cAAQ,KAAV;AAAiBC,eAAS;AAAEC;AAAF;AAA1B,KAAX,CADI;AAAA,GADR,EAGGJ,IAHH,CAGQ;AAAA,WAAUK,OAAOC,IAAP,EAAV;AAAA,GAHR,EAIGC,KAJH,CAIS,UAACC,KAAD,EAAW;AAChBC,YAAQC,GAAR,CAAY,uBAAZ,EAAqCF,KAArC;AACA,UAAMA,KAAN;AACD,GAPH,CADc;AAAA,CAAhB;;AAUA,IAAMG,oBAAoB,SAApBA,iBAAoB;AAAA,SACxBZ,QAAQH,SAAS;AACfP,YAAQ;AACNuB,4BAAmBC,MAAnB;AADM,KADO;AAIfhB,cAAU;AAJK,GAAT,CAAR,CADwB;AAAA,CAA1B;;AA3BAjB,OAAOkC,aAAP,CAmCeH,iBAnCf","file":"imports/ui/components/MixpanelAnalytics/getMixpanelData.js.map","sourcesContent":["import cleanMethod from 'core/api/cleanMethods';\n\nconst MIXPANEL_URL = 'https://mixpanel.com/api/2.0/';\n\nexport const createQuery = params =>\n  (params\n    ? `?${Object.keys(params)\n      .map(param =>\n        `${encodeURIComponent(param)}=${encodeURIComponent(params[param])}`)\n      .join('&')}`\n    : '');\n\nconst buildUrl = ({ params, endpoint = 'segmentation' }) => {\n  const url = MIXPANEL_URL + endpoint + createQuery(params);\n  return url;\n};\n\nconst getData = url =>\n  cleanMethod('getMixpanelAuthorization')\n    .then(Authorization =>\n      fetch(url, { method: 'GET', headers: { Authorization } }))\n    .then(result => result.json())\n    .catch((error) => {\n      console.log('Mixpanel fetch error:', error);\n      throw error;\n    });\n\nconst getEventsByUserId = userId =>\n  getData(buildUrl({\n    params: {\n      distinct_ids: `[\"${userId}\"]`,\n    },\n    endpoint: 'stream/query',\n  }));\n\nexport default getEventsByUserId;\n"]},"hash":"d3a462574ca585d151f55c6daee51fd5d9682fa1"}

{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"intl-messageformat","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"IntlMessageFormat"}]},{"source":"./localization","imported":["getUserLocale","getFormats"],"specifiers":[{"kind":"named","imported":"getUserLocale","local":"getUserLocale"},{"kind":"named","imported":"getFormats","local":"getFormats"}]},{"source":"../lang/fr.json","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"messagesFR"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/core/utils/intl.js","filenameRelative":"imports/core/utils/intl.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/utils/intl.js.map","sourceFileName":"imports/core/utils/intl.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"intl"},"ignored":false,"code":"\"use strict\";\n\nvar IntlMessageFormat = void 0;\nmodule.watch(require(\"intl-messageformat\"), {\n  default: function _default(v) {\n    IntlMessageFormat = v;\n  }\n}, 0);\n\nvar _getUserLocale = void 0,\n    _getFormats = void 0;\n\nmodule.watch(require(\"./localization\"), {\n  getUserLocale: function getUserLocale(v) {\n    _getUserLocale = v;\n  },\n  getFormats: function getFormats(v) {\n    _getFormats = v;\n  }\n}, 1);\nvar messagesFR = void 0;\nmodule.watch(require(\"../lang/fr.json\"), {\n  default: function _default(v) {\n    messagesFR = v;\n  }\n}, 2);\n\n/**\n * formatMessage - A server-side method to use the intl package\n *\n * @param {type}   id          the id of the message\n * @param {object} [values={}] any additional values you want to use in the\n * string\n *\n * @return {type} The formatted string\n */var formatMessage = function formatMessage(id) {\n  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var customFallback = arguments[2];\n\n  if (id === undefined) {\n    throw new Error('an id is required in formatMessage');\n  }\n\n  var message = new IntlMessageFormat(messagesFR[id] || (customFallback !== undefined ? customFallback : id), _getUserLocale());\n  return message.format(values);\n};\n\nmodule.exportDefault(formatMessage);","map":{"version":3,"sources":["imports/core/utils/intl.js"],"names":["IntlMessageFormat","module","watch","require","default","v","getUserLocale","getFormats","messagesFR","formatMessage","id","values","customFallback","undefined","Error","message","format","exportDefault"],"mappings":";;AAAA,IAAIA,0BAAJ;AAAsBC,OAAOC,KAAP,CAAaC,QAAQ,oBAAR,CAAb,EAA2C;AAACC,SAAD,oBAASC,CAAT,EAAW;AAACL,wBAAkBK,CAAlB;AAAoB;AAAhC,CAA3C,EAA6E,CAA7E;;AAAgF,IAAIC,uBAAJ;AAAA,IAAkBC,oBAAlB;;AAA6BN,OAAOC,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACG,eAAD,yBAAeD,CAAf,EAAiB;AAACC,qBAAcD,CAAd;AAAgB,GAAlC;AAAmCE,YAAnC,sBAA8CF,CAA9C,EAAgD;AAACE,kBAAWF,CAAX;AAAa;AAA9D,CAAvC,EAAuG,CAAvG;AAA0G,IAAIG,mBAAJ;AAAeP,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACC,SAAD,oBAASC,CAAT,EAAW;AAACG,iBAAWH,CAAX;AAAa;AAAzB,CAAxC,EAAmE,CAAnE;;AAI5P;;;;;;;;GASA,IAAMI,gBAAgB,SAAhBA,aAAgB,CAACC,EAAD,EAAqC;AAAA,MAAhCC,MAAgC,uEAAvB,EAAuB;AAAA,MAAnBC,cAAmB;;AACzD,MAAIF,OAAOG,SAAX,EAAsB;AACpB,UAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,MAAMC,UAAU,IAAIf,iBAAJ,CACdQ,WAAWE,EAAX,MAAmBE,mBAAmBC,SAAnB,GAA+BD,cAA/B,GAAgDF,EAAnE,CADc,EAEdJ,gBAFc,CAAhB;AAKA,SAAOS,QAAQC,MAAR,CAAeL,MAAf,CAAP;AACD,CAVD;;AAbAV,OAAOgB,aAAP,CAyBeR,aAzBf","file":"imports/core/utils/intl.js.map","sourcesContent":["import IntlMessageFormat from 'intl-messageformat';\nimport { getUserLocale, getFormats } from 'core/utils/localization';\nimport messagesFR from 'core/lang/fr.json';\n\n/**\n * formatMessage - A server-side method to use the intl package\n *\n * @param {type}   id          the id of the message\n * @param {object} [values={}] any additional values you want to use in the\n * string\n *\n * @return {type} The formatted string\n */\nconst formatMessage = (id, values = {}, customFallback) => {\n  if (id === undefined) {\n    throw new Error('an id is required in formatMessage');\n  }\n  const message = new IntlMessageFormat(\n    messagesFR[id] || (customFallback !== undefined ? customFallback : id),\n    getUserLocale(),\n    // getFormats(),\n  );\n  return message.format(values);\n};\n\nexport default formatMessage;\n"]},"hash":"582e040a6daef86b634d3a6e461ac4daabf9ebfd"}

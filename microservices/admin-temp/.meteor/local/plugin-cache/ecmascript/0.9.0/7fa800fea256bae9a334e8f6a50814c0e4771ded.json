{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../api/constants","imported":["GENDER","USAGE_TYPE"],"specifiers":[{"kind":"named","imported":"GENDER","local":"GENDER"},{"kind":"named","imported":"USAGE_TYPE","local":"USAGE_TYPE"}]},{"source":"../config/constants","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"constants"}]},{"source":"./loanFunctions","imported":["getLoanValue","getPropAndWork","getMaintenance","getFees"],"specifiers":[{"kind":"named","imported":"getLoanValue","local":"getLoanValue"},{"kind":"named","imported":"getPropAndWork","local":"getPropAndWork"},{"kind":"named","imported":"getMaintenance","local":"getMaintenance"},{"kind":"named","imported":"getFees","local":"getFees"}]},{"source":"./borrowerFunctions","imported":["getFortune","getInsuranceFortune","getTotalFortune","getBorrowerIncome"],"specifiers":[{"kind":"named","imported":"getFortune","local":"getFortune"},{"kind":"named","imported":"getInsuranceFortune","local":"getInsuranceFortune"},{"kind":"named","imported":"getTotalFortune","local":"getTotalFortune"},{"kind":"named","imported":"getBorrowerIncome","local":"getBorrowerIncome"}]},{"source":"./general","imported":["arrayify"],"specifiers":[{"kind":"named","imported":"arrayify","local":"arrayify"}]}],"exports":{"exported":["getYearsToRetirement","getAmortization","getInterests","getMonthlyPayment","getTheoreticalMonthly","getIncomeRatio","canAffordRank1"],"specifiers":[{"kind":"local","local":"getYearsToRetirement","exported":"getYearsToRetirement"},{"kind":"local","local":"getAmortization","exported":"getAmortization"},{"kind":"local","local":"getInterests","exported":"getInterests"},{"kind":"local","local":"getMonthlyPayment","exported":"getMonthlyPayment"},{"kind":"local","local":"getTheoreticalMonthly","exported":"getTheoreticalMonthly"},{"kind":"local","local":"getIncomeRatio","exported":"getIncomeRatio"},{"kind":"local","local":"canAffordRank1","exported":"canAffordRank1"}]}}},"options":{"filename":"imports/core/utils/finance-math.js","filenameRelative":"imports/core/utils/finance-math.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"spec":false,"loose":false}],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/core/utils/finance-math.js.map","sourceFileName":"imports/core/utils/finance-math.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"finance-math"},"ignored":false,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nmodule.export({\n  getYearsToRetirement: function () {\n    function getYearsToRetirement() {\n      return _getYearsToRetirement;\n    }\n\n    return getYearsToRetirement;\n  }(),\n  getAmortization: function () {\n    function getAmortization() {\n      return _getAmortization;\n    }\n\n    return getAmortization;\n  }(),\n  getInterests: function () {\n    function getInterests() {\n      return _getInterests;\n    }\n\n    return getInterests;\n  }(),\n  getMonthlyPayment: function () {\n    function getMonthlyPayment() {\n      return _getMonthlyPayment;\n    }\n\n    return getMonthlyPayment;\n  }(),\n  getTheoreticalMonthly: function () {\n    function getTheoreticalMonthly() {\n      return _getTheoreticalMonthly;\n    }\n\n    return getTheoreticalMonthly;\n  }(),\n  getIncomeRatio: function () {\n    function getIncomeRatio() {\n      return _getIncomeRatio;\n    }\n\n    return getIncomeRatio;\n  }(),\n  canAffordRank1: function () {\n    function canAffordRank1() {\n      return _canAffordRank;\n    }\n\n    return canAffordRank1;\n  }()\n});\n\nvar _GENDER = void 0,\n    _USAGE_TYPE = void 0;\n\nmodule.watch(require(\"../api/constants\"), {\n  GENDER: function () {\n    function GENDER(v) {\n      _GENDER = v;\n    }\n\n    return GENDER;\n  }(),\n  USAGE_TYPE: function () {\n    function USAGE_TYPE(v) {\n      _USAGE_TYPE = v;\n    }\n\n    return USAGE_TYPE;\n  }()\n}, 0);\nvar constants = void 0;\nmodule.watch(require(\"../config/constants\"), {\n  \"default\": function () {\n    function _default(v) {\n      constants = v;\n    }\n\n    return _default;\n  }()\n}, 1);\n\nvar _getLoanValue = void 0,\n    _getPropAndWork = void 0,\n    _getMaintenance = void 0,\n    _getFees = void 0;\n\nexports.getYearsToRetirement = _getYearsToRetirement;\nmodule.watch(require(\"./loanFunctions\"), {\n  getLoanValue: function () {\n    function getLoanValue(v) {\n      _getLoanValue = v;\n    }\n\n    return getLoanValue;\n  }(),\n  getPropAndWork: function () {\n    function getPropAndWork(v) {\n      _getPropAndWork = v;\n    }\n\n    return getPropAndWork;\n  }(),\n  getMaintenance: function () {\n    function getMaintenance(v) {\n      _getMaintenance = v;\n    }\n\n    return getMaintenance;\n  }(),\n  getFees: function () {\n    function getFees(v) {\n      _getFees = v;\n    }\n\n    return getFees;\n  }()\n}, 2);\n\nvar _getFortune = void 0,\n    _getInsuranceFortune = void 0,\n    _getTotalFortune = void 0,\n    _getBorrowerIncome = void 0;\n\nmodule.watch(require(\"./borrowerFunctions\"), {\n  getFortune: function () {\n    function getFortune(v) {\n      _getFortune = v;\n    }\n\n    return getFortune;\n  }(),\n  getInsuranceFortune: function () {\n    function getInsuranceFortune(v) {\n      _getInsuranceFortune = v;\n    }\n\n    return getInsuranceFortune;\n  }(),\n  getTotalFortune: function () {\n    function getTotalFortune(v) {\n      _getTotalFortune = v;\n    }\n\n    return getTotalFortune;\n  }(),\n  getBorrowerIncome: function () {\n    function getBorrowerIncome(v) {\n      _getBorrowerIncome = v;\n    }\n\n    return getBorrowerIncome;\n  }()\n}, 3);\n\nvar _arrayify = void 0;\n\nmodule.watch(require(\"./general\"), {\n  arrayify: function () {\n    function arrayify(v) {\n      _arrayify = v;\n    }\n\n    return arrayify;\n  }()\n}, 4);\n\n// Determine retirement age depending on the gender of the borrowers\n// Return a positive value only, negative values rounded to 0\nvar _getYearsToRetirement = function () {\n  function _getYearsToRetirement(age1, age2, gender1, gender2) {\n    var retirement1 = gender1 === _GENDER.F ? 64 : 65;\n    var retirement2 = null;\n\n    if (gender2) {\n      retirement2 = gender2 === _GENDER.F ? 64 : 65;\n    } // Substract age to determine remaining time to retirement for both borrowers\n\n\n    var toRetirement1 = retirement1 - age1;\n    var toRetirement2 = void 0;\n\n    if (retirement2 && age2) {\n      toRetirement2 = retirement2 - age2;\n    } // Get the most limiting time to retirement for both borrowers, in years\n\n\n    var yearsToRetirement = void 0;\n\n    if (toRetirement2) {\n      yearsToRetirement = Math.min(toRetirement1, toRetirement2);\n    } else {\n      yearsToRetirement = toRetirement1;\n    }\n\n    return Math.max(yearsToRetirement, 0);\n  }\n\n  return _getYearsToRetirement;\n}(); // get monthly amortization for a loan loan\n\n\nvar _getAmortization = function () {\n  function _getAmortization(_ref) {\n    var loan = _ref.loan,\n        borrowers = _ref.borrowers,\n        property = _ref.property;\n\n    var loanValue = _getLoanValue({\n      loan: loan,\n      property: property\n    });\n\n    var propAndWork = _getPropAndWork({\n      loan: loan,\n      property: property\n    });\n\n    var safeBorrowers = _arrayify(borrowers);\n\n    var yearsToRetirement = _getYearsToRetirement(safeBorrowers[0] ? Number(safeBorrowers[0].age) : undefined, safeBorrowers[1] && safeBorrowers[1].age ? Number(safeBorrowers[1].age) : 0, safeBorrowers[0] ? safeBorrowers[0].gender : undefined, safeBorrowers[1] && safeBorrowers[1].gender); // fallback if the loan is smaller than 0\n\n\n    if (loanValue <= 0) {\n      return 0;\n    }\n\n    var loanPercent = loanValue / propAndWork;\n    var yearlyAmortization = 0;\n    var remainingYears = Math.min(yearsToRetirement, 15);\n\n    if (loanPercent > 0.65) {\n      // The loan has to be below 65% before 15 years or before retirement,\n      // whichever comes first\n      var amountToAmortize = (loanPercent - 0.65) * propAndWork; // Make sure we don't create a black hole, or use negative values by error\n\n      if (remainingYears > 0) {\n        // Amortization is the amount to amortize divided by the amount\n        // of years before the deadline\n        yearlyAmortization = amountToAmortize / remainingYears;\n      }\n    } else {// For projects below 65%, stop amortizing\n      // yearlyAmortization = propAndWork * constants.amortization;\n    }\n\n    return {\n      amortization: yearlyAmortization / 12,\n      years: remainingYears\n    };\n  }\n\n  return _getAmortization;\n}();\n\nvar _getInterests = function () {\n  function _getInterests(_ref2, rate, loanValue) {\n    var loan = _ref2.loan,\n        property = _ref2.property;\n    loanValue = loanValue || _getLoanValue({\n      loan: loan,\n      property: property\n    });\n\n    if (loanValue <= 0) {\n      throw new Error('negative loan');\n    } // Use a base interest rate of 1.5%\n\n\n    var interests = rate || 0.015;\n    return loanValue * interests / 12;\n  }\n\n  return _getInterests;\n}();\n\nvar _getMonthlyPayment = function () {\n  function _getMonthlyPayment(_ref3) {\n    var loan = _ref3.loan,\n        borrowers = _ref3.borrowers,\n        property = _ref3.property;\n\n    var interests = _getInterests({\n      loan: loan,\n      property: property\n    });\n\n    var _getAmortization2 = _getAmortization({\n      loan: loan,\n      borrowers: borrowers,\n      property: property\n    }),\n        amortization = _getAmortization2.amortization;\n\n    var maintenance = _getMaintenance({\n      loan: loan,\n      property: property\n    });\n\n    return {\n      total: amortization + interests + maintenance,\n      amortization: amortization,\n      interests: interests,\n      maintenance: maintenance\n    };\n  }\n\n  return _getMonthlyPayment;\n}();\n\nvar _getTheoreticalMonthly = function () {\n  function _getTheoreticalMonthly(_ref4) {\n    var loan = _ref4.loan,\n        borrowers = _ref4.borrowers,\n        property = _ref4.property;\n    var maintenance = _getPropAndWork({\n      loan: loan,\n      property: property\n    }) * constants.maintenance / 12;\n\n    var loanValue = _getLoanValue({\n      loan: loan,\n      property: property\n    });\n\n    var interests = loanValue * constants.interests / 12;\n\n    var _getAmortization3 = _getAmortization({\n      loan: loan,\n      borrowers: borrowers,\n      property: property\n    }),\n        amortization = _getAmortization3.amortization;\n\n    return {\n      total: amortization + interests + maintenance,\n      amortization: amortization,\n      interests: interests,\n      maintenance: maintenance\n    };\n  }\n\n  return _getTheoreticalMonthly;\n}();\n\nvar _getIncomeRatio = function () {\n  function _getIncomeRatio(_ref5) {\n    var loan = _ref5.loan,\n        borrowers = _ref5.borrowers,\n        property = _ref5.property;\n\n    var monthlyPayment = _getTheoreticalMonthly({\n      loan: loan,\n      borrowers: borrowers,\n      property: property\n    }).total;\n\n    var borrowerIncome = _getBorrowerIncome({\n      borrowers: borrowers\n    }) / 12; // Add infinity check\n\n    if (borrowerIncome > 0) {\n      return monthlyPayment / borrowerIncome;\n    }\n\n    return '-';\n  }\n\n  return _getIncomeRatio;\n}();\n\nvar _canAffordRank = function () {\n  function _canAffordRank(_ref6) {\n    var loan = _ref6.loan,\n        borrowers = _ref6.borrowers,\n        property = _ref6.property;\n\n    var propAndWork = _getPropAndWork({\n      loan: loan,\n      property: property\n    });\n\n    var totalFortune = _getTotalFortune({\n      borrowers: borrowers\n    });\n\n    var fortune = _getFortune({\n      borrowers: borrowers\n    });\n\n    var insuranceFortune = _getInsuranceFortune({\n      borrowers: borrowers\n    });\n\n    var fortuneRequired = 0.35 * propAndWork + property.value * constants.notaryFees;\n\n    if (fortune >= fortuneRequired) {\n      return true;\n    }\n\n    if (loan.general && loan.general.usageType === _USAGE_TYPE.PRIMARY) {\n      if (fortune + insuranceFortune >= fortuneRequired) {\n        // ignore lppFees\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return _canAffordRank;\n}();","map":{"version":3,"sources":["imports/core/utils/finance-math.js"],"names":["module","export","getYearsToRetirement","getAmortization","getInterests","getMonthlyPayment","getTheoreticalMonthly","getIncomeRatio","canAffordRank1","GENDER","USAGE_TYPE","watch","require","v","constants","getLoanValue","getPropAndWork","getMaintenance","getFees","getFortune","getInsuranceFortune","getTotalFortune","getBorrowerIncome","arrayify","age1","age2","gender1","gender2","retirement1","F","retirement2","toRetirement1","toRetirement2","yearsToRetirement","Math","min","max","loan","borrowers","property","loanValue","propAndWork","safeBorrowers","Number","age","undefined","gender","loanPercent","yearlyAmortization","remainingYears","amountToAmortize","amortization","years","rate","Error","interests","maintenance","total","monthlyPayment","borrowerIncome","totalFortune","fortune","insuranceFortune","fortuneRequired","value","notaryFees","general","usageType","PRIMARY"],"mappings":"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","file":"imports/core/utils/finance-math.js.map","sourcesContent":["import { GENDER, USAGE_TYPE } from '../api/constants';\nimport constants from '../config/constants';\nimport {\n  getLoanValue,\n  getPropAndWork,\n  getMaintenance,\n  getFees,\n} from './loanFunctions';\nimport {\n  getFortune,\n  getInsuranceFortune,\n  getTotalFortune,\n  getBorrowerIncome,\n} from './borrowerFunctions';\nimport { arrayify } from './general';\n\n// Determine retirement age depending on the gender of the borrowers\n// Return a positive value only, negative values rounded to 0\nexport const getYearsToRetirement = (age1, age2, gender1, gender2) => {\n  const retirement1 = gender1 === GENDER.F ? 64 : 65;\n  let retirement2 = null;\n  if (gender2) {\n    retirement2 = gender2 === GENDER.F ? 64 : 65;\n  }\n\n  // Substract age to determine remaining time to retirement for both borrowers\n  const toRetirement1 = retirement1 - age1;\n  let toRetirement2;\n  if (retirement2 && age2) {\n    toRetirement2 = retirement2 - age2;\n  }\n\n  // Get the most limiting time to retirement for both borrowers, in years\n  let yearsToRetirement;\n  if (toRetirement2) {\n    yearsToRetirement = Math.min(toRetirement1, toRetirement2);\n  } else {\n    yearsToRetirement = toRetirement1;\n  }\n\n  return Math.max(yearsToRetirement, 0);\n};\n\n// get monthly amortization for a loan loan\nexport const getAmortization = ({ loan, borrowers, property }) => {\n  const loanValue = getLoanValue({ loan, property });\n  const propAndWork = getPropAndWork({ loan, property });\n  const safeBorrowers = arrayify(borrowers);\n  const yearsToRetirement = getYearsToRetirement(\n    safeBorrowers[0] ? Number(safeBorrowers[0].age) : undefined,\n    safeBorrowers[1] && safeBorrowers[1].age ? Number(safeBorrowers[1].age) : 0,\n    safeBorrowers[0] ? safeBorrowers[0].gender : undefined,\n    safeBorrowers[1] && safeBorrowers[1].gender,\n  );\n\n  // fallback if the loan is smaller than 0\n  if (loanValue <= 0) {\n    return 0;\n  }\n\n  const loanPercent = loanValue / propAndWork;\n\n  let yearlyAmortization = 0;\n  const remainingYears = Math.min(yearsToRetirement, 15);\n  if (loanPercent > 0.65) {\n    // The loan has to be below 65% before 15 years or before retirement,\n    // whichever comes first\n    const amountToAmortize = (loanPercent - 0.65) * propAndWork;\n\n    // Make sure we don't create a black hole, or use negative values by error\n    if (remainingYears > 0) {\n      // Amortization is the amount to amortize divided by the amount\n      // of years before the deadline\n      yearlyAmortization = amountToAmortize / remainingYears;\n    }\n  } else {\n    // For projects below 65%, stop amortizing\n    // yearlyAmortization = propAndWork * constants.amortization;\n  }\n\n  return { amortization: yearlyAmortization / 12, years: remainingYears };\n};\n\n// get interest to pay for a loan every month\nexport const getInterests = ({ loan, property }, rate, loanValue) => {\n  loanValue = loanValue || getLoanValue({ loan, property });\n\n  if (loanValue <= 0) {\n    throw new Error('negative loan');\n  }\n\n  // Use a base interest rate of 1.5%\n  const interests = rate || 0.015;\n\n  return loanValue * interests / 12;\n};\n\nexport const getMonthlyPayment = ({ loan, borrowers, property }) => {\n  const interests = getInterests({ loan, property });\n  const { amortization } = getAmortization({\n    loan,\n    borrowers,\n    property,\n  });\n  const maintenance = getMaintenance({ loan, property });\n\n  return {\n    total: amortization + interests + maintenance,\n    amortization,\n    interests,\n    maintenance,\n  };\n};\n\nexport const getTheoreticalMonthly = ({ loan, borrowers, property }) => {\n  const maintenance =\n    getPropAndWork({ loan, property }) * constants.maintenance / 12;\n  const loanValue = getLoanValue({ loan, property });\n\n  const interests = loanValue * constants.interests / 12;\n  const { amortization } = getAmortization({\n    loan,\n    borrowers,\n    property,\n  });\n\n  return {\n    total: amortization + interests + maintenance,\n    amortization,\n    interests,\n    maintenance,\n  };\n};\n\nexport const getIncomeRatio = ({ loan, borrowers, property }) => {\n  const monthlyPayment = getTheoreticalMonthly({\n    loan,\n    borrowers,\n    property,\n  }).total;\n  const borrowerIncome = getBorrowerIncome({ borrowers }) / 12;\n\n  // Add infinity check\n  if (borrowerIncome > 0) {\n    return monthlyPayment / borrowerIncome;\n  }\n  return '-';\n};\n\nexport const canAffordRank1 = ({ loan, borrowers, property }) => {\n  const propAndWork = getPropAndWork({ loan, property });\n  const totalFortune = getTotalFortune({ borrowers });\n  const fortune = getFortune({ borrowers });\n  const insuranceFortune = getInsuranceFortune({ borrowers });\n  const fortuneRequired =\n    0.35 * propAndWork + property.value * constants.notaryFees;\n\n  if (fortune >= fortuneRequired) {\n    return true;\n  }\n\n  if (loan.general && loan.general.usageType === USAGE_TYPE.PRIMARY) {\n    if (fortune + insuranceFortune >= fortuneRequired) {\n      // ignore lppFees\n      return true;\n    }\n  }\n  return false;\n};\n"]},"hash":"7fa800fea256bae9a334e8f6a50814c0e4771ded"}

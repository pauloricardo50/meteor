{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":["loginButtonsSession","STATES","getLoginServices","hasPasswordService","loginResultCallback","service","err","passwordSignupFields","validateEmail","email","showMessage","clearMessage","validatePassword","showMessage","clearMessage","password","validateUsername","username","showMessage","clearMessage","formState","redirect","capitalize","string"],"specifiers":[{"kind":"local","local":"loginButtonsSession","exported":"loginButtonsSession"},{"kind":"local","local":"STATES","exported":"STATES"},{"kind":"local","local":"getLoginServices","exported":"getLoginServices"},{"kind":"local","local":"hasPasswordService","exported":"hasPasswordService"},{"kind":"local","local":"loginResultCallback","exported":"loginResultCallback"},{"kind":"local","local":"service","exported":"service"},{"kind":"local","local":"err","exported":"err"},{"kind":"local","local":"passwordSignupFields","exported":"passwordSignupFields"},{"kind":"local","local":"validateEmail","exported":"validateEmail"},{"kind":"local","local":"email","exported":"email"},{"kind":"local","local":"showMessage","exported":"showMessage"},{"kind":"local","local":"clearMessage","exported":"clearMessage"},{"kind":"local","local":"validatePassword","exported":"validatePassword"},{"kind":"local","local":"showMessage","exported":"showMessage"},{"kind":"local","local":"clearMessage","exported":"clearMessage"},{"kind":"local","local":"password","exported":"password"},{"kind":"local","local":"validateUsername","exported":"validateUsername"},{"kind":"local","local":"username","exported":"username"},{"kind":"local","local":"showMessage","exported":"showMessage"},{"kind":"local","local":"clearMessage","exported":"clearMessage"},{"kind":"local","local":"formState","exported":"formState"},{"kind":"local","local":"redirect","exported":"redirect"},{"kind":"local","local":"capitalize","exported":"capitalize"},{"kind":"local","local":"string","exported":"string"}]}}},"options":{"filename":"packages/std:accounts-ui/imports/helpers.js","filenameRelative":"packages/std:accounts-ui/imports/helpers.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/std:accounts-ui/imports/helpers.js.map","sourceFileName":"packages/std:accounts-ui/imports/helpers.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"helpers"},"ignored":false,"code":"module.export({\n  loginButtonsSession: () => loginButtonsSession,\n  STATES: () => STATES,\n  getLoginServices: () => getLoginServices,\n  hasPasswordService: () => hasPasswordService,\n  loginResultCallback: () => loginResultCallback,\n  passwordSignupFields: () => passwordSignupFields,\n  validateEmail: () => validateEmail,\n  validatePassword: () => validatePassword,\n  validateUsername: () => validateUsername,\n  redirect: () => redirect,\n  capitalize: () => capitalize\n});\nlet browserHistory;\n\ntry {\n  browserHistory = require('react-router').browserHistory;\n} catch (e) {}\n\nconst loginButtonsSession = Accounts._loginButtonsSession;\nconst STATES = {\n  SIGN_IN: Symbol('SIGN_IN'),\n  SIGN_UP: Symbol('SIGN_UP'),\n  PROFILE: Symbol('PROFILE'),\n  PASSWORD_CHANGE: Symbol('PASSWORD_CHANGE'),\n  PASSWORD_RESET: Symbol('PASSWORD_RESET'),\n  ENROLL_ACCOUNT: Symbol('ENROLL_ACCOUNT')\n};\n\nfunction getLoginServices() {\n  // First look for OAuth services.\n  const services = Package['accounts-oauth'] ? Accounts.oauth.serviceNames() : []; // Be equally kind to all login services. This also preserves\n  // backwards-compatibility.\n\n  services.sort();\n  return services.map(function (name) {\n    return {\n      name: name\n    };\n  });\n}\n\n; // Export getLoginServices using old style globals for accounts-base which\n// requires it.\n\nthis.getLoginServices = getLoginServices;\n\nfunction hasPasswordService() {\n  // First look for OAuth services.\n  return !!Package['accounts-password'];\n}\n\n;\n\nfunction loginResultCallback(service, err) {\n  if (!err) {} else if (err instanceof Accounts.LoginCancelledError) {// do nothing\n  } else if (err instanceof ServiceConfiguration.ConfigError) {} else {//loginButtonsSession.errorMessage(err.reason || \"Unknown error\");\n  }\n\n  if (Meteor.isClient) {\n    if (typeof redirect === 'string') {\n      window.location.href = '/';\n    }\n\n    if (typeof service === 'function') {\n      service();\n    }\n  }\n}\n\n;\n\nfunction passwordSignupFields() {\n  return Accounts.ui._options.passwordSignupFields || \"EMAIL_ONLY_NO_PASSWORD\";\n}\n\n;\n\nfunction validateEmail(email, showMessage, clearMessage) {\n  if (passwordSignupFields() === \"USERNAME_AND_OPTIONAL_EMAIL\" && email === '') {\n    return true;\n  }\n\n  if (Accounts.ui._options.emailPattern.test(email)) {\n    return true;\n  } else if (!email || email.length === 0) {\n    showMessage(\"error.emailRequired\", 'warning', false, 'email');\n    return false;\n  } else {\n    showMessage(\"error.accounts.Invalid email\", 'warning', false, 'email');\n    return false;\n  }\n}\n\nfunction validatePassword(password = '', showMessage, clearMessage) {\n  if (password.length >= Accounts.ui._options.minimumPasswordLength) {\n    return true;\n  } else {\n    // const errMsg = T9n.get(\"error.minChar\").replace(/7/, Accounts.ui._options.minimumPasswordLength);\n    const errMsg = \"error.minChar\";\n    showMessage(errMsg, 'warning', false, 'password');\n    return false;\n  }\n}\n\n;\n\nfunction validateUsername(username, showMessage, clearMessage, formState) {\n  if (username) {\n    return true;\n  } else {\n    const fieldName = passwordSignupFields() === 'USERNAME_ONLY' || formState === STATES.SIGN_UP ? 'username' : 'usernameOrEmail';\n    showMessage(\"error.usernameRequired\", 'warning', false, fieldName);\n    return false;\n  }\n}\n\nfunction redirect(redirect) {\n  if (Meteor.isClient) {\n    if (window.history) {\n      // Run after all app specific redirects, i.e. to the login screen.\n      Meteor.setTimeout(() => {\n        if (Package['kadira:flow-router']) {\n          Package['kadira:flow-router'].FlowRouter.go(redirect);\n        } else if (Package['kadira:flow-router-ssr']) {\n          Package['kadira:flow-router-ssr'].FlowRouter.go(redirect);\n        } else if (browserHistory) {\n          browserHistory.push(redirect);\n        } else {\n          window.history.pushState({}, 'redirect', redirect);\n        }\n      }, 100);\n    }\n  }\n}\n\nfunction capitalize(string) {\n  return string.replace(/\\-/, ' ').split(' ').map(word => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(' ');\n}","map":{"version":3,"sources":["packages/std:accounts-ui/imports/helpers.js"],"names":["module","export","loginButtonsSession","STATES","getLoginServices","hasPasswordService","loginResultCallback","passwordSignupFields","validateEmail","validatePassword","validateUsername","redirect","capitalize","browserHistory","require","e","Accounts","_loginButtonsSession","SIGN_IN","Symbol","SIGN_UP","PROFILE","PASSWORD_CHANGE","PASSWORD_RESET","ENROLL_ACCOUNT","services","Package","oauth","serviceNames","sort","map","name","service","err","LoginCancelledError","ServiceConfiguration","ConfigError","Meteor","isClient","window","location","href","ui","_options","email","showMessage","clearMessage","emailPattern","test","length","password","minimumPasswordLength","errMsg","username","formState","fieldName","history","setTimeout","FlowRouter","go","push","pushState","string","replace","split","word","charAt","toUpperCase","slice","join"],"mappings":"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","file":"packages/std:accounts-ui/imports/helpers.js.map","sourcesContent":["let browserHistory\ntry { browserHistory = require('react-router').browserHistory } catch(e) {}\nexport const loginButtonsSession = Accounts._loginButtonsSession;\nexport const STATES = {\n  SIGN_IN: Symbol('SIGN_IN'),\n  SIGN_UP: Symbol('SIGN_UP'),\n  PROFILE: Symbol('PROFILE'),\n  PASSWORD_CHANGE: Symbol('PASSWORD_CHANGE'),\n  PASSWORD_RESET: Symbol('PASSWORD_RESET'),\n  ENROLL_ACCOUNT: Symbol('ENROLL_ACCOUNT')\n};\n\nexport function getLoginServices() {\n  // First look for OAuth services.\n  const services = Package['accounts-oauth'] ? Accounts.oauth.serviceNames() : [];\n\n  // Be equally kind to all login services. This also preserves\n  // backwards-compatibility.\n  services.sort();\n\n  return services.map(function(name){\n    return {name: name};\n  });\n};\n// Export getLoginServices using old style globals for accounts-base which\n// requires it.\nthis.getLoginServices = getLoginServices;\n\nexport function hasPasswordService() {\n  // First look for OAuth services.\n  return !!Package['accounts-password'];\n};\n\nexport function loginResultCallback(service, err) {\n  if (!err) {\n\n  } else if (err instanceof Accounts.LoginCancelledError) {\n    // do nothing\n  } else if (err instanceof ServiceConfiguration.ConfigError) {\n\n  } else {\n    //loginButtonsSession.errorMessage(err.reason || \"Unknown error\");\n  }\n\n  if (Meteor.isClient) {\n    if (typeof redirect === 'string'){\n      window.location.href = '/';\n    }\n\n    if (typeof service === 'function'){\n      service();\n    }\n  }\n};\n\nexport function passwordSignupFields() {\n  return Accounts.ui._options.passwordSignupFields || \"EMAIL_ONLY_NO_PASSWORD\";\n};\n\nexport function validateEmail(email, showMessage, clearMessage) {\n  if (passwordSignupFields() === \"USERNAME_AND_OPTIONAL_EMAIL\" && email === '') {\n    return true;\n  }\n  if (Accounts.ui._options.emailPattern.test(email)) {\n    return true;\n  } else if (!email || email.length === 0) {\n    showMessage(\"error.emailRequired\", 'warning', false, 'email');\n    return false;\n  } else {\n    showMessage(\"error.accounts.Invalid email\", 'warning', false, 'email');\n    return false;\n  }\n}\n\nexport function validatePassword(password = '', showMessage, clearMessage){\n  if (password.length >= Accounts.ui._options.minimumPasswordLength) {\n    return true;\n  } else {\n    // const errMsg = T9n.get(\"error.minChar\").replace(/7/, Accounts.ui._options.minimumPasswordLength);\n    const errMsg = \"error.minChar\"\n    showMessage(errMsg, 'warning', false, 'password');\n    return false;\n  }\n};\n\nexport function validateUsername(username, showMessage, clearMessage, formState) {\n  if ( username ) {\n    return true;\n  } else {\n    const fieldName = (passwordSignupFields() === 'USERNAME_ONLY' || formState === STATES.SIGN_UP) ? 'username' : 'usernameOrEmail';\n    showMessage(\"error.usernameRequired\", 'warning', false, fieldName);\n    return false;\n  }\n}\n\nexport function redirect(redirect) {\n  if (Meteor.isClient) {\n    if (window.history) {\n      // Run after all app specific redirects, i.e. to the login screen.\n      Meteor.setTimeout(() => {\n        if (Package['kadira:flow-router']) {\n          Package['kadira:flow-router'].FlowRouter.go(redirect);\n        } else if (Package['kadira:flow-router-ssr']) {\n          Package['kadira:flow-router-ssr'].FlowRouter.go(redirect);\n        } else if (browserHistory) {\n          browserHistory.push(redirect);\n        } else {\n          window.history.pushState( {} , 'redirect', redirect );\n        }\n      }, 100);\n    }\n  }\n}\n\nexport function capitalize(string) {\n  return string.replace(/\\-/, ' ').split(' ').map(word => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(' ');\n}\n"]},"hash":"f74c28ece6d479931c5be990ebce478ed1d9313e"}

{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar eventEmitter,\n    userHelper,\n    bind = function (fn, me) {\n  return function () {\n    return fn.apply(me, arguments);\n  };\n},\n    extend = function (child, parent) {\n  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {\n    if (hasProp.call(parent, key)) child[key] = parent[key];\n  }\n\n  function ctor() {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n  child.__super__ = parent.prototype;\n  return child;\n},\n    hasProp = {}.hasOwnProperty,\n    slice = [].slice,\n    indexOf = [].indexOf || function (item) {\n  for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item) return i;\n  }\n\n  return -1;\n};\n\nif (Meteor.isServer) {\n  eventEmitter = Npm.require('events').EventEmitter;\n\n  userHelper = function (user, connection) {\n    var ret;\n    ret = user != null ? user : \"[UNAUTHENTICATED]\";\n\n    if (!connection) {\n      ret = \"[SERVER]\";\n    }\n\n    return ret;\n  };\n\n  JobCollection = function (superClass) {\n    extend(JobCollection, superClass);\n\n    function JobCollection(root, options) {\n      var foo, i, len, level, localMethods, methodFunction, methodName, ref;\n\n      if (root == null) {\n        root = 'queue';\n      }\n\n      if (options == null) {\n        options = {};\n      }\n\n      this._emit = bind(this._emit, this);\n      this._toLog = bind(this._toLog, this);\n      this._onCall = bind(this._onCall, this);\n      this._onError = bind(this._onError, this);\n\n      if (!(this instanceof JobCollection)) {\n        return new JobCollection(root, options);\n      }\n\n      JobCollection.__super__.constructor.call(this, root, options);\n\n      this.events = new eventEmitter();\n      this._errorListener = this.events.on('error', this._onError);\n      this._methodErrorDispatch = this.events.on('error', function (_this) {\n        return function (msg) {\n          return _this.events.emit(msg.method, msg);\n        };\n      }(this));\n      this._callListener = this.events.on('call', this._onCall);\n      this._methodEventDispatch = this.events.on('call', function (_this) {\n        return function (msg) {\n          return _this.events.emit(msg.method, msg);\n        };\n      }(this));\n      this.stopped = true;\n\n      share.JobCollectionBase.__super__.deny.bind(this)({\n        update: function (_this) {\n          return function () {\n            return true;\n          };\n        }(this),\n        insert: function (_this) {\n          return function () {\n            return true;\n          };\n        }(this),\n        remove: function (_this) {\n          return function () {\n            return true;\n          };\n        }(this)\n      });\n\n      this.promote();\n      this.logStream = null;\n      this.allows = {};\n      this.denys = {};\n      ref = this.ddpPermissionLevels.concat(this.ddpMethods);\n\n      for (i = 0, len = ref.length; i < len; i++) {\n        level = ref[i];\n        this.allows[level] = [];\n        this.denys[level] = [];\n      }\n\n      if (options.connection == null) {\n        this._ensureIndex({\n          type: 1,\n          status: 1\n        });\n\n        this._ensureIndex({\n          priority: 1,\n          retryUntil: 1,\n          after: 1\n        });\n\n        this.isSimulation = false;\n        localMethods = this._generateMethods();\n\n        if (this._localServerMethods == null) {\n          this._localServerMethods = {};\n        }\n\n        for (methodName in meteorBabelHelpers.sanitizeForInObject(localMethods)) {\n          methodFunction = localMethods[methodName];\n          this._localServerMethods[methodName] = methodFunction;\n        }\n\n        foo = this;\n\n        this._ddp_apply = function (_this) {\n          return function (name, params, cb) {\n            if (cb != null) {\n              return Meteor.setTimeout(function () {\n                var e, err, res;\n                err = null;\n                res = null;\n\n                try {\n                  res = _this._localServerMethods[name].apply(_this, params);\n                } catch (error) {\n                  e = error;\n                  err = e;\n                }\n\n                return cb(err, res);\n              }, 0);\n            } else {\n              return _this._localServerMethods[name].apply(_this, params);\n            }\n          };\n        }(this);\n\n        Job._setDDPApply(this._ddp_apply, root);\n\n        Meteor.methods(localMethods);\n      }\n    }\n\n    JobCollection.prototype._onError = function (msg) {\n      var user;\n      user = userHelper(msg.userId, msg.connection);\n      return this._toLog(user, msg.method, \"\" + msg.error);\n    };\n\n    JobCollection.prototype._onCall = function (msg) {\n      var user;\n      user = userHelper(msg.userId, msg.connection);\n\n      this._toLog(user, msg.method, \"params: \" + JSON.stringify(msg.params));\n\n      return this._toLog(user, msg.method, \"returned: \" + JSON.stringify(msg.returnVal));\n    };\n\n    JobCollection.prototype._toLog = function (userId, method, message) {\n      var ref;\n      return (ref = this.logStream) != null ? ref.write(new Date() + \", \" + userId + \", \" + method + \", \" + message + \"\\n\") : void 0;\n    };\n\n    JobCollection.prototype._emit = function () {\n      var connection, err, method, params, ret, userId;\n      method = arguments[0], connection = arguments[1], userId = arguments[2], err = arguments[3], ret = arguments[4], params = 6 <= arguments.length ? slice.call(arguments, 5) : [];\n\n      if (err) {\n        return this.events.emit('error', {\n          error: err,\n          method: method,\n          connection: connection,\n          userId: userId,\n          params: params,\n          returnVal: null\n        });\n      } else {\n        return this.events.emit('call', {\n          error: null,\n          method: method,\n          connection: connection,\n          userId: userId,\n          params: params,\n          returnVal: ret\n        });\n      }\n    };\n\n    JobCollection.prototype._methodWrapper = function (method, func) {\n      var myTypeof, permitted, self;\n      self = this;\n\n      myTypeof = function (val) {\n        var type;\n        type = typeof val === \"undefined\" ? \"undefined\" : _typeof(val);\n\n        if (type === 'object' && type instanceof Array) {\n          type = 'array';\n        }\n\n        return type;\n      };\n\n      permitted = function (_this) {\n        return function (userId, params) {\n          var performAllTests, performTest;\n\n          performTest = function (tests) {\n            var i, len, result, test;\n            result = false;\n\n            for (i = 0, len = tests.length; i < len; i++) {\n              test = tests[i];\n\n              if (result === false) {\n                result = result || function () {\n                  switch (myTypeof(test)) {\n                    case 'array':\n                      return indexOf.call(test, userId) >= 0;\n\n                    case 'function':\n                      return test(userId, method, params);\n\n                    default:\n                      return false;\n                  }\n                }();\n              }\n            }\n\n            return result;\n          };\n\n          performAllTests = function (allTests) {\n            var i, len, ref, result, t;\n            result = false;\n            ref = _this.ddpMethodPermissions[method];\n\n            for (i = 0, len = ref.length; i < len; i++) {\n              t = ref[i];\n\n              if (result === false) {\n                result = result || performTest(allTests[t]);\n              }\n            }\n\n            return result;\n          };\n\n          return !performAllTests(_this.denys) && performAllTests(_this.allows);\n        };\n      }(this);\n\n      return function () {\n        var err, params, retval;\n        params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n\n        try {\n          if (!(this.connection && !permitted(this.userId, params))) {\n            retval = func.apply(null, params);\n          } else {\n            err = new Meteor.Error(403, \"Method not authorized\", \"Authenticated user is not permitted to invoke this method.\");\n            throw err;\n          }\n        } catch (error) {\n          err = error;\n\n          self._emit(method, this.connection, this.userId, err);\n\n          throw err;\n        }\n\n        self._emit.apply(self, [method, this.connection, this.userId, null, retval].concat(slice.call(params)));\n\n        return retval;\n      };\n    };\n\n    JobCollection.prototype.setLogStream = function (writeStream) {\n      if (writeStream == null) {\n        writeStream = null;\n      }\n\n      if (this.logStream) {\n        throw new Error(\"logStream may only be set once per job-collection startup/shutdown cycle\");\n      }\n\n      this.logStream = writeStream;\n\n      if (!(this.logStream == null || this.logStream.write != null && typeof this.logStream.write === 'function' && this.logStream.end != null && typeof this.logStream.end === 'function')) {\n        throw new Error(\"logStream must be a valid writable node.js Stream\");\n      }\n    };\n\n    JobCollection.prototype.allow = function (allowOptions) {\n      var func, results, type;\n      results = [];\n\n      for (type in meteorBabelHelpers.sanitizeForInObject(allowOptions)) {\n        func = allowOptions[type];\n\n        if (type in this.allows) {\n          results.push(this.allows[type].push(func));\n        }\n      }\n\n      return results;\n    };\n\n    JobCollection.prototype.deny = function (denyOptions) {\n      var func, results, type;\n      results = [];\n\n      for (type in meteorBabelHelpers.sanitizeForInObject(denyOptions)) {\n        func = denyOptions[type];\n\n        if (type in this.denys) {\n          results.push(this.denys[type].push(func));\n        }\n      }\n\n      return results;\n    };\n\n    JobCollection.prototype.scrub = function (job) {\n      return job;\n    };\n\n    JobCollection.prototype.promote = function (milliseconds) {\n      if (milliseconds == null) {\n        milliseconds = 15 * 1000;\n      }\n\n      if (typeof milliseconds === 'number' && milliseconds > 0) {\n        if (this.interval) {\n          Meteor.clearInterval(this.interval);\n        }\n\n        this._promote_jobs();\n\n        return this.interval = Meteor.setInterval(this._promote_jobs.bind(this), milliseconds);\n      } else {\n        return console.warn(\"jobCollection.promote: invalid timeout: \" + this.root + \", \" + milliseconds);\n      }\n    };\n\n    JobCollection.prototype._promote_jobs = function (ids) {\n      if (ids == null) {\n        ids = [];\n      }\n\n      if (this.stopped) {\n        return;\n      }\n\n      this.find({\n        status: 'running',\n        expiresAfter: {\n          $lt: new Date()\n        }\n      }).forEach(function (_this) {\n        return function (job) {\n          return new Job(_this.root, job).fail(\"Failed for exceeding worker set workTimeout\");\n        };\n      }(this));\n      return this.readyJobs();\n    };\n\n    return JobCollection;\n  }(share.JobCollectionBase);\n}","sourceMap":{"version":3,"sources":["/packages/vsivsi_job-collection/src/server.coffee","/src/server.coffee"],"names":["eventEmitter","userHelper","bind","fn","me","apply","arguments","extend","child","parent","key","hasProp","call","ctor","constructor","prototype","__super__","hasOwnProperty","slice","indexOf","item","i","l","length","Meteor","isServer","Npm","require","EventEmitter","user","connection","ret","JobCollection","superClass","root","options","foo","len","level","localMethods","methodFunction","methodName","ref","_emit","_toLog","_onCall","_onError","events","_errorListener","on","_methodErrorDispatch","_this","msg","emit","method","_callListener","_methodEventDispatch","stopped","share","JobCollectionBase","deny","update","insert","remove","promote","logStream","allows","denys","ddpPermissionLevels","concat","ddpMethods","_ensureIndex","type","status","priority","retryUntil","after","isSimulation","_generateMethods","_localServerMethods","_ddp_apply","name","params","cb","setTimeout","e","err","res","error","Job","_setDDPApply","methods","userId","JSON","stringify","returnVal","message","write","Date","_methodWrapper","func","myTypeof","permitted","self","val","Array","performAllTests","performTest","tests","result","test","allTests","t","ddpMethodPermissions","retval","Error","setLogStream","writeStream","end","allow","allowOptions","results","push","denyOptions","scrub","job","milliseconds","interval","clearInterval","_promote_jobs","setInterval","console","warn","ids","find","expiresAfter","$lt","forEach","fail","readyJobs"],"mappings":"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","file":"packages/vsivsi:job-collection/src/server.coffee.map","sourcesContent":["############################################################################\n#     Copyright (C) 2014-2017 by Vaughn Iverson\n#     job-collection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n  eventEmitter = Npm.require('events').EventEmitter\n\n  userHelper = (user, connection) ->\n    ret = user ? \"[UNAUTHENTICATED]\"\n    unless connection\n      ret = \"[SERVER]\"\n    ret\n\n  ################################################################\n  ## job-collection server class\n\n  class JobCollection extends share.JobCollectionBase\n\n    constructor: (root = 'queue', options = {}) ->\n      unless @ instanceof JobCollection\n        return new JobCollection(root, options)\n\n      # Call super's constructor\n      super root, options\n\n      @events = new eventEmitter()\n\n      @_errorListener = @events.on 'error', @_onError\n\n      # Add events for all individual successful DDP methods\n      @_methodErrorDispatch = @events.on 'error', (msg) =>\n        @events.emit msg.method, msg\n\n      @_callListener = @events.on 'call', @_onCall\n\n      # Add events for all individual successful DDP methods\n      @_methodEventDispatch = @events.on 'call', (msg) =>\n        @events.emit msg.method, msg\n\n      @stopped = true\n\n      # No client mutators allowed\n      share.JobCollectionBase.__super__.deny.bind(@)\n        update: () => true\n        insert: () => true\n        remove: () => true\n\n      @promote()\n\n      @logStream = null\n\n      @allows = {}\n      @denys = {}\n\n      # Initialize allow/deny lists for permission levels and ddp methods\n      for level in @ddpPermissionLevels.concat @ddpMethods\n        @allows[level] = []\n        @denys[level] = []\n\n      # If a connection option is given, then this JobCollection is actually hosted\n      # remotely, so don't establish local and remotely callable server methods in that case\n      unless options.connection?\n        # Default indexes, only when not remotely connected!\n        @_ensureIndex { type : 1, status : 1 }\n        @_ensureIndex { priority : 1, retryUntil : 1, after : 1 }\n        @isSimulation = false\n        localMethods = @_generateMethods()\n        @_localServerMethods ?= {}\n        @_localServerMethods[methodName] = methodFunction for methodName, methodFunction of localMethods\n        foo = this\n        @_ddp_apply = (name, params, cb) =>\n          if cb?\n            Meteor.setTimeout (() =>\n              err = null\n              res = null\n              try\n                res = @_localServerMethods[name].apply(this, params)\n              catch e\n                err = e\n              cb err, res), 0\n          else\n            @_localServerMethods[name].apply(this, params)\n\n        Job._setDDPApply @_ddp_apply, root\n\n        Meteor.methods localMethods\n\n    _onError: (msg) =>\n      user = userHelper msg.userId, msg.connection\n      @_toLog user, msg.method, \"#{msg.error}\"\n\n    _onCall: (msg) =>\n      user = userHelper msg.userId, msg.connection\n      @_toLog user, msg.method, \"params: \" + JSON.stringify(msg.params)\n      @_toLog user, msg.method, \"returned: \" + JSON.stringify(msg.returnVal)\n\n    _toLog: (userId, method, message) =>\n      @logStream?.write \"#{new Date()}, #{userId}, #{method}, #{message}\\n\"\n      # process.stdout.write \"#{new Date()}, #{userId}, #{method}, #{message}\\n\"\n\n    _emit: (method, connection, userId, err, ret, params...) =>\n      if err\n        @events.emit 'error',\n          error: err\n          method: method\n          connection: connection\n          userId: userId\n          params: params\n          returnVal: null\n      else\n        @events.emit 'call',\n          error: null\n          method: method\n          connection: connection\n          userId: userId\n          params: params\n          returnVal: ret\n\n    _methodWrapper: (method, func) ->\n      self = this\n      myTypeof = (val) ->\n        type = typeof val\n        type = 'array' if type is 'object' and type instanceof Array\n        return type\n      permitted = (userId, params) =>\n        performTest = (tests) =>\n          result = false\n          for test in tests when result is false\n            result = result or switch myTypeof(test)\n              when 'array' then userId in test\n              when 'function' then test(userId, method, params)\n              else false\n          return result\n        performAllTests = (allTests) =>\n          result = false\n          for t in @ddpMethodPermissions[method] when result is false\n            result = result or performTest(allTests[t])\n          return result\n        return not performAllTests(@denys) and performAllTests(@allows)\n      # Return the wrapper function that the Meteor method will actually invoke\n      return (params...) ->\n        try\n          unless this.connection and not permitted(this.userId, params)\n            retval = func(params...)\n          else\n            err = new Meteor.Error 403, \"Method not authorized\", \"Authenticated user is not permitted to invoke this method.\"\n            throw err\n        catch err\n          self._emit method, this.connection, this.userId, err\n          throw err\n        self._emit method, this.connection, this.userId, null, retval, params...\n        return retval\n\n    setLogStream: (writeStream = null) ->\n      if @logStream\n        throw new Error \"logStream may only be set once per job-collection startup/shutdown cycle\"\n      @logStream = writeStream\n      unless not @logStream? or\n             @logStream.write? and\n             typeof @logStream.write is 'function' and\n             @logStream.end? and\n             typeof @logStream.end is 'function'\n        throw new Error \"logStream must be a valid writable node.js Stream\"\n\n    # Register application allow rules\n    allow: (allowOptions) ->\n      @allows[type].push(func) for type, func of allowOptions when type of @allows\n\n    # Register application deny rules\n    deny: (denyOptions) ->\n      @denys[type].push(func) for type, func of denyOptions when type of @denys\n\n    # Hook function to sanitize documents before validating them in getWork() and getJob()\n    scrub: (job) ->\n      job\n\n    promote: (milliseconds = 15*1000) ->\n      if typeof milliseconds is 'number' and milliseconds > 0\n        if @interval\n          Meteor.clearInterval @interval\n        @_promote_jobs()\n        @interval = Meteor.setInterval @_promote_jobs.bind(@), milliseconds\n      else\n        console.warn \"jobCollection.promote: invalid timeout: #{@root}, #{milliseconds}\"\n\n    _promote_jobs: (ids = []) ->\n      if @stopped\n        return\n      # This looks for zombie running jobs and autofails them\n      @find({status: 'running', expiresAfter: { $lt: new Date() }})\n        .forEach (job) =>\n          new Job(@root, job).fail(\"Failed for exceeding worker set workTimeout\");\n      # Change jobs from waiting to ready when their time has come\n      # and dependencies have been satisfied\n      @readyJobs()\n","var eventEmitter, userHelper,               \n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty,\n  slice = [].slice,\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nif (Meteor.isServer) {\n  eventEmitter = Npm.require('events').EventEmitter;\n  userHelper = function(user, connection) {\n    var ret;\n    ret = user != null ? user : \"[UNAUTHENTICATED]\";\n    if (!connection) {\n      ret = \"[SERVER]\";\n    }\n    return ret;\n  };\n  JobCollection = (function(superClass) {\n    extend(JobCollection, superClass);\n\n    function JobCollection(root, options) {\n      var foo, i, len, level, localMethods, methodFunction, methodName, ref;\n      if (root == null) {\n        root = 'queue';\n      }\n      if (options == null) {\n        options = {};\n      }\n      this._emit = bind(this._emit, this);\n      this._toLog = bind(this._toLog, this);\n      this._onCall = bind(this._onCall, this);\n      this._onError = bind(this._onError, this);\n      if (!(this instanceof JobCollection)) {\n        return new JobCollection(root, options);\n      }\n      JobCollection.__super__.constructor.call(this, root, options);\n      this.events = new eventEmitter();\n      this._errorListener = this.events.on('error', this._onError);\n      this._methodErrorDispatch = this.events.on('error', (function(_this) {\n        return function(msg) {\n          return _this.events.emit(msg.method, msg);\n        };\n      })(this));\n      this._callListener = this.events.on('call', this._onCall);\n      this._methodEventDispatch = this.events.on('call', (function(_this) {\n        return function(msg) {\n          return _this.events.emit(msg.method, msg);\n        };\n      })(this));\n      this.stopped = true;\n      share.JobCollectionBase.__super__.deny.bind(this)({\n        update: (function(_this) {\n          return function() {\n            return true;\n          };\n        })(this),\n        insert: (function(_this) {\n          return function() {\n            return true;\n          };\n        })(this),\n        remove: (function(_this) {\n          return function() {\n            return true;\n          };\n        })(this)\n      });\n      this.promote();\n      this.logStream = null;\n      this.allows = {};\n      this.denys = {};\n      ref = this.ddpPermissionLevels.concat(this.ddpMethods);\n      for (i = 0, len = ref.length; i < len; i++) {\n        level = ref[i];\n        this.allows[level] = [];\n        this.denys[level] = [];\n      }\n      if (options.connection == null) {\n        this._ensureIndex({\n          type: 1,\n          status: 1\n        });\n        this._ensureIndex({\n          priority: 1,\n          retryUntil: 1,\n          after: 1\n        });\n        this.isSimulation = false;\n        localMethods = this._generateMethods();\n        if (this._localServerMethods == null) {\n          this._localServerMethods = {};\n        }\n        for (methodName in localMethods) {\n          methodFunction = localMethods[methodName];\n          this._localServerMethods[methodName] = methodFunction;\n        }\n        foo = this;\n        this._ddp_apply = (function(_this) {\n          return function(name, params, cb) {\n            if (cb != null) {\n              return Meteor.setTimeout((function() {\n                var e, err, res;\n                err = null;\n                res = null;\n                try {\n                  res = _this._localServerMethods[name].apply(_this, params);\n                } catch (error) {\n                  e = error;\n                  err = e;\n                }\n                return cb(err, res);\n              }), 0);\n            } else {\n              return _this._localServerMethods[name].apply(_this, params);\n            }\n          };\n        })(this);\n        Job._setDDPApply(this._ddp_apply, root);\n        Meteor.methods(localMethods);\n      }\n    }\n\n    JobCollection.prototype._onError = function(msg) {\n      var user;\n      user = userHelper(msg.userId, msg.connection);\n      return this._toLog(user, msg.method, \"\" + msg.error);\n    };\n\n    JobCollection.prototype._onCall = function(msg) {\n      var user;\n      user = userHelper(msg.userId, msg.connection);\n      this._toLog(user, msg.method, \"params: \" + JSON.stringify(msg.params));\n      return this._toLog(user, msg.method, \"returned: \" + JSON.stringify(msg.returnVal));\n    };\n\n    JobCollection.prototype._toLog = function(userId, method, message) {\n      var ref;\n      return (ref = this.logStream) != null ? ref.write((new Date()) + \", \" + userId + \", \" + method + \", \" + message + \"\\n\") : void 0;\n    };\n\n    JobCollection.prototype._emit = function() {\n      var connection, err, method, params, ret, userId;\n      method = arguments[0], connection = arguments[1], userId = arguments[2], err = arguments[3], ret = arguments[4], params = 6 <= arguments.length ? slice.call(arguments, 5) : [];\n      if (err) {\n        return this.events.emit('error', {\n          error: err,\n          method: method,\n          connection: connection,\n          userId: userId,\n          params: params,\n          returnVal: null\n        });\n      } else {\n        return this.events.emit('call', {\n          error: null,\n          method: method,\n          connection: connection,\n          userId: userId,\n          params: params,\n          returnVal: ret\n        });\n      }\n    };\n\n    JobCollection.prototype._methodWrapper = function(method, func) {\n      var myTypeof, permitted, self;\n      self = this;\n      myTypeof = function(val) {\n        var type;\n        type = typeof val;\n        if (type === 'object' && type instanceof Array) {\n          type = 'array';\n        }\n        return type;\n      };\n      permitted = (function(_this) {\n        return function(userId, params) {\n          var performAllTests, performTest;\n          performTest = function(tests) {\n            var i, len, result, test;\n            result = false;\n            for (i = 0, len = tests.length; i < len; i++) {\n              test = tests[i];\n              if (result === false) {\n                result = result || (function() {\n                  switch (myTypeof(test)) {\n                    case 'array':\n                      return indexOf.call(test, userId) >= 0;\n                    case 'function':\n                      return test(userId, method, params);\n                    default:\n                      return false;\n                  }\n                })();\n              }\n            }\n            return result;\n          };\n          performAllTests = function(allTests) {\n            var i, len, ref, result, t;\n            result = false;\n            ref = _this.ddpMethodPermissions[method];\n            for (i = 0, len = ref.length; i < len; i++) {\n              t = ref[i];\n              if (result === false) {\n                result = result || performTest(allTests[t]);\n              }\n            }\n            return result;\n          };\n          return !performAllTests(_this.denys) && performAllTests(_this.allows);\n        };\n      })(this);\n      return function() {\n        var err, params, retval;\n        params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        try {\n          if (!(this.connection && !permitted(this.userId, params))) {\n            retval = func.apply(null, params);\n          } else {\n            err = new Meteor.Error(403, \"Method not authorized\", \"Authenticated user is not permitted to invoke this method.\");\n            throw err;\n          }\n        } catch (error) {\n          err = error;\n          self._emit(method, this.connection, this.userId, err);\n          throw err;\n        }\n        self._emit.apply(self, [method, this.connection, this.userId, null, retval].concat(slice.call(params)));\n        return retval;\n      };\n    };\n\n    JobCollection.prototype.setLogStream = function(writeStream) {\n      if (writeStream == null) {\n        writeStream = null;\n      }\n      if (this.logStream) {\n        throw new Error(\"logStream may only be set once per job-collection startup/shutdown cycle\");\n      }\n      this.logStream = writeStream;\n      if (!((this.logStream == null) || (this.logStream.write != null) && typeof this.logStream.write === 'function' && (this.logStream.end != null) && typeof this.logStream.end === 'function')) {\n        throw new Error(\"logStream must be a valid writable node.js Stream\");\n      }\n    };\n\n    JobCollection.prototype.allow = function(allowOptions) {\n      var func, results, type;\n      results = [];\n      for (type in allowOptions) {\n        func = allowOptions[type];\n        if (type in this.allows) {\n          results.push(this.allows[type].push(func));\n        }\n      }\n      return results;\n    };\n\n    JobCollection.prototype.deny = function(denyOptions) {\n      var func, results, type;\n      results = [];\n      for (type in denyOptions) {\n        func = denyOptions[type];\n        if (type in this.denys) {\n          results.push(this.denys[type].push(func));\n        }\n      }\n      return results;\n    };\n\n    JobCollection.prototype.scrub = function(job) {\n      return job;\n    };\n\n    JobCollection.prototype.promote = function(milliseconds) {\n      if (milliseconds == null) {\n        milliseconds = 15 * 1000;\n      }\n      if (typeof milliseconds === 'number' && milliseconds > 0) {\n        if (this.interval) {\n          Meteor.clearInterval(this.interval);\n        }\n        this._promote_jobs();\n        return this.interval = Meteor.setInterval(this._promote_jobs.bind(this), milliseconds);\n      } else {\n        return console.warn(\"jobCollection.promote: invalid timeout: \" + this.root + \", \" + milliseconds);\n      }\n    };\n\n    JobCollection.prototype._promote_jobs = function(ids) {\n      if (ids == null) {\n        ids = [];\n      }\n      if (this.stopped) {\n        return;\n      }\n      this.find({\n        status: 'running',\n        expiresAfter: {\n          $lt: new Date()\n        }\n      }).forEach((function(_this) {\n        return function(job) {\n          return new Job(_this.root, job).fail(\"Failed for exceeding worker set workTimeout\");\n        };\n      })(this));\n      return this.readyJobs();\n    };\n\n    return JobCollection;\n\n  })(share.JobCollectionBase);\n}\n"]}}
[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Template = Package['templating-runtime'].Template;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar _ = Package.underscore._;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar GoogleMaps;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// packages/dburles_google-maps/template.google-maps.js                                        //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\n\nTemplate.__checkName(\"googleMap\");\nTemplate[\"googleMap\"] = new Template(\"Template.googleMap\", (function() {\n  var view = this;\n  return HTML.Raw('<div class=\"map-canvas\" style=\"width: 100%; height: 100%\"></div>');\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// packages/dburles_google-maps/google-maps.js                                                 //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nvar supportedTypes = ['Map', 'StreetViewPanorama'];\n\nGoogleMaps = {\n  load: _.once(function(options) {\n    options = _.extend({ v: '3.exp' }, options);\n    var params = _.map(options, function(value, key) { return key + '=' + value; }).join('&');\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = 'https://maps.googleapis.com/maps/api/js?' + params +\n      '&callback=GoogleMaps.initialize';\n\n    document.body.appendChild(script);\n  }),\n  utilityLibraries: [],\n  loadUtilityLibrary: function(path) {\n    this.utilityLibraries.push(path);\n  },\n  _loaded: new ReactiveVar(false),\n  loaded: function() {\n    return this._loaded.get();\n  },\n  maps: {},\n  _callbacks: {},\n  initialize: function() {\n    this._loaded.set(true);\n    _.each(this.utilityLibraries, function(path) {\n      var script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = path;\n\n      document.body.appendChild(script);\n    });\n  },\n  _ready: function(name, map) {\n    _.each(this._callbacks[name], function(cb) {\n      if (_.isFunction(cb)) {\n        cb(map);\n      }\n    });\n  },\n  ready: function(name, cb) {\n    if (! this._callbacks[name]) {\n      this._callbacks[name] = [];\n    }\n    // make sure we run the callback only once\n    // as the tilesloaded event will also run after initial load\n    this._callbacks[name].push(_.once(cb));\n  },\n  // options: function(options) {\n  //   var self = this;\n  //   return function() {\n  //     if (self.loaded())\n  //       return options();\n  //   };\n  // },\n  get: function(name) {\n    return this.maps[name];\n  },\n  _create: function(name, options) {\n    var self = this;\n    self.maps[name] = {\n      instance: options.instance,\n      options: options.options\n    };\n\n    if (options.type === 'StreetViewPanorama') {\n      options.instance.setVisible(true);\n      self._ready(name, self.maps[name]);\n    } else {\n      google.maps.event.addListener(options.instance, 'tilesloaded', function() {\n        self._ready(name, self.maps[name]);\n      });\n    }\n  },\n  create: function(options) {\n    // default to Map\n    var type = options.type ? options.type : 'Map';\n    if (! _.include(supportedTypes, type)) {\n      throw new Meteor.Error(\"GoogleMaps - Invalid type argument: \" + type);\n    }\n\n    this._create(options.name, {\n      type: type,\n      instance: new google.maps[type](options.element, options.options),\n      options: options.options\n    });\n  }\n};\n\nTemplate.googleMap.onRendered(function() {\n  var self = this;\n  self.autorun(function(c) {\n    // if the api has loaded\n    if (GoogleMaps.loaded()) {\n      var data = Template.currentData();\n\n      if (! data.options) {\n        return;\n      }\n      if (! data.name) {\n        throw new Meteor.Error(\"GoogleMaps - Missing argument: name\");\n      }\n\n      self._name = data.name;\n\n      var canvas = self.$('.map-canvas').get(0);\n\n      GoogleMaps.create({\n        name: data.name,\n        type: data.type,\n        element: canvas,\n        options: data.options\n      });\n\n      c.stop();\n    }\n  });\n});\n\nTemplate.googleMap.onDestroyed(function() {\n  if (GoogleMaps[this._name]) {\n    google.maps.event.clearInstanceListeners(GoogleMaps.maps[this._name].instance);\n    delete GoogleMaps.maps[this._name];\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"dburles:google-maps\", {\n  GoogleMaps: GoogleMaps\n});\n\n})();\n","servePath":"/packages/dburles_google-maps.js"}]
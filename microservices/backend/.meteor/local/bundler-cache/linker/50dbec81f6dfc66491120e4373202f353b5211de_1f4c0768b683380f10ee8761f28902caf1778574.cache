[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRoles = Package['alanning:roles'].Roles;\nCollection2 = Package['aldeed:collection2-core'].Collection2;\nFactory = Package['dburles:factory'].Factory;\nDDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\nInject = Package['meteorhacks:inject-initial'].Inject;\nMandrill = Package['wylio:mandrill'].Mandrill;\nSlingshot = Package['edgee:slingshot'].Slingshot;\nKadira = Package['lmachens:kadira'].Kadira;\nanalytics = Package['okgrow:analytics'].analytics;\nCollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nMigrations = Package['percolate:migrations'].Migrations;\nSyncedCron = Package['littledata:synced-cron'].SyncedCron;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"startup\":{\"server\":{\"fetchIrs10yCron.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// imports/startup/server/fetchIrs10yCron.js                                                   //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet SyncedCron;\nmodule.link(\"meteor/littledata:synced-cron\", {\n  SyncedCron(v) {\n    SyncedCron = v;\n  }\n\n}, 1);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 2);\nlet logError;\nmodule.link(\"../../core/api/methods\", {\n  logError(v) {\n    logError = v;\n  }\n\n}, 3);\nlet irs10yFetch;\nmodule.link(\"../../core/api/irs10y/server/methods\", {\n  irs10yFetch(v) {\n    irs10yFetch = v;\n  }\n\n}, 4);\nlet CronitorService;\nmodule.link(\"../../core/api/cronitor/server/CronitorService\", {\n  default(v) {\n    CronitorService = v;\n  }\n\n}, 5);\nlet SlackService;\nmodule.link(\"../../core/api/slack/server/SlackService\", {\n  default(v) {\n    SlackService = v;\n  }\n\n}, 6);\n\nconst getRandomMinute = () => Math.floor(Math.random() * 49) + 10;\n\nconst jobName = 'Fetch IRS 10Y';\nconst cronitor = new CronitorService({\n  id: '19MCrQ'\n}); // Make this a function so that randomMinute is always different\n\nconst job = () => ({\n  name: jobName,\n\n  schedule(parser) {\n    const randomMinute = getRandomMinute();\n    const tomorrow = moment().add(1, 'days').format('dddd');\n    const parserText = `at 6:${randomMinute} on ${tomorrow}`;\n    const parsedText = parser.text(parserText);\n    return parsedText;\n  },\n\n  job() {\n    try {\n      cronitor.run().then(() => irs10yFetch.run({})).then(cronitor.complete).then(() => {\n        SyncedCron.remove(jobName);\n        SyncedCron.add(job());\n      }).catch(error => {\n        if (error.message && error.message.includes('existe déjà')) {\n          return cronitor.complete(error.message);\n        }\n\n        return cronitor.fail(error);\n      });\n    } catch (error) {\n      SlackService.sendError({\n        error,\n        additionalData: ['IRS 10Y CRON error']\n      });\n    }\n  }\n\n});\n\nSyncedCron.config({\n  logger: ({\n    level,\n    message,\n    tag\n  }) => {\n    if (Meteor.isProduction) {\n      console.log('---------------------- CRON LOG ----------------------');\n      console.log('Level', level);\n      console.log('Message', message);\n      console.log('Tag', tag);\n    }\n  }\n});\nSyncedCron.add(job());\nMeteor.startup(() => {\n  try {\n    SyncedCron.start();\n  } catch (error) {\n    logError.run({\n      error\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// imports/startup/server/index.js                                                             //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nmodule.link(\"./startup\");\nmodule.link(\"../../core/api/server\");\nmodule.link(\"../../core/api/api\");\nmodule.link(\"../../core/fixtures\");\nmodule.link(\"../../core/startup/server/kadira\");\nmodule.link(\"../../core/startup/accounts-config\");\nmodule.link(\"./restAPI\");\nmodule.link(\"../../core/api/loans/server/expireLoansCron\");\nmodule.link(\"../../core/api/notifications/server/notificationGeneratorCron\");\nmodule.link(\"../../core/api/updateWatchers/server/updateWatcherCron\");\nmodule.link(\"./fetchIrs10yCron\");\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"restAPI.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// imports/startup/server/restAPI.js                                                           //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet RESTAPI;\nmodule.link(\"../../core/api/RESTAPI/server/RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 1);\nlet getPropertyLoansAPI, getUserAPI, interestRatesAPI, inviteUserToPromotionAPI, inviteCustomerToProPropertiesAPI, mortgageEstimateAPI, referCustomerAPI, testEndpointAPI, updatePropertyAPI, insertPropertyAPI, uploadFileAPI, deleteFileAPI, getPropertyAPI;\nmodule.link(\"../../core/api/RESTAPI/server/endpoints\", {\n  getPropertyLoansAPI(v) {\n    getPropertyLoansAPI = v;\n  },\n\n  getUserAPI(v) {\n    getUserAPI = v;\n  },\n\n  interestRatesAPI(v) {\n    interestRatesAPI = v;\n  },\n\n  inviteUserToPromotionAPI(v) {\n    inviteUserToPromotionAPI = v;\n  },\n\n  inviteCustomerToProPropertiesAPI(v) {\n    inviteCustomerToProPropertiesAPI = v;\n  },\n\n  mortgageEstimateAPI(v) {\n    mortgageEstimateAPI = v;\n  },\n\n  referCustomerAPI(v) {\n    referCustomerAPI = v;\n  },\n\n  testEndpointAPI(v) {\n    testEndpointAPI = v;\n  },\n\n  updatePropertyAPI(v) {\n    updatePropertyAPI = v;\n  },\n\n  insertPropertyAPI(v) {\n    insertPropertyAPI = v;\n  },\n\n  uploadFileAPI(v) {\n    uploadFileAPI = v;\n  },\n\n  deleteFileAPI(v) {\n    deleteFileAPI = v;\n  },\n\n  getPropertyAPI(v) {\n    getPropertyAPI = v;\n  }\n\n}, 2);\nlet makeFileUploadDir, flushFileUploadDir;\nmodule.link(\"../../core/utils/filesUtils\", {\n  makeFileUploadDir(v) {\n    makeFileUploadDir = v;\n  },\n\n  flushFileUploadDir(v) {\n    flushFileUploadDir = v;\n  }\n\n}, 3);\nconst api = new RESTAPI();\napi.addEndpoint('/promotions/:promotionId/invite-customer', 'POST', inviteUserToPromotionAPI);\napi.addEndpoint('/properties/invite-customer', 'POST', inviteCustomerToProPropertiesAPI);\napi.addEndpoint('/properties/:propertyId/loans', 'GET', getPropertyLoansAPI);\napi.addEndpoint('/properties/:propertyId', 'POST', updatePropertyAPI);\napi.addEndpoint('/users', 'POST', referCustomerAPI);\napi.addEndpoint('/users', 'GET', getUserAPI);\napi.addEndpoint('/test', 'POST', testEndpointAPI);\napi.addEndpoint('/test', 'GET', testEndpointAPI);\napi.addEndpoint('/test', 'PUT', testEndpointAPI);\napi.addEndpoint('/test', 'DELETE', testEndpointAPI);\napi.addEndpoint('/test/:id', 'POST', testEndpointAPI);\napi.addEndpoint('/test/:id', 'GET', testEndpointAPI);\napi.addEndpoint('/test/:id', 'PUT', testEndpointAPI);\napi.addEndpoint('/test/:id', 'DELETE', testEndpointAPI);\napi.addEndpoint('/interest-rates/latest', 'GET', interestRatesAPI);\napi.addEndpoint('/calculator/mortgage-estimate', 'GET', mortgageEstimateAPI);\napi.addEndpoint('/properties', 'POST', insertPropertyAPI);\napi.addEndpoint('/upload', 'POST', uploadFileAPI, {\n  multipart: true\n});\napi.addEndpoint('/deleteFile', 'POST', deleteFileAPI);\napi.addEndpoint('/properties/:propertyId', 'GET', getPropertyAPI);\nMeteor.startup(() => {\n  makeFileUploadDir();\n  flushFileUploadDir();\n  api.start();\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"startup.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// imports/startup/server/startup.js                                                           //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.microservice = 'backend';\n\nif (Meteor.isAppTest) {\n  Meteor.isTest = true;\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"server\":{\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// server/main.js                                                                              //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nmodule.link(\"../imports/startup/server\");\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","hash":"0e0f8058c70be6dc7750c03174784a11f4a7618d","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/startup/server/fetchIrs10yCron.js","imports/startup/server/index.js","imports/startup/server/restAPI.js","imports/startup/server/startup.js","server/main.js"],"names":["getRandomMinute","Math","jobName","cronitor","id","job","name","schedule","randomMinute","tomorrow","moment","parserText","parsedText","parser","irs10yFetch","SyncedCron","error","SlackService","additionalData","logger","tag","Meteor","console","logError","api","multipart","makeFileUploadDir","flushFileUploadDir"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { SyncedCron } from 'meteor/littledata:synced-cron';\n\nimport moment from 'moment';\n\nimport { logError } from 'core/api/methods';\nimport { irs10yFetch } from 'core/api/irs10y/server/methods';\nimport CronitorService from 'core/api/cronitor/server/CronitorService';\nimport SlackService from 'core/api/slack/server/SlackService';\n\nconst getRandomMinute = () => Math.floor(Math.random() * 49) + 10;\nconst jobName = 'Fetch IRS 10Y';\n\nconst cronitor = new CronitorService({ id: '19MCrQ' });\n\n// Make this a function so that randomMinute is always different\nconst job = () => ({\n  name: jobName,\n  schedule(parser) {\n    const randomMinute = getRandomMinute();\n    const tomorrow = moment()\n      .add(1, 'days')\n      .format('dddd');\n    const parserText = `at 6:${randomMinute} on ${tomorrow}`;\n    const parsedText = parser.text(parserText);\n\n    return parsedText;\n  },\n  job() {\n    try {\n      cronitor\n        .run()\n        .then(() => irs10yFetch.run({}))\n        .then(cronitor.complete)\n        .then(() => {\n          SyncedCron.remove(jobName);\n          SyncedCron.add(job());\n        })\n        .catch((error) => {\n          if (error.message && error.message.includes('existe déjà')) {\n            return cronitor.complete(error.message);\n          }\n          return cronitor.fail(error);\n        });\n    } catch (error) {\n      SlackService.sendError({\n        error,\n        additionalData: ['IRS 10Y CRON error'],\n      });\n    }\n  },\n});\n\nSyncedCron.config({\n  logger: ({ level, message, tag }) => {\n    if (Meteor.isProduction) {\n      console.log('---------------------- CRON LOG ----------------------');\n      console.log('Level', level);\n      console.log('Message', message);\n      console.log('Tag', tag);\n    }\n  },\n});\n\nSyncedCron.add(job());\n\nMeteor.startup(() => {\n  try {\n    SyncedCron.start();\n  } catch (error) {\n    logError.run({ error });\n  }\n});\n","import './startup';\nimport 'core/api/server';\nimport 'core/api/api';\nimport 'core/fixtures';\nimport 'core/startup/server/kadira';\nimport 'core/startup/accounts-config';\nimport './restAPI';\n\n// CRONs\nimport 'core/api/loans/server/expireLoansCron';\nimport 'core/api/notifications/server/notificationGeneratorCron';\nimport 'core/api/updateWatchers/server/updateWatcherCron';\nimport './fetchIrs10yCron';\n","import { Meteor } from 'meteor/meteor';\n\nimport RESTAPI from 'core/api/RESTAPI/server/RESTAPI';\nimport {\n  getPropertyLoansAPI,\n  getUserAPI,\n  interestRatesAPI,\n  inviteUserToPromotionAPI,\n  inviteCustomerToProPropertiesAPI,\n  mortgageEstimateAPI,\n  referCustomerAPI,\n  testEndpointAPI,\n  updatePropertyAPI,\n  insertPropertyAPI,\n  uploadFileAPI,\n  deleteFileAPI,\n  getPropertyAPI,\n} from 'core/api/RESTAPI/server/endpoints/';\nimport { makeFileUploadDir, flushFileUploadDir } from 'core/utils/filesUtils';\n\nconst api = new RESTAPI();\napi.addEndpoint(\n  '/promotions/:promotionId/invite-customer',\n  'POST',\n  inviteUserToPromotionAPI,\n);\napi.addEndpoint(\n  '/properties/invite-customer',\n  'POST',\n  inviteCustomerToProPropertiesAPI,\n);\napi.addEndpoint('/properties/:propertyId/loans', 'GET', getPropertyLoansAPI);\napi.addEndpoint('/properties/:propertyId', 'POST', updatePropertyAPI);\napi.addEndpoint('/users', 'POST', referCustomerAPI);\napi.addEndpoint('/users', 'GET', getUserAPI);\napi.addEndpoint('/test', 'POST', testEndpointAPI);\napi.addEndpoint('/test', 'GET', testEndpointAPI);\napi.addEndpoint('/test', 'PUT', testEndpointAPI);\napi.addEndpoint('/test', 'DELETE', testEndpointAPI);\napi.addEndpoint('/test/:id', 'POST', testEndpointAPI);\napi.addEndpoint('/test/:id', 'GET', testEndpointAPI);\napi.addEndpoint('/test/:id', 'PUT', testEndpointAPI);\napi.addEndpoint('/test/:id', 'DELETE', testEndpointAPI);\napi.addEndpoint('/interest-rates/latest', 'GET', interestRatesAPI);\napi.addEndpoint('/calculator/mortgage-estimate', 'GET', mortgageEstimateAPI);\napi.addEndpoint('/properties', 'POST', insertPropertyAPI);\napi.addEndpoint('/upload', 'POST', uploadFileAPI, { multipart: true });\napi.addEndpoint('/deleteFile', 'POST', deleteFileAPI);\napi.addEndpoint('/properties/:propertyId', 'GET', getPropertyAPI);\n\nMeteor.startup(() => {\n  makeFileUploadDir();\n  flushFileUploadDir();\n  api.start();\n});\n","import { Meteor } from 'meteor/meteor';\n\nMeteor.microservice = 'backend';\n\nif (Meteor.isAppTest) {\n  Meteor.isTest = true;\n}\n","import '/imports/startup/server';\n"]}}]
[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Boot, showCoverage, getAsset, addClientCoverage, exportFile, type, importCoverage, Handlers, Log, ReportCommon, options, setCoverageObject, Core, CoverageData;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"lmieulet:meteor-coverage\":{\"server\":{\"index.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/index.js                                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Conf;\nmodule.link(\"./context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet library; // If the coverage is active, it will import the probe inside this package\n// Every script imported using vm.runInThisContext will be hooked by istanbul\n// to provide on the fly the instrumented version of each script - in order to generate coverage stats\n// You need an external actor like spacejam to run different types of actions automaticaly :\n//   - merge several types of coverage\n//   - export reports\n\nif (Conf.IS_COVERAGE_ACTIVE) {\n  const Lib = require('./main'); // Provide the real library\n\n\n  library = Lib.default;\n} else {\n  // Mock the library\n  library = {\n    Conf,\n    Router: {},\n    CoverageData: {},\n    ReportService: {}\n  };\n}\n\nmodule.exportDefault(library);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"boot.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/boot.js                                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 0);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 1);\nlet mkdirp;\nmodule.link(\"mkdirp\", {\n  default(v) {\n    mkdirp = v;\n  }\n\n}, 2);\nlet Conf;\nmodule.link(\"./context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 3);\nlet Router;\nmodule.link(\"./router\", {\n  default(v) {\n    Router = v;\n  }\n\n}, 4);\nmodule.exportDefault(Boot = {\n  startup() {\n    // Create reports output folder if not exists\n    let outputFolder = path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER);\n    fs.access(outputFolder, fs.F_OK | fs.R_OK | fs.W_OK, err => {\n      /* istanbul ignore else */\n      if (err) {\n        try {\n          mkdirp(outputFolder);\n        } catch (e) {\n          console.error(`meteor-coverage failed to create the folder ${outputFolder} while booting:`, e);\n          Log.error(e.stack);\n        }\n      }\n    }); // Connect the router to this app\n\n    new Router();\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"handlers.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/handlers.js                                                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Conf;\nmodule.link(\"./context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet Core;\nmodule.link(\"./services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 1);\nlet ReportService;\nmodule.link(\"./report/report-service\", {\n  default(v) {\n    ReportService = v;\n  }\n\n}, 2);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 3);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 4);\n\nshowCoverage = function (params, req, res, next) {\n  let options = {\n    'filepath': params.query.p\n  };\n  let reportService = new ReportService();\n  reportService.generateReport(res, 'http', options);\n};\n\ngetAsset = function (params, req, res, next) {\n  var assetsDir = path.join(path.resolve('.'), 'assets/packages/lmieulet_meteor-coverage/assets/'),\n      filename = params.filename;\n  fs.exists(path.join(assetsDir, filename), function (exists) {\n    if (!exists) {\n      fs.exists(path.join(assetsDir, '/vendor/', filename), function (exists) {\n        /* istanbul ignore else */\n        if (!exists) return next();\n        fs.readFile(assetsDir + '/vendor/' + filename, function (err, fileContent) {\n          /* istanbul ignore else */\n          if (err) {\n            console.error(err);\n            return next();\n          }\n\n          res.end(fileContent);\n        });\n      });\n    } else {\n      fs.readFile(assetsDir + '/' + filename, function (err, fileContent) {\n        /* istanbul ignore else */\n        if (err) {\n          console.error(err);\n          return next();\n        }\n\n        res.end(fileContent);\n      });\n    }\n  });\n};\n\naddClientCoverage = function (params, req, res, next) {\n  var body = req.body;\n  /* istanbul ignore else */\n\n  if (!body) {\n    res.writeHead(400);\n    res.end();\n  }\n\n  var clientCoverage;\n\n  for (var property in body) {\n    /* istanbul ignore else */\n    if (body.hasOwnProperty(property)) {\n      clientCoverage = body[property];\n    }\n  }\n\n  if (clientCoverage) {\n    Core.mergeCoverageWith(clientCoverage);\n    res.end('{\"type\":\"success\"}');\n  } else {\n    res.writeHead(400);\n    res.end('Nothing has been imported');\n  }\n};\n\nexportFile = function (params, req, res, next) {\n  var _type = params.type;\n  /* istanbul ignore next: ternary operator */\n\n  type = Conf.reportTypes.allowed.indexOf(_type) > -1 ? _type : 'coverage';\n\n  try {\n    let reportService = new ReportService();\n    reportService.generateReport(res, type, {});\n  } catch (e) {\n    Log.error('Failed to export', e, e.stack);\n    res.writeHead(400);\n    res.end('Nothing has been export');\n  }\n};\n\nimportCoverage = function (params, req, res, next) {\n  try {\n    Core.importCoverage(res);\n  } catch (e) {\n    Log.error('Failed to import', e, e.stack);\n    res.writeHead(400);\n    res.end('No file has been import');\n  }\n};\n\nmodule.exportDefault(Handlers = {\n  showCoverage,\n  getAsset,\n  addClientCoverage,\n  exportFile,\n  importCoverage\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/main.js                                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet CoverageData;\nmodule.link(\"./services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 0);\nlet Conf;\nmodule.link(\"./context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 1);\nlet Router;\nmodule.link(\"./router\", {\n  default(v) {\n    Router = v;\n  }\n\n}, 2);\nlet ReportService;\nmodule.link(\"./report/report-service\", {\n  default(v) {\n    ReportService = v;\n  }\n\n}, 3);\nlet Boot;\nmodule.link(\"./boot.js\", {\n  default(v) {\n    Boot = v;\n  }\n\n}, 4);\nBoot.startup();\nmodule.exportDefault({\n  Conf,\n  Router,\n  CoverageData,\n  ReportService\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"router.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/router.js                                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Handlers;\nmodule.link(\"./handlers\", {\n  default(v) {\n    Handlers = v;\n  }\n\n}, 0);\nlet Conf;\nmodule.link(\"./context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 1);\nlet bodyParser;\nmodule.link(\"body-parser\", {\n  default(v) {\n    bodyParser = v;\n  }\n\n}, 2);\nlet url;\nmodule.link(\"url\", {\n  default(v) {\n    url = v;\n  }\n\n}, 3);\n\nconst handleRequest = method => (path, cb) => {\n  WebApp.rawConnectHandlers.use(path, (req, res, next) => {\n    if (req.method !== method) {\n      next();\n      return;\n    }\n\n    const queryString = url.parse(req.url).query || '';\n    const queryParams = {\n      query: {}\n    };\n    queryString.split('&').forEach(pair => {\n      queryParams.query[pair.split('=')[0]] = pair.split('=')[1];\n    });\n    Promise.resolve().then(() => new Promise(resolve => {\n      bodyParser.urlencoded({\n        extended: false\n      })(req, res, resolve);\n    })).then(() => new Promise(resolve => {\n      bodyParser.json({\n        limit: '30mb'\n      }).call(null, req, res, resolve);\n    })).then(() => cb(queryParams, req, res, next)).catch(e => {\n      console.log('Exception undandled:');\n      console.log(e.stack);\n      next();\n    });\n  });\n};\n\nmodule.exportDefault(class {\n  constructor() {\n    if (Conf.IS_COVERAGE_ACTIVE) {\n      this.bindRoutes();\n    }\n  }\n\n  bindRoutes() {\n    // Show static assets\n    handleRequest('GET')('/coverage/asset', (params, req, res, next) => {\n      params.filename = url.parse(req.url).path.match(/(\\/([^\\/]+))?/)[2];\n      Handlers.getAsset(params, req, res, next);\n    }); // export coverage to file\n\n    handleRequest('GET')('/coverage/export', (params, req, res, next) => {\n      params.type = url.parse(req.url).path.match(/(\\/([^\\/]+))?/)[2];\n      Handlers.exportFile(params, req, res, next);\n    });\n    handleRequest('GET')('/coverage/import', Handlers.importCoverage); // merge client coverage posted from browser\n\n    handleRequest('POST')('/coverage/client', Handlers.addClientCoverage);\n    handleRequest('GET')('/coverage', Handlers.showCoverage);\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"context\":{\"conf.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/context/conf.js                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.export({\n  IS_COVERAGE_ACTIVE: () => IS_COVERAGE_ACTIVE,\n  IS_COVERAGE_VERBOSE: () => IS_COVERAGE_VERBOSE,\n  COVERAGE_APP_FOLDER: () => COVERAGE_APP_FOLDER,\n  COVERAGE_EXPORT_FOLDER: () => COVERAGE_EXPORT_FOLDER,\n  remapFormat: () => remapFormat,\n  reportTypes: () => reportTypes\n});\nlet Log;\nmodule.link(\"./log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 0);\nconst meteor_parameters = {\n  // /:\\ ES 6\n  // return the value OR UNDEFINED\n  // THIS IS NOT A BOOLEAN\n  IS_COVERAGE_ACTIVE: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.is_coverage_active,\n  COVERAGE_APP_FOLDER: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.coverage_app_folder\n};\nconst IS_COVERAGE_ACTIVE = meteor_parameters.IS_COVERAGE_ACTIVE || process.env['COVERAGE'] === '1';\nconst IS_COVERAGE_VERBOSE = Log.COVERAGE_VERBOSE;\nconst ENV_NOT_DEFINED = '/SET/ENV/COVERAGE_APP_FOLDER/OR/READ/README/';\nconst COVERAGE_APP_FOLDER = meteor_parameters.COVERAGE_APP_FOLDER || process.env['COVERAGE_APP_FOLDER'] || ENV_NOT_DEFINED;\n\n/* istanbul ignore else */\nif (COVERAGE_APP_FOLDER === ENV_NOT_DEFINED) {\n  Log.info('Error: COVERAGE_APP_FOLDER is undefined and the coverage will fail.');\n}\n\nconst NOT_DEFINED = '/COVERAGE/NOT/ACTIVE/';\nlet configuration = {\n  output: NOT_DEFINED\n};\n/* istanbul ignore else */\n\nif (IS_COVERAGE_ACTIVE) {\n  const fs = Npm.require('fs'),\n        path = Npm.require('path');\n\n  Log.info('Coverage active');\n  let coverageFile = path.join(COVERAGE_APP_FOLDER, '.coverage.json'),\n      defaultConfig = JSON.parse(Assets.getText('conf/default-coverage.json'));\n\n  try {\n    fs.accessSync(coverageFile);\n    Log.info('Reading custom configuration');\n    const configurationString = fs.readFileSync(coverageFile);\n    configuration = JSON.parse(configurationString);\n    Log.info('[Configuration] ', configuration);\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      let errMsg = `Error: ${coverageFile} is not a valid JSON`;\n      console.error(errMsg, e);\n      Log.error(e.stack);\n    } // Set up defaultConfig value if they are not provided in the .coverage.json file\n\n\n    Log.info('Loading default configuration, missing configuration file ', coverageFile);\n    configuration = defaultConfig;\n  } // Don't force to rewrite all the key of configuration.\n\n  /* istanbul ignore else */\n\n\n  if (configuration.output === undefined) {\n    Log.info('Loading default configuration: output');\n    configuration.output = defaultConfig.output;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.remapFormat === undefined) {\n    Log.info('Loading default configuration: remapFormat');\n    configuration.remapFormat = defaultConfig.remapFormat;\n  }\n}\n\nconst COVERAGE_EXPORT_FOLDER = configuration.output;\nconst remapFormat = configuration.remapFormat;\nconst reportTypes = {\n  allowed: ['clover', 'cobertura', 'coverage', 'html', 'json', 'json-summary', 'lcov', 'lcovonly', 'remap', 'teamcity', 'text', 'text-lcov', 'text-summary'],\n  pending: ['clover', 'cobertura', 'lcov', 'teamcity', 'text', 'text-lcov']\n};\nLog.info('Coverage configuration:');\nLog.info('- IS_COVERAGE_ACTIVE=', IS_COVERAGE_ACTIVE);\nLog.info('- IS_COVERAGE_VERBOSE=', IS_COVERAGE_VERBOSE);\nLog.info('- COVERAGE_APP_FOLDER=', COVERAGE_APP_FOLDER);\nLog.info('.coverage.json values:');\nLog.info('- remapFormat=', configuration.remapFormat);\nLog.info('- COVERAGE_EXPORT_FOLDER=', COVERAGE_EXPORT_FOLDER);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"log.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/context/log.js                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nconst meteor_parameters = {\n  // /:\\ ES 6\n  // return the value OR UNDEFINED\n  // THIS IS NOT A BOOLEAN\n  VERBOSE: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.verbose\n};\nmodule.exportDefault(Log = {\n  COVERAGE_VERBOSE: meteor_parameters.VERBOSE || process.env['COVERAGE_VERBOSE'] === '1' || false,\n  error: function () {\n    console.error(...arguments);\n  },\n  info: function () {\n    /* istanbul ignore else */\n    if (this.COVERAGE_VERBOSE) {\n      console.log(...arguments);\n    }\n  },\n  time: function () {\n    /* istanbul ignore else */\n    if (this.COVERAGE_VERBOSE) {\n      console.log(...arguments);\n    }\n  },\n  timeEnd: function () {\n    /* istanbul ignore else */\n    if (this.COVERAGE_VERBOSE) {\n      console.log(...arguments);\n    }\n  }\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"report\":{\"report-common.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/report/report-common.js                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 0);\nlet mkdirp;\nmodule.link(\"mkdirp\", {\n  default(v) {\n    mkdirp = v;\n  }\n\n}, 1);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 2);\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 3);\n\nconst Report = Npm.require('istanbul-lib-report');\n\nmodule.exportDefault(ReportCommon = {\n  /**\n     * Alter fs to add a new method writer\n     * Used by the istanbul-reports library\n     * @param filepath\n     * @returns {*|Context}\n     */\n  getContext(filepath) {\n    let context = Report.createContext();\n    const dirpath = path.dirname(filepath);\n    this.checkDirectory(dirpath);\n    this.checkFile(filepath);\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writeFile: function (path) {\n          return {\n            write: function (data) {\n              fs.appendFileSync(path, data);\n            },\n            println: function (data) {\n              fs.appendFileSync(path, data + '\\r\\n');\n            },\n            close: function () {},\n            colorize: function (string) {\n              return string;\n            }\n          };\n        }\n      }\n    });\n    return context;\n  },\n\n  checkDirectory(dirpath) {\n    let succeed = true; // Create folder\n\n    try {\n      const stat = fs.statSync(dirpath);\n    } catch (e) {\n      succeed = false;\n      Log.info('Creating a new folder', dirpath);\n\n      try {\n        mkdirp.sync(dirpath);\n      } catch (e) {\n        console.error('Something went wrong while creating folder', e, e.stack);\n      }\n    }\n\n    return succeed;\n  },\n\n  checkFile(filepath) {\n    let succeed = true; // Reset file\n\n    try {\n      Log.info('Try to remove the content & create the file', filepath);\n      fs.writeFileSync(filepath, '');\n    } catch (e) {\n      succeed = false;\n      console.error('Something went wrong while creating the file', filepath, e, e.stack);\n    }\n\n    return succeed;\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-coverage.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/report/report-coverage.js                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 0);\nmodule.exportDefault(class {\n  constructor(res, options) {\n    this.res = res;\n    this.options = options;\n    this.options.filename = this.options.path;\n  }\n\n  generate() {\n    let coverage = Core.getCoverageObject();\n    var coverageReport = JSON.stringify(coverage),\n        reportPath = this.options.path;\n    let instance = this;\n    fs.writeFile(reportPath, coverageReport, function (err) {\n      /* istanbul ignore else */\n      if (err) {\n        instance.res.end(JSON.stringify({\n          type: 'failed',\n          message: 'failed to write report file: ' + reportPath\n        }));\n      } else {\n        instance.res.end('{\"type\":\"success\"}');\n      }\n    });\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-generic.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/report/report-generic.js                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet CoverageData;\nmodule.link(\"./../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 0);\nlet Core;\nmodule.link(\"./../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 1);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 2);\nlet Conf;\nmodule.link(\"../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 3);\n\nconst ReportImpl = Npm.require('istanbul-reports');\n/**\n * Used by type lcovonly and json\n * create the corresponding file using istanbul api\n * @type {any}\n */\n\n\nmodule.exportDefault(class {\n  constructor(res, type, options) {\n    this.res = res;\n    this.options = options;\n    this.report = ReportImpl.create(type, this.options);\n    this.report.file = this.options.path;\n    this.context = ReportCommon.getContext(this.report.file);\n  }\n\n  generate() {\n    const coverage = Core.getCoverageObject();\n    let childs = CoverageData.getLcovonlyReport(coverage);\n    this.report.onStart(null, this.context);\n    /* istanbul ignore else */\n\n    if (childs.length === 0) {\n      this.res.setHeader('Content-type', 'text/plain');\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"No coverage to export\"}');\n    }\n\n    this.writeFile(childs);\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  writeFile(childs) {\n    for (let i = 0; i < childs.length; i++) {\n      // Remove the COVERAGE_APP_FOLDER from the filepath\n      childs[i].fileCoverage.data.path = childs[i].fileCoverage.data.path.replace(Conf.COVERAGE_APP_FOLDER, '');\n      this.report.onDetail(childs[i]);\n    }\n\n    this.report.onEnd();\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-html.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/report/report-html.js                                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet CoverageData;\nmodule.link(\"../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 0);\nlet Core;\nmodule.link(\"../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 1);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 2);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 3);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 4);\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 5);\n\nconst Report = Npm.require('istanbul-lib-report'),\n      ReportImpl = Npm.require('istanbul-reports');\n\nmodule.exportDefault(class {\n  constructor(res, options) {\n    this.res = res;\n    this.options = options;\n    this.prefix = options.prefix;\n    this.options.subdir = this.options.path;\n    this.opts = this.generateOpts();\n    this.report = ReportImpl.create('html', this.opts);\n  }\n\n  generateOpts() {\n    const outputPath = this.options.path;\n    return {\n      verbose: this.options.verbose,\n      linkMapper: {\n        getPath: function (node) {\n          /* istanbul ignore else */\n          if (typeof node === 'string') {\n            return node;\n          }\n\n          var filePath = node.getQualifiedName();\n\n          if (node.isSummary()) {\n            filePath = path.join(outputPath, 'index.html');\n          } else {\n            filePath = path.join(outputPath, filePath + '.html');\n          }\n\n          return filePath;\n        },\n        relativePath: function (source, target) {\n          return this.getPath(target);\n        },\n        assetPath: function (node, name) {\n          return path.join(outputPath, name);\n        }\n      }\n    };\n  }\n\n  generate() {\n    const folderPath = this.options.path;\n    this.copyStatic();\n    var coverage = Core.getCoverageObject();\n    /* istanbul ignore else */\n\n    if (!(coverage && Object.keys(coverage).length > 0)) {\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"failed\", \"message\": \"No coverage information have been collected\"}');\n    }\n\n    var root = CoverageData.getTreeReport(coverage);\n    let filepath = path.join(folderPath, 'index.html');\n    this.report.onSummary(root, ReportCommon.getContext(filepath));\n    const childrens = root.getChildren();\n    const report = this.report; // Todo : use future\n\n    childrens.forEach(function (child) {\n      var filepath = path.join(folderPath, child.getRelativeName() + '.html');\n      Log.info('Creating a new html report', filepath);\n      let fileReport = CoverageData.getFileReport(coverage, child.getRelativeName());\n      report.onDetail(fileReport, ReportCommon.getContext(filepath));\n    });\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  copyStatic() {\n    ReportCommon.checkDirectory(this.options.path);\n    this.report.onStart(null, this.getFolderContext(this.options.path));\n  }\n\n  getFolderContext(folderpath) {\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        copyFile: function (sourcePath, destPath) {\n          // fix no asset while using test runner\n          // do not use async - nothing is awaiting us\n          const data = fs.readFileSync(sourcePath);\n          let p = path.join(folderpath, destPath);\n          fs.writeFileSync(p, data);\n        }\n      }\n    });\n    return context;\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-http.js\":function(require,exports,module,__filename,__dirname){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/report/report-http.js                                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet CoverageData;\nmodule.link(\"../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 0);\nlet Conf;\nmodule.link(\"../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 1);\nlet Core;\nmodule.link(\"../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 2);\n\n// If we change Npm.require('istanbul-reports') into import a from 'istanbul-reports'\n// the __dirname change and the  istanbul dependency fails\n// See istanbul-reports\n// With Npm.require : /Users/Leo/Webstorm/meteor-container/packages/meteor-coverage/.npm/package/node_modules/istanbul-reports/lib/json\nconst Report = Npm.require('istanbul-lib-report'),\n      ReportImpl = Npm.require('istanbul-reports');\n\nmodule.exportDefault(class {\n  constructor(res, options) {\n    this.res = res;\n    this.filepath = '';\n    this.options = options;\n    this.options.prefix = '/coverage/';\n    this.opts = this.createOpts();\n  }\n\n  createOpts() {\n    const prefix = this.options.prefix;\n    return {\n      verbose: Conf.IS_COVERAGE_VERBOSE,\n      linkMapper: {\n        getPath: function (node) {\n          /* istanbul ignore else */\n          if (typeof node === 'string') {\n            return node;\n          }\n\n          return node.getQualifiedName();\n        },\n        relativePath: function (source, target) {\n          return prefix + 'show?p=' + this.getPath(target);\n        },\n        assetPath: function (node, name) {\n          return prefix + 'asset/' + name;\n        }\n      }\n    };\n  }\n\n  generate() {\n    var coverage = Core.getCoverageObject();\n    /* istanbul ignore else */\n\n    if (!(coverage && Object.keys(coverage).length > 0)) {\n      this.res.setHeader('Content-type', 'text/plain');\n      return this.res.end('No coverage information has been collected');\n    }\n\n    this.res.setHeader('Content-type', 'text/html');\n    this.alterFS(this.res);\n    var context = this.getContext(this.res);\n    var report = ReportImpl.create('html', this.opts);\n\n    if (this.options.filepath) {\n      var child = CoverageData.getFileReport(coverage, this.options.filepath);\n      report.onDetail(child, context);\n    } else {\n      var root = CoverageData.getTreeReport(coverage);\n      report.onSummary(root, context);\n    }\n  }\n\n  getContext(res) {\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writerForDir: {\n          writeFile: function () {\n            return res;\n          }\n        },\n        writeFile: function () {\n          return res;\n        }\n      }\n    });\n    return context;\n  } // istanbul-reports expect to save HTML report to the file system and not over network\n\n\n  alterFS(res) {\n    res.close = function () {\n      this.end();\n    };\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-json-summary.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/report/report-json-summary.js                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet CoverageData;\nmodule.link(\"./../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 1);\nlet Core;\nmodule.link(\"./../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 2);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 3);\n\nconst ReportImpl = Npm.require('istanbul-reports');\n\nmodule.exportDefault(class {\n  constructor(res, type, options) {\n    this.res = res;\n    this.options = options;\n    /* istanbul ignore next: ternary operator */\n\n    this.options.verbose = Conf.IS_COVERAGE_VERBOSE ? true : false;\n    this.report = ReportImpl.create(type, this.options);\n    this.report.file = this.options.path;\n    this.context = ReportCommon.getContext(this.report.file);\n  }\n\n  generate() {\n    const coverage = Core.getCoverageObject();\n    let childs = CoverageData.getLcovonlyReport(coverage);\n    this.report.onStart(null, this.context);\n    /* istanbul ignore else */\n\n    if (childs.length === 0) {\n      this.res.setHeader('Content-type', 'text/plain');\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"No coverage to export\"}');\n    }\n\n    this.writeFile(childs);\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  writeFile(childs) {\n    for (let i = 0; i < childs.length; i++) {\n      // Remove the COVERAGE_APP_FOLDER from the filepath\n      childs[i].fileCoverage.data.path = childs[i].fileCoverage.data.path.replace(Conf.COVERAGE_APP_FOLDER, '');\n      this.report.onDetail(childs[i]);\n    } ///Todo: not working\n    //this.report.onSummary(childs);\n\n\n    this.report.onEnd();\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-remap.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/report/report-remap.js                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 1);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 2);\nlet IstanbulGenericReporter;\nmodule.link(\"./report-generic\", {\n  default(v) {\n    IstanbulGenericReporter = v;\n  }\n\n}, 3);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 4);\n\nconst remapIstanbul = Npm.require('remap-istanbul');\n\nconst MemoryStore = Npm.require('istanbul/lib/store/memory');\n\nmodule.exportDefault(class {\n  constructor(res, type, options) {\n    this.res = res; // Common options\n\n    this.options = options; // JSON report options\n\n    this.pathJSON = path.join(this.options.path, 'summary.json'); // remap-istanbul options\n\n    this.remapFolder = path.join(Conf.COVERAGE_EXPORT_FOLDER, '.remap');\n    this.remapPath = path.join(Conf.COVERAGE_APP_FOLDER, this.remapFolder);\n  }\n\n  generateJSONReport() {\n    const jsonOptions = Object.assign({}, this.options, {\n      path: this.pathJSON\n    });\n    let jsonReport = new IstanbulGenericReporter(this.res, 'json', jsonOptions);\n    jsonReport.generate();\n  }\n\n  getFilePath(filename) {\n    return path.join(this.remapFolder, filename);\n  }\n\n  generate() {\n    // We cannot rely on a previous coverage analysis JSON report,\n    // so we force its generation here before remapping\n    this.generateJSONReport();\n    const cwd = process.cwd();\n    process.chdir(Conf.COVERAGE_APP_FOLDER); // Create output directory if not exists\n\n    ReportCommon.checkDirectory(this.remapPath);\n    let reports = {},\n        allReports = {\n      'html': this.remapPath,\n      'clover': this.getFilePath('clover.xml'),\n      'cobertura': this.getFilePath('cobertura.xml'),\n      'teamcity': this.getFilePath('teamcity.log'),\n      'text-summary': this.getFilePath('summary.txt'),\n      'text': this.getFilePath('report.txt'),\n      'lcovonly': this.getFilePath('lcov.info'),\n      'json-summary': this.getFilePath('summary.json'),\n      'json': this.getFilePath('report.json')\n    };\n    Conf.remapFormat.forEach(type => reports[type] = allReports[type]);\n    this.remapWrapper(this.pathJSON, reports, this.options).await();\n    this.res.end('{\"type\":\"success\"}'); // Restore previous working directory\n\n    process.chdir(cwd);\n  }\n\n  remapWrapper(sources, reports, options) {\n    let sourceStore = new MemoryStore();\n    let collector = remapIstanbul.remap(remapIstanbul.loadCoverage(sources), {\n      sources: sourceStore,\n      warn: function () {}\n    });\n    /* istanbul ignore else */\n\n    if (!Object.keys(sourceStore.map).length) {\n      sourceStore = undefined;\n    }\n\n    let p = Object.keys(reports).map(reportType => {\n      let reportOptions = Object.assign({}, this.options, {\n        verbose: reportType === 'html' ? false : true\n      });\n      return remapIstanbul.writeReport(collector, reportType, reportOptions, reports[reportType], sourceStore);\n    });\n    return Promise.all(p);\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-service.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/report/report-service.js                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 0);\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 1);\nlet IstanbulGenericReporter;\nmodule.link(\"./report-generic\", {\n  default(v) {\n    IstanbulGenericReporter = v;\n  }\n\n}, 2);\nlet JsonSummary;\nmodule.link(\"./report-json-summary\", {\n  default(v) {\n    JsonSummary = v;\n  }\n\n}, 3);\nlet Html;\nmodule.link(\"./report-html\", {\n  default(v) {\n    Html = v;\n  }\n\n}, 4);\nlet Http;\nmodule.link(\"./report-http\", {\n  default(v) {\n    Http = v;\n  }\n\n}, 5);\nlet ReportCoverage;\nmodule.link(\"./report-coverage\", {\n  default(v) {\n    ReportCoverage = v;\n  }\n\n}, 6);\nlet ReportRemap;\nmodule.link(\"./report-remap\", {\n  default(v) {\n    ReportRemap = v;\n  }\n\n}, 7);\nlet TextSummary;\nmodule.link(\"./report-text-summary\", {\n  default(v) {\n    TextSummary = v;\n  }\n\n}, 8);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 9);\nmodule.exportDefault(class {\n  generateReport(res, type, options) {\n    options = Object.assign({}, {\n      path: path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER),\n\n      /* istanbul ignore next: ternary operator */\n      verbose: Log.COVERAGE_VERBOSE ? true : false\n    }, options);\n    Log.info('export coverage using the following format [', type, '] options [', options, ']');\n\n    try {\n      switch (type) {\n        case 'remap':\n          {\n            let reportRemap = new ReportRemap(res, type, options);\n            reportRemap.generate();\n            break;\n          }\n\n        case 'lcovonly':\n          {\n            options = this.addFileToOptions(options, 'lcov.info');\n            let istanbulFile1 = new IstanbulGenericReporter(res, type, options);\n            istanbulFile1.generate();\n            break;\n          }\n\n        case 'json':\n          {\n            options = this.addFileToOptions(options, 'summary.json');\n            let istanbulFile2 = new IstanbulGenericReporter(res, type, options);\n            istanbulFile2.generate();\n            break;\n          }\n\n        case 'coverage':\n          {\n            options = this.addFileToOptions(options, 'report.json');\n            let reportCoverage = new ReportCoverage(res, options);\n            reportCoverage.generate();\n            break;\n          }\n\n        /*case 'teamcity':\n          {\n            options = this.addFileToOptions(options, 'teamcity.log');\n            let teamcity = new Teamcity(res, options);\n            teamcity.generate();\n            break;\n          }*/\n\n        case 'json-summary':\n          {\n            options = this.addFileToOptions(options, 'json_summary.json');\n            let jsonSummary = new JsonSummary(res, type, options);\n            jsonSummary.generate();\n            break;\n          }\n\n        case 'html':\n          {\n            options = Object.assign({}, {\n              'prefix': '/coverage/'\n            }, options);\n            let html = new Html(res, options);\n            html.generate();\n            break;\n          }\n\n        case 'text-summary':\n          {\n            options = this.addFileToOptions(options, 'summary.txt');\n            let textSummary = new TextSummary(res, type, options);\n            textSummary.generate();\n            break;\n          }\n\n        case 'http':\n          {\n            let http = new Http(res, options);\n            http.generate();\n            break;\n          }\n\n        default:\n          {\n            Log.error('Failed to export - this type is not implemented yet');\n            res.writeHead(400);\n            res.end('{\"type\":\"This type [' + type + '] is not supported\"}');\n          }\n      }\n    } catch (e) {\n      Log.error('ReportService failed while creating report type [', type, ']');\n      console.error(e, e.stack);\n      res.writeHead(400);\n      res.end('{\"type\":\"error\",\"message\":\"Unexpected error\"}');\n    }\n  }\n\n  addFileToOptions(options, filename) {\n    return Object.assign({}, options, {\n      path: path.join(options.path, filename)\n    });\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-text-summary.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/report/report-text-summary.js                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Conf;\nmodule.link(\"../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet CoverageData;\nmodule.link(\"../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 1);\nlet Core;\nmodule.link(\"../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 2);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 3);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 4);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 5);\n\nvar Report = Npm.require('istanbul-lib-report'),\n    ReportImpl = Npm.require('istanbul-reports');\n\nmodule.exportDefault(class {\n  constructor(res, type, options) {\n    this.res = res;\n    this.options = options;\n    this.report = ReportImpl.create(type, this.options);\n    this.report.file = this.options.path;\n    this.context = this.getContext(this.report.file);\n  }\n\n  generate() {\n    let coverage = Core.getCoverageObject();\n    var root = CoverageData.getTreeReport(coverage);\n    this.report.onStart(root, this.context);\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  getContext(filepath) {\n    const dirpath = path.dirname(filepath);\n    ReportCommon.checkDirectory(dirpath);\n    ReportCommon.checkFile(filepath);\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writeFile: function (path) {\n          return {\n            write: function (data) {\n              fs.appendFileSync(path, data);\n            },\n            println: function (data) {\n              fs.appendFileSync(path, data + '\\r\\n');\n            },\n            close: function () {},\n            colorize: function (string) {\n              return string;\n            }\n          };\n        }\n      }\n    });\n    return context;\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"services\":{\"core.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/services/core.js                                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 1);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 2);\n\nconst Coverage = Npm.require('istanbul-lib-coverage');\n\nlet mergeCoverageWith, importCoverage, getCoverageObject;\n\ngetCoverageObject = function () {\n  /* istanbul ignore next: default assignment */\n  global.__coverage__ = global.__coverage__ || {};\n  return global.__coverage__;\n};\n\nsetCoverageObject = function (obj) {\n  global.__coverage__ = obj;\n};\n\nmergeCoverageWith = function (obj) {\n  /* istanbul ignore else */\n  if (!obj) {\n    return;\n  }\n\n  var coverage = getCoverageObject();\n  var coverageMap = Coverage.createCoverageMap(coverage);\n  coverageMap.addFileCoverage(obj);\n  setCoverageObject(coverageMap.toJSON());\n};\n/* istanbul ignore next: default assignment */\n\n\nimportCoverage = function (res, options = {}) {\n  Log.info('import coverage');\n  /* istanbul ignore next: ternary operator */\n\n  const filename = options.filename ? options.filename : 'report.json';\n  const reportPath = path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER, filename);\n  fs.exists(reportPath, function (exists) {\n    /* istanbul ignore else */\n    if (!exists) {\n      res.end(JSON.stringify({\n        type: 'failed',\n        message: 'report file not found: reportPath=' + reportPath + ' COVERAGE_APP_FOLDER=' + Conf.COVERAGE_APP_FOLDER\n      }));\n      return;\n    }\n\n    fs.readFile(reportPath, 'utf8', function (err, fileContent) {\n      /* istanbul ignore else */\n      if (err) {\n        res.end(JSON.stringify({\n          type: 'failed',\n          message: 'failed to read report file: ' + reportPath\n        }));\n        return;\n      }\n\n      let coverageObj = JSON.parse(fileContent);\n\n      for (let property in coverageObj) {\n        /* istanbul ignore else */\n        if (coverageObj.hasOwnProperty(property)) {\n          Core.mergeCoverageWith(coverageObj[property]);\n        }\n      }\n\n      res.end('{\"type\":\"success\"}');\n    });\n  });\n};\n\nmodule.exportDefault(Core = {\n  mergeCoverageWith,\n  importCoverage,\n  getCoverageObject\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"coverage-data.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/lmieulet_meteor-coverage/server/services/coverage-data.js                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 1);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 2);\n\nconst Coverage = Npm.require('istanbul-lib-coverage');\n\nconst Report = Npm.require('istanbul-lib-report');\n\nmodule.exportDefault(CoverageData = {\n  getReport: function (coverage) {\n    if (Package['lmieulet:meteor-legacy-coverage'] && Package['lmieulet:meteor-legacy-coverage'].default && Package['lmieulet:meteor-legacy-coverage'].default.CoverageData) {\n      // Retrieve the coverage report from the other lib, as we used the legacy system\n      return Package['lmieulet:meteor-legacy-coverage'].default.CoverageData.getReport(coverage);\n    } else if (Meteor.isPackageTest) {\n      // MANDATORY FOR PACKAGES TESTS\n      throw new Error('lmieulet:meteor-legacy-coverage not found. Just add this server dependency in Package.onTest in your package.js');\n    } // Used for meteor apps that relies on babel\n\n\n    return Coverage.createCoverageMap(coverage);\n  },\n  getFileReport: function (coverage, filePath) {\n    const coverageMap = this.getReport(coverage);\n    const node = Report.summarizers.flat(coverageMap);\n    const childs = node.getRoot().getChildren();\n    let child;\n\n    for (let i = 0; i < childs.length; i++) {\n      /* istanbul ignore else */\n      if (childs[i].getRelativeName() === filePath) {\n        child = childs[i]; // fix the path if possible\n\n        if (child && child.fileCoverage && child.fileCoverage.data && child.fileCoverage.data.path && child.fileCoverage.data.path.indexOf(Conf.COVERAGE_APP_FOLDER)) {\n          // add the folder in the path if not present\n          child.fileCoverage.data.path = path.join(Conf.COVERAGE_APP_FOLDER, child.fileCoverage.data.path);\n        }\n      }\n    }\n\n    return child;\n  },\n  getTreeReport: function (coverage) {\n    return this.getNodeReport(coverage).getRoot();\n  },\n  getLcovonlyReport: function (coverage) {\n    return this.getTreeReport(coverage).getChildren();\n  },\n  getNodeReport: function (coverage) {\n    const coverageMap = this.getReport(coverage);\n    return Report.summarizers.flat(coverageMap);\n  }\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"node_modules\":{\"mkdirp\":{\"package.json\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/lmieulet_meteor-coverage/node_modules/mkdirp/package.json                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.exports = {\n  \"name\": \"mkdirp\",\n  \"version\": \"0.5.1\",\n  \"main\": \"index.js\"\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/lmieulet_meteor-coverage/node_modules/mkdirp/index.js                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.useNode();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"body-parser\":{\"package.json\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/lmieulet_meteor-coverage/node_modules/body-parser/package.json                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.exports = {\n  \"name\": \"body-parser\",\n  \"version\": \"1.18.3\"\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/lmieulet_meteor-coverage/node_modules/body-parser/index.js                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.useNode();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/lmieulet:meteor-coverage/server/index.js\");\n\n/* Exports */\nPackage._define(\"lmieulet:meteor-coverage\", exports);\n\n})();\n","servePath":"/packages/lmieulet_meteor-coverage.js","sourceMap":{"version":3,"sources":["packages/lmieulet:meteor-coverage/server/index.js","packages/lmieulet:meteor-coverage/server/boot.js","packages/lmieulet:meteor-coverage/server/handlers.js","packages/lmieulet:meteor-coverage/server/main.js","packages/lmieulet:meteor-coverage/server/router.js","packages/lmieulet:meteor-coverage/server/context/conf.js","packages/lmieulet:meteor-coverage/server/context/log.js","packages/lmieulet:meteor-coverage/server/report/report-common.js","packages/lmieulet:meteor-coverage/server/report/report-coverage.js","packages/lmieulet:meteor-coverage/server/report/report-generic.js","packages/lmieulet:meteor-coverage/server/report/report-html.js","packages/lmieulet:meteor-coverage/server/report/report-http.js","packages/lmieulet:meteor-coverage/server/report/report-json-summary.js","packages/lmieulet:meteor-coverage/server/report/report-remap.js","packages/lmieulet:meteor-coverage/server/report/report-service.js","packages/lmieulet:meteor-coverage/server/report/report-text-summary.js","packages/lmieulet:meteor-coverage/server/services/core.js","packages/lmieulet:meteor-coverage/server/services/coverage-data.js"],"names":["Conf","module","link","default","v","library","IS_COVERAGE_ACTIVE","Lib","require","Router","CoverageData","ReportService","exportDefault","fs","path","mkdirp","Boot","startup","outputFolder","join","COVERAGE_APP_FOLDER","COVERAGE_EXPORT_FOLDER","access","F_OK","R_OK","W_OK","err","e","console","error","Log","stack","Core","showCoverage","params","req","res","next","options","query","p","reportService","generateReport","getAsset","assetsDir","resolve","filename","exists","readFile","fileContent","end","addClientCoverage","body","writeHead","clientCoverage","property","hasOwnProperty","mergeCoverageWith","exportFile","_type","type","reportTypes","allowed","indexOf","importCoverage","Handlers","bodyParser","url","handleRequest","method","cb","WebApp","rawConnectHandlers","use","queryString","parse","queryParams","split","forEach","pair","Promise","then","urlencoded","extended","json","limit","call","catch","log","constructor","bindRoutes","match","export","IS_COVERAGE_VERBOSE","remapFormat","meteor_parameters","Meteor","settings","coverage","is_coverage_active","coverage_app_folder","process","env","COVERAGE_VERBOSE","ENV_NOT_DEFINED","info","NOT_DEFINED","configuration","output","Npm","coverageFile","defaultConfig","JSON","Assets","getText","accessSync","configurationString","readFileSync","SyntaxError","errMsg","undefined","pending","VERBOSE","verbose","arguments","time","timeEnd","Report","ReportCommon","getContext","filepath","context","createContext","dirpath","dirname","checkDirectory","checkFile","Object","defineProperty","value","writeFile","write","data","appendFileSync","println","close","colorize","string","succeed","stat","statSync","sync","writeFileSync","generate","getCoverageObject","coverageReport","stringify","reportPath","instance","message","ReportImpl","report","create","file","childs","getLcovonlyReport","onStart","length","setHeader","statusCode","i","fileCoverage","replace","onDetail","onEnd","prefix","subdir","opts","generateOpts","outputPath","linkMapper","getPath","node","filePath","getQualifiedName","isSummary","relativePath","source","target","assetPath","name","folderPath","copyStatic","keys","root","getTreeReport","onSummary","childrens","getChildren","child","getRelativeName","fileReport","getFileReport","getFolderContext","folderpath","copyFile","sourcePath","destPath","createOpts","alterFS","writerForDir","IstanbulGenericReporter","remapIstanbul","MemoryStore","pathJSON","remapFolder","remapPath","generateJSONReport","jsonOptions","assign","jsonReport","getFilePath","cwd","chdir","reports","allReports","remapWrapper","await","sources","sourceStore","collector","remap","loadCoverage","warn","map","reportType","reportOptions","writeReport","all","JsonSummary","Html","Http","ReportCoverage","ReportRemap","TextSummary","reportRemap","addFileToOptions","istanbulFile1","istanbulFile2","reportCoverage","jsonSummary","html","textSummary","http","Coverage","global","__coverage__","setCoverageObject","obj","coverageMap","createCoverageMap","addFileCoverage","toJSON","coverageObj","getReport","Package","isPackageTest","Error","summarizers","flat","getRoot","getNodeReport"],"mappings":"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","file":"/packages/lmieulet_meteor-coverage.js","sourcesContent":["import Conf from './context/conf';\nlet library;\n\n// If the coverage is active, it will import the probe inside this package\n// Every script imported using vm.runInThisContext will be hooked by istanbul\n// to provide on the fly the instrumented version of each script - in order to generate coverage stats\n// You need an external actor like spacejam to run different types of actions automaticaly :\n//   - merge several types of coverage\n//   - export reports\nif (Conf.IS_COVERAGE_ACTIVE) {\n  const Lib = require('./main');\n  // Provide the real library\n  library = Lib.default;\n} else {\n  // Mock the library\n  library = {\n    Conf,\n    Router: {\n\n    },\n    CoverageData: {\n\n    },\n    ReportService: {\n\n    }\n  };\n}\n\nexport default library;\n","import fs from 'fs';\nimport path from 'path';\nimport mkdirp from 'mkdirp';\nimport Conf from './context/conf';\nimport Router from './router';\n\nexport default Boot = {\n  startup() {\n    // Create reports output folder if not exists\n    let outputFolder = path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER);\n    fs.access(outputFolder, fs.F_OK | fs.R_OK | fs.W_OK, (err) => {\n      /* istanbul ignore else */\n      if (err) {\n        try {\n          mkdirp(outputFolder);\n        } catch (e) {\n          console.error (`meteor-coverage failed to create the folder ${outputFolder} while booting:`, e);\n          Log.error(e.stack);\n        }\n      }\n    });\n    // Connect the router to this app\n    new Router();\n  }\n};\n","import Conf from './context/conf';\nimport Core from './services/core';\nimport ReportService from './report/report-service';\nimport fs from 'fs';\nimport path from 'path';\n\nshowCoverage = function (params, req, res, next) {\n  let options = {\n    'filepath': params.query.p\n  };\n  let reportService = new ReportService();\n  reportService.generateReport(res, 'http', options);\n};\n\ngetAsset = function (params, req, res, next) {\n  var assetsDir = path.join(path.resolve('.'), 'assets/packages/lmieulet_meteor-coverage/assets/'),\n    filename = params.filename;\n  fs.exists(path.join(assetsDir, filename), function (exists) {\n    if (!exists) {\n      fs.exists(path.join(assetsDir, '/vendor/', filename), function (exists) {\n        /* istanbul ignore else */\n        if (!exists) return next();\n        fs.readFile(assetsDir + '/vendor/' + filename, function (err, fileContent) {\n          /* istanbul ignore else */\n          if (err) {\n            console.error(err);\n            return next();\n          }\n          res.end(fileContent);\n        });\n      });\n    } else {\n      fs.readFile(assetsDir + '/' + filename, function (err, fileContent) {\n        /* istanbul ignore else */\n        if (err) {\n          console.error(err);\n          return next();\n        }\n        res.end(fileContent);\n      });\n    }\n  });\n};\n\naddClientCoverage = function (params, req, res, next) {\n  var body = req.body;\n  /* istanbul ignore else */\n  if (!body) {\n    res.writeHead(400);\n    res.end();\n  }\n\n  var clientCoverage;\n  for (var property in body) {\n    /* istanbul ignore else */\n    if (body.hasOwnProperty(property)) {\n      clientCoverage = body[property];\n    }\n  }\n  if (clientCoverage) {\n    Core.mergeCoverageWith(clientCoverage);\n    res.end('{\"type\":\"success\"}');\n  } else {\n    res.writeHead(400);\n    res.end('Nothing has been imported');\n  }\n};\n\nexportFile = function (params, req, res, next) {\n  var _type = params.type;\n  /* istanbul ignore next: ternary operator */\n  type = Conf.reportTypes.allowed.indexOf(_type) > -1 ? _type : 'coverage';\n  try {\n    let reportService = new ReportService();\n    reportService.generateReport(res, type, {});\n  } catch (e) {\n    Log.error('Failed to export', e, e.stack);\n    res.writeHead(400);\n    res.end('Nothing has been export');\n  }\n};\nimportCoverage = function (params, req, res, next) {\n  try {\n    Core.importCoverage(res);\n  } catch (e) {\n    Log.error('Failed to import', e, e.stack);\n    res.writeHead(400);\n    res.end('No file has been import');\n  }\n};\n\nexport default Handlers = {\n  showCoverage,\n  getAsset,\n  addClientCoverage,\n  exportFile,\n  importCoverage\n};\n","import CoverageData from './services/coverage-data';\nimport Conf from './context/conf';\nimport Router from './router';\nimport ReportService from './report/report-service';\nimport Boot from './boot.js';\n\nBoot.startup();\n\nexport default {\n  Conf,\n  Router,\n  CoverageData,\n  ReportService\n};\n","import Handlers from './handlers';\nimport Conf from './context/conf';\nimport bodyParser from 'body-parser';\nimport url from 'url';\n\nconst handleRequest = (method) => (path, cb) => {\n  WebApp.rawConnectHandlers.use(path, (req, res, next) => {\n    if (req.method !== method) {\n      next();\n      return;\n    }\n\n    const queryString = url.parse(req.url).query || '';\n    const queryParams = { query: {} };\n    queryString.split('&').forEach((pair) => {\n      queryParams.query[pair.split('=')[0]] = pair.split('=')[1];\n    });\n\n    Promise.resolve()\n      .then(() => new Promise(resolve => {\n        bodyParser.urlencoded({ extended: false })(req, res, resolve);\n      }))\n      .then(() => new Promise(resolve => {\n        bodyParser.json({ limit: '30mb' }).call(null, req, res, resolve);\n      }))\n      .then(() => cb(queryParams, req, res, next))\n      .catch((e) => {\n        console.log('Exception undandled:');\n        console.log(e.stack);\n\n        next();\n      });\n  });\n};\n\nexport default class {\n  constructor() {\n    if (Conf.IS_COVERAGE_ACTIVE) {\n      this.bindRoutes();\n    }\n  }\n\n  bindRoutes() {\n    // Show static assets\n    handleRequest('GET')('/coverage/asset', (params, req, res, next) => {\n      params.filename = url.parse(req.url).path.match(/(\\/([^\\/]+))?/)[2];\n      Handlers.getAsset(params, req, res, next);\n    });\n\n    // export coverage to file\n    handleRequest('GET')('/coverage/export', (params, req, res, next) => {\n      params.type = url.parse(req.url).path.match(/(\\/([^\\/]+))?/)[2];\n      Handlers.exportFile(params, req, res, next);\n    });\n\n    handleRequest('GET')('/coverage/import', Handlers.importCoverage);\n\n    // merge client coverage posted from browser\n    handleRequest('POST')('/coverage/client', Handlers.addClientCoverage);\n\n    handleRequest('GET')('/coverage', Handlers.showCoverage);\n  }\n}\n","import Log from './log';\nconst meteor_parameters = {\n  // /:\\ ES 6\n  // return the value OR UNDEFINED\n  // THIS IS NOT A BOOLEAN\n  IS_COVERAGE_ACTIVE: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.is_coverage_active,\n  COVERAGE_APP_FOLDER: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.coverage_app_folder\n};\n\nexport const IS_COVERAGE_ACTIVE = meteor_parameters.IS_COVERAGE_ACTIVE ||  process.env['COVERAGE'] === '1';\nexport const IS_COVERAGE_VERBOSE = Log.COVERAGE_VERBOSE;\nconst ENV_NOT_DEFINED = '/SET/ENV/COVERAGE_APP_FOLDER/OR/READ/README/';\n\nexport const COVERAGE_APP_FOLDER = meteor_parameters.COVERAGE_APP_FOLDER || process.env['COVERAGE_APP_FOLDER'] || ENV_NOT_DEFINED;\n\n/* istanbul ignore else */\nif (COVERAGE_APP_FOLDER === ENV_NOT_DEFINED) {\n  Log.info('Error: COVERAGE_APP_FOLDER is undefined and the coverage will fail.');\n}\nconst NOT_DEFINED = '/COVERAGE/NOT/ACTIVE/';\nlet configuration = {\n  output: NOT_DEFINED\n};\n/* istanbul ignore else */\nif (IS_COVERAGE_ACTIVE) {\n  const fs = Npm.require('fs'),\n    path = Npm.require('path');\n\n  Log.info('Coverage active');\n  let coverageFile = path.join(COVERAGE_APP_FOLDER, '.coverage.json'),\n    defaultConfig = JSON.parse(Assets.getText('conf/default-coverage.json'));\n\n  try {\n    fs.accessSync(coverageFile);\n    Log.info('Reading custom configuration');\n    const configurationString = fs.readFileSync(coverageFile);\n    configuration = JSON.parse(configurationString);\n    Log.info('[Configuration] ', configuration);\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      let errMsg = `Error: ${coverageFile} is not a valid JSON`;\n      console.error(errMsg, e);\n      Log.error(e.stack);\n    }\n    // Set up defaultConfig value if they are not provided in the .coverage.json file\n    Log.info('Loading default configuration, missing configuration file ', coverageFile);\n    configuration = defaultConfig;\n  }\n\n  // Don't force to rewrite all the key of configuration.\n\n  /* istanbul ignore else */\n  if (configuration.output === undefined) {\n    Log.info('Loading default configuration: output');\n    configuration.output = defaultConfig.output;\n  }\n\n  /* istanbul ignore else */\n  if (configuration.remapFormat === undefined) {\n    Log.info('Loading default configuration: remapFormat');\n    configuration.remapFormat = defaultConfig.remapFormat;\n  }\n}\n\nexport const COVERAGE_EXPORT_FOLDER = configuration.output;\nexport const remapFormat = configuration.remapFormat;\nexport const reportTypes = {\n  allowed: ['clover', 'cobertura', 'coverage', 'html', 'json', 'json-summary', 'lcov', 'lcovonly', 'remap', 'teamcity', 'text', 'text-lcov', 'text-summary'],\n  pending: ['clover', 'cobertura', 'lcov', 'teamcity', 'text', 'text-lcov']\n};\n\nLog.info('Coverage configuration:');\nLog.info('- IS_COVERAGE_ACTIVE=', IS_COVERAGE_ACTIVE);\nLog.info('- IS_COVERAGE_VERBOSE=', IS_COVERAGE_VERBOSE);\nLog.info('- COVERAGE_APP_FOLDER=', COVERAGE_APP_FOLDER);\nLog.info('.coverage.json values:');\nLog.info('- remapFormat=', configuration.remapFormat);\nLog.info('- COVERAGE_EXPORT_FOLDER=', COVERAGE_EXPORT_FOLDER);\n","const meteor_parameters = {\n  // /:\\ ES 6\n  // return the value OR UNDEFINED\n  // THIS IS NOT A BOOLEAN\n  VERBOSE: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.verbose\n};\n\nexport default Log = {\n  COVERAGE_VERBOSE: meteor_parameters.VERBOSE || process.env['COVERAGE_VERBOSE'] === '1' || false,\n  error: function() {\n    console.error(...arguments);\n  },\n  info: function() {\n    /* istanbul ignore else */\n    if (this.COVERAGE_VERBOSE) {\n      console.log(...arguments);\n    }\n  },\n  time: function() {\n    /* istanbul ignore else */\n    if (this.COVERAGE_VERBOSE) {\n      console.log(...arguments);\n    }\n  },\n  timeEnd: function() {\n    /* istanbul ignore else */\n    if (this.COVERAGE_VERBOSE) {\n      console.log(...arguments);\n    }\n  }\n};\n","import fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport Log from './../context/log';\nconst Report = Npm.require('istanbul-lib-report');\n\n\nexport default ReportCommon = {\n  /**\n     * Alter fs to add a new method writer\n     * Used by the istanbul-reports library\n     * @param filepath\n     * @returns {*|Context}\n     */\n\n  getContext (filepath) {\n    let context = Report.createContext();\n\n    const dirpath = path.dirname(filepath);\n    this.checkDirectory(dirpath);\n    this.checkFile(filepath);\n\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writeFile: function (path) {\n          return {\n            write: function (data) {\n              fs.appendFileSync(path, data);\n            },\n            println: function (data) {\n              fs.appendFileSync(path, data + '\\r\\n');\n            },\n            close: function () {},\n            colorize: function(string) {\n              return string;\n            }\n          };\n        }\n      }\n    });\n    return context;\n  },\n  checkDirectory (dirpath) {\n    let succeed = true;\n    // Create folder\n    try {\n      const stat = fs.statSync(dirpath);\n    } catch (e) {\n      succeed = false;\n      Log.info('Creating a new folder', dirpath);\n      try {\n        mkdirp.sync(dirpath);\n      } catch (e) {\n        console.error('Something went wrong while creating folder', e, e.stack);\n      }\n    }\n    return succeed;\n  },\n  checkFile (filepath) {\n    let succeed = true;\n    // Reset file\n    try {\n      Log.info('Try to remove the content & create the file', filepath);\n      fs.writeFileSync(filepath, '');\n    } catch (e) {\n      succeed = false;\n      console.error('Something went wrong while creating the file', filepath, e, e.stack);\n    }\n    return succeed;\n  }\n};\n","import fs from 'fs';\n\nexport default class {\n  constructor(res, options) {\n    this.res = res;\n    this.options = options;\n    this.options.filename = this.options.path;\n  }\n\n  generate() {\n    let coverage = Core.getCoverageObject();\n    var coverageReport = JSON.stringify(coverage),\n      reportPath = this.options.path;\n    let instance = this;\n    fs.writeFile(reportPath, coverageReport, function (err) {\n      /* istanbul ignore else */\n      if (err) {\n        instance.res.end(JSON.stringify({ type: 'failed', message: 'failed to write report file: ' + reportPath }));\n      } else {\n        instance.res.end('{\"type\":\"success\"}');\n      }\n    });\n  }\n}\n","import CoverageData from './../services/coverage-data';\nimport Core from './../services/core';\nimport ReportCommon from './report-common';\nimport Conf from '../context/conf';\nconst ReportImpl = Npm.require('istanbul-reports');\n  \n/**\n * Used by type lcovonly and json\n * create the corresponding file using istanbul api\n * @type {any}\n */\nexport default class {\n  constructor(res, type, options) {\n    this.res = res;\n    this.options = options;\n    this.report = ReportImpl.create(type, this.options);\n    this.report.file = this.options.path;\n    this.context = ReportCommon.getContext(this.report.file);\n  }\n\n  generate() {\n    const coverage = Core.getCoverageObject();\n    let childs = CoverageData.getLcovonlyReport(coverage);\n    this.report.onStart(null, this.context);\n    /* istanbul ignore else */\n    if (childs.length === 0) {\n      this.res.setHeader('Content-type', 'text/plain');\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"No coverage to export\"}');\n    }\n\n    this.writeFile(childs);\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  writeFile(childs) {\n    for (let i = 0; i < childs.length; i++) {\n      // Remove the COVERAGE_APP_FOLDER from the filepath\n      childs[i].fileCoverage.data.path = childs[i].fileCoverage.data.path.replace(Conf.COVERAGE_APP_FOLDER, '');\n\n      this.report.onDetail(childs[i]);\n    }\n    this.report.onEnd();\n  }\n\n}\n","import CoverageData from '../services/coverage-data';\nimport Core from '../services/core';\nimport fs from 'fs';\nimport path from 'path';\nimport ReportCommon from './report-common';\nimport Log from './../context/log';\nconst Report = Npm.require('istanbul-lib-report'),\n  ReportImpl = Npm.require('istanbul-reports');\n\nexport default class {\n  constructor(res, options) {\n    this.res = res;\n    this.options = options;\n    this.prefix = options.prefix;\n    this.options.subdir = this.options.path;\n    this.opts = this.generateOpts();\n    this.report = ReportImpl.create('html', this.opts);\n  }\n\n  generateOpts() {\n    const outputPath = this.options.path;\n    return {\n      verbose: this.options.verbose,\n      linkMapper: {\n        getPath: function (node) {\n          /* istanbul ignore else */\n          if (typeof node === 'string') {\n            return node;\n          }\n          var filePath = node.getQualifiedName();\n\n          if (node.isSummary()) {\n            filePath = path.join(outputPath, 'index.html');\n          } else {\n            filePath = path.join(outputPath, filePath + '.html');\n          }\n          return filePath;\n        },\n        relativePath: function (source, target) {\n          return this.getPath(target);\n        },\n\n        assetPath: function (node, name) {\n          return path.join(outputPath, name);\n        }\n      }\n    };\n  }\n\n  generate() {\n    const folderPath = this.options.path;\n    this.copyStatic();\n    var coverage = Core.getCoverageObject();\n\n    /* istanbul ignore else */\n    if (!(coverage && Object.keys(coverage).length > 0)) {\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"failed\", \"message\": \"No coverage information have been collected\"}');\n    }\n    var root = CoverageData.getTreeReport(coverage);\n    let filepath = path.join(folderPath, 'index.html');\n\n    this.report.onSummary(root, ReportCommon.getContext(filepath));\n\n    const childrens = root.getChildren();\n    const report = this.report;\n    // Todo : use future\n    childrens.forEach(function (child) {\n      var filepath = path.join(folderPath, child.getRelativeName() + '.html');\n      Log.info('Creating a new html report', filepath);\n      let fileReport = CoverageData.getFileReport(coverage, child.getRelativeName());\n      report.onDetail(fileReport, ReportCommon.getContext(filepath));\n    });\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  copyStatic() {\n    ReportCommon.checkDirectory(this.options.path);\n    this.report.onStart(null, this.getFolderContext(this.options.path));\n  }\n\n\n  getFolderContext(folderpath) {\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        copyFile: function (sourcePath, destPath) {\n          // fix no asset while using test runner\n          // do not use async - nothing is awaiting us\n          const data = fs.readFileSync(sourcePath);\n          let p = path.join(folderpath, destPath);\n          fs.writeFileSync(p, data);\n        }\n      }\n    });\n    return context;\n  }\n}\n","import CoverageData from '../services/coverage-data';\nimport Conf from '../context/conf';\nimport Core from '../services/core';\n// If we change Npm.require('istanbul-reports') into import a from 'istanbul-reports'\n// the __dirname change and the  istanbul dependency fails\n// See istanbul-reports\n// With Npm.require : /Users/Leo/Webstorm/meteor-container/packages/meteor-coverage/.npm/package/node_modules/istanbul-reports/lib/json\n\nconst Report = Npm.require('istanbul-lib-report'),\n  ReportImpl = Npm.require('istanbul-reports');\nexport default class {\n  constructor(res, options) {\n    this.res = res;\n    this.filepath = '';\n    this.options = options;\n    this.options.prefix = '/coverage/';\n    this.opts = this.createOpts();\n  }\n\n  createOpts() {\n    const prefix = this.options.prefix;\n    return {\n      verbose: Conf.IS_COVERAGE_VERBOSE,\n      linkMapper: {\n        getPath: function (node) {\n          /* istanbul ignore else */\n          if (typeof node === 'string') {\n            return node;\n          }\n          return node.getQualifiedName();\n        },\n        relativePath: function (source, target) {\n          return prefix + 'show?p=' + this.getPath(target);\n        },\n        assetPath: function (node, name) {\n          return prefix + 'asset/' + name;\n        }\n      }\n    };\n  }\n\n  generate() {\n    var coverage = Core.getCoverageObject();\n    /* istanbul ignore else */\n    if (!(coverage && Object.keys(coverage).length > 0)) {\n      this.res.setHeader('Content-type', 'text/plain');\n      return this.res.end('No coverage information has been collected');\n    }\n    this.res.setHeader('Content-type', 'text/html');\n    this.alterFS(this.res);\n    var context = this.getContext(this.res);\n    var report = ReportImpl.create('html', this.opts);\n    if (this.options.filepath) {\n      var child = CoverageData.getFileReport(coverage, this.options.filepath);\n      report.onDetail(child, context);\n    } else {\n      var root = CoverageData.getTreeReport(coverage);\n      report.onSummary(root, context);\n    }\n  }\n\n  getContext(res) {\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writerForDir: {\n          writeFile: function () {\n            return res;\n          }\n        },\n        writeFile: function () {\n          return res;\n        }\n      }\n    });\n    return context;\n  }\n\n  // istanbul-reports expect to save HTML report to the file system and not over network\n  alterFS(res) {\n    res.close = function () {\n      this.end();\n    };\n  }\n\n}\n","import Conf from './../context/conf';\nimport CoverageData from './../services/coverage-data';\nimport Core from './../services/core';\nimport ReportCommon from './report-common';\nconst ReportImpl = Npm.require('istanbul-reports');\n\nexport default class {\n  constructor(res, type, options) {\n    this.res = res;\n    this.options = options;\n    /* istanbul ignore next: ternary operator */\n    this.options.verbose = Conf.IS_COVERAGE_VERBOSE ? true : false;\n    this.report = ReportImpl.create(type, this.options);\n\n    this.report.file = this.options.path;\n    this.context = ReportCommon.getContext(this.report.file);\n  }\n\n  generate() {\n    const coverage = Core.getCoverageObject();\n    let childs = CoverageData.getLcovonlyReport(coverage);\n    this.report.onStart(null, this.context);\n    /* istanbul ignore else */\n    if (childs.length === 0) {\n      this.res.setHeader('Content-type', 'text/plain');\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"No coverage to export\"}');\n    }\n    this.writeFile(childs);\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  writeFile (childs) {\n    for (let i = 0; i < childs.length; i++) {\n      // Remove the COVERAGE_APP_FOLDER from the filepath\n      childs[i].fileCoverage.data.path = childs[i].fileCoverage.data.path.replace(Conf.COVERAGE_APP_FOLDER, '');\n\n      this.report.onDetail(childs[i]);\n    }\n    ///Todo: not working\n    //this.report.onSummary(childs);\n    this.report.onEnd();\n  }\n\n}\n","import Conf from './../context/conf';\nimport Log from './../context/log';\nimport ReportCommon from './report-common';\nimport IstanbulGenericReporter from './report-generic';\nimport path from 'path';\nconst remapIstanbul = Npm.require('remap-istanbul');\nconst MemoryStore = Npm.require('istanbul/lib/store/memory');\n\n\nexport default class {\n  constructor(res, type, options) {\n    this.res = res;\n\n    // Common options\n    this.options = options;\n\n    // JSON report options\n    this.pathJSON = path.join(this.options.path, 'summary.json');\n\n    // remap-istanbul options\n    this.remapFolder = path.join(Conf.COVERAGE_EXPORT_FOLDER, '.remap');\n    this.remapPath = path.join(Conf.COVERAGE_APP_FOLDER, this.remapFolder);\n  }\n\n  generateJSONReport() {\n    const jsonOptions = Object.assign({}, this.options, {path: this.pathJSON});\n    let jsonReport = new IstanbulGenericReporter(this.res, 'json', jsonOptions);\n    jsonReport.generate();\n  }\n\n  getFilePath(filename) {\n    return path.join(this.remapFolder, filename);\n  }\n\n  generate() {\n    // We cannot rely on a previous coverage analysis JSON report,\n    // so we force its generation here before remapping\n    this.generateJSONReport();\n\n    const cwd = process.cwd();\n    process.chdir(Conf.COVERAGE_APP_FOLDER);\n\n    // Create output directory if not exists\n    ReportCommon.checkDirectory(this.remapPath);\n\n    let reports = {}, allReports = {\n      'html': this.remapPath,\n      'clover': this.getFilePath('clover.xml'),\n      'cobertura': this.getFilePath('cobertura.xml'),\n      'teamcity': this.getFilePath('teamcity.log'),\n      'text-summary': this.getFilePath('summary.txt'),\n      'text': this.getFilePath('report.txt'),\n      'lcovonly': this.getFilePath('lcov.info'),\n      'json-summary': this.getFilePath('summary.json'),\n      'json': this.getFilePath('report.json')\n    };\n    Conf.remapFormat.forEach((type) => reports[type] = allReports[type]);\n    this.remapWrapper(this.pathJSON, reports, this.options).await();\n    this.res.end('{\"type\":\"success\"}');\n\n    // Restore previous working directory\n    process.chdir(cwd);\n  }\n\n  remapWrapper(sources, reports, options) {\n    let sourceStore = new MemoryStore();\n    let collector = remapIstanbul.remap(remapIstanbul.loadCoverage(sources), {\n      sources: sourceStore,\n      warn: function() {}\n    });\n\n    /* istanbul ignore else */\n    if (!Object.keys(sourceStore.map).length) {\n      sourceStore = undefined;\n    }\n\n    let p = Object.keys(reports).map((reportType) => {\n      let reportOptions = Object.assign({}, this.options, {verbose: reportType === 'html' ? false : true});\n      return remapIstanbul.writeReport(collector, reportType, reportOptions, reports[reportType], sourceStore);\n    });\n\n    return Promise.all(p);\n  }\n}\n","import Log from './../context/log';\nimport Conf from './../context/conf';\nimport IstanbulGenericReporter from './report-generic';\nimport JsonSummary from './report-json-summary';\n// import Teamcity from './report-teamcity';\nimport Html from './report-html';\nimport Http from './report-http';\nimport ReportCoverage from './report-coverage';\nimport ReportRemap from './report-remap';\nimport TextSummary from './report-text-summary';\nimport path from 'path';\n\nexport default class {\n  generateReport(res, type, options) {\n\n    options = Object.assign({}, {\n      path: path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER),\n      /* istanbul ignore next: ternary operator */\n      verbose: Log.COVERAGE_VERBOSE ? true : false\n    }, options);\n\n    Log.info('export coverage using the following format [', type, '] options [', options, ']');\n    try {\n      switch (type) {\n      case 'remap':\n      {\n        let reportRemap = new ReportRemap(res, type, options);\n        reportRemap.generate();\n        break;\n      }\n      case 'lcovonly':\n      {\n        options = this.addFileToOptions(options, 'lcov.info');\n        let istanbulFile1 = new IstanbulGenericReporter(res, type, options);\n        istanbulFile1.generate();\n        break;\n      }\n      case 'json':\n      {\n        options = this.addFileToOptions(options, 'summary.json');\n        let istanbulFile2 = new IstanbulGenericReporter(res, type, options);\n        istanbulFile2.generate();\n        break;\n      }\n      case 'coverage':\n      {\n        options = this.addFileToOptions(options, 'report.json');\n        let reportCoverage = new ReportCoverage(res, options);\n        reportCoverage.generate();\n        break;\n      }\n      /*case 'teamcity':\n        {\n          options = this.addFileToOptions(options, 'teamcity.log');\n          let teamcity = new Teamcity(res, options);\n          teamcity.generate();\n          break;\n        }*/\n      case 'json-summary':\n      {\n        options = this.addFileToOptions(options, 'json_summary.json');\n        let jsonSummary = new JsonSummary(res, type, options);\n        jsonSummary.generate();\n        break;\n      }\n      case 'html':\n      {\n        options = Object.assign({}, {\n          'prefix': '/coverage/'\n        }, options);\n        let html = new Html(res, options);\n        html.generate();\n        break;\n      }\n      case 'text-summary':\n      {\n        options = this.addFileToOptions(options, 'summary.txt');\n        let textSummary = new TextSummary(res, type, options);\n        textSummary.generate();\n        break;\n      }\n      case 'http':\n      {\n        let http = new Http(res, options);\n        http.generate();\n        break;\n      }\n      default:\n      {\n        Log.error('Failed to export - this type is not implemented yet');\n        res.writeHead(400);\n        res.end('{\"type\":\"This type [' + type + '] is not supported\"}');\n      }\n      }\n    } catch (e) {\n      Log.error('ReportService failed while creating report type [', type, ']');\n      console.error(e, e.stack);\n      res.writeHead(400);\n      res.end('{\"type\":\"error\",\"message\":\"Unexpected error\"}');\n    }\n  }\n  addFileToOptions(options, filename) {\n    return Object.assign({}, options, {\n      path: path.join(options.path, filename)\n    });\n  }\n}\n","import Conf from '../context/conf';\nimport CoverageData from '../services/coverage-data';\nimport Core from '../services/core';\nimport ReportCommon from './report-common';\nimport path from 'path';\nimport fs from 'fs';\nvar Report = Npm.require('istanbul-lib-report'),\n  ReportImpl = Npm.require('istanbul-reports');\n  \nexport default class {\n  constructor(res, type, options) {\n    this.res = res;\n    this.options = options;\n    this.report = ReportImpl.create(type, this.options);\n\n    this.report.file = this.options.path;\n    this.context = this.getContext(this.report.file);\n\n  }\n\n  generate() {\n    let coverage = Core.getCoverageObject();\n    var root = CoverageData.getTreeReport(coverage);\n    this.report.onStart(root, this.context);\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  getContext(filepath) {\n    const dirpath = path.dirname(filepath);\n    ReportCommon.checkDirectory(dirpath);\n    ReportCommon.checkFile(filepath);\n    var context = Report.createContext();\n\n\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writeFile: function (path) {\n          return {\n            write: function (data) {\n              fs.appendFileSync(path, data);\n            },\n            println: function (data) {\n              fs.appendFileSync(path, data + '\\r\\n');\n            },\n            close: function () {\n            },\n            colorize: function(string) {\n              return string;\n            }\n          };\n        }\n      }\n    });\n    return context;\n  }\n}\n","import Conf from './../context/conf';\nimport path from 'path';\nimport fs from 'fs';\nconst Coverage = Npm.require('istanbul-lib-coverage');\n\nlet mergeCoverageWith, importCoverage, getCoverageObject;\n\ngetCoverageObject = function () {\n  /* istanbul ignore next: default assignment */\n  global.__coverage__ = global.__coverage__ || {};\n  return global.__coverage__;\n};\n\nsetCoverageObject = function (obj) {\n  global.__coverage__ = obj;\n};\n\nmergeCoverageWith = function (obj) {\n  /* istanbul ignore else */\n  if (!obj) {\n    return;\n  }\n  var coverage = getCoverageObject();\n  var coverageMap = Coverage.createCoverageMap(coverage);\n  coverageMap.addFileCoverage(obj);\n  setCoverageObject(coverageMap.toJSON());\n};\n\n\n/* istanbul ignore next: default assignment */\nimportCoverage = function (res, options = {}) {\n  Log.info('import coverage');\n  /* istanbul ignore next: ternary operator */\n  const filename = options.filename ? options.filename : 'report.json';\n  const reportPath = path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER, filename);\n  fs.exists(reportPath, function (exists) {\n    /* istanbul ignore else */\n    if (!exists) {\n      res.end(JSON.stringify({ type: 'failed', message: 'report file not found: reportPath=' + reportPath + ' COVERAGE_APP_FOLDER=' + Conf.COVERAGE_APP_FOLDER }));\n      return;\n    }\n    fs.readFile(reportPath, 'utf8', function (err, fileContent) {\n      /* istanbul ignore else */\n      if (err) {\n        res.end(JSON.stringify({ type: 'failed', message: 'failed to read report file: ' + reportPath }));\n        return;\n      }\n      let coverageObj = JSON.parse(fileContent);\n      for (let property in coverageObj) {\n        /* istanbul ignore else */\n        if (coverageObj.hasOwnProperty(property)) {\n          Core.mergeCoverageWith(coverageObj[property]);\n        }\n      }\n      res.end('{\"type\":\"success\"}');\n    });\n  });\n};\nexport default Core = {\n  mergeCoverageWith,\n  importCoverage,\n  getCoverageObject\n};\n","import Conf from './../context/conf';\nimport path from 'path';\nimport fs from 'fs';\n\nconst Coverage = Npm.require('istanbul-lib-coverage');\nconst Report = Npm.require('istanbul-lib-report');\n\nexport default CoverageData = {\n  getReport: function (coverage) {\n    if (Package['lmieulet:meteor-legacy-coverage'] && Package['lmieulet:meteor-legacy-coverage'].default && Package['lmieulet:meteor-legacy-coverage'].default.CoverageData) {\n      // Retrieve the coverage report from the other lib, as we used the legacy system\n      return Package['lmieulet:meteor-legacy-coverage'].default.CoverageData.getReport(coverage);\n    } else if (Meteor.isPackageTest) {\n      // MANDATORY FOR PACKAGES TESTS\n      throw new Error('lmieulet:meteor-legacy-coverage not found. Just add this server dependency in Package.onTest in your package.js');\n    }\n    // Used for meteor apps that relies on babel\n    return Coverage.createCoverageMap(coverage);\n  },\n  getFileReport: function (coverage, filePath) {\n    const coverageMap = this.getReport(coverage);\n    const node = Report.summarizers.flat(coverageMap);\n    const childs = node.getRoot().getChildren();\n    let child;\n    for (let i = 0; i < childs.length; i++) {\n      /* istanbul ignore else */\n      if (childs[i].getRelativeName() === filePath) {\n        child = childs[i];\n        // fix the path if possible\n        if (child && child.fileCoverage && \n          child.fileCoverage.data && child.fileCoverage.data.path &&\n          child.fileCoverage.data.path.indexOf(Conf.COVERAGE_APP_FOLDER)) {\n          // add the folder in the path if not present\n          child.fileCoverage.data.path = path.join(Conf.COVERAGE_APP_FOLDER, child.fileCoverage.data.path);\n        }\n      }\n    }\n    return child;\n  },\n  getTreeReport: function (coverage) {\n    return this.getNodeReport(coverage).getRoot();\n  },\n  getLcovonlyReport: function (coverage) {\n    return this.getTreeReport(coverage).getChildren();\n  },\n  getNodeReport: function (coverage) {\n    const coverageMap = this.getReport(coverage);\n    return Report.summarizers.flat(coverageMap);\n  }\n};\n"]}}]
[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"force-ssl-common\":{\"force_ssl_common.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/force-ssl-common/force_ssl_common.js                                                        //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nmodule.export({\n  isLocalConnection: () => isLocalConnection,\n  isSslConnection: () => isSslConnection\n});\nlet forwarded;\nmodule.link(\"forwarded-http\", {\n  default(v) {\n    forwarded = v;\n  }\n\n}, 0);\n\n// Determine if the connection is only over localhost. Both we\n// received it on localhost, and all proxies involved received on\n// localhost (supports \"forwarded\" and \"x-forwarded-for\").\nconst isLocalConnection = req => {\n  const localhostRegexp = /^\\s*(.*127\\.0\\.0\\.1|\\[?::1\\]?)\\s*$/;\n  const request = Object.create(req);\n  request.connection = Object.assign({}, req.connection, {\n    remoteAddress: req.connection.remoteAddress || req.socket.remoteAddress\n  });\n  const forwardedParams = forwarded(request);\n  let isLocal = true;\n  Object.keys(forwardedParams.for).forEach(forKey => {\n    if (!localhostRegexp.test(forKey)) {\n      isLocal = false;\n    }\n  });\n  return isLocal;\n}; // Determine if the connection was over SSL at any point. Either we\n// received it as SSL, or a proxy did and translated it for us.\n\n\nconst isSslConnection = req => {\n  const forwardedParams = forwarded(req);\n  return req.connection.pair || forwardedParams.proto && forwardedParams.proto.indexOf('https') !== -1;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"forwarded-http\":{\"package.json\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// node_modules/meteor/force-ssl-common/node_modules/forwarded-http/package.json                        //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nmodule.exports = {\n  \"name\": \"forwarded-http\",\n  \"version\": \"0.3.0\",\n  \"main\": \"lib/index.js\"\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"index.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// node_modules/meteor/force-ssl-common/node_modules/forwarded-http/lib/index.js                        //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nmodule.useNode();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/force-ssl-common/force_ssl_common.js\");\n\n/* Exports */\nPackage._define(\"force-ssl-common\", exports);\n\n})();\n","servePath":"/packages/force-ssl-common.js","sourceMap":{"version":3,"sources":["packages/force-ssl-common/force_ssl_common.js"],"names":["module","export","isLocalConnection","isSslConnection","forwarded","link","default","v","req","localhostRegexp","request","Object","create","connection","assign","remoteAddress","socket","forwardedParams","isLocal","keys","for","forEach","forKey","test","pair","proto","indexOf"],"mappings":";;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,mBAAiB,EAAC,MAAIA,iBAAvB;AAAyCC,iBAAe,EAAC,MAAIA;AAA7D,CAAd;AAA6F,IAAIC,SAAJ;AAAcJ,MAAM,CAACK,IAAP,CAAY,gBAAZ,EAA6B;AAACC,SAAO,CAACC,CAAD,EAAG;AAACH,aAAS,GAACG,CAAV;AAAY;;AAAxB,CAA7B,EAAuD,CAAvD;;AAE3G;AACA;AACA;AACA,MAAML,iBAAiB,GAAIM,GAAD,IAAS;AACjC,QAAMC,eAAe,GAAG,oCAAxB;AACA,QAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcJ,GAAd,CAAhB;AACAE,SAAO,CAACG,UAAR,GAAqBF,MAAM,CAACG,MAAP,CACnB,EADmB,EAEnBN,GAAG,CAACK,UAFe,EAGnB;AAAEE,iBAAa,EAAEP,GAAG,CAACK,UAAJ,CAAeE,aAAf,IAAgCP,GAAG,CAACQ,MAAJ,CAAWD;AAA5D,GAHmB,CAArB;AAKA,QAAME,eAAe,GAAGb,SAAS,CAACM,OAAD,CAAjC;AACA,MAAIQ,OAAO,GAAG,IAAd;AACAP,QAAM,CAACQ,IAAP,CAAYF,eAAe,CAACG,GAA5B,EAAiCC,OAAjC,CAA0CC,MAAD,IAAY;AACnD,QAAI,CAACb,eAAe,CAACc,IAAhB,CAAqBD,MAArB,CAAL,EAAmC;AACjCJ,aAAO,GAAG,KAAV;AACD;AACF,GAJD;AAKA,SAAOA,OAAP;AACD,CAhBD,C,CAkBA;AACA;;;AACA,MAAMf,eAAe,GAAIK,GAAD,IAAS;AAC/B,QAAMS,eAAe,GAAGb,SAAS,CAACI,GAAD,CAAjC;AACA,SAAOA,GAAG,CAACK,UAAJ,CAAeW,IAAf,IACAP,eAAe,CAACQ,KAAhB,IAAyBR,eAAe,CAACQ,KAAhB,CAAsBC,OAAtB,CAA8B,OAA9B,MAA2C,CAAC,CAD5E;AAED,CAJD,C","file":"/packages/force-ssl-common.js","sourcesContent":["import forwarded from 'forwarded-http';\n\n// Determine if the connection is only over localhost. Both we\n// received it on localhost, and all proxies involved received on\n// localhost (supports \"forwarded\" and \"x-forwarded-for\").\nconst isLocalConnection = (req) => {\n  const localhostRegexp = /^\\s*(.*127\\.0\\.0\\.1|\\[?::1\\]?)\\s*$/;\n  const request = Object.create(req);\n  request.connection = Object.assign(\n    {},\n    req.connection,\n    { remoteAddress: req.connection.remoteAddress || req.socket.remoteAddress }\n  );\n  const forwardedParams = forwarded(request);\n  let isLocal = true;\n  Object.keys(forwardedParams.for).forEach((forKey) => {\n    if (!localhostRegexp.test(forKey)) {\n      isLocal = false;\n    }\n  });\n  return isLocal;\n};\n\n// Determine if the connection was over SSL at any point. Either we\n// received it as SSL, or a proxy did and translated it for us.\nconst isSslConnection = (req) => {\n  const forwardedParams = forwarded(req);\n  return req.connection.pair\n      || forwardedParams.proto && forwardedParams.proto.indexOf('https') !== -1;\n};\n\nexport { isLocalConnection, isSslConnection };\n"]}}]
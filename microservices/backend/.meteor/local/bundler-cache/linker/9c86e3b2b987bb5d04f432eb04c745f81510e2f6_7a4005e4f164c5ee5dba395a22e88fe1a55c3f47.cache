[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Random = Package.random.Random;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar exposeLivedata, exposeMongoLivedata, Fibers, MeteorX;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/lamhieu_meteorx/src/livedata.js                                                     //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nexposeLivedata = function(namespace) {\n  // instrumenting session\n  const fakeSocket = {send: function() {}, close: function() {}, headers: []};\n  const ddpConnectMessage = {msg: 'connect', version: 'pre1', support: ['pre1']};\n  Meteor.default_server._handleConnect(fakeSocket, ddpConnectMessage);\n\n  if(fakeSocket._meteorSession) { // for newer meteor versions\n    namespace.Session = fakeSocket._meteorSession.constructor;\n\n    exposeSubscription(fakeSocket._meteorSession, namespace);\n    exposeSessionCollectionView(fakeSocket._meteorSession, namespace);\n\n    if (Meteor.default_server._removeSession) {\n      // 1.7 +\n      Meteor.default_server._removeSession(fakeSocket._meteorSession);\n    } else if (Meteor.default_server._closeSession) {\n      // 0.7.x +\n      Meteor.default_server._closeSession(fakeSocket._meteorSession);\n    } else if(Meteor.default_server._destroySession) {\n      // 0.6.6.x\n      Meteor.default_server._destroySession(fakeSocket._meteorSession);\n    }\n  } else if(fakeSocket.meteor_session) { // support for 0.6.5.x\n    namespace.Session = fakeSocket.meteor_session.constructor;\n\n    // instrumenting subscription\n    exposeSubscription(fakeSocket.meteor_session, namespace);\n    exposeSessionCollectionView(fakeSocket._meteorSession, namespace);\n\n    fakeSocket.meteor_session.detach(fakeSocket);\n  } else {\n    console.error('expose: session exposing failed');\n  }\n};\n\nfunction exposeSubscription(session, namespace) {\n  const subId = Random.id();\n  const publicationHandler = function() {\n    this.ready()\n  };\n  const pubName = '__dummy_pub_' + Random.id();\n\n  session._startSubscription(publicationHandler, subId, [], pubName);\n  const isMap = session._namedSubs instanceof Map;\n  const subscription = isMap ? session._namedSubs.get(subId) : session._namedSubs[subId];\n  namespace.Subscription = subscription.constructor;\n\n  // cleaning up\n  session._stopSubscription(subId);\n}\n\nfunction exposeSessionCollectionView(session, namespace) {\n  const documentView = session.getCollectionView();\n  namespace.SessionCollectionView = documentView.constructor;\n\n  const id = 'the-id';\n  documentView.added('sample-handle', id, {aa: 10});\n  const isMap = documentView.documents instanceof Map;\n  const doc = isMap ? documentView.documents.get(id) : documentView.documents[id];\n  namespace.SessionDocumentView = doc.constructor;\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/lamhieu_meteorx/src/mongo-livedata.js                                               //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nexposeMongoLivedata = function(namespace) {\n  const MongoColl = typeof Mongo !== \"undefined\" ? Mongo.Collection : Meteor.Collection;\n  const coll = new MongoColl(\"__dummy_coll_\" + Random.id());\n  // we need wait until db get connected with meteor, .findOne() does that\n  coll.findOne();\n\n  namespace.MongoConnection = MongoInternals.defaultRemoteCollectionDriver().mongo.constructor;\n  const cursor = coll.find();\n  namespace.MongoCursor = cursor.constructor;\n  exposeOplogDriver(namespace, coll);\n  exposePollingDriver(namespace, coll);\n  exposeMultiplexer(namespace, coll);\n  exposeSynchronousCursor(namespace, coll);\n};\n\nfunction exposeSynchronousCursor(namespace, coll) {\n  const synchronousCursor = _getSynchronousCursor(coll.find({}));\n  if (synchronousCursor) {\n    namespace.SynchronousCursor = synchronousCursor.constructor;\n  }\n}\n\nfunction exposeOplogDriver(namespace, coll) {\n  const driver = _getObserverDriver(coll.find({}));\n  // verify observer driver is an oplog driver\n  if (driver && typeof driver.constructor.cursorSupported === \"function\") {\n    namespace.MongoOplogDriver = driver.constructor;\n  }\n}\n\nfunction exposePollingDriver(namespace, coll) {\n  const cursor = coll.find({}, { limit: 20, _disableOplog: true });\n  const driver = _getObserverDriver(cursor);\n  // verify observer driver is a polling driver\n  if (driver && typeof driver.constructor.cursorSupported === \"undefined\") {\n    namespace.MongoPollingDriver = driver.constructor;\n  }\n}\n\nfunction exposeMultiplexer(namespace, coll) {\n  const multiplexer = _getMultiplexer(coll.find({}));\n  if (multiplexer) {\n    namespace.Multiplexer = multiplexer.constructor;\n  }\n}\n\nfunction _getObserverDriver(cursor) {\n  const multiplexer = _getMultiplexer(cursor);\n  if (multiplexer && multiplexer._observeDriver) {\n    return multiplexer._observeDriver;\n  }\n}\n\nfunction _getMultiplexer(cursor) {\n  const handler = cursor.observeChanges({ added: Function.prototype });\n  handler.stop();\n  return handler._multiplexer;\n}\n\nfunction _getSynchronousCursor(cursor) {\n  cursor.fetch();\n  const synchronousCursor = cursor._synchronousCursor;\n  if (synchronousCursor) {\n    return synchronousCursor;\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/lamhieu_meteorx/src/server.js                                                       //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nFibers = Npm.require(\"fibers\");\n\nMeteorX = {};\nMeteorX._readyCallbacks = [];\nMeteorX._ready = false;\n\nMeteorX.onReady = function(cb) {\n  if (MeteorX._ready) {\n    return runWithAFiber(cb);\n  }\n\n  this._readyCallbacks.push(cb);\n};\n\nMeteorX.Server = Meteor.server.constructor;\nexposeLivedata(MeteorX);\n\n// before using any other MeteorX apis we need to hijack Mongo related code\n// that'w what we are doing here.\nMeteor.startup(function() {\n  runWithAFiber(function() {\n    exposeMongoLivedata(MeteorX);\n  });\n\n  MeteorX._readyCallbacks.forEach(function(fn) {\n    runWithAFiber(fn);\n  });\n  MeteorX._ready = true;\n});\n\nfunction runWithAFiber(cb) {\n  if (Fibers.current) {\n    cb();\n  } else {\n    new Fiber(cb).run();\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"lamhieu:meteorx\", {\n  MeteorX: MeteorX\n});\n\n})();\n","servePath":"/packages/lamhieu_meteorx.js"}]
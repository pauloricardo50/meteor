[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar HTTP = Package.http.HTTP;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"lmieulet:meteor-coverage\":{\"client\":{\"methods.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/lmieulet_meteor-coverage/client/methods.js                                        //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\nvar HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP: function (v) {\n    HTTP = v;\n  }\n}, 0);\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar stats = {\n  SUCCESS: 0,\n  FAILED: 0,\n  TOTAL: 0\n};\n\nMeteor.getStats = function () {\n  return stats;\n};\n\nMeteor.increaseSuccess = function () {\n  stats.SUCCESS++;\n};\n\nMeteor.increaseFailures = function () {\n  stats.FAILED++;\n};\n\nMeteor.increaseTotal = function () {\n  stats.TOTAL++;\n};\n\nMeteor.getCoverageObject = function () {\n  return global['__coverage__'];\n};\n\nMeteor.getCoverageReportObject = function (propertyKey, value) {\n  var coverageReport = {};\n  coverageReport[propertyKey] = value;\n  return JSON.stringify(coverageReport);\n};\n/**\n* Usage: Meteor.sendCoverage(function(stats,err) {console.log(stats,err);});\n*/\n\n\nMeteor.sendCoverage = function (callback) {\n  var coverageReport = {};\n  var globalCoverage = Meteor.getCoverageObject();\n\n  if (!globalCoverage) {\n    return callback(Meteor.getStats());\n  } // Send each property alone\n\n\n  for (var property in meteorBabelHelpers.sanitizeForInObject(globalCoverage)) {\n    /* istanbul ignore else */\n    if (globalCoverage.hasOwnProperty(property)) {\n      Meteor.increaseTotal();\n      HTTP.call('POST', '/coverage/client', {\n        content: Meteor.getCoverageReportObject(property, globalCoverage[property]),\n        headers: {\n          'Content-Type': 'application/json; charset=UTF-8'\n        }\n      }, function (error, res) {\n        if (error) {\n          Meteor.increaseFailures();\n        } else {\n          Meteor.increaseSuccess();\n        }\n\n        var stats = Meteor.getStats();\n        /* istanbul ignore else */\n\n        if (stats.SUCCESS + stats.FAILED === stats.TOTAL) {\n          if (stats.FAILED > 0) {\n            // This is bullshit. Should not be done like that\n            // Test runners test if the second params is a truth value, so let's use a number\n            return callback(stats, stats.FAILED);\n          }\n\n          return callback(stats);\n        }\n      });\n    }\n  }\n};\n/**\n* Usage: Meteor.exportCoverage(null, function(err) {console.log(err)})\n*/\n\n\nMeteor.exportCoverage = function (type, callback) {\n  var _arguments = arguments;\n\n  /* istanbul ignore next: ternary operator */\n  var url = type ? '/coverage/export/' + type : '/coverage/export';\n  HTTP.call('GET', url, {}, function (error, res) {\n    if (error) {\n      return callback('Error: ' + JSON.stringify(_arguments) + '. A server error occurred while trying to export coverage data');\n    }\n\n    try {\n      var result = JSON.parse(res.content);\n      /* istanbul ignore else */\n\n      if (result.type !== 'success') {\n        throw new Error('Error: ' + JSON.stringify(_arguments) + '. An unexpected error occurred while trying to export coverage data');\n      }\n\n      return callback();\n    } catch (e) {\n      return callback(e);\n    }\n  });\n};\n/**\n* Usage: Meteor.importCoverage(function(err) {console.log(err)})\n*/\n\n\nMeteor.importCoverage = function (callback) {\n  var _arguments2 = arguments;\n  HTTP.call('GET', '/coverage/import', {}, function (error, res) {\n    if (error) {\n      return callback(error, [error]);\n    }\n\n    try {\n      var result = JSON.parse(res.content);\n      /* istanbul ignore else */\n\n      if (result.type !== 'success') {\n        throw new Error('Error: ' + JSON.stringify(_arguments2) + '. An unexpected error occurred while trying to import coverage data');\n      }\n\n      return callback();\n    } catch (e) {\n      callback(e, [res]);\n    }\n  });\n};\n\nmodule.exportDefault(Meteor);\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".css\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/lmieulet:meteor-coverage/client/methods.js\");\n\n/* Exports */\nPackage._define(\"lmieulet:meteor-coverage\", exports);\n\n})();\n","servePath":"/packages/lmieulet_meteor-coverage.js","sourceMap":{"version":3,"sources":["packages/lmieulet:meteor-coverage/client/methods.js"],"names":["HTTP","module","link","v","Meteor","stats","SUCCESS","FAILED","TOTAL","getStats","increaseSuccess","increaseFailures","increaseTotal","getCoverageObject","global","getCoverageReportObject","propertyKey","value","coverageReport","JSON","stringify","sendCoverage","callback","globalCoverage","property","hasOwnProperty","call","content","headers","error","res","exportCoverage","type","url","arguments","result","parse","Error","e","importCoverage","exportDefault"],"mappings":"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","file":"/packages/lmieulet_meteor-coverage.js","sourcesContent":["import { HTTP } from 'meteor/http';\nimport { Meteor } from 'meteor/meteor';\n\nvar stats = {SUCCESS: 0, FAILED: 0, TOTAL: 0};\nMeteor.getStats = function () {\n  return stats;\n};\n\nMeteor.increaseSuccess = function () {\n  stats.SUCCESS++;\n};\n\nMeteor.increaseFailures = function () {\n  stats.FAILED++;\n};\n\nMeteor.increaseTotal = function () {\n  stats.TOTAL++;\n};\n\nMeteor.getCoverageObject = function () {\n  return global['__coverage__'];\n};\n\nMeteor.getCoverageReportObject = function (propertyKey, value) {\n  var coverageReport = {};\n  coverageReport[propertyKey] = value;\n\n  return JSON.stringify(coverageReport);\n};\n\n/**\n* Usage: Meteor.sendCoverage(function(stats,err) {console.log(stats,err);});\n*/\nMeteor.sendCoverage = function (callback) {\n  var coverageReport = {};\n\n  var globalCoverage = Meteor.getCoverageObject();\n  if (!globalCoverage) {\n    return callback(Meteor.getStats());\n  }\n\n  // Send each property alone\n  for (var property in globalCoverage) {\n    /* istanbul ignore else */\n    if (globalCoverage.hasOwnProperty(property)) {\n      Meteor.increaseTotal();\n\n      HTTP.call('POST', '/coverage/client', {\n        content: Meteor.getCoverageReportObject(property, globalCoverage[property]),\n        headers: {\n          'Content-Type': 'application/json; charset=UTF-8'\n        }\n      }, (error, res) => {\n        if (error) {\n          Meteor.increaseFailures();\n        } else {\n          Meteor.increaseSuccess();\n        }\n\n        var stats = Meteor.getStats();\n        /* istanbul ignore else */\n        if (stats.SUCCESS + stats.FAILED === stats.TOTAL) {\n          if (stats.FAILED > 0) {\n            // This is bullshit. Should not be done like that\n            // Test runners test if the second params is a truth value, so let's use a number\n            return callback(stats, stats.FAILED);\n          }\n          return callback(stats);\n        }\n      });\n    }\n  }\n};\n/**\n* Usage: Meteor.exportCoverage(null, function(err) {console.log(err)})\n*/\nMeteor.exportCoverage = function (type, callback) {\n  /* istanbul ignore next: ternary operator */\n  var url = type ? '/coverage/export/'+type : '/coverage/export';\n  HTTP.call('GET', url, {}, (error, res) => {\n    if (error) {\n      return callback('Error: '+JSON.stringify(arguments)+'. A server error occurred while trying to export coverage data');\n    }\n\n    try {\n      let result = JSON.parse(res.content);\n      /* istanbul ignore else */\n      if (result.type !== 'success') {\n        throw new Error('Error: '+JSON.stringify(arguments)+'. An unexpected error occurred while trying to export coverage data');\n      }\n\n      return callback();\n    } catch (e) {\n      return callback(e);\n    }\n  });\n};\n\n/**\n* Usage: Meteor.importCoverage(function(err) {console.log(err)})\n*/\nMeteor.importCoverage = function (callback) {\n  HTTP.call('GET', '/coverage/import', {}, (error, res) => {\n    if (error) {\n      return callback(error, [error]);\n    }\n\n    try {\n      let result = JSON.parse(res.content);\n      /* istanbul ignore else */\n      if (result.type !== 'success') {\n        throw new Error('Error: '+JSON.stringify(arguments)+'. An unexpected error occurred while trying to import coverage data');\n      }\n\n      return callback();\n    } catch (e) {\n      callback(e, [res]);\n    }\n  });\n};\n\nexport default Meteor;\n"]}}]
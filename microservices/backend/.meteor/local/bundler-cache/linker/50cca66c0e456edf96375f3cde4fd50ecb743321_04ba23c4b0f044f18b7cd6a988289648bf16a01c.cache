[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRoles = Package['alanning:roles'].Roles;\nCollection2 = Package['aldeed:collection2-core'].Collection2;\nFactory = Package['dburles:factory'].Factory;\nDDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\nInject = Package['meteorhacks:inject-initial'].Inject;\nMandrill = Package['wylio:mandrill'].Mandrill;\nSlingshot = Package['edgee:slingshot'].Slingshot;\nKadira = Package['lmachens:kadira'].Kadira;\nanalytics = Package['okgrow:analytics'].analytics;\nCollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nMigrations = Package['percolate:migrations'].Migrations;\nSyncedCron = Package['littledata:synced-cron'].SyncedCron;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"startup\":{\"server\":{\"fetchIrs10yCron.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/startup/server/fetchIrs10yCron.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet SyncedCron;\nmodule.link(\"meteor/littledata:synced-cron\", {\n  SyncedCron(v) {\n    SyncedCron = v;\n  }\n\n}, 1);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 2);\nlet logError;\nmodule.link(\"../../core/api/methods\", {\n  logError(v) {\n    logError = v;\n  }\n\n}, 3);\nlet irs10yFetch;\nmodule.link(\"../../core/api/irs10y/server/methods\", {\n  irs10yFetch(v) {\n    irs10yFetch = v;\n  }\n\n}, 4);\nlet CronitorService;\nmodule.link(\"../../core/api/cronitor/server/CronitorService\", {\n  default(v) {\n    CronitorService = v;\n  }\n\n}, 5);\nlet SlackService;\nmodule.link(\"../../core/api/slack/server/SlackService\", {\n  default(v) {\n    SlackService = v;\n  }\n\n}, 6);\n\nconst getRandomMinute = () => Math.floor(Math.random() * 49) + 10;\n\nconst jobName = 'Fetch IRS 10Y';\nconst cronitor = new CronitorService({\n  id: '19MCrQ'\n}); // Make this a function so that randomMinute is always different\n\nconst job = () => ({\n  name: jobName,\n\n  schedule(parser) {\n    const randomMinute = getRandomMinute();\n    const tomorrow = moment().add(1, 'days').format('dddd');\n    const parserText = `at 6:${randomMinute} on ${tomorrow}`;\n    const parsedText = parser.text(parserText);\n    return parsedText;\n  },\n\n  job() {\n    try {\n      cronitor.run().then(() => irs10yFetch.run({})).then(cronitor.complete).then(() => {\n        SyncedCron.remove(jobName);\n        SyncedCron.add(job());\n      }).catch(error => {\n        if (error.message && error.message.includes('existe déjà')) {\n          return cronitor.complete(error.message);\n        }\n\n        return cronitor.fail(error);\n      });\n    } catch (error) {\n      SlackService.sendError({\n        error,\n        additionalData: ['IRS 10Y CRON error']\n      });\n    }\n  }\n\n});\n\nSyncedCron.config({\n  logger: ({\n    level,\n    message,\n    tag\n  }) => {\n    if (Meteor.isProduction) {\n      console.log('---------------------- CRON LOG ----------------------');\n      console.log('Level', level);\n      console.log('Message', message);\n      console.log('Tag', tag);\n    }\n  }\n});\nSyncedCron.add(job());\nMeteor.startup(() => {\n  try {\n    SyncedCron.start();\n  } catch (error) {\n    logError.run({\n      error\n    });\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/startup/server/index.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.link(\"./startup\");\nmodule.link(\"../../core/api/server\");\nmodule.link(\"../../core/api/api\");\nmodule.link(\"../../core/fixtures\");\nmodule.link(\"../../core/startup/server/kadira\");\nmodule.link(\"../../core/startup/accounts-config\");\nmodule.link(\"./restAPI\");\nmodule.link(\"../../core/api/loans/server/expireLoansCron\");\nmodule.link(\"../../core/api/notifications/server/notificationGeneratorCron\");\nmodule.link(\"../../core/api/updateWatchers/server/updateWatcherCron\");\nmodule.link(\"./fetchIrs10yCron\");\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"restAPI.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/startup/server/restAPI.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet RESTAPI;\nmodule.link(\"../../core/api/RESTAPI/server/RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 1);\nlet getPropertyLoansAPI, getUserAPI, interestRatesAPI, inviteUserToPromotionAPI, inviteCustomerToProPropertiesAPI, mortgageEstimateAPI, referCustomerAPI, testEndpointAPI, updatePropertyAPI, insertPropertyAPI, uploadFileAPI, deleteFileAPI, getPropertyAPI;\nmodule.link(\"../../core/api/RESTAPI/server/endpoints\", {\n  getPropertyLoansAPI(v) {\n    getPropertyLoansAPI = v;\n  },\n\n  getUserAPI(v) {\n    getUserAPI = v;\n  },\n\n  interestRatesAPI(v) {\n    interestRatesAPI = v;\n  },\n\n  inviteUserToPromotionAPI(v) {\n    inviteUserToPromotionAPI = v;\n  },\n\n  inviteCustomerToProPropertiesAPI(v) {\n    inviteCustomerToProPropertiesAPI = v;\n  },\n\n  mortgageEstimateAPI(v) {\n    mortgageEstimateAPI = v;\n  },\n\n  referCustomerAPI(v) {\n    referCustomerAPI = v;\n  },\n\n  testEndpointAPI(v) {\n    testEndpointAPI = v;\n  },\n\n  updatePropertyAPI(v) {\n    updatePropertyAPI = v;\n  },\n\n  insertPropertyAPI(v) {\n    insertPropertyAPI = v;\n  },\n\n  uploadFileAPI(v) {\n    uploadFileAPI = v;\n  },\n\n  deleteFileAPI(v) {\n    deleteFileAPI = v;\n  },\n\n  getPropertyAPI(v) {\n    getPropertyAPI = v;\n  }\n\n}, 2);\nlet makeFileUploadDir, flushFileUploadDir;\nmodule.link(\"../../core/utils/filesUtils\", {\n  makeFileUploadDir(v) {\n    makeFileUploadDir = v;\n  },\n\n  flushFileUploadDir(v) {\n    flushFileUploadDir = v;\n  }\n\n}, 3);\nconst api = new RESTAPI();\napi.addEndpoint('/promotions/:promotionId/invite-customer', 'POST', inviteUserToPromotionAPI);\napi.addEndpoint('/properties/invite-customer', 'POST', inviteCustomerToProPropertiesAPI);\napi.addEndpoint('/properties/:propertyId/loans', 'GET', getPropertyLoansAPI);\napi.addEndpoint('/properties/:propertyId', 'POST', updatePropertyAPI);\napi.addEndpoint('/users', 'POST', referCustomerAPI);\napi.addEndpoint('/users', 'GET', getUserAPI);\napi.addEndpoint('/test', 'POST', testEndpointAPI);\napi.addEndpoint('/test', 'GET', testEndpointAPI);\napi.addEndpoint('/test', 'PUT', testEndpointAPI);\napi.addEndpoint('/test', 'DELETE', testEndpointAPI);\napi.addEndpoint('/test/:id', 'POST', testEndpointAPI);\napi.addEndpoint('/test/:id', 'GET', testEndpointAPI);\napi.addEndpoint('/test/:id', 'PUT', testEndpointAPI);\napi.addEndpoint('/test/:id', 'DELETE', testEndpointAPI);\napi.addEndpoint('/interest-rates/latest', 'GET', interestRatesAPI);\napi.addEndpoint('/calculator/mortgage-estimate', 'GET', mortgageEstimateAPI);\napi.addEndpoint('/properties', 'POST', insertPropertyAPI);\napi.addEndpoint('/upload', 'POST', uploadFileAPI, {\n  multipart: true\n});\napi.addEndpoint('/deleteFile', 'POST', deleteFileAPI);\napi.addEndpoint('/properties/:propertyId', 'GET', getPropertyAPI);\nMeteor.startup(() => {\n  makeFileUploadDir();\n  flushFileUploadDir();\n  api.start();\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"startup.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/startup/server/startup.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.microservice = 'backend';\n\nif (Meteor.isAppTest) {\n  Meteor.isTest = true;\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"core\":{\"api\":{\"server\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/server/index.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport '../initialization';\n\nimport '../../fixtures/server/fixtureMethods';\n\nimport '../users/server/accounts-server-config';\n\nimport '../methods/server';\nimport '../methods';\n\nimport '../factories';\n\nimport '../files/server/methods';\nimport '../files/server/meteor-slingshot-server';\n\nimport '../email/server';\n\nimport '../events/server/registerServerListeners';\n\nimport '../links';\nimport '../reducers/registerReducers';\n\nimport './grapher-live';\nimport './hooks';\nimport '../queries/server';\nimport './reducers';\nimport './mongoIndexes';\nimport './caches';\n\nimport { COLLECTIONS } from '../constants';\nimport BorrowerService from '../borrowers/server/BorrowerService';\nimport ContactService from '../contacts/server/ContactService';\nimport InterestRatesService from '../interestRates/server/InterestRatesService';\nimport Irs10yService from '../irs10y/server/Irs10yService';\nimport LenderService from '../lenders/server/LenderService';\nimport LoanService from '../loans/server/LoanService';\nimport LotService from '../lots/server/LotService';\nimport MortgageNoteService from '../mortgageNotes/server/MortgageNoteService';\nimport OfferService from '../offers/server/OfferService';\nimport PromotionLotService from '../promotionLots/server/PromotionLotService';\nimport PromotionOptionService from '../promotionOptions/server/PromotionOptionService';\nimport PromotionService from '../promotions/server/PromotionService';\nimport PropertyService from '../properties/server/PropertyService';\nimport TaskService from '../tasks/server/TaskService';\nimport UserService from '../users/server/UserService';\nimport SlackService from '../slack/server/SlackService';\nimport LenderRulesService from '../lenderRules/server/LenderRulesService';\nimport RevenueService from '../revenues/server/RevenueService';\nimport '../liveSync';\n\nprocess.on('uncaughtException', (error) => {\n  if (!Meteor.isProduction) {\n    console.log('uncaughtException error', JSON.stringify(error, null, 2));\n  }\n  SlackService.sendError({\n    error,\n    additionalData: ['Server uncaughtException'],\n  });\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (error) => {\n  if (!Meteor.isProduction) {\n    console.log('unhandledRejection error', JSON.stringify(error, null, 2));\n  }\n  SlackService.sendError({\n    error,\n    additionalData: ['Server unhandledRejection'],\n  });\n});\n\nexport const Services = {\n  [COLLECTIONS.LOANS_COLLECTION]: LoanService,\n  [COLLECTIONS.PROPERTIES_COLLECTION]: PropertyService,\n  [COLLECTIONS.BORROWERS_COLLECTION]: BorrowerService,\n  [COLLECTIONS.LOTS_COLLECTION]: LotService,\n  [COLLECTIONS.OFFERS_COLLECTION]: OfferService,\n  [COLLECTIONS.PROMOTION_LOTS_COLLECTION]: PromotionLotService,\n  [COLLECTIONS.PROMOTIONS_COLLECTION]: PromotionService,\n  [COLLECTIONS.PROMOTION_OPTIONS_COLLECTION]: PromotionOptionService,\n  [COLLECTIONS.USERS_COLLECTION]: UserService,\n  [COLLECTIONS.TASKS_COLLECTION]: TaskService,\n  [COLLECTIONS.INTEREST_RATES_COLLECTION]: InterestRatesService,\n  [COLLECTIONS.IRS10Y_COLLECTION]: Irs10yService,\n  [COLLECTIONS.MORTGAGE_NOTES_COLLECTION]: MortgageNoteService,\n  [COLLECTIONS.CONTACTS_COLLECTION]: ContactService,\n  [COLLECTIONS.LENDERS_COLLECTION]: LenderService,\n  [COLLECTIONS.LENDER_RULES_COLLECTION]: LenderRulesService,\n  [COLLECTIONS.REVENUES_COLLECTION]: RevenueService,\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"grapher-live.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/server/grapher-live.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nconst isDev = false; // process.env.NODE_ENV === 'development';\n\nMeteor.startup(() => {\n  const enableGrapherLive = false;\n\n  if (isDev && enableGrapherLive) {\n    const { initialize } = require('meteor/cultofcoders:grapher-live');\n    initialize(); // exposes a method \"grapher_live\", used by the React Component\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/server/hooks.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport '../activities/server/hooks';\nimport '../borrowers/server/hooks';\nimport '../contacts/server/hooks';\nimport '../loans/server/hooks';\nimport '../mortgageNotes/server/hooks';\nimport '../offers/server/hooks';\nimport '../organisations/server/hooks';\nimport '../promotionOptions/server/hooks';\nimport '../promotions/server/hooks';\nimport '../properties/server/hooks';\nimport '../revenues/server/hooks';\nimport '../tasks/server/hooks';\nimport '../users/server/hooks';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/server/reducers.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport '../borrowers/server/serverReducers';\nimport '../contacts/server/serverReducers';\nimport '../loans/server/serverReducers';\nimport '../lots/server/serverReducers';\nimport '../offers/server/serverReducers';\nimport '../organisations/server/serverReducers';\nimport '../promotionLots/server/serverReducers';\nimport '../promotionOptions/server/serverReducers';\nimport '../promotions/server/serverReducers';\nimport '../properties/server/serverReducers';\nimport '../tasks/server/serverReducers';\nimport '../users/server/serverReducers';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"mongoIndexes.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/server/mongoIndexes.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Loans, Borrowers, Offers, Properties, Tasks, Users } from '..';\n\nLoans._ensureIndex({ userId: 1 });\nBorrowers._ensureIndex({ userId: 1 });\nOffers._ensureIndex({ loanId: 1 });\nProperties._ensureIndex({ userId: 1 });\nTasks._ensureIndex({ docId: 1 });\nUsers._ensureIndex({ referredByUserLink: 1 });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"caches.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/server/caches.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { migrate } from 'meteor/herteby:denormalize';\n\nimport { Organisations, LenderRules, Properties, Loans } from '..';\n\nOrganisations.cacheCount({\n  collection: LenderRules,\n  referenceField: 'organisationLink._id',\n  cacheField: 'lenderRulesCount',\n});\n\nProperties.cacheCount({\n  collection: Loans,\n  referenceField: 'propertyIds',\n  cacheField: 'loanCount',\n});\n\nMeteor.startup(() => {\n  migrate('properties', 'loanCount', { loanCount: { $exists: false } });\n  // migrate('revenues', 'loanCache', { loanCache: { $exists: false } });\n  //\n  // Old migrations\n  //\n  // migrate('users', 'assignedEmployeeCache', {\n  //   $or: [\n  //     { 'assignedEmployeeCache.lastName': { $exists: false } },\n  //     { 'assignedEmployeeCache.firstName': { $exists: false } },\n  //   ],\n  // });\n  // migrate('loans', 'userCache', { 'userCache._id': { $exists: false } });\n  // migrate('loans', 'lendersCache', { lendersCache: { $exists: false } });\n  // migrate('loans', 'tasksCache', { tasksCache: { $exists: false } });\n  // migrate('offers', 'lenderCache', { lenderCache: { $exists: false } });\n  // migrate('lenderRules', 'organisationCache', {\n  //   'organisationCache._id': { $exists: false },\n  // });\n  // migrate('organisations', 'lenderRulesCount', {\n  //   lenderRulesCount: { $exists: false },\n  // });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"initialization.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/initialization.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Leave this imported here for autoforms to work\nimport 'uniforms-bridge-simple-schema-2';\nimport SimpleSchema from 'simpl-schema';\n\nSimpleSchema.extendOptions([\n  'condition',\n  'customAllowedValues',\n  'customAutoValue',\n]);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"constants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/constants.js                                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { BORROWERS_COLLECTION } from './borrowers/borrowerConstants';\nimport { LOANS_COLLECTION } from './loans/loanConstants';\nimport { LOTS_COLLECTION } from './lots/lotConstants';\nimport { OFFERS_COLLECTION } from './offers/offerConstants';\nimport { ORGANISATIONS_COLLECTION } from './organisations/organisationConstants';\nimport { PROMOTION_LOTS_COLLECTION } from './promotionLots/promotionLotConstants';\nimport { PROMOTION_OPTIONS_COLLECTION } from './promotionOptions/promotionOptionConstants';\nimport { PROMOTIONS_COLLECTION } from './promotions/promotionConstants';\nimport { PROPERTIES_COLLECTION } from './properties/propertyConstants';\nimport { TASKS_COLLECTION } from './tasks/taskConstants';\nimport { USERS_COLLECTION } from './users/userConstants';\nimport { INTEREST_RATES_COLLECTION } from './interestRates/interestRatesConstants';\nimport { IRS10Y_COLLECTION } from './irs10y/irs10yConstants';\nimport { MORTGAGE_NOTES_COLLECTION } from './mortgageNotes/mortgageNoteConstants';\nimport { CONTACTS_COLLECTION } from './contacts/contactsConstants';\nimport { LENDERS_COLLECTION } from './lenders/lenderConstants';\nimport { LENDER_RULES_COLLECTION } from './lenderRules/lenderRulesConstants';\nimport { REVENUES_COLLECTION } from './revenues/revenueConstants';\n\nexport * from './borrowers/borrowerConstants';\nexport * from './contacts/contactsConstants';\nexport * from './email/emailConstants';\nexport * from './files/fileConstants';\nexport * from './helpers/sharedSchemaConstants';\nexport * from './interestRates/interestRatesConstants';\nexport * from './irs10y/irs10yConstants';\nexport * from './lenderRules/lenderRulesConstants';\nexport * from './lenders/lenderConstants';\nexport * from './loans/loanConstants';\nexport * from './lots/lotConstants';\nexport * from './mortgageNotes/mortgageNoteConstants';\nexport * from './offers/offerConstants';\nexport * from './organisations/organisationConstants';\nexport * from './pdf/pdfConstants';\nexport * from './promotionLots/promotionLotConstants';\nexport * from './promotionOptions/promotionOptionConstants';\nexport * from './promotions/promotionConstants';\nexport * from './properties/propertyConstants';\nexport * from './revenues/revenueConstants';\nexport * from './security/constants';\nexport * from './tasks/taskConstants';\nexport * from './updateWatchers/updateWatcherConstants';\nexport * from './users/userConstants';\n\nexport const SUCCESS = 'SUCCESS';\nexport const WARNING = 'WARNING';\nexport const ERROR = 'ERROR';\n\n// Preserve order, as we sometimes loop over these, and the most common\n// collections should come first\nexport const COLLECTIONS = {\n  LOANS_COLLECTION,\n  BORROWERS_COLLECTION,\n  PROPERTIES_COLLECTION,\n  PROMOTIONS_COLLECTION,\n  LOTS_COLLECTION,\n  PROMOTION_OPTIONS_COLLECTION,\n  PROMOTION_LOTS_COLLECTION,\n  TASKS_COLLECTION,\n  OFFERS_COLLECTION,\n  ORGANISATIONS_COLLECTION,\n  USERS_COLLECTION,\n  INTEREST_RATES_COLLECTION,\n  IRS10Y_COLLECTION,\n  MORTGAGE_NOTES_COLLECTION,\n  CONTACTS_COLLECTION,\n  LENDERS_COLLECTION,\n  LENDER_RULES_COLLECTION,\n  REVENUES_COLLECTION,\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"borrowers\":{\"borrowerConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/borrowerConstants.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nexport const BORROWERS_COLLECTION = 'borrowers';\n\nexport const RESIDENCY_PERMIT = {\n  B: 'b',\n  C: 'c',\n  CI: 'ci',\n  F: 'f',\n  G: 'g',\n  L: 'l',\n  N: 'n',\n  S: 's',\n  NONE: 'none',\n};\n\nexport const GENDER = {\n  M: 'M',\n  F: 'F',\n  OTHER: 'OTHER',\n};\n\nexport const CIVIL_STATUS = {\n  MARRIED: 'MARRIED',\n  SINGLE: 'SINGLE',\n  PACSED: 'PACSED',\n  DIVORCED: 'DIVORCED',\n  WIDOW: 'WIDOW',\n};\n\nexport const OTHER_INCOME = {\n  WELFARE: 'WELFARE',\n  PENSIONS: 'PENSIONS',\n  // REAL_ESTATE: 'REAL_ESTATE',\n  // INVESTMENT: 'INVESTMENT', // We probably don't need this\n  OTHER: 'OTHER',\n};\n\nexport const EXPENSES = {\n  LEASING: 'LEASING',\n  PERSONAL_LOAN: 'PERSONAL_LOAN',\n  PENSIONS: 'PENSIONS',\n  THIRD_PARTY_FORTUNE_REIMBURSEMENT: 'THIRD_PARTY_FORTUNE_REIMBURSEMENT',\n  OTHER: 'OTHER',\n};\n\nexport const BORROWER_QUERIES = {\n  ADMIN_BORROWERS: 'ADMIN_BORROWERS',\n  BORROWER_SEARCH: 'BORROWER_SEARCH',\n};\n\nexport const OWN_FUNDS_TYPES = {\n  BANK_FORTUNE: 'bankFortune',\n  INSURANCE_2: 'insurance2',\n  INSURANCE_3A: 'insurance3A',\n  BANK_3A: 'bank3A',\n  INSURANCE_3B: 'insurance3B',\n  THIRD_PARTY_FORTUNE: 'thirdPartyFortune',\n};\n\nexport const RETIREMENT_AGE = {\n  [GENDER.M]: 65,\n  [GENDER.F]: 64,\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"BorrowerSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/schemas/BorrowerSchema.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\nimport {\n  createdAt,\n  updatedAt,\n  additionalDocuments,\n  mortgageNoteLinks,\n  documentsField,\n} from '../../helpers/sharedSchemas';\nimport { initialDocuments } from '../borrowersAdditionalDocuments';\nimport {\n  personalInfoSchema,\n  financeInfoSchema,\n  ownCompaniesSchema,\n} from './otherSchemas';\n\n// Documentation is in the google drive dev/MongoDB Schemas\nconst BorrowerSchema = new SimpleSchema({\n  userId: {\n    type: String,\n    optional: true,\n  },\n  createdAt,\n  updatedAt,\n  admin: {\n    // TODO\n    type: Object,\n    optional: true,\n  },\n  adminValidation: {\n    type: Object,\n    defaultValue: {},\n    blackbox: true,\n  },\n  documents: documentsField,\n  ...personalInfoSchema,\n  ...financeInfoSchema,\n  ...additionalDocuments(initialDocuments),\n  ...mortgageNoteLinks,\n  ...ownCompaniesSchema,\n});\n\nconst protectedKeys = [\n  '_id',\n  'additionalDocuments',\n  'admin',\n  'adminValidation',\n  'createdAt',\n  'logic',\n  'mortgageNoteLinks',\n  'updatedAt',\n  'userId',\n  'documents',\n];\n\nexport const BorrowerSchemaAdmin = BorrowerSchema.omit(...protectedKeys);\nexport default BorrowerSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"otherSchemas.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/schemas/otherSchemas.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\n\nimport {\n  percentageField,\n  moneyField,\n  address,\n} from '../../helpers/sharedSchemas';\nimport {\n  RESIDENCY_PERMIT,\n  GENDER,\n  CIVIL_STATUS,\n  OTHER_INCOME,\n  EXPENSES,\n  OWN_FUNDS_TYPES,\n} from '../borrowerConstants';\nimport { RESIDENCE_TYPE } from '../../constants';\nimport { CUSTOM_AUTOFIELD_TYPES } from '../../../components/AutoForm2/constants';\n\nconst makeArrayOfObjectsSchema = (name, allowedValues) => ({\n  [name]: { type: Array, defaultValue: [], optional: true },\n  [`${name}.$`]: Object,\n  [`${name}.$.value`]: { ...moneyField, optional: false },\n  [`${name}.$.description`]: {\n    type: String,\n    optional: true,\n    allowedValues,\n    uniforms: {\n      displayEmpty: false,\n      intlId: `${name}.description`,\n      allowedValuesIntlId: name,\n    },\n  },\n});\n\nexport const personalInfoSchema = {\n  firstName: { type: String, optional: true },\n  lastName: { type: String, optional: true },\n  gender: {\n    type: String,\n    optional: true,\n    allowedValues: Object.values(GENDER),\n    uniforms: { displayEmpty: false },\n  },\n  birthDate: {\n    type: Date,\n    optional: true,\n    uniforms: { type: CUSTOM_AUTOFIELD_TYPES.DATE },\n  },\n  ...address,\n  sameAddress: { type: Boolean, optional: true },\n  isSwiss: { type: Boolean, optional: true },\n  residencyPermit: {\n    type: String,\n    optional: true,\n    allowedValues: Object.values(RESIDENCY_PERMIT),\n    uniforms: { displayEmpty: false },\n  },\n  citizenship: { type: String, optional: true },\n  isUSPerson: { type: Boolean, optional: true },\n  civilStatus: {\n    type: String,\n    allowedValues: Object.values(CIVIL_STATUS),\n    optional: true,\n    uniforms: { displayEmpty: false },\n  },\n  childrenCount: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n    max: 20,\n  },\n  company: { type: String, optional: true },\n};\n\nexport const financeInfoSchema = {\n  salary: moneyField,\n  netSalary: moneyField,\n  bonusExists: { type: Boolean, optional: true },\n  bonus2015: moneyField,\n  bonus2016: moneyField,\n  bonus2017: moneyField,\n  bonus2018: moneyField,\n  bonus2019: moneyField,\n  [OWN_FUNDS_TYPES.BANK_FORTUNE]: moneyField,\n  ...makeArrayOfObjectsSchema(OWN_FUNDS_TYPES.INSURANCE_2),\n  ...makeArrayOfObjectsSchema(OWN_FUNDS_TYPES.INSURANCE_3A),\n  ...makeArrayOfObjectsSchema(OWN_FUNDS_TYPES.BANK_3A),\n  ...makeArrayOfObjectsSchema(OWN_FUNDS_TYPES.INSURANCE_3B),\n  [OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE]: moneyField,\n  ...makeArrayOfObjectsSchema('otherIncome', Object.values(OTHER_INCOME)),\n  'otherIncome.$.comment': { type: String, optional: true },\n  ...makeArrayOfObjectsSchema('otherFortune'),\n  ...makeArrayOfObjectsSchema('expenses', Object.values(EXPENSES)),\n  'expenses.$.comment': { type: String, optional: true },\n  ...makeArrayOfObjectsSchema('realEstate', Object.values(RESIDENCE_TYPE)),\n  'realEstate.$.loan': { ...moneyField, optional: false },\n  'realEstate.$.name': { type: String, optional: true },\n  'realEstate.$.income': { ...moneyField, optional: true, defaultValue: 0 },\n};\n\nexport const ownCompaniesSchema = {\n  hasOwnCompany: { type: Boolean, optional: true },\n  ownCompanies: { type: Array, defaultValue: [], optional: true },\n  'ownCompanies.$': Object,\n  'ownCompanies.$.description': { type: String, optional: false },\n  'ownCompanies.$.ownership': percentageField,\n  'ownCompanies.$.netIncome2016': moneyField,\n  'ownCompanies.$.netIncome2017': moneyField,\n  'ownCompanies.$.netIncome2018': moneyField,\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"borrowersAdditionalDocuments.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/borrowersAdditionalDocuments.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { DOCUMENTS } from '../files/fileConstants';\nimport * as borrowerConstants from './borrowerConstants';\n\nexport const initialDocuments = [\n  { id: DOCUMENTS.IDENTITY },\n  { id: DOCUMENTS.DEBT_COLLECTION_REGISTER_EXTRACT },\n  { id: DOCUMENTS.TAXES },\n  { id: DOCUMENTS.SALARY_CERTIFICATE },\n  { id: DOCUMENTS.LAST_SALARIES },\n  { id: DOCUMENTS.OWN_FUNDS_JUSTIFICATION },\n];\n\nexport const conditionalDocuments = [\n  {\n    id: DOCUMENTS.RESIDENCY_PERMIT,\n    condition: ({ doc: { isSwiss } }) => isSwiss === false,\n  },\n  {\n    id: DOCUMENTS.DIVORCE_RULING,\n    condition: ({ doc: { civilStatus } }) =>\n      civilStatus === borrowerConstants.CIVIL_STATUS.DIVORCED,\n  },\n  {\n    id: DOCUMENTS.BONUSES,\n    condition: ({ doc: { bonusExists } }) => bonusExists === true,\n  },\n  {\n    id: DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT,\n    condition: ({ doc: { insurance2 } }) => insurance2 && insurance2.length > 0,\n  },\n  {\n    id: DOCUMENTS.THIRD_PILLAR_ACCOUNTS,\n    condition: ({ doc: { insurance3A, insurance3B, bank3A } }) =>\n      (insurance3A && insurance3A.length > 0)\n      || (insurance3B && insurance3B.length > 0)\n      || (bank3A && bank3A.length > 0),\n  },\n  {\n    id: DOCUMENTS.CURRENT_MORTGAGES,\n    condition: ({ doc: { realEstate } }) =>\n      realEstate\n      && realEstate.length > 0\n      && realEstate.some(({ loan }) => loan > 0),\n  },\n  {\n    id: DOCUMENTS.EXPENSES_JUSTIFICATION,\n    condition: ({ doc: { expenses } }) => expenses && expenses.length > 0,\n  },\n  {\n    id: DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION,\n    condition: ({ doc: { otherFortune } }) =>\n      otherFortune && otherFortune.length > 0,\n  },\n  {\n    id: DOCUMENTS.OTHER_INCOME_JUSTIFICATION,\n    condition: ({ doc: { otherIncome } }) =>\n      otherIncome && otherIncome.length > 0,\n  },\n];\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/index.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './borrowers';\nexport * from './methodDefinitions';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"borrowers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/borrowers.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\nimport { BORROWERS_COLLECTION } from './borrowerConstants';\nimport BorrowerSchema from './schemas/BorrowerSchema';\n\nconst Borrowers = new Mongo.Collection(BORROWERS_COLLECTION);\n\n// Prevent all client side modifications of mongoDB\nBorrowers.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nBorrowers.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nBorrowers.attachSchema(BorrowerSchema);\nexport default Borrowers;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/methodDefinitions.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const borrowerInsert = new Method({\n  name: 'borrowerInsert',\n  params: { borrower: Object, userId: Match.Optional(String) },\n});\n\nexport const borrowerUpdate = new Method({\n  name: 'borrowerUpdate',\n  params: { borrowerId: String, object: Object },\n});\n\nexport const borrowerDelete = new Method({\n  name: 'borrowerDelete',\n  params: { borrowerId: String, loanId: Match.Optional(String) },\n});\n\nexport const pushBorrowerValue = new Method({\n  name: 'pushBorrowerValue',\n  params: { borrowerId: String, object: Object },\n});\n\nexport const popBorrowerValue = new Method({\n  name: 'popBorrowerValue',\n  params: { borrowerId: String, object: Object },\n});\n\nexport const pullBorrowerValue = new Method({\n  name: 'pullBorrowerValue',\n  params: { borrowerId: String, object: Object },\n});\n\nexport const getReusableBorrowers = new Method({\n  name: 'getReusableBorrowers',\n  params: { loanId: String, borrowerId: String },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"BorrowerService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/server/BorrowerService.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Borrowers from '../borrowers';\nimport LoanService from '../../loans/server/LoanService';\nimport CollectionService from '../../helpers/CollectionService';\nimport { loanBorrower } from '../../fragments';\n\nexport class BorrowerService extends CollectionService {\n  constructor() {\n    super(Borrowers);\n  }\n\n  get(borrowerId) {\n    return this.fetchOne({ $filters: { _id: borrowerId }, ...loanBorrower() });\n  }\n\n  update = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $set: object });\n\n  insert = ({ borrower = {}, userId }) =>\n    Borrowers.insert({ ...borrower, userId });\n\n  remove = ({ borrowerId, loanId }) => {\n    LoanService.cleanupRemovedBorrower({ borrowerId });\n    const borrower = this.get(borrowerId);\n    if (borrower.loans && borrower.loans.length > 1) {\n      const loansLink = this.getLink(borrowerId, 'loans');\n      if (loanId) {\n        // Fix this conditional when the issue has been dealt with\n        // https://github.com/cult-of-coders/grapher/issues/332\n        loansLink.remove(loanId);\n      } else {\n        // Only admins can remove a borrower that has multiple loans\n        return Borrowers.remove(borrowerId);\n      }\n    } else {\n      return Borrowers.remove(borrowerId);\n    }\n  };\n\n  pushValue = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $push: object });\n\n  popValue = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $pop: object });\n\n  pullValue = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $pull: object });\n\n  getReusableBorrowers({ loanId, borrowerId }) {\n    // borrowerId can be the previous removed borrower, and therefore\n    // this line will fail if we don't provide a default empty object\n    const { userId, loans } = this.get(borrowerId) || {};\n    if (!userId) {\n      return { borrowers: [], isLastLoan: true };\n    }\n\n    const userBorrowers = this.fetch({\n      $filters: { userId },\n      name: 1,\n      loans: { name: 1 },\n    });\n    const loan = LoanService.get(loanId);\n    const isLastLoan = loans && loans.length === 1 && loans[0]._id === loanId;\n\n    const borrowersNotOnLoan = userBorrowers.filter(({ _id }) => !loan.borrowerIds.includes(_id));\n\n    return { borrowers: borrowersNotOnLoan, isLastLoan };\n  }\n\n  cleanUpMortgageNotes({ borrowerId }) {\n    const { mortgageNotes = [], loans = [] } = this.fetchOne({\n      $filters: { _id: borrowerId },\n      mortgageNotes: { _id: 1 },\n      loans: { structures: 1 },\n    });\n    const borrowerMortgageNoteIds = mortgageNotes.map(({ _id }) => _id);\n\n    loans.forEach(({ _id: loanId, structures = [] }) => {\n      structures.forEach(({ id: structureId, mortgageNoteIds = [] }) => {\n        LoanService.updateStructure({\n          loanId,\n          structureId,\n          structure: {\n            mortgageNoteIds: mortgageNoteIds.filter(id => !borrowerMortgageNoteIds.includes(id)),\n          },\n        });\n      });\n    });\n  }\n}\n\nexport default new BorrowerService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/server/methods.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport BorrowerService from './BorrowerService';\nimport {\n  borrowerInsert,\n  borrowerUpdate,\n  borrowerDelete,\n  pushBorrowerValue,\n  popBorrowerValue,\n  pullBorrowerValue,\n  getReusableBorrowers,\n} from '../methodDefinitions';\nimport { checkInsertUserId } from '../../helpers/server/methodServerHelpers';\n\nborrowerInsert.setHandler((context, { borrower, userId }) =>\n  BorrowerService.insert({\n    borrower,\n    userId: checkInsertUserId(userId),\n  }));\n\nborrowerUpdate.setHandler((context, params) => {\n  SecurityService.borrowers.isAllowedToUpdate(params.borrowerId);\n  return BorrowerService.update(params);\n});\n\nborrowerDelete.setHandler((context, params) => {\n  if (!params.loanId) {\n    SecurityService.checkCurrentUserIsAdmin();\n  } else {\n    SecurityService.borrowers.isAllowedToDelete(params.borrowerId);\n  }\n  return BorrowerService.remove(params);\n});\n\npushBorrowerValue.setHandler((context, params) => {\n  SecurityService.borrowers.isAllowedToUpdate(params.borrowerId);\n  return BorrowerService.pushValue(params);\n});\n\npopBorrowerValue.setHandler((context, params) => {\n  SecurityService.borrowers.isAllowedToUpdate(params.borrowerId);\n  return BorrowerService.popValue(params);\n});\n\npullBorrowerValue.setHandler((context, params) => {\n  SecurityService.borrowers.isAllowedToUpdate(params.borrowerId);\n  return BorrowerService.pullValue(params);\n});\n\ngetReusableBorrowers.setHandler((context, params) => {\n  SecurityService.loans.isAllowedToUpdate(params.loanId);\n  return BorrowerService.getReusableBorrowers({ ...params });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/server/hooks.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { ROLES } from '../../constants';\nimport { additionalDocumentsHook } from '../../helpers/sharedHooks';\nimport UpdateWatcherService from '../../updateWatchers/server/UpdateWatcherService';\nimport SecurityService from '../../security';\nimport FileService from '../../files/server/FileService';\nimport { BorrowerSchemaAdmin } from '../schemas/BorrowerSchema';\nimport Borrowers from '../borrowers';\nimport { BORROWERS_COLLECTION } from '../borrowerConstants';\nimport {\n  initialDocuments,\n  conditionalDocuments,\n} from '../borrowersAdditionalDocuments';\nimport BorrowerService from './BorrowerService';\n\nBorrowers.after.insert(additionalDocumentsHook({\n  collection: BORROWERS_COLLECTION,\n  initialDocuments,\n  conditionalDocuments,\n}));\n\nBorrowers.after.update(additionalDocumentsHook({\n  collection: BORROWERS_COLLECTION,\n  initialDocuments,\n  conditionalDocuments,\n}));\n\n// Clean up mortgagenotes from all structures that come from this borrower\nBorrowers.before.remove((userId, { _id: borrowerId }) => {\n  BorrowerService.cleanUpMortgageNotes({ borrowerId });\n});\n\nUpdateWatcherService.addUpdateWatching({\n  collection: Borrowers,\n  fields: BorrowerSchemaAdmin._schemaKeys,\n  shouldWatch: ({ userId }) =>\n    SecurityService.hasRole(userId, ROLES.USER)\n    || SecurityService.hasRole(userId, ROLES.PRO),\n});\n\nBorrowers.after.remove((userId, { _id }) =>\n  FileService.deleteAllFilesForDoc(_id));\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/server/exposures.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { adminBorrowers, borrowerSearch } from '../queries';\n\nexposeQuery({\n  query: adminBorrowers,\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: borrowerSearch,\n  overrides: { validateParams: { searchQuery: Match.Maybe(String) } },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/server/serverReducers.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Borrowers from '../borrowers';\nimport assigneeReducer from '../../reducers/assigneeReducer';\n\nBorrowers.addReducers({ ...assigneeReducer() });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"fakes.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/fakes.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { OTHER_INCOME, EXPENSES } from './borrowerConstants';\nimport { RESIDENCE_TYPE } from '../constants';\n\nexport const emptyFakeBorrower = {};\n\nexport const fakeBorrower = {\n  firstName: 'Marie',\n  lastName: 'Rochat',\n  gender: 'F',\n  address1: 'Chemin du Mont 3',\n  zipCode: 1400,\n  city: 'Yverdon-les-Bains',\n  citizenships: 'Suisse, Français',\n  birthDate: '1980-03-01',\n  birthPlace: 'Lausanne',\n  civilStatus: 'SINGLE',\n  childrenCount: 2,\n  company: 'Deloitte',\n  personalBank: 'BCGE',\n  isSwiss: true,\n  isUSPerson: false,\n  worksForOwnCompany: false,\n  sameAddress: true,\n};\n\nexport const completeFakeBorrower = {\n  ...fakeBorrower,\n  salary: 300000,\n  bonusExists: true,\n  bonus2015: 15490,\n  bonus2016: 11140,\n  bonus2017: 13780,\n  bonus2018: 12300,\n  otherIncome: [\n    {\n      value: 10000,\n      description: OTHER_INCOME.PENSIONS,\n    },\n  ],\n  expenses: [\n    {\n      value: 3000,\n      description: EXPENSES.LEASING,\n    },\n    {\n      value: 4000,\n      description: EXPENSES.PERSONAL_LOAN,\n    },\n  ],\n  realEstate: [\n    {\n      value: 433000,\n      loan: 240000,\n      description: RESIDENCE_TYPE.MAIN_RESIDENCE,\n    },\n  ],\n  bankFortune: 300000,\n  insurance2: [{ value: 120000, description: 'Allianz' }],\n  insurance3A: [{ value: 50000, description: 'Swisslife' }],\n  logic: {},\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/links.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Borrowers from './borrowers';\nimport { Loans, Users, MortgageNotes } from '..';\n\nBorrowers.addLinks({\n  user: {\n    field: 'userId',\n    collection: Users,\n    type: 'one',\n  },\n  loans: {\n    collection: Loans,\n    inversedBy: 'borrowers',\n  },\n  mortgageNotes: {\n    field: 'mortgageNoteLinks',\n    collection: MortgageNotes,\n    type: 'many',\n    metadata: true,\n    autoremove: true,\n    unique: true,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/reducers.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport addressReducer from '../reducers/addressReducer';\nimport Borrowers from './borrowers';\n\nBorrowers.addReducers({\n  name: {\n    body: {\n      firstName: 1,\n      lastName: 1,\n    },\n    reduce: ({ firstName, lastName }) =>\n      [firstName, lastName].filter(x => x).join(' '),\n  },\n  age: {\n    body: { birthDate: 1 },\n    reduce: ({ birthDate }) => {\n      const age = Math.floor((new Date() - new Date(birthDate)) / 1000 / 60 / 60 / 24 / 365.25);\n      return age;\n    },\n  },\n  ...addressReducer,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/borrowers/queries.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport {\n  createRegexQuery,\n  generateMatchAnyWordRegexp,\n} from '../helpers/mongoHelpers';\nimport { adminBorrower } from '../fragments';\nimport { BORROWER_QUERIES } from './borrowerConstants';\nimport Borrowers from '.';\n\nexport const adminBorrowers = Borrowers.createQuery(\n  BORROWER_QUERIES.ADMIN_BORROWERS,\n  adminBorrower(),\n  { scoped: true },\n);\n\nexport const borrowerSearch = Borrowers.createQuery(\n  BORROWER_QUERIES.BORROWER_SEARCH,\n  {\n    $filter({ filters, params: { searchQuery } }) {\n      // the following method forces one word to be found in lastname field\n      // and one word in firstName field.\n      const formattedSearchQuery = generateMatchAnyWordRegexp(searchQuery);\n\n      filters.$or = [\n        createRegexQuery('_id', searchQuery),\n        createRegexQuery('firstName', searchQuery),\n        createRegexQuery('lastName', searchQuery),\n        {\n          $and: [\n            createRegexQuery('firstName', formattedSearchQuery),\n            createRegexQuery('lastName', formattedSearchQuery),\n          ],\n        },\n      ];\n    },\n    name: 1,\n    createdAt: 1,\n    updatedAt: 1,\n    $options: { sort: { createdAt: -1 }, limit: 5 },\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"loans\":{\"loanConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/loanConstants.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nexport const LOANS_COLLECTION = 'loans';\n\nexport const LOAN_STATUS = {\n  LEAD: 'LEAD',\n  ONGOING: 'ONGOING',\n  CLOSING: 'CLOSING',\n  BILLING: 'BILLING',\n  FINALIZED: 'FINALIZED',\n  PENDING: 'PENDING',\n  UNSUCCESSFUL: 'UNSUCCESSFUL',\n  TEST: 'TEST',\n};\n\nexport const LOAN_STATUS_ORDER = [\n  LOAN_STATUS.LEAD,\n  LOAN_STATUS.ONGOING,\n  LOAN_STATUS.PENDING,\n  LOAN_STATUS.CLOSING,\n  LOAN_STATUS.BILLING,\n  LOAN_STATUS.FINALIZED,\n  LOAN_STATUS.UNSUCCESSFUL,\n  LOAN_STATUS.TEST,\n];\n\nexport const PURCHASE_TYPE = {\n  ACQUISITION: 'ACQUISITION',\n  REFINANCING: 'REFINANCING',\n  // TODO: Figure out what needs to be changed for this\n  CONSTRUCTION: 'CONSTRUCTION',\n};\n\n// Keep these sorted alphabetically for zipcode search to work\nexport const CANTONS = {\n  AG: 'Aargau',\n  AR: 'Appenzell Ausserrhoden',\n  AI: 'Appenzell Innerrhoden',\n  BL: 'Basel-Land',\n  BS: 'Basel-Stadt',\n  BE: 'Bern',\n  FR: 'Fribourg',\n  GE: 'Genève',\n  GL: 'Glarus',\n  GR: 'Graubünden',\n  JU: 'Jura',\n  LU: 'Luzern',\n  NE: 'Neuchâtel',\n  NW: 'Nidwalden',\n  OW: 'Obwalden',\n  SG: 'St. Gallen',\n  SH: 'Schaffhausen',\n  SZ: 'Schwyz',\n  SO: 'Solothurn',\n  TG: 'Thurgau',\n  TI: 'Ticino',\n  UR: 'Uri',\n  VD: 'Vaud',\n  VS: 'Valais',\n  ZG: 'Zug',\n  ZH: 'Zürich',\n  LI: 'Liechtenstein',\n};\n\nexport const OWNER = {\n  FIRST: '0',\n  SECOND: '1',\n  BOTH: 'BOTH',\n  OTHER: 'OTHER',\n};\n\nexport const INSURANCE_USE_PRESET = {\n  WITHDRAWAL: 'WITHDRAWAL',\n  COLLATERAL: 'COLLATERAL',\n};\n\nexport const LOAN_STRATEGY_PRESET = {\n  FIXED: 'FIXED',\n  MANUAL: 'MANUAL',\n};\n\nexport const AMORTIZATION_TYPE = {\n  INDIRECT: 'INDIRECT',\n  DIRECT: 'DIRECT',\n};\n\nexport const PAYMENT_SCHEDULES = {\n  MONTHLY: 'MONTHLY',\n  YEARLY: 'YEARLY',\n  SEMESTERLY: 'SEMESTERLY',\n};\n\nexport const LOAN_QUERIES = {\n  ADMIN_LOANS: 'ADMIN_LOANS',\n  ANONYMOUS_LOAN: 'ANONYMOUS_LOAN',\n  FULL_LOAN: 'FULL_LOAN',\n  LOAN_FILES: 'LOAN_FILES',\n  LOAN_SEARCH: 'LOAN_SEARCH',\n  PRO_LOANS: 'PRO_LOANS',\n  PRO_PROMOTION_LOANS: 'PRO_PROMOTION_LOANS',\n  PRO_PROPERTY_LOANS: 'PRO_PROPERTY_LOANS',\n  PRO_REFERRED_BY_LOANS: 'PRO_REFERRED_BY_LOANS',\n  USER_LOANS_E2E: 'USER_LOANS_E2E',\n  USER_LOANS: 'USER_LOANS',\n  PRO_LOANS_AGGREGATE: 'PRO_LOANS_AGGREGATE',\n};\n\nexport const OWN_FUNDS_USAGE_TYPES = {\n  WITHDRAW: 'WITHDRAW',\n  PLEDGE: 'PLEDGE',\n};\n\nexport const STEPS = {\n  SOLVENCY: 'SOLVENCY',\n  REQUEST: 'REQUEST',\n  OFFERS: 'OFFERS',\n  CLOSING: 'CLOSING',\n};\n\nexport const STEP_ORDER = [\n  STEPS.SOLVENCY,\n  STEPS.REQUEST,\n  STEPS.OFFERS,\n  STEPS.CLOSING,\n];\n\nexport const LOAN_VERIFICATION_STATUS = {\n  NONE: 'NONE',\n  REQUESTED: 'REQUESTED',\n  OK: 'OK',\n  ERROR: 'ERROR',\n};\n\nexport const SOLVENCY_TYPE = {\n  SIMPLE: 'SIMPLE',\n  FULL: 'FULL',\n};\n\nexport const APPLICATION_TYPES = {\n  SIMPLE: 'SIMPLE',\n  FULL: 'FULL',\n};\n\nexport const ORGANISATION_NAME_SEPARATOR = ' / ';\n\nexport const LOCAL_STORAGE_ANONYMOUS_LOAN = 'ANONYMOUS_LOAN_ID';\n\nexport const EMPTY_STRUCTURE = {\n  ownFunds: [],\n  loanTranches: [],\n};\n\nexport const LOAN_CATEGORIES = {\n  STANDARD: 'STANDARD',\n  PREMIUM: 'PREMIUM',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"LoanSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/schemas/LoanSchema.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport SimpleSchema from 'simpl-schema';\n\nimport {\n  createdAt,\n  updatedAt,\n  contactsSchema,\n  additionalDocuments,\n  documentsField,\n  cacheField,\n} from '../../helpers/sharedSchemas';\nimport {\n  LOAN_STATUS,\n  LOAN_VERIFICATION_STATUS,\n  PURCHASE_TYPE,\n  OWNER,\n  CANTONS,\n  STEPS,\n  APPLICATION_TYPES,\n  LOAN_CATEGORIES,\n} from '../loanConstants';\nimport { RESIDENCE_TYPE } from '../../constants';\nimport StructureSchema from './StructureSchema';\nimport promotionSchema from './promotionSchema';\nimport {\n  borrowerIdsSchema,\n  propertyIdsSchema,\n  previousLoanTranchesSchema,\n  maxPropertyValueSchema,\n} from './otherSchemas';\n\nconst LoanSchema = new SimpleSchema({\n  userId: {\n    type: String,\n    optional: true,\n  },\n  createdAt,\n  updatedAt,\n  status: {\n    type: String,\n    defaultValue: LOAN_STATUS.LEAD,\n    allowedValues: Object.values(LOAN_STATUS),\n  },\n  general: { type: Object, optional: true, blackbox: true, defaultValue: {} }, // To be removed once migrations are done\n  name: { type: String, unique: true, regEx: /^\\d{2}-\\d{4}$/ },\n  adminValidation: { type: Object, defaultValue: {}, blackbox: true },\n  userFormsEnabled: { type: Boolean, defaultValue: true, optional: true },\n  structures: { type: Array, defaultValue: [] },\n  'structures.$': StructureSchema,\n  selectedStructure: { type: String, optional: true },\n  verificationStatus: {\n    type: String,\n    optional: true,\n    allowedValues: Object.values(LOAN_VERIFICATION_STATUS),\n    defaultValue: LOAN_VERIFICATION_STATUS.NONE,\n    uniforms: { displayEmpty: false },\n  },\n  purchaseType: {\n    type: String,\n    defaultValue: PURCHASE_TYPE.ACQUISITION,\n    allowedValues: Object.values(PURCHASE_TYPE),\n    uniforms: { displayEmpty: false },\n  },\n  residenceType: {\n    type: String,\n    allowedValues: Object.values(RESIDENCE_TYPE),\n    optional: true,\n    uniforms: { displayEmpty: false },\n  },\n  canton: {\n    type: String,\n    optional: true,\n    allowedValues: Object.keys(CANTONS),\n  },\n  currentOwner: {\n    type: String,\n    defaultValue: OWNER.FIRST,\n    allowedValues: Object.values(OWNER),\n  },\n  futureOwner: {\n    type: String,\n    defaultValue: OWNER.FIRST,\n    allowedValues: Object.values(OWNER),\n  },\n  otherOwner: {\n    type: String,\n    optional: true,\n  },\n  enableOffers: { type: Boolean, optional: true, defaultValue: false },\n  previousLender: { type: String, optional: true },\n  customName: { type: String, optional: true },\n  applicationType: {\n    type: String,\n    allowedValues: Object.values(APPLICATION_TYPES),\n    defaultValue: APPLICATION_TYPES.SIMPLE,\n    uniforms: { placeholder: null },\n  },\n  ...promotionSchema,\n  ...borrowerIdsSchema,\n  ...propertyIdsSchema,\n  ...contactsSchema,\n  ...previousLoanTranchesSchema,\n  ...additionalDocuments([]),\n  revenueLinks: { type: Array, optional: true },\n  'revenueLinks.$': String,\n  userCache: cacheField,\n  step: {\n    type: String,\n    defaultValue: STEPS.SOLVENCY,\n    allowedValues: Object.values(STEPS),\n    uniforms: { placeholder: '' },\n  },\n  displayWelcomeScreen: {\n    type: Boolean,\n    defaultValue: true,\n    optional: true,\n  },\n  ...maxPropertyValueSchema,\n  shareSolvency: { type: Boolean, optional: true },\n  documents: documentsField,\n  anonymous: { type: Boolean, optional: true, defaultValue: false },\n  referralId: { type: String, optional: true },\n  category: {\n    type: String,\n    defaultValue: LOAN_CATEGORIES.STANDARD,\n    allowedValues: Object.values(LOAN_CATEGORIES),\n    uniforms: { placeholder: null },\n  },\n  adminNote: {\n    type: String,\n    optional: true,\n  },\n  lendersCache: { type: Array, optional: true },\n  'lendersCache.$': cacheField,\n  tasksCache: { type: Array, optional: true },\n  'tasksCache.$': cacheField,\n  financedPromotionLink: { type: Object, optional: true },\n  'financedPromotionLink._id': { type: String, optional: true },\n  simpleBorrowersForm: { type: Boolean, defaultValue: true },\n});\n\nexport default LoanSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"StructureSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/schemas/StructureSchema.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport SimpleSchema from 'simpl-schema';\nimport { AMORTIZATION_TYPE, OWN_FUNDS_USAGE_TYPES } from '../loanConstants';\nimport { OWN_FUNDS_TYPES } from '../../constants';\nimport { loanTranchesSchema } from './otherSchemas';\nimport { moneyField } from '../../helpers/sharedSchemas';\n\nexport const structureSchema = {\n  amortization: { ...moneyField, defaultValue: 0 },\n  amortizationType: {\n    type: String,\n    allowedValues: Object.values(AMORTIZATION_TYPE),\n    optional: true,\n  },\n  description: { type: String, optional: true },\n  disabled: { type: Boolean, defaultValue: false },\n  id: String,\n  mortgageNoteIds: { type: Array, optional: true },\n  'mortgageNoteIds.$': String,\n  name: { type: String, optional: true },\n  notaryFees: { ...moneyField, defaultValue: null },\n  propertyValue: { ...moneyField, defaultValue: null },\n  offerId: { type: String, optional: true },\n  propertyId: { type: String, optional: true },\n  promotionOptionId: { type: String, optional: true },\n  propertyWork: { ...moneyField, defaultValue: 0 },\n  sortOffersBy: { type: String, optional: true },\n  ownFunds: { type: Array, defaultValue: [] },\n  'ownFunds.$': Object,\n  'ownFunds.$.borrowerId': String,\n  'ownFunds.$.type': {\n    type: String,\n    allowedValues: Object.values(OWN_FUNDS_TYPES),\n    optional: true,\n  },\n  'ownFunds.$.value': { ...moneyField, optional: false },\n  'ownFunds.$.usageType': {\n    type: String,\n    optional: true,\n    allowedValues: Object.values(OWN_FUNDS_USAGE_TYPES),\n  },\n  'ownFunds.$.description': {\n    type: String,\n    optional: true,\n  },\n  wantedLoan: { ...moneyField, defaultValue: 0 },\n  ...loanTranchesSchema,\n};\n\nexport type structureType = {\n  id: string,\n  amortization: number,\n  amortizationType: string,\n  description: string,\n  name: string,\n  offerId: string,\n  propertyId: string,\n  propertyWork: number,\n  sortOffersBy: string,\n  wantedLoan: number,\n  ownFunds: Array<Object>,\n};\n\nexport default new SimpleSchema(structureSchema);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"otherSchemas.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/schemas/otherSchemas.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { INTEREST_RATES, SOLVENCY_TYPE, CANTONS } from '../../constants';\nimport { moneyField, percentageField } from '../../helpers/sharedSchemas';\n\nexport const borrowerIdsSchema = {\n  borrowerIds: { type: Array, defaultValue: [] },\n  'borrowerIds.$': String,\n};\n\nexport const loanTranchesSchema = {\n  loanTranches: {\n    type: Array,\n    defaultValue: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n    optional: true,\n  },\n  'loanTranches.$': Object,\n  'loanTranches.$.type': {\n    type: String,\n    optional: true,\n    allowedValues: Object.values(INTEREST_RATES),\n  },\n  'loanTranches.$.value': {\n    ...moneyField,\n    type: Number, // Can be specified as percentages or monetary amounts\n  },\n};\n\nexport const previousLoanTranchesSchema = {\n  previousLoanTranches: {\n    type: Array,\n    defaultValue: [],\n    optional: true,\n  },\n  'previousLoanTranches.$': Object,\n  'previousLoanTranches.$.value': {\n    ...moneyField,\n    type: Number, // Can be specified as percentages or monetary amounts\n  },\n  'previousLoanTranches.$.dueDate': {\n    type: Date,\n    optional: true,\n  },\n  'previousLoanTranches.$.rate': {\n    type: Number,\n    min: 0,\n    max: 1,\n  },\n};\n\nexport type loanTranchesType = Array<{\n  type: string,\n  value: number,\n}>;\n\nexport const propertyIdsSchema = {\n  propertyIds: { type: Array, defaultValue: [], maxCount: 5 },\n  'propertyIds.$': String,\n};\n\nexport const maxPropertyValueSchema = {\n  maxPropertyValue: { type: Object, optional: true },\n  'maxPropertyValue.type': {\n    type: String,\n    allowedValues: Object.values(SOLVENCY_TYPE),\n    defaultValue: SOLVENCY_TYPE.SIMPLE,\n  },\n  'maxPropertyValue.canton': {\n    type: String,\n    allowedValues: Object.keys(CANTONS),\n  },\n  'maxPropertyValue.borrowerHash': { type: String, optional: true },\n  'maxPropertyValue.date': Date,\n  'maxPropertyValue.main': Object,\n  'maxPropertyValue.main.min': { type: Object, optional: true },\n  'maxPropertyValue.main.min.propertyValue': moneyField,\n  'maxPropertyValue.main.min.borrowRatio': percentageField,\n  'maxPropertyValue.main.min.organisationName': String,\n  'maxPropertyValue.main.max': Object,\n  'maxPropertyValue.main.max.propertyValue': moneyField,\n  'maxPropertyValue.main.max.borrowRatio': percentageField,\n  'maxPropertyValue.main.max.organisationName': String,\n  'maxPropertyValue.second': Object,\n  'maxPropertyValue.second.min': { type: Object, optional: true },\n  'maxPropertyValue.second.min.propertyValue': moneyField,\n  'maxPropertyValue.second.min.borrowRatio': percentageField,\n  'maxPropertyValue.second.min.organisationName': String,\n  'maxPropertyValue.second.max': Object,\n  'maxPropertyValue.second.max.propertyValue': moneyField,\n  'maxPropertyValue.second.max.borrowRatio': percentageField,\n  'maxPropertyValue.second.max.organisationName': String,\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"promotionSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/schemas/promotionSchema.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nconst promotionSchema = {\n  promotionLinks: { type: Array, defaultValue: [] },\n  'promotionLinks.$': Object,\n  'promotionLinks.$._id': { type: String, optional: true },\n  'promotionLinks.$.priorityOrder': {\n    type: Array,\n    defaultValue: [],\n  },\n  'promotionLinks.$.priorityOrder.$': String,\n  'promotionLinks.$.invitedBy': { type: String, optional: true },\n  'promotionLinks.$.showAllLots': {\n    type: Boolean,\n    optional: true,\n    defaultValue: true,\n  },\n  promotionOptionLinks: { type: Array, defaultValue: [] },\n  'promotionOptionLinks.$': Object,\n  'promotionOptionLinks.$._id': { type: String, optional: true },\n};\n\nexport default promotionSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/index.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nexport * from './methodDefinitions';\nexport { default } from './loans';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/methodDefinitions.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const loanInsert = new Method({\n  name: 'loanInsert',\n  params: {\n    loan: Object,\n    userId: Match.Optional(String),\n  },\n});\n\nexport const loanUpdate = new Method({\n  name: 'loanUpdate',\n  params: {\n    loanId: String,\n    object: Object,\n  },\n});\n\nexport const loanDelete = new Method({\n  name: 'loanDelete',\n  params: {\n    loanId: String,\n  },\n});\n\nexport const requestLoanVerification = new Method({\n  name: 'requestLoanVerification',\n  params: {\n    loanId: String,\n  },\n});\n\nexport const confirmClosing = new Method({\n  name: 'confirmClosing',\n  params: {\n    loanId: String,\n    object: Object,\n  },\n});\n\nexport const pushLoanValue = new Method({\n  name: 'pushLoanValue',\n  params: {\n    loanId: String,\n    object: Object,\n  },\n});\n\nexport const popLoanValue = new Method({\n  name: 'popLoanValue',\n  params: {\n    loanId: String,\n    object: Object,\n  },\n});\n\nexport const adminLoanInsert = new Method({\n  name: 'adminLoanInsert',\n  params: {\n    userId: Match.Optional(String),\n  },\n});\n\nexport const userLoanInsert = new Method({\n  name: 'userLoanInsert',\n  params: {\n    proPropertyId: Match.Maybe(String),\n    test: Match.Optional(Boolean),\n  },\n});\n\nexport const addNewStructure = new Method({\n  name: 'addNewStructure',\n  params: {\n    loanId: String,\n  },\n});\n\nexport const removeStructure = new Method({\n  name: 'removeStructure',\n  params: {\n    loanId: String,\n    structureId: String,\n  },\n});\n\nexport const updateStructure = new Method({\n  name: 'updateStructure',\n  params: {\n    loanId: String,\n    structureId: String,\n    structure: Object,\n  },\n});\n\nexport const selectStructure = new Method({\n  name: 'selectStructure',\n  params: {\n    loanId: String,\n    structureId: String,\n  },\n});\n\nexport const duplicateStructure = new Method({\n  name: 'duplicateStructure',\n  params: {\n    loanId: String,\n    structureId: String,\n  },\n});\n\nexport const assignLoanToUser = new Method({\n  name: 'assignLoanToUser',\n  params: {\n    loanId: String,\n    userId: Match.OneOf(String, null),\n  },\n});\n\nexport const switchBorrower = new Method({\n  name: 'switchBorrower',\n  params: {\n    loanId: String,\n    borrowerId: String,\n    oldBorrowerId: String,\n  },\n});\n\nexport const sendNegativeFeedbackToAllLenders = new Method({\n  name: 'sendNegativeFeedbackToAllLenders',\n  params: { loanId: String },\n});\n\nexport const loanUpdatePromotionInvitedBy = new Method({\n  name: 'loanUpdatePromotionInvitedBy',\n  params: { loanId: String, promotionId: String, invitedBy: String },\n});\n\nexport const reuseProperty = new Method({\n  name: 'reuseProperty',\n  params: { loanId: String, propertyId: String },\n});\n\nexport const setMaxPropertyValueWithoutBorrowRatio = new Method({\n  name: 'setMaxPropertyValueWithoutBorrowRatio',\n  params: { loanId: String, canton: String },\n});\n\nexport const addNewMaxStructure = new Method({\n  name: 'addNewMaxStructure',\n  params: {\n    loanId: String,\n    residenceType: Match.Maybe(String),\n    canton: String,\n  },\n});\n\nexport const setLoanStep = new Method({\n  name: 'setLoanStep',\n  params: { loanId: String, nextStep: String },\n});\n\nexport const loanShareSolvency = new Method({\n  name: 'loanShareSolvency',\n  params: { loanId: String, shareSolvency: Boolean },\n});\n\nexport const anonymousLoanInsert = new Method({\n  name: 'anonymousLoanInsert',\n  params: {\n    trackingId: String,\n    proPropertyId: Match.Maybe(String),\n    referralId: Match.Maybe(String),\n    existingAnonymousLoanId: Match.Maybe(Match.OneOf(String, null)),\n  },\n});\n\nexport const loanInsertBorrowers = new Method({\n  name: 'loanInsertBorrowers',\n  params: {\n    loanId: String,\n    amount: Number,\n  },\n});\n\nexport const adminLoanReset = new Method({\n  name: 'adminLoanReset',\n  params: {\n    loanId: String,\n  },\n});\n\nexport const loanLinkPromotion = new Method({\n  name: 'loanLinkPromotion',\n  params: {\n    promotionId: String,\n    loanId: String,\n  },\n});\n\nexport const loanUnlinkPromotion = new Method({\n  name: 'loanUnlinkPromotion',\n  params: {\n    promotionId: String,\n    loanId: String,\n  },\n});\n\nexport const loanSetCreatedAtActivityDescription = new Method({\n  name: 'loanSetCreatedAtActivityDescription',\n  params: { loanId: String, description: String },\n});\n\nexport const loanSetStatus = new Method({\n  name: 'loanSetStatus',\n  params: { loanId: String, status: String },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"loans.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/loans.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport LoanSchema from './schemas/LoanSchema';\nimport { LOANS_COLLECTION } from './loanConstants';\n\nconst Loans = new Mongo.Collection(LOANS_COLLECTION);\n\n// Prevent all client side modifications of mongoDB\nLoans.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\nLoans.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nLoans.attachSchema(LoanSchema);\nexport default Loans;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"LoanService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/server/LoanService.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport omit from 'lodash/omit';\nimport moment from 'moment';\n\nimport LenderRulesService from 'core/api/lenderRules/server/LenderRulesService';\nimport { PROPERTY_CATEGORY } from 'core/api/properties/propertyConstants';\nimport { ACTIVITY_SECONDARY_TYPES } from 'core/api/activities/activityConstants';\nimport ActivityService from 'core/api/activities/server/ActivityService';\nimport PromotionOptionService from '../../promotionOptions/server/PromotionOptionService';\nimport { shouldSendStepNotification } from '../../../utils/loanFunctions';\nimport Intl from '../../../utils/server/intl';\nimport {\n  makeFeedback,\n  FEEDBACK_OPTIONS,\n} from '../../../components/OfferList/feedbackHelpers';\nimport Calculator, {\n  Calculator as CalculatorClass,\n} from '../../../utils/Calculator';\nimport { getZipcodeForCanton } from '../../../utils/zipcodes';\nimport {\n  RESIDENCE_TYPE,\n  ORGANISATION_FEATURES,\n  LOAN_STATUS,\n  LOAN_VERIFICATION_STATUS,\n  CANTONS,\n  EMAIL_IDS,\n} from '../../constants';\nimport OfferService from '../../offers/server/OfferService';\nimport {\n  adminLoan,\n  lenderRules as lenderRulesFragment,\n  userLoan,\n} from '../../fragments';\nimport CollectionService from '../../helpers/CollectionService';\nimport BorrowerService from '../../borrowers/server/BorrowerService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport PromotionService from '../../promotions/server/PromotionService';\nimport UserService from '../../users/server/UserService';\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport Loans from '../loans';\nimport { sendEmail } from '../../methods';\nimport {\n  ORGANISATION_NAME_SEPARATOR,\n  STEPS,\n  APPLICATION_TYPES,\n} from '../loanConstants';\nimport { fullLoan } from '../queries';\n\n// Pads a number with zeros: 4 --> 0004\nconst zeroPadding = (num, places) => {\n  const zero = places - num.toString().length + 1;\n  return Array(+(zero > 0 && zero)).join('0') + num;\n};\n\nexport class LoanService extends CollectionService {\n  constructor() {\n    super(Loans);\n  }\n\n  insert = ({ loan = {}, userId }) => {\n    const name = this.getNewLoanName();\n    return Loans.insert({ ...loan, name, userId });\n  };\n\n  insertAnonymousLoan = ({ proPropertyId, referralId }) => {\n    let loanId;\n    if (proPropertyId) {\n      loanId = this.insertPropertyLoan({ propertyIds: [proPropertyId] });\n    } else {\n      loanId = this.insert({ loan: {} });\n    }\n\n    this.update({\n      loanId,\n      object: { anonymous: true, displayWelcomeScreen: false, referralId },\n    });\n\n    return loanId;\n  };\n\n  getNewLoanName = (now = new Date()) => {\n    const year = now.getYear();\n    const yearPrefix = year - 100;\n    const lastLoan = Loans.findOne({}, { sort: { name: -1 } });\n    if (!lastLoan) {\n      return `${yearPrefix}-0001`;\n    }\n    const [lastPrefix, count] = lastLoan.name\n      .split('-')\n      .map(numb => parseInt(numb, 10));\n\n    if (lastPrefix !== yearPrefix) {\n      return `${yearPrefix}-0001`;\n    }\n\n    const nextCountString = zeroPadding(count + 1, 4);\n\n    return `${yearPrefix}-${nextCountString}`;\n  };\n\n  update = ({ loanId, object, operator = '$set' }) =>\n    Loans.update(loanId, { [operator]: object });\n\n  remove = ({ loanId }) => Loans.remove(loanId);\n\n  fullLoanInsert = ({ userId, loan = {} }) => {\n    const loanId = this.insert({\n      loan,\n      userId,\n    });\n    this.addNewStructure({ loanId });\n    return loanId;\n  };\n\n  setStep({ loanId, nextStep }) {\n    const { step, userId, user } = this.fetchOne({\n      $filters: { _id: loanId },\n      step: 1,\n      userId: 1,\n      user: { assignedEmployee: { name: 1 } },\n    });\n\n    this.update({ loanId, object: { step: nextStep } });\n\n    if (shouldSendStepNotification(step, nextStep)) {\n      if (!user || !user.assignedEmployee) {\n        throw new Meteor.Error('Il faut un conseiller sur ce dossier pour envoyer un email');\n      }\n\n      sendEmail.run({\n        emailId: EMAIL_IDS.FIND_LENDER_NOTIFICATION,\n        userId,\n        params: { loanId, assigneeName: user.assignedEmployee.name },\n      });\n    }\n  }\n\n  setStatus({ loanId, status }) {\n    const { status: prevStatus } = this.fetchOne({\n      $filters: { _id: loanId },\n      status: 1,\n    });\n\n    this.update({ loanId, object: { status } });\n    return { prevStatus, nextStatus: status };\n  }\n\n  askVerification = ({ loanId }) => {\n    const loan = this.get(loanId);\n\n    if (\n      loan.verificationStatus === LOAN_VERIFICATION_STATUS.REQUESTED\n      || loan.verificationStatus === LOAN_VERIFICATION_STATUS.OK\n    ) {\n      // Don't do anything if this loan is already in requested mode\n      throw new Meteor.Error('La vérification est déjà en cours, ou effectuée.');\n    }\n\n    return this.update({\n      loanId,\n      object: {\n        verificationStatus: LOAN_VERIFICATION_STATUS.REQUESTED,\n        userFormsEnabled: false,\n      },\n    });\n  };\n\n  insertPromotionLoan = ({\n    userId,\n    promotionId,\n    invitedBy,\n    showAllLots,\n    promotionLotIds = [],\n    shareSolvency,\n  }) => {\n    const customName = PromotionService.fetchOne({\n      $filters: { _id: promotionId },\n      name: 1,\n    }).name;\n    const loanId = this.insert({\n      loan: {\n        promotionLinks: [{ _id: promotionId, invitedBy, showAllLots }],\n        customName,\n        shareSolvency,\n      },\n      userId,\n    });\n\n    promotionLotIds.forEach((promotionLotId) => {\n      PromotionOptionService.insert({ promotionLotId, loanId });\n    });\n\n    this.addNewStructure({ loanId });\n\n    return loanId;\n  };\n\n  insertPropertyLoan = ({ userId, propertyIds, shareSolvency, loan }) => {\n    const customName = PropertyService.fetchOne({\n      $filters: { _id: propertyIds[0] },\n      address1: 1,\n    }).address1;\n    const loanId = this.insert({\n      loan: {\n        propertyIds,\n        customName,\n        shareSolvency,\n        ...loan,\n      },\n      userId,\n    });\n\n    this.addNewStructure({ loanId });\n    return loanId;\n  };\n\n  confirmClosing = ({ loanId, object }) =>\n    this.update({ loanId, object: { status: LOAN_STATUS.BILLING, ...object } });\n\n  pushValue = ({ loanId, object }) => Loans.update(loanId, { $push: object });\n\n  popValue = ({ loanId, object }) => Loans.update(loanId, { $pop: object });\n\n  pullValue = ({ loanId, object }) => Loans.update(loanId, { $pull: object });\n\n  addStructure = ({ loanId, structure, atIndex }) => {\n    const newStructureId = Random.id();\n    Loans.update(loanId, {\n      $push: {\n        structures: {\n          $each: [{ ...structure, id: newStructureId, disabled: false }],\n          $position: atIndex,\n        },\n      },\n    });\n    return newStructureId;\n  };\n\n  addNewStructure = ({ loanId, structure }) => {\n    const { structures, selectedStructure, propertyIds } = this.get(loanId);\n    const isFirstStructure = structures.length === 0;\n    const shouldCopyExistingStructure = !isFirstStructure && !structure && selectedStructure;\n\n    if (shouldCopyExistingStructure) {\n      structure = omit(structures.find(({ id }) => selectedStructure === id), [\n        'name',\n      ]);\n    }\n\n    const propertyId = (structure && structure.propertyId)\n      || (propertyIds.length > 0 ? propertyIds[0] : undefined);\n    const newStructureId = this.addStructure({\n      loanId,\n      structure: {\n        ...structure,\n        propertyId,\n        name:\n          (structure && structure.name)\n          || `Plan financier ${structures.length + 1}`,\n      },\n    });\n    this.update({\n      loanId,\n      object: isFirstStructure ? { selectedStructure: newStructureId } : {},\n    });\n\n    return newStructureId;\n  };\n\n  removeStructure = ({ loanId, structureId }) => {\n    const { selectedStructure: currentlySelected } = this.get(loanId);\n\n    if (currentlySelected === structureId) {\n      throw new Meteor.Error('Vous ne pouvez pas supprimer votre plan financier choisi');\n    }\n\n    const updateObj = {\n      $pull: { structures: { id: structureId } },\n    };\n\n    return Loans.update(loanId, updateObj, {\n      // Edge case fix: https://github.com/meteor/meteor/issues/4342\n      getAutoValues: false,\n    });\n  };\n\n  updateStructure = ({ loanId, structureId, structure }) => {\n    const currentStructure = this.get(loanId).structures.find(({ id }) => id === structureId);\n\n    return Loans.update(\n      { _id: loanId, 'structures.id': structureId },\n      { $set: { 'structures.$': { ...currentStructure, ...structure } } },\n    );\n  };\n\n  selectStructure = ({ loanId, structureId }) => {\n    // Make sure the structure exists\n    const structureExists = this.get(loanId).structures.some(({ id }) => id === structureId);\n\n    if (structureExists) {\n      return this.update({\n        loanId,\n        object: { selectedStructure: structureId },\n      });\n    }\n\n    throw new Meteor.Error(`Structure with id \"${structureId}\" does not exist`);\n  };\n\n  duplicateStructure = ({ loanId, structureId }) => {\n    const { structures } = this.get(loanId);\n    const currentStructure = structures.find(({ id }) => id === structureId);\n    const currentStructureIndex = structures.findIndex(({ id }) => id === structureId);\n\n    return (\n      !!currentStructure\n      && this.addStructure({\n        loanId,\n        structure: {\n          ...currentStructure,\n          name: `${currentStructure.name || 'Plan financier'} - copie`,\n          disabled: false,\n        },\n        atIndex: currentStructureIndex + 1,\n      })\n    );\n  };\n\n  addPropertyToLoan = ({ loanId, propertyId }) => {\n    const loan = this.get(loanId);\n    this.addLink({ id: loanId, linkName: 'properties', linkId: propertyId });\n\n    // Add this property to all structures that don't have a property\n    // for a better user experience\n    loan.structures.forEach(({ id, propertyId: structurePropertyId, promotionOptionId }) => {\n      if (!structurePropertyId && !promotionOptionId) {\n        this.updateStructure({\n          loanId,\n          structureId: id,\n          structure: { propertyId },\n        });\n      }\n    });\n  };\n\n  cleanupRemovedBorrower = ({ borrowerId }) => {\n    // Remove all references to this borrower on the loan\n    const loans = Loans.find({ borrowerIds: borrowerId }).fetch();\n    loans.forEach((loan) => {\n      this.update({\n        loanId: loan._id,\n        object: {\n          structures: loan.structures.map(structure => ({\n            ...structure,\n            ownFunds: structure.ownFunds.filter(({ borrowerId: bId }) => bId !== borrowerId),\n          })),\n        },\n      });\n    });\n  };\n\n  setPromotionPriorityOrder({ loanId, promotionId, priorityOrder }) {\n    return Loans.update(\n      { _id: loanId, 'promotionLinks._id': promotionId },\n      { $set: { 'promotionLinks.$.priorityOrder': priorityOrder } },\n    );\n  }\n\n  getPromotionPriorityOrder({ loanId, promotionId }) {\n    const promotionLink = this.get(loanId).promotionLinks.find(({ _id }) => _id === promotionId);\n    return promotionLink ? promotionLink.priorityOrder : [];\n  }\n\n  assignLoanToUser({ loanId, userId }) {\n    const {\n      properties = [],\n      borrowers = [],\n      referralId,\n      anonymous,\n    } = this.fetchOne({\n      $filters: { _id: loanId },\n      referralId: 1,\n      properties: { loans: { _id: 1 }, address1: 1, category: 1 },\n      borrowers: { loans: { _id: 1 }, name: 1 },\n      anonymous: 1,\n    });\n\n    borrowers.forEach(({ loans = [], name }) => {\n      if (loans.length > 1) {\n        throw new Meteor.Error(`Peut pas réassigner l'hypothèque, l'emprunteur \"${name}\" est assigné à plus d'une hypothèque`);\n      }\n    });\n    properties.forEach(({ loans = [], address1, category }) => {\n      if (category === PROPERTY_CATEGORY.USER && loans.length > 1) {\n        throw new Meteor.Error(`Peut pas réassigner l'hypothèque, le bien immobilier \"${address1}\" est assigné à plus d'une hypothèque`);\n      }\n    });\n\n    this.update({\n      loanId,\n      object: {\n        userId,\n        anonymous: false,\n        // If the loan was anonymous before, don't show welcome screen again\n        displayWelcomeScreen: anonymous ? false : undefined,\n      },\n    });\n    this.update({ loanId, object: { referralId: true }, operator: '$unset' });\n\n    borrowers.forEach(({ _id: borrowerId }) => {\n      BorrowerService.update({ borrowerId, object: { userId } });\n    });\n    properties.forEach(({ _id: propertyId, category }) => {\n      if (category === PROPERTY_CATEGORY.USER) {\n        PropertyService.update({ propertyId, object: { userId } });\n      }\n    });\n\n    // Refer this user only if he hasn't already been referred\n    if (referralId && UserService.exists(referralId)) {\n      const {\n        referredByUserLink,\n        referredByOrganisationLink,\n      } = UserService.fetchOne({\n        $filters: { _id: userId },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n      });\n      if (!referredByUserLink && !referredByOrganisationLink) {\n        UserService.setReferredBy({ userId, proId: referralId });\n      }\n    }\n  }\n\n  switchBorrower({ loanId, borrowerId, oldBorrowerId }) {\n    const { borrowerIds } = this.get(loanId);\n    const { loans: oldBorrowerLoans = [] } = BorrowerService.createQuery({\n      $filters: { _id: oldBorrowerId },\n      loans: { name: 1 },\n    }).fetchOne();\n\n    if (borrowerIds.includes(borrowerId)) {\n      throw new Meteor.Error('Cet emprunteur est déjà sur ce prêt hypothécaire');\n    }\n\n    this.update({\n      loanId,\n      object: {\n        borrowerIds: borrowerIds.map(id =>\n          (id === oldBorrowerId ? borrowerId : id)),\n      },\n    });\n\n    if (oldBorrowerLoans.length === 1 && oldBorrowerLoans[0]._id === loanId) {\n      BorrowerService.remove({ borrowerId: oldBorrowerId });\n    }\n  }\n\n  sendNegativeFeedbackToAllLenders({ loanId }) {\n    const {\n      offers = [],\n      structure: { property },\n    } = this.createQuery({\n      $filters: { _id: loanId },\n      ...adminLoan({ withSort: true }),\n      $options: { sort: { createdAt: -1 } },\n    }).fetchOne() || {};\n\n    // Get lenders' last offer\n    const filteredOffers = offers.reduce((filtered, offer) => {\n      const {\n        lender: {\n          contact: { email: lenderEmail },\n        },\n      } = offer;\n\n      const lenderIsAlreadyInMailingList = filtered.find(({\n        lender: {\n          contact: { email },\n        },\n      }) => lenderEmail === email);\n\n      if (lenderIsAlreadyInMailingList) {\n        return filtered;\n      }\n\n      return [...filtered, offer];\n    }, []);\n\n    const promises = filteredOffers.map((offer) => {\n      const feedback = makeFeedback({\n        offer: { ...offer, property },\n        model: { option: FEEDBACK_OPTIONS.NEGATIVE_WITHOUT_FOLLOW_UP },\n        formatMessage: Intl.formatMessage.bind(Intl),\n      });\n      return OfferService.sendFeedback({\n        offerId: offer._id,\n        feedback,\n        saveFeedback: false,\n      });\n    });\n\n    return Promise.all(promises);\n  }\n\n  updatePromotionInvitedBy({ loanId, promotionId, invitedBy }) {\n    this.updateLinkMetadata({\n      id: loanId,\n      linkName: 'promotions',\n      linkId: promotionId,\n      metadata: { invitedBy },\n    });\n  }\n\n  reuseProperty({ loanId, propertyId }) {\n    const loan = this.get(loanId);\n\n    if (loan.propertyIds.includes(propertyId)) {\n      return false;\n    }\n\n    this.addLink({ id: loanId, linkName: 'properties', linkId: propertyId });\n  }\n\n  getMaxPropertyValueRange({ organisations, loan, residenceType, canton }) {\n    const { borrowers = [] } = loan;\n    const loanObject = Calculator.createLoanObject({\n      residenceType,\n      borrowers,\n      canton,\n    });\n    const maxPropertyValues = organisations\n      .map(({ lenderRules, name }) => {\n        const calculator = new CalculatorClass({\n          loan: loanObject,\n          lenderRules,\n        });\n\n        const {\n          borrowRatio,\n          propertyValue,\n        } = calculator.getMaxPropertyValueWithoutBorrowRatio({\n          borrowers,\n          residenceType,\n          canton,\n        });\n        if (propertyValue > 0 && borrowRatio > 0) {\n          return { borrowRatio, propertyValue, organisationName: name };\n        }\n\n        return null;\n      })\n      .filter(x => x);\n\n    const sortedValues = maxPropertyValues.sort(({ propertyValue: propertyValueA }, { propertyValue: propertyValueB }) =>\n      propertyValueA - propertyValueB);\n\n    if (sortedValues.length === 0) {\n      throw new Meteor.Error(\"Nous ne sommes pas parvenus à calculer votre capacité d'achat, contactez votre conseiller pour plus d'informations\");\n    }\n\n    // Only show min if there is more than 1 result\n    const showMin = sortedValues.length >= 2;\n    // Only show second max if there are more than 3 results\n    const showSecondMax = sortedValues.length >= 3;\n\n    const min = showMin ? sortedValues[0] : undefined;\n\n    // Don't take the max value, because that means there is only one single\n    // lender who can make an offer on this loan\n    const max = sortedValues[sortedValues.length - 1];\n    const secondMax = showSecondMax\n      ? sortedValues[sortedValues.length - 2]\n      : max;\n\n    // If there are at least 3 organisations, show a special label\n    // that combines the best and secondBest org\n    const maxOrganisationLabel = showSecondMax\n      ? `${secondMax\n          && secondMax.organisationName}${ORGANISATION_NAME_SEPARATOR}${\n        max.organisationName\n      } (${(max.borrowRatio * 100).toFixed(2)}%)`\n      : max.organisationName;\n\n    return {\n      min,\n      max: { ...secondMax, organisationName: maxOrganisationLabel },\n    };\n  }\n\n  getMaxPropertyValueWithoutBorrowRatio({ loan, canton, residenceType }) {\n    let query = { features: { $in: [ORGANISATION_FEATURES.LENDER] } };\n    if (loan.hasPromotion && loan.promotions[0].lenderOrganisationLink) {\n      query = { _id: loan.promotions[0].lenderOrganisationLink._id };\n    }\n\n    const lenderOrganisations = OrganisationService.fetch({\n      $filters: query,\n      lenderRules: lenderRulesFragment(),\n      name: 1,\n    });\n\n    return this.getMaxPropertyValueRange({\n      organisations: lenderOrganisations.filter(({ lenderRules }) => lenderRules && lenderRules.length > 0),\n      loan,\n      residenceType: residenceType || loan.residenceType,\n      canton,\n    });\n  }\n\n  setMaxPropertyValueWithoutBorrowRatio({ loanId, canton }) {\n    const loan = this.fetchOne({ $filters: { _id: loanId }, ...userLoan() });\n\n    const mainMaxPropertyValueRange = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      canton,\n    });\n    const secondMaxPropertyValueRange = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n      canton,\n    });\n\n    const borrowerHash = Calculator.getBorrowerFormHash({\n      borrowers: loan.borrowers,\n    });\n\n    this.update({\n      loanId,\n      object: {\n        maxPropertyValue: {\n          main: mainMaxPropertyValueRange,\n          second: secondMaxPropertyValueRange,\n          canton,\n          date: new Date(),\n          borrowerHash,\n        },\n      },\n    });\n\n    return Promise.resolve();\n  }\n\n  addNewMaxStructure({ loanId, residenceType: newResidenceType, canton }) {\n    if (newResidenceType) {\n      // Set residence type if it is given\n      this.update({ loanId, object: { residenceType: newResidenceType } });\n    }\n\n    const loan = this.fetchOne({\n      $filters: { _id: loanId },\n      ...userLoan(),\n    });\n    const { properties = [], userId, borrowers, residenceType } = loan;\n\n    // Get the highest property value\n    const {\n      max: { borrowRatio, propertyValue, organisationName },\n    } = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      canton,\n    });\n    const firstOrganisationName = organisationName.split(ORGANISATION_NAME_SEPARATOR)[0];\n\n    const organisation = OrganisationService.fetchOne({\n      $filters: { name: firstOrganisationName },\n      lenderRules: lenderRulesFragment(),\n    });\n\n    const calculator = new CalculatorClass({\n      loan,\n      lenderRules: organisation.lenderRules,\n    });\n\n    // Recalculate the best structure for this propertyvalue\n    const ownFunds = calculator.suggestStructure({\n      borrowers,\n      propertyValue,\n      loanValue: Math.round(propertyValue * borrowRatio),\n      canton,\n      residenceType,\n    });\n\n    let propertyWithCanton = properties.find(({ canton: propertyCanton }) => propertyCanton === canton);\n    const createNewProperty = !propertyWithCanton;\n\n    // If there is no property from this canton, insert a new one\n    // with the right canton\n    if (createNewProperty) {\n      const propertyId = PropertyService.insert({\n        property: {\n          address1: `Bien immo ${CANTONS[canton]}`,\n          zipCode: getZipcodeForCanton(canton),\n          value: propertyValue,\n        },\n        loanId,\n        userId,\n      });\n\n      propertyWithCanton = { _id: propertyId };\n    }\n\n    this.addNewStructure({\n      loanId,\n      structure: {\n        name: \"Capacité d'achat max.\",\n        description: CANTONS[canton],\n        propertyId: propertyWithCanton._id,\n        ownFunds,\n        propertyValue: createNewProperty ? undefined : propertyValue,\n        wantedLoan: Math.round(propertyValue * borrowRatio),\n      },\n    });\n  }\n\n  getLoanCalculator({ loanId, structureId }) {\n    const loan = fullLoan.clone({ _id: loanId }).fetchOne();\n    let lenderRules;\n\n    if (loan && loan.structure && loan.structure.offerId) {\n      lenderRules = loan.structure.offer.lender.organisation.lenderRules;\n    } else if (loan.hasPromotion) {\n      const { lenderOrganisationLink } = loan.promotions[0];\n      if (lenderOrganisationLink) {\n        lenderRules = LenderRulesService.fetch({\n          $filters: { 'organisationLink._id': lenderOrganisationLink._id },\n          ...lenderRulesFragment(),\n        });\n      }\n    }\n\n    if (!lenderRules || lenderRules.length === 0) {\n      return Calculator;\n    }\n\n    return new CalculatorClass({\n      loan,\n      structureId,\n      lenderRules,\n    });\n  }\n\n  expireAnonymousLoans() {\n    const lastWeek = moment()\n      .subtract(5, 'days')\n      .toDate();\n\n    return this.baseUpdate(\n      {\n        anonymous: true,\n        status: { $ne: LOAN_STATUS.UNSUCCESSFUL },\n        updatedAt: { $lte: lastWeek },\n      },\n      { $set: { status: LOAN_STATUS.UNSUCCESSFUL } },\n      { multi: true },\n    );\n  }\n\n  insertBorrowers({ loanId, amount }) {\n    const { borrowerIds: existingBorrowers = [], userId } = this.get(loanId);\n\n    if (existingBorrowers.length === 2) {\n      throw new Meteor.Error('Cannot insert more borrowers');\n    }\n\n    if (existingBorrowers.length === 1 && amount === 2) {\n      throw new Meteor.Error('Can insert only one more borrower');\n    }\n\n    if (amount === 1) {\n      const borrowerId = BorrowerService.insert({ userId });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId,\n      });\n    } else if (amount === 2) {\n      const borrowerId1 = BorrowerService.insert({ userId });\n      const borrowerId2 = BorrowerService.insert({ userId });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId1,\n      });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId2,\n      });\n    } else {\n      throw new Meteor.Error('Invalid borrowers number');\n    }\n  }\n\n  // Useful for demos\n  resetLoan({ loanId }) {\n    const loan = this.findOne({ _id: loanId });\n    const { structures = [], borrowerIds = [], status } = loan;\n\n    if (status !== LOAN_STATUS.TEST) {\n      throw new Meteor.Error('Seuls les dossiers avec le statut TEST peuvent être réinitialisés !');\n    }\n\n    // Set step to solvency\n    this.setStep({ loanId, nextStep: STEPS.SOLVENCY });\n\n    // Set application type to simple\n    this.update({\n      loanId,\n      object: { applicationType: APPLICATION_TYPES.SIMPLE },\n    });\n\n    // Remove structures and an empty one\n    // structures.forEach(({ _id: structureId }) => {\n    //   this.removeStructure({ loanId, structureId });\n    // });\n    // this.addNewStructure({ loanId });\n\n    // Remove MaxPropertyValue\n    this.update({\n      loanId,\n      object: { maxPropertyValue: true },\n      operator: '$unset',\n    });\n\n    // Reset borrowers financing info\n    // borrowerIds.forEach((borrowerId) => {\n    //   BorrowerService.update({\n    //     borrowerId,\n    //     object: {\n    //       netSalary: null,\n    //       salary: null,\n    //       bankFortune: null,\n    //       insurance2: [],\n    //       insurance3A: [],\n    //       bank3A: [],\n    //       insurance3B: [],\n    //       otherIncome: [],\n    //       otherFortune: [],\n    //       expenses: [],\n    //       realEstate: [],\n    //       bonusExists: false,\n    //       bonus2015: null,\n    //       bonus2016: null,\n    //       bonus2017: null,\n    //       bonus2018: null,\n    //       bonus2019: null,\n    //     },\n    //   });\n    // });\n  }\n\n  linkPromotion({ promotionId, loanId }) {\n    const { name: promotionName, promotionLoan } = PromotionService.fetchOne({\n      $filters: { _id: promotionId },\n      name: 1,\n      promotionLoan: { _id: 1 },\n    });\n\n    if (promotionLoan && promotionLoan._id) {\n      this.unlinkPromotion({ promotionId, loanId: promotionLoan._id });\n    }\n\n    this.addLink({\n      id: loanId,\n      linkName: 'financedPromotion',\n      linkId: promotionId,\n    });\n\n    this.update({\n      loanId,\n      object: { customName: `Financement de ${promotionName}` },\n    });\n\n    return loanId;\n  }\n\n  unlinkPromotion({ promotionId, loanId }) {\n    this.removeLink({\n      id: loanId,\n      linkName: 'financedPromotion',\n      linkId: promotionId,\n    });\n\n    return this.update({\n      loanId,\n      object: { customName: true },\n      operator: '$unset',\n    });\n  }\n\n  setCreatedAtActivityDescription({ loanId, description }) {\n    const { activities = [] } = this.fetchOne({\n      $filters: { _id: loanId },\n      activities: { secondaryType: 1 },\n    });\n    const { _id: createdAtActivityId } = activities.find(({ secondaryType }) =>\n      secondaryType === ACTIVITY_SECONDARY_TYPES.CREATED) || {};\n\n    if (createdAtActivityId) {\n      ActivityService._update({\n        id: createdAtActivityId,\n        object: { description },\n      });\n    }\n\n    return loanId;\n  }\n}\n\nexport default new LoanService({});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/server/methods.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Analytics from '../../analytics/server/Analytics';\nimport { checkInsertUserId } from '../../helpers/server/methodServerHelpers';\nimport EVENTS from '../../analytics/events';\n\nimport Security from '../../security/Security';\nimport SecurityService from '../../security';\nimport {\n  loanInsert,\n  loanUpdate,\n  loanDelete,\n  requestLoanVerification,\n  confirmClosing,\n  pushLoanValue,\n  popLoanValue,\n  adminLoanInsert,\n  addNewStructure,\n  removeStructure,\n  updateStructure,\n  selectStructure,\n  duplicateStructure,\n  assignLoanToUser,\n  switchBorrower,\n  sendNegativeFeedbackToAllLenders,\n  loanUpdatePromotionInvitedBy,\n  reuseProperty,\n  setMaxPropertyValueWithoutBorrowRatio,\n  addNewMaxStructure,\n  setLoanStep,\n  loanShareSolvency,\n  anonymousLoanInsert,\n  userLoanInsert,\n  loanInsertBorrowers,\n  adminLoanReset,\n  loanLinkPromotion,\n  loanUnlinkPromotion,\n  loanSetCreatedAtActivityDescription,\n  loanSetStatus,\n} from '../methodDefinitions';\nimport { STEPS, LOAN_STATUS } from '../loanConstants';\nimport LoanService from './LoanService';\n\nloanInsert.setHandler((context, { loan, userId }) => {\n  userId = checkInsertUserId(userId);\n  return LoanService.insert({ loan, userId });\n});\n\nloanUpdate.setHandler((context, { loanId, object }) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  return LoanService.update({ loanId, object });\n});\n\nloanDelete.setHandler((context, { loanId }) => {\n  SecurityService.loans.isAllowedToDelete(loanId);\n  return LoanService.remove({ loanId });\n});\n\nrequestLoanVerification.setHandler((context, { loanId }) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  return LoanService.askVerification({ loanId });\n});\n\nconfirmClosing.setHandler((context, { loanId, object }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LoanService.confirmClosing({ loanId, object });\n});\n\npushLoanValue.setHandler((context, { loanId, object }) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  return LoanService.pushValue({ loanId, object });\n});\n\npopLoanValue.setHandler((context, { loanId, object }) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  return LoanService.popValue({ loanId, object });\n});\n\nexport const adminLoanInsertHandler = ({ userId: adminUserId }, { userId }) => {\n  SecurityService.checkUserIsAdmin(adminUserId);\n  return LoanService.fullLoanInsert({ userId });\n};\nadminLoanInsert.setHandler(adminLoanInsertHandler);\n\nuserLoanInsert.setHandler(({ userId }, { test, proPropertyId }) => {\n  SecurityService.checkLoggedIn();\n\n  if (proPropertyId) {\n    return LoanService.insertPropertyLoan({\n      userId,\n      propertyIds: [proPropertyId],\n      loan: { displayWelcomeScreen: false },\n    });\n  }\n\n  return LoanService.fullLoanInsert({\n    userId,\n    loan: {\n      displayWelcomeScreen: false,\n      status: test ? LOAN_STATUS.TEST : LOAN_STATUS.LEAD,\n    },\n  });\n});\n\nexport const addStructureHandler = (context, { loanId }) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  return LoanService.addNewStructure({ loanId });\n};\naddNewStructure.setHandler(addStructureHandler);\n\nexport const removeStructureHandler = (context, { loanId, structureId }) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  return LoanService.removeStructure({ loanId, structureId });\n};\nremoveStructure.setHandler(removeStructureHandler);\n\nexport const updateStructureHandler = (\n  context,\n  { loanId, structureId, structure },\n) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  return LoanService.updateStructure({ loanId, structureId, structure });\n};\nupdateStructure.setHandler(updateStructureHandler);\n\nexport const selectStructureHandler = (context, { loanId, structureId }) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  return LoanService.selectStructure({ loanId, structureId });\n};\nselectStructure.setHandler(selectStructureHandler);\n\nexport const duplicateStructureHandler = (context, { loanId, structureId }) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  return LoanService.duplicateStructure({ loanId, structureId });\n};\nduplicateStructure.setHandler(duplicateStructureHandler);\n\nassignLoanToUser.setHandler(({ userId }, params) => {\n  const { anonymous } = LoanService.fetchOne({\n    $filters: { _id: params.loanId },\n    anonymous: 1,\n  });\n\n  if (anonymous) {\n    SecurityService.loans.checkAnonymousLoan(params.loanId);\n  } else {\n    SecurityService.checkUserIsAdmin(userId);\n  }\n\n  LoanService.assignLoanToUser(params);\n});\n\nswitchBorrower.setHandler((context, params) => {\n  SecurityService.loans.isAllowedToUpdate(params.loanId);\n  return LoanService.switchBorrower(params);\n});\n\nsendNegativeFeedbackToAllLenders.setHandler((context, params) => {\n  const { userId } = context;\n  Security.checkUserIsAdmin(userId);\n  context.unblock();\n  return LoanService.sendNegativeFeedbackToAllLenders(params);\n});\n\nloanUpdatePromotionInvitedBy.setHandler(({ userId }, params) => {\n  Security.checkUserIsAdmin(userId);\n  LoanService.updatePromotionInvitedBy(params);\n});\n\nreuseProperty.setHandler((context, params) => {\n  SecurityService.loans.isAllowedToUpdate(params.loanId);\n  LoanService.reuseProperty(params);\n});\n\nsetMaxPropertyValueWithoutBorrowRatio.setHandler((context, params) => {\n  SecurityService.loans.isAllowedToUpdate(params.loanId);\n  return LoanService.setMaxPropertyValueWithoutBorrowRatio(params);\n});\n\naddNewMaxStructure.setHandler((context, params) => {\n  SecurityService.loans.isAllowedToUpdate(params.loanId);\n  return LoanService.addNewMaxStructure(params);\n});\n\nsetLoanStep.setHandler((context, params) => {\n  const userAllowedSteps = [STEPS.SOLVENCY, STEPS.REQUEST];\n\n  if (userAllowedSteps.includes(params.nextStep)) {\n    SecurityService.loans.isAllowedToUpdate(params.loanId);\n  } else {\n    Security.checkUserIsAdmin(context.userId);\n  }\n\n  context.unblock();\n  return LoanService.setStep(params);\n});\n\nloanShareSolvency.setHandler((context, params) => {\n  const { loanId, shareSolvency } = params;\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  return LoanService.update({\n    loanId: params.loanId,\n    object: { shareSolvency },\n  });\n});\n\nanonymousLoanInsert.setHandler((context, params) => {\n  const {\n    proPropertyId,\n    existingAnonymousLoanId,\n    referralId,\n    trackingId,\n  } = params;\n  if (proPropertyId) {\n    SecurityService.properties.isAllowedToAddAnonymousLoan({\n      propertyId: proPropertyId,\n    });\n  }\n\n  if (existingAnonymousLoanId) {\n    // If an anonymous loan exists on the client, don't add another one\n    // If a new property is requested on it, add it to the existing loan\n    if (proPropertyId) {\n      const existingLoan = LoanService.fetchOne({\n        $filters: { _id: existingAnonymousLoanId },\n        propertyIds: 1,\n      });\n\n      if (\n        existingLoan\n        && existingLoan.propertyIds\n        && !existingLoan.propertyIds.includes(proPropertyId)\n      ) {\n        // TODO: Quentin, track this\n        LoanService.addPropertyToLoan({\n          loanId: existingAnonymousLoanId,\n          propertyId: proPropertyId,\n        });\n      }\n    }\n\n    return existingAnonymousLoanId;\n  }\n\n  const loanId = LoanService.insertAnonymousLoan(params);\n  const analytics = new Analytics(context);\n  analytics.track(\n    EVENTS.LOAN_CREATED,\n    {\n      loanId,\n      propertyId: proPropertyId,\n      referralId,\n      anonymous: true,\n    },\n    trackingId,\n  );\n  return loanId;\n});\n\nloanInsertBorrowers.setHandler((context, params) => {\n  const { loanId } = params;\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  LoanService.insertBorrowers(params);\n});\n\nadminLoanReset.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LoanService.resetLoan(params);\n});\n\nloanLinkPromotion.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return LoanService.linkPromotion(params);\n});\n\nloanUnlinkPromotion.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return LoanService.unlinkPromotion(params);\n});\n\nloanSetCreatedAtActivityDescription.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return LoanService.setCreatedAtActivityDescription(params);\n});\n\nloanSetStatus.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return LoanService.setStatus(params);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"loanListeners.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/server/loanListeners.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport ServerEventService from '../../events/server/ServerEventService';\nimport LoanService from './LoanService';\nimport { requestLoanVerification } from '../..';\n\nexport const disableUserFormsListener = ({ params: { loanId } }) => {\n  LoanService.update({ loanId, object: { userFormsEnabled: false } });\n};\n\nServerEventService.addAfterMethodListener(\n  requestLoanVerification,\n  disableUserFormsListener,\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/server/hooks.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport FileService from '../../files/server/FileService';\nimport BorrowerService from '../../borrowers/server/BorrowerService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport UpdateWatcherService from '../../updateWatchers/server/UpdateWatcherService';\nimport ActivityService from '../../activities/server/ActivityService';\nimport SecurityService from '../../security';\nimport { ROLES, PROPERTY_CATEGORY } from '../../constants';\nimport Loans from '../loans';\n\n// Autoremove borrowers and properties\nLoans.before.remove((userId, { borrowerIds, propertyIds }) => {\n  borrowerIds.forEach((borrowerId) => {\n    const { loans } = BorrowerService.createQuery({\n      $filters: { _id: borrowerId },\n      loans: { _id: 1 },\n    }).fetchOne();\n\n    if (loans.length === 1) {\n      BorrowerService.remove({ borrowerId });\n    }\n  });\n  propertyIds.forEach((propertyId) => {\n    const { loans, category } = PropertyService.createQuery({\n      $filters: { _id: propertyId },\n      loans: { _id: 1 },\n      category: 1,\n    }).fetchOne();\n\n    if (loans.length === 1 && category === PROPERTY_CATEGORY.USER) {\n      PropertyService.remove({ propertyId });\n    }\n  });\n});\n\nUpdateWatcherService.addUpdateWatching({\n  collection: Loans,\n  fields: [\n    'applicationType',\n    'contacts',\n    'customName',\n    'previousLoanTranches',\n    'purchaseType',\n    'residenceType',\n    'step',\n    'verificationStatus',\n    // 'selectedStructure',\n    // 'structures', // The structures notifications are hard to read in slack\n  ],\n  shouldWatch: ({ userId }) =>\n    SecurityService.hasRole(userId, ROLES.USER)\n    || SecurityService.hasRole(userId, ROLES.PRO),\n});\n\nLoans.after.remove((userId, { _id }) => FileService.deleteAllFilesForDoc(_id));\n\nLoans.after.insert((userId, doc) =>\n  ActivityService.addCreatedAtActivity({\n    createdAt: doc.createdAt,\n    loanLink: { _id: doc._id },\n    title: 'Dossier créé',\n  }));\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/server/exposures.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport OrganisationService from 'core/api/organisations/server/OrganisationService';\nimport { formatLoanWithDocuments } from '../../../utils/loanFunctions';\nimport UserService from '../../users/server/UserService';\nimport { createSearchFilters } from '../../helpers/mongoHelpers';\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\n\nimport {\n  adminLoans,\n  anonymousLoan,\n  fullLoan,\n  loanSearch,\n  proLoans,\n  proPromotionLoans,\n  proPropertyLoans,\n  proReferredByLoans,\n  userLoans,\n  proLoansAggregate,\n} from '../queries';\nimport { LOAN_STATUS } from '../loanConstants';\nimport {\n  proLoansResolver,\n  getLoanIds,\n  proPromotionLoansResolver,\n  proPropertyLoansResolver,\n  proReferredByLoansResolver,\n} from './resolvers';\n\nexposeQuery({\n  query: adminLoans,\n  overrides: {\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: {\n          _id,\n          assignedEmployeeId,\n          category,\n          hasPromotion,\n          noPromotion,\n          lenderId,\n          name,\n          owned,\n          promotionId,\n          relevantOnly,\n          status,\n          step,\n        },\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (name) {\n          filters.name = name;\n        }\n\n        if (owned) {\n          filters.userId = { $exists: true };\n        }\n\n        if (assignedEmployeeId) {\n          filters['userCache.assignedEmployeeCache._id'] = assignedEmployeeId;\n        }\n\n        if (relevantOnly) {\n          filters.status = {\n            $nin: [LOAN_STATUS.TEST, LOAN_STATUS.UNSUCCESSFUL],\n          };\n          filters.anonymous = { $ne: true };\n        }\n\n        if (step) {\n          filters.step = step;\n        }\n\n        if (category) {\n          filters.category = category;\n        }\n\n        if (status) {\n          filters.status = status;\n        }\n\n        if (hasPromotion) {\n          filters.$or = [\n            { 'promotionLinks.0._id': { $exists: true } },\n            { 'financedPromotionLink._id': { $exists: true } },\n          ];\n        }\n\n        if (promotionId) {\n          filters.$or = [\n            { 'promotionLinks.0._id': promotionId },\n            { 'financedPromotionLink._id': promotionId },\n          ];\n        }\n\n        if (noPromotion) {\n          filters['promotionLinks.0._id'] = { $exists: false };\n        }\n\n        if (lenderId) {\n          filters.lendersCache = {\n            $elemMatch: { 'organisationLink._id': lenderId },\n          };\n        }\n      };\n    },\n    validateParams: {\n      _id: Match.Maybe(String),\n      assignedEmployeeId: Match.Maybe(Match.OneOf(Object, String)),\n      category: Match.Maybe(Match.OneOf(Object, String)),\n      hasPromotion: Match.Maybe(Boolean),\n      lenderId: Match.Maybe(Match.OneOf(Object, String)),\n      name: Match.Maybe(String),\n      noPromotion: Match.Maybe(Boolean),\n      owned: Match.Maybe(Boolean),\n      promotionId: Match.Maybe(Match.OneOf(Object, String)),\n      relevantOnly: Match.Maybe(Boolean),\n      status: Match.Maybe(Match.OneOf(Object, String)),\n      step: Match.Maybe(Match.OneOf(Object, String)),\n    },\n  },\n});\n\nexposeQuery({\n  query: anonymousLoan,\n  overrides: {\n    firewall(userId, params) {\n      SecurityService.loans.checkAnonymousLoan(params._id);\n    },\n    validateParams: { _id: String },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: fullLoan,\n  overrides: {\n    embody: (body) => {\n      body.$postFilter = (loans = []) => loans.map(formatLoanWithDocuments);\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: loanSearch,\n  overrides: {\n    firewall(userId) {\n      SecurityService.checkUserIsAdmin(userId);\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { searchQuery } }) => {\n        Object.assign(\n          filters,\n          createSearchFilters(['name', '_id', 'customName'], searchQuery),\n        );\n      };\n    },\n    validateParams: { searchQuery: Match.Maybe(String) },\n  },\n});\n\nexposeQuery({\n  query: proLoans,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        userId: providedUserId,\n        fetchOrganisationLoans,\n        organisationId,\n        promotionId,\n        propertyId,\n      } = params;\n      params.calledByUserId = userId;\n\n      if (providedUserId && SecurityService.isUserAdmin(userId)) {\n        params.userId = providedUserId;\n      } else {\n        params.userId = userId;\n      }\n\n      if (fetchOrganisationLoans) {\n        if (organisationId) {\n          SecurityService.checkUserIsAdmin(userId);\n        } else {\n          const { organisations } = UserService.fetchOne({\n            $filters: { _id: userId },\n            organisations: { _id: 1 },\n          });\n\n          if (!organisations || organisations.length === 0) {\n            throw new Meteor.Error(\"Pas d'organisation!\");\n          }\n\n          params.organisationId = organisations[0]._id;\n        }\n      }\n\n      SecurityService.checkUserIsPro(userId);\n    },\n    validateParams: {\n      promotionId: Match.Maybe(Match.OneOf(String, Object)),\n      propertyId: Match.Maybe(Match.OneOf(String, Object)),\n      userId: String,\n      calledByUserId: String,\n      organisationId: Match.Maybe(String),\n      fetchOrganisationLoans: Match.Maybe(Boolean),\n      status: Match.Maybe(Match.OneOf(String, Object)),\n    },\n  },\n  cacher: {\n    getDataToHash: getLoanIds({ withReferredBy: true }),\n    ttl: 60 * 1000,\n  },\n  resolver: proLoansResolver,\n});\n\nexposeQuery({\n  query: proPromotionLoans,\n  overrides: {\n    firewall(userId, params) {\n      const { promotionId } = params;\n      params.userId = userId;\n      SecurityService.checkUserIsPro(userId);\n      SecurityService.promotions.isAllowedToView({ userId, promotionId });\n    },\n    validateParams: { promotionId: String, userId: String },\n  },\n  resolver: ({ userId, promotionId }) =>\n    proPromotionLoansResolver({ calledByUserId: userId, promotionId }),\n});\n\nexposeQuery({\n  query: proPropertyLoans,\n  overrides: {\n    firewall(userId, params) {\n      const { propertyId } = params;\n      params.userId = userId;\n      SecurityService.checkUserIsPro(userId);\n      SecurityService.properties.isAllowedToView({ propertyId, userId });\n    },\n    validateParams: { propertyId: String, userId: String },\n  },\n  resolver: ({ userId, propertyId }) =>\n    proPropertyLoansResolver({ calledByUserId: userId, propertyId }),\n});\n\nexposeQuery({\n  query: proReferredByLoans,\n  overrides: {\n    firewall(userId, params) {\n      const { userId: providedUserId } = params;\n      SecurityService.checkUserIsPro(userId);\n      if (SecurityService.isUserAdmin(userId)) {\n        params.userId = providedUserId;\n      } else {\n        params.userId = userId;\n      }\n      params.calledByUserId = userId;\n    },\n    validateParams: { userId: String, calledByUserId: String },\n  },\n  resolver: proReferredByLoansResolver,\n});\n\nexposeQuery({\n  query: proLoansAggregate,\n  overrides: {\n    firewall(userId, params) {\n      let organisation;\n      if (!SecurityService.isUserAdmin(userId)) {\n        SecurityService.checkUserIsPro(userId);\n\n        const { organisationId } = params;\n        organisation = OrganisationService.fetchOne({\n          $filters: { _id: organisationId, 'userLinks._id': userId },\n          userLinks: 1,\n        });\n\n        if (!organisation) {\n          SecurityService.handleUnauthorized('Not allowed to access this organisation');\n        }\n      }\n\n      params.userIds = organisation.userLinks\n        .filter(({ isMain }) => isMain)\n        .map(({ _id }) => _id);\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { organisationId, userIds } }) => {\n        filters.$or = [\n          { 'userCache.referredByOrganisationLink': organisationId },\n          { referralId: { $in: userIds } },\n        ];\n      };\n    },\n    validateParams: { organisationId: String, userIds: Match.Maybe([String]) },\n  },\n});\n\nexposeQuery({\n  query: userLoans,\n  overrides: {\n    firewall(userId, params) {\n      if (params.userId) {\n        SecurityService.checkUserIsAdmin(userId);\n      } else {\n        params.userId = userId;\n\n        if (!userId) {\n          SecurityService.loans.checkAnonymousLoan(params.loanId);\n        }\n      }\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params }) => {\n        filters.userId = params.userId;\n        if (params.loanId) {\n          filters._id = params.loanId;\n        }\n      };\n\n      if (!embodyParams.userId) {\n        body.maxPropertyValue = 0;\n      }\n    },\n    validateParams: {\n      loanId: Match.Maybe(String),\n      userId: Match.Maybe(String),\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"resolvers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/server/resolvers.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport uniqBy from 'lodash/uniqBy';\n\nimport {\n  PROPERTIES_COLLECTION,\n  PROPERTY_CATEGORY,\n  RESIDENCE_TYPE,\n  PROPERTY_SOLVENCY,\n} from '../../properties/propertyConstants';\nimport { PROMOTIONS_COLLECTION } from '../../promotions/promotionConstants';\nimport UserService from '../../users/server/UserService';\nimport { makeLoanAnonymizer as makePromotionLoanAnonymizer } from '../../promotions/server/promotionServerHelpers';\nimport { proLoans, revenue } from '../../fragments';\nimport SecurityService from '../../security';\nimport { makeProPropertyLoanAnonymizer } from '../../properties/server/propertyServerHelpers';\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport LoanService from './LoanService';\n\nconst proLoansFragment = proLoans();\n\nconst isSolventForProProperty = ({\n  isAdmin,\n  property,\n  maxPropertyValue,\n  residenceType,\n  shareSolvency,\n}) => {\n  if (!maxPropertyValue) {\n    return PROPERTY_SOLVENCY.UNDETERMINED;\n  }\n\n  if (!shareSolvency && !isAdmin) {\n    return PROPERTY_SOLVENCY.NOT_SHARED;\n  }\n\n  const {\n    main: {\n      max: { propertyValue: mainMaxValue },\n    },\n    second: {\n      max: { propertyValue: secondMaxValue },\n    },\n  } = maxPropertyValue;\n  const { totalValue } = property;\n\n  switch (residenceType) {\n  case RESIDENCE_TYPE.MAIN_RESIDENCE: {\n    return totalValue <= mainMaxValue\n      ? PROPERTY_SOLVENCY.SOLVENT\n      : PROPERTY_SOLVENCY.INSOLVENT;\n  }\n  case RESIDENCE_TYPE.SECOND_RESIDENCE: {\n    return totalValue <= secondMaxValue\n      ? PROPERTY_SOLVENCY.SOLVENT\n      : PROPERTY_SOLVENCY.INSOLVENT;\n  }\n  default:\n    return null;\n  }\n};\n\nconst handleLoanSolvencySharing = ({ isAdmin = false }) => (loanObject) => {\n  const { maxPropertyValue, shareSolvency, ...loan } = loanObject;\n\n  const propertiesWithSolvency = loan.properties.map(property => ({\n    ...property,\n    solvent: isSolventForProProperty({\n      isAdmin,\n      property,\n      maxPropertyValue,\n      residenceType: loan.residenceType,\n      shareSolvency,\n    }),\n  }));\n\n  return {\n    ...loan,\n    properties: propertiesWithSolvency,\n  };\n};\n\nconst anonymizePromotionLoans = ({ loans = [], userId }) =>\n  loans.map((loan) => {\n    const { promotions } = loan;\n    const promotionId = promotions[0]._id;\n\n    const promotionLoanAnonymizer = makePromotionLoanAnonymizer({\n      userId,\n      promotionId,\n    });\n\n    return promotionLoanAnonymizer(loan);\n  });\n\nconst anonymizePropertyLoans = ({ loans = [], userId }) =>\n  loans.map((loan) => {\n    const { properties } = loan;\n    const proPropertyIds = properties\n      .filter(({ category }) => category === PROPERTY_CATEGORY.PRO)\n      .map(({ _id }) => _id);\n    return makeProPropertyLoanAnonymizer({\n      userId,\n      propertyIds: proPropertyIds,\n    })(loan);\n  });\n\nconst anonymizeReferredByLoans = ({ loans = [], userId }) => [\n  ...loans,\n  // Don't anonymize referred loans\n  // ...anonymizePromotionLoans({\n  //   loans: loans.filter(({ hasPromotion }) => hasPromotion),\n  //   userId,\n  // }),\n\n  // ...anonymizePropertyLoans({\n  //   loans: loans.filter(({ hasProProperty }) => hasProProperty),\n  //   userId,\n  // }),\n  // ...loans.filter(({ hasPromotion, hasProProperty }) => !hasPromotion && !hasProProperty),\n];\n\nconst doesUserShareCustomers = ({ $metadata: { shareCustomers } }) =>\n  shareCustomers;\n\nexport const proReferredByLoansResolver = ({\n  userId,\n  calledByUserId,\n  status,\n}) => {\n  const mainOrganisation = UserService.getUserMainOrganisation(userId);\n  let mainOrganisationsUserIds = [];\n\n  if (mainOrganisation) {\n    const { _id: mainOrganisationId } = mainOrganisation;\n\n    const { users: mainOrganisationUsers = [] } = OrganisationService.fetchOne({\n      $filters: { _id: mainOrganisationId },\n      users: { _id: 1 },\n    });\n    mainOrganisationsUserIds = mainOrganisationUsers\n      .filter(({ _id }) => _id !== userId)\n      .filter(doesUserShareCustomers)\n      .map(({ _id }) => _id);\n  }\n\n  const users = UserService.fetch({\n    $filters: {\n      referredByUserLink: { $in: [userId, ...mainOrganisationsUserIds] },\n    },\n    loans: { ...proLoansFragment, $filters: status ? { status } : {} },\n  });\n\n  const loans = users.reduce(\n    (allLoans, { loans: userLoans = [] }) => [...allLoans, ...userLoans],\n    [],\n  );\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans;\n  } catch (error) {\n    return anonymizeReferredByLoans({ loans, userId: calledByUserId });\n  }\n};\n\nexport const proPromotionLoansResolver = ({\n  calledByUserId,\n  promotionId,\n  status,\n}) => {\n  const loans = LoanService.fetch({\n    $filters: { 'promotionLinks._id': promotionId, status },\n    ...proLoansFragment,\n  });\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans;\n  } catch (error) {\n    return anonymizePromotionLoans({ loans, userId: calledByUserId });\n  }\n};\n\nexport const proPropertyLoansResolver = ({\n  calledByUserId,\n  propertyId,\n  status,\n}) => {\n  const loans = LoanService.fetch({\n    $filters: { propertyIds: propertyId, status },\n    ...proLoansFragment,\n  });\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans.map(handleLoanSolvencySharing({ isAdmin: true }));\n  } catch (error) {\n    return anonymizePropertyLoans({\n      loans: loans.map(handleLoanSolvencySharing({ isAdmin: false })),\n      userId: calledByUserId,\n    });\n  }\n};\n\nconst shouldShowPromotionLoan = ({ userId }) => (loan) => {\n  const { promotions = [] } = loan;\n  const {\n    $metadata: { invitedBy },\n  } = promotions[0];\n  return invitedBy === userId;\n};\n\nconst getRelatedProPropertiesOfUser = ({ loan, userId }) => {\n  const { properties = [] } = loan;\n  return properties\n    .filter(property => property.category === PROPERTY_CATEGORY.PRO)\n    .filter(({ users = [] }) => users.some(({ _id }) => _id === userId))\n    .map(property => ({ ...property, collection: PROPERTIES_COLLECTION }));\n};\n\nconst promotionHasUser = userId => ({ users = [] }) =>\n  users.some(({ _id }) => _id === userId);\n\nconst getRelatedPromotionsOfUser = ({ loan, userId }) => {\n  const { promotions = [] } = loan;\n  return promotions\n    .filter(promotionHasUser(userId))\n    .map(promotion => ({ ...promotion, collection: PROMOTIONS_COLLECTION }));\n};\n\nconst organisationLoans = ({ organisationId, status }) =>\n  LoanService.fetch({\n    $filters: {\n      'userCache.referredByOrganisationLink': organisationId,\n      status,\n    },\n    ...proLoansFragment,\n    revenues: revenue(),\n    user: { organisationLink: 1 },\n  });\n\nexport const proLoansResolver = ({\n  userId,\n  calledByUserId,\n  promotionId,\n  propertyId,\n  fetchOrganisationLoans,\n  organisationId,\n  status,\n}) => {\n  let loans = [];\n\n  if (fetchOrganisationLoans) {\n    return organisationLoans({ organisationId, status });\n  }\n\n  if (promotionId) {\n    const promotionLoans = proPromotionLoansResolver({\n      calledByUserId,\n      promotionId,\n      status,\n    })\n      .filter(shouldShowPromotionLoan({ userId }))\n      .map(loan => ({\n        ...loan,\n        relatedTo: getRelatedPromotionsOfUser({ loan, userId }),\n      }));\n    loans = promotionLoans;\n  }\n\n  if (propertyId) {\n    const propertyLoans = proPropertyLoansResolver({\n      calledByUserId,\n      propertyId,\n      status,\n    }).map(loan => ({\n      ...loan,\n      relatedTo: getRelatedProPropertiesOfUser({ loan, userId }),\n    }));\n    loans = [...loans, ...propertyLoans];\n  }\n\n  const referredByLoans = proReferredByLoansResolver({\n    userId,\n    calledByUserId,\n    status,\n  }).map(loan => ({\n    ...loan,\n    relatedTo: [\n      ...getRelatedProPropertiesOfUser({ loan, userId }),\n      ...getRelatedPromotionsOfUser({ loan, userId }),\n    ],\n  }));\n  loans = [...loans, ...referredByLoans];\n\n  return uniqBy(loans, '_id');\n};\n\nexport const getLoanIds = ({ withReferredBy = false } = {}) => (params = {}) => {\n  const { promotionId, propertyId, userId, status } = params;\n  let loanIds = [];\n\n  if (withReferredBy) {\n    const { organisations = [] } = UserService.fetch({\n      $filters: { _id: userId },\n      organisations: { _id: 1 },\n    });\n\n    const organisationId = !!organisations.length && organisations[0]._id;\n\n    const users = UserService.fetch({\n      $filters: {\n        $or: [\n          { referredByUserLink: userId },\n          organisationId && { referredByOrganisationLink: organisationId },\n        ].filter(x => x),\n      },\n      loans: { _id: 1, $filters: status ? { status } : {} },\n    });\n\n    loanIds = users.reduce(\n      (allLoans, { loans: userLoans = [] }) => [\n        ...allLoans,\n        ...userLoans.map(({ _id }) => _id),\n      ],\n      [],\n    );\n  }\n\n  if (promotionId) {\n    const promotionLoanIds = LoanService.fetch({\n      $filters: { 'promotionLinks._id': promotionId, status },\n      _id: 1,\n    });\n    loanIds = [...loanIds, ...promotionLoanIds.map(({ _id }) => _id)];\n  }\n\n  if (propertyId) {\n    const propertyLoanIds = LoanService.fetch({\n      $filters: { propertyIds: propertyId, status },\n      _id: 1,\n    });\n    loanIds = [...loanIds, ...propertyLoanIds.map(({ _id }) => _id)];\n  }\n\n  return loanIds;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/server/serverReducers.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport merge from 'lodash/merge';\nimport omit from 'lodash/omit';\n\nimport Calculator from '../../../utils/Calculator';\nimport Loans from '../loans';\nimport assigneeReducer from '../../reducers/assigneeReducer';\nimport { userLoan } from '../../fragments';\n\nconst body = merge(\n  {},\n  omit(userLoan(), [\n    'maxPropertyValue',\n    'offers',\n    'promotions',\n    'user',\n    'promotionOptions',\n    'borrowers.mortgageNotes',\n    'borrowers.loans',\n  ]),\n  {\n    documents: 1,\n    borrowers: {\n      documents: 1,\n    },\n    properties: {\n      documents: 1,\n    },\n  },\n);\n\nLoans.addReducers({\n  ...assigneeReducer(),\n  loanProgress: {\n    body,\n    reduce: loan => ({\n      info: Calculator.personalInfoPercent({ loan }),\n      documents: Calculator.filesProgress({ loan }).percent,\n      verificationStatus: loan.verificationStatus,\n    }),\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"expireLoansCron.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/server/expireLoansCron.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { SyncedCron } from 'meteor/littledata:synced-cron';\n\nimport SlackService from '../../slack/server/SlackService';\nimport LoanService from './LoanService';\n\nSyncedCron.add({\n  name: 'Expire anonymous loans',\n  schedule(parser) {\n    return parser.text('every day');\n  },\n  job() {\n    try {\n      const count = LoanService.expireAnonymousLoans();\n      console.log(`Expired ${count} loans`);\n    } catch (error) {\n      SlackService.sendError({\n        error,\n        additionalData: ['Expire anonymous loans CRON error'],\n      });\n    }\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/queries.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport omit from 'lodash/omit';\n\nimport Loans from '.';\nimport { LOAN_QUERIES } from './loanConstants';\nimport { adminLoan, userLoan, proLoanWithRevenues } from '../fragments';\n\nexport const adminLoans = Loans.createQuery(\n  LOAN_QUERIES.ADMIN_LOANS,\n  {\n    ...adminLoan({ withSort: true }),\n    $options: { sort: { createdAt: -1 } },\n  },\n  { scoped: true },\n);\n\nexport const anonymousLoan = Loans.createQuery(\n  LOAN_QUERIES.ANONYMOUS_LOAN,\n  { ...omit(userLoan(), ['maxPropertyValue']), maxPropertyValueExists: 1 },\n  { scoped: true },\n);\n\n// This query can be used on the server to get a complete loan, just like on the client\nexport const fullLoan = Loans.createQuery(LOAN_QUERIES.FULL_LOAN, {\n  ...adminLoan({ withSort: true }),\n});\n\nexport const loanSearch = Loans.createQuery(LOAN_QUERIES.LOAN_SEARCH, {\n  name: 1,\n  createdAt: 1,\n  updatedAt: 1,\n  step: 1,\n  $options: { sort: { createdAt: -1 }, limit: 5 },\n});\n\n// Sort this query properly so that the merge on the client succeeds\nexport const proLoans = Loans.createQuery(LOAN_QUERIES.PRO_LOANS, () => {});\n\nexport const proLoansAggregate = Loans.createQuery(\n  LOAN_QUERIES.PRO_LOANS_AGGREGATE,\n  proLoanWithRevenues(),\n);\n\nexport const proPromotionLoans = Loans.createQuery(\n  LOAN_QUERIES.PRO_PROMOTION_LOANS,\n  () => {},\n);\n\nexport const proPropertyLoans = Loans.createQuery(\n  LOAN_QUERIES.PRO_PROPERTY_LOANS,\n  () => {},\n);\n\nexport const proReferredByLoans = Loans.createQuery(\n  LOAN_QUERIES.PRO_REFERRED_BY_LOANS,\n  () => {},\n);\n\nexport const userLoans = Loans.createQuery(\n  LOAN_QUERIES.USER_LOANS,\n  {\n    ...userLoan({ withSort: true, withFilteredPromotions: true }),\n    maxPropertyValueExists: 1,\n  },\n  { scoped: true },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"fakes.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/fakes.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { RESIDENCE_TYPE, STEPS } from '../constants';\n\nexport const emptyLoan = {\n  step: STEPS.SOLVENCY,\n  documents: {},\n  contacts: [],\n};\n\nexport const loanStep1 = {\n  residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n  purchaseType: 'ACQUISITION',\n  step: STEPS.SOLVENCY,\n  structures: [\n    {\n      id: 'randomStructureId',\n      wantedLoan: 800000,\n    },\n  ],\n  selectedStructure: 'randomStructureId',\n};\n\nexport const loanStep2 = {\n  residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n  purchaseType: 'ACQUISITION',\n  step: STEPS.OFFERS,\n  displayWelcomeScreen: false,\n  structures: [\n    {\n      id: 'randomStructureId',\n      wantedLoan: 800000,\n    },\n  ],\n  selectedStructure: 'randomStructureId',\n  contacts: [\n    {\n      name: 'Jean Dupont',\n      phoneNumber: '+41 22 566 01 10',\n      title: 'Courtier immobilier',\n      email: 'digital@e-potek.ch',\n    },\n  ],\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/links.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\n\nimport Loans from './loans';\nimport {\n  Borrowers,\n  Lenders,\n  PromotionLots,\n  PromotionOptions,\n  Promotions,\n  Properties,\n  Revenues,\n  Tasks,\n  Users,\n} from '..';\n\nimport LinkInitializer from '../links/LinkInitializer';\nimport Activities from '../activities/activities';\n\nexport const userCache = {\n  _id: 1,\n  firstName: 1,\n  lastName: 1,\n  referredByOrganisationLink: 1,\n  assignedEmployeeCache: 1,\n};\n\nexport const lendersCache = {\n  status: 1,\n  contactLink: 1,\n  organisationLink: 1,\n};\n\nexport const tasksCache = {\n  createdAt: 1,\n  dueAt: 1,\n  status: 1,\n  title: 1,\n  isPrivate: 1,\n  assigneeLink: 1,\n};\n\nLinkInitializer.directInit(() => {\n  Loans.addLinks({\n    activities: {\n      inversedBy: 'loan',\n      collection: Activities,\n      autoremove: true,\n    },\n    borrowers: {\n      field: 'borrowerIds',\n      collection: Borrowers,\n      type: 'many',\n    },\n    promotions: {\n      field: 'promotionLinks',\n      collection: Promotions,\n      type: 'many',\n      metadata: true,\n    },\n    promotionOptions: {\n      field: 'promotionOptionLinks',\n      collection: PromotionOptions,\n      type: 'many',\n      unique: true,\n      metadata: true,\n      autoremove: true,\n    },\n    properties: {\n      field: 'propertyIds',\n      collection: Properties,\n      type: 'many',\n    },\n    revenues: {\n      field: 'revenueLinks',\n      collection: Revenues,\n      type: 'many',\n      unique: true,\n    },\n    user: {\n      field: 'userId',\n      collection: Users,\n      type: 'one',\n      denormalize: {\n        field: 'userCache',\n        body: userCache,\n      },\n    },\n    financedPromotion: {\n      field: 'financedPromotionLink',\n      type: 'one',\n      metadata: true,\n      unique: true,\n      collection: Promotions,\n    },\n  });\n});\n\nLinkInitializer.inversedInit(() => {\n  Loans.addLinks({\n    attributedPromotionLots: {\n      collection: PromotionLots,\n      inversedBy: 'attributedTo',\n    },\n    lenders: {\n      collection: Lenders,\n      inversedBy: 'loan',\n      unique: true,\n      autoremove: true,\n      denormalize: {\n        field: 'lendersCache',\n        body: lendersCache,\n      },\n    },\n    tasks: {\n      collection: Tasks,\n      inversedBy: 'loan',\n      autoremove: true,\n      denormalize: {\n        field: 'tasksCache',\n        body: tasksCache,\n      },\n    },\n  });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/loans/reducers.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport omit from 'lodash/omit';\nimport Loans from '.';\nimport {\n  formatLoanWithStructure,\n  nextDueTaskReducer,\n} from '../../utils/loanFunctions';\nimport { STEPS, STEP_ORDER } from './loanConstants';\nimport { fullOffer, userProperty, loanPromotionOption } from '../fragments';\nimport { PROPERTY_CATEGORY } from '../properties/propertyConstants';\n\nLoans.addReducers({\n  structure: {\n    body: {\n      selectedStructure: 1,\n      structures: 1,\n      properties: omit(userProperty(), ['loans', '$options', 'user']),\n      offers: 1,\n      promotionOptions: loanPromotionOption(),\n    },\n    reduce: formatLoanWithStructure,\n  },\n  offers: {\n    body: { lenders: { offers: omit(fullOffer(), ['user']) } },\n    reduce: ({ lenders = [] }) =>\n      lenders.reduce(\n        (allOffers, { offers = [] }) => [...allOffers, ...offers],\n        [],\n      ),\n  },\n  hasPromotion: {\n    body: { promotions: { _id: 1 } },\n    reduce: ({ promotions }) => !!(promotions && promotions.length > 0),\n  },\n  enableOffers: {\n    body: { step: 1 },\n    reduce: ({ step }) =>\n      step && STEP_ORDER.indexOf(step) >= STEP_ORDER.indexOf(STEPS.OFFERS),\n  },\n  hasProProperty: {\n    body: { properties: { category: 1 } },\n    reduce: ({ properties = [] }) =>\n      properties.some(({ category }) => category === PROPERTY_CATEGORY.PRO),\n  },\n  maxPropertyValueExists: {\n    body: { maxPropertyValue: { date: 1 }, user: { _id: 1 } },\n    reduce: ({ maxPropertyValue, user }) =>\n      !!(!user && maxPropertyValue && maxPropertyValue.date),\n  },\n  nextDueTask: {\n    body: { tasksCache: 1 },\n    reduce: nextDueTaskReducer,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lots\":{\"lotConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lots/lotConstants.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const LOTS_COLLECTION = 'lots';\n\nexport const LOT_TYPES = {\n  BASEMENT: 'BASEMENT',\n  PARKING_MOTORBIKE: 'PARKING_MOTORBIKE',\n  PARKING_CAR: 'PARKING_CAR',\n  PARKING_IN_A_ROW: 'PARKING_IN_A_ROW',\n  PARKING_DISABLED: 'PARKING_DISABLED',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"LotSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lots/schemas/LotSchema.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\nimport { LOT_TYPES } from '../lotConstants';\nimport { createdAt, updatedAt, moneyField } from '../../helpers/sharedSchemas';\n\nconst LotSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  name: String,\n  type: {\n    type: String,\n    allowedValues: Object.values(LOT_TYPES),\n    uniforms: { displayEmpty: false },\n  },\n  description: { type: String, optional: true },\n  value: {\n    ...moneyField,\n    optional: false,\n  },\n});\n\nexport default LotSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lots/index.js                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './lots';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lots/methodDefinitions.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const lotInsert = new Method({\n  name: 'lotInsert',\n  params: {\n    promotionId: String,\n    lot: Object,\n  },\n});\n\nexport const lotUpdate = new Method({\n  name: 'lotUpdate',\n  params: {\n    lotId: String,\n    object: Object,\n  },\n});\n\nexport const lotRemove = new Method({\n  name: 'lotRemove',\n  params: {\n    lotId: String,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lots.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lots/lots.js                                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport LotSchema from './schemas/LotSchema';\nimport { LOTS_COLLECTION } from './lotConstants';\n\nconst Lots = new Mongo.Collection(LOTS_COLLECTION);\n\nLots.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nLots.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nLots.attachSchema(LotSchema);\nexport default Lots;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"LotService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lots/server/LotService.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport CollectionService from '../../helpers/CollectionService';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport { LOT_ERRORS, ERROR_CODES } from '../../errors';\nimport { PROMOTION_LOT_STATUS } from '../../promotionLots/promotionLotConstants';\nimport Lots from '../lots';\n\nexport class LotService extends CollectionService {\n  constructor() {\n    super(Lots);\n  }\n\n  update = ({ lotId, object: { promotionLotId, ...rest } }) => {\n    const currentPromotionLot = PromotionLotService.findOne({\n      'lotLinks._id': lotId,\n    });\n\n    const currentPromotionLotId = currentPromotionLot\n      ? currentPromotionLot._id\n      : null;\n\n    const currentPromotionLotStatus = currentPromotionLot\n      ? currentPromotionLot.status\n      : null;\n\n    if (\n      currentPromotionLotStatus\n      && currentPromotionLotStatus !== PROMOTION_LOT_STATUS.AVAILABLE\n    ) {\n      throw new Meteor.Error(\n        ERROR_CODES.FORBIDDEN,\n        LOT_ERRORS.PROMOTION_LOT_BOOKED_OR_SOLD,\n      );\n    }\n\n    if (currentPromotionLotId !== promotionLotId) {\n      if (currentPromotionLotId !== null && promotionLotId !== undefined) {\n        PromotionLotService.removeLotLink({\n          promotionLotId: currentPromotionLotId,\n          lotId,\n        });\n      }\n\n      if (promotionLotId) {\n        PromotionLotService.addLotToPromotionLot({\n          promotionLotId,\n          lotId,\n        });\n      }\n    }\n\n    return this._update({ id: lotId, object: rest });\n  };\n}\n\nexport default new LotService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lots/server/methods.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport PromotionService from '../../promotions/server/PromotionService';\nimport { lotInsert, lotUpdate, lotRemove } from '../methodDefinitions';\nimport LotService from './LotService';\n\nlotInsert.setHandler(({ userId }, { promotionId, lot }) => {\n  SecurityService.promotions.isAllowedToAddLots({ promotionId, userId });\n  const lotId = LotService.insert(lot);\n  PromotionService.addLink({\n    id: promotionId,\n    linkName: 'lots',\n    linkId: lotId,\n  });\n  return lotId;\n});\n\nlotUpdate.setHandler(({ userId }, params) => {\n  const { lotId } = params;\n  SecurityService.promotions.isAllowedToModifyAdditionalLot({ lotId, userId });\n  return LotService.update(params);\n});\n\nlotRemove.setHandler(({ userId }, { lotId }) => {\n  SecurityService.promotions.isAllowedToRemoveAdditionalLot({ lotId, userId });\n  return LotService.remove(lotId);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lots/server/serverReducers.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Lots from '..';\nimport assigneeReducer from '../../reducers/assigneeReducer';\n\nLots.addReducers({\n  ...assigneeReducer(\n    { promotions: { userLinks: 1 } },\n    ({ promotions }) =>\n      !!(\n        promotions\n        && promotions.length > 0\n        && promotions[0].userLinks\n        && promotions[0].userLinks.length > 0\n      ) && promotions[0].userLinks[0]._id,\n  ),\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lots/links.js                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Lots from '.';\n\nimport { Promotions, PromotionLots, PromotionOptions } from '..';\n\nLots.addLinks({\n  promotions: {\n    collection: Promotions,\n    inversedBy: 'lots',\n  },\n  promotionLots: {\n    collection: PromotionLots,\n    inversedBy: 'lots',\n  },\n  promotionOptions: {\n    collection: PromotionOptions,\n    inversedBy: 'lots',\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lots/reducers.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Lots from '.';\n\nLots.addReducers({\n  status: {\n    body: {\n      promotionLots: { status: 1, value: 1 },\n    },\n    reduce: ({ promotionLots }) =>\n      promotionLots && promotionLots[0] && promotionLots[0].status,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"offers\":{\"offerConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/offerConstants.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const OFFER_TYPE = {\n  STANDARD: 'STANDARD',\n  COUNTERPARTS: 'COUNTERPARTS',\n};\n\nexport const OFFERS_COLLECTION = 'offers';\n\nexport const OFFER_QUERIES = {\n  LOAN_OFFERS: 'LOAN_OFFERS',\n  ADMIN_OFFERS: 'ADMIN_OFFERS',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"offers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/offers.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nimport { INTEREST_RATES, OFFERS_COLLECTION } from '../constants';\nimport {\n  createdAt,\n  updatedAt,\n  percentageField,\n  moneyField,\n  cacheField,\n} from '../helpers/sharedSchemas';\n\nconst Offers = new Mongo.Collection(OFFERS_COLLECTION);\n\n// Prevent all client side modifications of mongoDB\nOffers.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\nOffers.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nexport const OfferSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  organisationLink: { type: Object, optional: true },\n  'organisationLink._id': { type: String, optional: true },\n  contactLink: { type: Object, optional: true },\n  'contactLink._id': String,\n  'contactLink.feedback': { type: String, optional: true },\n  maxAmount: moneyField,\n  amortizationGoal: percentageField,\n  amortizationYears: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    max: 100,\n    optional: true,\n  },\n  fees: moneyField,\n  epotekFees: moneyField,\n  // For each existing rate, insert an allowed value in the schema\n  ...Object.values(INTEREST_RATES).reduce(\n    (accumulator, interestKey) => ({\n      ...accumulator,\n      [interestKey]: percentageField,\n    }),\n    {},\n  ),\n  conditions: {\n    type: Array,\n    optional: true,\n    defaultValue: [],\n  },\n  'conditions.$': { type: String, optional: true },\n  lenderLink: { type: Object, optional: true },\n  'lenderLink._id': { type: String, optional: true },\n  feedback: { type: Object, optional: true },\n  'feedback.message': { type: String, optional: true },\n  'feedback.date': { type: Date, optional: true },\n  withCounterparts: { type: Boolean, optional: true },\n  enableOffer: { type: Boolean, defaultValue: true, optional: true },\n  lenderCache: cacheField,\n});\n\nexport const AdminOfferSchema = OfferSchema.omit(\n  'lenderLink',\n  'organisationLink',\n  'contactLink',\n  'createdAt',\n  'updatedAt',\n  'feedback',\n  'lenderCache',\n);\n\n// Attach schema\nOffers.attachSchema(OfferSchema);\nexport default Offers;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/index.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport * as methodDefinitions from './methodDefinitions';\n\nexport * from './methodDefinitions';\nexport { default } from './offers';\nexport const offerMethods = methodDefinitions;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/methodDefinitions.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const offerInsert = new Method({\n  name: 'offerInsert',\n  params: {\n    offer: Object,\n  },\n});\n\nexport const offerUpdate = new Method({\n  name: 'offerUpdate',\n  params: {\n    offerId: String,\n    object: Object,\n  },\n});\n\nexport const offerDelete = new Method({\n  name: 'offerDelete',\n  params: {\n    offerId: String,\n  },\n});\n\nexport const offerSendFeedback = new Method({\n  name: 'offerSendFeedback',\n  params: {\n    offerId: String,\n    feedback: String,\n    saveFeedback: Match.Maybe(Boolean),\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"OfferService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/server/OfferService.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport moment from 'moment';\n\nimport CollectionService from '../../helpers/CollectionService';\nimport LoanService from '../../loans/server/LoanService';\nimport LenderService from '../../lenders/server/LenderService';\nimport { LENDER_STATUS } from '../../lenders/lenderConstants';\nimport { fullOffer } from '../../fragments';\nimport { EMAIL_IDS } from '../../email/emailConstants';\nimport { sendEmailToAddress } from '../../methods';\nimport Offers from '../offers';\n\nexport class OfferService extends CollectionService {\n  constructor() {\n    super(Offers);\n  }\n\n  update = ({ offerId, object }) => Offers.update(offerId, { $set: object });\n\n  sendFeedback = ({ offerId, feedback, saveFeedback = true }) => {\n    if (saveFeedback) {\n      this.update({\n        offerId,\n        object: { feedback: { message: feedback, date: new Date() } },\n      });\n    }\n\n    const {\n      createdAt,\n      lender: {\n        organisation: { name: organisationName },\n        contact: { email: address, name },\n        loan: {\n          name: loanName,\n          user: { assignedEmployee },\n        },\n      },\n    } = this.fetchOne({ $filters: { _id: offerId }, ...fullOffer() });\n\n    const { email: assigneeAddress, name: assigneeName } = assignedEmployee || {};\n\n    return sendEmailToAddress.run({\n      emailId: EMAIL_IDS.SEND_FEEDBACK_TO_LENDER,\n      address,\n      name,\n      params: {\n        assigneeAddress,\n        assigneeName,\n        loanName,\n        organisationName,\n        date: moment(createdAt).format('DD.MM.YYYY'),\n        feedback,\n      },\n    });\n  };\n\n  insert = ({ offer: { lenderId, ...offer } }) => {\n    const offerId = Offers.insert({ ...offer });\n    this.addLink({ id: offerId, linkName: 'lender', linkId: lenderId });\n    LenderService._update({\n      id: lenderId,\n      object: { status: LENDER_STATUS.OFFER_RECEIVED },\n    });\n    return offerId;\n  };\n\n  remove = ({ offerId }) => Offers.remove(offerId);\n\n  cleanUpOffer = ({ offerId }) => {\n    const loan = LoanService.fetchOne({\n      $filters: {\n        structures: { $elemMatch: { offerId } },\n      },\n    });\n\n    if (loan) {\n      LoanService.update({\n        loanId: loan._id,\n        object: {\n          structures: loan.structures.map(structure => ({\n            ...structure,\n            offerId:\n              structure.offerId === offerId ? undefined : structure.offerId,\n          })),\n        },\n      });\n    }\n  };\n}\n\nexport default new OfferService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/server/methods.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport OfferService from './OfferService';\nimport {\n  offerInsert,\n  offerUpdate,\n  offerDelete,\n  offerSendFeedback,\n} from '../methodDefinitions';\nimport SecurityService from '../../security';\n\nofferInsert.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return OfferService.insert(params);\n});\n\nofferUpdate.setHandler((context, params) => {\n  SecurityService.offers.isAllowedToUpdate(params.offerId);\n  return OfferService.update(params);\n});\n\nofferDelete.setHandler((context, params) => {\n  SecurityService.offers.isAllowedToDelete(params.offerId);\n  return OfferService.remove(params);\n});\n\nofferSendFeedback.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return OfferService.sendFeedback(params);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/server/hooks.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Offers from '../offers';\nimport OfferService from './OfferService';\n\nOffers.before.remove((userId, { _id: offerId }) => {\n  OfferService.cleanUpOffer({ offerId });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/server/exposures.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\nimport { adminOffers, loanOffers } from '../queries';\n\nexposeQuery({ query: adminOffers, options: { allowFilterById: true } });\n\nexposeQuery({\n  query: loanOffers,\n  overrides: {\n    firewall(userId, { loanId }) {\n      SecurityService.checkLoggedIn();\n\n      if (loanId) {\n        SecurityService.loans.isAllowedToUpdate(loanId);\n      }\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { loanId } }) => {\n        if (loanId) {\n          filters['lenderCache.loanLink._id'] = loanId;\n        }\n      };\n    },\n    validateParams: { loanId: String },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/server/serverReducers.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Offers from '..';\nimport assigneeReducer from '../../reducers/assigneeReducer';\n\nOffers.addReducers({ ...assigneeReducer() });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"fakes.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/fakes.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nconst randInArray = array => array[Math.floor(Math.random() * array.length)];\n\nconst getRandomCondition = () => {\n  const conditions = [\n    'Expertise additionelle requise',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n  ];\n\n  return randInArray(conditions);\n};\n\nconst getRandomCounterpart = () => {\n  const counterparts = [\n    'Gestion de toute la fortune',\n    'Souscrire à une assurance vie',\n    \"Gestion de CHF 100'000 de patrimoine minimum\",\n    'Souscrire à une assurance voiture',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n  ];\n\n  return randInArray(counterparts);\n};\n\nconst round = v => Math.round(v * 10000) / 10000;\n\nconst rand = (min, max) => round(Math.random() * (max - min) + min);\n\nexport const getRandomOffer = ({ loan }) => {\n  const rate1 = rand(0.007, 0.012);\n  const rate2 = rand(0.005, 0.009);\n\n  const loanWanted = loan.structures[0].wantedLoan;\n  const maxAmountLimited = loanWanted > 100000000 ? 100000000 : loanWanted;\n  const counterpart = getRandomCounterpart();\n  const condition = getRandomCondition();\n  return {\n    organisation: 'fake',\n    loanId: loan._id,\n    maxAmount: maxAmountLimited,\n    amortizationGoal: randInArray([0.65, 0.6, 0.5]),\n    interestLibor: rate1,\n    interest1: round(rate1 + rand(0.0004, 0.0016)),\n    interest2: round(rate1 + rand(0.0016, 0.004)),\n    interest5: round(rate1 + rand(0.004, 0.006)),\n    interest10: round(rate1 + rand(0.006, 0.01)),\n    conditions: [condition, counterpart].filter(x => x),\n  };\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/links.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Offers from './offers';\nimport { Users, Lenders } from '..';\n\nOffers.addLinks({\n  user: {\n    field: 'userId',\n    collection: Users,\n    type: 'one',\n  },\n  lender: {\n    field: 'lenderLink',\n    collection: Lenders,\n    type: 'one',\n    metadata: true,\n    denormalize: {\n      field: 'lenderCache',\n      body: {\n        loanLink: 1,\n      },\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/reducers.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Offers from '.';\n\nOffers.addReducers({\n  loanId: {\n    body: { lender: { loan: { _id: 1 } } },\n    reduce: ({\n      lender: {\n        loan: { _id: loanId },\n      },\n    }) => loanId,\n  },\n  organisation: {\n    body: { lender: { organisation: { name: 1, logo: 1 } } },\n    reduce: ({ lender: { organisation } }) => organisation,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/offers/queries.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { fullOffer } from '../fragments';\nimport { OFFER_QUERIES } from './offerConstants';\nimport Offers from '.';\n\nexport const adminOffers = Offers.createQuery(\n  OFFER_QUERIES.ADMIN_OFFERS,\n  fullOffer(),\n);\n\nexport const loanOffers = Offers.createQuery(OFFER_QUERIES.LOAN_OFFERS, {\n  ...fullOffer(),\n  $options: { sort: { createdAt: -1 } },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"organisations\":{\"organisationConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/organisationConstants.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const ORGANISATIONS_COLLECTION = 'organisations';\n\nexport const ORGANISATION_TYPES = {\n  BANK: 'BANK',\n  INSURANCE: 'INSURANCE',\n  PRIVATE_BANK: 'PRIVATE_BANK',\n  REAL_ESTATE_BROKER: 'REAL_ESTATE_BROKER',\n  NOTARY_OFFICE: 'NOTARY_OFFICE',\n  CONSTRUCTION_COMPANY: 'CONSTRUCTION_COMPANY',\n  DEVELOPER: 'DEVELOPER',\n  ARCHITECT: 'ARCHITECT',\n  OTHER: 'OTHER',\n};\n\nexport const ORGANISATION_QUERIES = {\n  ADMIN_ORGANISATIONS: 'ADMIN_ORGANISATIONS',\n  FILES: 'FILES',\n  ORGANISATION_SEARCH: 'ORGANISATION_SEARCH',\n  PRO_ORGANISATION: 'PRO_ORGANISATION',\n  USER_ORGANISATIONS: 'USER_ORGANISATIONS',\n};\n\nexport const ORGANISATION_FEATURES = {\n  LENDER: 'LENDER',\n  PRO: 'PRO',\n};\n\nexport const ORGANISATION_TAGS = {\n  CH_PREMIUM: 'CH_PREMIUM',\n  CH_RETAIL: 'CH_RETAIL',\n  FR_RETAIL: 'FR_RETAIL',\n  FR_PREMIUM: 'FR_PREMIUM',\n  YACHTING: 'YACHTING',\n  HELICOPTERS_LEASING: 'HELICOPTERS_LEASING',\n  LBO: 'LBO',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"organisations.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/organisations.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport {\n  address,\n  percentageField,\n  moneyField,\n  documentsField,\n} from '../helpers/sharedSchemas';\nimport {\n  ORGANISATIONS_COLLECTION,\n  ORGANISATION_TYPES,\n  ORGANISATION_FEATURES,\n  ORGANISATION_TAGS,\n} from './organisationConstants';\n\n// console.trace();\n\nconst Organisations = new Mongo.Collection(ORGANISATIONS_COLLECTION);\n\nOrganisations.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nOrganisations.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nexport const OrganisationSchema = new SimpleSchema({\n  name: {\n    type: String,\n    uniforms: { placeholder: 'Crédit Suisse' },\n    unique: true,\n  },\n  type: {\n    type: String,\n    allowedValues: Object.values(ORGANISATION_TYPES),\n    uniforms: { displayEmpty: false },\n  },\n  features: {\n    type: Array,\n    optional: true,\n    defaultValue: [],\n    uniforms: { placeholder: null },\n  },\n  'features.$': {\n    type: String,\n    allowedValues: Object.values(ORGANISATION_FEATURES),\n  },\n  logo: {\n    type: String,\n    optional: true,\n  },\n  ...address,\n  contactIds: { type: Array, defaultValue: [] },\n  'contactIds.$': Object,\n  'contactIds.$._id': { type: String, optional: true },\n  'contactIds.$.title': { type: String, optional: true },\n  'contactIds.$.useSameAddress': { type: Boolean, optional: true },\n  tags: {\n    type: Array,\n    optional: true,\n    defaultValue: [],\n    uniforms: { placeholder: null },\n  },\n  'tags.$': { type: String, allowedValues: Object.values(ORGANISATION_TAGS) },\n  userLinks: { type: Array, defaultValue: [] },\n  'userLinks.$': Object,\n  'userLinks.$._id': { type: String, optional: true },\n  'userLinks.$.title': { type: String, optional: true },\n  'userLinks.$.isMain': { type: Boolean, optional: true },\n  'userLinks.$.shareCustomers': { type: Boolean, optional: true },\n  commissionRates: { type: Array, defaultValue: [] },\n  'commissionRates.$': Object,\n  'commissionRates.$.rate': percentageField,\n  'commissionRates.$.threshold': moneyField,\n  documents: documentsField,\n  lenderRulesCount: { type: Number, optional: true },\n});\n\nOrganisations.attachSchema(OrganisationSchema);\nexport default Organisations;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/index.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './organisations';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/methodDefinitions.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const organisationInsert = new Method({\n  name: 'organisationInsert',\n  params: {\n    organisation: Object,\n  },\n});\n\nexport const organisationUpdate = new Method({\n  name: 'organisationUpdate',\n  params: {\n    organisationId: String,\n    object: Object,\n  },\n});\n\nexport const organisationRemove = new Method({\n  name: 'organisationRemove',\n  params: {\n    organisationId: String,\n  },\n});\n\nexport const addContactToOrgnaisation = new Method({\n  name: 'addContactToOrganisation',\n  params: {\n    organisationId: String,\n    contactId: String,\n    metadata: Object,\n  },\n});\n\nexport const addUserToOrganisation = new Method({\n  name: 'addUserToOrganisation',\n  params: {\n    organisationId: String,\n    userId: String,\n    metadata: Object,\n  },\n});\n\nexport const removeUserFromOrganisation = new Method({\n  name: 'removeUserFromOrganisation',\n  params: {\n    organisationId: String,\n    userId: String,\n  },\n});\n\nexport const setCommissionRates = new Method({\n  name: 'setCommissionRates',\n  params: {\n    organisationId: String,\n    commissionRates: Array,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"OrganisationService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/server/OrganisationService.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport Organisations from '../organisations';\nimport CollectionService from '../../helpers/CollectionService';\n\nexport class OrganisationService extends CollectionService {\n  constructor() {\n    super(Organisations);\n  }\n\n  setCommissionRates({ commissionRates, organisationId }) {\n    if (commissionRates.length > 0) {\n      if (commissionRates[0].threshold !== 0) {\n        throw new Meteor.Error('Le premier seuil doit être 0');\n      }\n    }\n\n    commissionRates.forEach(({ rate, threshold }, i, arr) => {\n      if (i === 0) {\n        return;\n      }\n\n      const { rate: previousRate, threshold: previousThreshold } = arr[i - 1];\n\n      if (previousRate >= rate) {\n        throw new Meteor.Error('Chaque taux doit être plus élevé que le précédent');\n      }\n\n      if (previousThreshold >= threshold) {\n        throw new Meteor.Error('Chaque seuil doit être plus élevé que le précédent');\n      }\n    });\n\n    return this._update({ id: organisationId, object: { commissionRates } });\n  }\n}\n\nexport default new OrganisationService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/server/methods.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport {\n  organisationInsert,\n  organisationUpdate,\n  organisationRemove,\n  addContactToOrgnaisation,\n  addUserToOrganisation,\n  removeUserFromOrganisation,\n  setCommissionRates,\n} from '../methodDefinitions';\nimport OrganisationService from './OrganisationService';\n\norganisationInsert.setHandler((context, { organisation }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return OrganisationService.insert(organisation);\n});\n\norganisationUpdate.setHandler((context, { organisationId, object }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return OrganisationService._update({ id: organisationId, object });\n});\n\norganisationRemove.setHandler((context, { organisationId }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return OrganisationService.remove(organisationId);\n});\n\naddContactToOrgnaisation.setHandler((context, { organisationId, contactId, metadata }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return OrganisationService.addLink({\n    id: organisationId,\n    linkName: 'contacts',\n    linkId: contactId,\n    metadata,\n  });\n});\n\naddUserToOrganisation.setHandler((context, { organisationId, userId, metadata }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return OrganisationService.addLink({\n    id: organisationId,\n    linkName: 'users',\n    linkId: userId,\n    metadata,\n  });\n});\n\nremoveUserFromOrganisation.setHandler((context, { organisationId, userId }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return OrganisationService.removeLink({\n    id: organisationId,\n    linkName: 'users',\n    linkId: userId,\n  });\n});\n\nsetCommissionRates.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return OrganisationService.setCommissionRates(params);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/server/hooks.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport FileService from '../../files/server/FileService';\nimport Organisations from '../organisations';\n\nOrganisations.after.remove((userId, { _id }) =>\n  FileService.deleteAllFilesForDoc(_id));\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/server/exposures.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\nimport {\n  adminOrganisations,\n  organisationSearch,\n  proOrganisation,\n  userOrganisations,\n} from '../queries';\n\nconst makeFilter = ({ param, field, filters }) => {\n  if (param && !(Array.isArray(param) && !param.length)) {\n    filters[field] = { $in: Array.isArray(param) ? param : [param] };\n  }\n};\n\nexposeQuery({\n  query: adminOrganisations,\n  overrides: {\n    validateParams: {\n      features: Match.Maybe(Match.OneOf(String, [String])),\n      tags: Match.Maybe(Match.OneOf(String, [String])),\n      type: Match.Maybe(Match.OneOf(String, [String])),\n      hasRules: Match.Maybe(Boolean),\n    },\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: { features, tags, type, _id, hasRules },\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (hasRules) {\n          filters.lenderRulesCount = { $gte: 1 };\n        }\n\n        makeFilter({ param: features, field: 'features', filters });\n        makeFilter({ param: tags, field: 'tags', filters });\n        makeFilter({ param: type, field: 'type', filters });\n      };\n      body.$options = { sort: { name: 1 } };\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: organisationSearch,\n  overrides: {\n    firewall: () => {\n      SecurityService.checkCurrentUserIsAdmin();\n    },\n    validateParams: { searchQuery: Match.Maybe(String) },\n  },\n});\n\nexposeQuery({\n  query: proOrganisation,\n  overrides: {\n    firewall: (userId) => {\n      SecurityService.checkUserIsPro(userId);\n    },\n    validateParams: { organisationId: String, $body: Match.Maybe(Object) },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { organisationId } }) => {\n        filters._id = organisationId;\n      };\n    },\n  },\n});\n\nexposeQuery({\n  query: userOrganisations,\n  overrides: {\n    firewall: (userId) => {\n      SecurityService.checkUserLoggedIn(userId);\n    },\n    validateParams: {},\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/server/serverReducers.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Organisations from '..';\nimport RevenueService from '../../revenues/server/RevenueService';\nimport { getCurrentRate } from '../helpers';\n\nOrganisations.addReducers({\n  generatedRevenues: {\n    body: { _id: 1 },\n    reduce: ({ _id: organisationId }) =>\n      RevenueService.getGeneratedRevenues({ organisationId }),\n  },\n  commissionRate: {\n    body: { commissionRates: 1 },\n    reduce: ({ commissionRates = [], _id: organisationId }) => {\n      let generatedRevenues = 0;\n      if (commissionRates.length > 1) {\n        generatedRevenues = RevenueService.getGeneratedRevenues({\n          organisationId,\n        });\n      }\n\n      return getCurrentRate(commissionRates, generatedRevenues);\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/links.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport LinkInitializer from '../links/LinkInitializer';\nimport { Contacts, Lenders, Users, LenderRules, Revenues, Tasks } from '..';\nimport Organisations from './organisations';\n\nOrganisations.addLinks({\n  contacts: {\n    collection: Contacts,\n    field: 'contactIds',\n    type: 'many',\n    metadata: true,\n  },\n  lenders: {\n    collection: Lenders,\n    inversedBy: 'organisation',\n  },\n  users: {\n    collection: Users,\n    field: 'userLinks',\n    type: 'many',\n    metadata: true,\n  },\n  lenderRules: {\n    collection: LenderRules,\n    inversedBy: 'organisation',\n    autoremove: true,\n  },\n  referredCustomers: {\n    collection: Users,\n    inversedBy: 'referredByOrganisation',\n    type: 'many',\n  },\n  revenues: {\n    collection: Revenues,\n    inversedBy: 'organisations',\n    type: 'many',\n  },\n  tasks: {\n    inversedBy: 'organisation',\n    collection: Tasks,\n    autoremove: true,\n  },\n});\n\nLinkInitializer.inversedInit(() => {\n  Organisations.addLinks({\n    sourceOfRevenues: {\n      collection: Revenues,\n      inversedBy: 'organisations',\n    },\n  });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/reducers.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport addressReducer from '../reducers/addressReducer';\nimport Organisations from './organisations';\nimport { fullOffer } from '../fragments';\n\nOrganisations.addReducers({\n  ...addressReducer,\n  offers: {\n    body: {\n      lenders: { offers: fullOffer() },\n    },\n    reduce: ({ lenders = [] }) =>\n      lenders.reduce(\n        (allOffers, { offers = [] }) => [...allOffers, ...offers],\n        [],\n      ),\n  },\n  offerCount: {\n    body: {\n      lenders: { offers: { _id: 1 } },\n    },\n    reduce: ({ lenders = [] }) =>\n      lenders.reduce((tot, { offers = [] }) => tot + offers.length, 0),\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/queries.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { createSearchFilters } from '../helpers';\nimport { fullOrganisation, userOrganisation } from '../fragments';\nimport {\n  ORGANISATION_QUERIES,\n  ORGANISATION_FEATURES,\n} from './organisationConstants';\nimport Organisations from '.';\n\nexport const adminOrganisations = Organisations.createQuery(\n  ORGANISATION_QUERIES.ADMIN_ORGANISATIONS,\n  fullOrganisation(),\n  { scoped: true },\n);\n\nexport const organisationSearch = Organisations.createQuery(\n  ORGANISATION_QUERIES.ORGANISATION_SEARCH,\n  {\n    $filter({ filters, params: { searchQuery } }) {\n      Object.assign(\n        filters,\n        createSearchFilters(['name', '_id', 'type'], searchQuery),\n      );\n    },\n    name: 1,\n    $options: { sort: { name: 1 }, limit: 5 },\n  },\n);\n\nexport const proOrganisation = Organisations.createQuery(\n  ORGANISATION_QUERIES.PRO_ORGANISATION,\n  fullOrganisation(),\n);\n\nexport const userOrganisations = Organisations.createQuery(\n  ORGANISATION_QUERIES.USER_ORGANISATIONS,\n  {\n    $filter({ filters }) {\n      filters.features = { $in: [ORGANISATION_FEATURES.LENDER] };\n    },\n    $options: { sort: { name: 1 } },\n    ...userOrganisation(),\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"helpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/organisations/helpers.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const getCurrentRate = (commissionRates, referredRevenues) => {\n  if (!commissionRates || commissionRates.length === 0) {\n    return 0;\n  }\n\n  if (commissionRates.length === 1) {\n    return commissionRates[0].rate;\n  }\n\n  let index = 0;\n  commissionRates.some(({ threshold }, i) => {\n    if (threshold > referredRevenues) {\n      index = i - 1;\n      return true;\n    }\n\n    index = i;\n    return false;\n  });\n  return commissionRates[index].rate;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"promotionLots\":{\"promotionLotConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/promotionLotConstants.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const PROMOTION_LOTS_COLLECTION = 'promotionLots';\n\nexport const PROMOTION_LOT_STATUS = {\n  AVAILABLE: 'AVAILABLE',\n  BOOKED: 'BOOKED',\n  SOLD: 'SOLD',\n};\n\nexport const PROMOTION_LOT_REDUCED_STATUS = {\n  BOOKED_FOR_ME: 'BOOKED_FOR_ME',\n  NOT_AVAILABLE: 'NOT_AVAILABLE',\n  SOLD_TO_ME: 'SOLD_TO_ME',\n};\n\nexport const PROMOTION_LOT_QUERIES = {\n  APP_PROMOTION_LOT: 'APP_PROMOTION_LOT',\n  PRO_PROMOTION_LOT: 'PRO_PROMOTION_LOT',\n  PROMOTION_LOT_FILES: 'PROMOTION_LOT_FILES',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"PromotionLotSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/schemas/PromotionLotSchema.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\nimport { PROMOTION_LOT_STATUS } from '../promotionLotConstants';\nimport {\n  createdAt,\n  updatedAt,\n} from '../../helpers/sharedSchemas';\n\nconst PromotionLotSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  status: {\n    type: String,\n    allowedValues: Object.values(PROMOTION_LOT_STATUS),\n    defaultValue: PROMOTION_LOT_STATUS.AVAILABLE,\n  },\n  propertyLinks: { type: Array, minCount: 1, maxCount: 1 },\n  'propertyLinks.$': Object,\n  'propertyLinks.$._id': { type: String, optional: true },\n  lotLinks: { type: Array, defaultValue: [] },\n  'lotLinks.$': Object,\n  'lotLinks.$._id': { type: String, optional: true },\n  attributedToLink: { type: Object, optional: true },\n  'attributedToLink._id': { type: String, optional: true },\n});\n\nexport default PromotionLotSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/index.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './promotionLots';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/methodDefinitions.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const promotionLotInsert = new Method({\n  name: 'promotionLotInsert',\n  params: {\n    promotionLot: Object,\n    promotionId: String,\n  },\n});\n\nexport const promotionLotUpdate = new Method({\n  name: 'promotionLotUpdate',\n  params: {\n    promotionLotId: String,\n    object: Object,\n  },\n});\n\nexport const promotionLotRemove = new Method({\n  name: 'promotionLotRemove',\n  params: {\n    promotionLotId: String,\n  },\n});\n\nexport const addLotToPromotionLot = new Method({\n  name: 'addLotToPromotionLot',\n  params: {\n    promotionLotId: String,\n    lotId: String,\n  },\n});\n\nexport const removeLotLink = new Method({\n  name: 'removeLotLink',\n  params: {\n    promotionLotId: String,\n    lotId: String,\n  },\n});\n\nexport const bookPromotionLot = new Method({\n  name: 'bookPromotionLot',\n  params: {\n    promotionLotId: String,\n    loanId: String,\n  },\n});\n\nexport const cancelPromotionLotBooking = new Method({\n  name: 'cancelPromotionLotBooking',\n  params: {\n    promotionLotId: String,\n  },\n});\n\nexport const sellPromotionLot = new Method({\n  name: 'sellPromotionLot',\n  params: {\n    promotionLotId: String,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"promotionLots.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/promotionLots.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport PromotionLotSchema from './schemas/PromotionLotSchema';\nimport { PROMOTION_LOTS_COLLECTION } from './promotionLotConstants';\n\nconst PromotionLots = new Mongo.Collection(PROMOTION_LOTS_COLLECTION);\n\nPromotionLots.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nPromotionLots.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nPromotionLots.attachSchema(PromotionLotSchema);\nexport default PromotionLots;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"PromotionLotService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/server/PromotionLotService.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport CollectionService from '../../helpers/CollectionService';\nimport PromotionLots from '../promotionLots';\nimport { PROMOTION_LOT_STATUS } from '../promotionLotConstants';\n\nexport class PromotionLotService extends CollectionService {\n  constructor() {\n    super(PromotionLots);\n  }\n\n  update({ promotionLotId, ...rest }) {\n    return this._update({ id: promotionLotId, ...rest });\n  }\n\n  addLotToPromotionLot({ promotionLotId, lotId }) {\n    return this.addLink({\n      id: promotionLotId,\n      linkName: 'lots',\n      linkId: lotId,\n    });\n  }\n\n  removeLotLink({ promotionLotId, lotId }) {\n    return this.removeLink({\n      id: promotionLotId,\n      linkName: 'lots',\n      linkId: lotId,\n    });\n  }\n\n  bookPromotionLot({ promotionLotId, loanId }) {\n    this.update({\n      promotionLotId,\n      object: { status: PROMOTION_LOT_STATUS.BOOKED },\n    });\n\n    return this.addLink({\n      id: promotionLotId,\n      linkName: 'attributedTo',\n      linkId: loanId,\n    });\n  }\n\n  cancelPromotionLotBooking({ promotionLotId }) {\n    this.update({\n      promotionLotId,\n      object: { status: PROMOTION_LOT_STATUS.AVAILABLE },\n    });\n    return this.removeLink({\n      id: promotionLotId,\n      linkName: 'attributedTo',\n    });\n  }\n\n  sellPromotionLot({ promotionLotId }) {\n    return this.update({\n      promotionLotId,\n      object: { status: PROMOTION_LOT_STATUS.SOLD },\n    });\n  }\n}\n\nexport default new PromotionLotService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/server/methods.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport PromotionLotService from './PromotionLotService';\nimport {\n  promotionLotInsert,\n  promotionLotUpdate,\n  promotionLotRemove,\n  addLotToPromotionLot,\n  removeLotLink,\n  bookPromotionLot,\n  cancelPromotionLotBooking,\n  sellPromotionLot,\n} from '../methodDefinitions';\n\npromotionLotInsert.setHandler(({ userId }, { promotionLot, promotionId }) => {\n  SecurityService.promotions.isAllowedToAddLots({ promotionId, userId });\n  return PromotionLotService.insert({ promotionLot, promotionId });\n});\n\npromotionLotUpdate.setHandler(({ userId }, { promotionLotId, object }) => {\n  SecurityService.promotions.isAllowedToModifyPromotionLot({\n    promotionLotId,\n    userId,\n  });\n  return PromotionLotService.update({ promotionLotId, object });\n});\n\npromotionLotRemove.setHandler(({ userId }, { promotionLotId }) => {\n  SecurityService.promotions.isAllowedToRemovePromotionLot({\n    promotionLotId,\n    userId,\n  });\n  return PromotionLotService.remove(promotionLotId);\n});\n\naddLotToPromotionLot.setHandler(({ userId }, params) => {\n  SecurityService.promotions.isAllowedToModifyPromotionLot({\n    ...params,\n    userId,\n  });\n  return PromotionLotService.addLotToPromotionLot(params);\n});\n\nremoveLotLink.setHandler(({ userId }, params) => {\n  SecurityService.promotions.isAllowedToModifyPromotionLot({\n    ...params,\n    userId,\n  });\n  return PromotionLotService.removeLotLink(params);\n});\n\nbookPromotionLot.setHandler(({ userId }, params) => {\n  const { promotionLotId, loanId } = params;\n  SecurityService.promotions.isAllowedToBookLotToCustomer({\n    promotionLotId,\n    loanId,\n    userId,\n  });\n  return PromotionLotService.bookPromotionLot(params);\n});\n\ncancelPromotionLotBooking.setHandler(({ userId }, params) => {\n  const { promotionLotId } = params;\n  SecurityService.promotions.isAllowedToCancelLotBooking({\n    promotionLotId,\n    userId,\n  });\n  return PromotionLotService.cancelPromotionLotBooking(params);\n});\n\nsellPromotionLot.setHandler(({ userId }, params) => {\n  const { promotionLotId } = params;\n  SecurityService.promotions.isAllowedToSellLotToCustomer({\n    promotionLotId,\n    userId,\n  });\n  return PromotionLotService.sellPromotionLot(params);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/server/exposures.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\nimport { appPromotionLot, proPromotionLot } from '../queries';\nimport { proPromotionLotResolver } from './resolvers';\n\nexposeQuery({\n  query: appPromotionLot,\n  overrides: {\n    firewall(userId, { promotionLotId }) {\n      SecurityService.promotions.hasAccessToPromotionLot({\n        promotionLotId,\n        userId,\n      });\n    },\n    validateParams: { promotionLotId: String },\n  },\n});\n\nexposeQuery({\n  query: proPromotionLot,\n  overrides: {\n    firewall(userId, params) {\n      const { promotionLotId } = params;\n      params.userId = userId;\n      SecurityService.checkUserIsPro(userId);\n      SecurityService.promotions.isAllowedToViewPromotionLot({\n        promotionLotId,\n        userId,\n      });\n    },\n    validateParams: { promotionLotId: String, userId: String },\n  },\n  resolver: proPromotionLotResolver,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"resolvers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/server/resolvers.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { makePromotionLotAnonymizer } from '../../promotions/server/promotionServerHelpers';\nimport { proPromotionLot as proPromotionLotFragment } from '../../fragments';\nimport SecurityService from '../../security';\nimport PromotionLotService from './PromotionLotService';\n\nexport const proPromotionLotResolver = ({ userId, promotionLotId }) => {\n  const promotionLot = PromotionLotService.fetchOne({\n    $filters: { _id: promotionLotId },\n    ...proPromotionLotFragment(),\n  });\n\n  try {\n    SecurityService.checkCurrentUserIsAdmin(userId);\n    return [promotionLot];\n  } catch (error) {\n    return [promotionLot].map(makePromotionLotAnonymizer({ userId }));\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/server/serverReducers.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport PromotionLots from '../promotionLots';\nimport assigneeReducer from '../../reducers/assigneeReducer';\n\nPromotionLots.addReducers({ ...assigneeReducer() });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/links.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport PromotionLots from '.';\n\nimport { Promotions, Properties, Lots, PromotionOptions, Loans } from '..';\n\nPromotionLots.addLinks({\n  promotion: {\n    collection: Promotions,\n    inversedBy: 'promotionLots',\n  },\n  properties: {\n    collection: Properties,\n    field: 'propertyLinks',\n    type: 'many',\n    metadata: true,\n  },\n  lots: {\n    collection: Lots,\n    field: 'lotLinks',\n    type: 'many',\n    metadata: true,\n  },\n  promotionOptions: {\n    collection: PromotionOptions,\n    inversedBy: 'promotionLots',\n    autoremove: true,\n  },\n  attributedTo: {\n    collection: Loans,\n    field: 'attributedToLink',\n    type: 'one',\n    metadata: true,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/reducers.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport {\n  PROMOTION_LOT_STATUS,\n  PROMOTION_LOT_REDUCED_STATUS,\n} from 'core/api/constants';\nimport PromotionLots from './promotionLots';\n\nPromotionLots.addReducers({\n  name: {\n    body: { properties: { name: 1 } },\n    reduce: ({ properties }) =>\n      properties && properties[0] && properties[0].name,\n  },\n  documents: {\n    body: { properties: { documents: 1 } },\n    reduce: ({ properties }) =>\n      properties && properties[0] && properties[0].documents,\n  },\n  value: {\n    body: { properties: { totalValue: 1 }, lots: { value: 1 } },\n    reduce: ({ properties, lots }) => {\n      // Sometimes, lots are undefined........ fuck me\n      const propertiesValue = properties.reduce(\n        (total, { totalValue }) => total + totalValue,\n        0,\n      );\n      const lotsValue = lots\n        ? lots.reduce((total, { value }) => total + value, 0)\n        : 0;\n\n      return propertiesValue + lotsValue;\n    },\n  },\n  reducedStatus: {\n    body: { status: 1, attributedTo: { user: { _id: 1 } } },\n    reduce: ({ status, attributedTo }) => {\n      if (\n        attributedTo\n        && attributedTo.user\n        && attributedTo.user._id === Meteor.userId()\n      ) {\n        switch (status) {\n        case PROMOTION_LOT_STATUS.BOOKED:\n          return PROMOTION_LOT_REDUCED_STATUS.BOOKED_FOR_ME;\n        case PROMOTION_LOT_STATUS.SOLD:\n          return PROMOTION_LOT_REDUCED_STATUS.SOLD_TO_ME;\n        default:\n          return status;\n        }\n      }\n      if (status === PROMOTION_LOT_STATUS.BOOKED) {\n        return PROMOTION_LOT_REDUCED_STATUS.NOT_AVAILABLE;\n      }\n      return status;\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionLots/queries.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { appPromotionLot as appPromotionLotFragment } from '../fragments';\nimport { PROMOTION_LOT_QUERIES } from './promotionLotConstants';\nimport PromotionLots from '.';\n\nexport const appPromotionLot = PromotionLots.createQuery(\n  PROMOTION_LOT_QUERIES.APP_PROMOTION_LOT,\n  {\n    $filter({ filters, params: { promotionLotId } }) {\n      filters._id = promotionLotId;\n    },\n    ...appPromotionLotFragment(),\n  },\n);\n\nexport const proPromotionLot = PromotionLots.createQuery(\n  PROMOTION_LOT_QUERIES.PRO_PROMOTION_LOT,\n  () => {},\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"promotionOptions\":{\"promotionOptionConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/promotionOptionConstants.js                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const PROMOTION_OPTIONS_COLLECTION = 'promotionOptions';\n\nexport const PROMOTION_OPTION_QUERIES = {\n  APP_PROMOTION_OPTION: 'APP_PROMOTION_OPTION',\n  PRO_PROMOTION_OPTIONS: 'PRO_PROMOTION_OPTIONS',\n};\n\nexport const PROMOTION_OPTION_SOLVENCY = {\n  UNDETERMINED: 'UNDETERMINED',\n  SOLVENT: 'SOLVENT',\n  INSOLVENT: 'INSOLVENT',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"PromotionOptionSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/schemas/PromotionOptionSchema.js                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\nimport { createdAt, updatedAt } from '../../helpers/sharedSchemas';\nimport { PROMOTION_OPTION_SOLVENCY } from '../promotionOptionConstants';\n\nconst PromotionOptionSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  promotionLotLinks: { type: Array, defaultValue: [] },\n  'promotionLotLinks.$': Object,\n  'promotionLotLinks.$._id': { type: String, optional: true },\n  lotLinks: { type: Array, optional: true },\n  'lotLinks.$': Object,\n  'lotLinks.$._id': { type: String, optional: true },\n  custom: {\n    type: String,\n    optional: true,\n  },\n  solvency: {\n    type: String,\n    allowedValues: Object.values(PROMOTION_OPTION_SOLVENCY),\n    defaultValue: PROMOTION_OPTION_SOLVENCY.UNDETERMINED,\n    uniforms: { displayEmpty: false },\n  },\n});\n\nexport default PromotionOptionSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/index.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './promotionOptions';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/methodDefinitions.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const promotionOptionInsert = new Method({\n  name: 'promotionOptionInsert',\n  params: {\n    promotionLotId: String,\n    loanId: String,\n  },\n});\n\nexport const promotionOptionRemove = new Method({\n  name: 'promotionOptionRemove',\n  params: {\n    promotionOptionId: String,\n  },\n});\n\nexport const promotionOptionUpdate = new Method({\n  name: 'promotionOptionUpdate',\n  params: {\n    promotionOptionId: String,\n    object: Object,\n  },\n});\n\nexport const increaseOptionPriority = new Method({\n  name: 'increaseOptionPriority',\n  params: { promotionOptionId: String },\n});\n\nexport const reducePriorityOrder = new Method({\n  name: 'reducePriorityOrder',\n  params: { promotionOptionId: String },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"promotionOptions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/promotionOptions.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport PromotionOptionSchema from './schemas/PromotionOptionSchema';\nimport { PROMOTION_OPTIONS_COLLECTION } from './promotionOptionConstants';\n\nconst PromotionOptions = new Mongo.Collection(PROMOTION_OPTIONS_COLLECTION);\n\nPromotionOptions.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nPromotionOptions.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nPromotionOptions.attachSchema(PromotionOptionSchema);\nexport default PromotionOptions;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"PromotionOptionService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/server/PromotionOptionService.js                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport LoanService from '../../loans/server/LoanService';\nimport CollectionService from '../../helpers/CollectionService';\nimport { fullPromotionOption } from '../../fragments';\nimport PromotionOptions from '../promotionOptions';\n\nexport class PromotionOptionService extends CollectionService {\n  constructor() {\n    super(PromotionOptions);\n  }\n\n  get(promotionOptionId) {\n    return this.collection\n      .createQuery({\n        $filters: { _id: promotionOptionId },\n        ...fullPromotionOption(),\n      })\n      .fetchOne();\n  }\n\n  getPromotion(promotionOptionId) {\n    const promotionOption = this.fetchOne({\n      $filters: { _id: promotionOptionId },\n      promotionLots: { promotion: { _id: 1 } },\n    });\n\n    return (\n      promotionOption.promotionLots\n      && promotionOption.promotionLots[0].promotion\n    );\n  }\n\n  remove({ promotionOptionId }) {\n    const {\n      loan: { _id: loanId },\n    } = this.fetchOne({\n      $filters: { _id: promotionOptionId },\n      loan: { _id: 1 },\n    });\n\n    const promotionId = this.getPromotion(promotionOptionId)._id;\n\n    const newPriorityOrder = LoanService.getPromotionPriorityOrder({\n      loanId,\n      promotionId,\n    }).filter(id => id !== promotionOptionId);\n    LoanService.setPromotionPriorityOrder({\n      loanId,\n      promotionId,\n      priorityOrder: newPriorityOrder,\n    });\n\n    return super.remove(promotionOptionId);\n  }\n\n  insert = ({ promotionLotId, loanId }) => {\n    const { promotionOptions } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      promotionOptions: { _id: 1, promotionLots: { _id: 1 } },\n    });\n\n    const existingPromotionOption = promotionOptions\n      && promotionOptions.find(({ promotionLots }) =>\n        promotionLots\n          && promotionLots.some(lot => lot._id === promotionLotId));\n\n    if (existingPromotionOption) {\n      throw new Meteor.Error('Vous avez déjà choisi ce lot. Essayez de rafraîchir la page.');\n    }\n\n    const promotionOptionId = super.insert({\n      promotionLotLinks: [{ _id: promotionLotId }],\n    });\n    LoanService.addLink({\n      id: loanId,\n      linkName: 'promotionOptions',\n      linkId: promotionOptionId,\n    });\n    const promotionId = this.getPromotion(promotionOptionId)._id;\n    const priorityOrder = LoanService.getPromotionPriorityOrder({\n      loanId,\n      promotionId,\n    });\n    LoanService.setPromotionPriorityOrder({\n      loanId,\n      promotionId,\n      priorityOrder: [...priorityOrder, promotionOptionId],\n    });\n    return promotionOptionId;\n  };\n\n  update = ({ promotionOptionId, ...rest }) =>\n    this._update({ id: promotionOptionId, ...rest });\n\n  changePriorityOrder({ promotionOptionId, change }) {\n    const promotionOption = this.get(promotionOptionId);\n    const { loan } = promotionOption;\n    const { _id: promotionId } = this.getPromotion(promotionOptionId);\n    const priorityOrder = LoanService.getPromotionPriorityOrder({\n      loanId: loan._id,\n      promotionId,\n    });\n    const optionIndex = priorityOrder.indexOf(promotionOptionId);\n\n    if (change < 0 && optionIndex === 0) {\n      return false;\n    }\n\n    if (change > 0 && optionIndex === priorityOrder.length - 1) {\n      return false;\n    }\n\n    const newPriorityOrder = priorityOrder.slice();\n    newPriorityOrder[optionIndex] = priorityOrder[optionIndex + change];\n    newPriorityOrder[optionIndex + change] = promotionOptionId;\n\n    return LoanService.setPromotionPriorityOrder({\n      loanId: loan._id,\n      promotionId,\n      priorityOrder: newPriorityOrder,\n    });\n  }\n\n  increasePriorityOrder({ promotionOptionId }) {\n    return this.changePriorityOrder({ promotionOptionId, change: -1 });\n  }\n\n  reducePriorityOrder({ promotionOptionId }) {\n    return this.changePriorityOrder({ promotionOptionId, change: 1 });\n  }\n}\n\nexport default new PromotionOptionService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/server/methods.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport PromotionOptionService from './PromotionOptionService';\nimport LoanService from '../../loans/server/LoanService';\nimport {\n  promotionOptionInsert,\n  promotionOptionUpdate,\n  promotionOptionRemove,\n  increaseOptionPriority,\n  reducePriorityOrder,\n} from '../methodDefinitions';\n\npromotionOptionInsert.setHandler(({ userId }, params) => {\n  const loan = LoanService.get(params.loanId);\n  SecurityService.checkOwnership(loan);\n  return PromotionOptionService.insert(params);\n});\n\npromotionOptionUpdate.setHandler(({ userId }, params) =>\n  // TODO: Security check\n  PromotionOptionService.update(params));\n\npromotionOptionRemove.setHandler(({ userId }, params) =>\n// TODO: Security check\n\n  PromotionOptionService.remove(params));\n\nincreaseOptionPriority.setHandler((context, params) =>\n  PromotionOptionService.increasePriorityOrder(params));\n\nreducePriorityOrder.setHandler((context, params) =>\n  PromotionOptionService.reducePriorityOrder(params));\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/server/hooks.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport LoanService from '../../loans/server/LoanService';\nimport PromotionOptions from '..';\n\nPromotionOptions.before.remove((userId, { _id: promotionOptionId }) => {\n  // Remove all references to this promotionOption on the loan\n  const loans = LoanService.find({\n    'promotionOptionLinks._id': promotionOptionId,\n  }).fetch();\n\n  loans.forEach((loan) => {\n    LoanService.update({\n      loanId: loan._id,\n      object: {\n        structures: loan.structures.map(structure => ({\n          ...structure,\n          promotionOptionId:\n            structure.promotionOptionId === promotionOptionId\n              ? null\n              : structure.promotionOptionId,\n        })),\n      },\n    });\n  });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/server/exposures.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { makePromotionOptionAnonymizer } from '../../promotions/server/promotionServerHelpers';\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\nimport { appPromotionOption, proPromotionOptions } from '../queries';\n\nexposeQuery({\n  query: appPromotionOption,\n  overrides: {\n    firewall(userId, { promotionOptionId }) {\n      SecurityService.promotions.hasAccessToPromotionOption({\n        promotionOptionId,\n        userId,\n      });\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { promotionOptionId } }) => {\n        filters._id = promotionOptionId;\n      };\n    },\n    validateParams: { promotionOptionId: String },\n  },\n});\n\nexposeQuery({\n  query: proPromotionOptions,\n  overrides: {\n    firewall(userId, params) {\n      const { promotionOptionIds } = params;\n      params.userId = userId;\n      SecurityService.checkUserIsPro(userId);\n      promotionOptionIds.forEach((promotionOptionId) => {\n        SecurityService.promotions.isAllowedToViewPromotionOption({\n          promotionOptionId,\n          userId,\n        });\n      });\n      if (!SecurityService.isUserAdmin(userId)) {\n        params.anonymize = true;\n      }\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params }) => {\n        const { promotionOptionIds = [] } = params;\n        filters._id = { $in: promotionOptionIds };\n      };\n\n      body.$postFilter = (promotionOptions = [], params) => {\n        const { anonymize = false, userId } = params;\n        return anonymize\n          ? promotionOptions.map(makePromotionOptionAnonymizer({ userId }))\n          : promotionOptions;\n      };\n    },\n    validateParams: {\n      promotionOptionIds: [String],\n      userId: String,\n      anonymize: Match.Maybe(Boolean),\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/server/serverReducers.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport PromotionOptions from '..';\nimport assigneeReducer from '../../reducers/assigneeReducer';\n\nPromotionOptions.addReducers({\n  ...assigneeReducer(\n    { promotionLots: { promotion: { userLinks: 1 } } },\n    ({ promotionLots }) =>\n      promotionLots[0].promotion.userLinks.length > 0\n      && promotionLots[0].promotion.userLinks[0]._id,\n  ),\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/links.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport PromotionOptions from '.';\n\nimport { PromotionLots, Lots, Loans } from '..';\n\nPromotionOptions.addLinks({\n  promotionLots: {\n    field: 'promotionLotLinks',\n    collection: PromotionLots,\n    type: 'many',\n    metadata: true,\n  },\n  lots: {\n    field: 'lotLinks',\n    collection: Lots,\n    type: 'many',\n    metadata: true,\n  },\n  loan: {\n    collection: Loans,\n    inversedBy: 'promotionOptions',\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/reducers.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport PromotionOptions from '.';\n\nPromotionOptions.addReducers({\n  promotion: {\n    body: {\n      promotionLots: {\n        promotion: {\n          name: 1,\n          address1: 1,\n          address2: 1,\n          zipCode: 1,\n          canton: 1,\n          city: 1,\n        },\n      },\n    },\n    reduce: ({ promotionLots = [] }) =>\n      (promotionLots.length > 0 ? promotionLots[0].promotion : {}),\n  },\n  name: {\n    body: { promotionLots: { name: 1 } },\n    reduce: ({ promotionLots = [] }) =>\n      (promotionLots.length > 0 ? promotionLots[0].name : ''),\n  },\n  value: {\n    body: { promotionLots: { value: 1 } },\n    reduce: ({ promotionLots = [] }) => {\n      if (promotionLots.length === 0) {\n        return 0;\n      }\n      const { value } = promotionLots[0];\n      return value;\n    },\n  },\n  priority: {\n    body: { loan: { promotionLinks: 1 } },\n    reduce: ({ loan, _id: promotionOptionId }) => {\n      const { promotionLinks } = loan;\n      if (promotionLinks && promotionLinks.length > 0) {\n        return promotionLinks[0].priorityOrder.findIndex(id => id === promotionOptionId);\n      }\n      return null;\n    },\n  },\n  attributedToMe: {\n    body: { promotionLots: { attributedTo: { userId: 1 } } },\n    reduce: ({ promotionLots = [] }) =>\n      !!(\n        promotionLots[0]\n        && promotionLots[0].attributedTo\n        && promotionLots[0].attributedTo.userId === Meteor.userId()\n      ),\n  },\n  canton: {\n    body: { promotionLots: { promotion: { canton: 1 } } },\n    reduce: ({ promotionLots = [] }) =>\n      (promotionLots.length > 0 ? promotionLots[0].promotion.canton : undefined),\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotionOptions/queries.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport {\n  appPromotionOption as appPromotionOptionFragment,\n  proPromotionOption,\n} from '../fragments';\nimport { PROMOTION_OPTION_QUERIES } from './promotionOptionConstants';\nimport PromotionOptions from '.';\n\nexport const appPromotionOption = PromotionOptions.createQuery(\n  PROMOTION_OPTION_QUERIES.APP_PROMOTION_OPTION,\n  appPromotionOptionFragment(),\n);\n\nexport const proPromotionOptions = PromotionOptions.createQuery(\n  PROMOTION_OPTION_QUERIES.PRO_PROMOTION_OPTIONS,\n  proPromotionOption(),\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"promotions\":{\"promotionConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/promotionConstants.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport merge from 'lodash/merge';\nimport { PROMOTION_LOT_STATUS } from '../promotionLots/promotionLotConstants';\n\nexport const PROMOTIONS_COLLECTION = 'promotions';\n\nexport const PROMOTION_TYPES = {\n  CREDIT: 'CREDIT',\n  SHARE: 'SHARE',\n};\n\nexport const PROMOTION_STATUS = {\n  CANCELLED: 'CANCELLED',\n  FINISHED: 'FINISHED',\n  OPEN: 'OPEN',\n  PREPARATION: 'PREPARATION',\n};\n\nexport const PROMOTION_QUERIES = {\n  ADMIN_PROMOTIONS: 'ADMIN_PROMOTIONS',\n  APP_PROMOTION: 'APP_PROMOTION',\n  PRO_PROMOTION: 'PRO_PROMOTION',\n  PRO_PROMOTIONS: 'PRO_PROMOTIONS',\n  PRO_PROMOTION_USERS: 'PRO_PROMOTION_USERS',\n  PROMOTION_FILES: 'PROMOTION_FILES',\n  PROMOTION_SEARCH: 'PROMOTION_SEARCH',\n  PRO_PROMOTION_SIMPLE: 'PRO_PROMOTION_SIMPLE',\n};\n\nexport const PROMOTION_INVITED_BY_TYPE = {\n  ANY: 'ANY',\n  USER: 'USER',\n  ORGANISATION: 'ORGANISATION',\n};\n\nexport const PROMOTION_PERMISSIONS = {\n  DISPLAY_CUSTOMER_NAMES: {\n    FOR_LOT_STATUS: { ...PROMOTION_LOT_STATUS },\n    INVITED_BY: { ...PROMOTION_INVITED_BY_TYPE },\n  },\n};\n\nexport const PROMOTION_PERMISSIONS_BUNDLES = {\n  INVITATION: settings => ({\n    canInviteCustomers: true,\n    displayCustomerNames: {\n      forLotStatus: Object.values(PROMOTION_PERMISSIONS.DISPLAY_CUSTOMER_NAMES.FOR_LOT_STATUS),\n      invitedBy:\n        PROMOTION_PERMISSIONS.DISPLAY_CUSTOMER_NAMES.INVITED_BY.ORGANISATION,\n    },\n  }),\n  CONSULTATION: ({ consultation = {} } = {}) => {\n    const {\n      forLotStatus = [],\n      invitedBy = PROMOTION_PERMISSIONS.DISPLAY_CUSTOMER_NAMES.INVITED_BY.ANY,\n    } = consultation;\n    return {\n      displayCustomerNames: { forLotStatus, invitedBy },\n    };\n  },\n  MODIFICATION: settings => ({\n    canAddLots: true,\n    canModifyLots: true,\n    canRemoveLots: true,\n    canModifyPromotion: true,\n    canManageDocuments: true,\n  }),\n  BOOKING: settings => ({ canBookLots: true }),\n  SELLING: settings => ({ canSellLots: true }),\n};\n\nexport const PROMOTION_PERMISSIONS_FULL_ACCESS = () => {\n  const settings = {\n    consultation: {\n      forLotStatus: Object.values(PROMOTION_PERMISSIONS.DISPLAY_CUSTOMER_NAMES.FOR_LOT_STATUS),\n      invitedBy: PROMOTION_PERMISSIONS.DISPLAY_CUSTOMER_NAMES.INVITED_BY.ANY,\n    },\n  };\n\n  return Object.keys(PROMOTION_PERMISSIONS_BUNDLES).reduce(\n    (bundles, bundle) =>\n      merge({}, bundles, PROMOTION_PERMISSIONS_BUNDLES[bundle](settings)),\n    {},\n  );\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"PromotionSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/schemas/PromotionSchema.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport SimpleSchema from 'simpl-schema';\nimport {\n  PROMOTION_TYPES,\n  PROMOTION_STATUS,\n  PROMOTION_PERMISSIONS,\n} from '../promotionConstants';\nimport {\n  address,\n  contactsSchema,\n  userLinksSchema,\n  createdAt,\n  updatedAt,\n  documentsField,\n  percentageField,\n  dateField,\n} from '../../helpers/sharedSchemas';\n\nconst SCHEMA_BOOLEAN = { type: Boolean, optional: true, defaultValue: false };\n\nexport const promotionPermissionsSchema = {\n  canAddLots: SCHEMA_BOOLEAN,\n  canModifyLots: SCHEMA_BOOLEAN,\n  canRemoveLots: SCHEMA_BOOLEAN,\n  canModifyPromotion: SCHEMA_BOOLEAN,\n  canManageDocuments: SCHEMA_BOOLEAN,\n  displayCustomerNames: {\n    type: SimpleSchema.oneOf(Boolean, Object),\n    optional: true,\n    autoValue() {\n      if (Meteor.isServer && this.isSet) {\n        if (this.value === undefined) {\n          return false;\n        }\n\n        if (this.value instanceof Object) {\n          if (!Object.keys(this.value).length) {\n            return false;\n          }\n\n          if (!this.value.invitedBy) {\n            return false;\n          }\n        }\n\n        return this.value;\n      }\n    },\n  },\n  'displayCustomerNames.forLotStatus': {\n    type: Array,\n    optional: true,\n    defaultValue: [],\n    uniforms: { displayEmpty: false, placeholder: '', checkboxes: true },\n  },\n  'displayCustomerNames.forLotStatus.$': {\n    type: String,\n    allowedValues: Object.values(PROMOTION_PERMISSIONS.DISPLAY_CUSTOMER_NAMES.FOR_LOT_STATUS),\n  },\n  'displayCustomerNames.invitedBy': {\n    type: String,\n    optional: true,\n    allowedValues: Object.values(PROMOTION_PERMISSIONS.DISPLAY_CUSTOMER_NAMES.INVITED_BY),\n    uniforms: { displayEmpty: false, placeholder: '' },\n  },\n  canInviteCustomers: SCHEMA_BOOLEAN,\n  canBookLots: SCHEMA_BOOLEAN,\n  // canPreBookLots: SCHEMA_BOOLEAN,\n  canSellLots: SCHEMA_BOOLEAN,\n};\n\nconst PromotionSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  name: { type: String, uniforms: { placeholder: 'Les Terrasses de Versoix' } },\n  type: {\n    type: String,\n    allowedValues: Object.values(PROMOTION_TYPES),\n    uniforms: { displayEmpty: false },\n  },\n  status: {\n    type: String,\n    allowedValues: Object.values(PROMOTION_STATUS),\n    defaultValue: PROMOTION_STATUS.PREPARATION,\n    uniforms: { displayEmpty: false },\n  },\n  ...address,\n  ...contactsSchema,\n  propertyLinks: { type: Array, defaultValue: [] },\n  'propertyLinks.$': Object,\n  'propertyLinks.$._id': { type: String, optional: true },\n  lotLinks: { type: Array, defaultValue: [] },\n  'lotLinks.$': Object,\n  'lotLinks.$._id': { type: String, optional: true },\n  promotionLotLinks: { type: Array, defaultValue: [] },\n  'promotionLotLinks.$': Object,\n  'promotionLotLinks.$._id': { type: String, optional: true },\n  assignedEmployeeId: { type: String, optional: true },\n  ...userLinksSchema(promotionPermissionsSchema),\n  documents: documentsField,\n  lenderOrganisationLink: { type: Object, optional: true },\n  'lenderOrganisationLink._id': { type: String, optional: true },\n  constructionTimeline: { type: Array, defaultValue: [] },\n  'constructionTimeline.$': Object,\n  'constructionTimeline.$.description': String,\n  'constructionTimeline.$.duration': Number,\n  'constructionTimeline.$.percent': { ...percentageField, optional: false },\n  signingDate: dateField,\n});\n\nexport const BasePromotionSchema = PromotionSchema.pick(\n  'name',\n  'type',\n  'address1',\n  'address2',\n  'zipCode',\n  'city',\n  'contacts',\n);\n\nexport default PromotionSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/index.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './promotions';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/methodDefinitions.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const promotionInsert = new Method({\n  name: 'promotionInsert',\n  params: {\n    promotion: Object,\n  },\n});\n\nexport const promotionUpdate = new Method({\n  name: 'promotionUpdate',\n  params: {\n    promotionId: String,\n    object: Object,\n  },\n});\n\nexport const promotionRemove = new Method({\n  name: 'promotionRemove',\n  params: {\n    promotionId: String,\n  },\n});\n\nexport const insertPromotionProperty = new Method({\n  name: 'insertPromotionProperty',\n  params: {\n    promotionId: String,\n    property: Object,\n  },\n});\n\nexport const setPromotionUserPermissions = new Method({\n  name: 'setPromotionUserPermissions',\n  params: {\n    promotionId: String,\n    userId: String,\n    permissions: Object,\n  },\n});\n\nexport const addProUserToPromotion = new Method({\n  name: 'addProUserToPromotion',\n  params: {\n    promotionId: String,\n    userId: String,\n  },\n});\n\nexport const removeProFromPromotion = new Method({\n  name: 'removeProFromPromotion',\n  params: {\n    promotionId: String,\n    userId: String,\n  },\n});\n\nexport const sendPromotionInvitationEmail = new Method({\n  name: 'sendPromotionInvitationEmail',\n  params: {\n    userId: String,\n    email: String,\n    isNewUser: Boolean,\n    promotionId: String,\n    firstName: String,\n  },\n});\n\nexport const removeLoanFromPromotion = new Method({\n  name: 'removeLoanFromPromotion',\n  params: {\n    promotionId: String,\n    loanId: String,\n  },\n});\n\nexport const editPromotionLoan = new Method({\n  name: 'editPromotionLoan',\n  params: {\n    promotionId: String,\n    loanId: String,\n    promotionLotIds: [String],\n    showAllLots: Match.Optional(Boolean),\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"promotions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/promotions.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport PromotionSchema from './schemas/PromotionSchema';\nimport { PROMOTIONS_COLLECTION } from './promotionConstants';\n\nconst Promotions = new Mongo.Collection(PROMOTIONS_COLLECTION);\n\nPromotions.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nPromotions.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nPromotions.attachSchema(PromotionSchema);\nexport default Promotions;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"PromotionService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/server/PromotionService.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport { HTTP_STATUS_CODES } from '../../RESTAPI/server/restApiConstants';\nimport UserService from '../../users/server/UserService';\nimport LoanService from '../../loans/server/LoanService';\nimport FileService from '../../files/server/FileService';\nimport CollectionService from '../../helpers/CollectionService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport {\n  PROMOTION_STATUS,\n  PROMOTION_PERMISSIONS_FULL_ACCESS,\n} from '../../constants';\nimport { sendEmail } from '../../email/methodDefinitions';\nimport { EMAIL_IDS } from '../../email/emailConstants';\nimport { PROPERTY_CATEGORY } from '../../properties/propertyConstants';\nimport PromotionOptionService from '../../promotionOptions/server/PromotionOptionService';\nimport SecurityService from '../../security';\nimport Promotions from '../promotions';\n\nexport class PromotionService extends CollectionService {\n  constructor() {\n    super(Promotions);\n  }\n\n  insert({ promotion = {}, userId }) {\n    const isAdmin = SecurityService.isUserAdmin(userId);\n\n    return super.insert({\n      ...promotion,\n      userLinks: isAdmin\n        ? undefined\n        : [{ _id: userId, permissions: PROMOTION_PERMISSIONS_FULL_ACCESS() }],\n    });\n  }\n\n  insertPromotionProperty({ promotionId, property }) {\n    const { address1, address2, zipCode, city, canton } = this.get(promotionId);\n    const propertyId = PropertyService.insert({\n      property: {\n        ...property,\n        address1,\n        address2,\n        zipCode,\n        city,\n        canton,\n        category: PROPERTY_CATEGORY.PROMOTION,\n      },\n    });\n    const promotionLotId = PromotionLotService.insert({\n      propertyLinks: [{ _id: propertyId }],\n    });\n    this.addLink({\n      id: promotionId,\n      linkName: 'promotionLots',\n      linkId: promotionLotId,\n    });\n    this.addLink({\n      id: promotionId,\n      linkName: 'properties',\n      linkId: propertyId,\n    });\n\n    return promotionLotId;\n  }\n\n  update({ promotionId, ...rest }) {\n    const result = this._update({ id: promotionId, ...rest });\n\n    const { propertyLinks, ...address } = this.fetchOne({\n      $filters: { _id: promotionId },\n      propertyLinks: 1,\n      address1: 1,\n      address2: 1,\n      city: 1,\n      zipCode: 1,\n    });\n\n    propertyLinks.forEach(({ _id }) => {\n      PropertyService.update({ propertyId: _id, object: address });\n    });\n\n    return result;\n  }\n\n  remove({ promotionId }) {\n    return super.remove(promotionId);\n  }\n\n  inviteUser({\n    promotionId,\n    userId,\n    isNewUser,\n    pro = {},\n    sendInvitation = true,\n    promotionLotIds,\n    showAllLots,\n    shareSolvency,\n  }) {\n    const promotion = this.get(promotionId);\n    const user = UserService.get(userId);\n    const allowAddingUsers = promotion.status === PROMOTION_STATUS.OPEN;\n\n    if (!allowAddingUsers) {\n      throw new Meteor.Error(\"Vous ne pouvez pas inviter de clients lorsque la promotion n'est pas en vente, contactez-nous pour valider la promotion.\");\n    }\n\n    if (UserService.hasPromotion({ userId, promotionId })) {\n      throw new Meteor.Error(\n        HTTP_STATUS_CODES.CONFLICT,\n        'Cet utilisateur est déjà invité à cette promotion',\n      );\n    }\n\n    const loanId = LoanService.insertPromotionLoan({\n      userId,\n      promotionId,\n      invitedBy: pro._id,\n      showAllLots,\n      promotionLotIds,\n      shareSolvency,\n    });\n\n    if (isNewUser) {\n      const admin = UserService.get(promotion.assignedEmployeeId);\n      UserService.assignAdminToUser({ userId, adminId: admin && admin._id });\n    }\n\n    const { assignedEmployeeId } = UserService.fetchOne({\n      $filters: { _id: userId },\n      assignedEmployeeId: 1,\n    });\n\n    if (sendInvitation) {\n      return this.sendPromotionInvitationEmail({\n        userId,\n        isNewUser,\n        promotionId,\n        firstName: user.firstName,\n        proId: pro._id,\n        adminId: assignedEmployeeId,\n      }).then(() => loanId);\n    }\n\n    return Promise.resolve(loanId);\n  }\n\n  sendPromotionInvitationEmail({\n    userId,\n    isNewUser,\n    promotionId,\n    firstName,\n    proId,\n  }) {\n    return FileService.listFilesForDocByCategory(promotionId).then(({ promotionImage, logos }) => {\n      const coverImageUrl = promotionImage && promotionImage.length > 0 && promotionImage[0].url;\n      const logoUrls = logos && logos.map(({ url }) => url);\n\n      let ctaUrl = Meteor.settings.public.subdomains.app;\n      const promotion = this.get(promotionId);\n      const assignedEmployee = UserService.get(promotion.assignedEmployeeId);\n\n      if (isNewUser) {\n        // Envoyer invitation avec enrollment link\n        ctaUrl = UserService.getEnrollmentUrl({ userId });\n      }\n\n      let invitedBy;\n\n      if (proId) {\n        invitedBy = UserService.fetchOne({\n          $filters: { _id: proId },\n          name: 1,\n        }).name;\n      }\n\n      return sendEmail.run({\n        emailId: EMAIL_IDS.INVITE_USER_TO_PROMOTION,\n        userId,\n        params: {\n          proUserId: proId,\n          promotion: { ...promotion, assignedEmployee },\n          coverImageUrl,\n          logoUrls,\n          ctaUrl,\n          name: firstName,\n          invitedBy,\n        },\n      });\n    });\n  }\n\n  addProUser({ promotionId, userId }) {\n    return this.addLink({\n      id: promotionId,\n      linkName: 'users',\n      linkId: userId,\n      metadata: { permissions: {} },\n    });\n  }\n\n  removeProUser({ promotionId, userId }) {\n    const loans = LoanService.fetch({\n      $filters: {\n        'promotionLinks.invitedBy': userId,\n        'promotionLinks._id': promotionId,\n      },\n    });\n\n    loans.forEach(({ _id: loanId }) => {\n      this.updateLinkMetadata({\n        id: promotionId,\n        linkName: 'loans',\n        linkId: loanId,\n        metadata: { invitedBy: undefined },\n      });\n    });\n\n    return this.removeLink({\n      id: promotionId,\n      linkName: 'users',\n      linkId: userId,\n    });\n  }\n\n  setUserPermissions({ promotionId, userId, permissions }) {\n    return Promotions.update(\n      { _id: promotionId, 'userLinks._id': userId },\n      { $set: { 'userLinks.$.permissions': permissions } },\n    );\n  }\n\n  removeLoan({ promotionId, loanId }) {\n    const {\n      promotionOptionLinks = [],\n      attributedPromotionLots = [],\n    } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      promotionOptionLinks: { _id: 1 },\n      attributedPromotionLots: { _id: 1 },\n    });\n\n    this.removeLink({\n      id: promotionId,\n      linkName: 'loans',\n      linkId: loanId,\n    });\n\n    promotionOptionLinks.forEach(({ _id }) => {\n      PromotionOptionService.remove({ promotionOptionId: _id });\n    });\n\n    attributedPromotionLots.forEach(({ _id }) => {\n      PromotionLotService.cancelPromotionLotBooking({ promotionLotId: _id });\n    });\n  }\n\n  editPromotionLoan({\n    loanId,\n    promotionId,\n    promotionLotIds = [],\n    showAllLots,\n  }) {\n    if (showAllLots !== undefined) {\n      this.updateLinkMetadata({\n        id: promotionId,\n        linkName: 'loans',\n        linkId: loanId,\n        metadata: { showAllLots },\n      });\n    }\n\n    const { promotionOptions = [] } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      promotionOptions: {\n        promotionLots: { attributedTo: { _id: 1 }, name: 1 },\n      },\n    });\n\n    // Add any new promotionOptions if they don't already exist\n    promotionLotIds.forEach((promotionLotId) => {\n      const existingPromotionOption = promotionOptions.find(({ promotionLots: promotionOptionLots }) =>\n        promotionOptionLots[0]._id === promotionLotId);\n\n      if (!existingPromotionOption) {\n        PromotionOptionService.insert({ promotionLotId, loanId });\n      }\n    });\n\n    // Remove all promotionOptions that aren't in the specified array\n    const promotionOptionsToRemove = promotionOptions.filter(({ promotionLots }) => promotionLotIds.indexOf(promotionLots[0]._id) < 0);\n\n    promotionOptionsToRemove.forEach((promotionOption) => {\n      // Try to remove this promotion option\n      const { promotionLots, _id: promotionOptionId } = promotionOption;\n      const { attributedTo, name } = promotionLots[0];\n\n      if (attributedTo && attributedTo._id === loanId) {\n        throw new Meteor.Error(`Vous ne pouvez pas supprimer le lot \"${name}\" de ce client, car il lui est attribué.`);\n      }\n\n      PromotionOptionService.remove({ promotionOptionId });\n    });\n  }\n}\n\nexport default new PromotionService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"promotionServerHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/server/promotionServerHelpers.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport UserService from '../../users/server/UserService';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport {\n  shouldAnonymize as clientShouldAnonymize,\n  getPromotionCustomerOwnerType as getCustomerOwnerType,\n  clientGetBestPromotionLotStatus,\n} from '../promotionClientHelpers';\nimport LoanService from '../../loans/server/LoanService';\n\nconst ANONYMIZED_STRING = 'XXX';\nconst ANONYMIZED_USER = {\n  name: ANONYMIZED_STRING,\n  phoneNumbers: [ANONYMIZED_STRING],\n  email: ANONYMIZED_STRING,\n};\n\nconst getUserPromotionPermissions = ({ userId, promotionId }) => {\n  const { promotions = [] } = UserService.fetchOne({\n    $filters: { _id: userId },\n    promotions: { _id: 1 },\n  });\n\n  const promotion = promotions.find(({ _id }) => _id === promotionId);\n\n  if (!promotion) {\n    return {};\n  }\n\n  const {\n    $metadata: { permissions = {} },\n  } = promotion;\n\n  return permissions;\n};\n\nconst getCustomerInvitedBy = ({ customerId, promotionId }) => {\n  const { loans = [] } = UserService.fetchOne({\n    $filters: { _id: customerId },\n    loans: { promotions: { _id: 1 } },\n  }) || {};\n\n  const { $metadata } = loans\n    .reduce((promotions, loan) => {\n      const { promotions: loanPromotions = [] } = loan;\n      return [...promotions, ...loanPromotions];\n    }, [])\n    .find(({ _id }) => _id === promotionId) || {};\n\n  return $metadata && $metadata.invitedBy;\n};\n\nconst getPromotionLotStatus = ({ promotionLotId }) => {\n  if (!promotionLotId) {\n    return {};\n  }\n\n  const { status, attributedToLink = {} } = PromotionLotService.fetchOne({\n    $filters: { _id: promotionLotId },\n    status: 1,\n    attributedToLink: 1,\n  }) || {};\n\n  return { status, attributedTo: attributedToLink._id };\n};\n\n/**\n * Out of all promotionLots attributed to this user, which one has\n * the most permissive status?\n *\n * @param {String} { loanId }\n * @returns {String} PROMOTION_LOT_STATUS\n */\nexport const getBestPromotionLotStatus = ({ loanId }) => {\n  const { promotionOptions = [] } = LoanService.fetchOne({\n    $filters: { _id: loanId },\n    userId: 1,\n    promotionOptions: {\n      promotionLots: { status: 1, attributedToLink: 1 },\n    },\n  });\n\n  return clientGetBestPromotionLotStatus(promotionOptions, loanId);\n};\n\nexport const getPromotionCustomerOwnerType = ({\n  customerId,\n  promotionId,\n  userId,\n}) => {\n  const invitedBy = getCustomerInvitedBy({ customerId, promotionId });\n  const { organisations = [] } = UserService.fetchOne({\n    $filters: { _id: userId },\n    organisations: { users: { _id: 1 } },\n  });\n\n  return getCustomerOwnerType({\n    invitedBy,\n    currentUser: { _id: userId, organisations },\n  });\n};\n\nconst shouldAnonymize = ({\n  customerId,\n  userId,\n  promotionId,\n  promotionLotId,\n  loanId,\n}) => {\n  const customerOwnerType = getPromotionCustomerOwnerType({\n    customerId,\n    userId,\n    promotionId,\n  });\n  const permissions = getUserPromotionPermissions({ userId, promotionId });\n\n  const { status: promotionLotStatus, attributedTo } = getPromotionLotStatus({\n    promotionLotId,\n  });\n\n  return clientShouldAnonymize({\n    customerOwnerType,\n    permissions,\n    promotionLotStatus,\n    isAttributed: attributedTo === loanId,\n  });\n};\n\nexport const makeLoanAnonymizer = ({\n  userId,\n  promotionId,\n  promotionLotId,\n  anonymize,\n}) => {\n  let permissions;\n  let promotionLotStatus;\n  let attributedTo;\n\n  if (anonymize === undefined) {\n    permissions = getUserPromotionPermissions({ userId, promotionId });\n    const { status, attributedTo: attr } = getPromotionLotStatus({\n      promotionLotId,\n      promotionId,\n    });\n    promotionLotStatus = status;\n    attributedTo = attr;\n  }\n\n  return (loan) => {\n    const { _id: loanId, user = {}, ...rest } = loan;\n    const { _id: customerId } = user;\n\n    let isAttributed = loanId === attributedTo;\n\n    if (!promotionLotId) {\n      // If no promotionLot is passed here, we get the best one from the loan\n      // For statuses BOOKED and SOLD, we check that it is attributed to\n      // this loan\n      promotionLotStatus = getBestPromotionLotStatus({ loanId });\n      isAttributed = true;\n    }\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId,\n      promotionId,\n      userId,\n    });\n\n    const anonymizeUser = anonymize === undefined\n      ? clientShouldAnonymize({\n        customerOwnerType,\n        permissions,\n        promotionLotStatus,\n        isAttributed,\n      })\n      : anonymize;\n\n    return {\n      user: anonymizeUser ? { _id: user._id, ...ANONYMIZED_USER } : user,\n      _id: loanId,\n      isAnonymized: !!anonymizeUser,\n      ...rest,\n    };\n  };\n};\n\nexport const makePromotionLotAnonymizer = ({ userId }) => (promotionLot) => {\n  const { attributedTo, ...rest } = promotionLot;\n  const {\n    _id: promotionLotId,\n    promotion: { _id: promotionId },\n  } = promotionLot;\n\n  const [loan] = [attributedTo]\n    .filter(x => x)\n    .map(makeLoanAnonymizer({ userId, promotionId, promotionLotId }));\n\n  return { attributedTo: loan, ...rest };\n};\n\nexport const makePromotionOptionAnonymizer = ({\n  userId,\n}) => (promotionOption) => {\n  const { loan, custom, ...rest } = promotionOption;\n  const {\n    promotionLots,\n    promotion: { _id: promotionId },\n  } = promotionOption;\n  const { _id: promotionLotId } = promotionLots[0];\n\n  const anonymize = shouldAnonymize({\n    customerId: loan.user._id,\n    userId,\n    promotionId,\n    promotionLotId,\n    loanId: loan._id,\n  });\n\n  return {\n    loan: makeLoanAnonymizer({\n      userId,\n      promotionId,\n      promotionLotId,\n      anonymize,\n    })(loan),\n    custom: anonymize ? ANONYMIZED_STRING : custom,\n    isAnonymized: !!anonymize,\n    ...rest,\n  };\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/server/methods.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport PromotionService from './PromotionService';\nimport {\n  promotionInsert,\n  promotionUpdate,\n  promotionRemove,\n  insertPromotionProperty,\n  setPromotionUserPermissions,\n  addProUserToPromotion,\n  removeProFromPromotion,\n  sendPromotionInvitationEmail,\n  removeLoanFromPromotion,\n  editPromotionLoan,\n} from '../methodDefinitions';\n\npromotionInsert.setHandler(({ userId }, { promotion }) => {\n  SecurityService.checkUserIsPro(userId);\n  return PromotionService.insert({ promotion, userId });\n});\n\npromotionUpdate.setHandler(({ userId }, { promotionId, object }) => {\n  SecurityService.promotions.isAllowedToModify({ promotionId, userId });\n  return PromotionService.update({ promotionId, object });\n});\n\npromotionRemove.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return PromotionService.remove(params);\n});\n\ninsertPromotionProperty.setHandler(({ userId }, { promotionId, property }) => {\n  SecurityService.promotions.isAllowedToAddLots({ promotionId, userId });\n  return PromotionService.insertPromotionProperty({ promotionId, property });\n});\n\nsetPromotionUserPermissions.setHandler(({ userId: currentUserId }, { promotionId, userId, permissions }) => {\n  SecurityService.checkUserIsAdmin(currentUserId);\n  return PromotionService.setUserPermissions({\n    promotionId,\n    userId,\n    permissions,\n  });\n});\n\naddProUserToPromotion.setHandler(({ userId: currentUserId }, { promotionId, userId }) => {\n  SecurityService.checkUserIsAdmin(currentUserId);\n  return PromotionService.addProUser({ promotionId, userId });\n});\n\nremoveProFromPromotion.setHandler(({ userId: currentUserId }, { promotionId, userId }) => {\n  SecurityService.checkUserIsAdmin(currentUserId);\n  return PromotionService.removeProUser({ promotionId, userId });\n});\n\nsendPromotionInvitationEmail.setHandler(({ userId }, params) => {\n  SecurityService.promotions.isAllowedToInviteCustomers({\n    promotionId: params.promotionId,\n    userId,\n  });\n  return PromotionService.sendPromotionInvitationEmail(params);\n});\n\nremoveLoanFromPromotion.setHandler(({ userId }, params) => {\n  const { promotionId, loanId } = params;\n  SecurityService.promotions.isAllowedToRemoveCustomer({\n    promotionId,\n    loanId,\n    userId,\n  });\n  return PromotionService.removeLoan(params);\n});\n\neditPromotionLoan.setHandler(({ userId }, params) => {\n  const { promotionId, loanId } = params;\n  SecurityService.promotions.isAllowedToSeePromotionCustomer({\n    promotionId,\n    loanId,\n    userId,\n  });\n  return PromotionService.editPromotionLoan(params);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/server/hooks.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport FileService from '../../files/server/FileService';\nimport Promotions from '../promotions';\nimport formatNumbersHook, {\n  formatPhoneNumber,\n} from '../../../utils/phoneFormatting';\n\nPromotions.after.remove((userId, { _id }) =>\n  FileService.deleteAllFilesForDoc(_id));\n\nformatNumbersHook(Promotions, 'contacts', oldContacts =>\n  oldContacts.map(contact => ({\n    ...contact,\n    phoneNumber: formatPhoneNumber(contact.phoneNumber),\n  })));\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/server/exposures.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { createSearchFilters } from '../../helpers/mongoHelpers';\nimport SecurityService from '../../security';\nimport {\n  adminPromotions,\n  appPromotion,\n  promotionSearch,\n  proPromotions,\n  proPromotionUsers,\n} from '../queries';\nimport { PROMOTION_STATUS } from '../promotionConstants';\n\nimport { makePromotionLotAnonymizer } from './promotionServerHelpers';\n\nexposeQuery({ query: adminPromotions, options: { allowFilterById: true } });\n\nexposeQuery({\n  query: appPromotion,\n  overrides: {\n    firewall(userId, { promotionId }) {\n      SecurityService.promotions.hasAccessToPromotion({ promotionId, userId });\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params }) => {\n        filters._id = params.promotionId;\n        filters.status = PROMOTION_STATUS.OPEN;\n      };\n    },\n    validateParams: { promotionId: String, loanId: String },\n  },\n});\n\nexposeQuery({\n  query: promotionSearch,\n  overrides: {\n    embody: (body) => {\n      body.$filter = ({ filters, params: { searchQuery } }) => {\n        Object.assign(\n          filters,\n          createSearchFilters(['name', '_id'], searchQuery),\n        );\n      };\n    },\n    validateParams: { searchQuery: Match.Maybe(String) },\n  },\n});\n\nexposeQuery({\n  query: proPromotions,\n  overrides: {\n    firewall(userId, params) {\n      SecurityService.checkUserIsPro(userId);\n      const { _id: promotionId } = params;\n      params.userId = userId;\n\n      if (promotionId) {\n        SecurityService.promotions.isAllowedToView({\n          promotionId,\n          userId,\n        });\n      }\n\n      if (!SecurityService.isUserAdmin(userId)) {\n        params.anonymize = true;\n      }\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params }) => {\n        const { _id: promotionId, userId } = params;\n        if (promotionId) {\n          filters._id = promotionId;\n        } else {\n          filters['userLinks._id'] = userId;\n        }\n      };\n\n      body.$postFilter = (promotions = [], params) => {\n        const { anonymize = false, simple, userId } = params;\n\n        if (!anonymize) {\n          return promotions;\n        }\n\n        return promotions.map((promotion) => {\n          const { promotionLots = [], ...rest } = promotion;\n          return simple\n            ? { promotionLots: promotionLots.map(({ name }) => name) }\n            : {\n              promotionLots: promotionLots.map(makePromotionLotAnonymizer({ userId })),\n              ...rest,\n            };\n        });\n      };\n    },\n    validateParams: {\n      userId: String,\n      simple: Match.Maybe(Boolean),\n      anonymize: Match.Maybe(Boolean),\n      _id: Match.Maybe(String),\n    },\n  },\n});\n\nexposeQuery({\n  query: proPromotionUsers,\n  overrides: {\n    firewall(userId, { _id: promotionId }) {\n      SecurityService.promotions.hasAccessToPromotion({ promotionId, userId });\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { promotionId } }) => {\n        filters._id = promotionId;\n      };\n      body.$postFilter = (promotion = []) => {\n        const { users = [] } = (!!promotion.length && promotion[0]) || {};\n        return users;\n      };\n    },\n  },\n  options: { allowFilterById: true },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/server/serverReducers.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Promotions from '../promotions';\nimport assigneeReducer from '../../reducers/assigneeReducer';\n\nPromotions.addReducers({ ...assigneeReducer() });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"promotionClientHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/promotionClientHelpers.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { PROMOTION_INVITED_BY_TYPE } from './promotionConstants';\nimport { PROMOTION_LOT_STATUS } from '../promotionLots/promotionLotConstants';\n\nexport const getCurrentUserPermissionsForPromotion = ({\n  currentUser: { promotions = [] } = {},\n  promotionId,\n}) => {\n  const promotion = promotions.find(({ _id }) => _id === promotionId);\n  return promotion && promotion.$metadata.permissions;\n};\n\nexport const getPromotionCustomerOwnerType = ({ invitedBy, currentUser }) => {\n  const { _id: userId, organisations = [] } = currentUser;\n\n  // Is invited by nobody\n  if (!invitedBy) {\n    return null;\n  }\n\n  // Is invited by user\n  if (invitedBy === userId) {\n    return PROMOTION_INVITED_BY_TYPE.USER;\n  }\n\n  const organisationUserIds = organisations.reduce(\n    (userIds, { users = [] }) => [...userIds, ...users.map(({ _id }) => _id)],\n    [],\n  );\n\n  // Is invited by organisation\n  if (organisationUserIds.includes(invitedBy)) {\n    return PROMOTION_INVITED_BY_TYPE.ORGANISATION;\n  }\n\n  // Is invited by someone else\n  return PROMOTION_INVITED_BY_TYPE.ANY;\n};\n\nexport const clientGetBestPromotionLotStatus = (promotionOptions, loanId) => {\n  const myPromotionLotStatuses = promotionOptions\n    .reduce((arr, { promotionLots }) => [...arr, ...promotionLots], [])\n    .filter(({ attributedToLink = {} }) => attributedToLink._id === loanId)\n    .map(({ status }) => status);\n\n  if (myPromotionLotStatuses.indexOf(PROMOTION_LOT_STATUS.SOLD) >= 0) {\n    return PROMOTION_LOT_STATUS.SOLD;\n  }\n  if (myPromotionLotStatuses.indexOf(PROMOTION_LOT_STATUS.BOOKED) >= 0) {\n    return PROMOTION_LOT_STATUS.BOOKED;\n  }\n  if (myPromotionLotStatuses.indexOf(PROMOTION_LOT_STATUS.AVAILABLE) >= 0) {\n    return PROMOTION_LOT_STATUS.AVAILABLE;\n  }\n\n  // return undefined if no promotion lots are attributed to this user\n};\n\nconst shouldHideForLotStatus = (\n  { forLotStatus = [] },\n  promotionLotStatus,\n  isAttributed,\n) => {\n  if (\n    promotionLotStatus === PROMOTION_LOT_STATUS.AVAILABLE\n    && forLotStatus.includes(promotionLotStatus)\n  ) {\n    return false;\n  }\n\n  // For status BOOKED and SOLD, we check that it is attributed\n  if (forLotStatus.includes(promotionLotStatus) && isAttributed) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const shouldAnonymize = ({\n  customerOwnerType,\n  permissions,\n  promotionLotStatus = PROMOTION_LOT_STATUS.AVAILABLE,\n  isAttributed,\n}) => {\n  const { displayCustomerNames } = permissions;\n\n  if (displayCustomerNames === false || !customerOwnerType) {\n    return true;\n  }\n\n  const shouldHide = shouldHideForLotStatus(\n    displayCustomerNames,\n    promotionLotStatus,\n    isAttributed,\n  );\n\n  if (displayCustomerNames.invitedBy === PROMOTION_INVITED_BY_TYPE.ANY) {\n    return shouldHide;\n  }\n\n  switch (customerOwnerType) {\n  case PROMOTION_INVITED_BY_TYPE.USER:\n    return (\n      shouldHide\n        || ![\n          PROMOTION_INVITED_BY_TYPE.USER,\n          PROMOTION_INVITED_BY_TYPE.ORGANISATION,\n        ].includes(displayCustomerNames.invitedBy)\n    );\n  case PROMOTION_INVITED_BY_TYPE.ORGANISATION:\n    return (\n      shouldHide\n        || displayCustomerNames.invitedBy\n          !== PROMOTION_INVITED_BY_TYPE.ORGANISATION\n    );\n  default:\n    return true;\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/links.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Promotions from '.';\n\nimport {\n  Properties,\n  Lots,\n  PromotionLots,\n  Users,\n  Loans,\n  Organisations,\n} from '..';\nimport Tasks from '../tasks';\n\nPromotions.addLinks({\n  properties: {\n    field: 'propertyLinks',\n    collection: Properties,\n    type: 'many',\n    metadata: true,\n    autoremove: true,\n    unique: true,\n  },\n  lots: {\n    field: 'lotLinks',\n    collection: Lots,\n    type: 'many',\n    metadata: true,\n    autoremove: true,\n    unique: true,\n  },\n  promotionLots: {\n    field: 'promotionLotLinks',\n    collection: PromotionLots,\n    type: 'many',\n    metadata: true,\n    autoremove: true,\n    unique: true,\n  },\n  users: {\n    field: 'userLinks',\n    collection: Users,\n    type: 'many',\n    metadata: true,\n  },\n  loans: {\n    collection: Loans,\n    inversedBy: 'promotions',\n  },\n  assignedEmployee: {\n    collection: Users,\n    field: 'assignedEmployeeId',\n    type: 'one',\n  },\n  lenderOrganisation: {\n    field: 'lenderOrganisationLink',\n    type: 'one',\n    metadata: true,\n    collection: Organisations,\n  },\n  tasks: {\n    inversedBy: 'promotion',\n    collection: Tasks,\n    autoremove: true,\n  },\n  promotionLoan: {\n    inversedBy: 'financedPromotion',\n    type: 'one',\n    collection: Loans,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/reducers.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { PROMOTION_LOT_STATUS } from '../constants';\nimport addressReducer from '../reducers/addressReducer';\nimport Promotions from '.';\n\nconst promotionLotStatusReducer = status => ({\n  body: {\n    promotionLots: { status: 1 },\n  },\n  reduce: ({ promotionLots = [] }) =>\n    promotionLots.filter(({ status: promotionLotStatus }) => status === promotionLotStatus),\n});\n\nPromotions.addReducers({\n  ...addressReducer,\n  soldPromotionLots: promotionLotStatusReducer(PROMOTION_LOT_STATUS.SOLD),\n  bookedPromotionLots: promotionLotStatusReducer(PROMOTION_LOT_STATUS.BOOKED),\n  availablePromotionLots: promotionLotStatusReducer(PROMOTION_LOT_STATUS.AVAILABLE),\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/promotions/queries.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport {\n  adminPromotions as adminPromotionsFragment,\n  proPromotion,\n  searchPromotions,\n} from '../fragments';\nimport { PROMOTION_QUERIES } from './promotionConstants';\nimport Promotions from '.';\n\nexport const adminPromotions = Promotions.createQuery(\n  PROMOTION_QUERIES.ADMIN_PROMOTIONS,\n  adminPromotionsFragment(),\n);\n\nexport const appPromotion = Promotions.createQuery(\n  PROMOTION_QUERIES.APP_PROMOTION,\n  proPromotion({ withFilteredLoan: true }),\n);\n\nexport const promotionSearch = Promotions.createQuery(\n  PROMOTION_QUERIES.PROMOTION_SEARCH,\n  {\n    ...searchPromotions(),\n    $options: { sort: { createdAt: -1 }, limit: 5 },\n  },\n);\n\nexport const proPromotions = Promotions.createQuery(\n  PROMOTION_QUERIES.PRO_PROMOTIONS,\n  proPromotion(),\n);\n\nexport const proPromotionUsers = Promotions.createQuery(\n  PROMOTION_QUERIES.PRO_PROMOTION_USERS,\n  {\n    users: {\n      name: 1,\n      organisations: { name: 1, users: { _id: 1 } },\n    },\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"properties\":{\"propertyConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/propertyConstants.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nexport const PROPERTIES_COLLECTION = 'properties';\n\nexport const PROPERTY_STATUS = {\n  FOR_SALE: 'FOR_SALE',\n  BOOKED: 'BOOKED',\n  SOLD: 'SOLD',\n};\n\nexport const RESIDENCE_TYPE = {\n  MAIN_RESIDENCE: 'MAIN_RESIDENCE',\n  SECOND_RESIDENCE: 'SECOND_RESIDENCE',\n  INVESTMENT: 'INVESTMENT',\n  COMMERCE: 'COMMERCE',\n};\n\nexport const PROPERTY_TYPE = {\n  FLAT: 'FLAT',\n  HOUSE: 'HOUSE',\n  TERRAIN: 'TERRAIN',\n  COMMERCIAL: 'COMMERCIAL',\n  INVESTMENT_BUILDING: 'INVESTMENT_BUILDING',\n};\n\nexport const VOLUME_NORM = {\n  SIA_416: 'SIA_416',\n  SIA_116: 'SIA_116',\n  BIC: 'BIC',\n};\n\nexport const AREA_NORM = {\n  NIA: 'NIA',\n  NLS: 'NLS',\n};\n\nexport const PROPERTY_QUERIES = {\n  ADMIN_PROPERTIES: 'ADMIN_PROPERTIES',\n  ANONYMOUS_PROPERTY: 'ANONYMOUS_PROPERTY',\n  PRO_PROPERTIES: 'PRO_PROPERTIES',\n  PRO_PROPERTY_USERS: 'PRO_PROPERTY_USERS',\n  PROPERTY_FILES: 'PROPERTY_FILES',\n  PROPERTY_SEARCH: 'PROPERTY_SEARCH',\n  USER_PROPERTY: 'USER_PROPERTY',\n};\n\nexport const HOUSE_TYPE = {\n  DETACHED: 'DETACHED',\n  ATTACHED_END_BUILDING: 'ATTACHED_END_BUILDING',\n  ATTACHED_MID_TERRACE_BUILDING: 'ATTACHED_MID_TERRACE_BUILDING',\n};\n\nexport const FLAT_TYPE = {\n  SINGLE_FLOOR_APARTMENT: 'SINGLE_FLOOR_APARTMENT',\n  DUPLEX_APARTMENT: 'DUPLEX_APARTMENT',\n  PENTHOUSE_APARTMENT: 'PENTHOUSE_APARTMENT',\n  PENTHOUSE_MAISONETTE: 'PENTHOUSE_MAISONETTE',\n  TERRACE_APARTMENT: 'TERRACE_APARTMENT',\n};\n\nexport const MINERGIE_CERTIFICATE = {\n  WITHOUT_CERTIFICATE: 'WITHOUT_CERTIFICATE',\n  MINERGIE_P: 'MINERGIE_P',\n  MINERGIE_ECO: 'MINERGIE_ECO',\n  MINERGIE_P_ECO: 'MINERGIE_P_ECO',\n  OTHER_CERTIFICATE: 'OTHER_CERTIFICATE',\n};\n\nexport const PROPERTY_CATEGORY = {\n  USER: 'USER',\n  PRO: 'PRO',\n  PROMOTION: 'PROMOTION',\n};\n\nexport const PROPERTY_REFERRED_BY_TYPE = {\n  ANY: 'ANY',\n  USER: 'USER',\n  ORGANISATION: 'ORGANISATION',\n};\n\nexport const PROPERTY_PERMISSIONS = {\n  DISPLAY_CUSTOMER_NAMES: {\n    FOR_PROPERTY_STATUS: PROPERTY_STATUS,\n    REFERRED_BY: PROPERTY_REFERRED_BY_TYPE,\n  },\n};\n\nexport const PROPERTY_PERMISSIONS_FULL_ACCESS = {\n  canInviteCustomers: true,\n  canInviteProUsers: true,\n  canModifyProperty: true,\n  canManagePermissions: true,\n  canSellProperty: true,\n  canBookProperty: true,\n  displayCustomerNames: {\n    forPropertyStatus: Object.values(PROPERTY_STATUS),\n    referredBy: PROPERTY_REFERRED_BY_TYPE.ANY,\n  },\n};\n\nexport const PROPERTY_SOLVENCY = {\n  UNDETERMINED: 'UNDETERMINED',\n  NOT_SHARED: 'NOT_SHARED',\n  SOLVENT: 'SOLVENT',\n  INSOLVENT: 'INSOLVENT',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"PropertySchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/schemas/PropertySchema.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport SimpleSchema from 'simpl-schema';\n\nimport {\n  createdAt,\n  updatedAt,\n  additionalDocuments,\n  address,\n  mortgageNoteLinks,\n  moneyField,\n  userLinksSchema,\n  documentsField,\n  cacheField,\n} from '../../helpers/sharedSchemas';\nimport * as propertyConstants from '../propertyConstants';\nimport { initialDocuments } from '../propertiesAdditionalDocuments';\n\nconst SCHEMA_BOOLEAN = { type: Boolean, optional: true, defaultValue: false };\n\nexport const propertyPermissionsSchema = {\n  canInviteCustomers: SCHEMA_BOOLEAN,\n  canInviteProUsers: SCHEMA_BOOLEAN,\n  canModifyProperty: SCHEMA_BOOLEAN,\n  canManagePermissions: SCHEMA_BOOLEAN,\n  canSellProperty: SCHEMA_BOOLEAN,\n  canBookProperty: SCHEMA_BOOLEAN,\n  displayCustomerNames: {\n    type: SimpleSchema.oneOf(Boolean, Object),\n    optional: true,\n    autoValue() {\n      if (Meteor.isServer && this.isSet) {\n        if (this.value === undefined) {\n          return false;\n        }\n\n        if (this.value instanceof Object) {\n          if (!Object.keys(this.value).length) {\n            return false;\n          }\n\n          if (!this.value.referredBy) {\n            return false;\n          }\n        }\n\n        return this.value;\n      }\n    },\n  },\n  'displayCustomerNames.referredBy': {\n    type: String,\n    optional: true,\n    allowedValues: Object.values(propertyConstants.PROPERTY_PERMISSIONS.DISPLAY_CUSTOMER_NAMES.REFERRED_BY),\n    uniforms: {\n      displayEmpty: true,\n      placeholder: 'Ne pas afficher le nom des clients',\n    },\n  },\n  'displayCustomerNames.forPropertyStatus': {\n    type: Array,\n    optional: true,\n    defaultValue: [],\n    uniforms: { displayEmpty: false, placeholder: '', checkboxes: true },\n    condition: ({ permissions: { displayCustomerNames = {} } }) => {\n      const { referredBy } = displayCustomerNames;\n      return !!referredBy;\n    },\n  },\n  'displayCustomerNames.forPropertyStatus.$': {\n    type: String,\n    allowedValues: Object.values(propertyConstants.PROPERTY_PERMISSIONS.DISPLAY_CUSTOMER_NAMES\n      .FOR_PROPERTY_STATUS),\n  },\n};\n\nexport const PropertySchema = new SimpleSchema({\n  userId: {\n    type: String,\n    optional: true,\n  },\n  createdAt,\n  updatedAt,\n  name: {\n    type: String,\n    optional: true,\n    uniforms: { placeholder: null },\n  },\n  description: {\n    type: String,\n    optional: true,\n    uniforms: { placeholder: null, multiline: true, rows: 5, rowsMax: 15 },\n  },\n  category: {\n    type: String,\n    optional: true,\n    defaultValue: propertyConstants.PROPERTY_CATEGORY.USER,\n    allowedValues: Object.values(propertyConstants.PROPERTY_CATEGORY),\n    uniforms: { placeholder: null },\n  },\n  value: moneyField,\n  status: {\n    type: String,\n    defaultValue: propertyConstants.PROPERTY_STATUS.FOR_SALE,\n    allowedValues: Object.values(propertyConstants.PROPERTY_STATUS),\n    uniforms: { placeholder: null },\n  },\n  propertyType: {\n    type: String,\n    optional: true,\n    defaultValue: propertyConstants.PROPERTY_TYPE.FLAT,\n    allowedValues: Object.values(propertyConstants.PROPERTY_TYPE),\n    uniforms: { placeholder: null },\n  },\n  houseType: {\n    type: String,\n    optional: true,\n    defaultValue: propertyConstants.HOUSE_TYPE.DETACHED,\n    allowedValues: Object.values(propertyConstants.HOUSE_TYPE),\n    uniforms: { placeholder: null },\n    condition: ({ propertyType }) =>\n      propertyType === propertyConstants.PROPERTY_TYPE.HOUSE,\n  },\n  flatType: {\n    type: String,\n    optional: true,\n    defaultValue: propertyConstants.FLAT_TYPE.SINGLE_FLOOR_APARTMENT,\n    allowedValues: Object.values(propertyConstants.FLAT_TYPE),\n    uniforms: { placeholder: null },\n    condition: ({ propertyType }) =>\n      propertyType === propertyConstants.PROPERTY_TYPE.FLAT,\n  },\n  investmentRent: {\n    // Rent of property if investment\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n    max: 100000000,\n  },\n  ...address,\n  constructionYear: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    max: 2030,\n    optional: true,\n  },\n  renovationYear: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    max: 2030,\n    optional: true,\n  },\n  insideArea: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n  },\n  areaNorm: {\n    type: String,\n    optional: true,\n    allowedValues: Object.values(propertyConstants.AREA_NORM),\n    defaultValue: propertyConstants.AREA_NORM.NIA,\n    uniforms: { placeholder: null },\n  },\n  landArea: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n  },\n  terraceArea: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n  },\n  gardenArea: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n  },\n  numberOfFloors: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n    max: 20,\n  },\n  floorNumber: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n    max: 20,\n  },\n  roomCount: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100,\n  },\n  bathroomCount: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 100,\n  },\n  volume: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n    max: 100000,\n  },\n  volumeNorm: {\n    type: String,\n    defaultValue: propertyConstants.VOLUME_NORM.SIA_416,\n    allowedValues: Object.values(propertyConstants.VOLUME_NORM),\n    uniforms: { placeholder: null },\n  },\n  parkingInside: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n    max: 100,\n  },\n  parkingOutside: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 0,\n    max: 100,\n  },\n  minergie: {\n    type: String,\n    defaultValue: propertyConstants.MINERGIE_CERTIFICATE.WITHOUT_CERTIFICATE,\n    allowedValues: Object.values(propertyConstants.MINERGIE_CERTIFICATE),\n    uniforms: { placeholder: null },\n  },\n  isCoproperty: {\n    type: Boolean,\n    defaultValue: false,\n  },\n  copropertyPercentage: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    max: 1000,\n    optional: true,\n  },\n  isNew: {\n    type: Boolean,\n    defaultValue: false,\n  },\n  latitude: {\n    type: Number,\n    optional: true,\n    min: -90,\n    max: 90,\n  },\n  longitude: {\n    type: Number,\n    optional: true,\n    min: -180,\n    max: 180,\n  },\n  adminValidation: { type: Object, defaultValue: {}, blackbox: true },\n  yearlyExpenses: moneyField,\n  landValue: moneyField,\n  constructionValue: moneyField,\n  additionalMargin: moneyField,\n  ...additionalDocuments(initialDocuments),\n  ...mortgageNoteLinks,\n  ...userLinksSchema(propertyPermissionsSchema),\n  externalId: {\n    type: String,\n    optional: true,\n  },\n  useOpenGraph: {\n    type: Boolean,\n    optional: true,\n    condition: ({ externalUrl }) => externalUrl,\n  },\n  externalUrl: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Url,\n    optional: true,\n  },\n  imageUrls: {\n    type: Array,\n    optional: true,\n    defaultValue: [],\n  },\n  'imageUrls.$': {\n    type: String,\n    regEx: SimpleSchema.RegEx.Url,\n  },\n  documents: documentsField,\n  loanCount: { type: Number, optional: true },\n});\n\nconst protectedKeys = [\n  '_id',\n  'additionalDocuments',\n  'address',\n  'adminValidation',\n  'createdAt',\n  'latitude',\n  'longitude',\n  'mortgageNoteLinks',\n  'updatedAt',\n  'userId',\n  'documents',\n  'userLinks',\n];\n\nexport const userAllowedKeys = [\n  'externalId',\n  'address1',\n  'address2',\n  'zipCode',\n  'city',\n  'value',\n  'description',\n  'propertyType',\n  'flatType',\n  'houseType',\n  'roomCount',\n  'insideArea',\n  'landArea',\n  'terraceArea',\n  'gardenArea',\n  'constructionYear',\n  'externalUrl',\n  'useOpenGraph',\n  'imageUrls',\n];\n\nexport const PropertySchemaAdmin = PropertySchema.omit(...protectedKeys);\nexport default PropertySchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"propertiesAdditionalDocuments.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/propertiesAdditionalDocuments.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { DOCUMENTS } from '../files/fileConstants';\nimport * as propertyConstants from './propertyConstants';\nimport { RESIDENCE_TYPE } from '../constants';\nimport Loans from '../loans';\n\nexport const initialDocuments = [\n  { id: DOCUMENTS.PURCHASE_CONTRACT },\n  { id: DOCUMENTS.LAND_REGISTER_EXTRACT },\n  { id: DOCUMENTS.PROPERTY_MARKETING_BROCHURE },\n  { id: DOCUMENTS.PROPERTY_PICTURES },\n  { id: DOCUMENTS.PROPERTY_PLANS },\n  { id: DOCUMENTS.FIRE_AND_WATER_INSURANCE },\n];\n\nconst getLoanResidenceType = (propertyId) => {\n  // If a property is shared among multiple loans, this may work in unexpected ways,\n  // since each of those properties could have a different residenceType\n  const loan = Loans.findOne(\n    { propertyIds: propertyId },\n    { fields: { residenceType: 1 }, sort: { createdAt: 1 } },\n  );\n  return loan && loan.residenceType;\n};\n\nexport const conditionalDocuments = [\n  {\n    id: DOCUMENTS.PROPERTY_VOLUME,\n    condition: ({ doc: { propertyType } }) =>\n      propertyType === propertyConstants.PROPERTY_TYPE.HOUSE,\n  },\n  {\n    id: DOCUMENTS.PROPERTY_MINERGIE_CERTIFICATE,\n    condition: ({ doc: { minergie } }) =>\n      minergie !== propertyConstants.MINERGIE_CERTIFICATE.WITHOUT_CERTIFICATE,\n  },\n  {\n    id: DOCUMENTS.COOWNERSHIP_AGREEMENT,\n    condition: ({ doc: { isCoproperty } }) => isCoproperty === true,\n  },\n  {\n    id: DOCUMENTS.COOWNERSHIP_ALLOCATION_AGREEMENT,\n    condition: ({ doc: { isCoproperty } }) => isCoproperty === true,\n  },\n  {\n    id: DOCUMENTS.INVESTEMENT_PROPERTY_RENTAL_STATEMENT,\n    condition: ({ doc: { _id: propertyId } }) =>\n      getLoanResidenceType(propertyId) === RESIDENCE_TYPE.INVESTMENT,\n  },\n  {\n    id: DOCUMENTS.INVESTEMENT_PROPERTY_SERVICE_CHARGE_SETTLEMENT,\n    condition: ({ doc: { _id: propertyId } }) =>\n      getLoanResidenceType(propertyId) === RESIDENCE_TYPE.INVESTMENT,\n  },\n];\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/index.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport * as methodDefinitions from './methodDefinitions';\n\nexport * from './methodDefinitions';\nexport { default } from './properties';\nexport const propertyMethods = methodDefinitions;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/methodDefinitions.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const propertyInsert = new Method({\n  name: 'propertyInsert',\n  params: {\n    property: Object,\n    userId: Match.Optional(String),\n    loanId: Match.Optional(String),\n  },\n});\n\nexport const propertyUpdate = new Method({\n  name: 'propertyUpdate',\n  params: {\n    propertyId: String,\n    object: Object,\n  },\n});\n\nexport const propertyDelete = new Method({\n  name: 'propertyDelete',\n  params: {\n    propertyId: String,\n    loanId: Match.Maybe(String),\n  },\n});\n\nexport const pushPropertyValue = new Method({\n  name: 'pushPropertyValue',\n  params: {\n    propertyId: String,\n    object: Object,\n  },\n});\n\nexport const popPropertyValue = new Method({\n  name: 'popPropertyValue',\n  params: {\n    propertyId: String,\n    object: Object,\n  },\n});\n\nexport const pullPropertyValue = new Method({\n  name: 'pullPropertyValue',\n  params: {\n    propertyId: String,\n    object: Object,\n  },\n});\n\nexport const evaluateProperty = new Method({\n  name: 'evaluateProperty',\n  params: {\n    propertyId: String,\n    loanResidenceType: String,\n  },\n});\n\nexport const propertyDataIsInvalid = new Method({\n  name: 'propertyDataIsInvalid',\n  params: {\n    propertyId: String,\n    loanResidenceType: Match.Optional(String),\n  },\n});\n\nexport const addProUserToProperty = new Method({\n  name: 'addProUserToProperty',\n  params: { propertyId: String, userId: String },\n});\n\nexport const proPropertyInsert = new Method({\n  name: 'proPropertyInsert',\n  params: { userId: String, property: Object },\n});\n\nexport const setProPropertyPermissions = new Method({\n  name: 'setProPropertyPermissions',\n  params: { propertyId: String, userId: String, permissions: Object },\n});\n\nexport const removeProFromProperty = new Method({\n  name: 'removeProFromProperty',\n  params: { propertyId: String, proUserId: String },\n});\n\nexport const removeCustomerFromProperty = new Method({\n  name: 'removeCustomerFromProperty',\n  params: { propertyId: String, loanId: String },\n});\n\nexport const insertExternalProperty = new Method({\n  name: 'insertExternalProperty',\n  params: { property: Object },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"properties.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/properties.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\nimport * as propertyConstants from './propertyConstants';\nimport PropertySchema from './schemas/PropertySchema';\n\nconst Properties = new Mongo.Collection(propertyConstants.PROPERTIES_COLLECTION);\n\n// Prevent all client side modifications of mongoDB\nProperties.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\nProperties.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\n// Attach schema\nProperties.attachSchema(PropertySchema);\nexport default Properties;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"PropertyService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/server/PropertyService.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport { EMAIL_IDS } from 'core/api/email/emailConstants';\nimport { sendEmail } from 'core/api/methods/index';\nimport LoanService from '../../loans/server/LoanService';\nimport CollectionService from '../../helpers/CollectionService';\nimport {\n  PROPERTY_PERMISSIONS_FULL_ACCESS,\n  PROPERTY_CATEGORY,\n} from '../propertyConstants';\nimport Properties from '../properties';\nimport UserService from '../../users/server/UserService';\nimport { removePropertyFromLoan } from './propertyServerHelpers';\nimport { getUserNameAndOrganisation } from '../../helpers';\nimport { HTTP_STATUS_CODES } from '../../RESTAPI/server/restApiConstants';\n\nexport class PropertyService extends CollectionService {\n  constructor() {\n    super(Properties);\n  }\n\n  insert = ({ property, userId, loanId }) => {\n    const propertyId = super.insert({ ...property, userId });\n    if (loanId) {\n      LoanService.addPropertyToLoan({ loanId, propertyId });\n    }\n\n    return propertyId;\n  };\n\n  update = ({ propertyId, object }) =>\n    Properties.update(propertyId, { $set: object });\n\n  remove = ({ propertyId, loanId }) => {\n    const property = this.fetchOne({\n      $filters: { _id: propertyId },\n      loans: { _id: 1 },\n      category: 1,\n    });\n\n    if (property && property.loans && property.loans.length > 1) {\n      if (loanId) {\n        const loansLink = this.getLink(propertyId, 'loans');\n        loansLink.remove(loanId);\n        return removePropertyFromLoan({\n          loan: LoanService.get(loanId),\n          propertyId,\n        });\n      }\n      // Can't delete a property that has multiple loans without specifying\n      // from where you want to remove it\n      return false;\n    }\n\n    return Properties.remove(propertyId);\n  };\n\n  pushValue = ({ propertyId, object }) =>\n    Properties.update(propertyId, { $push: object });\n\n  popValue = ({ propertyId, object }) =>\n    Properties.update(propertyId, { $pop: object });\n\n  pullValue = ({ propertyId, object }) =>\n    Properties.update(propertyId, { $pull: object });\n\n  hasOneOfProperties = ({ userId, propertyIds }) =>\n    propertyIds.some(propertyId =>\n      UserService.hasProperty({ userId, propertyId }));\n\n  inviteUser = ({\n    propertyIds,\n    admin,\n    pro,\n    userId,\n    isNewUser,\n    shareSolvency,\n  }) => {\n    const properties = propertyIds.map(propertyId => this.get(propertyId));\n\n    if (this.hasOneOfProperties({ userId, propertyIds })) {\n      throw new Meteor.Error(\n        HTTP_STATUS_CODES.CONFLICT,\n        'Cet utilisateur est déjà invité à ce bien immobilier',\n      );\n    }\n\n    LoanService.insertPropertyLoan({ userId, propertyIds, shareSolvency });\n\n    const addresses = properties.map(({ address1 }) => `\"${address1}\"`);\n\n    return this.sendPropertyInvitationEmail({\n      userId,\n      isNewUser,\n      addresses,\n      proName: pro ? getUserNameAndOrganisation({ user: pro }) : admin.name,\n      proUserId: pro && pro._id,\n    });\n  };\n\n  sendPropertyInvitationEmail({\n    userId,\n    isNewUser,\n    proName,\n    addresses,\n    proUserId,\n  }) {\n    let ctaUrl = Meteor.settings.public.subdomains.app;\n\n    const formattedAddresses = [\n      addresses.slice(0, -1).join(', '),\n      addresses.slice(-1)[0],\n    ].join(addresses.length < 2 ? '' : ' et ');\n\n    if (isNewUser) {\n      // Envoyer invitation avec enrollment link\n      ctaUrl = UserService.getEnrollmentUrl({ userId });\n    }\n\n    return sendEmail.run({\n      emailId: EMAIL_IDS.INVITE_USER_TO_PROPERTY,\n      userId,\n      params: {\n        proUserId,\n        proName,\n        address: formattedAddresses,\n        ctaUrl,\n        multiple: addresses.length > 1,\n      },\n    });\n  }\n\n  addProUser({ propertyId, userId }) {\n    this.addLink({\n      id: propertyId,\n      linkName: 'users',\n      linkId: userId,\n      metadata: { permissions: {} },\n    });\n  }\n\n  proPropertyInsert({ property, userId }) {\n    const propertyId = this.insert({\n      property: { ...property, category: PROPERTY_CATEGORY.PRO },\n    });\n    this.addLink({\n      id: propertyId,\n      linkName: 'users',\n      linkId: userId,\n      metadata: { permissions: PROPERTY_PERMISSIONS_FULL_ACCESS },\n    });\n\n    return propertyId;\n  }\n\n  setProUserPermissions({ propertyId, userId, permissions }) {\n    this.updateLinkMetadata({\n      id: propertyId,\n      linkName: 'users',\n      linkId: userId,\n      metadata: { permissions },\n    });\n  }\n\n  removeProFromProperty({ propertyId, proUserId }) {\n    this.removeLink({ id: propertyId, linkName: 'users', linkId: proUserId });\n  }\n\n  removeCustomerFromProperty({ propertyId, loanId }) {\n    const loan = LoanService.findOne({ _id: loanId });\n    const { structures = [] } = loan;\n\n    if (structures.length) {\n      removePropertyFromLoan({ loan, propertyId });\n    }\n\n    this.removeLink({ id: propertyId, linkName: 'loans', linkId: loanId });\n  }\n\n  insertExternalProperty({ userId, property: { externalId, ...property } }) {\n    const existingProperty = this.fetchOne({ $filters: { externalId } });\n\n    if (existingProperty) {\n      throw new Meteor.Error(`Property with externalId \"${externalId}\" exists already`);\n    }\n\n    return this.proPropertyInsert({\n      userId,\n      property: { externalId, ...property },\n    });\n  }\n}\n\nexport default new PropertyService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"propertyServerHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/server/propertyServerHelpers.js                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport UserService from '../../users/server/UserService';\nimport {\n  shouldAnonymize as clientShouldAnonymize,\n  getProPropertyCustomerOwnerType as getCustomerOwnerType,\n} from '../propertyClientHelper';\nimport PropertyService from './PropertyService';\nimport LoanService from '../../loans/server/LoanService';\n\nconst ANONYMIZED_STRING = 'XXX';\nconst ANONYMIZED_USER = {\n  name: ANONYMIZED_STRING,\n  phoneNumbers: [ANONYMIZED_STRING],\n  email: ANONYMIZED_STRING,\n};\nconst anonymizeUser = ({ user, anonymous }) =>\n  (anonymous ? { name: 'Anonyme' } : { ...user, ...ANONYMIZED_USER });\n\nconst getUserProPropertyPermissions = ({ userId, propertyId }) => {\n  const user = UserService.fetchOne({\n    $filters: { _id: userId },\n    proProperties: { _id: 1 },\n  });\n\n  if (!user) {\n    return {};\n  }\n\n  const { proProperties: properties = [] } = user;\n\n  const { $metadata: { permissions = {} } = {} } = properties.find(({ _id }) => _id === propertyId) || {};\n\n  return permissions;\n};\n\nconst getCustomerReferredBy = ({ customerId }) => {\n  const { referredByUser, referredByOrganisation } = UserService.fetchOne({\n    $filters: { _id: customerId },\n    referredByUser: { _id: 1 },\n    referredByOrganisation: { _id: 1 },\n  }) || {};\n\n  return { referredByUser, referredByOrganisation };\n};\n\nconst getProPropertyStatus = ({ propertyId }) => {\n  const { status } = PropertyService.fetchOne({\n    $filters: { _id: propertyId },\n    status: 1,\n  }) || {};\n\n  return status;\n};\n\nexport const getProPropertyCustomerOwnerType = ({ customerId, userId }) => {\n  const { referredByUser, referredByOrganisation } = getCustomerReferredBy({\n    customerId,\n  });\n  const user = UserService.fetchOne({\n    $filters: { _id: userId },\n    organisations: { users: { _id: 1 } },\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  const { organisations = [] } = user;\n\n  return getCustomerOwnerType({\n    referredByUser,\n    referredByOrganisation,\n    currentUser: { _id: userId, organisations },\n  });\n};\n\nconst shouldAnonymize = ({ customerId, userId, propertyId }) => {\n  const customerOwnerType = getProPropertyCustomerOwnerType({\n    customerId,\n    userId,\n  });\n  const permissions = getUserProPropertyPermissions({ userId, propertyId });\n\n  const propertyStatus = getProPropertyStatus({ propertyId });\n\n  return clientShouldAnonymize({\n    customerOwnerType,\n    permissions,\n    propertyStatus,\n  });\n};\n\nexport const makeProPropertyLoanAnonymizer = ({\n  userId,\n  propertyIds = [],\n  anonymize,\n}) => {\n  let propertiesPermissionsAndStatus;\n\n  if (anonymize === undefined) {\n    propertiesPermissionsAndStatus = propertyIds.map(propertyId => ({\n      propertyId,\n      permissions: getUserProPropertyPermissions({ userId, propertyId }),\n      status: getProPropertyStatus({ propertyId }),\n    }));\n  }\n\n  return (loan) => {\n    const { user = {}, properties = [], ...rest } = loan;\n    const { _id: customerId } = user;\n\n    const shouldAnonymizeUser = anonymize === undefined\n      ? propertiesPermissionsAndStatus\n        .map(({ propertyId, permissions, status: propertyStatus }) => {\n          const customerOwnerType = getProPropertyCustomerOwnerType({\n            customerId,\n            propertyId,\n            userId,\n          });\n          return clientShouldAnonymize({\n            customerOwnerType,\n            permissions,\n            propertyStatus,\n          });\n        })\n        .every(anonymizeForProperty => anonymizeForProperty)\n      : anonymize;\n\n    return {\n      user: shouldAnonymizeUser\n        ? anonymizeUser({ user, anonymous: loan.anonymous })\n        : user,\n      properties: shouldAnonymizeUser\n        ? properties.map(({ solvent, ...property }) => property)\n        : properties,\n      isAnonymized: !!shouldAnonymizeUser,\n      ...rest,\n    };\n  };\n};\n\nexport const removePropertyFromLoan = ({ loan, propertyId }) =>\n  LoanService.update({\n    loanId: loan._id,\n    object: {\n      structures: loan.structures.map(structure => ({\n        ...structure,\n        propertyId:\n          structure.propertyId === propertyId ? null : structure.propertyId,\n      })),\n    },\n  });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/server/methods.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport { checkInsertUserId } from '../../helpers/server/methodServerHelpers';\nimport {\n  propertyInsert,\n  propertyUpdate,\n  propertyDelete,\n  pushPropertyValue,\n  popPropertyValue,\n  pullPropertyValue,\n  evaluateProperty,\n  propertyDataIsInvalid,\n  addProUserToProperty,\n  proPropertyInsert,\n  setProPropertyPermissions,\n  removeProFromProperty,\n  removeCustomerFromProperty,\n  insertExternalProperty,\n} from '../methodDefinitions';\nimport PropertyService from './PropertyService';\n\npropertyInsert.setHandler((context, params) => {\n  const userId = checkInsertUserId(params.userId);\n  return PropertyService.insert({ ...params, userId });\n});\n\npropertyUpdate.setHandler(({ userId }, params) => {\n  SecurityService.properties.isAllowedToUpdate(params.propertyId, userId);\n  return PropertyService.update(params);\n});\n\npropertyDelete.setHandler((context, params) => {\n  SecurityService.properties.isAllowedToDelete(\n    params.propertyId,\n    context.userId,\n  );\n  return PropertyService.remove(params);\n});\n\npushPropertyValue.setHandler(({ userId }, params) => {\n  SecurityService.properties.isAllowedToUpdate(params.propertyId, userId);\n  return PropertyService.pushValue(params);\n});\n\npopPropertyValue.setHandler(({ userId }, params) => {\n  SecurityService.properties.isAllowedToUpdate(params.propertyId, userId);\n  return PropertyService.popValue(params);\n});\n\npullPropertyValue.setHandler(({ userId }, params) => {\n  SecurityService.properties.isAllowedToUpdate(params.propertyId, userId);\n  return PropertyService.pullValue(params);\n});\n\nevaluateProperty.setHandler(({ userId }, params) => {\n  context.unblock();\n  SecurityService.properties.isAllowedToUpdate(params.propertyId, userId);\n  return PropertyService.evaluateProperty(params);\n});\n\npropertyDataIsInvalid.setHandler(({ userId }, params) => {\n  context.unblock();\n  SecurityService.properties.isAllowedToUpdate(params.propertyId, userId);\n  return PropertyService.propertyDataIsInvalid(params);\n});\n\naddProUserToProperty.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsPro(userId);\n  SecurityService.properties.isAllowedToInviteProUsers({\n    userId,\n    propertyId: params.propertyId,\n  });\n  return PropertyService.addProUser(params);\n});\n\nproPropertyInsert.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsPro(userId);\n  return PropertyService.proPropertyInsert(params);\n});\n\nsetProPropertyPermissions.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsPro(userId);\n  SecurityService.properties.isAllowedToManagePermissions({\n    userId,\n    propertyId: params.propertyId,\n  });\n  PropertyService.setProUserPermissions(params);\n});\n\nremoveProFromProperty.setHandler(({ userId }, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  PropertyService.removeProFromProperty(params);\n});\n\nremoveCustomerFromProperty.setHandler(({ userId }, params) => {\n  const { loanId, propertyId } = params;\n  SecurityService.checkUserIsPro(userId);\n  SecurityService.properties.isAllowedToRemoveCustomer({\n    userId,\n    propertyId,\n    loanId,\n  });\n  PropertyService.removeCustomerFromProperty(params);\n});\n\ninsertExternalProperty.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsPro(userId);\n  PropertyService.insertExternalProperty({ userId, ...params });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/server/hooks.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport LoanService from '../../loans/server/LoanService';\nimport Properties from '..';\nimport SecurityService from '../../security';\nimport { additionalDocumentsHook } from '../../helpers/sharedHooks';\nimport { PROPERTIES_COLLECTION } from '../propertyConstants';\nimport {\n  initialDocuments,\n  conditionalDocuments,\n} from '../propertiesAdditionalDocuments';\nimport UpdateWatcherService from '../../updateWatchers/server/UpdateWatcherService';\nimport { ROLES } from '../../constants';\nimport FileService from '../../files/server/FileService';\nimport { PropertySchemaAdmin } from '../schemas/PropertySchema';\nimport { removePropertyFromLoan } from './propertyServerHelpers';\n\nProperties.before.remove((userId, { _id: propertyId }) => {\n  // Remove all references to this property on the loan\n  const loans = LoanService.find({ propertyIds: propertyId }).fetch();\n\n  loans.forEach((loan) => {\n    removePropertyFromLoan({ loan, propertyId });\n  });\n});\n\nProperties.after.insert(additionalDocumentsHook({\n  collection: PROPERTIES_COLLECTION,\n  initialDocuments,\n  conditionalDocuments,\n}));\n\nProperties.after.update(additionalDocumentsHook({\n  collection: PROPERTIES_COLLECTION,\n  initialDocuments,\n  conditionalDocuments,\n}));\n\nUpdateWatcherService.addUpdateWatching({\n  collection: Properties,\n  fields: PropertySchemaAdmin._schemaKeys,\n  shouldWatch: ({ userId }) =>\n    SecurityService.hasRole(userId, ROLES.USER)\n    || SecurityService.hasRole(userId, ROLES.PRO),\n});\n\nProperties.after.remove((userId, { _id }) =>\n  FileService.deleteAllFilesForDoc(_id));\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/server/exposures.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport UserService from '../../users/server/UserService';\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { createSearchFilters } from '../../helpers/mongoHelpers';\nimport Security from '../../security';\nimport {\n  adminProperties,\n  anonymousProperty,\n  proProperties,\n  userProperty,\n  proPropertyUsers,\n  propertySearch,\n} from '../queries';\n\nexposeQuery({ query: adminProperties, options: { allowFilterById: true } });\nexposeQuery({\n  query: anonymousProperty,\n  overrides: {\n    firewall(userId, { _id }) {\n      Security.properties.checkPropertyIsPublic({ propertyId: _id });\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: proProperties,\n  overrides: {\n    firewall(userId, params) {\n      if (params.userId) {\n        // When visiting a pro user's page from admin\n        Security.checkUserIsAdmin(userId);\n      } else {\n        Security.checkUserIsPro(userId);\n        params.userId = userId;\n      }\n\n      if (params._id) {\n        Security.properties.hasAccessToProperty({\n          propertyId: params._id,\n          userId,\n        });\n      }\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params }) => {\n        const { _id: propertyId, userId, fetchOrganisationProperties } = params;\n        if (propertyId) {\n          filters._id = propertyId;\n        }\n\n        if (userId) {\n          filters['userLinks._id'] = userId;\n        }\n\n        if (fetchOrganisationProperties) {\n          const { organisations = [] } = UserService.fetchOne({\n            $filters: { _id: userId },\n            organisations: { users: { _id: 1 } },\n          });\n\n          const otherOrganisationUsers = organisations.length\n            ? organisations[0].users\n              .map(({ _id: orgUserId }) => orgUserId)\n              .filter(id => id !== userId)\n            : [];\n\n          filters['userLinks._id'] = { $in: otherOrganisationUsers };\n        }\n      };\n\n      body.$postFilter = (properties, params) => {\n        const { fetchOrganisationProperties, userId } = params;\n\n        if (fetchOrganisationProperties) {\n          // Filter out properties this user is on, to avoid duplicates\n          return properties.filter(({ userLinks }) =>\n            !userLinks.some(({ _id: userLinkId }) => userLinkId === userId));\n        }\n\n        return properties;\n      };\n    },\n    validateParams: {\n      userId: Match.Maybe(String),\n      fetchOrganisationProperties: Match.Maybe(Boolean),\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: userProperty,\n  overrides: {\n    firewall(userId, { _id: propertyId }) {\n      Security.properties.hasAccessToProperty({ propertyId, userId });\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: proPropertyUsers,\n  overrides: {\n    firewall(userId, params) {\n      const { propertyId } = params;\n      params.userId = userId;\n\n      Security.properties.isAllowedToView({ propertyId, userId });\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params: { propertyId } }) => {\n        filters._id = propertyId;\n      };\n\n      body.$postFilter = (properties = [], params) => {\n        const property = !!properties.length && properties[0];\n\n        if (!property) {\n          return [];\n        }\n\n        const { users = [] } = property;\n        return users;\n      };\n    },\n    validateParams: {\n      propertyId: String,\n      userId: String,\n    },\n  },\n});\n\nexposeQuery({\n  query: propertySearch,\n  overrides: {\n    validateParams: { searchQuery: Match.Maybe(String) },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { searchQuery } }) => {\n        Object.assign(\n          filters,\n          createSearchFilters(['address1', 'city', '_id'], searchQuery),\n        );\n      };\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/server/serverReducers.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Properties from '../properties';\nimport assigneeReducer from '../../reducers/assigneeReducer';\nimport { createMeteorAsyncFunction } from '../../helpers';\nimport { getOpenGraphMeta } from '../../../utils/openGraph';\n\nProperties.addReducers({\n  ...assigneeReducer(),\n  openGraphData: {\n    body: { externalUrl: 1 },\n    reduce: ({ externalUrl }) => {\n      const asyncFunc = createMeteorAsyncFunction(getOpenGraphMeta);\n\n      if (externalUrl) {\n        return asyncFunc(externalUrl);\n      }\n\n      return undefined;\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"propertyClientHelper.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/propertyClientHelper.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { PROPERTY_REFERRED_BY_TYPE } from './propertyConstants';\n\nexport const getCurrentUserPermissionsForProProperty = ({\n  currentUser: { properties = [] } = {},\n  propertyId,\n}) => {\n  const property = properties.find(({ _id }) => _id === propertyId);\n  return property && property.$metadata.permissions;\n};\n\nexport const getProPropertyCustomerOwnerType = ({\n  referredByUser = {},\n  referredByOrganisation = {},\n  currentUser = {},\n}) => {\n  const { _id: userId, organisations = [] } = currentUser;\n\n  // Is referred by nobody\n  if (!referredByUser) {\n    return null;\n  }\n\n  // Is referred by user\n  if (referredByUser._id === userId) {\n    return PROPERTY_REFERRED_BY_TYPE.USER;\n  }\n\n  const organisationIds = organisations.map(({ _id }) => _id);\n  const organisationUserIds = organisations.reduce(\n    (userIds, { users = [] }) => [...userIds, ...users.map(({ _id }) => _id)],\n    [],\n  );\n\n  // Is referred by organisation\n  if (\n    organisationIds.includes(referredByOrganisation._id)\n    // User is not referred by organisation, but by a user in current user's organisations\n    || organisationUserIds.includes(referredByUser._id)\n  ) {\n    return PROPERTY_REFERRED_BY_TYPE.ORGANISATION;\n  }\n\n  // Is referred by someone else\n  return PROPERTY_REFERRED_BY_TYPE.ANY;\n};\n\nconst hasNoPermissions = ({ permissions }) => !Object.keys(permissions).length;\n\nconst shouldAnonymizeWhenReferredByTypeUser = ({\n  shouldHideForPropertyStatus,\n  referredBy,\n}) =>\n  shouldHideForPropertyStatus\n  || ![\n    PROPERTY_REFERRED_BY_TYPE.USER,\n    PROPERTY_REFERRED_BY_TYPE.ORGANISATION,\n  ].includes(referredBy);\n\nconst shouldAnonymizeWhenReferredByTypeOrganisation = ({\n  shouldHideForPropertyStatus,\n  referredBy,\n}) =>\n  shouldHideForPropertyStatus\n  || referredBy !== PROPERTY_REFERRED_BY_TYPE.ORGANISATION;\n\nexport const shouldAnonymize = ({\n  customerOwnerType,\n  permissions = {},\n  propertyStatus,\n}) => {\n  // Never anonymize if referred by user\n  if (customerOwnerType === PROPERTY_REFERRED_BY_TYPE.USER) {\n    return false;\n  }\n\n  if (hasNoPermissions({ permissions })) {\n    return true;\n  }\n\n  const { displayCustomerNames } = permissions;\n\n  if (displayCustomerNames === false || !customerOwnerType) {\n    return true;\n  }\n\n  const shouldHideForPropertyStatus = !!propertyStatus\n    && displayCustomerNames\n    && !displayCustomerNames.forPropertyStatus.includes(propertyStatus);\n\n  if (\n    displayCustomerNames\n    && displayCustomerNames.referredBy === PROPERTY_REFERRED_BY_TYPE.ANY\n  ) {\n    return shouldHideForPropertyStatus;\n  }\n\n  switch (customerOwnerType) {\n  case PROPERTY_REFERRED_BY_TYPE.ORGANISATION:\n    return shouldAnonymizeWhenReferredByTypeOrganisation({\n      shouldHideForPropertyStatus,\n      referredBy: displayCustomerNames.referredBy,\n    });\n  default:\n    return true;\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"fakes.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/fakes.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport {\n  RESIDENCE_TYPE,\n  PROPERTY_TYPE,\n  MINERGIE_CERTIFICATE,\n  VOLUME_NORM,\n} from './propertyConstants';\n\nexport const emptyProperty = {};\n\nexport const fakeProperty = {\n  value: 1000000,\n  address1: 'Rue du Succès 18',\n  zipCode: 1000,\n  city: 'Lausanne',\n  residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n  type: PROPERTY_TYPE.FLAT,\n  futureOwner: 0,\n  constructionYear: 2010,\n  landArea: 300,\n  insideArea: 140,\n  volume: 1500,\n  volumeNorm: VOLUME_NORM.SIA_416,\n  roomCount: 5,\n  numberOfFloors: 5,\n  floorNumber: 3,\n  parkingInside: 1,\n  parkingOutside: 2,\n  minergie: MINERGIE_CERTIFICATE.MINERGIE_ECO,\n  isCoproperty: true,\n  copropertyPercentage: 400,\n  terraceArea: 20,\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/links.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Properties from './properties';\nimport { Users, Loans, Promotions, PromotionLots, MortgageNotes } from '..';\n\nProperties.addLinks({\n  user: {\n    field: 'userId',\n    collection: Users,\n    type: 'one',\n  },\n  loans: {\n    collection: Loans,\n    inversedBy: 'properties',\n  },\n  promotion: {\n    collection: Promotions,\n    inversedBy: 'properties',\n    unique: true,\n  },\n  promotionLots: {\n    collection: PromotionLots,\n    inversedBy: 'properties',\n  },\n  mortgageNotes: {\n    field: 'mortgageNoteLinks',\n    collection: MortgageNotes,\n    type: 'many',\n    metadata: true,\n    autoremove: true,\n    unique: true,\n  },\n  users: {\n    field: 'userLinks',\n    collection: Users,\n    type: 'many',\n    metadata: true,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/reducers.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport addressReducer from '../reducers/addressReducer';\nimport Properties from '.';\nimport { PROPERTY_DOCUMENTS } from '../files/fileConstants';\n\nProperties.addReducers({\n  ...addressReducer,\n  thumbnail: {\n    body: {\n      documents: { [PROPERTY_DOCUMENTS.PROPERTY_PICTURES]: { url: 1 } },\n      imageUrls: 1,\n    },\n    reduce: ({ documents = {}, imageUrls = [] }) => {\n      if (imageUrls.length > 0) {\n        return imageUrls[0];\n      }\n\n      if (\n        documents\n        && documents[PROPERTY_DOCUMENTS.PROPERTY_PICTURES]\n        && documents[PROPERTY_DOCUMENTS.PROPERTY_PICTURES].length\n      ) {\n        return documents[PROPERTY_DOCUMENTS.PROPERTY_PICTURES][0].url;\n      }\n    },\n  },\n  totalValue: {\n    body: { value: 1, landValue: 1, constructionValue: 1, additionalMargin: 1 },\n    reduce: ({\n      value = 0,\n      landValue = 0,\n      constructionValue = 0,\n      additionalMargin = 0,\n    }) => value || landValue + constructionValue + additionalMargin,\n  },\n  valuePerSquareMeterInside: {\n    body: { totalValue: 1, insideArea: 1 },\n    reduce: ({ totalValue = 0, insideArea = 0 }) =>\n      (insideArea === 0 ? 0 : totalValue / insideArea),\n  },\n  valuePerSquareMeterLand: {\n    body: { totalValue: 1, landArea: 1 },\n    reduce: ({ totalValue = 0, landArea = 0 }) =>\n      (landArea === 0 ? 0 : totalValue / landArea),\n  },\n  organisation: {\n    body: { users: { organisations: { name: 1 } } },\n    reduce: ({ users = [] }) => {\n      if (users.length === 0) {\n        return undefined;\n      }\n\n      let org;\n\n      const hasOrg = users.every(({ organisations = [] }) => {\n        if (organisations.length !== 1) {\n          return false;\n        }\n\n        if (!org) {\n          org = organisations[0];\n          return true;\n        }\n\n        return organisations[0]._id === org._id;\n      });\n\n      return hasOrg ? org : null;\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/properties/queries.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Properties from '.';\nimport { PROPERTY_QUERIES } from './propertyConstants';\nimport {\n  adminProperty,\n  userProperty as userPropertyFragment,\n  proProperty,\n  proUser,\n} from '../fragments';\n\nexport const adminProperties = Properties.createQuery(\n  PROPERTY_QUERIES.ADMIN_PROPERTIES,\n  adminProperty(),\n);\n\nexport const anonymousProperty = Properties.createQuery(\n  PROPERTY_QUERIES.ANONYMOUS_PROPERTY,\n  {\n    ...userPropertyFragment(),\n    // Ask these for non-reactive queries, like ProPropertyPage\n    documents: 1,\n    openGraphData: 1,\n  },\n);\n\nexport const propertySearch = Properties.createQuery(\n  PROPERTY_QUERIES.PROPERTY_SEARCH,\n  {\n    address1: 1,\n    address2: 1,\n    city: 1,\n    zipCode: 1,\n    totalValue: 1,\n    status: 1,\n    style: 1,\n    insideArea: 1,\n    $options: { limit: 5 },\n  },\n);\n\nexport const proProperties = Properties.createQuery(\n  PROPERTY_QUERIES.PRO_PROPERTIES,\n  proProperty(),\n);\n\nexport const proPropertyUsers = Properties.createQuery(\n  PROPERTY_QUERIES.PRO_PROPERTY_USERS,\n  { users: proUser() },\n);\n\nexport const userProperty = Properties.createQuery(\n  PROPERTY_QUERIES.USER_PROPERTY,\n  {\n    $filter({ filters, params: { propertyId } }) {\n      filters._id = propertyId;\n    },\n    ...userPropertyFragment(),\n    // Ask these for non-reactive queries, like ProPropertyPage\n    openGraphData: 1,\n    documents: 1,\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"tasks\":{\"taskConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/taskConstants.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const TASKS_COLLECTION = 'tasks';\n\nexport const TASK_STATUS = {\n  ACTIVE: 'ACTIVE',\n  COMPLETED: 'COMPLETED',\n  CANCELLED: 'CANCELLED',\n};\n\nexport const TASK_QUERIES = {\n  TASKS: 'TASKS',\n  UNASSIGNED_TASKS: 'UNASSIGNED_TASKS',\n  TASKS_FOR_DOC: 'TASKS_FOR_DOC',\n  SIDENAV_TASKS: 'SIDENAV_TASKS',\n};\n\nexport const TASK_PRIORITIES = {\n  DEFAULT: 'DEFAULT',\n  HIGH: 'HIGH',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tasks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/tasks.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nimport { createdAt, updatedAt } from '../helpers/sharedSchemas';\nimport {\n  TASK_STATUS,\n  TASKS_COLLECTION,\n  TASK_PRIORITIES,\n} from './taskConstants';\n\nconst Tasks = new Mongo.Collection(TASKS_COLLECTION);\n\n// Prevent all client side modifications of mongoDB\nTasks.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nTasks.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nexport const TasksSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  status: {\n    type: String,\n    defaultValue: TASK_STATUS.ACTIVE,\n    allowedValues: Object.values(TASK_STATUS),\n  },\n  completedAt: {\n    type: Date,\n    optional: true,\n  },\n  dueAt: {\n    type: Date,\n    optional: true,\n  },\n  createdBy: {\n    type: String,\n    optional: true,\n    autoValue() {\n      if (this.isInsert) {\n        return this.userId;\n      }\n      this.unset();\n    },\n  },\n  assigneeLink: {\n    type: Object,\n    optional: true,\n  },\n  'assigneeLink._id': {\n    type: String,\n    optional: true,\n  },\n  title: {\n    type: String,\n    optional: true,\n  },\n  description: {\n    type: String,\n    optional: true,\n  },\n  loanLink: {\n    type: Object,\n    optional: true,\n  },\n  'loanLink._id': {\n    type: String,\n    optional: true,\n  },\n  userLink: {\n    type: Object,\n    optional: true,\n  },\n  'userLink._id': {\n    type: String,\n    optional: true,\n  },\n  promotionLink: {\n    type: Object,\n    optional: true,\n  },\n  'promotionLink._id': {\n    type: String,\n    optional: true,\n  },\n  organisationLink: {\n    type: Object,\n    optional: true,\n  },\n  'organisationLink._id': {\n    type: String,\n    optional: true,\n  },\n  lenderLink: {\n    type: Object,\n    optional: true,\n  },\n  'lenderLink._id': {\n    type: String,\n    optional: true,\n  },\n  isPrivate: {\n    type: Boolean,\n    defaultValue: false,\n  },\n  priority: {\n    type: String,\n    defaultValue: TASK_PRIORITIES.DEFAULT,\n    allowedValues: Object.values(TASK_PRIORITIES),\n  },\n});\n\nTasks.attachSchema(TasksSchema);\nexport default Tasks;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/index.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport * as methodDefinitions from './methodDefinitions';\n\nexport * from './methodDefinitions';\nexport { default } from './tasks';\nexport const taskMethods = methodDefinitions;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/methodDefinitions.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Method } from '../methods/methods';\n\nexport const taskInsert = new Method({\n  name: 'taskInsert',\n  params: {\n    object: Object,\n  },\n});\n\nexport const taskUpdate = new Method({\n  name: 'taskUpdate',\n  params: {\n    taskId: String,\n    object: Object,\n  },\n});\n\nexport const taskComplete = new Method({\n  name: 'taskComplete',\n  params: {\n    taskId: String,\n  },\n});\n\nexport const taskChangeStatus = new Method({\n  name: 'taskChangeStatus',\n  params: {\n    taskId: String,\n    newStatus: String,\n  },\n});\n\nexport const setAssigneeOfTask = new Method({\n  name: 'setAssigneeOfTask',\n  params: {\n    taskId: String,\n    newAssigneeId: String,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"TaskService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/server/TaskService.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport moment from 'moment';\n\nimport { LOANS_COLLECTION, USERS_COLLECTION } from '../../constants';\nimport CollectionService from '../../helpers/CollectionService';\nimport { TASK_STATUS } from '../taskConstants';\nimport Tasks from '../tasks';\nimport { PROMOTIONS_COLLECTION } from '../../promotions/promotionConstants';\nimport { ORGANISATIONS_COLLECTION } from '../../organisations/organisationConstants';\nimport { LENDERS_COLLECTION } from '../../lenders/lenderConstants';\n\nclass TaskService extends CollectionService {\n  constructor() {\n    super(Tasks);\n  }\n\n  insert = ({\n    object: { collection, dueAt, dueAtTime, docId, assigneeLink = {}, ...rest },\n  }) => {\n    let assignee = assigneeLink._id;\n    if (!assignee && docId && collection) {\n      assignee = this.getAssigneeForDoc(docId, collection);\n    }\n\n    const taskId = Tasks.insert({\n      dueAt: this.getDueDate({ dueAt, dueAtTime }),\n      ...rest,\n    });\n\n    if (collection === LOANS_COLLECTION) {\n      this.addLink({ id: taskId, linkName: 'loan', linkId: docId });\n    }\n    if (collection === USERS_COLLECTION) {\n      this.addLink({ id: taskId, linkName: 'user', linkId: docId });\n    }\n    if (collection === PROMOTIONS_COLLECTION) {\n      this.addLink({ id: taskId, linkName: 'promotion', linkId: docId });\n    }\n    if (collection === ORGANISATIONS_COLLECTION) {\n      this.addLink({ id: taskId, linkName: 'organisation', linkId: docId });\n    }\n    if (collection === LENDERS_COLLECTION) {\n      this.addLink({ id: taskId, linkName: 'lender', linkId: docId });\n    }\n\n    if (assignee) {\n      this.addLink({\n        id: taskId,\n        linkName: 'assignee',\n        linkId: assignee,\n      });\n    }\n\n    return taskId;\n  };\n\n  remove = ({ taskId }) => Tasks.remove(taskId);\n\n  update = ({ taskId, object }) => Tasks.update(taskId, { $set: object });\n\n  getTaskById = taskId => Tasks.findOne(taskId);\n\n  getTasksForDoc = docId => Tasks.find({ docId }).fetch();\n\n  getDueDate = ({ dueAt, dueAtTime }) => {\n    if (dueAt && !dueAtTime) {\n      return dueAt;\n    }\n\n    if (dueAtTime) {\n      const [hours = 0, minutes = 0] = dueAtTime.split(':');\n      const date = moment(dueAt || undefined)\n        .hour(hours)\n        .minute(minutes)\n        .seconds(0)\n        .milliseconds(0);\n\n      if (dueAt) {\n        return date.toDate();\n      }\n\n      if (moment().isAfter(date)) {\n        // If it is 14:00, and you choose 10:00 as the time, you don't want it\n        // in the past, but tomorrow\n        date.add(1, 'd');\n      }\n      return date.toDate();\n    }\n  };\n\n  complete = ({ taskId }) =>\n    this.update({\n      taskId,\n      object: { status: TASK_STATUS.COMPLETED, completedAt: new Date() },\n    });\n\n  changeStatus = ({ taskId, newStatus }) =>\n    this.update({\n      taskId,\n      object: {\n        status: newStatus,\n        completedAt:\n          newStatus === TASK_STATUS.COMPLETED ? new Date() : undefined,\n      },\n    });\n\n  changeAssignedTo = ({ taskId, newAssigneeId }) => {\n    this.addLink({ id: taskId, linkName: 'assignee', linkId: newAssigneeId });\n  };\n\n  getAssigneeForDoc = (docId, collection) => {\n    const doc = Mongo.Collection.get(collection)\n      .createQuery({ $filters: { _id: docId }, assignee: 1 })\n      .fetchOne();\n\n    return doc && doc.assignee ? doc.assignee._id : null;\n  };\n}\n\nexport default new TaskService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/server/methods.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport TaskService from './TaskService';\nimport {\n  taskInsert,\n  taskUpdate,\n  taskComplete,\n  taskChangeStatus,\n  setAssigneeOfTask,\n} from '../methodDefinitions';\n\ntaskInsert.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return TaskService.insert(params);\n});\n\ntaskUpdate.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return TaskService.update(params);\n});\n\ntaskComplete.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return TaskService.complete(params);\n});\n\ntaskChangeStatus.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return TaskService.changeStatus(params);\n});\n\nsetAssigneeOfTask.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return TaskService.changeAssignedTo(params);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"taskListeners.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/server/taskListeners.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport UserService from '../../users/server/UserService';\nimport ServerEventService from '../../events/server/ServerEventService';\nimport {\n  requestLoanVerification,\n  adminCreateUser,\n  anonymousCreateUser,\n} from '../../methods';\nimport { LOANS_COLLECTION, USERS_COLLECTION } from '../../constants';\nimport TaskService from './TaskService';\n\nServerEventService.addAfterMethodListener(\n  requestLoanVerification,\n  ({ params: { loanId } }) => {\n    TaskService.insert({\n      object: {\n        title: 'Vérification du dossier demandée',\n        docId: loanId,\n        collection: LOANS_COLLECTION,\n      },\n    });\n  },\n);\n\nServerEventService.addAfterMethodListener(\n  [adminCreateUser, anonymousCreateUser],\n  ({ result: userId }) => {\n    if (userId) {\n      const user = UserService.fetchOne({\n        $filters: { _id: userId },\n        assignedEmployeeId: 1,\n      });\n\n      if (user && !user.assignedEmployeeId) {\n        TaskService.insert({\n          object: {\n            title: 'Assigner un conseiller',\n            docId: userId,\n            collection: USERS_COLLECTION,\n          },\n        });\n      } else {\n        TaskService.insert({\n          object: {\n            title: 'Nouvel utilisateur: prendre contact',\n            docId: userId,\n            collection: USERS_COLLECTION,\n          },\n        });\n      }\n    }\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/server/hooks.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport NotificationService from '../../notifications/server/NotificationService';\nimport { TASK_STATUS } from '../taskConstants';\nimport Tasks from '..';\n\nTasks.before.update((\n  userId,\n  { _id: taskId, status: oldStatus, dueAt: oldDate },\n  fieldNames,\n  modifier,\n) => {\n  if (fieldNames.includes('status')) {\n    const newStatus = modifier.$set && modifier.$set.status;\n    if (\n      oldStatus !== TASK_STATUS.COMPLETED\n        && newStatus === TASK_STATUS.COMPLETED\n    ) {\n      modifier.$set.completedAt = new Date();\n    }\n\n    if (\n      oldStatus === TASK_STATUS.COMPLETED\n        && newStatus !== TASK_STATUS.COMPLETED\n    ) {\n      modifier.$set.completedAt = null;\n    }\n\n    if (\n      newStatus === TASK_STATUS.COMPLETED\n        || newStatus === TASK_STATUS.CANCELLED\n    ) {\n      NotificationService.readNotificationAll({\n        filters: { 'taskLink._id': taskId },\n      });\n    }\n  }\n\n  if (fieldNames.includes('dueAt')) {\n    const newDate = modifier.$set && modifier.$set.dueAt;\n\n    if ((newDate && newDate.getTime()) !== (oldDate && oldDate.getTime())) {\n      NotificationService.remove({ 'taskLink._id': taskId });\n    }\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/server/exposures.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport moment from 'moment';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { tasks } from '../queries';\n\nconst getUptoDate = (uptoDate) => {\n  switch (uptoDate) {\n  case 'TODAY':\n    return moment()\n      .endOf('day')\n      .toDate();\n  case 'TOMORROW':\n    return moment()\n      .endOf('day')\n      .add(1, 'days')\n      .endOf('day')\n      .toDate();\n\n  default:\n    return null;\n  }\n};\n\nexposeQuery({\n  query: tasks,\n  overrides: {\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: { assignee, loanId, status, uptoDate },\n      }) => {\n        if (assignee) {\n          filters['assigneeLink._id'] = assignee;\n        }\n\n        if (status) {\n          filters.status = status;\n        }\n\n        if (getUptoDate(uptoDate)) {\n          filters.$or = [\n            { dueAt: { $lt: getUptoDate(uptoDate) } },\n            { dueAt: { $exists: false } },\n          ];\n        }\n\n        if (loanId) {\n          filters['loanLink._id'] = loanId;\n        }\n      };\n      body.$postFilter = (results, postFilterParams) => {\n        const { _userId } = postFilterParams;\n\n        return results.filter((task) => {\n          const {\n            assigneeLink: { _id: assigneeId } = {},\n            isPrivate = false,\n          } = task;\n\n          if (isPrivate && assigneeId) {\n            return assigneeId === _userId;\n          }\n\n          return true;\n        });\n      };\n    },\n    validateParams: {\n      assignee: Match.Maybe(Match.OneOf(Object, String)),\n      loanId: Match.Maybe(String),\n      status: Match.Maybe(Match.OneOf(Object, String)),\n      uptoDate: Match.Maybe(String),\n    },\n  },\n  options: { allowFilterById: true },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/server/serverReducers.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Tasks from '../tasks';\n\nTasks.addReducers({});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/links.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Tasks from './tasks';\nimport { Users, Loans } from '..';\nimport Notifications from '../notifications';\nimport Promotions from '../promotions';\nimport Organisations from '../organisations';\nimport Lenders from '../lenders';\n\nTasks.addLinks({\n  assignee: {\n    field: 'assigneeLink',\n    collection: Users,\n    type: 'one',\n    metadata: true,\n  },\n  loan: {\n    field: 'loanLink',\n    collection: Loans,\n    type: 'one',\n    metadata: true,\n  },\n  user: {\n    field: 'userLink',\n    collection: Users,\n    type: 'one',\n    metadata: true,\n  },\n  promotion: {\n    field: 'promotionLink',\n    collection: Promotions,\n    type: 'one',\n    metadata: true,\n  },\n  organisation: {\n    field: 'organisationLink',\n    collection: Organisations,\n    type: 'one',\n    metadata: true,\n  },\n  lender: {\n    field: 'lenderLink',\n    collection: Lenders,\n    type: 'one',\n    metadata: true,\n  },\n  notifications: {\n    collection: Notifications,\n    inversedBy: 'task',\n    autoremove: true,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/tasks/queries.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Tasks from '.';\nimport { TASK_QUERIES } from './taskConstants';\nimport { task } from '../fragments';\n\nexport const tasks = Tasks.createQuery(TASK_QUERIES.TASKS, task());\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"users\":{\"userConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/userConstants.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Not actually used to create a meteor collection, but useful to switch()\n// on collection names\nexport const USERS_COLLECTION = 'users';\n\nexport const ROLES = {\n  ADMIN: 'admin',\n  DEV: 'dev',\n  USER: 'user',\n  PRO: 'pro',\n};\n\nexport const USER_QUERIES = {\n  ADMIN_USERS: 'ADMIN_USERS',\n  APP_USER: 'APP_USER',\n  CURRENT_USER: 'CURRENT_USER',\n  PRO_REFERRED_BY: 'PRO_REFERRED_BY',\n  PRO_USER: 'PRO_USER',\n  REFERRED_USERS: 'REFERRED_USERS',\n  USER_EMAILS: 'USER_EMAILS',\n  USER_SEARCH: 'USER_SEARCH',\n};\n\nexport const USER_EVENTS = {\n  USER_CREATED: 'USER_CREATED',\n};\n\nexport const LOCAL_STORAGE_REFERRAL = 'REFERRAL_ID';\nexport const LOCAL_STORAGE_OLD_REFERRAL = 'OLD_REFERRAL_ID';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/users.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\nimport { Meteor } from 'meteor/meteor';\n\nimport { createdAt, updatedAt, cacheField } from '../helpers/sharedSchemas';\nimport { ROLES } from './userConstants';\n\nexport const UserSchema = new SimpleSchema({\n  username: {\n    type: String,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true,\n  },\n  emails: {\n    type: Array,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true,\n  },\n  'emails.$': {\n    type: Object,\n  },\n  'emails.$.address': {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n  },\n  'emails.$.verified': {\n    type: Boolean,\n  },\n  createdAt,\n  updatedAt,\n  // Make sure this services field is in your schema if you're using any of the accounts packages\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true,\n  },\n  // Add `roles` to your schema if you use the meteor-roles package.\n  // Option 1: Object type\n  // If you specify that type as Object, you must also specify the\n  // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.\n  // Example:\n  // Roles.addUsersToRoles(userId, [\"admin\"], Roles.GLOBAL_GROUP);\n  // You can't mix and match adding with and without a group since\n  // you will fail validation in some cases.\n  // roles: {\n  //   type: Object,\n  //   optional: true,\n  //   blackbox: true,\n  // },\n  // Option 2: [String] type\n  // If you are sure you will never need to use role groups, then\n  // you can specify [String] as the type\n  roles: {\n    type: Array,\n    optional: true,\n    defaultValue: [ROLES.USER],\n  },\n  'roles.$': {\n    type: String,\n    allowedValues: Object.values(ROLES),\n  },\n  // In order to avoid an 'Exception in setInterval callback' from Meteor\n  heartbeat: {\n    type: Date,\n    optional: true,\n  },\n  assignedEmployeeId: {\n    type: String,\n    optional: true,\n  },\n  firstName: {\n    type: String,\n    optional: true,\n  },\n  lastName: {\n    type: String,\n    optional: true,\n  },\n  phoneNumbers: {\n    type: Array,\n    optional: true,\n  },\n  'phoneNumbers.$': {\n    type: String,\n  },\n  apiPublicKey: {\n    type: Object,\n    optional: true,\n  },\n  'apiPublicKey.publicKey': {\n    type: String,\n    optional: true,\n  },\n  'apiPublicKey.createdAt': { type: Date, optional: true },\n  referredByUserLink: { type: String, optional: true },\n  referredByOrganisationLink: { type: String, optional: true },\n  assignedEmployeeCache: cacheField,\n});\n\nMeteor.users.attachSchema(UserSchema);\n\nconst Users = Meteor.users;\nexport default Users;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/index.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport * as methodDefinitions from './methodDefinitions';\n\nexport * from './methodDefinitions';\nexport { default } from './users';\nexport const userMutations = methodDefinitions;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/methodDefinitions.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { check, Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { Method } from '../methods/methods';\n\nexport const doesUserExist = new Method({\n  name: 'doesUserExist',\n  params: {\n    email: String,\n  },\n});\n\nexport const sendVerificationLink = new Method({\n  name: 'sendVerificationLink',\n  params: {\n    userId: Match.Optional(String),\n  },\n});\n\nexport const assignAdminToUser = new Method({\n  name: 'assignAdminToUser',\n  params: {\n    userId: String,\n    adminId: String,\n  },\n});\n\nexport const assignAdminToNewUser = new Method({\n  name: 'assignAdminToNewUser',\n  params: {\n    userId: String,\n    adminId: String,\n  },\n});\n\nexport const setRole = new Method({\n  name: 'setRole',\n  params: {\n    userId: String,\n    role: String,\n  },\n});\n\nexport const adminCreateUser = new Method({\n  name: 'adminCreateUser',\n  params: {\n    options: Object,\n    role: String,\n  },\n});\n\nexport const updateUser = new Method({\n  name: 'updateUser',\n  params: {\n    userId: String,\n    object: Object,\n  },\n});\n\nexport const getUserByPasswordResetToken = new Method({\n  name: 'getUserByPasswordResetToken',\n  params: {\n    token: String,\n  },\n});\n\nexport const testCreateUser = new Method({\n  name: 'testCreateUser',\n  params: {\n    user: Object,\n  },\n});\n\nexport const removeUser = new Method({\n  name: 'removeUser',\n  params: {\n    userId: String,\n  },\n});\n\nexport const sendEnrollmentEmail = new Method({\n  name: 'sendEnrollmentEmail',\n  params: {\n    userId: String,\n  },\n});\n\nexport const changeEmail = new Method({\n  name: 'changeEmail',\n  params: {\n    userId: String,\n    newEmail: String,\n  },\n});\n\nexport const userUpdateOrganisations = new Method({\n  name: 'userUpdateOrganisations',\n  params: {\n    userId: String,\n    newOrganisations: Array,\n  },\n});\n\nexport const testUserAccount = new Method({\n  name: 'testUserAccount',\n  params: {\n    email: String,\n    password: String,\n    role: String,\n  },\n});\n\nexport const generateApiKeyPair = new Method({\n  name: 'generateApiKeyPair',\n  params: {\n    userId: String,\n  },\n});\n\nexport const proInviteUser = new Method({\n  name: 'proInviteUser',\n  params: {\n    user: Object,\n    propertyIds: Match.Maybe([String]),\n    promotionIds: Match.Maybe([String]),\n    properties: Match.Maybe(Array),\n    shareSolvency: Match.Maybe(Match.OneOf(Boolean, undefined)),\n  },\n});\n\nexport const getUserByEmail = new Method({\n  name: 'getUserByEmail',\n  params: {\n    email: String,\n  },\n});\n\nexport const setUserReferredBy = new Method({\n  name: 'setUserReferredBy',\n  params: {\n    userId: String,\n    proId: String,\n  },\n});\n\nexport const setUserReferredByOrganisation = new Method({\n  name: 'setUserReferredByOrganisation',\n  params: { userId: String, organisationId: String },\n});\n\nexport const proInviteUserToOrganisation = new Method({\n  name: 'proInviteUserToOrganisation',\n  params: { user: Object, organisationId: String, title: String },\n});\n\nexport const proSetShareCustomers = new Method({\n  name: 'proSetShareCustomers',\n  params: { userId: String, organisationId: String, shareCustomers: Boolean },\n});\n\nexport const anonymousCreateUser = new Method({\n  name: 'anonymousCreateUser',\n  params: {\n    loanId: Match.Maybe(String),\n    user: {\n      firstName: String,\n      lastName: String,\n      email: String,\n      phoneNumber: String,\n    },\n    trackingId: String,\n    referralId: Match.Maybe(String),\n  },\n});\n\nexport const referralExists = new Method({\n  name: 'referralExists',\n  params: {\n    ref: String,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"UserService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/server/UserService.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\nimport { Accounts } from 'meteor/accounts-base';\nimport NodeRSA from 'node-rsa';\nimport omit from 'lodash/omit';\n\nimport { EMAIL_IDS } from '../../email/emailConstants';\nimport { sendEmail } from '../../methods';\nimport { fullUser } from '../../fragments';\nimport CollectionService from '../../helpers/CollectionService';\nimport LoanService from '../../loans/server/LoanService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport PromotionService from '../../promotions/server/PromotionService';\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport SecurityService from '../../security';\nimport { getUserNameAndOrganisation } from '../../helpers';\nimport { ROLES } from '../userConstants';\nimport { roundRobinAdvisors } from './userServerContants';\nimport Users from '../users';\n\nexport class UserServiceClass extends CollectionService {\n  constructor({ employees }) {\n    super(Users);\n    this.setupRoundRobin(employees);\n  }\n\n  get(userId) {\n    return this.fetchOne({ $filters: { _id: userId }, ...fullUser() });\n  }\n\n  getByEmail(email) {\n    return Accounts.findUserByEmail(email);\n  }\n\n  createUser = ({ options, role }) => {\n    if (!options.password) {\n      // password is not even allowed to be undefined,\n      // it has to be stripped from the options object\n      options = omit(options, ['password']);\n    }\n\n    const newUserId = Accounts.createUser(options);\n\n    if (role) {\n      Roles.setUserRoles(newUserId, role);\n    }\n\n    return newUserId;\n  };\n\n  adminCreateUser = ({\n    options: { email, password, sendEnrollmentEmail, ...additionalData },\n    role = ROLES.USER,\n    adminId,\n  }) => {\n    const newUserId = this.createUser({ options: { email, password }, role });\n\n    if (additionalData.phoneNumber && additionalData.phoneNumber.length) {\n      additionalData.phoneNumbers = [additionalData.phoneNumber];\n    }\n\n    this.update({ userId: newUserId, object: additionalData });\n\n    if (role === ROLES.USER && adminId && !additionalData.assignedEmployeeId) {\n      this.assignAdminToUser({ userId: newUserId, adminId });\n    } else if (!additionalData.assignedEmployeeId) {\n      this.setAssigneeForNewUser(newUserId);\n    }\n\n    if (sendEnrollmentEmail) {\n      this.sendEnrollmentEmail({ userId: newUserId });\n    }\n\n    return newUserId;\n  };\n\n  anonymousCreateUser = ({ user, loanId, referralId }) => {\n    const userId = this.adminCreateUser({\n      options: { ...user, sendEnrollmentEmail: true },\n    });\n\n    if (loanId) {\n      LoanService.assignLoanToUser({ userId, loanId });\n    }\n\n    if (referralId) {\n      this.setReferredBy({ userId, proId: referralId });\n    }\n\n    return userId;\n  };\n\n  // This should remain a simple inequality check\n  doesUserExist = ({ email }) => this.getByEmail(email) != null;\n\n  sendVerificationEmail = ({ userId }) =>\n    Accounts.sendVerificationEmail(userId);\n\n  sendEnrollmentEmail = ({ userId }) => {\n    try {\n      Accounts.sendEnrollmentEmail(userId);\n    } catch (error) {\n      // FIXME: Temporary fix for meteor toys in dev\n      // https://github.com/MeteorToys/meteor-devtools/issues/111\n      if (error.message !== 'MeteorToys is not defined') {\n        throw error;\n      }\n    }\n  };\n\n  remove = ({ userId }) => Users.remove(userId);\n\n  allowUpdate = ({ object }) => object && Object.keys(object).length !== 0;\n\n  update = ({ userId, object }) =>\n    this.allowUpdate({ object }) && Users.update(userId, { $set: object });\n\n  assignAdminToUser = ({ userId, adminId }) =>\n    adminId && this.update({ userId, object: { assignedEmployeeId: adminId } });\n\n  getUsersByRole = role => Users.find({ roles: { $in: [role] } }).fetch();\n\n  setRole = ({ userId, role }) => Roles.setUserRoles(userId, role);\n\n  getUserById = ({ userId }) => Users.findOne(userId);\n\n  getUserByPasswordResetToken = ({ token }) =>\n    Users.findOne(\n      { 'services.password.reset.token': token },\n      { fields: { firstName: 1, lastName: 1, emails: 1 } },\n    );\n\n  getLoginToken = ({ userId }) => {\n    const user = Users.findOne(userId, { fields: { services: 1 } });\n\n    return (\n      user.services.password\n      && user.services.password.reset\n      && user.services.password.reset.token\n    );\n  };\n\n  testCreateUser = ({ user }) => Users.insert(user);\n\n  hasPromotion = ({ userId, promotionId }) => {\n    const loans = LoanService.fetch({\n      $filters: { userId },\n      promotionLinks: 1,\n    });\n\n    if (!promotionId) {\n      // Return true if any promotion exists\n      return (\n        loans\n        && loans.some(({ promotionLinks }) => promotionLinks && promotionLinks.length > 0)\n      );\n    }\n\n    return (\n      loans\n      && loans.some(({ promotionLinks = [] }) =>\n        promotionLinks.some(({ _id }) => _id === promotionId))\n    );\n  };\n\n  hasProperty = ({ userId, propertyId }) => {\n    if (!propertyId) {\n      return false;\n    }\n\n    const loans = LoanService.fetch({\n      $filters: { userId },\n      propertyIds: 1,\n    });\n\n    return (\n      loans\n      && loans.some(({ propertyIds = [] }) =>\n        propertyIds.some(id => id === propertyId))\n    );\n  };\n\n  changeEmail = ({ userId, newEmail }) => {\n    const { emails } = Users.findOne(userId);\n    Accounts.addEmail(userId, newEmail);\n    Accounts.removeEmail(userId, emails[0].address);\n    Accounts.sendVerificationEmail(userId);\n  };\n\n  updateOrganisations = ({ userId, newOrganisations = [] }) => {\n    const { organisations: oldOrganisations = [] } = this.get(userId);\n\n    oldOrganisations.forEach(({ _id: organisationId }) =>\n      this.removeLink({\n        id: userId,\n        linkName: 'organisations',\n        linkId: organisationId,\n      }));\n\n    newOrganisations.forEach(({ _id: organisationId, metadata }) =>\n      this.linkOrganisation({ userId, organisationId, metadata }));\n  };\n\n  testUserAccount = ({ email, password, role }) => {\n    if (this.doesUserExist({ email })) {\n      // Sometimes this methods is called twice from a test.....???????\n      // Apparently due to a duplicate websocket connection\n      return this.getByEmail(email);\n    }\n    const userId = Accounts.createUser({ email, password });\n    Roles.setUserRoles(userId, role);\n    return this.get(userId);\n  };\n\n  generateKeyPair = ({ userId }) => {\n    const key = new NodeRSA();\n    key.generateKeyPair(512);\n    const publicKey = key\n      .exportKey('pkcs1-public-pem')\n      .replace(/\\r?\\n|\\r/g, '');\n    const privateKey = key\n      .exportKey('pkcs1-private-pem')\n      .replace(/\\r?\\n|\\r/g, '');\n    const createdAt = new Date();\n    this._update({\n      id: userId,\n      object: { apiPublicKey: { publicKey, createdAt } },\n    });\n    return { publicKey, privateKey, createdAt };\n  };\n\n  proReferUser = ({ user, proUserId, shareSolvency }) => {\n    const { email } = user;\n    if (this.doesUserExist({ email })) {\n      throw new Meteor.Error(\"Ce client existe déjà. Vous ne pouvez pas le référer, mais vous pouvez l'inviter sur un de vos biens immobiliers.\");\n    }\n\n    const { userId, pro, admin } = this.proCreateUser({\n      user,\n      proUserId,\n      sendInvitation: false,\n    });\n\n    const loanId = LoanService.fullLoanInsert({ userId });\n    LoanService.update({ loanId, object: { shareSolvency } });\n\n    return sendEmail.run({\n      emailId: EMAIL_IDS.REFER_USER,\n      userId,\n      params: {\n        proUserId,\n        proName: getUserNameAndOrganisation({ user: pro }),\n        ctaUrl: this.getEnrollmentUrl({ userId }),\n      },\n    });\n  };\n\n  proCreateUser = ({\n    user: { email, firstName, lastName, phoneNumber },\n    proUserId,\n    sendInvitation = true,\n    adminId,\n  }) => {\n    let pro;\n    let assignedEmployeeId;\n\n    if (proUserId) {\n      pro = this.fetchOne({\n        $filters: { _id: proUserId },\n        name: 1,\n        assignedEmployeeId: 1,\n        organisations: { name: 1 },\n      });\n\n      const { assignedEmployeeId: proAssignedEmployeeId } = pro;\n\n      assignedEmployeeId = proAssignedEmployeeId;\n    } else if (adminId) {\n      assignedEmployeeId = adminId;\n    }\n\n    const isNewUser = !this.doesUserExist({ email });\n    let userId;\n    let admin;\n\n    if (isNewUser) {\n      admin = this.get(assignedEmployeeId);\n      userId = this.adminCreateUser({\n        options: {\n          email,\n          sendEnrollmentEmail: sendInvitation && !pro && Meteor.isProduction,\n          firstName,\n          lastName,\n          phoneNumbers: [phoneNumber],\n        },\n        adminId: admin && admin._id,\n      });\n\n      if (pro) {\n        this.setReferredBy({ userId, proId: proUserId });\n      }\n    } else {\n      const {\n        _id: existingUserId,\n        assignedEmployeeId: existingAssignedEmployeeId,\n      } = this.getByEmail(email);\n\n      admin = this.get(existingAssignedEmployeeId);\n      userId = existingUserId;\n    }\n\n    return { userId, admin, pro, isNewUser };\n  };\n\n  proInviteUser = ({\n    user,\n    propertyIds = [],\n    promotionIds = [],\n    properties = [],\n    proUserId,\n    adminId,\n    shareSolvency,\n  }) => {\n    const referOnly = propertyIds.length === 0\n      && promotionIds.length === 0\n      && properties.length === 0;\n\n    if (referOnly) {\n      return this.proReferUser({ user, proUserId, shareSolvency });\n    }\n\n    const { invitedBy } = user;\n    const { userId, admin, pro, isNewUser } = this.proCreateUser({\n      user,\n      proUserId: proUserId || invitedBy,\n      adminId,\n      // Invitation will be sent by the propertyInvitationEmail or\n      // promotionInvitationEmail\n      sendInvitation: false,\n    });\n\n    let promises = [];\n\n    if (propertyIds && propertyIds.length) {\n      promises = [\n        ...promises,\n        PropertyService.inviteUser({\n          propertyIds,\n          admin,\n          pro,\n          userId,\n          isNewUser,\n          shareSolvency,\n        }),\n      ];\n    }\n    if (promotionIds && promotionIds.length) {\n      promises = [\n        ...promises,\n        ...promotionIds.map(promotionId =>\n          PromotionService.inviteUser({\n            promotionId,\n            userId,\n            pro,\n            isNewUser,\n            promotionLotIds: user.promotionLotIds,\n            showAllLots: user.showAllLots,\n            shareSolvency,\n          })),\n      ];\n    }\n    if (properties && properties.length) {\n      const internalPropertyIds = properties.map((property) => {\n        let propertyId;\n\n        const existingProperty = PropertyService.fetchOne({\n          $filters: { externalId: property.externalId },\n        });\n\n        if (!existingProperty) {\n          propertyId = PropertyService.insertExternalProperty({\n            userId: pro._id,\n            property,\n          });\n        } else {\n          propertyId = existingProperty._id;\n        }\n\n        if (!propertyId) {\n          throw new Meteor.Error('No property found');\n        }\n\n        return propertyId;\n      });\n\n      promises = [\n        ...promises,\n        PropertyService.inviteUser({\n          propertyIds: internalPropertyIds,\n          admin,\n          pro,\n          userId,\n          isNewUser,\n          shareSolvency,\n        }),\n      ];\n    }\n\n    return Promise.all(promises);\n  };\n\n  getEnrollmentUrl({ userId }) {\n    let domain = Meteor.settings.public.subdomains.app;\n\n    if (SecurityService.hasRole(userId, ROLES.PRO)) {\n      domain = Meteor.settings.public.subdomains.pro;\n    }\n\n    const { token } = Accounts.generateResetToken(\n      userId,\n      null,\n      'enrollAccount',\n    );\n    return `${domain}/enroll-account/${token}`;\n  }\n\n  setReferredBy({ userId, proId, organisationId }) {\n    if (!organisationId) {\n      const mainOrg = this.getUserMainOrganisation(proId);\n      organisationId = mainOrg && mainOrg._id;\n    }\n\n    return this.update({\n      userId,\n      object: {\n        referredByUserLink: proId,\n        referredByOrganisationLink: organisationId,\n      },\n    });\n  }\n\n  setReferredByOrganisation({ userId, organisationId }) {\n    return this.update({\n      userId,\n      object: { referredByOrganisationLink: organisationId },\n    });\n  }\n\n  proInviteUserToOrganisation({ user, organisationId, title, proId, adminId }) {\n    const { email, phoneNumber } = user;\n    let assigneeId;\n\n    if (this.doesUserExist({ email })) {\n      throw new Meteor.Error('Cet utilisateur existe déjà');\n    }\n\n    if (proId) {\n      const { assignedEmployeeId } = this.fetchOne({\n        $filters: { _id: proId },\n        assignedEmployeeId: 1,\n      });\n      assigneeId = assignedEmployeeId;\n    } else {\n      assigneeId = adminId;\n    }\n\n    const userId = this.adminCreateUser({\n      options: {\n        ...user,\n        phoneNumbers: [phoneNumber],\n        sendEnrollmentEmail: !Meteor.isDevelopment, // Meteor toys is not defined\n      },\n      role: ROLES.PRO,\n      adminId: assigneeId,\n    });\n\n    this.linkOrganisation({ userId, organisationId, metadata: { title } });\n\n    return userId;\n  }\n\n  linkOrganisation({ userId, organisationId, metadata }) {\n    const { organisations: userOrganisations = [] } = this.fetchOne({\n      $filters: { _id: userId },\n      organisations: { _id: 1 },\n    });\n    const isMain = userOrganisations.length === 0;\n\n    this.addLink({\n      id: userId,\n      linkName: 'organisations',\n      linkId: organisationId,\n      metadata: { ...metadata, isMain, shareCustomers: true },\n    });\n  }\n\n  getUserMainOrganisation(userId) {\n    const organisations = OrganisationService.fetch({\n      $filters: { userLinks: { $elemMatch: { _id: userId } } },\n      userLinks: 1,\n      name: 1,\n    });\n\n    let mainOrganisation = null;\n    if (organisations.length === 1) {\n      mainOrganisation = organisations[0];\n    } else if (organisations.length > 1) {\n      mainOrganisation = organisations.find(({ userLinks }) => {\n        const userLink = userLinks.find(({ _id }) => _id === userId);\n        return userLink.isMain;\n      }) || organisations[0];\n    }\n\n    return mainOrganisation;\n  }\n\n  proSetShareCustomers({ userId, organisationId, shareCustomers }) {\n    this.updateLinkMetadata({\n      id: userId,\n      linkName: 'organisations',\n      linkId: organisationId,\n      metadata: { shareCustomers },\n    });\n  }\n\n  setupRoundRobin(employees = []) {\n    this.employees = employees\n      .map((email) => {\n        const employee = this.getByEmail(email);\n        if (employee) {\n          return employee._id;\n        }\n      })\n      .filter(x => x);\n  }\n\n  setAssigneeForNewUser(userId) {\n    const { roles, assignedEmployeeId } = this.fetchOne({\n      $filters: { _id: userId },\n      assignedEmployeeId: 1,\n      roles: 1,\n    });\n\n    if (assignedEmployeeId) {\n      return;\n    }\n    let newAssignee;\n\n    if (roles.includes(ROLES.USER)) {\n      const lastCreatedUser = this.fetchOne({\n        $filters: {\n          roles: ROLES.USER,\n          assignedEmployeeId: { $in: this.employees },\n        },\n        $options: { sort: { createdAt: -1 } },\n        assignedEmployeeId: 1,\n        createdAt: 1,\n      });\n\n      if (lastCreatedUser && lastCreatedUser.assignedEmployeeId) {\n        const index = this.employees.indexOf(lastCreatedUser.assignedEmployeeId);\n        if (index >= this.employees.length - 1) {\n          newAssignee = this.employees[0];\n        } else {\n          newAssignee = this.employees[index + 1];\n        }\n      } else {\n        // Assign the very first user\n        newAssignee = this.employees[0];\n      }\n    }\n\n    return this.update({ userId, object: { assignedEmployeeId: newAssignee } });\n  }\n}\n\nexport default new UserServiceClass({ employees: roundRobinAdvisors });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"userServerContants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/server/userServerContants.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const roundRobinAdvisors = ['lydia@e-potek.ch', 'max@e-potek.ch'];\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts-server-config.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/server/accounts-server-config.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Accounts } from 'meteor/accounts-base';\nimport pick from 'lodash/pick';\n\nAccounts.onCreateUser((options, user) => {\n  if (options.profile) {\n    return {\n      ...pick(options.profile, ['firstName', 'lastName', 'phoneNumbers']),\n      ...user,\n    };\n  }\n\n  return user;\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/server/methods.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport Analytics from 'core/api/analytics/server/Analytics';\nimport EVENTS from 'core/api/analytics/events';\nimport SecurityService from '../../security';\nimport {\n  doesUserExist,\n  sendVerificationLink,\n  assignAdminToUser,\n  assignAdminToNewUser,\n  setRole,\n  adminCreateUser,\n  updateUser,\n  getUserByPasswordResetToken,\n  testCreateUser,\n  removeUser,\n  sendEnrollmentEmail,\n  changeEmail,\n  userUpdateOrganisations,\n  testUserAccount,\n  generateApiKeyPair,\n  proInviteUser,\n  getUserByEmail,\n  setUserReferredBy,\n  setUserReferredByOrganisation,\n  proInviteUserToOrganisation,\n  proSetShareCustomers,\n  anonymousCreateUser,\n  referralExists,\n} from '../methodDefinitions';\nimport UserService from './UserService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport { ROLES } from '../userConstants';\n\ndoesUserExist.setHandler((context, { email }) =>\n  UserService.doesUserExist({ email }));\n\nsendVerificationLink.setHandler((context, { userId } = {}) => {\n  if (userId) {\n    SecurityService.checkCurrentUserIsAdmin();\n  } else {\n    SecurityService.checkLoggedIn();\n  }\n  const id = userId || Meteor.userId();\n\n  if (Meteor.isDevelopment) {\n    console.log(`Not sending verification link in development for userId: ${id}`);\n    return false;\n  }\n\n  return UserService.sendVerificationEmail({ userId: id });\n});\n\nassignAdminToUser.setHandler((context, { userId, adminId }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n\n  return UserService.assignAdminToUser({ userId, adminId });\n});\n\nassignAdminToNewUser.setHandler((context, { userId, adminId }) => {\n  // same action as assignAdminToUser, but with a dedicated\n  // listener that would complete & reassign the user's tasks\n  SecurityService.checkCurrentUserIsAdmin();\n\n  return UserService.assignAdminToUser({ userId, adminId });\n});\n\nsetRole.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setRole(params);\n});\n\nadminCreateUser.setHandler((context, { options, role }) => {\n  SecurityService.users.isAllowedToInsertByRole({ role });\n  return UserService.adminCreateUser({\n    options,\n    role,\n    adminId: context.userId,\n  });\n});\n\nupdateUser.setHandler((context, { userId, object }) => {\n  SecurityService.users.isAllowedToUpdate(userId, context.userId);\n\n  if (object.roles) {\n    SecurityService.handleUnauthorized('Vous ne pouvez pas changer le rôle');\n  }\n\n  return UserService.update({ userId, object });\n});\n\ngetUserByPasswordResetToken.setHandler((context, params) =>\n  UserService.getUserByPasswordResetToken(params));\n\ntestCreateUser.setHandler((context, params) => {\n  if (!Meteor.isTest) {\n    throw new Meteor.Error('Test only');\n  }\n  return UserService.testCreateUser(params);\n});\n\nremoveUser.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsDev();\n  UserService.remove(params);\n});\n\nsendEnrollmentEmail.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.sendEnrollmentEmail(params);\n});\n\nchangeEmail.setHandler(({ userId }, params) => {\n  SecurityService.users.isAllowedToUpdate(userId, params.userId);\n  return UserService.changeEmail(params);\n});\n\nuserUpdateOrganisations.setHandler((context, { userId, newOrganisations }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.updateOrganisations({ userId, newOrganisations });\n});\n\ntestUserAccount.setHandler((context, params) => {\n  if (Meteor.isTest) {\n    return UserService.testUserAccount(params);\n  }\n});\n\ngenerateApiKeyPair.setHandler((context, params) => {\n  SecurityService.checkUserIsPro(context.userId);\n  return UserService.generateKeyPair(params);\n});\n\nproInviteUser.setHandler((context, params) => {\n  const { userId } = context;\n  const { propertyIds, promotionIds, properties } = params;\n  SecurityService.checkUserIsPro(userId);\n\n  if (propertyIds && propertyIds.length) {\n    propertyIds.forEach(propertyId =>\n      SecurityService.properties.isAllowedToInviteCustomers({\n        userId,\n        propertyId,\n      }));\n  }\n\n  if (promotionIds && promotionIds.length) {\n    promotionIds.forEach(promotionId =>\n      SecurityService.promotions.isAllowedToInviteCustomers({\n        promotionId,\n        userId,\n      }));\n  }\n\n  if (properties && properties.length) {\n    properties.forEach(({ externalId }) => {\n      const existingProperty = PropertyService.fetchOne({\n        $filters: { externalId },\n      });\n      if (existingProperty) {\n        SecurityService.properties.isAllowedToInviteCustomers({\n          userId,\n          propertyId: existingProperty._id,\n        });\n      }\n    });\n  }\n\n  // Only pass proUserId if this is a pro user\n  const isProUser = SecurityService.hasRole(userId, ROLES.PRO);\n\n  return UserService.proInviteUser({\n    ...params,\n    proUserId: isProUser ? userId : undefined,\n    adminId: !isProUser ? userId : undefined,\n  });\n});\n\ngetUserByEmail.setHandler(({ userId }, { email }) => {\n  SecurityService.checkUserIsPro(userId);\n  const user = UserService.getByEmail(email);\n\n  if (user) {\n    return UserService.fetchOne({\n      $filters: { $and: [{ _id: user._id }, { roles: { $in: [ROLES.PRO] } }] },\n      name: 1,\n      organisations: { name: 1 },\n    });\n  }\n});\n\nsetUserReferredBy.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setReferredBy(params);\n});\n\nsetUserReferredByOrganisation.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setReferredByOrganisation(params);\n});\n\nproInviteUserToOrganisation.setHandler(({ userId }, params) => {\n  const { organisationId } = params;\n  SecurityService.checkUserIsPro(userId);\n  SecurityService.users.isAllowedToInviteUsersToOrganisation({\n    userId,\n    organisationId,\n  });\n\n  if (SecurityService.currentUserIsAdmin()) {\n    params.adminId = userId;\n  } else {\n    params.proId = userId;\n  }\n\n  return UserService.proInviteUserToOrganisation(params);\n});\n\nproSetShareCustomers.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsPro(userId);\n  return UserService.proSetShareCustomers(params);\n});\n\nanonymousCreateUser.setHandler((context, params) => {\n  if (params.loanId) {\n    SecurityService.loans.checkAnonymousLoan(params.loanId);\n  }\n\n  const userId = UserService.anonymousCreateUser(params);\n\n  const analytics = new Analytics({ ...context, userId });\n  analytics.identify(params.trackingId);\n  analytics.track(EVENTS.USER_CREATED, {\n    userId,\n    origin: params.referralId ? 'referral' : 'organic',\n    referralId: params.referralId,\n  });\n  if (params.loanId) {\n    analytics.track(EVENTS.LOAN_ANONYMOUS_LOAN_CLAIMED, {\n      loanId: params.loanId,\n    });\n  }\n\n  return userId;\n});\n\nreferralExists.setHandler((context, params) => {\n  const { ref } = params;\n  const referral = UserService.fetchOne({\n    $filters: { _id: ref, roles: { $in: [ROLES.PRO] } },\n  });\n\n  return !!referral;\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/server/hooks.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport formatNumbersHook from '../../../utils/phoneFormatting';\nimport Users from '../users';\n\nformatNumbersHook(Users, 'phoneNumbers');\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/server/exposures.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Roles } from 'meteor/alanning:roles';\nimport { Meteor } from 'meteor/meteor';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { ROLES } from '../../constants';\nimport SecurityService from '../../security';\nimport {\n  adminUsers,\n  appUser,\n  currentUser,\n  proReferredByUsers,\n  userEmails,\n  userSearch,\n  proUser,\n} from '../queries';\nimport { proReferredByUsersResolver } from './resolvers';\n\nexposeQuery({\n  query: adminUsers,\n  overrides: {\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: { roles, _id, admins, assignedEmployeeId, _userId },\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (roles) {\n          filters.roles = { $in: roles };\n        }\n\n        if (admins) {\n          const userIsDev = Roles.userIsInRole(Meteor.user(), ROLES.DEV);\n\n          if (userIsDev) {\n            filters.roles = { $in: [ROLES.ADMIN, ROLES.DEV] };\n          } else {\n            filters.roles = { $in: [ROLES.ADMIN] };\n          }\n        }\n\n        if (assignedEmployeeId) {\n          filters.assignedEmployeeId = assignedEmployeeId;\n        }\n      };\n    },\n    validateParams: {\n      roles: Match.Maybe([String]),\n      admins: Match.Maybe(Boolean),\n      assignedEmployeeId: Match.Maybe(Match.OneOf(Object, String)),\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: appUser,\n  overrides: {\n    firewall(userId, params) {\n      if (!userId) {\n        // Don't throw unauthorized error here, it causes race-conditions in E2E tests\n        // to not reload this subscription\n        // So simply set userId to an impossible id\n        params._userId = 'none';\n      }\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params }) => {\n        filters._id = params._userId;\n      };\n    },\n  },\n});\n\nexposeQuery({\n  query: currentUser,\n  overrides: {\n    firewall(userId, params) {\n      if (!userId) {\n        // Don't throw unauthorized error here, it causes race-conditions in E2E tests\n        // to not reload this subscription\n        // So simply set userId to an impossible id\n        params._userId = 'none';\n      }\n    },\n    embody: (body) => {\n      // This will deepExtend your body\n      body.$filter = ({ filters, params }) => {\n        filters._id = params._userId;\n      };\n    },\n  },\n});\n\nexposeQuery({\n  query: proReferredByUsers,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        userId: providedUserId,\n        organisationId,\n        ownReferredUsers,\n      } = params;\n\n      SecurityService.checkUserIsPro(userId);\n\n      if (providedUserId) {\n        SecurityService.checkUserIsAdmin(userId);\n        params.userId = providedUserId;\n      }\n\n      if (ownReferredUsers) {\n        params.userId = userId;\n      }\n\n      if (organisationId) {\n        SecurityService.checkUserIsAdmin(userId);\n      }\n    },\n    validateParams: {\n      userId: Match.Maybe(String),\n      organisationId: Match.Maybe(String),\n      ownReferredUsers: Match.Maybe(Boolean),\n    },\n  },\n  resolver: proReferredByUsersResolver,\n});\n\nexposeQuery({ query: userEmails, options: { allowFilterById: true } });\n\nexposeQuery({\n  query: userSearch,\n  overrides: {\n    validateParams: {\n      searchQuery: Match.Maybe(String),\n      roles: Match.Maybe([String]),\n    },\n  },\n});\n\nexposeQuery({\n  query: proUser,\n  overrides: {\n    firewall(userId, params) {},\n    embody: (body) => {\n      body.$filter = ({ filters, params }) => {\n        filters._id = params._userId;\n      };\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"resolvers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/server/resolvers.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { proUser as proUserFragment } from '../../fragments';\nimport UserService from './UserService';\n\nexport const proReferredByUsersResolver = ({\n  userId,\n  organisationId: providedOrganisationId,\n}) => {\n  let organisationId;\n  if (!providedOrganisationId) {\n    const { organisations = [] } = UserService.fetchOne({\n      $filters: { _id: userId },\n      organisations: { _id: 1 },\n    });\n    organisationId = !!organisations.length && organisations[0]._id;\n  } else {\n    organisationId = providedOrganisationId;\n  }\n\n  const users = UserService.fetch({\n    $filters: {\n      $or: [\n        userId && { referredByUserLink: userId },\n        organisationId && { referredByOrganisationLink: organisationId },\n      ].filter(x => x),\n    },\n    ...proUserFragment(),\n  });\n\n  return users;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/server/serverReducers.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Users from '..';\nimport { getEmailsForAddress } from '../../email/server/mandrill';\nimport { createMeteorAsyncFunction } from '../../helpers';\nimport assigneeReducer from '../../reducers/assigneeReducer';\n\nUsers.addReducers({\n  ...assigneeReducer(),\n  sentEmails: {\n    body: { emails: 1 },\n    reduce: user =>\n      // Simplify this to use email reducer once feature/pro is merged with grapher fixes\n      createMeteorAsyncFunction(getEmailsForAddress)(user.emails[0].address),\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/links.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Users from './users';\nimport {\n  Loans,\n  Offers,\n  Borrowers,\n  Properties,\n  Promotions,\n  Contacts,\n  Organisations,\n  Tasks,\n} from '..';\n\nconst assignedEmployeeCache = {\n  _id: 1,\n  firstName: 1,\n  lastName: 1,\n};\n\nUsers.addLinks({\n  assignedEmployee: {\n    collection: Users,\n    field: 'assignedEmployeeId',\n    type: 'one',\n    denormalize: {\n      field: 'assignedEmployeeCache',\n      body: assignedEmployeeCache,\n    },\n  },\n  assignedEndUsers: {\n    collection: Users,\n    inversedBy: 'assignedEmployee',\n  },\n  assignedPromotions: {\n    collection: Promotions,\n    inversedBy: 'assignedEmployee',\n  },\n  assignedTasks: {\n    collection: Tasks,\n    inversedBy: 'assignee',\n  },\n  borrowers: {\n    collection: Borrowers,\n    inversedBy: 'user',\n    autoremove: true,\n  },\n  contact: {\n    collection: Contacts,\n    inversedBy: 'user',\n  },\n  loans: {\n    collection: Loans,\n    inversedBy: 'user',\n    autoremove: true,\n  },\n  promotions: {\n    collection: Promotions,\n    inversedBy: 'users',\n  },\n  properties: {\n    collection: Properties,\n    inversedBy: 'user',\n    autoremove: true,\n  },\n  offers: {\n    collection: Offers,\n    inversedBy: 'user',\n  },\n  organisations: {\n    collection: Organisations,\n    inversedBy: 'users',\n  },\n  proProperties: {\n    collection: Properties,\n    inversedBy: 'users',\n  },\n  referredByUser: {\n    collection: Users,\n    field: 'referredByUserLink',\n    type: 'one',\n  },\n  referredCustomers: {\n    collection: Users,\n    inversedBy: 'referredByUser',\n    type: 'many',\n  },\n  referredByOrganisation: {\n    collection: Organisations,\n    field: 'referredByOrganisationLink',\n    type: 'one',\n  },\n  tasks: {\n    collection: Tasks,\n    inversedBy: 'user',\n    autoremove: true,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/reducers.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { getUserDisplayName } from 'core/utils/userFunctions';\nimport Users from './users';\n\nUsers.addReducers({\n  email: {\n    body: {\n      emails: 1,\n    },\n    reduce: ({ emails }) => emails && emails.length && emails[0].address,\n  },\n  name: {\n    body: { firstName: 1, lastName: 1, emails: 1 },\n    reduce: getUserDisplayName,\n  },\n  phoneNumber: {\n    body: {\n      phoneNumbers: 1,\n    },\n    reduce: ({ phoneNumbers = [] }) =>\n      (!!phoneNumbers.length && phoneNumbers[0]) || '',\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/users/queries.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport {\n  createRegexQuery,\n  generateMatchAnyWordRegexp,\n} from '../helpers/mongoHelpers';\nimport {\n  adminUser,\n  appUser as appUserFragment,\n  fullUser,\n  proUser as proUserFragment,\n} from '../fragments';\n\nimport { USER_QUERIES } from './userConstants';\nimport Users from '.';\n\nexport const adminUsers = Users.createQuery(\n  USER_QUERIES.ADMIN_USERS,\n  adminUser(),\n);\n\nexport const appUser = Users.createQuery(\n  USER_QUERIES.APP_USER,\n  appUserFragment(),\n  { scoped: true },\n);\n\nexport const currentUser = Users.createQuery(\n  USER_QUERIES.CURRENT_USER,\n  fullUser(),\n  { scoped: true },\n);\n\nexport const proReferredByUsers = Users.createQuery(\n  USER_QUERIES.PRO_REFERRED_BY,\n  () => {},\n);\n\nexport const proUser = Users.createQuery(\n  USER_QUERIES.PRO_USER,\n  proUserFragment(),\n);\n\nexport const userEmails = Users.createQuery(USER_QUERIES.USER_EMAILS, {\n  $filter({ filters, params: { _id } }) {\n    filters._id = _id;\n  },\n  sentEmails: 1,\n});\n\nexport const userSearch = Users.createQuery(USER_QUERIES.USER_SEARCH, {\n  $filter({ filters, params: { searchQuery, roles } }) {\n    const formattedSearchQuery = generateMatchAnyWordRegexp(searchQuery);\n    if (roles) {\n      filters.roles = { $in: roles };\n    }\n    filters.$or = [\n      createRegexQuery('_id', searchQuery),\n      createRegexQuery('emails.0.address', searchQuery),\n      createRegexQuery('firstName', searchQuery),\n      createRegexQuery('lastName', searchQuery),\n      {\n        $and: [\n          createRegexQuery('firstName', formattedSearchQuery),\n          createRegexQuery('lastName', formattedSearchQuery),\n        ],\n      },\n    ];\n  },\n  assignedEmployee: { name: 1 },\n  createdAt: 1,\n  email: 1,\n  loans: { name: 1 },\n  name: 1,\n  organisations: { name: 1 },\n  roles: 1,\n  $options: { limit: 5 },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"interestRates\":{\"interestRatesConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/interestRates/interestRatesConstants.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const INTEREST_TREND = {\n  UP: 'UP',\n  DOWN: 'DOWN',\n};\n\nexport const INTEREST_RATES_COLLECTION = 'interestRates';\n\nexport const TRENDS = {\n  UP: 'UP',\n  DOWN: 'DOWN',\n  FLAT: 'FLAT',\n};\n\nexport const INTEREST_RATES = {\n  LIBOR: 'interestLibor',\n  YEARS_1: 'interest1',\n  YEARS_2: 'interest2',\n  YEARS_5: 'interest5',\n  YEARS_10: 'interest10',\n  YEARS_15: 'interest15',\n  YEARS_20: 'interest20',\n  YEARS_25: 'interest25',\n};\n\nexport const INTEREST_RATES_QUERIES = {\n  INTEREST_RATES: 'INTEREST_RATES',\n  CURRENT_INTEREST_RATES: 'CURRENT_INTEREST_RATES',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"interestRatesSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/interestRates/schemas/interestRatesSchema.js                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\nimport {\n  createdAt,\n  updatedAt,\n  percentageField,\n} from '../../helpers/sharedSchemas';\nimport { TRENDS, INTEREST_RATES } from '../interestRatesConstants';\n\nconst singleInterestRate = type => ({\n  [type]: { type: Object, optional: true, defaultValue: {} },\n  [`${type}.rateLow`]: percentageField,\n  [`${type}.rateHigh`]: percentageField,\n  [`${type}.trend`]: {\n    type: String,\n    allowedValues: Object.values(TRENDS),\n    optional: true,\n  },\n});\n\nconst rates = Object.values(INTEREST_RATES).reduce(\n  (interestRates, type) => ({ ...interestRates, ...singleInterestRate(type) }),\n  {},\n);\n\nconst InterestRatesSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  date: Date,\n  ...rates,\n});\n\nexport default InterestRatesSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/interestRates/index.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './interestRates';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/interestRates/methodDefinitions.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Method } from '../methods/methods';\n\nexport const interestRatesInsert = new Method({\n  name: 'interestRatesInsert',\n  params: {\n    interestRates: Object,\n  },\n});\n\nexport const interestRatesRemove = new Method({\n  name: 'interestRatesRemove',\n  params: {\n    interestRatesId: String,\n  },\n});\n\nexport const interestRatesUpdate = new Method({\n  name: 'interestRatesUpdate',\n  params: {\n    interestRatesId: String,\n    object: Object,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"interestRates.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/interestRates/interestRates.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport InterestRatesSchema from './schemas/interestRatesSchema';\nimport { INTEREST_RATES_COLLECTION } from './interestRatesConstants';\n\nconst InterestRates = new Mongo.Collection(INTEREST_RATES_COLLECTION);\n\nInterestRates.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nInterestRates.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nInterestRates.attachSchema(InterestRatesSchema);\nexport default InterestRates;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"InterestRatesService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/interestRates/server/InterestRatesService.js                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport InterestRates from '../interestRates';\nimport CollectionService from '../../helpers/CollectionService';\n\nclass InterestRatesService extends CollectionService {\n  constructor() {\n    super(InterestRates);\n  }\n}\n\nexport default new InterestRatesService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/interestRates/server/methods.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport InterestRatesService from './InterestRatesService';\nimport {\n  interestRatesInsert,\n  interestRatesRemove,\n  interestRatesUpdate,\n} from '../methodDefinitions';\n\ninterestRatesInsert.setHandler((context, { interestRates }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return InterestRatesService.insert(interestRates);\n});\n\ninterestRatesRemove.setHandler((context, { interestRatesId }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return InterestRatesService.remove(interestRatesId);\n});\n\ninterestRatesUpdate.setHandler((context, { interestRatesId, object }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return InterestRatesService._update({ id: interestRatesId, object });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/interestRates/server/exposures.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport moment from 'moment';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { currentInterestRates, interestRates } from '../queries';\nimport { INTEREST_RATES } from '../interestRatesConstants';\n\nexposeQuery({\n  query: currentInterestRates,\n  overrides: {\n    firewall(userId) {},\n    embody(body) {\n      body.$filter = ({ filters }) => {\n        filters.date = { $lte: moment().toDate() };\n      };\n      body.$options = { sort: { date: -1 }, limit: 1 };\n    },\n  },\n});\n\nexposeQuery({\n  query: interestRates,\n  options: { allowFilterById: true },\n  overrides: {\n    firewall(userId) {},\n    embody(body) {\n      body.$postFilter = (rates = []) =>\n        rates.map((rate) => {\n          const { _id, date } = rate;\n          return Object.values(INTEREST_RATES).reduce(\n            (formattedRate, key) => ({\n              ...formattedRate,\n              [key]: rate[key] || {},\n            }),\n            { _id, date },\n          );\n        });\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"fakes.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/interestRates/fakes.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { TRENDS } from './interestRatesConstants';\n\nconst randInArray = array => array[Math.floor(Math.random() * array.length)];\n\nexport const getRandomInterestRate = (mean) => {\n  const rateLow = (mean - Math.random() * 0.2) / 100;\n  const rateHigh = (mean + Math.random() * 0.2) / 100;\n  const trend = randInArray(Object.values(TRENDS));\n  return { rateLow, rateHigh, trend };\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/interestRates/queries.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport {\n  currentInterestRates as currentInterestRatesFragment,\n  interestRates as interestRatesFragment,\n} from '../fragments';\nimport InterestRates from '.';\nimport {\n  INTEREST_RATES_QUERIES,\n  INTEREST_RATES,\n} from './interestRatesConstants';\n\nconst makeCheckIsRate = rates => type =>\n  rates[type].rateLow && rates[type].rateHigh && rates[type].trend;\n\nconst makeFormatRate = rates => type => ({\n  type,\n  rateLow: rates[type].rateLow,\n  rateHigh: rates[type].rateHigh,\n  trend: rates[type].trend,\n});\n\nconst sortRates = ({ type: a }, { type: b }) =>\n  Object.values(INTEREST_RATES).indexOf(a)\n  - Object.values(INTEREST_RATES).indexOf(b);\n\nconst getAverageRates = rates =>\n  rates.reduce(\n    (avgRates, { type, rateLow, rateHigh }) => ({\n      ...avgRates,\n      [type]: (rateLow + rateHigh) / 2,\n    }),\n    {},\n  );\n\nexport const currentInterestRates = InterestRates.createQuery(\n  INTEREST_RATES_QUERIES.CURRENT_INTEREST_RATES,\n  {\n    $postFilter(results) {\n      const interestRates = results.length > 0 && results[0];\n      const cleanedRates = Object.keys(interestRates)\n        .filter(makeCheckIsRate(interestRates))\n        .map(makeFormatRate(interestRates))\n        .sort(sortRates);\n      const averageRates = getAverageRates(cleanedRates);\n\n      return { rates: cleanedRates, averageRates, date: interestRates.date };\n    },\n    ...currentInterestRatesFragment(),\n  },\n);\n\nexport const interestRates = InterestRates.createQuery(\n  INTEREST_RATES_QUERIES.INTEREST_RATES,\n  {\n    ...interestRatesFragment(),\n    $options: { sort: { date: -1 } },\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"irs10y\":{\"irs10yConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/irs10y/irs10yConstants.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const IRS10Y_COLLECTION = 'irs10y';\n\nexport const IRS10Y_QUERIES = {\n  IRS10Y: 'IRS10Y',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"irs10ySchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/irs10y/schemas/irs10ySchema.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\nimport {\n  createdAt,\n  updatedAt,\n  percentageField,\n} from '../../helpers/sharedSchemas';\n\nconst Irs10ySchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  date: Date,\n  rate: { ...percentageField, optional: false },\n});\n\nexport default Irs10ySchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/irs10y/index.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './irs10y';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/irs10y/methodDefinitions.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Method } from '../methods/methods';\n\nexport const irs10yInsert = new Method({\n  name: 'irs10yInsert',\n  params: {\n    irs10y: Object,\n  },\n});\n\nexport const irs10yRemove = new Method({\n  name: 'irs10yRemove',\n  params: {\n    irs10yId: String,\n  },\n});\n\nexport const irs10yUpdate = new Method({\n  name: 'irs10yUpdate',\n  params: {\n    irs10yId: String,\n    object: Object,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"irs10y.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/irs10y/irs10y.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport Irs10ySchema from './schemas/irs10ySchema';\nimport { IRS10Y_COLLECTION } from './irs10yConstants';\n\nconst Irs10y = new Mongo.Collection(IRS10Y_COLLECTION);\n\nIrs10y.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nIrs10y.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nIrs10y.attachSchema(Irs10ySchema);\nexport default Irs10y;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/irs10y/server/methods.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Method } from '../../methods/methods';\nimport SecurityService from '../../security';\nimport { irs10yInsert, irs10yRemove, irs10yUpdate } from '../methodDefinitions';\nimport Irs10yService from './Irs10yService';\nimport { fetchIrs10y } from './fetchIrs10y';\n\nirs10yInsert.setHandler((context, { irs10y }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return Irs10yService.insert(irs10y);\n});\n\nirs10yRemove.setHandler((context, { irs10yId }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return Irs10yService.remove(irs10yId);\n});\n\nirs10yUpdate.setHandler((context, { irs10yId, object }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return Irs10yService._update({ id: irs10yId, object });\n});\n\nexport const irs10yFetch = new Method({\n  name: 'irs10yFetch',\n});\n\nirs10yFetch.setHandler(() =>\n  fetchIrs10y()\n    .then((irs10y) => {\n      Irs10yService.insert({ date: new Date(), rate: irs10y });\n      return { rate: irs10y };\n    })\n    .catch((error) => {\n      throw error;\n    }));\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Irs10yService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/irs10y/server/Irs10yService.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport Irs10y from '../irs10y';\nimport CollectionService from '../../helpers/CollectionService';\n\nclass Irs10yService extends CollectionService {\n  constructor() {\n    super(Irs10y);\n  }\n\n  insert({ date, rate }) {\n    const start = new Date(date);\n    start.setHours(0, 0, 0, 0);\n\n    const end = new Date(date);\n    end.setHours(23, 59, 59, 999);\n\n    const existingFromToday = this.find({\n      date: { $gte: start, $lt: end },\n    }).fetch();\n\n    if (!existingFromToday || existingFromToday.length === 0) {\n      return super.insert({ date, rate });\n    }\n\n    throw new Meteor.Error('Un taux existe déjà pour cette date');\n  }\n}\n\nexport default new Irs10yService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"fetchIrs10y.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/irs10y/server/fetchIrs10y.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nconst cheerio = require('cheerio');\nconst request = require('request');\n\nconst URL = 'https://kurse.vermoegenszentrum.ch/vermoegenszentrum/details/details.jsp?listingId=211372,433,1';\n\nexport const fetchIrs10y = () =>\n  new Promise((resolve, reject) => {\n    request(URL, (error, response, html) => {\n      if (!error && response.statusCode === 200) {\n        const $ = cheerio.load(html);\n        let result = $('.kum-bht-value').text();\n        result = result.split('%')[0] / 100;\n        resolve(result);\n      }\n      reject(new Meteor.Error(error));\n    });\n  });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/irs10y/server/exposures.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { irs10y } from '../queries';\n\nexposeQuery({ query: irs10y, options: { allowFilterById: true } });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/irs10y/queries.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { irs10y as irs10yFragment } from '../fragments';\nimport { IRS10Y_QUERIES } from './irs10yConstants';\nimport Irs10y from '.';\n\nexport const irs10y = Irs10y.createQuery(IRS10Y_QUERIES.IRS10Y, {\n  ...irs10yFragment(),\n  $options: { sort: { date: -1 } },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"mortgageNotes\":{\"mortgageNoteConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/mortgageNotes/mortgageNoteConstants.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const MORTGAGE_NOTES_COLLECTION = 'mortgageNotes';\n\nexport const MORTGAGE_NOTES_QUERIES = {\n// Insert your queries name here\n// Example:\n// EXAMPLE_QUERIE: 'EXAMPLE_QUERIE',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"MortgageNoteSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/mortgageNotes/schemas/MortgageNoteSchema.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\nimport { createdAt, updatedAt, moneyField } from '../../helpers/sharedSchemas';\nimport {\n  CANTONS,\n  MORTGAGE_NOTE_TYPES,\n  MORTGAGE_NOTE_CATEGORIES,\n} from '../../constants';\n\nconst MortgageNoteSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  value: moneyField,\n  rank: { type: Number, min: 0, max: 10, optional: true },\n  type: {\n    type: String,\n    allowedValues: Object.values(MORTGAGE_NOTE_TYPES),\n    optional: true,\n    uniforms: { placeholder: null },\n  },\n  category: {\n    type: String,\n    allowedValues: Object.values(MORTGAGE_NOTE_CATEGORIES),\n    optional: true,\n    uniforms: { placeholder: null },\n  },\n  canton: {\n    type: String,\n    allowedValues: Object.keys(CANTONS),\n    optional: true,\n    uniforms: { placeholder: null },\n  },\n});\n\nexport default MortgageNoteSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/mortgageNotes/index.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './mortgageNotes';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/mortgageNotes/methodDefinitions.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { Method } from '../methods/methods';\n\nexport const mortgageNoteInsert = new Method({\n  name: 'mortgageNoteInsert',\n  params: {\n    mortgageNote: Match.Optional(Object),\n    propertyId: Match.Optional(String),\n    borrowerId: Match.Optional(String),\n  },\n});\n\nexport const mortgageNoteRemove = new Method({\n  name: 'mortgageNoteRemove',\n  params: {\n    mortgageNoteId: String,\n  },\n});\n\nexport const mortgageNoteUpdate = new Method({\n  name: 'mortgageNoteUpdate',\n  params: {\n    mortgageNoteId: String,\n    object: Object,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"mortgageNotes.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/mortgageNotes/mortgageNotes.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport MortgageNoteSchema from './schemas/MortgageNoteSchema';\nimport { MORTGAGE_NOTES_COLLECTION } from './mortgageNoteConstants';\n\nconst MortgageNotes = new Mongo.Collection(MORTGAGE_NOTES_COLLECTION);\n\nMortgageNotes.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nMortgageNotes.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nMortgageNotes.attachSchema(MortgageNoteSchema);\nexport default MortgageNotes;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/mortgageNotes/server/methods.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport {\n  mortgageNoteInsert,\n  mortgageNoteRemove,\n  mortgageNoteUpdate,\n} from '../methodDefinitions';\nimport MortgageNoteService from './MortgageNoteService';\n\nmortgageNoteInsert.setHandler(({ userId }, params) => {\n  if (params.propertyId) {\n    SecurityService.properties.isAllowedToUpdate(params.propertyId, userId);\n  }\n  if (params.borrowerId) {\n    SecurityService.borrowers.isAllowedToUpdate(params.borrowerId, userId);\n  }\n  MortgageNoteService.insert(params);\n});\n\nmortgageNoteRemove.setHandler(({ userId }, { mortgageNoteId }) => {\n  const { borrower, property } = MortgageNoteService.fetchOne({\n    $filters: { _id: mortgageNoteId },\n  });\n  if (property) {\n    SecurityService.properties.isAllowedToUpdate(property._id, userId);\n  }\n  if (borrower) {\n    SecurityService.borrowers.isAllowedToUpdate(borrower._id, userId);\n  }\n\n  return MortgageNoteService.remove(mortgageNoteId);\n});\n\nmortgageNoteUpdate.setHandler(({ userId }, { mortgageNoteId, object }) => {\n  const { borrower, property } = MortgageNoteService.fetchOne({\n    $filters: { _id: mortgageNoteId },\n    borrower: { _id: 1 },\n    property: { _id: 1 },\n  });\n  if (property) {\n    SecurityService.properties.isAllowedToUpdate(property._id, userId);\n  }\n  if (borrower) {\n    SecurityService.borrowers.isAllowedToUpdate(borrower._id, userId);\n  }\n\n  return MortgageNoteService._update({ id: mortgageNoteId, object });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MortgageNoteService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/mortgageNotes/server/MortgageNoteService.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport MortgageNotes from '../mortgageNotes';\nimport CollectionService from '../../helpers/CollectionService';\n\nclass MortgageNoteService extends CollectionService {\n  constructor() {\n    super(MortgageNotes);\n  }\n\n  insert({ mortgageNote = {}, propertyId, borrowerId }) {\n    if (!borrowerId && !propertyId) {\n      throw new Meteor.Error('Une cédule doit être liée à un emprunteur ou bien immo');\n    }\n\n    const id = super.insert(mortgageNote);\n\n    if (borrowerId) {\n      this.addLink({ id, linkName: 'borrower', linkId: borrowerId });\n    }\n    if (propertyId) {\n      this.addLink({ id, linkName: 'property', linkId: propertyId });\n    }\n\n    return id;\n  }\n}\n\nexport default new MortgageNoteService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/mortgageNotes/server/hooks.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport BorrowerService from '../../borrowers/server/BorrowerService';\nimport MortgageNotes from '../mortgageNotes';\nimport MortgageNoteService from './MortgageNoteService';\n\nMortgageNotes.before.remove((userId, { _id: mortgageNoteId }) => {\n  const { borrower } = MortgageNoteService.fetchOne({\n    $filters: { _id: mortgageNoteId },\n    borrower: { _id: 1 },\n  });\n\n  if (borrower) {\n    BorrowerService.cleanUpMortgageNotes({ borrowerId: borrower._id });\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/mortgageNotes/links.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport MortgageNotes from '.';\nimport { Borrowers, Properties } from '..';\n\n// If you want to use links, don't forget to import this file in 'core/api/links.js'\n\nMortgageNotes.addLinks({\n  borrower: {\n    collection: Borrowers,\n    inversedBy: 'mortgageNotes',\n  },\n  property: {\n    collection: Properties,\n    inversedBy: 'mortgageNotes',\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"contacts\":{\"contactsConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/contactsConstants.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const CONTACTS_COLLECTION = 'contacts';\n\nexport const CONTACTS_QUERIES = {\n  ADMIN_CONTACTS: 'ADMIN_CONTACTS',\n  CONTACT_SEARCH: 'CONTACT_SEARCH',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"contactSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/schemas/contactSchema.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\nimport { createdAt, updatedAt, address } from '../../helpers/sharedSchemas';\n\nconst ContactSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  firstName: String,\n  lastName: String,\n  ...address,\n  emails: { type: Array, optional: true },\n  'emails.$': Object,\n  'emails.$.address': { type: String, regEx: SimpleSchema.RegEx.Email },\n  phoneNumbers: { type: Array, optional: true },\n  'phoneNumbers.$': String,\n  userLink: { type: String, optional: true },\n});\n\nexport default ContactSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/index.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './contacts';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/methodDefinitions.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Method } from '../methods/methods';\n\nexport const contactInsert = new Method({\n  name: 'contactInsert',\n  params: {\n    contact: Object,\n  },\n});\n\nexport const contactRemove = new Method({\n  name: 'contactRemove',\n  params: {\n    contactId: String,\n  },\n});\n\nexport const contactUpdate = new Method({\n  name: 'contactUpdate',\n  params: {\n    contactId: String,\n    object: Object,\n  },\n});\n\nexport const contactChangeOrganisations = new Method({\n  name: 'contactChangeOrganisations',\n  params: {\n    contactId: String,\n    newOrganisations: Array,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"contacts.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/contacts.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport ContactSchema from './schemas/contactSchema';\nimport { CONTACTS_COLLECTION } from './contactsConstants';\n\nconst Contacts = new Mongo.Collection(CONTACTS_COLLECTION);\n\nContacts.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nContacts.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nContacts.attachSchema(ContactSchema);\nexport default Contacts;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"ContactService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/server/ContactService.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Contacts from '../contacts';\nimport CollectionService from '../../helpers/CollectionService';\nimport { contact } from '../../fragments';\n\nclass ContactService extends CollectionService {\n  constructor() {\n    super(Contacts);\n  }\n\n  get(contactId) {\n    return this.fetchOne({\n      $filters: { _id: contactId },\n      ...contact(),\n    });\n  }\n\n  changeOrganisations({ contactId, newOrganisations = [] }) {\n    const { organisations: oldOrganisations = [] } = this.get(contactId);\n\n    oldOrganisations.forEach(({ _id: organisationId }) =>\n      this.removeLink({\n        id: contactId,\n        linkName: 'organisations',\n        linkId: organisationId,\n      }));\n\n    newOrganisations.forEach(({ _id: organisationId, metadata }) =>\n      this.addLink({\n        id: contactId,\n        linkName: 'organisations',\n        linkId: organisationId,\n        metadata,\n      }));\n  }\n}\n\nexport default new ContactService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/server/methods.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport {\n  contactInsert,\n  contactRemove,\n  contactUpdate,\n  contactChangeOrganisations,\n} from '../methodDefinitions';\nimport ContactService from './ContactService';\n\ncontactInsert.setHandler((context, { contact }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return ContactService.insert(contact);\n});\n\ncontactRemove.setHandler((context, { contactId }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return ContactService.remove(contactId);\n});\n\ncontactUpdate.setHandler((context, { contactId, object }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return ContactService._update({ id: contactId, object });\n});\n\ncontactChangeOrganisations.setHandler((context, { contactId, newOrganisations }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return ContactService.changeOrganisations({ contactId, newOrganisations });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/server/hooks.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport formatNumbersHook from '../../../utils/phoneFormatting';\nimport Contacts from '../contacts';\n\nformatNumbersHook(Contacts, 'phoneNumbers');\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/server/exposures.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { adminContacts, contactSearch } from '../queries';\n\nexposeQuery({ query: adminContacts, options: { allowFilterById: true } });\n\nexposeQuery({\n  query: contactSearch,\n  overrides: { validateParams: { searchQuery: Match.Maybe(String) } },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/server/serverReducers.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Contacts from '../contacts';\nimport tasksReducer from '../../reducers/tasksReducer';\n\nContacts.addReducers({\n  ...tasksReducer,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/links.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Contacts from '.';\n\nimport { Users, Organisations, Lenders, Offers } from '..';\n\nContacts.addLinks({\n  user: {\n    collection: Users,\n    field: 'userLink',\n    type: 'one',\n    metadata: true,\n  },\n  organisations: {\n    collection: Organisations,\n    inversedBy: 'contacts',\n  },\n  lenders: {\n    collection: Lenders,\n    inversedBy: 'contact',\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/reducers.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport addressReducer from '../reducers/addressReducer';\nimport Contacts from './contacts';\nimport { fullOffer } from '../fragments';\n\nContacts.addReducers({\n  name: {\n    body: {\n      firstName: 1,\n      lastName: 1,\n    },\n    reduce: ({ firstName, lastName }) =>\n      [firstName, lastName].filter(x => x).join(' '),\n  },\n  email: {\n    body: {\n      emails: 1,\n    },\n    reduce: ({ emails }) => emails && !!emails.length && emails[0].address,\n  },\n  phoneNumber: {\n    body: {\n      phoneNumbers: 1,\n    },\n    reduce: ({ phoneNumbers }) =>\n      phoneNumbers && !!phoneNumbers.length && phoneNumbers[0],\n  },\n  offers: {\n    body: {\n      lenders: { offers: fullOffer() },\n    },\n    reduce: ({ lenders = [] }) => {\n      const contactOffers = lenders.reduce(\n        (allOffers, { offers = [] }) => [...allOffers, ...offers],\n        [],\n      );\n      return contactOffers;\n    },\n  },\n  ...addressReducer,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/contacts/queries.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport {\n  generateMatchAnyWordRegexp,\n  createRegexQuery,\n} from '../helpers/mongoHelpers';\nimport { contact } from '../fragments';\nimport { CONTACTS_QUERIES } from './contactsConstants';\nimport Contacts from '.';\n\nexport const adminContacts = Contacts.createQuery(\n  CONTACTS_QUERIES.ADMIN_CONTACTS,\n  contact(),\n);\n\nexport const contactSearch = Contacts.createQuery(\n  CONTACTS_QUERIES.CONTACT_SEARCH,\n  {\n    $filter({ filters, params: { searchQuery } }) {\n      const formattedSearchQuery = generateMatchAnyWordRegexp(searchQuery);\n\n      filters.$or = [\n        createRegexQuery('_id', searchQuery),\n        createRegexQuery('firstName', searchQuery),\n        createRegexQuery('lastName', searchQuery),\n        {\n          $and: [\n            createRegexQuery('firstName', formattedSearchQuery),\n            createRegexQuery('lastName', formattedSearchQuery),\n          ],\n        },\n      ];\n    },\n    name: 1,\n    organisations: { name: 1 },\n    $options: { sort: { createdAt: -1 }, limit: 5 },\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lenders\":{\"lenderConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenders/lenderConstants.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const LENDERS_COLLECTION = 'lenders';\n\nexport const LENDERS_QUERIES = {\n  LOAN_LENDERS: 'LOAN_LENDERS',\n};\n\nexport const LENDER_STATUS = {\n  TO_BE_CONTACTED: 'TO_BE_CONTACTED',\n  CONTACTED: 'CONTACTED',\n  OFFER_RECEIVED: 'OFFER_RECEIVED',\n  TO_EXCLUDE: 'TO_EXCLUDE',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"lenderSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenders/schemas/lenderSchema.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\nimport { createdAt, updatedAt } from '../../helpers/sharedSchemas';\nimport { LENDER_STATUS } from '../lenderConstants';\n\nconst LenderSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  status: {\n    type: String,\n    allowedValues: Object.values(LENDER_STATUS),\n    defaultValue: LENDER_STATUS.TO_BE_CONTACTED,\n  },\n  contactLink: { type: Object, optional: true },\n  'contactLink._id': { type: String, optional: true },\n  organisationLink: { type: Object, optional: true },\n  'organisationLink._id': { type: String, optional: true },\n  loanLink: { type: Object, optional: true },\n  'loanLink._id': { type: String, optional: true },\n  adminNote: { type: String, optional: true },\n});\n\nexport default LenderSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenders/index.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './lenders';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenders/methodDefinitions.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const lenderInsert = new Method({\n  name: 'lenderInsert',\n  params: {\n    lender: Object,\n    organisationId: String,\n    contactId: Match.OneOf(String, null),\n  },\n});\n\nexport const lenderRemove = new Method({\n  name: 'lenderRemove',\n  params: {\n    lenderId: String,\n  },\n});\n\nexport const lenderUpdate = new Method({\n  name: 'lenderUpdate',\n  params: {\n    lenderId: String,\n    object: Object,\n  },\n});\n\nexport const lenderLinkOrganisationAndContact = new Method({\n  name: 'lenderLinkOrganisationAndContact',\n  params: {\n    lenderId: String,\n    organisationId: Match.OneOf(String, null),\n    contactId: Match.OneOf(String, null),\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lenders.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenders/lenders.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport LenderSchema from './schemas/lenderSchema';\nimport { LENDERS_COLLECTION } from './lenderConstants';\n\nconst Lenders = new Mongo.Collection(LENDERS_COLLECTION);\n\nLenders.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nLenders.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nLenders.attachSchema(LenderSchema);\nexport default Lenders;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"LenderService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenders/server/LenderService.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport Lenders from '../lenders';\nimport CollectionService from '../../helpers/CollectionService';\nimport OrganisationService from '../../organisations/server/OrganisationService';\n\nclass LenderService extends CollectionService {\n  constructor() {\n    super(Lenders);\n  }\n\n  insert({ lender, contactId, organisationId }) {\n    const { loanId, ...data } = lender;\n\n    const existingLender = this.fetchOne({\n      $filters: {\n        'loanLink._id': loanId,\n        'organisationLink._id': organisationId,\n      },\n      organisationLink: 1,\n      loanLink: 1,\n    });\n\n    if (existingLender) {\n      throw new Meteor.Error('Peut pas ajouter le même prêteur 2 fois');\n    }\n\n    const lenderId = super.insert(data);\n    this.addLink({ id: lenderId, linkName: 'loan', linkId: loanId });\n\n    // If no contact is set, fetch first contact of organisation\n    if (!contactId && organisationId) {\n      const { contacts } = OrganisationService.fetchOne({\n        $filters: { _id: organisationId },\n        contacts: { _id: 1 },\n      });\n\n      if (contacts && contacts.length > 0) {\n        contactId = contacts[0]._id;\n      }\n    }\n\n    this.linkOrganisationAndContact({ lenderId, organisationId, contactId });\n    return lenderId;\n  }\n\n  linkOrganisationAndContact({ lenderId, organisationId, contactId }) {\n    if (organisationId) {\n      this.addLink({\n        id: lenderId,\n        linkName: 'organisation',\n        linkId: organisationId,\n      });\n    }\n    if (contactId) {\n      this.addLink({\n        id: lenderId,\n        linkName: 'contact',\n        linkId: contactId,\n      });\n    } else {\n      this.removeLink({ id: lenderId, linkName: 'contact' });\n    }\n  }\n\n  remove({ lenderId }) {\n    super.remove(lenderId);\n  }\n}\n\nexport default new LenderService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenders/server/methods.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport {\n  lenderInsert,\n  lenderRemove,\n  lenderUpdate,\n  lenderLinkOrganisationAndContact,\n} from '../methodDefinitions';\nimport LenderService from './LenderService';\n\nlenderInsert.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LenderService.insert(params);\n});\n\nlenderRemove.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LenderService.remove(params);\n});\n\nlenderUpdate.setHandler((context, { lenderId, object }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LenderService._update({ id: lenderId, object });\n});\n\nlenderLinkOrganisationAndContact.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LenderService.linkOrganisationAndContact(params);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenders/server/exposures.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\nimport { loanLenders } from '../queries';\n\nexposeQuery({\n  query: loanLenders,\n  overrides: {\n    firewall(userId, { loanId }) {\n      if (!SecurityService.isUserAdmin(userId)) {\n        SecurityService.loans.isAllowedToUpdate(loanId);\n      }\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params }) => {\n        filters['loanLink._id'] = params.loanId;\n      };\n    },\n    validateParams: { loanId: String },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenders/links.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Lenders from '.';\nimport { Contacts, Organisations, Loans, Offers } from '..';\nimport Tasks from '../tasks';\n\nLenders.addLinks({\n  contact: {\n    field: 'contactLink',\n    collection: Contacts,\n    type: 'one',\n    metadata: true,\n  },\n  organisation: {\n    field: 'organisationLink',\n    collection: Organisations,\n    type: 'one',\n    metadata: true,\n  },\n  loan: {\n    field: 'loanLink',\n    collection: Loans,\n    type: 'one',\n    metadata: true,\n  },\n  offers: {\n    collection: Offers,\n    inversedBy: 'lender',\n    autoremove: true,\n  },\n  tasks: {\n    inversedBy: 'lender',\n    collection: Tasks,\n    autoremove: true,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenders/queries.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { lender } from '../fragments';\nimport { LENDERS_QUERIES } from './lenderConstants';\nimport Lenders from '.';\n\nexport const loanLenders = Lenders.createQuery(LENDERS_QUERIES.LOAN_LENDERS, {\n  ...lender(),\n  $options: { sort: { createdAt: -1 } },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lenderRules\":{\"lenderRulesConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/lenderRulesConstants.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { BONUS_ALGORITHMS } from 'core/config/financeConstants';\nimport { RESIDENCE_TYPE } from '../properties/propertyConstants';\nimport { EXPENSES } from '../borrowers/borrowerConstants';\n\nexport const LENDER_RULES_COLLECTION = 'lenderRules';\n\nexport const LENDER_RULES_QUERIES = {\n  ORGANISATION_LENDER_RULES: 'ORGANISATION_LENDER_RULES',\n};\n\nexport const INCOME_CONSIDERATION_TYPES = {\n  GROSS: 'GROSS',\n  NET: 'NET',\n};\n\nexport const REAL_ESTATE_CONSIDERATION_TYPES = {\n  ADD_TO_INCOME: 'ADD_TO_INCOME',\n  SUBTRACT_FROM_EXPENSES: 'SUBTRACT_FROM_EXPENSES',\n};\n\nexport const EXPENSES_CONSIDERATION_TYPES = {\n  SUBTRACT_FROM_INCOME: 'SUBTRACT_FROM_INCOME',\n  ADD_TO_EXPENSES: 'ADD_TO_EXPENSES',\n};\n\nexport const LENDER_RULES_VARIABLES = {\n  INCOME: 'income',\n  RESIDENCE_TYPE: 'residenceType',\n  CANTON: 'canton',\n  BORROW_RATIO: 'borrowRatio',\n  WANTED_LOAN: 'wantedLoan',\n  PROPERTY_VALUE: 'propertyValue',\n  INSIDE_AREA: 'insideArea',\n  BANK_FORTUNE: 'bankFortune',\n  PROPERTY_TYPE: 'propertyType',\n  ZIP_CODE: 'zipCode',\n  REMAINING_BANK_FORTUNE: 'remainingBankFortune',\n};\n\nexport const LENDER_RULES_OPERATORS = {\n  EQUALS: '===',\n  MORE_THAN: '>',\n  MORE_THAN_OR_EQUAL: '>=',\n  LESS_THAN: '<',\n  LESS_THAN_OR_EQUAL: '<=',\n  IN: 'in',\n};\n\nexport const DEFAULT_MAIN_RESIDENCE_RULES = [\n  {\n    [LENDER_RULES_OPERATORS.IN]: [\n      { var: 'residenceType' },\n      [RESIDENCE_TYPE.MAIN_RESIDENCE],\n    ],\n  },\n];\n\nexport const DEFAULT_SECONDARY_RESIDENCE_RULES = [\n  {\n    [LENDER_RULES_OPERATORS.IN]: [\n      { var: 'residenceType' },\n      [RESIDENCE_TYPE.SECOND_RESIDENCE],\n    ],\n  },\n];\n\n// Keep the deltas above other expenses so they appear in the right order\nexport const EXPENSE_TYPES = {\n  REAL_ESTATE_DELTA_POSITIVE: 'REAL_ESTATE_DELTA_POSITIVE',\n  REAL_ESTATE_DELTA_NEGATIVE: 'REAL_ESTATE_DELTA_NEGATIVE',\n  ...EXPENSES,\n  THEORETICAL_REAL_ESTATE: 'THEORETICAL_REAL_ESTATE',\n};\n\nexport const EXPENSE_TYPES_WITHOUT_DELTAS = Object.values(EXPENSE_TYPES).filter(value =>\n  ![\n    EXPENSE_TYPES.REAL_ESTATE_DELTA_POSITIVE,\n    EXPENSE_TYPES.REAL_ESTATE_DELTA_NEGATIVE,\n  ].includes(value));\n\nexport const DEFAULT_VALUE_FOR_ALL = {\n  incomeConsiderationType: INCOME_CONSIDERATION_TYPES.GROSS,\n  bonusAlgorithm: BONUS_ALGORITHMS.WEAK_AVERAGE,\n  bonusConsideration: 0.5,\n  bonusHistoryToConsider: 3,\n  companyIncomeConsideration: 1,\n  companyIncomeHistoryToConsider: 3,\n  dividendsConsideration: 1,\n  dividendsHistoryToConsider: 1,\n  pensionIncomeConsideration: 1,\n  realEstateIncomeConsideration: 1,\n  realEstateIncomeConsiderationType:\n    REAL_ESTATE_CONSIDERATION_TYPES.SUBTRACT_FROM_EXPENSES,\n  investmentIncomeConsideration: 1,\n  expensesSubtractFromIncome: EXPENSE_TYPES_WITHOUT_DELTAS,\n  theoreticalInterestRate: 0.05,\n  theoreticalMaintenanceRate: 0.01,\n  amortizationGoal: 0.65,\n  amortizationYears: 15,\n  maxBorrowRatio: 0.9,\n  maxIncomeRatio: 0.3333,\n  allowPledge: true,\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/index.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './lenderRules';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/methodDefinitions.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { Method } from '../methods/methods';\n\nexport const lenderRulesInsert = new Method({\n  name: 'lenderRulesInsert',\n  params: {\n    organisationId: String,\n    logicRules: Array,\n    object: Match.Maybe(Object),\n  },\n});\nexport const lenderRulesInitialize = new Method({\n  name: 'lenderRulesInitialize',\n  params: {\n    organisationId: String,\n  },\n});\n\nexport const lenderRulesRemove = new Method({\n  name: 'lenderRulesRemove',\n  params: {\n    lenderRulesId: String,\n  },\n});\n\nexport const lenderRulesUpdate = new Method({\n  name: 'lenderRulesUpdate',\n  params: {\n    lenderRulesId: String,\n    object: Object,\n  },\n});\n\nexport const lenderRulesUpdateFilter = new Method({\n  name: 'lenderRulesUpdateFilter',\n  params: {\n    lenderRulesId: String,\n    logicRules: Array,\n    name: Match.Optional(String),\n  },\n});\n\nexport const setLenderRulesOrder = new Method({\n  name: 'setLenderRulesOrder',\n  params: {\n    orders: Object,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lenderRules.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/lenderRules.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport LenderRulesSchema from './schemas/lenderRulesSchema';\nimport { LENDER_RULES_COLLECTION } from './lenderRulesConstants';\n\nconst LenderRules = new Mongo.Collection(LENDER_RULES_COLLECTION);\n\nLenderRules.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nLenderRules.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nLenderRules.attachSchema(LenderRulesSchema);\nexport default LenderRules;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"lenderRulesSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/schemas/lenderRulesSchema.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport SimpleSchema from 'simpl-schema';\n\nimport {\n  BONUS_ALGORITHMS,\n  REAL_ESTATE_INCOME_ALGORITHMS,\n} from '../../../config/financeConstants';\nimport {\n  createdAt,\n  updatedAt,\n  percentageField,\n} from '../../helpers/sharedSchemas';\nimport {\n  INCOME_CONSIDERATION_TYPES,\n  EXPENSE_TYPES_WITHOUT_DELTAS,\n} from '../lenderRulesConstants';\n\n// When adding new rules to lenderRules, make sure to edit the\n// applyRules method on LenderRulesInitializator\n\nexport const incomeConsideration = {\n  incomeConsiderationType: {\n    type: String,\n    allowedValues: Object.values(INCOME_CONSIDERATION_TYPES),\n    optional: true,\n  },\n  bonusAlgorithm: {\n    type: String,\n    allowedValues: Object.values(BONUS_ALGORITHMS),\n    optional: true,\n    uniforms: { placeholder: null },\n  },\n  bonusConsideration: percentageField,\n  bonusHistoryToConsider: { type: SimpleSchema.Integer, optional: true },\n  companyIncomeConsideration: percentageField,\n  companyIncomeHistoryToConsider: {\n    type: SimpleSchema.Integer,\n    optional: true,\n  },\n  dividendsConsideration: percentageField,\n  dividendsHistoryToConsider: { type: SimpleSchema.Integer, optional: true },\n  realEstateIncomeAlgorithm: {\n    type: String,\n    allowedValues: Object.values(REAL_ESTATE_INCOME_ALGORITHMS),\n    optional: true,\n    uniforms: { placeholder: null },\n  },\n  realEstateIncomeConsideration: percentageField,\n  // realEstateIncomeConsiderationType: {\n  //   type: String,\n  //   allowedValues: Object.values(REAL_ESTATE_CONSIDERATION_TYPES),\n  //   optional: true,\n  // },\n  investmentIncomeConsideration: percentageField,\n  expensesSubtractFromIncome: {\n    type: Array,\n    optional: true,\n    uniforms: {\n      intlId: 'expenses',\n      placeholder: 'Ajouter toutes les charges aux charges théoriques',\n      label: 'Charges à soustraire aux revenus',\n    },\n    autoValue() {\n      if (\n        Meteor.isServer\n        && this.isSet\n        && Array.isArray(this.value)\n        && this.value.length === 0\n      ) {\n        return { $unset: true };\n      }\n    },\n  },\n  'expensesSubtractFromIncome.$': {\n    type: String,\n    // REAL_ESTATE_DELTAS are handled internally\n    allowedValues: EXPENSE_TYPES_WITHOUT_DELTAS,\n  },\n  fortuneReturnsRatio: percentageField,\n};\n\nexport const theoreticalExpenses = {\n  theoreticalInterestRate: percentageField,\n  theoreticalInterestRate2ndRank: percentageField,\n  theoreticalMaintenanceRate: percentageField,\n  amortizationGoal: percentageField,\n  amortizationYears: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    max: 20,\n    optional: true,\n  },\n};\n\nexport const cutOffCriteria = {\n  maxBorrowRatio: percentageField,\n  maxBorrowRatioWithPledge: percentageField,\n  maxIncomeRatio: percentageField,\n};\n\nexport const otherParams = {\n  allowPledge: {\n    type: Boolean,\n    optional: true,\n    autoValue() {\n      if (Meteor.isServer && this.isSet && this.value === false) {\n        return { $unset: true };\n      }\n    },\n  },\n  adminComments: { type: Array, defaultValue: [] },\n  'adminComments.$': String,\n  pdfComments: { type: Array, defaultValue: [] },\n  'pdfComments.$': String,\n};\n\nconst LenderRulesSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  organisationLink: { type: Object, optional: true },\n  'organisationLink._id': { type: String, optional: true },\n  filter: { type: Object, blackbox: true },\n  name: { type: String, optional: true },\n  order: { type: Number, min: 0 },\n  organisationCache: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n  ...incomeConsideration,\n  ...theoreticalExpenses,\n  ...cutOffCriteria,\n  ...otherParams,\n});\n\nexport const LenderRulesEditorSchema = LenderRulesSchema.pick(\n  ...Object.keys(incomeConsideration),\n  ...Object.keys(theoreticalExpenses),\n  ...Object.keys(cutOffCriteria),\n  ...Object.keys(otherParams),\n);\n\nexport default LenderRulesSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"helpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/helpers.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport jsonLogic from 'json-logic-js';\n\nconst rulesToMerge = ['pdfComments', 'adminComments'];\n\nconst filterIsValid = (filter, variables) => jsonLogic.apply(filter, variables);\n\nconst mergeRules = ({ names = [], ...oldRules }, newRules) => {\n  let mergedObject = { ...oldRules };\n\n  Object.keys(newRules).forEach((newRuleName) => {\n    const newRule = newRules[newRuleName];\n\n    if (rulesToMerge.includes(newRuleName) && mergedObject[newRuleName]) {\n      mergedObject = {\n        ...mergedObject,\n        [newRuleName]: [...mergedObject[newRuleName], ...newRule],\n      };\n    } else if (newRule !== undefined && newRule !== null) {\n      mergedObject = { ...mergedObject, [newRuleName]: newRule };\n    }\n  });\n\n  return {\n    ...mergedObject,\n    names: [...names, newRules.name],\n  };\n};\n\nexport const getMatchingRules = (\n  lenderRules,\n  variables,\n  storeOrigin = () => {},\n) =>\n  lenderRules.reduce((validRules, { filter, ...rules }) => {\n    if (filterIsValid(filter, variables)) {\n      storeOrigin(rules, rules._id);\n      return mergeRules(validRules, rules);\n    }\n\n    return validRules;\n  }, {});\n\nexport const isAllRule = ({ filter: { and } }) => and[0] === true;\n\nexport const parseFilter = (ruleObject) => {\n  if (ruleObject === true) {\n    // Handle exception for rules that are true, i.e. apply to all loans\n    return { value: true };\n  }\n\n  const [operator] = Object.keys(ruleObject);\n  const { var: variable } = ruleObject[operator].find(o => o && o.var);\n  const value = ruleObject[operator].find(o => !(o && o.var));\n\n  return { operator, variable, value };\n};\n\nexport const formatFilter = ({ variable, operator, value }) => ({\n  [operator]: [{ var: variable }, value],\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"LenderRulesService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/server/LenderRulesService.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport LenderRules from '../lenderRules';\nimport CollectionService from '../../helpers/CollectionService';\nimport {\n  DEFAULT_VALUE_FOR_ALL,\n  DEFAULT_MAIN_RESIDENCE_RULES,\n  DEFAULT_SECONDARY_RESIDENCE_RULES,\n} from '../lenderRulesConstants';\n\nclass LenderRulesService extends CollectionService {\n  constructor() {\n    super(LenderRules);\n  }\n\n  remove({ lenderRulesId }) {\n    return super.remove(lenderRulesId);\n  }\n\n  initialize({ organisationId }) {\n    const id1 = this.insert({\n      organisationId,\n      object: DEFAULT_VALUE_FOR_ALL,\n      logicRules: [true],\n    });\n    const id2 = this.insert({\n      organisationId,\n      object: { maxBorrowRatio: 0.8 },\n      logicRules: DEFAULT_MAIN_RESIDENCE_RULES,\n    });\n    const id3 = this.insert({\n      organisationId,\n      object: { maxBorrowRatio: 0.7 },\n      logicRules: DEFAULT_SECONDARY_RESIDENCE_RULES,\n    });\n\n    return [id1, id2, id3];\n  }\n\n  insert({ organisationId, object = {}, logicRules }) {\n    const { lenderRules = [] } = OrganisationService.fetchOne({\n      $filters: { _id: organisationId },\n      lenderRules: { _id: 1 },\n    });\n\n    const lenderRulesId = super.insert({\n      ...object,\n      filter: { and: logicRules },\n      order: lenderRules.length,\n    });\n\n    this.addLink({\n      id: lenderRulesId,\n      linkName: 'organisation',\n      linkId: organisationId,\n    });\n\n    return lenderRulesId;\n  }\n\n  update({ lenderRulesId, object }) {\n    if (object.filter) {\n      throw new Meteor.Error('You can not update the filter here');\n    }\n\n    return this._update({ id: lenderRulesId, object });\n  }\n\n  updateFilter({ lenderRulesId, logicRules, name }) {\n    return this._update({\n      id: lenderRulesId,\n      object: { filter: { and: logicRules }, name },\n    });\n  }\n\n  setOrder({ orders }) {\n    const ids = Object.keys(orders);\n    const numbers = Object.values(orders).sort((a, b) => a - b);\n\n    const lenderRules = this.fetch({\n      $filters: { _id: { $in: ids } },\n      organisation: { _id: 1 },\n      organisationLink: 1,\n    });\n\n    lenderRules.forEach(({ organisation: { _id } }) => {\n      if (_id !== lenderRules[0].organisation._id) {\n        throw new Meteor.Error('Tous les filtres doivent appartenir à la même organisation');\n      }\n    });\n\n    numbers.forEach((num, index) => {\n      if (index !== num) {\n        throw new Meteor.Error(\"L'ordre des filtres doit commencer par 0 et être continu\");\n      }\n    });\n\n    Object.keys(orders).forEach((lenderRulesId) => {\n      const nextOrder = orders[lenderRulesId];\n      this.update({ lenderRulesId, object: { order: nextOrder } });\n    });\n  }\n}\n\nexport default new LenderRulesService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/server/methods.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport LenderRulesService from './LenderRulesService';\nimport {\n  lenderRulesInitialize,\n  lenderRulesInsert,\n  lenderRulesRemove,\n  lenderRulesUpdate,\n  lenderRulesUpdateFilter,\n  setLenderRulesOrder,\n} from '../methodDefinitions';\n\nlenderRulesInitialize.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LenderRulesService.initialize(params);\n});\n\nlenderRulesInsert.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LenderRulesService.insert(params);\n});\n\nlenderRulesRemove.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LenderRulesService.remove(params);\n});\n\nlenderRulesUpdate.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LenderRulesService.update(params);\n});\n\nlenderRulesUpdateFilter.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LenderRulesService.updateFilter(params);\n});\n\nsetLenderRulesOrder.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return LenderRulesService.setOrder(params);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/server/exposures.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\nimport { organisationLenderRules } from '../queries';\n\nexposeQuery({\n  query: organisationLenderRules,\n  overrides: {\n    firewall() {\n      SecurityService.checkLoggedIn();\n    },\n    embody: (body, params) => {\n      body.$filter = ({ filters, params: { organisationId } }) => {\n        filters['organisationLink._id'] = organisationId;\n      };\n    },\n    validateParams: { organisationId: String },\n  },\n  options: { allowFilterById: true },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/links.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport LenderRules from '.';\nimport { Organisations } from '..';\n\nLenderRules.addLinks({\n  organisation: {\n    field: 'organisationLink',\n    type: 'one',\n    metadata: true,\n    collection: Organisations,\n    denormalize: {\n      field: 'organisationCache',\n      body: { _id: 1, name: 1 },\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/lenderRules/queries.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { lenderRules } from '../fragments';\nimport { LENDER_RULES_QUERIES } from './lenderRulesConstants';\nimport LenderRules from '.';\n\nexport const organisationLenderRules = LenderRules.createQuery(\n  LENDER_RULES_QUERIES.ORGANISATION_LENDER_RULES,\n  lenderRules(),\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"revenues\":{\"revenueConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/revenueConstants.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const REVENUES_COLLECTION = 'revenues';\n\nexport const REVENUE_QUERIES = {\n  ADMIN_REVENUES: 'ADMIN_REVENUES',\n};\n\nexport const REVENUE_TYPES = {\n  INSURANCE: 'INSURANCE',\n  MORTGAGE: 'MORTGAGE',\n  FEE: 'FEE',\n  OTHER: 'OTHER',\n};\n\nconst REVENUE_TYPES_INSURANCE = {\n  DEATH_3A: 'DEATH_3A',\n  DEATH_3B: 'DEATH_3B',\n  INCOME_PROTECTION_3A: 'INCOME_PROTECTION_3A',\n  INCOME_PROTECTION_3B: 'INCOME_PROTECTION_3B',\n  LIFE_3A: 'LIFE_3A',\n  LIFE_3B: 'LIFE_3B',\n};\n\nexport const REVENUE_SECONDARY_TYPES = {\n  ...REVENUE_TYPES_INSURANCE,\n};\n\nexport const REVENUE_STATUS = {\n  EXPECTED: 'EXPECTED',\n  CLOSED: 'CLOSED',\n};\n\nexport const COMMISSION_STATUS = {\n  PAID: 'PAID',\n  TO_BE_PAID: 'TO_BE_PAID',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas\":{\"revenueSchema.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/schemas/revenueSchema.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\n\nimport { CUSTOM_AUTOFIELD_TYPES } from 'core/components/AutoForm2/constants';\nimport {\n  createdAt,\n  updatedAt,\n  percentageField,\n  decimalMoneyField,\n  cacheField,\n} from '../../helpers/sharedSchemas';\nimport {\n  REVENUE_TYPES,\n  REVENUE_STATUS,\n  COMMISSION_STATUS,\n  REVENUE_SECONDARY_TYPES,\n} from '../revenueConstants';\n\nconst RevenueSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  amount: { ...decimalMoneyField, optional: false },\n  description: { type: String, optional: true },\n  type: {\n    type: String,\n    allowedValues: Object.values(REVENUE_TYPES),\n    uniforms: { displayEmpty: false, placeholder: '' },\n  },\n  secondaryType: {\n    type: String,\n    optional: true,\n    allowedValues: Object.values(REVENUE_SECONDARY_TYPES),\n    uniforms: { displayEmpty: false, placeholder: '' },\n    condition: ({ type }) => type === REVENUE_TYPES.INSURANCE,\n  },\n  status: {\n    type: String,\n    allowedValues: Object.values(REVENUE_STATUS),\n    uniforms: { displayEmpty: false, placeholder: '' },\n    defaultValue: REVENUE_STATUS.EXPECTED,\n  },\n  expectedAt: {\n    type: Date,\n    optional: true,\n    uniforms: { type: CUSTOM_AUTOFIELD_TYPES.DATE },\n  },\n  paidAt: {\n    type: Date,\n    optional: true,\n    uniforms: { type: CUSTOM_AUTOFIELD_TYPES.DATE },\n  },\n  organisationLinks: {\n    type: Array,\n    defaultValue: [],\n  },\n  'organisationLinks.$': Object,\n  'organisationLinks.$._id': String,\n  'organisationLinks.$.commissionRate': { ...percentageField, optional: false },\n  'organisationLinks.$.paidAt': {\n    type: Date,\n    optional: true,\n    uniforms: { type: CUSTOM_AUTOFIELD_TYPES.DATE },\n  },\n  'organisationLinks.$.status': {\n    type: String,\n    allowedValues: Object.values(COMMISSION_STATUS),\n    defaultValue: COMMISSION_STATUS.TO_BE_PAID,\n  },\n  sourceOrganisationLink: { type: Object, defaultValue: {}, optional: true },\n  'sourceOrganisationLink._id': { type: String, optional: true },\n  // This should be an object, since there's only one loan\n  // https://github.com/Herteby/denormalize/issues/17\n  loanCache: { type: Array, optional: true },\n  'loanCache.$': cacheField,\n});\n\nexport default RevenueSchema;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/index.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './methodDefinitions';\nexport { default } from './revenues';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/methodDefinitions.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { Method } from '../methods/methods';\n\nexport const revenueInsert = new Method({\n  name: 'revenueInsert',\n  params: {\n    revenue: Object,\n    loanId: Match.Maybe(String),\n  },\n});\n\nexport const revenueRemove = new Method({\n  name: 'revenueRemove',\n  params: {\n    revenueId: String,\n  },\n});\n\nexport const revenueUpdate = new Method({\n  name: 'revenueUpdate',\n  params: {\n    revenueId: String,\n    object: Object,\n  },\n});\n\nexport const consolidateRevenue = new Method({\n  name: 'consolidateRevenue',\n  params: {\n    revenueId: String,\n    amount: Number,\n    paidAt: String,\n  },\n});\n\nexport const consolidateCommission = new Method({\n  name: 'consolidateCommission',\n  params: {\n    revenueId: String,\n    organisationId: String,\n    paidAt: String,\n    commissionRate: Number,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"revenues.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/revenues.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport RevenueSchema from './schemas/revenueSchema';\nimport { REVENUES_COLLECTION } from './revenueConstants';\n\nconst Revenues = new Mongo.Collection(REVENUES_COLLECTION);\n\nRevenues.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nRevenues.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nRevenues.attachSchema(RevenueSchema);\nexport default Revenues;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"RevenueService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/server/RevenueService.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { COMMISSION_STATUS } from 'imports/core/api/constants';\nimport Revenues from '../revenues';\nimport CollectionService from '../../helpers/CollectionService';\nimport LoanService from '../../loans/server/LoanService';\nimport { REVENUE_STATUS } from '../revenueConstants';\n\nclass RevenueService extends CollectionService {\n  constructor() {\n    super(Revenues);\n  }\n\n  insert({ revenue, loanId }) {\n    const revenueId = this.collection.insert(revenue);\n\n    if (loanId) {\n      LoanService.addLink({\n        id: loanId,\n        linkName: 'revenues',\n        linkId: revenueId,\n      });\n    }\n\n    return revenueId;\n  }\n\n  remove({ revenueId }) {\n    return super.remove(revenueId);\n  }\n\n  getGeneratedRevenues({ organisationId }) {\n    const revenues = this.fetch({\n      $filters: {\n        $and: [\n          { status: REVENUE_STATUS.CLOSED },\n          { organisationLinks: { $elemMatch: { _id: organisationId } } },\n        ],\n      },\n      amount: 1,\n      organisationLinks: 1,\n      status: 1,\n    });\n\n    return revenues.reduce((total, { amount, organisationLinks }) => {\n      const sharedAmount = amount / organisationLinks.length;\n\n      return total + sharedAmount;\n    }, 0);\n  }\n\n  consolidateRevenue({ revenueId, amount, paidAt }) {\n    return this._update({\n      id: revenueId,\n      object: {\n        amount,\n        paidAt,\n        status: REVENUE_STATUS.CLOSED,\n      },\n    });\n  }\n\n  consolidateCommission({ revenueId, organisationId, paidAt, commissionRate }) {\n    return this.updateLinkMetadata({\n      id: revenueId,\n      linkName: 'organisations',\n      linkId: organisationId,\n      metadata: { paidAt, status: COMMISSION_STATUS.PAID, commissionRate },\n    });\n  }\n}\n\nexport default new RevenueService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/server/methods.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport RevenueService from './RevenueService';\nimport {\n  revenueInsert,\n  revenueRemove,\n  revenueUpdate,\n  consolidateRevenue,\n  consolidateCommission,\n} from '../methodDefinitions';\n\nrevenueInsert.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return RevenueService.insert(params);\n});\n\nrevenueRemove.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return RevenueService.remove(params);\n});\n\nrevenueUpdate.setHandler((context, { revenueId, object }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return RevenueService._update({ id: revenueId, object });\n});\n\nconsolidateRevenue.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return RevenueService.consolidateRevenue(params);\n});\n\nconsolidateCommission.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return RevenueService.consolidateCommission(params);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/server/hooks.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport NotificationService from '../../notifications/server/NotificationService';\nimport Revenues from '..';\nimport { REVENUE_STATUS } from '../revenueConstants';\n\nRevenues.before.update((userId, { _id: revenueId, expectedAt: oldDate }, fieldNames, modifier) => {\n  // Read the notification automatically if a paidAt date is added, or if\n  // the status is set to CLOSED\n  if (fieldNames.includes('status') || fieldNames.includes('paidAt')) {\n    const newStatus = modifier.$set && modifier.$set.status;\n    const newPaidAt = modifier.$set && modifier.$set.paidAt;\n\n    if (newStatus === REVENUE_STATUS.CLOSED || newPaidAt) {\n      NotificationService.readNotificationAll({\n        filters: { 'revenueLink._id': revenueId },\n      });\n    }\n  }\n\n  // Cancel notification if expetedAt changes\n  if (fieldNames.includes('expectedAt')) {\n    const newDate = modifier.$set && modifier.$set.expectedAt;\n\n    if ((newDate && newDate.getTime()) !== (oldDate && oldDate.getTime())) {\n      NotificationService.remove({ 'revenueLink._id': revenueId });\n    }\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/server/exposures.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { adminRevenues } from '../queries';\n\nexposeQuery({\n  query: adminRevenues,\n  overrides: {\n    embody: (body) => {\n      body.$filter = ({\n        filters,\n        params: {\n          _id,\n          status,\n          loanId,\n          sourceOrganisationId,\n          organisationId,\n          commissionStatus,\n        },\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (status) {\n          filters.status = status;\n        }\n\n        if (loanId) {\n          filters['loanCache.0._id'] = loanId;\n        }\n\n        if (sourceOrganisationId) {\n          filters['sourceOrganisationLink._id'] = sourceOrganisationId;\n        }\n\n        if (organisationId) {\n          if (commissionStatus) {\n            filters.organisationLinks = {\n              $elemMatch: { _id: organisationId, status: commissionStatus },\n            };\n          } else {\n            filters.organisationLinks = {\n              $elemMatch: { _id: organisationId },\n            };\n          }\n        }\n      };\n    },\n    validateParams: {\n      _id: Match.Maybe(String),\n      loanId: Match.Maybe(String),\n      sourceOrganisationId: Match.Maybe(String),\n      organisationId: Match.Maybe(String),\n      status: Match.Maybe(Match.OneOf(Object, String)),\n      commissionStatus: Match.Maybe(Match.OneOf(Object, String)),\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/links.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport LinkInitializer from '../links/LinkInitializer';\nimport Revenues from '.';\nimport { Loans, Organisations } from '..';\n\nRevenues.addLinks({\n  organisations: {\n    collection: Organisations,\n    field: 'organisationLinks',\n    type: 'many',\n    metadata: true,\n  },\n  sourceOrganisation: {\n    collection: Organisations,\n    field: 'sourceOrganisationLink',\n    type: 'one',\n    metadata: true,\n  },\n});\n\nLinkInitializer.inversedInit(() => {\n  Revenues.addLinks({\n    loan: {\n      collection: Loans,\n      inversedBy: 'revenues',\n      denormalize: {\n        field: 'loanCache',\n        body: { _id: 1, name: 1 },\n      },\n    },\n  });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/revenues/queries.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { revenue } from '../fragments';\nimport { REVENUE_QUERIES } from './revenueConstants';\nimport Revenues from '.';\n\nexport const adminRevenues = Revenues.createQuery(\n  REVENUE_QUERIES.ADMIN_REVENUES,\n  revenue(),\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"email\":{\"emailConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/email/emailConstants.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nexport const FROM_NAME = 'e-Potek';\nexport const FROM_EMAIL = 'info@e-potek.ch';\nexport const FROM_DEFAULT = `${FROM_NAME} <${FROM_EMAIL}>`;\nexport const CTA_URL_DEFAULT = Meteor.settings.public.subdomains.app;\nexport const INTERNAL_EMAIL = Meteor.settings.public.environment === 'production'\n  ? FROM_EMAIL\n  : 'dev@e-potek.ch';\nexport const EPOTEK_PHONE = '+41 22 566 01 10';\n\nexport const EMAIL_I18N_NAMESPACE = 'emails';\n\nexport const EMAIL_PARTS = {\n  SUBJECT: 'SUBJECT',\n  TITLE: 'TITLE',\n  BODY: 'BODY',\n  CTA: 'CTA',\n  FROM: 'FROM',\n};\n\nexport const FOOTER_TYPES = {\n  USER: 'footerUser',\n  VISITOR: 'footerVisitor',\n};\n\nexport const EMAIL_TEMPLATES = {\n  NOTIFICATION: {\n    name: 'NOTIFICATION',\n    mandrillId: 'notification',\n    variables: {\n      TITLE: 'TITLE',\n      BODY: 'BODY',\n    },\n  },\n  NOTIFICATION_AND_CTA: {\n    name: 'NOTIFICATION_AND_CTA',\n    mandrillId: 'notification-cta',\n    variables: {\n      TITLE: 'TITLE',\n      BODY: 'BODY',\n      CTA: 'CTA',\n      CTA_URL: 'CTA_URL',\n    },\n  },\n  PROMOTION_INVITATION: {\n    name: 'PROMOTION_INVITATION',\n    mandrillId: 'promotion-invitation',\n    variables: {\n      TITLE: 'TITLE',\n      MARKETING_BLURB: 'MARKETING_BLURB',\n      BODY: 'BODY',\n      CTA: 'CTA',\n      CTA_URL: 'CTA_URL',\n      COVER_IMAGE_URL: 'COVER_IMAGE_URL',\n      LOGO_URL_1: 'LOGO_URL_1',\n      LOGO_URL_2: 'LOGO_URL_2',\n      LOGO_URL_3: 'LOGO_URL_3',\n    },\n  },\n  SIMPLE: {\n    name: 'SIMPLE',\n    mandrillId: 'simple',\n    variables: {\n      TITLE: 'TITLE',\n      BODY: 'BODY',\n    },\n  },\n  NOTIFICATION_AND_CTA_V2: {\n    name: 'NOTIFICATION_AND_CTA_V2',\n    mandrillId: 'notification-cta-v2',\n    variables: {\n      TITLE: 'TITLE',\n      BODY: 'BODY',\n      CTA: 'CTA',\n      CTA_URL: 'CTA_URL',\n      CSS: 'CSS',\n    },\n  },\n};\n\nexport const EMAIL_IDS = {\n  CONTACT_US: 'CONTACT_US',\n  CONTACT_US_ADMIN: 'CONTACT_US_ADMIN',\n  VERIFY_EMAIL: 'VERIFY_EMAIL',\n  RESET_PASSWORD: 'RESET_PASSWORD',\n  ENROLL_ACCOUNT: 'ENROLL_ACCOUNT',\n  VERIFICATION_REQUESTED: 'VERIFICATION_REQUESTED',\n  VERIFICATION_ERROR: 'VERIFICATION_ERROR',\n  VERIFICATION_PASSED: 'VERIFICATION_PASSED',\n  INVITE_USER_TO_PROMOTION: 'INVITE_USER_TO_PROMOTION',\n  SEND_FEEDBACK_TO_LENDER: 'SEND_FEEDBACK_TO_LENDER',\n  INVITE_USER_TO_PROPERTY: 'INVITE_USER_TO_PROPERTY',\n  REFER_USER: 'REFER_USER',\n  FIND_LENDER_NOTIFICATION: 'FIND_LENDER_NOTIFICATION',\n  CONFIRM_USER_INVITATION: 'CONFIRM_USER_INVITATION',\n  LOAN_CHECKLIST: 'LOAN_CHECKLIST',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/email/methodDefinitions.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { Method } from '../methods/methods';\n\nexport const sendEmail = new Method({\n  name: 'sendEmail',\n  params: {\n    emailId: String,\n    params: Object,\n    userId: String,\n  },\n});\n\nexport const sendEmailToAddress = new Method({\n  name: 'sendEmailToAddress',\n  params: {\n    address: String,\n    emailId: String,\n    name: Match.Maybe(String),\n    params: Object,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/email/server/methods.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport { sendEmail, sendEmailToAddress } from '../methodDefinitions';\nimport EmailService from './EmailService';\n\nsendEmail.setHandler((context, params) => {\n  context.unblock();\n  try {\n    return EmailService.sendEmailToUser(params);\n  } catch (error) {\n    console.log(`EmailService error for ${params.emailId}`, error);\n    throw new Meteor.Error(error);\n  }\n});\n\nsendEmailToAddress.setHandler((context, params) => {\n  context.unblock();\n  try {\n    return EmailService.sendEmail(params);\n  } catch (error) {\n    console.log(`EmailService error for ${params.emailId}`, error);\n    throw new Meteor.Error(error);\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EmailService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/email/server/EmailService.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport UserService from '../../users/server/UserService';\nimport emailConfigs from './emailConfigs';\nimport { getEmailContent, getEmailPart } from './emailHelpers';\nimport {\n  sendMandrillTemplate,\n  getMandrillTemplate,\n  getSimpleMandrillTemplate,\n  renderMandrillTemplate,\n} from './mandrill';\nimport { FROM_NAME, FROM_EMAIL } from '../emailConstants';\n\nexport const isEmailTestEnv = Meteor.isTest || Meteor.isAppTest;\nexport const skipEmails = (Meteor.isDevelopment || Meteor.isDevEnvironment) && !isEmailTestEnv;\n// export const skipEmails = false;\n\nclass EmailService {\n  sendEmail = ({ emailId, address, name, params }) => {\n    const templateOptions = this.createTemplateOptions({\n      emailId,\n      address,\n      name,\n      params,\n    });\n    const template = getMandrillTemplate(templateOptions);\n    return sendMandrillTemplate(template).then((response) => {\n      this.emailLogger({ emailId, address, template, response });\n    });\n  };\n\n  sendEmailToUser = ({ emailId, userId, params }) => {\n    const { email, name } = UserService.fetchOne({\n      $filters: { _id: userId },\n      email: 1,\n      name: 1,\n    });\n    this.sendEmail({ emailId, address: email, name, params });\n  };\n\n  getEmailConfig = emailId => emailConfigs[emailId];\n\n  createTemplateOptions = ({ emailId, address, name, params }) => {\n    const emailConfig = this.getEmailConfig(emailId);\n    const {\n      template: { mandrillId: templateName },\n      createIntlValues,\n      ...otherOptions\n    } = emailConfig;\n\n    const intlValues = createIntlValues(params);\n    const emailContent = getEmailContent(emailId, intlValues);\n\n    // Make sure you call `createOverrides` from emailConfig, to preserve `this`\n    // See: https://github.com/Microsoft/vscode/issues/43930\n    const overrides = emailConfig.createOverrides(params, emailContent);\n\n    return {\n      templateName,\n      recipientAddress: address,\n      recipientName: name,\n      senderAddress: FROM_EMAIL,\n      senderName: FROM_NAME,\n      subject: emailContent.subject,\n      sendAt: undefined,\n      ...overrides,\n      ...otherOptions,\n    };\n  };\n\n  getAccountsTemplate = (emailId, params = {}) => {\n    const templateOptions = this.createTemplateOptions({ emailId, params });\n    return getSimpleMandrillTemplate(templateOptions);\n  };\n\n  getEmailPart = (emailId, part) => getEmailPart({ emailId, part });\n\n  renderTemplate = (templateOptions, emailId) => {\n    let result;\n    this.emailLogger({ emailId, template: templateOptions });\n\n    try {\n      result = renderMandrillTemplate(templateOptions);\n    } catch (error) {\n      throw new Meteor.Error(\n        'MANDRILL_ERROR',\n        `Error while rendering mandrill template for ${emailId}: ${error.reason\n          || error.message\n          || error}`,\n      );\n    }\n\n    return result;\n  };\n\n  emailLogger = ({ emailId, address, template, response }) => {\n    if (isEmailTestEnv) {\n      // Store all sent emails in the DB, to be asserted in tests\n      return Meteor.call('storeTestEmail', {\n        date: Date.now(),\n        emailId,\n        address,\n        template,\n        response,\n      });\n    }\n    if (skipEmails) {\n      if (address) {\n        console.log(`EmailService dev: Would've sent ${emailId} to ${address} with this template:`);\n      } else {\n        console.log(`EmailService dev: Would've sent ${emailId} with this template:`);\n      }\n      console.log(JSON.stringify(template, null, 2));\n    }\n  };\n}\n\nexport default new EmailService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"emailConfigs.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/email/server/emailConfigs.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport ReactDOMServer from 'react-dom/server';\nimport moment from 'moment';\nimport { Meteor } from 'meteor/meteor';\n\nimport Intl from 'core/utils/server/intl';\nimport {\n  EMAIL_TEMPLATES,\n  EMAIL_IDS,\n  CTA_URL_DEFAULT,\n  FOOTER_TYPES,\n  EPOTEK_PHONE,\n} from '../emailConstants';\nimport {\n  getAccountsUrl,\n  notificationTemplateDefaultOverride,\n  notificationAndCtaTemplateDefaultOverride,\n} from './emailHelpers';\nimport PromotionLogos from './components/PromotionLogos';\nimport LoanChecklistEmail from '../../../components/LoanChecklist/LoanChecklistEmail/LoanChecklistEmail';\nimport styles from '../../../components/LoanChecklist/LoanChecklistEmail/styles';\n\nconst emailConfigs = {};\n\nconst emailDefaults = {\n  allowUnsubscribe: false,\n  footerType: FOOTER_TYPES.USER,\n  createIntlValues: params => ({ variables: [], ...params }),\n};\n\n/**\n * addEmailConfig - A function that creates a config for a given emailId\n *\n * @param {String} emailId A unique id representing the email, from EMAIL_IDS\n * @param {Object} config A config object that can have the following keys:\n * {Object} template A template object from EMAIL_TEMPLATES\n * {Boolean} allowUnsubscribe Defines whether the email will be rendered with\n * a footer that allows the user to unsubscribe to notifications.\n * default is `false`\n * {Function} createOverrides A function that gets the params and\n * returns an object with overrides for the email template\n * {Function} createIntlValues A function that gets the params and\n * returns an object with intl values that need to be injected inside of the\n * i18n strings\n */\nconst addEmailConfig = (emailId, config) => {\n  if (config.template === EMAIL_TEMPLATES.NOTIFICATION) {\n    emailConfigs[emailId] = {\n      createOverrides: notificationTemplateDefaultOverride,\n      ...emailDefaults,\n      ...config,\n    };\n  } else if (config.template === EMAIL_TEMPLATES.NOTIFICATION_AND_CTA) {\n    emailConfigs[emailId] = {\n      createOverrides: notificationAndCtaTemplateDefaultOverride,\n      ...emailDefaults,\n      ...config,\n    };\n  } else {\n    emailConfigs[emailId] = { ...emailDefaults, ...config };\n  }\n};\n\naddEmailConfig(EMAIL_IDS.VERIFY_EMAIL, {\n  template: EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,\n  createOverrides({ user, url }, { title, body, cta }) {\n    const { variables } = this.template;\n    const verifyUrl = getAccountsUrl('verify-email')(user, url);\n\n    return {\n      variables: [\n        { name: variables.TITLE, content: title },\n        { name: variables.BODY, content: body },\n        { name: variables.CTA, content: cta },\n        { name: variables.CTA_URL, content: verifyUrl },\n      ],\n    };\n  },\n});\n\naddEmailConfig(EMAIL_IDS.RESET_PASSWORD, {\n  template: EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,\n  createOverrides({ user, url }, { title, body, cta }) {\n    const { variables } = this.template;\n    const resetPasswordUrl = getAccountsUrl('reset-password')(user, url);\n\n    return {\n      variables: [\n        { name: variables.TITLE, content: title },\n        { name: variables.BODY, content: body },\n        { name: variables.CTA, content: cta },\n        {\n          name: variables.CTA_URL,\n          content: resetPasswordUrl || CTA_URL_DEFAULT,\n        },\n      ],\n    };\n  },\n});\n\naddEmailConfig(EMAIL_IDS.ENROLL_ACCOUNT, {\n  template: EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,\n  createOverrides({ user, url }, { title, body, cta }) {\n    const { variables } = this.template;\n    const enrollUrl = getAccountsUrl('enroll-account')(user, url);\n\n    return {\n      variables: [\n        { name: variables.TITLE, content: title },\n        { name: variables.BODY, content: body },\n        { name: variables.CTA, content: cta },\n        { name: variables.CTA_URL, content: enrollUrl || CTA_URL_DEFAULT },\n      ],\n    };\n  },\n});\n\naddEmailConfig(EMAIL_IDS.VERIFICATION_REQUESTED, {\n  template: EMAIL_TEMPLATES.NOTIFICATION,\n});\n\naddEmailConfig(EMAIL_IDS.VERIFICATION_ERROR, {\n  template: EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,\n});\n\naddEmailConfig(EMAIL_IDS.VERIFICATION_PASSED, {\n  template: EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,\n});\n\nconst getFirstName = string => string.trim().split(' ')[0];\n\naddEmailConfig(EMAIL_IDS.CONTACT_US, {\n  template: EMAIL_TEMPLATES.NOTIFICATION,\n  footerType: FOOTER_TYPES.VISITOR,\n  createIntlValues: params => ({\n    ...params,\n    // Only show first names to clients\n    name: getFirstName(params.name),\n    // params.details check is required because details is optional\n    //  and it breaks react-intl if not provided\n    details: params.details || '',\n  }),\n});\n\naddEmailConfig(EMAIL_IDS.CONTACT_US_ADMIN, {\n  template: EMAIL_TEMPLATES.NOTIFICATION,\n  footerType: FOOTER_TYPES.VISITOR,\n  createIntlValues: params => ({\n    ...params,\n    details: params.details || 'Pas de message',\n  }),\n});\n\naddEmailConfig(EMAIL_IDS.INVITE_USER_TO_PROMOTION, {\n  template: EMAIL_TEMPLATES.PROMOTION_INVITATION,\n  createOverrides(\n    { coverImageUrl, logoUrls = [], ctaUrl },\n    { title, body, cta },\n  ) {\n    const { variables } = this.template;\n\n    return {\n      variables: [\n        { name: variables.TITLE, content: title },\n        { name: variables.BODY, content: body },\n        { name: variables.CTA, content: cta },\n        { name: variables.CTA_URL, content: ctaUrl || CTA_URL_DEFAULT },\n        { name: variables.COVER_IMAGE_URL, content: coverImageUrl },\n      ],\n      senderName: 'e-Potek',\n      templateContent: [\n        {\n          name: 'logos',\n          content: ReactDOMServer.renderToStaticMarkup(PromotionLogos({ logoUrls })),\n        },\n      ],\n    };\n  },\n  createIntlValues: params => ({\n    ...params,\n    promotionName: params.promotion.name,\n    phoneNumber:\n      params.promotion.contacts.length\n      && params.promotion.contacts[0].phoneNumber,\n    name: params.promotion.contacts.length && params.promotion.contacts[0].name,\n    epotekNumber: EPOTEK_PHONE,\n    assignedEmployeeName:\n      (params.promotion.assignedEmployee\n        && params.promotion.assignedEmployee.name)\n      || 'Yannis Eggert',\n    assignedEmployeeFirstName:\n      (params.promotion.assignedEmployee\n        && params.promotion.assignedEmployee.firstName)\n      || 'Yannis',\n    assignedEmployeePhone:\n      (params.promotion.assignedEmployee\n        && params.promotion.assignedEmployee.phoneNumbers[0])\n      || EPOTEK_PHONE,\n    invitedBy: params.invitedBy || 'e-Potek',\n  }),\n});\n\naddEmailConfig(EMAIL_IDS.SEND_FEEDBACK_TO_LENDER, {\n  template: EMAIL_TEMPLATES.SIMPLE,\n  createOverrides(\n    {\n      assigneeName = 'e-Potek',\n      assigneeAddress = 'financements@e-potek.ch',\n      feedback,\n    },\n    { title },\n  ) {\n    const { variables } = this.template;\n\n    return {\n      variables: [\n        { name: variables.TITLE, content: title },\n        { name: variables.BODY, content: feedback },\n      ],\n      senderName: assigneeName,\n      senderAddress: assigneeAddress,\n      bccAddress: assigneeAddress,\n    };\n  },\n});\n\n// Required params:\n// proName\n// address\n// ctaUrl\naddEmailConfig(EMAIL_IDS.INVITE_USER_TO_PROPERTY, {\n  template: EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,\n  createOverrides({ ctaUrl }, { title, body, cta }) {\n    const { variables } = this.template;\n\n    return {\n      variables: [\n        { name: variables.TITLE, content: title },\n        { name: variables.BODY, content: body },\n        { name: variables.CTA, content: cta },\n        { name: variables.CTA_URL, content: ctaUrl },\n      ],\n    };\n  },\n});\n\n// Required params\n// proName\naddEmailConfig(EMAIL_IDS.REFER_USER, {\n  template: EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,\n  createOverrides({ ctaUrl, ...rest }, { title, body, cta, ...rest2 }) {\n    const { variables } = this.template;\n\n    return {\n      variables: [\n        { name: variables.TITLE, content: title },\n        { name: variables.BODY, content: body },\n        { name: variables.CTA, content: cta },\n        { name: variables.CTA_URL, content: ctaUrl },\n      ],\n    };\n  },\n});\n\naddEmailConfig(EMAIL_IDS.FIND_LENDER_NOTIFICATION, {\n  template: EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,\n  createOverrides({ loanId }, { title, body, cta }) {\n    const { variables } = this.template;\n\n    return {\n      variables: [\n        { name: variables.TITLE, content: title },\n        { name: variables.BODY, content: body },\n        { name: variables.CTA, content: cta },\n        {\n          name: variables.CTA_URL,\n          content: `${CTA_URL_DEFAULT}/loans/${loanId}/financing`,\n        },\n      ],\n    };\n  },\n});\n\naddEmailConfig(EMAIL_IDS.CONFIRM_USER_INVITATION, {\n  template: EMAIL_TEMPLATES.NOTIFICATION_AND_CTA,\n});\n\naddEmailConfig(EMAIL_IDS.LOAN_CHECKLIST, {\n  template: EMAIL_TEMPLATES.NOTIFICATION_AND_CTA_V2,\n  createOverrides(\n    {\n      loan,\n      customMessage = '',\n      assigneeName = 'e-Potek',\n      assigneeAddress = 'info@e-potek.ch',\n      ...rest\n    },\n    { title, cta, ...rest2 },\n  ) {\n    const { variables } = this.template;\n    const ctaUrl = `${Meteor.settings.public.subdomains.app}/loans/${loan._id}`;\n\n    return {\n      variables: [\n        { name: variables.TITLE, content: title },\n        { name: variables.BODY, content: customMessage },\n        { name: variables.CTA, content: cta },\n        { name: variables.CTA_URL, content: ctaUrl },\n        { name: variables.CSS, content: styles },\n      ],\n      templateContent: [\n        {\n          name: 'body-content-1',\n          content: ReactDOMServer.renderToStaticMarkup(LoanChecklistEmail({\n            loan,\n            intl: { formatMessage: Intl.formatMessage.bind(Intl) },\n          })),\n        },\n      ],\n      senderName: assigneeName,\n      senderAddress: assigneeAddress,\n      bccAddress: assigneeAddress,\n    };\n  },\n  createIntlValues: params => ({\n    ...params,\n    today: moment().format('DD MMM YYYY'),\n  }),\n});\n\nexport default emailConfigs;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"emailHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/email/server/emailHelpers.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport Intl from 'core/utils/server/intl';\nimport {\n  FROM_DEFAULT,\n  CTA_URL_DEFAULT,\n  EMAIL_I18N_NAMESPACE,\n  EMAIL_PARTS,\n} from '../emailConstants';\nimport { ROLES } from '../../constants';\n\nconst WWW_URL = Meteor.settings.public.subdomains.www;\nconst APP_URL = Meteor.settings.public.subdomains.app;\nconst ADMIN_URL = Meteor.settings.public.subdomains.admin;\nconst PRO_URL = Meteor.settings.public.subdomains.pro;\n\n/**\n * emailFooter - Returns the default email footer for all emails\n *\n * @param {boolean} [unsubscribe=true] Whether to show an unsubscribe line or not\n *\n * @return {type} a HTML string\n */\nexport const getEmailFooter = (footerType, allowUnsubscribe) =>\n  Intl.formatMessage({\n    id: `emails.${footerType}`,\n    values: {\n      url: `<a href=\"${WWW_URL}\" target=\"_blank\" style=\"color:inherit;\">e-potek.ch</a><br />`,\n      unsubscribe: allowUnsubscribe\n        ? `<a href=\"*|UNSUB|*\" style=\"color:inherit;\">${Intl.formatMessage({\n          id: 'emails.unsubscribe',\n        })}</a>`\n        : '',\n    },\n  });\n\nexport const getEmailPart = ({\n  emailId,\n  part,\n  intlValues = {},\n  intlFallback = '',\n}) =>\n  Intl.formatMessage({\n    id: `${EMAIL_I18N_NAMESPACE}.${emailId}.${part}`,\n    values: intlValues,\n    fallback: intlFallback,\n  });\n\n/**\n * getEmailContent - Returns all the fields for an email\n *\n * @param {String} emailId an id representing what email this is, example:\n * auctionEnded, verificationRequested\n *\n * @return {Object} contains all the fields\n */\nexport const getEmailContent = (emailId, intlValues) => {\n  const subject = getEmailPart({\n    emailId,\n    part: EMAIL_PARTS.SUBJECT,\n    intlValues,\n  });\n  const title = getEmailPart({ emailId, part: EMAIL_PARTS.TITLE, intlValues });\n  const body = getEmailPart({\n    emailId,\n    part: EMAIL_PARTS.BODY,\n    intlValues: {\n      verticalSpace: '<span><br/><br/></span>',\n      ...intlValues,\n    },\n  });\n  const cta = getEmailPart({\n    emailId,\n    part: EMAIL_PARTS.CTA,\n    intlValues,\n    intlFallback: CTA_URL_DEFAULT,\n  });\n  const customFrom = getEmailPart({\n    emailId,\n    part: EMAIL_PARTS.FROM,\n    intlValues,\n    intlFallback: FROM_DEFAULT,\n  });\n\n  return {\n    subject,\n    title,\n    body,\n    cta,\n    from: customFrom,\n  };\n};\n\nexport const getAccountsUrl = path => (user, url) => {\n  const userIsUser = Roles.userIsInRole(user, ROLES.USER);\n  const userIsPro = Roles.userIsInRole(user, ROLES.PRO);\n  const userIsAdmin = Roles.userIsInRole(user, ROLES.ADMIN)\n    || Roles.userIsInRole(user, ROLES.DEV);\n  const token = url.split(`/${path}/`)[1];\n\n  if (userIsUser) {\n    return `${APP_URL}/${path}/${token}`;\n  }\n  if (userIsPro) {\n    return `${PRO_URL}/${path}/${token}`;\n  }\n  if (userIsAdmin) {\n    // Admin does not have the enroll, verify, and reset-password pages\n    // Just send them to APP\n    return `${APP_URL}/${path}/${token}`;\n  }\n\n  return url;\n};\n\n/**\n * This is a default override function for the NOTIFICATION template\n *\n * @export\n * @param {Object} params The params passed by the method\n * @param {Object} { title, body } The strings extracted from i18n files\n * @returns a template override object\n */\nexport function notificationTemplateDefaultOverride(params, { title, body }) {\n  const { variables } = this.template;\n\n  return {\n    variables: [\n      { name: variables.TITLE, content: title },\n      { name: variables.BODY, content: body },\n    ],\n  };\n}\n\n/**\n * This is a default override function for the NOTIFICATION_AND_CTA template\n *\n * @export\n * @param {Object} params The params passed by the method\n * @param {Object} { title, body, cta } The strings extracted from i18n files\n * @returns a template override object\n */\nexport function notificationAndCtaTemplateDefaultOverride(\n  params,\n  { title, body, cta },\n) {\n  const { variables } = this.template;\n\n  return {\n    variables: [\n      { name: variables.TITLE, content: title },\n      { name: variables.BODY, content: body },\n      { name: variables.CTA, content: cta },\n      { name: variables.CTA_URL, content: CTA_URL_DEFAULT },\n    ],\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"mandrill.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/email/server/mandrill.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mandrill } from 'meteor/wylio:mandrill';\nimport { Meteor } from 'meteor/meteor';\n\nimport { logError } from 'core/api/methods/index';\nimport { getEmailFooter } from './emailHelpers';\nimport { isEmailTestEnv, skipEmails } from './EmailService';\n\nexport const setupMandrill = () => {\n  let key = '';\n  if (isEmailTestEnv) {\n    key = Meteor.settings.mandrill.MANDRILL_API_KEY_TEST;\n  } else {\n    key = Meteor.settings.mandrill.MANDRILL_API_KEY;\n  }\n\n  Mandrill.config({\n    username: Meteor.settings.mandrill.MANDRILL_LOGIN, // the email address you log into Mandrill with. Only used to set MAIL_URL.\n    key, // get your Mandrill key from https://mandrillapp.com/settings/index\n    port: 587, // defaults to 465 for SMTP over TLS\n    host: 'smtps.mandrillapp.com', // the SMTP host\n    // baseUrl: 'https://mandrillapp.com/api/1.0/'  // update this in case Mandrill changes its API endpoint URL or version\n  });\n};\n\n// Used for Meteor Accounts emails\nexport const getSimpleMandrillTemplate = ({\n  templateName,\n  footerType,\n  allowUnsubscribe,\n  variables,\n}) => ({\n  template_name: templateName,\n  template_content: [\n    { name: 'footer', content: getEmailFooter(footerType, allowUnsubscribe) },\n  ],\n  merge_vars: variables,\n});\n\n// Used for all other emails\nexport const getMandrillTemplate = ({\n  templateName,\n  footerType,\n  allowUnsubscribe,\n  variables,\n  recipientAddress,\n  recipientName,\n  senderAddress,\n  senderName,\n  subject,\n  sendAt,\n  templateContent = [],\n  replyTo,\n  bccAddress,\n}) => ({\n  template_name: templateName,\n  template_content: [\n    { name: 'footer', content: getEmailFooter(footerType, allowUnsubscribe) },\n    ...templateContent,\n  ],\n  message: {\n    from_email: senderAddress,\n    from_name: senderName,\n    subject,\n    to: [{ email: recipientAddress, name: recipientName }],\n    global_merge_vars: variables,\n    headers: { 'Reply-To': replyTo || senderAddress },\n    bcc_address: bccAddress,\n  },\n  send_at: sendAt ? sendAt.toISOString() : undefined,\n});\n\nexport const renderMandrillTemplate = mandrillTemplate =>\n  Mandrill.templates.render(mandrillTemplate);\n\nexport const sendMandrillTemplate = (mandrillTemplate) => {\n  if (skipEmails) {\n    return Promise.resolve();\n  }\n\n  return new Promise((resolve, reject) => {\n    Mandrill.messages.sendTemplate(mandrillTemplate, (error, result) => {\n      if (error) {\n        logError.run({\n          error: JSON.parse(JSON.stringify(error, Object.getOwnPropertyNames(error))),\n          additionalData: ['Mandrill error'],\n        });\n        reject(error);\n      }\n      resolve(result.data[0]);\n    });\n  });\n};\n\nconst getDate30DaysAgo = () => {\n  const date = new Date();\n  date.setDate(date.getDate() - 30);\n  const dateString = date.toISOString().split('T')[0];\n  return dateString;\n};\n\nexport const getEmailsForAddress = email =>\n  new Promise((resolve, reject) =>\n    Mandrill.messages.search(\n      { query: `email:${email}`, date_from: getDate30DaysAgo() },\n      (error, result) => {\n        if (error) {\n          logError.run({\n            error: JSON.parse(JSON.stringify(error, Object.getOwnPropertyNames(error))),\n            additionalData: ['Mandrill error'],\n          });\n          resolve(error);\n        } else if (result.statusCode !== 200) {\n          resolve(result);\n        }\n        resolve(result.data);\n      },\n    ));\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/email/server/index.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport './accountsEmails';\nimport './methods';\nimport { setupMandrill } from './mandrill';\n\nsetupMandrill();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accountsEmails.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/email/server/accountsEmails.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { FROM_DEFAULT, EMAIL_IDS, EMAIL_PARTS } from '../emailConstants';\nimport EmailService from './EmailService';\n\n// Meteor default emails\n// https://themeteorchef.com/tutorials/sign-up-with-email-verification\nAccounts.emailTemplates.siteName = 'e-Potek';\nAccounts.emailTemplates.from = FROM_DEFAULT;\n\nexport const createAccountsEmailConfig = emailId => ({\n  subject: () => EmailService.getEmailPart(emailId, EMAIL_PARTS.SUBJECT),\n  html(user, url) {\n    // TODO: Make sure this doesn't block\n    const template = EmailService.getAccountsTemplate(emailId, { user, url });\n    const result = EmailService.renderTemplate(template, emailId);\n    return result.data.html;\n  },\n});\n\nAccounts.emailTemplates.verifyEmail = createAccountsEmailConfig(EMAIL_IDS.VERIFY_EMAIL);\nAccounts.emailTemplates.resetPassword = createAccountsEmailConfig(EMAIL_IDS.RESET_PASSWORD);\nAccounts.emailTemplates.enrollAccount = createAccountsEmailConfig(EMAIL_IDS.ENROLL_ACCOUNT);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"emailListeners.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/email/server/emailListeners.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport UserService from 'core/api/users/server/UserService';\nimport ServerEventService from '../../events/server/ServerEventService';\nimport { requestLoanVerification, submitContactForm } from '../../methods';\nimport { Loans } from '../..';\nimport { EMAIL_IDS, INTERNAL_EMAIL } from '../emailConstants';\nimport { sendEmail, sendEmailToAddress } from '../methodDefinitions';\n\nServerEventService.addAfterMethodListener(\n  requestLoanVerification,\n  ({ context, params }) => {\n    context.unblock();\n    const { loanId } = params;\n    const { userId } = Loans.findOne(loanId);\n\n    return sendEmail.run({\n      emailId: EMAIL_IDS.VERIFICATION_REQUESTED,\n      userId,\n      params,\n    });\n  },\n);\n\nServerEventService.addAfterMethodListener(\n  submitContactForm,\n  ({ context, params }) => {\n    context.unblock();\n    return sendEmailToAddress.run({\n      emailId: EMAIL_IDS.CONTACT_US,\n      address: params.email,\n      params,\n    });\n  },\n);\n\nServerEventService.addAfterMethodListener(\n  submitContactForm,\n  ({ context, params }) => {\n    context.unblock();\n    return sendEmailToAddress.run({\n      emailId: EMAIL_IDS.CONTACT_US_ADMIN,\n      address: INTERNAL_EMAIL,\n      params,\n    });\n  },\n);\n\nServerEventService.addAfterMethodListener(\n  sendEmail,\n  ({ context, params: { emailId, params, userId } }) => {\n    context.unblock();\n    const emailsToWatch = [\n      EMAIL_IDS.INVITE_USER_TO_PROMOTION,\n      EMAIL_IDS.INVITE_USER_TO_PROPERTY,\n      EMAIL_IDS.REFER_USER,\n    ];\n\n    if (!emailsToWatch.includes(emailId)) {\n      return;\n    }\n\n    if (!params.proUserId) {\n      return;\n    }\n\n    const { name, email } = UserService.fetchOne({\n      $filters: { _id: userId },\n      name: 1,\n      email: 1,\n    });\n\n    return sendEmail.run({\n      emailId: EMAIL_IDS.CONFIRM_USER_INVITATION,\n      userId: params.proUserId,\n      params: { name, email },\n    });\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"files\":{\"fileConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/files/fileConstants.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nexport const FILE_STATUS = {\n  UNVERIFIED: 'UNVERIFIED',\n  VALID: 'VALID',\n  ERROR: 'ERROR',\n};\n\nexport const ALLOWED_FILE_TYPES = [\n  'image/png',\n  'image/jpeg',\n  'application/pdf',\n  'application/vnd.ms-excel',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n];\n\nexport const ONE_KB = 1024;\n\n// 50 MB (use null for unlimited)\nexport const MAX_FILE_SIZE = 50 * ONE_KB * ONE_KB;\n\nexport const SLINGSHOT_DIRECTIVE_NAME = 'exoscale';\n\nexport const EXOSCALE_PATH = 'sos-ch-dk-2.exo.io';\n\nexport const BUCKET_NAME = Meteor.isServer\n  ? Meteor.settings.storage.bucketName\n  : '';\n\nexport const TEST_BUCKET_NAME = 'e-potek-test-bucket';\n\nexport const OBJECT_STORAGE_PATH = `https://${BUCKET_NAME}.${EXOSCALE_PATH}`;\n\nexport const OBJECT_STORAGE_REGION = 'CH-DK-2';\n\nexport const S3_ENDPOINT = 'https://sos-ch-dk-2.exo.io';\n\nexport const PROPERTY_DOCUMENTS = {\n  COOWNERSHIP_AGREEMENT: 'COOWNERSHIP_AGREEMENT',\n  COOWNERSHIP_ALLOCATION_AGREEMENT: 'COOWNERSHIP_ALLOCATION_AGREEMENT',\n  FIRE_AND_WATER_INSURANCE: 'FIRE_AND_WATER_INSURANCE',\n  INVESTEMENT_PROPERTY_RENTAL_STATEMENT: 'INVESTMENT_PROPERTY_RENTAL_STATEMENT',\n  INVESTEMENT_PROPERTY_SERVICE_CHARGE_SETTLEMENT:\n    'INVESTEMENT_PROPERTY_SERVICE_CHARGE_SETTLEMENT',\n  INVESTEMENT_PROPERTY_WORKS_HISTORY: 'INVESTEMENT_PROPERTY_WORKS_HISTORY',\n  INVESTMENT_PROPERTY_CONDOMINIUM_OWNERSHIP_DIVISION_REGISTER:\n    'INVESTMENT_PROPERTY_CONDOMINIUM_OWNERSHIP_DIVISION_REGISTER',\n  INVESTMENT_PROPERTY_CONDOMINIUM_REGULATION:\n    'INVESTMENT_PROPERTY_CONDOMINIUM_REGULATION',\n  INVESTMENT_PROPERTY_RENT_JUSTIFICATION:\n    'INVESTMENT_PROPERTY_RENT_JUSTIFICATION',\n  LAND_REGISTER_EXTRACT: 'LAND_REGISTER_EXTRACT',\n  PROPERTY_FUTURE_WORKS: 'PROPERTY_FUTURE_WORKS',\n  PROPERTY_MINERGIE_CERTIFICATE: 'PROPERTY_MINERGIE_CERTIFICATE',\n  PROPERTY_MARKETING_BROCHURE: 'PROPERTY_MARKETING_BROCHURE',\n  PROPERTY_PICTURES: 'PROPERTY_PICTURES',\n  PROPERTY_PLANS: 'PROPERTY_PLANS',\n  PROPERTY_VOLUME: 'PROPERTY_VOLUME',\n  PROPERTY_WORKS_QUOTE: 'PROPERTY_WORKS_QUOTE',\n  PURCHASE_CONTRACT: 'PURCHASE_CONTRACT',\n  SHARE_BUILDING_PERMIT: 'SHARE_BUILDING_PERMIT',\n  SHARE_EASEMENTS: 'SHARE_EASEMENTS',\n  SHARE_FINANCIAL_PLAN: 'SHARE_FINANCIAL_PLAN',\n  SHARE_GC_CONTRACT: 'SHARE_GC_CONTRACT',\n  SHARE_GC_QUOTE_BY_BCC: 'SHARE_GC_QUOTE_BY_BCC',\n  SHARE_INSURANCE_CERTIFICATE: 'SHARE_INSURANCE_CERTIFICATE',\n  SHARE_PLANS: 'SHARE_PLANS',\n  SHARE_WORKS: 'SHARE_WORKS',\n};\n\nexport const BORROWER_DOCUMENTS = {\n  BONUSES: 'BONUSES',\n  CURRENT_MORTGAGES_INTERESTS_STATEMENT: 'CURRENT_MORTGAGE_INTERESTS_STATEMENT',\n  CURRENT_MORTGAGES: 'CURRENT_MORTGAGES',\n  DEBT_COLLECTION_REGISTER_EXTRACT: 'DEBT_COLLECTION_REGISTER_EXTRACT',\n  DIVORCE_RULING: 'DIVORCE_RULING',\n  EXPENSES_JUSTIFICATION: 'EXPENSES_JUSTIFICATION',\n  IDENTITY: 'IDENTITY',\n  LAST_SALARIES: 'LAST_SALARIES',\n  LEGITIMATION_CARD: 'LEGITIMATION_CARD',\n  OTHER_FORTUNE_JUSTIFICATION: 'OTHER_FORTUNE_JUSTIFICATION',\n  OTHER_INCOME_JUSTIFICATION: 'OTHER_INCOME_JUSTIFICATION',\n  OWN_COMPANY_COMMERCIAL_REGISTER: 'OWN_COMPANY_COMMERCIAL_REGISTER',\n  OWN_COMPANY_FINANCIAL_STATEMENTS: 'OWN_COMPANY_FINANCIAL_STATEMENTS',\n  OWN_FUNDS_JUSTIFICATION: 'OWN_FUND_JUSTIFICATION',\n  PENSION_FUND_YEARLY_STATEMENT: 'PENSION_FUND_YEARLY_STATEMENT',\n  RESIDENCY_PERMIT: 'RESIDENCY_PERMIT',\n  SALARY_CERTIFICATE: 'SALARY_CERTIFICATE',\n  TAX_STATEMENT: 'TAX_STATEMENT',\n  TAXES: 'TAXES',\n  THIRD_PILLAR_ACCOUNTS: 'THIRD_PILLAR_ACCOUNTS',\n  WITHDRAWAL_JUSTIFICATION: 'WITHDRAWAL_JUSTIFICATION',\n};\n\nexport const LOAN_DOCUMENTS = {\n  CONTRACT: 'CONTRACT',\n  REIMBURSEMENT_STATEMENT: 'REIMBURSEMENT_STATEMENT',\n  SIGNED_CONTRACT: 'SIGNED_CONTRACT',\n  SIGNED_MANDATE: 'SIGNED_MANDATE',\n};\n\nexport const DOCUMENTS = {\n  ...PROPERTY_DOCUMENTS,\n  ...BORROWER_DOCUMENTS,\n  ...LOAN_DOCUMENTS,\n  OTHER: 'OTHER',\n};\n\nexport const DOCUMENTS_CATEGORIES = {\n  PERSONAL_DOCUMENTS: [\n    BORROWER_DOCUMENTS.IDENTITY,\n    BORROWER_DOCUMENTS.RESIDENCY_PERMIT,\n    BORROWER_DOCUMENTS.LEGITIMATION_CARD,\n    BORROWER_DOCUMENTS.DEBT_COLLECTION_REGISTER_EXTRACT,\n    BORROWER_DOCUMENTS.DIVORCE_RULING,\n  ],\n  INCOMES_AND_EXPENSES: [\n    BORROWER_DOCUMENTS.TAXES,\n    BORROWER_DOCUMENTS.SALARY_CERTIFICATE,\n    BORROWER_DOCUMENTS.LAST_SALARIES,\n    BORROWER_DOCUMENTS.BONUSES,\n    BORROWER_DOCUMENTS.OTHER_INCOME_JUSTIFICATION,\n    BORROWER_DOCUMENTS.EXPENSES_JUSTIFICATION,\n    BORROWER_DOCUMENTS.CURRENT_MORTGAGES,\n  ],\n  FORTUNE_AND_OWN_FUNDS: [\n    BORROWER_DOCUMENTS.OWN_FUNDS_JUSTIFICATION,\n    BORROWER_DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION,\n    BORROWER_DOCUMENTS.OWN_COMPANY_FINANCIAL_STATEMENTS,\n  ],\n  RETIREMENT: [\n    BORROWER_DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT,\n    BORROWER_DOCUMENTS.THIRD_PILLAR_ACCOUNTS,\n    BORROWER_DOCUMENTS.WITHDRAWAL_JUSTIFICATION,\n  ],\n  HOUSING: [\n    PROPERTY_DOCUMENTS.PROPERTY_MARKETING_BROCHURE,\n    PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    PROPERTY_DOCUMENTS.PROPERTY_PLANS,\n    PROPERTY_DOCUMENTS.PROPERTY_VOLUME,\n    PROPERTY_DOCUMENTS.PROPERTY_MINERGIE_CERTIFICATE,\n    PROPERTY_DOCUMENTS.FIRE_AND_WATER_INSURANCE,\n    PROPERTY_DOCUMENTS.PROPERTY_WORKS_QUOTE,\n    PROPERTY_DOCUMENTS.COOWNERSHIP_AGREEMENT,\n    PROPERTY_DOCUMENTS.COOWNERSHIP_ALLOCATION_AGREEMENT,\n    PROPERTY_DOCUMENTS.PROPERTY_FUTURE_WORKS,\n    PROPERTY_DOCUMENTS.INVESTEMENT_PROPERTY_RENTAL_STATEMENT,\n    PROPERTY_DOCUMENTS.INVESTEMENT_PROPERTY_SERVICE_CHARGE_SETTLEMENT,\n    PROPERTY_DOCUMENTS.PURCHASE_CONTRACT,\n    PROPERTY_DOCUMENTS.LAND_REGISTER_EXTRACT,\n  ],\n  SHARE: [\n    PROPERTY_DOCUMENTS.SHARE_BUILDING_PERMIT,\n    PROPERTY_DOCUMENTS.SHARE_EASEMENTS,\n    PROPERTY_DOCUMENTS.SHARE_FINANCIAL_PLAN,\n    PROPERTY_DOCUMENTS.SHARE_GC_CONTRACT,\n    PROPERTY_DOCUMENTS.SHARE_GC_QUOTE_BY_BCC,\n    PROPERTY_DOCUMENTS.SHARE_INSURANCE_CERTIFICATE,\n    PROPERTY_DOCUMENTS.SHARE_PLANS,\n    PROPERTY_DOCUMENTS.SHARE_WORKS,\n  ],\n};\n\nexport const DOCUMENTS_WITH_TOOLTIP = [\n  DOCUMENTS.BONUSES,\n  DOCUMENTS.BUYERS_CONTRACT,\n  DOCUMENTS.COOWNERSHIP_AGREEMENT,\n  DOCUMENTS.COOWNERSHIP_ALLOCATION_AGREEMENT,\n  DOCUMENTS.CURRENT_MORTGAGES,\n  DOCUMENTS.DEBT_COLLECTION_REGISTER_EXTRACT,\n  DOCUMENTS.EXPENSES_JUSTIFICATION,\n  DOCUMENTS.FIRE_AND_WATER_INSURANCE,\n  DOCUMENTS.IDENTITY,\n  DOCUMENTS.INVESTEMENT_PROPERTY_RENTAL_STATEMENT,\n  DOCUMENTS.INVESTEMENT_PROPERTY_SERVICE_CHARGE_SETTLEMENT,\n  DOCUMENTS.PURCHASE_CONTRACT,\n  DOCUMENTS.LAST_SALARIES,\n  DOCUMENTS.LEGITIMATION_CARD,\n  DOCUMENTS.OTHER_INCOME_JUSTIFICATION,\n  DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION,\n  DOCUMENTS.OWN_COMPANY_FINANCIAL_STATEMENTS,\n  DOCUMENTS.OWN_FUNDS_JUSTIFICATION,\n  DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT,\n  DOCUMENTS.PROPERTY_MARKETING_BROCHURE,\n  DOCUMENTS.PROPERTY_PICTURES,\n  DOCUMENTS.PROPERTY_VOLUME,\n  DOCUMENTS.PROPERTY_WORKS_QUOTE,\n  DOCUMENTS.PROPERTY_FUTURE_WORKS,\n  DOCUMENTS.REIMBURSEMENT_STATEMENT,\n  DOCUMENTS.RESIDENCY_PERMIT,\n  DOCUMENTS.SIGNED_CONTRACT,\n  DOCUMENTS.TAXES,\n  DOCUMENTS.THIRD_PILLAR_ACCOUNTS,\n  DOCUMENTS.WITHDRAWAL_JUSTIFICATION,\n];\n\nexport const S3_ACLS = {\n  PRIVATE: 'private',\n  PUBLIC_READ: 'public-read',\n  PUBLIC_READ_WRITE: 'public-read-write',\n  AUTHENTICATED_READ: 'authenticated-read',\n  BUCKET_OWNER_READ: 'bucket-owner-read',\n  BUCKET_OWNER_FULL_CONTROL: 'bucket-owner-full-control',\n  LOG_DELIVERY_WRITE: 'log-delivery-write',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/files/methodDefinitions.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Method } from '../methods/methods';\n\nexport const deleteFile = new Method({\n  name: 'deleteFile',\n  params: {\n    collection: String,\n    docId: String,\n    fileKey: String,\n  },\n});\n\nexport const setFileStatus = new Method({\n  name: 'setFileStatus',\n  params: {\n    fileKey: String,\n    newStatus: String,\n  },\n});\n\nexport const setFileError = new Method({\n  name: 'setFileError',\n  params: {\n    error: String,\n    fileKey: String,\n  },\n});\n\nexport const downloadFile = new Method({\n  name: 'downloadFile',\n  params: {\n    key: String,\n  },\n});\n\nexport const getSignedUrl = new Method({\n  name: 'getSignedUrl',\n  params: {\n    key: String,\n  },\n});\n\nexport const updateDocumentsCache = new Method({\n  name: 'updateDocumentsCache',\n  params: {\n    docId: String,\n    collection: String,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"documents.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/files/documents.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport {\n  PROPERTIES_COLLECTION,\n  BORROWERS_COLLECTION,\n  LOANS_COLLECTION,\n} from '../constants';\nimport {\n  DOCUMENTS,\n  DOCUMENTS_WITH_TOOLTIP,\n  BORROWER_DOCUMENTS,\n  PROPERTY_DOCUMENTS,\n  LOAN_DOCUMENTS,\n} from './fileConstants';\n\nexport const documentHasTooltip = documentId =>\n  !DOCUMENTS_WITH_TOOLTIP.some(id => documentId === id);\n\nconst makeAllObjectDocuments = documents =>\n  Object.values(documents).map(id => ({\n    id,\n    noTooltips: documentHasTooltip(id),\n  }));\n\nexport const allDocuments = ({ doc, collection }) => {\n  const s3Documents = doc.documents\n    ? Object.keys(doc.documents).map(key => ({ id: key }))\n    : [];\n  let documents = [];\n  switch (collection) {\n  case BORROWERS_COLLECTION:\n    documents = makeAllObjectDocuments(BORROWER_DOCUMENTS);\n    break;\n  case PROPERTIES_COLLECTION:\n    documents = makeAllObjectDocuments(PROPERTY_DOCUMENTS);\n    break;\n  case LOANS_COLLECTION:\n    documents = makeAllObjectDocuments(LOAN_DOCUMENTS);\n    break;\n  default:\n    break;\n  }\n\n  const otherAdditionalDocuments = documents.filter(({ id }) => !doc.additionalDocuments.some(document => id === document.id));\n  const legacyCustomDocuments = s3Documents.filter(({ id }) =>\n    !doc.additionalDocuments.some(document => id === document.id)\n      && !documents.some(document => id === document.id));\n\n  return doc.additionalDocuments && doc.additionalDocuments.length > 0\n    ? [\n      ...doc.additionalDocuments,\n      ...otherAdditionalDocuments,\n      ...legacyCustomDocuments,\n    ]\n    : documents;\n};\n\nconst requiredByAdminOnly = ({ requiredByAdmin }) => requiredByAdmin !== false;\n\nconst formatAdditionalDoc = additionalDoc => ({\n  ...additionalDoc,\n  required: true,\n  noTooltips: documentHasTooltip(additionalDoc.id),\n});\n\nconst makeGetDocuments = collection => ({ loan, id }, options = {}) => {\n  const { doc } = options;\n\n  const isLoans = collection === LOANS_COLLECTION;\n  if (!id && !isLoans) {\n    return [];\n  }\n\n  const document = doc || (!isLoans && loan[collection].find(({ _id }) => _id === id)) || loan;\n  const additionalDocumentsExist = document\n    && document.additionalDocuments\n    && document.additionalDocuments.length > 0;\n\n  return [\n    ...(additionalDocumentsExist\n      ? document.additionalDocuments\n        .filter(requiredByAdminOnly)\n        .map(formatAdditionalDoc)\n      : []),\n    { id: DOCUMENTS.OTHER, required: false, noTooltips: true },\n  ];\n};\n\nexport const getPropertyDocuments = makeGetDocuments(PROPERTIES_COLLECTION);\nexport const getBorrowerDocuments = makeGetDocuments(BORROWERS_COLLECTION);\nexport const getLoanDocuments = makeGetDocuments(LOANS_COLLECTION);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"fileHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/files/fileHelpers.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { getPercent } from '../../utils/general';\nimport { FILE_STATUS } from './fileConstants';\n\nconst documentIsRequired = required => required !== false;\n\nconst getDocumentsToCount = (\n  documentArray: Array<Object>,\n  doc: Object,\n  checkDocumentStatus?: boolean,\n): Array<Object> => {\n  if (!doc || !doc.documents) {\n    return [undefined];\n  }\n  const { documents } = doc;\n\n  return documentArray.reduce(\n    (documentsToCount, { required, id: documentId }) => {\n      if (!documentIsRequired(required)) {\n        // Don't count this document\n        return documentsToCount;\n      }\n\n      if (!documents[documentId]) {\n        // No document has been added yet, count this one, and as todo\n        return [...documentsToCount, undefined];\n      }\n\n      if (checkDocumentStatus) {\n        // Make sure all documents have a valid status\n        const allFilesAreValid = documents[documentId].every(({ status }) => status === FILE_STATUS.VALID);\n        return [...documentsToCount, allFilesAreValid ? true : undefined];\n      }\n\n      return [...documentsToCount, documents[documentId]];\n    },\n    [],\n  );\n};\n\n/**\n * filesPercent - Determines the completion rate of file upload for a given\n * step, doc and array of files\n *\n * @param {object} doc           The mongoDB document where files are saved\n * @param {function} fileArray   Array of files\n\n *\n * @return {number} a value between 0 and 1 indicating the percentage of\n * completion, 1 is complete, 0 is not started\n */\nexport const filesPercent = ({ fileArray, doc, checkValidity }) => {\n  const documentsToCount = getDocumentsToCount(fileArray, doc, checkValidity);\n  return {\n    percent: getPercent(documentsToCount),\n    count: documentsToCount.length,\n  };\n};\n\nconst documentExists = (doc, id) =>\n  doc && doc.documents && doc.documents[id] && doc.documents[id].length > 0;\n\nexport const getMissingDocumentIds = ({ fileArray, doc }) => {\n  const ids = fileArray\n    .filter(({ required, id }) =>\n      documentIsRequired(required) && !documentExists(doc, id))\n    .map(({ id }) => id);\n  return ids;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"FileService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/files/server/FileService.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport { readFileBuffer, removeFile } from 'core/utils/filesUtils';\nimport { Meteor } from 'meteor/meteor';\nimport { HTTP_STATUS_CODES } from 'core/api/RESTAPI/server/restApiConstants';\nimport { FILE_STATUS, S3_ACLS } from '../fileConstants';\nimport S3Service from './S3Service';\nimport { getS3FileKey } from './meteor-slingshot-server';\n\nclass FileService {\n  listFilesForDoc = (docId, subdocument) => {\n    const prefix = subdocument ? `${docId}/${subdocument}` : docId;\n    return S3Service.listObjectsWithMetadata(prefix).then(results =>\n      results.map(this.formatFile));\n  };\n\n  listFilesForDocByCategory = (docId, subdocument) =>\n    this.listFilesForDoc(docId, subdocument).then(this.groupFilesByCategory);\n\n  setFileStatus = (key, status) => {\n    if (status === FILE_STATUS.VALID) {\n      return S3Service.updateMetadata(key, { status, message: '' });\n    }\n\n    return S3Service.updateMetadata(key, { status });\n  };\n\n  setFileError = (key, errorMessage) =>\n    S3Service.updateMetadata(key, {\n      status: FILE_STATUS.ERROR,\n      message: errorMessage,\n    });\n\n  setFileValid = key =>\n    S3Service.updateMetadata(key, { status: FILE_STATUS.VALID, message: '' });\n\n  deleteFile = S3Service.deleteObject;\n\n  deleteAllFilesForDoc = (docId, subdocument) => {\n    const prefix = subdocument ? `${docId}/${subdocument}` : docId;\n    return S3Service.deleteObjectsWithPrefix(prefix);\n  };\n\n  groupFilesByCategory = files =>\n    files.reduce((groupedFiles, file) => {\n      const category = file.Key.split('/')[1];\n      const currentCategoryFiles = groupedFiles[category] || [];\n      return { ...groupedFiles, [category]: [...currentCategoryFiles, file] };\n    }, {});\n\n  updateDocumentsCache = ({ docId, collection }) =>\n    this.listFilesForDocByCategory(docId).then(documents =>\n      Mongo.Collection.get(collection).update(\n        { _id: docId },\n        { $set: { documents } },\n      ));\n\n  formatFile = (file) => {\n    let fileName = file.name;\n    if (!fileName) {\n      const keyParts = file.Key.split('/');\n      fileName = keyParts[keyParts.length - 1];\n    }\n    return { ...file, name: fileName };\n  };\n\n  uploadFileAPI = ({ file, docId, id, collection }) => {\n    const { originalFilename, path } = file;\n    const key = getS3FileKey({ name: originalFilename }, { docId, id });\n\n    return S3Service.putObject(\n      readFileBuffer(path),\n      key,\n      {},\n      S3_ACLS.PUBLIC_READ_WRITE,\n    )\n      .then(() => this.updateDocumentsCache({ docId, collection }))\n      .then(() => this.listFilesForDoc(docId))\n      .then((files) => {\n        removeFile(path);\n        return { files };\n      });\n  };\n\n  deleteFileAPI = ({ docId, collection, key }) =>\n    this.listFilesForDoc(docId)\n      .then((files) => {\n        const keyExists = files.map(({ Key }) => Key).some(Key => Key === key);\n        if (!keyExists) {\n          throw new Meteor.Error(\n            HTTP_STATUS_CODES.NOT_FOUND,\n            `Key ${key} not found`,\n          );\n        }\n\n        return S3Service.deleteObject(key);\n      })\n      .then(() => this.updateDocumentsCache({ docId, collection }))\n      .then(() => this.listFilesForDoc(docId))\n      .then(files => ({ deletedFiles: [{ Key: key }], remainingFiles: files }));\n}\n\nexport default new FileService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"S3Service.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/files/server/S3Service.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport AWS from 'aws-sdk';\nimport { Roles } from 'meteor/alanning:roles';\nimport { Loans, Borrowers, Properties, Promotions } from '../..';\nimport {\n  TEST_BUCKET_NAME,\n  S3_ENDPOINT,\n  OBJECT_STORAGE_PATH,\n} from '../fileConstants';\nimport { PROPERTY_CATEGORY } from '../../constants';\n\nconst { API_KEY, SECRET_KEY } = Meteor.settings.exoscale;\n\nclass S3Service {\n  constructor() {\n    this.setupS3();\n    this.setBucket();\n  }\n\n  setupS3 = () => {\n    // API Ref: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html\n    AWS.config.update({ accessKeyId: API_KEY, secretAccessKey: SECRET_KEY });\n    this.s3 = new AWS.S3({ signatureVersion: 'v4', endpoint: S3_ENDPOINT });\n  };\n\n  setBucket = () => {\n    if (Meteor.isTest || Meteor.isAppTest) {\n      this.params = { Bucket: TEST_BUCKET_NAME };\n    } else {\n      this.params = { Bucket: Meteor.settings.storage.bucketName };\n    }\n  };\n\n  makeParams = (extraParams = {}) => ({ ...this.params, ...extraParams });\n\n  isAllowedToAccess = (key) => {\n    const loggedInUser = Meteor.userId();\n    if (\n      Roles.userIsInRole(loggedInUser, 'admin')\n      || Roles.userIsInRole(loggedInUser, 'dev')\n    ) {\n      return true;\n    }\n\n    // Check if this user is the owner of the document\n    const keyId = key.split('/')[0];\n    const loanFound = !!Loans.findOne({\n      _id: keyId,\n      userId: loggedInUser,\n    });\n\n    if (loanFound) {\n      return true;\n    }\n\n    const borrowerFound = !!Borrowers.findOne({\n      _id: keyId,\n      userId: loggedInUser,\n    });\n\n    if (borrowerFound) {\n      return true;\n    }\n\n    const property = Properties.findOne({ _id: keyId });\n\n    if (property) {\n      if (!property.category || property.category === PROPERTY_CATEGORY.USER) {\n        if (property.userId === loggedInUser) {\n          return true;\n        }\n        throw new Meteor.Error('Unauthorized download');\n      }\n\n      return true;\n    }\n\n    const promotionFound = !!Promotions.findOne({ _id: keyId });\n\n    if (promotionFound) {\n      return true;\n    }\n\n    throw new Meteor.Error('Unauthorized download');\n  };\n\n  putObject = (binaryData, Key, Metadata, ACL = 'bucket-owner-full-control') =>\n    this.callS3Method('putObject', {\n      Body: binaryData,\n      Key,\n      Metadata,\n      ACL,\n    });\n\n  deleteObject = Key => this.callS3Method('deleteObject', { Key });\n\n  deleteObjects = keys =>\n    this.callS3Method('deleteObjects', {\n      Delete: { Objects: keys.map(Key => ({ Key })) },\n    });\n\n  deleteObjectsWithPrefix = prefix =>\n    this.listObjects(prefix)\n      .then(results => results.map(({ Key }) => Key))\n      .then(this.deleteObjects);\n\n  getObject = Key => this.callS3Method('getObject', { Key });\n\n  listObjects = Prefix =>\n    this.callS3Method('listObjectsV2', { Prefix }).then(results => results.Contents);\n\n  listObjectsWithMetadata = Prefix =>\n    this.listObjects(Prefix).then(results =>\n      Promise.all(results.map(object =>\n        this.headObject(object.Key).then(({ Metadata, ContentDisposition }) => {\n          const name = ContentDisposition\n                && decodeURIComponent(ContentDisposition.match(/filename=\"(.*)\"/)[1]);\n          return {\n            ...object,\n            ...Metadata,\n            url: this.buildFileUrl(object),\n            name,\n          };\n        }))));\n\n  copyObject = params => this.callS3Method('copyObject', params);\n\n  headObject = Key => this.callS3Method('headObject', { Key });\n\n  callS3Method = (methodName, params) =>\n    this.promisify(methodName, this.makeParams(params));\n\n  promisify = (methodName, params) =>\n    new Promise((resolve, reject) =>\n      this.s3[methodName](params, (err, data) =>\n        (err ? reject(err) : resolve(data))));\n\n  updateMetadata = (key, newMetadata) =>\n    this.headObject(key).then(({ Metadata: oldMetaData }) =>\n      this.copyObject({\n        Key: key,\n        Metadata: { ...oldMetaData, ...newMetadata },\n        CopySource: `/${this.params.Bucket}/${key}`,\n        MetadataDirective: 'REPLACE',\n      }));\n\n  buildFileUrl = file => `${OBJECT_STORAGE_PATH}/${file.Key}`;\n\n  makeSignedUrl = Key =>\n    this.s3.getSignedUrl('getObject', {\n      Bucket: this.params.Bucket,\n      Key,\n      Expires: 180,\n    });\n}\n\nexport default new S3Service();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"meteor-slingshot-server.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/files/server/meteor-slingshot-server.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Slingshot } from 'meteor/edgee:slingshot';\n\nimport { ROLES } from 'core/api/constants';\nimport { COLLECTIONS } from '../../constants';\nimport SecurityService from '../../security';\nimport {\n  SLINGSHOT_DIRECTIVE_NAME,\n  MAX_FILE_SIZE,\n  ALLOWED_FILE_TYPES,\n} from '../fileConstants';\nimport uploadDirective from './uploadDirective';\n\nexport const getS3FileKey = (file, { docId, id }) =>\n  `${docId}/${id}/${file.name\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')}`;\n\nSlingshot.createDirective(SLINGSHOT_DIRECTIVE_NAME, uploadDirective, {\n  maxSize: MAX_FILE_SIZE,\n  allowedFileTypes: ALLOWED_FILE_TYPES,\n  authorize(file, { collection, docId }) {\n    // Don't use arrow function, this is the current object here\n\n    // Check for devs and admins\n    if (\n      SecurityService.hasMinimumRole({ userId: this.userId, role: ROLES.ADMIN })\n    ) {\n      return true;\n    }\n\n    // Deny uploads if user is not logged in.\n    if (!this.userId) {\n      throw new Meteor.Error(\n        'Login Required',\n        'Please login before uploading files',\n      );\n    }\n\n    if (!Object.values(COLLECTIONS).includes(collection)) {\n      throw new Meteor.Error('Invalid collection', \"Collection doesn't exist\");\n    }\n\n    SecurityService.isAllowedToModifyFiles({\n      collection,\n      docId,\n      userId: this.userId,\n      fileKey: docId,\n    });\n\n    return true;\n  },\n  key: getS3FileKey,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"uploadDirective.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/files/server/uploadDirective.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Slingshot } from 'meteor/edgee:slingshot';\nimport { _ } from 'meteor/underscore';\n\nimport crypto from 'crypto';\n\nimport {\n  OBJECT_STORAGE_PATH,\n  BUCKET_NAME,\n  OBJECT_STORAGE_REGION,\n  FILE_STATUS,\n  S3_ACLS,\n  MAX_FILE_SIZE,\n  ONE_KB,\n} from '../fileConstants';\n\nconst { API_KEY, SECRET_KEY } = Meteor.settings.exoscale;\n\nconst FIVE_MINUTES = 5 * 60 * 1000;\n\nconst hmac256 = (key, data, encoding) =>\n  crypto\n    .createHmac('sha256', key)\n    .update(Buffer.from(data).toString('utf-8'))\n    .digest(encoding);\n\nconst formatNumber = (num, digits) => {\n  const string = String(num);\n  return Array(digits - string.length + 1)\n    .join('0')\n    .concat(string);\n};\n\nconst exoscaleStorageService = {\n  accessId: 'AWSAccessKeyId',\n  secretKey: 'AWSSecretAccessKey',\n\n  directiveMatch: {\n    bucket: String,\n    bucketUrl: Match.OneOf(String, Function),\n\n    region: String,\n\n    AWSAccessKeyId: String,\n    AWSSecretAccessKey: String,\n\n    acl: Match.Optional(Match.Where((acl) => {\n      check(acl, String);\n\n      return Object.values(S3_ACLS).indexOf(acl) >= 0;\n    })),\n\n    key: Match.OneOf(String, Function),\n\n    expire: Match.Where((expire) => {\n      check(expire, Number);\n\n      return expire > 0;\n    }),\n\n    cacheControl: Match.Optional(String),\n    contentDisposition: Match.Optional(Match.OneOf(String, Function, null)),\n\n    'x-amz-meta-status': Match.Optional(String),\n  },\n\n  directiveDefault: {\n    bucket: BUCKET_NAME,\n    bucketUrl: OBJECT_STORAGE_PATH,\n    region: OBJECT_STORAGE_REGION,\n    expire: FIVE_MINUTES,\n    AWSAccessKeyId: API_KEY,\n    AWSSecretAccessKey: SECRET_KEY,\n    acl: 'private',\n  },\n\n  getContentDisposition(method, directive, file, meta) {\n    let getContentDisposition = directive.contentDisposition;\n\n    if (!_.isFunction(getContentDisposition)) {\n      getContentDisposition = function () {\n        const filename = file.name && encodeURIComponent(file.name);\n\n        return (\n          directive.contentDisposition\n          || (filename\n            && `inline; filename=\"${filename}\"; filename*=utf-8''${filename}`)\n        );\n      };\n    }\n\n    return getContentDisposition.call(method, file, meta);\n  },\n\n  getMaxSize(directive, meta) {\n    // Only allow client maxSizes that are smaller than server defined maxSize\n    if (meta.maxSize && meta.maxSize <= directive.maxSize) {\n      return meta.maxSize;\n    }\n\n    return directive.maxSize || MAX_FILE_SIZE;\n  },\n\n  /**\n   *\n   * @param {{userId: String}} method\n   * @param {Directive} directive\n   * @param {FileInfo} file\n   * @param {Object} [meta]\n   *\n   * @returns {UploadInstructions}\n   */\n\n  upload(method, directive, file, meta) {\n    const maxSize = this.getMaxSize(directive, meta);\n    const policy = new Slingshot.StoragePolicy()\n      .expireIn(directive.expire)\n      .contentLength(0, Math.min(file.size, maxSize));\n\n    if (file.size > maxSize) {\n      throw new Meteor.Error(`Votre fichier ne peut pas dépasser ${maxSize\n          / ONE_KB}kb, essayez de réduire la résolution du fichier, ou de le compresser à l'aide de tinyjpg.com`);\n    }\n\n    const payload = {\n      key: _.isFunction(directive.key)\n        ? directive.key.call(method, file, meta)\n        : directive.key,\n\n      bucket: directive.bucket,\n\n      'Content-Type': file.type,\n      acl: meta.acl || directive.acl,\n\n      'Cache-Control': directive.cacheControl,\n      'Content-Disposition': this.getContentDisposition(\n        method,\n        directive,\n        file,\n        meta,\n      ),\n      'x-amz-meta-status': FILE_STATUS.UNVERIFIED,\n    };\n\n    const bucketUrl = _.isFunction(directive.bucketUrl)\n      ? directive.bucketUrl(directive.bucket, directive.region)\n      : directive.bucketUrl;\n\n    const downloadUrl = [directive.cdn || bucketUrl, payload.key]\n      .map(part => part.replace(/\\/+$/, ''))\n      .join('/');\n\n    this.applySignature(payload, policy, directive);\n\n    return {\n      upload: bucketUrl,\n      download: downloadUrl,\n      postData: [\n        {\n          name: 'key',\n          value: payload.key,\n        },\n      ].concat(_.chain(payload)\n        .omit('key')\n        .map((value, name) =>\n          !_.isUndefined(value) && {\n            name,\n            value,\n          })\n        .compact()\n        .value()),\n    };\n  },\n\n  /** Applies signature an upload payload\n   *\n   * @param {Object} payload - Data to be upload along with file\n   * @param {Slingshot.StoragePolicy} policy\n   * @param {Directive} directive\n   */\n\n  applySignature(payload, policy, directive) {\n    const now = new Date();\n\n    const today = now.getUTCFullYear()\n      + formatNumber(now.getUTCMonth() + 1, 2)\n      + formatNumber(now.getUTCDate(), 2);\n\n    const service = 's3';\n\n    _.extend(payload, {\n      'x-amz-algorithm': 'AWS4-HMAC-SHA256',\n      'x-amz-credential': [\n        directive[this.accessId],\n        today,\n        directive.region,\n        service,\n        'aws4_request',\n      ].join('/'),\n      'x-amz-date': `${today}T000000Z`,\n    });\n\n    const matchedPolicy = policy.match(payload);\n    const base64Policy = matchedPolicy.stringify();\n    const jsonPolicy = JSON.parse(matchedPolicy.stringify('utf-8'));\n\n    payload.policy = base64Policy;\n    payload['x-amz-signature'] = this.signAwsV4(\n      payload.policy,\n      directive[this.secretKey],\n      today,\n      directive.region,\n      service,\n    );\n  },\n\n  /** Generate a AWS Signature Version 4\n   *\n   * @param {String} policy - Base64 encoded policy to sign.\n   * @param {String} secretKey - AWSSecretAccessKey\n   * @param {String} date - Signature date (yyyymmdd)\n   * @param {String} region - AWS Data-Center region\n   * @param {String} service - type of service to use\n   * @returns {String} hex encoded HMAC-256 signature\n   */\n\n  signAwsV4(policy, secretKey, date, region, service) {\n    const dateKey = hmac256(`AWS4${secretKey}`, date);\n    const dateRegionKey = hmac256(dateKey, region);\n    const dateRegionServiceKey = hmac256(dateRegionKey, service);\n    const signingKey = hmac256(dateRegionServiceKey, 'aws4_request');\n\n    return hmac256(signingKey, policy, 'hex');\n  },\n};\n\nexport default exoscaleStorageService;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/files/server/methods.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport {\n  deleteFile,\n  setFileStatus,\n  setFileError,\n  downloadFile,\n  getSignedUrl,\n  updateDocumentsCache,\n} from '../methodDefinitions';\nimport FileService from './FileService';\nimport S3Service from './S3Service';\n\ndeleteFile.setHandler((context, { collection, docId, fileKey }) => {\n  context.unblock();\n  SecurityService.isAllowedToModifyFiles({\n    collection,\n    docId,\n    userId: context.userId,\n    fileKey,\n  });\n\n  return FileService.deleteFile(fileKey).then(() =>\n    FileService.updateDocumentsCache({ docId, collection }));\n});\n\nsetFileStatus.setHandler((context, { fileKey, newStatus }) => {\n  context.unblock();\n  SecurityService.checkCurrentUserIsAdmin();\n  // Should update documents cache when we start using this\n  return FileService.setFileStatus(fileKey, newStatus);\n});\n\nsetFileError.setHandler((context, { fileKey, error }) => {\n  context.unblock();\n  SecurityService.checkCurrentUserIsAdmin();\n  // Should update documents cache when we start using this\n  return FileService.setFileError(fileKey, error);\n});\n\ndownloadFile.setHandler((context, { key }) => {\n  context.unblock();\n  S3Service.isAllowedToAccess(key);\n  return S3Service.getObject(key);\n});\n\ngetSignedUrl.setHandler((context, { key }) => {\n  context.unblock();\n  SecurityService.checkCurrentUserIsAdmin();\n  return S3Service.makeSignedUrl(key);\n});\n\nupdateDocumentsCache.setHandler((context, params) => {\n  context.unblock();\n  SecurityService.checkLoggedIn();\n  return FileService.updateDocumentsCache(params);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"meteor-slingshot.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/files/meteor-slingshot.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Slingshot } from 'meteor/edgee:slingshot';\nimport {\n  SLINGSHOT_DIRECTIVE_NAME,\n  ALLOWED_FILE_TYPES,\n  MAX_FILE_SIZE,\n} from './fileConstants';\n\nSlingshot.fileRestrictions(SLINGSHOT_DIRECTIVE_NAME, {\n  allowedFileTypes: ALLOWED_FILE_TYPES,\n  maxSize: MAX_FILE_SIZE,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"helpers\":{\"sharedSchemaConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/helpers/sharedSchemaConstants.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const MORTGAGE_NOTE_TYPES = {\n  PAPER: 'PAPER',\n  REGISTRAR: 'REGISTRAR',\n};\n\nexport const MORTGAGE_NOTE_CATEGORIES = {\n  BEARER: 'BEARER',\n  REGISTERED: 'REGISTERED',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"sharedSchemas.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/helpers/sharedSchemas.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\n\nimport { CUSTOM_AUTOFIELD_TYPES } from 'core/components/AutoForm2/constants';\nimport { CANTONS } from '../loans/loanConstants';\nimport zipcodes from '../../utils/zipcodes';\n\nexport const createdAt = {\n  type: Date,\n  autoValue() {\n    if (this.isInsert) {\n      return new Date();\n    }\n    this.unset();\n  },\n  optional: true,\n};\n\nexport const updatedAt = {\n  type: Date,\n  autoValue() {\n    if (this.isUpdate || this.isInsert || this.isUpsert) {\n      return new Date();\n    }\n  },\n  optional: true,\n};\n\nexport const additionalDocuments = initialDocuments => ({\n  additionalDocuments: { type: Array, defaultValue: initialDocuments },\n  'additionalDocuments.$': Object,\n  'additionalDocuments.$.id': String,\n  'additionalDocuments.$.label': { type: String, optional: true },\n  'additionalDocuments.$.requiredByAdmin': { type: Boolean, optional: true },\n  'additionalDocuments.$.category': { type: String, optional: true },\n});\n\nexport const address = {\n  address1: { type: String, optional: true },\n  address2: { type: String, optional: true },\n  zipCode: {\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 1000,\n    max: 99999,\n  },\n  city: { type: String, optional: true },\n  canton: {\n    type: String,\n    allowedValues: Object.keys(CANTONS),\n    optional: true,\n    autoValue() {\n      return zipcodes(this.field('zipCode').value);\n    },\n    uniforms: { placeholder: null },\n  },\n};\n\nexport const contactsSchema = {\n  contacts: { type: Array, defaultValue: [] },\n  'contacts.$': Object,\n  'contacts.$.name': { type: String, uniforms: { label: 'Prénom Nom' } },\n  'contacts.$.title': { type: String, uniforms: { label: 'Fonction/Titre' } },\n  'contacts.$.email': {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true,\n  },\n  'contacts.$.phoneNumber': {\n    type: String,\n    uniforms: { label: 'No. de Téléphone' },\n    optional: true,\n  },\n};\n\nexport const makePermissions = ({\n  permissionsSchema,\n  prefix,\n  autoFormDisplayCondition = () => true,\n  autoFormLabel,\n}) =>\n  Object.keys(permissionsSchema).reduce(\n    (permissions, key) => ({\n      ...permissions,\n      [`${prefix}.${key}`]: permissionsSchema[key],\n    }),\n    {\n      [prefix]: {\n        type: Object,\n        optional: true,\n        condition: autoFormDisplayCondition,\n        uniforms: { label: autoFormLabel || prefix },\n      },\n    },\n  );\n\nexport const userLinksSchema = permissionsSchema => ({\n  userLinks: { type: Array, defaultValue: [] },\n  'userLinks.$': Object,\n  'userLinks.$._id': { type: String, optional: true },\n  ...(permissionsSchema\n    ? makePermissions({ permissionsSchema, prefix: 'userLinks.$.permissions' })\n    : {}),\n});\n\nexport const mortgageNoteLinks = {\n  mortgageNoteLinks: { type: Array, optional: true },\n  'mortgageNoteLinks.$': Object,\n  'mortgageNoteLinks.$._id': { type: String, optional: true },\n};\n\nexport const roundedInteger = (digits) => {\n  const rounder = 10 ** digits;\n  return {\n    type: SimpleSchema.Integer,\n    min: 0,\n    max: 1000000000,\n    autoValue() {\n      if (this.isSet) {\n        return Math.round(this.value / rounder) * rounder;\n      }\n    },\n    optional: true,\n  };\n};\n\nexport const percentageField = {\n  type: Number,\n  min: -1,\n  max: 1,\n  optional: true,\n  autoValue() {\n    if (this.isSet) {\n      return Math.round(Number(this.value) * 10000) / 10000;\n    }\n  },\n  uniforms: { type: CUSTOM_AUTOFIELD_TYPES.PERCENT, placeholder: '0.00%' },\n};\n\nexport const moneyField = {\n  type: SimpleSchema.Integer,\n  min: 0,\n  max: 1000000000,\n  optional: true,\n  uniforms: { type: CUSTOM_AUTOFIELD_TYPES.MONEY },\n};\n\nexport const decimalMoneyField = {\n  ...moneyField,\n  type: Number,\n  uniforms: { type: CUSTOM_AUTOFIELD_TYPES.MONEY_DECIMAL },\n};\n\nexport const documentsField = {\n  type: Object,\n  defaultValue: {},\n  optional: true,\n  blackbox: true,\n};\n\nexport const dateField = {\n  type: Date,\n  optional: true,\n  uniforms: { type: CUSTOM_AUTOFIELD_TYPES.DATE },\n};\n\nexport const cacheField = {\n  type: Object,\n  optional: true,\n  blackbox: true,\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/helpers/index.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './helpers';\nexport * from './mongoHelpers';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"helpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/helpers/helpers.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport { Loans, Borrowers, Offers, Properties, Tasks, Users } from '..';\nimport {\n  LOANS_COLLECTION,\n  BORROWERS_COLLECTION,\n  PROPERTIES_COLLECTION,\n} from '../constants';\n\nexport const getDocFromCollection = (collectionName, docId) => {\n  let collection;\n  switch (collectionName) {\n  case 'loans':\n    collection = Loans;\n    break;\n  case 'borrowers':\n    collection = Borrowers;\n    break;\n  case 'properties':\n    collection = Properties;\n    break;\n  case 'offers':\n    collection = Offers;\n    break;\n  case 'tasks':\n    collection = Tasks;\n    break;\n  case 'users':\n    collection = Users;\n    break;\n  default:\n    break;\n  }\n\n  return collection.findOne(docId);\n};\n\nexport const getIdFieldNameFromCollection = collectionName =>\n  ({\n    [LOANS_COLLECTION]: 'loanId',\n    [BORROWERS_COLLECTION]: 'borrowerId',\n    [PROPERTIES_COLLECTION]: 'propertyId',\n  }[collectionName]);\n\nexport const getCollectionNameFromIdField = idFieldName =>\n  ({\n    loanId: LOANS_COLLECTION,\n    borrowerId: BORROWERS_COLLECTION,\n    propertyId: PROPERTIES_COLLECTION,\n  }[idFieldName]);\n\nexport const createMeteorAsyncFunction = promiseFunc =>\n  Meteor.wrapAsync((params, callback) =>\n    promiseFunc(params)\n      .then(result => callback(null, result))\n      .catch(callback));\n\nexport const flattenObject = (object, delimiter) => {\n  const delim = delimiter || '.';\n  let flattened = {};\n\n  Object.keys(object).forEach((key) => {\n    const val = object[key];\n    if (val instanceof Object && !(val instanceof Array)) {\n      const strip = flattenObject(val);\n      Object.keys(strip).forEach((k) => {\n        const v = strip[k];\n        flattened = { ...flattened, [`${key}${delim}${k}`]: v };\n      });\n    } else {\n      flattened = { ...flattened, [key]: val };\n    }\n  });\n\n  return flattened;\n};\n\nexport const getUserOrganisationName = ({ user }) => {\n  const { organisations = [] } = user;\n  const organisationName = !!organisations.length && organisations[0].name;\n  return organisationName;\n};\n\nexport const getUserNameAndOrganisation = ({ user }) => {\n  const { name, organisations = [] } = user;\n  const organisationName = !!organisations.length && organisations[0].name;\n  return organisationName ? `${name} (${organisationName})` : name;\n};\n\nconst isReferredByOrganisation = ({ organisations, referredByOrganisation }) =>\n  organisations.some(({ _id }) => referredByOrganisation._id === _id);\nconst isReferredByOrganisationUser = ({ organisationUsers, referredByUser }) =>\n  organisationUsers.some(({ _id }) => referredByUser._id === _id);\n\nexport const getReferredBy = ({ user, proUser = {}, isAdmin, anonymous }) => {\n  if (anonymous || !user) {\n    return { raw: null, label: '' };\n  }\n\n  const { organisations = [] } = proUser;\n  const organisationUsers = organisations.length ? organisations[0].users : [];\n  const { referredByUser = {}, referredByOrganisation = {} } = user;\n\n  let label = 'Déjà référé';\n\n  if (\n    isAdmin\n    || isReferredByOrganisation({ organisations, referredByOrganisation })\n    || isReferredByOrganisationUser({ organisationUsers, referredByUser })\n  ) {\n    label = getUserNameAndOrganisation({ user: referredByUser });\n  }\n\n  return { raw: referredByUser.name, label };\n};\n\nexport const sortObject = (object) => {\n  if (!object || typeof object !== 'object' || object instanceof Array) {\n    return object;\n  }\n\n  const sortedObject = {};\n  const keys = Object.keys(object);\n\n  keys.sort();\n\n  keys.forEach((key) => {\n    sortedObject[key] = sortObject(object[key]);\n  });\n\n  return sortedObject;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"mongoHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/helpers/mongoHelpers.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const generateMatchAllWordsRegexp = words =>\n  `${words.map(word => `(?=.*${word})`).join('')}.+`;\n\nexport const generateMatchAnyWordRegexp = string =>\n  string.trim().replace(/\\s+/g, '|');\n\nexport const splitStringIntoWords = string => string.trim().split(/\\s+/);\n\nexport const createRegexQuery = (fieldName, searchQuery) => {\n  const searchQueryWords = splitStringIntoWords(searchQuery);\n  const containsMultipleWords = searchQueryWords.length > 1;\n\n  if (containsMultipleWords) {\n    return {\n      [fieldName]: {\n        $regex: generateMatchAllWordsRegexp(searchQueryWords),\n        $options: 'gi',\n      },\n    };\n  }\n\n  return { [fieldName]: { $regex: searchQuery.trim(), $options: 'ix' } };\n};\n\nexport const createSearchFilters = (searchFieldsArray, searchQuery) => {\n  if (searchFieldsArray.length > 1) {\n    // multiple fields to match\n    return {\n      $or: searchFieldsArray.map(searchField =>\n        createRegexQuery(searchField, searchQuery)),\n    };\n  }\n  // single field to match\n  const fieldName = searchFieldsArray[0];\n  return createRegexQuery(fieldName, searchQuery);\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"CollectionService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/helpers/CollectionService.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nclass CollectionService {\n  constructor(collection) {\n    if (!collection) {\n      throw new Error('A collection is needed in CollectionService, but none was passed');\n    }\n    this.collection = collection;\n  }\n\n  insert(object = {}) {\n    return this.collection.insert(object);\n  }\n\n  _update({ id, object, operator = '$set' }) {\n    if (Object.keys(object).length > 0) {\n      // debugger;\n      return this.collection.update(id, { [operator]: object });\n    }\n    return null;\n  }\n\n  baseUpdate(...args) {\n    return this.collection.update(...args);\n  }\n\n  remove(...args) {\n    return this.collection.remove(...args);\n  }\n\n  get(id) {\n    return this.collection.findOne(id);\n  }\n\n  safeGet(id) {\n    const result = this.get(id);\n\n    if (!result) {\n      throw new Meteor.Error(`Could not find object with id \"${id}\" in collection \"${\n        this.collection._name\n      }\"`);\n    }\n\n    return result;\n  }\n\n  find(...args) {\n    return this.collection.find(...args);\n  }\n\n  findOne(...args) {\n    return this.collection.findOne(...args);\n  }\n\n  checkQuery(body) {\n    if (body && body.$filter) {\n      throw new Meteor.Error('$filter found in query body, did you mean $filters?');\n    }\n  }\n\n  createQuery(...args) {\n    this.checkQuery(args[0]);\n    return this.collection.createQuery(...args);\n  }\n\n  fetchOne(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).fetchOne();\n  }\n\n  safeFetchOne(...args) {\n    const { $filters = {} } = args.find(arg => arg.$filters);\n    const result = this.fetchOne(...args);\n\n    if (!result) {\n      throw new Meteor.Error(`Could not find object with filters \"${JSON.stringify($filters)}\" in collection \"${this.collection._name}\"`);\n    }\n\n    return result;\n  }\n\n  fetch(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).fetch();\n  }\n\n  getLink(...args) {\n    return this.collection.getLink(...args);\n  }\n\n  count(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).getCount();\n  }\n\n  countAll() {\n    return this.find({}).count();\n  }\n\n  getAll() {\n    return this.find({}).fetch();\n  }\n\n  get rawCollection() {\n    return this.collection.rawCollection();\n  }\n\n  exists(_id) {\n    return !!(_id && this.findOne({ _id }, { fields: { _id: 1 } }));\n  }\n\n  aggregate(...args) {\n    return this.rawCollection.aggregate(...args);\n  }\n\n  // Don't return the results from linker\n  addLink({ id, linkName, linkId, metadata = {} }) {\n    const linker = this.collection.getLink(id, linkName);\n    const {\n      linker: { strategy },\n    } = linker;\n\n    switch (strategy) {\n    case 'one':\n      linker.set(linkId);\n      return;\n    case 'many':\n      linker.add(linkId);\n      return;\n    case 'one-meta':\n      linker.set(linkId, metadata);\n      return;\n    case 'many-meta':\n      linker.add(linkId, metadata);\n      return;\n    default:\n      return null;\n    }\n  }\n\n  // Don't return the results from linker\n  removeLink({ id, linkName, linkId }) {\n    const linker = this.getLink(id, linkName);\n    const {\n      linker: { strategy },\n    } = linker;\n\n    switch (strategy.split('-')[0]) {\n    case 'one':\n      linker.unset(linkId);\n      return;\n    case 'many':\n      linker.remove(linkId);\n      return;\n    default:\n      return null;\n    }\n  }\n\n  updateLinkMetadata({ id, linkName, linkId, metadata }) {\n    const linker = this.getLink(id, linkName);\n    const {\n      linker: { strategy },\n    } = linker;\n\n    switch (strategy.split('-')[0]) {\n    case 'one':\n      linker.metadata(metadata);\n      return;\n    case 'many':\n      linker.metadata(linkId, metadata);\n      return;\n    default:\n      return null;\n    }\n  }\n\n  getAssignedEmployee({ id }) {\n    const { assignee } = this.fetchOne({ $filters: { _id: id }, assignee: 1 });\n\n    return assignee;\n  }\n\n  getAdditionalDocLabel({ label, additionalDoc }) {\n    if (label) {\n      return label;\n    }\n    if (additionalDoc.label) {\n      return additionalDoc.label;\n    }\n\n    return undefined;\n  }\n\n  setAdditionalDoc({ id, additionalDocId, requiredByAdmin, label, category }) {\n    const { additionalDocuments } = this.get(id);\n\n    const additionalDoc = additionalDocuments.find(doc => doc.id === additionalDocId);\n\n    if (additionalDoc) {\n      const additionalDocumentsUpdate = [\n        ...additionalDocuments.filter(doc => doc.id !== additionalDocId),\n        {\n          id: additionalDocId,\n          requiredByAdmin,\n          label: this.getAdditionalDocLabel({ label, additionalDoc }),\n          category,\n        },\n      ];\n      return this._update({\n        id,\n        object: { additionalDocuments: additionalDocumentsUpdate },\n      });\n    }\n\n    return this._update({\n      id,\n      object: {\n        additionalDocuments: [\n          ...additionalDocuments,\n          { id: additionalDocId, requiredByAdmin, label, category },\n        ],\n      },\n    });\n  }\n\n  removeAdditionalDoc({ id: docId, additionalDocId }) {\n    const { additionalDocuments = [] } = this.get(docId);\n    return this._update({\n      id: docId,\n      object: {\n        additionalDocuments: additionalDocuments.filter(({ id }) => id !== additionalDocId),\n      },\n    });\n  }\n}\n\nexport default CollectionService;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"methodServerHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/helpers/server/methodServerHelpers.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport SecurityService from '../../security';\n\nexport const checkInsertUserId = (userId) => {\n  if (userId === undefined) {\n    return Meteor.userId();\n  }\n  if (userId) {\n    SecurityService.checkCurrentUserIsAdmin();\n    return userId;\n  }\n\n  SecurityService.handleUnauthorized('Unauthorized insert');\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"QueryCacher.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/helpers/server/QueryCacher.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { BaseResultCacher } from 'meteor/cultofcoders:grapher';\nimport { EJSON } from 'meteor/ejson';\nimport hashObject from 'object-hash';\n\nconst cloneDeep = require('lodash/cloneDeep');\n\nconst DEFAULT_TTL = 1000 * 60 * 60; // 1 hour\n\nexport default class QueryCacher extends BaseResultCacher {\n  constructor(config = {}) {\n    super(config);\n    this.store = {};\n  }\n\n  generateQueryId(queryName, params) {\n    // Store the queryname for reuse later\n    if (!this.queryName) {\n      this.queryName = queryName;\n    }\n    return `${queryName}::${EJSON.stringify(params)}`;\n  }\n\n  getHash(cacheId) {\n    const params = EJSON.parse(cacheId.split('::')[1]);\n    const { getDataToHash = () => null } = this.config;\n\n    const dataToHash = getDataToHash(params);\n    return hashObject.MD5(dataToHash);\n  }\n\n  fetch(cacheId, { query, countCursor }) {\n    const cacheData = this.store[cacheId];\n    const hash = this.getHash(cacheId);\n\n    if (cacheData !== undefined) {\n      const { hash: cachedHash, data } = cacheData;\n\n      if (hash === cachedHash) {\n        return cloneDeep(data);\n      }\n    }\n\n    const data = BaseResultCacher.fetchData({ query, countCursor }); // this.fetchData is not a function\n    this.storeData({ cacheId, data, hash });\n\n    return data;\n  }\n\n  invalidateCache(cacheId) {\n    delete this.store[cacheId];\n  }\n\n  cacheExists(cacheId) {\n    return !!this.store[cacheId];\n  }\n\n  setCache(cacheId, cacheData) {\n    this.store[cacheId] = cacheData;\n  }\n\n  findAndInvalidateCache(params) {\n    const cacheId = this.generateQueryId(this.queryName, params);\n    if (this.cacheExists(cacheId)) {\n      this.invalidateCache(cacheId);\n    }\n  }\n\n  storeData({ cacheId, data, hash }) {\n    const ttl = this.config.ttl || DEFAULT_TTL;\n    this.setCache(cacheId, { data: cloneDeep(data), hash });\n\n    Meteor.setTimeout(() => {\n      this.invalidateCache(cacheId);\n    }, ttl);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"sharedHooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/helpers/sharedHooks.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nconst getOldCustomDocuments = ({\n  additionalDocuments,\n  initialDocuments,\n  conditionalDocuments,\n}) =>\n  additionalDocuments\n    .filter(document =>\n      document.requiredByAdmin === undefined\n        && !initialDocuments.some(({ id }) => id === document.id)\n        && !conditionalDocuments.some(({ id }) => id === document.id))\n    .map(document => ({ ...document, requiredByAdmin: true }));\n\nconst keepInitialDocuments = ({ additionalDocuments, initialDocuments }) =>\n  additionalDocuments.filter(document =>\n    initialDocuments.some(({ id }) => id === document.id && document.requiredByAdmin === undefined));\n\nconst otherInitialDocuments = ({ initialDocuments, additionalDocuments }) =>\n  initialDocuments.filter(({ id }) => !additionalDocuments.some(document => document.id === id));\n\nconst otherAdditionalDocuments = ({ additionalDocuments }) =>\n  additionalDocuments.filter(({ requiredByAdmin }) => requiredByAdmin !== undefined);\n\nconst getDocumentsToAdd = ({\n  additionalDocuments,\n  conditionalDocuments,\n  doc,\n}) =>\n  conditionalDocuments.reduce((docs, { id, condition }) => {\n    const document = additionalDocuments.find(additionalDocument => additionalDocument.id === id);\n\n    if (document && document.requiredByAdmin !== undefined) {\n      return docs;\n    }\n    // Insert conditional documents\n    if (condition({ doc })) {\n      return [...docs, { id }];\n    }\n\n    return docs;\n  }, []);\n\nexport const additionalDocumentsHook = ({\n  collection,\n  initialDocuments,\n  conditionalDocuments,\n}) => (userId, doc) => {\n  let documents = [];\n  const { additionalDocuments = [] } = doc || {};\n  if (additionalDocuments.length === 0) {\n    documents = initialDocuments;\n  } else {\n    const oldCustomDocuments = getOldCustomDocuments({\n      additionalDocuments,\n      initialDocuments,\n      conditionalDocuments,\n    });\n\n    documents = keepInitialDocuments({ additionalDocuments, initialDocuments });\n\n    documents = [\n      ...otherInitialDocuments({ initialDocuments, additionalDocuments }),\n      ...oldCustomDocuments,\n      ...documents,\n      ...otherAdditionalDocuments({ additionalDocuments }),\n    ];\n  }\n\n  // Check conditional documents\n  const documentsToAdd = getDocumentsToAdd({\n    additionalDocuments,\n    conditionalDocuments,\n    doc,\n  });\n\n  documents = [...documents, ...documentsToAdd];\n\n  // Update document\n  Mongo.Collection.get(collection).direct.update(doc._id, {\n    $set: { additionalDocuments: documents },\n  });\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"pdf\":{\"pdfConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/pdf/pdfConstants.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const PDF_TYPES = {\n  LOAN: 'LOAN',\n};\n\nexport const TEMPLATES = {\n  [PDF_TYPES.LOAN]: {\n    name: 1,\n    purchaseType: 1,\n    residenceType: 1,\n    borrowers: [\n      {\n        gender: 1,\n        zipCode: { $or: 'sameAddress' },\n        city: { $or: 'sameAddress' },\n      },\n    ],\n    structure: {\n      ownFunds: [1],\n      property: {\n        propertyType: 1,\n        address1: 1,\n        zipCode: 1,\n        city: 1,\n      },\n    },\n    user: {\n      assignedEmployee: {\n        name: 1,\n        email: 1,\n        phoneNumbers: [1],\n      },\n    },\n  },\n};\n\nexport const A4_HEIGHT = 295;\nexport const MARGIN_TOP = 10;\nexport const MARGIN_BOTTOM = 15;\nexport const MARGIN_SIDE = 15;\nexport const WIGGLE_ROOM = 2; // Required to make things fit on one page\nexport const CONTENT_HEIGHT = A4_HEIGHT - MARGIN_BOTTOM - MARGIN_TOP - WIGGLE_ROOM;\nexport const BORDER_BLUE = '#213875';\nexport const BORDER_GREY = '#DEE2E6';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/pdf/methodDefinitions.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\nimport { PDF_TYPES } from './pdfConstants';\n\nexport const generatePDF = new Method({\n  name: 'generatePDF',\n  params: {\n    type: Match.OneOf(...Object.values(PDF_TYPES)),\n    params: Object,\n    options: Object,\n    htmlOnly: Match.Maybe(Boolean),\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"methods.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/pdf/server/methods.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport fs from 'fs';\n\nimport SecurityService from '../../security';\nimport { generatePDF } from '../methodDefinitions';\nimport PDFService from './PDFService';\nimport { PDF_TYPES } from '../pdfConstants';\nimport Loans from '../../loans';\nimport Organisations from '../../organisations';\n\ngeneratePDF.setHandler((context, params) => {\n  context.unblock();\n  SecurityService.checkCurrentUserIsAdmin();\n  return PDFService.makePDF(params);\n});\n\n// Enable this to iterate faster on pdfs\n// Creates a new PDF on every startup to ~/Desktop/pdf-test.html\nconst PDF_TESTING = false;\nconst loanName = '19-0077';\nconst orgName = 'Swisslife';\n\nMeteor.startup(() => {\n  if (Meteor.isDevelopment && PDF_TESTING) {\n    Meteor.defer(() => {\n      const loanId = Loans.findOne({ name: loanName })._id;\n      const organisationId = orgName\n        ? Organisations.findOne({ name: orgName })._id\n        : '';\n\n      if (!loanId) {\n        console.log(`Loan ${loanName} not found`);\n        return;\n      }\n\n      PDFService.makePDF({\n        type: PDF_TYPES.LOAN,\n        params: { loanId, organisationId },\n        options: { anonymous: false },\n        htmlOnly: true,\n      }).then((html) => {\n        console.log('Writing test PDF to ~/Desktop/pdf-testing.html');\n        const homedir = require('os').homedir();\n        fs.writeFileSync(`${homedir}/Desktop/pdf-test.html`, html);\n      });\n    });\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"PDFService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/pdf/server/PDFService.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { check, Match } from 'meteor/check';\n\nimport fetch from 'node-fetch';\nimport ReactDOMServer from 'react-dom/server';\nimport fs from 'fs';\n\nimport { adminLoans } from '../../loans/queries';\nimport { formatLoanWithPromotion } from '../../../utils/loanFunctions';\nimport { lenderRules } from '../../fragments';\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport LoanBankPDF from './pdfComponents/LoanBankPDF';\nimport { PDF_TYPES } from '../pdfConstants';\nimport { validateLoanPdf } from './pdfValidators';\n\nconst PDF_URL = 'https://docraptor.com/docs';\n\nclass PDFService {\n  makePDF = ({ type, params, options, htmlOnly }) => {\n    this.checkParams({ params, type });\n    const data = this.getDataForPDF(type, params);\n    this.checkData({ data, type });\n\n    const { component, props, fileName, pdfName } = this.makeConfigForPDF({\n      data,\n      type,\n      options,\n    });\n    const html = this.getComponentAsHTML(component, props, pdfName);\n\n    if (htmlOnly) {\n      return Promise.resolve({ html, pdfName });\n    }\n\n    return this.fetchPDF(html, fileName, pdfName);\n  };\n\n  checkData = ({ data, type }) => {\n    switch (type) {\n    case PDF_TYPES.LOAN: {\n      try {\n        validateLoanPdf(data);\n      } catch (error) {\n        throw new Meteor.Error(error);\n      }\n      break;\n    }\n    default:\n      throw new Meteor.Error(`Invalid pdf type: ${type}`);\n    }\n  };\n\n  checkParams = ({ params, type }) => {\n    switch (type) {\n    case PDF_TYPES.LOAN: {\n      const { loanId, organisationId, structureIds } = params;\n      check(loanId, String);\n      check(organisationId, Match.Maybe(String));\n      check(structureIds, Match.Maybe([String]));\n      break;\n    }\n\n    default:\n      throw new Meteor.Error(`Invalid pdf type: ${type}`);\n    }\n  };\n\n  getDataForPDF = (type, params) => {\n    switch (type) {\n    case PDF_TYPES.LOAN: {\n      const { loanId, organisationId } = params;\n\n      const organisation = organisationId\n          && OrganisationService.fetchOne({\n            $filters: { _id: organisationId },\n            lenderRules: lenderRules(),\n            name: 1,\n            logo: 1,\n          });\n      const loan = adminLoans.clone({ _id: loanId }).fetchOne();\n\n      if (loan.hasPromotion) {\n        return {\n          ...params,\n          loan: formatLoanWithPromotion(loan),\n          organisation,\n        };\n      }\n\n      return { ...params, loan, organisation };\n    }\n    default:\n      throw new Meteor.Error(`Invalid pdf type: ${type}`);\n    }\n  };\n\n  makeConfigForPDF = ({ type, data, options }) => {\n    const fileName = Random.id();\n\n    switch (type) {\n    case PDF_TYPES.LOAN: {\n      const { loan, organisation } = data;\n      return {\n        component: LoanBankPDF,\n        props: { ...data, options },\n        fileName,\n        pdfName: organisation\n          ? `${loan.name} - ${organisation.name}`\n          : loan.name,\n      };\n    }\n    default:\n      throw new Meteor.Error(`Invalid pdf type: ${type}`);\n    }\n  };\n\n  getBase64String = (path) => {\n    const file = fs.readFileSync(path);\n    fs.unlink(path); // Async delete\n    const base64 = new Buffer(file).toString('base64');\n    return base64;\n  };\n\n  getComponentAsHTML = (component, props, pdfName) =>\n    ReactDOMServer.renderToStaticMarkup(component({ ...props, pdfName }));\n\n  fetchPDF = (html, fileName, pdfName) => {\n    const API_KEY = Meteor.settings.DOC_RAPTOR_API_KEY;\n    const body = {\n      user_credentials: API_KEY,\n      doc: {\n        document_content: html,\n        name: pdfName,\n        type: 'pdf',\n        test: !Meteor.isProduction || Meteor.isStaging || Meteor.isDevEnvironment,\n        // help: true,\n        prince_options: { media: 'screen', baseurl: 'https://www.e-potek.ch' },\n      },\n    };\n\n    return fetch(PDF_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    })\n      .then((res) => {\n        const dest = fs.createWriteStream(`/tmp/${fileName}.pdf`);\n        const stream = res.body.pipe(dest);\n        return new Promise((resolve) => {\n          stream.on('finish', resolve);\n        });\n      })\n      .then(() => this.getBase64String(`/tmp/${fileName}.pdf`))\n      .then(base64 => ({ base64, pdfName }));\n  };\n}\n\nexport default new PDFService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"pdfComponents\":{\"LoanBankPDF\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/pdf/server/pdfComponents/LoanBankPDF/index.js                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './LoanBankPDF';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"pdfValidators.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/pdf/server/pdfValidators.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { makeCheckObjectStructure } from 'core/utils/checkObjectStructure';\nimport { PDF_TYPES, TEMPLATES } from '../pdfConstants';\nimport { frenchErrors } from './pdfHelpers';\n\nexport const validateLoanPdf = ({ loan, structureIds }) => {\n  const checkObjectStructure = makeCheckObjectStructure(frenchErrors);\n  checkObjectStructure({ obj: loan, template: TEMPLATES[PDF_TYPES.LOAN] });\n\n  const structures = loan.structures.filter(({ id }) =>\n    structureIds.includes(id));\n  let id;\n\n  structures.forEach(({ propertyId, promotionOptionId }) => {\n    if (!id) {\n      id = propertyId || promotionOptionId;\n    } else if (id !== propertyId && id !== promotionOptionId) {\n      throw 'Tous les biens immo doivent être les mêmes sur chaque plan financier du PDF';\n    }\n  });\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"pdfHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/pdf/server/pdfHelpers.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Intl from 'core/utils/server/intl';\n\nconst formatKey = (key) => {\n  const i18nKey = `Forms.${key}`;\n  const translated = Intl.formatMessage({\n    id: `Forms.${key}`,\n    values: { purchaseType: 'ACQUISITION' }, // Do this to avoid purchaseType error\n  });\n\n  if (i18nKey === translated) {\n    // Translation does not exist\n    return key;\n  }\n\n  return translated;\n};\n\nexport const frenchErrors = {\n  missingKey: (key, parentKey) =>\n    (parentKey\n      ? `Il manque ${formatKey(key)} dans ${formatKey(parentKey)}`\n      : `Il manque ${formatKey(key)}`),\n  shouldBeArray: key => `${formatKey(key)} doit être une liste`,\n  shouldBeObject: key => `${formatKey(key)} doit être un objet`,\n  emptyArray: (key, parentKey) =>\n    (parentKey\n      ? `${formatKey(key)} ne doit pas être vide dans ${formatKey(parentKey)}`\n      : `${formatKey(key)} ne doit pas être vide`),\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"security\":{\"constants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/constants.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const DOCUMENT_USER_PERMISSIONS = {\n  MODIFY: 'MODIFY',\n  READ: 'READ',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/index.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Security from './Security';\nimport {\n  LoanSecurity,\n  OfferSecurity,\n  BorrowerSecurity,\n  PropertySecurity,\n  UserSecurity,\n  PromotionSecurity,\n} from './collections';\n\nclass SecurityService extends Security {\n  static get users() {\n    return UserSecurity;\n  }\n\n  static get loans() {\n    return LoanSecurity;\n  }\n\n  static get offers() {\n    return OfferSecurity;\n  }\n\n  static get properties() {\n    return PropertySecurity;\n  }\n\n  static get borrowers() {\n    return BorrowerSecurity;\n  }\n\n  static get promotions() {\n    return PromotionSecurity;\n  }\n}\n\nexport { SECURITY_ERROR } from './Security';\nexport default SecurityService;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Security.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/Security.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\nimport get from 'lodash/get';\n\nimport { flattenObject } from '../helpers';\nimport { ROLES, COLLECTIONS } from '../constants';\nimport { DOCUMENT_USER_PERMISSIONS } from './constants';\n\nexport const SECURITY_ERROR = 'NOT_AUTHORIZED';\n\nexport default class Security {\n  static hasRole(userId, role) {\n    return Roles.userIsInRole(userId, role);\n  }\n\n  static handleUnauthorized(message) {\n    throw new Meteor.Error(SECURITY_ERROR, message);\n  }\n\n  static checkRole(userId, role) {\n    if (!this.hasRole(userId, role)) {\n      this.handleUnauthorized(`Checking role: ${role}`);\n    }\n  }\n\n  static checkLoggedIn() {\n    this.checkUserLoggedIn(Meteor.userId());\n  }\n\n  static checkUserLoggedIn(userId) {\n    if (!userId) {\n      this.handleUnauthorized('Checking if logged in, no user');\n    }\n\n    if (userId !== Meteor.userId()) {\n      this.handleUnauthorized('Checking if logged in, not the right user');\n    }\n  }\n\n  static checkLoggedOut() {\n    if (Meteor.userId()) {\n      this.handleUnauthorized('Checking if logged out');\n    }\n  }\n\n  static currentUserHasRole(role) {\n    return this.hasRole(Meteor.userId(), role);\n  }\n\n  static isUserAdmin(userId) {\n    return this.hasRole(userId, ROLES.ADMIN) || this.hasRole(userId, ROLES.DEV);\n  }\n\n  static isUserDev(userId) {\n    return this.hasRole(userId || Meteor.userId(), ROLES.DEV);\n  }\n\n  static isUserPro(userId) {\n    return (\n      this.hasRole(userId, ROLES.PRO)\n      || this.hasRole(userId, ROLES.ADMIN)\n      || this.hasRole(userId, ROLES.DEV)\n    );\n  }\n\n  static currentUserIsAdmin() {\n    const userId = Meteor.userId();\n    return this.hasRole(userId, ROLES.ADMIN) || this.hasRole(userId, ROLES.DEV);\n  }\n\n  static checkCurrentUserIsAdmin() {\n    if (!this.currentUserIsAdmin()) {\n      this.handleUnauthorized('Checking if current user is admin');\n    }\n  }\n\n  static checkUserIsAdmin(userId) {\n    if (!this.isUserAdmin(userId)) {\n      this.handleUnauthorized('Checking if user is admin');\n    }\n  }\n\n  static checkUserIsDev(userId) {\n    if (!this.isUserDev(userId)) {\n      this.handleUnauthorized('Checking if user is dev');\n    }\n  }\n\n  static checkUserIsPro(userId) {\n    if (!this.isUserPro(userId)) {\n      this.handleUnauthorized('Checking if user is pro');\n    }\n  }\n\n  static checkOwnership(doc, userId) {\n    userId = userId || Meteor.userId();\n    const userIdIsValid = doc && doc.userId === userId;\n    const userLinksIsValid = doc\n      && doc.userLinks\n      && doc.userLinks.filter(({ _id }) => userId === _id).length > 0;\n\n    if (!(userIdIsValid || userLinksIsValid)) {\n      this.handleUnauthorized('Checking ownership');\n    }\n  }\n\n  static checkRequiredPermissions({ requiredPermissions, userPermissions }) {\n    if (\n      !Object.keys(flattenObject(requiredPermissions)).every((permission) => {\n        const userPermission = get(userPermissions, permission);\n        const requiredPermission = get(requiredPermissions, permission);\n\n        if (!userPermission) {\n          return false;\n        }\n\n        if (Array.isArray(requiredPermission)) {\n          if (!Array.isArray(userPermission)) {\n            return false;\n          }\n          return requiredPermission.every(required =>\n            userPermission.includes(required));\n        }\n\n        return userPermission === requiredPermission;\n      })\n    ) {\n      this.handleUnauthorized('Checking permissions');\n    }\n  }\n\n  static hasPermissionOnDoc({\n    doc,\n    requiredPermissions,\n    userId = Meteor.userId(),\n  }) {\n    const { userLinks = [], users = [] } = doc;\n\n    const user = userLinks.find(({ _id }) => _id === userId)\n      || users.find(({ _id }) => _id === userId);\n\n    if (!user) {\n      this.handleUnauthorized('Checking permissions');\n    }\n\n    const userPermissions = user.permissions || user.$metadata.permissions;\n\n    this.checkRequiredPermissions({ requiredPermissions, userPermissions });\n  }\n\n  static checkCurrentUserIsDev() {\n    if (!this.currentUserHasRole(ROLES.DEV)) {\n      this.handleUnauthorized('unauthorized developer');\n    }\n\n    return true;\n  }\n\n  static hasMinimumRole({ role, userId }) {\n    let allowedRoles;\n\n    switch (role) {\n    case ROLES.DEV:\n      allowedRoles = [ROLES.DEV];\n      break;\n    case ROLES.ADMIN:\n      allowedRoles = [ROLES.DEV, ROLES.ADMIN];\n      break;\n    case ROLES.USER:\n      allowedRoles = [ROLES.DEV, ROLES.ADMIN, ROLES.USER];\n      break;\n    case ROLES.PRO:\n      allowedRoles = [ROLES.DEV, ROLES.ADMIN, ROLES.PRO];\n      break;\n\n    default:\n      throw new Meteor.Error(`Invalid role: ${role} at minimumRole`);\n    }\n\n    const isAllowed = allowedRoles.some(allowedRole =>\n      this.hasRole(userId, allowedRole));\n\n    if (!isAllowed) {\n      return false;\n    }\n\n    return true;\n  }\n\n  static minimumRole(role) {\n    return userId =>\n      (this.hasMinimumRole({ userId, role })\n        ? undefined\n        : this.handleUnauthorized('Unauthorized role'));\n  }\n\n  static canModifyDoc = (doc) => {\n    // Only for client side docs that replace userLinks with users\n    const { _id: userId } = Meteor.user();\n    if (this.minimumRole(ROLES.ADMIN)(userId)) {\n      return;\n    }\n\n    const me = doc.users.find(({ _id }) => _id === userId);\n\n    return (\n      me\n      && me.$metadata\n      && me.$metadata.permissions === DOCUMENT_USER_PERMISSIONS.MODIFY\n    );\n  };\n\n  static isAllowedToModifyFiles({ collection, docId, userId, fileKey }) {\n    const keyId = fileKey.split('/')[0];\n\n    if (keyId !== docId) {\n      this.handleUnauthorized('Invalid fileKey or docId');\n    }\n\n    try {\n      this.minimumRole(ROLES.ADMIN)(userId);\n      return;\n    } catch (error) {}\n\n    switch (collection) {\n    case COLLECTIONS.PROMOTIONS_COLLECTION: {\n      this.promotions.isAllowedToManageDocuments({\n        promotionId: docId,\n        userId,\n      });\n      break;\n    }\n    case COLLECTIONS.PROPERTIES_COLLECTION: {\n      if (this.properties.isPromotionLot(docId)) {\n        this.promotions.isAllowedToManagePromotionLotDocuments({\n          propertyId: docId,\n          userId,\n        });\n        break;\n      }\n\n      this.properties.isAllowedToUpdate(docId, userId);\n      break;\n    }\n    default:\n      this[collection].isAllowedToUpdate(docId);\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"collections\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/collections/index.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default as BorrowerSecurity } from './BorrowerSecurity';\nexport { default as LoanSecurity } from './LoanSecurity';\nexport { default as OfferSecurity } from './OfferSecurity';\nexport { default as PromotionSecurity } from './PromotionSecurity';\nexport { default as PropertySecurity } from './PropertySecurity';\nexport { default as UserSecurity } from './UserSecurity';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"BorrowerSecurity.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/collections/BorrowerSecurity.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport BorrowerService from '../../borrowers/server/BorrowerService';\nimport Security from '../Security';\nimport { LoanSecurity } from './index';\n\nclass BorrowerSecurity {\n  static isAllowedToInsert() {\n    Security.checkLoggedIn();\n  }\n\n  static isAllowedToUpdate(borrowerId, userId) {\n    if (!borrowerId) {\n      Security.handleUnauthorized();\n    }\n\n    if (Security.currentUserIsAdmin()) {\n      return;\n    }\n\n    const borrower = BorrowerService.fetchOne({\n      $filters: { _id: borrowerId },\n      userId: 1,\n      loans: { anonymous: 1 },\n    });\n\n    if (borrower.userId) {\n      Security.checkOwnership(borrower, userId);\n    } else if (borrower.loans.length === 1 && borrower.loans[0].anonymous) {\n      LoanSecurity.checkAnonymousLoan(borrower.loans[0]._id);\n    } else {\n      Security.handleUnauthorized('borrowerUpdate not allowed');\n    }\n  }\n\n  static isAllowedToDelete(borrowerId) {\n    this.isAllowedToUpdate(borrowerId);\n  }\n}\n\nexport default BorrowerSecurity;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"LoanSecurity.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/collections/LoanSecurity.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { LOAN_STATUS } from 'core/api/loans/loanConstants';\nimport Security from '../Security';\nimport LoanService from '../../loans/server/LoanService';\n\nclass LoanSecurity {\n  static isAllowedToInsert() {\n    Security.checkLoggedIn();\n  }\n\n  static isAllowedToUpdate(loanId, userId) {\n    if (!loanId) {\n      Security.handleUnauthorized();\n    }\n\n    if (Security.currentUserIsAdmin()) {\n      return;\n    }\n\n    const loan = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      userId: 1,\n      userLinks: 1,\n    });\n    if (loan.userId) {\n      Security.checkOwnership(loan, userId);\n    } else {\n      this.checkAnonymousLoan(loanId);\n    }\n  }\n\n  static isAllowedToDelete() {\n    Security.checkCurrentUserIsAdmin();\n  }\n\n  static checkAnonymousLoan(loanId) {\n    const loan = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      anonymous: 1,\n      status: 1,\n    });\n\n    if (\n      !loan\n      || loan.anonymous !== true\n      || loan.status === LOAN_STATUS.UNSUCCESSFUL\n      || loan.userId\n    ) {\n      Security.handleUnauthorized();\n    }\n  }\n}\n\nexport default LoanSecurity;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"OfferSecurity.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/collections/OfferSecurity.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Security from '../Security';\nimport { Offers } from '../..';\n\nclass OfferSecurity {\n  static isAllowedToInsert() {\n    Security.checkLoggedIn();\n  }\n\n  static isAllowedToUpdate(offerId) {\n    if (Security.currentUserIsAdmin()) {\n      return;\n    }\n\n    const offer = Offers.findOne(offerId);\n    Security.checkOwnership(offer);\n  }\n\n  static isAllowedToDelete() {\n    Security.checkCurrentUserIsAdmin();\n  }\n}\n\nexport default OfferSecurity;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"PromotionSecurity.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/collections/PromotionSecurity.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport PromotionService from '../../promotions/server/PromotionService';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport PromotionOptionService from '../../promotionOptions/server/PromotionOptionService';\nimport UserService from '../../users/server/UserService';\nimport { ROLES } from '../../users/userConstants';\nimport Security from '../Security';\nimport LoanSecurity from './LoanSecurity';\nimport {\n  isAllowedToInviteCustomersToPromotion,\n  isAllowedToRemoveCustomerFromPromotion,\n  isAllowedToModifyPromotion,\n  isAllowedToManagePromotionDocuments,\n  isAllowedToAddLotsToPromotion,\n  isAllowedToModifyPromotionLots,\n  isAllowedToRemovePromotionLots,\n  isAllowedToViewPromotion,\n  isAllowedToBookPromotionLots,\n  isAllowedToBookPromotionLotToCustomer,\n  isAllowedToSellPromotionLots,\n  isAllowedToSellPromotionLotToCustomer,\n} from '../clientSecurityHelpers';\nimport LoanService from '../../loans/server/LoanService';\nimport {\n  getPromotionCustomerOwnerType,\n  makeLoanAnonymizer,\n} from '../../promotions/server/promotionServerHelpers';\nimport LotService from '../../lots/server/LotService';\n\nclass PromotionSecurity {\n  static checkPermissions({\n    promotionId,\n    userId,\n    checkingFunction,\n    errorMessage,\n  }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n    const promotion = PromotionService.safeFetchOne({\n      $filters: { _id: promotionId },\n      status: 1,\n      users: { _id: 1 },\n      userLinks: { _id: 1 },\n    });\n\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    if (!checkingFunction({ promotion, currentUser })) {\n      Security.handleUnauthorized(errorMessage || 'Checking permissions');\n    }\n  }\n\n  static getPromotionIdFromPromotionLot = ({ promotionLotId }) => {\n    const { promotion = {} } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      promotion: { _id: 1 },\n    });\n\n    return promotion._id;\n  };\n\n  static hasAccessToPromotion({ promotionId, userId }) {\n    try {\n      this.isAllowedToView({ promotionId, userId });\n      return;\n    } catch (error) {\n      const hasPromotion = UserService.hasPromotion({ promotionId, userId });\n\n      if (!hasPromotion) {\n        Security.handleUnauthorized(\"Vous n'avez pas accès à cette promotion\");\n      }\n    }\n  }\n\n  static hasAccessToPromotionLot({ promotionLotId, userId }) {\n    this.hasAccessToPromotion({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static hasAccessToPromotionOption({ promotionOptionId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const { loan, promotionLots } = PromotionOptionService.safeFetchOne({\n      $filters: { _id: promotionOptionId },\n      loan: { _id: 1, userId: 1 },\n      promotionLots: { _id: 1 },\n    });\n\n    if (Security.hasRole(userId, ROLES.PRO)) {\n      this.hasAccessToPromotionLot(promotionLots[0]._id, userId);\n    } else {\n      LoanSecurity.isAllowedToUpdate(loan && loan._id);\n    }\n  }\n\n  static isAllowedToModify({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToModifyPromotion,\n      errorMessage: 'Vous ne pouvez pas modifier cette promotion',\n    });\n  }\n\n  static isAllowedToManageDocuments({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToManagePromotionDocuments,\n      errorMessage: 'Vous ne pouvez pas gérer les documents de cette promotion',\n    });\n  }\n\n  static isAllowedToManagePromotionLotDocuments({ propertyId, userId }) {\n    const { promotion } = PromotionLotService.safeFetchOne({\n      $filters: { 'propertyLinks._id': propertyId },\n      promotion: { _id: 1 },\n    });\n\n    this.isAllowedToManageDocuments({ promotionId: promotion._id, userId });\n  }\n\n  static isAllowedToAddLots({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToAddLotsToPromotion,\n      errorMessage: 'Vous ne pouvez pas ajouter de lots à cette promotion',\n    });\n  }\n\n  static isAllowedToModifyLots({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToModifyPromotionLots,\n      errorMessage: 'Vous ne pouvez pas modifier les lots de cette promotion',\n    });\n  }\n\n  static isAllowedToRemoveLots({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToRemovePromotionLots,\n      errorMessage: 'Vous ne pouvez pas supprimer les lots de cette promotion',\n    });\n  }\n\n  static isAllowedToInviteCustomers({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToInviteCustomersToPromotion,\n      errorMessage: 'Vous ne pouvez pas inviter des clients à cette promotion',\n    });\n  }\n\n  static isAllowedToRemoveCustomer({ promotionId, loanId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const promotion = PromotionService.safeFetchOne({\n      $filters: { _id: promotionId },\n      status: 1,\n      users: { _id: 1 },\n      userLinks: { _id: 1 },\n    });\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    const loan = LoanService.safeFetchOne({\n      $filters: { _id: loanId },\n      user: { _id: 1 },\n    });\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId,\n    });\n\n    if (\n      !isAllowedToRemoveCustomerFromPromotion({\n        promotion,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas supprimer ce client de cette promotion');\n    }\n  }\n\n  static isAllowedToView({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToViewPromotion,\n      errorMessage: \"Vous n'avez pas accès à cette promotion\",\n    });\n  }\n\n  static isAllowedToViewPromotionLot({ promotionLotId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    this.isAllowedToView({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static isAllowedToViewPromotionOption({ promotionOptionId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const { promotionLots = [] } = PromotionOptionService.safeFetchOne({\n      $filters: { _id: promotionOptionId },\n      promotionLots: { _id: 1 },\n    });\n\n    promotionLots.forEach(({ _id: promotionLotId }) => {\n      this.isAllowedToViewPromotionLot({ promotionLotId, userId });\n    });\n  }\n\n  static isAllowedToModifyPromotionLot({ promotionLotId, userId }) {\n    this.isAllowedToModifyLots({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static isAllowedToRemovePromotionLot({ promotionLotId, userId }) {\n    this.isAllowedToRemoveLots({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static isAllowedToBookLots({ promotionLotId, userId }) {\n    this.checkPermissions({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n      checkingFunction: isAllowedToBookPromotionLots,\n      errorMessage: 'Vous ne pouvez pas réserver des lots dans cette promotion',\n    });\n  }\n\n  static isAllowedToBookLotToCustomer({ promotionLotId, loanId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const { promotion } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      promotion: { _id: 1, users: { _id: 1 } },\n    });\n\n    const loan = LoanService.safeFetchOne({\n      $filters: { _id: loanId },\n      user: {_id: 1},\n    });\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId: promotion._id,\n    });\n\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    if (\n      !isAllowedToBookPromotionLotToCustomer({\n        promotion,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas réserver de lot à ce client');\n    }\n  }\n\n  static isAllowedToCancelLotBooking({ promotionLotId, userId }) {\n    const { attributedTo } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      attributedTo: { _id: 1 },\n    });\n\n    this.isAllowedToBookLotToCustomer({\n      promotionLotId,\n      loanId: attributedTo._id,\n      userId,\n    });\n  }\n\n  static isAllowedToSellLots({ promotionLotId, userId }) {\n    this.checkPermissions({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n      checkingFunction: isAllowedToSellPromotionLots,\n      errorMessage: 'Vous ne pouvez pas vendre des lots dans cette promotion',\n    });\n  }\n\n  static isAllowedToSellLotToCustomer({ promotionLotId, userId }) {\n    if (Security.currentUserIsAdmin()) {\n      return;\n    }\n\n    const { promotion, attributedTo } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      promotion: { _id: 1, users: { _id: 1 } },\n      attributedTo: { _id: 1 },\n    });\n\n    const loan = LoanService.safeFetchOne({\n      $filters: { _id: attributedTo._id },\n      user: {_id: 1},\n    });\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId: promotion._id,\n    });\n\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    if (\n      !isAllowedToSellPromotionLotToCustomer({\n        promotion,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas vendre de lot à ce client');\n    }\n  }\n\n  static isAllowedToModifyAdditionalLot({ lotId, userId }) {\n    const { promotions } = LotService.safeFetchOne({\n      $filters: { _id: lotId },\n      promotions: { _id: 1 },\n    });\n\n    this.isAllowedToModifyLots({ promotionId: promotions._id, userId });\n  }\n\n  static isAllowedToRemoveAdditionalLot({ lotId, userId }) {\n    const { promotions } = LotService.safeFetchOne({\n      $filters: { _id: lotId },\n      promotions: { _id: 1 },\n    });\n\n    this.isAllowedToRemoveLots({ promotionId: promotions._id, userId });\n  }\n\n  static isAllowedToSeePromotionCustomer({ userId, promotionId, loanId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const loan = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      _id: 1,\n      user: { _id: 1 },\n    });\n    const anonymizer = makeLoanAnonymizer({ userId, promotionId });\n    if (anonymizer(loan).isAnonymized) {\n      Security.handleUnauthorized(\"Vous n'avez pas accès à ce client\");\n    }\n  }\n}\n\nexport default PromotionSecurity;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"PropertySecurity.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/collections/PropertySecurity.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { HTTP_STATUS_CODES } from 'core/api/RESTAPI/server/restApiConstants';\nimport Security from '../Security';\nimport { Properties, Promotions } from '../..';\nimport UserService from '../../users/server/UserService';\nimport { ROLES } from '../../users/userConstants';\nimport PromotionSecurity from './PromotionSecurity';\nimport PropertyService from '../../properties/server/PropertyService';\nimport { PROPERTY_CATEGORY } from '../../properties/propertyConstants';\nimport {\n  isAllowedToViewProProperty,\n  isAllowedToModifyProProperty,\n  isAllowedToInviteCustomersToProProperty,\n  isAllowedToInviteProUsersToProProperty,\n  isAllowedToRemoveCustomerFromProProperty,\n  isAllowedToBookProProperty,\n  isAllowedToBookProPropertyToCustomer,\n  isAllowedToSellProProperty,\n  isAllowedToSellProPropertyToCustomer,\n  isAllowedToManageProPropertyPermissions,\n} from '../clientSecurityHelpers';\nimport LoanService from '../../loans/server/LoanService';\nimport { getProPropertyCustomerOwnerType } from '../../properties/server/propertyServerHelpers';\n\nclass PropertySecurity {\n  static getProperty({ propertyId }) {\n    const property = PropertyService.fetchOne({\n      $filters: { _id: propertyId },\n      category: 1,\n      loans: { user: { _id: 1 } },\n      status: 1,\n      userId: 1,\n      userLinks: { _id: 1 },\n      users: { _id: 1 },\n    });\n\n    return property;\n  }\n\n  static getCurrentUser({ userId }) {\n    const currentUser = UserService.fetchOne({\n      $filters: { _id: userId },\n      organisations: { users: { _id: 1 } },\n      properties: { _id: 1, permissions: 1, status: 1 },\n    });\n\n    return currentUser;\n  }\n\n  static getLoan({ loanId }) {\n    const loan = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      user: { _id: 1 },\n    });\n\n    return loan;\n  }\n\n  static getObjects({ propertyId, userId, loanId }) {\n    const objects = {};\n    if (propertyId) {\n      objects.property = this.getProperty({ propertyId });\n    }\n    if (userId) {\n      objects.currentUser = this.getCurrentUser({ userId });\n    }\n    if (loanId) {\n      objects.loan = this.getLoan({ loanId });\n    }\n    return objects;\n  }\n\n  static checkPermissions({\n    propertyId,\n    userId,\n    checkingFunction,\n    errorMessage,\n  }) {\n    if (Security.hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n      return;\n    }\n\n    const { property, currentUser } = this.getObjects({ propertyId, userId });\n\n    if (!property) {\n      throw new Meteor.Error(\n        HTTP_STATUS_CODES.NOT_FOUND,\n        `Property with id \"${propertyId}\" not found`,\n      );\n    }\n\n    if (!checkingFunction({ property, currentUser })) {\n      Security.handleUnauthorized(errorMessage || 'Checking permissions');\n    }\n  }\n\n  static isAllowedToInsert() {\n    Security.checkLoggedIn();\n  }\n\n  static isPromotionLot(propertyId) {\n    const { category } = PropertyService.fetchOne({\n      $filters: { _id: propertyId },\n      category: 1,\n    });\n\n    return category === PROPERTY_CATEGORY.PROMOTION;\n  }\n\n  static checkBelongsToPromotion(propertyId, userId) {\n    const promotion = Promotions.findOne({ 'propertyLinks._id': propertyId });\n    if (promotion) {\n      PromotionSecurity.isAllowedToModify({\n        promotionId: promotion._id,\n        userId,\n      });\n      return;\n    }\n\n    Security.handleUnauthorized('Not allowed to modify promotion property');\n  }\n\n  static isProUserAllowedToUpdate({ propertyId, userId }) {\n    const { category } = Properties.findOne(propertyId);\n    if (category === PROPERTY_CATEGORY.PRO) {\n      this.checkPermissions({\n        propertyId,\n        userId,\n        checkingFunction: isAllowedToModifyProProperty,\n        errorMessage: 'Vous ne pouvez pas modifier ce bien immobilier',\n      });\n    } else if (category === PROPERTY_CATEGORY.PROMOTION) {\n      this.checkBelongsToPromotion(propertyId, userId);\n    } else {\n      Security.handleUnauthorized('Vous ne pouvez pas modifier ce bien immobilier');\n    }\n  }\n\n  static isAllowedToUpdate(propertyId, userId) {\n    if (Security.hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n      return;\n    }\n\n    if (Security.hasMinimumRole({ role: ROLES.PRO, userId })) {\n      this.isProUserAllowedToUpdate({ propertyId, userId });\n    } else {\n      const property = Properties.findOne(propertyId);\n      Security.checkOwnership(property, userId);\n    }\n  }\n\n  static isAllowedToDelete(propertyId, userId) {\n    if (Security.hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n      return;\n    }\n\n    const property = Properties.findOne(propertyId);\n    Security.checkOwnership(property);\n  }\n\n  static hasAccessToProperty({ propertyId, userId }) {\n    try {\n      this.isAllowedToView({ propertyId, userId });\n      return;\n    } catch (error) {\n      const hasProperty = UserService.hasProperty({ userId, propertyId });\n\n      if (!hasProperty) {\n        Security.handleUnauthorized(\"Vous n'avez pas accès à ce bien immobilier\");\n      }\n    }\n  }\n\n  static isPropertyPublic({ propertyId }) {\n    const property = PropertyService.fetchOne({\n      $filters: { _id: propertyId },\n      category: 1,\n    });\n\n    return property && property.category === PROPERTY_CATEGORY.PRO;\n  }\n\n  static checkPropertyIsPublic({ propertyId }) {\n    if (!this.isPropertyPublic({ propertyId })) {\n      Security.handleUnauthorized();\n    }\n  }\n\n  static isAllowedToView({ userId, propertyId }) {\n    this.checkPermissions({\n      propertyId,\n      userId,\n      checkingFunction: isAllowedToViewProProperty,\n      errorMessage: \"Vous n'avez pas accès à ce bien immobilier\",\n    });\n  }\n\n  static isAllowedToManageDocuments({ userId, propertyId }) {\n    this.checkPermissions({\n      propertyId,\n      userId,\n      checkingFunction: isAllowedToModifyProProperty,\n      errorMessage:\n        'Vous ne pouvez pas gérer les documents de ce bien immobilier',\n    });\n  }\n\n  static isAllowedToInviteCustomers({ userId, propertyId }) {\n    this.checkPermissions({\n      propertyId,\n      userId,\n      checkingFunction: isAllowedToInviteCustomersToProProperty,\n      errorMessage:\n        'Vous ne pouvez pas inviter de clients sur ce bien immobilier',\n    });\n  }\n\n  static isAllowedToInviteProUsers({ userId, propertyId }) {\n    this.checkPermissions({\n      propertyId,\n      userId,\n      checkingFunction: isAllowedToInviteProUsersToProProperty,\n      errorMessage:\n        \"Vous ne pouvez pas inviter d'utilisateurs sur ce bien immobilier\",\n    });\n  }\n\n  static isAllowedToRemoveCustomer({ userId, propertyId, loanId }) {\n    if (Security.hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n      return;\n    }\n\n    const { property, currentUser, loan } = this.getObjects({\n      propertyId,\n      userId,\n      loanId,\n    });\n\n    const customerOwnerType = getProPropertyCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      propertyId,\n    });\n\n    if (\n      !isAllowedToRemoveCustomerFromProProperty({\n        property,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas supprimer ce client de ce bien immobilier');\n    }\n  }\n\n  static isAllowedToBook({ userId, propertyId }) {\n    this.checkPermissions({\n      propertyId,\n      userId,\n      checkingFunction: isAllowedToBookProProperty,\n      errorMessage: 'Vous ne pouvez pas réserver ce bien immobilier',\n    });\n  }\n\n  static isAllowedToBookToCustomer({ propertyId, loanId, userId }) {\n    if (Security.hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n      return;\n    }\n\n    const { property, currentUser, loan } = this.getObjects({\n      propertyId,\n      userId,\n      loanId,\n    });\n\n    const customerOwnerType = getProPropertyCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      propertyId,\n    });\n\n    if (\n      !isAllowedToBookProPropertyToCustomer({\n        property,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas réserver ce bien immobilier à ce client');\n    }\n  }\n\n  static isAllowedToCancelBooking({ propertyId, loanId, userId }) {\n    // TODO\n  }\n\n  static isAllowedToSell({ propertyId, userId }) {\n    this.checkPermissions({\n      propertyId,\n      userId,\n      checkingFunction: isAllowedToSellProProperty,\n      errorMessage: 'Vous ne pouvez pas vendre ce bien immobilier',\n    });\n  }\n\n  static isAllowedToSellToCustomer({ propertyId, loanId, userId }) {\n    if (Security.hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n      return;\n    }\n    const { property, currentUser, loan } = this.getObjects({\n      propertyId,\n      userId,\n      loanId,\n    });\n\n    const customerOwnerType = getProPropertyCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      propertyId,\n    });\n\n    if (\n      !isAllowedToSellProPropertyToCustomer({\n        property,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas vendre ce bien immobilier à ce client');\n    }\n  }\n\n  static isAllowedToManagePermissions({ propertyId, userId }) {\n    this.checkPermissions({\n      propertyId,\n      userId,\n      checkingFunction: isAllowedToManageProPropertyPermissions,\n      errorMessage:\n        'Vous ne pouvez pas gérer les permissions sur ce bien immobilier',\n    });\n  }\n\n  static isAllowedToAddAnonymousLoan({ propertyId }) {\n    const property = this.getProperty({ propertyId });\n\n    if (!property || property.category !== PROPERTY_CATEGORY.PRO) {\n      Security.handleUnauthorized('Unauthorized propertyId');\n    }\n  }\n}\n\nexport default PropertySecurity;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"UserSecurity.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/collections/UserSecurity.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Security from '../Security';\nimport { ROLES } from '../../constants';\nimport UserService from '../../users/server/UserService';\n\nclass UserSecurity {\n  isAllowedToInsertByRole = ({ role }) => {\n    if (!role || !Object.values(ROLES).includes(role)) {\n      Security.handleUnauthorized('You can only create accounts with one of the accepted roles.');\n    } else if (!Security.currentUserIsAdmin()) {\n      Security.handleUnauthorized(\"You don't have enough privileges to create an account\");\n    } else if (role === ROLES.DEV || role === ROLES.ADMIN) {\n      Security.checkCurrentUserIsDev();\n    }\n  };\n\n  isAllowedToUpdate = (userId, userId2) => {\n    if (Security.currentUserIsAdmin()) {\n      return;\n    }\n\n    if (userId !== userId2) {\n      Security.handleUnauthorized('Pas autorisé');\n    }\n  };\n\n  isAllowedToInviteUsersToOrganisation = ({ userId, organisationId }) => {\n    if (Security.currentUserIsAdmin()) {\n      return;\n    }\n\n    const { organisations = [] } = UserService.fetchOne({\n      $filters: { _id: userId },\n      organisations: { _id: 1 },\n    });\n\n    if (!organisations.some(({ _id }) => _id === organisationId)) {\n      Security.handleUnauthorized('Pas autorisé à inviter des utilisateurs à cette organisation');\n    }\n  };\n}\n\nexport default new UserSecurity();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"clientSecurityHelpers\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/clientSecurityHelpers/index.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './generalSecurityHelpers';\nexport * from './proPropertySecurityHelpers';\nexport * from './promotionSecurityHelpers';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"generalSecurityHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/clientSecurityHelpers/generalSecurityHelpers.js                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../Security';\n\nexport const hasMinimumRole = ({ role, userId }) => {\n  try {\n    SecurityService.minimumRole(role)(userId);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"proPropertySecurityHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/clientSecurityHelpers/proPropertySecurityHelpers.js                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { hasMinimumRole } from './generalSecurityHelpers';\nimport { ROLES } from '../../users/userConstants';\nimport SecurityService from '../Security';\nimport { PROPERTY_STATUS } from '../../properties/propertyConstants';\nimport {\n  getCurrentUserPermissionsForProProperty,\n  shouldAnonymize,\n} from '../../properties/propertyClientHelper';\n\nconst checkProPropertyPermissions = ({\n  property,\n  userId,\n  requiredPermissions,\n  propertyStatus = [],\n}) => {\n  if (propertyStatus.length && !propertyStatus.includes(property.status)) {\n    return false;\n  }\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  try {\n    SecurityService.hasPermissionOnDoc({\n      doc: property,\n      requiredPermissions,\n      userId,\n    });\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst isUserLinkedToProperty = ({ userId, property = {} }) => {\n  const { userLinks = [], users = [], loans = [] } = property;\n  const userLoans = loans\n    .reduce((usersLoans, { user }) => [...usersLoans, user], [])\n    .filter(x => x);\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId)\n    || userLoans.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToViewProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  return isUserLinkedToProperty({ userId, property });\n};\n\nexport const isAllowedToInviteCustomersToProProperty = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canInviteCustomers: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n    propertyStatus: [PROPERTY_STATUS.FOR_SALE, PROPERTY_STATUS.BOOKED],\n  });\n};\n\nexport const isAllowedToInviteProUsersToProProperty = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canInviteProUsers: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n  });\n};\n\nexport const isAllowedToManageProPropertyPermissions = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canManagePermissions: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n  });\n};\n\nexport const isAllowedToRemoveCustomerFromProProperty = ({\n  property,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: propertyId } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    currentUser,\n    propertyId,\n  });\n\n  return (\n    isAllowedToInviteCustomersToProProperty({ property, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToModifyProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canModifyProperty: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n    propertyStatus: [PROPERTY_STATUS.FOR_SALE],\n  });\n};\n\nexport const isAllowedToSeeProPropertyCustomers = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { userLinks = [], users = [] } = property;\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  const userPermissions = user.permissions || user.$metadata.permissions;\n\n  if (userPermissions.displayCustomerNames === false) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToBookProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canBookLots: true };\n\n  return checkProPropertyPermissions({ property, userId, requiredPermissions });\n};\n\nexport const isAllowedToBookProPropertyToCustomer = ({\n  property,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { _id: propertyId } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    propertyId,\n    currentUser,\n  });\n\n  return (\n    isAllowedToBookProProperty({ property, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToSellProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canSellLots: true,\n  };\n\n  return checkProPropertyPermissions({ property, userId, requiredPermissions });\n};\n\nexport const isAllowedToSellProPropertyToCustomer = ({\n  property,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { _id: propertyId } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    propertyId,\n    currentUser,\n  });\n\n  return (\n    isAllowedToSellProProperty({ property, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"promotionSecurityHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/security/clientSecurityHelpers/promotionSecurityHelpers.js                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { PROMOTION_STATUS, ROLES } from '../../constants';\nimport SecurityService from '../Security';\nimport {\n  shouldAnonymize,\n  getCurrentUserPermissionsForPromotion,\n} from '../../promotions/promotionClientHelpers';\nimport { hasMinimumRole } from './generalSecurityHelpers';\n\nconst checkPromotionPermissions = ({\n  promotion,\n  userId,\n  requiredPermissions,\n  promotionStatus = [],\n}) => {\n  if (promotionStatus.length && !promotionStatus.includes(promotion.status)) {\n    return false;\n  }\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  try {\n    SecurityService.hasPermissionOnDoc({\n      doc: promotion,\n      requiredPermissions,\n      userId,\n    });\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const isAllowedToViewPromotion = ({\n  promotion,\n  currentUser: { _id: userId },\n}) => {\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { userLinks = [], users = [] } = promotion;\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToInviteCustomersToPromotion = ({\n  promotion,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canInviteCustomers: true };\n\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN],\n  });\n};\n\nexport const isAllowedToRemoveCustomerFromPromotion = ({\n  promotion,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: promotionId } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId,\n  });\n\n  return (\n    isAllowedToInviteCustomersToPromotion({ promotion, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToModifyPromotion = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canModifyPromotion: true };\n\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN, PROMOTION_STATUS.PREPARATION],\n  });\n};\n\nexport const isAllowedToManagePromotionDocuments = ({\n  promotion,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canManageDocuments: true };\n\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN, PROMOTION_STATUS.PREPARATION],\n  });\n};\n\nexport const isAllowedToSeePromotionCustomers = ({\n  promotion,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { userLinks = [], users = [] } = promotion;\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  const userPermissions = user.permissions || user.$metadata.permissions;\n\n  if (userPermissions.displayCustomerNames === false) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToAddLotsToPromotion = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canAddLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToModifyPromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canModifyLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToRemovePromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canRemoveLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToBookPromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canBookLots: true };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToBookPromotionLotToCustomer = ({\n  promotion,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: promotionId } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId,\n  });\n  return (\n    isAllowedToBookPromotionLots({ promotion, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToSellPromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canSellLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToSellPromotionLotToCustomer = ({\n  promotion,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: promotionId } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId,\n  });\n  return (\n    isAllowedToSellPromotionLots({ promotion, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"updateWatchers\":{\"updateWatcherConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/updateWatchers/updateWatcherConstants.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const UPDATE_WATCHERS_COLLECTION = 'updateWatchers';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"UpdateWatcherService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/updateWatchers/server/UpdateWatcherService.js                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport intersection from 'lodash/intersection';\nimport difference from 'lodash/difference';\nimport moment from 'moment';\n\nimport { LOANS_COLLECTION } from 'core/api/loans/loanConstants';\nimport LoanService from 'core/api/loans/server/LoanService';\nimport Intl from '../../../utils/server/intl';\nimport { toMoney } from '../../../utils/conversionFunctions';\nimport { percentFormatters } from '../../../utils/formHelpers';\nimport { BORROWERS_COLLECTION, PROPERTIES_COLLECTION } from '../../constants';\nimport { updateWatcherNotification } from '../../slack/server/slackNotifications';\nimport UserService from '../../users/server/UserService';\nimport CollectionService from '../../helpers/CollectionService';\nimport UpdateWatchers from './updateWatchers';\n\nclass UpdateWatcherService extends CollectionService {\n  constructor() {\n    super(UpdateWatchers);\n  }\n\n  addUpdateWatching({ collection, fields, shouldWatch = () => true }) {\n    const that = this;\n    const hookHandle = collection.after.update(function (\n      userId,\n      doc,\n      fieldNames,\n    ) {\n      const collectionName = collection._name;\n      const changedFields = that.getChangedFields({ fieldNames, fields });\n\n      if (!changedFields || changedFields.length === 0) {\n        return;\n      }\n\n      if (shouldWatch({ userId, fieldNames })) {\n        that.updateWatcher({\n          userId,\n          collectionName,\n          doc,\n          changedFields,\n          previousDoc: this.previous,\n        });\n      }\n    });\n\n    return hookHandle;\n  }\n\n  getChangedFields({ fieldNames, fields }) {\n    return intersection(fieldNames, fields);\n  }\n\n  updateWatcher({ collectionName, doc, changedFields, previousDoc, userId }) {\n    const existingUpdateWatcher = this.findOne({\n      collection: collectionName,\n      docId: doc._id,\n    });\n\n    if (!existingUpdateWatcher) {\n      this.insertWatcher({\n        userId,\n        doc,\n        previousDoc,\n        collection: collectionName,\n        changedFields,\n      });\n    } else {\n      this.update({\n        currentWatcher: existingUpdateWatcher,\n        doc,\n        previousDoc,\n        changedFields,\n      });\n    }\n  }\n\n  insertWatcher({ doc, previousDoc, collection, changedFields, userId }) {\n    return this.insert({\n      userId,\n      docId: doc._id,\n      collection,\n      updatedFields: this.createFieldDiffs({\n        previous: previousDoc,\n        current: doc,\n        fieldNames: changedFields,\n      }),\n    });\n  }\n\n  createFieldDiffs({ previous, current, fieldNames }) {\n    return fieldNames\n      .map((fieldName) => {\n        if (previous[fieldName] === current[fieldName]) {\n          return null;\n        }\n\n        return {\n          fieldName,\n          previousValue: previous[fieldName],\n          currentValue: current[fieldName],\n        };\n      })\n      .filter(x => x);\n  }\n\n  getUpdatedFieldDiffs({ updatedFields, doc }) {\n    return updatedFields\n      .map((updatedField) => {\n        const newValue = doc[updatedField.fieldName];\n\n        // If a value is changed back to its old value, remove it\n        if (newValue === updatedField.previousValue) {\n          return null;\n        }\n\n        if (newValue !== undefined) {\n          return { ...updatedField, currentValue: newValue };\n        }\n\n        return updatedField;\n      })\n      .filter(x => x);\n  }\n\n  update({ currentWatcher, doc, previousDoc, changedFields }) {\n    const previouslyUpdatedFields = currentWatcher.updatedFields.map(({ fieldName }) => fieldName);\n    const newFields = difference(changedFields, previouslyUpdatedFields);\n\n    const updatedDiffs = this.getUpdatedFieldDiffs({\n      updatedFields: currentWatcher.updatedFields,\n      doc,\n    });\n\n    const newDiffs = this.createFieldDiffs({\n      current: doc,\n      previous: previousDoc,\n      fieldNames: newFields,\n    });\n\n    return this.baseUpdate(\n      { _id: currentWatcher._id },\n      { $set: { updatedFields: [...updatedDiffs, ...newDiffs] } },\n    );\n  }\n\n  getOldUpdateWatchers({ secondsFromNow }) {\n    const date = new Date();\n    date.setSeconds(date.getSeconds() - secondsFromNow);\n    const foundWatchers = this.find({ updatedAt: { $lt: date } }).fetch();\n\n    return foundWatchers;\n  }\n\n  processUpdateWatcher({\n    _id: updateWatcherId,\n    userId,\n    docId,\n    collection,\n    updatedFields,\n  }) {\n    const user = UserService.fetchOne({\n      $filters: { _id: userId },\n      assignedEmployee: { email: 1 },\n      name: 1,\n      roles: 1,\n    });\n\n    if (!user) {\n      return this.remove(updateWatcherId);\n    }\n\n    const title = this.getNotificationTitle({ docId, collection });\n    const message = this.formatUpdatedFields(updatedFields);\n\n    updateWatcherNotification({\n      user,\n      title,\n      collection,\n      docId,\n      message,\n    });\n\n    this.remove(updateWatcherId);\n  }\n\n  getNotificationTitle({ docId, collection }) {\n    const doc = Mongo.Collection.get(collection).findOne({ _id: docId });\n\n    // Document has been deleted\n    if (!doc) {\n      return;\n    }\n\n    switch (collection) {\n    case BORROWERS_COLLECTION: {\n      const { firstName, lastName } = doc;\n      return `Modifications pour l'emprunteur \"${firstName\n          || ''} ${lastName || ''}\"`;\n    }\n\n    case PROPERTIES_COLLECTION: {\n      const { address1 } = doc;\n      return `Modifications pour le bien immo \"${address1}\"`;\n    }\n\n    case LOANS_COLLECTION: {\n      const { name, promotions, hasPromotion } = LoanService.fetchOne({\n        $filters: { _id: docId },\n        name: 1,\n        promotions: { name: 1 },\n        hasPromotion: 1,\n      });\n      const text = `Modifications dans le dossier ${name}`;\n      const suffix = hasPromotion ? ` (${promotions[0].name})` : '';\n      return text + suffix;\n    }\n\n    default:\n      return `Modifications dans ${collection}`;\n    }\n  }\n\n  formatUpdatedFields(updatedFields) {\n    return updatedFields.map(field => this.formatField(field)).join('\\n');\n  }\n\n  formatField({ fieldName, previousValue, currentValue }) {\n    const previousValueIsNonEmpty = previousValue\n      || (Array.isArray(previousValue) && previousValue.length > 0);\n\n    if (previousValueIsNonEmpty) {\n      if (Array.isArray(currentValue)) {\n        return this.formatArrayDiff(fieldName, previousValue, currentValue);\n      }\n\n      return `*${Intl.formatMessage({\n        id: `Forms.${fieldName}`,\n      })}*: ${this.formatValue(previousValue, fieldName)} -> ${this.formatValue(\n        currentValue,\n        fieldName,\n      )}`;\n    }\n\n    return `*${Intl.formatMessage({\n      id: `Forms.${fieldName}`,\n    })}*: ${this.formatValue(currentValue, fieldName)}`;\n  }\n\n  formatArrayDiff(fieldName, previousValue, currentValue) {\n    const stringifiedPrevious = previousValue.map(JSON.stringify);\n    const stringifiedCurrent = currentValue.map(JSON.stringify);\n    const differentValues = currentValue\n      .map((val, i) => ({\n        val,\n        _currIndex: i,\n        _atIndex: stringifiedPrevious.indexOf(stringifiedCurrent[i]),\n      }))\n      .filter(({ _atIndex }) => _atIndex < 0);\n\n    const diff = differentValues\n      .map(({ _currIndex, val }) => {\n        const prefix = `\\`${_currIndex + 1}\\`\\n`;\n        const prev = previousValue && previousValue[_currIndex];\n\n        if (val && typeof val === 'object') {\n          return `${prefix}${this.formatObjectDiff(fieldName, prev, val)}`;\n        }\n\n        if (prev) {\n          const previous = this.formatValue(prev, fieldName);\n          const current = this.formatValue(val, fieldName, true);\n\n          return `${prefix}${previous} -> ${current}`;\n        }\n\n        return `${prefix}${this.formatValue(val, fieldName)}`;\n      })\n      .join('\\n');\n\n    const removedValues = previousValue.length > currentValue.length\n      ? previousValue\n        .map((item, i) => {\n          if (i >= currentValue.length) {\n            const prefix = `\\`${i + 1}\\`\\n`;\n\n            return `${prefix}${this.formatValue(\n              item,\n              fieldName,\n            )} -> _supprimé_`;\n          }\n          return null;\n        })\n        .filter(x => x)\n        .join('\\n')\n      : '';\n\n    return `*${Intl.formatMessage({\n      id: `Forms.${fieldName}`,\n    })}*:\\n${diff}${removedValues}`;\n  }\n\n  formatObjectDiff(parentName, previousValue, currentValue) {\n    const updated = Object.keys(currentValue)\n      .map((key) => {\n        const value = currentValue[key];\n        const previous = previousValue && previousValue[key];\n\n        if (value === previous) {\n          return null;\n        }\n\n        if (previous !== undefined) {\n          return `*${Intl.formatMessage({\n            id: `Forms.${parentName}.${key}`,\n          })}*: ${previous} -> ${value}`;\n        }\n\n        return `*${Intl.formatMessage({\n          id: `Forms.${parentName}.${key}`,\n        })}*: ${value}`;\n      })\n      .filter(x => x)\n      .join('\\n');\n\n    return updated;\n  }\n\n  formatValue(value, parentKey, skipPrefix) {\n    if (typeof value === 'boolean') {\n      return value ? 'Oui' : 'Non';\n    }\n\n    if (typeof value === 'number') {\n      return value === 0\n        ? '0'\n        : value > 1\n          ? toMoney(value)\n          : `${percentFormatters.format(value)}%`;\n    }\n\n    if (!value) {\n      return '-';\n    }\n\n    if (value instanceof Date) {\n      return moment(value).format('D/M/YYYY');\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(item => this.formatValue(item, parentKey)).join('\\n');\n    }\n\n    if (typeof value === 'object') {\n      return Object.keys(value)\n        .map((key) => {\n          const val = value[key];\n\n          if (skipPrefix) {\n            return this.formatValue(val, `${parentKey}.${key}`);\n          }\n\n          return `*${Intl.formatMessage({\n            id: `Forms.${parentKey}.${key}`,\n          })}*: ${this.formatValue(val, `${parentKey}.${key}`)}`;\n        })\n        .join(', ');\n    }\n\n    return value;\n  }\n\n  manageUpdateWatchers({ secondsFromNow }) {\n    this.getOldUpdateWatchers({ secondsFromNow }).forEach(updateWatcher =>\n      this.processUpdateWatcher(updateWatcher));\n  }\n}\n\nexport default new UpdateWatcherService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"updateWatchers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/updateWatchers/server/updateWatchers.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport { createdAt, updatedAt } from '../../helpers/sharedSchemas';\nimport { UPDATE_WATCHERS_COLLECTION } from '../updateWatcherConstants';\n\nconst UpdateWatchers = new Mongo.Collection(UPDATE_WATCHERS_COLLECTION);\n\nUpdateWatchers.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true,\n});\n\nUpdateWatchers.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false,\n});\n\nconst UpdateWatcherSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  collection: String,\n  docId: String,\n  userId: { type: String, optional: true },\n  updatedFields: { type: Array, defaultValue: [] },\n  'updatedFields.$': { type: Object, blackbox: true },\n});\n\nUpdateWatchers.attachSchema(UpdateWatcherSchema);\n\nMeteor.startup(() => {\n  UpdateWatchers._ensureIndex({ docId: 1, collection: 1 });\n  UpdateWatchers._ensureIndex({ updatedAt: -1 });\n});\n\nexport default UpdateWatchers;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"updateWatcherCron.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/updateWatchers/server/updateWatcherCron.js                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { SyncedCron } from 'meteor/littledata:synced-cron';\nimport UpdateWatcherService from './UpdateWatcherService';\nimport SlackService from '../../slack/server/SlackService';\n\nSyncedCron.add({\n  name: 'Manage update watchers',\n  schedule(parser) {\n    return parser.text('every 1 minute');\n  },\n  job() {\n    try {\n      UpdateWatcherService.manageUpdateWatchers({ secondsFromNow: 120 });\n    } catch (error) {\n      SlackService.sendError({\n        error,\n        additionalData: ['Manage update watchers CRON error'],\n      });\n    }\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/index.js                                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport './initialization';\nimport { Meteor } from 'meteor/meteor';\n\nimport * as _constants from './constants';\nimport LoanSchema from './loans/schemas/LoanSchema';\nimport PromotionOptionSchema from './promotionOptions/schemas/PromotionOptionSchema';\nimport BorrowerSchema from './borrowers/schemas/BorrowerSchema';\nimport PropertySchema from './properties/schemas/PropertySchema';\nimport { TasksSchema } from './tasks/tasks';\nimport PromotionSchema from './promotions/schemas/PromotionSchema';\nimport LotSchema from './lots/schemas/LotSchema';\nimport { OfferSchema } from './offers/offers';\nimport PromotionLotSchema from './promotionLots/schemas/PromotionLotSchema';\nimport { OrganisationSchema } from './organisations/organisations';\nimport { UserSchema } from './users/users';\nimport InterestRatesSchema from './interestRates/schemas/interestRatesSchema';\nimport Irs10ySchema from './irs10y/schemas/irs10ySchema';\nimport MortgageNoteSchema from './mortgageNotes/schemas/MortgageNoteSchema';\nimport ContactSchema from './contacts/schemas/contactSchema';\nimport LenderSchema from './lenders/schemas/lenderSchema';\nimport RevenueSchema from './revenues/schemas/revenueSchema';\n\nexport { default as Borrowers } from './borrowers';\nexport { default as Loans } from './loans';\nexport { default as Lots } from './lots';\nexport { default as Offers } from './offers';\nexport { default as Organisations } from './organisations';\nexport { default as PromotionLots } from './promotionLots';\nexport { default as PromotionOptions } from './promotionOptions';\nexport { default as Promotions } from './promotions';\nexport { default as Properties } from './properties';\nexport { default as Tasks } from './tasks';\nexport { default as Users } from './users';\nexport { default as InterestRates } from './interestRates';\nexport { default as Irs10y } from './irs10y';\nexport { default as MortgageNotes } from './mortgageNotes';\nexport { default as Contacts } from './contacts';\nexport { default as Lenders } from './lenders';\nexport { default as LenderRules } from './lenderRules';\nexport { default as Revenues } from './revenues';\n\nexport * from './methods';\nexport * from './helpers';\nexport * from './containerToolkit';\n\n// Do this for autocompletion...\nexport const constants = _constants;\nexport const schemas = {\n  [constants.BORROWERS_COLLECTION]: BorrowerSchema,\n  [constants.LOANS_COLLECTION]: LoanSchema,\n  [constants.LOTS_COLLECTION]: LotSchema,\n  [constants.OFFERS_COLLECTION]: OfferSchema,\n  [constants.PROMOTION_LOTS_COLLECTION]: PromotionLotSchema,\n  [constants.PROMOTION_OPTIONS_COLLECTION]: PromotionOptionSchema,\n  [constants.PROMOTIONS_COLLECTION]: PromotionSchema,\n  [constants.PROPERTIES_COLLECTION]: PropertySchema,\n  [constants.TASKS_COLLECTION]: TasksSchema,\n  [constants.ORGANISATIONS_COLLECTION]: OrganisationSchema,\n  [constants.USERS_COLLECTION]: UserSchema,\n  [constants.INTEREST_RATES_COLLECTION]: InterestRatesSchema,\n  [constants.IRS10Y_COLLECTION]: Irs10ySchema,\n  [constants.MORTGAGE_NOTES_COLLECTION]: MortgageNoteSchema,\n  [constants.CONTACTS_COLLECTION]: ContactSchema,\n  [constants.LENDERS_COLLECTION]: LenderSchema,\n  [constants.REVENUES_COLLECTION]: RevenueSchema,\n};\n\nMeteor.isStaging = Meteor.settings.public.environment === 'staging';\nMeteor.isDevEnvironment = Meteor.settings.public.environment === 'dev-production';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods\":{\"methods.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/methods/methods.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Mutation } from 'meteor/cultofcoders:mutations';\nimport { Match, check } from 'meteor/check';\n\nif (Meteor.isTest) {\n  Mutation.isDebugEnabled = false;\n} else {\n  Mutation.isDebugEnabled = { omit: ['analyticsPage', 'analyticsLogin'] };\n}\n\nexport class Method extends Mutation {\n  run(callParams = {}, options = {}) {\n    const { config } = this;\n    let location;\n    if (Meteor.isClient && window && window.location) {\n      location = {\n        href: window.location.href,\n        host: window.location.host,\n        pathname: window.location.pathname,\n      };\n    }\n\n    const aopData = { config, params: callParams };\n    Mutation.callAOP.executeBefores(aopData);\n    this.callAOP.executeBefores(aopData);\n\n    const { name, params } = config;\n    const additionalData = { location };\n\n    return new Promise((resolve, reject) => {\n      Meteor.apply(\n        name,\n        [callParams, additionalData],\n        options,\n        (error, result) => {\n          const aopData = {\n            config,\n            params: callParams,\n            result,\n            error,\n          };\n\n          Mutation.callAOP.executeAfters(aopData);\n          this.callAOP.executeAfters(aopData);\n\n          if (error) {\n            reject(error);\n          } else {\n            resolve(result);\n          }\n        },\n      );\n    });\n  }\n\n  setHandler(fn) {\n    const { config } = this;\n    const { name, params } = config;\n    const self = this;\n\n    Meteor.methods({\n      [name](params = {}, additionalData) {\n        check(additionalData, Object);\n        check(\n          additionalData.location,\n          Match.Maybe({\n            href: Match.Maybe(String),\n            host: Match.Maybe(String),\n            pathname: Match.Maybe(String),\n          }),\n        );\n\n        if (Meteor.isServer && additionalData.location) {\n          const { setClientUrl } = require('../../utils/server/getClientUrl');\n          setClientUrl(additionalData.location);\n        }\n\n        if (config.validate) {\n          config.validate(params);\n        } else if (config.params) {\n          check(params, config.params);\n        }\n\n        let aopData = {\n          context: this,\n          config,\n          params,\n        };\n\n        Mutation.executionAOP.executeBefores(aopData);\n        self.executionAOP.executeBefores(aopData);\n\n        let error;\n        let result;\n        try {\n          result = fn.call(null, this, params);\n        } catch (e) {\n          error = e;\n        }\n\n        aopData = {\n          context: this,\n          config,\n          params,\n          result,\n          error,\n        };\n\n        Mutation.executionAOP.executeAfters(aopData);\n        self.executionAOP.executeAfters(aopData);\n\n        if (error) {\n          throw error;\n        }\n\n        return result;\n      },\n    });\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/methods/index.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './registerMethodDefinitions';\nexport * from './methods';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"registerMethodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/methods/registerMethodDefinitions.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Export all method definitions here\nexport * from '../borrowers/methodDefinitions';\nexport * from '../contacts/methodDefinitions';\nexport * from '../email/methodDefinitions';\nexport * from '../files/methodDefinitions';\nexport * from '../impersonation/methodDefinitions';\nexport * from '../interestRates/methodDefinitions';\nexport * from '../irs10y/methodDefinitions';\nexport * from '../lenderRules/methodDefinitions';\nexport * from '../lenders/methodDefinitions';\nexport * from '../loans/methodDefinitions';\nexport * from '../lots/methodDefinitions';\nexport * from '../mortgageNotes/methodDefinitions';\nexport * from '../offers/methodDefinitions';\nexport * from '../organisations/methodDefinitions';\nexport * from '../pdf/methodDefinitions';\nexport * from '../promotionLots/methodDefinitions';\nexport * from '../promotionOptions/methodDefinitions';\nexport * from '../promotions/methodDefinitions';\nexport * from '../properties/methodDefinitions';\nexport * from '../slack/methodDefinitions';\nexport * from '../tasks/methodDefinitions';\nexport * from '../users/methodDefinitions';\nexport * from '../analytics/methodDefinitions';\n\nexport * from './methodDefinitions';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/methods/methodDefinitions.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from './methods';\n\nexport const getMixpanelAuthorization = new Method({\n  name: 'getMixpanelAuthorization',\n});\n\nexport const getServerTime = new Method({\n  name: 'getServerTime',\n});\n\nexport const downloadPDF = new Method({\n  name: 'downloadPDF',\n  params: {\n    loanId: String,\n    type: String,\n  },\n});\n\nexport const addBorrower = new Method({\n  name: 'addBorrower',\n  params: {\n    loanId: String,\n    borrower: Match.Optional(Object),\n  },\n});\n\nexport const setUserToLoan = new Method({\n  name: 'setUserToLoan',\n  params: {\n    loanId: String,\n  },\n});\n\nexport const removeBorrower = new Method({\n  name: 'removeBorrower',\n  params: {\n    loanId: String,\n    borrowerId: String,\n  },\n});\n\nexport const submitContactForm = new Method({\n  name: 'submitContactForm',\n  params: {\n    name: String,\n    email: String,\n    phoneNumber: String,\n    details: Match.Optional(String),\n  },\n  rateLimit: {\n    global: {\n      limit: 1,\n      timeRange: 5000,\n    },\n  },\n});\n\nexport const addUserToDoc = new Method({\n  name: 'addUserToDoc',\n  params: {\n    docId: String,\n    collection: String,\n    options: Object,\n    userId: String,\n  },\n});\n\nexport const throwDevError = new Method({\n  name: 'throwDevError',\n  params: {\n    promise: Match.Maybe(Boolean),\n    promiseNoReturn: Match.Maybe(Boolean),\n  },\n});\n\nexport const setAdditionalDoc = new Method({\n  name: 'setAdditionalDoc',\n  params: {\n    collection: String,\n    id: String,\n    additionalDocId: String,\n    requiredByAdmin: Boolean,\n    label: Match.Optional(String),\n    category: Match.Optional(String),\n  },\n});\n\nexport const removeAdditionalDoc = new Method({\n  name: 'removeAdditionalDoc',\n  params: {\n    collection: String,\n    id: String,\n    additionalDocId: String,\n  },\n});\n\nexport const migrateToLatest = new Method({\n  name: 'migrateToLatest',\n});\n\nexport const updateDocument = new Method({\n  name: 'updateDocument',\n  params: {\n    collection: String,\n    docId: String,\n    object: Object,\n  },\n});\n\nexport const updateDocumentUnset = new Method({\n  name: 'updateDocumentUnset',\n  params: {\n    collection: String,\n    docId: String,\n    object: Object,\n  },\n});\n\nexport const generateScenario = new Method({\n  name: 'generateScenario',\n  params: {\n    scenario: Object,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"clientQueryManager.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/methods/clientQueryManager.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport ClientEventService from '../events/ClientEventService';\n\nconst isActive = () => !!global.window;\n\nconst init = () => {\n  if (isActive()) {\n    window.activeQueries = {};\n  }\n};\n\ninit();\n\nconst addQuery = (queryName, type) => {\n  // Add support for passing method config objects\n  if (typeof type === 'object') {\n    window.activeQueries[type.config.name] = [\n      ...(window.activeQueries[type.config.name] || []),\n      queryName,\n    ];\n  } else {\n    window.activeQueries[type] = [\n      ...(window.activeQueries[type] || []),\n      queryName,\n    ];\n  }\n};\n\nexport const addQueryToRefetch = (queryName, type) => {\n  if (isActive()) {\n    if (!type) {\n      return;\n    }\n\n    if (Array.isArray(type)) {\n      type.forEach((t) => {\n        addQuery(queryName, t);\n      });\n    } else {\n      addQuery(queryName, type);\n    }\n  }\n};\n\nexport const removeQueryToRefetch = (queryName) => {\n  if (isActive()) {\n    Object.keys(window.activeQueries).forEach((type) => {\n      if (Array.isArray(window.activeQueries[type])) {\n        window.activeQueries[type] = window.activeQueries[type].filter(query => query !== queryName);\n\n        // Clean up this particular refetch key if there is no query in it anymore\n        if (window.activeQueries[type].length === 0) {\n          window.activeQueries[type] = undefined;\n        }\n      }\n    });\n  }\n};\n\nexport const refetchQuery = query => ClientEventService.emit(query);\n\nexport const refetchQueries = (methodName) => {\n  if (isActive()) {\n    if (window.activeQueries.all) {\n      window.activeQueries.all.forEach(refetchQuery);\n    }\n\n    if (window.activeQueries[methodName]) {\n      window.activeQueries[methodName].forEach(refetchQuery);\n    }\n  }\n};\n\nif (Meteor.isAppTest && global.window) {\n  global.window.refetchQueries = refetchQueries;\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/methods/server/index.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport './serverMethodsConfig';\nimport './registerServerMethods';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"serverMethodsConfig.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/methods/server/serverMethodsConfig.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport SlackService from '../../slack/server/SlackService';\nimport ServerEventService from '../../events/server/ServerEventService';\nimport { Method } from '../methods';\n\nconst logMethod = ({ context, config, params, result, error }) => {\n  if (Meteor.isProduction || Meteor.isStaging || Meteor.isDevEnvironment) {\n    console.log('---------------------- METHOD CALL ----------------------');\n    console.log(`METHOD Method ${config.name} called`);\n    console.log('METHOD Params:', params);\n    console.log('METHOD userId:', context.userId);\n    console.log('METHOD result:', result);\n    console.log('METHOD error:', error);\n  }\n};\n\nMethod.addBeforeExecution(({ context, config, params }) => {\n  ServerEventService.emitBeforeMethod(config, {\n    context,\n    config,\n    params,\n  });\n});\n\nMethod.addAfterExecution(({ context, config, params, result, error }) => {\n  logMethod({ context, config, params, result, error });\n\n  if (error) {\n    SlackService.sendError({\n      error,\n      additionalData: [\n        `Server method error in method: \"${config.name}\"`,\n        { name: 'context', data: context },\n        { name: 'params', data: params },\n      ],\n      userId: context.userId,\n    });\n  }\n\n  if (!error) {\n    ServerEventService.emitAfterMethod(config, {\n      context,\n      config,\n      params,\n      result,\n      error,\n    });\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"registerServerMethods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/methods/server/registerServerMethods.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport '../../activities/server/methods';\nimport '../../analytics/server/methods';\nimport '../../borrowers/server/methods';\nimport '../../contacts/server/methods';\nimport '../../email/server/methods';\nimport '../../files/server/methods';\nimport '../../impersonation/server/methods';\nimport '../../interestRates/server/methods';\nimport '../../irs10y/server/methods';\nimport '../../lenderRules/server/methods';\nimport '../../lenders/server/methods';\nimport '../../loans/server/methods';\nimport '../../lots/server/methods';\nimport '../../mortgageNotes/server/methods';\nimport '../../notifications/server/methods';\nimport '../../offers/server/methods';\nimport '../../organisations/server/methods';\nimport '../../pdf/server/methods';\nimport '../../promotionLots/server/methods';\nimport '../../promotionOptions/server/methods';\nimport '../../promotions/server/methods';\nimport '../../properties/server/methods';\nimport '../../revenues/server/methods';\nimport '../../slack/server/methods';\nimport '../../tasks/server/methods';\nimport '../../users/server/methods';\n\nimport './methods';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/methods/server/methods.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\n\nimport { LOANS_COLLECTION } from '../../constants';\nimport SecurityService from '../../security';\nimport { Services } from '../../server';\nimport LoanService from '../../loans/server/LoanService';\nimport BorrowerService from '../../borrowers/server/BorrowerService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport {\n  getMixpanelAuthorization,\n  getServerTime,\n  downloadPDF,\n  addBorrower,\n  setUserToLoan,\n  removeBorrower,\n  submitContactForm,\n  addUserToDoc,\n  throwDevError,\n  setAdditionalDoc,\n  removeAdditionalDoc,\n  migrateToLatest,\n  updateDocument,\n  updateDocumentUnset,\n  generateScenario,\n} from '../methodDefinitions';\nimport generator from '../../factories';\nimport { migrate } from '../../migrations/server';\n\ngetMixpanelAuthorization.setHandler(() => {\n  SecurityService.checkCurrentUserIsAdmin();\n  const btoa = require('btoa');\n  const { API_KEY, API_SECRET } = Meteor.settings.mixpanel;\n\n  return `Basic ${btoa(`${API_SECRET}:${API_KEY}`)}`;\n});\n\ngetServerTime.setHandler(() => new Date());\n\ndownloadPDF.setHandler(() => {\n  // TODO\n});\n\naddBorrower.setHandler((context, { loanId, borrower }) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  const loan = LoanService.get(loanId);\n\n  // A loan can't have more than 2 borrowers at the moment\n  if (loan.borrowerIds.length >= 2) {\n    throw new Meteor.Error('Vous ne pouvez pas avoir plus de 2 emprunteurs');\n  }\n\n  const newBorrowerId = BorrowerService.insert({\n    borrower,\n    userId: loan.userId,\n  });\n\n  return LoanService.pushValue({\n    loanId,\n    object: { borrowerIds: newBorrowerId },\n  });\n});\n\nsetUserToLoan.setHandler((context, { loanId }) => {\n  SecurityService.checkLoggedIn();\n  const loan = LoanService.get(loanId);\n  const { borrowerIds, propertyId } = loan;\n\n  if (loan.userId) {\n    throw new Meteor.Error('loan-already-owned');\n  }\n\n  const currentUserId = Meteor.userId();\n\n  LoanService.update({ loanId, object: { userId: currentUserId } });\n  borrowerIds.forEach((borrowerId) => {\n    BorrowerService.update({ borrowerId, object: { userId: currentUserId } });\n  });\n  PropertyService.update({ propertyId, object: { userId: currentUserId } });\n});\n\nremoveBorrower.setHandler((context, { loanId, borrowerId }) => {\n  SecurityService.loans.isAllowedToUpdate(loanId);\n  SecurityService.borrowers.isAllowedToUpdate(borrowerId);\n\n  const loan = LoanService.get(loanId);\n\n  // A loan has to have at least 1 borrower\n  if (loan.borrowerIds.length <= 1) {\n    return false;\n  }\n\n  BorrowerService.remove({ borrowerId });\n\n  return LoanService.pullValue({ loanId, object: { borrowerIds: borrowerId } });\n});\n\n// This method needs to exist as its being listened to in EmailListeners\nsubmitContactForm.setHandler(() => null);\n\naddUserToDoc.setHandler(({ userId }, { docId, collection, options, userId: newUserId }) => {\n  const doc = Mongo.Collection.get(collection).findOne(docId);\n  try {\n    SecurityService.checkUserIsAdmin(userId);\n  } catch (error) {\n    SecurityService.checkOwnership(doc);\n  }\n  Mongo.Collection.get(collection).update(docId, {\n    userLinks: { $push: { _id: newUserId, ...options } },\n  });\n});\n\nthrowDevError.setHandler((_, { promise, promiseNoReturn }) => {\n  console.log('Throwing dev error..');\n\n  if (promise) {\n    return new Promise((resolve, reject) => {\n      reject(new Meteor.Error(400, 'Dev promise error!'));\n    });\n  }\n  if (promiseNoReturn) {\n    new Promise((resolve, reject) => {\n      reject(new Meteor.Error(400, 'Dev promise error!'));\n    });\n\n    return;\n  }\n\n  throw new Meteor.Error(400, 'Dev error!');\n});\n\nsetAdditionalDoc.setHandler((context, { collection, ...rest }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return Services[collection].setAdditionalDoc(rest);\n});\n\nremoveAdditionalDoc.setHandler((context, { collection, ...rest }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return Services[collection].removeAdditionalDoc(rest);\n});\n\nmigrateToLatest.setHandler(({ userId }) => {\n  SecurityService.checkCurrentUserIsDev();\n  migrate();\n});\n\nupdateDocument.setHandler(({ userId }, { collection, docId, object }) => {\n  const service = Services[collection];\n  try {\n    SecurityService.checkUserIsAdmin(userId);\n  } catch (error) {\n    if (collection === LOANS_COLLECTION) {\n      SecurityService.loans.isAllowedToUpdate(docId);\n    } else {\n      const doc = service.findOne(docId);\n      SecurityService.checkOwnership(doc);\n    }\n  }\n\n  return service._update({ id: docId, object });\n});\n\nupdateDocumentUnset.setHandler(({ userId }, { collection, docId, object }) => {\n  const service = Services[collection];\n  SecurityService.checkUserIsDev(userId);\n\n  return service._update({ id: docId, object, operator: '$unset' });\n});\n\ngenerateScenario.setHandler(({ userId }, { scenario }) => {\n  if (!Meteor.isTest) {\n    SecurityService.checkUserIsAdmin(userId);\n  }\n\n  return generator(scenario);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"impersonation\":{\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/impersonation/methodDefinitions.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Method } from '../methods/methods';\n\nexport const impersonateUser = new Method({\n  name: 'impersonateUser',\n  params: {\n    authToken: String,\n    userId: String,\n  },\n});\n\nexport const impersonateAdmin = new Method({\n  name: 'impersonateAdmin',\n  params: {\n    userId: String,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/impersonation/server/methods.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from 'core/api/security/index';\nimport { impersonateUser, impersonateAdmin } from '../methodDefinitions';\nimport ImpersonateService from './ImpersonateService';\n\nimpersonateUser.setHandler((context, { authToken, userId }) => {\n  const impersonatedUser = ImpersonateService.impersonate({\n    context,\n    authToken,\n    userIdToImpersonate: userId,\n  });\n\n  return impersonatedUser;\n});\n\nimpersonateAdmin.setHandler((context, { userId }) => {\n  SecurityService.checkUserIsDev(context.userId);\n  const impersonatedUser = ImpersonateService.impersonateAdmin({\n    context,\n    userIdToImpersonate: userId,\n  });\n\n  return impersonatedUser;\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ImpersonateService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/impersonation/server/ImpersonateService.js                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport Users from '../../users';\nimport Security from '../../security';\n\nclass ImpersonateService {\n  /**\n   * Impersonates the user\n   * @param {*} context The context of a given meteor method\n   * @param {*} authToken The token received from client\n   * @param {*} userIdToImpersonate\n   */\n  impersonate({ context, authToken, userIdToImpersonate }) {\n    const user = this._findUserByToken(authToken);\n\n    if (user) {\n      this._checkRolesForImpersonation(user._id);\n    } else {\n      this._throwNotAuthorized();\n    }\n\n    context.setUserId(userIdToImpersonate);\n    return Users.findOne(userIdToImpersonate);\n  }\n\n  _throwNotAuthorized() {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n\n  _checkRolesForImpersonation(userId) {\n    if (!Security.isUserAdmin(userId)) {\n      this._throwNotAuthorized();\n    }\n  }\n\n  /**\n   * @param {string} authToken\n   * @returns {object|null}\n   */\n  _findUserByToken(authToken) {\n    // eslint-disable-next-line\n    const hashedToken = Accounts._hashLoginToken(authToken);\n\n    return Users.findOne(\n      { 'services.resume.loginTokens.hashedToken': hashedToken },\n      // We just need to check the validity, no need for other data\n      { fields: { _id: 1 } },\n    );\n  }\n\n  impersonateAdmin({ context, userIdToImpersonate }) {\n    context.setUserId(userIdToImpersonate);\n  }\n}\n\nexport default new ImpersonateService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"slack\":{\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/slack/methodDefinitions.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\nimport { Method } from '../methods/methods';\n\nexport const notifyAssignee = new Method({\n  name: 'notifyAssignee',\n  params: {\n    message: Match.Optional(String),\n    title: Match.Optional(String),\n  },\n});\n\nexport const notifyOfUpload = new Method({\n  name: 'notifyOfUpload',\n  params: {\n    docLabel: String,\n    fileName: String,\n    loanId: Match.Optional(String),\n  },\n});\n\nexport const logError = new Method({\n  name: 'logError',\n  params: {\n    error: Match.Any,\n    additionalData: Match.Maybe(Match.Any),\n    url: Match.Optional(String),\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"SlackService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/slack/server/SlackService.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport isArray from 'lodash/isArray';\nimport pick from 'lodash/pick';\nimport fetch from 'node-fetch';\n\nimport colors from 'core/config/colors';\nimport { getAPIUser } from 'core/api/RESTAPI/server/helpers';\nimport UserService from '../../users/server/UserService';\nimport { ROLES } from '../../constants';\nimport { fullLoan } from '../../loans/queries';\nimport Calculator from '../../../utils/Calculator';\nimport { getClientMicroservice } from '../../../utils/server/getClientUrl';\nimport { percentFormatters } from '../../../utils/formHelpers';\n\nconst LOGO_URL = 'http://d2gb1cl8lbi69k.cloudfront.net/E-Potek_icon_signature.jpg';\nconst shouldNotLog = Meteor.isDevelopment || Meteor.isAppTest || Meteor.isTest;\nconst ERRORS_TO_IGNORE = ['INVALID_STATE_ERR'];\n\nexport class SlackService {\n  send = ({\n    channel = '#clients_general',\n    username = 'e-Potek Bot',\n    text,\n    ...rest\n  }) => {\n    const body = {\n      channel,\n      username,\n      text: this.formatText(text),\n      icon_url: LOGO_URL,\n      mrkdwn: true,\n      ...rest,\n    };\n\n    if (shouldNotLog) {\n      return Promise.resolve(body);\n    }\n\n    return fetch(\n      'https://hooks.slack.com/services/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',\n      {\n        method: 'POST',\n        headers: {},\n        body: JSON.stringify(body),\n      },\n    ).catch((err) => {\n      // Somehow, this error is catched somewhere if we don't do this\n      throw err;\n    });\n  };\n\n  formatText = text => (isArray(text) ? text.join('\\n') : text);\n\n  sendAttachments = ({ attachments, ...rest }) =>\n    this.send({\n      attachments: attachments.map(this.formatAttachment),\n      ...rest,\n    });\n\n  formatAttachment = ({ text, ...rest }) => ({\n    text: this.formatText(text),\n    mrkdwn_in: ['text', 'pretext'],\n    ...rest,\n  });\n\n  sendError = ({ error, additionalData = [], userId, url, connection }) => {\n    if (Meteor.isDevelopment && !Meteor.isTest) {\n      console.log('error', error);\n      console.log('additionalData', additionalData);\n      console.log('userId', userId);\n      console.log('url', url);\n    }\n\n    if (\n      (error && ERRORS_TO_IGNORE.includes(error.name))\n      || ERRORS_TO_IGNORE.includes(error.message || error.reason)\n    ) {\n      return false;\n    }\n\n    let user;\n\n    try {\n      // Can't use Meteor.user() outside of client or server-methods-body\n      user = Meteor.user();\n      // Can't access window on server\n    } catch (err) {\n      user = null;\n    }\n\n    if (!user && userId) {\n      user = UserService.get(userId);\n    }\n\n    const attachments = [\n      {\n        title: error && error.name,\n        pretext: `Une erreur est arrivée sur *e-Potek ${getClientMicroservice()}*`,\n        text: error && (error.message || error.reason),\n        color: colors.error,\n        footer: 'c la merde',\n        ts: new Date() / 1000,\n      },\n      {\n        title: 'Stack',\n        text: error && `\\`\\`\\`${error.stack && error.stack.toString()}\\`\\`\\``,\n        color: colors.error,\n      },\n      {\n        title: 'User',\n        text: `\\`\\`\\`${JSON.stringify(user, null, 2)}\\`\\`\\``,\n        color: colors.primary,\n      },\n      {\n        title: 'URL',\n        text: url,\n        color: colors.primary,\n      },\n    ];\n\n    if (additionalData.length > 0) {\n      attachments.push(...additionalData.map((data, index) => ({\n        title: `Additional data ${index + 1}`,\n        text: JSON.stringify(data),\n      })));\n    }\n\n    if (connection) {\n      attachments.push({\n        title: 'Connection',\n        text: `\\`\\`\\`${JSON.stringify(\n          pick(connection, ['clientAdress', 'httpHeaders']),\n          null,\n          2,\n        )}\\`\\`\\``,\n      });\n    }\n\n    return this.sendAttachments({\n      channel: `errors-${Meteor.settings.public.environment}`,\n      username: this.getNotificationOrigin(user),\n      attachments,\n    });\n  };\n\n  getChannelForAdmin = admin =>\n    (admin ? `#clients_${admin.email.split('@')[0]}` : '#clients_general');\n\n  notifyAssignee = ({\n    currentUser,\n    message,\n    title,\n    link,\n    assignee,\n    notifyAlways,\n  }) => {\n    const isAdmin = currentUser\n      && (currentUser.roles.includes(ROLES.ADMIN)\n        || currentUser.roles.includes(ROLES.DEV));\n\n    if (!notifyAlways && isAdmin) {\n      return false;\n    }\n\n    const admin = assignee || (currentUser && currentUser.assignedEmployee);\n    const channel = this.getChannelForAdmin(admin);\n\n    const slackPayload = {\n      channel,\n      attachments: [{ title, title_link: link, text: message }],\n      username: this.getNotificationOrigin(currentUser),\n    };\n\n    if (\n      (Meteor.isStaging || Meteor.isDevEnvironment || Meteor.isDevelopment)\n      && !Meteor.isTest\n    ) {\n      console.log('Slack dev/staging notification');\n      console.log('Payload:', slackPayload);\n      return slackPayload;\n    }\n\n    return this.sendAttachments(slackPayload);\n  };\n\n  getNotificationOrigin = (currentUser) => {\n    const APIUser = getAPIUser();\n    const username = currentUser ? currentUser.name : undefined;\n\n    if (APIUser) {\n      const mainOrg = UserService.getUserMainOrganisation(APIUser._id);\n      return [username, `(API ${mainOrg && mainOrg.name})`].join(' ');\n    }\n\n    return username;\n  };\n\n  notifyOfUpload = ({ currentUser, fileName, docLabel, loanId }) => {\n    const isUser = currentUser && currentUser.roles.includes(ROLES.USER);\n\n    if (!isUser) {\n      return false;\n    }\n\n    const loan = loanId && fullLoan.clone({ _id: loanId }).fetchOne();\n    const loanNameEnd = loan ? ` pour ${loan.name}.` : '.';\n    const title = `Upload: ${fileName} dans ${docLabel}${loanNameEnd}`;\n    let link = `${Meteor.settings.public.subdomains.admin}/users/${currentUser._id}`;\n    let message = '';\n\n    if (loan) {\n      const infoProgress = Calculator.personalInfoPercent({ loan });\n      const propertyProgress = Calculator.propertyPercent({ loan });\n      const documentsProgress = Calculator.filesProgress({\n        loan,\n      }).percent;\n\n      const progressParts = [\n        `Emprunteurs \\`${percentFormatters.format(infoProgress)}%\\``,\n        `Documents: \\`${percentFormatters.format(documentsProgress)}%\\``,\n        `Bien immo: \\`${percentFormatters.format(propertyProgress)}%\\``,\n      ];\n\n      if (loan.hasPromotion) {\n        message = `_Promotion: \\`${loan.promotions[0].name}\\`_ `;\n        progressParts.pop(); // Remove property progress in case of a promotion\n      }\n\n      message += `*Progrès:* ${progressParts.join(', ')}`;\n      link = `${Meteor.settings.public.subdomains.admin}/loans/${loan._id}`;\n    }\n\n    return this.notifyAssignee({ currentUser, message, title, link });\n  };\n}\n\nexport default new SlackService({ serverSide: Meteor.isServer });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/slack/server/methods.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport { notifyAssignee, logError, notifyOfUpload } from '../methodDefinitions';\nimport UserService from '../../users/server/UserService';\nimport SlackService from './SlackService';\nimport SecurityService from '../../security';\n\nnotifyAssignee.setHandler((context, { message, title }) => {\n  context.unblock();\n  SecurityService.checkLoggedIn();\n  const user = UserService.get(context.userId);\n  SlackService.notifyAssignee({\n    currentUser: user,\n    message,\n    title,\n    link: `${Meteor.settings.public.subdomains.admin}/users/${context.userId}`,\n  });\n});\n\nnotifyOfUpload.setHandler((context, params) => {\n  context.unblock();\n  SecurityService.checkLoggedIn();\n  const user = UserService.get(context.userId);\n  SlackService.notifyOfUpload({ currentUser: user, ...params });\n});\n\nlogError.setHandler((context, params) => {\n  context.unblock();\n  SlackService.sendError({ ...params, connection: context.connection });\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"slackListeners.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/slack/server/slackListeners.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport ServerEventService from '../../events/server/ServerEventService';\nimport {\n  bookPromotionLot,\n  sellPromotionLot,\n  proInviteUser,\n  anonymousLoanInsert,\n  userLoanInsert,\n  anonymousCreateUser,\n} from '../../methods';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport UserService from '../../users/server/UserService';\nimport LoanService from '../../loans/server/LoanService';\nimport {\n  promotionLotBooked,\n  promotionLotSold,\n  referralOnlyNotification,\n  newAnonymousLoan,\n  newLoan,\n  newUser,\n} from './slackNotifications';\nimport {\n  sendPropertyInvitations,\n  sendPromotionInvitations,\n} from './slackNotificationHelpers';\n\nServerEventService.addAfterMethodListener(\n  bookPromotionLot,\n  ({ context: { userId }, params: { promotionLotId, loanId } }) => {\n    const currentUser = UserService.get(userId);\n    const promotionLot = PromotionLotService.fetchOne({\n      $filters: { _id: promotionLotId },\n      name: 1,\n      promotion: { name: 1, assignedEmployee: { email: 1 } },\n    });\n    const { user } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      user: { name: 1 },\n    });\n\n    promotionLotBooked({ currentUser, promotionLot, user });\n  },\n);\n\nServerEventService.addAfterMethodListener(\n  sellPromotionLot,\n  ({ context: { userId }, params: { promotionLotId } }) => {\n    const currentUser = UserService.get(userId);\n    const { attributedTo, ...promotionLot } = PromotionLotService.fetchOne({\n      $filters: { _id: promotionLotId },\n      name: 1,\n      promotion: { name: 1, assignedEmployee: { email: 1 } },\n      attributedTo: { _id: 1 },\n    });\n    const { user } = LoanService.fetchOne({\n      $filters: { _id: attributedTo._id },\n      user: { name: 1 },\n    });\n\n    promotionLotSold({ currentUser, promotionLot, user });\n  },\n);\n\nServerEventService.addAfterMethodListener(\n  proInviteUser,\n  ({\n    context: { userId },\n    params: { propertyIds = [], properties = [], promotionIds = [], user },\n  }) => {\n    const notificationPropertyIds = [\n      ...propertyIds,\n      ...properties.map(({ _id, externalId }) => _id || externalId),\n    ];\n    const currentUser = UserService.get(userId);\n    const invitedUser = UserService.getByEmail(user.email);\n\n    sendPropertyInvitations(notificationPropertyIds, currentUser, {\n      ...invitedUser,\n      email: user.email,\n    });\n\n    sendPromotionInvitations(promotionIds, currentUser, {\n      ...invitedUser,\n      email: user.email,\n    });\n\n    if (notificationPropertyIds.length === 0 && promotionIds.length === 0) {\n      referralOnlyNotification({\n        currentUser,\n        user: { ...invitedUser, email: user.email },\n      });\n    }\n  },\n);\n\nServerEventService.addAfterMethodListener(\n  anonymousLoanInsert,\n  ({ params: { proPropertyId, referralId }, result: loanId }) => {\n    const property = proPropertyId\n      && PropertyService.fetchOne({\n        $filters: { _id: proPropertyId },\n        address1: 1,\n      });\n    const { name: loanName } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      name: 1,\n    });\n    const referral = referralId\n      && UserService.fetchOne({\n        $filters: { _id: referralId },\n        name: 1,\n        organisations: { name: 1 },\n      });\n\n    newAnonymousLoan({ loanName, loanId, property, referral });\n  },\n);\n\nServerEventService.addAfterMethodListener(\n  userLoanInsert,\n  ({ context: { userId }, result: loanId }) => {\n    const currentUser = UserService.get(userId);\n    const { name: loanName } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      name: 1,\n    });\n\n    newLoan({ loanId, loanName, currentUser });\n  },\n);\n\nServerEventService.addAfterMethodListener(\n  anonymousCreateUser,\n  ({ result: userId }) => {\n    const currentUser = UserService.get(userId);\n    const { loans, name } = UserService.get(userId);\n\n    newUser({ loans, name, currentUser });\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"slackNotifications.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/slack/server/slackNotifications.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport { getUserNameAndOrganisation } from 'core/api/helpers/index';\nimport SlackService from './SlackService';\n\nexport const referralOnlyNotification = ({ currentUser, user }) => {\n  const { _id: userId, firstName, lastName } = user;\n  SlackService.notifyAssignee({\n    currentUser,\n    link: `${Meteor.settings.public.subdomains.admin}/users/${userId}`,\n    title: `${firstName} ${lastName} a été invité sur e-Potek en referral uniquement`,\n  });\n};\n\nexport const propertyInviteNotification = ({ currentUser, property, user }) => {\n  const { _id: userId, firstName, lastName } = user;\n  const { address1 } = property;\n\n  SlackService.notifyAssignee({\n    currentUser,\n    link: `${Meteor.settings.public.subdomains.admin}/users/${userId}`,\n    title: `${firstName} ${lastName} a été invité au bien immo \"${address1}\"`,\n  });\n};\n\nexport const promotionInviteNotification = ({\n  currentUser,\n  promotion: { name, assignedEmployee, _id: promotionId },\n  user,\n}) => {\n  const { firstName, lastName, email } = user;\n\n  SlackService.notifyAssignee({\n    currentUser,\n    title: `Promotion ${name}`,\n    message: `${firstName} ${lastName} a été invité! ${email}`,\n    link: `${\n      Meteor.settings.public.subdomains.admin\n    }/promotions/${promotionId}`,\n    assignee: assignedEmployee,\n    notifyAlways: true,\n  });\n};\n\nexport const promotionLotBooked = ({\n  currentUser,\n  promotionLot,\n  user: { name },\n}) => {\n  const {\n    name: lotName,\n    promotion: { name: promotionName, assignedEmployee, _id: promotionId },\n  } = promotionLot;\n\n  SlackService.notifyAssignee({\n    currentUser,\n    title: `Promotion ${promotionName}`,\n    message: `Le lot ${lotName} a été réservé pour ${name}`,\n    link: `${\n      Meteor.settings.public.subdomains.admin\n    }/promotions/${promotionId}`,\n    assignee: assignedEmployee,\n    notifyAlways: true,\n  });\n};\n\nexport const promotionLotSold = ({\n  currentUser,\n  promotionLot,\n  user: { name },\n}) => {\n  const {\n    name: lotName,\n    promotion: { name: promotionName, assignedEmployee, _id: promotionId },\n  } = promotionLot;\n\n  SlackService.notifyAssignee({\n    currentUser,\n    title: `Promotion ${promotionName}`,\n    message: `Le lot ${lotName} a été vendu à ${name}`,\n    link: `${\n      Meteor.settings.public.subdomains.admin\n    }/promotions/${promotionId}`,\n    assignee: assignedEmployee,\n    notifyAlways: true,\n  });\n};\n\nexport const updateWatcherNotification = ({\n  user,\n  title,\n  collection,\n  docId,\n  message,\n}) => {\n  SlackService.notifyAssignee({\n    currentUser: user,\n    title,\n    link: `${Meteor.settings.public.subdomains.admin}/${collection}/${docId}`,\n    message,\n  });\n};\n\nexport const newAnonymousLoan = ({ loanName, loanId, property, referral }) => {\n  SlackService.notifyAssignee({\n    title: `Nouveau dossier anonyme: ${loanName}`,\n    link: `${Meteor.settings.public.subdomains.admin}/loans/${loanId}`,\n    message: property\n      ? `Pour le bien immo ${property.address1} ${\n        referral ? `de ${getUserNameAndOrganisation({ user: referral })}` : ''\n      }`\n      : '',\n  });\n};\n\nexport const newLoan = ({ loanId, loanName, currentUser }) => {\n  SlackService.notifyAssignee({\n    currentUser,\n    title: `Nouveau dossier: ${loanName}`,\n    link: `${Meteor.settings.public.subdomains.admin}/loans/${loanId}`,\n  });\n};\n\nexport const newUser = ({ loans = [], currentUser }) => {\n  SlackService.notifyAssignee({\n    currentUser,\n    title: `Nouvel utilisateur! ${\n      loans.length ? `(dossier ${loans[0].name})` : ''\n    }`,\n    link: `${Meteor.settings.public.subdomains.admin}/users/${currentUser._id}`,\n  });\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"slackNotificationHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/slack/server/slackNotificationHelpers.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport PropertyService from '../../properties/server/PropertyService';\nimport PromotionService from '../../promotions/server/PromotionService';\n\nimport {\n  promotionInviteNotification,\n  propertyInviteNotification,\n} from './slackNotifications';\n\nexport const sendPropertyInvitations = (\n  propertyIds,\n  currentUser,\n  invitedUser,\n) => {\n  propertyIds.forEach((id) => {\n    const property = PropertyService.fetchOne({\n      $filters: { $or: [{ _id: id }, { externalId: id }] },\n      address1: 1,\n    });\n    propertyInviteNotification({\n      currentUser,\n      user: invitedUser,\n      property,\n    });\n  });\n};\n\nexport const sendPromotionInvitations = (\n  promotionIds,\n  currentUser,\n  invitedUser,\n) => {\n  promotionIds.forEach((id) => {\n    const promotion = PromotionService.fetchOne({\n      $filters: { _id: id },\n      name: 1,\n      assignedEmployee: { email: 1 },\n    });\n    promotionInviteNotification({ currentUser, promotion, user: invitedUser });\n  });\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"analytics\":{\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/analytics/methodDefinitions.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Method } from '../methods/methods';\n\nexport const analyticsLogin = new Method({\n  name: 'analyticsLogin',\n});\n\nexport const analyticsPage = new Method({\n  name: 'analyticsPage',\n  params: {\n    cookies: Object,\n    sessionStorage: Object,\n    path: String,\n    route: String,\n    queryParams: Object,\n    queryString: Object,\n  },\n});\n\nexport const analyticsVerifyEmail = new Method({\n  name: 'analyticsVerifyEmail',\n  params: {\n    trackingId: String,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/analytics/server/methods.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport {\n  analyticsLogin,\n  analyticsPage,\n  analyticsVerifyEmail,\n} from '../methodDefinitions';\nimport SecurityService from '../../security';\nimport Analytics from './Analytics';\nimport EVENTS from '../events';\n\nanalyticsLogin.setHandler((context, params) => {\n  SecurityService.checkLoggedIn();\n\n  const analytics = new Analytics(context);\n  analytics.track(EVENTS.USER_LOGGED_IN);\n});\n\nanalyticsPage.setHandler((context, params) => {\n  const analytics = new Analytics(context);\n  analytics.page(params);\n});\n\nanalyticsVerifyEmail.setHandler((context, params) => {\n  const analytics = new Analytics(context);\n  analytics.identify(params.trackingId);\n  analytics.track(EVENTS.USER_VERIFIED_EMAIL);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Analytics.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/analytics/server/Analytics.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport DefaultNodeAnalytics from 'analytics-node';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\n\nimport UserService from 'core/api/users/server/UserService';\nimport { getClientHost } from 'core/utils/server/getClientUrl';\nimport { EVENTS_CONFIG } from './eventsConfig';\nimport { TRACKING_COOKIE } from '../analyticsConstants';\nimport MiddlewareManager from '../../../utils/MiddlewareManager';\nimport { impersonateMiddleware } from './analyticsHelpers';\nimport TestAnalytics from './TestAnalytics';\n\nclass NodeAnalytics extends DefaultNodeAnalytics {\n  constructor(...args) {\n    super(...args);\n    this.middlewareManager = new MiddlewareManager(this);\n  }\n\n  initAnalytics(context) {\n    ['identify', 'track', 'page', 'alias'].forEach((method) => {\n      this.middlewareManager.applyToMethod(\n        method,\n        impersonateMiddleware(context),\n      );\n    });\n  }\n}\n\nconst { Segment = {} } = Meteor.settings.public.analyticsSettings;\nconst { key } = Segment;\nconst nodeAnalytics = new NodeAnalytics(key);\nif (Meteor.isProduction && !key) {\n  throw new Meteor.Error('No segment key found !');\n}\n\nclass Analytics {\n  constructor(context) {\n    this.init(context);\n  }\n\n  init(context) {\n    this.events = EVENTS_CONFIG;\n    if (Meteor.isTest || Meteor.isAppTest || Meteor.isDevelopment) {\n      this.analytics = new TestAnalytics();\n    } else {\n      this.analytics = nodeAnalytics;\n    }\n\n    this.context(context);\n  }\n\n  context(context) {\n    const {\n      userId,\n      connection: {\n        clientAddress,\n        httpHeaders: {\n          'user-agent': userAgent,\n          'x-real-ip': realIp,\n          referer: referrer,\n        } = {},\n      } = {},\n    } = context;\n    this.userId = userId;\n    this.user = UserService.fetchOne({\n      $filters: { _id: userId },\n      firstName: 1,\n      lastName: 1,\n      email: 1,\n      roles: 1,\n    });\n    this.clientAddress = realIp || clientAddress;\n    this.host = getClientHost();\n    this.userAgent = userAgent;\n    this.referrer = referrer;\n\n    this.analytics.initAnalytics(context);\n  }\n\n  identify(trackingId) {\n    this.alias(trackingId);\n\n    this.analytics.identify({\n      userId: this.userId,\n      traits: {\n        firstName: this.user.firstName,\n        lastName: this.user.lastName,\n        email: this.user.email,\n        role: this.user.roles[0],\n      },\n    });\n  }\n\n  track(event, data, trackingId) {\n    if (!Object.keys(this.events).includes(event)) {\n      throw new Meteor.Error(`Unknown event ${event}`);\n    }\n    const eventConfig = this.events[event];\n    const { name, transform } = eventConfig;\n\n    const eventProperties = transform ? transform(data) : data;\n\n    this.analytics.track({\n      ...(trackingId ? { anonymousId: trackingId } : {}),\n      userId: this.userId,\n      event: name,\n      properties: eventProperties,\n      context: {\n        ip: this.clientAddress,\n        userAgent: this.userAgent,\n      },\n    });\n  }\n\n  alias(trackingId) {\n    if (trackingId) {\n      this.analytics.alias({ userId: this.userId, previousId: trackingId });\n      this.analytics.flush();\n    }\n  }\n\n  // Returns the route string in a more readable format\n  // ex: APP_LOGIN_PAGE => App login page\n  formatRouteName(route) {\n    return route\n      .toLowerCase()\n      .split('_')\n      .map((w, i) => {\n        if (i === 0) {\n          return w.slice(0, 1).toUpperCase() + w.slice(1);\n        }\n\n        return w;\n      })\n      .join(' ');\n  }\n\n  page(params) {\n    const {\n      cookies,\n      sessionStorage,\n      path,\n      route,\n      queryParams,\n      queryString,\n    } = params;\n    const trackingId = cookies[TRACKING_COOKIE];\n    const formattedRoute = this.formatRouteName(route);\n\n    this.analytics.page({\n      name: formattedRoute,\n      ...(this.userId\n        ? { userId: this.userId }\n        : { anonymousId: trackingId || Random.id() }),\n      context: {\n        ip: this.clientAddress,\n        userAgent: this.userAgent,\n      },\n      properties: {\n        path,\n        url: `${this.host}${path === '/' ? '' : path}`,\n        referrer: this.referrer,\n        ...queryString,\n        ...queryParams,\n      },\n    });\n  }\n}\n\nexport default Analytics;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"eventsConfig.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/analytics/server/eventsConfig.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport curryRight from 'lodash/curryRight';\nimport EVENTS from '../events';\n\nconst curryPick = curryRight((obj, keys) =>\n  keys.reduce((o, k) => ({ ...o, [k]: obj[k] }), {}));\n\nexport const EVENTS_CONFIG = {\n  [EVENTS.USER_CREATED]: {\n    name: 'User Created',\n    transform: curryPick(['userId', 'origin', 'referralId']),\n  },\n  [EVENTS.USER_LOGGED_IN]: {\n    name: 'User Logged in',\n  },\n  [EVENTS.USER_VERIFIED_EMAIL]: {\n    name: 'User Verified',\n  },\n  [EVENTS.LOAN_ANONYMOUS_LOAN_CLAIMED]: {\n    name: 'Loan Anonymous loan claimed',\n    transform: curryPick(['loanId']),\n  },\n  [EVENTS.API_CALLED]: {\n    name: 'Api Called',\n    transform: curryPick(['endpoint', 'result']),\n  },\n  [EVENTS.LOAN_CREATED]: {\n    name: 'Loan Created',\n    transform: curryPick([\n      'loanId',\n      'propertyId',\n      'promotionId',\n      'referralId',\n      'anonymous',\n    ]),\n  },\n  [EVENTS.LOAN_STATUS_CHANGED]: {\n    name: 'Loan Status changed',\n  },\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"analyticsHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/analytics/server/analyticsHelpers.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { LOGIN_IP_BLACKLIST } from '../analyticsConstants';\n\nexport const impersonateMiddleware = context => () => next => (...args) => {\n  const {\n    connection: {\n      clientAddress,\n      httpHeaders: { host },\n    },\n  } = context;\n\n  // Don't track login events when impersonating\n  if (!host.includes('admin')) {\n    if (LOGIN_IP_BLACKLIST.includes(clientAddress)) {\n      return;\n    }\n  }\n\n  return next(...args);\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"analyticsListeners.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/analytics/server/analyticsListeners.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { loanSetStatus } from '../../loans/methodDefinitions';\nimport LoanService from '../../loans/server/LoanService';\nimport UserService from '../../users/server/UserService';\nimport ServerEventService from '../../events/server/ServerEventService';\nimport EVENTS from '../events';\nimport Analytics from './Analytics';\n\nServerEventService.addAfterMethodListener(\n  loanSetStatus,\n  ({ context, result: { prevStatus, nextStatus }, params: { loanId } }) => {\n    const { userId: adminId } = context;\n    let referredByOrganisation;\n    let referredByUser;\n    let assigneeId;\n    let assigneeName;\n    let customerName;\n    const {\n      userId: customerId,\n      category: loanCategory,\n      name: loanName,\n      purchaseType: loanPurchaseType,\n      residenceType: loanResidenceType,\n      step: loanStep,\n    } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      userId: 1,\n      category: 1,\n      name: 1,\n      purchaseType: 1,\n      residenceType: 1,\n      step: 1,\n    });\n    const { name: adminName } = UserService.fetchOne({\n      $filters: { _id: adminId },\n      name: 1,\n    });\n    if (customerId) {\n      const user = UserService.fetchOne({\n        $filters: { _id: customerId },\n        referredByUser: { name: 1 },\n        referredByOrganisation: { name: 1 },\n        assignedEmployee: { name: 1 },\n        name: 1,\n      });\n      assigneeId = user.assignedEmployee && user.assignedEmployee._id;\n      assigneeName = user.assignedEmployee && user.assignedEmployee.name;\n      referredByOrganisation = user.referredByOrganisation && user.referredByOrganisation.name;\n      referredByUser = user.referredByUser && user.referredByUser.name;\n      customerName = user.name;\n    }\n\n    const analytics = new Analytics(context);\n    analytics.track(EVENTS.LOAN_STATUS_CHANGED, {\n      adminId,\n      adminName,\n      assigneeId,\n      assigneeName,\n      customerId,\n      customerName,\n      loanCategory,\n      loanId,\n      loanName,\n      loanPurchaseType,\n      loanResidenceType,\n      loanStep,\n      nextStatus,\n      prevStatus,\n      referredByOrganisation,\n      referredByUser,\n    });\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"events.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/analytics/events.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const EVENTS = {\n  USER_CREATED: 'USER_CREATED',\n  USER_LOGGED_IN: 'USER_LOGGED_IN',\n  USER_VERIFIED_EMAIL: 'USER_VERIFIED_EMAIL',\n\n  PROMOTION_CREATED: 'PROMOTION_CREATED',\n  PROMOTION_CUSTOMER_INVITED: 'PROMOTION_CUSTOMER_INVITED',\n  PROMOTION_LOT_STATUS_UPDATED: 'PROMOTION_LOT_STATUS_UPDATED',\n\n  PROPERTY_CUSTOMER_INVITED: 'PROPERTY_CUSTOMER_INVITED',\n\n  LOAN_ANONYMOUS_LOAN_CLAIMED: 'LOAN_ANONYMOUS_LOAN_CLAIMED',\n  LOAN_STATUS_CHANGED: 'LOAN_STATUS_CHANGED',\n  LOAN_COMPLETED_A_STRUCTURE: 'LOAN_COMPLETED_A_STRUCTURE',\n  LOAN_CREATED: 'LOAN_CREATED',\n  LOAN_MADE_PROGRESS: 'LOAN_MADE_PROGRESS',\n  LOAN_SET_STATUS: 'LOAN_SET_STATUS',\n  LOAN_SET_STEP: 'LOAN_SET_STEP',\n  LOAN_TASK_ADDED: 'LOAN_TASK_ADDED',\n  LOAN_TASK_UPDATED: 'LOAN_TASK_UPDATED',\n\n  CTA_CLICKED: 'CTA_CLICKED',\n\n  API_CALLED: 'API_CALLED',\n};\n\nexport default EVENTS;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"analyticsConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/analytics/analyticsConstants.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const TRACKING_COOKIE = 'epotek_trackingid';\n\n// e-Potek's office and VPN IPs\n// Those addresses are blacklisted from 'app' and 'pro' tracked events\n// to avoid wrong tracking when impersonating users\nexport const LOGIN_IP_BLACKLIST = ['185.19.31.79', '213.3.47.70'];\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"containerToolkit\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/containerToolkit/index.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default as withSmartQuery } from './withSmartQuery';\nexport { branch, renderComponent } from 'recompose';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"withSmartQuery.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/containerToolkit/withSmartQuery.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { withQuery } from 'meteor/cultofcoders:grapher-react';\nimport {\n  mapProps,\n  compose,\n  branch,\n  renderComponent,\n  lifecycle,\n} from 'recompose';\nimport { withLoading } from '../../components/Loading';\nimport MissingDoc from '../../components/MissingDoc';\nimport ClientEventService from '../events/ClientEventService';\nimport {\n  addQueryToRefetch,\n  removeQueryToRefetch,\n} from '../methods/clientQueryManager';\nimport makeSkipContainer from './skipContainer';\n\n// render the missing doc component only when we want to\nconst makeRenderMissingDocIfNoData = (render: boolean = false, { single }) => {\n  let renderFunc;\n  if (typeof render === 'function') {\n    renderFunc = props =>\n      render(props) && single && (!props.isLoading && !props.data);\n  } else {\n    renderFunc = ({ isLoading, data }) =>\n      render && single && (!isLoading && !data);\n  }\n\n  return branch(renderFunc, renderComponent(MissingDoc));\n};\n\n// Use proper name for data, and remove unnecessary props from children\n// error should be thrown and catched by our errorboundaries anyways\n// or displayed by an alert\nconst makeMapProps = dataName =>\n  mapProps(({ data, isLoading, error, ...rest }) => ({\n    [dataName]: data,\n    ...rest,\n  }));\n\nconst withQueryRefetcher = ({ queryName }) =>\n  lifecycle({\n    componentDidMount() {\n      const { refetch } = this.props;\n\n      if (refetch) {\n        ClientEventService.addListener(queryName, refetch);\n      }\n    },\n    componentWillUnmount() {\n      const { refetch } = this.props;\n      if (refetch) {\n        ClientEventService.removeListener(queryName, refetch);\n      }\n    },\n  });\n\n// This adds all non-reactive queries on the window object, and removes them\n// when the query disappears\n// These queries can then all be refreshed from `clientMethodsConfig`\n// every time a method is called\nconst withGlobalQueryManager = (\n  { queryName },\n  { reactive },\n  refetchOnMethodCall,\n) => {\n  const shouldActivateGlobalRefetch = refetchOnMethodCall && !reactive && global.window;\n\n  if (!shouldActivateGlobalRefetch) {\n    return x => x;\n  }\n\n  return lifecycle({\n    componentDidMount() {\n      addQueryToRefetch(queryName, refetchOnMethodCall);\n    },\n    componentWillUnmount() {\n      removeQueryToRefetch(queryName);\n    },\n  });\n};\n\ntype withSmartQueryArgs = {\n  query: () => mixed,\n  params: (props: Object) => Object,\n  queryOptions?: { single: boolean },\n  dataName?: string,\n  renderMissingDoc?: boolean | Function,\n  smallLoader?: boolean,\n};\n\nconst calculateParams = (params, props) => {\n  if (typeof params === 'function') {\n    return params(props);\n  }\n  return params;\n};\n\nconst withSmartQuery = ({\n  query,\n  params = {},\n  queryOptions = { single: false },\n  dataName = 'data',\n  // used to bypass the missing doc component\n  renderMissingDoc = true,\n  smallLoader = false,\n  refetchOnMethodCall = 'all',\n  skip,\n}: withSmartQueryArgs) => {\n  let completeQuery;\n\n  if (typeof query === 'function') {\n    completeQuery = props => query(props).clone(calculateParams(params, props));\n  } else {\n    completeQuery = props => query.clone(calculateParams(params, props));\n  }\n\n  const container = compose(\n    withGlobalQueryManager(query, queryOptions, refetchOnMethodCall),\n    withQuery(completeQuery, { loadOnRefetch: false, ...queryOptions }),\n    withLoading(smallLoader),\n    makeRenderMissingDocIfNoData(renderMissingDoc, queryOptions),\n    makeMapProps(dataName),\n    withQueryRefetcher(query),\n  );\n\n  if (skip) {\n    return makeSkipContainer(container, skip);\n  }\n\n  return container;\n};\n\nexport default withSmartQuery;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"events\":{\"ClientEventService\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/events/ClientEventService/index.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './ClientEventService';\nexport * from './eventNames';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ClientEventService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/events/ClientEventService/ClientEventService.js                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { EventEmitter } from 'events';\nimport EventService from '../EventService';\n\nexport default new EventService({ emmitter: new EventEmitter() });\nexport * from './eventNames';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"eventNames.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/events/ClientEventService/eventNames.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const MODIFIED_FILES_EVENT = 'MODIFIED_FILES_EVENT';\nexport const LOAD_LOAN = 'LOAD_LOAN';\nexport const CALLED_METHOD = 'CALLED_METHOD';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"EventService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/events/EventService.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nconst IS_LOGGING = !Meteor.isProduction;\n\nexport default class EventService {\n  constructor({ emmitter }) {\n    this.emmitter = emmitter;\n    // contains arrays of listener functions, grouped by event names\n    this.listenerFunctions = {};\n    this.addErrorListener();\n  }\n\n  emit(eventName, ...args) {\n    this.logEmittedEvent(eventName, ...args);\n    this.emmitter.emit(eventName, ...args);\n  }\n\n  getBeforeMethodEventName(name) {\n    return `__before_${name}`;\n  }\n\n  emitBeforeMethod({ name }, ...args) {\n    this.emit(this.getBeforeMethodEventName(name), ...args);\n  }\n\n  emitAfterMethod({ name }, ...args) {\n    this.emit(name, ...args);\n  }\n\n  addListener(eventName, listenerFunction) {\n    this.emmitter.addListener(eventName, (...args) => {\n      this.logListener(eventName, ...args);\n      listenerFunction(...args);\n    });\n\n    const listenersForEvent = this.listenerFunctions[eventName] || [];\n\n    this.listenerFunctions[eventName] = [\n      ...listenersForEvent,\n      listenerFunction,\n    ];\n  }\n\n  addBeforeMethodListener(methods, listenerFunction) {\n    if (Array.isArray(methods)) {\n      methods.forEach((method) => {\n        this.checkMethod(method);\n        const {\n          config: { name },\n        } = method;\n        this.addListener(this.getBeforeMethodEventName(name), listenerFunction);\n      });\n    } else {\n      this.checkMethod(methods);\n      const {\n        config: { name },\n      } = methods;\n      this.addListener(this.getBeforeMethodEventName(name), listenerFunction);\n    }\n  }\n\n  addAfterMethodListener(methods, listenerFunction) {\n    if (Array.isArray(methods)) {\n      methods.forEach((method) => {\n        this.checkMethod(method);\n        const {\n          config: { name },\n        } = method;\n        this.addListener(name, listenerFunction);\n      });\n    } else {\n      this.checkMethod(methods);\n      const {\n        config: { name },\n      } = methods;\n      this.addListener(name, listenerFunction);\n    }\n  }\n\n  checkMethod(method) {\n    if (!method || !method.config) {\n      throw new Error('Method does not exist in EventService');\n    }\n  }\n\n  addErrorListener() {\n    this.addListener('error', (error) => {\n      console.log('An error occured in an event listener:');\n      console.log(error);\n      throw error;\n    });\n  }\n\n  logEmittedEvent(eventName, ...args) {\n    if (IS_LOGGING && !Meteor.isTest) {\n      // console.log(`Event \"${eventName}\" triggered with params:`);\n      // console.log(params);\n    }\n  }\n\n  logListener(eventName, ...args) {\n    if (IS_LOGGING && !Meteor.isTest) {\n      console.log(`Event \"${eventName}\" listened to with args:`);\n      args.forEach(arg => console.log(arg));\n    }\n  }\n\n  getListenerFunctions(eventName) {\n    return this.listenerFunctions[eventName] || [];\n  }\n\n  removeListener(eventName, listener) {\n    this.emmitter.removeListener(eventName, listener);\n  }\n\n  removeAllListeners(eventName) {\n    this.emmitter.removeAllListeners(eventName);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"ServerEventService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/events/server/ServerEventService.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { EventEmitter } from 'events';\nimport EventService from '../EventService';\n\nexport default new EventService({ emmitter: new EventEmitter() });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"registerServerListeners.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/events/server/registerServerListeners.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Import all server event listener files here\nimport '../../activities/server/activityListeners';\nimport '../../analytics/server/analyticsListeners';\nimport '../../email/server/emailListeners';\nimport '../../loans/server/loanListeners';\nimport '../../slack/server/slackListeners';\nimport '../../tasks/server/taskListeners';\nimport '../../notifications/server/notificationListeners';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"fragments.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/fragments.js                                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// import merge from 'lodash/merge';\n\nimport { Meteor } from 'meteor/meteor';\nimport { INTEREST_RATES } from './constants';\n\n// //\n// // activity fragments\n// //\nexport const activity = () => ({\n  createdAt: 1,\n  createdBy: 1,\n  date: 1,\n  description: 1,\n  loan: { name: 1 },\n  secondaryType: 1,\n  shouldNotify: 1,\n  title: 1,\n  type: 1,\n  updatedAt: 1,\n});\n\n// //\n// // borrower fragments\n// //\nexport const baseBorrower = () => ({\n  createdAt: 1,\n  firstName: 1,\n  lastName: 1,\n  name: 1,\n  updatedAt: 1,\n  userId: 1,\n});\n\nexport const loanBorrower = ({ withSort } = {}) => ({\n  ...baseBorrower(),\n  additionalDocuments: 1,\n  address1: 1,\n  address2: 1,\n  adminValidation: 1,\n  age: 1,\n  bank3A: 1,\n  bankFortune: 1,\n  birthDate: 1,\n  birthPlace: 1,\n  bonus2015: 1,\n  bonus2016: 1,\n  bonus2017: 1,\n  bonus2018: 1,\n  bonus2019: 1,\n  bonusExists: 1,\n  canton: 1,\n  childrenCount: 1,\n  citizenship: 1,\n  city: 1,\n  civilStatus: 1,\n  company: 1,\n  documents: 1,\n  expenses: 1,\n  gender: 1,\n  hasOwnCompany: 1,\n  insurance2: 1,\n  insurance3A: 1,\n  insurance3B: 1,\n  isSwiss: 1,\n  isUSPerson: 1,\n  loans: { name: 1 },\n  mortgageNotes: mortgageNote(),\n  netSalary: 1,\n  otherFortune: 1,\n  otherIncome: 1,\n  ownCompanies: 1,\n  personalBank: 1,\n  realEstate: 1,\n  residencyPermit: 1,\n  salary: 1,\n  sameAddress: 1,\n  step: 1,\n  thirdPartyFortune: 1,\n  worksForOwnCompany: 1,\n  zipCode: 1,\n  ...(withSort ? { $options: { sort: { createdAt: 1 } } } : {}),\n});\n\nexport const adminBorrower = () => ({\n  ...loanBorrower(),\n  loans: loanBase(),\n  user: appUser(),\n});\n\n// //\n// // Contact fragments\n// //\nexport const contact = () => ({\n  address: 1,\n  address1: 1,\n  address2: 1,\n  canton: 1,\n  city: 1,\n  email: 1,\n  emails: 1,\n  firstName: 1,\n  lastName: 1,\n  name: 1,\n  organisations: { name: 1, address: 1 },\n  phoneNumber: 1,\n  phoneNumbers: 1,\n  zipCode: 1,\n  offers: { _id: 1 },\n});\n\n// //\n// // InterestRate fragments\n// //\nconst singleInterestRate = type => ({\n  [type]: { rateLow: 1, rateHigh: 1, trend: 1 },\n});\n\nconst rates = Object.values(INTEREST_RATES).reduce(\n  (interestRates, type) => ({\n    ...interestRates,\n    ...singleInterestRate(type),\n  }),\n  {},\n);\n\nexport const interestRates = () => ({\n  ...rates,\n  createdAt: 1,\n  updatedAt: 1,\n  date: 1,\n});\n\nexport const currentInterestRates = () => ({\n  ...rates,\n  date: 1,\n});\n\n// //\n// // Irs10Y fragments\n// //\nexport const irs10y = () => ({\n  date: 1,\n  rate: 1,\n});\n\n// //\n// // Lender fragments\n// //\nexport const lender = () => ({\n  contact: contact(),\n  loan: { _id: 1 },\n  offers: fullOffer(),\n  organisation: {\n    address: 1,\n    address1: 1,\n    address2: 1,\n    canton: 1,\n    city: 1,\n    contacts: contact(),\n    logo: 1,\n    name: 1,\n    type: 1,\n    zipCode: 1,\n  },\n});\n\nexport const adminLender = () => ({\n  ...lender(),\n  status: 1,\n  adminNote: 1,\n});\n\n// //\n// // LenderRules fragments\n// //\nexport const lenderRules = () => ({\n  adminComments: 1,\n  allowPledge: 1,\n  amortizationGoal: 1,\n  amortizationYears: 1,\n  bonusAlgorithm: 1,\n  bonusConsideration: 1,\n  bonusHistoryToConsider: 1,\n  companyIncomeConsideration: 1,\n  companyIncomeHistoryToConsider: 1,\n  createdAt: 1,\n  dividendsConsideration: 1,\n  dividendsHistoryToConsider: 1,\n  expensesSubtractFromIncome: 1,\n  filter: 1,\n  fortuneReturnsRatio: 1,\n  incomeConsiderationType: 1,\n  investmentIncomeConsideration: 1,\n  maxBorrowRatio: 1,\n  maxBorrowRatioWithPledge: 1,\n  maxIncomeRatio: 1,\n  maxIncomeRatioTight: 1,\n  minCash: 1,\n  name: 1,\n  order: 1,\n  organisation: { name: 1 },\n  pdfComments: 1,\n  pensionIncomeConsideration: 1,\n  realEstateIncomeAlgorithm: 1,\n  realEstateIncomeConsideration: 1,\n  realEstateIncomeConsiderationType: 1,\n  theoreticalInterestRate: 1,\n  theoreticalInterestRate2ndRank: 1,\n  theoreticalMaintenanceRate: 1,\n  updatedAt: 1,\n});\n\n// //\n// // Loan fragments\n// //\nexport const loan = () => ({\n  additionalDocuments: 1,\n  applicationType: 1,\n  anonymous: 1,\n  borrowerIds: 1,\n  borrowers: { firstName: 1, lastName: 1, name: 1 },\n  canton: 1,\n  createdAt: 1,\n  currentOwner: 1,\n  customName: 1,\n  enableOffers: 1,\n  futureOwner: 1,\n  hasProProperty: 1,\n  hasPromotion: 1,\n  name: 1,\n  otherOwner: 1,\n  previousLender: 1,\n  previousLoanTranches: 1,\n  promotions: {\n    address: 1,\n    contacts: 1,\n    lenderOrganisationLink: 1,\n    name: 1,\n    type: 1,\n    users: { name: 1, email: 1, phoneNumber: 1 },\n  },\n  properties: { totalValue: 1, address1: 1 },\n  propertyIds: 1,\n  purchaseType: 1,\n  residenceType: 1,\n  selectedStructure: 1,\n  status: 1,\n  step: 1,\n  structure: 1,\n  structures: {\n    amortization: 1,\n    amortizationType: 1,\n    description: 1,\n    disabled: 1,\n    id: 1,\n    loanTranches: 1,\n    mortgageNoteIds: 1,\n    name: 1,\n    notaryFees: 1,\n    offerId: 1,\n    ownFunds: 1,\n    promotionOptionId: 1,\n    propertyId: 1,\n    propertyValue: 1,\n    propertyWork: 1,\n    sortOffersBy: 1,\n    wantedLoan: 1,\n  },\n  updatedAt: 1,\n  userId: 1,\n  verificationStatus: 1,\n  shareSolvency: 1,\n  simpleBorrowersForm: 1,\n});\n\nexport const loanBase = () => ({\n  ...loan(),\n  promotionOptions: loanPromotionOption(),\n});\n\nconst userPropertyValue = { borrowRatio: 1, propertyValue: 1 };\nconst adminPropertyValue = { ...userPropertyValue, organisationName: 1 };\nconst userMaxPropertyValue = {\n  main: { min: userPropertyValue, max: userPropertyValue },\n  second: { min: userPropertyValue, max: userPropertyValue },\n  canton: 1,\n  date: 1,\n  borrowerHash: 1,\n};\nconst adminMaxPropertyValue = {\n  main: { min: adminPropertyValue, max: adminPropertyValue },\n  second: { min: adminPropertyValue, max: adminPropertyValue },\n  canton: 1,\n  date: 1,\n  borrowerHash: 1,\n};\n\nexport const userLoan = ({ withSort, withFilteredPromotions } = {}) => ({\n  ...loanBase(),\n  adminValidation: 1,\n  borrowers: loanBorrower({ withSort }),\n  contacts: 1,\n  displayWelcomeScreen: 1,\n  documents: 1,\n  offers: 1,\n  properties: userProperty({ withSort }),\n  user: appUser(),\n  userFormsEnabled: 1,\n  maxPropertyValue: userMaxPropertyValue,\n  ...(withFilteredPromotions\n    ? {\n      promotions: {\n        address: 1,\n        contacts: 1,\n        documents: { promotionImage: 1 },\n        lenderOrganisationLink: 1,\n        name: 1,\n        status: 1,\n        type: 1,\n        canton: 1,\n        users: {\n          _id: 1,\n          name: 1,\n          email: 1,\n          phoneNumber: 1,\n          organisations: { users: { title: 1 } },\n        },\n        loans: {\n          _id: 1,\n          $filter({ filters, params: { loanId } }) {\n            filters.userId = Meteor.userId();\n            filters._id = loanId;\n          },\n        },\n      },\n    }\n    : {}),\n});\n\nexport const adminLoan = ({ withSort } = {}) => ({\n  ...userLoan({ withSort }),\n  adminNote: 1,\n  category: 1,\n  lenders: adminLender(),\n  maxPropertyValue: adminMaxPropertyValue,\n  nextDueTask: 1,\n  properties: adminProperty({ withSort }),\n  revenues: revenue(),\n  status: 1,\n  tasksCache: {\n    createdAt: 1,\n    dueAt: 1,\n    status: 1,\n    title: 1,\n    isPrivate: 1,\n    assigneeLink: 1,\n  },\n  user: adminUser(),\n  financedPromotion: { name: 1 },\n  financedPromotionLink: 1,\n});\n\nexport const adminLoans = () => ({\n  ...loanBase(),\n  borrowers: { name: 1 },\n  category: 1,\n  properties: { totalValue: 1, address1: 1 },\n  status: 1,\n  user: { assignedEmployee: { email: 1 }, name: 1 },\n});\n\nexport const proLoans = () => ({\n  anonymous: 1,\n  createdAt: 1,\n  name: 1,\n  status: 1,\n  promotions: {\n    name: 1,\n    users: { _id: 1 },\n    status: 1,\n    lenderOrganisationLink: 1,\n  },\n  promotionLinks: 1,\n  promotionOptions: {\n    name: 1,\n    status: 1,\n    promotionLots: { attributedTo: { user: { _id: 1 } } },\n    solvency: 1,\n    value: 1,\n  },\n  loanProgress: 1,\n  user: {\n    name: 1,\n    phoneNumbers: 1,\n    email: 1,\n    referredByUser: { name: 1, organisations: { name: 1 } },\n    referredByOrganisation: { name: 1 },\n  },\n  hasPromotion: 1,\n  hasProProperty: 1,\n  maxPropertyValue: userMaxPropertyValue,\n  properties: { address1: 1, category: 1, users: { _id: 1 }, totalValue: 1 },\n  referralId: 1,\n  residenceType: 1,\n  shareSolvency: 1,\n  structure: 1,\n});\n\nexport const proLoanWithRevenues = () => ({\n  anonymous: 1,\n  promotionOptions: { value: 1 },\n  properties: { totalValue: 1, value: 1 },\n  revenues: { amount: 1 },\n  selectedStructure: 1,\n  status: 1,\n  structures: {\n    id: 1,\n    propertyValue: 1,\n    propertyId: 1,\n    promotionOptionId: 1,\n  },\n});\n\n// //\n// // MortgageNote fragments\n// //\nexport const mortgageNote = () => ({\n  canton: 1,\n  category: 1,\n  rank: 1,\n  type: 1,\n  value: 1,\n});\n\n// //\n// // Notification fragments\n// //\nexport const notification = () => ({\n  activity: activity(),\n  createdAt: 1,\n  readAt: 1,\n  recipients: { firstName: 1, lastName: 1, name: 1 },\n  relatedDoc: 1,\n  task: task(),\n  title: 1,\n  revenue: revenue(),\n  updatedAt: 1,\n});\n\n// //\n// // Offer fragments\n// //\nexport const fullOffer = () => ({\n  amortizationGoal: 1,\n  amortizationYears: 1,\n  conditions: 1,\n  epotekFees: 1,\n  feedback: 1,\n  ...Object.values(INTEREST_RATES).reduce(\n    (obj, rate) => ({ ...obj, [rate]: 1 }),\n    {},\n  ),\n  fees: 1,\n  lender: {\n    loan: {\n      status: 1,\n      name: 1,\n      user: { name: 1, assignedEmployee: { email: 1, name: 1, firstName: 1 } },\n      borrowers: { name: 1 },\n    },\n    contact: { name: 1, email: 1 },\n    organisation: { name: 1, lenderRules: lenderRules() },\n  },\n  loanId: 1,\n  maxAmount: 1,\n  organisation: 1,\n  user: simpleUser(),\n  createdAt: 1,\n  withCounterparts: 1,\n  enableOffer: 1,\n});\n\n// //\n// // Organisation fragments\n// //\nexport const baseOrganisation = () => ({\n  address: 1,\n  address1: 1,\n  address2: 1,\n  canton: 1,\n  city: 1,\n  contacts: { title: 1, email: 1, name: 1 },\n  features: 1,\n  logo: 1,\n  name: 1,\n  type: 1,\n  zipCode: 1,\n  tags: 1,\n  users: { _id: 1 },\n});\n\nexport const fullOrganisation = () => ({\n  ...baseOrganisation(),\n  commissionRate: 1,\n  commissionRates: 1,\n  contacts: contact(),\n  documents: 1,\n  generatedRevenues: 1,\n  lenderRules: lenderRules(),\n  lenders: lender(),\n  offers: 1,\n  offerCount: 1,\n  users: organisationUser(),\n});\n\nexport const userOrganisation = () => ({\n  logo: 1,\n  name: 1,\n  lenderRules: lenderRules(),\n});\n\n// //\n// // PromotionLot fragments\n// //\nexport const proPromotionLot = () => ({\n  attributedTo: { user: { name: 1 } },\n  createdAt: 1,\n  documents: 1,\n  lots: { name: 1, value: 1, type: 1, description: 1 },\n  name: 1,\n  promotion: {\n    status: 1,\n    name: 1,\n    promotionLots: { name: 1 },\n    users: { _id: 1 },\n    lots: {\n      name: 1,\n      value: 1,\n      type: 1,\n      description: 1,\n      promotionLots: { _id: 1 },\n    },\n  },\n  promotionOptions: { _id: 1 },\n  properties: promotionProperty(),\n  status: 1,\n  updatedAt: 1,\n  value: 1,\n});\n\nexport const appPromotionLot = () => ({\n  attributedTo: { user: { _id: 1 } },\n  createdAt: 1,\n  documents: 1,\n  lots: { name: 1, value: 1, type: 1, description: 1 },\n  name: 1,\n  promotion: { name: 1, status: 1 },\n  properties: promotionProperty(),\n  reducedStatus: 1,\n  status: 1,\n  updatedAt: 1,\n  value: 1,\n});\n\n// //\n// // PromotionOption fragments\n// //\nexport const fullPromotionOption = () => ({\n  canton: 1,\n  createdAt: 1,\n  custom: 1,\n  loan: { name: 1 },\n  lots: { name: 1, type: 1, status: 1, description: 1 },\n  priority: 1,\n  promotionLots: { name: 1, promotion: { name: 1 } },\n  solvency: 1,\n  updatedAt: 1,\n});\n\nexport const proPromotionOption = () => ({\n  canton: 1,\n  createdAt: 1,\n  custom: 1,\n  loan: {\n    name: 1,\n    solvency: 1,\n    status: 1,\n    user: { phoneNumbers: 1, name: 1, email: 1 },\n    promotions: { users: { _id: 1, name: 1, organisations: { name: 1 } } },\n    promotionOptions: {\n      name: 1,\n      promotionLots: { attributedTo: { user: { _id: 1 } } },\n      solvency: 1,\n    },\n    loanProgress: 1,\n  },\n  lots: { name: 1, type: 1, description: 1 },\n  priority: 1,\n  solvency: 1,\n  updatedAt: 1,\n  promotion: { users: { _id: 1 } },\n  promotionLots: { _id: 1 },\n});\n\nexport const appPromotionOption = () => ({\n  attributedToMe: 1,\n  canton: 1,\n  createdAt: 1,\n  custom: 1,\n  lots: { description: 1, name: 1, type: 1, value: 1 },\n  promotionLots: appPromotionLot(),\n  priority: 1,\n  solvency: 1,\n  updatedAt: 1,\n});\n\nexport const loanPromotionOption = () => ({\n  attributedToMe: 1,\n  canton: 1,\n  custom: 1,\n  name: 1,\n  priority: 1,\n  promotion: 1,\n  promotionLots: {\n    name: 1,\n    status: 1,\n    reducedStatus: 1,\n    value: 1,\n    properties: promotionProperty(),\n  },\n  solvency: 1,\n  value: 1,\n});\n\n// //\n// // Promotion fragments\n// //\nexport const basePromotion = () => ({\n  address: 1,\n  address1: 1,\n  availablePromotionLots: 1,\n  bookedPromotionLots: 1,\n  canton: 1,\n  city: 1,\n  constructionTimeline: 1,\n  contacts: 1,\n  createdAt: 1,\n  documents: 1,\n  lenderOrganisation: { name: 1, logo: 1 },\n  loans: { _id: 1 },\n  lots: {\n    value: 1,\n    name: 1,\n    type: 1,\n    description: 1,\n    promotionLots: { name: 1 },\n    status: 1,\n  },\n  name: 1,\n  promotionLots: {\n    status: 1,\n    reducedStatus: 1,\n    lots: { name: 1 },\n    promotionOptions: { _id: 1 },\n    name: 1,\n  },\n  properties: promotionProperty(),\n  soldPromotionLots: 1,\n  status: 1,\n  type: 1,\n  updatedAt: 1,\n  users: {\n    name: 1,\n    email: 1,\n    roles: 1,\n    phoneNumber: 1,\n    organisations: { name: 1 },\n  },\n  zipCode: 1,\n});\n\nexport const proPromotion = ({ withFilteredLoan } = {}) => ({\n  ...basePromotion(),\n  assignedEmployee: { name: 1, email: 1 },\n  assignedEmployeeId: 1,\n  promotionLots: {\n    attributedTo: { user: { name: 1 } },\n    lots: { name: 1, value: 1, type: 1, description: 1, status: 1 },\n    name: 1,\n    promotionOptions: { _id: 1 },\n    properties: promotionProperty(),\n    reducedStatus: 1,\n    status: 1,\n    value: 1,\n    promotion: { _id: 1 },\n  },\n  promotionLoan: { _id: 1, name: 1 },\n  ...(withFilteredLoan\n    ? {\n      loans: {\n        $filter({ filters, params: { loanId } }) {\n          filters._id = loanId;\n        },\n      },\n    }\n    : {}),\n});\n\nexport const proPromotions = () => ({\n  ...basePromotion(),\n  promotionLots: { attributedTo: { user: { name: 1 } }, promotion: { _id: 1 } },\n});\n\nexport const adminPromotions = proPromotion;\n\nexport const searchPromotions = () => ({\n  createdAt: 1,\n  name: 1,\n  promotionLotLinks: 1,\n  updatedAt: 1,\n});\n\nexport const propertySummary = () => ({\n  address: 1,\n  address1: 1,\n  address2: 1,\n  canton: 1,\n  city: 1,\n  externalId: 1,\n  externalUrl: 1,\n  imageUrls: 1,\n  insideArea: 1,\n  organisation: 1,\n  promotion: { name: 1 },\n  propertyType: 1,\n  status: 1,\n  thumbnail: 1,\n  totalValue: 1,\n  userId: 1,\n  value: 1,\n  zipCode: 1,\n});\n\nexport const fullProperty = ({ withSort } = {}) => ({\n  ...propertySummary(),\n  additionalDocuments: 1,\n  additionalMargin: 1,\n  adminValidation: 1,\n  areaNorm: 1,\n  bathroomCount: 1,\n  category: 1,\n  constructionValue: 1,\n  constructionYear: 1,\n  copropertyPercentage: 1,\n  createdAt: 1,\n  description: 1,\n  documents: 1,\n  flatType: 1,\n  floorNumber: 1,\n  gardenArea: 1,\n  houseType: 1,\n  investmentRent: 1,\n  isCoproperty: 1,\n  isNew: 1,\n  landArea: 1,\n  landValue: 1,\n  latitude: 1,\n  loans: loanBase(),\n  longitude: 1,\n  minergie: 1,\n  mortgageNotes: mortgageNote(),\n  name: 1,\n  numberOfFloors: 1,\n  parkingInside: 1,\n  parkingOutside: 1,\n  pictures: 1,\n  promotion: { name: 1 },\n  renovationYear: 1,\n  residenceType: 1,\n  roomCount: 1,\n  terraceArea: 1,\n  totalValue: 1,\n  updatedAt: 1,\n  user: appUser(),\n  users: { _id: 1 },\n  useOpenGraph: 1,\n  volume: 1,\n  volumeNorm: 1,\n  yearlyExpenses: 1,\n  ...(withSort ? { $options: { sort: { createdAt: 1 } } } : {}),\n});\n\nexport const adminProperty = ({ withSort } = {}) => ({\n  ...fullProperty({ withSort }),\n  loanCount: 1,\n  useOpenGraph: 1,\n});\n\nexport const promotionProperty = () => ({\n  additionalMargin: 1,\n  address: 1,\n  bathroomCount: 1,\n  canton: 1,\n  constructionValue: 1,\n  description: 1,\n  gardenArea: 1,\n  insideArea: 1,\n  landValue: 1,\n  mortgageNotes: mortgageNote(),\n  name: 1,\n  propertyType: 1,\n  roomCount: 1,\n  terraceArea: 1,\n  totalValue: 1,\n  value: 1,\n  yearlyExpenses: 1,\n});\n\nexport const userProperty = ({ withSort } = {}) => {\n  const obj = { ...fullProperty({ withSort }) };\n  delete obj.users;\n  return obj;\n};\n\nexport const proPropertySummary = () => ({\n  address1: 1,\n  city: 1,\n  status: 1,\n  totalValue: 1,\n  loanCount: 1,\n});\n\nexport const proProperty = ({ withSort } = {}) => ({\n  ...fullProperty({ withSort }),\n  loanCount: 1,\n  useOpenGraph: 1,\n  users: { name: 1, organisations: { name: 1 }, email: 1, phoneNumber: 1 },\n});\n\nexport const apiProperty = () => ({\n  externalId: 1,\n  address1: 1,\n  address2: 1,\n  city: 1,\n  zipCode: 1,\n  value: 1,\n  description: 1,\n  propertyType: 1,\n  houseType: 1,\n  flatType: 1,\n  roomCount: 1,\n  insideArea: 1,\n  landArea: 1,\n  terraceArea: 1,\n  constructionYear: 1,\n  externalUrl: 1,\n  useOpenGraph: 1,\n  imageUrls: 1,\n});\n\n// //\n// // Task fragments\n// //\nexport const baseTask = () => ({\n  completedAt: 1,\n  createdAt: 1,\n  dueAt: 1,\n  status: 1,\n  title: 1,\n  description: 1,\n  updatedAt: 1,\n  isPrivate: 1,\n  priority: 1,\n});\n\nexport const task = () => ({\n  ...baseTask(),\n  assigneeLink: 1,\n  assignee: simpleUser(),\n  loan: { name: 1, borrowers: { name: 1 }, user: { name: 1 } },\n  user: { name: 1 },\n});\n\n// //\n// // User fragments\n// //\nexport const simpleUser = () => ({\n  email: 1,\n  emails: 1,\n  name: 1,\n  firstName: 1,\n  lastName: 1,\n  phoneNumbers: 1,\n  phoneNumber: 1,\n  roles: 1,\n});\n\nexport const organisationUser = () => ({\n  ...simpleUser(),\n  organisations: baseOrganisation(),\n});\n\nexport const fullUser = () => ({\n  ...simpleUser(),\n  apiPublicKey: 1,\n  assignedEmployee: simpleUser(),\n  createdAt: 1,\n  emails: 1,\n  loans: loanBase(),\n  updatedAt: 1,\n  organisations: fullOrganisation(),\n});\n\nexport const adminUser = () => ({\n  ...fullUser(),\n  assignedEmployee: simpleUser(),\n  assignedEmployeeCache: 1,\n  promotions: { name: 1, status: 1 },\n  proProperties: { address1: 1, status: 1, loanCount: 1, totalValue: 1 },\n  referredByUser: { name: 1, organisations: { name: 1 } },\n  referredByOrganisation: { name: 1 },\n  referredByOrganisationLink: 1,\n});\n\nexport const appUser = () => ({\n  ...fullUser(),\n  assignedEmployee: simpleUser(),\n  borrowers: { name: 1 },\n  loans: {\n    borrowers: { _id: 1, name: 1 },\n    customName: 1,\n    hasPromotion: 1,\n    hasProProperty: 1,\n    name: 1,\n    promotions: { address: 1, name: 1, documents: 1 },\n    properties: { address: 1, documents: 1 },\n    purchaseType: 1,\n    step: 1,\n  },\n  properties: { _id: 1 },\n});\n\nexport const proUser = () => ({\n  ...fullUser(),\n  assignedEmployee: simpleUser(),\n  promotions: { _id: 1, name: 1, permissions: 1, status: 1, users: { _id: 1 } },\n  properties: { _id: 1 },\n  proProperties: {\n    _id: 1,\n    address1: 1,\n    permissions: 1,\n    status: 1,\n    users: { _id: 1 },\n  },\n});\n\n// //\n// // Revenues fragments\n// //\nexport const revenue = () => ({\n  amount: 1,\n  createdAt: 1,\n  description: 1,\n  expectedAt: 1,\n  loan: { name: 1 },\n  organisationLinks: 1,\n  organisations: { name: 1 },\n  paidAt: 1,\n  secondaryType: 1,\n  sourceOrganisationLink: 1,\n  sourceOrganisation: { name: 1 },\n  status: 1,\n  type: 1,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"RESTAPI\":{\"server\":{\"restApiConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/restApiConstants.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport os from 'os';\n\nexport const HTTP_STATUS_CODES = {\n  OK: 200,\n  BAD_REQUEST: 400,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  CONFLICT: 409,\n  SERVER_ERROR: 500,\n};\n\nexport const BODY_SIZE_LIMIT = '50mb';\n\nexport const REST_API_ERRORS = {\n  WRONG_CONTENT_TYPE: (contentType, supportedContentType) => ({\n    status: HTTP_STATUS_CODES.BAD_REQUEST,\n    message: `Request content type must be ${supportedContentType}. Provided: ${contentType}`,\n    errorName: 'WRONG_CONTENT_TYPE',\n  }),\n  WRONG_AUTHORIZATION_TYPE: {\n    status: HTTP_STATUS_CODES.BAD_REQUEST,\n    errorName: 'WRONG_AUTHORIZATION_TYPE',\n    message: \"Authorization must be of type 'EPOTEK PublicKey:Signature'\",\n  },\n  AUTHORIZATION_FAILED: info => ({\n    status: HTTP_STATUS_CODES.FORBIDDEN,\n    errorName: 'AUTHORIZATION_FAILED',\n    message: 'Wrong public key or signature.',\n    info,\n  }),\n  UNKNOWN_ENDPOINT: ({ path, method }) => ({\n    status: HTTP_STATUS_CODES.NOT_FOUND,\n    errorName: 'UNKNOWN_ENDPOINT',\n    message: `The endpoint ${method} ${path} is not valid`,\n  }),\n  REPLAY_ATTACK_ATTEMPT: {\n    status: HTTP_STATUS_CODES.FORBIDDEN,\n    errorName: 'REPLAY_ATTACK_ATTEMPT',\n    message:\n      'A replay attack has been detected. Please use a correct timestamp and a different nonce.',\n  },\n};\n\nexport const OS_TMP_DIR = os.tmpdir();\nexport const FILE_UPLOAD_DIR = `${OS_TMP_DIR}/files`;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"RESTAPI.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/RESTAPI.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { WebApp } from 'meteor/webapp';\nimport connectRoute from 'connect-route';\nimport Fiber from 'fibers';\nimport { compose } from 'recompose';\n\nimport * as defaultMiddlewares from './middlewares';\nimport { logRequest, trackRequest, setIsAPI, setAPIUser } from './helpers';\nimport { HTTP_STATUS_CODES } from './restApiConstants';\nimport {\n  setClientMicroservice,\n  setClientUrl,\n} from '../../../utils/server/getClientUrl';\n\nexport default class RESTAPI {\n  constructor({\n    rootPath = '/api',\n    preMiddlewares = defaultMiddlewares.preMiddlewares,\n    postMiddlewares = defaultMiddlewares.postMiddlewares,\n  } = {}) {\n    this.rootPath = rootPath;\n    this.preMiddlewares = preMiddlewares;\n    this.postMiddlewares = postMiddlewares;\n    this.endpoints = {};\n  }\n\n  reset() {\n    WebApp.connectHandlers.stack = [];\n  }\n\n  start() {\n    this.reset();\n    this.registerMiddlewares(this.preMiddlewares);\n    this.registerEndpoints();\n    this.registerMiddlewares(this.postMiddlewares);\n  }\n\n  registerMiddlewares(middlewares) {\n    middlewares.forEach((middleware) => {\n      WebApp.connectHandlers.use(this.rootPath, middleware(this.getEndpointsOptions()));\n    });\n  }\n\n  makeEndpoint = path => this.rootPath + path;\n\n  registerEndpoints() {\n    const endpoints = Object.keys(this.endpoints);\n\n    endpoints.forEach((endpoint) => {\n      const methods = Object.keys(this.endpoints[endpoint]);\n\n      methods.forEach((method) => {\n        const finalEndpoint = this.makeEndpoint(endpoint);\n        const { handler } = this.endpoints[endpoint][method];\n\n        this.registerEndpoint(finalEndpoint, handler, method);\n      });\n    });\n  }\n\n  wrapHandler(handler) {\n    return (req, res, next) => {\n      Fiber(() => {\n        const { headers = {} } = req;\n        const { host, location } = headers;\n\n        setClientMicroservice('api');\n        setClientUrl({ host, href: location });\n        setIsAPI();\n        setAPIUser(req.user);\n\n        try {\n          Promise.resolve()\n            .then(() =>\n              handler({\n                user: req.user,\n                body: req.body,\n                query: req.query,\n                params: req.params,\n                files: req.files,\n              }))\n            .then(result => this.handleSuccess(result, req, res))\n            .catch(next);\n        } catch (error) {\n          next(error);\n        }\n      }).run();\n    };\n  }\n\n  registerEndpoint(endpoint, handler, method) {\n    compose(\n      WebApp.connectHandlers.use.bind(WebApp.connectHandlers),\n      Meteor.bindEnvironment,\n      connectRoute,\n    )((router) => {\n      router[method.toLowerCase()](endpoint, this.wrapHandler(handler));\n    });\n  }\n\n  handleSuccess(result = '', req, res) {\n    const { status } = result;\n    const stringified = JSON.stringify(result);\n\n    // LOGS\n    logRequest({ req, result: stringified });\n\n    trackRequest({ req, result: stringified });\n\n    res.writeHead(status || HTTP_STATUS_CODES.OK, {\n      'Content-Type': 'application/json',\n    });\n    res.write(stringified);\n\n    res.end();\n  }\n\n  addEndpoint(path, method, handler, options = {}) {\n    if (this.endpoints[path] && this.endpoints[path][method]) {\n      throw new Error(`Endpoint \"${path}\" for method \"${method}\" already exists in REST API`);\n    }\n\n    this.endpoints[path] = {\n      ...(this.endpoints[path] || {}),\n      [method]: { handler, options },\n    };\n  }\n\n  getEndpointsOptions() {\n    return Object.keys(this.endpoints).reduce(\n      (options, path) => ({\n        ...options,\n        [this.makeEndpoint(path)]: Object.keys(this.endpoints[path]).reduce(\n          (methods, method) => ({\n            ...methods,\n            [method]: { options: this.endpoints[path][method].options },\n          }),\n          {},\n        ),\n      }),\n      {},\n    );\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"helpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/helpers.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { DDPCommon } from 'meteor/ddp-common';\nimport { DDP } from 'meteor/ddp-client';\nimport { Meteor } from 'meteor/meteor';\nimport { Match } from 'meteor/check';\nimport { Random } from 'meteor/random';\n\nimport NodeRSA from 'node-rsa';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport Analytics from 'core/api/analytics/server/Analytics';\nimport EVENTS from 'core/api/analytics/events';\nimport UserService from 'core/api/users/server/UserService';\nimport { getClientHost } from 'core/utils/server/getClientUrl';\nimport { storeOnFiber, getFromFiber } from 'core/utils/server/fiberStorage';\nimport { sortObject } from '../../helpers';\nimport { HTTP_STATUS_CODES } from './restApiConstants';\nimport { getImpersonateUserId } from './endpoints/helpers';\n\nexport const AUTH_ITEMS = {\n  RSA_PUBLIC_KEY: 'RSA_PUBLIC_KEY',\n  RSA_SIGNATURE: 'RSA_SIGNATURE',\n};\n\nexport const OBJECT_FORMATS = {\n  DEFAULT: 'DEFAULT',\n  TO_LITERRAL: 'TO_LITERRAL',\n  TO_STRING: 'TO_STRING',\n};\n\nexport const getHeader = (req, name) => req.headers[name];\n\nconst getAuthItem = ({ req, item }) => {\n  const authorization = getHeader(req, 'x-epotek-authorization');\n  if (!authorization) {\n    return undefined;\n  }\n\n  if (!authorization.includes('EPOTEK')) {\n    return undefined;\n  }\n\n  switch (item) {\n  case AUTH_ITEMS.RSA_PUBLIC_KEY: {\n    return authorization.replace('EPOTEK ', '').split(':')[0];\n  }\n  case AUTH_ITEMS.RSA_SIGNATURE: {\n    return authorization.replace('EPOTEK ', '').split(':')[1];\n  }\n  default:\n    return undefined;\n  }\n};\n\nexport const getPublicKey = req =>\n  getAuthItem({ req, item: AUTH_ITEMS.RSA_PUBLIC_KEY });\n\nexport const getSignature = req =>\n  getAuthItem({ req, item: AUTH_ITEMS.RSA_SIGNATURE });\n\nexport const getRequestPath = (req) => {\n  const { _parsedUrl: parsedUrl } = req;\n  return parsedUrl && parsedUrl.pathname;\n};\n\nexport const getRequestMethod = req => req.method;\n\nexport const updateCustomerReferral = ({\n  customer,\n  userId,\n  impersonateUser,\n}) => {\n  if (impersonateUser) {\n    const customerId = UserService.getByEmail(customer.email)._id;\n    const mainOrg = UserService.getUserMainOrganisation(userId);\n    return UserService.setReferredByOrganisation({\n      userId: customerId,\n      organisationId: mainOrg && mainOrg._id,\n    });\n  }\n  return Promise.resolve();\n};\n\nexport const withMeteorUserId = ({ userId, impersonateUser }, func) => {\n  let impersonateUserId;\n  if (impersonateUser) {\n    impersonateUserId = getImpersonateUserId({ userId, impersonateUser });\n  }\n\n  const invocation = new DDPCommon.MethodInvocation({\n    userId: impersonateUserId || userId,\n    // isSimulation: false,\n    // setUserId,\n    // unblock,\n    // connection: self.connectionHandle,\n    // randomSeed,\n  });\n\n  return DDP._CurrentInvocation.withValue(invocation, func);\n};\n\nexport const getErrorObject = (error, res) => {\n  let { statusCode: status } = res;\n  let message;\n  let errorName;\n\n  if (!status || status === 200) {\n    status = HTTP_STATUS_CODES.SERVER_ERROR;\n  }\n\n  if (error instanceof Meteor.Error || error instanceof Match.Error) {\n    message = error.message;\n    status = error.error && typeof error.error === 'number'\n      ? error.error\n      : HTTP_STATUS_CODES.BAD_REQUEST;\n  } else {\n    message = 'Internal server error';\n  }\n\n  if (error && error.status && error.message && error.errorName) {\n    // This is one of our custom errors\n    errorName = error.errorName;\n    status = error.status;\n    message = error.message;\n  }\n\n  return { status, errorName, message };\n};\n\nexport const stringToLiteral = (value) => {\n  const maps = {\n    true: true,\n    false: false,\n    undefined,\n    NaN,\n    Infinity,\n    '-Infinity': -Infinity,\n    null: null,\n  };\n  if (value && !isNaN(value)) {\n    return parseInt(value);\n  }\n\n  return Object.keys(maps).includes(value) ? maps[value] : value;\n};\n\nexport const literalToString = (value) => {\n  switch (value) {\n  case true:\n    return 'true';\n  case false:\n    return 'false';\n  case undefined:\n    return 'undefined';\n  case null:\n    return 'null';\n  case NaN:\n    return 'NaN';\n  case Infinity:\n    return 'Infinity';\n  case -Infinity:\n    return '-Infinity';\n  default:\n    return value.toString();\n  }\n};\n\n// Return array of every object's properties\nconst getObjectPropertiesPath = (obj, stack, res) => {\n  let arr = res;\n  for (const property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      if (obj[property] && typeof obj[property] === 'object') {\n        if (\n          (Array.isArray(obj[property]) && obj[property].length === 0)\n          || Object.keys(obj[property]).length === 0\n        ) {\n          const str = `${stack}.${property}`.substr(1);\n          arr = [...arr, str];\n        } else {\n          arr = getObjectPropertiesPath(\n            obj[property],\n            `${stack}.${property}`,\n            arr,\n          );\n        }\n      } else {\n        const str = `${stack}.${property}`.substr(1);\n        arr = [...arr, str];\n      }\n    }\n  }\n\n  return arr;\n};\n\nexport const formatObject = (obj, format) => {\n  if (format === OBJECT_FORMATS.DEFAULT) {\n    return obj;\n  }\n\n  const properties = getObjectPropertiesPath(obj, '', []);\n  const formattedObject = {};\n\n  properties.forEach((property) => {\n    const value = get(obj, property);\n    switch (format) {\n    // String to literal\n    case OBJECT_FORMATS.TO_LITERRAL: {\n      set(formattedObject, property, stringToLiteral(value));\n      break;\n    }\n    // Literal to string\n    case OBJECT_FORMATS.TO_STRING: {\n      set(formattedObject, property, literalToString(value));\n      break;\n    }\n    default:\n      break;\n    }\n  });\n\n  return formattedObject;\n};\n\nexport const formatParams = params =>\n  Object.keys(params).reduce(\n    (object, key) => ({\n      ...object,\n      [key]: stringToLiteral(params[key]),\n    }),\n    {},\n  );\n\nexport const logRequest = ({ req, result }) => {\n  const {\n    user: { _id, emails } = {},\n    body = {},\n    params = {},\n    query = {},\n    headers = {},\n    verifiedFormat,\n  } = req;\n\n  if (Meteor.isTest) {\n    return;\n  }\n\n  console.log('----- API CALL -----');\n  console.log('USER:', JSON.stringify({ _id, emails }, null, 2));\n  console.log('URL:', getRequestPath(req));\n  console.log('HEADERS:', JSON.stringify(headers, null, 2));\n  console.log('BODY:', JSON.stringify(body, null, 2));\n  console.log('PARAMS:', JSON.stringify(params, null, 2));\n  console.log('QUERY:', JSON.stringify(query, null, 2));\n  console.log('VERIFIED FORMAT:', verifiedFormat);\n  console.log('RESULT:', result);\n  console.log('-----------------');\n};\n\nexport const verifySignature = (req) => {\n  const { publicKey, signature, body, query, isMultipart } = req;\n  const timestamp = getHeader(req, 'x-epotek-timestamp');\n  const nonce = getHeader(req, 'x-epotek-nonce');\n\n  const method = getRequestMethod(req);\n\n  // Import public key\n  const key = new NodeRSA();\n  key.importKey(publicKey, 'pkcs1-public-pem');\n\n  let objectToVerify = { security: sortObject({ timestamp, nonce }) };\n\n  if (Object.keys(query).length > 0) {\n    objectToVerify = {\n      ...objectToVerify,\n      queryParams: sortObject(query),\n    };\n  }\n\n  if (!['GET', 'HEAD'].includes(method) && Object.keys(body).length > 0) {\n    objectToVerify = { ...objectToVerify, body: sortObject(body) };\n  }\n\n  if (isMultipart) {\n    const { files: { file = {} } = {} } = req;\n    const { originalFilename, size, type } = file;\n    objectToVerify = {\n      ...objectToVerify,\n      file: sortObject({ name: originalFilename, size, type }),\n    };\n  }\n\n  const verified = Object.keys(OBJECT_FORMATS).some((format) => {\n    const isValid = key.verify(\n      JSON.stringify(formatObject(objectToVerify, format)),\n      signature,\n      'utf8',\n      'base64',\n    );\n\n    if (isValid) {\n      req.verifiedFormat = format;\n    }\n    return isValid;\n  });\n\n  return {\n    verified,\n    toVerify: {\n      object: objectToVerify,\n      acceptedStringifiedVersions: Object.keys(OBJECT_FORMATS).map(format =>\n        JSON.stringify(formatObject(objectToVerify, format))),\n    },\n  };\n};\n\nexport const trackRequest = ({ req, result }) => {\n  const { user: { _id: userId } = {}, headers = {} } = req;\n  const {\n    'x-forwarded-for': clientAddress,\n    'x-real-ip': realIp,\n  } = headers;\n\n  const analytics = new Analytics({\n    userId,\n    connection: {\n      clientAddress,\n      httpHeaders: { 'x-real-ip': realIp, host: getClientHost() },\n    },\n  });\n\n  if (userId) {\n    analytics.identify(Random.id(16));\n  }\n\n  analytics.track(EVENTS.API_CALLED, { endpoint: getRequestPath(req), result });\n};\n\nexport const getMatchingPathOptions = (req, options) => {\n  const endpoints = Object.keys(options);\n  const path = getRequestPath(req);\n  const method = getRequestMethod(req);\n  const parts = decodeURI(path)\n    .split('?', 1)[0]\n    .replace(/^[\\s\\/]+|[\\s\\/]+$/g, '')\n    .split('/');\n\n  let matchingPathOptions = {};\n\n  endpoints.forEach((endpoint) => {\n    const endpointParts = endpoint\n      .split('/')\n      .filter(x => x)\n      .map(part => (part.slice(0, 1) === ':' ? '*' : part));\n    const match = endpointParts.length === parts.length\n      && endpointParts.every((part, i) => {\n        if (part === '*') {\n          return true;\n        }\n        return part === parts[i];\n      })\n      && !!options[endpoint][method];\n\n    if (match) {\n      matchingPathOptions = options[endpoint][method].options;\n    }\n  });\n\n  return matchingPathOptions;\n};\n\nexport const setIsAPI = () => {\n  storeOnFiber('isAPI', true);\n};\n\n// Can be used to determine if server-side code is being run from an API call\nexport const isAPI = () => !!getFromFiber('isAPI');\n\nexport const setAPIUser = (user) => {\n  storeOnFiber('APIUser', user);\n};\n\nexport const getAPIUser = () => getFromFiber('APIUser');\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"endpoints\":{\"helpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/helpers.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport UserService from '../../../users/server/UserService';\n\nconst anyOrganisationMatches = ({\n  userOrganisations = [],\n  proOrganisations = [],\n}) =>\n  userOrganisations.some(userOrganisation =>\n    proOrganisations.some(proOrganisation => userOrganisation._id === proOrganisation._id));\n\nexport const getImpersonateUserId = ({ userId, impersonateUser }) => {\n  const { organisations: userOrganisations = [] } = UserService.fetchOne({\n    $filters: { _id: userId },\n    organisations: { _id: 1 },\n  });\n\n  const user = UserService.getByEmail(impersonateUser);\n  let proId;\n  let proOrganisations;\n\n  if (user) {\n    proId = user._id;\n    proOrganisations = UserService.fetchOne({\n      $filters: { _id: user._id },\n      organisations: { _id: 1 },\n    }).organisations || [];\n  }\n\n  if (!proId) {\n    throw new Meteor.Error(`No user found for email address \"${impersonateUser}\"`);\n  }\n\n  if (\n    userOrganisations.length === 0\n    || proOrganisations.length === 0\n    || !anyOrganisationMatches({ userOrganisations, proOrganisations })\n  ) {\n    throw new Meteor.Error(`User with email address \"${impersonateUser}\" is not part of your organisation`);\n  }\n\n  return proId;\n};\n\nexport const checkQuery = ({ query, schema }) => {\n  const cleanQuery = schema.clean(query);\n  try {\n    schema.validate(cleanQuery);\n  } catch (error) {\n    throw new Meteor.Error(error);\n  }\n\n  return cleanQuery;\n};\n\nexport const checkAccessToUser = ({ user, proId }) => {\n  const { organisations = [] } = UserService.fetchOne({\n    $filters: { _id: proId },\n    organisations: { users: { _id: 1 } },\n  });\n\n  if (\n    !organisations.some(({ _id }) => _id === user.referredByOrganisationLink)\n    && !organisations.some(({ users = [] }) =>\n      users.some(({ _id }) => _id === user.referredByUserLink))\n  ) {\n    throw new Meteor.Error(`User with email \"${user.emails[0].address}\" not found, or you don't have access to it.`);\n  }\n};\n\nexport const impersonateSchema = new SimpleSchema({\n  'impersonate-user': { type: String, optional: true },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/index.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default as inviteUserToPromotionAPI } from './inviteUserToPromotion';\nexport { default as testEndpointAPI } from './testEndpoint';\nexport {\n  default as inviteCustomerToProPropertiesAPI,\n} from './inviteCustomerToProProperties';\nexport { default as referCustomerAPI } from './referCustomer';\nexport { default as getPropertyLoansAPI } from './getPropertyLoans';\nexport { default as getUserAPI } from './getUser';\nexport { default as interestRatesAPI } from './interestRates';\nexport { default as mortgageEstimateAPI } from './mortgageEstimate';\nexport { default as updatePropertyAPI } from './updateProperty';\nexport { default as insertPropertyAPI } from './insertProperty';\nexport { default as uploadFileAPI } from './uploadFile';\nexport { default as deleteFileAPI } from './deleteFile';\nexport { default as getPropertyAPI } from './getProperty';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"inviteUserToPromotion.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/inviteUserToPromotion.js                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport { proInviteUser } from '../../../methods';\nimport {\n  withMeteorUserId,\n  literalToString,\n  stringToLiteral,\n  updateCustomerReferral,\n} from '../helpers';\nimport { checkQuery, impersonateSchema } from './helpers';\n\nconst inviteUserToPromotionAPI = ({\n  user: { _id: userId },\n  body,\n  params,\n  query,\n}) => {\n  const { user, shareSolvency } = body;\n  const { promotionId } = params;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: impersonateSchema,\n  });\n\n  const promotionIds = [promotionId]\n    .map(stringToLiteral)\n    .filter(x => x)\n    .map(literalToString);\n\n  if (!promotionIds.length) {\n    throw new Meteor.Error('No promotionId provided');\n  }\n\n  return withMeteorUserId({ userId, impersonateUser }, () =>\n    proInviteUser.run({\n      promotionIds,\n      user: { ...user, invitedBy: userId },\n      shareSolvency,\n    }))\n    .then(() =>\n      updateCustomerReferral({ customer: user, userId, impersonateUser }))\n    .then(() => ({\n      message: `Successfully invited user \"${\n        user.email\n      }\" to promotion id \"${promotionId}\"`,\n    }));\n};\n\nexport default inviteUserToPromotionAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"testEndpoint.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/testEndpoint.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport pick from 'lodash/pick';\n\nconst testEndpointAPI = ({ user, body, params, query }) => ({\n  user: pick(user, ['emails', 'firstName', 'lastName', 'phoneNumbers']),\n  body,\n  query,\n  params,\n});\n\nexport default testEndpointAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"inviteCustomerToProProperties.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/inviteCustomerToProProperties.js                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport { proInviteUser } from '../../../methods';\nimport PropertySchema, {\n  userAllowedKeys,\n} from '../../../properties/schemas/PropertySchema';\nimport { withMeteorUserId, updateCustomerReferral } from '../helpers';\nimport { checkQuery, impersonateSchema } from './helpers';\n\nconst formatPropertyIds = (propertyIds) => {\n  const ids = propertyIds.map(id => `\"${id}\"`);\n  return [ids.slice(0, -1).join(', '), ids.slice(-1)[0]].join(ids.length < 2 ? '' : ' and ');\n};\n\nconst checkProperties = (properties) => {\n  const schema = PropertySchema.pick(...userAllowedKeys);\n\n  return properties.map((property) => {\n    const { _id, externalId } = property;\n    if ((!_id && !externalId) || (_id && externalId)) {\n      throw new Meteor.Error('Each property must have either a \"_id\" or \"externalId\" key');\n    }\n    if (_id) {\n      const exists = PropertyService.exists(_id);\n      if (!exists) {\n        throw new Meteor.Error(`Property with _id \"${_id}\" does not exist`);\n      }\n    } else {\n      return checkQuery({ schema, query: property });\n    }\n\n    return property;\n  });\n};\n\nconst getExternalProperties = properties =>\n  properties.filter(({ externalId }) => externalId);\nconst getInternalProperties = properties => properties.filter(({ _id }) => _id);\n\nconst inviteCustomerToProPropertiesAPI = ({\n  user: { _id: userId },\n  body,\n  query,\n}) => {\n  let { user, properties = [], shareSolvency } = body;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: impersonateSchema,\n  });\n\n  properties = checkProperties(properties);\n  const externalProperties = getExternalProperties(properties);\n  const internalProperties = getInternalProperties(properties);\n\n  const formattedIds = formatPropertyIds([\n    ...externalProperties.map(({ externalId }) => externalId),\n    ...internalProperties.map(({ _id }) => _id),\n  ]);\n\n  const payload = {\n    propertyIds: internalProperties.map(({ _id }) => _id),\n    properties: externalProperties,\n    user,\n    shareSolvency,\n  };\n\n  if (!payload.propertyIds.length && !payload.properties.length) {\n    throw new Meteor.Error('You must provide at least one valid property');\n  }\n\n  return withMeteorUserId({ userId, impersonateUser }, () =>\n    proInviteUser.run(payload))\n    .then(() =>\n      updateCustomerReferral({ customer: user, userId, impersonateUser }))\n    .then(() => ({\n      message: `Successfully invited user \"${\n        user.email\n      }\" to property ids ${formattedIds}`,\n    }));\n};\n\nexport default inviteCustomerToProPropertiesAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"referCustomer.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/referCustomer.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\n\nimport { proInviteUser } from '../../../methods';\nimport { withMeteorUserId, updateCustomerReferral } from '../helpers';\nimport { checkQuery } from './helpers';\n\nconst querySchema = new SimpleSchema({\n  'impersonate-user': { type: String, optional: true },\n});\n\nconst referCustomerAPI = ({ user: { _id: userId }, body, query }) => {\n  const { user, shareSolvency } = body;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: querySchema,\n  });\n\n  return withMeteorUserId({ userId, impersonateUser }, () =>\n    proInviteUser.run({\n      user: { ...user, invitedBy: userId },\n      shareSolvency,\n    }))\n    .then(() =>\n      updateCustomerReferral({ customer: user, userId, impersonateUser }))\n    .then(() => ({\n      message: `Successfully referred user \"${user.email}\"`,\n    }));\n};\n\nexport default referCustomerAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getPropertyLoans.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/getPropertyLoans.js                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport pick from 'lodash/pick';\nimport SimpleSchema from 'simpl-schema';\n\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport { proPropertyLoans } from '../../../loans/queries';\nimport { getImpersonateUserId, checkQuery } from './helpers';\n\nconst querySchema = new SimpleSchema({\n  'impersonate-user': { type: String, optional: true },\n});\n\nconst getPropertyLoansAPI = ({ user: { _id: userId }, params, query }) => {\n  let { propertyId } = params;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: querySchema,\n  });\n\n  const exists = PropertyService.exists(propertyId);\n\n  if (!exists) {\n    const propertyByExternalId = PropertyService.fetchOne({\n      $filters: { externalId: propertyId },\n    });\n    if (propertyByExternalId) {\n      propertyId = propertyByExternalId._id;\n    }\n  }\n\n  let proId;\n  if (impersonateUser) {\n    proId = getImpersonateUserId({ userId, impersonateUser });\n  }\n\n  const loans = proPropertyLoans\n    .clone({ propertyId })\n    .fetch({ userId: proId || userId });\n\n  const filteredLoans = loans.map(loan =>\n    pick(loan, [\n      'user.name',\n      'user.phoneNumbers',\n      'user.email',\n      'user.referredByUser.name',\n      'user.referredByOrganisation.name',\n      'createdAt',\n      'name',\n      'loanProgress',\n      'status',\n      'properties',\n    ]));\n\n  return filteredLoans.map(({ properties, ...loan }) => {\n    const property = properties.find(({ _id }) => _id === propertyId) || {};\n    const { solvent } = property;\n    return { ...loan, solvent };\n  });\n};\n\nexport default getPropertyLoansAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getUser.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/getUser.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport pick from 'lodash/pick';\nimport SimpleSchema from 'simpl-schema';\n\nimport { getImpersonateUserId, checkQuery, checkAccessToUser } from './helpers';\nimport UserService from '../../../users/server/UserService';\n\nconst querySchema = new SimpleSchema({\n  email: { type: String, optional: false },\n  'impersonate-user': { type: String, optional: true },\n});\n\nconst getUserAPI = ({ user: { _id: userId }, query }) => {\n  const { email, 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: querySchema,\n  });\n\n  let proId;\n  if (impersonateUser) {\n    proId = getImpersonateUserId({ userId, impersonateUser });\n  }\n\n  const user = UserService.getByEmail(email);\n\n  if (!user) {\n    throw new Meteor.Error(`User with email \"${email}\" not found, or you don't have access to it.`);\n  }\n\n  checkAccessToUser({ user, proId: proId || userId });\n\n  return pick(user, ['firstName', 'lastName', 'emails', 'phoneNumbers']);\n};\n\nexport default getUserAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"interestRates.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/interestRates.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { currentInterestRates } from '../../../interestRates/queries';\n\nconst interestRatesAPI = ({ user, body, params, query }) =>\n  currentInterestRates.clone().fetch();\n\nexport default interestRatesAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"mortgageEstimate.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/mortgageEstimate.js                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SimpleSchema from 'simpl-schema';\n\nimport { MAX_BORROW_RATIO_PRIMARY_PROPERTY } from '../../../../config/financeConstants';\nimport Calculator, {\n  Calculator as CalculatorClass,\n} from '../../../../utils/Calculator';\nimport zipcodes from '../../../../utils/zipcodes';\nimport { address } from '../../../helpers/sharedSchemas';\nimport {\n  RESIDENCE_TYPE,\n  INTEREST_RATES,\n  PURCHASE_TYPE,\n} from '../../../constants';\nimport { currentInterestRates } from '../../../interestRates/queries';\nimport { checkQuery } from './helpers';\n\nconst LUXURY_VALUE_THRESHOLD = 2500000;\nconst SECOND_OR_LUXURY_AMORTIZATION_GOAL = 0.5;\nconst SECOND_OR_LUXURY_BORROW_RATIO = 0.67;\n\nconst roundToCents = val => Number(val.toFixed(2));\nconst getBorrowRatio = (residenceType, propertyValue) => {\n  if (residenceType === RESIDENCE_TYPE.SECOND_RESIDENCE) {\n    return SECOND_OR_LUXURY_BORROW_RATIO;\n  }\n\n  if (propertyValue >= LUXURY_VALUE_THRESHOLD) {\n    return SECOND_OR_LUXURY_BORROW_RATIO;\n  }\n\n  return MAX_BORROW_RATIO_PRIMARY_PROPERTY;\n};\n\nconst querySchema = new SimpleSchema({\n  'property-value': { type: Number, min: 50000 },\n  'monthly-maintenance': {\n    type: Number,\n    optional: true,\n    defaultValue: 0,\n    min: 0,\n  },\n  'residence-type': {\n    type: String,\n    optional: true,\n    defaultValue: RESIDENCE_TYPE.MAIN_RESIDENCE,\n    allowedValues: Object.values(RESIDENCE_TYPE),\n  },\n  'purchase-type': {\n    type: String,\n    optional: true,\n    defaultValue: PURCHASE_TYPE.ACQUISITION,\n    allowedValues: Object.values(PURCHASE_TYPE),\n  },\n  'include-notary-fees': {\n    type: Boolean,\n    optional: true,\n    defaultValue: true,\n  },\n  ...{ 'zip-code': address.zipCode, canton: address.canton },\n});\n\nconst mortgageEstimateAPI = ({ query }) => {\n  const {\n    'property-value': propertyValue,\n    'residence-type': residenceType,\n    'purchase-type': purchaseType,\n    'zip-code': zipCode,\n    'monthly-maintenance': maintenance,\n    'include-notary-fees': includeNotaryFees,\n    canton,\n  } = checkQuery({ query, schema: querySchema });\n\n  const date = new Date().toISOString();\n  const rates = currentInterestRates.clone().fetch();\n  const interestRates = rates.rates.reduce(\n    (obj, { type, rateLow }) => ({ ...obj, [type]: rateLow }),\n    {},\n  );\n  const finalCanton = zipCode ? zipcodes(zipCode) : canton;\n  const borrowRatio = getBorrowRatio(residenceType, propertyValue);\n  const loanValue = roundToCents(propertyValue * borrowRatio);\n  const loanObject = Calculator.createLoanObject({\n    residenceType,\n    wantedLoan: loanValue,\n    propertyValue,\n    canton: finalCanton,\n    currentInterestRates: interestRates,\n    loanTranches: [{ value: 1, type: INTEREST_RATES.YEARS_10 }],\n  });\n  const amortizationGoal = borrowRatio === SECOND_OR_LUXURY_BORROW_RATIO\n    ? SECOND_OR_LUXURY_AMORTIZATION_GOAL\n    : undefined;\n\n  const calc = new CalculatorClass({ loan: loanObject, amortizationGoal });\n  const getInterestsForType = type =>\n    calc.getInterests({\n      loan: Calculator.createLoanObject({\n        residenceType,\n        wantedLoan: loanValue,\n        propertyValue,\n        canton: finalCanton,\n        currentInterestRates: interestRates,\n        loanTranches: [{ value: 1, type }],\n      }),\n    });\n\n  const interests10 = calc.getInterests({ loan: loanObject });\n  const interests15 = getInterestsForType(INTEREST_RATES.YEARS_15);\n  const interests5 = getInterestsForType(INTEREST_RATES.YEARS_5);\n  const interestsLibor = getInterestsForType(INTEREST_RATES.LIBOR);\n  const amortization = roundToCents(calc.getAmortization({ loan: loanObject }));\n  const notaryFees = includeNotaryFees\n    ? calc.getFees({ loan: loanObject })\n    : null;\n  const totalValue = roundToCents(propertyValue + (notaryFees ? notaryFees.total : 0));\n\n  return {\n    borrowRatio,\n    date,\n    loanValue,\n    monthlyAmortization: amortization,\n    monthlyInterests: {\n      interestsLibor,\n      interests5,\n      interests10,\n      interests15,\n    },\n    monthlyMaintenance: maintenance,\n    monthlyTotals: {\n      interestsLibor: amortization + maintenance + interestsLibor,\n      interests5: amortization + maintenance + interests5,\n      interests10: amortization + maintenance + interests10,\n      interests15: amortization + maintenance + interests15,\n    },\n    notaryFees: notaryFees\n      ? {\n        canton: notaryFees.canton,\n        estimate: notaryFees.estimate,\n        total: notaryFees.total,\n      }\n      : undefined,\n    ownFunds: roundToCents(totalValue - loanValue),\n    purchaseType,\n    residenceType,\n    totalValue,\n  };\n};\n\nexport default mortgageEstimateAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"updateProperty.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/updateProperty.js                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport { apiProperty } from 'core/api/fragments';\nimport PropertyService from '../../../properties/server/PropertyService';\nimport { propertyUpdate } from '../../../methods';\nimport { withMeteorUserId } from '../helpers';\nimport { checkQuery, impersonateSchema } from './helpers';\nimport { HTTP_STATUS_CODES } from '../restApiConstants';\n\nconst updatePropertyAPI = ({\n  user: { _id: userId },\n  params,\n  body: object,\n  query,\n}) => {\n  let { propertyId } = params;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: impersonateSchema,\n  });\n\n  const exists = PropertyService.exists(propertyId);\n\n  if (!exists) {\n    const propertyByExternalId = PropertyService.fetchOne({\n      $filters: { externalId: propertyId },\n    });\n    if (propertyByExternalId) {\n      propertyId = propertyByExternalId._id;\n    } else {\n      throw new Meteor.Error(`No property found for id \"${propertyId}\"`);\n    }\n  }\n\n  return withMeteorUserId({ userId, impersonateUser }, () =>\n    propertyUpdate.run({ propertyId, object }).then(() => {\n      const property = PropertyService.fetchOne({\n        $filters: { _id: propertyId },\n        ...apiProperty(),\n      });\n      return Promise.resolve({\n        status: HTTP_STATUS_CODES.OK,\n        message: `Property with id \"${params.propertyId}\" updated !`,\n        property,\n      });\n    }));\n};\n\nexport default updatePropertyAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"insertProperty.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/insertProperty.js                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { apiProperty } from 'core/api/fragments';\nimport PropertyService from '../../../properties/server/PropertyService';\nimport { proPropertyInsert } from '../../../methods';\nimport { withMeteorUserId } from '../helpers';\nimport { checkQuery, impersonateSchema, getImpersonateUserId } from './helpers';\nimport { HTTP_STATUS_CODES } from '../restApiConstants';\nimport Security from '../../../security';\n\nconst insertPropertyAPI = ({\n  user: { _id: userId },\n  body: property,\n  query,\n}) => {\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: impersonateSchema,\n  });\n\n  const { externalId } = property;\n\n  if (externalId) {\n    const propertyByExternalId = PropertyService.fetchOne({\n      $filters: { externalId },\n      ...apiProperty(),\n    });\n\n    if (propertyByExternalId) {\n      const { _id: propertyId } = propertyByExternalId;\n      return withMeteorUserId({ userId, impersonateUser }, () => {\n        let impersonateUserId;\n        let displayProperty = true;\n        if (impersonateUser) {\n          impersonateUserId = getImpersonateUserId({ userId, impersonateUser });\n        }\n\n        try {\n          Security.properties.hasAccessToProperty({\n            propertyId,\n            userId: impersonateUserId || userId,\n          });\n        } catch (error) {\n          displayProperty = false;\n        }\n\n        return {\n          status: HTTP_STATUS_CODES.CONFLICT,\n          message: `A property with externalId \"${externalId}\" already exists !`,\n          ...(displayProperty ? { property: propertyByExternalId } : {}),\n        };\n      });\n    }\n  }\n\n  return withMeteorUserId({ userId, impersonateUser }, () => {\n    let impersonateUserId;\n    if (impersonateUser) {\n      impersonateUserId = getImpersonateUserId({ userId, impersonateUser });\n    }\n    return proPropertyInsert\n      .run({ userId: impersonateUserId || userId, property })\n      .then((propertyId) => {\n        const insertedProperty = PropertyService.fetchOne({\n          $filters: { _id: propertyId },\n          ...apiProperty(),\n        });\n\n        return {\n          message: `Successfully inserted property with id \"${propertyId}\"`,\n          property: insertedProperty,\n        };\n      });\n  });\n};\n\nexport default insertPropertyAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"uploadFile.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/uploadFile.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport SimpleSchema from 'simpl-schema';\n\nimport { PROPERTY_DOCUMENTS } from '../../../files/fileConstants';\nimport FileService from '../../../files/server/FileService';\nimport Security from '../../../security';\nimport PropertyService from '../../../properties/server/PropertyService';\nimport { PROPERTIES_COLLECTION } from '../../../properties/propertyConstants';\nimport { withMeteorUserId } from '../helpers';\nimport {\n  checkQuery,\n  impersonateSchema,\n  getImpersonateUserId,\n} from './helpers';\nimport { HTTP_STATUS_CODES } from '../restApiConstants';\n\nconst bodySchema = new SimpleSchema({\n  propertyId: String,\n  category: {\n    type: String,\n    allowedValues: [...Object.values(PROPERTY_DOCUMENTS)],\n    custom() {\n      if (this.field('propertyId')) {\n        return Object.values(PROPERTY_DOCUMENTS).includes(this.value)\n          ? undefined\n          : 'invalidCategory';\n      }\n    },\n  },\n});\n\nconst uploadFileAPI = (req) => {\n  const {\n    files: { file } = {},\n    user: { _id: userId },\n    query,\n    body,\n  } = req;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: impersonateSchema,\n  });\n\n  const cleanBody = bodySchema.clean(body);\n  try {\n    bodySchema.validate(cleanBody);\n  } catch (error) {\n    throw new Meteor.Error(error);\n  }\n\n  const { category } = cleanBody;\n  let { propertyId } = cleanBody;\n\n  const exists = PropertyService.exists(propertyId);\n\n  if (!exists) {\n    const propertyByExternalId = PropertyService.fetchOne({\n      $filters: { externalId: propertyId },\n    });\n    if (propertyByExternalId) {\n      propertyId = propertyByExternalId._id;\n    } else {\n      throw new Meteor.Error(\n        HTTP_STATUS_CODES.NOT_FOUND,\n        `No property found for id \"${propertyId}\"`,\n      );\n    }\n  }\n\n  if (!file) {\n    throw new Meteor.Error('No file uploaded');\n  }\n  return withMeteorUserId({ userId, impersonateUser }, () => {\n    let impersonateUserId;\n    if (impersonateUser) {\n      impersonateUserId = getImpersonateUserId({ userId, impersonateUser });\n    }\n\n    try {\n      Security.properties.isAllowedToManageDocuments({\n        userId: impersonateUserId || userId,\n        propertyId,\n      });\n    } catch (error) {\n      throw new Meteor.Error(HTTP_STATUS_CODES.FORBIDDEN, error);\n    }\n\n    return FileService.uploadFileAPI({\n      file,\n      docId: propertyId,\n      id: category,\n      collection: PROPERTIES_COLLECTION,\n    });\n  });\n};\n\nexport default uploadFileAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deleteFile.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/deleteFile.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport SimpleSchema from 'simpl-schema';\n\nimport FileService from '../../../files/server/FileService';\nimport Security from '../../../security';\nimport PropertyService from '../../../properties/server/PropertyService';\nimport { PROPERTIES_COLLECTION } from '../../../properties/propertyConstants';\nimport { withMeteorUserId } from '../helpers';\nimport {\n  checkQuery,\n  impersonateSchema,\n  getImpersonateUserId,\n} from './helpers';\nimport { HTTP_STATUS_CODES } from '../restApiConstants';\n\nconst bodySchema = new SimpleSchema({\n  propertyId: String,\n  key: String,\n});\n\nconst deleteFileAPI = (req) => {\n  const {\n    user: { _id: userId },\n    query,\n    body,\n  } = req;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: impersonateSchema,\n  });\n\n  const cleanBody = bodySchema.clean(body);\n  try {\n    bodySchema.validate(cleanBody);\n  } catch (error) {\n    throw new Meteor.Error(error);\n  }\n\n  const { key } = cleanBody;\n  let { propertyId } = cleanBody;\n\n  const exists = PropertyService.exists(propertyId);\n\n  if (!exists) {\n    const propertyByExternalId = PropertyService.fetchOne({\n      $filters: { externalId: propertyId },\n    });\n    if (propertyByExternalId) {\n      propertyId = propertyByExternalId._id;\n    } else {\n      throw new Meteor.Error(\n        HTTP_STATUS_CODES.NOT_FOUND,\n        `No property found for id \"${propertyId}\"`,\n      );\n    }\n  }\n\n  return withMeteorUserId({ userId, impersonateUser }, () => {\n    let impersonateUserId;\n    if (impersonateUser) {\n      impersonateUserId = getImpersonateUserId({ userId, impersonateUser });\n    }\n\n    try {\n      Security.properties.isAllowedToManageDocuments({\n        userId: impersonateUserId || userId,\n        propertyId,\n      });\n    } catch (error) {\n      throw new Meteor.Error(HTTP_STATUS_CODES.FORBIDDEN, error);\n    }\n\n    return FileService.deleteFileAPI({\n      docId: propertyId,\n      key,\n      collection: PROPERTIES_COLLECTION,\n    });\n    // return deleteFileFromS3({\n    //   docId: propertyId,\n    //   key,\n    //   collection: PROPERTIES_COLLECTION,\n    // }).then(deleted => ({ deletedFiles: deleted }));\n  });\n};\n\nexport default deleteFileAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getProperty.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/RESTAPI/server/endpoints/getProperty.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport omit from 'lodash/omit';\nimport SimpleSchema from 'simpl-schema';\n\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport { Meteor } from 'meteor/meteor';\nimport { getImpersonateUserId, checkQuery } from './helpers';\nimport { proProperties } from '../../../properties/queries';\nimport { HTTP_STATUS_CODES } from '../restApiConstants';\n\nconst querySchema = new SimpleSchema({\n  'impersonate-user': { type: String, optional: true },\n});\n\nconst getPropertyAPI = ({ user: { _id: userId }, params, query }) => {\n  let { propertyId } = params;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: querySchema,\n  });\n\n  const exists = PropertyService.exists(propertyId);\n\n  if (!exists) {\n    const propertyByExternalId = PropertyService.fetchOne({\n      $filters: { externalId: propertyId },\n    });\n    if (propertyByExternalId) {\n      propertyId = propertyByExternalId._id;\n    } else {\n      throw new Meteor.Error(\n        HTTP_STATUS_CODES.NOT_FOUND,\n        `No property found for id \"${propertyId}\"`,\n      );\n    }\n  }\n\n  let proId;\n  if (impersonateUser) {\n    proId = getImpersonateUserId({ userId, impersonateUser });\n  }\n\n  const [property] = proProperties\n    .clone({ _id: propertyId })\n    .fetch({ userId: proId || userId });\n\n  const filteredProperty = omit(property, [\n    'adminValidation',\n    'additionalDocuments',\n    'promotion',\n    'users',\n    'organisation',\n  ]);\n\n  return { property: filteredProperty };\n};\n\nexport default getPropertyAPI;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"errors\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/errors/index.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const ERROR_CODES = {\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n};\n\nexport const LOT_ERRORS = {\n  PROMOTION_LOT_BOOKED_OR_SOLD: 'PROMOTION_LOT_BOOKED_OR_SOLD',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"activities\":{\"server\":{\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/server/methods.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport SecurityService from '../../security';\nimport {\n  activityInsert,\n  activityUpdate,\n  activityRemove,\n} from '../methodDefinitions';\nimport ActivityService from './ActivityService';\nimport { ACTIVITY_TYPES } from '../activityConstants';\n\nconst allowModification = (activityId) => {\n  const { type } = ActivityService.fetchOne({\n    $filters: { _id: activityId },\n    type: 1,\n  });\n\n  return type !== ACTIVITY_TYPES.SERVER;\n};\n\nactivityInsert.setHandler(({ userId }, { object }) => {\n  SecurityService.checkUserIsAdmin(userId);\n  return ActivityService.insert(object);\n});\n\nactivityUpdate.setHandler(({ userId }, { activityId, object }) => {\n  SecurityService.checkUserIsAdmin(userId);\n  if (!allowModification(activityId)) {\n    throw new Meteor.Error(\"Peut pas changer l'activité générée automatiquement\");\n  }\n  return ActivityService._update({ id: activityId, object });\n});\n\nactivityRemove.setHandler(({ userId }, { activityId }) => {\n  SecurityService.checkUserIsAdmin(userId);\n  if (!allowModification(activityId)) {\n    throw new Meteor.Error(\"Peut pas changer l'activité générée automatiquement\");\n  }\n  return ActivityService.remove(activityId);\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ActivityService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/server/ActivityService.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport CollectionService from '../../helpers/CollectionService';\nimport Activities from '../activities';\nimport { ACTIVITY_TYPES, ACTIVITY_SECONDARY_TYPES } from '../activityConstants';\n\nclass ActivityService extends CollectionService {\n  constructor() {\n    super(Activities);\n  }\n\n  addServerActivity(activity) {\n    return this.insert({ ...activity, type: ACTIVITY_TYPES.SERVER });\n  }\n\n  addCreatedAtActivity({ createdAt, ...rest }) {\n    return this.addServerActivity({\n      secondaryType: ACTIVITY_SECONDARY_TYPES.CREATED,\n      date: createdAt,\n      ...rest,\n    });\n  }\n}\n\nexport default new ActivityService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"activityListeners.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/server/activityListeners.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport ServerEventService from '../../events/server/ServerEventService';\nimport { removeLoanFromPromotion } from '../../methods';\nimport { ACTIVITY_SECONDARY_TYPES } from '../activityConstants';\nimport UserService from '../../users/server/UserService';\nimport PromotionService from '../../promotions/server/PromotionService';\nimport ActivityService from './ActivityService';\n\nServerEventService.addAfterMethodListener(\n  removeLoanFromPromotion,\n  ({ params: { loanId, promotionId }, context: { userId } }) => {\n    const { name } = PromotionService.fetchOne({\n      $filters: { _id: promotionId },\n      name: 1,\n    });\n    const { name: userName } = UserService.fetchOne({\n      $filters: { _id: userId },\n      name: 1,\n    }) || {};\n\n    ActivityService.addServerActivity({\n      secondaryType: ACTIVITY_SECONDARY_TYPES.REMOVE_LOAN_FROM_PROMOTION,\n      loanLink: { _id: loanId },\n      title: `Enlevé de la promotion \"${name}\"`,\n      description: userName ? `Par ${userName}` : '',\n      createdBy: userId,\n    });\n  },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/server/hooks.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Activities from '../activities';\nimport NotificationService from '../../notifications/server/NotificationService';\n\nActivities.after.update(\n  function (userId, doc, fieldNames) {\n    if (fieldNames.includes('date')) {\n      const { date: newDate } = doc;\n      const { date: oldDate } = this.previous;\n\n      if ((newDate && newDate.getTime()) !== (oldDate && oldDate.getTime())) {\n        NotificationService.remove({ 'activityLink._id': doc._id });\n      }\n    }\n  },\n  { fetchPrevious: true },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/server/exposures.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { adminActivities } from '../queries';\n\nexposeQuery({\n  query: adminActivities,\n  overrides: {\n    embody: (body) => {\n      body.$filter = ({ filters, params: { _id, loanId, type } }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (loanId) {\n          filters['loanLink._id'] = loanId;\n        }\n\n        if (type) {\n          filters.type = type;\n        }\n      };\n    },\n    validateParams: {\n      _id: Match.Maybe(String),\n      loanId: Match.Maybe(String),\n      type: Match.Maybe(Match.OneOf(Object, String)),\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/methodDefinitions.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Method } from '../methods/methods';\n\nexport const activityInsert = new Method({\n  name: 'activityInsert',\n  params: { object: Object },\n});\n\nexport const activityUpdate = new Method({\n  name: 'activityUpdate',\n  params: { activityId: String, object: Object },\n});\n\nexport const activityRemove = new Method({\n  name: 'activityRemove',\n  params: { activityId: String },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"activities.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/activities.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport { createdAt, updatedAt } from '../helpers/sharedSchemas';\nimport {\n  ACTIVITY_TYPES,\n  ACTIVITY_SECONDARY_TYPES,\n  ACTIVITIES_COLLECTION,\n} from './activityConstants';\n\nconst Activities = new Mongo.Collection(ACTIVITIES_COLLECTION);\n\nconst ActivitySchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  createdBy: {\n    type: String,\n    optional: true,\n    autoValue() {\n      if (this.isInsert) {\n        return this.value || this.userId;\n      }\n      this.unset();\n    },\n  },\n  title: String,\n  description: { type: String, optional: true },\n  type: { type: String, allowedValues: Object.values(ACTIVITY_TYPES) },\n  secondaryType: {\n    type: String,\n    optional: true,\n    allowedValues: Object.values(ACTIVITY_SECONDARY_TYPES),\n  },\n  date: {\n    type: Date,\n    autoValue() {\n      if (this.isInsert) {\n        return this.value || new Date();\n      }\n    },\n  },\n  loanLink: { type: Object, optional: true },\n  'loanLink._id': { type: String, optional: true },\n  shouldNotify: { type: Boolean, optional: true },\n});\n\nActivities.attachSchema(ActivitySchema);\n\nexport default Activities;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"activityConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/activityConstants.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const ACTIVITIES_COLLECTION = 'activities';\n\nexport const ACTIVITY_QUERIES = {\n  ADMIN_ACTIVITIES: 'ADMIN_ACTIVITIES',\n};\n\nexport const ACTIVITY_TYPES = {\n  EMAIL: 'EMAIL',\n  EVENT: 'EVENT',\n  PHONE: 'PHONE',\n  SERVER: 'SERVER',\n  OTHER: 'OTHER',\n};\n\nexport const ACTIVITY_SECONDARY_TYPES = {\n  CREATED: 'CREATED',\n  REMOVE_LOAN_FROM_PROMOTION: 'REMOVE_LOAN_FROM_PROMOTION',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/index.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './activities';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/links.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Notifications from '../notifications';\nimport Loans from '../loans';\nimport Activities from './activities';\n\nActivities.addLinks({\n  notifications: {\n    collection: Notifications,\n    inversedBy: 'activity',\n    autoremove: true,\n  },\n  loan: {\n    collection: Loans,\n    field: 'loanLink',\n    metadata: true,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/activities/queries.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Activities from './activities';\nimport { ACTIVITY_QUERIES } from './activityConstants';\nimport { activity } from '../fragments';\n\nexport const adminActivities = Activities.createQuery(\n  ACTIVITY_QUERIES.ADMIN_ACTIVITIES,\n  { ...activity(), $options: { sort: { date: 1 } } },\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"notifications\":{\"server\":{\"methods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/server/methods.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport SecurityService from '../../security';\nimport {\n  readNotification,\n  snoozeNotification,\n  unreadNotification,\n  generateAllNotifications,\n} from '../methodDefinitions';\nimport NotificationService from './NotificationService';\n\nreadNotification.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  NotificationService.readNotification({ ...params, userId });\n});\n\nsnoozeNotification.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  NotificationService.snoozeNotification({ ...params, userId });\n});\n\nunreadNotification.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsAdmin(userId);\n  NotificationService.unreadNotification({ ...params, userId });\n});\n\ngenerateAllNotifications.setHandler(({ userId }) => {\n  SecurityService.checkUserIsDev(userId);\n  NotificationService.addTaskNotifications();\n  NotificationService.addActivityNotifications();\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"NotificationService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/server/NotificationService.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport TaskService from '../../tasks/server/TaskService';\nimport { TASK_STATUS } from '../../tasks/taskConstants';\nimport ActivityService from '../../activities/server/ActivityService';\nimport UserService from '../../users/server/UserService';\nimport { ROLES } from '../../users/userConstants';\nimport CollectionService from '../../helpers/CollectionService';\nimport RevenueService from '../../revenues/server/RevenueService';\nimport Notifications from '../notifications';\n\nclass NotificationService extends CollectionService {\n  constructor() {\n    super(Notifications);\n  }\n\n  readNotification({ userId, notificationId }) {\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: { read: true },\n    });\n  }\n\n  snoozeNotification({ userId, notificationId }) {\n    const inOneHour = new Date();\n    inOneHour.setHours(inOneHour.getHours() + 1);\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: { snoozeDate: inOneHour },\n    });\n  }\n\n  unreadNotification({ userId, notificationId }) {\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: { read: false },\n    });\n  }\n\n  readNotificationAll({ filters }) {\n    const notification = this.fetchOne({\n      $filters: filters,\n      recipientLinks: 1,\n    });\n\n    if (notification) {\n      const { _id: notificationId, recipientLinks } = notification;\n      this._update({\n        id: notificationId,\n        object: {\n          recipientLinks: recipientLinks.map(recipientLink => ({\n            ...recipientLink,\n            read: true,\n          })),\n        },\n      });\n    }\n  }\n\n  addTaskNotifications() {\n    const tasks = TaskService.fetch({\n      $filters: {\n        status: TASK_STATUS.ACTIVE,\n        dueAt: { $lte: new Date() },\n      },\n      _id: 1,\n      assigneeLink: 1,\n    });\n\n    const admins = UserService.fetch({ $filters: { roles: ROLES.ADMIN } });\n    tasks.forEach(({ _id: taskId, assigneeLink = {} }) => {\n      const existingNotification = this.fetchOne({\n        $filters: { 'taskLink._id': taskId },\n      });\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: this.getNotificationRecipient(\n            assigneeLink._id,\n            admins,\n          ),\n          taskLink: { _id: taskId },\n        });\n      }\n    });\n  }\n\n  addActivityNotifications() {\n    const now = new Date();\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 2);\n    const activities = ActivityService.fetch({\n      $filters: {\n        shouldNotify: true,\n        date: { $gte: yesterday, $lte: now },\n      },\n      _id: 1,\n      createdBy: 1,\n      loan: { userCache: 1 },\n    });\n\n    activities.forEach(({ _id: activityId, createdBy = {}, loan }) => {\n      const existingNotification = this.fetchOne({\n        $filters: { 'activityLink._id': activityId },\n      });\n\n      const recipients = [{ _id: createdBy }];\n\n      if (loan && loan.userCache && loan.userCache.assignedEmployeeCache) {\n        recipients.push({ _id: loan.userCache.assignedEmployeeCache._id });\n      }\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: [{ _id: createdBy }],\n          activityLink: { _id: activityId },\n        });\n      }\n    });\n  }\n\n  addRevenueNotifications() {\n    const now = new Date();\n    const revenues = RevenueService.fetch({\n      $filters: { expectedAt: { $lte: now }, paidAt: { $exists: false } },\n      loan: { userCache: 1 },\n    });\n\n    const admins = UserService.fetch({ $filters: { roles: ROLES.ADMIN } });\n    revenues.forEach(({ _id: revenueId, loan }) => {\n      const existingNotification = this.fetchOne({\n        $filters: { 'revenueLink._id': revenueId },\n      });\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: this.getNotificationRecipient(\n            loan.userCache\n              && loan.userCache.assignedEmployeeCache\n              && loan.userCache.assignedEmployeeCache._id,\n            admins,\n          ),\n          revenueLink: { _id: revenueId },\n        });\n      }\n    });\n  }\n\n  getNotificationRecipient(assignee, admins) {\n    if (assignee) {\n      return [{ _id: assignee }];\n    }\n    return admins.map(({ _id }) => ({ _id }));\n  }\n}\n\nexport default new NotificationService();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notificationListeners.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/server/notificationListeners.js                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport ServerEventService from '../../events/server/ServerEventService';\nimport { taskComplete } from '../../tasks/methodDefinitions';\nimport NotificationService from './NotificationService';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/server/exposures.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { adminNotifications } from '../queries';\n\nexposeQuery({\n  query: adminNotifications,\n  overrides: {\n    embody: (body) => {\n      body.$filter = ({\n        filters,\n        params: { _userId, userId, read, unread },\n      }) => {\n        if (!read && !unread) {\n          throw new Meteor.Error('You have to provide either read or unread');\n        }\n\n        if (unread) {\n          filters.recipientLinks = {\n            $elemMatch: {\n              _id: _userId || userId,\n              read: false,\n              $or: [\n                { snoozeDate: { $exists: false } },\n                { snoozeDate: { $lte: new Date() } },\n              ],\n            },\n          };\n        }\n\n        if (read) {\n          filters.recipientLinks = {\n            $elemMatch: { _id: userId || _userId, read: true },\n          };\n        }\n      };\n    },\n    validateParams: {\n      userId: Match.Maybe(String),\n      read: Match.Maybe(Boolean),\n      unread: Match.Maybe(Boolean),\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notificationGeneratorCron.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/server/notificationGeneratorCron.js                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { SyncedCron } from 'meteor/littledata:synced-cron';\n\nimport SlackService from '../../slack/server/SlackService';\nimport NotificationService from './NotificationService';\n\nSyncedCron.add({\n  name: 'Generate notifications',\n  schedule(parser) {\n    return parser.text('every 1 minute');\n  },\n  job() {\n    try {\n      NotificationService.addTaskNotifications();\n      NotificationService.addActivityNotifications();\n      NotificationService.addRevenueNotifications();\n    } catch (error) {\n      SlackService.sendError({\n        error,\n        additionalData: ['Notification generation error'],\n      });\n    }\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"methodDefinitions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/methodDefinitions.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Method } from '../methods/methods';\n\nexport const snoozeNotification = new Method({\n  name: 'snoozeNotification',\n  params: { notificationId: String },\n});\n\nexport const readNotification = new Method({\n  name: 'readNotification',\n  params: { notificationId: String },\n});\n\nexport const unreadNotification = new Method({\n  name: 'unreadNotification',\n  params: { notificationId: String },\n});\n\nexport const generateAllNotifications = new Method({\n  name: 'generateAllNotifications',\n  params: {  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notifications.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/notifications.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport { createdAt, updatedAt } from '../helpers/sharedSchemas';\nimport { NOTIFICATIONS_COLLECTION } from './notificationConstants';\n\nconst Notifications = new Mongo.Collection(NOTIFICATIONS_COLLECTION);\nconst NotificationSchema = new SimpleSchema({\n  createdAt,\n  updatedAt,\n  recipientLinks: { type: Array, minCount: 1 },\n  'recipientLinks.$': Object,\n  'recipientLinks.$._id': String,\n  'recipientLinks.$.read': { type: Boolean, defaultValue: false },\n  'recipientLinks.$.readDate': { type: Date, optional: true },\n  'recipientLinks.$.snoozeDate': { type: Date, optional: true },\n  taskLink: { type: Object, optional: true },\n  'taskLink._id': String,\n  activityLink: { type: Object, optional: true },\n  'activityLink._id': String,\n  revenueLink: { type: Object, optional: true },\n  'revenueLink._id': String,\n});\n\nNotifications.attachSchema(NotificationSchema);\n\nexport default Notifications;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notificationConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/notificationConstants.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const NOTIFICATIONS_COLLECTION = 'notifications';\n\nexport const NOTIFICATION_QUERIES = {\n  ADMIN_NOTIFICATIONS: 'ADMIN_NOTIFICATIONS',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/index.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './notifications';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"links.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/links.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Notifications from './notifications';\nimport Users from '../users';\nimport Activities from '../activities';\nimport Tasks from '../tasks';\nimport Revenues from '../revenues';\n\nNotifications.addLinks({\n  recipients: {\n    collection: Users,\n    field: 'recipientLinks',\n    type: 'many',\n    metadata: true,\n  },\n  activity: {\n    collection: Activities,\n    field: 'activityLink',\n    type: 'one',\n    metadata: true,\n  },\n  task: {\n    collection: Tasks,\n    field: 'taskLink',\n    type: 'one',\n    metadata: true,\n  },\n  revenue: {\n    collection: Revenues,\n    field: 'revenueLink',\n    type: 'one',\n    metadata: true,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/reducers.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Notifications from './notifications';\nimport { LOANS_COLLECTION } from '../loans/loanConstants';\n\nNotifications.addReducers({\n  relatedDoc: {\n    body: {\n      activity: { loan: { name: 1 } },\n      task: { loan: { name: 1 } },\n      revenue: { loan: { name: 1 } },\n    },\n    reduce: ({ activity, task, revenue }) => {\n      if (activity) {\n        if (activity.loan) {\n          return { ...activity.loan, collection: LOANS_COLLECTION };\n        }\n      }\n      if (task) {\n        if (task.loan) {\n          return { ...task.loan, collection: LOANS_COLLECTION };\n        }\n      }\n      if (revenue) {\n        if (revenue.loan) {\n          return { ...revenue.loan, collection: LOANS_COLLECTION };\n        }\n      }\n    },\n  },\n  title: {\n    body: {\n      task: { title: 1, dueAt: 1 },\n      activity: { title: 1, date: 1 },\n      revenue: { type: 1, description: 1 },\n    },\n    reduce: ({ task, activity, revenue }) => {\n      let title;\n      if (task) {\n        title = task.title;\n      } else if (activity) {\n        title = activity.title;\n      } else if (revenue) {\n        title = `Paiement \"${revenue.type}\" attendu`;\n      } else {\n        title = \"L'orgine de la notification a été supprimée\";\n      }\n\n      return title;\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/notifications/queries.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Notifications from './notifications';\nimport { NOTIFICATION_QUERIES } from './notificationConstants';\nimport { notification } from '../fragments';\n\nexport const adminNotifications = Notifications.createQuery(\n  NOTIFICATION_QUERIES.ADMIN_NOTIFICATIONS,\n  notification(),\n);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"factories\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/factories/index.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport './factories';\n\nexport { default } from './factoriesHelpers';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"factories.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/factories/factories.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Factory } from 'meteor/dburles:factory';\nimport faker from 'faker';\n\nimport {\n  LOT_TYPES,\n  ORGANISATION_TYPES,\n  PROMOTION_TYPES,\n  REVENUE_TYPES,\n  ROLES,\n  STEPS,\n  TASK_STATUS,\n  DEFAULT_VALUE_FOR_ALL,\n  DEFAULT_MAIN_RESIDENCE_RULES,\n  DEFAULT_SECONDARY_RESIDENCE_RULES,\n} from '../constants';\nimport {\n  Borrowers,\n  Contacts,\n  InterestRates,\n  LenderRules,\n  Lenders,\n  Loans,\n  Lots,\n  MortgageNotes,\n  Offers,\n  Organisations,\n  PromotionLots,\n  PromotionOptions,\n  Promotions,\n  Properties,\n  Revenues,\n  Tasks,\n  Users,\n} from '..';\nimport {\n  PROPERTY_CATEGORY,\n  RESIDENCE_TYPE,\n} from '../properties/propertyConstants';\nimport Notifications from '../notifications/index';\nimport Activities from '../activities/index';\nimport { LOAN_CATEGORIES } from '../loans/loanConstants';\n\nconst TEST_LASTNAME = 'TestLastName';\nconst TEST_FIRSTNAME = 'TestFirstName';\nconst TEST_PHONE = '0123456789';\n\nconst getRandomLoanName = () => `19-0${Math.floor(Math.random() * 899 + 100)}`;\n\nFactory.define('user', Users, {\n  roles: [ROLES.USER],\n  emails: () => [{ address: faker.internet.email(), verified: false }],\n  lastName: TEST_LASTNAME,\n  firstName: TEST_FIRSTNAME,\n  phoneNumbers: [TEST_PHONE],\n});\n\nFactory.define('dev', Users, {\n  roles: [ROLES.DEV],\n  emails: () => [{ address: faker.internet.email(), verified: false }],\n  lastName: TEST_LASTNAME,\n  firstName: TEST_FIRSTNAME,\n  phoneNumbers: [TEST_PHONE],\n});\n\nFactory.define('admin', Users, {\n  roles: [ROLES.ADMIN],\n  emails: () => [{ address: faker.internet.email(), verified: false }],\n  lastName: TEST_LASTNAME,\n  firstName: TEST_FIRSTNAME,\n  phoneNumbers: [TEST_PHONE],\n});\n\nFactory.define('adminEpotek', Users, {\n  roles: [ROLES.ADMIN],\n  emails: () => [{ address: 'dev@e-potek.ch', verified: true }],\n  lastName: 'e-Potek',\n  firstName: 'Dev',\n  phoneNumbers: [TEST_PHONE],\n});\n\nFactory.define('pro', Users, {\n  roles: [ROLES.PRO],\n  emails: () => [{ address: faker.internet.email(), verified: false }],\n  lastName: TEST_LASTNAME,\n  firstName: TEST_FIRSTNAME,\n  phoneNumbers: [TEST_PHONE],\n});\n\nFactory.define('borrower', Borrowers);\n\nFactory.define('task', Tasks, {\n  createdAt: () => new Date(),\n  status: TASK_STATUS.ACTIVE,\n});\n\nFactory.define('loan', Loans, {\n  createdAt: () => new Date(),\n  borrowerIds: [],\n  documents: () => ({}),\n  step: STEPS.SOLVENCY,\n  name: () => {\n    // there is a 1/900% chance that 2 loan names collide,\n    // make sure it never happens instead\n    while (true) {\n      const name = getRandomLoanName();\n\n      if (!Loans.findOne({ name })) {\n        return name;\n      }\n    }\n  },\n  emails: () => [],\n  propertyIds: [],\n  category: LOAN_CATEGORIES.RETAIL,\n  residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n});\n\nFactory.define('property', Properties, {\n  value: 1000000,\n  category: PROPERTY_CATEGORY.USER,\n});\n\nFactory.define('offer', Offers, {\n  userId: () => faker.random.uuid(),\n  createdAt: () => new Date(),\n  canton: 'GE',\n  conditions: ['Do something'],\n  maxAmount: 800000,\n  amortizationGoal: 0.65,\n});\n\nFactory.define('promotion', Promotions, {\n  name: 'Test promotion',\n  type: PROMOTION_TYPES.CREDIT,\n});\n\nFactory.define('promotionOption', PromotionOptions, {});\nFactory.define('promotionLot', PromotionLots, {});\n\nFactory.define('lot', Lots, {\n  name: 'test',\n  type: LOT_TYPES.PARKING_CAR,\n  value: 1000,\n});\n\nFactory.define('task', Tasks, {});\n\nFactory.define('mortgageNote', MortgageNotes, {\n  value: 100000,\n  canton: 'GE',\n});\n\nFactory.define('organisation', Organisations, {\n  name: () => {\n    // Make sure organisation names don't collide\n    while (true) {\n      const name = faker.company.companyName();\n\n      if (!Organisations.findOne({ name })) {\n        return name;\n      }\n    }\n  },\n  type: ORGANISATION_TYPES.BANK,\n});\n\nFactory.define('lender', Lenders, {});\n\nFactory.define('interestRates', InterestRates, {});\n\nFactory.define('contact', Contacts, {\n  firstName: 'John',\n  lastName: 'Doe',\n});\n\nFactory.define('lenderRules', LenderRules, {\n  filter: { and: [] },\n  order: 0,\n});\n\nFactory.define('revenues', Revenues, {\n  amount: 1000,\n  type: REVENUE_TYPES.MORTGAGE,\n});\n\nFactory.define('lenderRulesAll', LenderRules, {\n  ...DEFAULT_VALUE_FOR_ALL,\n  order: 0,\n  filter: { and: [true] },\n});\n\nFactory.define('lenderRulesMain', LenderRules, {\n  maxBorrowRatio: 0.8,\n  order: 0,\n  filter: { and: DEFAULT_MAIN_RESIDENCE_RULES },\n});\n\nFactory.define('lenderRulesSecondary', LenderRules, {\n  maxBorrowRatio: 0.7,\n  order: 0,\n  filter: { and: DEFAULT_SECONDARY_RESIDENCE_RULES },\n});\n\nFactory.define('notification', Notifications, {});\n\nFactory.define('activity', Activities, {});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"factoriesHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/factories/factoriesHelpers.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Factory } from 'meteor/dburles:factory';\nimport { Mongo } from 'meteor/mongo';\nimport pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\n\nimport CollectionService from '../helpers/CollectionService';\nimport { COLLECTIONS } from '../constants';\nimport { NOTIFICATIONS_COLLECTION } from '../notifications/notificationConstants';\nimport { ACTIVITIES_COLLECTION } from '../activities/activityConstants';\n\nconst getSingularFactoryName = (collection) => {\n  switch (collection) {\n  case COLLECTIONS.LOANS_COLLECTION:\n    return 'loan';\n  case COLLECTIONS.BORROWERS_COLLECTION:\n    return 'borrower';\n  case COLLECTIONS.PROPERTIES_COLLECTION:\n    return 'property';\n  case COLLECTIONS.USERS_COLLECTION:\n    return 'user';\n  case COLLECTIONS.TASKS_COLLECTION:\n    return 'task';\n  case COLLECTIONS.OFFERS_COLLECTION:\n    return 'offer';\n  case COLLECTIONS.PROMOTIONS_COLLECTION:\n    return 'promotion';\n  case COLLECTIONS.PROMOTION_OPTIONS_COLLECTION:\n    return 'promotionOption';\n  case COLLECTIONS.PROMOTION_LOTS_COLLECTION:\n    return 'promotionLot';\n  case COLLECTIONS.LOTS_COLLECTION:\n    return 'lot';\n  case COLLECTIONS.MORTGAGE_NOTES_COLLECTION:\n    return 'mortgageNote';\n  case COLLECTIONS.ORGANISATIONS_COLLECTION:\n    return 'organisation';\n  case COLLECTIONS.LENDERS_COLLECTION:\n    return 'lender';\n  case COLLECTIONS.CONTACTS_COLLECTION:\n    return 'contact';\n  case NOTIFICATIONS_COLLECTION:\n    return 'notification';\n  case ACTIVITIES_COLLECTION:\n    return 'activity';\n  default:\n    throw new Error(`No singular factory name found for ${collection}, add it in the generator`);\n  }\n};\n\nconst arrayify = maybeArray =>\n  (Array.isArray(maybeArray) ? maybeArray : [maybeArray]);\n\nconst findCollectionNameByLinkName = ({ collection, linkName }) =>\n  Mongo.Collection.get(collection).__links[linkName].linkConfig.collection\n    ._name;\n\nconst findLinkKeys = ({ collection }) => {\n  const { __links: linkNames = {} } = Mongo.Collection.get(collection);\n  const links = Object.keys(linkNames);\n  return links;\n};\n\nconst insertDoc = ({ doc, collection, useFactories, factory }) => {\n  let docExists = false;\n\n  if (doc._id) {\n    docExists = !!Mongo.Collection.get(collection).findOne(doc._id);\n  }\n\n  if (docExists) {\n    return doc;\n  }\n\n  if (useFactories && factory !== null) {\n    if (factory) {\n      return Factory.create(factory, doc);\n    }\n\n    try {\n      return Factory.create(collection, doc);\n    } catch (error) {\n      if (\n        error.message\n        && error.message === `Factory: There is no factory named ${collection}`\n      ) {\n        return Factory.create(getSingularFactoryName(collection), doc);\n      }\n      throw error;\n    }\n  }\n\n  const _id = Mongo.Collection.get(collection).insert(doc);\n  return Mongo.Collection.get(collection).findOne(_id);\n};\n\nconst generator = (scenario, { useFactories = true } = {}) => {\n  const ids = {};\n  const docs = {};\n  const docsById = {};\n\n  const pushId = ({ id, collection }) => {\n    ids[collection] = ids[collection] ? [...ids[collection], id] : [id];\n    ids[collection] = uniq(ids[collection]);\n  };\n\n  const pushDoc = ({ doc, collection }) => {\n    docs[collection] = docs[collection] ? [...docs[collection], doc] : [doc];\n    docs[collection] = uniqBy(docs[collection], '_id');\n\n    docsById[collection] = docsById[collection]\n      ? { ...docsById[collection], [doc._id]: doc }\n      : { [doc._id]: doc };\n  };\n\n  const createNestedObject = ({ doc, collection }) => {\n    const linkKeys = findLinkKeys({ doc, collection });\n\n    const docToInsert = omit(doc, [...linkKeys, '_factory', '$metadata']);\n\n    const insertedDoc = insertDoc({\n      collection,\n      doc: docToInsert,\n      useFactories,\n      factory: doc._factory,\n    });\n    const { _id: id } = insertedDoc;\n    pushId({ id, collection });\n    pushDoc({ doc: insertedDoc, collection });\n\n    const linksToInsert = pick(doc, linkKeys);\n\n    Object.keys(linksToInsert).forEach((linkName) => {\n      const linkCollection = findCollectionNameByLinkName({\n        collection,\n        linkName,\n      });\n      const linkedDocs = arrayify(linksToInsert[linkName]);\n      linkedDocs.forEach((linkedDoc) => {\n        const linkId = createNestedObject({\n          doc: linkedDoc,\n          collection: linkCollection,\n          parentId: id,\n        });\n        const collectionService = new CollectionService(Mongo.Collection.get(collection));\n        collectionService.addLink({\n          id,\n          linkName,\n          linkId,\n          metadata: linkedDoc.$metadata,\n        });\n      });\n    });\n\n    return id;\n  };\n\n  Object.keys(scenario).forEach((collection) => {\n    const docsInCollection = arrayify(scenario[collection]);\n    docsInCollection.forEach(doc => createNestedObject({ doc, collection }));\n  });\n\n  return { ids, docs, docsById };\n};\n\nexport default generator;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"migrations\":{\"server\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/index.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport './1';\nimport './2';\nimport './3';\nimport './4';\nimport './5';\nimport './6';\nimport './7';\nimport './8';\nimport './9';\nimport './10';\nimport './11';\nimport './12';\nimport './13';\nimport './14';\nimport './15';\nimport './16';\nimport './17';\nimport './18';\nimport './19';\n\n// To migrate to a specific version\n// Migrations.migrateTo(2);\n// To redo a migration\n// Migrations.migrateTo(`3,rerun`);\nexport const migrate = () => {\n  Migrations.migrateTo('latest');\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"1.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/1.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Properties } from '../..';\nimport { PROPERTY_CATEGORY } from '../../properties/propertyConstants';\n\nexport const up = () => {\n  Properties.update(\n    {},\n    { $set: { category: PROPERTY_CATEGORY.USER } },\n    { multi: true },\n  );\n};\n\nexport const down = () => {\n  Properties.update({}, { $unset: { category: true } }, { multi: true });\n};\n\nMigrations.add({\n  version: 1,\n  name: 'Add property category',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"2.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/2.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Loans } from '../..';\n\nexport const up = () => {\n  Loans.update({}, { $set: { additionalDocuments: [] } }, { multi: true });\n};\n\nexport const down = () => {\n  Loans.update({}, { $unset: { additionalDocuments: true } }, { multi: true });\n};\n\nMigrations.add({\n  version: 2,\n  name: 'Add additional documents to loans',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"3.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/3.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Loans } from '../..';\n\nexport const up = () => {\n  const allLoans = Loans.find({}).fetch();\n\n  return Promise.all(allLoans.map(({ _id, general }) =>\n    Loans.rawCollection().update(\n      { _id },\n      {\n        $set: {\n          ...general,\n          previousLoanTranches: [],\n        },\n        $unset: { general: true },\n      },\n    )));\n};\n\nexport const down = () => {\n  const allLoans = Loans.find({}).fetch();\n\n  return Promise.all(allLoans.map(({\n    _id,\n    purchaseType,\n    residenceType,\n    canton,\n    currentOwner,\n    futureOwner,\n    otherOwner,\n  }) =>\n    Loans.rawCollection().update(\n      { _id },\n      {\n        $set: {\n          general: {\n            purchaseType,\n            residenceType,\n            canton,\n            currentOwner,\n            futureOwner,\n            otherOwner,\n          },\n        },\n        $unset: {\n          purchaseType: true,\n          residenceType: true,\n          canton: true,\n          currentOwner: true,\n          futureOwner: true,\n          otherOwner: true,\n        },\n      },\n    )));\n};\n\nMigrations.add({\n  version: 3,\n  name: 'Remove general from loans, and add previousLoanTranches',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"4.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/4.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Promotions } from '../..';\n\nexport const PERMISSIONS = {\n  canSellLots: false,\n  canModifyLots: false,\n  canRemoveLots: false,\n  canModifyPromotion: false,\n  canManageDocuments: false,\n  canBookLots: false,\n  canInviteCustomers: false,\n  canAddLots: false,\n  displayCustomerNames: false,\n};\n\nexport const up = () => {\n  const allPromotions = Promotions.find().fetch();\n\n  return Promise.all(allPromotions.map((promotion) => {\n    const { _id, userLinks = [] } = promotion;\n    const newUserLinks = userLinks.map(({ permissions, ...user }) => ({\n      permissions: PERMISSIONS,\n      ...user,\n    }));\n    return Promotions.rawCollection().update(\n      { _id },\n      { $set: { userLinks: newUserLinks } },\n    );\n  }));\n};\n\nexport const down = () => {\n  const allPromotions = Promotions.find().fetch();\n\n  return Promise.all(allPromotions.map((promotion) => {\n    const { _id, userLinks = [] } = promotion;\n    const oldUserLinks = userLinks.map(({ permissions, ...user }) => ({\n      permissions: 'READ',\n      ...user,\n    }));\n    return Promotions.rawCollection().update(\n      { _id },\n      { $set: { userLinks: oldUserLinks } },\n    );\n  }));\n};\n\nMigrations.add({\n  version: 4,\n  name: 'Modify user promotion permissions',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"5.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/5.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Loans } from '../..';\nimport LoanService from '../../loans/server/LoanService';\n\nexport const up = () => {\n  const allLoans = Loans.find().fetch();\n\n  return Promise.all(allLoans.map((loan) => {\n    const { maxSolvency } = loan;\n    if (maxSolvency) {\n      const { canton } = maxSolvency;\n      return LoanService.setMaxPropertyValueWithoutBorrowRatio({\n        loanId: loan._id,\n        canton,\n      }).then(() =>\n        Loans.rawCollection().update(\n          { _id: loan._id },\n          { $unset: { maxSolvency: true } },\n        ));\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nexport const down = () => {\n  const allLoans = Loans.find().fetch();\n\n  return Promise.all(allLoans.map((loan) => {\n    const { maxPropertyValue } = loan;\n    if (maxPropertyValue) {\n      const {\n        main: { max: maxMain },\n        second: { max: maxSecond },\n        canton,\n        date,\n      } = maxPropertyValue;\n\n      // Schema would not be valid if we used LoanService.baseUpdate\n      return Loans.rawCollection().update(\n        { _id: loan._id },\n        {\n          $set: {\n            maxSolvency: {\n              date,\n              canton,\n              main: maxMain,\n              second: maxSecond,\n            },\n          },\n          $unset: { maxPropertyValue: true },\n        },\n      );\n    }\n  }));\n};\n\nMigrations.add({\n  version: 5,\n  name: 'Add lender rules to max solvency',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"6.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/6.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Organisations } from '../..';\n\nexport const up = () => {\n  const allOrganisations = Organisations.find().fetch();\n\n  return Promise.all(allOrganisations.map((organisation) => {\n    const { contactIds = [], userLinks = [] } = organisation;\n    let promises = [];\n\n    if (contactIds.length > 0) {\n      const newContactIds = contactIds.map(({ role, ...contact }) => ({\n        title: role,\n        ...contact,\n      }));\n      promises = [\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { contactIds: newContactIds } },\n        ),\n      ];\n    }\n\n    if (userLinks.length > 0) {\n      const newUserLinks = userLinks.map(({ role, ...user }) => ({\n        title: role,\n        ...user,\n      }));\n\n      promises = [\n        ...promises,\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { userLinks: newUserLinks } },\n        ),\n      ];\n    }\n\n    if (promises.length > 0) {\n      return Promise.all(promises);\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nexport const down = () => {\n  const allOrganisations = Organisations.find().fetch();\n\n  return Promise.all(allOrganisations.map((organisation) => {\n    const { contactIds = [], userLinks = [] } = organisation;\n    let promises = [];\n\n    if (contactIds.length > 0) {\n      const newContactIds = contactIds.map(({ title, ...contact }) => ({\n        role: title,\n        ...contact,\n      }));\n      promises = [\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { contactIds: newContactIds } },\n        ),\n      ];\n    }\n\n    if (userLinks.length > 0) {\n      const newUserLinks = userLinks.map(({ title, ...user }) => ({\n        role: title,\n        ...user,\n      }));\n\n      promises = [\n        ...promises,\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { userLinks: newUserLinks } },\n        ),\n      ];\n    }\n\n    if (promises.length > 0) {\n      return Promise.all(promises);\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nMigrations.add({\n  version: 6,\n  name:\n    'Rename role into title in organisations userLinks and contactIds metadata',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"7.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/7.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Loans } from '../..';\n\nexport const up = () => {\n  const allLoans = Loans.find({}).fetch();\n\n  return Promise.all(allLoans.map(({ _id, logic: { step } }) =>\n    Loans.rawCollection().update(\n      { _id },\n      { $set: { step }, $unset: { logic: true } },\n    )));\n};\n\nexport const down = () => {\n  const allLoans = Loans.find({}).fetch();\n\n  return Promise.all(allLoans.map(({ _id, step }) =>\n    Loans.rawCollection().update(\n      { _id },\n      { $set: { logic: { step } }, $unset: { step: true } },\n    )));\n};\n\nMigrations.add({\n  version: 7,\n  name: 'Remove loan.logic',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"8.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/8.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { APPLICATION_TYPES } from 'core/api/loans/loanConstants';\nimport { Loans } from '../..';\n\nexport const up = () => {\n  const allLoans = Loans.find({}).fetch();\n\n  return Promise.all(allLoans.map(({ _id }) =>\n    Loans.rawCollection().update(\n      { _id },\n      { $set: { applicationType: APPLICATION_TYPES.FULL } },\n    )));\n};\n\nexport const down = () => {\n  const allLoans = Loans.find({}).fetch();\n\n  return Promise.all(allLoans.map(({ _id }) =>\n    Loans.rawCollection().update(\n      { _id },\n      { $unset: { applicationType: true } },\n    )));\n};\n\nMigrations.add({\n  version: 8,\n  name: 'Add applicationType on loans',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"9.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/9.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Meteor } from 'meteor/meteor';\nimport { STEPS } from 'core/api/loans/loanConstants';\nimport { Loans } from '../..';\n\nconst mapStepUp = (step) => {\n  switch (step) {\n  case 'PREPARATION':\n    return STEPS.SOLVENCY;\n  case 'FIND_LENDER':\n    return STEPS.REQUEST;\n  case 'GET_CONTRACT':\n    return STEPS.OFFERS;\n  case 'CLOSING':\n    return STEPS.CLOSING;\n  default:\n    throw new Meteor.Error(`Unknown step ${step}`);\n  }\n};\n\nconst mapStepDown = (step) => {\n  switch (step) {\n  case STEPS.SOLVENCY:\n    return 'PREPARATION';\n  case STEPS.REQUEST:\n    return 'FIND_LENDER';\n  case STEPS.OFFERS:\n    return 'GET_CONTRACT';\n  case STEPS.CLOSING:\n    return 'CLOSING';\n  default:\n    throw new Meteor.Error(`Unknown step ${step}`);\n  }\n};\n\nexport const up = () => {\n  const allLoans = Loans.find({}).fetch();\n\n  return Promise.all(allLoans.map(({ _id, step }) =>\n    Loans.rawCollection().update(\n      { _id },\n      { $set: { step: mapStepUp(step) } },\n    )));\n};\n\nexport const down = () => {\n  const allLoans = Loans.find({}).fetch();\n\n  return Promise.all(allLoans.map(({ _id, step }) =>\n    Loans.rawCollection().update(\n      { _id },\n      { $set: { step: mapStepDown(step) } },\n    )));\n};\n\nMigrations.add({\n  version: 9,\n  name: 'Rename steps',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"10.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/10.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Meteor } from 'meteor/meteor';\nimport { STEPS } from 'core/api/loans/loanConstants';\nimport { Loans } from '../..';\n\nconst mapStepUp = (step) => {\n  switch (step) {\n  case STEPS.SOLVENCY:\n    return STEPS.REQUEST;\n  case STEPS.REQUEST:\n    return STEPS.OFFERS;\n  case STEPS.OFFERS:\n    return STEPS.OFFERS;\n  case STEPS.CLOSING:\n    return STEPS.CLOSING;\n  default:\n    throw new Meteor.Error(`Unknown step ${step}`);\n  }\n};\n\nconst mapStepDown = (step) => {\n  switch (step) {\n  case STEPS.SOLVENCY:\n    return STEPS.SOLVENCY;\n  case STEPS.REQUEST:\n    return STEPS.REQUEST;\n  case STEPS.OFFERS:\n    return STEPS.OFFERS;\n  case STEPS.CLOSING:\n    return STEPS.CLOSING;\n  default:\n    throw new Meteor.Error(`Unknown step ${step}`);\n  }\n};\n\nexport const up = () => {\n  const allLoans = Loans.find({}).fetch();\n\n  return Promise.all(allLoans.map(({ _id, step }) =>\n    Loans.rawCollection().update(\n      { _id },\n      { $set: { step: mapStepUp(step) } },\n    )));\n};\n\nexport const down = () => {\n  const allLoans = Loans.find({}).fetch();\n\n  return Promise.all(allLoans.map(({ _id, step }) =>\n    Loans.rawCollection().update(\n      { _id },\n      { $set: { step: mapStepDown(step) } },\n    )));\n};\n\nMigrations.add({\n  version: 10,\n  name: 'Correct step for current loans',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"11.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/11.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport UserService from '../../users/server/UserService';\n\nexport const up = () => {\n  const allUsers = UserService.fetch({ organisations: { _id: 1 } });\n\n  return Promise.all(allUsers.map(({ _id: userId, organisations = [] }) =>\n    organisations.forEach(({ _id: organisationId, $metadata: metadata }, index) =>\n      UserService.updateLinkMetadata({\n        id: userId,\n        linkName: 'organisations',\n        linkId: organisationId,\n        metadata: { ...metadata, isMain: index === 0 },\n      }))));\n};\n\nexport const down = () => {\n  const allUsers = UserService.fetch({ organisations: { _id: 1 } });\n\n  return Promise.all(allUsers.map(({ _id: userId, organisations = [] }) =>\n    organisations.forEach(({ _id: organisationId, $metadata: metadata }) => {\n      const { isMain, ...restMeta } = metadata;\n      UserService.updateLinkMetadata({\n        id: userId,\n        linkName: 'organisations',\n        linkId: organisationId,\n        metadata: { isMain: undefined, ...restMeta },\n      });\n    })));\n};\n\nMigrations.add({\n  version: 11,\n  name: 'Set first organisation as main',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"12.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/12.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport UserService from '../../users/server/UserService';\n\nexport const up = () => {\n  const allUsers = UserService.fetch({ organisations: { _id: 1 } });\n\n  return Promise.all(allUsers.map(({ _id: userId, organisations = [] }) =>\n    organisations.forEach(({ _id: organisationId, $metadata: metadata }) =>\n      UserService.updateLinkMetadata({\n        id: userId,\n        linkName: 'organisations',\n        linkId: organisationId,\n        metadata: { ...metadata, shareCustomers: true },\n      }))));\n};\n\nexport const down = () => {\n  const allUsers = UserService.fetch({ organisations: { _id: 1 } });\n\n  return Promise.all(allUsers.map(({ _id: userId, organisations = [] }) =>\n    organisations.forEach(({ _id: organisationId, $metadata: metadata }) => {\n      const { shareCustomers, ...restMeta } = metadata;\n      UserService.updateLinkMetadata({\n        id: userId,\n        linkName: 'organisations',\n        linkId: organisationId,\n        metadata: { shareCustomers: undefined, ...restMeta },\n      });\n    })));\n};\n\nMigrations.add({\n  version: 12,\n  name: 'Share customers with organisation users',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"13.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/13.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\nimport { Mongo } from 'meteor/mongo';\n\nimport {\n  LOANS_COLLECTION,\n  BORROWERS_COLLECTION,\n  PROPERTIES_COLLECTION,\n  ORGANISATIONS_COLLECTION,\n  PROMOTIONS_COLLECTION,\n} from 'core/api/constants';\nimport FileService from 'core/api/files/server/FileService';\n\nconst collections = [\n  LOANS_COLLECTION,\n  BORROWERS_COLLECTION,\n  PROPERTIES_COLLECTION,\n  ORGANISATIONS_COLLECTION,\n  PROMOTIONS_COLLECTION,\n];\n\nexport const up = async () => {\n  for (let index = 0; index < collections.length; index++) {\n    const collection = collections[index];\n\n    const docs = Mongo.Collection.get(collection)\n      .find({}, { fields: { _id: 1 } })\n      .fetch();\n\n    for (let index2 = 0; index2 < docs.length; index2++) {\n      const { _id: docId } = docs[index2];\n      await FileService.updateDocumentsCache({ collection, docId });\n    }\n  }\n};\n\nexport const down = () => {\n  collections.forEach((collection) => {\n    Mongo.Collection.get(collection).update(\n      {},\n      { $unset: { documents: true } },\n      { multi: true },\n    );\n  });\n};\n\nMigrations.add({\n  version: 13,\n  name: 'Add documents cache on all collections',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"14.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/14.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Properties } from '../..';\n\nexport const up = () => {\n  const allProperties = Properties.find({}).fetch();\n\n  return Promise.all(allProperties.map(({ _id, monthlyExpenses }) =>\n    Properties.rawCollection().update(\n      { _id },\n      {\n        ...(monthlyExpenses\n          ? { $set: { yearlyExpenses: monthlyExpenses * 12 } }\n          : {}),\n        $unset: { monthlyExpenses: true },\n      },\n    )));\n};\n\nexport const down = () => {\n  const allProperties = Properties.find({}).fetch();\n\n  return Promise.all(allProperties.map(({ _id, yearlyExpenses }) =>\n    Properties.rawCollection().update(\n      { _id },\n      {\n        ...(yearlyExpenses\n          ? { $set: { monthlyExpenses: Math.round(yearlyExpenses / 12) } }\n          : {}),\n        $unset: { yearlyExpenses: true },\n      },\n    )));\n};\n\nMigrations.add({\n  version: 14,\n  name: 'Change monthlyExpenses into yearlyExpenses',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"15.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/15.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Loans } from '../..';\nimport { LOAN_CATEGORIES } from '../../loans/loanConstants';\n\nexport const up = async () => {\n  await Loans.rawCollection().update(\n    {},\n    { $set: { category: LOAN_CATEGORIES.STANDARD } },\n    { multi: true },\n  );\n};\n\nexport const down = async () => {\n  await Loans.rawCollection().update(\n    {},\n    { $unset: { category: true } },\n    { multi: true },\n  );\n};\n\nMigrations.add({\n  version: 15,\n  name: 'Add loan category',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"16.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/16.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Users, Contacts } from '../..';\nimport { formatPhoneNumber } from '../../../utils/phoneFormatting';\n\nexport const up = async () => {\n  const allUsers = Users.find({}, { fields: { phoneNumbers: 1 } }).fetch();\n  const allContacts = Contacts.find(\n    {},\n    { fields: { phoneNumbers: 1 } },\n  ).fetch();\n\n  await Promise.all(allUsers.map(({ _id, phoneNumbers = [] }) =>\n    Users.rawCollection().update(\n      { _id },\n      { $set: { phoneNumbers: phoneNumbers.map(formatPhoneNumber) } },\n    )));\n\n  await Promise.all(allContacts.map(({ _id, phoneNumbers = [] }) =>\n    Contacts.rawCollection().update(\n      { _id },\n      { $set: { phoneNumbers: phoneNumbers.map(formatPhoneNumber) } },\n    )));\n};\n\n// Do nothing, can't go back!\nexport const down = () => {};\n\nMigrations.add({\n  version: 16,\n  name: 'Format all phone numbers',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"17.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/17.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { ACTIVITY_TYPES } from '../../activities/activityConstants';\nimport ActivityService from '../../activities/server/ActivityService';\nimport LoanService from '../../loans/server/LoanService';\n\nexport const up = async () => {\n  const allLoans = LoanService.fetch({\n    createdAt: 1,\n    closingDate: 1,\n    signingDate: 1,\n    user: { assignedEmployeeId: 1 },\n  });\n\n  await Promise.all(allLoans.map(({ createdAt, _id, signingDate, closingDate, user = {} }) => {\n    const assignee = user.assignedEmployeeId;\n    ActivityService.addCreatedAtActivity({\n      createdAt,\n      loanLink: { _id },\n      title: 'Dossier créé',\n    });\n\n    if (signingDate) {\n      ActivityService.insert({\n        title: 'Signature',\n        date: signingDate,\n        type: ACTIVITY_TYPES.EVENT,\n        createdBy: assignee,\n        loanLink: { _id },\n      });\n    }\n\n    if (closingDate) {\n      ActivityService.insert({\n        title: 'Closing',\n        date: closingDate,\n        type: ACTIVITY_TYPES.EVENT,\n        createdBy: assignee,\n        loanLink: { _id },\n      });\n    }\n\n    LoanService.baseUpdate(_id, {\n      $unset: { closingDate: 1, signingDate: 1 },\n    });\n  }));\n};\n\n// No need to migrate back\nexport const down = () => {};\n\nMigrations.add({\n  version: 17,\n  name: 'Add activities and remove closing + signing dates',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"18.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/18.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport { Tasks } from '../..';\nimport { TASK_PRIORITIES } from '../../tasks/taskConstants';\n\nexport const up = async () => {\n  await Tasks.rawCollection().update(\n    {},\n    { $set: { priority: TASK_PRIORITIES.DEFAULT } },\n    { multi: true },\n  );\n};\n\nexport const down = async () => {\n  await Tasks.rawCollection().update(\n    {},\n    { $unset: { priority: true } },\n    { multi: true },\n  );\n};\n\nMigrations.add({\n  version: 18,\n  name: 'Add task priority',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"19.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/migrations/server/19.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Migrations } from 'meteor/percolate:migrations';\n\nimport Revenues from '../../revenues';\n\nexport const up = async () => {\n  const allRevenues = Revenues.find({}).fetch();\n\n  return Promise.all(allRevenues.map(({ _id, organisationLinks }) =>\n    Revenues.rawCollection().update(\n      { _id },\n      {\n        $set: {\n          organisationLinks: organisationLinks.map(({ paidDate, ...link }) => ({\n            ...link,\n            paidAt: paidDate,\n          })),\n        },\n      },\n    )));\n};\n\nexport const down = async () => {\n  const allRevenues = Revenues.find({}).fetch();\n\n  return Promise.all(allRevenues.map(({ _id, organisationLinks }) =>\n    Revenues.rawCollection().update(\n      { _id },\n      {\n        $set: {\n          organisationLinks: organisationLinks.map(({ paidAt, ...link }) => ({\n            ...link,\n            paidDate: paidAt,\n          })),\n        },\n      },\n    )));\n};\n\nMigrations.add({\n  version: 19,\n  name: 'Use paidAt instead of paidDate of consistency',\n  up,\n  down,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"links\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/links/index.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport '../activities/links';\nimport '../borrowers/links';\nimport '../contacts/links';\nimport '../lenderRules/links';\nimport '../lenders/links';\nimport '../loans/links';\nimport '../lots/links';\nimport '../mortgageNotes/links';\nimport '../notifications/links';\nimport '../offers/links';\nimport '../organisations/links';\nimport '../promotionLots/links';\nimport '../promotionOptions/links';\nimport '../promotions/links';\nimport '../properties/links';\nimport '../revenues/links';\nimport '../tasks/links';\nimport '../users/links';\nimport LinkInitializer from './LinkInitializer';\n\nLinkInitializer.setLinks();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"LinkInitializer.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/links/LinkInitializer.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Inversed links need to be defined after direct links, use this\n// class to manage that\n// Might become obsolete after this is fixed in grapher\n// https://github.com/cult-of-coders/grapher/issues/200#issuecomment-500803766\nclass LinkInitializer {\n  constructor() {\n    this.direct = [];\n    this.inversed = [];\n  }\n\n  directInit(fn) {\n    this.direct.push(fn);\n  }\n\n  inversedInit(fn) {\n    this.inversed.push(fn);\n  }\n\n  setLinks() {\n    this.direct.forEach(fn => fn());\n    this.inversed.forEach(fn => fn());\n    // Don't unnecessarily store these functions\n    delete this.direct;\n    delete this.inversed;\n  }\n}\n\nexport default new LinkInitializer();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"reducers\":{\"registerReducers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/reducers/registerReducers.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport '../borrowers/reducers';\nimport '../contacts/reducers';\nimport '../loans/reducers';\nimport '../lots/reducers';\nimport '../notifications/reducers';\nimport '../offers/reducers';\nimport '../organisations/reducers';\nimport '../promotionLots/reducers';\nimport '../promotionOptions/reducers';\nimport '../promotions/reducers';\nimport '../properties/reducers';\nimport '../users/reducers';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"addressReducer.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/reducers/addressReducer.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nconst addressReducer = {\n  address: {\n    body: {\n      address1: 1,\n      zipCode: 1,\n      city: 1,\n    },\n    reduce(object) {\n      const { address1, zipCode, city } = object;\n      return address1\n        ? `${address1}, ${zipCode} ${city}`\n        : 'Aucune addresse indiquée';\n    },\n  },\n};\n\nexport default addressReducer;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"assigneeReducer.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/reducers/assigneeReducer.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport UserService from '../users/server/UserService';\n\nconst assigneeReducer = (body = {}, getUserId) => ({\n  assignee: {\n    body: {\n      userId: 1,\n      userLinks: 1,\n      promotions: { userLinks: 1 },\n      promotion: { userLinks: 1 },\n      assignedEmployeeId: 1,\n      ...body,\n    },\n    reduce(data) {\n      const {\n        userId,\n        userLinks,\n        promotion,\n        promotions,\n        assignedEmployeeId,\n      } = data;\n      let userToFind = userId;\n      let users = userLinks;\n\n      if (assignedEmployeeId) {\n        return UserService.findOne({ _id: assignedEmployeeId });\n      }\n\n      if (promotion && promotion.userLinks) {\n        users = promotion.userLinks;\n      }\n\n      if (promotions && promotions.length > 0) {\n        users = promotions[0].userLinks;\n      }\n\n      if (!userToFind && users && users.length > 0) {\n        userToFind = users[0]._id;\n      }\n\n      if (!userToFind && getUserId) {\n        userToFind = getUserId(data);\n      }\n\n      if (userToFind) {\n        const user = UserService.findOne({ _id: userToFind });\n        if (user) {\n          return UserService.findOne({ _id: user.assignedEmployeeId });\n        }\n      }\n\n      return null;\n    },\n  },\n});\n\nexport default assigneeReducer;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tasksReducer.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/reducers/tasksReducer.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport TaskService from '../tasks/server/TaskService';\n\nconst tasksReducer = {\n  tasks: {\n    body: { _id: 1 },\n    reduce({ _id: docId }) {\n      return TaskService.getTasksForDoc(docId);\n    },\n  },\n};\n\nexport default tasksReducer;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"queries\":{\"server\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/queries/server/index.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport '../../activities/server/exposures';\nimport '../../borrowers/server/exposures';\nimport '../../contacts/server/exposures';\nimport '../../interestRates/server/exposures';\nimport '../../irs10y/server/exposures';\nimport '../../lenderRules/server/exposures';\nimport '../../lenders/server/exposures';\nimport '../../liveSync/server/exposures';\nimport '../../loans/server/exposures';\nimport '../../monitoring/server/exposures';\nimport '../../notifications/server/exposures';\nimport '../../offers/server/exposures';\nimport '../../organisations/server/exposures';\nimport '../../promotionLots/server/exposures';\nimport '../../promotionOptions/server/exposures';\nimport '../../promotions/server/exposures';\nimport '../../properties/server/exposures';\nimport '../../revenues/server/exposures';\nimport '../../stats/server/exposures';\nimport '../../tasks/server/exposures';\nimport '../../users/server/exposures';\nimport './exposures';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/queries/server/exposures.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { searchDatabase } from '../queries';\nimport { exposeQuery } from '../queryHelpers';\nimport { searchDatabaseResolver } from './resolvers';\n\nexposeQuery({\n  query: searchDatabase,\n  overrides: {\n    validateParams: { searchQuery: Match.Maybe(String) },\n  },\n  resolver: searchDatabaseResolver,\n  cacher: { ttl: 20 * 1000 },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"resolvers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/queries/server/resolvers.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { borrowerSearch } from '../../borrowers/queries';\nimport { loanSearch } from '../../loans/queries';\nimport { propertySearch } from '../../properties/queries';\nimport { userSearch } from '../../users/queries';\nimport { promotionSearch } from '../../promotions/queries';\nimport { contactSearch } from '../../contacts/queries';\nimport { organisationSearch } from '../../organisations/queries';\nimport { COLLECTIONS } from '../../constants';\n\nconst collectionSearches = {\n  [COLLECTIONS.USERS_COLLECTION]: searchQuery =>\n    userSearch.clone({ searchQuery }).fetch(),\n  [COLLECTIONS.LOANS_COLLECTION]: searchQuery =>\n    loanSearch.clone({ searchQuery }).fetch(),\n  [COLLECTIONS.CONTACTS_COLLECTION]: searchQuery =>\n    contactSearch.clone({ searchQuery }).fetch(),\n  [COLLECTIONS.ORGANISATIONS_COLLECTION]: searchQuery =>\n    organisationSearch.clone({ searchQuery }).fetch(),\n  [COLLECTIONS.PROMOTIONS_COLLECTION]: searchQuery =>\n    promotionSearch.clone({ searchQuery }).fetch(),\n  [COLLECTIONS.PROPERTIES_COLLECTION]: searchQuery =>\n    propertySearch.clone({ searchQuery }).fetch(),\n  [COLLECTIONS.BORROWERS_COLLECTION]: searchQuery =>\n    borrowerSearch.clone({ searchQuery }).fetch(),\n};\n\nexport const searchDatabaseResolver = ({ searchQuery, collection }) => {\n  if (collection) {\n    return collectionSearches[collection](searchQuery);\n  }\n\n  return {\n    ...Object.keys(collectionSearches).reduce(\n      (obj, collectionName) => ({\n        ...obj,\n        [collectionName]: collectionSearches[collectionName](searchQuery),\n      }),\n      {},\n    ),\n    searchQuery,\n  };\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"queryHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/queries/queryHelpers.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { Meteor } from 'meteor/meteor';\nimport Security from '../security';\nimport QueryCacher from '../helpers/server/QueryCacher';\n\nconst defaultParams = (options) => {\n  const { allowFilterById = false } = options;\n  return {\n    $body: Match.Maybe(Object),\n    limit: Match.Maybe(Number),\n    skip: Match.Maybe(Number),\n    $sort: Match.Maybe(Object),\n    $skip: Match.Maybe(Number),\n    $limit: Match.Maybe(Number),\n    _userId: Match.Maybe(Match.OneOf(String, null)),\n    ...(allowFilterById ? { _id: Match.Maybe(String) } : {}),\n  };\n};\n\nconst defaultFilter = options => ({ filters, params: { _id } }) => {\n  const { allowFilterById = false } = options;\n  if (allowFilterById && _id) {\n    filters._id = _id;\n  }\n};\n\nconst getValidateParams = ({ validateParams = {} } = {}, options) => ({\n  ...defaultParams(options),\n  ...validateParams,\n});\n\nconst addSort = (body, params) => {\n  const { $sort } = params;\n  body.$options = {\n    ...body.$options,\n    ...($sort !== undefined ? { sort: $sort } : {}),\n  };\n};\n\nconst addSkip = (body, params) => {\n  const { $skip } = params;\n  if ($skip) {\n    body.$options = { ...body.$options, skip: $skip };\n  }\n};\n\nconst addLimit = (body, params) => {\n  const { $limit } = params;\n  if ($limit) {\n    const { $options: { limit } = {} } = body;\n    body.$options = {\n      ...body.$options,\n      limit: limit ? Math.min($limit, limit) : $limit,\n    };\n  }\n};\n\nconst addPaginate = (body) => {\n  body.$paginate = true;\n};\n\nconst addOptions = (body, params) => {\n  addSort(body, params);\n  addSkip(body, params);\n  addLimit(body, params);\n  addPaginate(body);\n};\n\nconst addFilters = (body, embody, options) => {\n  const { $filter: bodyFilter } = body;\n  const { $filter: overrideFilter } = embody || {};\n\n  body.$filter = (...args) => {\n    if (bodyFilter) {\n      bodyFilter(...args);\n    }\n    if (overrideFilter) {\n      overrideFilter(...args);\n    }\n\n    defaultFilter(options)(...args);\n  };\n};\n\nconst getEmbody = (overrides, options) =>\n  function customEmbody(body, params) {\n    if (overrides.embody) {\n      if (typeof overrides.embody !== 'function') {\n        throw new Meteor.Error('Embody must be a function!');\n      }\n      overrides.embody(body, params);\n    }\n\n    addFilters(body, overrides.embody, options);\n    addOptions(body, params);\n  };\n\nconst getFirewall = (overrides, options) => (userId, params) => {\n  params._userId = userId;\n  if (!overrides.firewall) {\n    Security.checkUserIsAdmin(userId);\n  } else {\n    overrides.firewall(userId, params);\n  }\n};\n\nexport const exposeQuery = ({\n  query,\n  overrides = {},\n  options = {},\n  resolver,\n  caching,\n}) => {\n  query.expose({\n    ...overrides,\n    firewall: getFirewall(overrides, options),\n    embody: getEmbody(overrides, options),\n    validateParams: getValidateParams(overrides, options),\n  });\n\n  if (resolver) {\n    query.resolve(resolver);\n  }\n\n  if (caching) {\n    const { ttl, getDataToHash } = caching;\n    const cacher = new QueryCacher({ ttl, getDataToHash });\n    query.cacheResults(cacher);\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/queries/queries.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { createQuery } from 'meteor/cultofcoders:grapher';\nimport { RESOLVERS } from './resolversConstants';\n\nexport const searchDatabase = createQuery(RESOLVERS.SEARCH_DATABASE, () => {});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"resolversConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/queries/resolversConstants.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const RESOLVERS = {\n  SEARCH_DATABASE: 'searchDatabase',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"liveSync\":{\"server\":{\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/liveSync/server/exposures.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { liveSyncs } from '../liveSync';\n\nexposeQuery({\n  query: liveSyncs,\n  overrides: {\n    validateParams: { userId: Match.Maybe(Match.OneOf(String, Boolean)) },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"liveSync.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/liveSync/liveSync.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nconst LiveSync = new Mongo.Collection('liveSync');\nconst STALE_LIVE_SYNC_MS = 2 * 60 * 1000;\n\nMeteor.methods({\n  liveSyncStart() {\n    LiveSync.upsert({ userId: this.userId }, { userId: this.userId });\n  },\n  liveSyncStop() {\n    LiveSync.remove({ userId: this.userId });\n  },\n  liveSyncUpdate(options) {\n    check(options, String);\n    LiveSync.update(\n      { userId: this.userId },\n      { $set: { options, updatedAt: new Date() } },\n    );\n  },\n  liveSyncClear() {\n    const now = new Date();\n    LiveSync.remove({\n      updatedAt: { $lt: new Date(now.getTime() - STALE_LIVE_SYNC_MS) },\n    });\n  },\n});\n\nexport const liveSyncs = LiveSync.createQuery('liveSyncs', {\n  $filter({ filters, params: { userId } }) {\n    if (userId) {\n      filters.userId = userId;\n    }\n  },\n  userId: 1,\n  options: 1,\n});\n\nexport default LiveSync;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/liveSync/index.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './liveSync';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"monitoring\":{\"server\":{\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/monitoring/server/exposures.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { loanMonitoring } from '../queries';\nimport { loanMonitoring as loanMonitoringResolver } from './resolvers';\n\nexposeQuery({\n  query: loanMonitoring,\n  overrides: {\n    validateParams: {\n      groupBy: String,\n      value: String,\n      filters: Match.Maybe(Object),\n    },\n  },\n  resolver: loanMonitoringResolver,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"resolvers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/monitoring/server/resolvers.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport merge from 'lodash/merge';\n\nimport { REVENUE_STATUS, LOAN_STATUS } from 'core/api/constants';\nimport LoanService from '../../loans/server/LoanService';\n\nconst defaultFilters = {\n  status: { $nin: [LOAN_STATUS.TEST] },\n};\n\nconst getPredicate = (filters = {}) => ({\n  $match: merge({}, defaultFilters, filters),\n});\n\nconst getProjection = () => ({\n  $project: {\n    status: 1,\n    revenueLinks: 1,\n    selectedStructure: 1,\n    createdYear: { $year: { date: '$createdAt' } },\n    createdMonth: { $month: { date: '$createdAt' } },\n    structure: {\n      $arrayElemAt: [\n        {\n          $filter: {\n            input: '$structures',\n            as: 'item',\n            cond: { $eq: ['$$item.id', '$selectedStructure'] },\n          },\n        },\n        0,\n      ],\n    },\n  },\n});\n\nconst getRevenues = ({ value }) => {\n  if (value === 'revenues') {\n    return [\n      {\n        $lookup: {\n          from: 'revenues',\n          localField: 'revenueLinks',\n          foreignField: '_id',\n          as: 'revenues',\n        },\n      },\n      { $unwind: '$revenues' },\n      {\n        $addFields: {\n          revenueDate: {\n            $cond: {\n              if: { $eq: ['$revenues.status', REVENUE_STATUS.EXPECTED] },\n              then: '$revenues.expectedAt',\n              else: '$revenues.paidAt',\n            },\n          },\n        },\n      },\n      {\n        $addFields: {\n          revenueYear: { $year: { date: '$revenueDate' } },\n          revenueMonth: { $month: { date: '$revenueDate' } },\n        },\n      },\n    ];\n  }\n};\n\nconst getGroupBy = (groupBy) => {\n  switch (groupBy) {\n  case 'status':\n    return '$status';\n  case 'revenueDate':\n    return { month: '$revenueMonth', year: '$revenueYear' };\n  case 'createdAt':\n    return { month: '$createdMonth', year: '$createdYear' };\n\n  default:\n    throw new Meteor.Error(`Invalid groupBy: \"${groupBy}\"`);\n  }\n};\n\nconst getGrouping = ({ groupBy, value }) => {\n  const fields = {};\n  switch (value) {\n  case 'count':\n    fields.count = { $sum: 1 };\n    break;\n  case 'revenues':\n    fields.revenues = { $sum: '$revenues.amount' };\n    fields.paidRevenues = {\n      $sum: {\n        $cond: {\n          if: { $eq: ['$revenues.status', REVENUE_STATUS.CLOSED] },\n          then: '$revenues.amount',\n          else: 0,\n        },\n      },\n    };\n    fields.expectedRevenues = {\n      $sum: {\n        $cond: {\n          if: { $eq: ['$revenues.status', REVENUE_STATUS.EXPECTED] },\n          then: '$revenues.amount',\n          else: 0,\n        },\n      },\n    };\n    break;\n  case 'loanValue':\n    fields.loanValue = { $sum: '$structure.wantedLoan' };\n    break;\n  default:\n    throw new Meteor.Error('Invalid grouping value');\n  }\n\n  return { $group: { _id: getGroupBy(groupBy), ...fields } };\n};\n\nconst getSort = ({ groupBy }) => {\n  if (groupBy === 'revenueDate' || groupBy === 'createdAt') {\n    return { $sort: { '_id.year': 1, '_id.month': 1 } };\n  }\n};\n\nconst buildPipeline = ({ filters, groupBy, value }) =>\n  [\n    getPredicate(filters),\n    getProjection(),\n    getRevenues({ value }),\n    getGrouping({ groupBy, value }),\n    getSort({ groupBy }),\n  ]\n    .reduce((arr, val) => [...arr, ...(Array.isArray(val) ? val : [val])], [])\n    .filter(x => x);\n\nexport const loanMonitoring = async (args) => {\n  const pipeline = buildPipeline(args);\n  const agg = await LoanService.aggregate(pipeline).toArray();\n  return agg;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/monitoring/queries.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Loans from '../loans';\n\nexport const loanMonitoring = Loans.createQuery('loanMonitoring', () => {});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"stats\":{\"server\":{\"exposures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/stats/server/exposures.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { newLoans, loanHistogram } from '../queries';\nimport { newLoansResolver, loanHistogramResolver } from '../stats';\n\nexposeQuery({\n  query: newLoans,\n  overrides: { validateParams: { period: Number } },\n  options: { allowFilterById: true },\n  resolver: newLoansResolver,\n});\n\nexposeQuery({\n  query: loanHistogram,\n  overrides: { validateParams: { period: Number } },\n  options: { allowFilterById: true },\n  resolver: loanHistogramResolver,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"queries.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/stats/queries.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Loans from '../loans';\n\nexport const newLoans = Loans.createQuery('newLoans', () => {});\nexport const loanHistogram = Loans.createQuery('loanHistogram', () => {});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"stats.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/stats/stats.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport moment from 'moment';\n\nimport LoanService from '../loans/server/LoanService';\n\nconst dateInPast = days =>\n  moment()\n    .subtract(days, 'days')\n    .startOf('day')\n    .toDate();\n\nexport const newLoansResolver = ({ period = 7 } = {}) => {\n  const end1 = dateInPast(period);\n  const end2 = dateInPast(period * 2);\n  const period1 = LoanService.count({\n    $filters: { createdAt: { $gte: end1 } },\n  });\n  const period2 = LoanService.count({\n    $filters: { createdAt: { $gte: end2, $lte: end1 } },\n  });\n\n  const change = period2 === 0 ? 1 : (period1 - period2) / period2;\n\n  return { count: period1, change };\n};\n\nexport const loanHistogramResolver = async ({ period = 7 }) => {\n  const aggregation = await LoanService.aggregate([\n    { $match: { createdAt: { $gte: dateInPast(period) } } },\n    {\n      $project: {\n        // Filter out time of day\n        date: { $dateToString: { format: '%Y-%m-%d', date: '$createdAt' } },\n      },\n    },\n    { $group: { _id: '$date', count: { $sum: 1 } } },\n    { $sort: { _id: 1 } },\n  ]).toArray();\n  return aggregation;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"api.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/api.js                                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport './initialization';\nimport './files/meteor-slingshot';\nimport './links';\nimport './reducers/registerReducers';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cronitor\":{\"server\":{\"CronitorService.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/api/cronitor/server/CronitorService.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport https from 'https';\nimport queryString from 'query-string';\n\nconst CRONITOR_URL = 'https://cronitor.io';\nconst ACTIONS = {\n  RUN: 'run',\n  COMPLETE: 'complete',\n  PAUSE: 'pause',\n  FAIL: 'fail',\n};\nconst REQ_TIMEOUT = 10000;\n\nexport default class CronitorService {\n  constructor({ id, authKey }) {\n    this.id = id;\n    this.authKey = authKey;\n    this.baseUrl = CRONITOR_URL;\n  }\n\n  run = () => {\n    const urlObj = this.buildUrlObj({ action: ACTIONS.RUN });\n    const url = this.buildUrl({ urlObj });\n    return this.getWithTimeout({ url });\n  };\n\n  complete = (msg) => {\n    const urlObj = this.buildUrlObj({ action: ACTIONS.COMPLETE });\n    if (msg) {\n      if (!urlObj.qs) {\n        urlObj.qs = {};\n      }\n\n      urlObj.qs.msg = JSON.stringify(msg);\n    }\n    const url = this.buildUrl({ urlObj });\n    return this.getWithTimeout({ url });\n  };\n\n  pause = (hours) => {\n    const urlObj = this.buildUrlObj({ action: ACTIONS.PAUSE });\n    urlObj.basePath = `${urlObj.basePath}/${hours}`;\n    const url = this.buildUrl({ urlObj });\n    return this.getWithTimeout({ url });\n  };\n\n  fail = (msg) => {\n    const urlObj = this.buildUrlObj({ action: ACTIONS.FAIL });\n    if (msg) {\n      if (!urlObj.qs) {\n        urlObj.qs = {};\n      }\n\n      if (msg.sanitizedError) {\n        urlObj.qs.msg = JSON.stringify(msg.sanitizedError.message);\n      } else {\n        urlObj.qs.msg = JSON.stringify(msg);\n      }\n    }\n    const url = this.buildUrl({ urlObj });\n    return this.getWithTimeout({ url });\n  };\n\n  buildUrlObj = ({ action }) => {\n    const urlObj = { basePath: `${this.baseUrl}/${this.id}/${action}` };\n    if (this.authKey) {\n      urlObj.qs = { auth_key: this.authKey };\n    }\n\n    return urlObj;\n  };\n\n  buildUrl = ({ urlObj }) =>\n    urlObj.basePath + (urlObj.qs ? `?${queryString.stringify(urlObj.qs)}` : '');\n\n  getWithTimeout = ({ url }) => {\n    const promise = new Promise((resolve, reject) => {\n      https\n        .get(url, (response) => {\n          let data = '';\n\n          response.on('data', (chunk) => {\n            data += chunk;\n          });\n\n          response.on('end', () => {\n            resolve(data);\n          });\n        })\n        .on('error', reject);\n    });\n\n    const timeout = new Promise((resolve, reject) => {\n      const wait = Meteor.setTimeout(() => {\n        Meteor.clearTimeout(wait);\n        reject(new Meteor.Error('Timed out'));\n      }, REQ_TIMEOUT);\n    });\n\n    return Promise.race([promise, timeout]);\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"fixtures\":{\"server\":{\"fixtureMethods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/server/fixtureMethods.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nimport range from 'lodash/range';\n\nimport LoanService from 'core/api/loans/server/LoanService';\nimport {\n  STEPS,\n  STEP_ORDER,\n  ROLES,\n  PURCHASE_TYPE,\n  APPLICATION_TYPES,\n  ORGANISATION_TYPES,\n} from '../../api/constants';\nimport {\n  Borrowers,\n  Contacts,\n  Loans,\n  Lots,\n  Offers,\n  Organisations,\n  PromotionLots,\n  PromotionOptions,\n  Promotions,\n  Properties,\n  Tasks,\n  Users,\n} from '../../api';\nimport SecurityService from '../../api/security';\nimport TaskService from '../../api/tasks/server/TaskService';\nimport {\n  USER_COUNT,\n  UNOWNED_LOANS_COUNT,\n  LOANS_PER_USER,\n} from '../fixtureConfig';\nimport { createFakeLoan, addLoanWithData } from '../loanFixtures';\nimport {\n  createDevs,\n  createAdmins,\n  getFakeUsersIds,\n  createUser,\n  createFakeUsers,\n} from '../userFixtures';\nimport { createFakeOffer } from '../offerFixtures';\nimport { E2E_USER_EMAIL } from '../fixtureConstants';\nimport { createOrganisations } from '../organisationFixtures';\nimport { createFakeInterestRates } from '../interestRatesFixtures';\nimport {\n  emptyFakeBorrower,\n  completeFakeBorrower,\n} from '../../api/borrowers/fakes';\nimport { fakeProperty } from '../../api/properties/fakes';\nimport { emptyLoan, loanStep1, loanStep2 } from '../../api/loans/fakes';\n\nconst isAuthorizedToRun = () => !Meteor.isProduction || Meteor.isStaging || Meteor.isDevEnvironment;\n\nconst getAdmins = () => {\n  const admins = Users.find({ roles: { $in: [ROLES.ADMIN] } }).fetch();\n  if (admins.length <= 1) {\n    const newAdmins = createAdmins();\n    return newAdmins;\n  }\n  return admins.map(admin => admin._id);\n};\n\nconst deleteUsersRelatedData = (usersToDelete) => {\n  Borrowers.remove({ userId: { $in: usersToDelete } });\n  Properties.remove({ userId: { $in: usersToDelete } });\n  Offers.remove({ userId: { $in: usersToDelete } });\n  Loans.remove({ userId: { $in: usersToDelete } });\n};\n\nconst deleteUsers = usersToDelete =>\n  Users.remove({ _id: { $in: usersToDelete } });\n\nconst createFakeLoanFixture = ({\n  userId,\n  step,\n  completeFiles,\n  twoBorrowers,\n}) => {\n  const loanId = createFakeLoan({\n    userId,\n    step,\n    completeFiles,\n    twoBorrowers,\n  });\n  createFakeOffer(loanId);\n};\n\n// Create a test user used in app's e2e tests and all the fixtures it needs\nconst createTestUserWithData = () => {\n  const testUserId = createUser(E2E_USER_EMAIL, ROLES.USER);\n  const admins = getAdmins();\n\n  // Create 2 loans to check AppPage, which requires multiple loans to display\n  createFakeLoanFixture({\n    step: STEPS.SOLVENCY,\n    userId: testUserId,\n    adminId: admins[0]._id,\n    completeFiles: true,\n    twoBorrowers: true,\n  });\n  createFakeLoanFixture({\n    step: STEPS.REQUEST,\n    userId: testUserId,\n    adminId: admins[0]._id,\n    completeFiles: true,\n    twoBorrowers: true,\n  });\n};\n\nMeteor.methods({\n  generateTestData(currentUserEmail) {\n    try {\n      if (isAuthorizedToRun()) {\n        const devs = createDevs(currentUserEmail);\n        const admins = getAdmins();\n        const newUsers = createFakeUsers(USER_COUNT, ROLES.USER);\n        createOrganisations();\n\n        // for each regular fixture user, create a loan with a certain step\n        newUsers.forEach((userId, index) => {\n          const adminId = admins[Math.floor(Math.random() * admins.length)];\n\n          // based on index, always generate 0, 1 and 2 numbers\n          const loanStep = index % 3;\n\n          range(LOANS_PER_USER).forEach((_, loanIndex) => {\n            const step = LOANS_PER_USER < 3 ? loanStep : loanIndex % 3;\n            createFakeLoanFixture({\n              step: STEP_ORDER[step],\n              userId,\n              adminId,\n              twoBorrowers: true,\n            });\n          });\n        });\n\n        range(UNOWNED_LOANS_COUNT).forEach(() => {\n          createFakeLoan({});\n        });\n\n        createTestUserWithData();\n      }\n    } catch (error) {\n      // FIXME: If you throw an error here it does not appear without this\n      // try catch block\n      console.log('generateTestData error', error);\n    }\n  },\n\n  async purgeDatabase(currentUserId) {\n    check(currentUserId, String);\n    if (SecurityService.checkCurrentUserIsDev() && isAuthorizedToRun()) {\n      await Promise.all([\n        Borrowers.rawCollection().remove({}),\n        Contacts.rawCollection().remove({}),\n        Loans.rawCollection().remove({}),\n        Lots.remove({}),\n        Offers.rawCollection().remove({}),\n        Organisations.rawCollection().remove({}),\n        PromotionLots.rawCollection().remove({}),\n        PromotionOptions.rawCollection().remove({}),\n        Promotions.rawCollection().remove({}),\n        Properties.rawCollection().remove({}),\n        Tasks.rawCollection().remove({}),\n        Users.rawCollection().remove({ _id: { $ne: currentUserId } }),\n      ]);\n    }\n  },\n\n  purgeFakeData(currentUserId) {\n    check(currentUserId, String);\n    if (SecurityService.checkCurrentUserIsDev() && isAuthorizedToRun()) {\n      let fakeUsersIds = getFakeUsersIds();\n      deleteUsersRelatedData(fakeUsersIds);\n\n      fakeUsersIds = fakeUsersIds.filter(item => item !== currentUserId);\n      deleteUsers(fakeUsersIds);\n    }\n  },\n\n  purgePersonalData(currentUserId) {\n    SecurityService.checkCurrentUserIsDev();\n    return deleteUsersRelatedData([currentUserId]);\n  },\n\n  insertLoanRelatedTask() {\n    SecurityService.checkCurrentUserIsDev();\n    const loanId = LoanService.find({}).fetch()[0]._id;\n    if (loanId) {\n      return TaskService.insert({\n        object: { title: 'Random dev task', loanLink: { _id: loanId } },\n      });\n    }\n  },\n\n  createFakeOffer({ loanId }) {\n    SecurityService.checkCurrentUserIsDev();\n\n    return createFakeOffer(loanId);\n  },\n\n  createFakeInterestRates({ number }) {\n    SecurityService.checkCurrentUserIsDev();\n\n    return createFakeInterestRates({ number });\n  },\n\n  addEmptyLoan({ userId, twoBorrowers, addOffers, isRefinancing }) {\n    SecurityService.checkCurrentUserIsDev();\n\n    return addLoanWithData({\n      borrowers: twoBorrowers\n        ? [emptyFakeBorrower, emptyFakeBorrower]\n        : [emptyFakeBorrower],\n      properties: [],\n      loan: {\n        ...emptyLoan,\n        purchaseType: isRefinancing\n          ? PURCHASE_TYPE.REFINANCING\n          : PURCHASE_TYPE.ACQUISITION,\n      },\n      userId,\n      addOffers,\n    });\n  },\n\n  addLoanWithSomeData({ userId, twoBorrowers, addOffers, isRefinancing }) {\n    SecurityService.checkCurrentUserIsDev();\n\n    return addLoanWithData({\n      borrowers: twoBorrowers\n        ? [completeFakeBorrower, completeFakeBorrower]\n        : [completeFakeBorrower],\n      properties: [fakeProperty],\n      loan: {\n        ...loanStep1,\n        purchaseType: isRefinancing\n          ? PURCHASE_TYPE.REFINANCING\n          : PURCHASE_TYPE.ACQUISITION,\n      },\n      userId,\n      addOffers,\n    });\n  },\n\n  addCompleteLoan({ userId, twoBorrowers, isRefinancing }) {\n    SecurityService.checkCurrentUserIsDev();\n\n    return addLoanWithData({\n      borrowers: twoBorrowers\n        ? [completeFakeBorrower, completeFakeBorrower]\n        : [completeFakeBorrower],\n      properties: [fakeProperty],\n      loan: {\n        ...loanStep2,\n        purchaseType: isRefinancing\n          ? PURCHASE_TYPE.REFINANCING\n          : PURCHASE_TYPE.ACQUISITION,\n        applicationType: APPLICATION_TYPES.FULL,\n        customName: 'Ma maison à la plage',\n      },\n      userId,\n      addOffers: true,\n    });\n  },\n\n  addAnonymousLoan({ twoBorrowers, isRefinancing }) {\n    SecurityService.checkCurrentUserIsDev();\n\n    return addLoanWithData({\n      borrowers: twoBorrowers\n        ? [emptyFakeBorrower, emptyFakeBorrower]\n        : [emptyFakeBorrower],\n      properties: [],\n      loan: {\n        ...emptyLoan,\n        purchaseType: isRefinancing\n          ? PURCHASE_TYPE.REFINANCING\n          : PURCHASE_TYPE.ACQUISITION,\n        anonymous: true,\n      },\n    });\n  },\n\n  addUserToOrg() {\n    SecurityService.checkCurrentUserIsDev();\n\n    let orgId;\n    const org = Organisations.findOne({ name: 'Dev Org' });\n\n    if (org) {\n      orgId = org._id;\n    } else {\n      orgId = Organisations.insert({\n        name: 'Dev Org',\n        type: ORGANISATION_TYPES.REAL_ESTATE_BROKER,\n      });\n    }\n\n    Organisations.update(\n      { _id: orgId },\n      { $set: { userLinks: [{ _id: this.userId }] } },\n    );\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"fixtureConfig.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/fixtureConfig.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const USER_COUNT = 10;\nexport const ADMIN_COUNT = 10;\nexport const DEV_COUNT = 5;\nexport const UNOWNED_LOANS_COUNT = 1;\nexport const LOANS_PER_USER = 1;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"loanFixtures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/loanFixtures.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport faker from 'faker/locale/fr';\n\nimport LoanService from '../api/loans/server/LoanService';\nimport {\n  PURCHASE_TYPE,\n  INTEREST_RATES,\n  OWN_FUNDS_TYPES,\n  OWN_FUNDS_USAGE_TYPES,\n  STEPS,\n  APPLICATION_TYPES,\n} from '../api/constants';\nimport { createFakeBorrowers } from './borrowerFixtures';\nimport { createFakeProperty } from './propertyFixtures';\nimport { adminLoans } from '../api/loans/queries';\nimport BorrowerService from '../api/borrowers/server/BorrowerService';\nimport PropertyService from '../api/properties/server/PropertyService';\nimport { createFakeOffer } from './offerFixtures';\n\nconst purchaseTypes = Object.values(PURCHASE_TYPE);\n\nconst getRandomValueInArray = array =>\n  array[Math.floor(Math.random() * array.length)];\n\nconst getRandomStructure = (propertyValue, borrowerId) => {\n  if (!borrowerId) {\n    return {};\n  }\n  return getRandomValueInArray([\n    {\n      ownFunds: [\n        {\n          value: Math.round(0.15 * propertyValue),\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          borrowerId,\n        },\n        {\n          value: Math.round(0.1 * propertyValue),\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n          borrowerId,\n        },\n      ],\n    },\n    {\n      ownFunds: [\n        {\n          value: Math.round(0.25 * propertyValue),\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          borrowerId,\n        },\n      ],\n    },\n    {\n      ownFunds: [\n        {\n          value: Math.round(0.15 * propertyValue),\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          borrowerId,\n        },\n        {\n          value: Math.round(0.1 * propertyValue),\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n          borrowerId,\n        },\n      ],\n    },\n    {\n      ownFunds: [\n        {\n          value: Math.round(0.15 * propertyValue),\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          borrowerId,\n        },\n        {\n          value: Math.round(0.05 * propertyValue),\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n          borrowerId,\n        },\n        {\n          value: Math.round(0.05 * propertyValue),\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n          borrowerId,\n        },\n      ],\n    },\n    {\n      ownFunds: [\n        {\n          value: Math.round(0.15 * propertyValue),\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          borrowerId,\n        },\n        {\n          value: Math.round(0.08 * propertyValue),\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n          borrowerId,\n        },\n        {\n          value: Math.round(0.02 * propertyValue),\n          type: OWN_FUNDS_TYPES.INSURANCE_3A,\n          usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n          borrowerId,\n        },\n      ],\n    },\n    {\n      ownFunds: [\n        {\n          value: Math.round(0.2 * propertyValue),\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          borrowerId,\n        },\n        {\n          value: Math.round(0.05 * propertyValue),\n          type: OWN_FUNDS_TYPES.INSURANCE_3B,\n          usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n          borrowerId,\n        },\n      ],\n    },\n  ]);\n};\n\nexport const createFakeLoan = ({ userId, step, twoBorrowers }) => {\n  const borrowerIds = createFakeBorrowers(userId, twoBorrowers);\n  const { _id: propertyId, value } = createFakeProperty(userId);\n  const loan = {\n    name: faker.address.streetAddress(),\n    borrowerIds,\n    propertyIds: [propertyId],\n    purchaseType:\n      purchaseTypes[Math.floor(Math.random() * purchaseTypes.length)],\n    contacts: [],\n    structures: [\n      {\n        id: 'struct1',\n        propertyId,\n        loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n        wantedLoan: Math.round(0.8 * value),\n        ...getRandomStructure(value, borrowerIds[0]),\n      },\n    ],\n    selectedStructure: 'struct1',\n  };\n\n  switch (step) {\n  case STEPS.OFFERS:\n    loan.step = STEPS.OFFERS;\n    loan.loanTranches = [{ value: 750000, type: 'interest10' }];\n    loan.applicationType = APPLICATION_TYPES.FULL;\n    loan.displayWelcomeScreen = false;\n    break;\n  case STEPS.REQUEST:\n    loan.step = STEPS.REQUEST;\n    loan.applicationType = APPLICATION_TYPES.FULL;\n    loan.displayWelcomeScreen = false;\n    break;\n  default:\n    loan.step = STEPS.SOLVENCY;\n  }\n\n  return LoanService.insert({ loan, userId });\n};\n\nexport const getRelatedLoansIds = usersIds =>\n  LoanService.fetch({ $filters: { userId: { $in: usersIds } }, _id: 1 }).map(item => item._id);\n\nexport const addLoanWithData = ({\n  borrowers = [],\n  properties = [],\n  loan: loanData,\n  userId,\n  addOffers,\n}) => {\n  const loanId = LoanService.fullLoanInsert({ userId });\n  LoanService.update({ loanId, object: loanData });\n  const loan = adminLoans.clone({ _id: loanId }).fetchOne();\n  const propertyId = properties.length\n    ? PropertyService.insert({ property: {}, userId })\n    : undefined;\n\n  if (propertyId) {\n    LoanService.addPropertyToLoan({ propertyId, loanId });\n  }\n\n  const structureId = loan.structures[0].id;\n  const [borrowerId1] = loan.borrowers.map(({ _id }) => _id);\n\n  LoanService.updateStructure({\n    loanId,\n    structureId,\n    structure: {\n      propertyId,\n      loanTranches: [\n        { type: INTEREST_RATES.YEARS_10, value: 0.8 },\n        { type: INTEREST_RATES.YEARS_5, value: 0.2 },\n      ],\n      ...getRandomStructure(1000000, borrowerId1),\n    },\n  });\n\n  if (borrowerId1) {\n    BorrowerService.update({ borrowerId: borrowerId1, object: borrowers[0] });\n  }\n\n  if (borrowers.length > 1) {\n    const borrowerId2 = BorrowerService.insert({ borrower: borrowers[1] });\n    BorrowerService.update({ borrowerId: borrowerId2, object: borrowers[1] });\n    LoanService.addLink({\n      id: loanId,\n      linkName: 'borrowers',\n      linkId: borrowerId2,\n    });\n  }\n\n  if (propertyId) {\n    PropertyService.update({\n      propertyId,\n      object: properties[0],\n    });\n  }\n\n  if (addOffers) {\n    const offerIds = [1, 2, 3, 4, 5].map(() => createFakeOffer(loanId));\n    LoanService.updateStructure({\n      loanId,\n      structureId,\n      structure: { offerId: getRandomValueInArray(offerIds) },\n    });\n  }\n\n  return loanId;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"borrowerFixtures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/borrowerFixtures.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport faker from 'faker/locale/fr';\n\nimport BorrowerService from '../api/borrowers/server/BorrowerService';\nimport { RESIDENCE_TYPE, OTHER_INCOME, EXPENSES } from '../api/constants';\n\nconst insertFakeBorrower = (userId) => {\n  const firstName = faker.name.firstName();\n  const lastName = faker.name.lastName();\n\n  const borrower = {\n    firstName,\n    lastName,\n    gender: 'F',\n    address1: faker.address.streetAddress(),\n    zipCode: 1201,\n    city: 'Genève',\n    citizenships: 'Suisse, Français',\n    birthDate: '1980-03-01',\n    birthPlace: 'Plan-les-Ouates',\n    civilStatus: 'SINGLE',\n    childrenCount: 2,\n    company: faker.company.companyName(),\n    personalBank: 'BCGE',\n    isSwiss: true,\n    isUSPerson: false,\n    worksForOwnCompany: false,\n    sameAddress: true,\n\n    salary: 300000,\n    bonusExists: true,\n    bonus2015: 15490,\n    bonus2016: 11140,\n    bonus2017: 13780,\n    bonus2018: 12300,\n    otherIncome: [\n      {\n        value: 10000,\n        description: OTHER_INCOME.PENSIONS,\n      },\n      {\n        value: 15000,\n        description: OTHER_INCOME.WELFARE,\n      },\n    ],\n    expenses: [\n      {\n        value: 3000,\n        description: EXPENSES.LEASING,\n      },\n      {\n        value: 4000,\n        description: EXPENSES.PERSONAL_LOAN,\n      },\n    ],\n    realEstate: [\n      {\n        value: 433000,\n        loan: 240000,\n        description: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      },\n    ],\n    bankFortune: 300000,\n    insurance2: [{ value: 120000, description: 'Allianz' }],\n    insurance3B: [{ value: 50000, description: 'Zurich' }],\n    logic: {},\n  };\n\n  return BorrowerService.insert({ borrower, userId });\n};\n\nexport const createFakeBorrowers = (userId, twoBorrowers = false) => {\n  const borrowerIds = [insertFakeBorrower(userId)];\n  if (twoBorrowers) {\n    borrowerIds.push(insertFakeBorrower(userId));\n  }\n  return borrowerIds;\n};\n\nexport const getRelatedBorrowerIds = usersIds =>\n  BorrowerService.fetch({\n    $filters: { userId: { $in: usersIds } },\n    _id: 1,\n  }).map(item => item._id);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"propertyFixtures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/propertyFixtures.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport faker from 'faker/locale/fr';\n\nimport PropertyService from '../api/properties/server/PropertyService';\nimport {\n  PROPERTY_STATUS,\n  RESIDENCE_TYPE,\n  PROPERTY_TYPE,\n  VOLUME_NORM,\n  MINERGIE_CERTIFICATE,\n} from '../api/properties/propertyConstants';\nimport { Properties } from '../api';\n\nconst statuses = Object.values(PROPERTY_STATUS);\nconst residenceTypes = Object.values(RESIDENCE_TYPE);\nconst types = Object.values(PROPERTY_TYPE);\nconst volumeNorms = Object.values(VOLUME_NORM);\nconst minergies = Object.values(MINERGIE_CERTIFICATE);\n\nconst getRandomValueInRange = (min, max) => Math.random() * (max - min) + min;\nconst getRandomValueInArray = array =>\n  array[Math.floor(Math.random() * array.length)];\n\nexport const createFakeProperty = userId => {\n  const property = {\n    status: getRandomValueInArray(statuses),\n    value: Math.round(getRandomValueInRange(500000, 3000000)),\n    address1: faker.address.streetAddress(),\n    zipCode: 1201,\n    city: 'Genève',\n    residenceType: getRandomValueInArray(residenceTypes),\n    propertyType: getRandomValueInArray(types),\n    futureOwner: 0,\n    constructionYear: 2010,\n    landArea: 300,\n    insideArea: 140,\n    volume: 1500,\n    volumeNorm: getRandomValueInArray(volumeNorms),\n    roomCount: 5,\n    parkingInside: 1,\n    parkingOutside: 2,\n    minergie: getRandomValueInArray(minergies),\n    isCoproperty: true,\n    copropertyPercentage: 400,\n  };\n\n  return { ...property, _id: PropertyService.insert({ property, userId }) };\n};\n\nexport const getRelatedPropertyIds = usersIds =>\n  Properties.find({ userId: { $in: usersIds } }, { fields: { _id: 1 } })\n    .fetch()\n    .map(item => item._id);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"offerFixtures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/offerFixtures.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport shuffle from 'lodash/shuffle';\n\nimport { getRandomOffer } from '../api/offers/fakes';\nimport OfferService from '../api/offers/server/OfferService';\nimport LenderService from '../api/lenders/server/LenderService';\nimport OrganisationService from '../api/organisations/server/OrganisationService';\nimport LoanService from '../api/loans/server/LoanService';\nimport PropertyService from '../api/properties/server/PropertyService';\nimport { createOrganisations } from './organisationFixtures';\n\nconst getOrgIds = () => OrganisationService.fetch({}).map(({ _id }) => _id);\n\nexport const createFakeOffer = (loanId) => {\n  const loan = LoanService.findOne(loanId);\n  const property = PropertyService.findOne(loan.propertyIds[0]);\n  const offer = getRandomOffer(\n    { loan: { ...loan, _id: loan._id }, property },\n    true,\n  );\n  let allOrganisationIds = getOrgIds();\n\n  if (allOrganisationIds.length === 0) {\n    createOrganisations();\n    allOrganisationIds = getOrgIds();\n  }\n\n  const randomOrganisationId = shuffle(allOrganisationIds)[0];\n  let lenderId;\n\n  const lender = LenderService.findOne({\n    'loanLink._id': loanId,\n    'organisationLink._id': randomOrganisationId,\n  });\n\n  if (lender) {\n    lenderId = lender._id;\n  } else {\n    lenderId = LenderService.insert({\n      lender: { loanId: loan._id },\n      contactId: null,\n      organisationId: randomOrganisationId,\n    });\n  }\n\n  return OfferService.insert({ offer: { ...offer, lenderId } });\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"organisationFixtures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/organisationFixtures.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport faker from 'faker/locale/fr';\nimport random from 'lodash/random';\n\nimport OrganisationService from '../api/organisations/server/OrganisationService';\nimport ContactService from '../api/contacts/server/ContactService';\nimport { ORGANISATION_TYPES, ORGANISATION_FEATURES, ORGANISATION_TAGS } from '../api/constants';\nimport { createLenderRules } from './lenderRulesFixtures';\n\nconst orgs = [\n  {\n    name: 'UBS',\n    type: ORGANISATION_TYPES.BANK,\n    logo: 'https://sos-ch-dk-2.exo.io/fixture-files/ubs-logo.png',\n    features: [ORGANISATION_FEATURES.LENDER],\n    tags: [ORGANISATION_TAGS.CH_RETAIL],\n  },\n  {\n    name: 'Crédit Suisse',\n    type: ORGANISATION_TYPES.BANK,\n    logo: 'https://sos-ch-dk-2.exo.io/fixture-files/cs-logo.png',\n    features: [ORGANISATION_FEATURES.LENDER],\n    tags: [ORGANISATION_TAGS.CH_RETAIL],\n  },\n  {\n    name: 'Allianz',\n    type: ORGANISATION_TYPES.INSURANCE,\n    logo: 'https://sos-ch-dk-2.exo.io/fixture-files/allianz-logo.png',\n    features: [ORGANISATION_FEATURES.LENDER],\n    tags: [ORGANISATION_TAGS.CH_RETAIL],\n  },\n  {\n    name: 'Pictet',\n    type: ORGANISATION_TYPES.PRIVATE_BANK,\n    logo: 'https://sos-ch-dk-2.exo.io/fixture-files/pictet-logo.png',\n    features: [ORGANISATION_FEATURES.LENDER],\n    tags: [ORGANISATION_TAGS.CH_RETAIL],\n  },\n];\n\nexport const createOrganisations = () =>\n  orgs.map((org) => {\n    const orgId = OrganisationService.insert(org);\n\n    if (org.features.includes(ORGANISATION_FEATURES.LENDER)) {\n      createLenderRules(orgId);\n    }\n\n    const contactCount = random(1, 3, false);\n\n    for (let index = 0; index < contactCount; index += 1) {\n      const contactId = ContactService.insert({\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        address1: faker.address.streetAddress(),\n        zipCode: 1201,\n        city: 'Genève',\n        emails: [{ address: faker.internet.email() }],\n        phoneNumbers: [faker.phone.phoneNumber()],\n      });\n\n      ContactService.changeOrganisations({\n        contactId,\n        newOrganisations: [\n          { _id: orgId, metadata: { title: faker.name.jobTitle() } },\n        ],\n      });\n    }\n  });\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lenderRulesFixtures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/lenderRulesFixtures.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport LenderRulesService from '../api/lenderRules/server/LenderRulesService';\n\nexport const createLenderRules = (organisationId) => {\n  LenderRulesService.initialize({ organisationId });\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"userFixtures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/userFixtures.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Accounts } from 'meteor/accounts-base';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport faker from 'faker/locale/fr';\n\nimport { USER_PASSWORD } from './fixtureConstants';\nimport UserService from '../api/users/server/UserService';\n\nexport const createUser = (email, role, password) => {\n  const userId = Accounts.createUser({\n    email,\n    password: password || USER_PASSWORD,\n  });\n  Roles.setUserRoles(userId, [role]);\n\n  return userId;\n};\n\nexport const createFakeUsers = (count, role, currentUserEmail = '') => {\n  const insertedUsers = [];\n  for (let i = 0; i < count; i += 1) {\n    const email = `${role}-${i + 1}@e-potek.ch`;\n    if (email !== currentUserEmail) {\n      const newUserId = createUser(email, role);\n\n      UserService.update({\n        userId: newUserId,\n        object: {\n          firstName: faker.name.firstName(),\n          lastName: faker.name.lastName(),\n        },\n      });\n      insertedUsers.push(newUserId);\n    }\n  }\n  return insertedUsers;\n};\n\nexport const addUser = ({ email, role, password = USER_PASSWORD, ...data }) => {\n  const newUserId = createUser(email, role, password);\n  UserService.update({\n    userId: newUserId,\n    object: {\n      ...data,\n      phoneNumbers: [faker.phone.phoneNumber()],\n      'emails.0.verified': true,\n    },\n  });\n  return newUserId;\n};\n\nexport const createDevs = (currentEmail) => {\n  const devs = [\n    {\n      email: 'florian@e-potek.ch',\n      firstName: 'Florian',\n      lastName: 'Bienefelt',\n    },\n    {\n      email: 'quentin@e-potek.ch',\n      firstName: 'Quentin',\n      lastName: 'Herzig',\n    },\n  ];\n  return devs\n    .filter(({ email }) => email !== currentEmail)\n    .map(obj => ({ ...obj, role: 'dev' }))\n    .map(addUser);\n};\n\nexport const createAdmins = () => {\n  const devs = [\n    {\n      email: 'lydia@e-potek.ch',\n      firstName: 'Lydia',\n      lastName: 'Abraha',\n    },\n    {\n      email: 'yannis@e-potek.ch',\n      firstName: 'Yannis',\n      lastName: 'Eggert',\n    },\n    {\n      email: 'jeanluc@e-potek.ch',\n      firstName: 'Jean-luc',\n      lastName: 'Kringel',\n    },\n  ];\n  return devs.map(obj => ({ ...obj, role: 'admin' })).map(addUser);\n};\n\nexport const getFakeUsersIds = () => {\n  const regex = /^(admin|dev|user)-[1-9]|10@e-potek.ch/;\n  const allUsers = UserService.getAll();\n  const fakeUserIds = allUsers\n    .filter(user => regex.test(user.emails[0].address))\n    .map(fakeUser => fakeUser._id);\n  return fakeUserIds;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"fixtureConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/fixtureConstants.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const USER_PASSWORD = '12345';\nexport const E2E_DEV_EMAIL = 'florian@e-potek.ch';\nexport const E2E_USER_EMAIL = 'test-user@e-potek.ch';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"interestRatesFixtures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/interestRatesFixtures.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport moment from 'moment';\n\nimport InterestRatesService from '../api/interestRates/server/InterestRatesService';\nimport { INTEREST_RATES } from '../api/constants';\nimport { getRandomInterestRate } from '../api/interestRates/fakes';\n\nconst FAKE_INTEREST_RATES_MEANS = {\n  [INTEREST_RATES.LIBOR]: 0.8,\n  [INTEREST_RATES.YEARS_1]: 1.1,\n  [INTEREST_RATES.YEARS_2]: 1.5,\n  [INTEREST_RATES.YEARS_5]: 1.9,\n  [INTEREST_RATES.YEARS_10]: 2.3,\n  [INTEREST_RATES.YEARS_15]: 2.7,\n  [INTEREST_RATES.YEARS_20]: 3,\n  [INTEREST_RATES.YEARS_25]: 3.4,\n};\n\nconst fakeInterestRates = () =>\n  Object.values(INTEREST_RATES).reduce(\n    (rates, type) => ({\n      ...rates,\n      [type]: getRandomInterestRate(FAKE_INTEREST_RATES_MEANS[type]),\n    }),\n    {},\n  );\n\nexport const createFakeInterestRates = ({ number }) => {\n  let dates = [];\n\n  for (let i = 0; i < number; i += 1) {\n    dates = [\n      ...dates,\n      moment()\n        .subtract(i, 'd')\n        .toDate(),\n    ];\n  }\n\n  const fakeRates = dates.map(date => ({\n    date,\n    ...fakeInterestRates(),\n  }));\n\n  fakeRates.forEach(rate => InterestRatesService.insert(rate));\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/index.js                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport { ROLES } from '../api/constants';\nimport InterestRatesService from '../api/interestRates/server/InterestRatesService';\nimport { createDevs, createAdmins } from './userFixtures';\nimport './promotionDemo/promotionFixturesMethods';\nimport { createFakeInterestRates } from './interestRatesFixtures';\n\nMeteor.startup(() => {\n  if (!Meteor.isAppTest) {\n    if (Meteor.users.find({ roles: { $in: [ROLES.DEV] } }).count() === 0) {\n      createDevs();\n      createAdmins();\n    }\n    if (InterestRatesService.countAll() === 0) {\n      createFakeInterestRates({ number: 10 });\n    }\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"promotionDemo\":{\"promotionFixturesMethods.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/promotionDemo/promotionFixturesMethods.js                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { createPromotionDemo } from './promotionDemoFixtures';\n\nMeteor.methods({\n  createDemoPromotion({\n    addCurrentUser,\n    withPromotionOptions,\n    users,\n    withInvitedBy,\n  } = {}) {\n    createPromotionDemo(\n      this.userId,\n      addCurrentUser,\n      withPromotionOptions,\n      Number.parseInt(users, 10),\n      withInvitedBy,\n    );\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"promotionDemoFixtures.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/promotionDemo/promotionDemoFixtures.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Roles } from 'meteor/alanning:roles';\nimport range from 'lodash/range';\nimport random from 'lodash/random';\nimport shuffle from 'lodash/shuffle';\nimport faker from 'faker/locale/fr';\n\nimport LoanService from '../../api/loans/server/LoanService';\nimport PromotionService from '../../api/promotions/server/PromotionService';\nimport UserService from '../../api/users/server/UserService';\nimport PromotionOptionService from '../../api/promotionOptions/server/PromotionOptionService';\nimport PromotionLotService from '../../api/promotionLots/server/PromotionLotService';\nimport LotService from '../../api/lots/server/LotService';\nimport {\n  LOT_TYPES,\n  PROMOTION_TYPES,\n  PROMOTION_STATUS,\n  ROLES,\n} from '../../api/constants';\nimport { properties } from './data';\n\nconst DEMO_PROMOTION = {\n  name: 'Pré Polly',\n  type: PROMOTION_TYPES.SHARE,\n  status: PROMOTION_STATUS.OPEN,\n  address1: 'Chemin de Pré-Polly 1',\n  zipCode: 1233,\n  city: 'Bernex',\n  contacts: [\n    {\n      name: 'Marc Steiner',\n      title: 'Commercialisation',\n      email: 'marc@test.com',\n      phoneNumber: '+41 21 800 90 70',\n    },\n    {\n      name: 'Léo Dind',\n      title: 'Architecte',\n      email: 'leo@test.com',\n      phoneNumber: '+41 58 999 21 21',\n    },\n  ],\n};\n\nconst createLots = (promotionId) => {\n  properties.forEach(({ name, value, lots }) => {\n    const promotionLotId = PromotionService.insertPromotionProperty({\n      promotionId,\n      property: { name, value },\n    });\n    const lotIds = lots.map(lotName =>\n      LotService.insert({\n        name: lotName,\n        value: 0,\n        type:\n          Number.parseInt(lotName, 10) > 0\n            ? LOT_TYPES.PARKING_CAR\n            : LOT_TYPES.BASEMENT,\n      }));\n    lotIds.forEach(lotId =>\n      PromotionLotService.addLink({\n        id: promotionLotId,\n        linkName: 'lots',\n        linkId: lotId,\n      }));\n    lotIds.forEach(lotId =>\n      PromotionService.addLink({\n        id: promotionId,\n        linkName: 'lots',\n        linkId: lotId,\n      }));\n  });\n};\n\nconst getDistinctRandomValues = (arr, amount) => shuffle(arr).slice(0, amount);\n\nconst addPromotionOptions = (loanId, promotion) => {\n  const amount = random(1, 3);\n  return getDistinctRandomValues(promotion.promotionLotLinks, amount).map(({ _id: promotionLotId }) => {\n    const promotionOptionId = PromotionOptionService.insert({\n      loanId,\n      promotionLotId,\n    });\n    return promotionOptionId;\n  });\n};\n\nconst createUsers = async ({\n  users,\n  promotionId,\n  promotion,\n  withInvitedBy,\n}) => {\n  console.log('creating users');\n  const promises = [];\n  for (let i = 0; i < range(users).length; i += 1) {\n    console.log(`creating user ${i + 1}`);\n\n    const user = {\n      email: `user-${i}@e-potek.ch`,\n      firstName: faker.name.firstName(),\n      lastName: faker.name.lastName(),\n      phoneNumber: faker.phone.phoneNumber(),\n    };\n\n    const promotionCustomerId = UserService.createUser({\n      role: ROLES.USER,\n      options: {\n        email: user.email,\n        password: '12345',\n      },\n    });\n\n    UserService.update({\n      userId: promotionCustomerId,\n      object: {\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phoneNumbers: [user.phoneNumber],\n      },\n    });\n\n    promises.push(PromotionService.inviteUser({\n      promotionId,\n      userId: promotionCustomerId,\n      sendInvitation: false,\n      ...(withInvitedBy ? { pro: { _id: Meteor.userId() } } : {}),\n    }).then((loanId) => {\n      const promotionOptionIds = addPromotionOptions(loanId, promotion);\n      LoanService.setPromotionPriorityOrder({\n        loanId,\n        promotionId,\n        priorityOrder: promotionOptionIds,\n      });\n    }));\n  }\n\n  await Promise.all(promises);\n};\n\nexport const createPromotionDemo = async (\n  userId,\n  addCurrentUser,\n  withPromotionOptions,\n  users,\n  withInvitedBy = false,\n) => {\n  console.log('Creating promotion demo...');\n  const promotionId = PromotionService.insert({\n    promotion: DEMO_PROMOTION,\n    userId,\n  });\n\n  console.log('creating lots');\n  createLots(promotionId);\n\n  const promotion = PromotionService.get(promotionId);\n\n  if (addCurrentUser) {\n    console.log('Adding current user');\n\n    const loanId = await PromotionService.inviteUser({\n      promotionId,\n      userId: Meteor.userId(),\n      sendInvitation: false,\n    });\n    if (withPromotionOptions) {\n      const promotionOptionIds = addPromotionOptions(loanId, promotion);\n      LoanService.setPromotionPriorityOrder({\n        loanId,\n        promotionId,\n        priorityOrder: promotionOptionIds,\n      });\n    }\n  }\n\n  await createUsers({\n    users,\n    promotionId,\n    promotion,\n    withInvitedBy,\n  });\n\n  console.log('Done creating promotion');\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"data.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/fixtures/promotionDemo/data.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const properties = [\n  {\n    name: '2.01',\n    value: 1290000,\n    lots: ['2', '3', 'a'],\n  },\n  {\n    name: '2.02',\n    value: 920000,\n    lots: ['4', '5', 'b'],\n  },\n  {\n    name: '2.03',\n    value: 950000,\n    lots: ['6', '7', 'c'],\n  },\n  {\n    name: '2.04',\n    value: 1340000,\n    lots: ['8', '9', 'd'],\n  },\n  {\n    name: '3.01',\n    value: 1360000,\n    lots: ['10', '11', 'e'],\n  },\n  {\n    name: '3.02',\n    value: 920000,\n    lots: ['12', '13', 'f'],\n  },\n  {\n    name: '3.03',\n    value: 970000,\n    lots: ['14', '15', 'g'],\n  },\n  {\n    name: '3.04',\n    value: 1410000,\n    lots: ['16', '17', 'h'],\n  },\n  {\n    name: '4.01',\n    value: 1370000,\n    lots: ['18', '19', 'i'],\n  },\n  {\n    name: '4.02',\n    value: 955000,\n    lots: ['1', 'j'],\n  },\n  {\n    name: '4.03',\n    value: 1460000,\n    lots: ['20', '21', 'k'],\n  },\n];\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"utils\":{\"zipcodes.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/zipcodes.js                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { CANTONS } from '../api/constants';\n\n// Each zipcode has a corresponding number, which is the index of all\n// cantons in an array, sorted by short form ('GE', 'ZH')\nexport const zipcodes = {\n  1000: 22,\n  1200: 7, // Edited to allow 1200 to be used as a zipcode in geneva\n  1260: 22,\n  1281: 7,\n  1291: 22,\n  1292: 7,\n  1295: 22,\n  1298: 7,\n  1299: 22,\n  1468: 6,\n  1509: 22,\n  1527: 6,\n  1530: 22,\n  1532: 6,\n  1534: 22,\n  1541: 6,\n  1543: 22,\n  1544: 6,\n  1545: 22,\n  1553: 6,\n  1554: 22,\n  1563: 6,\n  1580: 22,\n  1583: 6,\n  1584: 22,\n  1609: 6,\n  1610: 22,\n  1611: 6,\n  1612: 22,\n  1614: 6,\n  1657: 5,\n  1658: 22,\n  1661: 6,\n  1682: 22,\n  1684: 6,\n  1738: 5,\n  1740: 6,\n  1797: 5,\n  1800: 22,\n  1868: 23,\n  1880: 22,\n  1890: 23,\n  1892: 22,\n  1893: 23,\n  2000: 12,\n  2333: 5,\n  2336: 10,\n  2400: 12,\n  2502: 5,\n  2523: 12,\n  2532: 5,\n  2540: 18,\n  2542: 5,\n  2544: 18,\n  2552: 5,\n  2714: 10,\n  2715: 5,\n  2718: 10,\n  2720: 5,\n  2800: 10,\n  2814: 3,\n  2822: 10,\n  2827: 5,\n  2828: 10,\n  3004: 5,\n  3175: 6,\n  3176: 5,\n  3178: 6,\n  3179: 5,\n  3182: 6,\n  3183: 5,\n  3184: 6,\n  3202: 5,\n  3206: 6,\n  3207: 5,\n  3210: 6,\n  3225: 5,\n  3253: 18,\n  3255: 5,\n  3280: 6,\n  3282: 5,\n  3284: 6,\n  3292: 5,\n  3307: 18,\n  3308: 5,\n  3801: 23,\n  3803: 5,\n  3900: 23,\n  4001: 4,\n  4101: 3,\n  4108: 18,\n  4117: 3,\n  4118: 18,\n  4123: 3,\n  4125: 4,\n  4127: 3,\n  4143: 18,\n  4144: 3,\n  4145: 18,\n  4147: 3,\n  4204: 18,\n  4207: 3,\n  4208: 18,\n  4222: 3,\n  4226: 18,\n  4242: 3,\n  4245: 18,\n  4246: 3,\n  4247: 18,\n  4253: 3,\n  4303: 0,\n  4304: 3,\n  4305: 0,\n  4402: 3,\n  4412: 18,\n  4414: 3,\n  4421: 18,\n  4422: 3,\n  4468: 18,\n  4469: 3,\n  4500: 18,\n  4536: 5,\n  4542: 18,\n  4564: 5,\n  4565: 18,\n  4663: 0,\n  4702: 18,\n  4704: 5,\n  4710: 18,\n  4800: 0,\n  4806: 11,\n  4812: 0,\n  4900: 5,\n  4915: 11,\n  4916: 5,\n  5000: 0,\n  5012: 18,\n  5017: 0,\n  5735: 11,\n  5736: 0,\n  5746: 18,\n  6003: 11,\n  6042: 0,\n  6043: 11,\n  6052: 13,\n  6053: 14,\n  6083: 5,\n  6102: 11,\n  6197: 5,\n  6203: 11,\n  6300: 24,\n  6344: 11,\n  6345: 24,\n  6353: 11,\n  6362: 13,\n  6377: 21,\n  6382: 13,\n  6388: 14,\n  6402: 17,\n  6404: 11,\n  6405: 17,\n  6441: 21,\n  6442: 17,\n  6452: 21,\n  6500: 20,\n  6534: 9,\n  6571: 20,\n  7000: 9,\n  7310: 15,\n  7402: 9,\n  8001: 25,\n  8109: 0,\n  8112: 25,\n  8200: 16,\n  8212: 25,\n  8213: 16,\n  8245: 25,\n  8252: 19,\n  8260: 16,\n  8264: 19,\n  8302: 25,\n  8355: 19,\n  8400: 25,\n  8454: 16,\n  8457: 25,\n  8500: 19,\n  8523: 25,\n  8524: 19,\n  8542: 25,\n  8547: 19,\n  8548: 25,\n  8552: 19,\n  8600: 25,\n  8638: 15,\n  8700: 25,\n  8715: 15,\n  8750: 8,\n  8751: 21,\n  8752: 8,\n  8800: 25,\n  8806: 17,\n  8810: 25,\n  8832: 17,\n  8833: 25,\n  8834: 17,\n  8865: 8,\n  8872: 15,\n  8874: 8,\n  8877: 15,\n  8902: 25,\n  8905: 0,\n  8906: 25,\n  8916: 0,\n  8925: 25,\n  8956: 0,\n  9000: 15,\n  9035: 1,\n  9036: 15,\n  9037: 1,\n  9050: 2,\n  9052: 1,\n  9054: 2,\n  9055: 1,\n  9057: 2,\n  9062: 1,\n  9108: 2,\n  9112: 1,\n  9113: 15,\n  9213: 19,\n  9230: 15,\n  9306: 19,\n  9308: 15,\n  9314: 19,\n  9323: 15,\n  9325: 19,\n  9327: 15,\n  9405: 1,\n  9413: 2,\n  9414: 1,\n  9422: 15,\n  9426: 1,\n  9430: 15,\n  9442: 2,\n  9443: 15,\n  9485: 26,\n  9500: 15,\n  9502: 19,\n  9512: 15,\n  9514: 19,\n  9523: 15,\n  9532: 19,\n  9533: 15,\n  9535: 19,\n  9536: 15,\n  9542: 19,\n  9552: 15,\n  9553: 19,\n  9601: 15,\n  9999: 5,\n};\n\nexport default (zipcode) => {\n  let result;\n\n  if (zipcode > 9999 || zipcode < 1000) {\n    return null;\n  }\n\n  Object.keys(zipcodes).some((code) => {\n    if (zipcode >= code) {\n      result = code;\n      return false;\n    }\n    return true;\n  });\n\n  const cantonIndex = zipcodes[result];\n\n  const canton = Object.keys(CANTONS)[cantonIndex];\n  return canton;\n};\n\n/**\n * Returns the first zipcode that matches the given canton\n *\n * @param {String} canton\n * @returns Number\n */\nexport const getZipcodeForCanton = (canton) => {\n  const cantonIndex = Object.keys(CANTONS).findIndex(c => c === canton);\n\n  return Object.keys(zipcodes).find((zipcode) => {\n    const cantonIndexForZipcode = zipcodes[zipcode];\n    return cantonIndexForZipcode === cantonIndex;\n  });\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"loanFunctions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/loanFunctions.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { STEPS, TASK_STATUS } from '../api/constants';\nimport Calculator from './Calculator';\n\nexport const formatLoanWithStructure = ({\n  selectedStructure,\n  structures = [],\n  properties,\n  offers,\n  promotionOptions,\n  borrowers = [],\n}) => {\n  if (structures.length === 0) {\n    return undefined;\n  }\n\n  let structure = {};\n\n  if (selectedStructure) {\n    const foundStructure = structures.find(({ id }) => id === selectedStructure);\n\n    if (foundStructure) {\n      structure = foundStructure;\n\n      if (structure.propertyId) {\n        const property = properties.find(({ _id }) => _id === structure.propertyId);\n        structure = { ...structure, property };\n      }\n\n      if (structure.promotionOptionId) {\n        const promotionOption = promotionOptions.find(({ _id }) => _id === structure.promotionOptionId);\n        structure = {\n          ...structure,\n          property: Calculator.formatPromotionOptionIntoProperty(promotionOption),\n        };\n      }\n\n      if (structure.offerId) {\n        const offer = offers.find(({ _id }) => _id === structure.offerId);\n        structure = { ...structure, offer };\n      }\n\n      if (structure.mortgageNoteIds) {\n        const borrowerMortgageNotes = borrowers.reduce(\n          (arr, { mortgageNotes: notes = [] }) => [...arr, ...notes],\n          [],\n        );\n        const mortgageNotes = structure.mortgageNoteIds.map(id =>\n          borrowerMortgageNotes.find(({ _id }) => _id === id));\n\n        structure = { ...structure, mortgageNotes };\n      }\n    } else {\n      structure = {};\n    }\n\n    return structure;\n  }\n\n  return structure;\n};\n\nexport const formatLoanWithDocuments = (loan) => {\n  if (!loan || !loan.structure) {\n    return loan;\n  }\n\n  const { structure, properties = [] } = loan;\n  const { property, propertyId } = structure;\n  const structureProperty = properties.find(({ _id }) => _id === propertyId);\n  const propertyDocuments = structureProperty && structureProperty.documents;\n\n  return {\n    ...loan,\n    structure: {\n      ...structure,\n      property: property && {\n        ...property,\n        documents: propertyDocuments,\n      },\n    },\n  };\n};\n\nexport const formatLoanWithPromotion = (loan) => {\n  if (loan.structure.promotionOptionId) {\n    const property = Calculator.selectProperty({\n      loan,\n      // Do this to make sure we're getting the promotionOption and not the\n      // fake property created from it\n      structureId: loan.structure.id,\n    });\n    return { ...loan, structure: { ...loan.structure, property } };\n  }\n\n  return loan;\n};\n\nexport const shouldSendStepNotification = (prevStep, nextStep) =>\n  (prevStep === STEPS.SOLVENCY || prevStep === STEPS.REQUEST)\n  && nextStep === STEPS.OFFERS;\n\nexport const nextDueTaskReducer = ({ tasksCache: tasks = [] }) => {\n  const activeTasks = tasks.filter(({\n    status: taskStatus,\n    isPrivate = false,\n    assigneeLink: { _id: assigneeId } = {},\n  }) => {\n    if (taskStatus !== TASK_STATUS.ACTIVE) {\n      return false;\n    }\n\n    if (isPrivate && assigneeId) {\n      return assigneeId === Meteor.userId();\n    }\n\n    return true;\n  });\n  const tasksWithoutDate = activeTasks\n    .filter(({ dueAt }) => !dueAt)\n    .sort(({ createdAt: A }, { createdAt: B }) => A - B);\n\n  if (tasksWithoutDate.length > 0) {\n    const task = tasksWithoutDate[0];\n    return { ...task, dueAt: task.createdAt, noDueDate: true };\n  }\n\n  const sortedTasks = activeTasks.sort(({ dueAt: A }, { dueAt: B }) => A - B);\n\n  if (sortedTasks.length > 0) {\n    return sortedTasks[0];\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Calculator\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/index.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { compose } from 'recompose';\n\nimport { FinanceCalculator } from '../FinanceCalculator';\nimport { withLoanCalculator } from './LoanCalculator';\nimport { withBorrowerCalculator } from './BorrowerCalculator';\nimport { withOfferCalculator } from './OfferCalculator';\nimport { withPropertyCalculator } from './PropertyCalculator';\nimport { withPromotionCalculator } from './PromotionCalculator';\nimport { withCombinedCalculator } from './CombinedCalculator';\nimport { withSelector } from './Selector';\nimport { withLenderRulesInitializator } from './LenderRulesInitializator';\nimport { withSolvencyCalculator } from './SolvencyCalculator';\nimport { withConfig } from './classUtils';\nimport { financeCalculatorArgumentMapper } from './middleware';\n\nconst MappedFinanceCalculator = withConfig({\n  middlewareObject: financeCalculatorArgumentMapper,\n})(FinanceCalculator);\n\n// Put CombinedCalculator first, so that it can modify the following calculators\n// with middleware\nexport const Calculator = compose(\n  withLenderRulesInitializator,\n  withSolvencyCalculator,\n  withCombinedCalculator,\n  withPromotionCalculator,\n  withLoanCalculator,\n  withBorrowerCalculator,\n  withPropertyCalculator,\n  withOfferCalculator,\n  withSelector,\n)(MappedFinanceCalculator);\n\nexport default new Calculator({});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"middleware.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/middleware.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\n\n// Map loan onto FinanceCalculator\n\nimport { makeArgumentMapper } from '../MiddlewareManager';\nimport memoizeOne from '../memoizeOne';\n\nconst argumentMappings = {};\n\nexport const financeCalculatorArgumentMapper = makeArgumentMapper(argumentMappings);\n\nexport const borrowerExtractorMiddleware = () => next => (params, ...args) => {\n  if (params && params.loan && !params.borrowers) {\n    return next({ ...params, borrowers: params.loan.borrowers }, ...args);\n  }\n  return next(params, ...args);\n};\n\nexport const memoizeMiddleware = () => (next) => {\n  const memoFunc = memoizeOne(next);\n  return memoFunc;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"LoanCalculator.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/LoanCalculator.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { OWN_FUNDS_TYPES } from 'core/api/constants';\nimport { getLoanDocuments } from '../../api/files/documents';\nimport { OWN_FUNDS_USAGE_TYPES } from '../../api/constants';\nimport {\n  filesPercent,\n  getMissingDocumentIds,\n} from '../../api/files/fileHelpers';\nimport getRefinancingFormArray from '../../arrays/RefinancingFormArray';\nimport NotaryFeesCalculator from '../notaryFees/NotaryFeesCalculator';\nimport { getCountedArray } from '../formArrayHelpers';\nimport { getPercent } from '../general';\n\nexport const withLoanCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    getProjectValue({ loan, structureId }) {\n      const propAndWork = this.getPropAndWork({ loan, structureId });\n      if (!propAndWork) {\n        return 0;\n      }\n\n      const value = propAndWork + this.getFees({ loan, structureId }).total;\n\n      return value;\n    }\n\n    getTotalUsed({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'ownFunds',\n      });\n      return ownFunds.reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getTotalPledged({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'ownFunds',\n      });\n      return ownFunds\n        .filter(({ usageType }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getFees({ loan, structureId }): number {\n      const notaryFees = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'notaryFees',\n      });\n\n      // Custom notary fees are provided\n      if (notaryFees === 0 || notaryFees) {\n        return { total: notaryFees };\n      }\n\n      const calculator = this.getFeesCalculator({ loan, structureId });\n\n      const calculatedNotaryFees = calculator.getNotaryFeesForLoan({\n        loan,\n        structureId,\n      });\n\n      return calculatedNotaryFees;\n    }\n\n    getFeesCalculator({ loan, structureId }) {\n      const canton = this.selectPropertyKey({\n        loan,\n        structureId,\n        key: 'canton',\n      });\n      return new NotaryFeesCalculator({ canton });\n    }\n\n    getInterests({ loan, interestRates, structureId }) {\n      let finalInterestRates = interestRates || loan.currentInterestRates;\n      const offer = this.selectStructureKey({\n        loan,\n        key: 'offer',\n        structureId,\n      });\n      const loanTranches = this.selectStructureKey({\n        loan,\n        key: 'loanTranches',\n        structureId,\n      });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      if (offer) {\n        finalInterestRates = offer;\n      }\n\n      const interests = this.getInterestsWithTranches({\n        tranches: loanTranches,\n        interestRates: finalInterestRates,\n      });\n\n      return (interests * loanValue) / 12;\n    }\n\n    getTheoreticalInterests({ loan, structureId }) {\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      const propertyValue = this.selectPropertyValue({ loan, structureId });\n      const propertyWork = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'propertyWork',\n      }) || 0;\n      const firstRank = Math.min(\n        loanValue,\n        this.amortizationGoal * (propertyValue + propertyWork),\n      );\n      const secondRank = Math.max(0, loanValue - firstRank);\n\n      const firstRankInterests = firstRank * this.theoreticalInterestRate;\n      const secondRankInterests = secondRank\n        * (this.theoreticalInterestRate2ndRank || this.theoreticalInterestRate);\n\n      return (firstRankInterests + secondRankInterests) / 12;\n    }\n\n    getTheoreticalMaintenance({ loan, structureId }) {\n      return (\n        (this.getPropAndWork({ loan, structureId })\n          * this.theoreticalMaintenanceRate)\n        / 12\n      );\n    }\n\n    getAmortization({ loan, structureId, offerOverride }) {\n      const offer = this.selectOffer({ loan, structureId });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      const offerToUse = offerOverride || offer;\n\n      if (offerToUse) {\n        // Temporarily change amortizationGoal\n        const oldAmortizationGoal = this.amortizationGoal;\n        this.amortizationGoal = offerToUse.amortizationGoal;\n\n        const amortizationRate = this.getAmortizationRate({\n          loan,\n          amortizationYears: offerToUse.amortizationYears,\n          structureId,\n        });\n\n        const amortization = (amortizationRate * loanValue) / 12;\n\n        this.amortizationGoal = oldAmortizationGoal;\n\n        return amortization;\n      }\n\n      const amortizationRate = this.getAmortizationRate({ loan, structureId });\n      return (amortizationRate * loanValue) / 12;\n    }\n\n    getTheoreticalAmortization({ loan, structureId }) {\n      const loanValue = this.selectLoanValue({ loan, structureId });\n\n      return (this.getAmortizationRate({ loan, structureId }) * loanValue) / 12;\n    }\n\n    getAmortizationRate({ loan, amortizationYears, structureId }) {\n      const borrowRatio = this.getBorrowRatio({ loan, structureId });\n      return this.getAmortizationRateBase({\n        borrowRatio,\n        amortizationYears,\n        // Prevent caching of this function if amortizationGoal has changed\n        cacheFix: this.amortizationGoal,\n      });\n    }\n\n    getMonthly({ loan, interestRates, structureId }) {\n      return (\n        this.getInterests({ loan, interestRates, structureId })\n        + this.getAmortization({ loan, structureId })\n      );\n    }\n\n    getTheoreticalPropertyCost({ loan, structureId, asObject = false }) {\n      const interests = this.getTheoreticalInterests({ loan, structureId });\n      const amortization = this.getTheoreticalAmortization({\n        loan,\n        structureId,\n      });\n      const maintenance = this.getTheoreticalMaintenance({ loan, structureId });\n      return asObject\n        ? {\n          interests,\n          amortization,\n          maintenance,\n          total: interests + amortization + maintenance,\n        }\n        : interests + amortization + maintenance;\n    }\n\n    getTheoreticalMonthly({ loan, structureId }) {\n      const propertyCost = this.getTheoreticalPropertyCost({\n        loan,\n        structureId,\n      });\n      const expensesToAddToTheoreticalCost = this.getFormattedExpenses({ loan, structureId }).add / 12;\n\n      return propertyCost + expensesToAddToTheoreticalCost;\n    }\n\n    getIncomeRatio({ loan, structureId }) {\n      const cost = this.getTheoreticalMonthly({ loan, structureId });\n      const income = this.getTotalIncome({ borrowers: loan.borrowers });\n      const ratio = cost / (income / 12);\n\n      if (ratio > 1 || ratio < 0) {\n        return 1;\n      }\n\n      return ratio;\n    }\n\n    getBorrowRatio({ loan, structureId }) {\n      const wantedLoan = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'wantedLoan',\n      });\n      const propAndWork = this.getPropAndWork({ loan, structureId });\n      return wantedLoan / propAndWork;\n    }\n\n    getMaxBorrowRatio() {\n      return this.maxBorrowRatio;\n    }\n\n    loanHasMinimalInformation({ loan }) {\n      const structure = this.selectStructure({ loan });\n\n      return !!(\n        structure.ownFunds\n        && structure.ownFunds.length > 0\n        && this.selectPropertyValue({ loan })\n        && this.selectLoanValue({ loan })\n      );\n    }\n\n    getLoanFilesProgress({ loan }) {\n      return filesPercent({ fileArray: getLoanDocuments({ loan }), doc: loan });\n    }\n\n    getMissingLoanDocuments({ loan }) {\n      return getMissingDocumentIds({\n        fileArray: getLoanDocuments({ loan }),\n        doc: loan,\n      });\n    }\n\n    getTotalFinancing({ loan, structureId }) {\n      return (\n        this.selectStructureKey({ loan, structureId, key: 'wantedLoan' })\n        + this.getNonPledgedOwnFunds({ loan, structureId })\n      );\n    }\n\n    getNonPledgedOwnFunds({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({ loan, structureId, key: 'ownFunds' }) || [];\n      return ownFunds\n        .filter(({ usageType }) => usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getPledgedOwnFunds({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({ loan, structureId, key: 'ownFunds' }) || [];\n      return ownFunds\n        .filter(({ usageType }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getUsedFundsOfType({ loan, type, usageType, structureId }) {\n      const ownFunds = this.selectStructureKey({ loan, structureId, key: 'ownFunds' }) || [];\n      return ownFunds\n        .filter(({ type: ownFundType }) => (type ? ownFundType === type : true))\n        .filter(({ usageType: ownFundUsageType }) =>\n          (usageType ? ownFundUsageType === usageType : true))\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getRemainingFundsOfType({ loan, structureId, type }) {\n      const ownFunds = this.getFunds({ loan, type, structureId });\n      return (\n        ownFunds\n        - this.getUsedFundsOfType({\n          loan,\n          type,\n          structureId,\n          usageType:\n            type !== OWN_FUNDS_TYPES.BANK_FORTUNE\n              ? OWN_FUNDS_USAGE_TYPES.WITHDRAW\n              : undefined,\n        })\n      );\n    }\n\n    getTotalRemainingFunds({ loan, structureId }) {\n      // Don't count extra third party fortune, as it is not a real \"loan\" from them\n      return Object.values(OWN_FUNDS_TYPES)\n        .filter(type => type !== OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE)\n        .reduce(\n          (sum, type) =>\n            sum + this.getRemainingFundsOfType({ loan, structureId, type }),\n          0,\n        );\n    }\n\n    refinancingPercent({ loan }) {\n      const array = getCountedArray(getRefinancingFormArray({ loan }), loan);\n      return getPercent(array);\n    }\n\n    getMortgageNoteIncrease({ loan, structureId }) {\n      const { borrowers = [] } = loan;\n      const { mortgageNoteIds = [] } = this.selectStructure({\n        loan,\n        structureId,\n      });\n\n      const { mortgageNotes: propertyMortgageNotes = [] } = this.selectProperty({ loan, structureId });\n      const borrowerMortgageNotes = this.getMortgageNotes({ borrowers });\n      const structureMortgageNotes = mortgageNoteIds.map(id =>\n        borrowerMortgageNotes.find(({ _id }) => _id === id));\n\n      const allMortgageNotes = [\n        ...structureMortgageNotes,\n        ...propertyMortgageNotes,\n      ];\n      const mortgageNoteValue = allMortgageNotes.reduce(\n        (total, { value }) => total + (value || 0),\n        0,\n      );\n      const loanValue = this.selectLoanValue({ loan, structureId });\n\n      return Math.max(0, loanValue - mortgageNoteValue);\n    }\n\n    getCashUsed({ loan, structureId }) {\n      const { ownFunds } = this.selectStructure({ loan, structureId });\n\n      return ownFunds\n        .filter(({ type, usageType }) =>\n          type !== OWN_FUNDS_TYPES.INSURANCE_2\n            && usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getCashRatio({ loan, structureId }) {\n      const propAndWork = this.getPropAndWork({ loan, structureId });\n      const fees = this.getFees({ loan, structureId }).total;\n      const cashUsed = this.getCashUsed({ loan, structureId });\n\n      const cashRatio = (cashUsed - fees) / propAndWork;\n      return cashRatio;\n    }\n\n    hasEnoughCash({ loan, structureId }) {\n      return this.getCashRatio({ loan, structureId }) >= this.minCash;\n    }\n\n    structureIsValid({ loan, structureId }) {\n      const incomeRatio = this.getIncomeRatio({ loan, structureId });\n      const borrowRatio = this.getBorrowRatio({ loan, structureId });\n\n      if (\n        incomeRatio > this.maxIncomeRatio\n        || borrowRatio > this.maxBorrowRatio\n      ) {\n        return false;\n      }\n\n      if (\n        !this.allowPledge\n        && this.getPledgedOwnFunds({ loan, structureId }) > 0\n      ) {\n        return false;\n      }\n\n      return true;\n    }\n\n    getEstimatedRevenues({ loan, structureId }) {\n      const propertyValue = this.selectPropertyValue({ loan, structureId });\n      return propertyValue * this.estimatedCommission;\n    }\n\n    getEstimatedReferralRevenues({ loan, structureId }) {\n      return (\n        this.getEstimatedRevenues({ loan, structureId })\n        * this.referralCommission\n      );\n    }\n\n    getRequiredOwnFunds({ loan, structureId }) {\n      const projectValue = this.getProjectValue({ loan, structureId });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      return projectValue - loanValue;\n    }\n\n    getMissingOwnFunds({ loan, structureId }) {\n      const fundsRequired = this.getRequiredOwnFunds({ loan, structureId });\n      const totalCurrentFunds = this.getNonPledgedOwnFunds({\n        loan,\n        structureId,\n      });\n\n      return fundsRequired - totalCurrentFunds;\n    }\n\n    isMissingOwnFunds({ loan, structureId }) {\n      const missingOwnFunds = this.getMissingOwnFunds({ loan, structureId });\n      return missingOwnFunds >= this.ownFundsRoundingAmount;\n    }\n\n    hasTooMuchOwnFunds({ loan, structureId }) {\n      const missingOwnFunds = this.getMissingOwnFunds({ loan, structureId });\n      return missingOwnFunds <= -this.ownFundsRoundingAmount;\n    }\n\n    hasCompleteStructure({ loan }) {\n      return loan.structures.some(({ id }) => {\n        const fundsRequired = this.getRequiredOwnFunds({\n          loan,\n          structureId: id,\n        });\n\n        if (fundsRequired === 0) {\n          return false;\n        }\n\n        if (\n          !this.isMissingOwnFunds({ loan, structureId: id })\n          && !this.hasTooMuchOwnFunds({ loan, structureId: id })\n        ) {\n          return true;\n        }\n\n        return false;\n      });\n    }\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"BorrowerCalculator.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/BorrowerCalculator.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { OWN_FUNDS_TYPES } from 'imports/core/api/constants';\nimport { getBorrowerDocuments } from 'imports/core/api/files/documents';\nimport {\n  filesPercent,\n  getMissingDocumentIds,\n} from '../../api/files/fileHelpers';\nimport {\n  getBorrowerInfoArray,\n  getBorrowerFinanceArray,\n  getBorrowerSimpleArray,\n} from '../../arrays/BorrowerFormArray';\nimport { arrayify, getPercent } from '../general';\nimport {\n  getCountedArray,\n  getMissingFieldIds,\n  getFormValuesHashMultiple,\n} from '../formArrayHelpers';\nimport MiddlewareManager from '../MiddlewareManager';\nimport { INCOME_CONSIDERATION_TYPES, EXPENSE_TYPES } from '../../api/constants';\nimport { borrowerExtractorMiddleware } from './middleware';\nimport {\n  BONUS_ALGORITHMS,\n  REAL_ESTATE_INCOME_ALGORITHMS,\n} from '../../config/financeConstants';\n\nexport const withBorrowerCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    constructor(config) {\n      super(config);\n      this.initBorrowerCalculator(config);\n    }\n\n    initBorrowerCalculator(config) {\n      const middleware = (config && config.borrowerMiddleware) || borrowerExtractorMiddleware;\n      const middlewareManager = new MiddlewareManager(this);\n      middlewareManager.applyToAllMethods([middleware]);\n    }\n\n    getArrayValues({ borrowers, key, mapFunc }) {\n      let sum = 0;\n\n      arrayify(borrowers).forEach((borrower) => {\n        if (!borrower[key]) {\n          return 0;\n        }\n        sum += [\n          ...(borrower[key] && borrower[key].length > 0\n            ? borrower[key].map(mapFunc || (i => i.value))\n            : []),\n        ].reduce((tot, val) => (val > 0 && tot + val) || tot, 0);\n      });\n\n      return Math.max(0, Math.round(sum));\n    }\n\n    getBonuses({ borrowers }) {\n      return arrayify(borrowers).reduce((obj, borrower) => {\n        if (!borrower.bonusExists) {\n          return obj;\n        }\n\n        const bonusKeys = Object.keys(borrower).filter(key =>\n          key.includes('bonus')\n            && key !== 'bonusExists'\n            && borrower[key] >= 0\n            && borrower[key] !== null);\n\n        bonusKeys.forEach((key) => {\n          const value = borrower[key];\n\n          if (obj[key]) {\n            obj = { ...obj, [key]: obj[key] + value };\n          } else {\n            obj = { ...obj, [key]: value };\n          }\n        });\n\n        return obj;\n      }, {});\n    }\n\n    getBonusIncome({ borrowers }) {\n      const bonusKeys = [\n        'bonus2015',\n        'bonus2016',\n        'bonus2017',\n        'bonus2018',\n        'bonus2019',\n      ];\n      const total = arrayify(borrowers).reduce((acc, borrower) => {\n        if (!borrower.bonusExists) {\n          return acc + 0;\n        }\n\n        const arr = bonusKeys\n          .map(key => borrower[key])\n          .filter(val =>\n            (this.bonusAlgorithm === BONUS_ALGORITHMS.WEAK_AVERAGE\n              ? val > 0\n              : true));\n\n        return (\n          acc\n          + this.getConsideredValue({\n            values: arr,\n            history: this.bonusHistoryToConsider,\n            weighting: this.bonusConsideration,\n          })\n        );\n      }, 0);\n      return Math.max(0, Math.round(total));\n    }\n\n    getConsideredValue({ values, history, weighting }) {\n      const valuesToConsider = values.slice(Math.max(0, values.length - history));\n      const sum = valuesToConsider.reduce((tot, val = 0) => tot + val, 0);\n      return (weighting * sum) / valuesToConsider.length || 0;\n    }\n\n    getBorrowerCompletion({ loan, borrowers }) {\n      return (\n        (this.getBorrowerFilesProgress({ loan, borrowers }).percent\n          + this.personalInfoPercent({ borrowers }))\n        / 2\n      );\n    }\n\n    getBorrowerFilesProgress({ loan, borrowers }) {\n      const percentages = arrayify(borrowers).reduce(\n        (total, borrower) => {\n          const { percent, count } = filesPercent({\n            fileArray: getBorrowerDocuments({ loan, id: borrower._id }, this),\n            doc: borrower,\n          });\n          return {\n            percent: total.percent + percent * count,\n            count: total.count + count,\n          };\n        },\n        { percent: 0, count: 0 },\n      );\n\n      return {\n        ...percentages,\n        percent:\n          percentages.count === 0 ? 1 : percentages.percent / percentages.count,\n      };\n    }\n\n    isTypeWithArrayValues = type =>\n      [\n        OWN_FUNDS_TYPES.INSURANCE_2,\n        OWN_FUNDS_TYPES.INSURANCE_3A,\n        OWN_FUNDS_TYPES.BANK_3A,\n        OWN_FUNDS_TYPES.INSURANCE_3B,\n      ].includes(type);\n\n    getFunds({ borrowers, type }) {\n      if (this.isTypeWithArrayValues(type)) {\n        return this.getArrayValues({ borrowers, key: type });\n      }\n\n      return this.sumValues({ borrowers, keys: type });\n    }\n\n    getFortune({ borrowers }) {\n      return this.sumValues({ borrowers, keys: OWN_FUNDS_TYPES.BANK_FORTUNE });\n    }\n\n    getThirdPartyFortune({ borrowers }) {\n      const val = this.sumValues({\n        borrowers,\n        keys: OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n      });\n      return val;\n    }\n\n    getExpenses({ borrowers }) {\n      return this.getArrayValues({ borrowers, key: 'expenses' });\n    }\n\n    getInsurance2({ borrowers }) {\n      return this.getArrayValues({\n        borrowers,\n        key: OWN_FUNDS_TYPES.INSURANCE_2,\n      });\n    }\n\n    getInsurance3A({ borrowers }) {\n      return this.getArrayValues({\n        borrowers,\n        key: OWN_FUNDS_TYPES.INSURANCE_3A,\n      });\n    }\n\n    getBank3A({ borrowers }) {\n      return this.getArrayValues({ borrowers, key: OWN_FUNDS_TYPES.BANK_3A });\n    }\n\n    getInsurance3B({ borrowers }) {\n      return this.getArrayValues({\n        borrowers,\n        key: OWN_FUNDS_TYPES.INSURANCE_3B,\n      });\n    }\n\n    getInsuranceFortune({ borrowers }) {\n      return [\n        this.getInsurance2,\n        this.getInsurance3A,\n        this.getInsurance3B,\n        this.getBank3A,\n      ].reduce((sum, func) => sum + func({ borrowers }), 0);\n    }\n\n    getCashFortune({ borrowers }) {\n      return [\n        this.getFortune,\n        this.getThirdPartyFortune,\n        this.getInsurance3A,\n        this.getInsurance3B,\n        this.getBank3A,\n      ].reduce((sum, func) => sum + func({ borrowers }), 0);\n    }\n\n    getMissingBorrowerFields({ borrowers }) {\n      const res = arrayify(borrowers).reduce((missingIds, borrower) => {\n        const formArray = getBorrowerInfoArray({\n          borrowers: arrayify(borrowers),\n          borrowerId: borrower._id,\n        });\n        const formArray2 = getBorrowerFinanceArray({\n          borrowers: arrayify(borrowers),\n          borrowerId: borrower._id,\n        });\n\n        return [\n          ...missingIds,\n          ...getMissingFieldIds(formArray, borrower),\n          ...getMissingFieldIds(formArray2, borrower),\n        ];\n      }, []);\n\n      return res;\n    }\n\n    getMissingBorrowerDocuments({ loan, borrowers }) {\n      return arrayify(borrowers).reduce(\n        (missingIds, borrower) => [\n          ...missingIds,\n          ...getMissingDocumentIds({\n            doc: borrower,\n            fileArray: getBorrowerDocuments({ loan, id: borrower._id }, this),\n          }),\n        ],\n        [],\n      );\n    }\n\n    getOtherFortune({ borrowers }) {\n      return this.getArrayValues({ borrowers, key: 'otherFortune' });\n    }\n\n    getOtherIncome({ borrowers }) {\n      return this.getArrayValues({ borrowers, key: 'otherIncome' });\n    }\n\n    getTotalFunds({ borrowers }) {\n      return (\n        this.getFortune({ borrowers })\n        + this.getThirdPartyFortune({ borrowers })\n        + this.getInsuranceFortune({ borrowers })\n      );\n    }\n\n    getRealEstateFortune({ borrowers }) {\n      return this.getArrayValues({\n        borrowers,\n        key: 'realEstate',\n        mapFunc: ({ value = 0, loan = 0 }) => value - loan,\n      });\n    }\n\n    getRealEstateValue({ borrowers }) {\n      return this.getArrayValues({ borrowers, key: 'realEstate' });\n    }\n\n    getRealEstateDebt({ borrowers }) {\n      return this.getArrayValues({\n        borrowers,\n        key: 'realEstate',\n        mapFunc: ({ loan = 0 }) => loan,\n      });\n    }\n\n    getRealEstateIncome({ borrowers }) {\n      const realEstateIncome = this.getArrayValues({\n        borrowers,\n        key: 'realEstate',\n        mapFunc: ({ income = 0 }) => income,\n      }) * this.realEstateIncomeConsideration;\n\n      return realEstateIncome;\n    }\n\n    getRealEstateIncomeTotal({ borrowers }) {\n      if (\n        this.realEstateIncomeAlgorithm\n        === REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT\n      ) {\n        return 0;\n      }\n\n      return this.getRealEstateIncome({ borrowers });\n    }\n\n    shouldUseNetSalary() {\n      return this.incomeConsiderationType === INCOME_CONSIDERATION_TYPES.NET;\n    }\n\n    getSalary({ borrowers }) {\n      if (this.shouldUseNetSalary()) {\n        return this.getNetSalary({ borrowers });\n      }\n      return this.sumValues({ borrowers, keys: 'salary' });\n    }\n\n    getNetSalary({ borrowers }) {\n      return this.sumValues({ borrowers, keys: 'netSalary' });\n    }\n\n    getFortuneReturns({ borrowers }) {\n      if (this.fortuneReturnsRatio) {\n        return this.fortuneReturnsRatio * this.getFortune({ borrowers });\n      }\n\n      return 0;\n    }\n\n    getTotalIncome({ borrowers }) {\n      let sum = arrayify(borrowers).reduce((total, borrower) => {\n        let borrowerIncome = 0;\n        borrowerIncome += this.getSalary({ borrowers: borrower }) || 0;\n        borrowerIncome += this.getBonusIncome({ borrowers: borrower }) || 0;\n        borrowerIncome += this.getOtherIncome({ borrowers: borrower }) || 0;\n        borrowerIncome += this.getFortuneReturns({ borrowers: borrower }) || 0;\n        borrowerIncome\n          += this.getRealEstateIncomeTotal({ borrowers: borrower }) || 0;\n        return total + borrowerIncome;\n      }, 0);\n\n      sum -= this.getFormattedExpenses({ borrowers }).subtract || 0;\n\n      return sum;\n    }\n\n    getRetirement({ borrowers }) {\n      const argMap = borrowers.reduce(\n        (obj, { age, gender }, index) => ({\n          ...obj,\n          [`${`age${index + 1}`}`]: age,\n          [`${`gender${index + 1}`}`]: gender,\n        }),\n        {},\n      );\n      return this.getYearsToRetirement(argMap);\n    }\n\n    getAmortizationDuration({ borrowers }) {\n      const retirement = this.getRetirement({ borrowers });\n      return Math.min(15, retirement);\n    }\n\n    // personalInfoPercent - Determines the completion rate of the borrower's\n    // personal information forms\n    personalInfoPercent({ borrowers }) {\n      if (!borrowers || (Array.isArray(borrowers) && !borrowers.length)) {\n        return 0;\n      }\n\n      const array = arrayify(borrowers).reduce((arr, b) => {\n        const personalFormArray = getBorrowerInfoArray({\n          borrowers: arrayify(borrowers),\n          borrowerId: b._id,\n        });\n        const financeFormArray = getBorrowerFinanceArray({\n          borrowers: arrayify(borrowers),\n          borrowerId: b._id,\n        });\n        return [\n          ...arr,\n          ...getCountedArray(personalFormArray, b),\n          ...getCountedArray(financeFormArray, b),\n        ];\n      }, []);\n\n      return getPercent(array);\n    }\n\n    personalInfoPercentSimple({ borrowers, loan }) {\n      if ((!borrowers || !borrowers.length) && !loan.borrowers.length) {\n        return 0;\n      }\n      const array = arrayify(borrowers).reduce((arr, b) => {\n        const simpleFormArray = getBorrowerSimpleArray({\n          borrowers: arrayify(borrowers),\n          borrowerId: b._id,\n          loan,\n        });\n        return [...arr, ...getCountedArray(simpleFormArray, b)];\n      }, []);\n\n      return getPercent(array);\n    }\n\n    borrowerInfoPercent({ borrowers }) {\n      if (!borrowers || !borrowers.length) {\n        return 0;\n      }\n      const array = arrayify(borrowers).reduce((arr, b) => {\n        const personalFormArray = getBorrowerInfoArray({\n          borrowers: arrayify(borrowers),\n          borrowerId: b._id,\n        });\n        return [...arr, ...getCountedArray(personalFormArray, b)];\n      }, []);\n\n      return getPercent(array);\n    }\n\n    borrowerFinancePercent({ borrowers }) {\n      const array = arrayify(borrowers).reduce((arr, b) => {\n        const financeFormArray = getBorrowerFinanceArray({\n          borrowers: arrayify(borrowers),\n          borrowerId: b._id,\n        });\n        return [...arr, ...getCountedArray(financeFormArray, b)];\n      }, []);\n\n      return getPercent(array);\n    }\n\n    getBorrowerFormHash({ borrowers }) {\n      return getFormValuesHashMultiple(arrayify(borrowers).reduce(\n        (arr, borrower) => [\n          ...arr,\n          {\n            formArray: getBorrowerFinanceArray({\n              borrowers: arrayify(borrowers),\n              borrowerId: borrower._id,\n            }),\n            doc: borrower,\n          },\n          {\n            formArray: getBorrowerInfoArray({\n              borrowers: arrayify(borrowers),\n              borrowerId: borrower._id,\n            }),\n            doc: borrower,\n          },\n        ],\n        [],\n      ));\n    }\n\n    sumValues({ borrowers, keys }) {\n      return arrayify(keys).reduce(\n        (total, key) =>\n          total + arrayify(borrowers).reduce((t, b) => t + (b[key] || 0), 0),\n        0,\n      );\n    }\n\n    getNetFortune({ borrowers }) {\n      return (\n        this.getTotalFunds({ borrowers })\n        + this.getRealEstateFortune({ borrowers })\n        + this.getOtherFortune({ borrowers })\n      );\n    }\n\n    getMortgageNotes({ borrowers }) {\n      return borrowers.reduce(\n        (arr, { mortgageNotes: notes = [] }) => [...arr, ...notes],\n        [],\n      );\n    }\n\n    getRealEstateExpenses({ borrowers }) {\n      const realEstate = arrayify(borrowers).reduce(\n        (arr, borrower) => [...arr, ...(borrower.realEstate || [])],\n        [],\n      );\n      const realEstateCost = realEstate.reduce(\n        (tot, obj) => tot + this.getRealEstateCost(obj),\n        0,\n      );\n\n      return realEstateCost;\n    }\n\n    getRealEstateDeltas({ borrowers }) {\n      const allRealEstate = arrayify(borrowers)\n        .map(({ realEstate }) => realEstate)\n        .reduce((arr, realEstate) => [...arr, ...realEstate], []);\n\n      return allRealEstate.map((realEstate) => {\n        const { income } = realEstate;\n        const expenses = this.getRealEstateCost(realEstate) * 12;\n\n        return (\n          Math.round(income * this.realEstateIncomeConsideration) - expenses\n        );\n      });\n    }\n\n    getRealEstateCost({ loan, value }) {\n      const amortizationRate = this.getAmortizationRateBase({\n        borrowRatio: super.getBorrowRatio({ loan, propertyValue: value }),\n      });\n\n      return super.getTheoreticalMonthly({\n        propAndWork: value,\n        loanValue: loan,\n        amortizationRate,\n      }).total;\n    }\n\n    sumArray(arr) {\n      return arr.reduce((tot, v = 0) => tot + v, 0);\n    }\n\n    // Returns an object with all the types of expenses, combined between\n    // borrowers:\n    // {\n    //  LEASING: 23000,\n    //  WELFARE: 4000,\n    //  THEORETICAL_REAL_ESTATE: 30000,\n    //  etc\n    // }\n    getAllExpenses({ borrowers }) {\n      if (\n        this.realEstateIncomeAlgorithm\n        === REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT\n      ) {\n        const deltas = this.getRealEstateDeltas({\n          borrowers,\n        });\n        return {\n          // Negative deltas should be made positive so they can be added to expenses\n          [EXPENSE_TYPES.REAL_ESTATE_DELTA_NEGATIVE]: -this.sumArray(deltas.filter(delta => delta < 0)),\n          // Positive deltas should be made negative so they can be subtracted from income,\n          // and therefore increase income\n          [EXPENSE_TYPES.REAL_ESTATE_DELTA_POSITIVE]: -this.sumArray(deltas.filter(delta => delta > 0)),\n          ...this.getGroupedExpenses({ borrowers }),\n        };\n      }\n\n      return {\n        [EXPENSE_TYPES.THEORETICAL_REAL_ESTATE]:\n          this.getRealEstateExpenses({ borrowers }) * 12, // All expenses are annualized\n        ...this.getGroupedExpenses({ borrowers }),\n      };\n    }\n\n    // Same as getAllExpenses, but without real estate expenses\n    getGroupedExpenses({ borrowers }) {\n      const flattenedExpenses = []\n        .concat([], ...arrayify(borrowers).map(({ expenses }) => expenses))\n        .filter(x => x);\n      return flattenedExpenses.reduce(\n        (obj, { value, description }) => ({\n          ...obj,\n          [description]: (obj[description] || 0) + value,\n        }),\n        {},\n      );\n    }\n\n    shouldSubtractExpenseFromIncome(expenseType) {\n      return this.expensesSubtractFromIncome.includes(expenseType);\n    }\n\n    groupRealEstateDeltas({ groupedExpenses, expenses, toSubtractFromIncome }) {\n      const negativeDeltas = expenses[EXPENSE_TYPES.REAL_ESTATE_DELTA_NEGATIVE];\n      const positiveDeltas = expenses[EXPENSE_TYPES.REAL_ESTATE_DELTA_POSITIVE];\n\n      if (toSubtractFromIncome) {\n        // If we want to get expenses to subtract from income, add the\n        // positiveDeltas negatively, so they are in fact added to income\n        return {\n          ...groupedExpenses,\n          [EXPENSE_TYPES.REAL_ESTATE_DELTA_POSITIVE]: positiveDeltas,\n        };\n      }\n\n      return {\n        ...groupedExpenses,\n        [EXPENSE_TYPES.REAL_ESTATE_DELTA_NEGATIVE]: negativeDeltas,\n      };\n    }\n\n    // Returns an object with all expenses to subtract from income\n    // or all expenses to add to expenses, depending on the param `toSubtractFromIncome`¨\n    // {\n    //  LEASING: 23000,\n    // }\n    getGroupedExpensesBySide({ borrowers, toSubtractFromIncome = true }) {\n      const expenses = this.getAllExpenses({ borrowers });\n\n      const expensesBySide = Object.keys(expenses)\n        .filter(expenseType => !this.expenseTypeIsDelta(expenseType))\n        .filter((expenseType) => {\n          const subtractExpenseTypeFromIncome = this.expensesSubtractFromIncome.includes(expenseType);\n          return toSubtractFromIncome\n            ? subtractExpenseTypeFromIncome\n            : !subtractExpenseTypeFromIncome;\n        });\n\n      const groupedExpenses = expensesBySide.reduce(\n        (obj, expenseType) => ({\n          ...obj,\n          [expenseType]: expenses[expenseType],\n        }),\n        {},\n      );\n\n      if (\n        this.realEstateIncomeAlgorithm\n        === REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT\n      ) {\n        return this.groupRealEstateDeltas({\n          groupedExpenses,\n          expenses,\n          toSubtractFromIncome,\n        });\n      }\n\n      return groupedExpenses;\n    }\n\n    expenseTypeIsDelta(expenseType) {\n      return [\n        EXPENSE_TYPES.REAL_ESTATE_DELTA_NEGATIVE,\n        EXPENSE_TYPES.REAL_ESTATE_DELTA_POSITIVE,\n      ].includes(expenseType);\n    }\n\n    formatRealEstateExpenses({ obj, expenseType, value }) {\n      if (expenseType === EXPENSE_TYPES.REAL_ESTATE_DELTA_NEGATIVE) {\n        return { ...obj, add: obj.add + value };\n      }\n\n      return { ...obj, subtract: obj.subtract + value };\n    }\n\n    // Returns an object with 2 keys, `subtract` and `add` that contain the sum\n    // of all expenses to \"subtract from income\" and \"add to expenses\", respectively\n    getFormattedExpenses({ borrowers }) {\n      const expenses = this.getAllExpenses({ borrowers });\n\n      return Object.keys(expenses).reduce(\n        (obj, expenseType) => {\n          const value = expenses[expenseType];\n          if (this.expenseTypeIsDelta(expenseType)) {\n            return this.formatRealEstateExpenses({ obj, expenseType, value });\n          }\n\n          if (this.expensesSubtractFromIncome.indexOf(expenseType) >= 0) {\n            return { ...obj, subtract: obj.subtract + value };\n          }\n\n          return { ...obj, add: obj.add + value };\n        },\n        { subtract: 0, add: 0 },\n      );\n    }\n\n    getCommentsForExpenseType({ borrowers, type }) {\n      return arrayify(borrowers).reduce((comments, { expenses = [] }) => {\n        const expensesOfType = expenses.filter(({ description }) => description === type);\n        return [\n          ...comments,\n          ...expensesOfType.map(({ comment }) => comment),\n        ].filter(x => x);\n      }, []);\n    }\n\n    getCommentsForOtherIncomeType({ borrowers, type }) {\n      return arrayify(borrowers).reduce((comments, { otherIncome = [] }) => {\n        const otherIncomeOfType = otherIncome.filter(({ description }) => description === type);\n        return [\n          ...comments,\n          ...otherIncomeOfType.map(({ comment }) => comment),\n        ].filter(x => x);\n      }, []);\n    }\n\n    canCalculateSolvency({ borrowers }) {\n      if (!borrowers.length) {\n        return false;\n      }\n\n      if (this.getCashFortune({ borrowers }) === 0) {\n        return false;\n      }\n\n      if (this.getSalary({ borrowers }) === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"OfferCalculator.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/OfferCalculator.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\n\nexport const withOfferCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"PropertyCalculator.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/PropertyCalculator.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport {\n  getPropertyArray,\n  getPropertyLoanArray,\n} from '../../arrays/PropertyFormArray';\nimport { getPercent } from '../general';\nimport { getCountedArray, getMissingFieldIds } from '../formArrayHelpers';\nimport {\n  filesPercent,\n  getMissingDocumentIds,\n} from '../../api/files/fileHelpers';\nimport { getPropertyDocuments } from '../../api/files/documents';\nimport MiddlewareManager from '../MiddlewareManager';\n\nexport const withPropertyCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    constructor(config) {\n      super(config);\n      this.initPropertyCalculator(config);\n    }\n\n    initPropertyCalculator(config) {\n      if (config && config.propertyMiddleware) {\n        const middlewareManager = new MiddlewareManager(this);\n        middlewareManager.applyToAllMethods([config.propertyMiddleware]);\n      }\n    }\n\n    propertyPercent({ loan, structureId, property }) {\n      const { borrowers } = loan;\n      const structure = this.selectStructure({ loan, structureId });\n      const propertyToCalculateWith = property || structure.property;\n\n      if (!propertyToCalculateWith) {\n        return 0;\n      }\n\n      const formArray1 = getPropertyArray({\n        loan,\n        borrowers,\n        property: propertyToCalculateWith,\n      });\n      const formArray2 = getPropertyLoanArray({\n        loan,\n        borrowers,\n        property: propertyToCalculateWith,\n      });\n\n      return getPercent([\n        ...getCountedArray(formArray1, propertyToCalculateWith),\n        ...getCountedArray(formArray2, loan),\n      ]);\n    }\n\n    getPropAndWork({ loan, structureId }) {\n      const propertyValue = this.selectPropertyValue({ loan, structureId });\n      const propertyWork = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'propertyWork',\n      }) || 0;\n      return super.getPropAndWork({ propertyValue, propertyWork });\n    }\n\n    getPropertyWork({ loan, structureId }) {\n      return this.selectPropertyWork({ loan, structureId });\n    }\n\n    getPropertyFilesProgress({ loan, structureId, property }) {\n      const structure = this.selectStructure({ loan, structureId });\n      const propertyToCalculateWith = property || structure.property;\n\n      if (!propertyToCalculateWith) {\n        return 0;\n      }\n\n      return filesPercent({\n        doc: propertyToCalculateWith,\n        fileArray: getPropertyDocuments({\n          loan,\n          id: propertyToCalculateWith._id,\n        }),\n      });\n    }\n\n    getPropertyCompletion({ loan, structureId, property }) {\n      const { borrowers } = loan;\n      const selectedProperty = this.selectProperty({ loan, structureId });\n      const propertyToCalculateWith = property || selectedProperty;\n\n      const formsProgress = this.propertyPercent({\n        loan,\n        borrowers,\n        property: propertyToCalculateWith,\n      });\n      const filesProgress = this.getPropertyFilesProgress({\n        loan,\n        property: propertyToCalculateWith,\n      });\n\n      return (formsProgress + filesProgress) / 2;\n    }\n\n    getMissingPropertyFields({ loan, structureId, property }) {\n      const { borrowers } = loan;\n      const selectedProperty = this.selectProperty({ loan, structureId });\n\n      const propertyToCalculateWith = property || selectedProperty;\n\n      const formArray1 = getPropertyArray({\n        loan,\n        borrowers,\n        property: propertyToCalculateWith,\n      });\n      const formArray2 = getPropertyLoanArray({\n        loan,\n        borrowers,\n        property: propertyToCalculateWith,\n      });\n\n      return [\n        ...getMissingFieldIds(formArray1, propertyToCalculateWith),\n        ...getMissingFieldIds(formArray2, loan),\n      ];\n    }\n\n    getMissingPropertyDocuments({ loan, structureId, property }) {\n      const selectedProperty = this.selectProperty({ loan, structureId });\n      const propertyToCalculateWith = property || selectedProperty;\n\n      return getMissingDocumentIds({\n        doc: propertyToCalculateWith,\n        fileArray: getPropertyDocuments({\n          loan,\n          id: propertyToCalculateWith._id,\n        }),\n      });\n    }\n\n    hasDetailedPropertyValue({ loan, structureId }) {\n      const propertyExactValue = this.selectPropertyKey({\n        key: 'value',\n        loan,\n        structureId,\n      });\n      const landValue = this.selectPropertyKey({\n        key: 'landValue',\n        loan,\n        structureId,\n      });\n      const constructionValue = this.selectPropertyKey({\n        key: 'constructionValue',\n        loan,\n        structureId,\n      });\n\n      return !propertyExactValue || !!(landValue && constructionValue);\n    }\n\n    isPromotionProperty({ loan, structureId }) {\n      const structure = this.selectStructure({ loan, structureId });\n      return !!structure.promotionOptionId;\n    }\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"PromotionCalculator.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/PromotionCalculator.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport pick from 'lodash/pick';\n\nimport { PROMOTION_TYPES, PURCHASE_TYPE } from '../../api/constants';\n\nexport const withPromotionCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    canAffordPromotionLot({ loan, promotionLot }) {\n      const { value, notaryFees } = promotionLot;\n      return true;\n    }\n\n    getSolvency({ loan, notaryFees = 0 }) {\n      const income = this.getTotalIncome({ loan });\n      const bankFortune = this.getFortune({ loan });\n      const cashFortune = this.getCashFortune({ loan });\n      const insurance2 = this.getInsurance2({ loan });\n\n      const results = {\n        withBankFortune: Math.round((bankFortune - notaryFees) / (1 - this.maxBorrowRatio)),\n        withInsurance2: this.getMaxPropertyValueWithInsurance2({\n          cash: bankFortune,\n          insurance2,\n          notaryFees,\n        }),\n        withInsurance3: Math.round((cashFortune - notaryFees) / (1 - this.maxBorrowRatio)),\n        withInsurance2And3: this.getMaxPropertyValueWithInsurance2({\n          cash: cashFortune,\n          insurance2,\n          notaryFees,\n        }),\n      };\n\n      return Object.keys(results).reduce(\n        (obj, key) => ({ ...obj, [key]: Math.round(results[key]) }),\n        {},\n      );\n    }\n\n    getMaxPropertyValueWithInsurance2({ cash, insurance2, notaryFees }) {\n      const availableFortune = cash - notaryFees;\n      const maxPropertyValue = availableFortune / this.minCash;\n      const canAffordProperty = (maxPropertyValue - availableFortune - insurance2) / maxPropertyValue\n        <= this.maxBorrowRatio;\n\n      if (canAffordProperty) {\n        return Math.round(maxPropertyValue);\n      }\n\n      return Math.round((availableFortune + insurance2) / (1 - this.maxBorrowRatio));\n    }\n\n    getIncomeLimitedProperty({\n      borrowers,\n      income,\n      fortune,\n      propertyValue,\n      notaryFees,\n    }) {\n      return this.getIncomeLimitedPropertyValue({\n        nF: notaryFees / propertyValue,\n        r: this.getAmortizationDuration({ borrowers }),\n        i: this.theoreticalInterestRate,\n        mR: this.maxIncomeRatio,\n        m: this.theoreticalMaintenanceRate,\n      })({ income, fortune });\n    }\n\n    formatPromotionOptionIntoProperty(promotionOption) {\n      if (!promotionOption) {\n        return;\n      }\n\n      const property = promotionOption.promotionLots[0].properties[0];\n\n      return {\n        // Get the address from the promotion\n        ...pick(promotionOption.promotion, [\n          'address1',\n          'address2',\n          'zipCode',\n          'city',\n        ]),\n        ...promotionOption,\n        ...property,\n        totalValue: promotionOption.value,\n      };\n    }\n\n    shouldUseConstructionNotaryFees({ loan, structureId }) {\n      const { promotions } = loan;\n\n      if (loan.purchaseType === PURCHASE_TYPE.CONSTRUCTION) {\n        return true;\n      }\n\n      if (!this.isPromotionProperty({ loan, structureId })) {\n        return false;\n      }\n\n      if (!promotions || (promotions.length && promotions.length === 0)) {\n        return false;\n      }\n\n      const promotion = promotions[0];\n\n      return promotion.type === PROMOTION_TYPES.SHARE;\n    }\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"CombinedCalculator.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/CombinedCalculator.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { getAggregatePercent } from '../general';\n\nexport const withCombinedCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    filesProgress({ loan }) {\n      const hasPromotion = loan.promotions && loan.promotions.length > 0;\n      const progress = [\n        this.getLoanFilesProgress,\n        this.getBorrowerFilesProgress,\n        !hasPromotion && this.getPropertyFilesProgress,\n      ]\n        .filter(x => x !== false)\n        .map(f => f({ loan }))\n        .filter(x => x);\n\n      return getAggregatePercent(progress);\n    }\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Selector.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/Selector.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { createSelector } from 'reselect';\n\nimport { EMPTY_STRUCTURE } from '../../api/loans/loanConstants';\n\nexport const withSelector = (SuperClass = class {}) =>\n  class extends SuperClass {\n    selectProperty({ loan, structureId } = {}) {\n      let propertyId = loan.structure && loan.structure.propertyId;\n      let promotionOptionId = loan.structure && loan.structure.promotionOptionId;\n      const structure = this.selectStructure({ loan, structureId });\n\n      if (!structureId) {\n        if (structure.property) {\n          return structure.property;\n        }\n        if (structure.propertyId) {\n          return loan.properties.find(({ _id }) => _id === structure.propertyId);\n        }\n        if (structure.promotionOption) {\n          return this.formatPromotionOptionIntoProperty(structure.promotionOption);\n        }\n        if (structure.promotionOptionId) {\n          const promotionOption = loan.promotionOptions.find(({ _id }) => _id === structure.promotionOptionId);\n          return this.formatPromotionOptionIntoProperty(promotionOption);\n        }\n\n        return {};\n      }\n\n      if (structureId) {\n        propertyId = structure.propertyId;\n        promotionOptionId = structure.promotionOptionId;\n      }\n\n      if (propertyId) {\n        return loan.properties.find(({ _id }) => _id === propertyId);\n      }\n\n      if (promotionOptionId) {\n        return this.formatPromotionOptionIntoProperty(loan.promotionOptions.find(({ _id }) => _id === promotionOptionId));\n      }\n\n      return {};\n    }\n\n    selectOffer({ loan, structureId }) {\n      const { offers = [] } = loan;\n      const { offerId, offer } = this.selectStructure({ loan, structureId });\n\n      if (offer) {\n        return offer;\n      }\n\n      if (!offerId) {\n        return undefined;\n      }\n\n      return offers.find(({ _id }) => _id === offerId);\n    }\n\n    selectStructure({ loan, structureId } = {}): {} {\n      if (structureId) {\n        return loan.structures.find(({ id }) => id === structureId);\n      }\n      return (\n        loan.structure\n        || loan.structures.find(({ id }) => id === loan.selectedStructure)\n        || EMPTY_STRUCTURE\n      );\n    }\n\n    makeSelectPropertyKey(key: string): Function {\n      return createSelector(\n        this.selectProperty,\n        property => property && property[key],\n      );\n    }\n\n    selectStructureKey({ loan, structureId, key }) {\n      return this.makeSelectStructureKey(key)({ loan, structureId });\n    }\n\n    selectPropertyKey({ loan, structureId, key }) {\n      return this.makeSelectPropertyKey(key)({ loan, structureId });\n    }\n\n    makeSelectStructureKey(key: string): Function {\n      return createSelector(\n        this.selectStructure,\n        structure => structure && structure[key],\n      );\n    }\n\n    selectPropertyValue({\n      loan,\n      structureId,\n    }: { loan: userLoan } = {}): number {\n      const structurePropertyValue = this.selectStructureKey({\n        key: 'propertyValue',\n        loan,\n        structureId,\n      });\n      return (\n        structurePropertyValue\n        || this.selectPropertyKey({ loan, structureId, key: 'totalValue' })\n        || this.selectPropertyKey({ loan, structureId, key: 'value' })\n      );\n    }\n\n    selectPropertyWork({ loan, structureId } = {}): number {\n      return this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'propertyWork',\n      });\n    }\n\n    selectLoanValue({ loan, structureId } = {}): number {\n      return this.selectStructureKey({ loan, structureId, key: 'wantedLoan' });\n    }\n\n    getCashUsed = this.makeSelectStructureKey('fortuneUsed');\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"LenderRulesInitializator.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/LenderRulesInitializator.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { parseFilter } from 'core/api/lenderRules/helpers';\nimport { getMatchingRules } from '../../api/lenderRules/helpers';\nimport { LENDER_RULES_VARIABLES, OWN_FUNDS_TYPES } from '../../api/constants';\n\n// @flow\n\nexport const withLenderRulesInitializator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    constructor(settings) {\n      super(settings);\n      this.initialize(settings);\n    }\n\n    initialize({ loan, structureId, lenderRules = [] }) {\n      if (!(loan && lenderRules && lenderRules.length > 0)) {\n        return;\n      }\n\n      const sortedlenderRules = lenderRules.sort(({ order: orderA }, { order: orderB }) => orderA - orderB);\n\n      // Store the rules for retrieval later\n      this.lenderRules = sortedlenderRules;\n      this.setOrganisationName(sortedlenderRules);\n      this.ruleOrigin = {};\n      this.matchedRules = [];\n\n      // Global rules\n      const globalRules = this.getGlobalLenderRules({\n        loan,\n        structureId,\n        lenderRules: sortedlenderRules,\n      });\n      this.applyRules(globalRules);\n\n      // Primary rules depend only on raw data\n      const primaryRules = this.getPrimaryLenderRules({\n        loan,\n        structureId,\n        lenderRules: sortedlenderRules,\n      });\n      this.applyRules(primaryRules);\n\n      // Secondary rules depend on what is calculated with the rules applied from the primary rules\n      const secondaryRules = this.getSecondaryLenderRules({\n        loan,\n        structureId,\n        lenderRules: sortedlenderRules,\n      });\n      this.applyRules(secondaryRules);\n\n      this.cleanUpUnusedRules();\n    }\n\n    setOrganisationName = (lenderRules) => {\n      this.organisationName = lenderRules.length\n        ? lenderRules[0].organisation && lenderRules[0].organisation.name\n        : null;\n    };\n\n    storeRuleOrigin(rules, lenderRulesId) {\n      Object.keys(rules).forEach((ruleName) => {\n        this.ruleOrigin[ruleName] = lenderRulesId;\n      });\n    }\n\n    getOriginOfRule(ruleName) {\n      const lenderRulesId = this.ruleOrigin[ruleName];\n      const lenderRules = this.lenderRules.find(({ _id }) => _id === lenderRulesId);\n      return lenderRules;\n    }\n\n    getLenderRulesVariables({ loan, structureId }) {\n      return {\n        [LENDER_RULES_VARIABLES.RESIDENCE_TYPE]: loan.residenceType,\n        [LENDER_RULES_VARIABLES.CANTON]: this.selectPropertyKey({\n          loan,\n          structureId,\n          key: LENDER_RULES_VARIABLES.CANTON,\n        }),\n        [LENDER_RULES_VARIABLES.WANTED_LOAN]: this.selectStructureKey({\n          loan,\n          structureId,\n          key: LENDER_RULES_VARIABLES.WANTED_LOAN,\n        }),\n        [LENDER_RULES_VARIABLES.PROPERTY_VALUE]: this.selectPropertyValue({\n          loan,\n          structureId,\n        }),\n        [LENDER_RULES_VARIABLES.INSIDE_AREA]: this.selectPropertyKey({\n          loan,\n          structureId,\n          key: LENDER_RULES_VARIABLES.INSIDE_AREA,\n        }),\n        [LENDER_RULES_VARIABLES.BANK_FORTUNE]: this.getFortune({ loan }),\n        [LENDER_RULES_VARIABLES.BORROW_RATIO]: this.getBorrowRatio({\n          loan,\n          structureId,\n        }),\n        [LENDER_RULES_VARIABLES.INCOME]: this.getTotalIncome({ loan }),\n        [LENDER_RULES_VARIABLES.PROPERTY_TYPE]: this.selectPropertyKey({\n          loan,\n          structureId,\n          key: LENDER_RULES_VARIABLES.PROPERTY_TYPE,\n        }),\n        [LENDER_RULES_VARIABLES.ZIP_CODE]: this.selectPropertyKey({\n          loan,\n          structureId,\n          key: LENDER_RULES_VARIABLES.ZIP_CODE,\n        }),\n        [LENDER_RULES_VARIABLES.REMAINING_BANK_FORTUNE]: this.getRemainingFundsOfType({\n          loan,\n          structureId,\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        }),\n      };\n    }\n\n    getGlobalLenderRules({ lenderRules }) {\n      const globalRules = lenderRules.filter(({ filter }) =>\n        filter.and && filter.and.length === 1 && filter.and[0] === true);\n      const matchingRules = getMatchingRules(\n        globalRules,\n        {},\n        this.storeRuleOrigin,\n      );\n      return matchingRules;\n    }\n\n    getPrimaryLenderRules({ loan, structureId, lenderRules }) {\n      const primaryRules = lenderRules.filter(rules => !this.lenderRulesIsSecondary(rules));\n      const matchingRules = getMatchingRules(\n        primaryRules,\n        this.getLenderRulesVariables({ loan, structureId }),\n        this.storeRuleOrigin,\n      );\n      return matchingRules;\n    }\n\n    // Gets the secondary lender rules that require other lender rules to\n    // already have been applied\n    getSecondaryLenderRules({ loan, structureId, lenderRules }) {\n      const secondaryRules = lenderRules.filter(this.lenderRulesIsSecondary);\n      const matchingRules = getMatchingRules(\n        secondaryRules,\n        this.getLenderRulesVariables({ loan, structureId }),\n        this.storeRuleOrigin,\n      );\n      return matchingRules;\n    }\n\n    lenderRulesIsSecondary({ filter }) {\n      return filter.and\n        .map(parseFilter)\n        .some(({ variable }) =>\n          [\n            LENDER_RULES_VARIABLES.BORROW_RATIO,\n            LENDER_RULES_VARIABLES.INCOME,\n          ].includes(variable));\n    }\n\n    applyRules(rules) {\n      if (rules.names) {\n        this.matchedRules = [\n          ...this.matchedRules,\n          ...rules.names.filter(x => x),\n        ];\n      }\n\n      const rulesToApply = [\n        'adminComments',\n        'allowPledge',\n        'amortizationGoal',\n        'amortizationYears',\n        'bonusAlgorithm',\n        'bonusConsideration',\n        'bonusHistoryToConsider',\n        'companyIncomeConsideration',\n        'companyIncomeHistoryToConsider',\n        'dividendsConsideration',\n        'dividendsHistoryToConsider',\n        'expensesSubtractFromIncome',\n        'fortuneReturnsRatio',\n        'incomeConsiderationType',\n        'investmentIncomeConsideration',\n        'maxBorrowRatio',\n        'maxIncomeRatio',\n        'pdfComments',\n        'pensionIncomeConsideration',\n        'realEstateIncomeAlgorithm',\n        'realEstateIncomeConsideration',\n        'realEstateIncomeConsiderationType',\n        'theoreticalInterestRate',\n        'theoreticalInterestRate2ndRank',\n        'theoreticalMaintenanceRate',\n      ];\n\n      rulesToApply.forEach((rule) => {\n        if (rules[rule] !== undefined && rules[rule] !== null) {\n          this[rule] = rules[rule];\n        }\n      });\n    }\n\n    cleanUpUnusedRules() {\n      this.maxIncomeRatioTight = 0;\n      this.maxBorrowRatioWithPledge = 0;\n    }\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SolvencyCalculator.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/SolvencyCalculator.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { OWN_FUNDS_ROUNDING_AMOUNT } from '../../config/financeConstants';\nimport {\n  OWN_FUNDS_TYPES,\n  RESIDENCE_TYPE,\n  OWN_FUNDS_USAGE_TYPES,\n} from '../../api/constants';\nimport { arrayify } from '../general';\nimport { NotaryFeesCalculator } from '../notaryFees/index';\nimport { roundValue } from '../conversionFunctions';\n\nconst INITIAL_MIN_BOUND = 0;\nconst INITIAL_MAX_BOUND = 1000000;\nconst INITIAL_ABSOLUTE_MAX_BOUND = 100000000;\nconst MAX_ITERATIONS = 50;\nconst ACCURACY = 1000;\nconst ROUNDING_DIGITS = Math.log10(ACCURACY);\nconst MAX_BOUND_MULTIPLICATION_FACTOR = 2;\nconst OWN_FUNDS_ROUNDING_ALGO = 100;\nconst INITIAL_BORROW_RATIO_STEP_SIZE = 0.05;\n\nexport const withSolvencyCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    getAllowedOwnFundsTypes({ residenceType }) {\n      return residenceType === RESIDENCE_TYPE.MAIN_RESIDENCE\n        ? [\n          OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n          OWN_FUNDS_TYPES.BANK_FORTUNE,\n          OWN_FUNDS_TYPES.INSURANCE_3A,\n          OWN_FUNDS_TYPES.BANK_3A,\n          OWN_FUNDS_TYPES.INSURANCE_3B,\n          OWN_FUNDS_TYPES.INSURANCE_2,\n        ]\n        : [\n          OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n          OWN_FUNDS_TYPES.BANK_FORTUNE,\n          OWN_FUNDS_TYPES.INSURANCE_3B,\n        ];\n    }\n\n    ownFundTypeRequiresUsageType({ type }) {\n      return [\n        OWN_FUNDS_TYPES.INSURANCE_2,\n        OWN_FUNDS_TYPES.INSURANCE_3A,\n        OWN_FUNDS_TYPES.INSURANCE_3B,\n      ].includes(type);\n    }\n\n    makeOwnFunds({ borrowers, type, usageType, max }) {\n      return arrayify(borrowers)\n        .map((borrower) => {\n          const ownFundsObject = {\n            type,\n            value: Math.ceil(Math.min(max, this.getFunds({ borrowers: borrower, type }))),\n            borrowerId: borrower._id,\n          };\n\n          if (!usageType && this.ownFundTypeRequiresUsageType({ type })) {\n            return {\n              ...ownFundsObject,\n              usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n            };\n          }\n\n          if (usageType) {\n            return { ...ownFundsObject, usageType };\n          }\n\n          return ownFundsObject;\n        })\n        .filter(({ value }) => value > 0);\n    }\n\n    suggestStructure({\n      borrowers,\n      propertyValue,\n      maxBorrowRatio = this.maxBorrowRatio,\n      loanValue,\n      canton,\n      residenceType,\n      notaryFees: forcedNotaryFees,\n    }) {\n      let notaryFees;\n\n      const finalLoanValue = loanValue || Math.round(propertyValue * maxBorrowRatio);\n\n      if (forcedNotaryFees) {\n        notaryFees = forcedNotaryFees;\n      } else {\n        const notaryCalc = new NotaryFeesCalculator({ canton });\n        notaryFees = notaryCalc.getNotaryFeesWithoutLoan({\n          propertyValue,\n          mortgageNoteIncrease: finalLoanValue,\n          residenceType,\n        }).total;\n      }\n\n      let requiredOwnFunds = Math.round(propertyValue + notaryFees - finalLoanValue);\n      let ownFunds = [];\n\n      // Get all possible OWN_FUNDS_TYPES\n      const allowedOwnFundsTypes = this.getAllowedOwnFundsTypes({\n        residenceType,\n      });\n\n      allowedOwnFundsTypes.forEach((type) => {\n        borrowers.forEach((borrower) => {\n          const newOwnFunds = this.makeOwnFunds({\n            borrowers: borrower,\n            type,\n            max: requiredOwnFunds,\n          });\n\n          requiredOwnFunds -= newOwnFunds.reduce(\n            (tot, { value }) => tot + value,\n            0,\n          );\n\n          ownFunds = [...ownFunds, ...newOwnFunds];\n        });\n      });\n\n      return ownFunds;\n    }\n\n    createLoanObject({\n      residenceType,\n      borrowers,\n      wantedLoan,\n      propertyValue,\n      canton,\n      ownFunds = [],\n      loanTranches = [],\n      ...rest\n    }) {\n      return {\n        residenceType,\n        borrowers,\n        structure: {\n          wantedLoan,\n          propertyValue,\n          property: { canton },\n          ownFunds,\n          loanTranches,\n        },\n        ...rest,\n      };\n    }\n\n    suggestedStructureIsValid({\n      borrowers,\n      propertyValue,\n      maxBorrowRatio = this.maxBorrowRatio,\n      loanValue,\n      canton,\n      residenceType,\n      ownFunds,\n    }) {\n      const finalLoanValue = loanValue || Math.round(propertyValue * maxBorrowRatio);\n      const loanObject = this.createLoanObject({\n        residenceType,\n        borrowers,\n        wantedLoan: finalLoanValue,\n        propertyValue,\n        canton,\n        ownFunds,\n      });\n\n      // If the calculator has been initialized, reinitialize it according to this new potential loan\n      if (this.lenderRules) {\n        this.initialize({ loan: loanObject, lenderRules: this.lenderRules });\n      }\n\n      if (this.isMissingOwnFunds({ loan: loanObject })) {\n        return false;\n      }\n\n      if (!this.hasEnoughCash({ loan: loanObject })) {\n        return false;\n      }\n\n      if (!this.structureIsValid({ loan: loanObject })) {\n        return false;\n      }\n\n      return true;\n    }\n\n    getMaxPropertyValue({ borrowers, maxBorrowRatio, canton, residenceType }) {\n      // Immediately stop iterating if maxBorrowRatio is above what is allowed\n      if (this.maxBorrowRatio < maxBorrowRatio) {\n        return 0;\n      }\n\n      let foundValue = false;\n      let minBound = INITIAL_MIN_BOUND;\n      let maxBound = INITIAL_MAX_BOUND;\n      let absoluteMax = INITIAL_ABSOLUTE_MAX_BOUND;\n      let iterations = 0;\n\n      // The rounding amount of 1000 is helpful when the user tries to\n      // fit his own funds into a structure without being overly accurate\n      // which is annoying.\n      // However for this calculation we don't need to round own funds as loosely\n      this.ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_ALGO;\n\n      while (!foundValue) {\n        iterations += 1;\n        const nextPropertyValue = roundValue(\n          (minBound + maxBound) / 2,\n          ROUNDING_DIGITS,\n        );\n\n        const ownFunds = this.suggestStructure({\n          borrowers,\n          maxBorrowRatio,\n          canton,\n          residenceType,\n          propertyValue: nextPropertyValue,\n        });\n\n        if (\n          this.suggestedStructureIsValid({\n            borrowers,\n            maxBorrowRatio,\n            canton,\n            residenceType,\n            propertyValue: nextPropertyValue,\n            ownFunds,\n          })\n        ) {\n          minBound = nextPropertyValue;\n          maxBound = Math.min(\n            maxBound * MAX_BOUND_MULTIPLICATION_FACTOR,\n            absoluteMax,\n          );\n        } else {\n          maxBound = nextPropertyValue;\n          absoluteMax = maxBound;\n        }\n\n        if (maxBound - minBound <= ACCURACY) {\n          foundValue = true;\n        }\n\n        if (iterations > MAX_ITERATIONS) {\n          foundValue = true;\n        }\n      }\n\n      this.ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_AMOUNT;\n\n      return minBound;\n    }\n\n    getNextStepSize({\n      currentMax,\n      currentBorrowRatio,\n      stepSize,\n      borrowers,\n      residenceType,\n      canton,\n      direction,\n      cache,\n    }) {\n      let newStepSize = stepSize;\n      let foundBetterValue;\n\n      while (!foundBetterValue) {\n        let nextValue;\n        if (direction === 'upwards') {\n          nextValue = cache[currentBorrowRatio + stepSize]\n            || this.getMaxPropertyValue({\n              borrowers,\n              residenceType,\n              maxBorrowRatio: currentBorrowRatio + stepSize,\n              canton,\n            });\n        } else {\n          nextValue = cache[currentBorrowRatio - stepSize]\n            || this.getMaxPropertyValue({\n              borrowers,\n              residenceType,\n              maxBorrowRatio: currentBorrowRatio - stepSize,\n              canton,\n            });\n        }\n\n        if (nextValue > currentMax) {\n          foundBetterValue = true;\n        } else {\n          newStepSize /= 2;\n        }\n\n        if (newStepSize < 0.05) {\n          foundBetterValue = true;\n        }\n      }\n\n      return newStepSize;\n    }\n\n    getMaxPropertyValueWithoutBorrowRatio({\n      borrowers,\n      residenceType,\n      canton,\n    }) {\n      let borrowRatio = 0.7;\n      let foundValue = false;\n      let iterations = 0;\n      let stepSize = INITIAL_BORROW_RATIO_STEP_SIZE;\n      const deltaX = 0.01;\n      let maxPropertyValue = 0;\n      let optimalBorrowRatio;\n      const cache = {};\n\n      const setMax = (ratio, propertyValue) => {\n        // Cache each result to avoid recalculating it later\n        if (!cache[`${ratio}`]) {\n          cache[`${ratio}`] = propertyValue;\n        }\n\n        // Always store the highest encountered value, in case the loop\n        // stops prematurely, or if the stopping conditions would've skipped\n        // a value that we already calculated\n        if (propertyValue > maxPropertyValue) {\n          maxPropertyValue = propertyValue;\n          optimalBorrowRatio = ratio;\n        }\n      };\n\n      while (!foundValue) {\n        iterations += 1;\n\n        const center = cache[borrowRatio]\n          || this.getMaxPropertyValue({\n            borrowers,\n            residenceType,\n            maxBorrowRatio: borrowRatio,\n            canton,\n          });\n        setMax(borrowRatio, center);\n\n        const yLeft = cache[borrowRatio - deltaX]\n          || this.getMaxPropertyValue({\n            borrowers,\n            residenceType,\n            maxBorrowRatio: borrowRatio - deltaX,\n            canton,\n          });\n        setMax(borrowRatio - deltaX, yLeft);\n        const yRight = cache[borrowRatio + deltaX]\n          || this.getMaxPropertyValue({\n            borrowers,\n            residenceType,\n            maxBorrowRatio: borrowRatio + deltaX,\n            canton,\n          });\n        setMax(borrowRatio + deltaX, yRight);\n\n        const slope = yRight - yLeft;\n\n        if (yRight === 0 && yLeft === 0) {\n          // If the algorithm is at 0 on both sides, it means the borrowRatio\n          // is way too high, so start him over again at 0, but with a large\n          // step size to allow it to recover quickly\n          borrowRatio = INITIAL_BORROW_RATIO_STEP_SIZE;\n          stepSize = 0.2;\n        } else if (slope > 0) {\n          stepSize = this.getNextStepSize({\n            currentMax: center,\n            currentBorrowRatio: borrowRatio,\n            stepSize,\n            borrowers,\n            residenceType,\n            canton,\n            direction: 'upwards',\n            cache,\n          });\n          borrowRatio += stepSize;\n        } else {\n          stepSize = this.getNextStepSize({\n            currentMax: center,\n            currentBorrowRatio: borrowRatio,\n            stepSize,\n            borrowers,\n            residenceType,\n            canton,\n            direction: 'downwards',\n            cache,\n          });\n          borrowRatio -= stepSize;\n        }\n\n        if (stepSize < deltaX / 2) {\n          foundValue = true;\n        }\n\n        if (iterations > 50) {\n          foundValue = true;\n        }\n      }\n\n      // Round the borrowRatio, and recompute the exact property value\n      const finalBorrowRatio = Math.round(optimalBorrowRatio * 10000) / 10000;\n      const finalPropertyValue = cache[finalBorrowRatio]\n        || this.getMaxPropertyValue({\n          borrowers,\n          residenceType,\n          maxBorrowRatio: finalBorrowRatio,\n          canton,\n        });\n\n      return {\n        borrowRatio: finalBorrowRatio,\n        propertyValue: finalPropertyValue,\n      };\n    }\n\n    getMaxPropertyValueForLoan({\n      loan,\n      maxBorrowRatio,\n      canton,\n      residenceType,\n    }) {\n      const { borrowers, residenceType: loanResidenceType } = loan;\n      return this.getMaxPropertyValue({\n        borrowers,\n        residenceType: residenceType || loanResidenceType,\n        maxBorrowRatio,\n        canton,\n      });\n    }\n\n    suggestStructureForLoan({ loan, structureId }) {\n      const propertyValue = this.getPropAndWork({ loan, structureId });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      const notaryFees = this.getFees({ loan, structureId }).total;\n\n      return this.suggestStructure({\n        borrowers: loan.borrowers,\n        propertyValue,\n        loanValue,\n        residenceType: loan.residenceType,\n        notaryFees,\n      });\n    }\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"classUtils.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/Calculator/classUtils.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const withConfig = extraConfig => SuperClass =>\n  class extends SuperClass {\n    constructor(config) {\n      super({ ...config, ...extraConfig });\n    }\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"FinanceCalculator\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/FinanceCalculator/index.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nexport { default, FinanceCalculator } from './FinanceCalculator';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"FinanceCalculator.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/FinanceCalculator/FinanceCalculator.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport {\n  GENDER,\n  SUCCESS,\n  ERROR,\n  WARNING,\n  RESIDENCE_TYPE,\n  REAL_ESTATE_CONSIDERATION_TYPES,\n  EXPENSE_TYPES_WITHOUT_DELTAS,\n} from '../../api/constants';\nimport {\n  AMORTIZATION_STOP,\n  AMORTIZATION_YEARS,\n  AVERAGE_TAX_RATE,\n  BONUS_ALGORITHMS,\n  BONUS_CONSIDERATION,\n  BONUS_HISTORY_TO_CONSIDER,\n  COMPANY_INCOME_TO_CONSIDER,\n  DEFAULT_AMORTIZATION,\n  DIVIDENDS_CONSIDERATION,\n  DIVIDENDS_HISTORY_TO_CONSIDER,\n  ESTIMATED_COMMISSION,\n  FORTUNE_RETURNS_RATIO,\n  INTERESTS_FINMA,\n  INVESTMENT_INCOME_CONSIDERATION,\n  MAINTENANCE_FINMA,\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n  MAX_BORROW_RATIO_WITH_PLEDGE,\n  MAX_INCOME_RATIO_TIGHT,\n  MAX_INCOME_RATIO,\n  MIN_CASH,\n  NOTARY_FEES,\n  OWN_FUNDS_ROUNDING_AMOUNT,\n  PENSION_INCOME_CONSIDERATION,\n  REAL_ESTATE_INCOME_ALGORITHMS,\n  REAL_ESTATE_INCOME_CONSIDERATION,\n  REFERRAL_COMMISSION_SPLIT,\n  REFERRAL_COMMISSION,\n} from '../../config/financeConstants';\nimport MiddlewareManager from '../MiddlewareManager';\nimport { precisionMiddleware } from './financeCalculatorMiddlewares';\nimport { memoizeMiddleware } from '../Calculator/middleware';\n\nexport class FinanceCalculator {\n  constructor(settings?: Object) {\n    this.initFinanceCalculator(settings);\n  }\n\n  notaryFees: number;\n\n  amortizationBaseRate: number;\n\n  amortizationGoal: number;\n\n  initFinanceCalculator({\n    allowPledge = true,\n    amortizationBaseRate = DEFAULT_AMORTIZATION,\n    amortizationGoal = AMORTIZATION_STOP,\n    amortizationYears = AMORTIZATION_YEARS,\n    bonusAlgorithm = BONUS_ALGORITHMS.WEAK_AVERAGE,\n    bonusConsideration = BONUS_CONSIDERATION,\n    bonusHistoryToConsider = BONUS_HISTORY_TO_CONSIDER,\n    companyIncomeHistoryToConsider = COMPANY_INCOME_TO_CONSIDER,\n    dividendsConsideration = DIVIDENDS_CONSIDERATION,\n    dividendsHistoryToConsider = DIVIDENDS_HISTORY_TO_CONSIDER,\n    expensesSubtractFromIncome = EXPENSE_TYPES_WITHOUT_DELTAS,\n    fortuneReturnsRatio = FORTUNE_RETURNS_RATIO,\n    investmentIncomeConsideration = INVESTMENT_INCOME_CONSIDERATION,\n    maxBorrowRatio = MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n    maxBorrowRatioWithPledge = MAX_BORROW_RATIO_WITH_PLEDGE,\n    maxIncomeRatio = MAX_INCOME_RATIO,\n    maxIncomeRatioTight = MAX_INCOME_RATIO_TIGHT,\n    minCash = MIN_CASH,\n    notaryFees = NOTARY_FEES,\n    ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_AMOUNT,\n    pensionIncomeConsideration = PENSION_INCOME_CONSIDERATION,\n    realEstateIncomeAlgorithm = REAL_ESTATE_INCOME_ALGORITHMS.DEFAULT,\n    realEstateIncomeConsideration = REAL_ESTATE_INCOME_CONSIDERATION,\n    realEstateIncomeConsiderationType = REAL_ESTATE_CONSIDERATION_TYPES.ADD_TO_INCOME,\n    taxRate = AVERAGE_TAX_RATE,\n    theoreticalInterestRate = INTERESTS_FINMA,\n    theoreticalInterestRate2ndRank = null,\n    theoreticalMaintenanceRate = MAINTENANCE_FINMA,\n    estimatedCommission = ESTIMATED_COMMISSION,\n    referralCommission = REFERRAL_COMMISSION,\n    referralCommissionSplit = REFERRAL_COMMISSION_SPLIT,\n    middlewares = [],\n    middlewareObject,\n  } = {}) {\n    this.allowPledge = allowPledge;\n    this.amortizationBaseRate = amortizationBaseRate;\n    this.amortizationGoal = amortizationGoal;\n    this.amortizationYears = amortizationYears;\n    this.bonusAlgorithm = bonusAlgorithm;\n    this.bonusConsideration = bonusConsideration;\n    this.bonusHistoryToConsider = bonusHistoryToConsider;\n    this.companyIncomeHistoryToConsider = companyIncomeHistoryToConsider;\n    this.dividendsConsideration = dividendsConsideration;\n    this.dividendsHistoryToConsider = dividendsHistoryToConsider;\n    this.expensesSubtractFromIncome = expensesSubtractFromIncome;\n    this.fortuneReturnsRatio = fortuneReturnsRatio;\n    this.investmentIncomeConsideration = investmentIncomeConsideration;\n    this.maxBorrowRatio = maxBorrowRatio;\n    this.maxBorrowRatioWithPledge = maxBorrowRatioWithPledge;\n    this.maxIncomeRatio = maxIncomeRatio;\n    this.maxIncomeRatioTight = maxIncomeRatioTight;\n    this.minCash = minCash;\n    this.notaryFees = notaryFees;\n    this.ownFundsRoundingAmount = ownFundsRoundingAmount;\n    this.pensionIncomeConsideration = pensionIncomeConsideration;\n    this.realEstateIncomeAlgorithm = realEstateIncomeAlgorithm;\n    this.realEstateIncomeConsideration = realEstateIncomeConsideration;\n    this.realEstateIncomeConsiderationType = realEstateIncomeConsiderationType;\n    this.taxRate = taxRate;\n    this.theoreticalInterestRate = theoreticalInterestRate;\n    this.theoreticalInterestRate2ndRank = theoreticalInterestRate2ndRank;\n    this.theoreticalMaintenanceRate = theoreticalMaintenanceRate;\n    this.estimatedCommission = estimatedCommission;\n    this.referralCommission = referralCommission;\n    this.referralCommissionSplit = referralCommissionSplit;\n    this.setMiddleware(middlewares, middlewareObject);\n  }\n\n  setMiddleware = (middlewares?: Array<Function>, middlewareObject) => {\n    const middlewareManager = new MiddlewareManager(this, middlewareObject);\n    middlewareManager.applyToAllMethods([\n      precisionMiddleware,\n      memoizeMiddleware,\n      ...middlewares,\n    ]);\n  };\n\n  getLoanValue({\n    propertyValue,\n    propertyWork = 0,\n    fortune,\n    pledgedValue = 0,\n    fees = this.getFeesBase({ propertyValue, propertyWork }),\n  }: {\n    propertyValue: number,\n    fortune: number,\n    pledgedValue?: number,\n    fees?: number,\n  }) {\n    return propertyValue + propertyWork + fees + pledgedValue - fortune;\n  }\n\n  getPropAndWork({ propertyValue, propertyWork }) {\n    return propertyValue + propertyWork;\n  }\n\n  getBorrowRatio({\n    propertyValue,\n    loan = 0,\n  }: {\n    propertyValue: number,\n    loan: number,\n  }) {\n    return loan / propertyValue;\n  }\n\n  getLoanFromBorrowRatio({\n    propertyValue,\n    borrowRatio,\n  }: {\n    propertyValue: number,\n    borrowRatio: number,\n  }) {\n    return borrowRatio * propertyValue;\n  }\n\n  getBorrowRatioWithoutLoan({\n    propertyValue,\n    fortune,\n  }: {\n    propertyValue: number,\n    fortune: number,\n  }) {\n    return this.getBorrowRatio({\n      propertyValue,\n      loan: this.getLoanValue({ propertyValue, fortune }),\n    });\n  }\n\n  getBorrowRatioStatus({ borrowRatio }) {\n    if (borrowRatio <= this.maxBorrowRatio) {\n      return SUCCESS;\n    }\n    if (borrowRatio <= this.maxBorrowRatioWithPledge) {\n      return WARNING;\n    }\n    return ERROR;\n  }\n\n  getRetirementForGender({ gender = GENDER.M }: { gender?: string } = {}) {\n    return gender === GENDER.F ? 64 : 65;\n  }\n\n  getIncomeRatio({\n    monthlyIncome,\n    monthlyPayment = 0,\n  }: {\n    monthlyIncome: number,\n    monthlyPayment: number,\n  }) {\n    return monthlyPayment / monthlyIncome;\n  }\n\n  getIncomeRatioStatus({ incomeRatio }) {\n    if (incomeRatio <= this.maxIncomeRatio) {\n      return SUCCESS;\n    }\n    if (this.maxIncomeRatioTight && incomeRatio <= this.maxIncomeRatioTight) {\n      // This ratio can be disabled, i.e. set to 0, and then it'll skip the warning\n      // and only display success or error\n      return WARNING;\n    }\n    return ERROR;\n  }\n\n  getLoanCost({\n    maintenance = 0,\n    interests = 0,\n    amortization = 0,\n  }: {\n    maintenance?: number,\n    interests?: number,\n    amortization?: number,\n  } = {}) {\n    return maintenance + interests + amortization;\n  }\n\n  getLoanCostWithParts({\n    maintenance,\n    interests,\n    amortization,\n  }: {\n    maintenance: number,\n    interests: number,\n    amortization?: number,\n  }) {\n    return {\n      maintenance,\n      interests,\n      amortization,\n      total: this.getLoanCost({ maintenance, interests, amortization }),\n    };\n  }\n\n  checkInterestsAndTranches({\n    tranches = [],\n    interestRates,\n  }: {\n    tranches: Array<{ type: string, value: number }>,\n    interestRates: Object,\n  }) {\n    return tranches.reduce((invalidRate, { type }) => {\n      if (invalidRate) {\n        return invalidRate;\n      }\n\n      if (!interestRates[type]) {\n        return type;\n      }\n    }, undefined);\n  }\n\n  getInterestsWithTranches({\n    tranches = [],\n    interestRates,\n  }: {\n    tranches: Array<{ type: string, value: number }>,\n    interestRates: Object,\n  } = {}) {\n    return tranches.reduce((acc, { type, value }) => {\n      const rate = interestRates[type];\n\n      if (!rate || acc === '-') {\n        return '-';\n      }\n\n      return acc + value * rate;\n    }, 0);\n  }\n\n  getAmortizationRateBase({\n    borrowRatio = 0,\n    amortizationYears = this.amortizationYears,\n  }: { borrowRatio: number, amortizationRate?: number } = {}) {\n    let amortizationRate = 0;\n    if (borrowRatio > this.amortizationGoal) {\n      // The loan has to be below 65% before 15 years or before retirement,\n      // whichever comes first\n      const amountToAmortize = borrowRatio - this.amortizationGoal;\n\n      // Make sure we don't create a black hole, or use negative values by error\n      if (amortizationYears > 0) {\n        // Amortization is the amount to amortize divided by the amount\n        // of years before the deadline\n        amortizationRate = amountToAmortize / amortizationYears;\n      }\n    } else {\n      // For projects below 65%, stop amortizing\n      // yearlyAmortization = propAndWork * constants.amortization;\n    }\n\n    return amortizationRate / borrowRatio || 0;\n  }\n\n  getMaxLoanBase({\n    propertyValue,\n    propertyWork,\n    pledgedAmount = 0,\n    residenceType,\n  }: {\n    propertyValue: number,\n    propertyWork: number,\n    pledgedAmount: number,\n    residenceType: string,\n  } = {}): number {\n    if (residenceType === RESIDENCE_TYPE.MAIN_RESIDENCE) {\n      return Math.min(\n        (propertyValue + propertyWork) * this.maxBorrowRatio + pledgedAmount,\n\n        (propertyValue + propertyWork) * this.maxBorrowRatioWithPledge,\n      );\n    }\n    return (propertyValue + propertyWork) * this.maxBorrowRatio;\n  }\n\n  getYearsToRetirement = ({\n    age1,\n    age2,\n    gender1,\n    gender2,\n  }: {\n    age1?: number,\n    age2?: number,\n    gender1?: 'F' | 'M',\n    gender2?: 'F' | 'M',\n  } = {}) => {\n    const retirement1 = this.getRetirementForGender({ gender: gender1 });\n    let retirement2 = null;\n    if (gender2) {\n      retirement2 = this.getRetirementForGender({ gender: gender2 });\n    }\n\n    // Substract age to determine remaining time to retirement for both borrowers\n    const toRetirement1 = retirement1 - age1;\n    let toRetirement2;\n    if (retirement2 && age2) {\n      toRetirement2 = retirement2 - age2;\n    }\n\n    // Get the most limiting time to retirement for both borrowers, in years\n    let yearsToRetirement;\n    if (toRetirement2) {\n      yearsToRetirement = Math.min(toRetirement1, toRetirement2);\n    } else {\n      yearsToRetirement = toRetirement1;\n    }\n\n    return Math.max(yearsToRetirement, 0);\n  };\n\n  getTheoreticalMonthly({ propAndWork, loanValue, amortizationRate }) {\n    const maintenance = (propAndWork * this.theoreticalMaintenanceRate) / 12;\n    const interests = (loanValue * this.theoreticalInterestRate) / 12;\n    const amortization = (loanValue * amortizationRate) / 12;\n    return this.getLoanCostWithParts({ maintenance, interests, amortization });\n  }\n\n  getNotaryFeesRate() {\n    return this.notaryFees;\n  }\n\n  getMinCash({\n    propertyValue,\n    propertyWork,\n    fees = this.getFeesBase({ propertyValue, propertyWork }),\n  }) {\n    return (propertyValue + propertyWork) * this.minCash + fees;\n  }\n\n  getFeesBase({ fees, propertyValue = 0 }) {\n    if (fees === 0 || fees > 0) {\n      return fees;\n    }\n\n    return propertyValue * this.notaryFees;\n  }\n\n  getIncomeLimitedPropertyValue = ({ nF, r, i, mR, m }) => ({\n    income,\n    fortune,\n  }) => {\n    // The first one is with 0 amortization\n    const incomeLimited1 = (mR * income + fortune * i) / (m + (1 + nF) * i);\n\n    // The second is with amortization factored in (and it could be negative due to math)\n    const incomeLimited2 = ((1 + r * i) * fortune + mR * r * income)\n      / (r * (m + i) + nF * (1 + r * i) + 0.35);\n\n    // Therefore, take the minimum value of both, which is the most limiting one\n    // Because of the ratios, round this value down\n    return Math.floor(Math.min(incomeLimited1, incomeLimited2));\n  };\n\n  getAveragedInterestRate({ tranches = [], interestRates = {} }) {\n    return tranches.reduce(\n      (totalRate, { type, value }) => totalRate + interestRates[type] * value,\n      0,\n    );\n  }\n}\n\nexport default new FinanceCalculator();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"financeCalculatorMiddlewares.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/FinanceCalculator/financeCalculatorMiddlewares.js                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const precisionMiddleware = () => next => (...args) => {\n  const result = next(...args);\n\n  if (typeof result === 'number') {\n    return Number(result.toPrecision(10));\n  }\n\n  return result;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"MiddlewareManager\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/MiddlewareManager/index.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './MiddlewareManager';\nexport * from './argumentMapperMiddleware';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MiddlewareManager.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/MiddlewareManager/MiddlewareManager.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport { compose } from 'recompose';\nimport isArray from 'lodash/isArray';\nimport difference from 'lodash/difference';\n\nconst middlewareManagerHash = [];\nconst CLASS_METHODS_TO_EXCLUDE = [\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toString',\n  'valueOf',\n  'toLocaleString',\n  '__defineGetter__',\n  '__defineSetter__',\n  '__lookupGetter__',\n  '__lookupSetter__',\n];\n\ntype MiddlewareType = Array<Function> | Function;\ntype MiddlewareObjectType = Array<Object> | Object;\n\n// Careful, methods starting with \"_\" will not be wrapped by middleware,\n// except if you use a middlewareObject\nclass MiddlewareManager {\n  constructor(target: Object, middlewareObjects?: MiddlewareObjectType) {\n    let instance = middlewareManagerHash.find(key => key._target === target);\n    // a target can only has one MiddlewareManager instance\n    if (instance === undefined) {\n      this._target = target;\n      this._methods = {};\n      this._methodMiddlewares = {};\n      middlewareManagerHash.push(this);\n      instance = this;\n    }\n\n    if (middlewareObjects) {\n      instance.useObjectMiddleware(middlewareObjects);\n    }\n\n    return instance;\n  }\n\n  applyToAllMethods(_middlewares: MiddlewareType, omit) {\n    const middlewares = this.arrayify(_middlewares);\n    const methods = this.getAllMethodNames(this._target);\n\n    methods\n      .filter((name) => {\n        if (omit) {\n          return !omit.includes(name);\n        }\n        return true;\n      })\n      .forEach(method => this.applyToMethod(method, middlewares));\n\n    return this;\n  }\n\n  getAllMethodNames(obj: Object = {}, stop: mixed) {\n    const methodNames = [];\n    let proto = Object.getPrototypeOf(obj);\n    while (proto && proto !== stop) {\n      Object.getOwnPropertyNames(proto).forEach((name) => {\n        if (name !== 'constructor') {\n          if (this.hasMethod(proto, name)) {\n            methodNames.push(name);\n          }\n        }\n      });\n      proto = Object.getPrototypeOf(proto);\n    }\n    return difference(methodNames, CLASS_METHODS_TO_EXCLUDE);\n  }\n\n  hasMethod(obj: Object, name: string) {\n    const desc = Object.getOwnPropertyDescriptor(obj, name);\n    return !!desc && typeof desc.value === 'function';\n  }\n\n  applyToMethod(methodName: string, _middlewares: MiddlewareType) {\n    const middlewares = this.arrayify(_middlewares);\n\n    if (\n      typeof methodName === 'string'\n      && !this.stringStartsWithUnderscore(methodName)\n    ) {\n      const method = this._methods[methodName] || this._target[methodName];\n      if (typeof method === 'function') {\n        this._methods[methodName] = method;\n\n        if (\n          this._methodMiddlewares[methodName] === undefined\n          || !isArray(this._methodMiddlewares[methodName])\n        ) {\n          this._methodMiddlewares[methodName] = [];\n        }\n\n        middlewares.forEach(middleware =>\n          typeof middleware === 'function'\n            && this._methodMiddlewares[methodName].push(middleware(this._target)));\n        this._target[methodName] = compose(...this._methodMiddlewares[methodName])(method.bind(this._target));\n      }\n    }\n\n    return this;\n  }\n\n  stringStartsWithUnderscore(string: string) {\n    return /^_+|_+$/g.test(string);\n  }\n\n  useObjectMiddleware(_objectMiddlewares: MiddlewareObjectType) {\n    const objectMiddlewares = this.arrayify(_objectMiddlewares);\n\n    Array.prototype.slice.call(objectMiddlewares).forEach((arg) => {\n      // A middleware object can specify target functions within middlewareMethods (Array).\n      // e.g. obj.middlewareMethods = ['method1', 'method2'];\n      // only method1 and method2 will be the target function.\n      typeof arg === 'object'\n        && (arg.middlewareMethods || Object.keys(arg)).forEach((key) => {\n          typeof arg[key] === 'function'\n            && this.applyToMethod(key, arg[key].bind(arg));\n        });\n    });\n\n    return this;\n  }\n\n  arrayify(maybeArray: mixed | Array): Array<Object | Function> {\n    return isArray(maybeArray) ? maybeArray : [maybeArray];\n  }\n}\n\nexport default MiddlewareManager;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"argumentMapperMiddleware.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/MiddlewareManager/argumentMapperMiddleware.js                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport isArray from 'lodash/isArray';\n\nexport const makeArgumentMapper = (mappings: { [key: string]: Function }) =>\n  Object.keys(mappings).reduce(\n    (mapper, key) => ({\n      ...mapper,\n      [key]: () => next => (...args) => {\n        const argumentMapperFunc = mappings[key];\n        const newArgumentStructure = argumentMapperFunc(...args);\n\n        if (isArray(newArgumentStructure)) {\n          return next(...newArgumentStructure);\n        }\n\n        return next(newArgumentStructure);\n      },\n    }),\n    {},\n  );\n\nexport default makeArgumentMapper;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"memoizeOne\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/memoizeOne/index.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './memoizeOne';\nexport * from './memoizeOne';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"memoizeOne.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/memoizeOne/memoizeOne.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport areInputsEqual from './areInputsEqual';\n\nexport type EqualityFn = (newArgs: mixed[], lastArgs: mixed[]) => boolean;\n\n// <ResultFn: (...any[]) => mixed>\n// The purpose of this typing is to ensure that the returned memoized\n// function has the same type as the provided function (`resultFn`).\n// ResultFn:        Generic type (which is the same as the resultFn).\n// (...any[]): Accepts any length of arguments - and they are not checked\n// mixed:           The result can be anything but needs to be checked before usage\nconst memoizeOne = function<ResultFn: (\n...any[]) => mixed>(\n  resultFn: ResultFn,\n  isEqual?: EqualityFn = areInputsEqual,\n): ResultFn {\n  let lastThis: mixed;\n  let lastArgs: mixed[] = [];\n  let lastResult: mixed;\n  let calledOnce: boolean = false;\n\n  // breaking cache when context (this) or arguments change\n  const result = function (...newArgs: mixed[]) {\n    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n      return lastResult;\n    }\n\n    // Throwing during an assignment aborts the assignment: https://codepen.io/alexreardon/pen/RYKoaz\n    // Doing the lastResult assignment first so that if it throws\n    // nothing will be overwritten\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n\n  return (result: any);\n};\n\nexport default memoizeOne;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"areInputsEqual.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/memoizeOne/areInputsEqual.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\n\nconst inputHasChanged = (next, prev) =>\n  next.some((newInput, index) => newInput !== prev[index]);\n\nexport default function areInputsEqual(\n  newInputs: mixed[],\n  lastInputs: mixed[],\n) {\n  // no checks needed if the inputs length has changed\n  if (newInputs.length !== lastInputs.length) {\n    return false;\n  }\n\n  // Handle memoization for functions with 1 argument which is an object\n  if (\n    newInputs.length === 1\n    && typeof newInputs[0] === 'object'\n    && typeof lastInputs[0] === 'object'\n    && newInputs[0] !== null\n    && lastInputs[0] !== null\n  ) {\n    const newArgs = Object.values(newInputs[0]);\n    const lastArgs = Object.values(lastInputs[0]);\n\n    if (newArgs.length !== lastArgs.length) {\n      return false;\n    }\n\n    const oneInputHasChanged = inputHasChanged(newArgs, lastArgs);\n    return !oneInputHasChanged;\n  }\n\n  const oneInputHasChanged = inputHasChanged(newInputs, lastInputs);\n  return !oneInputHasChanged;\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"general.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/general.js                                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport isArray from 'lodash/isArray';\n\nexport const arrayify = (value) => {\n  if (value) {\n    if (isArray(value)) {\n      return value;\n    }\n    return [value];\n  }\n\n  return [];\n};\n\n/**\n * getPercent - Given an array of values, any value that is undefined or null\n * will be counted as incomplete, make sure we don't divide by 0\n *\n * @param {array} array Array of numbers, strings, or dates\n *\n * @return {number} a value between 0 and 1\n */\nexport const getPercent = (array) => {\n  if (!array) {\n    return 0;\n  }\n  if (array.length === 0) {\n    // If array is empty, return 100%\n    return 1;\n  }\n\n  const percent = array.reduce((tot, val) => {\n    if (isArray(val)) {\n      // Empty arrays need to be filled\n      return tot + (val.length ? 1 : 0);\n    }\n    if (val !== undefined && val !== null) {\n      return tot + 1;\n    }\n    return tot;\n  }, 0) / array.length;\n  return Number.isFinite(percent) ? percent : 0;\n};\n\n// Given multiple objects of the form { percent, count },\n// Merge them together with a single count and percent\nexport const getAggregatePercent = (percentageObjects) => {\n  const {\n    percent: aggregatePercent,\n    count: aggregateCount,\n  } = percentageObjects.reduce(\n    (obj, { percent, count }) => ({\n      percent: obj.percent + percent * count,\n      count: obj.count + count,\n    }),\n    { percent: 0, count: 0 },\n  );\n\n  return {\n    count: aggregateCount,\n    percent: aggregateCount === 0 ? 0 : aggregatePercent / aggregateCount,\n  };\n};\n\nexport const normalize = array =>\n  array.reduce((obj, item) => ({ ...obj, [item.id || item._id]: item }), {});\n\nexport const simpleHash = (data) => {\n  let string = data;\n  if (typeof data !== 'string') {\n    string = JSON.stringify(data);\n  }\n\n  let hash = 0;\n  if (string.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash &= hash; // Convert to 32bit integer\n  }\n  return hash;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notaryFees\":{\"NotaryFeesCalculator.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/notaryFees/NotaryFeesCalculator.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport * as cantonConfigs from './cantonConfigs';\nimport Calculator from '../Calculator';\nimport { NOTARY_FEES } from '../../config/financeConstants';\nimport { PURCHASE_TYPE } from '../../api/constants';\n\nconst roundToCents = val => Number(val.toFixed(2));\n\nconst roundObjectKeys = obj =>\n  Object.keys(obj).reduce(\n    (newObj, key) => ({\n      ...newObj,\n      [key]: typeof obj[key] === 'number' ? roundToCents(obj[key]) : obj[key],\n    }),\n    {},\n  );\n\nclass NotaryFeesCalculator {\n  constructor({ canton }) {\n    this.init(canton);\n  }\n\n  init(canton) {\n    const config = cantonConfigs[canton];\n    this.canton = canton;\n\n    Object.assign(this, config);\n  }\n\n  hasDetailedConfig() {\n    return cantonConfigs[this.canton];\n  }\n\n  shouldUseConstructionMath({ loan, structureId }) {\n    const hasDetailedValue = Calculator.hasDetailedPropertyValue({\n      loan,\n      structureId,\n    });\n    const shouldUseConstructionNotaryFees = Calculator.shouldUseConstructionNotaryFees({ loan, structureId });\n\n    return hasDetailedValue && shouldUseConstructionNotaryFees;\n  }\n\n  getNotaryFeesForLoan({ loan, structureId }) {\n    const propertyValue = Calculator.selectPropertyValue({ loan, structureId });\n\n    if (!this.hasDetailedConfig()) {\n      return this.getDefaultFees({ propertyValue });\n    }\n\n    const { residenceType } = loan;\n\n    const mortgageNoteIncrease = Calculator.getMortgageNoteIncrease({\n      loan,\n      structureId,\n    });\n\n    // Acte d'achat\n    const buyersContractFees = this.buyersContractFees({ loan, structureId });\n\n    // Cédule hypothécaire\n    const mortgageNoteFees = this.mortgageNoteFees({ mortgageNoteIncrease });\n\n    // Déductions\n    const deductions = this.getDeductions({\n      propertyValue,\n      mortgageNoteFees,\n      residenceType,\n      mortgageNoteIncrease,\n      propertyTransferTax: buyersContractFees.propertyRegistrationTax,\n    });\n\n    const roundedResult = roundObjectKeys({\n      total:\n        buyersContractFees.total + mortgageNoteFees.total - deductions.total,\n      buyersContractFees: roundObjectKeys(buyersContractFees),\n      mortgageNoteFees: roundObjectKeys(mortgageNoteFees),\n      deductions: roundObjectKeys(deductions),\n      canton: this.canton,\n      estimate: false,\n    });\n\n    return roundedResult;\n  }\n\n  getNotaryFeesWithoutLoan({\n    propertyValue,\n    mortgageNoteIncrease,\n    residenceType,\n  }) {\n    if (!this.hasDetailedConfig()) {\n      return this.getDefaultFees({ propertyValue });\n    }\n\n    // Acte d'achat\n    const buyersContractFees = this.buyersContractFeesAcquisition({\n      propertyValue,\n    });\n\n    // Cédule hypothécaire\n    const mortgageNoteFees = this.mortgageNoteFees({ mortgageNoteIncrease });\n\n    // Déductions\n    const deductions = this.getDeductions({\n      propertyValue,\n      mortgageNoteIncrease,\n      residenceType,\n      propertyTransferTax: this.propertyRegistrationTax({ propertyValue }),\n    });\n\n    const roundedResult = roundObjectKeys({\n      total:\n        buyersContractFees.total + mortgageNoteFees.total - deductions.total,\n      buyersContractFees: roundObjectKeys(buyersContractFees),\n      mortgageNoteFees: roundObjectKeys(mortgageNoteFees),\n      deductions: roundObjectKeys(deductions),\n      canton: this.canton,\n      estimate: false,\n    });\n\n    return roundedResult;\n  }\n\n  buyersContractFees({ loan, structureId }) {\n    if (loan.purchaseType === PURCHASE_TYPE.REFINANCING) {\n      return { total: 0 };\n    }\n\n    if (this.shouldUseConstructionMath({ loan, structureId })) {\n      const {\n        landValue = 0,\n        constructionValue = 0,\n        additionalMargin = 0,\n      } = Calculator.selectProperty({ loan, structureId });\n      return this.buyersContractFeesConstruction({\n        landValue,\n        constructionValue,\n        additionalMargin,\n      });\n    }\n\n    const propertyValue = Calculator.selectPropertyValue({ loan, structureId });\n    return this.buyersContractFeesAcquisition({ propertyValue });\n  }\n\n  buyersContractFeesAcquisition({ propertyValue }) {\n    // Frais d'enregistrement/Droits de mutation\n    const propertyRegistrationTax = this.propertyRegistrationTax({\n      propertyValue,\n    });\n    // Emoluments du notaire\n    const notaryIncomeFromProperty = this.notaryIncomeFromProperty({\n      propertyValue,\n    });\n    // Registre foncier\n    const landRegistryPropertyTax = this.landRegistryPropertyTax({\n      propertyValue,\n    });\n    // Frais du notaire additionnels estimés\n    const additionalFees = this.additionalFees();\n\n    return {\n      total:\n        propertyRegistrationTax\n        + notaryIncomeFromProperty\n        + landRegistryPropertyTax\n        + additionalFees,\n      propertyRegistrationTax,\n      landRegistryPropertyTax,\n      notaryIncomeFromProperty,\n      additionalFees,\n    };\n  }\n\n  buyersContractFeesConstruction({\n    landValue,\n    constructionValue,\n    additionalMargin,\n  }) {\n    // Frais d'enregistrement/Droits de mutation\n    const propertyRegistrationTax = this.propertyRegistrationTax({\n      propertyValue: landValue + additionalMargin,\n    });\n\n    // Emoluments du notaire\n    const notaryIncomeFromProperty = this.notaryIncomeFromProperty({\n      propertyValue: landValue + additionalMargin,\n    });\n\n    // Registre foncier\n    const landRegistryPropertyTax = this.landRegistryPropertyTax({\n      propertyValue: landValue + additionalMargin,\n    });\n\n    // Contrat de construction\n    const propertyConstructionTax = this.propertyConstructionTax({\n      constructionValue,\n    });\n\n    // Frais du notaire additionnels estimés\n    const additionalFees = this.additionalFees();\n\n    return {\n      total:\n        propertyRegistrationTax\n        + notaryIncomeFromProperty\n        + landRegistryPropertyTax\n        + propertyConstructionTax\n        + additionalFees,\n      propertyRegistrationTax,\n      propertyConstructionTax,\n      landRegistryPropertyTax,\n      notaryIncomeFromProperty,\n      additionalFees,\n    };\n  }\n\n  mortgageNoteFees({ mortgageNoteIncrease }) {\n    // Frais d'enregistrement\n    const mortgageNoteRegistrationTax = this.mortgageNoteRegistrationTax({\n      mortgageNoteIncrease,\n    });\n    // Emoluments du notaire\n    const notaryIncomeFromMortgageNote = this.notaryIncomeFromMortgageNote({\n      mortgageNoteIncrease,\n    });\n    // Registre foncier\n    const landRegistryMortgageNoteTax = this.landRegistryMortgageNoteTax({\n      mortgageNoteIncrease,\n    });\n    // Frais du notaire additionnels estimés\n    // Nuls si aucune cédule nécessaire\n    const additionalFees = mortgageNoteIncrease > 0 ? this.additionalFees() : 0;\n\n    return {\n      total:\n        mortgageNoteRegistrationTax\n        + landRegistryMortgageNoteTax\n        + notaryIncomeFromMortgageNote\n        + additionalFees,\n      mortgageNoteRegistrationTax,\n      landRegistryMortgageNoteTax,\n      notaryIncomeFromMortgageNote,\n      additionalFees,\n    };\n  }\n\n  getDeductions({\n    propertyValue,\n    mortgageNoteIncrease,\n    residenceType,\n    propertyTransferTax,\n  }) {\n    const buyersContractDeductions = this.buyersContractDeductions\n      ? this.buyersContractDeductions({\n        residenceType,\n        propertyValue,\n        transferTax: propertyTransferTax,\n      })\n      : 0;\n\n    const mortgageNoteDeductions = this.mortgageNoteDeductions\n      ? this.mortgageNoteDeductions({\n        residenceType,\n        propertyValue,\n        mortgageNoteRegistrationTax: this.mortgageNoteRegistrationTax({\n          mortgageNoteIncrease,\n        }),\n      })\n      : 0;\n\n    return {\n      buyersContractDeductions,\n      mortgageNoteDeductions,\n      total: buyersContractDeductions + mortgageNoteDeductions,\n    };\n  }\n\n  getDefaultFees({ propertyValue }) {\n    return {\n      total: propertyValue * NOTARY_FEES,\n      canton: this.canton,\n      estimate: true,\n    };\n  }\n}\n\nexport default NotaryFeesCalculator;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cantonConfigs.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/notaryFees/cantonConfigs.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { RESIDENCE_TYPE } from 'core/api/constants';\nimport degressive from './degressive';\nimport * as cantons from './cantonConstants';\nimport { VAT } from '../../config/financeConstants';\n\nconst isCasatax = ({ residenceType, propertyValue }) =>\n  residenceType === RESIDENCE_TYPE.MAIN_RESIDENCE\n  && propertyValue <= cantons.GE.CASATAX_CUTOFF;\n\nexport const GE = {\n  notaryIncomeFromProperty: ({ propertyValue }) =>\n    degressive({\n      amount: propertyValue,\n      brackets: cantons.GE.NOTARY_PROPERTY_BRACKETS,\n      minTax: cantons.GE.NOTARY_PROPERTY_BRACKETS_MIN,\n    })\n    * (1 + VAT),\n  notaryIncomeFromMortgageNote: ({ mortgageNoteIncrease }) =>\n    degressive({\n      amount: mortgageNoteIncrease,\n      brackets: cantons.GE.NOTARY_NOTE_BRACKETS,\n    })\n    * (1 + VAT),\n  propertyConstructionTax: ({ constructionValue }) =>\n    constructionValue * cantons.GE.PROPERTY_CONSTRUCTION_TAX,\n  propertyRegistrationTax: ({ propertyValue }) =>\n    propertyValue * cantons.GE.PROPERTY_REGISTRATION_TAX,\n  landRegistryPropertyTax: ({ propertyValue }) =>\n    propertyValue * cantons.GE.LAND_REGISTRY_PROPERTY_TAX,\n  mortgageNoteRegistrationTax: ({ mortgageNoteIncrease }) =>\n    mortgageNoteIncrease * cantons.GE.MORTGAGE_NOTE_REGISTRATION_TAX,\n  landRegistryMortgageNoteTax: ({ mortgageNoteIncrease }) =>\n    mortgageNoteIncrease * cantons.GE.LAND_REGISTRY_MORTGAGE_NOTE_TAX,\n  buyersContractDeductions: ({ residenceType, propertyValue, transferTax }) =>\n    (isCasatax({ residenceType, propertyValue })\n      ? Math.min(cantons.GE.CASATAX_PROPERTY_DEDUCTION, transferTax)\n      : 0),\n  additionalFees: () => cantons.GE.ADDITIONAL_FEES,\n  mortgageNoteDeductions: ({\n    residenceType,\n    propertyValue,\n    mortgageNoteRegistrationTax,\n  }) =>\n    (isCasatax({ residenceType, propertyValue })\n      ? mortgageNoteRegistrationTax * cantons.GE.MORTGAGE_NOTE_CASATAX_DEDUCTION\n      : 0),\n};\n\nexport const VD = {\n  notaryIncomeFromProperty: ({ propertyValue }) =>\n    degressive({\n      amount: propertyValue,\n      brackets: cantons.VD.NOTARY_PROPERTY_BRACKETS,\n      minTax: cantons.VD.NOTARY_PROPERTY_BRACKETS_MIN,\n    })\n    * (1 + VAT),\n  propertyConstructionTax: () => 0, // TODO\n  notaryIncomeFromMortgageNote: ({ mortgageNoteIncrease }) =>\n    degressive({\n      amount: mortgageNoteIncrease,\n      brackets: cantons.VD.NOTARY_NOTE_BRACKETS,\n    })\n    * (1 + VAT),\n  propertyRegistrationTax: ({ propertyValue }) =>\n    propertyValue * cantons.VD.PROPERTY_REGISTRATION_TAX,\n  landRegistryPropertyTax: ({ propertyValue }) =>\n    propertyValue * cantons.VD.LAND_REGISTRY_PROPERTY_TAX,\n  mortgageNoteRegistrationTax: ({ mortgageNoteIncrease }) => 0,\n  landRegistryMortgageNoteTax: ({ mortgageNoteIncrease }) =>\n    mortgageNoteIncrease * cantons.VD.LAND_REGISTRY_MORTGAGE_NOTE_TAX,\n  additionalFees: () => cantons.VD.ADDITIONAL_FEES,\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"degressive.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/notaryFees/degressive.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\n\nconst INFINITY = 100000000000000;\n\ntype degressiveArgs = {\n  amount: number,\n  brackets: Array<{ rate: number, max: number }>,\n  maxTax?: number,\n  minTax?: number,\n};\n\n// Calculates the degressive tax on an amount, based on brackets with varying rates\nconst degressive = ({\n  amount,\n  brackets = [],\n  maxTax,\n  minTax,\n}: degressiveArgs): number => {\n  if (amount <= 0) {\n    return 0;\n  }\n\n  let tax = 0;\n\n  brackets.every(({ max = INFINITY, rate }, index, allBrackets) => {\n    let previousBracket = { rate: 0, max: 0 };\n    if (index > 0) {\n      previousBracket = allBrackets[index - 1];\n    }\n\n    if (max < previousBracket.max) {\n      throw new Error(`Tax brackets should come in increasing order, but found ${\n        previousBracket.max\n      } -> ${max}`);\n    }\n\n    const bracketTax = Math.min(amount - previousBracket.max, max - previousBracket.max) * rate;\n\n    tax += bracketTax;\n\n    // Stop calculating once you've reached the highest bracket you're in\n    return max <= amount;\n  });\n\n  if (maxTax) {\n    tax = Math.min(tax, maxTax);\n  }\n\n  if (minTax) {\n    tax = Math.max(tax, minTax);\n  }\n\n  return tax;\n};\n\nexport default degressive;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cantonConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/notaryFees/cantonConstants.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Rates and sources are documented in this google doc:\n// https://docs.google.com/document/d/1EF373nmAZ7dZB22NELh-ffaaOwYkFCuTeQ5JrST5wUg\n\nexport const GE = {\n  PROPERTY_REGISTRATION_TAX: 0.03,\n  NOTARY_PROPERTY_BRACKETS_MIN: 200,\n  NOTARY_PROPERTY_BRACKETS: [\n    { rate: 0.007, max: 200000 },\n    { rate: 0.006, max: 400000 },\n    { rate: 0.0045, max: 800000 },\n    { rate: 0.004, max: 1000000 },\n    { rate: 0.0035, max: 1500000 },\n    { rate: 0.003, max: 2000000 },\n    { rate: 0.0025, max: 3500000 },\n    { rate: 0.002, max: 5000000 },\n    { rate: 0.0015, max: 7500000 },\n    { rate: 0.001, max: 10000000 },\n    { rate: 0.00075, max: 20000000 },\n    { rate: 0.0005 },\n  ],\n  NOTARY_NOTE_BRACKETS_MIN: 100,\n  NOTARY_NOTE_BRACKETS: [\n    { rate: 0.005, max: 200000 },\n    { rate: 0.004, max: 500000 },\n    { rate: 0.003, max: 2000000 },\n    { rate: 0.002, max: 5000000 },\n    { rate: 0.001 },\n  ],\n  MORTGAGE_NOTE_REGISTRATION_TAX: 0.01365,\n  LAND_REGISTRY_PROPERTY_TAX: 0.0025,\n  LAND_REGISTRY_MORTGAGE_NOTE_TAX: 0.001,\n  ADDITIONAL_FEES: 1000,\n  CASATAX_CUTOFF: 1183649,\n  CASATAX_PROPERTY_DEDUCTION: 17755,\n  PROPERTY_CONSTRUCTION_TAX: 0.01,\n  MORTGAGE_NOTE_CASATAX_DEDUCTION: 0.5,\n};\n\nexport const VD = {\n  PROPERTY_REGISTRATION_TAX: 0.033,\n  NOTARY_PROPERTY_BRACKETS_MIN: 300,\n  NOTARY_PROPERTY_BRACKETS: [\n    { rate: 0.007, max: 100000 },\n    { rate: 0.004, max: 300000 },\n    { rate: 0.0025, max: 500000 },\n    { rate: 0.002, max: 750000 },\n    { rate: 0.0015, max: 2500000 },\n    { rate: 0.001, max: 10000000 },\n    { rate: 0.0005, max: 20000000 },\n    { rate: 0.00025 },\n  ],\n  NOTARY_NOTE_BRACKETS_MIN: 100,\n  NOTARY_NOTE_BRACKETS: [\n    { rate: 0.005, max: 100000 },\n    { rate: 0.0035, max: 300000 },\n    { rate: 0.003, max: 500000 },\n    { rate: 0.002, max: 750000 },\n    { rate: 0.0015, max: 1000000 },\n    { rate: 0.001, max: 5000000 },\n    { rate: 0.0005, max: 10000000 },\n    { rate: 0.00025, max: 20000000 },\n    { rate: 0.000125 },\n  ],\n  LAND_REGISTRY_PROPERTY_TAX: 0.0015,\n  LAND_REGISTRY_MORTGAGE_NOTE_TAX: 0.0035,\n  ADDITIONAL_FEES: 1000,\n};\n\n// TODO: Complete\nexport const VS = {\n  TRANSFER_TAX: 0.0225,\n  NOTARY_PROPERTY_BRACKETS_MIN: 200,\n  NOTARY_PROPERTY_BRACKETS: [\n    { rate: 0.005, max: 200000 },\n    { rate: 0.004, max: 500000 },\n    { rate: 0.003, max: 1000000 },\n    { rate: 0.002, max: 10000000 },\n    { rate: 0.001 },\n  ],\n  NOTARY_NOTE_BRACKETS_MIN: 200,\n  NOTARY_NOTE_BRACKETS: [\n    { rate: 0.005, max: 100000 },\n    { rate: 0.004, max: 200000 },\n    { rate: 0.003, max: 500000 },\n    { rate: 0.002, max: 1000000 },\n    { rate: 0.001 },\n  ],\n};\n\n// TODO: Complete\nexport const FR = {\n  TRANSFER_TAX: 0.03,\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/notaryFees/index.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default as NotaryFeesCalculator } from './NotaryFeesCalculator';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"formArrayHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/formArrayHelpers.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// @flow\nimport get from 'lodash/get';\n\nimport { arrayify, simpleHash } from './general';\n\n// Returns the current value of an autoForm input\nconst getCurrentValue = (input, doc) => get(doc, input.id);\n\ntype formFieldType = {\n  condition?: boolean,\n  required?: boolean,\n  disabled?: boolean,\n  type: string,\n};\n\n// shouldCountField - A boolean to determine if a field in an array\n// should be counted or not\nexport const shouldCountField = (formField: formFieldType) =>\n  (formField.condition === undefined || formField.condition === true)\n  && formField.required !== false\n  && !formField.disabled\n  && formField.type !== 'h3';\n\nconst conditionalInputIsTriggered = (rootField, doc) =>\n  getCurrentValue(rootField.inputs[0], doc) === rootField.conditionalTrueValue;\n\n// getCountedArray - Returns an array of values that are mandatory and should\n// be counted to determine a completion percentage of a form\nexport const getCountedArray = (formArray, doc, shouldCountAllFields) => {\n  const arr = [];\n\n  formArray.forEach((i) => {\n    if (shouldCountAllFields || shouldCountField(i)) {\n      if (i.type === 'conditionalInput') {\n        if (conditionalInputIsTriggered(i, doc)) {\n          // If the conditional input is triggering the next input, add all values\n          i.inputs.forEach((input) => {\n            if (shouldCountField(input)) {\n              arr.push(getCurrentValue(input, doc));\n            }\n          });\n        } else {\n          // If conditional value is not triggering\n          arr.push(getCurrentValue(i.inputs[0], doc));\n        }\n      } else {\n        arr.push(getCurrentValue(i, doc));\n      }\n    }\n  });\n\n  return arr;\n};\n\nconst fieldIsValid = (field, doc) => {\n  const currentValue = getCurrentValue(field, doc);\n\n  if (Array.isArray(currentValue)) {\n    return currentValue.length > 0;\n  }\n\n  return currentValue !== undefined;\n};\n\n// Returns a list of fields that are missing from the doc, given a form array\n// Helps you know which fields still need to be filled\nexport const getMissingFieldIds = (formArray, doc) =>\n  formArray.reduce((missingFieldIds, field) => {\n    const { type, id, inputs } = field;\n    if (!shouldCountField(field)) {\n      return missingFieldIds;\n    }\n\n    if (type === 'conditionalInput') {\n      const [conditionalField, ...additionalFields] = inputs;\n      if (conditionalInputIsTriggered(field, doc)) {\n        return [\n          ...missingFieldIds,\n          ...additionalFields.reduce(\n            (missingConditionalFields, additionalField) => {\n              if (\n                fieldIsValid(additionalField, doc)\n                || !shouldCountField(additionalField)\n              ) {\n                return missingConditionalFields;\n              }\n\n              return [...missingConditionalFields, additionalField.id];\n            },\n            [],\n          ),\n        ];\n      }\n\n      if (!fieldIsValid(conditionalField, doc)) {\n        return [...missingFieldIds, conditionalField.id];\n      }\n\n      return missingFieldIds;\n    }\n\n    if (!fieldIsValid(field, doc)) {\n      return [...missingFieldIds, id];\n    }\n\n    return missingFieldIds;\n  }, []);\n\n/**\n * Returns the hash of a form's values\n *\n * @param {Array} formArray\n * @param {Object} doc\n * @returns {Number} 32-bit integer hash\n */\nexport const getFormValuesHash = (formArray, doc) => {\n  const values = getCountedArray(formArray, doc, true);\n\n  return simpleHash(values);\n};\n\n// Sums multiple hashes together from multiple forms\nexport const getFormValuesHashMultiple = combos =>\n  combos.reduce(\n    (tot, { formArray, doc }) => tot + getFormValuesHash(formArray, doc),\n    0,\n  );\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"conversionFunctions.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/conversionFunctions.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Rounds the value, adds thousands markers every 3 digits\n// (and removes non-digit characters)\nexport function toMoney(value, { noPrefix, rounded = true } = {}) {\n  if (value === 0) {\n    return 0;\n  }\n  if (Number.isNaN(value)) {\n    // Exception for isNaN which should never appear\n    return 0;\n  }\n  if (!value) {\n    // Don't format the value if it is undefined or an empty string\n    return value;\n  }\n  const parsedValue = rounded\n    ? Math.round(Number(Math.round(value)))\n    : Number(value);\n  const negativePrefix = !noPrefix && value < 0 && parsedValue !== 0 ? '-' : '';\n\n  if (rounded) {\n    return (\n      negativePrefix\n      + String(parsedValue)\n        .replace(/\\D/g, '')\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')\n    );\n  }\n\n  const roundedDecimals = Math.round(parsedValue * 100) / 100;\n\n  const [integer, decimals] = String(roundedDecimals).split('.');\n\n  const integerPart = negativePrefix\n    + integer.replace(/\\D/g, '').replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n  let decimalPart = decimals;\n\n  if (!decimals) {\n    return [integerPart, '00'].join('.');\n  }\n\n  if (decimals && decimals.length > 2) {\n    const rounding = 10 ** (decimals.length - 2);\n    decimalPart = Math.round(Number(decimals) / rounding) * rounding;\n  }\n\n  return [integerPart, String(decimalPart).slice(0, 2)].join('.');\n}\n\n// Replaces any nondigit character by an empty character,\n// to prevent the use of non-digits\n// Only do this if the value actually exists\nexport function toNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value ? Number(String(value).replace(/\\D/g, '')) : value;\n}\n\n// Like toNumber, but allows decimals\nexport function toDecimalNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  // Remove unwanted characters, except digits, dots and commas\n  const newValue = value ? String(value).replace(/[^\\d.,]/g, '') : value;\n  // replace commas with dots\n  const commaReplaced = newValue\n    ? Number(newValue.replace(',', '.'))\n    : newValue;\n  return commaReplaced;\n}\n\nexport const toDistanceString = (dist) => {\n  if (dist <= 0) {\n    return '0 m';\n  }\n  if (dist < 1000) {\n    return `${Math.round(dist / 10) * 10} m`;\n  }\n  if (dist < 10000) {\n    return `${(Math.round(dist / 100) / 10).toFixed(1)} km`;\n  }\n\n  return `${Math.round(dist / 1000)} km`;\n};\n\nexport const roundValue = (value, digits) =>\n  Math.round(value / 10 ** digits) * 10 ** digits;\n\nexport const roundTo = (value, digits) => {\n  if (digits === 0) {\n    return value;\n  }\n\n  const roundedValue = roundValue(value, digits);\n\n  if (digits > 0) {\n    return roundedValue;\n  }\n\n  return parseFloat(roundedValue.toFixed(-digits));\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"intl.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/server/intl.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport messagesFR from 'core/lang/fr.json';\nimport { Intl } from '../intl';\n\n/**\n * formatMessage - A method to use the intl package\n *\n * @param {type}   id          the id of the message\n * @param {object} [values={}] any additional values you want to use in the\n * string\n *\n * @return {type} The formatted string\n */\n\nconst ServerIntl = new Intl(messagesFR);\n\nexport default ServerIntl;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getClientUrl.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/server/getClientUrl.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\n\nimport { getFromFiber, storeOnFiber } from './fiberStorage';\n\nconst MICROSERVICE = '__MICROSERVICE_NAME';\nconst CLIENT_URL = '__CLIENT_URL';\nconst HOST = '__CLIENT_HOST';\n\nconst getMicroserviceFromHost = (host) => {\n  const { subdomains } = Meteor.settings.public;\n  // In case the subdomain is missing, assume it is e-potek.ch, i.e. www\n  let result = 'www';\n\n  Object.keys(subdomains).some((microservice) => {\n    const microserviceUrl = subdomains[microservice];\n\n    if (microserviceUrl.includes(host)) {\n      result = microservice;\n      return true;\n    }\n  });\n\n  return result;\n};\n\nexport const getClientHost = () => getFromFiber(HOST);\nexport const getClientMicroservice = () => getFromFiber(MICROSERVICE);\nexport const getClientUrl = () => getFromFiber(CLIENT_URL);\n\nexport const setClientUrl = ({ host, href }) => {\n  const currentHost = getClientHost();\n  const currentUrl = getClientUrl();\n  const currentMicroservice = getClientMicroservice();\n\n  if (!currentHost) {\n    storeOnFiber(HOST, host);\n  }\n\n  if (!currentUrl) {\n    storeOnFiber(CLIENT_URL, href);\n  }\n\n  if (!currentMicroservice) {\n    const microservice = getMicroserviceFromHost(host);\n    storeOnFiber(MICROSERVICE, microservice);\n  }\n};\n\nexport const setClientMicroservice = (microservice) => {\n  const currentMicroservice = getClientMicroservice();\n  if (!currentMicroservice) {\n    storeOnFiber(MICROSERVICE, microservice);\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"fiberStorage.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/server/fiberStorage.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport Fibers from 'fibers';\n\nexport const storeOnFiber = (key, value) => {\n  Fibers.current[key] = value;\n};\n\nexport const getFromFiber = key => Fibers.current && Fibers.current[key];\n\nexport const removeFromFiber = (key) => {\n  delete Fibers.current[key];\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"intl.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/intl.js                                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport IntlMessageFormat from 'intl-messageformat';\nimport ReactDOMServer from 'react-dom/server';\n\nimport {\n  getUserLocale,\n  //   getFormats,\n} from 'core/utils/localization/localization';\nimport defaultIntlValues from 'core/components/Translation/defaultIntlValues';\n\nconst defaultValues = Object.keys(defaultIntlValues).reduce((obj, key) => {\n  const value = defaultIntlValues[key];\n\n  return { ...obj, [key]: ReactDOMServer.renderToString(value) };\n}, {});\n\nexport class Intl {\n  constructor(messages) {\n    this.init(messages);\n  }\n\n  init(messages) {\n    this.messages = messages;\n  }\n\n  formatMessage({ id, values = {}, fallback } = {}, legacyValues = {}) {\n    const allValues = { ...values, ...legacyValues };\n    if (id === undefined) {\n      throw new Error('an id is required in formatMessage');\n    }\n\n    const message = new IntlMessageFormat(\n      this.messages[id] || (fallback !== undefined ? fallback : id),\n      getUserLocale(),\n      // getFormats(),\n    );\n    return message.format({ ...defaultValues, ...allValues });\n  }\n}\n\nexport default new Intl();\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"formHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/formHelpers.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport React from 'react';\n\nimport T from '../components/Translation';\nimport { toNumber } from './conversionFunctions';\n\nconst onlyNums = value => value.replace(/[^\\d]/g, '');\nconst onlyNumsAndPlus = value => value.replace(/[^\\d&+]/g, '');\n\nexport const numberFormatters = {\n  parse: value => value && toNumber(value),\n  // format: value => value,\n};\n\nexport const phoneFormatters = {\n  parse: value => value && onlyNumsAndPlus(value),\n  format: value => (value ? onlyNumsAndPlus(value) : ''),\n};\n\nexport const percentFormatters = {\n  parse: value =>\n    (value === '' ? '' : Math.round(parseFloat(value) * 100) / 10000),\n  format: value => (value === '' ? '' : (value * 100).toFixed(2)),\n};\n\nexport const moneyFormatters = {\n  parse: value => toNumber(value),\n};\n\nconst setRequired = initialValue =>\n  (initialValue === undefined ? true : initialValue);\n\nexport const makeFormArray = (array, intlPrefix) =>\n  array.map(field => ({\n    ...field,\n    required: setRequired(field.required),\n    label: field.label || <T id={`${intlPrefix}.${field.id}`} />,\n  }));\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"phoneFormatting\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/phoneFormatting/index.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/max';\n\nexport const formatPhoneNumber = (string) => {\n  const phoneNumber = parsePhoneNumberFromString(string, 'CH');\n\n  if (!phoneNumber) {\n    // Couldn't parse a phone number from the string\n    return string;\n  }\n\n  const intl = phoneNumber.formatInternational();\n\n  return intl;\n};\n\nconst modifyDoc = (doc, fieldName, currentValue, customFunc) => {\n  if (customFunc) {\n    doc[fieldName] = customFunc(currentValue);\n  } else if (Array.isArray(currentValue)) {\n    doc[fieldName] = currentValue.map(formatPhoneNumber);\n  } else {\n    doc[fieldName] = formatPhoneNumber(currentValue);\n  }\n};\n\nconst formatNumbersHook = (collection, fieldName, customFunc) => {\n  collection.before.update((userId, doc, fieldNames, modifier) => {\n    if (fieldNames.includes(fieldName)) {\n      const updatedValue = modifier.$set[fieldName];\n      modifyDoc(modifier.$set, fieldName, updatedValue, customFunc);\n    }\n  });\n\n  collection.before.insert((userId, doc) => {\n    const insertedValue = doc[fieldName];\n    if (insertedValue) {\n      modifyDoc(doc, fieldName, insertedValue, customFunc);\n    }\n  });\n};\n\nexport default formatNumbersHook;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"openGraph.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/openGraph.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport ogs from 'open-graph-scraper';\nimport SlackService from 'core/api/slack/server/SlackService';\n\nexport const getOpenGraphMeta = (url) => {\n  const options = { url, timeout: 4000 };\n  return ogs(options)\n    .then(results => results.data)\n    .catch((error) => {\n      SlackService.sendError({\n        error,\n        additionalData: ['getOpenGraphMeta error', url, options],\n      });\n    });\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"filesUtils.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/utils/filesUtils.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport fs from 'fs';\nimport path from 'path';\n\nimport { FILE_UPLOAD_DIR } from 'core/api/RESTAPI/server/restApiConstants';\n\nexport const readFileBuffer = filePath => fs.readFileSync(filePath);\nexport const removeFile = filePath => fs.unlinkSync(filePath);\n\nexport const makeDir = (dir) => {\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir);\n  }\n};\n\nexport const flushDir = (dir) => {\n  fs.readdir(dir, (error, files) => {\n    if (error) {\n      throw error;\n    }\n\n    [...files].forEach((file) => {\n      removeFile(path.join(dir, file));\n    });\n  });\n};\n\nexport const makeFileUploadDir = () => makeDir(FILE_UPLOAD_DIR);\nexport const flushFileUploadDir = () => flushDir(FILE_UPLOAD_DIR);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"components\":{\"AutoForm2\":{\"constants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/components/AutoForm2/constants.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const CUSTOM_AUTOFIELD_TYPES = {\n  DATE: 'DATE',\n  PERCENT: 'PERCENT',\n  TEXT_AREA: 'TEXT_AREA',\n  MONEY: 'MONEY',\n  MONEY_DECIMAL: 'MONEY_DECIMAL',\n  HTML_PREVIEW: 'HTML_PREVIEW',\n};\n\n// Use internally to manage exceptions\nexport const COMPONENT_TYPES = {\n  ARRAY: 'ARRAY',\n  DATE: 'DATE',\n  PERCENT: 'PERCENT',\n  SELECT: 'SELECT',\n  TEXT_AREA: 'TEXT_AREA',\n  MONEY: 'MONEY',\n  RENDER: 'RENDER',\n  HTML_PREVIEW: 'HTML_PREVIEW',\n};\n\nexport const FIELDS_TO_IGNORE = [\n  'label',\n  'field',\n  'fields',\n  'uniforms',\n  'InputLabelProps',\n  'onChange',\n  'model',\n  'changedMap',\n];\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"Loading\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/components/Loading/index.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './Loading';\nexport { default as withLoading } from './withLoading';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"MissingDoc\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/components/MissingDoc/index.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default } from './MissingDoc';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"OfferList\":{\"feedbackHelpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/components/OfferList/feedbackHelpers.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\n\nexport const FEEDBACK_OPTIONS = {\n  POSITIVE: 'POSITIVE',\n  NEGATIVE_NOT_COMPETITIVE: 'NEGATIVE_NOT_COMPETITIVE',\n  NEGATIVE_WITHOUT_FOLLOW_UP: 'NEGATIVE_WITHOUT_FOLLOW_UP',\n  CUSTOM: 'CUSTOM',\n};\n\nexport const FEEDBACK_OPTIONS_SETTINGS = {\n  [FEEDBACK_OPTIONS.POSITIVE]: {\n    enableComments: true,\n    enableOutro: true,\n  },\n  [FEEDBACK_OPTIONS.NEGATIVE_NOT_COMPETITIVE]: {\n    enableComments: true,\n    enableOutro: true,\n  },\n  [FEEDBACK_OPTIONS.NEGATIVE_WITHOUT_FOLLOW_UP]: {\n    enableComments: true,\n    enableCustomIntro: true,\n    enableOutro: true,\n  },\n  [FEEDBACK_OPTIONS.CUSTOM]: {\n    enableCustomIntro: false,\n    enableComments: false,\n    enableOutro: false,\n  },\n};\n\nconst greetings = ({ contactName, formatMessage }) =>\n  formatMessage({ id: 'Feedback.greetings' }, { contactName });\n\nconst introduction = ({\n  option,\n  borrowers,\n  singleBorrower,\n  address,\n  date,\n  formatMessage,\n}) => {\n  if (singleBorrower) {\n    return formatMessage(\n      {\n        id: FEEDBACK_OPTIONS_SETTINGS[option].enableCustomIntro\n          ? `Feedback.${option}.introduction.singleBorrower`\n          : 'Feedback.introduction.singleBorrower',\n      },\n      {\n        borrower: borrowers[0].name,\n        address,\n        date,\n      },\n    );\n  }\n\n  return formatMessage(\n    {\n      id: FEEDBACK_OPTIONS_SETTINGS[option].enableCustomIntro\n        ? `Feedback.${option}.introduction.twoBorrowers`\n        : 'Feedback.introduction.twoBorrowers',\n    },\n    {\n      borrower1: borrowers[0].name,\n      borrower2: borrowers[1].name,\n      address,\n      date,\n    },\n  );\n};\n\nconst outro = ({ borrowers, singleBorrower, option, formatMessage }) => {\n  if (singleBorrower) {\n    return formatMessage(\n      { id: `Feedback.${option}.outro.singleBorrower` },\n      { borrower: borrowers[0].name, singleBorrower: true },\n    );\n  }\n\n  return formatMessage(\n    { id: `Feedback.${option}.outro.twoBorrowers` },\n    {\n      borrower1: borrowers[0].name,\n      borrower2: borrowers[1].name,\n      singleBorrower: false,\n    },\n  );\n};\n\nconst closing = ({ assignee, formatMessage }) =>\n  formatMessage({ id: 'Feedback.closing' }, { assignee });\n\nexport const makeFeedback = ({ model, offer, formatMessage }) => {\n  const { option, comments = [], customFeedback = '' } = model;\n  const {\n    lender: {\n      contact: { firstName: contactName },\n      loan: {\n        borrowers,\n        user: { assignedEmployee },\n      },\n    },\n    property,\n    createdAt,\n  } = offer;\n\n  const { firstName: assignee = 'e-Potek' } = assignedEmployee || {};\n  const { address1, zipCode, city } = property || {};\n\n  if (!property || !address1 || !zipCode || !city) {\n    throw new Meteor.Error('No property or address');\n  }\n\n  const address = `${address1}, ${zipCode} ${city}`;\n\n  if (option === FEEDBACK_OPTIONS.CUSTOM) {\n    // Replace all returns into HTML\n    return customFeedback.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\n  }\n\n  let feedback = '';\n  const singleBorrower = borrowers.length === 1;\n\n  if (option) {\n    feedback = feedback.concat(greetings({ contactName, formatMessage }));\n    feedback = feedback.concat(introduction({\n      option,\n      borrowers,\n      singleBorrower,\n      address,\n      date: moment(createdAt).format('DD.MM.YYYY'),\n      formatMessage,\n    }));\n    feedback = feedback.concat(formatMessage({ id: `Feedback.${option}.body` }, { singleBorrower }));\n\n    if (comments.length && FEEDBACK_OPTIONS_SETTINGS[option].enableComments) {\n      feedback = feedback.concat(formatMessage(\n        { id: `Feedback.${option}.comments` },\n        { singleBorrower },\n      ));\n      feedback = feedback.concat(\n        '<ul>',\n        comments\n          .filter(x => x)\n          .map(comment => `<li><b>${comment}</b></li>`)\n          .join('\\n'),\n        '</ul>',\n      );\n    }\n\n    if (FEEDBACK_OPTIONS_SETTINGS[option].enableOutro) {\n      feedback = feedback.concat(outro({ option, singleBorrower, borrowers, formatMessage }));\n    }\n\n    feedback = feedback.concat(closing({ assignee, formatMessage }));\n  }\n\n  return feedback;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"Translation\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/components/Translation/index.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport * from './Translation';\nexport { default } from './Translation';\nexport * from './numberComponents';\nexport * from './formattingComponents';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"numberComponents\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/components/Translation/numberComponents/index.js                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default as Money } from './Money';\nexport { default as Percent } from './Percent';\nexport { default as IntlNumber } from './IntlNumber';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"formattingComponents\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/components/Translation/formattingComponents/index.js                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport { default as MetricArea } from './MetricArea';\nexport { default as IntlDate } from './IntlDate';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"LoanChecklist\":{\"LoanChecklistEmail\":{\"styles.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/components/LoanChecklist/LoanChecklistEmail/styles.js                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nconst styles = `\n.check-mark {\n    width: 15px;\n    height: 15px;\n    border-radius: 50%;     \n    background-color: #86E9DA;\n    color: white;     \n    margin: 0;\n    text-align: center;\n    font-size: 12px;\n    line-height: 16px;\n}\n\n.bullet {\n    width: 14px;\n    height: 14px;\n    border-radius: 50%;\n    border: 1px solid #2F5DE1;\n}\n\n.bullet div {\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    background-color: #2F5DE1;\n    margin: 2px ;\n }\n\n table {\n     width: 100%;\n }\n\n td {\n     padding: 9px;\n }\n\n .secondary {\n     color: rgba(0,0,0,0.3);\n }\n\n .section-title {\n     text-align: center;\n }\n\n .list-title {\n     text-align: center;\n     color: #ABABAB;\n }\n\n .separator {\n     margin: 8px;\n }\n`;\n\nexport default styles;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"config\":{\"financeConstants.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/config/financeConstants.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexport const NOTARY_FEES = 0.05; // Percent\nexport const AMORTIZATION_STOP = 0.65; // Percent\nexport const MAINTENANCE_REAL = 0.005; // Percent\nexport const MAINTENANCE_FINMA = 0.01; // Percent\nexport const INTERESTS_FINMA = 0.05; // Percent\nexport const APPROXIMATE_LPP_FEES = 0.1; // Percent\nexport const DEFAULT_AMORTIZATION = 0.01; // Percent of property value\nexport const AMORTIZATION_YEARS = 15; // Years\nexport const DEFAULT_INTEREST_RATE = 0.015; // Percent, use 1.5% by default\nexport const MAX_BORROW_RATIO_PRIMARY_PROPERTY = 0.8; // Percent\nexport const MAX_BORROW_RATIO_OTHER = 0.7; // Percent\nexport const MAX_BORROW_RATIO_WITH_PLEDGE = 0.9; // Percent\nexport const MAX_INCOME_RATIO = 1 / 3; // Percent\nexport const MAX_INCOME_RATIO_TIGHT = 0.38; // Percent\nexport const FORTUNE_WARNING_TIGHT = 'FORTUNE_WARNING_TIGHT';\nexport const INCOME_WARNING_TIGHT = 'INCOME_WARNING_TIGHT';\nexport const FORTUNE_ERROR = 'FORTUNE_ERROR';\nexport const INCOME_ERROR = 'INCOME_ERROR';\nexport const CURRENCY = 'CHF';\nexport const MIN_CASH = 0.1; // Percent of property value\nexport const AVERAGE_TAX_RATE = 0.25; // Percent\nexport const SECOND_PILLAR_WITHDRAWAL_TAX_RATE = 0.1; // Percent\nexport const VAT = 0.077;\nexport const BONUS_CONSIDERATION = 0.5;\nexport const BONUS_HISTORY_TO_CONSIDER = 3;\nexport const COMPANY_INCOME_TO_CONSIDER = 1;\nexport const DIVIDENDS_CONSIDERATION = 1;\nexport const DIVIDENDS_HISTORY_TO_CONSIDER = 1;\nexport const PENSION_INCOME_CONSIDERATION = 1;\nexport const REAL_ESTATE_INCOME_CONSIDERATION = 1;\nexport const INVESTMENT_INCOME_CONSIDERATION = 1;\nexport const FORTUNE_RETURNS_RATIO = 0;\nexport const ESTIMATED_COMMISSION = 0.01;\nexport const REFERRAL_COMMISSION = 0.25;\nexport const REFERRAL_COMMISSION_SPLIT = 0.5;\n// Add extra 1 so that rounding errors don't break the comparison\n// f.ex: ???\nexport const OWN_FUNDS_ROUNDING_AMOUNT = 1001;\nexport const BONUS_ALGORITHMS = {\n  AVERAGE: 'AVERAGE',\n  WEAK_AVERAGE: 'WEAK_AVERAGE',\n};\nexport const REAL_ESTATE_INCOME_ALGORITHMS = {\n  DEFAULT: 'DEFAULT',\n  POSITIVE_NEGATIVE_SPLIT: 'POSITIVE_NEGATIVE_SPLIT',\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"arrays\":{\"RefinancingFormArray.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/arrays/RefinancingFormArray.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport {\n  INTEREST_RATES,\n  MORTGAGE_NOTE_TYPES,\n  MORTGAGE_NOTE_CATEGORIES,\n} from '../api/constants';\n\nconst getRefinancingFormArray = ({ loan }) => [\n  {\n    id: 'previousLender',\n    type: 'textInput',\n  },\n  {\n    id: 'previousLoanTranches',\n    type: 'arrayInput',\n    inputs: [\n      {\n        id: 'type',\n        type: 'selectInput',\n        options: Object.values(INTEREST_RATES),\n        intlId: 'loanTranches',\n      },\n      { id: 'value', type: 'textInput', money: true },\n      { id: 'dueDate', type: 'dateInput' },\n      { id: 'rate', type: 'textInput', percent: true },\n    ],\n  },\n  {\n    id: 'mortgageNotes',\n    type: 'arrayInput',\n    inputs: [\n      { id: 'value', type: 'textInput', money: true },\n      { id: 'rank', type: 'textInput', number: true },\n      {\n        id: 'type',\n        type: 'selectInput',\n        options: Object.values(MORTGAGE_NOTE_TYPES),\n      },\n      {\n        id: 'category',\n        type: 'selectInput',\n        options: Object.values(MORTGAGE_NOTE_CATEGORIES),\n      },\n    ],\n  },\n];\n\nexport default getRefinancingFormArray;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"startup\":{\"server\":{\"kadira.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/startup/server/kadira.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Meteor } from 'meteor/meteor';\nimport { Kadira } from 'meteor/lmachens:kadira';\n\nif (Meteor.settings.Kadira) {\n  const { endpoint } = Meteor.settings.Kadira;\n  const { microservice } = Meteor;\n\n  if (Meteor.settings.Kadira[microservice]) {\n    const { appId, appSecret } = Meteor.settings.Kadira[microservice];\n    Kadira.connect(appId, appSecret, { endpoint });\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"accounts-config.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/core/startup/accounts-config.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nimport { Accounts as AccountsUI } from 'meteor/epotek:accounts-ui';\n\nAccountsUI.ui.config({\n  passwordSignupFields: 'EMAIL_ONLY',\n  loginPath: '/login',\n  homeRoutePath: '/',\n  profilePath: '/account',\n  changePasswordPath: '/account',\n  minimumPasswordLength: 5,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"server\":{\"main.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// server/main.js                                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.link(\"../imports/startup/server\");\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","hash":"6ab20efa105c8a624fd2d03519d658243caf9e97","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/startup/server/fetchIrs10yCron.js","imports/startup/server/index.js","imports/startup/server/restAPI.js","imports/startup/server/startup.js","server/main.js"],"names":["getRandomMinute","Math","jobName","cronitor","id","job","name","schedule","randomMinute","tomorrow","moment","parserText","parsedText","parser","irs10yFetch","SyncedCron","error","SlackService","additionalData","logger","tag","Meteor","console","logError","api","multipart","makeFileUploadDir","flushFileUploadDir"],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAUA,MAAMA,eAAe,GAAG,MAAMC,IAAI,CAAJA,MAAWA,IAAI,CAAJA,WAAXA,MAA9B;;AACA,MAAMC,OAAO,GAAb;AAEA,MAAMC,QAAQ,GAAG,oBAAoB;AAAEC,IAAE,EAAE;AAAN,CAApB,CAAjB,C,CAEA;;AACA,MAAMC,GAAG,GAAG,OAAO;AACjBC,MAAI,EADa;;AAEjBC,UAAQ,SAAS;AACf,UAAMC,YAAY,GAAGR,eAArB;AACA,UAAMS,QAAQ,GAAGC,MAAM,GAANA,sBAAjB,MAAiBA,CAAjB;AAGA,UAAMC,UAAU,GAAI,QAAOH,YAAa,OAAMC,QAA9C;AACA,UAAMG,UAAU,GAAGC,MAAM,CAANA,KAAnB,UAAmBA,CAAnB;AAEA;AAVe;;AAYjBR,KAAG,GAAG;AACJ,QAAI;AACFF,cAAQ,CAARA,WAEQ,MAAMW,WAAW,CAAXA,IAFdX,EAEcW,CAFdX,OAGQA,QAAQ,CAHhBA,eAIQ,MAAM;AACVY,kBAAU,CAAVA;AACAA,kBAAU,CAAVA,IAAeV,GAAfU;AANJZ,eAQUa,KAAD,IAAW;AAChB,YAAIA,KAAK,CAALA,WAAiBA,KAAK,CAALA,iBAArB,aAAqBA,CAArB,EAA4D;AAC1D,iBAAOb,QAAQ,CAARA,SAAkBa,KAAK,CAA9B,OAAOb,CAAP;AACD;;AACD,eAAOA,QAAQ,CAARA,KAAP,KAAOA,CAAP;AAZJA;AADF,MAeE,cAAc;AACdc,kBAAY,CAAZA,UAAuB;AAAA;AAErBC,sBAAc,EAAE;AAFK,OAAvBD;AAID;AACF;;AAlCgB,CAAP,CAAZ;;AAqCAF,UAAU,CAAVA,OAAkB;AAChBI,QAAM,EAAE,CAAC;AAAA;AAAA;AAAkBC;AAAlB,GAAD,KAA6B;AACnC,QAAIC,MAAM,CAAV,cAAyB;AACvBC,aAAO,CAAPA;AACAA,aAAO,CAAPA;AACAA,aAAO,CAAPA;AACAA,aAAO,CAAPA;AACD;AACF;AARe,CAAlBP;AAWAA,UAAU,CAAVA,IAAeV,GAAfU;AAEAM,MAAM,CAANA,QAAe,MAAM;AACnB,MAAI;AACFN,cAAU,CAAVA;AADF,IAEE,cAAc;AACdQ,YAAQ,CAARA,IAAa;AAAEP;AAAF,KAAbO;AACD;AALHF,G;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iC;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAoBA,MAAMG,GAAG,GAAG,IAAZ,OAAY,EAAZ;AACAA,GAAG,CAAHA;AAKAA,GAAG,CAAHA;AAKAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA,8CAAkD;AAAEC,WAAS,EAAE;AAAb,CAAlDD;AACAA,GAAG,CAAHA;AACAA,GAAG,CAAHA;AAEAH,MAAM,CAANA,QAAe,MAAM;AACnBK,mBAAiB;AACjBC,oBAAkB;AAClBH,KAAG,CAAHA;AAHFH,G;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEAA,MAAM,CAANA;;AAEA,IAAIA,MAAM,CAAV,WAAsB;AACpyC","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { SyncedCron } from 'meteor/littledata:synced-cron';\n\nimport moment from 'moment';\n\nimport { logError } from 'core/api/methods';\nimport { irs10yFetch } from 'core/api/irs10y/server/methods';\nimport CronitorService from 'core/api/cronitor/server/CronitorService';\nimport SlackService from 'core/api/slack/server/SlackService';\n\nconst getRandomMinute = () => Math.floor(Math.random() * 49) + 10;\nconst jobName = 'Fetch IRS 10Y';\n\nconst cronitor = new CronitorService({ id: '19MCrQ' });\n\n// Make this a function so that randomMinute is always different\nconst job = () => ({\n  name: jobName,\n  schedule(parser) {\n    const randomMinute = getRandomMinute();\n    const tomorrow = moment()\n      .add(1, 'days')\n      .format('dddd');\n    const parserText = `at 6:${randomMinute} on ${tomorrow}`;\n    const parsedText = parser.text(parserText);\n\n    return parsedText;\n  },\n  job() {\n    try {\n      cronitor\n        .run()\n        .then(() => irs10yFetch.run({}))\n        .then(cronitor.complete)\n        .then(() => {\n          SyncedCron.remove(jobName);\n          SyncedCron.add(job());\n        })\n        .catch((error) => {\n          if (error.message && error.message.includes('existe déjà')) {\n            return cronitor.complete(error.message);\n          }\n          return cronitor.fail(error);\n        });\n    } catch (error) {\n      SlackService.sendError({\n        error,\n        additionalData: ['IRS 10Y CRON error'],\n      });\n    }\n  },\n});\n\nSyncedCron.config({\n  logger: ({ level, message, tag }) => {\n    if (Meteor.isProduction) {\n      console.log('---------------------- CRON LOG ----------------------');\n      console.log('Level', level);\n      console.log('Message', message);\n      console.log('Tag', tag);\n    }\n  },\n});\n\nSyncedCron.add(job());\n\nMeteor.startup(() => {\n  try {\n    SyncedCron.start();\n  } catch (error) {\n    logError.run({ error });\n  }\n});\n","import './startup';\nimport 'core/api/server';\nimport 'core/api/api';\nimport 'core/fixtures';\nimport 'core/startup/server/kadira';\nimport 'core/startup/accounts-config';\nimport './restAPI';\n\n// CRONs\nimport 'core/api/loans/server/expireLoansCron';\nimport 'core/api/notifications/server/notificationGeneratorCron';\nimport 'core/api/updateWatchers/server/updateWatcherCron';\nimport './fetchIrs10yCron';\n","import { Meteor } from 'meteor/meteor';\n\nimport RESTAPI from 'core/api/RESTAPI/server/RESTAPI';\nimport {\n  getPropertyLoansAPI,\n  getUserAPI,\n  interestRatesAPI,\n  inviteUserToPromotionAPI,\n  inviteCustomerToProPropertiesAPI,\n  mortgageEstimateAPI,\n  referCustomerAPI,\n  testEndpointAPI,\n  updatePropertyAPI,\n  insertPropertyAPI,\n  uploadFileAPI,\n  deleteFileAPI,\n  getPropertyAPI,\n} from 'core/api/RESTAPI/server/endpoints/';\nimport { makeFileUploadDir, flushFileUploadDir } from 'core/utils/filesUtils';\n\nconst api = new RESTAPI();\napi.addEndpoint(\n  '/promotions/:promotionId/invite-customer',\n  'POST',\n  inviteUserToPromotionAPI,\n);\napi.addEndpoint(\n  '/properties/invite-customer',\n  'POST',\n  inviteCustomerToProPropertiesAPI,\n);\napi.addEndpoint('/properties/:propertyId/loans', 'GET', getPropertyLoansAPI);\napi.addEndpoint('/properties/:propertyId', 'POST', updatePropertyAPI);\napi.addEndpoint('/users', 'POST', referCustomerAPI);\napi.addEndpoint('/users', 'GET', getUserAPI);\napi.addEndpoint('/test', 'POST', testEndpointAPI);\napi.addEndpoint('/test', 'GET', testEndpointAPI);\napi.addEndpoint('/test', 'PUT', testEndpointAPI);\napi.addEndpoint('/test', 'DELETE', testEndpointAPI);\napi.addEndpoint('/test/:id', 'POST', testEndpointAPI);\napi.addEndpoint('/test/:id', 'GET', testEndpointAPI);\napi.addEndpoint('/test/:id', 'PUT', testEndpointAPI);\napi.addEndpoint('/test/:id', 'DELETE', testEndpointAPI);\napi.addEndpoint('/interest-rates/latest', 'GET', interestRatesAPI);\napi.addEndpoint('/calculator/mortgage-estimate', 'GET', mortgageEstimateAPI);\napi.addEndpoint('/properties', 'POST', insertPropertyAPI);\napi.addEndpoint('/upload', 'POST', uploadFileAPI, { multipart: true });\napi.addEndpoint('/deleteFile', 'POST', deleteFileAPI);\napi.addEndpoint('/properties/:propertyId', 'GET', getPropertyAPI);\n\nMeteor.startup(() => {\n  makeFileUploadDir();\n  flushFileUploadDir();\n  api.start();\n});\n","import { Meteor } from 'meteor/meteor';\n\nMeteor.microservice = 'backend';\n\nif (Meteor.isAppTest) {\n  Meteor.isTest = true;\n}\n","import '/imports/startup/server';\n"]}}]
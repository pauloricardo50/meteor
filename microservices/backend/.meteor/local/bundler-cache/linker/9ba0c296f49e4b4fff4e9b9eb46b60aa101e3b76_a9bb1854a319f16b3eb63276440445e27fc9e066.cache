[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"meteortesting:browser-tests\":{\"server.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteortesting_browser-tests/server.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  startBrowser: () => startBrowser\n});\nlet startPhantom;\nmodule.link(\"./browser/phantomjs\", {\n  default(v) {\n    startPhantom = v;\n  }\n\n}, 0);\nlet startChrome;\nmodule.link(\"./browser/chromedriver\", {\n  default(v) {\n    startChrome = v;\n  }\n\n}, 1);\nlet startNightmare;\nmodule.link(\"./browser/nightmare\", {\n  default(v) {\n    startNightmare = v;\n  }\n\n}, 2);\nlet startPuppeteer;\nmodule.link(\"./browser/puppeteer\", {\n  default(v) {\n    startPuppeteer = v;\n  }\n\n}, 3);\nconst supportedDrivers = ['chrome', 'nightmare', 'phantomjs', 'puppeteer'];\nconst driver = process.env.TEST_BROWSER_DRIVER;\n\nfunction startBrowser(options) {\n  const driverOptions = (0, _objectSpread2.default)({}, options, {\n    stdout(message) {\n      // Don't just throw away the stdout messages. They're data from a writable buffer.\n      if (typeof message === 'string' && message.startsWith('stdout: ')) {\n        if (typeof options.writebuffer === 'function') {\n          options.writebuffer(message.substr(8));\n        }\n      } else {\n        options.stdout(message);\n      }\n    }\n\n  });\n\n  switch (driver) {\n    case 'chrome':\n      startChrome(driverOptions);\n      break;\n\n    case 'phantomjs':\n      startPhantom(driverOptions);\n      break;\n\n    case 'nightmare':\n      startNightmare(driverOptions);\n      break;\n\n    case 'puppeteer':\n      startPuppeteer(driverOptions);\n      break;\n\n    default:\n      throw new Error(`Unknown driver \"${driver}\". browser-tests package requires that you set the TEST_BROWSER_DRIVER` + ` environment variable to one of the following: ${supportedDrivers.join(', ')}`);\n  }\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"browser\":{\"chromedriver.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteortesting_browser-tests/browser/chromedriver.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  default: () => startChrome\n});\n\n/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\nlet driver; // Make sure the chromedriver process does not stick around\n\nprocess.on('exit', () => {\n  if (driver) {\n    driver.quit();\n  }\n});\n\nfunction startChrome({\n  stdout,\n  stderr,\n  done\n}) {\n  let chromedriver;\n  let webdriver;\n  let logging;\n  let chrome;\n\n  try {\n    require('chromedriver');\n\n    webdriver = require('selenium-webdriver');\n    logging = require('selenium-webdriver/lib/logging');\n    chrome = require('selenium-webdriver/chrome');\n  } catch (error) {\n    console.error(error);\n    throw new Error('When running app tests with TEST_BROWSER_DRIVER=chrome, you must first ' + '\"npm i --save-dev selenium-webdriver@3.0.0-beta-2 chromedriver\"');\n  } // Get the driver instance. By default, chromedriver gives us only errors\n  // so we need to set browser logging level to \"ALL\".\n\n\n  const options = new chrome.Options();\n  if (!process.env.TEST_BROWSER_VISIBLE) options.addArguments('--headless'); // Pass additional chrome options as appropriate\n\n  if (process.env.TEST_CHROME_ARGS) {\n    // Convert any appearances of \"%20\" to \" \" so as to support spaces in arguments if necessary\n    let additionalOptions = process.env.TEST_CHROME_ARGS.split(/\\s+/).map(arg => arg.replace(/%20/g, \" \"));\n    options.addArguments.apply(options, additionalOptions);\n  }\n\n  driver = new webdriver.Builder().forBrowser('chrome').withCapabilities(options.toCapabilities()).setLoggingPrefs({\n    browser: 'ALL'\n  }).build(); // Can't hide the window but can move it off screen\n\n  driver.manage().window().setPosition(20000, 20000); // We periodically grab logs from Chrome and pass them back.\n  // Every time we call this, we get only the log entries since\n  // the previous time we called it.\n\n  function passThroughLogs() {\n    return driver.manage().logs().get(logging.Type.BROWSER).then(entries => {\n      (entries || []).forEach(entry => {\n        let message = entry.message || ''; // Message may look something like this:\n        // http://localhost:3000/packages/dispatch_mocha.js?hash=abc 239:20 \"  5 passing (182ms)\"\n        // So we will try to strip off the part that isn't the pure message.\n\n        if (message.startsWith('http://') && message.endsWith('\"')) {\n          message = message.slice(message.indexOf('\"') + 1, -1);\n        }\n\n        if (entry.level.name === 'SEVERE') {\n          stderr(`[ERROR] ${message}`);\n        } else {\n          // Message may have escaped newlines\n          const messageLines = message.split('\\\\n');\n          messageLines.forEach(messageLine => {\n            stdout(messageLine);\n          });\n        }\n      });\n    });\n  } // Meteor will call the `runTests` function exported by the driver package\n  // on the client as soon as this page loads.\n\n\n  driver.get(process.env.ROOT_URL);\n  let testFailures;\n  driver.wait(function () {\n    // After the page loads, the tests are running. Eventually they\n    // finish and the driver package is supposed to set window.testsDone\n    // and window.testFailures at that time.\n    return passThroughLogs().then(() => {\n      return driver.executeScript('return window.testsDone');\n    });\n  }, 600000).then(() => {\n    // Empty the logs one last time\n    return passThroughLogs();\n  }).then(() => {\n    return driver.executeScript('return window.testFailures');\n  }).then(failures => {\n    testFailures = failures;\n    return driver.quit();\n  }).then(() => {\n    driver = null;\n    done(testFailures);\n  });\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"nightmare.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteortesting_browser-tests/browser/nightmare.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  default: () => startNightmare\n});\n\n/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\n// HINT: If not working, run with `DEBUG=nightmare:*,electron:*` to see nightmare errors\nconst show = !!process.env.TEST_BROWSER_VISIBLE;\nlet nightmare; // Make sure the nightmare process does not stick around\n\nprocess.on('exit', () => {\n  if (nightmare) {\n    nightmare.end();\n  }\n});\n\nfunction startNightmare({\n  stdout,\n  stderr,\n  done\n}) {\n  let Nightmare;\n\n  try {\n    Nightmare = require('nightmare');\n  } catch (error) {\n    throw new Error('When running tests with TEST_BROWSER_DRIVER=nightmare, you must first \"npm i --save-dev nightmare\"');\n  }\n\n  nightmare = Nightmare({\n    show\n  });\n  let testFailures;\n  nightmare.on('page', (type, message, stack) => {\n    if (type === 'error') {\n      stderr(`[ERROR] ${message}\\n${stack}`);\n    } else {\n      stdout(`[${type}] ${message}`);\n    }\n  }).on('console', (type, message) => {\n    if (type === 'error') {\n      stderr(`[ERROR] ${message}`);\n    } else {\n      // Message may have escaped newlines\n      const messageLines = message.split('\\\\n');\n      messageLines.forEach(messageLine => {\n        stdout(messageLine);\n      });\n    }\n  }) // Meteor will call the `runTests` function exported by the driver package\n  // on the client as soon as this page loads.\n  .goto(process.env.ROOT_URL) // After the page loads, the tests are running. Eventually they\n  // finish and the driver package is supposed to set window.testsDone\n  // and window.testFailures at that time.\n  .wait(function () {\n    return window.testsDone;\n  }).evaluate(function () {\n    return window.testFailures;\n  }).then(failures => {\n    testFailures = failures;\n    return nightmare.end();\n  }).then(() => {\n    nightmare = null;\n    done(testFailures);\n  }).catch(error => {\n    stderr(error && error.message);\n  });\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"phantomjs.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteortesting_browser-tests/browser/phantomjs.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  default: () => startPhantom\n});\nlet childProcess;\nmodule.link(\"child_process\", {\n  default(v) {\n    childProcess = v;\n  }\n\n}, 0);\nconst PHANTOMJS_SCRIPT_FILE_NAME = 'browser/phantomjs_script.js';\n\nfunction startPhantom({\n  stdout,\n  stderr,\n  done\n}) {\n  let phantomjs;\n\n  try {\n    phantomjs = require('phantomjs-prebuilt');\n  } catch (error) {\n    throw new Error('When running tests with TEST_BROWSER_DRIVER=phantomjs, you must first \"npm i --save-dev phantomjs-prebuilt\"');\n  }\n\n  const scriptPath = Assets.absoluteFilePath(PHANTOMJS_SCRIPT_FILE_NAME);\n\n  if (process.env.METEOR_TEST_DEBUG) {\n    console.log('PhantomJS Path:', phantomjs.path);\n    console.log('PhantomJS Script Path:', scriptPath);\n  }\n\n  const browserProcess = childProcess.execFile(phantomjs.path, [scriptPath], {\n    env: {\n      ROOT_URL: process.env.ROOT_URL\n    }\n  });\n  browserProcess.on('error', error => {\n    throw error;\n  });\n  browserProcess.on('exit', done); // The PhantomJS script echoes whatever the page prints to the browser console and\n  // here we echo that once again.\n\n  browserProcess.stdout.on('data', stdout);\n  browserProcess.stderr.on('data', stderr);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"puppeteer.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteortesting_browser-tests/browser/puppeteer.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  default: () => startPuppeteer\n});\n\n/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\nconst util = require('util');\n\nfunction startPuppeteer({\n  stdout,\n  stderr,\n  done\n}) {\n  let puppeteer;\n\n  try {\n    puppeteer = require('puppeteer');\n  } catch (error) {\n    console.error(error);\n    throw new Error('When running app tests with TEST_BROWSER_DRIVER=puppeteer, you must first ' + '\"npm i --save-dev puppeteer@^1.5.0\"');\n  }\n\n  function runTests() {\n    return Promise.asyncApply(() => {\n      // --no-sandbox and --disable-setuid-sandbox allow this to easily run in docker\n      const browser = Promise.await(puppeteer.launch({\n        args: ['--no-sandbox', '--disable-setuid-sandbox']\n      }));\n      console.log(Promise.await(browser.version()));\n      const page = Promise.await(browser.newPage()); // console message args come in as handles, use this to evaluate them all\n\n      page.on('console', msg => Promise.asyncApply(() => console[msg._type](...Promise.await(Promise.all(msg.args().map(arg => arg.jsonValue()))))));\n      Promise.await(page.goto(process.env.ROOT_URL));\n      Promise.await(page.waitFor(() => window.testsDone, {\n        timeout: 0\n      }));\n      const testFailures = Promise.await(page.evaluate('window.testFailures'));\n      Promise.await(page.close());\n      Promise.await(browser.close());\n      done(testFailures);\n    });\n  }\n\n  runTests();\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/meteortesting:browser-tests/server.js\");\n\n/* Exports */\nPackage._define(\"meteortesting:browser-tests\", exports);\n\n})();\n","servePath":"/packages/meteortesting_browser-tests.js","sourceMap":{"version":3,"sources":["packages/meteortesting:browser-tests/server.js","packages/meteortesting:browser-tests/browser/chromedriver.js","packages/meteortesting:browser-tests/browser/nightmare.js","packages/meteortesting:browser-tests/browser/phantomjs.js","packages/meteortesting:browser-tests/browser/puppeteer.js"],"names":["module","export","startBrowser","startPhantom","link","default","v","startChrome","startNightmare","startPuppeteer","supportedDrivers","driver","process","env","TEST_BROWSER_DRIVER","options","driverOptions","stdout","message","startsWith","writebuffer","substr","Error","join","on","quit","stderr","done","chromedriver","webdriver","logging","chrome","require","error","console","Options","TEST_BROWSER_VISIBLE","addArguments","TEST_CHROME_ARGS","additionalOptions","split","map","arg","replace","apply","Builder","forBrowser","withCapabilities","toCapabilities","setLoggingPrefs","browser","build","manage","window","setPosition","passThroughLogs","logs","get","Type","BROWSER","then","entries","forEach","entry","endsWith","slice","indexOf","level","name","messageLines","messageLine","ROOT_URL","testFailures","wait","executeScript","failures","show","nightmare","end","Nightmare","type","stack","goto","testsDone","evaluate","catch","childProcess","PHANTOMJS_SCRIPT_FILE_NAME","phantomjs","scriptPath","Assets","absoluteFilePath","METEOR_TEST_DEBUG","log","path","browserProcess","execFile","util","puppeteer","runTests","launch","args","version","page","newPage","msg","_type","Promise","all","jsonValue","waitFor","timeout","close"],"mappings":"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","file":"/packages/meteortesting_browser-tests.js","sourcesContent":["import startPhantom from './browser/phantomjs';\nimport startChrome from './browser/chromedriver';\nimport startNightmare from './browser/nightmare';\nimport startPuppeteer from './browser/puppeteer';\n\nconst supportedDrivers = ['chrome', 'nightmare', 'phantomjs', 'puppeteer'];\n\nconst driver = process.env.TEST_BROWSER_DRIVER;\n\nfunction startBrowser(options) {\n  const driverOptions = {\n    ...options,\n    stdout(message) {\n      // Don't just throw away the stdout messages. They're data from a writable buffer.\n      if (typeof message === 'string' && message.startsWith('stdout: ')) {\n        if (typeof options.writebuffer === 'function') {\n          options.writebuffer(message.substr(8));\n        }\n      } else {\n        options.stdout(message);\n      }\n    },\n  };\n\n  switch (driver) {\n    case 'chrome':\n      startChrome(driverOptions);\n      break;\n\n    case 'phantomjs':\n      startPhantom(driverOptions);\n      break;\n\n    case 'nightmare':\n      startNightmare(driverOptions);\n      break;\n\n    case 'puppeteer':\n      startPuppeteer(driverOptions);\n      break;\n\n    default:\n      throw new Error(\n        `Unknown driver \"${driver}\". browser-tests package requires that you set the TEST_BROWSER_DRIVER` +\n        ` environment variable to one of the following: ${supportedDrivers.join(', ')}`\n      );\n  }\n}\n\nexport { startBrowser };\n","/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\n\nlet driver;\n\n// Make sure the chromedriver process does not stick around\nprocess.on('exit', () => {\n  if (driver) {\n    driver.quit();\n  }\n});\n\nexport default function startChrome({\n  stdout,\n  stderr,\n  done,\n}) {\n  let chromedriver;\n  let webdriver;\n  let logging;\n  let chrome;\n  try {\n    require('chromedriver');\n    webdriver = require('selenium-webdriver');\n    logging = require('selenium-webdriver/lib/logging');\n    chrome = require('selenium-webdriver/chrome');\n  } catch (error) {\n    console.error(error);\n    throw new Error(\n      'When running app tests with TEST_BROWSER_DRIVER=chrome, you must first ' +\n      '\"npm i --save-dev selenium-webdriver@3.0.0-beta-2 chromedriver\"'\n    );\n  }\n\n  // Get the driver instance. By default, chromedriver gives us only errors\n  // so we need to set browser logging level to \"ALL\".\n  const options = new chrome.Options();\n  if (!process.env.TEST_BROWSER_VISIBLE) options.addArguments('--headless');\n  // Pass additional chrome options as appropriate\n  if (process.env.TEST_CHROME_ARGS) {\n    // Convert any appearances of \"%20\" to \" \" so as to support spaces in arguments if necessary\n    let additionalOptions = process.env.TEST_CHROME_ARGS\n        .split(/\\s+/)\n        .map((arg) => arg.replace(/%20/g, \" \"));\n    options.addArguments.apply(options, additionalOptions);\n  }\n  driver = new webdriver.Builder().forBrowser('chrome').withCapabilities(options.toCapabilities()).setLoggingPrefs({ browser: 'ALL' }).build();\n\n  // Can't hide the window but can move it off screen\n  driver.manage().window().setPosition(20000, 20000);\n\n  // We periodically grab logs from Chrome and pass them back.\n  // Every time we call this, we get only the log entries since\n  // the previous time we called it.\n  function passThroughLogs() {\n    return driver.manage().logs().get(logging.Type.BROWSER)\n      .then(entries => {\n        (entries || []).forEach(entry => {\n          let message = entry.message || '';\n\n          // Message may look something like this:\n          // http://localhost:3000/packages/dispatch_mocha.js?hash=abc 239:20 \"  5 passing (182ms)\"\n          // So we will try to strip off the part that isn't the pure message.\n          if (message.startsWith('http://') && message.endsWith('\"')) {\n            message = message.slice(message.indexOf('\"') + 1, -1);\n          }\n\n          if (entry.level.name === 'SEVERE') {\n            stderr(`[ERROR] ${message}`);\n          } else {\n            // Message may have escaped newlines\n            const messageLines = message.split('\\\\n');\n            messageLines.forEach(messageLine => {\n              stdout(messageLine);\n            });\n          }\n        });\n      });\n  }\n\n  // Meteor will call the `runTests` function exported by the driver package\n  // on the client as soon as this page loads.\n  driver.get(process.env.ROOT_URL);\n\n  let testFailures;\n  driver\n    .wait(function() {\n      // After the page loads, the tests are running. Eventually they\n      // finish and the driver package is supposed to set window.testsDone\n      // and window.testFailures at that time.\n      return passThroughLogs().then(() => {\n        return driver.executeScript('return window.testsDone');\n      });\n    }, 600000)\n    .then(() => {\n      // Empty the logs one last time\n      return passThroughLogs();\n    })\n    .then(() => {\n      return driver.executeScript('return window.testFailures');\n    })\n    .then(failures => {\n      testFailures = failures;\n      return driver.quit();\n    })\n    .then(() => {\n      driver = null;\n      done(testFailures);\n    });\n}\n","/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\n\n// HINT: If not working, run with `DEBUG=nightmare:*,electron:*` to see nightmare errors\n\nconst show = !!process.env.TEST_BROWSER_VISIBLE;\n\nlet nightmare;\n\n// Make sure the nightmare process does not stick around\nprocess.on('exit', () => {\n  if (nightmare) {\n    nightmare.end();\n  }\n});\n\nexport default function startNightmare({\n  stdout,\n  stderr,\n  done,\n}) {\n  let Nightmare;\n  try {\n    Nightmare = require('nightmare');\n  } catch (error) {\n    throw new Error('When running tests with TEST_BROWSER_DRIVER=nightmare, you must first \"npm i --save-dev nightmare\"');\n  }\n\n  nightmare = Nightmare({ show });\n\n  let testFailures;\n  nightmare\n    .on('page', (type, message, stack) => {\n      if (type === 'error') {\n        stderr(`[ERROR] ${message}\\n${stack}`);\n      } else {\n        stdout(`[${type}] ${message}`);\n      }\n    })\n    .on('console', (type, message) => {\n      if (type === 'error') {\n        stderr(`[ERROR] ${message}`);\n      } else {\n        // Message may have escaped newlines\n        const messageLines = message.split('\\\\n');\n        messageLines.forEach(messageLine => {\n          stdout(messageLine);\n        });\n      }\n    })\n\n    // Meteor will call the `runTests` function exported by the driver package\n    // on the client as soon as this page loads.\n    .goto(process.env.ROOT_URL)\n\n    // After the page loads, the tests are running. Eventually they\n    // finish and the driver package is supposed to set window.testsDone\n    // and window.testFailures at that time.\n    .wait(function () {\n      return window.testsDone;\n    })\n    .evaluate(function () {\n      return window.testFailures;\n    })\n    .then(failures => {\n      testFailures = failures;\n      return nightmare.end();\n    })\n    .then(() => {\n      nightmare = null;\n      done(testFailures);\n    })\n    .catch(error => {\n      stderr(error && error.message);\n    });\n}\n","/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\nimport childProcess from 'child_process';\n\nconst PHANTOMJS_SCRIPT_FILE_NAME = 'browser/phantomjs_script.js';\n\nexport default function startPhantom({\n  stdout,\n  stderr,\n  done,\n}) {\n  let phantomjs;\n  try {\n    phantomjs = require('phantomjs-prebuilt');\n  } catch (error) {\n    throw new Error('When running tests with TEST_BROWSER_DRIVER=phantomjs, you must first \"npm i --save-dev phantomjs-prebuilt\"');\n  }\n\n  const scriptPath = Assets.absoluteFilePath(PHANTOMJS_SCRIPT_FILE_NAME);\n\n  if (process.env.METEOR_TEST_DEBUG) {\n    console.log('PhantomJS Path:', phantomjs.path);\n    console.log('PhantomJS Script Path:', scriptPath);\n  }\n\n  const browserProcess = childProcess.execFile(phantomjs.path, [scriptPath], {\n    env: {\n      ROOT_URL: process.env.ROOT_URL,\n    },\n  });\n\n  browserProcess.on('error', error => {\n    throw error;\n  });\n\n  browserProcess.on('exit', done);\n\n  // The PhantomJS script echoes whatever the page prints to the browser console and\n  // here we echo that once again.\n  browserProcess.stdout.on('data', stdout);\n  browserProcess.stderr.on('data', stderr);\n}\n","/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\nconst util = require('util');\n\nexport default function startPuppeteer({\n  stdout,\n  stderr,\n  done,\n}) {\n  let puppeteer;\n  try {\n    puppeteer = require('puppeteer');\n  } catch (error) {\n    console.error(error);\n    throw new Error(\n      'When running app tests with TEST_BROWSER_DRIVER=puppeteer, you must first ' +\n      '\"npm i --save-dev puppeteer@^1.5.0\"'\n    );\n  }\n\n  async function runTests() {\n    // --no-sandbox and --disable-setuid-sandbox allow this to easily run in docker\n    const browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });\n    console.log(await browser.version());\n    const page = await browser.newPage();\n\n    // console message args come in as handles, use this to evaluate them all\n    page.on('console', async msg => console[msg._type](\n      ...await Promise.all(msg.args().map(arg => arg.jsonValue()))\n    ));\n\n    await page.goto(process.env.ROOT_URL);\n\n    await page.waitFor(() => window.testsDone, { timeout: 0 });\n    const testFailures = await page.evaluate('window.testFailures');\n\n    await page.close();\n    await browser.close();\n\n    done(testFailures);\n  }\n\n  runTests();\n}\n"]}}]
[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar _ = Package.underscore._;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar Log = Package.logging.Log;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Migrations;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"percolate:migrations\":{\"migrations_server.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/percolate_migrations/migrations_server.js                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n/*\n  Adds migration capabilities. Migrations are defined like:\n\n  Migrations.add({\n    up: function() {}, //*required* code to run to migrate upwards\n    version: 1, //*required* number to identify migration order\n    down: function() {}, //*optional* code to run to migrate downwards\n    name: 'Something' //*optional* display name for the migration\n  });\n\n  The ordering of migrations is determined by the version you set.\n\n  To run the migrations, set the MIGRATE environment variable to either\n  'latest' or the version number you want to migrate to. Optionally, append\n  ',exit' if you want the migrations to exit the meteor process, e.g if you're\n  migrating from a script (remember to pass the --once parameter).\n\n  e.g:\n  MIGRATE=\"latest\" mrt # ensure we'll be at the latest version and run the app\n  MIGRATE=\"latest,exit\" mrt --once # ensure we'll be at the latest version and exit\n  MIGRATE=\"2,exit\" mrt --once # migrate to version 2 and exit\n\n  Note: Migrations will lock ensuring only 1 app can be migrating at once. If\n  a migration crashes, the control record in the migrations collection will\n  remain locked and at the version it was at previously, however the db could\n  be in an inconsistant state.\n*/\n// since we'll be at version 0 by default, we should have a migration set for\n// it.\nvar DefaultMigration = {\n  version: 0,\n  up: function () {}\n};\nMigrations = {\n  _list: [DefaultMigration],\n  options: {\n    // false disables logging\n    log: true,\n    // null or a function\n    logger: null,\n    // enable/disable info log \"already at latest.\"\n    logIfLatest: true,\n    // migrations collection name\n    collectionName: 'migrations'\n  },\n  config: function (opts) {\n    this.options = _.extend({}, this.options, opts);\n  }\n};\n/*\n  Logger factory function. Takes a prefix string and options object\n  and uses an injected `logger` if provided, else falls back to\n  Meteor's `Log` package.\n  Will send a log object to the injected logger, on the following form:\n    message: String\n    level: String (info, warn, error, debug)\n    tag: 'Migrations'\n*/\n\nfunction createLogger(prefix) {\n  check(prefix, String); // Return noop if logging is disabled.\n\n  if (Migrations.options.log === false) {\n    return function () {};\n  }\n\n  return function (level, message) {\n    check(level, Match.OneOf('info', 'error', 'warn', 'debug'));\n    check(message, String);\n    var logger = Migrations.options && Migrations.options.logger;\n\n    if (logger && _.isFunction(logger)) {\n      logger({\n        level: level,\n        message: message,\n        tag: prefix\n      });\n    } else {\n      Log[level]({\n        message: prefix + ': ' + message\n      });\n    }\n  };\n}\n\nvar log;\nMeteor.startup(function () {\n  var options = Migrations.options; // collection holding the control record\n\n  Migrations._collection = new Mongo.Collection(options.collectionName);\n  log = createLogger('Migrations');\n  ['info', 'warn', 'error', 'debug'].forEach(function (level) {\n    log[level] = _.partial(log, level);\n  });\n  if (process.env.MIGRATE) Migrations.migrateTo(process.env.MIGRATE);\n}); // Add a new migration:\n// {up: function *required\n//  version: Number *required\n//  down: function *optional\n//  name: String *optional\n// }\n\nMigrations.add = function (migration) {\n  if (typeof migration.up !== 'function') throw new Meteor.Error('Migration must supply an up function.');\n  if (typeof migration.version !== 'number') throw new Meteor.Error('Migration must supply a version number.');\n  if (migration.version <= 0) throw new Meteor.Error('Migration version must be greater than 0'); // Freeze the migration object to make it hereafter immutable\n\n  Object.freeze(migration);\n\n  this._list.push(migration);\n\n  this._list = _.sortBy(this._list, function (m) {\n    return m.version;\n  });\n}; // Attempts to run the migrations using command in the form of:\n// e.g 'latest', 'latest,exit', 2\n// use 'XX,rerun' to re-run the migration at that version\n\n\nMigrations.migrateTo = function (command) {\n  if (_.isUndefined(command) || command === '' || this._list.length === 0) throw new Error('Cannot migrate using invalid command: ' + command);\n\n  if (typeof command === 'number') {\n    var version = command;\n  } else {\n    var version = command.split(',')[0]; //.trim();\n\n    var subcommand = command.split(',')[1]; //.trim();\n  }\n\n  if (version === 'latest') {\n    this._migrateTo(_.last(this._list).version);\n  } else {\n    this._migrateTo(parseInt(version), subcommand === 'rerun');\n  } // remember to run meteor with --once otherwise it will restart\n\n\n  if (subcommand === 'exit') process.exit(0);\n}; // just returns the current version\n\n\nMigrations.getVersion = function () {\n  return this._getControl().version;\n}; // migrates to the specific version passed in\n\n\nMigrations._migrateTo = function (version, rerun) {\n  var self = this;\n\n  var control = this._getControl(); // Side effect: upserts control document.\n\n\n  var currentVersion = control.version;\n\n  if (lock() === false) {\n    log.info('Not migrating, control is locked.');\n    return;\n  }\n\n  if (rerun) {\n    log.info('Rerunning version ' + version);\n    migrate('up', this._findIndexByVersion(version));\n    log.info('Finished migrating.');\n    unlock();\n    return;\n  }\n\n  if (currentVersion === version) {\n    if (Migrations.options.logIfLatest) {\n      log.info('Not migrating, already at version ' + version);\n    }\n\n    unlock();\n    return;\n  }\n\n  var startIdx = this._findIndexByVersion(currentVersion);\n\n  var endIdx = this._findIndexByVersion(version); // log.info('startIdx:' + startIdx + ' endIdx:' + endIdx);\n\n\n  log.info('Migrating from version ' + this._list[startIdx].version + ' -> ' + this._list[endIdx].version); // run the actual migration\n\n  function migrate(direction, idx) {\n    var migration = self._list[idx];\n\n    if (typeof migration[direction] !== 'function') {\n      unlock();\n      throw new Meteor.Error('Cannot migrate ' + direction + ' on version ' + migration.version);\n    }\n\n    function maybeName() {\n      return migration.name ? ' (' + migration.name + ')' : '';\n    }\n\n    log.info('Running ' + direction + '() on version ' + migration.version + maybeName());\n    migration[direction](migration);\n  } // Returns true if lock was acquired.\n\n\n  function lock() {\n    // This is atomic. The selector ensures only one caller at a time will see\n    // the unlocked control, and locking occurs in the same update's modifier.\n    // All other simultaneous callers will get false back from the update.\n    return self._collection.update({\n      _id: 'control',\n      locked: false\n    }, {\n      $set: {\n        locked: true,\n        lockedAt: new Date()\n      }\n    }) === 1;\n  } // Side effect: saves version.\n\n\n  function unlock() {\n    self._setControl({\n      locked: false,\n      version: currentVersion\n    });\n  }\n\n  if (currentVersion < version) {\n    for (var i = startIdx; i < endIdx; i++) {\n      migrate('up', i + 1);\n      currentVersion = self._list[i + 1].version;\n    }\n  } else {\n    for (var i = startIdx; i > endIdx; i--) {\n      migrate('down', i);\n      currentVersion = self._list[i - 1].version;\n    }\n  }\n\n  unlock();\n  log.info('Finished migrating.');\n}; // gets the current control record, optionally creating it if non-existant\n\n\nMigrations._getControl = function () {\n  var control = this._collection.findOne({\n    _id: 'control'\n  });\n\n  return control || this._setControl({\n    version: 0,\n    locked: false\n  });\n}; // sets the control record\n\n\nMigrations._setControl = function (control) {\n  // be quite strict\n  check(control.version, Number);\n  check(control.locked, Boolean);\n\n  this._collection.update({\n    _id: 'control'\n  }, {\n    $set: {\n      version: control.version,\n      locked: control.locked\n    }\n  }, {\n    upsert: true\n  });\n\n  return control;\n}; // returns the migration index in _list or throws if not found\n\n\nMigrations._findIndexByVersion = function (version) {\n  for (var i = 0; i < this._list.length; i++) {\n    if (this._list[i].version === version) return i;\n  }\n\n  throw new Meteor.Error(\"Can't find migration version \" + version);\n}; //reset (mainly intended for tests)\n\n\nMigrations._reset = function () {\n  this._list = [{\n    version: 0,\n    up: function () {}\n  }];\n\n  this._collection.remove({});\n}; // unlock control\n\n\nMigrations.unlock = function () {\n  this._collection.update({\n    _id: 'control'\n  }, {\n    $set: {\n      locked: false\n    }\n  });\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/percolate:migrations/migrations_server.js\");\n\n/* Exports */\nPackage._define(\"percolate:migrations\", {\n  Migrations: Migrations\n});\n\n})();\n","servePath":"/packages/percolate_migrations.js","sourceMap":{"version":3,"sources":["packages/percolate:migrations/migrations_server.js"],"names":["DefaultMigration","version","up","Migrations","_list","options","log","logger","logIfLatest","collectionName","config","opts","_","extend","createLogger","prefix","check","String","level","message","Match","OneOf","isFunction","tag","Log","Meteor","startup","_collection","Mongo","Collection","forEach","partial","process","env","MIGRATE","migrateTo","add","migration","Error","Object","freeze","push","sortBy","m","command","isUndefined","length","split","subcommand","_migrateTo","last","parseInt","exit","getVersion","_getControl","rerun","self","control","currentVersion","lock","info","migrate","_findIndexByVersion","unlock","startIdx","endIdx","direction","idx","maybeName","name","update","_id","locked","$set","lockedAt","Date","_setControl","i","findOne","Number","Boolean","upsert","_reset","remove"],"mappings":"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","file":"/packages/percolate_migrations.js","sourcesContent":["/*\n  Adds migration capabilities. Migrations are defined like:\n\n  Migrations.add({\n    up: function() {}, //*required* code to run to migrate upwards\n    version: 1, //*required* number to identify migration order\n    down: function() {}, //*optional* code to run to migrate downwards\n    name: 'Something' //*optional* display name for the migration\n  });\n\n  The ordering of migrations is determined by the version you set.\n\n  To run the migrations, set the MIGRATE environment variable to either\n  'latest' or the version number you want to migrate to. Optionally, append\n  ',exit' if you want the migrations to exit the meteor process, e.g if you're\n  migrating from a script (remember to pass the --once parameter).\n\n  e.g:\n  MIGRATE=\"latest\" mrt # ensure we'll be at the latest version and run the app\n  MIGRATE=\"latest,exit\" mrt --once # ensure we'll be at the latest version and exit\n  MIGRATE=\"2,exit\" mrt --once # migrate to version 2 and exit\n\n  Note: Migrations will lock ensuring only 1 app can be migrating at once. If\n  a migration crashes, the control record in the migrations collection will\n  remain locked and at the version it was at previously, however the db could\n  be in an inconsistant state.\n*/\n\n// since we'll be at version 0 by default, we should have a migration set for\n// it.\nvar DefaultMigration = { version: 0, up: function() {} };\n\nMigrations = {\n  _list: [DefaultMigration],\n  options: {\n    // false disables logging\n    log: true,\n    // null or a function\n    logger: null,\n    // enable/disable info log \"already at latest.\"\n    logIfLatest: true,\n    // migrations collection name\n    collectionName: 'migrations',\n  },\n  config: function(opts) {\n    this.options = _.extend({}, this.options, opts);\n  },\n};\n\n/*\n  Logger factory function. Takes a prefix string and options object\n  and uses an injected `logger` if provided, else falls back to\n  Meteor's `Log` package.\n  Will send a log object to the injected logger, on the following form:\n    message: String\n    level: String (info, warn, error, debug)\n    tag: 'Migrations'\n*/\nfunction createLogger(prefix) {\n  check(prefix, String);\n\n  // Return noop if logging is disabled.\n  if (Migrations.options.log === false) {\n    return function() {};\n  }\n\n  return function(level, message) {\n    check(level, Match.OneOf('info', 'error', 'warn', 'debug'));\n    check(message, String);\n\n    var logger = Migrations.options && Migrations.options.logger;\n\n    if (logger && _.isFunction(logger)) {\n      logger({\n        level: level,\n        message: message,\n        tag: prefix,\n      });\n    } else {\n      Log[level]({ message: prefix + ': ' + message });\n    }\n  };\n}\n\nvar log;\n\nMeteor.startup(function() {\n  var options = Migrations.options;\n\n  // collection holding the control record\n  Migrations._collection = new Mongo.Collection(options.collectionName);\n\n  log = createLogger('Migrations');\n\n  ['info', 'warn', 'error', 'debug'].forEach(function(level) {\n    log[level] = _.partial(log, level);\n  });\n\n  if (process.env.MIGRATE) Migrations.migrateTo(process.env.MIGRATE);\n});\n\n// Add a new migration:\n// {up: function *required\n//  version: Number *required\n//  down: function *optional\n//  name: String *optional\n// }\nMigrations.add = function(migration) {\n  if (typeof migration.up !== 'function')\n    throw new Meteor.Error('Migration must supply an up function.');\n\n  if (typeof migration.version !== 'number')\n    throw new Meteor.Error('Migration must supply a version number.');\n\n  if (migration.version <= 0)\n    throw new Meteor.Error('Migration version must be greater than 0');\n\n  // Freeze the migration object to make it hereafter immutable\n  Object.freeze(migration);\n\n  this._list.push(migration);\n  this._list = _.sortBy(this._list, function(m) {\n    return m.version;\n  });\n};\n\n// Attempts to run the migrations using command in the form of:\n// e.g 'latest', 'latest,exit', 2\n// use 'XX,rerun' to re-run the migration at that version\nMigrations.migrateTo = function(command) {\n  if (_.isUndefined(command) || command === '' || this._list.length === 0)\n    throw new Error('Cannot migrate using invalid command: ' + command);\n\n  if (typeof command === 'number') {\n    var version = command;\n  } else {\n    var version = command.split(',')[0]; //.trim();\n    var subcommand = command.split(',')[1]; //.trim();\n  }\n\n  if (version === 'latest') {\n    this._migrateTo(_.last(this._list).version);\n  } else {\n    this._migrateTo(parseInt(version), subcommand === 'rerun');\n  }\n\n  // remember to run meteor with --once otherwise it will restart\n  if (subcommand === 'exit') process.exit(0);\n};\n\n// just returns the current version\nMigrations.getVersion = function() {\n  return this._getControl().version;\n};\n\n// migrates to the specific version passed in\nMigrations._migrateTo = function(version, rerun) {\n  var self = this;\n  var control = this._getControl(); // Side effect: upserts control document.\n  var currentVersion = control.version;\n\n  if (lock() === false) {\n    log.info('Not migrating, control is locked.');\n    return;\n  }\n\n  if (rerun) {\n    log.info('Rerunning version ' + version);\n    migrate('up', this._findIndexByVersion(version));\n    log.info('Finished migrating.');\n    unlock();\n    return;\n  }\n\n  if (currentVersion === version) {\n    if (Migrations.options.logIfLatest) {\n      log.info('Not migrating, already at version ' + version);\n    }\n    unlock();\n    return;\n  }\n\n  var startIdx = this._findIndexByVersion(currentVersion);\n  var endIdx = this._findIndexByVersion(version);\n\n  // log.info('startIdx:' + startIdx + ' endIdx:' + endIdx);\n  log.info(\n    'Migrating from version ' +\n      this._list[startIdx].version +\n      ' -> ' +\n      this._list[endIdx].version,\n  );\n\n  // run the actual migration\n  function migrate(direction, idx) {\n    var migration = self._list[idx];\n\n    if (typeof migration[direction] !== 'function') {\n      unlock();\n      throw new Meteor.Error(\n        'Cannot migrate ' + direction + ' on version ' + migration.version,\n      );\n    }\n\n    function maybeName() {\n      return migration.name ? ' (' + migration.name + ')' : '';\n    }\n\n    log.info(\n      'Running ' +\n        direction +\n        '() on version ' +\n        migration.version +\n        maybeName(),\n    );\n\n    migration[direction](migration);\n  }\n\n  // Returns true if lock was acquired.\n  function lock() {\n    // This is atomic. The selector ensures only one caller at a time will see\n    // the unlocked control, and locking occurs in the same update's modifier.\n    // All other simultaneous callers will get false back from the update.\n    return (\n      self._collection.update(\n        { _id: 'control', locked: false },\n        { $set: { locked: true, lockedAt: new Date() } },\n      ) === 1\n    );\n  }\n\n  // Side effect: saves version.\n  function unlock() {\n    self._setControl({ locked: false, version: currentVersion });\n  }\n\n  if (currentVersion < version) {\n    for (var i = startIdx; i < endIdx; i++) {\n      migrate('up', i + 1);\n      currentVersion = self._list[i + 1].version;\n    }\n  } else {\n    for (var i = startIdx; i > endIdx; i--) {\n      migrate('down', i);\n      currentVersion = self._list[i - 1].version;\n    }\n  }\n\n  unlock();\n  log.info('Finished migrating.');\n};\n\n// gets the current control record, optionally creating it if non-existant\nMigrations._getControl = function() {\n  var control = this._collection.findOne({ _id: 'control' });\n\n  return control || this._setControl({ version: 0, locked: false });\n};\n\n// sets the control record\nMigrations._setControl = function(control) {\n  // be quite strict\n  check(control.version, Number);\n  check(control.locked, Boolean);\n\n  this._collection.update(\n    { _id: 'control' },\n    { $set: { version: control.version, locked: control.locked } },\n    { upsert: true },\n  );\n\n  return control;\n};\n\n// returns the migration index in _list or throws if not found\nMigrations._findIndexByVersion = function(version) {\n  for (var i = 0; i < this._list.length; i++) {\n    if (this._list[i].version === version) return i;\n  }\n\n  throw new Meteor.Error(\"Can't find migration version \" + version);\n};\n\n//reset (mainly intended for tests)\nMigrations._reset = function() {\n  this._list = [{ version: 0, up: function() {} }];\n  this._collection.remove({});\n};\n\n// unlock control\nMigrations.unlock = function() {\n  this._collection.update({ _id: 'control' }, { $set: { locked: false } });\n};\n"]}}]
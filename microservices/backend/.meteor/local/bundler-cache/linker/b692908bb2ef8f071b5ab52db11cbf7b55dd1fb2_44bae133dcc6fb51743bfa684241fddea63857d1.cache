[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"force-ssl\":{\"force_ssl_both.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/force-ssl/force_ssl_both.js                                                                 //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nObject.assign(Meteor.absoluteUrl.defaultOptions, {\n  secure: true\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"force_ssl_server.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/force-ssl/force_ssl_server.js                                                               //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nlet isLocalConnection, isSslConnection;\nmodule.link(\"meteor/force-ssl-common\", {\n  isLocalConnection(v) {\n    isLocalConnection = v;\n  },\n\n  isSslConnection(v) {\n    isSslConnection = v;\n  }\n\n}, 0);\n\nvar url = Npm.require(\"url\");\n\n// Unfortunately we can't use a connect middleware here since\n// sockjs installs itself prior to all existing listeners\n// (meaning prior to any connect middlewares) so we need to take\n// an approach similar to overshadowListeners in\n// https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\nvar httpServer = WebApp.httpServer;\nvar oldHttpServerListeners = httpServer.listeners('request').slice(0);\nhttpServer.removeAllListeners('request');\nhttpServer.addListener('request', function (req, res) {\n  // allow connections if they have been handled w/ ssl already\n  // (either by us or by a proxy) OR the connection is entirely over\n  // localhost (development mode).\n  //\n  // Note: someone could trick us into serving over non-ssl by setting\n  // x-forwarded-for, x-forwarded-proto, forwarded, etc. Not much we can do\n  // there if we still want to operate behind proxies.\n  if (!isLocalConnection(req) && !isSslConnection(req)) {\n    // connection is not cool. send a 302 redirect!\n    var host = url.parse(Meteor.absoluteUrl()).hostname; // strip off the port number. If we went to a URL with a custom\n    // port, we don't know what the custom SSL port is anyway.\n\n    host = host.replace(/:\\d+$/, '');\n    res.writeHead(302, {\n      'Location': 'https://' + host + req.url,\n      'Access-Control-Allow-Origin': '*'\n    });\n    res.end();\n    return;\n  } // connection is OK. Proceed normally.\n\n\n  var args = arguments;\n  oldHttpServerListeners.forEach(oldListener => {\n    oldListener.apply(httpServer, args);\n  });\n}); // NOTE: this doesn't handle websockets!\n//\n// Websockets come in via the 'upgrade' request. We can override this,\n// however the problem is we're not sure if the websocket is actually\n// encrypted. We don't get x-forwarded-for, x-forwarded-proto, forwarded, etc.\n// on websockets. It's possible the 'sec-websocket-origin' header does\n// what we want, but that's not clear.\n//\n// For now, this package allows raw unencrypted DDP connections over\n// websockets.\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/force-ssl/force_ssl_both.js\");\nvar exports = require(\"/node_modules/meteor/force-ssl/force_ssl_server.js\");\n\n/* Exports */\nPackage._define(\"force-ssl\", exports);\n\n})();\n","servePath":"/packages/force-ssl.js","sourceMap":{"version":3,"sources":["packages/force-ssl/force_ssl_both.js","packages/force-ssl/force_ssl_server.js"],"names":["Object","assign","Meteor","absoluteUrl","defaultOptions","secure","isLocalConnection","isSslConnection","module","link","v","url","Npm","require","httpServer","WebApp","oldHttpServerListeners","listeners","slice","removeAllListeners","addListener","req","res","host","parse","hostname","replace","writeHead","end","args","arguments","forEach","oldListener","apply"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAACC,MAAP,CAAcC,MAAM,CAACC,WAAP,CAAmBC,cAAjC,EAAiD;AAAEC,QAAM,EAAE;AAAV,CAAjD,E;;;;;;;;;;;ACAA,IAAIC,iBAAJ,EAAsBC,eAAtB;AAAsCC,MAAM,CAACC,IAAP,CAAY,yBAAZ,EAAsC;AAACH,mBAAiB,CAACI,CAAD,EAAG;AAACJ,qBAAiB,GAACI,CAAlB;AAAoB,GAA1C;;AAA2CH,iBAAe,CAACG,CAAD,EAAG;AAACH,mBAAe,GAACG,CAAhB;AAAkB;;AAAhF,CAAtC,EAAwH,CAAxH;;AAAtC,IAAIC,GAAG,GAAGC,GAAG,CAACC,OAAJ,CAAY,KAAZ,CAAV;;AAGA;AACA;AACA;AACA;AACA;AAEA,IAAIC,UAAU,GAAGC,MAAM,CAACD,UAAxB;AACA,IAAIE,sBAAsB,GAAGF,UAAU,CAACG,SAAX,CAAqB,SAArB,EAAgCC,KAAhC,CAAsC,CAAtC,CAA7B;AACAJ,UAAU,CAACK,kBAAX,CAA8B,SAA9B;AACAL,UAAU,CAACM,WAAX,CAAuB,SAAvB,EAAkC,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAI,CAAChB,iBAAiB,CAACe,GAAD,CAAlB,IAA2B,CAACd,eAAe,CAACc,GAAD,CAA/C,EAAsD;AACpD;AAEA,QAAIE,IAAI,GAAGZ,GAAG,CAACa,KAAJ,CAAUtB,MAAM,CAACC,WAAP,EAAV,EAAgCsB,QAA3C,CAHoD,CAKpD;AACA;;AACAF,QAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAP;AAEAJ,OAAG,CAACK,SAAJ,CAAc,GAAd,EAAmB;AACjB,kBAAY,aAAaJ,IAAb,GAAoBF,GAAG,CAACV,GADnB;AAEjB,qCAA+B;AAFd,KAAnB;AAIAW,OAAG,CAACM,GAAJ;AACA;AACD,GAzBmD,CA2BpD;;;AACA,MAAIC,IAAI,GAAGC,SAAX;AACAd,wBAAsB,CAACe,OAAvB,CAAgCC,WAAD,IAAiB;AAC9CA,eAAW,CAACC,KAAZ,CAAkBnB,UAAlB,EAA8Be,IAA9B;AACD,GAFD;AAGD,CAhCD,E,CAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c","file":"/packages/force-ssl.js","sourcesContent":["Object.assign(Meteor.absoluteUrl.defaultOptions, { secure: true });\n","var url = Npm.require(\"url\");\nimport { isLocalConnection, isSslConnection } from 'meteor/force-ssl-common';\n\n// Unfortunately we can't use a connect middleware here since\n// sockjs installs itself prior to all existing listeners\n// (meaning prior to any connect middlewares) so we need to take\n// an approach similar to overshadowListeners in\n// https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n\nvar httpServer = WebApp.httpServer;\nvar oldHttpServerListeners = httpServer.listeners('request').slice(0);\nhttpServer.removeAllListeners('request');\nhttpServer.addListener('request', function (req, res) {\n\n  // allow connections if they have been handled w/ ssl already\n  // (either by us or by a proxy) OR the connection is entirely over\n  // localhost (development mode).\n  //\n  // Note: someone could trick us into serving over non-ssl by setting\n  // x-forwarded-for, x-forwarded-proto, forwarded, etc. Not much we can do\n  // there if we still want to operate behind proxies.\n\n  if (!isLocalConnection(req) && !isSslConnection(req)) {\n    // connection is not cool. send a 302 redirect!\n\n    var host = url.parse(Meteor.absoluteUrl()).hostname;\n\n    // strip off the port number. If we went to a URL with a custom\n    // port, we don't know what the custom SSL port is anyway.\n    host = host.replace(/:\\d+$/, '');\n\n    res.writeHead(302, {\n      'Location': 'https://' + host + req.url,\n      'Access-Control-Allow-Origin': '*'\n    });\n    res.end();\n    return;\n  }\n\n  // connection is OK. Proceed normally.\n  var args = arguments;\n  oldHttpServerListeners.forEach((oldListener) => {\n    oldListener.apply(httpServer, args);\n  });\n});\n\n\n// NOTE: this doesn't handle websockets!\n//\n// Websockets come in via the 'upgrade' request. We can override this,\n// however the problem is we're not sure if the websocket is actually\n// encrypted. We don't get x-forwarded-for, x-forwarded-proto, forwarded, etc.\n// on websockets. It's possible the 'sec-websocket-origin' header does\n// what we want, but that's not clear.\n//\n// For now, this package allows raw unencrypted DDP connections over\n// websockets.\n"]}}]
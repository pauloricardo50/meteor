{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/cypress/server/methods.app-tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/cypress/server/methods.app-tests.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/cypress/server/methods.app-tests.js","inputSourceMap":{"version":3,"sources":["imports/core/cypress/server/methods.app-tests.js"],"names":["Meteor","Accounts","resetDatabase","UserService","PromotionService","ROLES","PROMOTION_TYPES","LOAN_QUERIES","STEPS","createPromotionDemo","OrganisationService","LoanService","PropertyService","check","Loans","loanBase","Users","createLoginToken","createEmailVerificationToken","createFakeInterestRates","adminLoans","adminLoansQuery","E2E_USER_EMAIL","PRO_EMAIL","PRO_EMAIL_2","PRO_EMAIL_3","PRO_PASSWORD","ORG_NAME","USER_EMAIL","USER_PASSWORD","removeDefaultRateLimit","userLoansE2E","createQuery","USER_LOANS_E2E","$filter","filters","params","userId","unowned","step","$exists","$options","sort","createdAt","methods","generateProFixtures","createUser","email","password","update","object","roles","PRO","userId2","userId3","insert","name","type","address1","zipCode","city","userLinks","_id","insertPromotion","findOne","promotion","CREDIT","insertFullPromotion","removeAllPromotions","remove","promotionId","addProUsersToPromotion","promotions","find","forEach","addProUser","setInvitedBy","invitedBy","fields","fetch","loans","loanId","updatePromotionInvitedBy","setUserPermissions","permissions","setPromotionStatus","status","resetUserPermissions","canSellLots","canModifyLots","canRemoveLots","canModifyPromotion","canManageDocuments","canBookLots","canInviteCustomers","canAddLots","displayCustomerNames","editOrganisation","organisation","baseUpdate","$set","updateAllLoans","loan","getAppEndToEndTestData","getByEmail","admin","$in","ADMIN","solvencyLoan","clone","SOLVENCY","fetchOne","requestLoan","REQUEST","unownedLoan","owned","adminLoginToken","emailVerificationToken","options","sendResetPasswordEmail","error","user","services","passwordResetToken","reset","token","inviteTestUser","withPassword","adminCreateUser","firstName","lastName","sendEnrollmentEmail","fullLoanInsert","loginToken","getLoginToken","removeTestUser","updateLoan","addProProperty","role","propertyId","proPropertyInsert","property","value","addUserProperty","serverLog","log","String","isServer","console","isLoggedIn","generateFixtures","number","getLoan","get","getUser","getAdminEndToEndTestData","properties","borrowers","borrower"],"mappings":"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","sourcesContent":["// For security reasons, this is the ONLY\n// file where server code related to end to end tests should be added\n\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport UserService from 'core/api/users/server/UserService';\nimport PromotionService from 'core/api/promotions/server/PromotionService';\nimport {\n  ROLES,\n  PROMOTION_TYPES,\n  LOAN_QUERIES,\n  STEPS,\n} from 'core/api/constants';\nimport { createPromotionDemo } from 'core/fixtures/promotionDemo/promotionDemoFixtures';\nimport OrganisationService from 'imports/core/api/organisations/server/OrganisationService';\nimport LoanService from 'imports/core/api/loans/server/LoanService';\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport { check } from 'meteor/check';\nimport Loans from 'core/api/loans/loans';\nimport { loanBase } from 'core/api/fragments';\nimport Users from 'core/api/users/users';\nimport {\n  createLoginToken,\n  createEmailVerificationToken,\n} from 'core/utils/testHelpers/index';\nimport { createFakeInterestRates } from 'core/fixtures/interestRatesFixtures';\nimport { adminLoans as adminLoansQuery } from 'core/api/loans/queries';\nimport { E2E_USER_EMAIL } from '../../fixtures/fixtureConstants';\nimport {\n  PRO_EMAIL,\n  PRO_EMAIL_2,\n  PRO_EMAIL_3,\n  PRO_PASSWORD,\n  ORG_NAME,\n  USER_EMAIL,\n  USER_PASSWORD,\n} from './e2eConstants';\n\n// remove login rate limits in E2E tests\nAccounts.removeDefaultRateLimit();\n\nconst userLoansE2E = Loans.createQuery(LOAN_QUERIES.USER_LOANS_E2E, {\n  $filter({ filters, params: { userId, unowned, step } }) {\n    filters.userId = userId;\n\n    if (unowned) {\n      filters.userId = { $exists: false };\n    }\n\n    if (step) {\n      filters.step = step;\n    }\n  },\n  ...loanBase(),\n  $options: { sort: { createdAt: -1 } },\n});\n\nMeteor.methods({\n  generateProFixtures() {\n    const userId = Accounts.createUser({\n      email: PRO_EMAIL,\n      password: PRO_PASSWORD,\n    });\n    UserService.update({ userId, object: { roles: [ROLES.PRO] } });\n    const userId2 = Accounts.createUser({\n      email: PRO_EMAIL_2,\n      password: PRO_PASSWORD,\n    });\n    UserService.update({ userId: userId2, object: { roles: [ROLES.PRO] } });\n    const userId3 = Accounts.createUser({\n      email: PRO_EMAIL_3,\n      password: PRO_PASSWORD,\n    });\n    UserService.update({ userId: userId3, object: { roles: [ROLES.PRO] } });\n    OrganisationService.insert({\n      name: ORG_NAME,\n      type: 'DEVELOPER',\n      address1: 'Rue du pré 1',\n      zipCode: 1201,\n      city: 'Genève',\n      userLinks: [{ _id: userId }, { _id: userId2 }],\n    });\n    OrganisationService.insert({\n      name: 'Organisation 2',\n      type: 'DEVELOPER',\n      address1: 'Rue du pré 1',\n      zipCode: 1201,\n      city: 'Genève',\n      userLinks: [{ _id: userId3 }],\n    });\n  },\n  insertPromotion() {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    PromotionService.insert({\n      userId,\n      promotion: {\n        name: 'Test promotion',\n        type: PROMOTION_TYPES.CREDIT,\n        address1: 'Rue du four 1',\n        zipCode: '1400',\n        city: 'Yverdon-les-Bains',\n      },\n    });\n  },\n  async insertFullPromotion() {\n    await createPromotionDemo(this.userId, false, false, 10);\n  },\n  removeAllPromotions() {\n    PromotionService.remove({ promotionId: {} });\n  },\n  addProUsersToPromotion() {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    const { _id: userId2 } = UserService.findOne({\n      'emails.address': PRO_EMAIL_2,\n    });\n    const { _id: userId3 } = UserService.findOne({\n      'emails.address': PRO_EMAIL_3,\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId,\n    }) || [];\n\n    promotions.forEach(({ _id: promotionId }) => {\n      PromotionService.addProUser({ promotionId, userId: userId2 });\n      PromotionService.addProUser({ promotionId, userId: userId3 });\n    });\n  },\n  setInvitedBy({ email }) {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    const { _id: invitedBy } = UserService.findOne({ 'emails.address': email });\n    const promotions = PromotionService.find(\n      { 'userLinks._id': userId },\n      { fields: { _id: 1 } },\n    ).fetch() || [];\n\n    promotions.forEach(({ _id: promotionId }) => {\n      const loans = LoanService.find({}).fetch() || [];\n      loans.forEach(({ _id: loanId }) => {\n        LoanService.updatePromotionInvitedBy({\n          loanId,\n          promotionId,\n          invitedBy,\n        });\n      });\n    });\n  },\n  setUserPermissions({ permissions }) {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    const promotions = PromotionService.find(\n      { 'userLinks._id': userId },\n      { fields: { _id: 1 } },\n    ).fetch() || [];\n\n    promotions.forEach(({ _id: promotionId }) =>\n      PromotionService.setUserPermissions({ promotionId, userId, permissions }));\n  },\n  setPromotionStatus({ status }) {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId,\n    }) || [];\n\n    promotions.forEach(({ _id: promotionId }) =>\n      PromotionService.update({ promotionId, object: { status } }));\n  },\n  resetUserPermissions() {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId,\n    }).fetch() || [];\n\n    const permissions = {\n      canSellLots: false,\n      canModifyLots: false,\n      canRemoveLots: false,\n      canModifyPromotion: false,\n      canManageDocuments: false,\n      canBookLots: false,\n      canInviteCustomers: false,\n      canAddLots: false,\n      displayCustomerNames: false,\n    };\n\n    promotions.forEach(({ _id: promotionId }) =>\n      PromotionService.setUserPermissions({ promotionId, userId, permissions }));\n  },\n  editOrganisation({ ...organisation }) {\n    OrganisationService.baseUpdate({ name: ORG_NAME }, { $set: organisation });\n  },\n  updateAllLoans(loan) {\n    LoanService.baseUpdate({}, { $set: loan });\n  },\n\n  getAppEndToEndTestData() {\n    const { _id: userId } = UserService.getByEmail(E2E_USER_EMAIL);\n\n    const admin = Users.findOne(\n      { roles: { $in: [ROLES.ADMIN] } },\n      { fields: { _id: 1 } },\n    );\n\n    const solvencyLoan = userLoansE2E\n      .clone({ userId, step: STEPS.SOLVENCY })\n      .fetchOne();\n\n    const requestLoan = userLoansE2E\n      .clone({ userId, step: STEPS.REQUEST })\n      .fetchOne();\n\n    const unownedLoan = userLoansE2E.clone({ owned: false }).fetchOne();\n\n    const adminLoginToken = createLoginToken(admin._id);\n    const emailVerificationToken = createEmailVerificationToken(\n      userId,\n      E2E_USER_EMAIL,\n    );\n\n    const userId2 = UserService.createUser({\n      options: { email: USER_EMAIL, password: USER_PASSWORD },\n    });\n\n    try {\n      // Wrap due to meteor toys issue\n      // https://github.com/MeteorToys/meteor-devtools/issues/111\n      Accounts.sendResetPasswordEmail(userId2);\n    } catch (error) {}\n\n    const user = UserService.findOne(userId2, { fields: { services: 1 } });\n\n    const passwordResetToken = user.services.password.reset.token;\n\n    return {\n      solvencyLoan,\n      requestLoan,\n      unownedLoan,\n      adminLoginToken,\n      emailVerificationToken,\n      userId,\n      passwordResetToken,\n    };\n  },\n  inviteTestUser({ withPassword } = {}) {\n    const userId = UserService.adminCreateUser({\n      options: {\n        email: USER_EMAIL,\n        firstName: 'Test',\n        lastName: 'User',\n        sendEnrollmentEmail: true,\n        password: withPassword && USER_PASSWORD,\n      },\n    });\n    LoanService.fullLoanInsert({ userId });\n\n    const loginToken = UserService.getLoginToken({ userId });\n    return loginToken;\n  },\n  removeTestUser(email) {\n    const user = UserService.getByEmail(email);\n    if (user) {\n      UserService.remove({ userId: user._id });\n    }\n  },\n  updateLoan({ loanId, object }) {\n    LoanService.update({ loanId, object });\n  },\n  getLoginToken() {\n    const user = UserService.findOne({});\n    const loginToken = UserService.getLoginToken({ userId: user._id });\n    return loginToken;\n  },\n  addProProperty() {\n    const userId = UserService.adminCreateUser({\n      options: {\n        email: PRO_EMAIL,\n        firstName: 'Pro',\n        lastName: 'Test User',\n      },\n      role: ROLES.PRO,\n    });\n    const propertyId = PropertyService.proPropertyInsert({\n      property: {\n        address1: 'Chemin Auguste-Vilbert 14',\n        zipCode: 1218,\n        city: 'Le Grand-Saconnex',\n        value: 1500000,\n      },\n      userId,\n    });\n\n    return propertyId;\n  },\n  addUserProperty() {\n    return PropertyService.insert({\n      property: {\n        address1: 'Chemin Auguste-Vilbert 14',\n        zipCode: 1218,\n        city: 'Le Grand-Saconnex',\n        value: 1500000,\n      },\n    });\n  },\n  serverLog: (log) => {\n    check(log, String);\n    if (Meteor.isServer) {\n      console.log('Cypress logging from server: ', log);\n    }\n  },\n  isLoggedIn() {\n    return this.userId;\n  },\n  resetDatabase,\n  generateFixtures() {\n    createFakeInterestRates({ number: 10 });\n  },\n  addProUser() {\n    const { _id: userId } = UserService.getByEmail(PRO_EMAIL) || {};\n    return (\n      userId\n      || UserService.adminCreateUser({\n        options: {\n          email: PRO_EMAIL,\n          firstName: 'Pro',\n          lastName: 'Test User',\n        },\n        role: ROLES.PRO,\n      })\n    );\n  },\n  getLoan(loanId) {\n    return LoanService.get(loanId);\n  },\n  getUser(email) {\n    return UserService.getByEmail(email);\n  },\n  getAdminEndToEndTestData() {\n    const loan = adminLoansQuery.clone({ owned: true }).fetchOne();\n\n    const {\n      properties,\n      borrowers: [borrower],\n    } = loan;\n\n    const user = Users.findOne(loan.userId);\n\n    return { loan, user, property: properties[0], borrower };\n  },\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/cypress/server/methods.app-tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/cypress/server/methods.app-tests.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 2);\nlet UserService;\nmodule.link(\"../../api/users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 3);\nlet PromotionService;\nmodule.link(\"../../api/promotions/server/PromotionService\", {\n  default(v) {\n    PromotionService = v;\n  }\n\n}, 4);\nlet ROLES, PROMOTION_TYPES, LOAN_QUERIES, STEPS;\nmodule.link(\"../../api/constants\", {\n  ROLES(v) {\n    ROLES = v;\n  },\n\n  PROMOTION_TYPES(v) {\n    PROMOTION_TYPES = v;\n  },\n\n  LOAN_QUERIES(v) {\n    LOAN_QUERIES = v;\n  },\n\n  STEPS(v) {\n    STEPS = v;\n  }\n\n}, 5);\nlet createPromotionDemo;\nmodule.link(\"../../fixtures/promotionDemo/promotionDemoFixtures\", {\n  createPromotionDemo(v) {\n    createPromotionDemo = v;\n  }\n\n}, 6);\nlet OrganisationService;\nmodule.link(\"../../api/organisations/server/OrganisationService\", {\n  default(v) {\n    OrganisationService = v;\n  }\n\n}, 7);\nlet LoanService;\nmodule.link(\"../../api/loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 8);\nlet PropertyService;\nmodule.link(\"../../api/properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 9);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 10);\nlet Loans;\nmodule.link(\"../../api/loans/loans\", {\n  default(v) {\n    Loans = v;\n  }\n\n}, 11);\nlet loanBase;\nmodule.link(\"../../api/fragments\", {\n  loanBase(v) {\n    loanBase = v;\n  }\n\n}, 12);\nlet Users;\nmodule.link(\"../../api/users/users\", {\n  default(v) {\n    Users = v;\n  }\n\n}, 13);\nlet createLoginToken, createEmailVerificationToken;\nmodule.link(\"../../utils/testHelpers\", {\n  createLoginToken(v) {\n    createLoginToken = v;\n  },\n\n  createEmailVerificationToken(v) {\n    createEmailVerificationToken = v;\n  }\n\n}, 14);\nlet createFakeInterestRates;\nmodule.link(\"../../fixtures/interestRatesFixtures\", {\n  createFakeInterestRates(v) {\n    createFakeInterestRates = v;\n  }\n\n}, 15);\nlet adminLoansQuery;\nmodule.link(\"../../api/loans/queries\", {\n  adminLoans(v) {\n    adminLoansQuery = v;\n  }\n\n}, 16);\nlet E2E_USER_EMAIL;\nmodule.link(\"../../fixtures/fixtureConstants\", {\n  E2E_USER_EMAIL(v) {\n    E2E_USER_EMAIL = v;\n  }\n\n}, 17);\nlet PRO_EMAIL, PRO_EMAIL_2, PRO_EMAIL_3, PRO_PASSWORD, ORG_NAME, USER_EMAIL, USER_PASSWORD;\nmodule.link(\"./e2eConstants\", {\n  PRO_EMAIL(v) {\n    PRO_EMAIL = v;\n  },\n\n  PRO_EMAIL_2(v) {\n    PRO_EMAIL_2 = v;\n  },\n\n  PRO_EMAIL_3(v) {\n    PRO_EMAIL_3 = v;\n  },\n\n  PRO_PASSWORD(v) {\n    PRO_PASSWORD = v;\n  },\n\n  ORG_NAME(v) {\n    ORG_NAME = v;\n  },\n\n  USER_EMAIL(v) {\n    USER_EMAIL = v;\n  },\n\n  USER_PASSWORD(v) {\n    USER_PASSWORD = v;\n  }\n\n}, 18);\n// remove login rate limits in E2E tests\nAccounts.removeDefaultRateLimit();\nconst userLoansE2E = Loans.createQuery(LOAN_QUERIES.USER_LOANS_E2E, (0, _objectSpread2.default)({\n  $filter({\n    filters,\n    params: {\n      userId,\n      unowned,\n      step\n    }\n  }) {\n    filters.userId = userId;\n\n    if (unowned) {\n      filters.userId = {\n        $exists: false\n      };\n    }\n\n    if (step) {\n      filters.step = step;\n    }\n  }\n\n}, loanBase(), {\n  $options: {\n    sort: {\n      createdAt: -1\n    }\n  }\n}));\nMeteor.methods({\n  generateProFixtures() {\n    const userId = Accounts.createUser({\n      email: PRO_EMAIL,\n      password: PRO_PASSWORD\n    });\n    UserService.update({\n      userId,\n      object: {\n        roles: [ROLES.PRO]\n      }\n    });\n    const userId2 = Accounts.createUser({\n      email: PRO_EMAIL_2,\n      password: PRO_PASSWORD\n    });\n    UserService.update({\n      userId: userId2,\n      object: {\n        roles: [ROLES.PRO]\n      }\n    });\n    const userId3 = Accounts.createUser({\n      email: PRO_EMAIL_3,\n      password: PRO_PASSWORD\n    });\n    UserService.update({\n      userId: userId3,\n      object: {\n        roles: [ROLES.PRO]\n      }\n    });\n    OrganisationService.insert({\n      name: ORG_NAME,\n      type: 'DEVELOPER',\n      address1: 'Rue du pré 1',\n      zipCode: 1201,\n      city: 'Genève',\n      userLinks: [{\n        _id: userId\n      }, {\n        _id: userId2\n      }]\n    });\n    OrganisationService.insert({\n      name: 'Organisation 2',\n      type: 'DEVELOPER',\n      address1: 'Rue du pré 1',\n      zipCode: 1201,\n      city: 'Genève',\n      userLinks: [{\n        _id: userId3\n      }]\n    });\n  },\n\n  insertPromotion() {\n    const {\n      _id: userId\n    } = UserService.findOne({\n      'emails.address': PRO_EMAIL\n    });\n    PromotionService.insert({\n      userId,\n      promotion: {\n        name: 'Test promotion',\n        type: PROMOTION_TYPES.CREDIT,\n        address1: 'Rue du four 1',\n        zipCode: '1400',\n        city: 'Yverdon-les-Bains'\n      }\n    });\n  },\n\n  insertFullPromotion() {\n    return Promise.asyncApply(() => {\n      Promise.await(createPromotionDemo(this.userId, false, false, 10));\n    });\n  },\n\n  removeAllPromotions() {\n    PromotionService.remove({\n      promotionId: {}\n    });\n  },\n\n  addProUsersToPromotion() {\n    const {\n      _id: userId\n    } = UserService.findOne({\n      'emails.address': PRO_EMAIL\n    });\n    const {\n      _id: userId2\n    } = UserService.findOne({\n      'emails.address': PRO_EMAIL_2\n    });\n    const {\n      _id: userId3\n    } = UserService.findOne({\n      'emails.address': PRO_EMAIL_3\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId\n    }) || [];\n    promotions.forEach(({\n      _id: promotionId\n    }) => {\n      PromotionService.addProUser({\n        promotionId,\n        userId: userId2\n      });\n      PromotionService.addProUser({\n        promotionId,\n        userId: userId3\n      });\n    });\n  },\n\n  setInvitedBy({\n    email\n  }) {\n    const {\n      _id: userId\n    } = UserService.findOne({\n      'emails.address': PRO_EMAIL\n    });\n    const {\n      _id: invitedBy\n    } = UserService.findOne({\n      'emails.address': email\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId\n    }, {\n      fields: {\n        _id: 1\n      }\n    }).fetch() || [];\n    promotions.forEach(({\n      _id: promotionId\n    }) => {\n      const loans = LoanService.find({}).fetch() || [];\n      loans.forEach(({\n        _id: loanId\n      }) => {\n        LoanService.updatePromotionInvitedBy({\n          loanId,\n          promotionId,\n          invitedBy\n        });\n      });\n    });\n  },\n\n  setUserPermissions({\n    permissions\n  }) {\n    const {\n      _id: userId\n    } = UserService.findOne({\n      'emails.address': PRO_EMAIL\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId\n    }, {\n      fields: {\n        _id: 1\n      }\n    }).fetch() || [];\n    promotions.forEach(({\n      _id: promotionId\n    }) => PromotionService.setUserPermissions({\n      promotionId,\n      userId,\n      permissions\n    }));\n  },\n\n  setPromotionStatus({\n    status\n  }) {\n    const {\n      _id: userId\n    } = UserService.findOne({\n      'emails.address': PRO_EMAIL\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId\n    }) || [];\n    promotions.forEach(({\n      _id: promotionId\n    }) => PromotionService.update({\n      promotionId,\n      object: {\n        status\n      }\n    }));\n  },\n\n  resetUserPermissions() {\n    const {\n      _id: userId\n    } = UserService.findOne({\n      'emails.address': PRO_EMAIL\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId\n    }).fetch() || [];\n    const permissions = {\n      canSellLots: false,\n      canModifyLots: false,\n      canRemoveLots: false,\n      canModifyPromotion: false,\n      canManageDocuments: false,\n      canBookLots: false,\n      canInviteCustomers: false,\n      canAddLots: false,\n      displayCustomerNames: false\n    };\n    promotions.forEach(({\n      _id: promotionId\n    }) => PromotionService.setUserPermissions({\n      promotionId,\n      userId,\n      permissions\n    }));\n  },\n\n  editOrganisation(_ref) {\n    let organisation = (0, _extends2.default)({}, _ref);\n    OrganisationService.baseUpdate({\n      name: ORG_NAME\n    }, {\n      $set: organisation\n    });\n  },\n\n  updateAllLoans(loan) {\n    LoanService.baseUpdate({}, {\n      $set: loan\n    });\n  },\n\n  getAppEndToEndTestData() {\n    const {\n      _id: userId\n    } = UserService.getByEmail(E2E_USER_EMAIL);\n    const admin = Users.findOne({\n      roles: {\n        $in: [ROLES.ADMIN]\n      }\n    }, {\n      fields: {\n        _id: 1\n      }\n    });\n    const solvencyLoan = userLoansE2E.clone({\n      userId,\n      step: STEPS.SOLVENCY\n    }).fetchOne();\n    const requestLoan = userLoansE2E.clone({\n      userId,\n      step: STEPS.REQUEST\n    }).fetchOne();\n    const unownedLoan = userLoansE2E.clone({\n      owned: false\n    }).fetchOne();\n    const adminLoginToken = createLoginToken(admin._id);\n    const emailVerificationToken = createEmailVerificationToken(userId, E2E_USER_EMAIL);\n    const userId2 = UserService.createUser({\n      options: {\n        email: USER_EMAIL,\n        password: USER_PASSWORD\n      }\n    });\n\n    try {\n      // Wrap due to meteor toys issue\n      // https://github.com/MeteorToys/meteor-devtools/issues/111\n      Accounts.sendResetPasswordEmail(userId2);\n    } catch (error) {}\n\n    const user = UserService.findOne(userId2, {\n      fields: {\n        services: 1\n      }\n    });\n    const passwordResetToken = user.services.password.reset.token;\n    return {\n      solvencyLoan,\n      requestLoan,\n      unownedLoan,\n      adminLoginToken,\n      emailVerificationToken,\n      userId,\n      passwordResetToken\n    };\n  },\n\n  inviteTestUser({\n    withPassword\n  } = {}) {\n    const userId = UserService.adminCreateUser({\n      options: {\n        email: USER_EMAIL,\n        firstName: 'Test',\n        lastName: 'User',\n        sendEnrollmentEmail: true,\n        password: withPassword && USER_PASSWORD\n      }\n    });\n    LoanService.fullLoanInsert({\n      userId\n    });\n    const loginToken = UserService.getLoginToken({\n      userId\n    });\n    return loginToken;\n  },\n\n  removeTestUser(email) {\n    const user = UserService.getByEmail(email);\n\n    if (user) {\n      UserService.remove({\n        userId: user._id\n      });\n    }\n  },\n\n  updateLoan({\n    loanId,\n    object\n  }) {\n    LoanService.update({\n      loanId,\n      object\n    });\n  },\n\n  getLoginToken() {\n    const user = UserService.findOne({});\n    const loginToken = UserService.getLoginToken({\n      userId: user._id\n    });\n    return loginToken;\n  },\n\n  addProProperty() {\n    const userId = UserService.adminCreateUser({\n      options: {\n        email: PRO_EMAIL,\n        firstName: 'Pro',\n        lastName: 'Test User'\n      },\n      role: ROLES.PRO\n    });\n    const propertyId = PropertyService.proPropertyInsert({\n      property: {\n        address1: 'Chemin Auguste-Vilbert 14',\n        zipCode: 1218,\n        city: 'Le Grand-Saconnex',\n        value: 1500000\n      },\n      userId\n    });\n    return propertyId;\n  },\n\n  addUserProperty() {\n    return PropertyService.insert({\n      property: {\n        address1: 'Chemin Auguste-Vilbert 14',\n        zipCode: 1218,\n        city: 'Le Grand-Saconnex',\n        value: 1500000\n      }\n    });\n  },\n\n  serverLog: log => {\n    check(log, String);\n\n    if (Meteor.isServer) {\n      console.log('Cypress logging from server: ', log);\n    }\n  },\n\n  isLoggedIn() {\n    return this.userId;\n  },\n\n  resetDatabase,\n\n  generateFixtures() {\n    createFakeInterestRates({\n      number: 10\n    });\n  },\n\n  addProUser() {\n    const {\n      _id: userId\n    } = UserService.getByEmail(PRO_EMAIL) || {};\n    return userId || UserService.adminCreateUser({\n      options: {\n        email: PRO_EMAIL,\n        firstName: 'Pro',\n        lastName: 'Test User'\n      },\n      role: ROLES.PRO\n    });\n  },\n\n  getLoan(loanId) {\n    return LoanService.get(loanId);\n  },\n\n  getUser(email) {\n    return UserService.getByEmail(email);\n  },\n\n  getAdminEndToEndTestData() {\n    const loan = adminLoansQuery.clone({\n      owned: true\n    }).fetchOne();\n    const {\n      properties,\n      borrowers: [borrower]\n    } = loan;\n    const user = Users.findOne(loan.userId);\n    return {\n      loan,\n      user,\n      property: properties[0],\n      borrower\n    };\n  }\n\n});","map":{"version":3,"sources":["imports/core/cypress/server/methods.app-tests.js"],"names":["Accounts","userLoansE2E","LOAN_QUERIES","$filter","params","step","filters","$exists","loanBase","$options","sort","createdAt","Meteor","generateProFixtures","userId","email","password","PRO_PASSWORD","UserService","object","roles","ROLES","userId2","userId3","OrganisationService","name","type","address1","zipCode","city","userLinks","_id","insertPromotion","PRO_EMAIL","PromotionService","promotion","PROMOTION_TYPES","createPromotionDemo","removeAllPromotions","promotionId","addProUsersToPromotion","PRO_EMAIL_2","PRO_EMAIL_3","promotions","setInvitedBy","invitedBy","fields","loans","LoanService","loanId","setUserPermissions","permissions","setPromotionStatus","status","resetUserPermissions","canSellLots","canModifyLots","canRemoveLots","canModifyPromotion","canManageDocuments","canBookLots","canInviteCustomers","canAddLots","displayCustomerNames","editOrganisation","organisation","ORG_NAME","$set","updateAllLoans","loan","getAppEndToEndTestData","admin","$in","solvencyLoan","STEPS","SOLVENCY","requestLoan","REQUEST","unownedLoan","owned","adminLoginToken","createLoginToken","emailVerificationToken","createEmailVerificationToken","options","USER_PASSWORD","user","services","passwordResetToken","inviteTestUser","withPassword","firstName","lastName","sendEnrollmentEmail","loginToken","removeTestUser","updateLoan","getLoginToken","addProProperty","role","PRO","propertyId","property","value","addUserProperty","serverLog","log","check","console","isLoggedIn","generateFixtures","createFakeInterestRates","number","addProUser","getLoan","getUser","getAdminEndToEndTestData","borrowers","Users","properties","borrower"],"mappings":"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","sourcesContent":["// For security reasons, this is the ONLY\n// file where server code related to end to end tests should be added\n\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport UserService from 'core/api/users/server/UserService';\nimport PromotionService from 'core/api/promotions/server/PromotionService';\nimport {\n  ROLES,\n  PROMOTION_TYPES,\n  LOAN_QUERIES,\n  STEPS,\n} from 'core/api/constants';\nimport { createPromotionDemo } from 'core/fixtures/promotionDemo/promotionDemoFixtures';\nimport OrganisationService from 'imports/core/api/organisations/server/OrganisationService';\nimport LoanService from 'imports/core/api/loans/server/LoanService';\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport { check } from 'meteor/check';\nimport Loans from 'core/api/loans/loans';\nimport { loanBase } from 'core/api/fragments';\nimport Users from 'core/api/users/users';\nimport {\n  createLoginToken,\n  createEmailVerificationToken,\n} from 'core/utils/testHelpers/index';\nimport { createFakeInterestRates } from 'core/fixtures/interestRatesFixtures';\nimport { adminLoans as adminLoansQuery } from 'core/api/loans/queries';\nimport { E2E_USER_EMAIL } from '../../fixtures/fixtureConstants';\nimport {\n  PRO_EMAIL,\n  PRO_EMAIL_2,\n  PRO_EMAIL_3,\n  PRO_PASSWORD,\n  ORG_NAME,\n  USER_EMAIL,\n  USER_PASSWORD,\n} from './e2eConstants';\n\n// remove login rate limits in E2E tests\nAccounts.removeDefaultRateLimit();\n\nconst userLoansE2E = Loans.createQuery(LOAN_QUERIES.USER_LOANS_E2E, {\n  $filter({ filters, params: { userId, unowned, step } }) {\n    filters.userId = userId;\n\n    if (unowned) {\n      filters.userId = { $exists: false };\n    }\n\n    if (step) {\n      filters.step = step;\n    }\n  },\n  ...loanBase(),\n  $options: { sort: { createdAt: -1 } },\n});\n\nMeteor.methods({\n  generateProFixtures() {\n    const userId = Accounts.createUser({\n      email: PRO_EMAIL,\n      password: PRO_PASSWORD,\n    });\n    UserService.update({ userId, object: { roles: [ROLES.PRO] } });\n    const userId2 = Accounts.createUser({\n      email: PRO_EMAIL_2,\n      password: PRO_PASSWORD,\n    });\n    UserService.update({ userId: userId2, object: { roles: [ROLES.PRO] } });\n    const userId3 = Accounts.createUser({\n      email: PRO_EMAIL_3,\n      password: PRO_PASSWORD,\n    });\n    UserService.update({ userId: userId3, object: { roles: [ROLES.PRO] } });\n    OrganisationService.insert({\n      name: ORG_NAME,\n      type: 'DEVELOPER',\n      address1: 'Rue du pré 1',\n      zipCode: 1201,\n      city: 'Genève',\n      userLinks: [{ _id: userId }, { _id: userId2 }],\n    });\n    OrganisationService.insert({\n      name: 'Organisation 2',\n      type: 'DEVELOPER',\n      address1: 'Rue du pré 1',\n      zipCode: 1201,\n      city: 'Genève',\n      userLinks: [{ _id: userId3 }],\n    });\n  },\n  insertPromotion() {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    PromotionService.insert({\n      userId,\n      promotion: {\n        name: 'Test promotion',\n        type: PROMOTION_TYPES.CREDIT,\n        address1: 'Rue du four 1',\n        zipCode: '1400',\n        city: 'Yverdon-les-Bains',\n      },\n    });\n  },\n  async insertFullPromotion() {\n    await createPromotionDemo(this.userId, false, false, 10);\n  },\n  removeAllPromotions() {\n    PromotionService.remove({ promotionId: {} });\n  },\n  addProUsersToPromotion() {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    const { _id: userId2 } = UserService.findOne({\n      'emails.address': PRO_EMAIL_2,\n    });\n    const { _id: userId3 } = UserService.findOne({\n      'emails.address': PRO_EMAIL_3,\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId,\n    }) || [];\n\n    promotions.forEach(({ _id: promotionId }) => {\n      PromotionService.addProUser({ promotionId, userId: userId2 });\n      PromotionService.addProUser({ promotionId, userId: userId3 });\n    });\n  },\n  setInvitedBy({ email }) {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    const { _id: invitedBy } = UserService.findOne({ 'emails.address': email });\n    const promotions = PromotionService.find(\n      { 'userLinks._id': userId },\n      { fields: { _id: 1 } },\n    ).fetch() || [];\n\n    promotions.forEach(({ _id: promotionId }) => {\n      const loans = LoanService.find({}).fetch() || [];\n      loans.forEach(({ _id: loanId }) => {\n        LoanService.updatePromotionInvitedBy({\n          loanId,\n          promotionId,\n          invitedBy,\n        });\n      });\n    });\n  },\n  setUserPermissions({ permissions }) {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    const promotions = PromotionService.find(\n      { 'userLinks._id': userId },\n      { fields: { _id: 1 } },\n    ).fetch() || [];\n\n    promotions.forEach(({ _id: promotionId }) =>\n      PromotionService.setUserPermissions({ promotionId, userId, permissions }));\n  },\n  setPromotionStatus({ status }) {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId,\n    }) || [];\n\n    promotions.forEach(({ _id: promotionId }) =>\n      PromotionService.update({ promotionId, object: { status } }));\n  },\n  resetUserPermissions() {\n    const { _id: userId } = UserService.findOne({\n      'emails.address': PRO_EMAIL,\n    });\n    const promotions = PromotionService.find({\n      'userLinks._id': userId,\n    }).fetch() || [];\n\n    const permissions = {\n      canSellLots: false,\n      canModifyLots: false,\n      canRemoveLots: false,\n      canModifyPromotion: false,\n      canManageDocuments: false,\n      canBookLots: false,\n      canInviteCustomers: false,\n      canAddLots: false,\n      displayCustomerNames: false,\n    };\n\n    promotions.forEach(({ _id: promotionId }) =>\n      PromotionService.setUserPermissions({ promotionId, userId, permissions }));\n  },\n  editOrganisation({ ...organisation }) {\n    OrganisationService.baseUpdate({ name: ORG_NAME }, { $set: organisation });\n  },\n  updateAllLoans(loan) {\n    LoanService.baseUpdate({}, { $set: loan });\n  },\n\n  getAppEndToEndTestData() {\n    const { _id: userId } = UserService.getByEmail(E2E_USER_EMAIL);\n\n    const admin = Users.findOne(\n      { roles: { $in: [ROLES.ADMIN] } },\n      { fields: { _id: 1 } },\n    );\n\n    const solvencyLoan = userLoansE2E\n      .clone({ userId, step: STEPS.SOLVENCY })\n      .fetchOne();\n\n    const requestLoan = userLoansE2E\n      .clone({ userId, step: STEPS.REQUEST })\n      .fetchOne();\n\n    const unownedLoan = userLoansE2E.clone({ owned: false }).fetchOne();\n\n    const adminLoginToken = createLoginToken(admin._id);\n    const emailVerificationToken = createEmailVerificationToken(\n      userId,\n      E2E_USER_EMAIL,\n    );\n\n    const userId2 = UserService.createUser({\n      options: { email: USER_EMAIL, password: USER_PASSWORD },\n    });\n\n    try {\n      // Wrap due to meteor toys issue\n      // https://github.com/MeteorToys/meteor-devtools/issues/111\n      Accounts.sendResetPasswordEmail(userId2);\n    } catch (error) {}\n\n    const user = UserService.findOne(userId2, { fields: { services: 1 } });\n\n    const passwordResetToken = user.services.password.reset.token;\n\n    return {\n      solvencyLoan,\n      requestLoan,\n      unownedLoan,\n      adminLoginToken,\n      emailVerificationToken,\n      userId,\n      passwordResetToken,\n    };\n  },\n  inviteTestUser({ withPassword } = {}) {\n    const userId = UserService.adminCreateUser({\n      options: {\n        email: USER_EMAIL,\n        firstName: 'Test',\n        lastName: 'User',\n        sendEnrollmentEmail: true,\n        password: withPassword && USER_PASSWORD,\n      },\n    });\n    LoanService.fullLoanInsert({ userId });\n\n    const loginToken = UserService.getLoginToken({ userId });\n    return loginToken;\n  },\n  removeTestUser(email) {\n    const user = UserService.getByEmail(email);\n    if (user) {\n      UserService.remove({ userId: user._id });\n    }\n  },\n  updateLoan({ loanId, object }) {\n    LoanService.update({ loanId, object });\n  },\n  getLoginToken() {\n    const user = UserService.findOne({});\n    const loginToken = UserService.getLoginToken({ userId: user._id });\n    return loginToken;\n  },\n  addProProperty() {\n    const userId = UserService.adminCreateUser({\n      options: {\n        email: PRO_EMAIL,\n        firstName: 'Pro',\n        lastName: 'Test User',\n      },\n      role: ROLES.PRO,\n    });\n    const propertyId = PropertyService.proPropertyInsert({\n      property: {\n        address1: 'Chemin Auguste-Vilbert 14',\n        zipCode: 1218,\n        city: 'Le Grand-Saconnex',\n        value: 1500000,\n      },\n      userId,\n    });\n\n    return propertyId;\n  },\n  addUserProperty() {\n    return PropertyService.insert({\n      property: {\n        address1: 'Chemin Auguste-Vilbert 14',\n        zipCode: 1218,\n        city: 'Le Grand-Saconnex',\n        value: 1500000,\n      },\n    });\n  },\n  serverLog: (log) => {\n    check(log, String);\n    if (Meteor.isServer) {\n      console.log('Cypress logging from server: ', log);\n    }\n  },\n  isLoggedIn() {\n    return this.userId;\n  },\n  resetDatabase,\n  generateFixtures() {\n    createFakeInterestRates({ number: 10 });\n  },\n  addProUser() {\n    const { _id: userId } = UserService.getByEmail(PRO_EMAIL) || {};\n    return (\n      userId\n      || UserService.adminCreateUser({\n        options: {\n          email: PRO_EMAIL,\n          firstName: 'Pro',\n          lastName: 'Test User',\n        },\n        role: ROLES.PRO,\n      })\n    );\n  },\n  getLoan(loanId) {\n    return LoanService.get(loanId);\n  },\n  getUser(email) {\n    return UserService.getByEmail(email);\n  },\n  getAdminEndToEndTestData() {\n    const loan = adminLoansQuery.clone({ owned: true }).fetchOne();\n\n    const {\n      properties,\n      borrowers: [borrower],\n    } = loan;\n\n    const user = Users.findOne(loan.userId);\n\n    return { loan, user, property: properties[0], borrower };\n  },\n});\n"]},"sourceType":"script","hash":"427275781f781526a567ffdb4059ae9966b3ca61"}

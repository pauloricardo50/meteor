{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:mocha/server.handleCoverage.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/meteortesting:mocha/server.handleCoverage.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:mocha/server.handleCoverage.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:mocha/server.handleCoverage.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/meteortesting:mocha/server.handleCoverage.js"}},"code":"let HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 0);\nmodule.exportDefault(coverageOptions => {\n  let promise = Promise.resolve(true);\n\n  if (coverageOptions) {\n    const cLog = (...args) => {\n      if (coverageOptions.verbose) {\n        console.log(...args);\n      }\n    };\n\n    cLog('Export code coverage');\n\n    const importCoverageDump = () => new Promise((resolve, reject) => {\n      cLog('- In coverage');\n      HTTP.get(Meteor.absoluteUrl('coverage/import'), (error, response) => {\n        if (error) {\n          reject(new Error('Failed to import coverage file'));\n          return;\n        }\n\n        const {\n          statusCode\n        } = response;\n\n        if (statusCode !== 200) {\n          reject(new Error('Failed to import coverage file'));\n        }\n\n        resolve();\n      });\n    });\n\n    const exportReport = (fileType, reportType) => new Promise((resolve, reject) => {\n      cLog(`- Out ${fileType}`);\n      const url = Meteor.absoluteUrl(`/coverage/export/${fileType}`);\n      HTTP.get(url, (error, response) => {\n        if (error) {\n          reject(new Error(`Failed to save ${fileType} ${reportType}`));\n          return;\n        }\n\n        const {\n          statusCode\n        } = response;\n\n        if (statusCode !== 200) {\n          reject(new Error(`Failed to save ${fileType} ${reportType}`));\n        }\n\n        resolve();\n      });\n    });\n\n    const exportRemap = () => new Promise((resolve, reject) => {\n      cLog('- Out remap');\n      HTTP.get(Meteor.absoluteUrl('/coverage/export/remap'), (error, response) => {\n        if (error) {\n          reject(new Error('Failed to remap your coverage'));\n          return;\n        }\n\n        const {\n          statusCode\n        } = response;\n\n        if (statusCode !== 200) {\n          reject(new Error('Failed to remap your coverage'));\n        }\n\n        resolve();\n      });\n    });\n\n    if (coverageOptions.in.coverage) {\n      promise = promise.then(() => importCoverageDump());\n    }\n\n    if (coverageOptions.out.coverage) {\n      promise = promise.then(() => exportReport('coverage', 'dump'));\n    }\n\n    if (coverageOptions.out.lcovonly) {\n      promise = promise.then(() => exportReport('lcovonly', 'coverage'));\n    }\n\n    if (coverageOptions.out.html) {\n      promise = promise.then(() => exportReport('html', 'report'));\n    }\n\n    if (coverageOptions.out.json) {\n      promise = promise.then(() => exportReport('json', 'report'));\n    }\n\n    if (coverageOptions.out.text_summary) {\n      promise = promise.then(() => exportReport('text-summary', 'report'));\n    }\n\n    if (coverageOptions.out.remap) {\n      promise = promise.then(() => exportRemap());\n    }\n\n    if (coverageOptions.out.json_summary) {\n      promise = promise.then(() => exportReport('json-summary', 'dump'));\n    }\n\n    promise = promise.catch(console.error);\n  }\n\n  return promise;\n});","map":{"version":3,"sources":["packages/meteortesting:mocha/server.handleCoverage.js"],"names":["HTTP","module","link","v","exportDefault","coverageOptions","promise","Promise","resolve","cLog","args","verbose","console","log","importCoverageDump","reject","get","Meteor","absoluteUrl","error","response","Error","statusCode","exportReport","fileType","reportType","url","exportRemap","in","coverage","then","out","lcovonly","html","json","text_summary","remap","json_summary","catch"],"mappings":"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","sourcesContent":["import { HTTP } from 'meteor/http';\n\nexport default (coverageOptions) => {\n  let promise = Promise.resolve(true);\n\n  if (coverageOptions) {\n    const cLog = (...args) => {\n      if (coverageOptions.verbose) {\n        console.log(...args);\n      }\n    };\n\n    cLog('Export code coverage');\n\n    const importCoverageDump = () => new Promise((resolve, reject) => {\n      cLog('- In coverage');\n      HTTP.get(Meteor.absoluteUrl('coverage/import'), (error, response) => {\n        if (error) {\n          reject(new Error('Failed to import coverage file'));\n          return;\n        }\n\n        const { statusCode } = response;\n\n        if (statusCode !== 200) {\n          reject(new Error('Failed to import coverage file'));\n        }\n        resolve();\n      });\n    });\n\n    const exportReport = (fileType, reportType) => new Promise((resolve, reject) => {\n      cLog(`- Out ${fileType}`);\n      const url = Meteor.absoluteUrl(`/coverage/export/${fileType}`);\n      HTTP.get(url, (error, response) => {\n        if (error) {\n          reject(new Error(`Failed to save ${fileType} ${reportType}`));\n          return;\n        }\n\n        const { statusCode } = response;\n\n        if (statusCode !== 200) {\n          reject(new Error(`Failed to save ${fileType} ${reportType}`));\n        }\n        resolve();\n      });\n    });\n\n    const exportRemap = () => new Promise((resolve, reject) => {\n      cLog('- Out remap');\n      HTTP.get(Meteor.absoluteUrl('/coverage/export/remap'), (error, response) => {\n        if (error) {\n          reject(new Error('Failed to remap your coverage'));\n          return;\n        }\n\n        const { statusCode } = response;\n\n        if (statusCode !== 200) {\n          reject(new Error('Failed to remap your coverage'));\n        }\n        resolve();\n      });\n    });\n\n    if (coverageOptions.in.coverage) {\n      promise = promise.then(() => importCoverageDump());\n    }\n\n    if (coverageOptions.out.coverage) {\n      promise = promise.then(() => exportReport('coverage', 'dump'));\n    }\n\n    if (coverageOptions.out.lcovonly) {\n      promise = promise.then(() => exportReport('lcovonly', 'coverage'));\n    }\n\n    if (coverageOptions.out.html) {\n      promise = promise.then(() => exportReport('html', 'report'));\n    }\n\n    if (coverageOptions.out.json) {\n      promise = promise.then(() => exportReport('json', 'report'));\n    }\n\n    if (coverageOptions.out.text_summary) {\n      promise = promise.then(() => exportReport('text-summary', 'report'));\n    }\n\n    if (coverageOptions.out.remap) {\n      promise = promise.then(() => exportRemap());\n    }\n\n    if (coverageOptions.out.json_summary) {\n      promise = promise.then(() => exportReport('json-summary', 'dump'));\n    }\n\n    promise = promise.catch(console.error);\n  }\n\n  return promise;\n};\n"]},"sourceType":"script","hash":"ea76f381d64af4767468caa5f9b4c4cb28610407"}

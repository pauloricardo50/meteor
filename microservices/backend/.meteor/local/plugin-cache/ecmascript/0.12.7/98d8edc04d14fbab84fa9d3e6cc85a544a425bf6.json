{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/users/server/methods.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/methods.js","inputSourceMap":{"version":3,"sources":["imports/core/api/users/server/methods.js"],"names":["Meteor","Analytics","EVENTS","SecurityService","doesUserExist","sendVerificationLink","assignAdminToUser","assignAdminToNewUser","setRole","adminCreateUser","updateUser","getUserByPasswordResetToken","testCreateUser","removeUser","sendEnrollmentEmail","changeEmail","userUpdateOrganisations","testUserAccount","generateApiKeyPair","proInviteUser","getUserByEmail","setUserReferredBy","setUserReferredByOrganisation","proInviteUserToOrganisation","proSetShareCustomers","anonymousCreateUser","referralExists","UserService","PropertyService","ROLES","setHandler","context","email","userId","checkCurrentUserIsAdmin","checkLoggedIn","id","isDevelopment","console","log","sendVerificationEmail","adminId","params","options","role","users","isAllowedToInsertByRole","object","isAllowedToUpdate","roles","handleUnauthorized","update","isTest","Error","checkCurrentUserIsDev","remove","newOrganisations","updateOrganisations","checkUserIsPro","generateKeyPair","propertyIds","promotionIds","properties","length","forEach","propertyId","isAllowedToInviteCustomers","promotionId","promotions","externalId","existingProperty","fetchOne","$filters","_id","isProUser","hasRole","PRO","proUserId","undefined","user","getByEmail","$and","$in","name","organisations","setReferredBy","setReferredByOrganisation","organisationId","isAllowedToInviteUsersToOrganisation","currentUserIsAdmin","proId","loanId","loans","checkAnonymousLoan","analytics","identify","trackingId","track","USER_CREATED","origin","referralId","LOAN_ANONYMOUS_LOAN_CLAIMED","ref","referral"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport Analytics from 'core/api/analytics/server/Analytics';\nimport EVENTS from 'core/api/analytics/events';\nimport SecurityService from '../../security';\nimport {\n  doesUserExist,\n  sendVerificationLink,\n  assignAdminToUser,\n  assignAdminToNewUser,\n  setRole,\n  adminCreateUser,\n  updateUser,\n  getUserByPasswordResetToken,\n  testCreateUser,\n  removeUser,\n  sendEnrollmentEmail,\n  changeEmail,\n  userUpdateOrganisations,\n  testUserAccount,\n  generateApiKeyPair,\n  proInviteUser,\n  getUserByEmail,\n  setUserReferredBy,\n  setUserReferredByOrganisation,\n  proInviteUserToOrganisation,\n  proSetShareCustomers,\n  anonymousCreateUser,\n  referralExists,\n} from '../methodDefinitions';\nimport UserService from './UserService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport { ROLES } from '../userConstants';\n\ndoesUserExist.setHandler((context, { email }) =>\n  UserService.doesUserExist({ email }));\n\nsendVerificationLink.setHandler((context, { userId } = {}) => {\n  if (userId) {\n    SecurityService.checkCurrentUserIsAdmin();\n  } else {\n    SecurityService.checkLoggedIn();\n  }\n  const id = userId || Meteor.userId();\n\n  if (Meteor.isDevelopment) {\n    console.log(`Not sending verification link in development for userId: ${id}`);\n    return false;\n  }\n\n  return UserService.sendVerificationEmail({ userId: id });\n});\n\nassignAdminToUser.setHandler((context, { userId, adminId }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n\n  return UserService.assignAdminToUser({ userId, adminId });\n});\n\nassignAdminToNewUser.setHandler((context, { userId, adminId }) => {\n  // same action as assignAdminToUser, but with a dedicated\n  // listener that would complete & reassign the user's tasks\n  SecurityService.checkCurrentUserIsAdmin();\n\n  return UserService.assignAdminToUser({ userId, adminId });\n});\n\nsetRole.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setRole(params);\n});\n\nadminCreateUser.setHandler((context, { options, role }) => {\n  SecurityService.users.isAllowedToInsertByRole({ role });\n  return UserService.adminCreateUser({\n    options,\n    role,\n    adminId: context.userId,\n  });\n});\n\nupdateUser.setHandler((context, { userId, object }) => {\n  SecurityService.users.isAllowedToUpdate(userId, context.userId);\n\n  if (object.roles) {\n    SecurityService.handleUnauthorized('Vous ne pouvez pas changer le rôle');\n  }\n\n  return UserService.update({ userId, object });\n});\n\ngetUserByPasswordResetToken.setHandler((context, params) =>\n  UserService.getUserByPasswordResetToken(params));\n\ntestCreateUser.setHandler((context, params) => {\n  if (!Meteor.isTest) {\n    throw new Meteor.Error('Test only');\n  }\n  return UserService.testCreateUser(params);\n});\n\nremoveUser.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsDev();\n  UserService.remove(params);\n});\n\nsendEnrollmentEmail.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.sendEnrollmentEmail(params);\n});\n\nchangeEmail.setHandler(({ userId }, params) => {\n  SecurityService.users.isAllowedToUpdate(userId, params.userId);\n  return UserService.changeEmail(params);\n});\n\nuserUpdateOrganisations.setHandler((context, { userId, newOrganisations }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.updateOrganisations({ userId, newOrganisations });\n});\n\ntestUserAccount.setHandler((context, params) => {\n  if (Meteor.isTest) {\n    return UserService.testUserAccount(params);\n  }\n});\n\ngenerateApiKeyPair.setHandler((context, params) => {\n  SecurityService.checkUserIsPro(context.userId);\n  return UserService.generateKeyPair(params);\n});\n\nproInviteUser.setHandler((context, params) => {\n  const { userId } = context;\n  const { propertyIds, promotionIds, properties } = params;\n  SecurityService.checkUserIsPro(userId);\n\n  if (propertyIds && propertyIds.length) {\n    propertyIds.forEach(propertyId =>\n      SecurityService.properties.isAllowedToInviteCustomers({\n        userId,\n        propertyId,\n      }));\n  }\n\n  if (promotionIds && promotionIds.length) {\n    promotionIds.forEach(promotionId =>\n      SecurityService.promotions.isAllowedToInviteCustomers({\n        promotionId,\n        userId,\n      }));\n  }\n\n  if (properties && properties.length) {\n    properties.forEach(({ externalId }) => {\n      const existingProperty = PropertyService.fetchOne({\n        $filters: { externalId },\n      });\n      if (existingProperty) {\n        SecurityService.properties.isAllowedToInviteCustomers({\n          userId,\n          propertyId: existingProperty._id,\n        });\n      }\n    });\n  }\n\n  // Only pass proUserId if this is a pro user\n  const isProUser = SecurityService.hasRole(userId, ROLES.PRO);\n\n  return UserService.proInviteUser({\n    ...params,\n    proUserId: isProUser ? userId : undefined,\n    adminId: !isProUser ? userId : undefined,\n  });\n});\n\ngetUserByEmail.setHandler(({ userId }, { email }) => {\n  SecurityService.checkUserIsPro(userId);\n  const user = UserService.getByEmail(email);\n\n  if (user) {\n    return UserService.fetchOne({\n      $filters: { $and: [{ _id: user._id }, { roles: { $in: [ROLES.PRO] } }] },\n      name: 1,\n      organisations: { name: 1 },\n    });\n  }\n});\n\nsetUserReferredBy.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setReferredBy(params);\n});\n\nsetUserReferredByOrganisation.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setReferredByOrganisation(params);\n});\n\nproInviteUserToOrganisation.setHandler(({ userId }, params) => {\n  const { organisationId } = params;\n  SecurityService.checkUserIsPro(userId);\n  SecurityService.users.isAllowedToInviteUsersToOrganisation({\n    userId,\n    organisationId,\n  });\n\n  if (SecurityService.currentUserIsAdmin()) {\n    params.adminId = userId;\n  } else {\n    params.proId = userId;\n  }\n\n  return UserService.proInviteUserToOrganisation(params);\n});\n\nproSetShareCustomers.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsPro(userId);\n  return UserService.proSetShareCustomers(params);\n});\n\nanonymousCreateUser.setHandler((context, params) => {\n  if (params.loanId) {\n    SecurityService.loans.checkAnonymousLoan(params.loanId);\n  }\n\n  const userId = UserService.anonymousCreateUser(params);\n\n  const analytics = new Analytics({ ...context, userId });\n  analytics.identify(params.trackingId);\n  analytics.track(EVENTS.USER_CREATED, {\n    userId,\n    origin: params.referralId ? 'referral' : 'organic',\n    referralId: params.referralId,\n  });\n  if (params.loanId) {\n    analytics.track(EVENTS.LOAN_ANONYMOUS_LOAN_CLAIMED, {\n      loanId: params.loanId,\n    });\n  }\n\n  return userId;\n});\n\nreferralExists.setHandler((context, params) => {\n  const { ref } = params;\n  const referral = UserService.fetchOne({\n    $filters: { _id: ref, roles: { $in: [ROLES.PRO] } },\n  });\n\n  return !!referral;\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/users/server/methods.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Analytics;\nmodule.link(\"../../analytics/server/Analytics\", {\n  default(v) {\n    Analytics = v;\n  }\n\n}, 1);\nlet EVENTS;\nmodule.link(\"../../analytics/events\", {\n  default(v) {\n    EVENTS = v;\n  }\n\n}, 2);\nlet SecurityService;\nmodule.link(\"../../security\", {\n  default(v) {\n    SecurityService = v;\n  }\n\n}, 3);\nlet doesUserExist, sendVerificationLink, assignAdminToUser, assignAdminToNewUser, setRole, adminCreateUser, updateUser, getUserByPasswordResetToken, testCreateUser, removeUser, sendEnrollmentEmail, changeEmail, userUpdateOrganisations, testUserAccount, generateApiKeyPair, proInviteUser, getUserByEmail, setUserReferredBy, setUserReferredByOrganisation, proInviteUserToOrganisation, proSetShareCustomers, anonymousCreateUser, referralExists;\nmodule.link(\"../methodDefinitions\", {\n  doesUserExist(v) {\n    doesUserExist = v;\n  },\n\n  sendVerificationLink(v) {\n    sendVerificationLink = v;\n  },\n\n  assignAdminToUser(v) {\n    assignAdminToUser = v;\n  },\n\n  assignAdminToNewUser(v) {\n    assignAdminToNewUser = v;\n  },\n\n  setRole(v) {\n    setRole = v;\n  },\n\n  adminCreateUser(v) {\n    adminCreateUser = v;\n  },\n\n  updateUser(v) {\n    updateUser = v;\n  },\n\n  getUserByPasswordResetToken(v) {\n    getUserByPasswordResetToken = v;\n  },\n\n  testCreateUser(v) {\n    testCreateUser = v;\n  },\n\n  removeUser(v) {\n    removeUser = v;\n  },\n\n  sendEnrollmentEmail(v) {\n    sendEnrollmentEmail = v;\n  },\n\n  changeEmail(v) {\n    changeEmail = v;\n  },\n\n  userUpdateOrganisations(v) {\n    userUpdateOrganisations = v;\n  },\n\n  testUserAccount(v) {\n    testUserAccount = v;\n  },\n\n  generateApiKeyPair(v) {\n    generateApiKeyPair = v;\n  },\n\n  proInviteUser(v) {\n    proInviteUser = v;\n  },\n\n  getUserByEmail(v) {\n    getUserByEmail = v;\n  },\n\n  setUserReferredBy(v) {\n    setUserReferredBy = v;\n  },\n\n  setUserReferredByOrganisation(v) {\n    setUserReferredByOrganisation = v;\n  },\n\n  proInviteUserToOrganisation(v) {\n    proInviteUserToOrganisation = v;\n  },\n\n  proSetShareCustomers(v) {\n    proSetShareCustomers = v;\n  },\n\n  anonymousCreateUser(v) {\n    anonymousCreateUser = v;\n  },\n\n  referralExists(v) {\n    referralExists = v;\n  }\n\n}, 4);\nlet UserService;\nmodule.link(\"./UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 5);\nlet PropertyService;\nmodule.link(\"../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 6);\nlet ROLES;\nmodule.link(\"../userConstants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 7);\ndoesUserExist.setHandler((context, {\n  email\n}) => UserService.doesUserExist({\n  email\n}));\nsendVerificationLink.setHandler((context, {\n  userId\n} = {}) => {\n  if (userId) {\n    SecurityService.checkCurrentUserIsAdmin();\n  } else {\n    SecurityService.checkLoggedIn();\n  }\n\n  const id = userId || Meteor.userId();\n\n  if (Meteor.isDevelopment) {\n    console.log(`Not sending verification link in development for userId: ${id}`);\n    return false;\n  }\n\n  return UserService.sendVerificationEmail({\n    userId: id\n  });\n});\nassignAdminToUser.setHandler((context, {\n  userId,\n  adminId\n}) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.assignAdminToUser({\n    userId,\n    adminId\n  });\n});\nassignAdminToNewUser.setHandler((context, {\n  userId,\n  adminId\n}) => {\n  // same action as assignAdminToUser, but with a dedicated\n  // listener that would complete & reassign the user's tasks\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.assignAdminToUser({\n    userId,\n    adminId\n  });\n});\nsetRole.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setRole(params);\n});\nadminCreateUser.setHandler((context, {\n  options,\n  role\n}) => {\n  SecurityService.users.isAllowedToInsertByRole({\n    role\n  });\n  return UserService.adminCreateUser({\n    options,\n    role,\n    adminId: context.userId\n  });\n});\nupdateUser.setHandler((context, {\n  userId,\n  object\n}) => {\n  SecurityService.users.isAllowedToUpdate(userId, context.userId);\n\n  if (object.roles) {\n    SecurityService.handleUnauthorized('Vous ne pouvez pas changer le rôle');\n  }\n\n  return UserService.update({\n    userId,\n    object\n  });\n});\ngetUserByPasswordResetToken.setHandler((context, params) => UserService.getUserByPasswordResetToken(params));\ntestCreateUser.setHandler((context, params) => {\n  if (!Meteor.isTest) {\n    throw new Meteor.Error('Test only');\n  }\n\n  return UserService.testCreateUser(params);\n});\nremoveUser.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsDev();\n  UserService.remove(params);\n});\nsendEnrollmentEmail.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.sendEnrollmentEmail(params);\n});\nchangeEmail.setHandler(({\n  userId\n}, params) => {\n  SecurityService.users.isAllowedToUpdate(userId, params.userId);\n  return UserService.changeEmail(params);\n});\nuserUpdateOrganisations.setHandler((context, {\n  userId,\n  newOrganisations\n}) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.updateOrganisations({\n    userId,\n    newOrganisations\n  });\n});\ntestUserAccount.setHandler((context, params) => {\n  if (Meteor.isTest) {\n    return UserService.testUserAccount(params);\n  }\n});\ngenerateApiKeyPair.setHandler((context, params) => {\n  SecurityService.checkUserIsPro(context.userId);\n  return UserService.generateKeyPair(params);\n});\nproInviteUser.setHandler((context, params) => {\n  const {\n    userId\n  } = context;\n  const {\n    propertyIds,\n    promotionIds,\n    properties\n  } = params;\n  SecurityService.checkUserIsPro(userId);\n\n  if (propertyIds && propertyIds.length) {\n    propertyIds.forEach(propertyId => SecurityService.properties.isAllowedToInviteCustomers({\n      userId,\n      propertyId\n    }));\n  }\n\n  if (promotionIds && promotionIds.length) {\n    promotionIds.forEach(promotionId => SecurityService.promotions.isAllowedToInviteCustomers({\n      promotionId,\n      userId\n    }));\n  }\n\n  if (properties && properties.length) {\n    properties.forEach(({\n      externalId\n    }) => {\n      const existingProperty = PropertyService.fetchOne({\n        $filters: {\n          externalId\n        }\n      });\n\n      if (existingProperty) {\n        SecurityService.properties.isAllowedToInviteCustomers({\n          userId,\n          propertyId: existingProperty._id\n        });\n      }\n    });\n  } // Only pass proUserId if this is a pro user\n\n\n  const isProUser = SecurityService.hasRole(userId, ROLES.PRO);\n  return UserService.proInviteUser((0, _objectSpread2.default)({}, params, {\n    proUserId: isProUser ? userId : undefined,\n    adminId: !isProUser ? userId : undefined\n  }));\n});\ngetUserByEmail.setHandler(({\n  userId\n}, {\n  email\n}) => {\n  SecurityService.checkUserIsPro(userId);\n  const user = UserService.getByEmail(email);\n\n  if (user) {\n    return UserService.fetchOne({\n      $filters: {\n        $and: [{\n          _id: user._id\n        }, {\n          roles: {\n            $in: [ROLES.PRO]\n          }\n        }]\n      },\n      name: 1,\n      organisations: {\n        name: 1\n      }\n    });\n  }\n});\nsetUserReferredBy.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setReferredBy(params);\n});\nsetUserReferredByOrganisation.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setReferredByOrganisation(params);\n});\nproInviteUserToOrganisation.setHandler(({\n  userId\n}, params) => {\n  const {\n    organisationId\n  } = params;\n  SecurityService.checkUserIsPro(userId);\n  SecurityService.users.isAllowedToInviteUsersToOrganisation({\n    userId,\n    organisationId\n  });\n\n  if (SecurityService.currentUserIsAdmin()) {\n    params.adminId = userId;\n  } else {\n    params.proId = userId;\n  }\n\n  return UserService.proInviteUserToOrganisation(params);\n});\nproSetShareCustomers.setHandler(({\n  userId\n}, params) => {\n  SecurityService.checkUserIsPro(userId);\n  return UserService.proSetShareCustomers(params);\n});\nanonymousCreateUser.setHandler((context, params) => {\n  if (params.loanId) {\n    SecurityService.loans.checkAnonymousLoan(params.loanId);\n  }\n\n  const userId = UserService.anonymousCreateUser(params);\n  const analytics = new Analytics((0, _objectSpread2.default)({}, context, {\n    userId\n  }));\n  analytics.identify(params.trackingId);\n  analytics.track(EVENTS.USER_CREATED, {\n    userId,\n    origin: params.referralId ? 'referral' : 'organic',\n    referralId: params.referralId\n  });\n\n  if (params.loanId) {\n    analytics.track(EVENTS.LOAN_ANONYMOUS_LOAN_CLAIMED, {\n      loanId: params.loanId\n    });\n  }\n\n  return userId;\n});\nreferralExists.setHandler((context, params) => {\n  const {\n    ref\n  } = params;\n  const referral = UserService.fetchOne({\n    $filters: {\n      _id: ref,\n      roles: {\n        $in: [ROLES.PRO]\n      }\n    }\n  });\n  return !!referral;\n});","map":{"version":3,"sources":["imports/core/api/users/server/methods.js"],"names":["doesUserExist","email","sendVerificationLink","userId","SecurityService","id","Meteor","console","assignAdminToUser","adminId","assignAdminToNewUser","setRole","UserService","adminCreateUser","role","context","updateUser","object","getUserByPasswordResetToken","testCreateUser","removeUser","sendEnrollmentEmail","changeEmail","params","userUpdateOrganisations","newOrganisations","testUserAccount","generateApiKeyPair","proInviteUser","properties","propertyIds","propertyId","promotionIds","promotionId","externalId","existingProperty","$filters","_id","isProUser","ROLES","proUserId","undefined","getUserByEmail","user","$and","roles","$in","name","organisations","setUserReferredBy","setUserReferredByOrganisation","proInviteUserToOrganisation","organisationId","proSetShareCustomers","anonymousCreateUser","analytics","EVENTS","origin","referralId","loanId","referralExists","ref","referral"],"mappings":";;;;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kCAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,eAAA;AAAA,MAAA,CAAA,IAAA,CAAA,gBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,OAAA,EAAA,eAAA,EAAA,UAAA,EAAA,2BAAA,EAAA,cAAA,EAAA,UAAA,EAAA,mBAAA,EAAA,WAAA,EAAA,uBAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,6BAAA,EAAA,2BAAA,EAAA,oBAAA,EAAA,mBAAA,EAAA,cAAA;AAAA,MAAA,CAAA,IAAA,CAAA,sBAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,oBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,oBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,iBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,oBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,oBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,eAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,2BAAA,CAAA,CAAA,EAAA;AAAA,IAAA,2BAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,mBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,mBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,WAAA,CAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,uBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,uBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,eAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,kBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,kBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,iBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,6BAAA,CAAA,CAAA,EAAA;AAAA,IAAA,6BAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,2BAAA,CAAA,CAAA,EAAA;AAAA,IAAA,2BAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,oBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,oBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,mBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,mBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,WAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,eAAA;AAAA,MAAA,CAAA,IAAA,CAAA,yCAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kBAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAkCAA,aAAa,CAAbA,UAAAA,CAAyB,CAAA,OAAA,EAAU;AAAEC,EAAAA;AAAF,CAAV,KACvB,WAAW,CAAX,aAAA,CAA0B;AAAEA,EAAAA;AAAF,CAA1B,CADFD;AAGAE,oBAAoB,CAApBA,UAAAA,CAAgC,CAAA,OAAA,EAAU;AAAEC,EAAAA;AAAF,IAAV,EAAA,KAA8B;AAC5D,MAAA,MAAA,EAAY;AACVC,IAAAA,eAAe,CAAfA,uBAAAA;AADF,GAAA,MAEO;AACLA,IAAAA,eAAe,CAAfA,aAAAA;AACD;;AACD,QAAMC,EAAE,GAAGF,MAAM,IAAIG,MAAM,CAA3B,MAAqBA,EAArB;;AAEA,MAAIA,MAAM,CAAV,aAAA,EAA0B;AACxBC,IAAAA,OAAO,CAAPA,GAAAA,CAAa,4DAA2DF,EAAxEE,EAAAA;AACA,WAAA,KAAA;AACD;;AAED,SAAO,WAAW,CAAX,qBAAA,CAAkC;AAAEJ,IAAAA,MAAM,EAAEE;AAAV,GAAlC,CAAP;AAbFH,CAAAA;AAgBAM,iBAAiB,CAAjBA,UAAAA,CAA6B,CAAA,OAAA,EAAU;AAAA,EAAA,MAAA;AAAUC,EAAAA;AAAV,CAAV,KAAkC;AAC7DL,EAAAA,eAAe,CAAfA,uBAAAA;AAEA,SAAO,WAAW,CAAX,iBAAA,CAA8B;AAAA,IAAA,MAAA;AAAUK,IAAAA;AAAV,GAA9B,CAAP;AAHFD,CAAAA;AAMAE,oBAAoB,CAApBA,UAAAA,CAAgC,CAAA,OAAA,EAAU;AAAA,EAAA,MAAA;AAAUD,EAAAA;AAAV,CAAV,KAAkC;AAChE;AACA;AACAL,EAAAA,eAAe,CAAfA,uBAAAA;AAEA,SAAO,WAAW,CAAX,iBAAA,CAA8B;AAAA,IAAA,MAAA;AAAUK,IAAAA;AAAV,GAA9B,CAAP;AALFC,CAAAA;AAQAC,OAAO,CAAPA,UAAAA,CAAmB,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtCP,EAAAA,eAAe,CAAfA,uBAAAA;AACA,SAAOQ,WAAW,CAAXA,OAAAA,CAAP,MAAOA,CAAP;AAFFD,CAAAA;AAKAE,eAAe,CAAfA,UAAAA,CAA2B,CAAA,OAAA,EAAU;AAAA,EAAA,OAAA;AAAWC,EAAAA;AAAX,CAAV,KAAgC;AACzDV,EAAAA,eAAe,CAAfA,KAAAA,CAAAA,uBAAAA,CAA8C;AAAEU,IAAAA;AAAF,GAA9CV;AACA,SAAO,WAAW,CAAX,eAAA,CAA4B;AAAA,IAAA,OAAA;AAAA,IAAA,IAAA;AAGjCK,IAAAA,OAAO,EAAEM,OAAO,CAACZ;AAHgB,GAA5B,CAAP;AAFFU,CAAAA;AASAG,UAAU,CAAVA,UAAAA,CAAsB,CAAA,OAAA,EAAU;AAAA,EAAA,MAAA;AAAUC,EAAAA;AAAV,CAAV,KAAiC;AACrDb,EAAAA,eAAe,CAAfA,KAAAA,CAAAA,iBAAAA,CAAAA,MAAAA,EAAgDW,OAAO,CAAvDX,MAAAA;;AAEA,MAAIa,MAAM,CAAV,KAAA,EAAkB;AAChBb,IAAAA,eAAe,CAAfA,kBAAAA,CAAAA,oCAAAA;AACD;;AAED,SAAO,WAAW,CAAX,MAAA,CAAmB;AAAA,IAAA,MAAA;AAAUa,IAAAA;AAAV,GAAnB,CAAP;AAPFD,CAAAA;AAUAE,2BAA2B,CAA3BA,UAAAA,CAAuC,CAAA,OAAA,EAAA,MAAA,KACrCN,WAAW,CAAXA,2BAAAA,CADFM,MACEN,CADFM;AAGAC,cAAc,CAAdA,UAAAA,CAA0B,CAAA,OAAA,EAAA,MAAA,KAAqB;AAC7C,MAAI,CAACb,MAAM,CAAX,MAAA,EAAoB;AAClB,UAAM,IAAIA,MAAM,CAAV,KAAA,CAAN,WAAM,CAAN;AACD;;AACD,SAAOM,WAAW,CAAXA,cAAAA,CAAP,MAAOA,CAAP;AAJFO,CAAAA;AAOAC,UAAU,CAAVA,UAAAA,CAAsB,CAAA,OAAA,EAAA,MAAA,KAAqB;AACzChB,EAAAA,eAAe,CAAfA,qBAAAA;AACAQ,EAAAA,WAAW,CAAXA,MAAAA,CAAAA,MAAAA;AAFFQ,CAAAA;AAKAC,mBAAmB,CAAnBA,UAAAA,CAA+B,CAAA,OAAA,EAAA,MAAA,KAAqB;AAClDjB,EAAAA,eAAe,CAAfA,uBAAAA;AACA,SAAOQ,WAAW,CAAXA,mBAAAA,CAAP,MAAOA,CAAP;AAFFS,CAAAA;AAKAC,WAAW,CAAXA,UAAAA,CAAuB,CAAC;AAAEnB,EAAAA;AAAF,CAAD,EAAA,MAAA,KAAwB;AAC7CC,EAAAA,eAAe,CAAfA,KAAAA,CAAAA,iBAAAA,CAAAA,MAAAA,EAAgDmB,MAAM,CAAtDnB,MAAAA;AACA,SAAOQ,WAAW,CAAXA,WAAAA,CAAP,MAAOA,CAAP;AAFFU,CAAAA;AAKAE,uBAAuB,CAAvBA,UAAAA,CAAmC,CAAA,OAAA,EAAU;AAAA,EAAA,MAAA;AAAUC,EAAAA;AAAV,CAAV,KAA2C;AAC5ErB,EAAAA,eAAe,CAAfA,uBAAAA;AACA,SAAO,WAAW,CAAX,mBAAA,CAAgC;AAAA,IAAA,MAAA;AAAUqB,IAAAA;AAAV,GAAhC,CAAP;AAFFD,CAAAA;AAKAE,eAAe,CAAfA,UAAAA,CAA2B,CAAA,OAAA,EAAA,MAAA,KAAqB;AAC9C,MAAIpB,MAAM,CAAV,MAAA,EAAmB;AACjB,WAAOM,WAAW,CAAXA,eAAAA,CAAP,MAAOA,CAAP;AACD;AAHHc,CAAAA;AAMAC,kBAAkB,CAAlBA,UAAAA,CAA8B,CAAA,OAAA,EAAA,MAAA,KAAqB;AACjDvB,EAAAA,eAAe,CAAfA,cAAAA,CAA+BW,OAAO,CAAtCX,MAAAA;AACA,SAAOQ,WAAW,CAAXA,eAAAA,CAAP,MAAOA,CAAP;AAFFe,CAAAA;AAKAC,aAAa,CAAbA,UAAAA,CAAyB,CAAA,OAAA,EAAA,MAAA,KAAqB;AAC5C,QAAM;AAAEzB,IAAAA;AAAF,MAAN,OAAA;AACA,QAAM;AAAA,IAAA,WAAA;AAAA,IAAA,YAAA;AAA6B0B,IAAAA;AAA7B,MAAN,MAAA;AACAzB,EAAAA,eAAe,CAAfA,cAAAA,CAAAA,MAAAA;;AAEA,MAAI0B,WAAW,IAAIA,WAAW,CAA9B,MAAA,EAAuC;AACrCA,IAAAA,WAAW,CAAXA,OAAAA,CAAoBC,UAAU,IAC5B,eAAe,CAAf,UAAA,CAAA,0BAAA,CAAsD;AAAA,MAAA,MAAA;AAEpDA,MAAAA;AAFoD,KAAtD,CADFD;AAKD;;AAED,MAAIE,YAAY,IAAIA,YAAY,CAAhC,MAAA,EAAyC;AACvCA,IAAAA,YAAY,CAAZA,OAAAA,CAAqBC,WAAW,IAC9B,eAAe,CAAf,UAAA,CAAA,0BAAA,CAAsD;AAAA,MAAA,WAAA;AAEpD9B,MAAAA;AAFoD,KAAtD,CADF6B;AAKD;;AAED,MAAIH,UAAU,IAAIA,UAAU,CAA5B,MAAA,EAAqC;AACnCA,IAAAA,UAAU,CAAVA,OAAAA,CAAmB,CAAC;AAAEK,MAAAA;AAAF,KAAD,KAAoB;AACrC,YAAMC,gBAAgB,GAAG,eAAe,CAAf,QAAA,CAAyB;AAChDC,QAAAA,QAAQ,EAAE;AAAEF,UAAAA;AAAF;AADsC,OAAzB,CAAzB;;AAGA,UAAA,gBAAA,EAAsB;AACpB9B,QAAAA,eAAe,CAAfA,UAAAA,CAAAA,0BAAAA,CAAsD;AAAA,UAAA,MAAA;AAEpD2B,UAAAA,UAAU,EAAEI,gBAAgB,CAACE;AAFuB,SAAtDjC;AAID;AATHyB,KAAAA;AAtB0C,GAAA,CAmC5C;;;AACA,QAAMS,SAAS,GAAGlC,eAAe,CAAfA,OAAAA,CAAAA,MAAAA,EAAgCmC,KAAK,CAAvD,GAAkBnC,CAAlB;AAEA,SAAO,WAAW,CAAX,aAAA,iCAA0B,MAA1B;AAELoC,IAAAA,SAAS,EAAEF,SAAS,GAAA,MAAA,GAFW,SAA1B;AAGL7B,IAAAA,OAAO,EAAE,CAAA,SAAA,GAAA,MAAA,GAAsBgC;AAH1B,KAAP;AAtCFb,CAAAA;AA6CAc,cAAc,CAAdA,UAAAA,CAA0B,CAAC;AAAEvC,EAAAA;AAAF,CAAD,EAAa;AAAEF,EAAAA;AAAF,CAAb,KAA2B;AACnDG,EAAAA,eAAe,CAAfA,cAAAA,CAAAA,MAAAA;AACA,QAAMuC,IAAI,GAAG/B,WAAW,CAAXA,UAAAA,CAAb,KAAaA,CAAb;;AAEA,MAAA,IAAA,EAAU;AACR,WAAO,WAAW,CAAX,QAAA,CAAqB;AAC1BwB,MAAAA,QAAQ,EAAE;AAAEQ,QAAAA,IAAI,EAAE,CAAC;AAAEP,UAAAA,GAAG,EAAEM,IAAI,CAACN;AAAZ,SAAD,EAAoB;AAAEQ,UAAAA,KAAK,EAAE;AAAEC,YAAAA,GAAG,EAAE,CAACP,KAAK,CAAN,GAAA;AAAP;AAAT,SAApB;AAAR,OADgB;AAE1BQ,MAAAA,IAAI,EAFsB,CAAA;AAG1BC,MAAAA,aAAa,EAAE;AAAED,QAAAA,IAAI,EAAE;AAAR;AAHW,KAArB,CAAP;AAKD;AAVHL,CAAAA;AAaAO,iBAAiB,CAAjBA,UAAAA,CAA6B,CAAA,OAAA,EAAA,MAAA,KAAqB;AAChD7C,EAAAA,eAAe,CAAfA,uBAAAA;AACA,SAAOQ,WAAW,CAAXA,aAAAA,CAAP,MAAOA,CAAP;AAFFqC,CAAAA;AAKAC,6BAA6B,CAA7BA,UAAAA,CAAyC,CAAA,OAAA,EAAA,MAAA,KAAqB;AAC5D9C,EAAAA,eAAe,CAAfA,uBAAAA;AACA,SAAOQ,WAAW,CAAXA,yBAAAA,CAAP,MAAOA,CAAP;AAFFsC,CAAAA;AAKAC,2BAA2B,CAA3BA,UAAAA,CAAuC,CAAC;AAAEhD,EAAAA;AAAF,CAAD,EAAA,MAAA,KAAwB;AAC7D,QAAM;AAAEiD,IAAAA;AAAF,MAAN,MAAA;AACAhD,EAAAA,eAAe,CAAfA,cAAAA,CAAAA,MAAAA;AACAA,EAAAA,eAAe,CAAfA,KAAAA,CAAAA,oCAAAA,CAA2D;AAAA,IAAA,MAAA;AAEzDgD,IAAAA;AAFyD,GAA3DhD;;AAKA,MAAIA,eAAe,CAAnB,kBAAIA,EAAJ,EAA0C;AACxCmB,IAAAA,MAAM,CAANA,OAAAA,GAAAA,MAAAA;AADF,GAAA,MAEO;AACLA,IAAAA,MAAM,CAANA,KAAAA,GAAAA,MAAAA;AACD;;AAED,SAAOX,WAAW,CAAXA,2BAAAA,CAAP,MAAOA,CAAP;AAdFuC,CAAAA;AAiBAE,oBAAoB,CAApBA,UAAAA,CAAgC,CAAC;AAAElD,EAAAA;AAAF,CAAD,EAAA,MAAA,KAAwB;AACtDC,EAAAA,eAAe,CAAfA,cAAAA,CAAAA,MAAAA;AACA,SAAOQ,WAAW,CAAXA,oBAAAA,CAAP,MAAOA,CAAP;AAFFyC,CAAAA;AAKAC,mBAAmB,CAAnBA,UAAAA,CAA+B,CAAA,OAAA,EAAA,MAAA,KAAqB;AAClD,MAAI/B,MAAM,CAAV,MAAA,EAAmB;AACjBnB,IAAAA,eAAe,CAAfA,KAAAA,CAAAA,kBAAAA,CAAyCmB,MAAM,CAA/CnB,MAAAA;AACD;;AAED,QAAMD,MAAM,GAAGS,WAAW,CAAXA,mBAAAA,CAAf,MAAeA,CAAf;AAEA,QAAM2C,SAAS,GAAG,IAAA,SAAA,iCAAc,OAAd;AAA4BpD,IAAAA;AAA5B,KAAlB;AACAoD,EAAAA,SAAS,CAATA,QAAAA,CAAmBhC,MAAM,CAAzBgC,UAAAA;AACAA,EAAAA,SAAS,CAATA,KAAAA,CAAgBC,MAAM,CAAtBD,YAAAA,EAAqC;AAAA,IAAA,MAAA;AAEnCE,IAAAA,MAAM,EAAElC,MAAM,CAANA,UAAAA,GAAAA,UAAAA,GAF2B,SAAA;AAGnCmC,IAAAA,UAAU,EAAEnC,MAAM,CAACmC;AAHgB,GAArCH;;AAKA,MAAIhC,MAAM,CAAV,MAAA,EAAmB;AACjBgC,IAAAA,SAAS,CAATA,KAAAA,CAAgBC,MAAM,CAAtBD,2BAAAA,EAAoD;AAClDI,MAAAA,MAAM,EAAEpC,MAAM,CAACoC;AADmC,KAApDJ;AAGD;;AAED,SAAA,MAAA;AApBFD,CAAAA;AAuBAM,cAAc,CAAdA,UAAAA,CAA0B,CAAA,OAAA,EAAA,MAAA,KAAqB;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAN,MAAA;AACA,QAAMC,QAAQ,GAAG,WAAW,CAAX,QAAA,CAAqB;AACpC1B,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,GAAG,EAAL,GAAA;AAAYQ,MAAAA,KAAK,EAAE;AAAEC,QAAAA,GAAG,EAAE,CAACP,KAAK,CAAN,GAAA;AAAP;AAAnB;AAD0B,GAArB,CAAjB;AAIA,SAAO,CAAC,CAAR,QAAA;AANFqB,CAAAA","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport Analytics from 'core/api/analytics/server/Analytics';\nimport EVENTS from 'core/api/analytics/events';\nimport SecurityService from '../../security';\nimport {\n  doesUserExist,\n  sendVerificationLink,\n  assignAdminToUser,\n  assignAdminToNewUser,\n  setRole,\n  adminCreateUser,\n  updateUser,\n  getUserByPasswordResetToken,\n  testCreateUser,\n  removeUser,\n  sendEnrollmentEmail,\n  changeEmail,\n  userUpdateOrganisations,\n  testUserAccount,\n  generateApiKeyPair,\n  proInviteUser,\n  getUserByEmail,\n  setUserReferredBy,\n  setUserReferredByOrganisation,\n  proInviteUserToOrganisation,\n  proSetShareCustomers,\n  anonymousCreateUser,\n  referralExists,\n} from '../methodDefinitions';\nimport UserService from './UserService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport { ROLES } from '../userConstants';\n\ndoesUserExist.setHandler((context, { email }) =>\n  UserService.doesUserExist({ email }));\n\nsendVerificationLink.setHandler((context, { userId } = {}) => {\n  if (userId) {\n    SecurityService.checkCurrentUserIsAdmin();\n  } else {\n    SecurityService.checkLoggedIn();\n  }\n  const id = userId || Meteor.userId();\n\n  if (Meteor.isDevelopment) {\n    console.log(`Not sending verification link in development for userId: ${id}`);\n    return false;\n  }\n\n  return UserService.sendVerificationEmail({ userId: id });\n});\n\nassignAdminToUser.setHandler((context, { userId, adminId }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n\n  return UserService.assignAdminToUser({ userId, adminId });\n});\n\nassignAdminToNewUser.setHandler((context, { userId, adminId }) => {\n  // same action as assignAdminToUser, but with a dedicated\n  // listener that would complete & reassign the user's tasks\n  SecurityService.checkCurrentUserIsAdmin();\n\n  return UserService.assignAdminToUser({ userId, adminId });\n});\n\nsetRole.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setRole(params);\n});\n\nadminCreateUser.setHandler((context, { options, role }) => {\n  SecurityService.users.isAllowedToInsertByRole({ role });\n  return UserService.adminCreateUser({\n    options,\n    role,\n    adminId: context.userId,\n  });\n});\n\nupdateUser.setHandler((context, { userId, object }) => {\n  SecurityService.users.isAllowedToUpdate(userId, context.userId);\n\n  if (object.roles) {\n    SecurityService.handleUnauthorized('Vous ne pouvez pas changer le rôle');\n  }\n\n  return UserService.update({ userId, object });\n});\n\ngetUserByPasswordResetToken.setHandler((context, params) =>\n  UserService.getUserByPasswordResetToken(params));\n\ntestCreateUser.setHandler((context, params) => {\n  if (!Meteor.isTest) {\n    throw new Meteor.Error('Test only');\n  }\n  return UserService.testCreateUser(params);\n});\n\nremoveUser.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsDev();\n  UserService.remove(params);\n});\n\nsendEnrollmentEmail.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.sendEnrollmentEmail(params);\n});\n\nchangeEmail.setHandler(({ userId }, params) => {\n  SecurityService.users.isAllowedToUpdate(userId, params.userId);\n  return UserService.changeEmail(params);\n});\n\nuserUpdateOrganisations.setHandler((context, { userId, newOrganisations }) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.updateOrganisations({ userId, newOrganisations });\n});\n\ntestUserAccount.setHandler((context, params) => {\n  if (Meteor.isTest) {\n    return UserService.testUserAccount(params);\n  }\n});\n\ngenerateApiKeyPair.setHandler((context, params) => {\n  SecurityService.checkUserIsPro(context.userId);\n  return UserService.generateKeyPair(params);\n});\n\nproInviteUser.setHandler((context, params) => {\n  const { userId } = context;\n  const { propertyIds, promotionIds, properties } = params;\n  SecurityService.checkUserIsPro(userId);\n\n  if (propertyIds && propertyIds.length) {\n    propertyIds.forEach(propertyId =>\n      SecurityService.properties.isAllowedToInviteCustomers({\n        userId,\n        propertyId,\n      }));\n  }\n\n  if (promotionIds && promotionIds.length) {\n    promotionIds.forEach(promotionId =>\n      SecurityService.promotions.isAllowedToInviteCustomers({\n        promotionId,\n        userId,\n      }));\n  }\n\n  if (properties && properties.length) {\n    properties.forEach(({ externalId }) => {\n      const existingProperty = PropertyService.fetchOne({\n        $filters: { externalId },\n      });\n      if (existingProperty) {\n        SecurityService.properties.isAllowedToInviteCustomers({\n          userId,\n          propertyId: existingProperty._id,\n        });\n      }\n    });\n  }\n\n  // Only pass proUserId if this is a pro user\n  const isProUser = SecurityService.hasRole(userId, ROLES.PRO);\n\n  return UserService.proInviteUser({\n    ...params,\n    proUserId: isProUser ? userId : undefined,\n    adminId: !isProUser ? userId : undefined,\n  });\n});\n\ngetUserByEmail.setHandler(({ userId }, { email }) => {\n  SecurityService.checkUserIsPro(userId);\n  const user = UserService.getByEmail(email);\n\n  if (user) {\n    return UserService.fetchOne({\n      $filters: { $and: [{ _id: user._id }, { roles: { $in: [ROLES.PRO] } }] },\n      name: 1,\n      organisations: { name: 1 },\n    });\n  }\n});\n\nsetUserReferredBy.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setReferredBy(params);\n});\n\nsetUserReferredByOrganisation.setHandler((context, params) => {\n  SecurityService.checkCurrentUserIsAdmin();\n  return UserService.setReferredByOrganisation(params);\n});\n\nproInviteUserToOrganisation.setHandler(({ userId }, params) => {\n  const { organisationId } = params;\n  SecurityService.checkUserIsPro(userId);\n  SecurityService.users.isAllowedToInviteUsersToOrganisation({\n    userId,\n    organisationId,\n  });\n\n  if (SecurityService.currentUserIsAdmin()) {\n    params.adminId = userId;\n  } else {\n    params.proId = userId;\n  }\n\n  return UserService.proInviteUserToOrganisation(params);\n});\n\nproSetShareCustomers.setHandler(({ userId }, params) => {\n  SecurityService.checkUserIsPro(userId);\n  return UserService.proSetShareCustomers(params);\n});\n\nanonymousCreateUser.setHandler((context, params) => {\n  if (params.loanId) {\n    SecurityService.loans.checkAnonymousLoan(params.loanId);\n  }\n\n  const userId = UserService.anonymousCreateUser(params);\n\n  const analytics = new Analytics({ ...context, userId });\n  analytics.identify(params.trackingId);\n  analytics.track(EVENTS.USER_CREATED, {\n    userId,\n    origin: params.referralId ? 'referral' : 'organic',\n    referralId: params.referralId,\n  });\n  if (params.loanId) {\n    analytics.track(EVENTS.LOAN_ANONYMOUS_LOAN_CLAIMED, {\n      loanId: params.loanId,\n    });\n  }\n\n  return userId;\n});\n\nreferralExists.setHandler((context, params) => {\n  const { ref } = params;\n  const referral = UserService.fetchOne({\n    $filters: { _id: ref, roles: { $in: [ROLES.PRO] } },\n  });\n\n  return !!referral;\n});\n"]},"sourceType":"script","hash":"98d8edc04d14fbab84fa9d3e6cc85a544a425bf6"}

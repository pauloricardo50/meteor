{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/test/apiTestHelpers.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/test/apiTestHelpers.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/test/apiTestHelpers.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/test/apiTestHelpers.test.js"],"names":["expect","fetch","NodeRSA","queryString","createReadStream","statSync","path","mime","sortObject","UserService","OBJECT_FORMATS","formatObject","FormData","require","API_PORT","process","env","CIRCLE_CI","checkResponse","res","expectedResponse","include","json","then","body","to","deep","equal","Promise","resolve","getTimestampAndNonce","timestamp","Math","round","Date","valueOf","toString","nonce","random","substr","fetchAndCheckResponse","url","query","data","urlPath","stringify","encode","signBody","privateKey","key","importKey","replace","sortedBody","signature","sign","JSON","signRequest","format","isMultipart","file","objectToSign","security","queryParams","Object","values","includes","formattedObject","makeBody","timestampOverride","nonceOverride","signatureOverride","filteredData","keys","filter","reduce","object","makeHeaders","publicKey","userId","keyPair","generateKeyPair","uploadFile","filePath","params","readStream","form","append","forEach","param","options","method","headers","length","name","basename","size","type","lookup","getHeaders"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport fetch from 'node-fetch';\nimport NodeRSA from 'node-rsa';\nimport queryString from 'query-string';\nimport { createReadStream, statSync } from 'fs';\nimport path from 'path';\nimport mime from 'mime-types';\n\nimport { sortObject } from 'core/api/helpers/index';\nimport UserService from 'core/api/users/server/UserService';\nimport { OBJECT_FORMATS, formatObject } from '../helpers';\n\nconst FormData = require('form-data');\n\nexport const API_PORT = process.env.CIRCLE_CI ? 3000 : 4106; // API in on pro\n\nconst checkResponse = ({ res, expectedResponse, include }) =>\n  res.json().then((body) => {\n    if (expectedResponse) {\n      if (include) {\n        expect(body).to.deep.include(expectedResponse);\n      } else {\n        expect(body).to.deep.equal(expectedResponse);\n      }\n    }\n    return Promise.resolve(body);\n  });\n\nexport const getTimestampAndNonce = () => {\n  const timestamp = Math.round(new Date().valueOf() / 1000).toString();\n  const nonce = Math.random()\n    .toString(36)\n    .substr(2, 8);\n\n  return { timestamp, nonce };\n};\n\nexport const fetchAndCheckResponse = ({\n  url,\n  query,\n  data,\n  expectedResponse,\n  include,\n}) => {\n  const urlPath = query\n    ? `http://localhost:${API_PORT}/api${url}?${queryString.stringify(query, {\n      encode: true,\n    })}`\n    : `http://localhost:${API_PORT}/api${url}`;\n  return fetch(urlPath, data).then(res =>\n    checkResponse({ res, expectedResponse, include }));\n};\n\nconst signBody = ({ body, privateKey }) => {\n  const key = new NodeRSA();\n  key.importKey(privateKey.replace(/\\r?\\n|\\r/g, ''), 'pkcs1-private-pem');\n\n  const sortedBody = sortObject(body);\n\n  const signature = key.sign(JSON.stringify(sortedBody), 'base64', 'utf8');\n  return signature;\n};\n\nexport const signRequest = ({\n  body,\n  query,\n  timestamp,\n  nonce,\n  privateKey,\n  format,\n  isMultipart,\n  file,\n}) => {\n  if (!privateKey) {\n    return '12345';\n  }\n\n  const key = new NodeRSA();\n  key.importKey(privateKey.replace(/\\r?\\n|\\r/g, ''), 'pkcs1-private-pem');\n\n\n  let objectToSign = { security: sortObject({ timestamp, nonce }) };\n\n  if (query) {\n    objectToSign = { ...objectToSign, queryParams: sortObject(query) };\n  }\n\n  if (body) {\n    objectToSign = { ...objectToSign, body: sortObject(body) };\n  }\n\n  if (isMultipart) {\n    objectToSign = { ...objectToSign, file: sortObject(file) };\n  }\n\n  if (Object.values(OBJECT_FORMATS).includes(format)) {\n    const formattedObject = formatObject(objectToSign, format);\n    const signature = key.sign(\n      JSON.stringify(formattedObject),\n      'base64',\n      'utf8',\n    );\n    return signature;\n  }\n\n  const signature = key.sign(JSON.stringify(objectToSign), 'base64', 'utf8');\n  return signature;\n};\n\nexport const makeBody = ({\n  data = {},\n  privateKey,\n  timestampOverride,\n  nonceOverride,\n  signatureOverride,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n\n  const filteredData = Object.keys(data)\n    .filter(key => !!data[key])\n    .reduce((object, key) => ({ ...object, [key]: data[key] }), {});\n\n  const body = {\n    ...filteredData,\n    timestamp: timestampOverride || timestamp,\n    nonce: nonceOverride || nonce,\n  };\n  const signature = signBody({ body, privateKey });\n\n  return JSON.stringify({ ...body, signature: signatureOverride || signature });\n};\n\nexport const makeHeaders = ({\n  publicKey,\n  privateKey,\n  userId,\n  body,\n  timestamp,\n  nonce,\n  query,\n  signature,\n  isMultipart,\n  file,\n}) => {\n  let keyPair = { publicKey, privateKey };\n\n  if (userId) {\n    keyPair = UserService.generateKeyPair({ userId });\n  }\n\n  return {\n    'Content-Type': 'application/json',\n    'X-EPOTEK-Authorization': `EPOTEK ${keyPair.publicKey.replace(\n      /\\r?\\n|\\r/g,\n      '',\n    )}:${signature\n      || signRequest({\n        body,\n        query,\n        privateKey: keyPair.privateKey,\n        timestamp,\n        nonce,\n        isMultipart,\n        file,\n      })}`,\n    'X-EPOTEK-Nonce': nonce,\n    'X-EPOTEK-Timestamp': timestamp,\n  };\n};\n\nexport const uploadFile = ({ filePath, userId, url, query, ...params }) => {\n  const readStream = createReadStream(filePath);\n  const form = new FormData();\n  form.append('file', readStream);\n  Object.keys(params).forEach((param) => {\n    form.append(param, params[param]);\n  });\n\n  const { timestamp, nonce } = getTimestampAndNonce();\n\n  const options = {\n    method: 'POST',\n    body: form,\n    headers: {\n      ...makeHeaders({\n        timestamp,\n        nonce,\n        userId,\n        ...(Object.keys(params).length ? { body: params } : {}),\n        isMultipart: true,\n        query,\n        file: {\n          name: path.basename(filePath),\n          size: statSync(filePath).size,\n          type: mime.lookup(filePath),\n        },\n      }),\n      ...form.getHeaders(),\n    },\n  };\n\n  const urlPath = query\n    ? `http://localhost:${API_PORT}/api${url}?${queryString.stringify(query, {\n      encode: true,\n    })}`\n    : `http://localhost:${API_PORT}/api${url}`;\n\n  return fetch(urlPath, options).then(res => res.json());\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/test/apiTestHelpers.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/test/apiTestHelpers.test.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  API_PORT: () => API_PORT,\n  getTimestampAndNonce: () => getTimestampAndNonce,\n  fetchAndCheckResponse: () => fetchAndCheckResponse,\n  signRequest: () => signRequest,\n  makeBody: () => makeBody,\n  makeHeaders: () => makeHeaders,\n  uploadFile: () => uploadFile\n});\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet fetch;\nmodule.link(\"node-fetch\", {\n  default(v) {\n    fetch = v;\n  }\n\n}, 1);\nlet NodeRSA;\nmodule.link(\"node-rsa\", {\n  default(v) {\n    NodeRSA = v;\n  }\n\n}, 2);\nlet queryString;\nmodule.link(\"query-string\", {\n  default(v) {\n    queryString = v;\n  }\n\n}, 3);\nlet createReadStream, statSync;\nmodule.link(\"fs\", {\n  createReadStream(v) {\n    createReadStream = v;\n  },\n\n  statSync(v) {\n    statSync = v;\n  }\n\n}, 4);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 5);\nlet mime;\nmodule.link(\"mime-types\", {\n  default(v) {\n    mime = v;\n  }\n\n}, 6);\nlet sortObject;\nmodule.link(\"../../../helpers\", {\n  sortObject(v) {\n    sortObject = v;\n  }\n\n}, 7);\nlet UserService;\nmodule.link(\"../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 8);\nlet OBJECT_FORMATS, formatObject;\nmodule.link(\"../helpers\", {\n  OBJECT_FORMATS(v) {\n    OBJECT_FORMATS = v;\n  },\n\n  formatObject(v) {\n    formatObject = v;\n  }\n\n}, 9);\n\nconst FormData = require('form-data');\n\nconst API_PORT = process.env.CIRCLE_CI ? 3000 : 4106;\n\n// API in on pro\nconst checkResponse = ({\n  res,\n  expectedResponse,\n  include\n}) => res.json().then(body => {\n  if (expectedResponse) {\n    if (include) {\n      expect(body).to.deep.include(expectedResponse);\n    } else {\n      expect(body).to.deep.equal(expectedResponse);\n    }\n  }\n\n  return Promise.resolve(body);\n});\n\nconst getTimestampAndNonce = () => {\n  const timestamp = Math.round(new Date().valueOf() / 1000).toString();\n  const nonce = Math.random().toString(36).substr(2, 8);\n  return {\n    timestamp,\n    nonce\n  };\n};\n\nconst fetchAndCheckResponse = ({\n  url,\n  query,\n  data,\n  expectedResponse,\n  include\n}) => {\n  const urlPath = query ? `http://localhost:${API_PORT}/api${url}?${queryString.stringify(query, {\n    encode: true\n  })}` : `http://localhost:${API_PORT}/api${url}`;\n  return fetch(urlPath, data).then(res => checkResponse({\n    res,\n    expectedResponse,\n    include\n  }));\n};\n\nconst signBody = ({\n  body,\n  privateKey\n}) => {\n  const key = new NodeRSA();\n  key.importKey(privateKey.replace(/\\r?\\n|\\r/g, ''), 'pkcs1-private-pem');\n  const sortedBody = sortObject(body);\n  const signature = key.sign(JSON.stringify(sortedBody), 'base64', 'utf8');\n  return signature;\n};\n\nconst signRequest = ({\n  body,\n  query,\n  timestamp,\n  nonce,\n  privateKey,\n  format,\n  isMultipart,\n  file\n}) => {\n  if (!privateKey) {\n    return '12345';\n  }\n\n  const key = new NodeRSA();\n  key.importKey(privateKey.replace(/\\r?\\n|\\r/g, ''), 'pkcs1-private-pem');\n  let objectToSign = {\n    security: sortObject({\n      timestamp,\n      nonce\n    })\n  };\n\n  if (query) {\n    objectToSign = (0, _objectSpread2.default)({}, objectToSign, {\n      queryParams: sortObject(query)\n    });\n  }\n\n  if (body) {\n    objectToSign = (0, _objectSpread2.default)({}, objectToSign, {\n      body: sortObject(body)\n    });\n  }\n\n  if (isMultipart) {\n    objectToSign = (0, _objectSpread2.default)({}, objectToSign, {\n      file: sortObject(file)\n    });\n  }\n\n  if (Object.values(OBJECT_FORMATS).includes(format)) {\n    const formattedObject = formatObject(objectToSign, format);\n    const signature = key.sign(JSON.stringify(formattedObject), 'base64', 'utf8');\n    return signature;\n  }\n\n  const signature = key.sign(JSON.stringify(objectToSign), 'base64', 'utf8');\n  return signature;\n};\n\nconst makeBody = ({\n  data = {},\n  privateKey,\n  timestampOverride,\n  nonceOverride,\n  signatureOverride\n}) => {\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  const filteredData = Object.keys(data).filter(key => !!data[key]).reduce((object, key) => (0, _objectSpread2.default)({}, object, {\n    [key]: data[key]\n  }), {});\n  const body = (0, _objectSpread2.default)({}, filteredData, {\n    timestamp: timestampOverride || timestamp,\n    nonce: nonceOverride || nonce\n  });\n  const signature = signBody({\n    body,\n    privateKey\n  });\n  return JSON.stringify((0, _objectSpread2.default)({}, body, {\n    signature: signatureOverride || signature\n  }));\n};\n\nconst makeHeaders = ({\n  publicKey,\n  privateKey,\n  userId,\n  body,\n  timestamp,\n  nonce,\n  query,\n  signature,\n  isMultipart,\n  file\n}) => {\n  let keyPair = {\n    publicKey,\n    privateKey\n  };\n\n  if (userId) {\n    keyPair = UserService.generateKeyPair({\n      userId\n    });\n  }\n\n  return {\n    'Content-Type': 'application/json',\n    'X-EPOTEK-Authorization': `EPOTEK ${keyPair.publicKey.replace(/\\r?\\n|\\r/g, '')}:${signature || signRequest({\n      body,\n      query,\n      privateKey: keyPair.privateKey,\n      timestamp,\n      nonce,\n      isMultipart,\n      file\n    })}`,\n    'X-EPOTEK-Nonce': nonce,\n    'X-EPOTEK-Timestamp': timestamp\n  };\n};\n\nconst uploadFile = (_ref) => {\n  let {\n    filePath,\n    userId,\n    url,\n    query\n  } = _ref,\n      params = (0, _objectWithoutProperties2.default)(_ref, [\"filePath\", \"userId\", \"url\", \"query\"]);\n  const readStream = createReadStream(filePath);\n  const form = new FormData();\n  form.append('file', readStream);\n  Object.keys(params).forEach(param => {\n    form.append(param, params[param]);\n  });\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  const options = {\n    method: 'POST',\n    body: form,\n    headers: (0, _objectSpread2.default)({}, makeHeaders((0, _objectSpread2.default)({\n      timestamp,\n      nonce,\n      userId\n    }, Object.keys(params).length ? {\n      body: params\n    } : {}, {\n      isMultipart: true,\n      query,\n      file: {\n        name: path.basename(filePath),\n        size: statSync(filePath).size,\n        type: mime.lookup(filePath)\n      }\n    })), form.getHeaders())\n  };\n  const urlPath = query ? `http://localhost:${API_PORT}/api${url}?${queryString.stringify(query, {\n    encode: true\n  })}` : `http://localhost:${API_PORT}/api${url}`;\n  return fetch(urlPath, options).then(res => res.json());\n};","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/test/apiTestHelpers.test.js"],"names":["expect","FormData","require","API_PORT","process","checkResponse","include","body","Promise","getTimestampAndNonce","timestamp","Math","nonce","fetchAndCheckResponse","urlPath","query","url","encode","res","signBody","privateKey","key","sortedBody","sortObject","signature","JSON","signRequest","file","objectToSign","security","queryParams","Object","formattedObject","formatObject","makeBody","data","signatureOverride","filteredData","timestampOverride","nonceOverride","makeHeaders","keyPair","userId","uploadFile","params","readStream","createReadStream","form","param","options","method","headers","isMultipart","name","path","size","statSync","type","mime","fetch"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport fetch from 'node-fetch';\nimport NodeRSA from 'node-rsa';\nimport queryString from 'query-string';\nimport { createReadStream, statSync } from 'fs';\nimport path from 'path';\nimport mime from 'mime-types';\n\nimport { sortObject } from 'core/api/helpers/index';\nimport UserService from 'core/api/users/server/UserService';\nimport { OBJECT_FORMATS, formatObject } from '../helpers';\n\nconst FormData = require('form-data');\n\nexport const API_PORT = process.env.CIRCLE_CI ? 3000 : 4106; // API in on pro\n\nconst checkResponse = ({ res, expectedResponse, include }) =>\n  res.json().then((body) => {\n    if (expectedResponse) {\n      if (include) {\n        expect(body).to.deep.include(expectedResponse);\n      } else {\n        expect(body).to.deep.equal(expectedResponse);\n      }\n    }\n    return Promise.resolve(body);\n  });\n\nexport const getTimestampAndNonce = () => {\n  const timestamp = Math.round(new Date().valueOf() / 1000).toString();\n  const nonce = Math.random()\n    .toString(36)\n    .substr(2, 8);\n\n  return { timestamp, nonce };\n};\n\nexport const fetchAndCheckResponse = ({\n  url,\n  query,\n  data,\n  expectedResponse,\n  include,\n}) => {\n  const urlPath = query\n    ? `http://localhost:${API_PORT}/api${url}?${queryString.stringify(query, {\n      encode: true,\n    })}`\n    : `http://localhost:${API_PORT}/api${url}`;\n  return fetch(urlPath, data).then(res =>\n    checkResponse({ res, expectedResponse, include }));\n};\n\nconst signBody = ({ body, privateKey }) => {\n  const key = new NodeRSA();\n  key.importKey(privateKey.replace(/\\r?\\n|\\r/g, ''), 'pkcs1-private-pem');\n\n  const sortedBody = sortObject(body);\n\n  const signature = key.sign(JSON.stringify(sortedBody), 'base64', 'utf8');\n  return signature;\n};\n\nexport const signRequest = ({\n  body,\n  query,\n  timestamp,\n  nonce,\n  privateKey,\n  format,\n  isMultipart,\n  file,\n}) => {\n  if (!privateKey) {\n    return '12345';\n  }\n\n  const key = new NodeRSA();\n  key.importKey(privateKey.replace(/\\r?\\n|\\r/g, ''), 'pkcs1-private-pem');\n\n\n  let objectToSign = { security: sortObject({ timestamp, nonce }) };\n\n  if (query) {\n    objectToSign = { ...objectToSign, queryParams: sortObject(query) };\n  }\n\n  if (body) {\n    objectToSign = { ...objectToSign, body: sortObject(body) };\n  }\n\n  if (isMultipart) {\n    objectToSign = { ...objectToSign, file: sortObject(file) };\n  }\n\n  if (Object.values(OBJECT_FORMATS).includes(format)) {\n    const formattedObject = formatObject(objectToSign, format);\n    const signature = key.sign(\n      JSON.stringify(formattedObject),\n      'base64',\n      'utf8',\n    );\n    return signature;\n  }\n\n  const signature = key.sign(JSON.stringify(objectToSign), 'base64', 'utf8');\n  return signature;\n};\n\nexport const makeBody = ({\n  data = {},\n  privateKey,\n  timestampOverride,\n  nonceOverride,\n  signatureOverride,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n\n  const filteredData = Object.keys(data)\n    .filter(key => !!data[key])\n    .reduce((object, key) => ({ ...object, [key]: data[key] }), {});\n\n  const body = {\n    ...filteredData,\n    timestamp: timestampOverride || timestamp,\n    nonce: nonceOverride || nonce,\n  };\n  const signature = signBody({ body, privateKey });\n\n  return JSON.stringify({ ...body, signature: signatureOverride || signature });\n};\n\nexport const makeHeaders = ({\n  publicKey,\n  privateKey,\n  userId,\n  body,\n  timestamp,\n  nonce,\n  query,\n  signature,\n  isMultipart,\n  file,\n}) => {\n  let keyPair = { publicKey, privateKey };\n\n  if (userId) {\n    keyPair = UserService.generateKeyPair({ userId });\n  }\n\n  return {\n    'Content-Type': 'application/json',\n    'X-EPOTEK-Authorization': `EPOTEK ${keyPair.publicKey.replace(\n      /\\r?\\n|\\r/g,\n      '',\n    )}:${signature\n      || signRequest({\n        body,\n        query,\n        privateKey: keyPair.privateKey,\n        timestamp,\n        nonce,\n        isMultipart,\n        file,\n      })}`,\n    'X-EPOTEK-Nonce': nonce,\n    'X-EPOTEK-Timestamp': timestamp,\n  };\n};\n\nexport const uploadFile = ({ filePath, userId, url, query, ...params }) => {\n  const readStream = createReadStream(filePath);\n  const form = new FormData();\n  form.append('file', readStream);\n  Object.keys(params).forEach((param) => {\n    form.append(param, params[param]);\n  });\n\n  const { timestamp, nonce } = getTimestampAndNonce();\n\n  const options = {\n    method: 'POST',\n    body: form,\n    headers: {\n      ...makeHeaders({\n        timestamp,\n        nonce,\n        userId,\n        ...(Object.keys(params).length ? { body: params } : {}),\n        isMultipart: true,\n        query,\n        file: {\n          name: path.basename(filePath),\n          size: statSync(filePath).size,\n          type: mime.lookup(filePath),\n        },\n      }),\n      ...form.getHeaders(),\n    },\n  };\n\n  const urlPath = query\n    ? `http://localhost:${API_PORT}/api${url}?${queryString.stringify(query, {\n      encode: true,\n    })}`\n    : `http://localhost:${API_PORT}/api${url}`;\n\n  return fetch(urlPath, options).then(res => res.json());\n};\n"]},"sourceType":"script","hash":"aedfb76b5f7708e825c254b5e2045208e4527881"}

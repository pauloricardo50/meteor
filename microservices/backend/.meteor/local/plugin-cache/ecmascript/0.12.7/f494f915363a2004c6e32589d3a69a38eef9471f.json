{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/PromotionService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/promotions/server/PromotionService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/PromotionService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/promotions/server/PromotionService.js"],"names":["Meteor","HTTP_STATUS_CODES","UserService","LoanService","FileService","CollectionService","PropertyService","PromotionLotService","PROMOTION_STATUS","PROMOTION_PERMISSIONS_FULL_ACCESS","sendEmail","EMAIL_IDS","PROPERTY_CATEGORY","PromotionOptionService","SecurityService","Promotions","PromotionService","constructor","insert","promotion","userId","isAdmin","isUserAdmin","userLinks","undefined","_id","permissions","insertPromotionProperty","promotionId","property","address1","address2","zipCode","city","canton","get","propertyId","category","PROMOTION","promotionLotId","propertyLinks","addLink","id","linkName","linkId","update","rest","result","_update","address","fetchOne","$filters","forEach","object","remove","inviteUser","isNewUser","pro","sendInvitation","promotionLotIds","showAllLots","shareSolvency","user","allowAddingUsers","status","OPEN","Error","hasPromotion","CONFLICT","loanId","insertPromotionLoan","invitedBy","admin","assignedEmployeeId","assignAdminToUser","adminId","sendPromotionInvitationEmail","firstName","proId","then","Promise","resolve","listFilesForDocByCategory","promotionImage","logos","coverImageUrl","length","url","logoUrls","map","ctaUrl","settings","public","subdomains","app","assignedEmployee","getEnrollmentUrl","name","run","emailId","INVITE_USER_TO_PROMOTION","params","proUserId","addProUser","metadata","removeProUser","loans","fetch","updateLinkMetadata","removeLink","setUserPermissions","$set","removeLoan","promotionOptionLinks","attributedPromotionLots","promotionOptionId","cancelPromotionLotBooking","editPromotionLoan","promotionOptions","promotionLots","attributedTo","existingPromotionOption","find","promotionOptionLots","promotionOptionsToRemove","filter","indexOf","promotionOption"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { HTTP_STATUS_CODES } from '../../RESTAPI/server/restApiConstants';\nimport UserService from '../../users/server/UserService';\nimport LoanService from '../../loans/server/LoanService';\nimport FileService from '../../files/server/FileService';\nimport CollectionService from '../../helpers/CollectionService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport {\n  PROMOTION_STATUS,\n  PROMOTION_PERMISSIONS_FULL_ACCESS,\n} from '../../constants';\nimport { sendEmail } from '../../email/methodDefinitions';\nimport { EMAIL_IDS } from '../../email/emailConstants';\nimport { PROPERTY_CATEGORY } from '../../properties/propertyConstants';\nimport PromotionOptionService from '../../promotionOptions/server/PromotionOptionService';\nimport SecurityService from '../../security';\nimport Promotions from '../promotions';\n\nexport class PromotionService extends CollectionService {\n  constructor() {\n    super(Promotions);\n  }\n\n  insert({ promotion = {}, userId }) {\n    const isAdmin = SecurityService.isUserAdmin(userId);\n\n    return super.insert({\n      ...promotion,\n      userLinks: isAdmin\n        ? undefined\n        : [{ _id: userId, permissions: PROMOTION_PERMISSIONS_FULL_ACCESS() }],\n    });\n  }\n\n  insertPromotionProperty({ promotionId, property }) {\n    const { address1, address2, zipCode, city, canton } = this.get(promotionId);\n    const propertyId = PropertyService.insert({\n      property: {\n        ...property,\n        address1,\n        address2,\n        zipCode,\n        city,\n        canton,\n        category: PROPERTY_CATEGORY.PROMOTION,\n      },\n    });\n    const promotionLotId = PromotionLotService.insert({\n      propertyLinks: [{ _id: propertyId }],\n    });\n    this.addLink({\n      id: promotionId,\n      linkName: 'promotionLots',\n      linkId: promotionLotId,\n    });\n    this.addLink({\n      id: promotionId,\n      linkName: 'properties',\n      linkId: propertyId,\n    });\n\n    return promotionLotId;\n  }\n\n  update({ promotionId, ...rest }) {\n    const result = this._update({ id: promotionId, ...rest });\n\n    const { propertyLinks, ...address } = this.fetchOne({\n      $filters: { _id: promotionId },\n      propertyLinks: 1,\n      address1: 1,\n      address2: 1,\n      city: 1,\n      zipCode: 1,\n    });\n\n    propertyLinks.forEach(({ _id }) => {\n      PropertyService.update({ propertyId: _id, object: address });\n    });\n\n    return result;\n  }\n\n  remove({ promotionId }) {\n    return super.remove(promotionId);\n  }\n\n  inviteUser({\n    promotionId,\n    userId,\n    isNewUser,\n    pro = {},\n    sendInvitation = true,\n    promotionLotIds,\n    showAllLots,\n    shareSolvency,\n  }) {\n    const promotion = this.get(promotionId);\n    const user = UserService.get(userId);\n    const allowAddingUsers = promotion.status === PROMOTION_STATUS.OPEN;\n\n    if (!allowAddingUsers) {\n      throw new Meteor.Error(\"Vous ne pouvez pas inviter de clients lorsque la promotion n'est pas en vente, contactez-nous pour valider la promotion.\");\n    }\n\n    if (UserService.hasPromotion({ userId, promotionId })) {\n      throw new Meteor.Error(\n        HTTP_STATUS_CODES.CONFLICT,\n        'Cet utilisateur est déjà invité à cette promotion',\n      );\n    }\n\n    const loanId = LoanService.insertPromotionLoan({\n      userId,\n      promotionId,\n      invitedBy: pro._id,\n      showAllLots,\n      promotionLotIds,\n      shareSolvency,\n    });\n\n    if (isNewUser) {\n      const admin = UserService.get(promotion.assignedEmployeeId);\n      UserService.assignAdminToUser({ userId, adminId: admin && admin._id });\n    }\n\n    const { assignedEmployeeId } = UserService.fetchOne({\n      $filters: { _id: userId },\n      assignedEmployeeId: 1,\n    });\n\n    if (sendInvitation) {\n      return this.sendPromotionInvitationEmail({\n        userId,\n        isNewUser,\n        promotionId,\n        firstName: user.firstName,\n        proId: pro._id,\n        adminId: assignedEmployeeId,\n      }).then(() => loanId);\n    }\n\n    return Promise.resolve(loanId);\n  }\n\n  sendPromotionInvitationEmail({\n    userId,\n    isNewUser,\n    promotionId,\n    firstName,\n    proId,\n  }) {\n    return FileService.listFilesForDocByCategory(promotionId).then(({ promotionImage, logos }) => {\n      const coverImageUrl = promotionImage && promotionImage.length > 0 && promotionImage[0].url;\n      const logoUrls = logos && logos.map(({ url }) => url);\n\n      let ctaUrl = Meteor.settings.public.subdomains.app;\n      const promotion = this.get(promotionId);\n      const assignedEmployee = UserService.get(promotion.assignedEmployeeId);\n\n      if (isNewUser) {\n        // Envoyer invitation avec enrollment link\n        ctaUrl = UserService.getEnrollmentUrl({ userId });\n      }\n\n      let invitedBy;\n\n      if (proId) {\n        invitedBy = UserService.fetchOne({\n          $filters: { _id: proId },\n          name: 1,\n        }).name;\n      }\n\n      return sendEmail.run({\n        emailId: EMAIL_IDS.INVITE_USER_TO_PROMOTION,\n        userId,\n        params: {\n          proUserId: proId,\n          promotion: { ...promotion, assignedEmployee },\n          coverImageUrl,\n          logoUrls,\n          ctaUrl,\n          name: firstName,\n          invitedBy,\n        },\n      });\n    });\n  }\n\n  addProUser({ promotionId, userId }) {\n    return this.addLink({\n      id: promotionId,\n      linkName: 'users',\n      linkId: userId,\n      metadata: { permissions: {} },\n    });\n  }\n\n  removeProUser({ promotionId, userId }) {\n    const loans = LoanService.fetch({\n      $filters: {\n        'promotionLinks.invitedBy': userId,\n        'promotionLinks._id': promotionId,\n      },\n    });\n\n    loans.forEach(({ _id: loanId }) => {\n      this.updateLinkMetadata({\n        id: promotionId,\n        linkName: 'loans',\n        linkId: loanId,\n        metadata: { invitedBy: undefined },\n      });\n    });\n\n    return this.removeLink({\n      id: promotionId,\n      linkName: 'users',\n      linkId: userId,\n    });\n  }\n\n  setUserPermissions({ promotionId, userId, permissions }) {\n    return Promotions.update(\n      { _id: promotionId, 'userLinks._id': userId },\n      { $set: { 'userLinks.$.permissions': permissions } },\n    );\n  }\n\n  removeLoan({ promotionId, loanId }) {\n    const {\n      promotionOptionLinks = [],\n      attributedPromotionLots = [],\n    } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      promotionOptionLinks: { _id: 1 },\n      attributedPromotionLots: { _id: 1 },\n    });\n\n    this.removeLink({\n      id: promotionId,\n      linkName: 'loans',\n      linkId: loanId,\n    });\n\n    promotionOptionLinks.forEach(({ _id }) => {\n      PromotionOptionService.remove({ promotionOptionId: _id });\n    });\n\n    attributedPromotionLots.forEach(({ _id }) => {\n      PromotionLotService.cancelPromotionLotBooking({ promotionLotId: _id });\n    });\n  }\n\n  editPromotionLoan({\n    loanId,\n    promotionId,\n    promotionLotIds = [],\n    showAllLots,\n  }) {\n    if (showAllLots !== undefined) {\n      this.updateLinkMetadata({\n        id: promotionId,\n        linkName: 'loans',\n        linkId: loanId,\n        metadata: { showAllLots },\n      });\n    }\n\n    const { promotionOptions = [] } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      promotionOptions: {\n        promotionLots: { attributedTo: { _id: 1 }, name: 1 },\n      },\n    });\n\n    // Add any new promotionOptions if they don't already exist\n    promotionLotIds.forEach((promotionLotId) => {\n      const existingPromotionOption = promotionOptions.find(({ promotionLots: promotionOptionLots }) =>\n        promotionOptionLots[0]._id === promotionLotId);\n\n      if (!existingPromotionOption) {\n        PromotionOptionService.insert({ promotionLotId, loanId });\n      }\n    });\n\n    // Remove all promotionOptions that aren't in the specified array\n    const promotionOptionsToRemove = promotionOptions.filter(({ promotionLots }) => promotionLotIds.indexOf(promotionLots[0]._id) < 0);\n\n    promotionOptionsToRemove.forEach((promotionOption) => {\n      // Try to remove this promotion option\n      const { promotionLots, _id: promotionOptionId } = promotionOption;\n      const { attributedTo, name } = promotionLots[0];\n\n      if (attributedTo && attributedTo._id === loanId) {\n        throw new Meteor.Error(`Vous ne pouvez pas supprimer le lot \"${name}\" de ce client, car il lui est attribué.`);\n      }\n\n      PromotionOptionService.remove({ promotionOptionId });\n    });\n  }\n}\n\nexport default new PromotionService();\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/PromotionService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/promotions/server/PromotionService.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  PromotionService: () => PromotionService\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet HTTP_STATUS_CODES;\nmodule.link(\"../../RESTAPI/server/restApiConstants\", {\n  HTTP_STATUS_CODES(v) {\n    HTTP_STATUS_CODES = v;\n  }\n\n}, 1);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 2);\nlet LoanService;\nmodule.link(\"../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 3);\nlet FileService;\nmodule.link(\"../../files/server/FileService\", {\n  default(v) {\n    FileService = v;\n  }\n\n}, 4);\nlet CollectionService;\nmodule.link(\"../../helpers/CollectionService\", {\n  default(v) {\n    CollectionService = v;\n  }\n\n}, 5);\nlet PropertyService;\nmodule.link(\"../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 6);\nlet PromotionLotService;\nmodule.link(\"../../promotionLots/server/PromotionLotService\", {\n  default(v) {\n    PromotionLotService = v;\n  }\n\n}, 7);\nlet PROMOTION_STATUS, PROMOTION_PERMISSIONS_FULL_ACCESS;\nmodule.link(\"../../constants\", {\n  PROMOTION_STATUS(v) {\n    PROMOTION_STATUS = v;\n  },\n\n  PROMOTION_PERMISSIONS_FULL_ACCESS(v) {\n    PROMOTION_PERMISSIONS_FULL_ACCESS = v;\n  }\n\n}, 8);\nlet sendEmail;\nmodule.link(\"../../email/methodDefinitions\", {\n  sendEmail(v) {\n    sendEmail = v;\n  }\n\n}, 9);\nlet EMAIL_IDS;\nmodule.link(\"../../email/emailConstants\", {\n  EMAIL_IDS(v) {\n    EMAIL_IDS = v;\n  }\n\n}, 10);\nlet PROPERTY_CATEGORY;\nmodule.link(\"../../properties/propertyConstants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  }\n\n}, 11);\nlet PromotionOptionService;\nmodule.link(\"../../promotionOptions/server/PromotionOptionService\", {\n  default(v) {\n    PromotionOptionService = v;\n  }\n\n}, 12);\nlet SecurityService;\nmodule.link(\"../../security\", {\n  default(v) {\n    SecurityService = v;\n  }\n\n}, 13);\nlet Promotions;\nmodule.link(\"../promotions\", {\n  default(v) {\n    Promotions = v;\n  }\n\n}, 14);\n\nclass PromotionService extends CollectionService {\n  constructor() {\n    super(Promotions);\n  }\n\n  insert({\n    promotion = {},\n    userId\n  }) {\n    const isAdmin = SecurityService.isUserAdmin(userId);\n    return super.insert((0, _objectSpread2.default)({}, promotion, {\n      userLinks: isAdmin ? undefined : [{\n        _id: userId,\n        permissions: PROMOTION_PERMISSIONS_FULL_ACCESS()\n      }]\n    }));\n  }\n\n  insertPromotionProperty({\n    promotionId,\n    property\n  }) {\n    const {\n      address1,\n      address2,\n      zipCode,\n      city,\n      canton\n    } = this.get(promotionId);\n    const propertyId = PropertyService.insert({\n      property: (0, _objectSpread2.default)({}, property, {\n        address1,\n        address2,\n        zipCode,\n        city,\n        canton,\n        category: PROPERTY_CATEGORY.PROMOTION\n      })\n    });\n    const promotionLotId = PromotionLotService.insert({\n      propertyLinks: [{\n        _id: propertyId\n      }]\n    });\n    this.addLink({\n      id: promotionId,\n      linkName: 'promotionLots',\n      linkId: promotionLotId\n    });\n    this.addLink({\n      id: promotionId,\n      linkName: 'properties',\n      linkId: propertyId\n    });\n    return promotionLotId;\n  }\n\n  update(_ref) {\n    let {\n      promotionId\n    } = _ref,\n        rest = (0, _objectWithoutProperties2.default)(_ref, [\"promotionId\"]);\n\n    const result = this._update((0, _objectSpread2.default)({\n      id: promotionId\n    }, rest));\n\n    const _this$fetchOne = this.fetchOne({\n      $filters: {\n        _id: promotionId\n      },\n      propertyLinks: 1,\n      address1: 1,\n      address2: 1,\n      city: 1,\n      zipCode: 1\n    }),\n          {\n      propertyLinks\n    } = _this$fetchOne,\n          address = (0, _objectWithoutProperties2.default)(_this$fetchOne, [\"propertyLinks\"]);\n\n    propertyLinks.forEach(({\n      _id\n    }) => {\n      PropertyService.update({\n        propertyId: _id,\n        object: address\n      });\n    });\n    return result;\n  }\n\n  remove({\n    promotionId\n  }) {\n    return super.remove(promotionId);\n  }\n\n  inviteUser({\n    promotionId,\n    userId,\n    isNewUser,\n    pro = {},\n    sendInvitation = true,\n    promotionLotIds,\n    showAllLots,\n    shareSolvency\n  }) {\n    const promotion = this.get(promotionId);\n    const user = UserService.get(userId);\n    const allowAddingUsers = promotion.status === PROMOTION_STATUS.OPEN;\n\n    if (!allowAddingUsers) {\n      throw new Meteor.Error(\"Vous ne pouvez pas inviter de clients lorsque la promotion n'est pas en vente, contactez-nous pour valider la promotion.\");\n    }\n\n    if (UserService.hasPromotion({\n      userId,\n      promotionId\n    })) {\n      throw new Meteor.Error(HTTP_STATUS_CODES.CONFLICT, 'Cet utilisateur est déjà invité à cette promotion');\n    }\n\n    const loanId = LoanService.insertPromotionLoan({\n      userId,\n      promotionId,\n      invitedBy: pro._id,\n      showAllLots,\n      promotionLotIds,\n      shareSolvency\n    });\n\n    if (isNewUser) {\n      const admin = UserService.get(promotion.assignedEmployeeId);\n      UserService.assignAdminToUser({\n        userId,\n        adminId: admin && admin._id\n      });\n    }\n\n    const {\n      assignedEmployeeId\n    } = UserService.fetchOne({\n      $filters: {\n        _id: userId\n      },\n      assignedEmployeeId: 1\n    });\n\n    if (sendInvitation) {\n      return this.sendPromotionInvitationEmail({\n        userId,\n        isNewUser,\n        promotionId,\n        firstName: user.firstName,\n        proId: pro._id,\n        adminId: assignedEmployeeId\n      }).then(() => loanId);\n    }\n\n    return Promise.resolve(loanId);\n  }\n\n  sendPromotionInvitationEmail({\n    userId,\n    isNewUser,\n    promotionId,\n    firstName,\n    proId\n  }) {\n    return FileService.listFilesForDocByCategory(promotionId).then(({\n      promotionImage,\n      logos\n    }) => {\n      const coverImageUrl = promotionImage && promotionImage.length > 0 && promotionImage[0].url;\n      const logoUrls = logos && logos.map(({\n        url\n      }) => url);\n      let ctaUrl = Meteor.settings.public.subdomains.app;\n      const promotion = this.get(promotionId);\n      const assignedEmployee = UserService.get(promotion.assignedEmployeeId);\n\n      if (isNewUser) {\n        // Envoyer invitation avec enrollment link\n        ctaUrl = UserService.getEnrollmentUrl({\n          userId\n        });\n      }\n\n      let invitedBy;\n\n      if (proId) {\n        invitedBy = UserService.fetchOne({\n          $filters: {\n            _id: proId\n          },\n          name: 1\n        }).name;\n      }\n\n      return sendEmail.run({\n        emailId: EMAIL_IDS.INVITE_USER_TO_PROMOTION,\n        userId,\n        params: {\n          proUserId: proId,\n          promotion: (0, _objectSpread2.default)({}, promotion, {\n            assignedEmployee\n          }),\n          coverImageUrl,\n          logoUrls,\n          ctaUrl,\n          name: firstName,\n          invitedBy\n        }\n      });\n    });\n  }\n\n  addProUser({\n    promotionId,\n    userId\n  }) {\n    return this.addLink({\n      id: promotionId,\n      linkName: 'users',\n      linkId: userId,\n      metadata: {\n        permissions: {}\n      }\n    });\n  }\n\n  removeProUser({\n    promotionId,\n    userId\n  }) {\n    const loans = LoanService.fetch({\n      $filters: {\n        'promotionLinks.invitedBy': userId,\n        'promotionLinks._id': promotionId\n      }\n    });\n    loans.forEach(({\n      _id: loanId\n    }) => {\n      this.updateLinkMetadata({\n        id: promotionId,\n        linkName: 'loans',\n        linkId: loanId,\n        metadata: {\n          invitedBy: undefined\n        }\n      });\n    });\n    return this.removeLink({\n      id: promotionId,\n      linkName: 'users',\n      linkId: userId\n    });\n  }\n\n  setUserPermissions({\n    promotionId,\n    userId,\n    permissions\n  }) {\n    return Promotions.update({\n      _id: promotionId,\n      'userLinks._id': userId\n    }, {\n      $set: {\n        'userLinks.$.permissions': permissions\n      }\n    });\n  }\n\n  removeLoan({\n    promotionId,\n    loanId\n  }) {\n    const {\n      promotionOptionLinks = [],\n      attributedPromotionLots = []\n    } = LoanService.fetchOne({\n      $filters: {\n        _id: loanId\n      },\n      promotionOptionLinks: {\n        _id: 1\n      },\n      attributedPromotionLots: {\n        _id: 1\n      }\n    });\n    this.removeLink({\n      id: promotionId,\n      linkName: 'loans',\n      linkId: loanId\n    });\n    promotionOptionLinks.forEach(({\n      _id\n    }) => {\n      PromotionOptionService.remove({\n        promotionOptionId: _id\n      });\n    });\n    attributedPromotionLots.forEach(({\n      _id\n    }) => {\n      PromotionLotService.cancelPromotionLotBooking({\n        promotionLotId: _id\n      });\n    });\n  }\n\n  editPromotionLoan({\n    loanId,\n    promotionId,\n    promotionLotIds = [],\n    showAllLots\n  }) {\n    if (showAllLots !== undefined) {\n      this.updateLinkMetadata({\n        id: promotionId,\n        linkName: 'loans',\n        linkId: loanId,\n        metadata: {\n          showAllLots\n        }\n      });\n    }\n\n    const {\n      promotionOptions = []\n    } = LoanService.fetchOne({\n      $filters: {\n        _id: loanId\n      },\n      promotionOptions: {\n        promotionLots: {\n          attributedTo: {\n            _id: 1\n          },\n          name: 1\n        }\n      }\n    }); // Add any new promotionOptions if they don't already exist\n\n    promotionLotIds.forEach(promotionLotId => {\n      const existingPromotionOption = promotionOptions.find(({\n        promotionLots: promotionOptionLots\n      }) => promotionOptionLots[0]._id === promotionLotId);\n\n      if (!existingPromotionOption) {\n        PromotionOptionService.insert({\n          promotionLotId,\n          loanId\n        });\n      }\n    }); // Remove all promotionOptions that aren't in the specified array\n\n    const promotionOptionsToRemove = promotionOptions.filter(({\n      promotionLots\n    }) => promotionLotIds.indexOf(promotionLots[0]._id) < 0);\n    promotionOptionsToRemove.forEach(promotionOption => {\n      // Try to remove this promotion option\n      const {\n        promotionLots,\n        _id: promotionOptionId\n      } = promotionOption;\n      const {\n        attributedTo,\n        name\n      } = promotionLots[0];\n\n      if (attributedTo && attributedTo._id === loanId) {\n        throw new Meteor.Error(`Vous ne pouvez pas supprimer le lot \"${name}\" de ce client, car il lui est attribué.`);\n      }\n\n      PromotionOptionService.remove({\n        promotionOptionId\n      });\n    });\n  }\n\n}\n\nmodule.exportDefault(new PromotionService());","map":{"version":3,"sources":["imports/core/api/promotions/server/PromotionService.js"],"names":["Meteor","constructor","insert","promotion","userId","isAdmin","SecurityService","userLinks","_id","permissions","PROMOTION_PERMISSIONS_FULL_ACCESS","insertPromotionProperty","property","canton","propertyId","category","PROPERTY_CATEGORY","PROMOTION","promotionLotId","propertyLinks","id","linkName","linkId","update","rest","result","address","$filters","promotionId","address1","address2","city","zipCode","PropertyService","object","remove","inviteUser","pro","sendInvitation","shareSolvency","user","UserService","allowAddingUsers","PROMOTION_STATUS","HTTP_STATUS_CODES","loanId","invitedBy","admin","adminId","assignedEmployeeId","firstName","proId","Promise","sendPromotionInvitationEmail","logos","coverImageUrl","promotionImage","logoUrls","url","ctaUrl","assignedEmployee","name","emailId","EMAIL_IDS","params","proUserId","addProUser","metadata","removeProUser","loans","undefined","setUserPermissions","$set","removeLoan","promotionOptionLinks","attributedPromotionLots","PromotionOptionService","promotionOptionId","PromotionLotService","editPromotionLoan","promotionLotIds","showAllLots","promotionOptions","promotionLots","attributedTo","existingPromotionOption","promotionOptionLots","promotionOptionsToRemove","promotionOption"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { HTTP_STATUS_CODES } from '../../RESTAPI/server/restApiConstants';\nimport UserService from '../../users/server/UserService';\nimport LoanService from '../../loans/server/LoanService';\nimport FileService from '../../files/server/FileService';\nimport CollectionService from '../../helpers/CollectionService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport {\n  PROMOTION_STATUS,\n  PROMOTION_PERMISSIONS_FULL_ACCESS,\n} from '../../constants';\nimport { sendEmail } from '../../email/methodDefinitions';\nimport { EMAIL_IDS } from '../../email/emailConstants';\nimport { PROPERTY_CATEGORY } from '../../properties/propertyConstants';\nimport PromotionOptionService from '../../promotionOptions/server/PromotionOptionService';\nimport SecurityService from '../../security';\nimport Promotions from '../promotions';\n\nexport class PromotionService extends CollectionService {\n  constructor() {\n    super(Promotions);\n  }\n\n  insert({ promotion = {}, userId }) {\n    const isAdmin = SecurityService.isUserAdmin(userId);\n\n    return super.insert({\n      ...promotion,\n      userLinks: isAdmin\n        ? undefined\n        : [{ _id: userId, permissions: PROMOTION_PERMISSIONS_FULL_ACCESS() }],\n    });\n  }\n\n  insertPromotionProperty({ promotionId, property }) {\n    const { address1, address2, zipCode, city, canton } = this.get(promotionId);\n    const propertyId = PropertyService.insert({\n      property: {\n        ...property,\n        address1,\n        address2,\n        zipCode,\n        city,\n        canton,\n        category: PROPERTY_CATEGORY.PROMOTION,\n      },\n    });\n    const promotionLotId = PromotionLotService.insert({\n      propertyLinks: [{ _id: propertyId }],\n    });\n    this.addLink({\n      id: promotionId,\n      linkName: 'promotionLots',\n      linkId: promotionLotId,\n    });\n    this.addLink({\n      id: promotionId,\n      linkName: 'properties',\n      linkId: propertyId,\n    });\n\n    return promotionLotId;\n  }\n\n  update({ promotionId, ...rest }) {\n    const result = this._update({ id: promotionId, ...rest });\n\n    const { propertyLinks, ...address } = this.fetchOne({\n      $filters: { _id: promotionId },\n      propertyLinks: 1,\n      address1: 1,\n      address2: 1,\n      city: 1,\n      zipCode: 1,\n    });\n\n    propertyLinks.forEach(({ _id }) => {\n      PropertyService.update({ propertyId: _id, object: address });\n    });\n\n    return result;\n  }\n\n  remove({ promotionId }) {\n    return super.remove(promotionId);\n  }\n\n  inviteUser({\n    promotionId,\n    userId,\n    isNewUser,\n    pro = {},\n    sendInvitation = true,\n    promotionLotIds,\n    showAllLots,\n    shareSolvency,\n  }) {\n    const promotion = this.get(promotionId);\n    const user = UserService.get(userId);\n    const allowAddingUsers = promotion.status === PROMOTION_STATUS.OPEN;\n\n    if (!allowAddingUsers) {\n      throw new Meteor.Error(\"Vous ne pouvez pas inviter de clients lorsque la promotion n'est pas en vente, contactez-nous pour valider la promotion.\");\n    }\n\n    if (UserService.hasPromotion({ userId, promotionId })) {\n      throw new Meteor.Error(\n        HTTP_STATUS_CODES.CONFLICT,\n        'Cet utilisateur est déjà invité à cette promotion',\n      );\n    }\n\n    const loanId = LoanService.insertPromotionLoan({\n      userId,\n      promotionId,\n      invitedBy: pro._id,\n      showAllLots,\n      promotionLotIds,\n      shareSolvency,\n    });\n\n    if (isNewUser) {\n      const admin = UserService.get(promotion.assignedEmployeeId);\n      UserService.assignAdminToUser({ userId, adminId: admin && admin._id });\n    }\n\n    const { assignedEmployeeId } = UserService.fetchOne({\n      $filters: { _id: userId },\n      assignedEmployeeId: 1,\n    });\n\n    if (sendInvitation) {\n      return this.sendPromotionInvitationEmail({\n        userId,\n        isNewUser,\n        promotionId,\n        firstName: user.firstName,\n        proId: pro._id,\n        adminId: assignedEmployeeId,\n      }).then(() => loanId);\n    }\n\n    return Promise.resolve(loanId);\n  }\n\n  sendPromotionInvitationEmail({\n    userId,\n    isNewUser,\n    promotionId,\n    firstName,\n    proId,\n  }) {\n    return FileService.listFilesForDocByCategory(promotionId).then(({ promotionImage, logos }) => {\n      const coverImageUrl = promotionImage && promotionImage.length > 0 && promotionImage[0].url;\n      const logoUrls = logos && logos.map(({ url }) => url);\n\n      let ctaUrl = Meteor.settings.public.subdomains.app;\n      const promotion = this.get(promotionId);\n      const assignedEmployee = UserService.get(promotion.assignedEmployeeId);\n\n      if (isNewUser) {\n        // Envoyer invitation avec enrollment link\n        ctaUrl = UserService.getEnrollmentUrl({ userId });\n      }\n\n      let invitedBy;\n\n      if (proId) {\n        invitedBy = UserService.fetchOne({\n          $filters: { _id: proId },\n          name: 1,\n        }).name;\n      }\n\n      return sendEmail.run({\n        emailId: EMAIL_IDS.INVITE_USER_TO_PROMOTION,\n        userId,\n        params: {\n          proUserId: proId,\n          promotion: { ...promotion, assignedEmployee },\n          coverImageUrl,\n          logoUrls,\n          ctaUrl,\n          name: firstName,\n          invitedBy,\n        },\n      });\n    });\n  }\n\n  addProUser({ promotionId, userId }) {\n    return this.addLink({\n      id: promotionId,\n      linkName: 'users',\n      linkId: userId,\n      metadata: { permissions: {} },\n    });\n  }\n\n  removeProUser({ promotionId, userId }) {\n    const loans = LoanService.fetch({\n      $filters: {\n        'promotionLinks.invitedBy': userId,\n        'promotionLinks._id': promotionId,\n      },\n    });\n\n    loans.forEach(({ _id: loanId }) => {\n      this.updateLinkMetadata({\n        id: promotionId,\n        linkName: 'loans',\n        linkId: loanId,\n        metadata: { invitedBy: undefined },\n      });\n    });\n\n    return this.removeLink({\n      id: promotionId,\n      linkName: 'users',\n      linkId: userId,\n    });\n  }\n\n  setUserPermissions({ promotionId, userId, permissions }) {\n    return Promotions.update(\n      { _id: promotionId, 'userLinks._id': userId },\n      { $set: { 'userLinks.$.permissions': permissions } },\n    );\n  }\n\n  removeLoan({ promotionId, loanId }) {\n    const {\n      promotionOptionLinks = [],\n      attributedPromotionLots = [],\n    } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      promotionOptionLinks: { _id: 1 },\n      attributedPromotionLots: { _id: 1 },\n    });\n\n    this.removeLink({\n      id: promotionId,\n      linkName: 'loans',\n      linkId: loanId,\n    });\n\n    promotionOptionLinks.forEach(({ _id }) => {\n      PromotionOptionService.remove({ promotionOptionId: _id });\n    });\n\n    attributedPromotionLots.forEach(({ _id }) => {\n      PromotionLotService.cancelPromotionLotBooking({ promotionLotId: _id });\n    });\n  }\n\n  editPromotionLoan({\n    loanId,\n    promotionId,\n    promotionLotIds = [],\n    showAllLots,\n  }) {\n    if (showAllLots !== undefined) {\n      this.updateLinkMetadata({\n        id: promotionId,\n        linkName: 'loans',\n        linkId: loanId,\n        metadata: { showAllLots },\n      });\n    }\n\n    const { promotionOptions = [] } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      promotionOptions: {\n        promotionLots: { attributedTo: { _id: 1 }, name: 1 },\n      },\n    });\n\n    // Add any new promotionOptions if they don't already exist\n    promotionLotIds.forEach((promotionLotId) => {\n      const existingPromotionOption = promotionOptions.find(({ promotionLots: promotionOptionLots }) =>\n        promotionOptionLots[0]._id === promotionLotId);\n\n      if (!existingPromotionOption) {\n        PromotionOptionService.insert({ promotionLotId, loanId });\n      }\n    });\n\n    // Remove all promotionOptions that aren't in the specified array\n    const promotionOptionsToRemove = promotionOptions.filter(({ promotionLots }) => promotionLotIds.indexOf(promotionLots[0]._id) < 0);\n\n    promotionOptionsToRemove.forEach((promotionOption) => {\n      // Try to remove this promotion option\n      const { promotionLots, _id: promotionOptionId } = promotionOption;\n      const { attributedTo, name } = promotionLots[0];\n\n      if (attributedTo && attributedTo._id === loanId) {\n        throw new Meteor.Error(`Vous ne pouvez pas supprimer le lot \"${name}\" de ce client, car il lui est attribué.`);\n      }\n\n      PromotionOptionService.remove({ promotionOptionId });\n    });\n  }\n}\n\nexport default new PromotionService();\n"]},"sourceType":"script","hash":"f494f915363a2004c6e32589d3a69a38eef9471f"}

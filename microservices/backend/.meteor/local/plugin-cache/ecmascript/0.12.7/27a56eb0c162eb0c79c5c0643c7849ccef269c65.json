{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/borrowers/server/test/BorrowerService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/borrowers/server/test/BorrowerService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/borrowers/server/test/BorrowerService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/borrowers/server/test/BorrowerService.test.js"],"names":["Factory","resetDatabase","expect","DOCUMENTS","BorrowerService","initialDocuments","borrowerConstants","LoanService","MortgageNoteService","checkDocuments","additionalDocuments","expectedDocuments","shouldCheckRequiredByAdmin","length","to","equal","every","doc","find","id","requiredByAdmin","exist","not","describe","borrower","borrowerId","user","beforeEach","create","_id","it","firstName","_update","object","get","remove","count","borrowerIds","loanId","loanId2","loan","deep","loan2","mortgageNoteId","structures","mortgageNoteIds","addLink","linkName","linkId","forEach","isSwiss","bonusExists","insurance2","description","value","bank3A","insurance3A","insurance3B","expenses","EXPENSES","PERSONAL_LOAN","realEstate","otherFortune","otherIncome","OTHER_INCOME","WELFARE","RESIDENCY_PERMIT","BONUSES","PENSION_FUND_YEARLY_STATEMENT","THIRD_PILLAR_ACCOUNTS","CURRENT_MORTGAGES","EXPENSES_JUSTIFICATION","OTHER_FORTUNE_JUSTIFICATION","OTHER_INCOME_JUSTIFICATION","setAdditionalDoc","additionalDocId","IDENTITY","filter","label","contain"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\n\nimport { DOCUMENTS } from 'core/api/constants';\nimport BorrowerService from '../BorrowerService';\nimport { initialDocuments } from '../../borrowersAdditionalDocuments';\nimport * as borrowerConstants from '../../borrowerConstants';\nimport LoanService from '../../../loans/server/LoanService';\nimport MortgageNoteService from '../../../mortgageNotes/server/MortgageNoteService';\n\nconst checkDocuments = ({\n  additionalDocuments,\n  expectedDocuments,\n  shouldCheckRequiredByAdmin = true,\n}) => {\n  expect(additionalDocuments.length).to.equal(expectedDocuments.length);\n  expect(expectedDocuments.every(doc =>\n    additionalDocuments.find(({ id, requiredByAdmin }) =>\n      id === doc.id\n          && shouldCheckRequiredByAdmin\n          && requiredByAdmin === doc.requiredByAdmin))).to.exist;\n  expect(additionalDocuments.find(doc =>\n    expectedDocuments.every(({ id }) => id !== doc.id))).to.not.exist;\n};\n\ndescribe('BorrowerService ', () => {\n  let borrower;\n  let borrowerId;\n  let user;\n\n  beforeEach(() => {\n    resetDatabase();\n    borrower = Factory.create('borrower');\n    borrowerId = borrower._id;\n  });\n\n  describe('update', () => {\n    it('updates', () => {\n      expect(borrower.firstName).to.not.equal('bob');\n\n      BorrowerService._update({\n        id: borrowerId,\n        object: { firstName: 'bob' },\n      });\n\n      const { firstName } = BorrowerService.get(borrower._id);\n\n      expect(firstName).to.equal('bob');\n    });\n  });\n\n  describe('delete', () => {\n    it('removes a borrower', () => {\n      BorrowerService.remove({ borrowerId });\n\n      expect(BorrowerService.find({}).count()).to.equal(0);\n    });\n\n    it('deletes the borrower if it only has one loan', () => {\n      Factory.create('loan', { borrowerIds: [borrowerId] });\n\n      BorrowerService.remove({ borrowerId });\n\n      expect(BorrowerService.find({}).count()).to.equal(0);\n    });\n\n    it('deletes the borrower if it only has one loan and loanId is passed', () => {\n      const loanId = Factory.create('loan', { borrowerIds: [borrower._id] });\n\n      BorrowerService.remove({ borrowerId, loanId });\n\n      expect(BorrowerService.find({}).count()).to.equal(0);\n    });\n\n    it('only removes the link if the borrower has multiple loans', () => {\n      const loanId = Factory.create('loan', { borrowerIds: [borrowerId] })._id;\n      const loanId2 = Factory.create('loan', { borrowerIds: [borrowerId] })._id;\n\n      BorrowerService.remove({ borrowerId, loanId });\n\n      expect(BorrowerService.find({}).count()).to.equal(1);\n\n      const loan = LoanService.get(loanId);\n      expect(loan.borrowerIds).to.deep.equal([]);\n\n      const loan2 = LoanService.get(loanId2);\n      expect(loan2.borrowerIds).to.deep.equal([borrowerId]);\n    });\n\n    it('removes references of mortgageNotes from loans', () => {\n      const mortgageNoteId = Factory.create('mortgageNote')._id;\n      Factory.create('loan', {\n        borrowerIds: [borrowerId],\n        structures: [{ mortgageNoteIds: [mortgageNoteId], id: '1' }],\n      });\n      Factory.create('loan', {\n        borrowerIds: [borrowerId],\n        structures: [\n          { mortgageNoteIds: [mortgageNoteId, 'someOtherNote'], id: '2' },\n        ],\n      });\n      BorrowerService.addLink({\n        id: borrowerId,\n        linkName: 'mortgageNotes',\n        linkId: mortgageNoteId,\n      });\n\n      BorrowerService.remove({ borrowerId });\n\n      expect(BorrowerService.find({}).count()).to.equal(0, 'borrowers');\n      expect(LoanService.find({}).count()).to.equal(2, 'loans');\n      expect(MortgageNoteService.find({}).count()).to.equal(0, 'mortgageNotes');\n\n      LoanService.find({}).forEach(({ structures }) => {\n        expect(structures[0].mortgageNoteIds.every(id => id !== mortgageNoteId)).to.equal(true);\n      });\n    });\n  });\n\n  describe('additional documents', () => {\n    it('adds initial documents when borrower is created', () => {\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n      expect(additionalDocuments).to.deep.equal(initialDocuments);\n    });\n\n    it('adds conditional documents when condition is met', () => {\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          insurance2: [{ description: 'insurance2', value: 123 }],\n          bank3A: [{ description: 'bank3a', value: 123 }],\n          insurance3A: [],\n          insurance3B: [],\n          expenses: [\n            {\n              description: borrowerConstants.EXPENSES.PERSONAL_LOAN,\n              value: 123,\n            },\n          ],\n          realEstate: [{ value: 456, loan: 123 }],\n          otherFortune: [{ description: 'otherFortune', value: 123 }],\n          otherIncome: [\n            { description: borrowerConstants.OTHER_INCOME.WELFARE, value: 123 },\n          ],\n        },\n      });\n      const { additionalDocuments } = BorrowerService.get(borrower._id);\n      const expectedDocuments = [\n        ...initialDocuments,\n        { id: DOCUMENTS.RESIDENCY_PERMIT },\n        { id: DOCUMENTS.BONUSES },\n        { id: DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT },\n        { id: DOCUMENTS.THIRD_PILLAR_ACCOUNTS },\n        { id: DOCUMENTS.CURRENT_MORTGAGES },\n        { id: DOCUMENTS.EXPENSES_JUSTIFICATION },\n        { id: DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION },\n        { id: DOCUMENTS.OTHER_INCOME_JUSTIFICATION },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n        shouldCheckRequiredByAdmin: false,\n      });\n    });\n\n    it('does not add conditional documents when condition is not met', () => {\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          insurance2: [{ description: 'insurance2', value: 123 }],\n          otherFortune: [{ description: 'otherFortune', value: 123 }],\n          otherIncome: [\n            { description: borrowerConstants.OTHER_INCOME.WELFARE, value: 123 },\n          ],\n        },\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments,\n        { id: DOCUMENTS.RESIDENCY_PERMIT },\n        { id: DOCUMENTS.BONUSES },\n        { id: DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT },\n        { id: DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION },\n        { id: DOCUMENTS.OTHER_INCOME_JUSTIFICATION },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n        shouldCheckRequiredByAdmin: false,\n      });\n    });\n\n    it('removes conditional documents when condition is not met anymore', () => {\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          insurance2: [{ description: 'insurance2', value: 123 }],\n          bank3A: [{ description: 'bank3a', value: 123 }],\n          insurance3A: [],\n          insurance3B: [],\n          expenses: [\n            {\n              description: borrowerConstants.EXPENSES.PERSONAL_LOAN,\n              value: 123,\n            },\n          ],\n          otherFortune: [{ description: 'otherFortune', value: 123 }],\n          otherIncome: [\n            { description: borrowerConstants.OTHER_INCOME.WELFARE, value: 123 },\n          ],\n        },\n      });\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          bank3A: [],\n          expenses: [],\n          insurance2: [{ description: 'insurance2', value: 123 }],\n          otherFortune: [{ description: 'otherFortune', value: 123 }],\n          otherIncome: [\n            { description: borrowerConstants.OTHER_INCOME.WELFARE, value: 123 },\n          ],\n        },\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments,\n        { id: DOCUMENTS.RESIDENCY_PERMIT },\n        { id: DOCUMENTS.BONUSES },\n        { id: DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT },\n        { id: DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION },\n        { id: DOCUMENTS.OTHER_INCOME_JUSTIFICATION },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n        shouldCheckRequiredByAdmin: false,\n      });\n    });\n  });\n\n  describe('setAdditionalDoc', () => {\n    it('adds additional admin required additional doc', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: 'testDoc',\n        requiredByAdmin: true,\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments,\n        { id: 'testDoc', requiredByAdmin: true },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n      });\n    });\n\n    it('adds additional admin not required additional doc', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: 'testDoc',\n        requiredByAdmin: false,\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments,\n        { id: 'testDoc', requiredByAdmin: false },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n      });\n    });\n\n    it('updates additional doc to be required by admin', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: DOCUMENTS.IDENTITY,\n        requiredByAdmin: true,\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments.filter(({ id }) => id !== DOCUMENTS.IDENTITY),\n        { id: DOCUMENTS.IDENTITY, requiredByAdmin: true },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n      });\n    });\n\n    it('updates additional doc to not be required by admin', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: DOCUMENTS.IDENTITY,\n        requiredByAdmin: false,\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments.filter(({ id }) => id !== DOCUMENTS.IDENTITY),\n        { id: DOCUMENTS.IDENTITY, requiredByAdmin: false },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n      });\n    });\n\n    it('adds additional doc with label', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: 'testDoc',\n        requiredByAdmin: true,\n        label: 'test label',\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      expect(additionalDocuments).to.deep.contain({\n        id: 'testDoc',\n        requiredByAdmin: true,\n        label: 'test label',\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/borrowers/server/test/BorrowerService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/borrowers/server/test/BorrowerService.test.js"}},"code":"let Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet DOCUMENTS;\nmodule.link(\"../../../constants\", {\n  DOCUMENTS(v) {\n    DOCUMENTS = v;\n  }\n\n}, 3);\nlet BorrowerService;\nmodule.link(\"../BorrowerService\", {\n  default(v) {\n    BorrowerService = v;\n  }\n\n}, 4);\nlet initialDocuments;\nmodule.link(\"../../borrowersAdditionalDocuments\", {\n  initialDocuments(v) {\n    initialDocuments = v;\n  }\n\n}, 5);\nlet borrowerConstants;\nmodule.link(\"../../borrowerConstants\", {\n  \"*\"(v) {\n    borrowerConstants = v;\n  }\n\n}, 6);\nlet LoanService;\nmodule.link(\"../../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 7);\nlet MortgageNoteService;\nmodule.link(\"../../../mortgageNotes/server/MortgageNoteService\", {\n  default(v) {\n    MortgageNoteService = v;\n  }\n\n}, 8);\n\nconst checkDocuments = ({\n  additionalDocuments,\n  expectedDocuments,\n  shouldCheckRequiredByAdmin = true\n}) => {\n  expect(additionalDocuments.length).to.equal(expectedDocuments.length);\n  expect(expectedDocuments.every(doc => additionalDocuments.find(({\n    id,\n    requiredByAdmin\n  }) => id === doc.id && shouldCheckRequiredByAdmin && requiredByAdmin === doc.requiredByAdmin))).to.exist;\n  expect(additionalDocuments.find(doc => expectedDocuments.every(({\n    id\n  }) => id !== doc.id))).to.not.exist;\n};\n\ndescribe('BorrowerService ', () => {\n  let borrower;\n  let borrowerId;\n  let user;\n  beforeEach(() => {\n    resetDatabase();\n    borrower = Factory.create('borrower');\n    borrowerId = borrower._id;\n  });\n  describe('update', () => {\n    it('updates', () => {\n      expect(borrower.firstName).to.not.equal('bob');\n\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          firstName: 'bob'\n        }\n      });\n\n      const {\n        firstName\n      } = BorrowerService.get(borrower._id);\n      expect(firstName).to.equal('bob');\n    });\n  });\n  describe('delete', () => {\n    it('removes a borrower', () => {\n      BorrowerService.remove({\n        borrowerId\n      });\n      expect(BorrowerService.find({}).count()).to.equal(0);\n    });\n    it('deletes the borrower if it only has one loan', () => {\n      Factory.create('loan', {\n        borrowerIds: [borrowerId]\n      });\n      BorrowerService.remove({\n        borrowerId\n      });\n      expect(BorrowerService.find({}).count()).to.equal(0);\n    });\n    it('deletes the borrower if it only has one loan and loanId is passed', () => {\n      const loanId = Factory.create('loan', {\n        borrowerIds: [borrower._id]\n      });\n      BorrowerService.remove({\n        borrowerId,\n        loanId\n      });\n      expect(BorrowerService.find({}).count()).to.equal(0);\n    });\n    it('only removes the link if the borrower has multiple loans', () => {\n      const loanId = Factory.create('loan', {\n        borrowerIds: [borrowerId]\n      })._id;\n\n      const loanId2 = Factory.create('loan', {\n        borrowerIds: [borrowerId]\n      })._id;\n\n      BorrowerService.remove({\n        borrowerId,\n        loanId\n      });\n      expect(BorrowerService.find({}).count()).to.equal(1);\n      const loan = LoanService.get(loanId);\n      expect(loan.borrowerIds).to.deep.equal([]);\n      const loan2 = LoanService.get(loanId2);\n      expect(loan2.borrowerIds).to.deep.equal([borrowerId]);\n    });\n    it('removes references of mortgageNotes from loans', () => {\n      const mortgageNoteId = Factory.create('mortgageNote')._id;\n\n      Factory.create('loan', {\n        borrowerIds: [borrowerId],\n        structures: [{\n          mortgageNoteIds: [mortgageNoteId],\n          id: '1'\n        }]\n      });\n      Factory.create('loan', {\n        borrowerIds: [borrowerId],\n        structures: [{\n          mortgageNoteIds: [mortgageNoteId, 'someOtherNote'],\n          id: '2'\n        }]\n      });\n      BorrowerService.addLink({\n        id: borrowerId,\n        linkName: 'mortgageNotes',\n        linkId: mortgageNoteId\n      });\n      BorrowerService.remove({\n        borrowerId\n      });\n      expect(BorrowerService.find({}).count()).to.equal(0, 'borrowers');\n      expect(LoanService.find({}).count()).to.equal(2, 'loans');\n      expect(MortgageNoteService.find({}).count()).to.equal(0, 'mortgageNotes');\n      LoanService.find({}).forEach(({\n        structures\n      }) => {\n        expect(structures[0].mortgageNoteIds.every(id => id !== mortgageNoteId)).to.equal(true);\n      });\n    });\n  });\n  describe('additional documents', () => {\n    it('adds initial documents when borrower is created', () => {\n      const {\n        additionalDocuments\n      } = BorrowerService.get(borrowerId);\n      expect(additionalDocuments).to.deep.equal(initialDocuments);\n    });\n    it('adds conditional documents when condition is met', () => {\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          insurance2: [{\n            description: 'insurance2',\n            value: 123\n          }],\n          bank3A: [{\n            description: 'bank3a',\n            value: 123\n          }],\n          insurance3A: [],\n          insurance3B: [],\n          expenses: [{\n            description: borrowerConstants.EXPENSES.PERSONAL_LOAN,\n            value: 123\n          }],\n          realEstate: [{\n            value: 456,\n            loan: 123\n          }],\n          otherFortune: [{\n            description: 'otherFortune',\n            value: 123\n          }],\n          otherIncome: [{\n            description: borrowerConstants.OTHER_INCOME.WELFARE,\n            value: 123\n          }]\n        }\n      });\n\n      const {\n        additionalDocuments\n      } = BorrowerService.get(borrower._id);\n      const expectedDocuments = [...initialDocuments, {\n        id: DOCUMENTS.RESIDENCY_PERMIT\n      }, {\n        id: DOCUMENTS.BONUSES\n      }, {\n        id: DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT\n      }, {\n        id: DOCUMENTS.THIRD_PILLAR_ACCOUNTS\n      }, {\n        id: DOCUMENTS.CURRENT_MORTGAGES\n      }, {\n        id: DOCUMENTS.EXPENSES_JUSTIFICATION\n      }, {\n        id: DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION\n      }, {\n        id: DOCUMENTS.OTHER_INCOME_JUSTIFICATION\n      }];\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n        shouldCheckRequiredByAdmin: false\n      });\n    });\n    it('does not add conditional documents when condition is not met', () => {\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          insurance2: [{\n            description: 'insurance2',\n            value: 123\n          }],\n          otherFortune: [{\n            description: 'otherFortune',\n            value: 123\n          }],\n          otherIncome: [{\n            description: borrowerConstants.OTHER_INCOME.WELFARE,\n            value: 123\n          }]\n        }\n      });\n\n      const {\n        additionalDocuments\n      } = BorrowerService.get(borrowerId);\n      const expectedDocuments = [...initialDocuments, {\n        id: DOCUMENTS.RESIDENCY_PERMIT\n      }, {\n        id: DOCUMENTS.BONUSES\n      }, {\n        id: DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT\n      }, {\n        id: DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION\n      }, {\n        id: DOCUMENTS.OTHER_INCOME_JUSTIFICATION\n      }];\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n        shouldCheckRequiredByAdmin: false\n      });\n    });\n    it('removes conditional documents when condition is not met anymore', () => {\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          insurance2: [{\n            description: 'insurance2',\n            value: 123\n          }],\n          bank3A: [{\n            description: 'bank3a',\n            value: 123\n          }],\n          insurance3A: [],\n          insurance3B: [],\n          expenses: [{\n            description: borrowerConstants.EXPENSES.PERSONAL_LOAN,\n            value: 123\n          }],\n          otherFortune: [{\n            description: 'otherFortune',\n            value: 123\n          }],\n          otherIncome: [{\n            description: borrowerConstants.OTHER_INCOME.WELFARE,\n            value: 123\n          }]\n        }\n      });\n\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          bank3A: [],\n          expenses: [],\n          insurance2: [{\n            description: 'insurance2',\n            value: 123\n          }],\n          otherFortune: [{\n            description: 'otherFortune',\n            value: 123\n          }],\n          otherIncome: [{\n            description: borrowerConstants.OTHER_INCOME.WELFARE,\n            value: 123\n          }]\n        }\n      });\n\n      const {\n        additionalDocuments\n      } = BorrowerService.get(borrowerId);\n      const expectedDocuments = [...initialDocuments, {\n        id: DOCUMENTS.RESIDENCY_PERMIT\n      }, {\n        id: DOCUMENTS.BONUSES\n      }, {\n        id: DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT\n      }, {\n        id: DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION\n      }, {\n        id: DOCUMENTS.OTHER_INCOME_JUSTIFICATION\n      }];\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n        shouldCheckRequiredByAdmin: false\n      });\n    });\n  });\n  describe('setAdditionalDoc', () => {\n    it('adds additional admin required additional doc', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: 'testDoc',\n        requiredByAdmin: true\n      });\n      const {\n        additionalDocuments\n      } = BorrowerService.get(borrowerId);\n      const expectedDocuments = [...initialDocuments, {\n        id: 'testDoc',\n        requiredByAdmin: true\n      }];\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments\n      });\n    });\n    it('adds additional admin not required additional doc', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: 'testDoc',\n        requiredByAdmin: false\n      });\n      const {\n        additionalDocuments\n      } = BorrowerService.get(borrowerId);\n      const expectedDocuments = [...initialDocuments, {\n        id: 'testDoc',\n        requiredByAdmin: false\n      }];\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments\n      });\n    });\n    it('updates additional doc to be required by admin', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: DOCUMENTS.IDENTITY,\n        requiredByAdmin: true\n      });\n      const {\n        additionalDocuments\n      } = BorrowerService.get(borrowerId);\n      const expectedDocuments = [...initialDocuments.filter(({\n        id\n      }) => id !== DOCUMENTS.IDENTITY), {\n        id: DOCUMENTS.IDENTITY,\n        requiredByAdmin: true\n      }];\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments\n      });\n    });\n    it('updates additional doc to not be required by admin', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: DOCUMENTS.IDENTITY,\n        requiredByAdmin: false\n      });\n      const {\n        additionalDocuments\n      } = BorrowerService.get(borrowerId);\n      const expectedDocuments = [...initialDocuments.filter(({\n        id\n      }) => id !== DOCUMENTS.IDENTITY), {\n        id: DOCUMENTS.IDENTITY,\n        requiredByAdmin: false\n      }];\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments\n      });\n    });\n    it('adds additional doc with label', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: 'testDoc',\n        requiredByAdmin: true,\n        label: 'test label'\n      });\n      const {\n        additionalDocuments\n      } = BorrowerService.get(borrowerId);\n      expect(additionalDocuments).to.deep.contain({\n        id: 'testDoc',\n        requiredByAdmin: true,\n        label: 'test label'\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/borrowers/server/test/BorrowerService.test.js"],"names":["checkDocuments","shouldCheckRequiredByAdmin","expect","additionalDocuments","expectedDocuments","doc","requiredByAdmin","id","describe","beforeEach","resetDatabase","borrower","Factory","borrowerId","it","BorrowerService","object","firstName","borrowerIds","loanId","loanId2","loan","LoanService","loan2","mortgageNoteId","structures","mortgageNoteIds","linkName","linkId","MortgageNoteService","isSwiss","bonusExists","insurance2","description","value","bank3A","insurance3A","insurance3B","expenses","borrowerConstants","realEstate","otherFortune","otherIncome","DOCUMENTS","RESIDENCY_PERMIT","BONUSES","PENSION_FUND_YEARLY_STATEMENT","THIRD_PILLAR_ACCOUNTS","CURRENT_MORTGAGES","EXPENSES_JUSTIFICATION","OTHER_FORTUNE_JUSTIFICATION","OTHER_INCOME_JUSTIFICATION","additionalDocId","initialDocuments","label"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\n\nimport { DOCUMENTS } from 'core/api/constants';\nimport BorrowerService from '../BorrowerService';\nimport { initialDocuments } from '../../borrowersAdditionalDocuments';\nimport * as borrowerConstants from '../../borrowerConstants';\nimport LoanService from '../../../loans/server/LoanService';\nimport MortgageNoteService from '../../../mortgageNotes/server/MortgageNoteService';\n\nconst checkDocuments = ({\n  additionalDocuments,\n  expectedDocuments,\n  shouldCheckRequiredByAdmin = true,\n}) => {\n  expect(additionalDocuments.length).to.equal(expectedDocuments.length);\n  expect(expectedDocuments.every(doc =>\n    additionalDocuments.find(({ id, requiredByAdmin }) =>\n      id === doc.id\n          && shouldCheckRequiredByAdmin\n          && requiredByAdmin === doc.requiredByAdmin))).to.exist;\n  expect(additionalDocuments.find(doc =>\n    expectedDocuments.every(({ id }) => id !== doc.id))).to.not.exist;\n};\n\ndescribe('BorrowerService ', () => {\n  let borrower;\n  let borrowerId;\n  let user;\n\n  beforeEach(() => {\n    resetDatabase();\n    borrower = Factory.create('borrower');\n    borrowerId = borrower._id;\n  });\n\n  describe('update', () => {\n    it('updates', () => {\n      expect(borrower.firstName).to.not.equal('bob');\n\n      BorrowerService._update({\n        id: borrowerId,\n        object: { firstName: 'bob' },\n      });\n\n      const { firstName } = BorrowerService.get(borrower._id);\n\n      expect(firstName).to.equal('bob');\n    });\n  });\n\n  describe('delete', () => {\n    it('removes a borrower', () => {\n      BorrowerService.remove({ borrowerId });\n\n      expect(BorrowerService.find({}).count()).to.equal(0);\n    });\n\n    it('deletes the borrower if it only has one loan', () => {\n      Factory.create('loan', { borrowerIds: [borrowerId] });\n\n      BorrowerService.remove({ borrowerId });\n\n      expect(BorrowerService.find({}).count()).to.equal(0);\n    });\n\n    it('deletes the borrower if it only has one loan and loanId is passed', () => {\n      const loanId = Factory.create('loan', { borrowerIds: [borrower._id] });\n\n      BorrowerService.remove({ borrowerId, loanId });\n\n      expect(BorrowerService.find({}).count()).to.equal(0);\n    });\n\n    it('only removes the link if the borrower has multiple loans', () => {\n      const loanId = Factory.create('loan', { borrowerIds: [borrowerId] })._id;\n      const loanId2 = Factory.create('loan', { borrowerIds: [borrowerId] })._id;\n\n      BorrowerService.remove({ borrowerId, loanId });\n\n      expect(BorrowerService.find({}).count()).to.equal(1);\n\n      const loan = LoanService.get(loanId);\n      expect(loan.borrowerIds).to.deep.equal([]);\n\n      const loan2 = LoanService.get(loanId2);\n      expect(loan2.borrowerIds).to.deep.equal([borrowerId]);\n    });\n\n    it('removes references of mortgageNotes from loans', () => {\n      const mortgageNoteId = Factory.create('mortgageNote')._id;\n      Factory.create('loan', {\n        borrowerIds: [borrowerId],\n        structures: [{ mortgageNoteIds: [mortgageNoteId], id: '1' }],\n      });\n      Factory.create('loan', {\n        borrowerIds: [borrowerId],\n        structures: [\n          { mortgageNoteIds: [mortgageNoteId, 'someOtherNote'], id: '2' },\n        ],\n      });\n      BorrowerService.addLink({\n        id: borrowerId,\n        linkName: 'mortgageNotes',\n        linkId: mortgageNoteId,\n      });\n\n      BorrowerService.remove({ borrowerId });\n\n      expect(BorrowerService.find({}).count()).to.equal(0, 'borrowers');\n      expect(LoanService.find({}).count()).to.equal(2, 'loans');\n      expect(MortgageNoteService.find({}).count()).to.equal(0, 'mortgageNotes');\n\n      LoanService.find({}).forEach(({ structures }) => {\n        expect(structures[0].mortgageNoteIds.every(id => id !== mortgageNoteId)).to.equal(true);\n      });\n    });\n  });\n\n  describe('additional documents', () => {\n    it('adds initial documents when borrower is created', () => {\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n      expect(additionalDocuments).to.deep.equal(initialDocuments);\n    });\n\n    it('adds conditional documents when condition is met', () => {\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          insurance2: [{ description: 'insurance2', value: 123 }],\n          bank3A: [{ description: 'bank3a', value: 123 }],\n          insurance3A: [],\n          insurance3B: [],\n          expenses: [\n            {\n              description: borrowerConstants.EXPENSES.PERSONAL_LOAN,\n              value: 123,\n            },\n          ],\n          realEstate: [{ value: 456, loan: 123 }],\n          otherFortune: [{ description: 'otherFortune', value: 123 }],\n          otherIncome: [\n            { description: borrowerConstants.OTHER_INCOME.WELFARE, value: 123 },\n          ],\n        },\n      });\n      const { additionalDocuments } = BorrowerService.get(borrower._id);\n      const expectedDocuments = [\n        ...initialDocuments,\n        { id: DOCUMENTS.RESIDENCY_PERMIT },\n        { id: DOCUMENTS.BONUSES },\n        { id: DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT },\n        { id: DOCUMENTS.THIRD_PILLAR_ACCOUNTS },\n        { id: DOCUMENTS.CURRENT_MORTGAGES },\n        { id: DOCUMENTS.EXPENSES_JUSTIFICATION },\n        { id: DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION },\n        { id: DOCUMENTS.OTHER_INCOME_JUSTIFICATION },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n        shouldCheckRequiredByAdmin: false,\n      });\n    });\n\n    it('does not add conditional documents when condition is not met', () => {\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          insurance2: [{ description: 'insurance2', value: 123 }],\n          otherFortune: [{ description: 'otherFortune', value: 123 }],\n          otherIncome: [\n            { description: borrowerConstants.OTHER_INCOME.WELFARE, value: 123 },\n          ],\n        },\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments,\n        { id: DOCUMENTS.RESIDENCY_PERMIT },\n        { id: DOCUMENTS.BONUSES },\n        { id: DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT },\n        { id: DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION },\n        { id: DOCUMENTS.OTHER_INCOME_JUSTIFICATION },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n        shouldCheckRequiredByAdmin: false,\n      });\n    });\n\n    it('removes conditional documents when condition is not met anymore', () => {\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          insurance2: [{ description: 'insurance2', value: 123 }],\n          bank3A: [{ description: 'bank3a', value: 123 }],\n          insurance3A: [],\n          insurance3B: [],\n          expenses: [\n            {\n              description: borrowerConstants.EXPENSES.PERSONAL_LOAN,\n              value: 123,\n            },\n          ],\n          otherFortune: [{ description: 'otherFortune', value: 123 }],\n          otherIncome: [\n            { description: borrowerConstants.OTHER_INCOME.WELFARE, value: 123 },\n          ],\n        },\n      });\n      BorrowerService._update({\n        id: borrowerId,\n        object: {\n          isSwiss: false,\n          bonusExists: true,\n          bank3A: [],\n          expenses: [],\n          insurance2: [{ description: 'insurance2', value: 123 }],\n          otherFortune: [{ description: 'otherFortune', value: 123 }],\n          otherIncome: [\n            { description: borrowerConstants.OTHER_INCOME.WELFARE, value: 123 },\n          ],\n        },\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments,\n        { id: DOCUMENTS.RESIDENCY_PERMIT },\n        { id: DOCUMENTS.BONUSES },\n        { id: DOCUMENTS.PENSION_FUND_YEARLY_STATEMENT },\n        { id: DOCUMENTS.OTHER_FORTUNE_JUSTIFICATION },\n        { id: DOCUMENTS.OTHER_INCOME_JUSTIFICATION },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n        shouldCheckRequiredByAdmin: false,\n      });\n    });\n  });\n\n  describe('setAdditionalDoc', () => {\n    it('adds additional admin required additional doc', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: 'testDoc',\n        requiredByAdmin: true,\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments,\n        { id: 'testDoc', requiredByAdmin: true },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n      });\n    });\n\n    it('adds additional admin not required additional doc', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: 'testDoc',\n        requiredByAdmin: false,\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments,\n        { id: 'testDoc', requiredByAdmin: false },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n      });\n    });\n\n    it('updates additional doc to be required by admin', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: DOCUMENTS.IDENTITY,\n        requiredByAdmin: true,\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments.filter(({ id }) => id !== DOCUMENTS.IDENTITY),\n        { id: DOCUMENTS.IDENTITY, requiredByAdmin: true },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n      });\n    });\n\n    it('updates additional doc to not be required by admin', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: DOCUMENTS.IDENTITY,\n        requiredByAdmin: false,\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      const expectedDocuments = [\n        ...initialDocuments.filter(({ id }) => id !== DOCUMENTS.IDENTITY),\n        { id: DOCUMENTS.IDENTITY, requiredByAdmin: false },\n      ];\n\n      checkDocuments({\n        additionalDocuments,\n        expectedDocuments,\n      });\n    });\n\n    it('adds additional doc with label', () => {\n      BorrowerService.setAdditionalDoc({\n        id: borrowerId,\n        additionalDocId: 'testDoc',\n        requiredByAdmin: true,\n        label: 'test label',\n      });\n      const { additionalDocuments } = BorrowerService.get(borrowerId);\n\n      expect(additionalDocuments).to.deep.contain({\n        id: 'testDoc',\n        requiredByAdmin: true,\n        label: 'test label',\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"27a56eb0c162eb0c79c5c0643c7849ccef269c65"}

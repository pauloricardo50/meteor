{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:mocha/server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/meteortesting:mocha/server.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:mocha/server.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:mocha/server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/meteortesting:mocha/server.js"}},"code":"module.export({\n  start: () => start\n});\nlet mochaInstance;\nmodule.link(\"meteor/meteortesting:mocha-core\", {\n  mochaInstance(v) {\n    mochaInstance = v;\n  }\n\n}, 0);\nlet startBrowser;\nmodule.link(\"meteor/meteortesting:browser-tests\", {\n  startBrowser(v) {\n    startBrowser = v;\n  }\n\n}, 1);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 2);\nlet setArgs;\nmodule.link(\"./runtimeArgs\", {\n  default(v) {\n    setArgs = v;\n  }\n\n}, 3);\nlet handleCoverage;\nmodule.link(\"./server.handleCoverage\", {\n  default(v) {\n    handleCoverage = v;\n  }\n\n}, 4);\n\nif (Package['browser-policy-common'] && Package['browser-policy-content']) {\n  const {\n    BrowserPolicy\n  } = Package['browser-policy-common']; // Allow the remote mocha.css file to be inserted, in case any CSP stuff\n  // exists for the domain.\n\n  BrowserPolicy.content.allowInlineStyles();\n  BrowserPolicy.content.allowStyleOrigin('https://cdn.rawgit.com');\n}\n\nconst {\n  mochaOptions,\n  runnerOptions,\n  coverageOptions\n} = setArgs();\nconst {\n  grep,\n  invert,\n  reporter,\n  serverReporter,\n  serverOutput,\n  clientOutput\n} = mochaOptions || {}; // Since intermingling client and server log lines would be confusing,\n// the idea here is to buffer all client logs until server tests have\n// finished running and then dump the buffer to the screen and continue\n// logging in real time after that if client tests are still running.\n\nlet serverTestsDone = false;\nconst clientLines = [];\n\nfunction clientLogBuffer(line) {\n  if (serverTestsDone) {\n    // printing and removing the extra new-line character. The first was added by the client log, the second here.\n    console.log(line.replace(/\\n$/, ''));\n  } else {\n    clientLines.push(line);\n  }\n}\n\nfunction printHeader(type) {\n  const lines = ['\\n--------------------------------', Meteor.isAppTest ? `--- RUNNING APP ${type} TESTS ---` : `----- RUNNING ${type} TESTS -----`, '--------------------------------\\n'];\n  lines.forEach(line => {\n    if (type === 'CLIENT') {\n      clientLogBuffer(line);\n    } else {\n      console.log(line);\n    }\n  });\n}\n\nlet callCount = 0;\nlet clientFailures = 0;\nlet serverFailures = 0;\n\nfunction exitIfDone(type, failures) {\n  callCount++;\n\n  if (type === 'client') {\n    clientFailures = failures;\n  } else {\n    serverFailures = failures;\n    serverTestsDone = true;\n    clientLines.forEach(line => {\n      // printing and removing the extra new-line character. The first was added by the client log, the second here.\n      console.log(line.replace(/\\n$/, ''));\n    });\n  }\n\n  if (callCount === 2) {\n    // We only need to show this final summary if we ran both kinds of tests in the same console\n    if (runnerOptions.runServer && runnerOptions.runClient && runnerOptions.browserDriver) {\n      console.log('All tests finished!\\n');\n      console.log('--------------------------------');\n      console.log(`${Meteor.isAppTest ? 'APP ' : ''}SERVER FAILURES: ${serverFailures}`);\n      console.log(`${Meteor.isAppTest ? 'APP ' : ''}CLIENT FAILURES: ${clientFailures}`);\n      console.log('--------------------------------');\n    }\n\n    handleCoverage(coverageOptions).then(() => {\n      // if no env for TEST_WATCH, tests should exit when done\n      if (!runnerOptions.testWatch) {\n        if (clientFailures + serverFailures > 0) {\n          process.exit(1); // exit with non-zero status if there were failures\n        } else {\n          process.exit(0);\n        }\n      }\n    });\n  }\n}\n\nfunction serverTests(cb) {\n  if (!runnerOptions.runServer) {\n    console.log('SKIPPING SERVER TESTS BECAUSE TEST_SERVER=0');\n    exitIfDone('server', 0);\n    if (cb) cb();\n    return;\n  }\n\n  printHeader('SERVER');\n  if (grep) mochaInstance.grep(grep);\n  if (invert) mochaInstance.options.invert = invert;\n  mochaInstance.options.useColors = true; // We need to set the reporter when the tests actually run to ensure no conflicts with\n  // other test driver packages that may be added to the app but are not actually being\n  // used on this run.\n\n  mochaInstance.reporter(serverReporter || reporter || 'spec', {\n    output: serverOutput\n  });\n  mochaInstance.run(failureCount => {\n    if (typeof failureCount !== 'number') {\n      console.log('Mocha did not return a failure count for server tests as expected');\n      exitIfDone('server', 1);\n    } else {\n      exitIfDone('server', failureCount);\n    }\n\n    if (cb) cb();\n  });\n}\n\nfunction clientTests() {\n  if (!runnerOptions.runClient) {\n    console.log('SKIPPING CLIENT TESTS BECAUSE TEST_CLIENT=0');\n    exitIfDone('client', 0);\n    return;\n  }\n\n  if (!runnerOptions.browserDriver) {\n    console.log('Load the app in a browser to run client tests, or set the TEST_BROWSER_DRIVER environment variable. ' + 'See https://github.com/meteortesting/meteor-mocha/blob/master/README.md#run-app-tests');\n    exitIfDone('client', 0);\n    return;\n  }\n\n  printHeader('CLIENT');\n  startBrowser({\n    stdout(data) {\n      if (clientOutput) {\n        fs.appendFileSync(clientOutput, data.toString());\n      } else {\n        clientLogBuffer(data.toString());\n      }\n    },\n\n    writebuffer(data) {\n      if (clientOutput) {\n        fs.appendFileSync(clientOutput, data.toString());\n      } else {\n        clientLogBuffer(data.toString());\n      }\n    },\n\n    stderr(data) {\n      if (clientOutput) {\n        fs.appendFileSync(clientOutput, data.toString());\n      } else {\n        clientLogBuffer(data.toString());\n      }\n    },\n\n    done(failureCount) {\n      if (typeof failureCount !== 'number') {\n        console.log('The browser driver package did not return a failure count for server tests as expected');\n        exitIfDone('client', 1);\n      } else {\n        exitIfDone('client', failureCount);\n      }\n    }\n\n  });\n} // Before Meteor calls the `start` function, app tests will be parsed and loaded by Mocha\n\n\nfunction start() {\n  // Run in PARALLEL or SERIES\n  // Running in series is a better default since it avoids db and state conflicts for newbs.\n  // If you want parallel you will know these risks.\n  if (runnerOptions.runParallel) {\n    console.log('Warning: Running in parallel can cause side-effects from state/db sharing');\n    serverTests();\n    clientTests();\n  } else {\n    serverTests(() => {\n      clientTests();\n    });\n  }\n}","map":{"version":3,"sources":["packages/meteortesting:mocha/server.js"],"names":["module","export","start","mochaInstance","link","v","startBrowser","fs","default","setArgs","handleCoverage","Package","BrowserPolicy","content","allowInlineStyles","allowStyleOrigin","mochaOptions","runnerOptions","coverageOptions","grep","invert","reporter","serverReporter","serverOutput","clientOutput","serverTestsDone","clientLines","clientLogBuffer","line","console","log","replace","push","printHeader","type","lines","Meteor","isAppTest","forEach","callCount","clientFailures","serverFailures","exitIfDone","failures","runServer","runClient","browserDriver","then","testWatch","process","exit","serverTests","cb","options","useColors","output","run","failureCount","clientTests","stdout","data","appendFileSync","toString","writebuffer","stderr","done","runParallel"],"mappings":"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","sourcesContent":["/* global Package */\nimport { mochaInstance } from 'meteor/meteortesting:mocha-core';\nimport { startBrowser } from 'meteor/meteortesting:browser-tests';\n\nimport fs from 'fs';\n\nimport setArgs from './runtimeArgs';\nimport handleCoverage from './server.handleCoverage';\n\nif (Package['browser-policy-common'] && Package['browser-policy-content']) {\n  const { BrowserPolicy } = Package['browser-policy-common'];\n\n  // Allow the remote mocha.css file to be inserted, in case any CSP stuff\n  // exists for the domain.\n  BrowserPolicy.content.allowInlineStyles();\n  BrowserPolicy.content.allowStyleOrigin('https://cdn.rawgit.com');\n}\n\nconst { mochaOptions, runnerOptions, coverageOptions } = setArgs();\nconst { grep, invert, reporter, serverReporter, serverOutput, clientOutput } = mochaOptions || {};\n\n// Since intermingling client and server log lines would be confusing,\n// the idea here is to buffer all client logs until server tests have\n// finished running and then dump the buffer to the screen and continue\n// logging in real time after that if client tests are still running.\n\nlet serverTestsDone = false;\nconst clientLines = [];\nfunction clientLogBuffer(line) {\n  if (serverTestsDone) {\n    // printing and removing the extra new-line character. The first was added by the client log, the second here.\n    console.log(line.replace(/\\n$/, ''));\n  } else {\n    clientLines.push(line);\n  }\n}\n\nfunction printHeader(type) {\n  const lines = [\n    '\\n--------------------------------',\n    Meteor.isAppTest ? `--- RUNNING APP ${type} TESTS ---` : `----- RUNNING ${type} TESTS -----`,\n    '--------------------------------\\n',\n  ];\n  lines.forEach((line) => {\n    if (type === 'CLIENT') {\n      clientLogBuffer(line);\n    } else {\n      console.log(line);\n    }\n  });\n}\n\nlet callCount = 0;\nlet clientFailures = 0;\nlet serverFailures = 0;\nfunction exitIfDone(type, failures) {\n  callCount++;\n  if (type === 'client') {\n    clientFailures = failures;\n  } else {\n    serverFailures = failures;\n    serverTestsDone = true;\n    clientLines.forEach((line) => {\n      // printing and removing the extra new-line character. The first was added by the client log, the second here.\n      console.log(line.replace(/\\n$/, ''));\n    });\n  }\n\n  if (callCount === 2) {\n    // We only need to show this final summary if we ran both kinds of tests in the same console\n    if (runnerOptions.runServer && runnerOptions.runClient && runnerOptions.browserDriver) {\n      console.log('All tests finished!\\n');\n      console.log('--------------------------------');\n      console.log(`${Meteor.isAppTest ? 'APP ' : ''}SERVER FAILURES: ${serverFailures}`);\n      console.log(`${Meteor.isAppTest ? 'APP ' : ''}CLIENT FAILURES: ${clientFailures}`);\n      console.log('--------------------------------');\n    }\n\n    handleCoverage(coverageOptions).then(() => {\n      // if no env for TEST_WATCH, tests should exit when done\n      if (!runnerOptions.testWatch) {\n        if (clientFailures + serverFailures > 0) {\n          process.exit(1); // exit with non-zero status if there were failures\n        } else {\n          process.exit(0);\n        }\n      }\n    });\n  }\n}\n\nfunction serverTests(cb) {\n  if (!runnerOptions.runServer) {\n    console.log('SKIPPING SERVER TESTS BECAUSE TEST_SERVER=0');\n    exitIfDone('server', 0);\n    if (cb) cb();\n    return;\n  }\n\n  printHeader('SERVER');\n\n  if (grep) mochaInstance.grep(grep);\n  if (invert) mochaInstance.options.invert = invert;\n  mochaInstance.options.useColors = true;\n\n  // We need to set the reporter when the tests actually run to ensure no conflicts with\n  // other test driver packages that may be added to the app but are not actually being\n  // used on this run.\n  mochaInstance.reporter(serverReporter || reporter || 'spec', {\n    output: serverOutput,\n  });\n\n  mochaInstance.run((failureCount) => {\n    if (typeof failureCount !== 'number') {\n      console.log('Mocha did not return a failure count for server tests as expected');\n      exitIfDone('server', 1);\n    } else {\n      exitIfDone('server', failureCount);\n    }\n    if (cb) cb();\n  });\n}\n\nfunction clientTests() {\n  if (!runnerOptions.runClient) {\n    console.log('SKIPPING CLIENT TESTS BECAUSE TEST_CLIENT=0');\n    exitIfDone('client', 0);\n    return;\n  }\n\n  if (!runnerOptions.browserDriver) {\n    console.log('Load the app in a browser to run client tests, or set the TEST_BROWSER_DRIVER environment variable. '\n      + 'See https://github.com/meteortesting/meteor-mocha/blob/master/README.md#run-app-tests');\n    exitIfDone('client', 0);\n    return;\n  }\n\n  printHeader('CLIENT');\n\n  startBrowser({\n    stdout(data) {\n      if (clientOutput) {\n        fs.appendFileSync(clientOutput, data.toString());\n      } else {\n        clientLogBuffer(data.toString());\n      }\n    },\n    writebuffer(data) {\n      if (clientOutput) {\n        fs.appendFileSync(clientOutput, data.toString());\n      } else {\n        clientLogBuffer(data.toString());\n      }\n    },\n    stderr(data) {\n      if (clientOutput) {\n        fs.appendFileSync(clientOutput, data.toString());\n      } else {\n        clientLogBuffer(data.toString());\n      }\n    },\n    done(failureCount) {\n      if (typeof failureCount !== 'number') {\n        console.log('The browser driver package did not return a failure count for server tests as expected');\n        exitIfDone('client', 1);\n      } else {\n        exitIfDone('client', failureCount);\n      }\n    },\n  });\n}\n\n// Before Meteor calls the `start` function, app tests will be parsed and loaded by Mocha\nfunction start() {\n  // Run in PARALLEL or SERIES\n  // Running in series is a better default since it avoids db and state conflicts for newbs.\n  // If you want parallel you will know these risks.\n  if (runnerOptions.runParallel) {\n    console.log('Warning: Running in parallel can cause side-effects from state/db sharing');\n\n    serverTests();\n    clientTests();\n  } else {\n    serverTests(() => {\n      clientTests();\n    });\n  }\n}\n\nexport { start };\n"]},"sourceType":"script","hash":"659c394c1b236e9027450f1101159426bbcd59a0"}

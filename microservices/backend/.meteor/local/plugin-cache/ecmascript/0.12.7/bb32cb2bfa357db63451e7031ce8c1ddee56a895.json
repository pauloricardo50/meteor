{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/lmieulet:meteor-coverage/server/services/core.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/lmieulet:meteor-coverage/server/services/core.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/lmieulet:meteor-coverage/server/services/core.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/lmieulet:meteor-coverage/server/services/core.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/lmieulet:meteor-coverage/server/services/core.js"}},"code":"let Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 1);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 2);\n\nconst Coverage = Npm.require('istanbul-lib-coverage');\n\nlet mergeCoverageWith, importCoverage, getCoverageObject;\n\ngetCoverageObject = function () {\n  /* istanbul ignore next: default assignment */\n  global.__coverage__ = global.__coverage__ || {};\n  return global.__coverage__;\n};\n\nsetCoverageObject = function (obj) {\n  global.__coverage__ = obj;\n};\n\nmergeCoverageWith = function (obj) {\n  /* istanbul ignore else */\n  if (!obj) {\n    return;\n  }\n\n  var coverage = getCoverageObject();\n  var coverageMap = Coverage.createCoverageMap(coverage);\n  coverageMap.addFileCoverage(obj);\n  setCoverageObject(coverageMap.toJSON());\n};\n/* istanbul ignore next: default assignment */\n\n\nimportCoverage = function (res, options = {}) {\n  Log.info('import coverage');\n  /* istanbul ignore next: ternary operator */\n\n  const filename = options.filename ? options.filename : 'report.json';\n  const reportPath = path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER, filename);\n  fs.exists(reportPath, function (exists) {\n    /* istanbul ignore else */\n    if (!exists) {\n      res.end(JSON.stringify({\n        type: 'failed',\n        message: 'report file not found: reportPath=' + reportPath + ' COVERAGE_APP_FOLDER=' + Conf.COVERAGE_APP_FOLDER\n      }));\n      return;\n    }\n\n    fs.readFile(reportPath, 'utf8', function (err, fileContent) {\n      /* istanbul ignore else */\n      if (err) {\n        res.end(JSON.stringify({\n          type: 'failed',\n          message: 'failed to read report file: ' + reportPath\n        }));\n        return;\n      }\n\n      let coverageObj = JSON.parse(fileContent);\n\n      for (let property in coverageObj) {\n        /* istanbul ignore else */\n        if (coverageObj.hasOwnProperty(property)) {\n          Core.mergeCoverageWith(coverageObj[property]);\n        }\n      }\n\n      res.end('{\"type\":\"success\"}');\n    });\n  });\n};\n\nmodule.exportDefault(Core = {\n  mergeCoverageWith,\n  importCoverage,\n  getCoverageObject\n});","map":{"version":3,"sources":["packages/lmieulet:meteor-coverage/server/services/core.js"],"names":["Conf","module","link","default","v","path","fs","Coverage","Npm","require","mergeCoverageWith","importCoverage","getCoverageObject","global","__coverage__","setCoverageObject","obj","coverage","coverageMap","createCoverageMap","addFileCoverage","toJSON","res","options","Log","info","filename","reportPath","join","COVERAGE_APP_FOLDER","COVERAGE_EXPORT_FOLDER","exists","end","JSON","stringify","type","message","readFile","err","fileContent","coverageObj","parse","property","hasOwnProperty","Core","exportDefault"],"mappings":"AAAA,IAAIA,IAAJ;AAASC,MAAM,CAACC,IAAP,CAAY,mBAAZ,EAAgC;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACJ,IAAAA,IAAI,GAACI,CAAL;AAAO;;AAAnB,CAAhC,EAAqD,CAArD;AAAwD,IAAIC,IAAJ;AAASJ,MAAM,CAACC,IAAP,CAAY,MAAZ,EAAmB;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACC,IAAAA,IAAI,GAACD,CAAL;AAAO;;AAAnB,CAAnB,EAAwC,CAAxC;AAA2C,IAAIE,EAAJ;AAAOL,MAAM,CAACC,IAAP,CAAY,IAAZ,EAAiB;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACE,IAAAA,EAAE,GAACF,CAAH;AAAK;;AAAjB,CAAjB,EAAoC,CAApC;;AAG5H,MAAMG,QAAQ,GAAGC,GAAG,CAACC,OAAJ,CAAY,uBAAZ,CAAjB;;AAEA,IAAIC,iBAAJ,EAAuBC,cAAvB,EAAuCC,iBAAvC;;AAEAA,iBAAiB,GAAG,YAAY;AAC9B;AACAC,EAAAA,MAAM,CAACC,YAAP,GAAsBD,MAAM,CAACC,YAAP,IAAuB,EAA7C;AACA,SAAOD,MAAM,CAACC,YAAd;AACD,CAJD;;AAMAC,iBAAiB,GAAG,UAAUC,GAAV,EAAe;AACjCH,EAAAA,MAAM,CAACC,YAAP,GAAsBE,GAAtB;AACD,CAFD;;AAIAN,iBAAiB,GAAG,UAAUM,GAAV,EAAe;AACjC;AACA,MAAI,CAACA,GAAL,EAAU;AACR;AACD;;AACD,MAAIC,QAAQ,GAAGL,iBAAiB,EAAhC;AACA,MAAIM,WAAW,GAAGX,QAAQ,CAACY,iBAAT,CAA2BF,QAA3B,CAAlB;AACAC,EAAAA,WAAW,CAACE,eAAZ,CAA4BJ,GAA5B;AACAD,EAAAA,iBAAiB,CAACG,WAAW,CAACG,MAAZ,EAAD,CAAjB;AACD,CATD;AAYA;;;AACAV,cAAc,GAAG,UAAUW,GAAV,EAAeC,OAAO,GAAG,EAAzB,EAA6B;AAC5CC,EAAAA,GAAG,CAACC,IAAJ,CAAS,iBAAT;AACA;;AACA,QAAMC,QAAQ,GAAGH,OAAO,CAACG,QAAR,GAAmBH,OAAO,CAACG,QAA3B,GAAsC,aAAvD;AACA,QAAMC,UAAU,GAAGtB,IAAI,CAACuB,IAAL,CAAU5B,IAAI,CAAC6B,mBAAf,EAAoC7B,IAAI,CAAC8B,sBAAzC,EAAiEJ,QAAjE,CAAnB;AACApB,EAAAA,EAAE,CAACyB,MAAH,CAAUJ,UAAV,EAAsB,UAAUI,MAAV,EAAkB;AACtC;AACA,QAAI,CAACA,MAAL,EAAa;AACXT,MAAAA,GAAG,CAACU,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,OAAO,EAAE,uCAAuCT,UAAvC,GAAoD,uBAApD,GAA8E3B,IAAI,CAAC6B;AAA9G,OAAf,CAAR;AACA;AACD;;AACDvB,IAAAA,EAAE,CAAC+B,QAAH,CAAYV,UAAZ,EAAwB,MAAxB,EAAgC,UAAUW,GAAV,EAAeC,WAAf,EAA4B;AAC1D;AACA,UAAID,GAAJ,EAAS;AACPhB,QAAAA,GAAG,CAACU,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAe;AAAEC,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,OAAO,EAAE,iCAAiCT;AAA5D,SAAf,CAAR;AACA;AACD;;AACD,UAAIa,WAAW,GAAGP,IAAI,CAACQ,KAAL,CAAWF,WAAX,CAAlB;;AACA,WAAK,IAAIG,QAAT,IAAqBF,WAArB,EAAkC;AAChC;AACA,YAAIA,WAAW,CAACG,cAAZ,CAA2BD,QAA3B,CAAJ,EAA0C;AACxCE,UAAAA,IAAI,CAAClC,iBAAL,CAAuB8B,WAAW,CAACE,QAAD,CAAlC;AACD;AACF;;AACDpB,MAAAA,GAAG,CAACU,GAAJ,CAAQ,oBAAR;AACD,KAdD;AAeD,GArBD;AAsBD,CA3BD;;AA9BA/B,MAAM,CAAC4C,aAAP,CA0DeD,IAAI,GAAG;AACpBlC,EAAAA,iBADoB;AAEpBC,EAAAA,cAFoB;AAGpBC,EAAAA;AAHoB,CA1DtB","sourcesContent":["import Conf from './../context/conf';\nimport path from 'path';\nimport fs from 'fs';\nconst Coverage = Npm.require('istanbul-lib-coverage');\n\nlet mergeCoverageWith, importCoverage, getCoverageObject;\n\ngetCoverageObject = function () {\n  /* istanbul ignore next: default assignment */\n  global.__coverage__ = global.__coverage__ || {};\n  return global.__coverage__;\n};\n\nsetCoverageObject = function (obj) {\n  global.__coverage__ = obj;\n};\n\nmergeCoverageWith = function (obj) {\n  /* istanbul ignore else */\n  if (!obj) {\n    return;\n  }\n  var coverage = getCoverageObject();\n  var coverageMap = Coverage.createCoverageMap(coverage);\n  coverageMap.addFileCoverage(obj);\n  setCoverageObject(coverageMap.toJSON());\n};\n\n\n/* istanbul ignore next: default assignment */\nimportCoverage = function (res, options = {}) {\n  Log.info('import coverage');\n  /* istanbul ignore next: ternary operator */\n  const filename = options.filename ? options.filename : 'report.json';\n  const reportPath = path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER, filename);\n  fs.exists(reportPath, function (exists) {\n    /* istanbul ignore else */\n    if (!exists) {\n      res.end(JSON.stringify({ type: 'failed', message: 'report file not found: reportPath=' + reportPath + ' COVERAGE_APP_FOLDER=' + Conf.COVERAGE_APP_FOLDER }));\n      return;\n    }\n    fs.readFile(reportPath, 'utf8', function (err, fileContent) {\n      /* istanbul ignore else */\n      if (err) {\n        res.end(JSON.stringify({ type: 'failed', message: 'failed to read report file: ' + reportPath }));\n        return;\n      }\n      let coverageObj = JSON.parse(fileContent);\n      for (let property in coverageObj) {\n        /* istanbul ignore else */\n        if (coverageObj.hasOwnProperty(property)) {\n          Core.mergeCoverageWith(coverageObj[property]);\n        }\n      }\n      res.end('{\"type\":\"success\"}');\n    });\n  });\n};\nexport default Core = {\n  mergeCoverageWith,\n  importCoverage,\n  getCoverageObject\n};\n"]},"sourceType":"script","hash":"bb32cb2bfa357db63451e7031ce8c1ddee56a895"}

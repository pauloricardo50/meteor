{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/impersonation/server/ImpersonateService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/impersonation/server/ImpersonateService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/impersonation/server/ImpersonateService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/impersonation/server/ImpersonateService.js"],"names":["Meteor","Accounts","Users","Security","ImpersonateService","impersonate","context","authToken","userIdToImpersonate","user","_findUserByToken","_checkRolesForImpersonation","_id","_throwNotAuthorized","setUserId","findOne","Error","userId","isUserAdmin","hashedToken","_hashLoginToken","fields","impersonateAdmin"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,OAAOC,KAAP;AACA,OAAOC,QAAP;;AAEA,MAAMC,kBAAN,CAAyB;AACvB;;;;;;AAMAC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,GAAD,EAA8C;AACvD,UAAMC,IAAI,GAAG,KAAKC,gBAAL,CAAsBH,SAAtB,CAAb;;AAEA,QAAIE,IAAJ,EAAU;AACR,WAAKE,2BAAL,CAAiCF,IAAI,CAACG,GAAtC;AACD,KAFD,MAEO;AACL,WAAKC,mBAAL;AACD;;AAEDP,IAAAA,OAAO,CAACQ,SAAR,CAAkBN,mBAAlB;AACA,WAAON,KAAK,CAACa,OAAN,CAAcP,mBAAd,CAAP;AACD;;AAEDK,EAAAA,mBAAmB,GAAG;AACpB,UAAM,IAAIb,MAAM,CAACgB,KAAX,CAAiB,GAAjB,EAAsB,cAAtB,CAAN;AACD;;AAEDL,EAAAA,2BAA2B,CAACM,MAAD,EAAS;AAClC,QAAI,CAACd,QAAQ,CAACe,WAAT,CAAqBD,MAArB,CAAL,EAAmC;AACjC,WAAKJ,mBAAL;AACD;AACF;AAED;;;;;;AAIAH,EAAAA,gBAAgB,CAACH,SAAD,EAAY;AAC1B;AACA,UAAMY,WAAW,GAAGlB,QAAQ,CAACmB,eAAT,CAAyBb,SAAzB,CAApB;;AAEA,WAAOL,KAAK,CAACa,OAAN,CACL;AAAE,iDAA2CI;AAA7C,KADK,EAEL;AACA;AAAEE,MAAAA,MAAM,EAAE;AAAET,QAAAA,GAAG,EAAE;AAAP;AAAV,KAHK,CAAP;AAKD;;AAEDU,EAAAA,gBAAgB,CAAC;AAAEhB,IAAAA,OAAF;AAAWE,IAAAA;AAAX,GAAD,EAAmC;AACjDF,IAAAA,OAAO,CAACQ,SAAR,CAAkBN,mBAAlB;AACD;;AA/CsB;;AAkDzB,eAAe,IAAIJ,kBAAJ,EAAf","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport Users from '../../users';\nimport Security from '../../security';\n\nclass ImpersonateService {\n  /**\n   * Impersonates the user\n   * @param {*} context The context of a given meteor method\n   * @param {*} authToken The token received from client\n   * @param {*} userIdToImpersonate\n   */\n  impersonate({ context, authToken, userIdToImpersonate }) {\n    const user = this._findUserByToken(authToken);\n\n    if (user) {\n      this._checkRolesForImpersonation(user._id);\n    } else {\n      this._throwNotAuthorized();\n    }\n\n    context.setUserId(userIdToImpersonate);\n    return Users.findOne(userIdToImpersonate);\n  }\n\n  _throwNotAuthorized() {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n\n  _checkRolesForImpersonation(userId) {\n    if (!Security.isUserAdmin(userId)) {\n      this._throwNotAuthorized();\n    }\n  }\n\n  /**\n   * @param {string} authToken\n   * @returns {object|null}\n   */\n  _findUserByToken(authToken) {\n    // eslint-disable-next-line\n    const hashedToken = Accounts._hashLoginToken(authToken);\n\n    return Users.findOne(\n      { 'services.resume.loginTokens.hashedToken': hashedToken },\n      // We just need to check the validity, no need for other data\n      { fields: { _id: 1 } },\n    );\n  }\n\n  impersonateAdmin({ context, userIdToImpersonate }) {\n    context.setUserId(userIdToImpersonate);\n  }\n}\n\nexport default new ImpersonateService();\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/impersonation/server/ImpersonateService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/impersonation/server/ImpersonateService.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nlet Users;\nmodule.link(\"../../users\", {\n  default(v) {\n    Users = v;\n  }\n\n}, 2);\nlet Security;\nmodule.link(\"../../security\", {\n  default(v) {\n    Security = v;\n  }\n\n}, 3);\n\nclass ImpersonateService {\n  /**\n   * Impersonates the user\n   * @param {*} context The context of a given meteor method\n   * @param {*} authToken The token received from client\n   * @param {*} userIdToImpersonate\n   */\n  impersonate({\n    context,\n    authToken,\n    userIdToImpersonate\n  }) {\n    const user = this._findUserByToken(authToken);\n\n    if (user) {\n      this._checkRolesForImpersonation(user._id);\n    } else {\n      this._throwNotAuthorized();\n    }\n\n    context.setUserId(userIdToImpersonate);\n    return Users.findOne(userIdToImpersonate);\n  }\n\n  _throwNotAuthorized() {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n\n  _checkRolesForImpersonation(userId) {\n    if (!Security.isUserAdmin(userId)) {\n      this._throwNotAuthorized();\n    }\n  }\n  /**\n   * @param {string} authToken\n   * @returns {object|null}\n   */\n\n\n  _findUserByToken(authToken) {\n    // eslint-disable-next-line\n    const hashedToken = Accounts._hashLoginToken(authToken);\n\n    return Users.findOne({\n      'services.resume.loginTokens.hashedToken': hashedToken\n    }, // We just need to check the validity, no need for other data\n    {\n      fields: {\n        _id: 1\n      }\n    });\n  }\n\n  impersonateAdmin({\n    context,\n    userIdToImpersonate\n  }) {\n    context.setUserId(userIdToImpersonate);\n  }\n\n}\n\nmodule.exportDefault(new ImpersonateService());","map":{"version":3,"sources":["imports/core/api/impersonation/server/ImpersonateService.js"],"names":["impersonate","userIdToImpersonate","user","context","Users","_throwNotAuthorized","Meteor","_checkRolesForImpersonation","Security","_findUserByToken","hashedToken","Accounts","fields","_id","impersonateAdmin"],"mappings":"AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,sBAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,aAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,gBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAKA,MAAA,kBAAA,CAAyB;AACvB;;;;;;AAMAA,EAAAA,WAAW,CAAC;AAAA,IAAA,OAAA;AAAA,IAAA,SAAA;AAAsBC,IAAAA;AAAtB,GAAD,EAA8C;AACvD,UAAMC,IAAI,GAAG,KAAA,gBAAA,CAAb,SAAa,CAAb;;AAEA,QAAA,IAAA,EAAU;AACR,WAAA,2BAAA,CAAiCA,IAAI,CAArC,GAAA;AADF,KAAA,MAEO;AACL,WAAA,mBAAA;AACD;;AAEDC,IAAAA,OAAO,CAAPA,SAAAA,CAAAA,mBAAAA;AACA,WAAOC,KAAK,CAALA,OAAAA,CAAP,mBAAOA,CAAP;AACD;;AAEDC,EAAAA,mBAAmB,GAAG;AACpB,UAAM,IAAIC,MAAM,CAAV,KAAA,CAAA,GAAA,EAAN,cAAM,CAAN;AACD;;AAEDC,EAAAA,2BAA2B,CAAA,MAAA,EAAS;AAClC,QAAI,CAACC,QAAQ,CAARA,WAAAA,CAAL,MAAKA,CAAL,EAAmC;AACjC,WAAA,mBAAA;AACD;AACF;AAED;;;;;;AAIAC,EAAAA,gBAAgB,CAAA,SAAA,EAAY;AAC1B;AACA,UAAMC,WAAW,GAAGC,QAAQ,CAARA,eAAAA,CAApB,SAAoBA,CAApB;;AAEA,WAAO,KAAK,CAAL,OAAA,CACL;AAAE,iDAA2CD;AAA7C,KADK,EAEL;AACA;AAAEE,MAAAA,MAAM,EAAE;AAAEC,QAAAA,GAAG,EAAE;AAAP;AAAV,KAHK,CAAP;AAKD;;AAEDC,EAAAA,gBAAgB,CAAC;AAAA,IAAA,OAAA;AAAWb,IAAAA;AAAX,GAAD,EAAmC;AACjDE,IAAAA,OAAO,CAAPA,SAAAA,CAAAA,mBAAAA;AACD;;AA/CsB;;AALzB,MAAA,CAAA,aAAA,CAuDe,IAAf,kBAAe,EAvDf","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport Users from '../../users';\nimport Security from '../../security';\n\nclass ImpersonateService {\n  /**\n   * Impersonates the user\n   * @param {*} context The context of a given meteor method\n   * @param {*} authToken The token received from client\n   * @param {*} userIdToImpersonate\n   */\n  impersonate({ context, authToken, userIdToImpersonate }) {\n    const user = this._findUserByToken(authToken);\n\n    if (user) {\n      this._checkRolesForImpersonation(user._id);\n    } else {\n      this._throwNotAuthorized();\n    }\n\n    context.setUserId(userIdToImpersonate);\n    return Users.findOne(userIdToImpersonate);\n  }\n\n  _throwNotAuthorized() {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n\n  _checkRolesForImpersonation(userId) {\n    if (!Security.isUserAdmin(userId)) {\n      this._throwNotAuthorized();\n    }\n  }\n\n  /**\n   * @param {string} authToken\n   * @returns {object|null}\n   */\n  _findUserByToken(authToken) {\n    // eslint-disable-next-line\n    const hashedToken = Accounts._hashLoginToken(authToken);\n\n    return Users.findOne(\n      { 'services.resume.loginTokens.hashedToken': hashedToken },\n      // We just need to check the validity, no need for other data\n      { fields: { _id: 1 } },\n    );\n  }\n\n  impersonateAdmin({ context, userIdToImpersonate }) {\n    context.setUserId(userIdToImpersonate);\n  }\n}\n\nexport default new ImpersonateService();\n"]},"sourceType":"script","hash":"fd2100aefe791288742982c18f1ace1dc5b9a3ef"}

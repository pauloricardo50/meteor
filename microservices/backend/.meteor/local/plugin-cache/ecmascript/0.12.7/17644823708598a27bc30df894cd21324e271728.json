{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/uploadFile.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/uploadFile.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/uploadFile.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/uploadFile.test.js"],"names":["Meteor","resetDatabase","expect","appendFileSync","Random","PROPERTY_DOCUMENTS","OBJECT_STORAGE_PATH","makeFileUploadDir","flushFileUploadDir","PropertyService","generator","PROPERTY_CATEGORY","PROPERTY_PERMISSIONS_FULL_ACCESS","uploadFile","RESTAPI","uploadFileAPI","FILE_UPLOAD_DIR","HTTP_STATUS_CODES","api","propertyId","addEndpoint","multipart","describe","timeout","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","id","users","_id","_factory","organisations","emails","address","verified","proProperties","category","PRO","externalId","it","setProUserPermissions","userId","permissions","filePath","url","PROPERTY_PICTURES","then","res","files","length","to","equal","filePath1","filePath2","PROPERTY_PLANS","status","message","FORBIDDEN","include","query","NOT_FOUND","BAD_REQUEST"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\nimport { appendFileSync } from 'fs';\nimport { Random } from 'meteor/random';\n\nimport {\n  PROPERTY_DOCUMENTS,\n  OBJECT_STORAGE_PATH,\n} from 'core/api/files/fileConstants';\nimport { makeFileUploadDir, flushFileUploadDir } from 'core/utils/filesUtils';\n\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport generator from '../../../../factories';\nimport {\n  PROPERTY_CATEGORY,\n  PROPERTY_PERMISSIONS_FULL_ACCESS,\n} from '../../../../properties/propertyConstants';\nimport { uploadFile } from '../../test/apiTestHelpers.test';\nimport RESTAPI from '../../RESTAPI';\nimport { uploadFileAPI } from '..';\nimport { FILE_UPLOAD_DIR, HTTP_STATUS_CODES } from '../../restApiConstants';\n\nconst api = new RESTAPI();\nlet propertyId = '';\napi.addEndpoint('/upload', 'POST', uploadFileAPI, { multipart: true });\n\ndescribe('REST: uploadFile', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    propertyId = Random.id();\n    generator({\n      users: [\n        {\n          _id: 'pro',\n          _factory: 'pro',\n          organisations: { _id: 'org1' },\n          emails: [{ address: 'pro@org.com', verified: true }],\n          proProperties: {\n            _id: propertyId,\n            category: PROPERTY_CATEGORY.PRO,\n            externalId: 'extId',\n          },\n        },\n        {\n          _id: 'pro2',\n          _factory: 'pro',\n          organisations: { _id: 'org1' },\n          emails: [{ address: 'pro2@org.com', verified: true }],\n        },\n      ],\n    });\n  });\n\n  it('uploads a file', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { files } = res;\n      expect(files.length).to.equal(1);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n    });\n  });\n\n  it('uploads two files', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath1 = `${FILE_UPLOAD_DIR}/myFile1.txt`;\n    const filePath2 = `${FILE_UPLOAD_DIR}/myFile2.txt`;\n    appendFileSync(filePath1, 'Hello');\n    appendFileSync(filePath2, 'Hello');\n    return uploadFile({\n      filePath: filePath1,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then(() =>\n        uploadFile({\n          filePath: filePath2,\n          userId: 'pro',\n          url: '/upload',\n          propertyId,\n          category: PROPERTY_DOCUMENTS.PROPERTY_PLANS,\n        }))\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(2);\n        expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile1.txt`);\n        expect(files[1].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PLANS}/myFile2.txt`);\n      });\n  });\n\n  it('does not allow to upload file when user does not have permissions', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n      expect(message).to.include('[NOT_AUTHORIZED]');\n    });\n  });\n\n  it('works when impersonating', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      query: { 'impersonate-user': 'pro@org.com' },\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { files } = res;\n      expect(files.length).to.equal(1);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n    });\n  });\n\n  it('fails with a wrong propertyId', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      propertyId: 'property',\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.NOT_FOUND);\n      expect(message).to.include('No property found');\n    });\n  });\n\n  it('fails when no propertyId is given', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.BAD_REQUEST);\n      expect(message).to.include('Property ID is required');\n    });\n  });\n\n  it('fails when category is wrong', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      propertyId,\n      category: 'wrong',\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.BAD_REQUEST);\n      expect(message).to.include('wrong is not an allowed value');\n    });\n  });\n\n  it('works with an external id', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId: 'extId',\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { files } = res;\n      expect(files.length).to.equal(1);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/uploadFile.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/uploadFile.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet appendFileSync;\nmodule.link(\"fs\", {\n  appendFileSync(v) {\n    appendFileSync = v;\n  }\n\n}, 3);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 4);\nlet PROPERTY_DOCUMENTS, OBJECT_STORAGE_PATH;\nmodule.link(\"../../../../files/fileConstants\", {\n  PROPERTY_DOCUMENTS(v) {\n    PROPERTY_DOCUMENTS = v;\n  },\n\n  OBJECT_STORAGE_PATH(v) {\n    OBJECT_STORAGE_PATH = v;\n  }\n\n}, 5);\nlet makeFileUploadDir, flushFileUploadDir;\nmodule.link(\"../../../../../utils/filesUtils\", {\n  makeFileUploadDir(v) {\n    makeFileUploadDir = v;\n  },\n\n  flushFileUploadDir(v) {\n    flushFileUploadDir = v;\n  }\n\n}, 6);\nlet PropertyService;\nmodule.link(\"../../../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 7);\nlet generator;\nmodule.link(\"../../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 8);\nlet PROPERTY_CATEGORY, PROPERTY_PERMISSIONS_FULL_ACCESS;\nmodule.link(\"../../../../properties/propertyConstants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  },\n\n  PROPERTY_PERMISSIONS_FULL_ACCESS(v) {\n    PROPERTY_PERMISSIONS_FULL_ACCESS = v;\n  }\n\n}, 9);\nlet uploadFile;\nmodule.link(\"../../test/apiTestHelpers.test\", {\n  uploadFile(v) {\n    uploadFile = v;\n  }\n\n}, 10);\nlet RESTAPI;\nmodule.link(\"../../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 11);\nlet uploadFileAPI;\nmodule.link(\"..\", {\n  uploadFileAPI(v) {\n    uploadFileAPI = v;\n  }\n\n}, 12);\nlet FILE_UPLOAD_DIR, HTTP_STATUS_CODES;\nmodule.link(\"../../restApiConstants\", {\n  FILE_UPLOAD_DIR(v) {\n    FILE_UPLOAD_DIR = v;\n  },\n\n  HTTP_STATUS_CODES(v) {\n    HTTP_STATUS_CODES = v;\n  }\n\n}, 13);\nconst api = new RESTAPI();\nlet propertyId = '';\napi.addEndpoint('/upload', 'POST', uploadFileAPI, {\n  multipart: true\n});\ndescribe('REST: uploadFile', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    propertyId = Random.id();\n    generator({\n      users: [{\n        _id: 'pro',\n        _factory: 'pro',\n        organisations: {\n          _id: 'org1'\n        },\n        emails: [{\n          address: 'pro@org.com',\n          verified: true\n        }],\n        proProperties: {\n          _id: propertyId,\n          category: PROPERTY_CATEGORY.PRO,\n          externalId: 'extId'\n        }\n      }, {\n        _id: 'pro2',\n        _factory: 'pro',\n        organisations: {\n          _id: 'org1'\n        },\n        emails: [{\n          address: 'pro2@org.com',\n          verified: true\n        }]\n      }]\n    });\n  });\n  it('uploads a file', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        files\n      } = res;\n      expect(files.length).to.equal(1);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n    });\n  });\n  it('uploads two files', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    const filePath1 = `${FILE_UPLOAD_DIR}/myFile1.txt`;\n    const filePath2 = `${FILE_UPLOAD_DIR}/myFile2.txt`;\n    appendFileSync(filePath1, 'Hello');\n    appendFileSync(filePath2, 'Hello');\n    return uploadFile({\n      filePath: filePath1,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(() => uploadFile({\n      filePath: filePath2,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PLANS\n    })).then(res => {\n      const {\n        files\n      } = res;\n      expect(files.length).to.equal(2);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile1.txt`);\n      expect(files[1].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PLANS}/myFile2.txt`);\n    });\n  });\n  it('does not allow to upload file when user does not have permissions', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        status,\n        message\n      } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n      expect(message).to.include('[NOT_AUTHORIZED]');\n    });\n  });\n  it('works when impersonating', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      query: {\n        'impersonate-user': 'pro@org.com'\n      },\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        files\n      } = res;\n      expect(files.length).to.equal(1);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n    });\n  });\n  it('fails with a wrong propertyId', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      propertyId: 'property',\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        status,\n        message\n      } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.NOT_FOUND);\n      expect(message).to.include('No property found');\n    });\n  });\n  it('fails when no propertyId is given', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        status,\n        message\n      } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.BAD_REQUEST);\n      expect(message).to.include('Property ID is required');\n    });\n  });\n  it('fails when category is wrong', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      propertyId,\n      category: 'wrong'\n    }).then(res => {\n      const {\n        status,\n        message\n      } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.BAD_REQUEST);\n      expect(message).to.include('wrong is not an allowed value');\n    });\n  });\n  it('works with an external id', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId: 'extId',\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        files\n      } = res;\n      expect(files.length).to.equal(1);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/uploadFile.test.js"],"names":["api","propertyId","multipart","describe","before","Meteor","makeFileUploadDir","flushFileUploadDir","after","beforeEach","resetDatabase","Random","generator","users","_id","_factory","organisations","emails","address","verified","proProperties","category","PROPERTY_CATEGORY","externalId","it","PropertyService","userId","permissions","PROPERTY_PERMISSIONS_FULL_ACCESS","filePath","FILE_UPLOAD_DIR","appendFileSync","url","PROPERTY_DOCUMENTS","PROPERTY_PICTURES","res","files","expect","OBJECT_STORAGE_PATH","filePath1","filePath2","uploadFile","PROPERTY_PLANS","message","HTTP_STATUS_CODES","query"],"mappings":"AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,uBAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,cAAA;AAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,kBAAA,EAAA,mBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iCAAA,EAAA;AAAA,EAAA,kBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,kBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,mBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,mBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,iBAAA,EAAA,kBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iCAAA,EAAA;AAAA,EAAA,iBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,kBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,kBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,eAAA;AAAA,MAAA,CAAA,IAAA,CAAA,+CAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,uBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,iBAAA,EAAA,gCAAA;AAAA,MAAA,CAAA,IAAA,CAAA,0CAAA,EAAA;AAAA,EAAA,iBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,gCAAA,CAAA,CAAA,EAAA;AAAA,IAAA,gCAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,UAAA;AAAA,MAAA,CAAA,IAAA,CAAA,gCAAA,EAAA;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,EAAA;AAAA,IAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,EAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,EAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wBAAA,EAAA;AAAA,EAAA,eAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,iBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,EAAA;AAwBA,MAAMA,GAAG,GAAG,IAAZ,OAAY,EAAZ;AACA,IAAIC,UAAU,GAAd,EAAA;AACAD,GAAG,CAAHA,WAAAA,CAAAA,SAAAA,EAAAA,MAAAA,EAAAA,aAAAA,EAAkD;AAAEE,EAAAA,SAAS,EAAE;AAAb,CAAlDF;AAEAG,QAAQ,CAAA,kBAAA,EAAqB,YAAY;AACvC,OAAA,OAAA,CAAA,KAAA;AAEAC,EAAAA,MAAM,CAAC,YAAY;AACjB,QAAIC,MAAM,CAANA,QAAAA,CAAAA,MAAAA,CAAAA,YAAAA,KAAJ,KAAA,EAAmD;AACjD,WAAA,MAAA,CAAA,OAAA,GAAA,IAAA;AACA,WAAA,IAAA;AAFF,KAAA,MAGO;AACLC,MAAAA,iBAAiB;AACjBC,MAAAA,kBAAkB;AAClBP,MAAAA,GAAG,CAAHA,KAAAA;AACD;AARHI,GAAM,CAANA;AAWAI,EAAAA,KAAK,CAAC,MAAM;AACVR,IAAAA,GAAG,CAAHA,KAAAA;AADFQ,GAAK,CAALA;AAIAC,EAAAA,UAAU,CAAC,MAAM;AACfC,IAAAA,aAAa;AACbT,IAAAA,UAAU,GAAGU,MAAM,CAAnBV,EAAaU,EAAbV;AACAW,IAAAA,SAAS,CAAC;AACRC,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,GAAG,EADL,KAAA;AAEEC,QAAAA,QAAQ,EAFV,KAAA;AAGEC,QAAAA,aAAa,EAAE;AAAEF,UAAAA,GAAG,EAAE;AAAP,SAHjB;AAIEG,QAAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA,OAAO,EAAT,aAAA;AAA0BC,UAAAA,QAAQ,EAAE;AAApC,SAAD,CAJV;AAKEC,QAAAA,aAAa,EAAE;AACbN,UAAAA,GAAG,EADU,UAAA;AAEbO,UAAAA,QAAQ,EAAEC,iBAAiB,CAFd,GAAA;AAGbC,UAAAA,UAAU,EAAE;AAHC;AALjB,OADK,EAYL;AACET,QAAAA,GAAG,EADL,MAAA;AAEEC,QAAAA,QAAQ,EAFV,KAAA;AAGEC,QAAAA,aAAa,EAAE;AAAEF,UAAAA,GAAG,EAAE;AAAP,SAHjB;AAIEG,QAAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA,OAAO,EAAT,cAAA;AAA2BC,UAAAA,QAAQ,EAAE;AAArC,SAAD;AAJV,OAZK;AADC,KAAD,CAATP;AAHFH,GAAU,CAAVA;AA0BAe,EAAAA,EAAE,CAAA,gBAAA,EAAmB,MAAM;AACzBC,IAAAA,eAAe,CAAfA,qBAAAA,CAAsC;AAAA,MAAA,UAAA;AAEpCC,MAAAA,MAAM,EAF8B,KAAA;AAGpCC,MAAAA,WAAW,EAAEC;AAHuB,KAAtCH;AAKA,UAAMI,QAAQ,GAAI,GAAEC,eAApB,aAAA;AACAC,IAAAA,cAAc,CAAA,QAAA,EAAdA,OAAc,CAAdA;AACA,WAAO,UAAU,CAAC;AAAA,MAAA,QAAA;AAEhBL,MAAAA,MAAM,EAFU,KAAA;AAGhBM,MAAAA,GAAG,EAHa,SAAA;AAAA,MAAA,UAAA;AAKhBX,MAAAA,QAAQ,EAAEY,kBAAkB,CAACC;AALb,KAAD,CAAV,CAAA,IAAA,CAMEC,GAAD,IAAS;AACf,YAAM;AAAEC,QAAAA;AAAF,UAAN,GAAA;AACAC,MAAAA,MAAM,CAACD,KAAK,CAAZC,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACD,KAAK,CAALA,CAAK,CAALA,CAAPC,GAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAA+B,GAAEC,mBAAoB,IAAGrC,UAAW,IAAGgC,kBAAkB,CAACC,iBAAzFG,aAAAA;AATF,KAAO,CAAP;AARFb,GAAE,CAAFA;AAqBAA,EAAAA,EAAE,CAAA,mBAAA,EAAsB,MAAM;AAC5BC,IAAAA,eAAe,CAAfA,qBAAAA,CAAsC;AAAA,MAAA,UAAA;AAEpCC,MAAAA,MAAM,EAF8B,KAAA;AAGpCC,MAAAA,WAAW,EAAEC;AAHuB,KAAtCH;AAKA,UAAMc,SAAS,GAAI,GAAET,eAArB,cAAA;AACA,UAAMU,SAAS,GAAI,GAAEV,eAArB,cAAA;AACAC,IAAAA,cAAc,CAAA,SAAA,EAAdA,OAAc,CAAdA;AACAA,IAAAA,cAAc,CAAA,SAAA,EAAdA,OAAc,CAAdA;AACA,WAAO,UAAU,CAAC;AAChBF,MAAAA,QAAQ,EADQ,SAAA;AAEhBH,MAAAA,MAAM,EAFU,KAAA;AAGhBM,MAAAA,GAAG,EAHa,SAAA;AAAA,MAAA,UAAA;AAKhBX,MAAAA,QAAQ,EAAEY,kBAAkB,CAACC;AALb,KAAD,CAAV,CAAA,IAAA,CAOC,MACJO,UAAU,CAAC;AACTZ,MAAAA,QAAQ,EADC,SAAA;AAETH,MAAAA,MAAM,EAFG,KAAA;AAGTM,MAAAA,GAAG,EAHM,SAAA;AAAA,MAAA,UAAA;AAKTX,MAAAA,QAAQ,EAAEY,kBAAkB,CAACS;AALpB,KAAD,CARP,EAAA,IAAA,CAeEP,GAAD,IAAS;AACb,YAAM;AAAEC,QAAAA;AAAF,UAAN,GAAA;AACAC,MAAAA,MAAM,CAACD,KAAK,CAAZC,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACD,KAAK,CAALA,CAAK,CAALA,CAAPC,GAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAA+B,GAAEC,mBAAoB,IAAGrC,UAAW,IAAGgC,kBAAkB,CAACC,iBAAzFG,cAAAA;AACAA,MAAAA,MAAM,CAACD,KAAK,CAALA,CAAK,CAALA,CAAPC,GAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAA+B,GAAEC,mBAAoB,IAAGrC,UAAW,IAAGgC,kBAAkB,CAACS,cAAzFL,cAAAA;AAnBJ,KAAO,CAAP;AAVFb,GAAE,CAAFA;AAiCAA,EAAAA,EAAE,CAAA,mEAAA,EAAsE,MAAM;AAC5E,UAAMK,QAAQ,GAAI,GAAEC,eAApB,aAAA;AACAC,IAAAA,cAAc,CAAA,QAAA,EAAdA,OAAc,CAAdA;AACA,WAAO,UAAU,CAAC;AAAA,MAAA,QAAA;AAEhBL,MAAAA,MAAM,EAFU,MAAA;AAGhBM,MAAAA,GAAG,EAHa,SAAA;AAAA,MAAA,UAAA;AAKhBX,MAAAA,QAAQ,EAAEY,kBAAkB,CAACC;AALb,KAAD,CAAV,CAAA,IAAA,CAMEC,GAAD,IAAS;AACf,YAAM;AAAA,QAAA,MAAA;AAAUQ,QAAAA;AAAV,UAAN,GAAA;AACAN,MAAAA,MAAM,CAANA,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAwBO,iBAAiB,CAAzCP,SAAAA;AACAA,MAAAA,MAAM,CAANA,OAAM,CAANA,CAAAA,EAAAA,CAAAA,OAAAA,CAAAA,kBAAAA;AATF,KAAO,CAAP;AAHFb,GAAE,CAAFA;AAgBAA,EAAAA,EAAE,CAAA,0BAAA,EAA6B,MAAM;AACnCC,IAAAA,eAAe,CAAfA,qBAAAA,CAAsC;AAAA,MAAA,UAAA;AAEpCC,MAAAA,MAAM,EAF8B,KAAA;AAGpCC,MAAAA,WAAW,EAAEC;AAHuB,KAAtCH;AAKA,UAAMI,QAAQ,GAAI,GAAEC,eAApB,aAAA;AACAC,IAAAA,cAAc,CAAA,QAAA,EAAdA,OAAc,CAAdA;AACA,WAAO,UAAU,CAAC;AAAA,MAAA,QAAA;AAEhBL,MAAAA,MAAM,EAFU,MAAA;AAGhBM,MAAAA,GAAG,EAHa,SAAA;AAIhBa,MAAAA,KAAK,EAAE;AAAE,4BAAoB;AAAtB,OAJS;AAAA,MAAA,UAAA;AAMhBxB,MAAAA,QAAQ,EAAEY,kBAAkB,CAACC;AANb,KAAD,CAAV,CAAA,IAAA,CAOEC,GAAD,IAAS;AACf,YAAM;AAAEC,QAAAA;AAAF,UAAN,GAAA;AACAC,MAAAA,MAAM,CAACD,KAAK,CAAZC,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACD,KAAK,CAALA,CAAK,CAALA,CAAPC,GAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAA+B,GAAEC,mBAAoB,IAAGrC,UAAW,IAAGgC,kBAAkB,CAACC,iBAAzFG,aAAAA;AAVF,KAAO,CAAP;AARFb,GAAE,CAAFA;AAsBAA,EAAAA,EAAE,CAAA,+BAAA,EAAkC,MAAM;AACxC,UAAMK,QAAQ,GAAI,GAAEC,eAApB,aAAA;AACAC,IAAAA,cAAc,CAAA,QAAA,EAAdA,OAAc,CAAdA;AACA,WAAO,UAAU,CAAC;AAAA,MAAA,QAAA;AAEhBL,MAAAA,MAAM,EAFU,MAAA;AAGhBM,MAAAA,GAAG,EAHa,SAAA;AAIhB/B,MAAAA,UAAU,EAJM,UAAA;AAKhBoB,MAAAA,QAAQ,EAAEY,kBAAkB,CAACC;AALb,KAAD,CAAV,CAAA,IAAA,CAMEC,GAAD,IAAS;AACf,YAAM;AAAA,QAAA,MAAA;AAAUQ,QAAAA;AAAV,UAAN,GAAA;AACAN,MAAAA,MAAM,CAANA,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAwBO,iBAAiB,CAAzCP,SAAAA;AACAA,MAAAA,MAAM,CAANA,OAAM,CAANA,CAAAA,EAAAA,CAAAA,OAAAA,CAAAA,mBAAAA;AATF,KAAO,CAAP;AAHFb,GAAE,CAAFA;AAgBAA,EAAAA,EAAE,CAAA,mCAAA,EAAsC,MAAM;AAC5C,UAAMK,QAAQ,GAAI,GAAEC,eAApB,aAAA;AACAC,IAAAA,cAAc,CAAA,QAAA,EAAdA,OAAc,CAAdA;AACA,WAAO,UAAU,CAAC;AAAA,MAAA,QAAA;AAEhBL,MAAAA,MAAM,EAFU,MAAA;AAGhBM,MAAAA,GAAG,EAHa,SAAA;AAIhBX,MAAAA,QAAQ,EAAEY,kBAAkB,CAACC;AAJb,KAAD,CAAV,CAAA,IAAA,CAKEC,GAAD,IAAS;AACf,YAAM;AAAA,QAAA,MAAA;AAAUQ,QAAAA;AAAV,UAAN,GAAA;AACAN,MAAAA,MAAM,CAANA,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAwBO,iBAAiB,CAAzCP,WAAAA;AACAA,MAAAA,MAAM,CAANA,OAAM,CAANA,CAAAA,EAAAA,CAAAA,OAAAA,CAAAA,yBAAAA;AARF,KAAO,CAAP;AAHFb,GAAE,CAAFA;AAeAA,EAAAA,EAAE,CAAA,8BAAA,EAAiC,MAAM;AACvC,UAAMK,QAAQ,GAAI,GAAEC,eAApB,aAAA;AACAC,IAAAA,cAAc,CAAA,QAAA,EAAdA,OAAc,CAAdA;AACA,WAAO,UAAU,CAAC;AAAA,MAAA,QAAA;AAEhBL,MAAAA,MAAM,EAFU,MAAA;AAGhBM,MAAAA,GAAG,EAHa,SAAA;AAAA,MAAA,UAAA;AAKhBX,MAAAA,QAAQ,EAAE;AALM,KAAD,CAAV,CAAA,IAAA,CAMEc,GAAD,IAAS;AACf,YAAM;AAAA,QAAA,MAAA;AAAUQ,QAAAA;AAAV,UAAN,GAAA;AACAN,MAAAA,MAAM,CAANA,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAwBO,iBAAiB,CAAzCP,WAAAA;AACAA,MAAAA,MAAM,CAANA,OAAM,CAANA,CAAAA,EAAAA,CAAAA,OAAAA,CAAAA,+BAAAA;AATF,KAAO,CAAP;AAHFb,GAAE,CAAFA;AAgBAA,EAAAA,EAAE,CAAA,2BAAA,EAA8B,MAAM;AACpCC,IAAAA,eAAe,CAAfA,qBAAAA,CAAsC;AAAA,MAAA,UAAA;AAEpCC,MAAAA,MAAM,EAF8B,KAAA;AAGpCC,MAAAA,WAAW,EAAEC;AAHuB,KAAtCH;AAKA,UAAMI,QAAQ,GAAI,GAAEC,eAApB,aAAA;AACAC,IAAAA,cAAc,CAAA,QAAA,EAAdA,OAAc,CAAdA;AACA,WAAO,UAAU,CAAC;AAAA,MAAA,QAAA;AAEhBL,MAAAA,MAAM,EAFU,KAAA;AAGhBM,MAAAA,GAAG,EAHa,SAAA;AAIhB/B,MAAAA,UAAU,EAJM,OAAA;AAKhBoB,MAAAA,QAAQ,EAAEY,kBAAkB,CAACC;AALb,KAAD,CAAV,CAAA,IAAA,CAMEC,GAAD,IAAS;AACf,YAAM;AAAEC,QAAAA;AAAF,UAAN,GAAA;AACAC,MAAAA,MAAM,CAACD,KAAK,CAAZC,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACD,KAAK,CAALA,CAAK,CAALA,CAAPC,GAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAA+B,GAAEC,mBAAoB,IAAGrC,UAAW,IAAGgC,kBAAkB,CAACC,iBAAzFG,aAAAA;AATF,KAAO,CAAP;AARFb,GAAE,CAAFA;AAvLFrB,CAAQ,CAARA","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\nimport { appendFileSync } from 'fs';\nimport { Random } from 'meteor/random';\n\nimport {\n  PROPERTY_DOCUMENTS,\n  OBJECT_STORAGE_PATH,\n} from 'core/api/files/fileConstants';\nimport { makeFileUploadDir, flushFileUploadDir } from 'core/utils/filesUtils';\n\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport generator from '../../../../factories';\nimport {\n  PROPERTY_CATEGORY,\n  PROPERTY_PERMISSIONS_FULL_ACCESS,\n} from '../../../../properties/propertyConstants';\nimport { uploadFile } from '../../test/apiTestHelpers.test';\nimport RESTAPI from '../../RESTAPI';\nimport { uploadFileAPI } from '..';\nimport { FILE_UPLOAD_DIR, HTTP_STATUS_CODES } from '../../restApiConstants';\n\nconst api = new RESTAPI();\nlet propertyId = '';\napi.addEndpoint('/upload', 'POST', uploadFileAPI, { multipart: true });\n\ndescribe('REST: uploadFile', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    propertyId = Random.id();\n    generator({\n      users: [\n        {\n          _id: 'pro',\n          _factory: 'pro',\n          organisations: { _id: 'org1' },\n          emails: [{ address: 'pro@org.com', verified: true }],\n          proProperties: {\n            _id: propertyId,\n            category: PROPERTY_CATEGORY.PRO,\n            externalId: 'extId',\n          },\n        },\n        {\n          _id: 'pro2',\n          _factory: 'pro',\n          organisations: { _id: 'org1' },\n          emails: [{ address: 'pro2@org.com', verified: true }],\n        },\n      ],\n    });\n  });\n\n  it('uploads a file', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { files } = res;\n      expect(files.length).to.equal(1);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n    });\n  });\n\n  it('uploads two files', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath1 = `${FILE_UPLOAD_DIR}/myFile1.txt`;\n    const filePath2 = `${FILE_UPLOAD_DIR}/myFile2.txt`;\n    appendFileSync(filePath1, 'Hello');\n    appendFileSync(filePath2, 'Hello');\n    return uploadFile({\n      filePath: filePath1,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then(() =>\n        uploadFile({\n          filePath: filePath2,\n          userId: 'pro',\n          url: '/upload',\n          propertyId,\n          category: PROPERTY_DOCUMENTS.PROPERTY_PLANS,\n        }))\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(2);\n        expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile1.txt`);\n        expect(files[1].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PLANS}/myFile2.txt`);\n      });\n  });\n\n  it('does not allow to upload file when user does not have permissions', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n      expect(message).to.include('[NOT_AUTHORIZED]');\n    });\n  });\n\n  it('works when impersonating', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      query: { 'impersonate-user': 'pro@org.com' },\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { files } = res;\n      expect(files.length).to.equal(1);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n    });\n  });\n\n  it('fails with a wrong propertyId', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      propertyId: 'property',\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.NOT_FOUND);\n      expect(message).to.include('No property found');\n    });\n  });\n\n  it('fails when no propertyId is given', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.BAD_REQUEST);\n      expect(message).to.include('Property ID is required');\n    });\n  });\n\n  it('fails when category is wrong', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro2',\n      url: '/upload',\n      propertyId,\n      category: 'wrong',\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.BAD_REQUEST);\n      expect(message).to.include('wrong is not an allowed value');\n    });\n  });\n\n  it('works with an external id', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId: 'extId',\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    }).then((res) => {\n      const { files } = res;\n      expect(files.length).to.equal(1);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"17644823708598a27bc30df894cd21324e271728"}

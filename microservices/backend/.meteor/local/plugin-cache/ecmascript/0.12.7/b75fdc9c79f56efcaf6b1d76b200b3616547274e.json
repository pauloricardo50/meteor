{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/redux/widget1/Widget1Suggester.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/redux/widget1/Widget1Suggester.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/redux/widget1/Widget1Suggester.js","inputSourceMap":{"version":3,"sources":["imports/core/redux/widget1/Widget1Suggester.js"],"names":["NOTARY_FEES","MAINTENANCE_FINMA","INTERESTS_FINMA","MAX_INCOME_RATIO","MAX_BORROW_RATIO_PRIMARY_PROPERTY","MAX_BORROW_RATIO_WITH_PLEDGE","AMORTIZATION_STOP","AMORTIZATION_YEARS","roundTo","Widget1SuggesterClass","constructor","notaryFees","property","fortune","loan","m","i","mR","withAmortizing","withoutAmortizing","Math","round","max","salary","nF","basicValue","rank1Fortune","rank2Fortune","rankFortune","maxFortune","min","r","incomeLimited1","incomeLimited2","floor","fortuneLimitedProperty","fortuneToProperty","salaryLimitedProperty","getSalaryLimitedProperty","propertyToFortuneRatio","defaultAmortization","loanCost","propertyToSalaryRatio","ceil","currentLoan","currentNotaryFees","suggestFortune","maxLoan","hardCap"],"mappings":"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","sourcesContent":["import {\n  NOTARY_FEES,\n  MAINTENANCE_FINMA,\n  INTERESTS_FINMA,\n  MAX_INCOME_RATIO,\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n  MAX_BORROW_RATIO_WITH_PLEDGE,\n  AMORTIZATION_STOP,\n  AMORTIZATION_YEARS,\n} from 'core/config/financeConstants';\nimport { roundTo } from 'core/utils/conversionFunctions';\n\nexport class Widget1SuggesterClass {\n  constructor({ notaryFees }) {\n    this.notaryFees = notaryFees || NOTARY_FEES;\n  }\n\n  // This function is documented in the google drive: \"Maths widget1.pdf\" document\n  suggestSalary = ({ property, fortune }) => {\n    const loan = property * (1 + this.notaryFees) - fortune;\n    const m = MAINTENANCE_FINMA;\n    const i = INTERESTS_FINMA;\n    const mR = MAX_INCOME_RATIO;\n\n    const withAmortizing = (property * m + loan * (i + (loan - 0.65 * property) / (15 * loan))) / mR;\n\n    const withoutAmortizing = (property * m + loan * i) / mR;\n\n    return Math.round(Math.max(withAmortizing, withoutAmortizing) + 1);\n  };\n\n  // This function is documented in the google drive: \"Maths widget1.pdf\" document\n  suggestFortune = ({ property, salary }) => {\n    const m = MAINTENANCE_FINMA;\n    const i = INTERESTS_FINMA;\n    const mR = MAX_INCOME_RATIO;\n    const nF = this.notaryFees;\n\n    // It has to cover 20% and notaryfees\n    const basicValue = property * (0.2 + nF);\n\n    // When there is very little income, go to rank 1 (basically, amortization = 0)\n    const rank1Fortune = (property * (m + i * (1 + nF)) - mR * salary) / i;\n\n    // For the case that there is a reasonable amount of fortune, go to rank 2\n    // Here amortization is complex and depends on the borrow Ratio\n    const rank2Fortune = (property * (15 * m + nF + 0.35 + 15 * i * (1 + nF)) - mR * 15 * salary)\n      / (15 * i + 1);\n\n    const rankFortune = Math.max(rank1Fortune, rank2Fortune);\n\n    const maxFortune = Math.round(Math.max(0, rankFortune, basicValue));\n\n    // Make sure fortune never goes above the property value\n    return Math.min(maxFortune, property);\n  };\n\n  // This function is documented in the google drive: \"Maths widget1.pdf\" document\n  getSalaryLimitedProperty = ({ salary, fortune }) => {\n    // The arithmetic relation to have the cost of the loan be at exactly the max ratio of income\n    // Derive it like this:\n    // maxRatio * salary >= property * maintenance + loan * loanCost\n    // loan = (property + notaryFees + lppFees) - totalFortune\n    // Extract property from this relation\n    const nF = this.notaryFees;\n    const i = INTERESTS_FINMA;\n    const mR = MAX_INCOME_RATIO;\n    const m = MAINTENANCE_FINMA;\n    const r = AMORTIZATION_YEARS;\n\n    // The first one is with 0 amortization\n    const incomeLimited1 = (mR * salary + fortune * i) / (m + (1 + nF) * i);\n\n    // The second is with amortization factored in (and it could be negative due to math)\n    const incomeLimited2 = ((1 + r * i) * fortune + mR * r * salary)\n      / (r * (m + i) + nF * (1 + r * i) + 0.35);\n\n    // Therefore, take the minimum value of both, which is the most limiting one\n    // Because of the ratios, round this value down\n    return Math.floor(Math.min(incomeLimited1, incomeLimited2));\n  };\n\n  suggestProperty = ({ salary, fortune }) => {\n    const fortuneLimitedProperty = this.fortuneToProperty({ fortune });\n    const salaryLimitedProperty = this.getSalaryLimitedProperty({\n      salary,\n      fortune,\n    });\n\n    // Use floor to make sure the ratios are respected and avoid edge cases\n    return Math.round(Math.min(fortuneLimitedProperty, salaryLimitedProperty));\n  };\n\n  //\n  // Property < > Fortune\n  //\n  propertyToFortuneRatio = () =>\n    1 - MAX_BORROW_RATIO_PRIMARY_PROPERTY + this.notaryFees;\n\n  propertyToFortune = ({ property }) =>\n    property * this.propertyToFortuneRatio();\n\n  fortuneToProperty = ({ fortune }) => fortune / this.propertyToFortuneRatio();\n\n  //\n  // Property < > Salary\n  //\n  defaultAmortization = () =>\n    (MAX_BORROW_RATIO_PRIMARY_PROPERTY - AMORTIZATION_STOP)\n    / MAX_BORROW_RATIO_PRIMARY_PROPERTY\n    / AMORTIZATION_YEARS;\n\n  loanCost = () => INTERESTS_FINMA + this.defaultAmortization();\n\n  propertyToSalaryRatio = () =>\n    3\n    * (MAINTENANCE_FINMA + MAX_BORROW_RATIO_PRIMARY_PROPERTY * this.loanCost());\n\n  propertyToSalary = ({ property }) => property * this.propertyToSalaryRatio();\n\n  // This one flickers between 80% and >80%, so round it up to make sure\n  // the loan is always at or below 80%\n  salaryToProperty = ({ salary }) =>\n    Math.ceil(salary / this.propertyToSalaryRatio());\n\n  suggestWantedLoan = ({ currentLoan }) => currentLoan;\n\n  getMaxPossibleLoan = ({ property, salary }) => {\n    // temporarily disable notaryFees\n    const currentNotaryFees = this.notaryFees;\n    this.notaryFees = 0;\n\n    const fortune = this.suggestFortune({ property, salary });\n\n    this.notaryFees = currentNotaryFees;\n\n    const maxLoan = property - fortune;\n    const hardCap = Math.floor(property * MAX_BORROW_RATIO_WITH_PLEDGE);\n    return roundTo(Math.min(maxLoan, hardCap), 3);\n  };\n}\n\nexport default new Widget1SuggesterClass({});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/redux/widget1/Widget1Suggester.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/redux/widget1/Widget1Suggester.js"}},"code":"module.export({\n  Widget1SuggesterClass: () => Widget1SuggesterClass\n});\nlet NOTARY_FEES, MAINTENANCE_FINMA, INTERESTS_FINMA, MAX_INCOME_RATIO, MAX_BORROW_RATIO_PRIMARY_PROPERTY, MAX_BORROW_RATIO_WITH_PLEDGE, AMORTIZATION_STOP, AMORTIZATION_YEARS;\nmodule.link(\"../../config/financeConstants\", {\n  NOTARY_FEES(v) {\n    NOTARY_FEES = v;\n  },\n\n  MAINTENANCE_FINMA(v) {\n    MAINTENANCE_FINMA = v;\n  },\n\n  INTERESTS_FINMA(v) {\n    INTERESTS_FINMA = v;\n  },\n\n  MAX_INCOME_RATIO(v) {\n    MAX_INCOME_RATIO = v;\n  },\n\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY(v) {\n    MAX_BORROW_RATIO_PRIMARY_PROPERTY = v;\n  },\n\n  MAX_BORROW_RATIO_WITH_PLEDGE(v) {\n    MAX_BORROW_RATIO_WITH_PLEDGE = v;\n  },\n\n  AMORTIZATION_STOP(v) {\n    AMORTIZATION_STOP = v;\n  },\n\n  AMORTIZATION_YEARS(v) {\n    AMORTIZATION_YEARS = v;\n  }\n\n}, 0);\nlet roundTo;\nmodule.link(\"../../utils/conversionFunctions\", {\n  roundTo(v) {\n    roundTo = v;\n  }\n\n}, 1);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass Widget1SuggesterClass {\n  constructor(_ref) {\n    let {\n      notaryFees\n    } = _ref;\n\n    _defineProperty(this, \"suggestSalary\", (_ref2) => {\n      let {\n        property,\n        fortune\n      } = _ref2;\n      const loan = property * (1 + this.notaryFees) - fortune;\n      const m = MAINTENANCE_FINMA;\n      const i = INTERESTS_FINMA;\n      const mR = MAX_INCOME_RATIO;\n      const withAmortizing = (property * m + loan * (i + (loan - 0.65 * property) / (15 * loan))) / mR;\n      const withoutAmortizing = (property * m + loan * i) / mR;\n      return Math.round(Math.max(withAmortizing, withoutAmortizing) + 1);\n    });\n\n    _defineProperty(this, \"suggestFortune\", (_ref3) => {\n      let {\n        property,\n        salary\n      } = _ref3;\n      const m = MAINTENANCE_FINMA;\n      const i = INTERESTS_FINMA;\n      const mR = MAX_INCOME_RATIO;\n      const nF = this.notaryFees; // It has to cover 20% and notaryfees\n\n      const basicValue = property * (0.2 + nF); // When there is very little income, go to rank 1 (basically, amortization = 0)\n\n      const rank1Fortune = (property * (m + i * (1 + nF)) - mR * salary) / i; // For the case that there is a reasonable amount of fortune, go to rank 2\n      // Here amortization is complex and depends on the borrow Ratio\n\n      const rank2Fortune = (property * (15 * m + nF + 0.35 + 15 * i * (1 + nF)) - mR * 15 * salary) / (15 * i + 1);\n      const rankFortune = Math.max(rank1Fortune, rank2Fortune);\n      const maxFortune = Math.round(Math.max(0, rankFortune, basicValue)); // Make sure fortune never goes above the property value\n\n      return Math.min(maxFortune, property);\n    });\n\n    _defineProperty(this, \"getSalaryLimitedProperty\", (_ref4) => {\n      let {\n        salary,\n        fortune\n      } = _ref4;\n      // The arithmetic relation to have the cost of the loan be at exactly the max ratio of income\n      // Derive it like this:\n      // maxRatio * salary >= property * maintenance + loan * loanCost\n      // loan = (property + notaryFees + lppFees) - totalFortune\n      // Extract property from this relation\n      const nF = this.notaryFees;\n      const i = INTERESTS_FINMA;\n      const mR = MAX_INCOME_RATIO;\n      const m = MAINTENANCE_FINMA;\n      const r = AMORTIZATION_YEARS; // The first one is with 0 amortization\n\n      const incomeLimited1 = (mR * salary + fortune * i) / (m + (1 + nF) * i); // The second is with amortization factored in (and it could be negative due to math)\n\n      const incomeLimited2 = ((1 + r * i) * fortune + mR * r * salary) / (r * (m + i) + nF * (1 + r * i) + 0.35); // Therefore, take the minimum value of both, which is the most limiting one\n      // Because of the ratios, round this value down\n\n      return Math.floor(Math.min(incomeLimited1, incomeLimited2));\n    });\n\n    _defineProperty(this, \"suggestProperty\", (_ref5) => {\n      let {\n        salary,\n        fortune\n      } = _ref5;\n      const fortuneLimitedProperty = this.fortuneToProperty({\n        fortune\n      });\n      const salaryLimitedProperty = this.getSalaryLimitedProperty({\n        salary,\n        fortune\n      }); // Use floor to make sure the ratios are respected and avoid edge cases\n\n      return Math.round(Math.min(fortuneLimitedProperty, salaryLimitedProperty));\n    });\n\n    _defineProperty(this, \"propertyToFortuneRatio\", () => 1 - MAX_BORROW_RATIO_PRIMARY_PROPERTY + this.notaryFees);\n\n    _defineProperty(this, \"propertyToFortune\", (_ref6) => {\n      let {\n        property\n      } = _ref6;\n      return property * this.propertyToFortuneRatio();\n    });\n\n    _defineProperty(this, \"fortuneToProperty\", (_ref7) => {\n      let {\n        fortune\n      } = _ref7;\n      return fortune / this.propertyToFortuneRatio();\n    });\n\n    _defineProperty(this, \"defaultAmortization\", () => (MAX_BORROW_RATIO_PRIMARY_PROPERTY - AMORTIZATION_STOP) / MAX_BORROW_RATIO_PRIMARY_PROPERTY / AMORTIZATION_YEARS);\n\n    _defineProperty(this, \"loanCost\", () => INTERESTS_FINMA + this.defaultAmortization());\n\n    _defineProperty(this, \"propertyToSalaryRatio\", () => 3 * (MAINTENANCE_FINMA + MAX_BORROW_RATIO_PRIMARY_PROPERTY * this.loanCost()));\n\n    _defineProperty(this, \"propertyToSalary\", (_ref8) => {\n      let {\n        property\n      } = _ref8;\n      return property * this.propertyToSalaryRatio();\n    });\n\n    _defineProperty(this, \"salaryToProperty\", (_ref9) => {\n      let {\n        salary\n      } = _ref9;\n      return Math.ceil(salary / this.propertyToSalaryRatio());\n    });\n\n    _defineProperty(this, \"suggestWantedLoan\", (_ref10) => {\n      let {\n        currentLoan\n      } = _ref10;\n      return currentLoan;\n    });\n\n    _defineProperty(this, \"getMaxPossibleLoan\", (_ref11) => {\n      let {\n        property,\n        salary\n      } = _ref11;\n      // temporarily disable notaryFees\n      const currentNotaryFees = this.notaryFees;\n      this.notaryFees = 0;\n      const fortune = this.suggestFortune({\n        property,\n        salary\n      });\n      this.notaryFees = currentNotaryFees;\n      const maxLoan = property - fortune;\n      const hardCap = Math.floor(property * MAX_BORROW_RATIO_WITH_PLEDGE);\n      return roundTo(Math.min(maxLoan, hardCap), 3);\n    });\n\n    this.notaryFees = notaryFees || NOTARY_FEES;\n  } // This function is documented in the google drive: \"Maths widget1.pdf\" document\n\n\n}\n\nmodule.exportDefault(new Widget1SuggesterClass({}));","map":{"version":3,"sources":["imports/core/redux/widget1/Widget1Suggester.js"],"names":["constructor","notaryFees","fortune","loan","property","m","i","mR","withAmortizing","withoutAmortizing","Math","salary","nF","basicValue","rank1Fortune","rank2Fortune","rankFortune","maxFortune","r","incomeLimited1","incomeLimited2","fortuneLimitedProperty","salaryLimitedProperty","MAX_BORROW_RATIO_PRIMARY_PROPERTY","INTERESTS_FINMA","MAINTENANCE_FINMA","currentLoan","currentNotaryFees","maxLoan","hardCap","roundTo"],"mappings":"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","sourcesContent":["import {\n  NOTARY_FEES,\n  MAINTENANCE_FINMA,\n  INTERESTS_FINMA,\n  MAX_INCOME_RATIO,\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n  MAX_BORROW_RATIO_WITH_PLEDGE,\n  AMORTIZATION_STOP,\n  AMORTIZATION_YEARS,\n} from 'core/config/financeConstants';\nimport { roundTo } from 'core/utils/conversionFunctions';\n\nexport class Widget1SuggesterClass {\n  constructor({ notaryFees }) {\n    this.notaryFees = notaryFees || NOTARY_FEES;\n  }\n\n  // This function is documented in the google drive: \"Maths widget1.pdf\" document\n  suggestSalary = ({ property, fortune }) => {\n    const loan = property * (1 + this.notaryFees) - fortune;\n    const m = MAINTENANCE_FINMA;\n    const i = INTERESTS_FINMA;\n    const mR = MAX_INCOME_RATIO;\n\n    const withAmortizing = (property * m + loan * (i + (loan - 0.65 * property) / (15 * loan))) / mR;\n\n    const withoutAmortizing = (property * m + loan * i) / mR;\n\n    return Math.round(Math.max(withAmortizing, withoutAmortizing) + 1);\n  };\n\n  // This function is documented in the google drive: \"Maths widget1.pdf\" document\n  suggestFortune = ({ property, salary }) => {\n    const m = MAINTENANCE_FINMA;\n    const i = INTERESTS_FINMA;\n    const mR = MAX_INCOME_RATIO;\n    const nF = this.notaryFees;\n\n    // It has to cover 20% and notaryfees\n    const basicValue = property * (0.2 + nF);\n\n    // When there is very little income, go to rank 1 (basically, amortization = 0)\n    const rank1Fortune = (property * (m + i * (1 + nF)) - mR * salary) / i;\n\n    // For the case that there is a reasonable amount of fortune, go to rank 2\n    // Here amortization is complex and depends on the borrow Ratio\n    const rank2Fortune = (property * (15 * m + nF + 0.35 + 15 * i * (1 + nF)) - mR * 15 * salary)\n      / (15 * i + 1);\n\n    const rankFortune = Math.max(rank1Fortune, rank2Fortune);\n\n    const maxFortune = Math.round(Math.max(0, rankFortune, basicValue));\n\n    // Make sure fortune never goes above the property value\n    return Math.min(maxFortune, property);\n  };\n\n  // This function is documented in the google drive: \"Maths widget1.pdf\" document\n  getSalaryLimitedProperty = ({ salary, fortune }) => {\n    // The arithmetic relation to have the cost of the loan be at exactly the max ratio of income\n    // Derive it like this:\n    // maxRatio * salary >= property * maintenance + loan * loanCost\n    // loan = (property + notaryFees + lppFees) - totalFortune\n    // Extract property from this relation\n    const nF = this.notaryFees;\n    const i = INTERESTS_FINMA;\n    const mR = MAX_INCOME_RATIO;\n    const m = MAINTENANCE_FINMA;\n    const r = AMORTIZATION_YEARS;\n\n    // The first one is with 0 amortization\n    const incomeLimited1 = (mR * salary + fortune * i) / (m + (1 + nF) * i);\n\n    // The second is with amortization factored in (and it could be negative due to math)\n    const incomeLimited2 = ((1 + r * i) * fortune + mR * r * salary)\n      / (r * (m + i) + nF * (1 + r * i) + 0.35);\n\n    // Therefore, take the minimum value of both, which is the most limiting one\n    // Because of the ratios, round this value down\n    return Math.floor(Math.min(incomeLimited1, incomeLimited2));\n  };\n\n  suggestProperty = ({ salary, fortune }) => {\n    const fortuneLimitedProperty = this.fortuneToProperty({ fortune });\n    const salaryLimitedProperty = this.getSalaryLimitedProperty({\n      salary,\n      fortune,\n    });\n\n    // Use floor to make sure the ratios are respected and avoid edge cases\n    return Math.round(Math.min(fortuneLimitedProperty, salaryLimitedProperty));\n  };\n\n  //\n  // Property < > Fortune\n  //\n  propertyToFortuneRatio = () =>\n    1 - MAX_BORROW_RATIO_PRIMARY_PROPERTY + this.notaryFees;\n\n  propertyToFortune = ({ property }) =>\n    property * this.propertyToFortuneRatio();\n\n  fortuneToProperty = ({ fortune }) => fortune / this.propertyToFortuneRatio();\n\n  //\n  // Property < > Salary\n  //\n  defaultAmortization = () =>\n    (MAX_BORROW_RATIO_PRIMARY_PROPERTY - AMORTIZATION_STOP)\n    / MAX_BORROW_RATIO_PRIMARY_PROPERTY\n    / AMORTIZATION_YEARS;\n\n  loanCost = () => INTERESTS_FINMA + this.defaultAmortization();\n\n  propertyToSalaryRatio = () =>\n    3\n    * (MAINTENANCE_FINMA + MAX_BORROW_RATIO_PRIMARY_PROPERTY * this.loanCost());\n\n  propertyToSalary = ({ property }) => property * this.propertyToSalaryRatio();\n\n  // This one flickers between 80% and >80%, so round it up to make sure\n  // the loan is always at or below 80%\n  salaryToProperty = ({ salary }) =>\n    Math.ceil(salary / this.propertyToSalaryRatio());\n\n  suggestWantedLoan = ({ currentLoan }) => currentLoan;\n\n  getMaxPossibleLoan = ({ property, salary }) => {\n    // temporarily disable notaryFees\n    const currentNotaryFees = this.notaryFees;\n    this.notaryFees = 0;\n\n    const fortune = this.suggestFortune({ property, salary });\n\n    this.notaryFees = currentNotaryFees;\n\n    const maxLoan = property - fortune;\n    const hardCap = Math.floor(property * MAX_BORROW_RATIO_WITH_PLEDGE);\n    return roundTo(Math.min(maxLoan, hardCap), 3);\n  };\n}\n\nexport default new Widget1SuggesterClass({});\n"]},"sourceType":"script","hash":"b75fdc9c79f56efcaf6b1d76b200b3616547274e"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/client/test/fileHelpers.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/api/files/client/test/fileHelpers.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/client/test/fileHelpers.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/api/files/client/test/fileHelpers.spec.js"],"names":["expect","filesPercent","getMissingDocumentIds","describe","fileArray","dummyDoc","fileId","beforeEach","id","documents","it","doc","to","deep","equal","percent","count","myFile","required","condition","undefined","status","checkValidity","myFile2"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { filesPercent, getMissingDocumentIds } from '../../fileHelpers';\n\ndescribe('fileHelpers', () => {\n  let fileArray;\n  let dummyDoc;\n  let fileId;\n\n  beforeEach(() => {\n    fileId = 'myFile';\n    fileArray = [{ id: fileId }];\n    dummyDoc = { documents: {} };\n  });\n\n  describe('filesPercent', () => {\n    it('returns 0 if an empty doc is given', () => {\n      expect(filesPercent({ doc: {}, fileArray })).to.deep.equal({\n        percent: 0,\n        count: 1,\n      });\n    });\n\n    it('returns 0 if no doc is given', () => {\n      expect(filesPercent({ fileArray })).to.deep.equal({\n        percent: 0,\n        count: 1,\n      });\n    });\n\n    it('returns 1 if a file exists', () => {\n      // file exists\n      dummyDoc.documents.myFile = [{}];\n      expect(filesPercent({ doc: dummyDoc, fileArray })).to.deep.equal({\n        percent: 1,\n        count: 1,\n      });\n    });\n\n    it('returns 0 if an empty array is given', () => {\n      dummyDoc.documents.myFile = [];\n      expect(filesPercent({ doc: dummyDoc, fileArray })).to.deep.equal({\n        percent: 0,\n        count: 1,\n      });\n    });\n\n    it(\"doesn't count files which aren't required\", () => {\n      fileArray = [{ id: 'myFile', required: false }];\n      dummyDoc.documents.myFile = [];\n      expect(filesPercent({ doc: dummyDoc, fileArray })).to.deep.equal({\n        percent: 1,\n        count: 0,\n      });\n    });\n\n    describe('status verification', () => {\n      it('returns 0 if no files are valid', () => {\n        fileArray = [{ id: 'myFile', condition: undefined }];\n        dummyDoc.documents.myFile = [{ status: 'INVALID' }];\n        expect(filesPercent({\n          doc: dummyDoc,\n          fileArray,\n          checkValidity: true,\n        })).to.deep.equal({\n          percent: 0,\n          count: 1,\n        });\n      });\n\n      it('returns 0.5 if one file is valid', () => {\n        fileArray = [\n          { id: 'myFile', condition: undefined },\n          { id: 'myFile2', condition: undefined },\n        ];\n\n        dummyDoc.documents.myFile = [{ status: 'INVALID' }];\n        dummyDoc.documents.myFile2 = [{ status: 'VALID' }];\n        expect(filesPercent({\n          doc: dummyDoc,\n          fileArray,\n          checkValidity: true,\n        })).to.deep.equal({\n          percent: 0.5,\n          count: 2,\n        });\n      });\n    });\n  });\n\n  describe('getMissingDocumentIds', () => {\n    it('returns the array of missing docs', () => {\n      expect(getMissingDocumentIds({\n        doc: dummyDoc,\n        fileArray,\n      })).to.deep.equal([fileId]);\n    });\n\n    it('returns an empty array if all documents have been uploaded', () => {\n      dummyDoc.documents[fileId] = [{}];\n      expect(getMissingDocumentIds({\n        doc: dummyDoc,\n        fileArray,\n      })).to.deep.equal([]);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/client/test/fileHelpers.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/files/client/test/fileHelpers.spec.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar filesPercent, getMissingDocumentIds;\nmodule.link(\"../../fileHelpers\", {\n  filesPercent: function (v) {\n    filesPercent = v;\n  },\n  getMissingDocumentIds: function (v) {\n    getMissingDocumentIds = v;\n  }\n}, 1);\ndescribe('fileHelpers', function () {\n  var fileArray;\n  var dummyDoc;\n  var fileId;\n  beforeEach(function () {\n    fileId = 'myFile';\n    fileArray = [{\n      id: fileId\n    }];\n    dummyDoc = {\n      documents: {}\n    };\n  });\n  describe('filesPercent', function () {\n    it('returns 0 if an empty doc is given', function () {\n      expect(filesPercent({\n        doc: {},\n        fileArray: fileArray\n      })).to.deep.equal({\n        percent: 0,\n        count: 1\n      });\n    });\n    it('returns 0 if no doc is given', function () {\n      expect(filesPercent({\n        fileArray: fileArray\n      })).to.deep.equal({\n        percent: 0,\n        count: 1\n      });\n    });\n    it('returns 1 if a file exists', function () {\n      // file exists\n      dummyDoc.documents.myFile = [{}];\n      expect(filesPercent({\n        doc: dummyDoc,\n        fileArray: fileArray\n      })).to.deep.equal({\n        percent: 1,\n        count: 1\n      });\n    });\n    it('returns 0 if an empty array is given', function () {\n      dummyDoc.documents.myFile = [];\n      expect(filesPercent({\n        doc: dummyDoc,\n        fileArray: fileArray\n      })).to.deep.equal({\n        percent: 0,\n        count: 1\n      });\n    });\n    it(\"doesn't count files which aren't required\", function () {\n      fileArray = [{\n        id: 'myFile',\n        required: false\n      }];\n      dummyDoc.documents.myFile = [];\n      expect(filesPercent({\n        doc: dummyDoc,\n        fileArray: fileArray\n      })).to.deep.equal({\n        percent: 1,\n        count: 0\n      });\n    });\n    describe('status verification', function () {\n      it('returns 0 if no files are valid', function () {\n        fileArray = [{\n          id: 'myFile',\n          condition: undefined\n        }];\n        dummyDoc.documents.myFile = [{\n          status: 'INVALID'\n        }];\n        expect(filesPercent({\n          doc: dummyDoc,\n          fileArray: fileArray,\n          checkValidity: true\n        })).to.deep.equal({\n          percent: 0,\n          count: 1\n        });\n      });\n      it('returns 0.5 if one file is valid', function () {\n        fileArray = [{\n          id: 'myFile',\n          condition: undefined\n        }, {\n          id: 'myFile2',\n          condition: undefined\n        }];\n        dummyDoc.documents.myFile = [{\n          status: 'INVALID'\n        }];\n        dummyDoc.documents.myFile2 = [{\n          status: 'VALID'\n        }];\n        expect(filesPercent({\n          doc: dummyDoc,\n          fileArray: fileArray,\n          checkValidity: true\n        })).to.deep.equal({\n          percent: 0.5,\n          count: 2\n        });\n      });\n    });\n  });\n  describe('getMissingDocumentIds', function () {\n    it('returns the array of missing docs', function () {\n      expect(getMissingDocumentIds({\n        doc: dummyDoc,\n        fileArray: fileArray\n      })).to.deep.equal([fileId]);\n    });\n    it('returns an empty array if all documents have been uploaded', function () {\n      dummyDoc.documents[fileId] = [{}];\n      expect(getMissingDocumentIds({\n        doc: dummyDoc,\n        fileArray: fileArray\n      })).to.deep.equal([]);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/files/client/test/fileHelpers.spec.js"],"names":["describe","beforeEach","fileId","fileArray","id","dummyDoc","documents","it","expect","filesPercent","doc","percent","count","required","condition","undefined","status","checkValidity","getMissingDocumentIds"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { filesPercent, getMissingDocumentIds } from '../../fileHelpers';\n\ndescribe('fileHelpers', () => {\n  let fileArray;\n  let dummyDoc;\n  let fileId;\n\n  beforeEach(() => {\n    fileId = 'myFile';\n    fileArray = [{ id: fileId }];\n    dummyDoc = { documents: {} };\n  });\n\n  describe('filesPercent', () => {\n    it('returns 0 if an empty doc is given', () => {\n      expect(filesPercent({ doc: {}, fileArray })).to.deep.equal({\n        percent: 0,\n        count: 1,\n      });\n    });\n\n    it('returns 0 if no doc is given', () => {\n      expect(filesPercent({ fileArray })).to.deep.equal({\n        percent: 0,\n        count: 1,\n      });\n    });\n\n    it('returns 1 if a file exists', () => {\n      // file exists\n      dummyDoc.documents.myFile = [{}];\n      expect(filesPercent({ doc: dummyDoc, fileArray })).to.deep.equal({\n        percent: 1,\n        count: 1,\n      });\n    });\n\n    it('returns 0 if an empty array is given', () => {\n      dummyDoc.documents.myFile = [];\n      expect(filesPercent({ doc: dummyDoc, fileArray })).to.deep.equal({\n        percent: 0,\n        count: 1,\n      });\n    });\n\n    it(\"doesn't count files which aren't required\", () => {\n      fileArray = [{ id: 'myFile', required: false }];\n      dummyDoc.documents.myFile = [];\n      expect(filesPercent({ doc: dummyDoc, fileArray })).to.deep.equal({\n        percent: 1,\n        count: 0,\n      });\n    });\n\n    describe('status verification', () => {\n      it('returns 0 if no files are valid', () => {\n        fileArray = [{ id: 'myFile', condition: undefined }];\n        dummyDoc.documents.myFile = [{ status: 'INVALID' }];\n        expect(filesPercent({\n          doc: dummyDoc,\n          fileArray,\n          checkValidity: true,\n        })).to.deep.equal({\n          percent: 0,\n          count: 1,\n        });\n      });\n\n      it('returns 0.5 if one file is valid', () => {\n        fileArray = [\n          { id: 'myFile', condition: undefined },\n          { id: 'myFile2', condition: undefined },\n        ];\n\n        dummyDoc.documents.myFile = [{ status: 'INVALID' }];\n        dummyDoc.documents.myFile2 = [{ status: 'VALID' }];\n        expect(filesPercent({\n          doc: dummyDoc,\n          fileArray,\n          checkValidity: true,\n        })).to.deep.equal({\n          percent: 0.5,\n          count: 2,\n        });\n      });\n    });\n  });\n\n  describe('getMissingDocumentIds', () => {\n    it('returns the array of missing docs', () => {\n      expect(getMissingDocumentIds({\n        doc: dummyDoc,\n        fileArray,\n      })).to.deep.equal([fileId]);\n    });\n\n    it('returns an empty array if all documents have been uploaded', () => {\n      dummyDoc.documents[fileId] = [{}];\n      expect(getMissingDocumentIds({\n        doc: dummyDoc,\n        fileArray,\n      })).to.deep.equal([]);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"e1e5ca5538957a6e7f00aef82f96571e6d71dc30"}

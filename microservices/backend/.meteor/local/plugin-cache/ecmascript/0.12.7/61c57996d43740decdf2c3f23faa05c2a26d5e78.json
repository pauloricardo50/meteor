{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/redis/lib/getFieldsOfInterestFromAll.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:redis-oplog/lib/redis/lib/getFieldsOfInterestFromAll.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/redis/lib/getFieldsOfInterestFromAll.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/redis/lib/getFieldsOfInterestFromAll.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:redis-oplog/lib/redis/lib/getFieldsOfInterestFromAll.js"}},"code":"module.export({\n  removeChildrenOfParents: () => removeChildrenOfParents\n});\n\nfunction getFieldsOfInterestFromAll(subscribers) {\n  let allFields = [];\n\n  for (let i = 0; i < subscribers.length; i++) {\n    const subscriber = subscribers[i];\n    let fields = subscriber.getFieldsOfInterest();\n\n    if (fields === true) {\n      // end of story, there is an observableCollection that needs all fields\n      // therefore we will query for all fields\n      return true;\n    } else {\n      allFields = _.union(allFields, fields);\n    }\n  } // this should not happen, but as a measure of safety\n\n\n  if (allFields.length === 0) {\n    return true;\n  }\n\n  allFields = removeChildrenOfParents(allFields);\n  let fieldsObject = {};\n  allFields.forEach(field => {\n    fieldsObject[field] = 1;\n  });\n  return fieldsObject;\n}\n/**\n * @param {array} array\n * @return {array} array\n */\n\n\nfunction removeChildrenOfParents(array) {\n  let freshArray = [];\n  array.forEach((element, idxe) => {\n    // add it to freshArray only if there's no {me} + '.' inside the array\n    const foundParent = array.find((subelement, idxs) => {\n      return idxe !== idxs && element.indexOf(`${subelement}.`) >= 0;\n    });\n\n    if (!foundParent) {\n      freshArray.push(element);\n    }\n  });\n  return freshArray;\n}\n\nmodule.exportDefault(getFieldsOfInterestFromAll);","map":{"version":3,"sources":["packages/cultofcoders:redis-oplog/lib/redis/lib/getFieldsOfInterestFromAll.js"],"names":["module","export","removeChildrenOfParents","getFieldsOfInterestFromAll","subscribers","allFields","i","length","subscriber","fields","getFieldsOfInterest","_","union","fieldsObject","forEach","field","array","freshArray","element","idxe","foundParent","find","subelement","idxs","indexOf","push","exportDefault"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,uBAAuB,EAAC,MAAIA;AAA7B,CAAd;;AAAA,SAASC,0BAAT,CAAoCC,WAApC,EAAiD;AAC7C,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,UAAME,UAAU,GAAGJ,WAAW,CAACE,CAAD,CAA9B;AACA,QAAIG,MAAM,GAAGD,UAAU,CAACE,mBAAX,EAAb;;AAEA,QAAID,MAAM,KAAK,IAAf,EAAqB;AACjB;AACA;AACA,aAAO,IAAP;AACH,KAJD,MAIO;AACHJ,MAAAA,SAAS,GAAGM,CAAC,CAACC,KAAF,CAAQP,SAAR,EAAmBI,MAAnB,CAAZ;AACH;AACJ,GAb4C,CAe7C;;;AACA,MAAIJ,SAAS,CAACE,MAAV,KAAqB,CAAzB,EAA4B;AACxB,WAAO,IAAP;AACH;;AAEDF,EAAAA,SAAS,GAAGH,uBAAuB,CAACG,SAAD,CAAnC;AAEA,MAAIQ,YAAY,GAAG,EAAnB;AAEAR,EAAAA,SAAS,CAACS,OAAV,CAAkBC,KAAK,IAAI;AACvBF,IAAAA,YAAY,CAACE,KAAD,CAAZ,GAAsB,CAAtB;AACH,GAFD;AAIA,SAAOF,YAAP;AACH;AAED;;;;;;AAIO,SAASX,uBAAT,CAAiCc,KAAjC,EAAwC;AAC3C,MAAIC,UAAU,GAAG,EAAjB;AAEAD,EAAAA,KAAK,CAACF,OAAN,CAAc,CAACI,OAAD,EAAUC,IAAV,KAAmB;AAC7B;AACA,UAAMC,WAAW,GAAGJ,KAAK,CAACK,IAAN,CAAW,CAACC,UAAD,EAAaC,IAAb,KAAsB;AACjD,aAAOJ,IAAI,KAAKI,IAAT,IAAiBL,OAAO,CAACM,OAAR,CAAiB,GAAEF,UAAW,GAA9B,KAAqC,CAA7D;AACH,KAFmB,CAApB;;AAIA,QAAI,CAACF,WAAL,EAAkB;AACdH,MAAAA,UAAU,CAACQ,IAAX,CAAgBP,OAAhB;AACH;AACJ,GATD;AAWA,SAAOD,UAAP;AACH;;AAlDDjB,MAAM,CAAC0B,aAAP,CAoDevB,0BApDf","sourcesContent":["function getFieldsOfInterestFromAll(subscribers) {\n    let allFields = [];\n    for (let i = 0; i < subscribers.length; i++) {\n        const subscriber = subscribers[i];\n        let fields = subscriber.getFieldsOfInterest();\n\n        if (fields === true) {\n            // end of story, there is an observableCollection that needs all fields\n            // therefore we will query for all fields\n            return true;\n        } else {\n            allFields = _.union(allFields, fields);\n        }\n    }\n\n    // this should not happen, but as a measure of safety\n    if (allFields.length === 0) {\n        return true;\n    }\n\n    allFields = removeChildrenOfParents(allFields);\n\n    let fieldsObject = {};\n\n    allFields.forEach(field => {\n        fieldsObject[field] = 1;\n    });\n\n    return fieldsObject;\n}\n\n/**\n * @param {array} array\n * @return {array} array\n */\nexport function removeChildrenOfParents(array) {\n    let freshArray = [];\n\n    array.forEach((element, idxe) => {\n        // add it to freshArray only if there's no {me} + '.' inside the array\n        const foundParent = array.find((subelement, idxs) => {\n            return idxe !== idxs && element.indexOf(`${subelement}.`) >= 0;\n        });\n\n        if (!foundParent) {\n            freshArray.push(element);\n        }\n    });\n\n    return freshArray;\n}\n\nexport default getFieldsOfInterestFromAll;\n"]},"sourceType":"script","hash":"61c57996d43740decdf2c3f23faa05c2a26d5e78"}

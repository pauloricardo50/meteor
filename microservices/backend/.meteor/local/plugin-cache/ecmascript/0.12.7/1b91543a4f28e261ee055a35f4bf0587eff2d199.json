{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/revenues/server/test/RevenueService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/revenues/server/test/RevenueService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/revenues/server/test/RevenueService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/revenues/server/test/RevenueService.test.js"],"names":["expect","resetDatabase","generator","RevenueService","REVENUE_STATUS","describe","beforeEach","it","organisations","_id","name","revenues","result","getGeneratedRevenues","organisationId","to","equal","$metadata","commissionRate","amount","status","CLOSED","EXPECTED","loan","user","revenue","findOne","fields","loanCache","deep"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport generator from '../../../factories';\nimport RevenueService from '../RevenueService';\nimport { REVENUE_STATUS } from '../../revenueConstants';\n\ndescribe('RevenueService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('getGeneratedRevenues', () => {\n    it('returns 0 if no revenues exist', () => {\n      generator({\n        organisations: { _id: 'org', name: 'org1' },\n        revenues: [],\n      });\n\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org',\n      });\n\n      expect(result).to.equal(0);\n    });\n\n    it('only gets revenues of the requested org', () => {\n      generator({\n        organisations: { _id: 'org', name: 'org1' },\n        revenues: [\n          {\n            organisations: { _id: 'org2', $metadata: { commissionRate: 0.2 } },\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED,\n          },\n        ],\n      });\n\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org',\n      });\n\n      expect(result).to.equal(0);\n    });\n\n    it('returns all of one revenue', () => {\n      generator({\n        organisations: { _id: 'org' },\n        revenues: [\n          {\n            organisations: { _id: 'org', $metadata: { commissionRate: 0.2 } },\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED,\n          },\n        ],\n      });\n\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org',\n      });\n\n      expect(result).to.equal(100);\n    });\n\n    it('only counts closed revenues', () => {\n      generator({\n        organisations: { _id: 'org' },\n        revenues: [\n          {\n            organisations: { _id: 'org', $metadata: { commissionRate: 0.2 } },\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED,\n          },\n          {\n            organisations: { _id: 'org', $metadata: { commissionRate: 0.2 } },\n            amount: 100,\n            status: REVENUE_STATUS.EXPECTED,\n          },\n        ],\n      });\n\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org',\n      });\n\n      expect(result).to.equal(100);\n    });\n\n    it('splits revenues if there are multiple organisations', () => {\n      generator({\n        organisations: { _id: 'org', name: 'org1' },\n        revenues: [\n          {\n            organisations: [\n              { _id: 'org', $metadata: { commissionRate: 0.2 } },\n              { _id: 'org2', $metadata: { commissionRate: 0.2 } },\n            ],\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED,\n          },\n          {\n            organisations: [{ _id: 'org', $metadata: { commissionRate: 0.2 } }],\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED,\n          },\n        ],\n      });\n\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org',\n      });\n\n      expect(result).to.equal(150);\n    });\n  });\n\n  describe('links and caches', () => {\n    it('adds a loanCache on revenues', () => {\n      generator({\n        revenues: {\n          _id: 'rev',\n          amount: 1000,\n          loan: {\n            _id: 'loanId',\n            name: '18-0001',\n            user: { _id: 'user' },\n          },\n        },\n      });\n\n      const revenue = RevenueService.findOne(\n        { _id: 'rev' },\n        { fields: { loanCache: 1 } },\n      );\n\n      expect(revenue.loanCache).to.deep.equal([\n        {\n          _id: 'loanId',\n          name: '18-0001',\n        },\n      ]);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/revenues/server/test/RevenueService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/revenues/server/test/RevenueService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 2);\nlet RevenueService;\nmodule.link(\"../RevenueService\", {\n  default(v) {\n    RevenueService = v;\n  }\n\n}, 3);\nlet REVENUE_STATUS;\nmodule.link(\"../../revenueConstants\", {\n  REVENUE_STATUS(v) {\n    REVENUE_STATUS = v;\n  }\n\n}, 4);\ndescribe('RevenueService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('getGeneratedRevenues', () => {\n    it('returns 0 if no revenues exist', () => {\n      generator({\n        organisations: {\n          _id: 'org',\n          name: 'org1'\n        },\n        revenues: []\n      });\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org'\n      });\n      expect(result).to.equal(0);\n    });\n    it('only gets revenues of the requested org', () => {\n      generator({\n        organisations: {\n          _id: 'org',\n          name: 'org1'\n        },\n        revenues: [{\n          organisations: {\n            _id: 'org2',\n            $metadata: {\n              commissionRate: 0.2\n            }\n          },\n          amount: 100,\n          status: REVENUE_STATUS.CLOSED\n        }]\n      });\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org'\n      });\n      expect(result).to.equal(0);\n    });\n    it('returns all of one revenue', () => {\n      generator({\n        organisations: {\n          _id: 'org'\n        },\n        revenues: [{\n          organisations: {\n            _id: 'org',\n            $metadata: {\n              commissionRate: 0.2\n            }\n          },\n          amount: 100,\n          status: REVENUE_STATUS.CLOSED\n        }]\n      });\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org'\n      });\n      expect(result).to.equal(100);\n    });\n    it('only counts closed revenues', () => {\n      generator({\n        organisations: {\n          _id: 'org'\n        },\n        revenues: [{\n          organisations: {\n            _id: 'org',\n            $metadata: {\n              commissionRate: 0.2\n            }\n          },\n          amount: 100,\n          status: REVENUE_STATUS.CLOSED\n        }, {\n          organisations: {\n            _id: 'org',\n            $metadata: {\n              commissionRate: 0.2\n            }\n          },\n          amount: 100,\n          status: REVENUE_STATUS.EXPECTED\n        }]\n      });\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org'\n      });\n      expect(result).to.equal(100);\n    });\n    it('splits revenues if there are multiple organisations', () => {\n      generator({\n        organisations: {\n          _id: 'org',\n          name: 'org1'\n        },\n        revenues: [{\n          organisations: [{\n            _id: 'org',\n            $metadata: {\n              commissionRate: 0.2\n            }\n          }, {\n            _id: 'org2',\n            $metadata: {\n              commissionRate: 0.2\n            }\n          }],\n          amount: 100,\n          status: REVENUE_STATUS.CLOSED\n        }, {\n          organisations: [{\n            _id: 'org',\n            $metadata: {\n              commissionRate: 0.2\n            }\n          }],\n          amount: 100,\n          status: REVENUE_STATUS.CLOSED\n        }]\n      });\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org'\n      });\n      expect(result).to.equal(150);\n    });\n  });\n  describe('links and caches', () => {\n    it('adds a loanCache on revenues', () => {\n      generator({\n        revenues: {\n          _id: 'rev',\n          amount: 1000,\n          loan: {\n            _id: 'loanId',\n            name: '18-0001',\n            user: {\n              _id: 'user'\n            }\n          }\n        }\n      });\n      const revenue = RevenueService.findOne({\n        _id: 'rev'\n      }, {\n        fields: {\n          loanCache: 1\n        }\n      });\n      expect(revenue.loanCache).to.deep.equal([{\n        _id: 'loanId',\n        name: '18-0001'\n      }]);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/revenues/server/test/RevenueService.test.js"],"names":["describe","beforeEach","resetDatabase","it","generator","organisations","_id","name","revenues","result","organisationId","expect","$metadata","commissionRate","amount","status","REVENUE_STATUS","CLOSED","EXPECTED","loan","user","revenue","fields","loanCache"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport generator from '../../../factories';\nimport RevenueService from '../RevenueService';\nimport { REVENUE_STATUS } from '../../revenueConstants';\n\ndescribe('RevenueService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('getGeneratedRevenues', () => {\n    it('returns 0 if no revenues exist', () => {\n      generator({\n        organisations: { _id: 'org', name: 'org1' },\n        revenues: [],\n      });\n\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org',\n      });\n\n      expect(result).to.equal(0);\n    });\n\n    it('only gets revenues of the requested org', () => {\n      generator({\n        organisations: { _id: 'org', name: 'org1' },\n        revenues: [\n          {\n            organisations: { _id: 'org2', $metadata: { commissionRate: 0.2 } },\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED,\n          },\n        ],\n      });\n\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org',\n      });\n\n      expect(result).to.equal(0);\n    });\n\n    it('returns all of one revenue', () => {\n      generator({\n        organisations: { _id: 'org' },\n        revenues: [\n          {\n            organisations: { _id: 'org', $metadata: { commissionRate: 0.2 } },\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED,\n          },\n        ],\n      });\n\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org',\n      });\n\n      expect(result).to.equal(100);\n    });\n\n    it('only counts closed revenues', () => {\n      generator({\n        organisations: { _id: 'org' },\n        revenues: [\n          {\n            organisations: { _id: 'org', $metadata: { commissionRate: 0.2 } },\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED,\n          },\n          {\n            organisations: { _id: 'org', $metadata: { commissionRate: 0.2 } },\n            amount: 100,\n            status: REVENUE_STATUS.EXPECTED,\n          },\n        ],\n      });\n\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org',\n      });\n\n      expect(result).to.equal(100);\n    });\n\n    it('splits revenues if there are multiple organisations', () => {\n      generator({\n        organisations: { _id: 'org', name: 'org1' },\n        revenues: [\n          {\n            organisations: [\n              { _id: 'org', $metadata: { commissionRate: 0.2 } },\n              { _id: 'org2', $metadata: { commissionRate: 0.2 } },\n            ],\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED,\n          },\n          {\n            organisations: [{ _id: 'org', $metadata: { commissionRate: 0.2 } }],\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED,\n          },\n        ],\n      });\n\n      const result = RevenueService.getGeneratedRevenues({\n        organisationId: 'org',\n      });\n\n      expect(result).to.equal(150);\n    });\n  });\n\n  describe('links and caches', () => {\n    it('adds a loanCache on revenues', () => {\n      generator({\n        revenues: {\n          _id: 'rev',\n          amount: 1000,\n          loan: {\n            _id: 'loanId',\n            name: '18-0001',\n            user: { _id: 'user' },\n          },\n        },\n      });\n\n      const revenue = RevenueService.findOne(\n        { _id: 'rev' },\n        { fields: { loanCache: 1 } },\n      );\n\n      expect(revenue.loanCache).to.deep.equal([\n        {\n          _id: 'loanId',\n          name: '18-0001',\n        },\n      ]);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"1b91543a4f28e261ee055a35f4bf0587eff2d199"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/notaryFees/test/degressive.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/notaryFees/test/degressive.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/notaryFees/test/degressive.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/notaryFees/test/degressive.spec.js"],"names":["expect","degressive","VD","describe","it","amount","to","equal","brackets","rate","max","throw","maxTax","minTax","NOTARY_NOTE_BRACKETS"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport degressive from '../degressive';\nimport { VD } from '../cantonConstants';\n\ndescribe('degressive', () => {\n  it('returns 0 for amount of 0', () => {\n    expect(degressive({ amount: 0 })).to.equal(0);\n  });\n\n  it('returns 0 for negative amounts', () => {\n    expect(degressive({ amount: -5 })).to.equal(0);\n  });\n\n  it('returns 0 if no brackets are given', () => {\n    expect(degressive({ amount: 100 })).to.equal(0);\n    expect(degressive({ amount: 100, brackets: [] })).to.equal(0);\n  });\n\n  it('uses single brackets', () => {\n    expect(degressive({ amount: 100, brackets: [{ rate: 0.1, max: 1000 }] })).to.equal(10);\n  });\n\n  it('uses multiple brackets', () => {\n    expect(degressive({\n      amount: 800,\n      brackets: [{ rate: 0.1, max: 500 }, { rate: 0.2, max: 1000 }],\n    })).to.equal(110);\n  });\n\n  it('ignores higher brackets', () => {\n    expect(degressive({\n      amount: 800,\n      brackets: [\n        { rate: 0.1, max: 500 },\n        { rate: 0.2, max: 1000 },\n        { rate: 0.3, max: 1100 },\n      ],\n    })).to.equal(110);\n  });\n\n  it('works with longer tax bracket tables', () => {\n    expect(degressive({\n      amount: 800,\n      brackets: [\n        { rate: 0.1, max: 100 },\n        { rate: 0.2, max: 200 },\n        { rate: 0.3, max: 300 },\n        { rate: 0.4, max: 400 },\n        { rate: 0.5, max: 500 },\n        { rate: 0.6, max: 600 },\n        { rate: 0.7, max: 700 },\n        { rate: 0.8, max: 800 },\n        { rate: 0.9, max: 900 },\n      ],\n    })).to.equal(360);\n  });\n\n  it(\"should throw if tax brackets aren't provided in the right order\", () => {\n    expect(() =>\n      degressive({\n        amount: 100,\n        brackets: [{ rate: 0.1, max: 50 }, { rate: 0.2, max: 30 }],\n      })).to.throw('increasing order');\n  });\n\n  it('should cap the degressive tax if maxTax is given', () => {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{ max: 500, rate: 0.5 }],\n      maxTax: 200,\n    })).to.equal(200);\n  });\n\n  it('should use minTax if provided', () => {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{ max: 500, rate: 0.5 }],\n      minTax: 400,\n    })).to.equal(400);\n  });\n\n  it('should use the last bracket on the remaining amount if it has no max value', () => {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{ rate: 0.1, max: 200 }, { rate: 0.2 }],\n    })).to.equal(180);\n  });\n\n  it('should use minTax if min and max are provided', () => {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{ max: 500, rate: 0.5 }],\n      minTax: 400,\n      maxTax: 1000,\n    })).to.equal(400);\n  });\n\n  it('should use maxTax if min and max are provided', () => {\n    expect(degressive({\n      amount: 1000000,\n      brackets: [{ max: 100000, rate: 0.5 }],\n      minTax: 400,\n      maxTax: 1000,\n    })).to.equal(1000);\n  });\n\n  it('works for this VD example confirmed by a notary', () => {\n    expect(degressive({\n      amount: 940000,\n      brackets: VD.NOTARY_NOTE_BRACKETS,\n    })).to.equal(2585);\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/notaryFees/test/degressive.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/notaryFees/test/degressive.spec.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar degressive;\nmodule.link(\"../degressive\", {\n  \"default\": function (v) {\n    degressive = v;\n  }\n}, 1);\nvar VD;\nmodule.link(\"../cantonConstants\", {\n  VD: function (v) {\n    VD = v;\n  }\n}, 2);\ndescribe('degressive', function () {\n  it('returns 0 for amount of 0', function () {\n    expect(degressive({\n      amount: 0\n    })).to.equal(0);\n  });\n  it('returns 0 for negative amounts', function () {\n    expect(degressive({\n      amount: -5\n    })).to.equal(0);\n  });\n  it('returns 0 if no brackets are given', function () {\n    expect(degressive({\n      amount: 100\n    })).to.equal(0);\n    expect(degressive({\n      amount: 100,\n      brackets: []\n    })).to.equal(0);\n  });\n  it('uses single brackets', function () {\n    expect(degressive({\n      amount: 100,\n      brackets: [{\n        rate: 0.1,\n        max: 1000\n      }]\n    })).to.equal(10);\n  });\n  it('uses multiple brackets', function () {\n    expect(degressive({\n      amount: 800,\n      brackets: [{\n        rate: 0.1,\n        max: 500\n      }, {\n        rate: 0.2,\n        max: 1000\n      }]\n    })).to.equal(110);\n  });\n  it('ignores higher brackets', function () {\n    expect(degressive({\n      amount: 800,\n      brackets: [{\n        rate: 0.1,\n        max: 500\n      }, {\n        rate: 0.2,\n        max: 1000\n      }, {\n        rate: 0.3,\n        max: 1100\n      }]\n    })).to.equal(110);\n  });\n  it('works with longer tax bracket tables', function () {\n    expect(degressive({\n      amount: 800,\n      brackets: [{\n        rate: 0.1,\n        max: 100\n      }, {\n        rate: 0.2,\n        max: 200\n      }, {\n        rate: 0.3,\n        max: 300\n      }, {\n        rate: 0.4,\n        max: 400\n      }, {\n        rate: 0.5,\n        max: 500\n      }, {\n        rate: 0.6,\n        max: 600\n      }, {\n        rate: 0.7,\n        max: 700\n      }, {\n        rate: 0.8,\n        max: 800\n      }, {\n        rate: 0.9,\n        max: 900\n      }]\n    })).to.equal(360);\n  });\n  it(\"should throw if tax brackets aren't provided in the right order\", function () {\n    expect(function () {\n      return degressive({\n        amount: 100,\n        brackets: [{\n          rate: 0.1,\n          max: 50\n        }, {\n          rate: 0.2,\n          max: 30\n        }]\n      });\n    }).to.throw('increasing order');\n  });\n  it('should cap the degressive tax if maxTax is given', function () {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{\n        max: 500,\n        rate: 0.5\n      }],\n      maxTax: 200\n    })).to.equal(200);\n  });\n  it('should use minTax if provided', function () {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{\n        max: 500,\n        rate: 0.5\n      }],\n      minTax: 400\n    })).to.equal(400);\n  });\n  it('should use the last bracket on the remaining amount if it has no max value', function () {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{\n        rate: 0.1,\n        max: 200\n      }, {\n        rate: 0.2\n      }]\n    })).to.equal(180);\n  });\n  it('should use minTax if min and max are provided', function () {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{\n        max: 500,\n        rate: 0.5\n      }],\n      minTax: 400,\n      maxTax: 1000\n    })).to.equal(400);\n  });\n  it('should use maxTax if min and max are provided', function () {\n    expect(degressive({\n      amount: 1000000,\n      brackets: [{\n        max: 100000,\n        rate: 0.5\n      }],\n      minTax: 400,\n      maxTax: 1000\n    })).to.equal(1000);\n  });\n  it('works for this VD example confirmed by a notary', function () {\n    expect(degressive({\n      amount: 940000,\n      brackets: VD.NOTARY_NOTE_BRACKETS\n    })).to.equal(2585);\n  });\n});","map":{"version":3,"sources":["imports/core/utils/notaryFees/test/degressive.spec.js"],"names":["describe","it","expect","degressive","amount","brackets","rate","max","maxTax","minTax","VD","NOTARY_NOTE_BRACKETS"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport degressive from '../degressive';\nimport { VD } from '../cantonConstants';\n\ndescribe('degressive', () => {\n  it('returns 0 for amount of 0', () => {\n    expect(degressive({ amount: 0 })).to.equal(0);\n  });\n\n  it('returns 0 for negative amounts', () => {\n    expect(degressive({ amount: -5 })).to.equal(0);\n  });\n\n  it('returns 0 if no brackets are given', () => {\n    expect(degressive({ amount: 100 })).to.equal(0);\n    expect(degressive({ amount: 100, brackets: [] })).to.equal(0);\n  });\n\n  it('uses single brackets', () => {\n    expect(degressive({ amount: 100, brackets: [{ rate: 0.1, max: 1000 }] })).to.equal(10);\n  });\n\n  it('uses multiple brackets', () => {\n    expect(degressive({\n      amount: 800,\n      brackets: [{ rate: 0.1, max: 500 }, { rate: 0.2, max: 1000 }],\n    })).to.equal(110);\n  });\n\n  it('ignores higher brackets', () => {\n    expect(degressive({\n      amount: 800,\n      brackets: [\n        { rate: 0.1, max: 500 },\n        { rate: 0.2, max: 1000 },\n        { rate: 0.3, max: 1100 },\n      ],\n    })).to.equal(110);\n  });\n\n  it('works with longer tax bracket tables', () => {\n    expect(degressive({\n      amount: 800,\n      brackets: [\n        { rate: 0.1, max: 100 },\n        { rate: 0.2, max: 200 },\n        { rate: 0.3, max: 300 },\n        { rate: 0.4, max: 400 },\n        { rate: 0.5, max: 500 },\n        { rate: 0.6, max: 600 },\n        { rate: 0.7, max: 700 },\n        { rate: 0.8, max: 800 },\n        { rate: 0.9, max: 900 },\n      ],\n    })).to.equal(360);\n  });\n\n  it(\"should throw if tax brackets aren't provided in the right order\", () => {\n    expect(() =>\n      degressive({\n        amount: 100,\n        brackets: [{ rate: 0.1, max: 50 }, { rate: 0.2, max: 30 }],\n      })).to.throw('increasing order');\n  });\n\n  it('should cap the degressive tax if maxTax is given', () => {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{ max: 500, rate: 0.5 }],\n      maxTax: 200,\n    })).to.equal(200);\n  });\n\n  it('should use minTax if provided', () => {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{ max: 500, rate: 0.5 }],\n      minTax: 400,\n    })).to.equal(400);\n  });\n\n  it('should use the last bracket on the remaining amount if it has no max value', () => {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{ rate: 0.1, max: 200 }, { rate: 0.2 }],\n    })).to.equal(180);\n  });\n\n  it('should use minTax if min and max are provided', () => {\n    expect(degressive({\n      amount: 1000,\n      brackets: [{ max: 500, rate: 0.5 }],\n      minTax: 400,\n      maxTax: 1000,\n    })).to.equal(400);\n  });\n\n  it('should use maxTax if min and max are provided', () => {\n    expect(degressive({\n      amount: 1000000,\n      brackets: [{ max: 100000, rate: 0.5 }],\n      minTax: 400,\n      maxTax: 1000,\n    })).to.equal(1000);\n  });\n\n  it('works for this VD example confirmed by a notary', () => {\n    expect(degressive({\n      amount: 940000,\n      brackets: VD.NOTARY_NOTE_BRACKETS,\n    })).to.equal(2585);\n  });\n});\n"]},"sourceType":"script","hash":"5343bb9aa51e6f53446d5f7dabba10949fcb55eb"}

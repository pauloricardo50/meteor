{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/11.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/migrations/server/test/11.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/11.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/migrations/server/test/11.test.js"],"names":["expect","resetDatabase","UserService","up","down","generator","describe","beforeEach","it","organisations","name","users","_id","then","allUsers","fetch","forEach","$metadata","isMain","index","to","equal","undefined"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport UserService from '../../../users/server/UserService';\nimport { up, down } from '../11';\nimport generator from '../../../factories';\n\ndescribe('Migration 11', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('up', () => {\n    it('sets first organisation as main', () => {\n      generator({\n        organisations: [\n          { name: 'org1', users: [{ _id: 'user1' }, { _id: 'user2' }] },\n          { name: 'org2', users: [{ _id: 'user1' }] },\n          {\n            name: 'org3',\n            users: [{ _id: 'user1' }, { _id: 'user2' }, { _id: 'user3' }],\n          },\n          { name: 'org4', users: [{ _id: 'user2' }] },\n        ],\n        users: [{ _id: 'user4' }],\n      });\n      return up().then(() => {\n        const allUsers = UserService.fetch({\n          organisations: { _id: 1 },\n        });\n        allUsers.forEach(({ organisations = [] }) =>\n          organisations.forEach(({ $metadata: { isMain } }, index) => {\n            if (index === 0) {\n              expect(isMain).to.equal(true);\n            } else {\n              expect(isMain).to.equal(false);\n            }\n          }));\n      });\n    });\n  });\n\n  describe('down', () => {\n    it('removes isMain metadata', () => {\n      generator({\n        organisations: [\n          {\n            name: 'org1',\n            users: [\n              { _id: 'user1', $metadata: { isMain: true } },\n              { _id: 'user2' },\n            ],\n          },\n          { name: 'org2', users: [{ _id: 'user1' }] },\n          {\n            name: 'org3',\n            users: [\n              { _id: 'user1' },\n              { _id: 'user2' },\n              { _id: 'user3', $metadata: { isMain: true } },\n            ],\n          },\n          {\n            name: 'org4',\n            users: [{ _id: 'user2', $metadata: { isMain: true } }],\n          },\n        ],\n        users: [{ _id: 'user4' }],\n      });\n      return down().then(() => {\n        const allUsers = UserService.fetch({\n          organisations: { _id: 1 },\n        });\n        allUsers.forEach(({ organisations = [] }) =>\n          organisations.forEach(({ $metadata: { isMain } }) => {\n            expect(isMain).to.equal(undefined);\n          }));\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/11.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/migrations/server/test/11.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet UserService;\nmodule.link(\"../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 2);\nlet up, down;\nmodule.link(\"../11\", {\n  up(v) {\n    up = v;\n  },\n\n  down(v) {\n    down = v;\n  }\n\n}, 3);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 4);\ndescribe('Migration 11', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('up', () => {\n    it('sets first organisation as main', () => {\n      generator({\n        organisations: [{\n          name: 'org1',\n          users: [{\n            _id: 'user1'\n          }, {\n            _id: 'user2'\n          }]\n        }, {\n          name: 'org2',\n          users: [{\n            _id: 'user1'\n          }]\n        }, {\n          name: 'org3',\n          users: [{\n            _id: 'user1'\n          }, {\n            _id: 'user2'\n          }, {\n            _id: 'user3'\n          }]\n        }, {\n          name: 'org4',\n          users: [{\n            _id: 'user2'\n          }]\n        }],\n        users: [{\n          _id: 'user4'\n        }]\n      });\n      return up().then(() => {\n        const allUsers = UserService.fetch({\n          organisations: {\n            _id: 1\n          }\n        });\n        allUsers.forEach(({\n          organisations = []\n        }) => organisations.forEach(({\n          $metadata: {\n            isMain\n          }\n        }, index) => {\n          if (index === 0) {\n            expect(isMain).to.equal(true);\n          } else {\n            expect(isMain).to.equal(false);\n          }\n        }));\n      });\n    });\n  });\n  describe('down', () => {\n    it('removes isMain metadata', () => {\n      generator({\n        organisations: [{\n          name: 'org1',\n          users: [{\n            _id: 'user1',\n            $metadata: {\n              isMain: true\n            }\n          }, {\n            _id: 'user2'\n          }]\n        }, {\n          name: 'org2',\n          users: [{\n            _id: 'user1'\n          }]\n        }, {\n          name: 'org3',\n          users: [{\n            _id: 'user1'\n          }, {\n            _id: 'user2'\n          }, {\n            _id: 'user3',\n            $metadata: {\n              isMain: true\n            }\n          }]\n        }, {\n          name: 'org4',\n          users: [{\n            _id: 'user2',\n            $metadata: {\n              isMain: true\n            }\n          }]\n        }],\n        users: [{\n          _id: 'user4'\n        }]\n      });\n      return down().then(() => {\n        const allUsers = UserService.fetch({\n          organisations: {\n            _id: 1\n          }\n        });\n        allUsers.forEach(({\n          organisations = []\n        }) => organisations.forEach(({\n          $metadata: {\n            isMain\n          }\n        }) => {\n          expect(isMain).to.equal(undefined);\n        }));\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/migrations/server/test/11.test.js"],"names":["describe","beforeEach","resetDatabase","it","generator","organisations","name","users","_id","allUsers","$metadata","isMain","index","expect"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport UserService from '../../../users/server/UserService';\nimport { up, down } from '../11';\nimport generator from '../../../factories';\n\ndescribe('Migration 11', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('up', () => {\n    it('sets first organisation as main', () => {\n      generator({\n        organisations: [\n          { name: 'org1', users: [{ _id: 'user1' }, { _id: 'user2' }] },\n          { name: 'org2', users: [{ _id: 'user1' }] },\n          {\n            name: 'org3',\n            users: [{ _id: 'user1' }, { _id: 'user2' }, { _id: 'user3' }],\n          },\n          { name: 'org4', users: [{ _id: 'user2' }] },\n        ],\n        users: [{ _id: 'user4' }],\n      });\n      return up().then(() => {\n        const allUsers = UserService.fetch({\n          organisations: { _id: 1 },\n        });\n        allUsers.forEach(({ organisations = [] }) =>\n          organisations.forEach(({ $metadata: { isMain } }, index) => {\n            if (index === 0) {\n              expect(isMain).to.equal(true);\n            } else {\n              expect(isMain).to.equal(false);\n            }\n          }));\n      });\n    });\n  });\n\n  describe('down', () => {\n    it('removes isMain metadata', () => {\n      generator({\n        organisations: [\n          {\n            name: 'org1',\n            users: [\n              { _id: 'user1', $metadata: { isMain: true } },\n              { _id: 'user2' },\n            ],\n          },\n          { name: 'org2', users: [{ _id: 'user1' }] },\n          {\n            name: 'org3',\n            users: [\n              { _id: 'user1' },\n              { _id: 'user2' },\n              { _id: 'user3', $metadata: { isMain: true } },\n            ],\n          },\n          {\n            name: 'org4',\n            users: [{ _id: 'user2', $metadata: { isMain: true } }],\n          },\n        ],\n        users: [{ _id: 'user4' }],\n      });\n      return down().then(() => {\n        const allUsers = UserService.fetch({\n          organisations: { _id: 1 },\n        });\n        allUsers.forEach(({ organisations = [] }) =>\n          organisations.forEach(({ $metadata: { isMain } }) => {\n            expect(isMain).to.equal(undefined);\n          }));\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"3821eff6c7f861a9945af7567283b2d49d7fba62"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/SolvencyCalculator.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/Calculator/SolvencyCalculator.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/SolvencyCalculator.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/Calculator/SolvencyCalculator.js"],"names":["OWN_FUNDS_ROUNDING_AMOUNT","OWN_FUNDS_TYPES","RESIDENCE_TYPE","OWN_FUNDS_USAGE_TYPES","arrayify","NotaryFeesCalculator","roundValue","INITIAL_MIN_BOUND","INITIAL_MAX_BOUND","INITIAL_ABSOLUTE_MAX_BOUND","MAX_ITERATIONS","ACCURACY","ROUNDING_DIGITS","Math","log10","MAX_BOUND_MULTIPLICATION_FACTOR","OWN_FUNDS_ROUNDING_ALGO","INITIAL_BORROW_RATIO_STEP_SIZE","withSolvencyCalculator","SuperClass","getAllowedOwnFundsTypes","residenceType","MAIN_RESIDENCE","THIRD_PARTY_FORTUNE","BANK_FORTUNE","INSURANCE_3A","BANK_3A","INSURANCE_3B","INSURANCE_2","ownFundTypeRequiresUsageType","type","includes","makeOwnFunds","borrowers","usageType","max","map","borrower","ownFundsObject","value","ceil","min","getFunds","borrowerId","_id","WITHDRAW","filter","suggestStructure","propertyValue","maxBorrowRatio","loanValue","canton","notaryFees","forcedNotaryFees","finalLoanValue","round","notaryCalc","getNotaryFeesWithoutLoan","mortgageNoteIncrease","total","requiredOwnFunds","ownFunds","allowedOwnFundsTypes","forEach","newOwnFunds","reduce","tot","createLoanObject","wantedLoan","loanTranches","rest","structure","property","suggestedStructureIsValid","loanObject","lenderRules","initialize","loan","isMissingOwnFunds","hasEnoughCash","structureIsValid","getMaxPropertyValue","foundValue","minBound","maxBound","absoluteMax","iterations","ownFundsRoundingAmount","nextPropertyValue","getNextStepSize","currentMax","currentBorrowRatio","stepSize","direction","cache","newStepSize","foundBetterValue","nextValue","getMaxPropertyValueWithoutBorrowRatio","borrowRatio","deltaX","maxPropertyValue","optimalBorrowRatio","setMax","ratio","center","yLeft","yRight","slope","finalBorrowRatio","finalPropertyValue","getMaxPropertyValueForLoan","loanResidenceType","suggestStructureForLoan","structureId","getPropAndWork","selectLoanValue","getFees"],"mappings":"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","sourcesContent":["// @flow\nimport { OWN_FUNDS_ROUNDING_AMOUNT } from '../../config/financeConstants';\nimport {\n  OWN_FUNDS_TYPES,\n  RESIDENCE_TYPE,\n  OWN_FUNDS_USAGE_TYPES,\n} from '../../api/constants';\nimport { arrayify } from '../general';\nimport { NotaryFeesCalculator } from '../notaryFees/index';\nimport { roundValue } from '../conversionFunctions';\n\nconst INITIAL_MIN_BOUND = 0;\nconst INITIAL_MAX_BOUND = 1000000;\nconst INITIAL_ABSOLUTE_MAX_BOUND = 100000000;\nconst MAX_ITERATIONS = 50;\nconst ACCURACY = 1000;\nconst ROUNDING_DIGITS = Math.log10(ACCURACY);\nconst MAX_BOUND_MULTIPLICATION_FACTOR = 2;\nconst OWN_FUNDS_ROUNDING_ALGO = 100;\nconst INITIAL_BORROW_RATIO_STEP_SIZE = 0.05;\n\nexport const withSolvencyCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    getAllowedOwnFundsTypes({ residenceType }) {\n      return residenceType === RESIDENCE_TYPE.MAIN_RESIDENCE\n        ? [\n          OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n          OWN_FUNDS_TYPES.BANK_FORTUNE,\n          OWN_FUNDS_TYPES.INSURANCE_3A,\n          OWN_FUNDS_TYPES.BANK_3A,\n          OWN_FUNDS_TYPES.INSURANCE_3B,\n          OWN_FUNDS_TYPES.INSURANCE_2,\n        ]\n        : [\n          OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n          OWN_FUNDS_TYPES.BANK_FORTUNE,\n          OWN_FUNDS_TYPES.INSURANCE_3B,\n        ];\n    }\n\n    ownFundTypeRequiresUsageType({ type }) {\n      return [\n        OWN_FUNDS_TYPES.INSURANCE_2,\n        OWN_FUNDS_TYPES.INSURANCE_3A,\n        OWN_FUNDS_TYPES.INSURANCE_3B,\n      ].includes(type);\n    }\n\n    makeOwnFunds({ borrowers, type, usageType, max }) {\n      return arrayify(borrowers)\n        .map((borrower) => {\n          const ownFundsObject = {\n            type,\n            value: Math.ceil(Math.min(max, this.getFunds({ borrowers: borrower, type }))),\n            borrowerId: borrower._id,\n          };\n\n          if (!usageType && this.ownFundTypeRequiresUsageType({ type })) {\n            return {\n              ...ownFundsObject,\n              usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n            };\n          }\n\n          if (usageType) {\n            return { ...ownFundsObject, usageType };\n          }\n\n          return ownFundsObject;\n        })\n        .filter(({ value }) => value > 0);\n    }\n\n    suggestStructure({\n      borrowers,\n      propertyValue,\n      maxBorrowRatio = this.maxBorrowRatio,\n      loanValue,\n      canton,\n      residenceType,\n      notaryFees: forcedNotaryFees,\n    }) {\n      let notaryFees;\n\n      const finalLoanValue = loanValue || Math.round(propertyValue * maxBorrowRatio);\n\n      if (forcedNotaryFees) {\n        notaryFees = forcedNotaryFees;\n      } else {\n        const notaryCalc = new NotaryFeesCalculator({ canton });\n        notaryFees = notaryCalc.getNotaryFeesWithoutLoan({\n          propertyValue,\n          mortgageNoteIncrease: finalLoanValue,\n          residenceType,\n        }).total;\n      }\n\n      let requiredOwnFunds = Math.round(propertyValue + notaryFees - finalLoanValue);\n      let ownFunds = [];\n\n      // Get all possible OWN_FUNDS_TYPES\n      const allowedOwnFundsTypes = this.getAllowedOwnFundsTypes({\n        residenceType,\n      });\n\n      allowedOwnFundsTypes.forEach((type) => {\n        borrowers.forEach((borrower) => {\n          const newOwnFunds = this.makeOwnFunds({\n            borrowers: borrower,\n            type,\n            max: requiredOwnFunds,\n          });\n\n          requiredOwnFunds -= newOwnFunds.reduce(\n            (tot, { value }) => tot + value,\n            0,\n          );\n\n          ownFunds = [...ownFunds, ...newOwnFunds];\n        });\n      });\n\n      return ownFunds;\n    }\n\n    createLoanObject({\n      residenceType,\n      borrowers,\n      wantedLoan,\n      propertyValue,\n      canton,\n      ownFunds = [],\n      loanTranches = [],\n      ...rest\n    }) {\n      return {\n        residenceType,\n        borrowers,\n        structure: {\n          wantedLoan,\n          propertyValue,\n          property: { canton },\n          ownFunds,\n          loanTranches,\n        },\n        ...rest,\n      };\n    }\n\n    suggestedStructureIsValid({\n      borrowers,\n      propertyValue,\n      maxBorrowRatio = this.maxBorrowRatio,\n      loanValue,\n      canton,\n      residenceType,\n      ownFunds,\n    }) {\n      const finalLoanValue = loanValue || Math.round(propertyValue * maxBorrowRatio);\n      const loanObject = this.createLoanObject({\n        residenceType,\n        borrowers,\n        wantedLoan: finalLoanValue,\n        propertyValue,\n        canton,\n        ownFunds,\n      });\n\n      // If the calculator has been initialized, reinitialize it according to this new potential loan\n      if (this.lenderRules) {\n        this.initialize({ loan: loanObject, lenderRules: this.lenderRules });\n      }\n\n      if (this.isMissingOwnFunds({ loan: loanObject })) {\n        return false;\n      }\n\n      if (!this.hasEnoughCash({ loan: loanObject })) {\n        return false;\n      }\n\n      if (!this.structureIsValid({ loan: loanObject })) {\n        return false;\n      }\n\n      return true;\n    }\n\n    getMaxPropertyValue({ borrowers, maxBorrowRatio, canton, residenceType }) {\n      // Immediately stop iterating if maxBorrowRatio is above what is allowed\n      if (this.maxBorrowRatio < maxBorrowRatio) {\n        return 0;\n      }\n\n      let foundValue = false;\n      let minBound = INITIAL_MIN_BOUND;\n      let maxBound = INITIAL_MAX_BOUND;\n      let absoluteMax = INITIAL_ABSOLUTE_MAX_BOUND;\n      let iterations = 0;\n\n      // The rounding amount of 1000 is helpful when the user tries to\n      // fit his own funds into a structure without being overly accurate\n      // which is annoying.\n      // However for this calculation we don't need to round own funds as loosely\n      this.ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_ALGO;\n\n      while (!foundValue) {\n        iterations += 1;\n        const nextPropertyValue = roundValue(\n          (minBound + maxBound) / 2,\n          ROUNDING_DIGITS,\n        );\n\n        const ownFunds = this.suggestStructure({\n          borrowers,\n          maxBorrowRatio,\n          canton,\n          residenceType,\n          propertyValue: nextPropertyValue,\n        });\n\n        if (\n          this.suggestedStructureIsValid({\n            borrowers,\n            maxBorrowRatio,\n            canton,\n            residenceType,\n            propertyValue: nextPropertyValue,\n            ownFunds,\n          })\n        ) {\n          minBound = nextPropertyValue;\n          maxBound = Math.min(\n            maxBound * MAX_BOUND_MULTIPLICATION_FACTOR,\n            absoluteMax,\n          );\n        } else {\n          maxBound = nextPropertyValue;\n          absoluteMax = maxBound;\n        }\n\n        if (maxBound - minBound <= ACCURACY) {\n          foundValue = true;\n        }\n\n        if (iterations > MAX_ITERATIONS) {\n          foundValue = true;\n        }\n      }\n\n      this.ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_AMOUNT;\n\n      return minBound;\n    }\n\n    getNextStepSize({\n      currentMax,\n      currentBorrowRatio,\n      stepSize,\n      borrowers,\n      residenceType,\n      canton,\n      direction,\n      cache,\n    }) {\n      let newStepSize = stepSize;\n      let foundBetterValue;\n\n      while (!foundBetterValue) {\n        let nextValue;\n        if (direction === 'upwards') {\n          nextValue = cache[currentBorrowRatio + stepSize]\n            || this.getMaxPropertyValue({\n              borrowers,\n              residenceType,\n              maxBorrowRatio: currentBorrowRatio + stepSize,\n              canton,\n            });\n        } else {\n          nextValue = cache[currentBorrowRatio - stepSize]\n            || this.getMaxPropertyValue({\n              borrowers,\n              residenceType,\n              maxBorrowRatio: currentBorrowRatio - stepSize,\n              canton,\n            });\n        }\n\n        if (nextValue > currentMax) {\n          foundBetterValue = true;\n        } else {\n          newStepSize /= 2;\n        }\n\n        if (newStepSize < 0.05) {\n          foundBetterValue = true;\n        }\n      }\n\n      return newStepSize;\n    }\n\n    getMaxPropertyValueWithoutBorrowRatio({\n      borrowers,\n      residenceType,\n      canton,\n    }) {\n      let borrowRatio = 0.7;\n      let foundValue = false;\n      let iterations = 0;\n      let stepSize = INITIAL_BORROW_RATIO_STEP_SIZE;\n      const deltaX = 0.01;\n      let maxPropertyValue = 0;\n      let optimalBorrowRatio;\n      const cache = {};\n\n      const setMax = (ratio, propertyValue) => {\n        // Cache each result to avoid recalculating it later\n        if (!cache[`${ratio}`]) {\n          cache[`${ratio}`] = propertyValue;\n        }\n\n        // Always store the highest encountered value, in case the loop\n        // stops prematurely, or if the stopping conditions would've skipped\n        // a value that we already calculated\n        if (propertyValue > maxPropertyValue) {\n          maxPropertyValue = propertyValue;\n          optimalBorrowRatio = ratio;\n        }\n      };\n\n      while (!foundValue) {\n        iterations += 1;\n\n        const center = cache[borrowRatio]\n          || this.getMaxPropertyValue({\n            borrowers,\n            residenceType,\n            maxBorrowRatio: borrowRatio,\n            canton,\n          });\n        setMax(borrowRatio, center);\n\n        const yLeft = cache[borrowRatio - deltaX]\n          || this.getMaxPropertyValue({\n            borrowers,\n            residenceType,\n            maxBorrowRatio: borrowRatio - deltaX,\n            canton,\n          });\n        setMax(borrowRatio - deltaX, yLeft);\n        const yRight = cache[borrowRatio + deltaX]\n          || this.getMaxPropertyValue({\n            borrowers,\n            residenceType,\n            maxBorrowRatio: borrowRatio + deltaX,\n            canton,\n          });\n        setMax(borrowRatio + deltaX, yRight);\n\n        const slope = yRight - yLeft;\n\n        if (yRight === 0 && yLeft === 0) {\n          // If the algorithm is at 0 on both sides, it means the borrowRatio\n          // is way too high, so start him over again at 0, but with a large\n          // step size to allow it to recover quickly\n          borrowRatio = INITIAL_BORROW_RATIO_STEP_SIZE;\n          stepSize = 0.2;\n        } else if (slope > 0) {\n          stepSize = this.getNextStepSize({\n            currentMax: center,\n            currentBorrowRatio: borrowRatio,\n            stepSize,\n            borrowers,\n            residenceType,\n            canton,\n            direction: 'upwards',\n            cache,\n          });\n          borrowRatio += stepSize;\n        } else {\n          stepSize = this.getNextStepSize({\n            currentMax: center,\n            currentBorrowRatio: borrowRatio,\n            stepSize,\n            borrowers,\n            residenceType,\n            canton,\n            direction: 'downwards',\n            cache,\n          });\n          borrowRatio -= stepSize;\n        }\n\n        if (stepSize < deltaX / 2) {\n          foundValue = true;\n        }\n\n        if (iterations > 50) {\n          foundValue = true;\n        }\n      }\n\n      // Round the borrowRatio, and recompute the exact property value\n      const finalBorrowRatio = Math.round(optimalBorrowRatio * 10000) / 10000;\n      const finalPropertyValue = cache[finalBorrowRatio]\n        || this.getMaxPropertyValue({\n          borrowers,\n          residenceType,\n          maxBorrowRatio: finalBorrowRatio,\n          canton,\n        });\n\n      return {\n        borrowRatio: finalBorrowRatio,\n        propertyValue: finalPropertyValue,\n      };\n    }\n\n    getMaxPropertyValueForLoan({\n      loan,\n      maxBorrowRatio,\n      canton,\n      residenceType,\n    }) {\n      const { borrowers, residenceType: loanResidenceType } = loan;\n      return this.getMaxPropertyValue({\n        borrowers,\n        residenceType: residenceType || loanResidenceType,\n        maxBorrowRatio,\n        canton,\n      });\n    }\n\n    suggestStructureForLoan({ loan, structureId }) {\n      const propertyValue = this.getPropAndWork({ loan, structureId });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      const notaryFees = this.getFees({ loan, structureId }).total;\n\n      return this.suggestStructure({\n        borrowers: loan.borrowers,\n        propertyValue,\n        loanValue,\n        residenceType: loan.residenceType,\n        notaryFees,\n      });\n    }\n  };\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/SolvencyCalculator.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/Calculator/SolvencyCalculator.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nmodule.export({\n  withSolvencyCalculator: function () {\n    return withSolvencyCalculator;\n  }\n});\nvar OWN_FUNDS_ROUNDING_AMOUNT;\nmodule.link(\"../../config/financeConstants\", {\n  OWN_FUNDS_ROUNDING_AMOUNT: function (v) {\n    OWN_FUNDS_ROUNDING_AMOUNT = v;\n  }\n}, 0);\nvar OWN_FUNDS_TYPES, RESIDENCE_TYPE, OWN_FUNDS_USAGE_TYPES;\nmodule.link(\"../../api/constants\", {\n  OWN_FUNDS_TYPES: function (v) {\n    OWN_FUNDS_TYPES = v;\n  },\n  RESIDENCE_TYPE: function (v) {\n    RESIDENCE_TYPE = v;\n  },\n  OWN_FUNDS_USAGE_TYPES: function (v) {\n    OWN_FUNDS_USAGE_TYPES = v;\n  }\n}, 1);\nvar arrayify;\nmodule.link(\"../general\", {\n  arrayify: function (v) {\n    arrayify = v;\n  }\n}, 2);\nvar NotaryFeesCalculator;\nmodule.link(\"../notaryFees/index\", {\n  NotaryFeesCalculator: function (v) {\n    NotaryFeesCalculator = v;\n  }\n}, 3);\nvar roundValue;\nmodule.link(\"../conversionFunctions\", {\n  roundValue: function (v) {\n    roundValue = v;\n  }\n}, 4);\nvar INITIAL_MIN_BOUND = 0;\nvar INITIAL_MAX_BOUND = 1000000;\nvar INITIAL_ABSOLUTE_MAX_BOUND = 100000000;\nvar MAX_ITERATIONS = 50;\nvar ACCURACY = 1000;\nvar ROUNDING_DIGITS = Math.log10(ACCURACY);\nvar MAX_BOUND_MULTIPLICATION_FACTOR = 2;\nvar OWN_FUNDS_ROUNDING_ALGO = 100;\nvar INITIAL_BORROW_RATIO_STEP_SIZE = 0.05;\n\nvar withSolvencyCalculator = function () {\n  var SuperClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] :\n  /*#__PURE__*/\n  function () {\n    function _class() {}\n\n    return _class;\n  }();\n  return (\n    /*#__PURE__*/\n    function (_SuperClass) {\n      (0, _inheritsLoose2.default)(_class2, _SuperClass);\n\n      function _class2() {\n        return _SuperClass.apply(this, arguments) || this;\n      }\n\n      var _proto = _class2.prototype;\n\n      _proto.getAllowedOwnFundsTypes = function () {\n        function getAllowedOwnFundsTypes(_ref) {\n          var residenceType = _ref.residenceType;\n          return residenceType === RESIDENCE_TYPE.MAIN_RESIDENCE ? [OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE, OWN_FUNDS_TYPES.BANK_FORTUNE, OWN_FUNDS_TYPES.INSURANCE_3A, OWN_FUNDS_TYPES.BANK_3A, OWN_FUNDS_TYPES.INSURANCE_3B, OWN_FUNDS_TYPES.INSURANCE_2] : [OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE, OWN_FUNDS_TYPES.BANK_FORTUNE, OWN_FUNDS_TYPES.INSURANCE_3B];\n        }\n\n        return getAllowedOwnFundsTypes;\n      }();\n\n      _proto.ownFundTypeRequiresUsageType = function () {\n        function ownFundTypeRequiresUsageType(_ref2) {\n          var type = _ref2.type;\n          return [OWN_FUNDS_TYPES.INSURANCE_2, OWN_FUNDS_TYPES.INSURANCE_3A, OWN_FUNDS_TYPES.INSURANCE_3B].includes(type);\n        }\n\n        return ownFundTypeRequiresUsageType;\n      }();\n\n      _proto.makeOwnFunds = function () {\n        function makeOwnFunds(_ref3) {\n          var _this = this;\n\n          var borrowers = _ref3.borrowers,\n              type = _ref3.type,\n              usageType = _ref3.usageType,\n              max = _ref3.max;\n          return arrayify(borrowers).map(function (borrower) {\n            var ownFundsObject = {\n              type: type,\n              value: Math.ceil(Math.min(max, _this.getFunds({\n                borrowers: borrower,\n                type: type\n              }))),\n              borrowerId: borrower._id\n            };\n\n            if (!usageType && _this.ownFundTypeRequiresUsageType({\n              type: type\n            })) {\n              return (0, _objectSpread2.default)({}, ownFundsObject, {\n                usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW\n              });\n            }\n\n            if (usageType) {\n              return (0, _objectSpread2.default)({}, ownFundsObject, {\n                usageType: usageType\n              });\n            }\n\n            return ownFundsObject;\n          }).filter(function (_ref4) {\n            var value = _ref4.value;\n            return value > 0;\n          });\n        }\n\n        return makeOwnFunds;\n      }();\n\n      _proto.suggestStructure = function () {\n        function suggestStructure(_ref5) {\n          var _this2 = this;\n\n          var borrowers = _ref5.borrowers,\n              propertyValue = _ref5.propertyValue,\n              _ref5$maxBorrowRatio = _ref5.maxBorrowRatio,\n              maxBorrowRatio = _ref5$maxBorrowRatio === void 0 ? this.maxBorrowRatio : _ref5$maxBorrowRatio,\n              loanValue = _ref5.loanValue,\n              canton = _ref5.canton,\n              residenceType = _ref5.residenceType,\n              forcedNotaryFees = _ref5.notaryFees;\n          var notaryFees;\n          var finalLoanValue = loanValue || Math.round(propertyValue * maxBorrowRatio);\n\n          if (forcedNotaryFees) {\n            notaryFees = forcedNotaryFees;\n          } else {\n            var notaryCalc = new NotaryFeesCalculator({\n              canton: canton\n            });\n            notaryFees = notaryCalc.getNotaryFeesWithoutLoan({\n              propertyValue: propertyValue,\n              mortgageNoteIncrease: finalLoanValue,\n              residenceType: residenceType\n            }).total;\n          }\n\n          var requiredOwnFunds = Math.round(propertyValue + notaryFees - finalLoanValue);\n          var ownFunds = []; // Get all possible OWN_FUNDS_TYPES\n\n          var allowedOwnFundsTypes = this.getAllowedOwnFundsTypes({\n            residenceType: residenceType\n          });\n          allowedOwnFundsTypes.forEach(function (type) {\n            borrowers.forEach(function (borrower) {\n              var newOwnFunds = _this2.makeOwnFunds({\n                borrowers: borrower,\n                type: type,\n                max: requiredOwnFunds\n              });\n\n              requiredOwnFunds -= newOwnFunds.reduce(function (tot, _ref6) {\n                var value = _ref6.value;\n                return tot + value;\n              }, 0);\n              ownFunds = [].concat((0, _toConsumableArray2.default)(ownFunds), (0, _toConsumableArray2.default)(newOwnFunds));\n            });\n          });\n          return ownFunds;\n        }\n\n        return suggestStructure;\n      }();\n\n      _proto.createLoanObject = function () {\n        function createLoanObject(_ref7) {\n          var residenceType = _ref7.residenceType,\n              borrowers = _ref7.borrowers,\n              wantedLoan = _ref7.wantedLoan,\n              propertyValue = _ref7.propertyValue,\n              canton = _ref7.canton,\n              _ref7$ownFunds = _ref7.ownFunds,\n              ownFunds = _ref7$ownFunds === void 0 ? [] : _ref7$ownFunds,\n              _ref7$loanTranches = _ref7.loanTranches,\n              loanTranches = _ref7$loanTranches === void 0 ? [] : _ref7$loanTranches,\n              rest = (0, _objectWithoutProperties2.default)(_ref7, [\"residenceType\", \"borrowers\", \"wantedLoan\", \"propertyValue\", \"canton\", \"ownFunds\", \"loanTranches\"]);\n          return (0, _objectSpread2.default)({\n            residenceType: residenceType,\n            borrowers: borrowers,\n            structure: {\n              wantedLoan: wantedLoan,\n              propertyValue: propertyValue,\n              property: {\n                canton: canton\n              },\n              ownFunds: ownFunds,\n              loanTranches: loanTranches\n            }\n          }, rest);\n        }\n\n        return createLoanObject;\n      }();\n\n      _proto.suggestedStructureIsValid = function () {\n        function suggestedStructureIsValid(_ref8) {\n          var borrowers = _ref8.borrowers,\n              propertyValue = _ref8.propertyValue,\n              _ref8$maxBorrowRatio = _ref8.maxBorrowRatio,\n              maxBorrowRatio = _ref8$maxBorrowRatio === void 0 ? this.maxBorrowRatio : _ref8$maxBorrowRatio,\n              loanValue = _ref8.loanValue,\n              canton = _ref8.canton,\n              residenceType = _ref8.residenceType,\n              ownFunds = _ref8.ownFunds;\n          var finalLoanValue = loanValue || Math.round(propertyValue * maxBorrowRatio);\n          var loanObject = this.createLoanObject({\n            residenceType: residenceType,\n            borrowers: borrowers,\n            wantedLoan: finalLoanValue,\n            propertyValue: propertyValue,\n            canton: canton,\n            ownFunds: ownFunds\n          }); // If the calculator has been initialized, reinitialize it according to this new potential loan\n\n          if (this.lenderRules) {\n            this.initialize({\n              loan: loanObject,\n              lenderRules: this.lenderRules\n            });\n          }\n\n          if (this.isMissingOwnFunds({\n            loan: loanObject\n          })) {\n            return false;\n          }\n\n          if (!this.hasEnoughCash({\n            loan: loanObject\n          })) {\n            return false;\n          }\n\n          if (!this.structureIsValid({\n            loan: loanObject\n          })) {\n            return false;\n          }\n\n          return true;\n        }\n\n        return suggestedStructureIsValid;\n      }();\n\n      _proto.getMaxPropertyValue = function () {\n        function getMaxPropertyValue(_ref9) {\n          var borrowers = _ref9.borrowers,\n              maxBorrowRatio = _ref9.maxBorrowRatio,\n              canton = _ref9.canton,\n              residenceType = _ref9.residenceType;\n\n          // Immediately stop iterating if maxBorrowRatio is above what is allowed\n          if (this.maxBorrowRatio < maxBorrowRatio) {\n            return 0;\n          }\n\n          var foundValue = false;\n          var minBound = INITIAL_MIN_BOUND;\n          var maxBound = INITIAL_MAX_BOUND;\n          var absoluteMax = INITIAL_ABSOLUTE_MAX_BOUND;\n          var iterations = 0; // The rounding amount of 1000 is helpful when the user tries to\n          // fit his own funds into a structure without being overly accurate\n          // which is annoying.\n          // However for this calculation we don't need to round own funds as loosely\n\n          this.ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_ALGO;\n\n          while (!foundValue) {\n            iterations += 1;\n            var nextPropertyValue = roundValue((minBound + maxBound) / 2, ROUNDING_DIGITS);\n            var ownFunds = this.suggestStructure({\n              borrowers: borrowers,\n              maxBorrowRatio: maxBorrowRatio,\n              canton: canton,\n              residenceType: residenceType,\n              propertyValue: nextPropertyValue\n            });\n\n            if (this.suggestedStructureIsValid({\n              borrowers: borrowers,\n              maxBorrowRatio: maxBorrowRatio,\n              canton: canton,\n              residenceType: residenceType,\n              propertyValue: nextPropertyValue,\n              ownFunds: ownFunds\n            })) {\n              minBound = nextPropertyValue;\n              maxBound = Math.min(maxBound * MAX_BOUND_MULTIPLICATION_FACTOR, absoluteMax);\n            } else {\n              maxBound = nextPropertyValue;\n              absoluteMax = maxBound;\n            }\n\n            if (maxBound - minBound <= ACCURACY) {\n              foundValue = true;\n            }\n\n            if (iterations > MAX_ITERATIONS) {\n              foundValue = true;\n            }\n          }\n\n          this.ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_AMOUNT;\n          return minBound;\n        }\n\n        return getMaxPropertyValue;\n      }();\n\n      _proto.getNextStepSize = function () {\n        function getNextStepSize(_ref10) {\n          var currentMax = _ref10.currentMax,\n              currentBorrowRatio = _ref10.currentBorrowRatio,\n              stepSize = _ref10.stepSize,\n              borrowers = _ref10.borrowers,\n              residenceType = _ref10.residenceType,\n              canton = _ref10.canton,\n              direction = _ref10.direction,\n              cache = _ref10.cache;\n          var newStepSize = stepSize;\n          var foundBetterValue;\n\n          while (!foundBetterValue) {\n            var nextValue = void 0;\n\n            if (direction === 'upwards') {\n              nextValue = cache[currentBorrowRatio + stepSize] || this.getMaxPropertyValue({\n                borrowers: borrowers,\n                residenceType: residenceType,\n                maxBorrowRatio: currentBorrowRatio + stepSize,\n                canton: canton\n              });\n            } else {\n              nextValue = cache[currentBorrowRatio - stepSize] || this.getMaxPropertyValue({\n                borrowers: borrowers,\n                residenceType: residenceType,\n                maxBorrowRatio: currentBorrowRatio - stepSize,\n                canton: canton\n              });\n            }\n\n            if (nextValue > currentMax) {\n              foundBetterValue = true;\n            } else {\n              newStepSize /= 2;\n            }\n\n            if (newStepSize < 0.05) {\n              foundBetterValue = true;\n            }\n          }\n\n          return newStepSize;\n        }\n\n        return getNextStepSize;\n      }();\n\n      _proto.getMaxPropertyValueWithoutBorrowRatio = function () {\n        function getMaxPropertyValueWithoutBorrowRatio(_ref11) {\n          var borrowers = _ref11.borrowers,\n              residenceType = _ref11.residenceType,\n              canton = _ref11.canton;\n          var borrowRatio = 0.7;\n          var foundValue = false;\n          var iterations = 0;\n          var stepSize = INITIAL_BORROW_RATIO_STEP_SIZE;\n          var deltaX = 0.01;\n          var maxPropertyValue = 0;\n          var optimalBorrowRatio;\n          var cache = {};\n\n          var setMax = function (ratio, propertyValue) {\n            // Cache each result to avoid recalculating it later\n            if (!cache[\"\" + ratio]) {\n              cache[\"\" + ratio] = propertyValue;\n            } // Always store the highest encountered value, in case the loop\n            // stops prematurely, or if the stopping conditions would've skipped\n            // a value that we already calculated\n\n\n            if (propertyValue > maxPropertyValue) {\n              maxPropertyValue = propertyValue;\n              optimalBorrowRatio = ratio;\n            }\n          };\n\n          while (!foundValue) {\n            iterations += 1;\n            var center = cache[borrowRatio] || this.getMaxPropertyValue({\n              borrowers: borrowers,\n              residenceType: residenceType,\n              maxBorrowRatio: borrowRatio,\n              canton: canton\n            });\n            setMax(borrowRatio, center);\n            var yLeft = cache[borrowRatio - deltaX] || this.getMaxPropertyValue({\n              borrowers: borrowers,\n              residenceType: residenceType,\n              maxBorrowRatio: borrowRatio - deltaX,\n              canton: canton\n            });\n            setMax(borrowRatio - deltaX, yLeft);\n            var yRight = cache[borrowRatio + deltaX] || this.getMaxPropertyValue({\n              borrowers: borrowers,\n              residenceType: residenceType,\n              maxBorrowRatio: borrowRatio + deltaX,\n              canton: canton\n            });\n            setMax(borrowRatio + deltaX, yRight);\n            var slope = yRight - yLeft;\n\n            if (yRight === 0 && yLeft === 0) {\n              // If the algorithm is at 0 on both sides, it means the borrowRatio\n              // is way too high, so start him over again at 0, but with a large\n              // step size to allow it to recover quickly\n              borrowRatio = INITIAL_BORROW_RATIO_STEP_SIZE;\n              stepSize = 0.2;\n            } else if (slope > 0) {\n              stepSize = this.getNextStepSize({\n                currentMax: center,\n                currentBorrowRatio: borrowRatio,\n                stepSize: stepSize,\n                borrowers: borrowers,\n                residenceType: residenceType,\n                canton: canton,\n                direction: 'upwards',\n                cache: cache\n              });\n              borrowRatio += stepSize;\n            } else {\n              stepSize = this.getNextStepSize({\n                currentMax: center,\n                currentBorrowRatio: borrowRatio,\n                stepSize: stepSize,\n                borrowers: borrowers,\n                residenceType: residenceType,\n                canton: canton,\n                direction: 'downwards',\n                cache: cache\n              });\n              borrowRatio -= stepSize;\n            }\n\n            if (stepSize < deltaX / 2) {\n              foundValue = true;\n            }\n\n            if (iterations > 50) {\n              foundValue = true;\n            }\n          } // Round the borrowRatio, and recompute the exact property value\n\n\n          var finalBorrowRatio = Math.round(optimalBorrowRatio * 10000) / 10000;\n          var finalPropertyValue = cache[finalBorrowRatio] || this.getMaxPropertyValue({\n            borrowers: borrowers,\n            residenceType: residenceType,\n            maxBorrowRatio: finalBorrowRatio,\n            canton: canton\n          });\n          return {\n            borrowRatio: finalBorrowRatio,\n            propertyValue: finalPropertyValue\n          };\n        }\n\n        return getMaxPropertyValueWithoutBorrowRatio;\n      }();\n\n      _proto.getMaxPropertyValueForLoan = function () {\n        function getMaxPropertyValueForLoan(_ref12) {\n          var loan = _ref12.loan,\n              maxBorrowRatio = _ref12.maxBorrowRatio,\n              canton = _ref12.canton,\n              residenceType = _ref12.residenceType;\n          var borrowers = loan.borrowers,\n              loanResidenceType = loan.residenceType;\n          return this.getMaxPropertyValue({\n            borrowers: borrowers,\n            residenceType: residenceType || loanResidenceType,\n            maxBorrowRatio: maxBorrowRatio,\n            canton: canton\n          });\n        }\n\n        return getMaxPropertyValueForLoan;\n      }();\n\n      _proto.suggestStructureForLoan = function () {\n        function suggestStructureForLoan(_ref13) {\n          var loan = _ref13.loan,\n              structureId = _ref13.structureId;\n          var propertyValue = this.getPropAndWork({\n            loan: loan,\n            structureId: structureId\n          });\n          var loanValue = this.selectLoanValue({\n            loan: loan,\n            structureId: structureId\n          });\n          var notaryFees = this.getFees({\n            loan: loan,\n            structureId: structureId\n          }).total;\n          return this.suggestStructure({\n            borrowers: loan.borrowers,\n            propertyValue: propertyValue,\n            loanValue: loanValue,\n            residenceType: loan.residenceType,\n            notaryFees: notaryFees\n          });\n        }\n\n        return suggestStructureForLoan;\n      }();\n\n      return _class2;\n    }(SuperClass)\n  );\n};","map":{"version":3,"sources":["imports/core/utils/Calculator/SolvencyCalculator.js"],"names":["INITIAL_MIN_BOUND","INITIAL_MAX_BOUND","INITIAL_ABSOLUTE_MAX_BOUND","MAX_ITERATIONS","ACCURACY","ROUNDING_DIGITS","Math","MAX_BOUND_MULTIPLICATION_FACTOR","OWN_FUNDS_ROUNDING_ALGO","INITIAL_BORROW_RATIO_STEP_SIZE","withSolvencyCalculator","getAllowedOwnFundsTypes","residenceType","RESIDENCE_TYPE","OWN_FUNDS_TYPES","ownFundTypeRequiresUsageType","type","makeOwnFunds","max","borrower","ownFundsObject","value","borrowers","borrowerId","_id","usageType","OWN_FUNDS_USAGE_TYPES","WITHDRAW","suggestStructure","maxBorrowRatio","notaryFees","forcedNotaryFees","finalLoanValue","loanValue","propertyValue","notaryCalc","canton","mortgageNoteIncrease","requiredOwnFunds","ownFunds","allowedOwnFundsTypes","newOwnFunds","tot","createLoanObject","loanTranches","rest","structure","wantedLoan","property","suggestedStructureIsValid","loanObject","loan","lenderRules","getMaxPropertyValue","foundValue","minBound","maxBound","absoluteMax","iterations","nextPropertyValue","roundValue","getNextStepSize","cache","newStepSize","nextValue","direction","currentBorrowRatio","foundBetterValue","getMaxPropertyValueWithoutBorrowRatio","borrowRatio","stepSize","deltaX","maxPropertyValue","setMax","optimalBorrowRatio","center","yLeft","yRight","slope","currentMax","finalBorrowRatio","finalPropertyValue","getMaxPropertyValueForLoan","loanResidenceType","suggestStructureForLoan","structureId"],"mappings":"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","sourcesContent":["// @flow\nimport { OWN_FUNDS_ROUNDING_AMOUNT } from '../../config/financeConstants';\nimport {\n  OWN_FUNDS_TYPES,\n  RESIDENCE_TYPE,\n  OWN_FUNDS_USAGE_TYPES,\n} from '../../api/constants';\nimport { arrayify } from '../general';\nimport { NotaryFeesCalculator } from '../notaryFees/index';\nimport { roundValue } from '../conversionFunctions';\n\nconst INITIAL_MIN_BOUND = 0;\nconst INITIAL_MAX_BOUND = 1000000;\nconst INITIAL_ABSOLUTE_MAX_BOUND = 100000000;\nconst MAX_ITERATIONS = 50;\nconst ACCURACY = 1000;\nconst ROUNDING_DIGITS = Math.log10(ACCURACY);\nconst MAX_BOUND_MULTIPLICATION_FACTOR = 2;\nconst OWN_FUNDS_ROUNDING_ALGO = 100;\nconst INITIAL_BORROW_RATIO_STEP_SIZE = 0.05;\n\nexport const withSolvencyCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    getAllowedOwnFundsTypes({ residenceType }) {\n      return residenceType === RESIDENCE_TYPE.MAIN_RESIDENCE\n        ? [\n          OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n          OWN_FUNDS_TYPES.BANK_FORTUNE,\n          OWN_FUNDS_TYPES.INSURANCE_3A,\n          OWN_FUNDS_TYPES.BANK_3A,\n          OWN_FUNDS_TYPES.INSURANCE_3B,\n          OWN_FUNDS_TYPES.INSURANCE_2,\n        ]\n        : [\n          OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n          OWN_FUNDS_TYPES.BANK_FORTUNE,\n          OWN_FUNDS_TYPES.INSURANCE_3B,\n        ];\n    }\n\n    ownFundTypeRequiresUsageType({ type }) {\n      return [\n        OWN_FUNDS_TYPES.INSURANCE_2,\n        OWN_FUNDS_TYPES.INSURANCE_3A,\n        OWN_FUNDS_TYPES.INSURANCE_3B,\n      ].includes(type);\n    }\n\n    makeOwnFunds({ borrowers, type, usageType, max }) {\n      return arrayify(borrowers)\n        .map((borrower) => {\n          const ownFundsObject = {\n            type,\n            value: Math.ceil(Math.min(max, this.getFunds({ borrowers: borrower, type }))),\n            borrowerId: borrower._id,\n          };\n\n          if (!usageType && this.ownFundTypeRequiresUsageType({ type })) {\n            return {\n              ...ownFundsObject,\n              usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n            };\n          }\n\n          if (usageType) {\n            return { ...ownFundsObject, usageType };\n          }\n\n          return ownFundsObject;\n        })\n        .filter(({ value }) => value > 0);\n    }\n\n    suggestStructure({\n      borrowers,\n      propertyValue,\n      maxBorrowRatio = this.maxBorrowRatio,\n      loanValue,\n      canton,\n      residenceType,\n      notaryFees: forcedNotaryFees,\n    }) {\n      let notaryFees;\n\n      const finalLoanValue = loanValue || Math.round(propertyValue * maxBorrowRatio);\n\n      if (forcedNotaryFees) {\n        notaryFees = forcedNotaryFees;\n      } else {\n        const notaryCalc = new NotaryFeesCalculator({ canton });\n        notaryFees = notaryCalc.getNotaryFeesWithoutLoan({\n          propertyValue,\n          mortgageNoteIncrease: finalLoanValue,\n          residenceType,\n        }).total;\n      }\n\n      let requiredOwnFunds = Math.round(propertyValue + notaryFees - finalLoanValue);\n      let ownFunds = [];\n\n      // Get all possible OWN_FUNDS_TYPES\n      const allowedOwnFundsTypes = this.getAllowedOwnFundsTypes({\n        residenceType,\n      });\n\n      allowedOwnFundsTypes.forEach((type) => {\n        borrowers.forEach((borrower) => {\n          const newOwnFunds = this.makeOwnFunds({\n            borrowers: borrower,\n            type,\n            max: requiredOwnFunds,\n          });\n\n          requiredOwnFunds -= newOwnFunds.reduce(\n            (tot, { value }) => tot + value,\n            0,\n          );\n\n          ownFunds = [...ownFunds, ...newOwnFunds];\n        });\n      });\n\n      return ownFunds;\n    }\n\n    createLoanObject({\n      residenceType,\n      borrowers,\n      wantedLoan,\n      propertyValue,\n      canton,\n      ownFunds = [],\n      loanTranches = [],\n      ...rest\n    }) {\n      return {\n        residenceType,\n        borrowers,\n        structure: {\n          wantedLoan,\n          propertyValue,\n          property: { canton },\n          ownFunds,\n          loanTranches,\n        },\n        ...rest,\n      };\n    }\n\n    suggestedStructureIsValid({\n      borrowers,\n      propertyValue,\n      maxBorrowRatio = this.maxBorrowRatio,\n      loanValue,\n      canton,\n      residenceType,\n      ownFunds,\n    }) {\n      const finalLoanValue = loanValue || Math.round(propertyValue * maxBorrowRatio);\n      const loanObject = this.createLoanObject({\n        residenceType,\n        borrowers,\n        wantedLoan: finalLoanValue,\n        propertyValue,\n        canton,\n        ownFunds,\n      });\n\n      // If the calculator has been initialized, reinitialize it according to this new potential loan\n      if (this.lenderRules) {\n        this.initialize({ loan: loanObject, lenderRules: this.lenderRules });\n      }\n\n      if (this.isMissingOwnFunds({ loan: loanObject })) {\n        return false;\n      }\n\n      if (!this.hasEnoughCash({ loan: loanObject })) {\n        return false;\n      }\n\n      if (!this.structureIsValid({ loan: loanObject })) {\n        return false;\n      }\n\n      return true;\n    }\n\n    getMaxPropertyValue({ borrowers, maxBorrowRatio, canton, residenceType }) {\n      // Immediately stop iterating if maxBorrowRatio is above what is allowed\n      if (this.maxBorrowRatio < maxBorrowRatio) {\n        return 0;\n      }\n\n      let foundValue = false;\n      let minBound = INITIAL_MIN_BOUND;\n      let maxBound = INITIAL_MAX_BOUND;\n      let absoluteMax = INITIAL_ABSOLUTE_MAX_BOUND;\n      let iterations = 0;\n\n      // The rounding amount of 1000 is helpful when the user tries to\n      // fit his own funds into a structure without being overly accurate\n      // which is annoying.\n      // However for this calculation we don't need to round own funds as loosely\n      this.ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_ALGO;\n\n      while (!foundValue) {\n        iterations += 1;\n        const nextPropertyValue = roundValue(\n          (minBound + maxBound) / 2,\n          ROUNDING_DIGITS,\n        );\n\n        const ownFunds = this.suggestStructure({\n          borrowers,\n          maxBorrowRatio,\n          canton,\n          residenceType,\n          propertyValue: nextPropertyValue,\n        });\n\n        if (\n          this.suggestedStructureIsValid({\n            borrowers,\n            maxBorrowRatio,\n            canton,\n            residenceType,\n            propertyValue: nextPropertyValue,\n            ownFunds,\n          })\n        ) {\n          minBound = nextPropertyValue;\n          maxBound = Math.min(\n            maxBound * MAX_BOUND_MULTIPLICATION_FACTOR,\n            absoluteMax,\n          );\n        } else {\n          maxBound = nextPropertyValue;\n          absoluteMax = maxBound;\n        }\n\n        if (maxBound - minBound <= ACCURACY) {\n          foundValue = true;\n        }\n\n        if (iterations > MAX_ITERATIONS) {\n          foundValue = true;\n        }\n      }\n\n      this.ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_AMOUNT;\n\n      return minBound;\n    }\n\n    getNextStepSize({\n      currentMax,\n      currentBorrowRatio,\n      stepSize,\n      borrowers,\n      residenceType,\n      canton,\n      direction,\n      cache,\n    }) {\n      let newStepSize = stepSize;\n      let foundBetterValue;\n\n      while (!foundBetterValue) {\n        let nextValue;\n        if (direction === 'upwards') {\n          nextValue = cache[currentBorrowRatio + stepSize]\n            || this.getMaxPropertyValue({\n              borrowers,\n              residenceType,\n              maxBorrowRatio: currentBorrowRatio + stepSize,\n              canton,\n            });\n        } else {\n          nextValue = cache[currentBorrowRatio - stepSize]\n            || this.getMaxPropertyValue({\n              borrowers,\n              residenceType,\n              maxBorrowRatio: currentBorrowRatio - stepSize,\n              canton,\n            });\n        }\n\n        if (nextValue > currentMax) {\n          foundBetterValue = true;\n        } else {\n          newStepSize /= 2;\n        }\n\n        if (newStepSize < 0.05) {\n          foundBetterValue = true;\n        }\n      }\n\n      return newStepSize;\n    }\n\n    getMaxPropertyValueWithoutBorrowRatio({\n      borrowers,\n      residenceType,\n      canton,\n    }) {\n      let borrowRatio = 0.7;\n      let foundValue = false;\n      let iterations = 0;\n      let stepSize = INITIAL_BORROW_RATIO_STEP_SIZE;\n      const deltaX = 0.01;\n      let maxPropertyValue = 0;\n      let optimalBorrowRatio;\n      const cache = {};\n\n      const setMax = (ratio, propertyValue) => {\n        // Cache each result to avoid recalculating it later\n        if (!cache[`${ratio}`]) {\n          cache[`${ratio}`] = propertyValue;\n        }\n\n        // Always store the highest encountered value, in case the loop\n        // stops prematurely, or if the stopping conditions would've skipped\n        // a value that we already calculated\n        if (propertyValue > maxPropertyValue) {\n          maxPropertyValue = propertyValue;\n          optimalBorrowRatio = ratio;\n        }\n      };\n\n      while (!foundValue) {\n        iterations += 1;\n\n        const center = cache[borrowRatio]\n          || this.getMaxPropertyValue({\n            borrowers,\n            residenceType,\n            maxBorrowRatio: borrowRatio,\n            canton,\n          });\n        setMax(borrowRatio, center);\n\n        const yLeft = cache[borrowRatio - deltaX]\n          || this.getMaxPropertyValue({\n            borrowers,\n            residenceType,\n            maxBorrowRatio: borrowRatio - deltaX,\n            canton,\n          });\n        setMax(borrowRatio - deltaX, yLeft);\n        const yRight = cache[borrowRatio + deltaX]\n          || this.getMaxPropertyValue({\n            borrowers,\n            residenceType,\n            maxBorrowRatio: borrowRatio + deltaX,\n            canton,\n          });\n        setMax(borrowRatio + deltaX, yRight);\n\n        const slope = yRight - yLeft;\n\n        if (yRight === 0 && yLeft === 0) {\n          // If the algorithm is at 0 on both sides, it means the borrowRatio\n          // is way too high, so start him over again at 0, but with a large\n          // step size to allow it to recover quickly\n          borrowRatio = INITIAL_BORROW_RATIO_STEP_SIZE;\n          stepSize = 0.2;\n        } else if (slope > 0) {\n          stepSize = this.getNextStepSize({\n            currentMax: center,\n            currentBorrowRatio: borrowRatio,\n            stepSize,\n            borrowers,\n            residenceType,\n            canton,\n            direction: 'upwards',\n            cache,\n          });\n          borrowRatio += stepSize;\n        } else {\n          stepSize = this.getNextStepSize({\n            currentMax: center,\n            currentBorrowRatio: borrowRatio,\n            stepSize,\n            borrowers,\n            residenceType,\n            canton,\n            direction: 'downwards',\n            cache,\n          });\n          borrowRatio -= stepSize;\n        }\n\n        if (stepSize < deltaX / 2) {\n          foundValue = true;\n        }\n\n        if (iterations > 50) {\n          foundValue = true;\n        }\n      }\n\n      // Round the borrowRatio, and recompute the exact property value\n      const finalBorrowRatio = Math.round(optimalBorrowRatio * 10000) / 10000;\n      const finalPropertyValue = cache[finalBorrowRatio]\n        || this.getMaxPropertyValue({\n          borrowers,\n          residenceType,\n          maxBorrowRatio: finalBorrowRatio,\n          canton,\n        });\n\n      return {\n        borrowRatio: finalBorrowRatio,\n        propertyValue: finalPropertyValue,\n      };\n    }\n\n    getMaxPropertyValueForLoan({\n      loan,\n      maxBorrowRatio,\n      canton,\n      residenceType,\n    }) {\n      const { borrowers, residenceType: loanResidenceType } = loan;\n      return this.getMaxPropertyValue({\n        borrowers,\n        residenceType: residenceType || loanResidenceType,\n        maxBorrowRatio,\n        canton,\n      });\n    }\n\n    suggestStructureForLoan({ loan, structureId }) {\n      const propertyValue = this.getPropAndWork({ loan, structureId });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      const notaryFees = this.getFees({ loan, structureId }).total;\n\n      return this.suggestStructure({\n        borrowers: loan.borrowers,\n        propertyValue,\n        loanValue,\n        residenceType: loan.residenceType,\n        notaryFees,\n      });\n    }\n  };\n"]},"sourceType":"script","hash":"a708094b8a2316e6f39ce5ced259346b832d1ab0"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/redux/widget1/test/widget1Actions.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/redux/widget1/test/widget1Actions.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/redux/widget1/test/widget1Actions.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/redux/widget1/test/widget1Actions.spec.js"],"names":["expect","configureMockStore","thunk","MAX_BORROW_RATIO_PRIMARY_PROPERTY","MAX_BORROW_RATIO_WITH_PLEDGE","widget1Actions","widget1Types","widget1Constants","commonTypes","middlewares","mockStore","store","expectActions","actionCreator","expectedActions","comment","dispatch","then","getActions","deep","equal","prepareStore","overrides","widget1","ALL_FIELDS","reduce","acc","name","value","auto","step","FINAL_STEP","purchaseType","PURCHASE_TYPE","ACQUISITION","describe","NAME","beforeEach","it","suggestValues","ACQUISITION_FIELDS","map","type","SUGGEST_VALUE","SET_VALUE","setValue","forEach","field","cappedFields","CAPPED_FIELDS","propertyValue","nextValue","property","includes","wantedLoan","allowExtremeLoan","WANTED_LOAN","SET_AUTO","setAuto","INCREASE_SLIDER_MAX","increaseSliderMax","to","setStep","length","resetCalculator","REFINANCING","PROPERTY","CURRENT_LOAN"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\n\nimport {\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n  MAX_BORROW_RATIO_WITH_PLEDGE,\n} from 'core/config/financeConstants';\nimport * as widget1Actions from '../widget1Actions';\nimport * as widget1Types from '../widget1Types';\nimport * as widget1Constants from '../widget1Constants';\nimport { commonTypes } from '../../common';\n\nconst middlewares = [thunk];\nconst mockStore = configureMockStore(middlewares);\nlet store;\nconst expectActions = (actionCreator, expectedActions, comment) =>\n  store.dispatch(actionCreator).then(() => {\n    expect(store.getActions()).deep.equal(expectedActions, comment);\n  });\nconst prepareStore = overrides =>\n  mockStore({\n    widget1: {\n      ...widget1Constants.ALL_FIELDS.reduce(\n        (acc, name) => ({ ...acc, [name]: { value: 0, auto: true } }),\n        {},\n      ),\n      step: widget1Constants.FINAL_STEP,\n      purchaseType: widget1Constants.PURCHASE_TYPE.ACQUISITION,\n      ...overrides,\n    },\n  });\n\ndescribe('widget1Actions', () => {\n  const NAME = 'testName';\n  const value = 100;\n\n  beforeEach(() => {\n    store = prepareStore();\n  });\n\n  describe('suggestValues', () => {\n    it('does not dispatch anything if the user is not at the full calculator', () => {\n      store = prepareStore({ step: 0 });\n      const expectedActions = [];\n      return expectActions(widget1Actions.suggestValues(), expectedActions);\n    });\n\n    it('dispatches one action for each NAME if the step is the final one', () => {\n      const expectedActions = widget1Constants.ACQUISITION_FIELDS.map(name => ({\n        type: widget1Types.SUGGEST_VALUE(name),\n        value: 0,\n      }));\n      return expectActions(widget1Actions.suggestValues(), expectedActions);\n    });\n\n    it('suggests the right values for a 180k salary', () => {\n      store = prepareStore();\n      const expectedActions = widget1Constants.ACQUISITION_FIELDS.map(name => ({\n        type: widget1Types.SUGGEST_VALUE(name),\n        value: 0,\n      }));\n      return expectActions(widget1Actions.suggestValues(), expectedActions);\n    });\n  });\n\n  describe('setValue', () => {\n    it('sets a value and suggests values', () => {\n      const expectedActions = [\n        { type: widget1Types.SET_VALUE(NAME), value },\n        ...widget1Constants.ACQUISITION_FIELDS.map(name => ({\n          type: widget1Types.SUGGEST_VALUE(name),\n          value: 0,\n        })),\n      ];\n\n      return expectActions(\n        widget1Actions.setValue(NAME, value),\n        expectedActions,\n      );\n    });\n\n    widget1Constants.ALL_FIELDS.forEach((field) => {\n      const cappedFields = widget1Constants.CAPPED_FIELDS;\n\n      it(`caps field ${field} at 80% of the property price`, () => {\n        const propertyValue = 100;\n        const nextValue = 200;\n        store = prepareStore({ step: 0, property: { value: propertyValue } });\n        const expectedActions = [\n          {\n            type: widget1Types.SET_VALUE(field),\n            value: cappedFields.includes(field)\n              ? MAX_BORROW_RATIO_PRIMARY_PROPERTY * propertyValue\n              : nextValue,\n          },\n        ];\n\n        return expectActions(\n          widget1Actions.setValue(field, nextValue),\n          expectedActions,\n          `failed for field: ${field}`,\n        );\n      });\n    });\n\n    it('caps a field at 90% of the property price if allowExtremeValue is true', () => {\n      const propertyValue = 100;\n      const nextValue = 200;\n      store = prepareStore({\n        step: 0,\n        property: { value: propertyValue },\n        wantedLoan: { allowExtremeLoan: true },\n      });\n      const expectedActions = [\n        {\n          type: widget1Types.SET_VALUE(widget1Constants.WANTED_LOAN),\n          value: MAX_BORROW_RATIO_WITH_PLEDGE * propertyValue,\n        },\n      ];\n\n      return expectActions(\n        widget1Actions.setValue(widget1Constants.WANTED_LOAN, nextValue),\n        expectedActions,\n      );\n    });\n\n    it('allows capped fields to be set to an empty string', () => {\n      const propertyValue = 100;\n      const nextValue = '';\n      store = prepareStore({\n        step: 0,\n        property: { value: propertyValue },\n        wantedLoan: { allowExtremeLoan: true },\n      });\n      const expectedActions = [\n        {\n          type: widget1Types.SET_VALUE(widget1Constants.WANTED_LOAN),\n          value: '',\n        },\n      ];\n\n      return expectActions(\n        widget1Actions.setValue(widget1Constants.WANTED_LOAN, nextValue),\n        expectedActions,\n      );\n    });\n  });\n\n  describe('setAuto', () => {\n    it('sets a value to auto, and resuggests all values', () => {\n      const expectedActions = [\n        { type: widget1Types.SET_AUTO(NAME), auto: true },\n        ...widget1Constants.ACQUISITION_FIELDS.map(name => ({\n          type: widget1Types.SUGGEST_VALUE(name),\n          value: 0,\n        })),\n      ];\n\n      return expectActions(widget1Actions.setAuto(NAME, true), expectedActions);\n    });\n  });\n\n  describe('increaseSliderMax', () => {\n    it('creates the right action', () => {\n      const expectedActions = {\n        type: widget1Types.INCREASE_SLIDER_MAX(NAME),\n      };\n\n      expect(widget1Actions.increaseSliderMax(NAME)).to.deep.equal(expectedActions);\n    });\n  });\n\n  describe('setStep', () => {\n    it('does not dispatch anything if the next step if lower than current step', () => {\n      store = prepareStore({ step: 1 });\n      const expectedActions = [];\n      return expectActions(widget1Actions.setStep(0), expectedActions);\n    });\n\n    it('sets the step if it is not the final step', () => {\n      store = prepareStore({ step: 0 });\n      const expectedActions = [\n        { type: commonTypes.SET_VALUE('step'), value: 1 },\n      ];\n      return expectActions(widget1Actions.setStep(1), expectedActions);\n    });\n\n    it('sets the step and suggests values if it will be the final step', () => {\n      // getState does not work in redux-mock-store, so set the final step\n      // initially as well to make sure getState gets the right value\n      // for the `suggestValues` action\n      store = prepareStore({\n        step: widget1Constants.ACQUISITION_FIELDS.length,\n      });\n      const expectedActions = [\n        {\n          type: commonTypes.SET_VALUE('step'),\n          value: widget1Constants.ACQUISITION_FIELDS.length,\n        },\n        ...widget1Constants.ACQUISITION_FIELDS.map(name => ({\n          type: widget1Types.SUGGEST_VALUE(name),\n          value: 0,\n        })),\n        { type: commonTypes.SET_VALUE('finishedTutorial'), value: true },\n      ];\n      return expectActions(\n        widget1Actions.setStep(widget1Constants.ACQUISITION_FIELDS.length),\n        expectedActions,\n      );\n    });\n  });\n\n  describe('resetCalculator', () => {\n    it('resets all the values', () => {\n      const expectedActions = widget1Constants.ALL_FIELDS.reduce(\n        (acc, field) => [\n          ...acc,\n          { type: widget1Types.SET_VALUE(field), value: 0 },\n          { type: widget1Types.SET_AUTO(field), auto: true },\n        ],\n        [],\n      );\n      return expectActions(widget1Actions.resetCalculator(), expectedActions);\n    });\n\n    it('sets property and currentLoan to auto false in refinancing', () => {\n      store = prepareStore({\n        purchaseType: widget1Constants.PURCHASE_TYPE.REFINANCING,\n      });\n\n      const expectedActions = widget1Constants.ALL_FIELDS.reduce(\n        (acc, field) => [\n          ...acc,\n          { type: widget1Types.SET_VALUE(field), value: 0 },\n          { type: widget1Types.SET_AUTO(field), auto: true },\n        ],\n        [],\n      );\n      return expectActions(widget1Actions.resetCalculator(), [\n        ...expectedActions,\n        { type: widget1Types.SET_AUTO(widget1Constants.PROPERTY), auto: false },\n        {\n          type: widget1Types.SET_AUTO(widget1Constants.CURRENT_LOAN),\n          auto: false,\n        },\n      ]);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/redux/widget1/test/widget1Actions.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/redux/widget1/test/widget1Actions.spec.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet configureMockStore;\nmodule.link(\"redux-mock-store\", {\n  default(v) {\n    configureMockStore = v;\n  }\n\n}, 1);\nlet thunk;\nmodule.link(\"redux-thunk\", {\n  default(v) {\n    thunk = v;\n  }\n\n}, 2);\nlet MAX_BORROW_RATIO_PRIMARY_PROPERTY, MAX_BORROW_RATIO_WITH_PLEDGE;\nmodule.link(\"../../../config/financeConstants\", {\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY(v) {\n    MAX_BORROW_RATIO_PRIMARY_PROPERTY = v;\n  },\n\n  MAX_BORROW_RATIO_WITH_PLEDGE(v) {\n    MAX_BORROW_RATIO_WITH_PLEDGE = v;\n  }\n\n}, 3);\nlet widget1Actions;\nmodule.link(\"../widget1Actions\", {\n  \"*\"(v) {\n    widget1Actions = v;\n  }\n\n}, 4);\nlet widget1Types;\nmodule.link(\"../widget1Types\", {\n  \"*\"(v) {\n    widget1Types = v;\n  }\n\n}, 5);\nlet widget1Constants;\nmodule.link(\"../widget1Constants\", {\n  \"*\"(v) {\n    widget1Constants = v;\n  }\n\n}, 6);\nlet commonTypes;\nmodule.link(\"../../common\", {\n  commonTypes(v) {\n    commonTypes = v;\n  }\n\n}, 7);\nconst middlewares = [thunk];\nconst mockStore = configureMockStore(middlewares);\nlet store;\n\nconst expectActions = (actionCreator, expectedActions, comment) => store.dispatch(actionCreator).then(() => {\n  expect(store.getActions()).deep.equal(expectedActions, comment);\n});\n\nconst prepareStore = overrides => mockStore({\n  widget1: (0, _objectSpread2.default)({}, widget1Constants.ALL_FIELDS.reduce((acc, name) => (0, _objectSpread2.default)({}, acc, {\n    [name]: {\n      value: 0,\n      auto: true\n    }\n  }), {}), {\n    step: widget1Constants.FINAL_STEP,\n    purchaseType: widget1Constants.PURCHASE_TYPE.ACQUISITION\n  }, overrides)\n});\n\ndescribe('widget1Actions', () => {\n  const NAME = 'testName';\n  const value = 100;\n  beforeEach(() => {\n    store = prepareStore();\n  });\n  describe('suggestValues', () => {\n    it('does not dispatch anything if the user is not at the full calculator', () => {\n      store = prepareStore({\n        step: 0\n      });\n      const expectedActions = [];\n      return expectActions(widget1Actions.suggestValues(), expectedActions);\n    });\n    it('dispatches one action for each NAME if the step is the final one', () => {\n      const expectedActions = widget1Constants.ACQUISITION_FIELDS.map(name => ({\n        type: widget1Types.SUGGEST_VALUE(name),\n        value: 0\n      }));\n      return expectActions(widget1Actions.suggestValues(), expectedActions);\n    });\n    it('suggests the right values for a 180k salary', () => {\n      store = prepareStore();\n      const expectedActions = widget1Constants.ACQUISITION_FIELDS.map(name => ({\n        type: widget1Types.SUGGEST_VALUE(name),\n        value: 0\n      }));\n      return expectActions(widget1Actions.suggestValues(), expectedActions);\n    });\n  });\n  describe('setValue', () => {\n    it('sets a value and suggests values', () => {\n      const expectedActions = [{\n        type: widget1Types.SET_VALUE(NAME),\n        value\n      }, ...widget1Constants.ACQUISITION_FIELDS.map(name => ({\n        type: widget1Types.SUGGEST_VALUE(name),\n        value: 0\n      }))];\n      return expectActions(widget1Actions.setValue(NAME, value), expectedActions);\n    });\n    widget1Constants.ALL_FIELDS.forEach(field => {\n      const cappedFields = widget1Constants.CAPPED_FIELDS;\n      it(`caps field ${field} at 80% of the property price`, () => {\n        const propertyValue = 100;\n        const nextValue = 200;\n        store = prepareStore({\n          step: 0,\n          property: {\n            value: propertyValue\n          }\n        });\n        const expectedActions = [{\n          type: widget1Types.SET_VALUE(field),\n          value: cappedFields.includes(field) ? MAX_BORROW_RATIO_PRIMARY_PROPERTY * propertyValue : nextValue\n        }];\n        return expectActions(widget1Actions.setValue(field, nextValue), expectedActions, `failed for field: ${field}`);\n      });\n    });\n    it('caps a field at 90% of the property price if allowExtremeValue is true', () => {\n      const propertyValue = 100;\n      const nextValue = 200;\n      store = prepareStore({\n        step: 0,\n        property: {\n          value: propertyValue\n        },\n        wantedLoan: {\n          allowExtremeLoan: true\n        }\n      });\n      const expectedActions = [{\n        type: widget1Types.SET_VALUE(widget1Constants.WANTED_LOAN),\n        value: MAX_BORROW_RATIO_WITH_PLEDGE * propertyValue\n      }];\n      return expectActions(widget1Actions.setValue(widget1Constants.WANTED_LOAN, nextValue), expectedActions);\n    });\n    it('allows capped fields to be set to an empty string', () => {\n      const propertyValue = 100;\n      const nextValue = '';\n      store = prepareStore({\n        step: 0,\n        property: {\n          value: propertyValue\n        },\n        wantedLoan: {\n          allowExtremeLoan: true\n        }\n      });\n      const expectedActions = [{\n        type: widget1Types.SET_VALUE(widget1Constants.WANTED_LOAN),\n        value: ''\n      }];\n      return expectActions(widget1Actions.setValue(widget1Constants.WANTED_LOAN, nextValue), expectedActions);\n    });\n  });\n  describe('setAuto', () => {\n    it('sets a value to auto, and resuggests all values', () => {\n      const expectedActions = [{\n        type: widget1Types.SET_AUTO(NAME),\n        auto: true\n      }, ...widget1Constants.ACQUISITION_FIELDS.map(name => ({\n        type: widget1Types.SUGGEST_VALUE(name),\n        value: 0\n      }))];\n      return expectActions(widget1Actions.setAuto(NAME, true), expectedActions);\n    });\n  });\n  describe('increaseSliderMax', () => {\n    it('creates the right action', () => {\n      const expectedActions = {\n        type: widget1Types.INCREASE_SLIDER_MAX(NAME)\n      };\n      expect(widget1Actions.increaseSliderMax(NAME)).to.deep.equal(expectedActions);\n    });\n  });\n  describe('setStep', () => {\n    it('does not dispatch anything if the next step if lower than current step', () => {\n      store = prepareStore({\n        step: 1\n      });\n      const expectedActions = [];\n      return expectActions(widget1Actions.setStep(0), expectedActions);\n    });\n    it('sets the step if it is not the final step', () => {\n      store = prepareStore({\n        step: 0\n      });\n      const expectedActions = [{\n        type: commonTypes.SET_VALUE('step'),\n        value: 1\n      }];\n      return expectActions(widget1Actions.setStep(1), expectedActions);\n    });\n    it('sets the step and suggests values if it will be the final step', () => {\n      // getState does not work in redux-mock-store, so set the final step\n      // initially as well to make sure getState gets the right value\n      // for the `suggestValues` action\n      store = prepareStore({\n        step: widget1Constants.ACQUISITION_FIELDS.length\n      });\n      const expectedActions = [{\n        type: commonTypes.SET_VALUE('step'),\n        value: widget1Constants.ACQUISITION_FIELDS.length\n      }, ...widget1Constants.ACQUISITION_FIELDS.map(name => ({\n        type: widget1Types.SUGGEST_VALUE(name),\n        value: 0\n      })), {\n        type: commonTypes.SET_VALUE('finishedTutorial'),\n        value: true\n      }];\n      return expectActions(widget1Actions.setStep(widget1Constants.ACQUISITION_FIELDS.length), expectedActions);\n    });\n  });\n  describe('resetCalculator', () => {\n    it('resets all the values', () => {\n      const expectedActions = widget1Constants.ALL_FIELDS.reduce((acc, field) => [...acc, {\n        type: widget1Types.SET_VALUE(field),\n        value: 0\n      }, {\n        type: widget1Types.SET_AUTO(field),\n        auto: true\n      }], []);\n      return expectActions(widget1Actions.resetCalculator(), expectedActions);\n    });\n    it('sets property and currentLoan to auto false in refinancing', () => {\n      store = prepareStore({\n        purchaseType: widget1Constants.PURCHASE_TYPE.REFINANCING\n      });\n      const expectedActions = widget1Constants.ALL_FIELDS.reduce((acc, field) => [...acc, {\n        type: widget1Types.SET_VALUE(field),\n        value: 0\n      }, {\n        type: widget1Types.SET_AUTO(field),\n        auto: true\n      }], []);\n      return expectActions(widget1Actions.resetCalculator(), [...expectedActions, {\n        type: widget1Types.SET_AUTO(widget1Constants.PROPERTY),\n        auto: false\n      }, {\n        type: widget1Types.SET_AUTO(widget1Constants.CURRENT_LOAN),\n        auto: false\n      }]);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/redux/widget1/test/widget1Actions.spec.js"],"names":["middlewares","mockStore","configureMockStore","expectActions","expect","store","prepareStore","overrides","widget1","value","auto","step","widget1Constants","purchaseType","describe","NAME","beforeEach","it","expectedActions","widget1Actions","name","type","widget1Types","field","cappedFields","propertyValue","nextValue","property","MAX_BORROW_RATIO_PRIMARY_PROPERTY","wantedLoan","allowExtremeLoan","MAX_BORROW_RATIO_WITH_PLEDGE","commonTypes","length","REFINANCING"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\n\nimport {\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n  MAX_BORROW_RATIO_WITH_PLEDGE,\n} from 'core/config/financeConstants';\nimport * as widget1Actions from '../widget1Actions';\nimport * as widget1Types from '../widget1Types';\nimport * as widget1Constants from '../widget1Constants';\nimport { commonTypes } from '../../common';\n\nconst middlewares = [thunk];\nconst mockStore = configureMockStore(middlewares);\nlet store;\nconst expectActions = (actionCreator, expectedActions, comment) =>\n  store.dispatch(actionCreator).then(() => {\n    expect(store.getActions()).deep.equal(expectedActions, comment);\n  });\nconst prepareStore = overrides =>\n  mockStore({\n    widget1: {\n      ...widget1Constants.ALL_FIELDS.reduce(\n        (acc, name) => ({ ...acc, [name]: { value: 0, auto: true } }),\n        {},\n      ),\n      step: widget1Constants.FINAL_STEP,\n      purchaseType: widget1Constants.PURCHASE_TYPE.ACQUISITION,\n      ...overrides,\n    },\n  });\n\ndescribe('widget1Actions', () => {\n  const NAME = 'testName';\n  const value = 100;\n\n  beforeEach(() => {\n    store = prepareStore();\n  });\n\n  describe('suggestValues', () => {\n    it('does not dispatch anything if the user is not at the full calculator', () => {\n      store = prepareStore({ step: 0 });\n      const expectedActions = [];\n      return expectActions(widget1Actions.suggestValues(), expectedActions);\n    });\n\n    it('dispatches one action for each NAME if the step is the final one', () => {\n      const expectedActions = widget1Constants.ACQUISITION_FIELDS.map(name => ({\n        type: widget1Types.SUGGEST_VALUE(name),\n        value: 0,\n      }));\n      return expectActions(widget1Actions.suggestValues(), expectedActions);\n    });\n\n    it('suggests the right values for a 180k salary', () => {\n      store = prepareStore();\n      const expectedActions = widget1Constants.ACQUISITION_FIELDS.map(name => ({\n        type: widget1Types.SUGGEST_VALUE(name),\n        value: 0,\n      }));\n      return expectActions(widget1Actions.suggestValues(), expectedActions);\n    });\n  });\n\n  describe('setValue', () => {\n    it('sets a value and suggests values', () => {\n      const expectedActions = [\n        { type: widget1Types.SET_VALUE(NAME), value },\n        ...widget1Constants.ACQUISITION_FIELDS.map(name => ({\n          type: widget1Types.SUGGEST_VALUE(name),\n          value: 0,\n        })),\n      ];\n\n      return expectActions(\n        widget1Actions.setValue(NAME, value),\n        expectedActions,\n      );\n    });\n\n    widget1Constants.ALL_FIELDS.forEach((field) => {\n      const cappedFields = widget1Constants.CAPPED_FIELDS;\n\n      it(`caps field ${field} at 80% of the property price`, () => {\n        const propertyValue = 100;\n        const nextValue = 200;\n        store = prepareStore({ step: 0, property: { value: propertyValue } });\n        const expectedActions = [\n          {\n            type: widget1Types.SET_VALUE(field),\n            value: cappedFields.includes(field)\n              ? MAX_BORROW_RATIO_PRIMARY_PROPERTY * propertyValue\n              : nextValue,\n          },\n        ];\n\n        return expectActions(\n          widget1Actions.setValue(field, nextValue),\n          expectedActions,\n          `failed for field: ${field}`,\n        );\n      });\n    });\n\n    it('caps a field at 90% of the property price if allowExtremeValue is true', () => {\n      const propertyValue = 100;\n      const nextValue = 200;\n      store = prepareStore({\n        step: 0,\n        property: { value: propertyValue },\n        wantedLoan: { allowExtremeLoan: true },\n      });\n      const expectedActions = [\n        {\n          type: widget1Types.SET_VALUE(widget1Constants.WANTED_LOAN),\n          value: MAX_BORROW_RATIO_WITH_PLEDGE * propertyValue,\n        },\n      ];\n\n      return expectActions(\n        widget1Actions.setValue(widget1Constants.WANTED_LOAN, nextValue),\n        expectedActions,\n      );\n    });\n\n    it('allows capped fields to be set to an empty string', () => {\n      const propertyValue = 100;\n      const nextValue = '';\n      store = prepareStore({\n        step: 0,\n        property: { value: propertyValue },\n        wantedLoan: { allowExtremeLoan: true },\n      });\n      const expectedActions = [\n        {\n          type: widget1Types.SET_VALUE(widget1Constants.WANTED_LOAN),\n          value: '',\n        },\n      ];\n\n      return expectActions(\n        widget1Actions.setValue(widget1Constants.WANTED_LOAN, nextValue),\n        expectedActions,\n      );\n    });\n  });\n\n  describe('setAuto', () => {\n    it('sets a value to auto, and resuggests all values', () => {\n      const expectedActions = [\n        { type: widget1Types.SET_AUTO(NAME), auto: true },\n        ...widget1Constants.ACQUISITION_FIELDS.map(name => ({\n          type: widget1Types.SUGGEST_VALUE(name),\n          value: 0,\n        })),\n      ];\n\n      return expectActions(widget1Actions.setAuto(NAME, true), expectedActions);\n    });\n  });\n\n  describe('increaseSliderMax', () => {\n    it('creates the right action', () => {\n      const expectedActions = {\n        type: widget1Types.INCREASE_SLIDER_MAX(NAME),\n      };\n\n      expect(widget1Actions.increaseSliderMax(NAME)).to.deep.equal(expectedActions);\n    });\n  });\n\n  describe('setStep', () => {\n    it('does not dispatch anything if the next step if lower than current step', () => {\n      store = prepareStore({ step: 1 });\n      const expectedActions = [];\n      return expectActions(widget1Actions.setStep(0), expectedActions);\n    });\n\n    it('sets the step if it is not the final step', () => {\n      store = prepareStore({ step: 0 });\n      const expectedActions = [\n        { type: commonTypes.SET_VALUE('step'), value: 1 },\n      ];\n      return expectActions(widget1Actions.setStep(1), expectedActions);\n    });\n\n    it('sets the step and suggests values if it will be the final step', () => {\n      // getState does not work in redux-mock-store, so set the final step\n      // initially as well to make sure getState gets the right value\n      // for the `suggestValues` action\n      store = prepareStore({\n        step: widget1Constants.ACQUISITION_FIELDS.length,\n      });\n      const expectedActions = [\n        {\n          type: commonTypes.SET_VALUE('step'),\n          value: widget1Constants.ACQUISITION_FIELDS.length,\n        },\n        ...widget1Constants.ACQUISITION_FIELDS.map(name => ({\n          type: widget1Types.SUGGEST_VALUE(name),\n          value: 0,\n        })),\n        { type: commonTypes.SET_VALUE('finishedTutorial'), value: true },\n      ];\n      return expectActions(\n        widget1Actions.setStep(widget1Constants.ACQUISITION_FIELDS.length),\n        expectedActions,\n      );\n    });\n  });\n\n  describe('resetCalculator', () => {\n    it('resets all the values', () => {\n      const expectedActions = widget1Constants.ALL_FIELDS.reduce(\n        (acc, field) => [\n          ...acc,\n          { type: widget1Types.SET_VALUE(field), value: 0 },\n          { type: widget1Types.SET_AUTO(field), auto: true },\n        ],\n        [],\n      );\n      return expectActions(widget1Actions.resetCalculator(), expectedActions);\n    });\n\n    it('sets property and currentLoan to auto false in refinancing', () => {\n      store = prepareStore({\n        purchaseType: widget1Constants.PURCHASE_TYPE.REFINANCING,\n      });\n\n      const expectedActions = widget1Constants.ALL_FIELDS.reduce(\n        (acc, field) => [\n          ...acc,\n          { type: widget1Types.SET_VALUE(field), value: 0 },\n          { type: widget1Types.SET_AUTO(field), auto: true },\n        ],\n        [],\n      );\n      return expectActions(widget1Actions.resetCalculator(), [\n        ...expectedActions,\n        { type: widget1Types.SET_AUTO(widget1Constants.PROPERTY), auto: false },\n        {\n          type: widget1Types.SET_AUTO(widget1Constants.CURRENT_LOAN),\n          auto: false,\n        },\n      ]);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"e45ca1a4ce8765af1c3e6b3a5082f5a28c8dfe6c"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/autoupdate/autoupdate_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/autoupdate/autoupdate_client.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/autoupdate/autoupdate_client.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/autoupdate/autoupdate_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/autoupdate_client.js"}},"code":"module.export({\n  Autoupdate: function () {\n    return Autoupdate;\n  }\n});\nvar ClientVersions;\nmodule.link(\"./client_versions.js\", {\n  ClientVersions: function (v) {\n    ClientVersions = v;\n  }\n}, 0);\nvar clientArch = Meteor.isCordova ? 'web.cordova' : Meteor.isModern ? 'web.browser' : 'web.browser.legacy';\nvar autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n  version: 'unknown',\n  versionRefreshable: 'unknown',\n  versionNonRefreshable: 'unknown',\n  assets: []\n};\nvar Autoupdate = {};\nvar connection = DDP.connect(__meteor_runtime_config__.ROOT_URL); // Stores acceptable client versions.\n\nvar clientVersions = Autoupdate._clientVersions = new ClientVersions(); // Used by a self-test.\n\nconnection.registerStore('meteor_autoupdate_clientVersions', clientVersions.createStore());\n\nAutoupdate.newClientAvailable = function () {\n  return clientVersions.newClientAvailable(clientArch, ['versionRefreshable', 'versionNonRefreshable'], autoupdateVersions);\n}; // Set to true if the link.onload callback ever fires for any <link> node.\n\n\nvar knownToSupportCssOnLoad = false;\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0,\n  // don't do any immediate retries\n  baseTimeout: 30 * 1000 // start with 30s\n\n});\nvar failures = 0;\n\nAutoupdate._retrySubscription = function () {\n  connection.subscribe('meteor_autoupdate_clientVersions', {\n    onError: function (error) {\n      Meteor._debug('autoupdate subscription failed', error);\n\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n    onReady: function () {\n      // Call checkNewVersionDocument with a slight delay, so that the\n      // const handle declaration is guaranteed to be initialized, even if\n      // the added or changed callbacks are called synchronously.\n      var resolved = Promise.resolve();\n\n      function check(doc) {\n        resolved.then(function () {\n          return checkNewVersionDocument(doc);\n        });\n      }\n\n      var stop = clientVersions.watch(check);\n\n      function checkNewVersionDocument(doc) {\n        if (doc._id !== clientArch) {\n          return;\n        }\n\n        if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {\n          // Non-refreshable assets have changed, so we have to reload the\n          // whole page rather than just replacing <link> tags.\n          if (stop) stop();\n\n          if (Package.reload) {\n            // The reload package should be provided by ddp-client, which\n            // is provided by the ddp package that autoupdate depends on.\n            Package.reload.Reload._reload();\n          }\n\n          return;\n        }\n\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n          var waitUntilCssLoads = function (link, callback) {\n            var called;\n\n            link.onload = function () {\n              knownToSupportCssOnLoad = true;\n\n              if (!called) {\n                called = true;\n                callback();\n              }\n            };\n\n            if (!knownToSupportCssOnLoad) {\n              var id = Meteor.setInterval(function () {\n                if (link.sheet) {\n                  if (!called) {\n                    called = true;\n                    callback();\n                  }\n\n                  Meteor.clearInterval(id);\n                }\n              }, 50);\n            }\n          };\n\n          var removeOldLinks = function () {\n            if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n              oldLinks.splice(0).forEach(function (link) {\n                link.parentNode.removeChild(link);\n              });\n            }\n          };\n\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable; // Switch out old css links for the new css links. Inspired by:\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n\n          var newCss = doc.assets || [];\n          var oldLinks = [];\n          Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n            if (link.className === '__meteor-css__') {\n              oldLinks.push(link);\n            }\n          });\n          var newLinksLeftToLoad = newCss.length;\n\n          if (newCss.length > 0) {\n            newCss.forEach(function (css) {\n              var newLink = document.createElement('link');\n              newLink.setAttribute('rel', 'stylesheet');\n              newLink.setAttribute('type', 'text/css');\n              newLink.setAttribute('class', '__meteor-css__');\n              newLink.setAttribute('href', css.url);\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n              var head = document.getElementsByTagName('head').item(0);\n              head.appendChild(newLink);\n            });\n          } else {\n            removeOldLinks();\n          }\n        }\n      }\n    }\n  });\n};\n\nAutoupdate._retrySubscription();","map":{"version":3,"sources":["packages/autoupdate/autoupdate_client.js"],"names":["module","export","Autoupdate","ClientVersions","link","v","clientArch","Meteor","isCordova","isModern","autoupdateVersions","__meteor_runtime_config__","autoupdate","versions","version","versionRefreshable","versionNonRefreshable","assets","connection","DDP","connect","ROOT_URL","clientVersions","_clientVersions","registerStore","createStore","newClientAvailable","knownToSupportCssOnLoad","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","subscribe","onError","error","_debug","retryLater","onReady","resolved","Promise","resolve","check","doc","then","checkNewVersionDocument","stop","watch","_id","Package","reload","Reload","_reload","waitUntilCssLoads","callback","called","onload","id","setInterval","sheet","clearInterval","removeOldLinks","oldLinks","length","newLinksLeftToLoad","splice","forEach","parentNode","removeChild","newCss","Array","prototype","call","document","getElementsByTagName","className","push","css","newLink","createElement","setAttribute","url","setTimeout","head","item","appendChild"],"mappings":"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","sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if there is a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\n\nimport { ClientVersions } from './client_versions.js';\n\nconst clientArch = Meteor.isCordova\n  ? 'web.cordova'\n  : Meteor.isModern\n    ? 'web.browser'\n    : 'web.browser.legacy';\n\nconst autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {})\n  .versions || {})[clientArch] || {\n  version: 'unknown',\n  versionRefreshable: 'unknown',\n  versionNonRefreshable: 'unknown',\n  assets: [],\n};\n\nexport const Autoupdate = {};\nconst connection = DDP.connect(__meteor_runtime_config__.ROOT_URL);\n\n// Stores acceptable client versions.\nconst clientVersions = (Autoupdate._clientVersions = new ClientVersions()); // Used by a self-test.\n\nconnection.registerStore(\n  'meteor_autoupdate_clientVersions',\n  clientVersions.createStore(),\n);\n\nAutoupdate.newClientAvailable = function () {\n  return clientVersions.newClientAvailable(\n    clientArch,\n    ['versionRefreshable', 'versionNonRefreshable'],\n    autoupdateVersions,\n  );\n};\n\n// Set to true if the link.onload callback ever fires for any <link> node.\nlet knownToSupportCssOnLoad = false;\n\nconst retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30 * 1000, // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  connection.subscribe('meteor_autoupdate_clientVersions', {\n    onError(error) {\n      Meteor._debug('autoupdate subscription failed', error);\n      failures++;\n      retry.retryLater(failures, () => {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      // Call checkNewVersionDocument with a slight delay, so that the\n      // const handle declaration is guaranteed to be initialized, even if\n      // the added or changed callbacks are called synchronously.\n      const resolved = Promise.resolve();\n      function check(doc) {\n        resolved.then(() => checkNewVersionDocument(doc));\n      }\n\n      const stop = clientVersions.watch(check);\n\n      function checkNewVersionDocument(doc) {\n        if (doc._id !== clientArch) {\n          return;\n        }\n\n        if (\n          doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable\n        ) {\n          // Non-refreshable assets have changed, so we have to reload the\n          // whole page rather than just replacing <link> tags.\n          if (stop) stop();\n          if (Package.reload) {\n            // The reload package should be provided by ddp-client, which\n            // is provided by the ddp package that autoupdate depends on.\n            Package.reload.Reload._reload();\n          }\n          return;\n        }\n\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n          // Switch out old css links for the new css links. Inspired by:\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n          const newCss = doc.assets || [];\n          const oldLinks = [];\n\n          Array.prototype.forEach.call(\n            document.getElementsByTagName('link'),\n            (link) => {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            },\n          );\n\n          function waitUntilCssLoads(link, callback) {\n            let called;\n\n            link.onload = function () {\n              knownToSupportCssOnLoad = true;\n              if (!called) {\n                called = true;\n                callback();\n              }\n            };\n\n            if (!knownToSupportCssOnLoad) {\n              var id = Meteor.setInterval(() => {\n                if (link.sheet) {\n                  if (!called) {\n                    called = true;\n                    callback();\n                  }\n                  Meteor.clearInterval(id);\n                }\n              }, 50);\n            }\n          }\n\n          let newLinksLeftToLoad = newCss.length;\n          function removeOldLinks() {\n            if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n              oldLinks.splice(0).forEach((link) => {\n                link.parentNode.removeChild(link);\n              });\n            }\n          }\n\n          if (newCss.length > 0) {\n            newCss.forEach((css) => {\n              const newLink = document.createElement('link');\n              newLink.setAttribute('rel', 'stylesheet');\n              newLink.setAttribute('type', 'text/css');\n              newLink.setAttribute('class', '__meteor-css__');\n              newLink.setAttribute('href', css.url);\n\n              waitUntilCssLoads(newLink, () => {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n\n              const head = document.getElementsByTagName('head').item(0);\n              head.appendChild(newLink);\n            });\n          } else {\n            removeOldLinks();\n          }\n        }\n      }\n    },\n  });\n};\n\nAutoupdate._retrySubscription();\n"]},"sourceType":"script","hash":"f4062e87bcbda60b20dbf7f9e3c9a14b8ab4b553"}

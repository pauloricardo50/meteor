{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/FinanceCalculator/test/FinanceCalculator.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/FinanceCalculator/test/FinanceCalculator.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/FinanceCalculator/test/FinanceCalculator.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/FinanceCalculator/test/FinanceCalculator.spec.js"],"names":["expect","DefaultFinanceCalculator","FinanceCalculator","NO_INTEREST_RATE_ERROR","RESIDENCE_TYPE","describe","calc","beforeEach","it","getLoanValue","propertyValue","fortune","to","equal","notaryFees","getBorrowRatio","loan","getBorrowRatioWithoutLoan","getRetirementForGender","gender","not","undefined","getIncomeRatio","monthlyIncome","monthlyPayment","getLoanCost","maintenance","interests","amortization","getInterestsWithTranches","tranches","value","type","interestRates","a","b","amortizationBaseRate","amortizationGoal","getAmortizationRateBase","borrowRatio","getYearsToRetirement","age1","gender1","age2","gender2","getFeesBase","fees","expected","total","getTheoreticalMonthly","propAndWork","loanValue","amortizationRate","deep","getMaxLoanBase","propertyWork","pledgedAmount","residenceType","MAIN_RESIDENCE","getAveragedInterestRate","rateType","rateType1","rateType2"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport DefaultFinanceCalculator, {\n  FinanceCalculator,\n} from '../FinanceCalculator';\nimport { NO_INTEREST_RATE_ERROR } from '../financeCalculatorConstants';\nimport { RESIDENCE_TYPE } from '../../../api/constants';\n\ndescribe('FinanceCalculator', () => {\n  let calc;\n\n  beforeEach(() => {\n    calc = new FinanceCalculator();\n  });\n\n  describe('getLoanValue', () => {\n    it('returns the difference between property and fortune without fees', () => {\n      expect(calc.getLoanValue({ propertyValue: 100, fortune: 20 })).to.equal(85);\n    });\n\n    it('uses fortune to pay for fees', () => {\n      calc = new FinanceCalculator({ notaryFees: 0.1 });\n      expect(calc.getLoanValue({ propertyValue: 100, fortune: 30 })).to.equal(80);\n    });\n  });\n\n  describe('getBorrowRatio', () => {\n    it('returns a percentage borrowRatio', () => {\n      expect(calc.getBorrowRatio({ propertyValue: 100, loan: 80 })).to.equal(0.8);\n    });\n\n    it('returns zero if no loan is provided', () => {\n      expect(calc.getBorrowRatio({ propertyValue: 100 })).to.equal(0);\n    });\n  });\n\n  describe('getBorrowRatioWithoutLoan', () => {\n    it('returns a percentage borrowRatio', () => {\n      expect(calc.getBorrowRatioWithoutLoan({ propertyValue: 100, fortune: 25 })).to.equal(0.8);\n    });\n  });\n\n  describe('getRetirementForGender', () => {\n    it('returns a different value for male and female', () => {\n      expect(calc.getRetirementForGender({ gender: 'M' })).to.not.equal(undefined);\n      expect(calc.getRetirementForGender({ gender: 'M' })).to.not.equal(undefined);\n      expect(calc.getRetirementForGender({ gender: 'M' })).to.not.equal(calc.getRetirementForGender({ gender: 'F' }));\n    });\n\n    it('returns male retirement if nothing is provided', () => {\n      expect(calc.getRetirementForGender({})).to.equal(65);\n      expect(calc.getRetirementForGender()).to.equal(65);\n    });\n  });\n\n  describe('getIncomeRatio', () => {\n    it('returns the ratio between payment and income', () => {\n      expect(calc.getIncomeRatio({ monthlyIncome: 1, monthlyPayment: 0.5 })).to.equal(0.5);\n    });\n\n    it('returns zero if no payment is provided', () => {\n      expect(calc.getIncomeRatio({ monthlyIncome: 1, monthlyPayment: 0 })).to.equal(0);\n    });\n  });\n\n  describe('getLoanCost', () => {\n    it('returns the sum of the 3 components', () => {\n      expect(calc.getLoanCost({ maintenance: 1, interests: 2, amortization: 3 })).to.equal(6);\n    });\n\n    it('ignores a value if not provided', () => {\n      expect(calc.getLoanCost({ interests: 2, amortization: 3 })).to.equal(5);\n      expect(calc.getLoanCost({ maintenance: 1, amortization: 3 })).to.equal(4);\n      expect(calc.getLoanCost({ maintenance: 1, interests: 2 })).to.equal(3);\n    });\n\n    it('returns zero if nothing is provided', () => {\n      expect(calc.getLoanCost()).to.equal(0);\n    });\n  });\n\n  describe('getInterestsWithTranches', () => {\n    it('aggregates interest rates with loan tranches', () => {\n      expect(calc.getInterestsWithTranches({\n        tranches: [{ value: 0.5, type: 'a' }, { value: 0.5, type: 'b' }],\n        interestRates: { a: 0.01, b: 0.02 },\n      })).to.equal(0.5 * 0.01 + 0.5 * 0.02);\n    });\n\n    it('returns zero if nothing is provided', () => {\n      expect(calc.getInterestsWithTranches()).to.equal(0);\n    });\n\n    it('return a dash if an interest rate is not present', () => {\n      expect(calc.getInterestsWithTranches({\n        tranches: [{ value: 0.5, type: 'a' }],\n        interestRates: { b: 0.02 },\n      })).to.equal('-');\n    });\n  });\n\n  describe('getAmortizationRateBase', () => {\n    it('returns the amortization base rate for an 80% loan with proper precision', () => {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65,\n      });\n      expect(calc.getAmortizationRateBase({ borrowRatio: 0.8 })).to.equal(0.0125);\n    });\n\n    it('returns zero if already below the amortizationGoal', () => {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65,\n      });\n      expect(calc.getAmortizationRateBase({ borrowRatio: 0.64 })).to.equal(0);\n    });\n\n    it('returns zero if already exactly at the amortizationGoal', () => {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65,\n      });\n      expect(calc.getAmortizationRateBase({ borrowRatio: 0.65 })).to.equal(0);\n    });\n\n    it('returns zero if nothing is provided', () => {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65,\n      });\n      expect(calc.getAmortizationRateBase()).to.equal(0);\n      expect(calc.getAmortizationRateBase({})).to.equal(0);\n    });\n  });\n\n  describe('DefaultFinanceCalculator', () => {\n    beforeEach(() => {\n      calc = DefaultFinanceCalculator;\n    });\n\n    it('has default initialization settings', () => {\n      expect(calc.getLoanValue({ propertyValue: 100, fortune: 25 })).to.equal(80);\n      expect(calc.getAmortizationRateBase({ borrowRatio: 0.8 })).to.equal(0.0125);\n    });\n  });\n\n  describe('Calculate Years to Retirement', () => {\n    it('Should return 35 with a male of 30 yo', () => {\n      expect(calc.getYearsToRetirement({ age1: 30, gender1: 'M' })).to.equal(35);\n    });\n\n    it('Should return 34 with a female of 30 yo', () => {\n      expect(calc.getYearsToRetirement({ age1: 30, gender1: 'F' })).to.equal(34);\n    });\n\n    it('Should return 35 with an undefined gender of 30 yo', () => {\n      expect(calc.getYearsToRetirement({ age1: 30 })).to.equal(35);\n    });\n\n    it('Should return 0 with a female of 64 yo', () => {\n      expect(calc.getYearsToRetirement({ age1: 64, gender1: 'F' })).to.equal(0);\n    });\n\n    it('Should return 0 with a female over 64 yo', () => {\n      expect(calc.getYearsToRetirement({ age1: 80, gender1: 'F' })).to.equal(0);\n    });\n\n    it('Should return 10 with a female of 54 yo and male of 54 yo', () => {\n      expect(calc.getYearsToRetirement({\n        age1: 54,\n        age2: 54,\n        gender1: 'F',\n        gender2: 'M',\n      })).to.equal(10);\n    });\n  });\n\n  describe('getFeesBase', () => {\n    it('returns fees if its above 0 or 0', () => {\n      expect(calc.getFeesBase({ fees: 0 })).to.equal(0);\n      expect(calc.getFeesBase({ fees: 123 })).to.equal(123);\n    });\n\n    it('returns 0 if nothing is passed', () => {\n      expect(calc.getFeesBase({})).to.equal(0);\n    });\n\n    it('returns calculated fees if no fees are provided', () => {\n      expect(calc.getFeesBase({ propertyValue: 100 })).to.equal(5);\n      expect(calc.getFeesBase({ propertyValue: 0 })).to.equal(0);\n    });\n  });\n\n  describe('getTheoreticalMonthly', () => {\n    it('returns a correct value', () => {\n      const expected = {\n        maintenance: 1000,\n        interests: 4000,\n        amortization: 1000,\n        total: 6000,\n      };\n\n      expect(calc.getTheoreticalMonthly({\n        propAndWork: 1200000,\n        loanValue: 960000,\n        amortizationRate: calc.getAmortizationRateBase({ borrowRatio: 0.8 }),\n      })).to.deep.equal(expected);\n    });\n  });\n\n  describe('getMaxLoanBase', () => {\n    it('returns 80% of the property by default', () => {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        pledgedAmount: 1000,\n      })).to.equal(80);\n    });\n\n    it('returns 80% of the property for a main residence if nothing is pledged', () => {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      })).to.equal(80);\n    });\n\n    it('returns between 80 and 90% of the property for a main residence if a little is pledged', () => {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        pledgedAmount: 5,\n      })).to.equal(85);\n    });\n\n    it('caps at 90% of the property', () => {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        pledgedAmount: 20,\n      })).to.equal(90);\n    });\n  });\n\n  describe('getAveragedInterestRate', () => {\n    it('returns the same value if only one rate at 100%', () => {\n      expect(calc.getAveragedInterestRate({\n        tranches: [{ type: 'rateType', value: 1 }],\n        interestRates: { rateType: 0.01 },\n      })).to.equal(0.01);\n    });\n\n    it('averages 2 rates out', () => {\n      expect(calc.getAveragedInterestRate({\n        tranches: [\n          { type: 'rateType1', value: 0.5 },\n          { type: 'rateType2', value: 0.5 },\n        ],\n        interestRates: { rateType1: 0.01, rateType2: 0.02 },\n      })).to.equal(0.015);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/FinanceCalculator/test/FinanceCalculator.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/FinanceCalculator/test/FinanceCalculator.spec.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar DefaultFinanceCalculator, FinanceCalculator;\nmodule.link(\"../FinanceCalculator\", {\n  \"default\": function (v) {\n    DefaultFinanceCalculator = v;\n  },\n  FinanceCalculator: function (v) {\n    FinanceCalculator = v;\n  }\n}, 1);\nvar NO_INTEREST_RATE_ERROR;\nmodule.link(\"../financeCalculatorConstants\", {\n  NO_INTEREST_RATE_ERROR: function (v) {\n    NO_INTEREST_RATE_ERROR = v;\n  }\n}, 2);\nvar RESIDENCE_TYPE;\nmodule.link(\"../../../api/constants\", {\n  RESIDENCE_TYPE: function (v) {\n    RESIDENCE_TYPE = v;\n  }\n}, 3);\ndescribe('FinanceCalculator', function () {\n  var calc;\n  beforeEach(function () {\n    calc = new FinanceCalculator();\n  });\n  describe('getLoanValue', function () {\n    it('returns the difference between property and fortune without fees', function () {\n      expect(calc.getLoanValue({\n        propertyValue: 100,\n        fortune: 20\n      })).to.equal(85);\n    });\n    it('uses fortune to pay for fees', function () {\n      calc = new FinanceCalculator({\n        notaryFees: 0.1\n      });\n      expect(calc.getLoanValue({\n        propertyValue: 100,\n        fortune: 30\n      })).to.equal(80);\n    });\n  });\n  describe('getBorrowRatio', function () {\n    it('returns a percentage borrowRatio', function () {\n      expect(calc.getBorrowRatio({\n        propertyValue: 100,\n        loan: 80\n      })).to.equal(0.8);\n    });\n    it('returns zero if no loan is provided', function () {\n      expect(calc.getBorrowRatio({\n        propertyValue: 100\n      })).to.equal(0);\n    });\n  });\n  describe('getBorrowRatioWithoutLoan', function () {\n    it('returns a percentage borrowRatio', function () {\n      expect(calc.getBorrowRatioWithoutLoan({\n        propertyValue: 100,\n        fortune: 25\n      })).to.equal(0.8);\n    });\n  });\n  describe('getRetirementForGender', function () {\n    it('returns a different value for male and female', function () {\n      expect(calc.getRetirementForGender({\n        gender: 'M'\n      })).to.not.equal(undefined);\n      expect(calc.getRetirementForGender({\n        gender: 'M'\n      })).to.not.equal(undefined);\n      expect(calc.getRetirementForGender({\n        gender: 'M'\n      })).to.not.equal(calc.getRetirementForGender({\n        gender: 'F'\n      }));\n    });\n    it('returns male retirement if nothing is provided', function () {\n      expect(calc.getRetirementForGender({})).to.equal(65);\n      expect(calc.getRetirementForGender()).to.equal(65);\n    });\n  });\n  describe('getIncomeRatio', function () {\n    it('returns the ratio between payment and income', function () {\n      expect(calc.getIncomeRatio({\n        monthlyIncome: 1,\n        monthlyPayment: 0.5\n      })).to.equal(0.5);\n    });\n    it('returns zero if no payment is provided', function () {\n      expect(calc.getIncomeRatio({\n        monthlyIncome: 1,\n        monthlyPayment: 0\n      })).to.equal(0);\n    });\n  });\n  describe('getLoanCost', function () {\n    it('returns the sum of the 3 components', function () {\n      expect(calc.getLoanCost({\n        maintenance: 1,\n        interests: 2,\n        amortization: 3\n      })).to.equal(6);\n    });\n    it('ignores a value if not provided', function () {\n      expect(calc.getLoanCost({\n        interests: 2,\n        amortization: 3\n      })).to.equal(5);\n      expect(calc.getLoanCost({\n        maintenance: 1,\n        amortization: 3\n      })).to.equal(4);\n      expect(calc.getLoanCost({\n        maintenance: 1,\n        interests: 2\n      })).to.equal(3);\n    });\n    it('returns zero if nothing is provided', function () {\n      expect(calc.getLoanCost()).to.equal(0);\n    });\n  });\n  describe('getInterestsWithTranches', function () {\n    it('aggregates interest rates with loan tranches', function () {\n      expect(calc.getInterestsWithTranches({\n        tranches: [{\n          value: 0.5,\n          type: 'a'\n        }, {\n          value: 0.5,\n          type: 'b'\n        }],\n        interestRates: {\n          a: 0.01,\n          b: 0.02\n        }\n      })).to.equal(0.5 * 0.01 + 0.5 * 0.02);\n    });\n    it('returns zero if nothing is provided', function () {\n      expect(calc.getInterestsWithTranches()).to.equal(0);\n    });\n    it('return a dash if an interest rate is not present', function () {\n      expect(calc.getInterestsWithTranches({\n        tranches: [{\n          value: 0.5,\n          type: 'a'\n        }],\n        interestRates: {\n          b: 0.02\n        }\n      })).to.equal('-');\n    });\n  });\n  describe('getAmortizationRateBase', function () {\n    it('returns the amortization base rate for an 80% loan with proper precision', function () {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65\n      });\n      expect(calc.getAmortizationRateBase({\n        borrowRatio: 0.8\n      })).to.equal(0.0125);\n    });\n    it('returns zero if already below the amortizationGoal', function () {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65\n      });\n      expect(calc.getAmortizationRateBase({\n        borrowRatio: 0.64\n      })).to.equal(0);\n    });\n    it('returns zero if already exactly at the amortizationGoal', function () {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65\n      });\n      expect(calc.getAmortizationRateBase({\n        borrowRatio: 0.65\n      })).to.equal(0);\n    });\n    it('returns zero if nothing is provided', function () {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65\n      });\n      expect(calc.getAmortizationRateBase()).to.equal(0);\n      expect(calc.getAmortizationRateBase({})).to.equal(0);\n    });\n  });\n  describe('DefaultFinanceCalculator', function () {\n    beforeEach(function () {\n      calc = DefaultFinanceCalculator;\n    });\n    it('has default initialization settings', function () {\n      expect(calc.getLoanValue({\n        propertyValue: 100,\n        fortune: 25\n      })).to.equal(80);\n      expect(calc.getAmortizationRateBase({\n        borrowRatio: 0.8\n      })).to.equal(0.0125);\n    });\n  });\n  describe('Calculate Years to Retirement', function () {\n    it('Should return 35 with a male of 30 yo', function () {\n      expect(calc.getYearsToRetirement({\n        age1: 30,\n        gender1: 'M'\n      })).to.equal(35);\n    });\n    it('Should return 34 with a female of 30 yo', function () {\n      expect(calc.getYearsToRetirement({\n        age1: 30,\n        gender1: 'F'\n      })).to.equal(34);\n    });\n    it('Should return 35 with an undefined gender of 30 yo', function () {\n      expect(calc.getYearsToRetirement({\n        age1: 30\n      })).to.equal(35);\n    });\n    it('Should return 0 with a female of 64 yo', function () {\n      expect(calc.getYearsToRetirement({\n        age1: 64,\n        gender1: 'F'\n      })).to.equal(0);\n    });\n    it('Should return 0 with a female over 64 yo', function () {\n      expect(calc.getYearsToRetirement({\n        age1: 80,\n        gender1: 'F'\n      })).to.equal(0);\n    });\n    it('Should return 10 with a female of 54 yo and male of 54 yo', function () {\n      expect(calc.getYearsToRetirement({\n        age1: 54,\n        age2: 54,\n        gender1: 'F',\n        gender2: 'M'\n      })).to.equal(10);\n    });\n  });\n  describe('getFeesBase', function () {\n    it('returns fees if its above 0 or 0', function () {\n      expect(calc.getFeesBase({\n        fees: 0\n      })).to.equal(0);\n      expect(calc.getFeesBase({\n        fees: 123\n      })).to.equal(123);\n    });\n    it('returns 0 if nothing is passed', function () {\n      expect(calc.getFeesBase({})).to.equal(0);\n    });\n    it('returns calculated fees if no fees are provided', function () {\n      expect(calc.getFeesBase({\n        propertyValue: 100\n      })).to.equal(5);\n      expect(calc.getFeesBase({\n        propertyValue: 0\n      })).to.equal(0);\n    });\n  });\n  describe('getTheoreticalMonthly', function () {\n    it('returns a correct value', function () {\n      var expected = {\n        maintenance: 1000,\n        interests: 4000,\n        amortization: 1000,\n        total: 6000\n      };\n      expect(calc.getTheoreticalMonthly({\n        propAndWork: 1200000,\n        loanValue: 960000,\n        amortizationRate: calc.getAmortizationRateBase({\n          borrowRatio: 0.8\n        })\n      })).to.deep.equal(expected);\n    });\n  });\n  describe('getMaxLoanBase', function () {\n    it('returns 80% of the property by default', function () {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        pledgedAmount: 1000\n      })).to.equal(80);\n    });\n    it('returns 80% of the property for a main residence if nothing is pledged', function () {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE\n      })).to.equal(80);\n    });\n    it('returns between 80 and 90% of the property for a main residence if a little is pledged', function () {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        pledgedAmount: 5\n      })).to.equal(85);\n    });\n    it('caps at 90% of the property', function () {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        pledgedAmount: 20\n      })).to.equal(90);\n    });\n  });\n  describe('getAveragedInterestRate', function () {\n    it('returns the same value if only one rate at 100%', function () {\n      expect(calc.getAveragedInterestRate({\n        tranches: [{\n          type: 'rateType',\n          value: 1\n        }],\n        interestRates: {\n          rateType: 0.01\n        }\n      })).to.equal(0.01);\n    });\n    it('averages 2 rates out', function () {\n      expect(calc.getAveragedInterestRate({\n        tranches: [{\n          type: 'rateType1',\n          value: 0.5\n        }, {\n          type: 'rateType2',\n          value: 0.5\n        }],\n        interestRates: {\n          rateType1: 0.01,\n          rateType2: 0.02\n        }\n      })).to.equal(0.015);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/FinanceCalculator/test/FinanceCalculator.spec.js"],"names":["describe","beforeEach","calc","it","expect","propertyValue","fortune","notaryFees","loan","gender","monthlyIncome","monthlyPayment","maintenance","interests","amortization","tranches","value","type","interestRates","a","b","amortizationBaseRate","amortizationGoal","borrowRatio","age1","gender1","age2","gender2","fees","expected","total","propAndWork","loanValue","amortizationRate","propertyWork","pledgedAmount","residenceType","RESIDENCE_TYPE","MAIN_RESIDENCE","rateType","rateType1","rateType2"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport DefaultFinanceCalculator, {\n  FinanceCalculator,\n} from '../FinanceCalculator';\nimport { NO_INTEREST_RATE_ERROR } from '../financeCalculatorConstants';\nimport { RESIDENCE_TYPE } from '../../../api/constants';\n\ndescribe('FinanceCalculator', () => {\n  let calc;\n\n  beforeEach(() => {\n    calc = new FinanceCalculator();\n  });\n\n  describe('getLoanValue', () => {\n    it('returns the difference between property and fortune without fees', () => {\n      expect(calc.getLoanValue({ propertyValue: 100, fortune: 20 })).to.equal(85);\n    });\n\n    it('uses fortune to pay for fees', () => {\n      calc = new FinanceCalculator({ notaryFees: 0.1 });\n      expect(calc.getLoanValue({ propertyValue: 100, fortune: 30 })).to.equal(80);\n    });\n  });\n\n  describe('getBorrowRatio', () => {\n    it('returns a percentage borrowRatio', () => {\n      expect(calc.getBorrowRatio({ propertyValue: 100, loan: 80 })).to.equal(0.8);\n    });\n\n    it('returns zero if no loan is provided', () => {\n      expect(calc.getBorrowRatio({ propertyValue: 100 })).to.equal(0);\n    });\n  });\n\n  describe('getBorrowRatioWithoutLoan', () => {\n    it('returns a percentage borrowRatio', () => {\n      expect(calc.getBorrowRatioWithoutLoan({ propertyValue: 100, fortune: 25 })).to.equal(0.8);\n    });\n  });\n\n  describe('getRetirementForGender', () => {\n    it('returns a different value for male and female', () => {\n      expect(calc.getRetirementForGender({ gender: 'M' })).to.not.equal(undefined);\n      expect(calc.getRetirementForGender({ gender: 'M' })).to.not.equal(undefined);\n      expect(calc.getRetirementForGender({ gender: 'M' })).to.not.equal(calc.getRetirementForGender({ gender: 'F' }));\n    });\n\n    it('returns male retirement if nothing is provided', () => {\n      expect(calc.getRetirementForGender({})).to.equal(65);\n      expect(calc.getRetirementForGender()).to.equal(65);\n    });\n  });\n\n  describe('getIncomeRatio', () => {\n    it('returns the ratio between payment and income', () => {\n      expect(calc.getIncomeRatio({ monthlyIncome: 1, monthlyPayment: 0.5 })).to.equal(0.5);\n    });\n\n    it('returns zero if no payment is provided', () => {\n      expect(calc.getIncomeRatio({ monthlyIncome: 1, monthlyPayment: 0 })).to.equal(0);\n    });\n  });\n\n  describe('getLoanCost', () => {\n    it('returns the sum of the 3 components', () => {\n      expect(calc.getLoanCost({ maintenance: 1, interests: 2, amortization: 3 })).to.equal(6);\n    });\n\n    it('ignores a value if not provided', () => {\n      expect(calc.getLoanCost({ interests: 2, amortization: 3 })).to.equal(5);\n      expect(calc.getLoanCost({ maintenance: 1, amortization: 3 })).to.equal(4);\n      expect(calc.getLoanCost({ maintenance: 1, interests: 2 })).to.equal(3);\n    });\n\n    it('returns zero if nothing is provided', () => {\n      expect(calc.getLoanCost()).to.equal(0);\n    });\n  });\n\n  describe('getInterestsWithTranches', () => {\n    it('aggregates interest rates with loan tranches', () => {\n      expect(calc.getInterestsWithTranches({\n        tranches: [{ value: 0.5, type: 'a' }, { value: 0.5, type: 'b' }],\n        interestRates: { a: 0.01, b: 0.02 },\n      })).to.equal(0.5 * 0.01 + 0.5 * 0.02);\n    });\n\n    it('returns zero if nothing is provided', () => {\n      expect(calc.getInterestsWithTranches()).to.equal(0);\n    });\n\n    it('return a dash if an interest rate is not present', () => {\n      expect(calc.getInterestsWithTranches({\n        tranches: [{ value: 0.5, type: 'a' }],\n        interestRates: { b: 0.02 },\n      })).to.equal('-');\n    });\n  });\n\n  describe('getAmortizationRateBase', () => {\n    it('returns the amortization base rate for an 80% loan with proper precision', () => {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65,\n      });\n      expect(calc.getAmortizationRateBase({ borrowRatio: 0.8 })).to.equal(0.0125);\n    });\n\n    it('returns zero if already below the amortizationGoal', () => {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65,\n      });\n      expect(calc.getAmortizationRateBase({ borrowRatio: 0.64 })).to.equal(0);\n    });\n\n    it('returns zero if already exactly at the amortizationGoal', () => {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65,\n      });\n      expect(calc.getAmortizationRateBase({ borrowRatio: 0.65 })).to.equal(0);\n    });\n\n    it('returns zero if nothing is provided', () => {\n      calc = new FinanceCalculator({\n        amortizationBaseRate: 0.01,\n        amortizationGoal: 0.65,\n      });\n      expect(calc.getAmortizationRateBase()).to.equal(0);\n      expect(calc.getAmortizationRateBase({})).to.equal(0);\n    });\n  });\n\n  describe('DefaultFinanceCalculator', () => {\n    beforeEach(() => {\n      calc = DefaultFinanceCalculator;\n    });\n\n    it('has default initialization settings', () => {\n      expect(calc.getLoanValue({ propertyValue: 100, fortune: 25 })).to.equal(80);\n      expect(calc.getAmortizationRateBase({ borrowRatio: 0.8 })).to.equal(0.0125);\n    });\n  });\n\n  describe('Calculate Years to Retirement', () => {\n    it('Should return 35 with a male of 30 yo', () => {\n      expect(calc.getYearsToRetirement({ age1: 30, gender1: 'M' })).to.equal(35);\n    });\n\n    it('Should return 34 with a female of 30 yo', () => {\n      expect(calc.getYearsToRetirement({ age1: 30, gender1: 'F' })).to.equal(34);\n    });\n\n    it('Should return 35 with an undefined gender of 30 yo', () => {\n      expect(calc.getYearsToRetirement({ age1: 30 })).to.equal(35);\n    });\n\n    it('Should return 0 with a female of 64 yo', () => {\n      expect(calc.getYearsToRetirement({ age1: 64, gender1: 'F' })).to.equal(0);\n    });\n\n    it('Should return 0 with a female over 64 yo', () => {\n      expect(calc.getYearsToRetirement({ age1: 80, gender1: 'F' })).to.equal(0);\n    });\n\n    it('Should return 10 with a female of 54 yo and male of 54 yo', () => {\n      expect(calc.getYearsToRetirement({\n        age1: 54,\n        age2: 54,\n        gender1: 'F',\n        gender2: 'M',\n      })).to.equal(10);\n    });\n  });\n\n  describe('getFeesBase', () => {\n    it('returns fees if its above 0 or 0', () => {\n      expect(calc.getFeesBase({ fees: 0 })).to.equal(0);\n      expect(calc.getFeesBase({ fees: 123 })).to.equal(123);\n    });\n\n    it('returns 0 if nothing is passed', () => {\n      expect(calc.getFeesBase({})).to.equal(0);\n    });\n\n    it('returns calculated fees if no fees are provided', () => {\n      expect(calc.getFeesBase({ propertyValue: 100 })).to.equal(5);\n      expect(calc.getFeesBase({ propertyValue: 0 })).to.equal(0);\n    });\n  });\n\n  describe('getTheoreticalMonthly', () => {\n    it('returns a correct value', () => {\n      const expected = {\n        maintenance: 1000,\n        interests: 4000,\n        amortization: 1000,\n        total: 6000,\n      };\n\n      expect(calc.getTheoreticalMonthly({\n        propAndWork: 1200000,\n        loanValue: 960000,\n        amortizationRate: calc.getAmortizationRateBase({ borrowRatio: 0.8 }),\n      })).to.deep.equal(expected);\n    });\n  });\n\n  describe('getMaxLoanBase', () => {\n    it('returns 80% of the property by default', () => {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        pledgedAmount: 1000,\n      })).to.equal(80);\n    });\n\n    it('returns 80% of the property for a main residence if nothing is pledged', () => {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      })).to.equal(80);\n    });\n\n    it('returns between 80 and 90% of the property for a main residence if a little is pledged', () => {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        pledgedAmount: 5,\n      })).to.equal(85);\n    });\n\n    it('caps at 90% of the property', () => {\n      expect(calc.getMaxLoanBase({\n        propertyValue: 90,\n        propertyWork: 10,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        pledgedAmount: 20,\n      })).to.equal(90);\n    });\n  });\n\n  describe('getAveragedInterestRate', () => {\n    it('returns the same value if only one rate at 100%', () => {\n      expect(calc.getAveragedInterestRate({\n        tranches: [{ type: 'rateType', value: 1 }],\n        interestRates: { rateType: 0.01 },\n      })).to.equal(0.01);\n    });\n\n    it('averages 2 rates out', () => {\n      expect(calc.getAveragedInterestRate({\n        tranches: [\n          { type: 'rateType1', value: 0.5 },\n          { type: 'rateType2', value: 0.5 },\n        ],\n        interestRates: { rateType1: 0.01, rateType2: 0.02 },\n      })).to.equal(0.015);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"575f911da7791d8f2e9fb52f96bfad70661fd7ed"}

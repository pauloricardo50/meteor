{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/inviteUserToPromotion.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/inviteUserToPromotion.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/inviteUserToPromotion.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/inviteUserToPromotion.test.js"],"names":["Meteor","resetDatabase","Factory","expect","PROMOTION_STATUS","PromotionService","UserService","HTTP_STATUS_CODES","RESTAPI","inviteUserToPromotion","fetchAndCheckResponse","makeHeaders","getTimestampAndNonce","user","promotionId","userToInvite","email","firstName","lastName","phoneNumber","api","addEndpoint","inviteUser","userData","expectedResponse","status","id","shareSolvency","undefined","timestamp","nonce","body","url","data","method","headers","userId","_id","JSON","stringify","setupPromotion","addProUser","setUserPermissions","permissions","canInviteCustomers","update","object","OPEN","describe","timeout","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","create","it","message","OK","then","invitedUser","fetchOne","$filters","$in","referredByUserLink","referredByOrganisationLink","loans","to","equal","context","FORBIDDEN","CONFLICT"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\nimport { expect } from 'chai';\n\nimport { PROMOTION_STATUS } from '../../../../constants';\nimport PromotionService from '../../../../promotions/server/PromotionService';\nimport UserService from '../../../../users/server/UserService';\nimport { HTTP_STATUS_CODES } from '../../restApiConstants';\nimport RESTAPI from '../../RESTAPI';\nimport inviteUserToPromotion from '../inviteUserToPromotion';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\n\nlet user;\nlet promotionId;\nconst userToInvite = {\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  phoneNumber: '+41 22 566 01 10',\n};\n\nconst api = new RESTAPI();\napi.addEndpoint(\n  '/promotions/:promotionId/invite-customer',\n  'POST',\n  inviteUserToPromotion,\n);\n\nconst inviteUser = ({\n  userData,\n  expectedResponse,\n  status,\n  id,\n  shareSolvency = undefined,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const body = { user: userData, shareSolvency };\n  return fetchAndCheckResponse({\n    url: `/promotions/${id || promotionId}/invite-customer`,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId: user._id,\n        timestamp,\n        nonce,\n        body,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n    status,\n  });\n};\n\nconst setupPromotion = () => {\n  PromotionService.addProUser({ promotionId, userId: user._id });\n  PromotionService.setUserPermissions({\n    promotionId,\n    userId: user._id,\n    permissions: { canInviteCustomers: true },\n  });\n  PromotionService.update({\n    promotionId,\n    object: { status: PROMOTION_STATUS.OPEN },\n  });\n};\n\ndescribe('REST: inviteUserToPromotion', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    user = Factory.create('pro');\n    promotionId = Factory.create('promotion')._id;\n  });\n\n  it('invites a user to promotion', () => {\n    setupPromotion();\n\n    return inviteUser({\n      userData: userToInvite,\n      expectedResponse: {\n        message: `Successfully invited user \"${\n          userToInvite.email\n        }\" to promotion id \"${promotionId}\"`,\n      },\n      status: HTTP_STATUS_CODES.OK,\n    }).then(() => {\n      const invitedUser = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [userToInvite.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n\n      expect(invitedUser.loans[0].shareSolvency).to.equal(undefined);\n    });\n  });\n\n  it('invites a user to promotion with solvency sharing', () => {\n    setupPromotion();\n\n    return inviteUser({\n      userData: userToInvite,\n      shareSolvency: true,\n      expectedResponse: {\n        message: `Successfully invited user \"${\n          userToInvite.email\n        }\" to promotion id \"${promotionId}\"`,\n      },\n      status: HTTP_STATUS_CODES.OK,\n    }).then(() => {\n      const invitedUser = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [userToInvite.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n\n      expect(invitedUser.loans[0].shareSolvency).to.equal(true);\n    });\n  });\n\n  context('returns an error when', () => {\n    it('promotion does not exist', () =>\n      inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          status: 400,\n          message:\n            '[Could not find object with filters \"{\"_id\":\"12345\"}\" in collection \"promotions\"]',\n        },\n        id: '12345',\n      }));\n\n    it('user does not own the promotion', () =>\n      inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          message:\n            'Vous ne pouvez pas inviter des clients à cette promotion [NOT_AUTHORIZED]',\n          status: 400,\n        },\n      }));\n\n    it('user is not allowed to invite customers to the promotion', () => {\n      PromotionService.addProUser({ promotionId, userId: user._id });\n      PromotionService.setUserPermissions({\n        promotionId,\n        userId: user._id,\n        permissions: { canInviteCustomers: false },\n      });\n\n      return inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          status: 400,\n          message:\n            'Vous ne pouvez pas inviter des clients à cette promotion [NOT_AUTHORIZED]',\n        },\n      });\n    });\n\n    it('promotion is not open', () => {\n      PromotionService.addProUser({ promotionId, userId: user._id });\n      PromotionService.setUserPermissions({\n        promotionId,\n        userId: user._id,\n        permissions: { canInviteCustomers: true },\n      });\n\n      return inviteUser({\n        userData: userToInvite,\n        status: HTTP_STATUS_CODES.FORBIDDEN,\n        expectedResponse: {\n          status: 400,\n          message:\n            'Vous ne pouvez pas inviter des clients à cette promotion [NOT_AUTHORIZED]',\n        },\n      });\n    });\n\n    it('fails if the body is incorrect', () => {\n      PromotionService.addProUser({ promotionId, userId: user._id });\n      setupPromotion();\n\n      promotionId = undefined;\n\n      return inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          status: 400,\n          message: '[No promotionId provided]',\n        },\n      });\n    });\n\n    it('user is already invited to promotion', () => {\n      PromotionService.addProUser({ promotionId, userId: user._id });\n      setupPromotion();\n\n      return inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          message: `Successfully invited user \"${\n            userToInvite.email\n          }\" to promotion id \"${promotionId}\"`,\n        },\n      }).then(() =>\n        inviteUser({\n          userData: userToInvite,\n          expectedResponse: {\n            status: HTTP_STATUS_CODES.CONFLICT,\n            message: 'Cet utilisateur est déjà invité à cette promotion [409]',\n          },\n        }));\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/inviteUserToPromotion.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/inviteUserToPromotion.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 3);\nlet PROMOTION_STATUS;\nmodule.link(\"../../../../constants\", {\n  PROMOTION_STATUS(v) {\n    PROMOTION_STATUS = v;\n  }\n\n}, 4);\nlet PromotionService;\nmodule.link(\"../../../../promotions/server/PromotionService\", {\n  default(v) {\n    PromotionService = v;\n  }\n\n}, 5);\nlet UserService;\nmodule.link(\"../../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 6);\nlet HTTP_STATUS_CODES;\nmodule.link(\"../../restApiConstants\", {\n  HTTP_STATUS_CODES(v) {\n    HTTP_STATUS_CODES = v;\n  }\n\n}, 7);\nlet RESTAPI;\nmodule.link(\"../../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 8);\nlet inviteUserToPromotion;\nmodule.link(\"../inviteUserToPromotion\", {\n  default(v) {\n    inviteUserToPromotion = v;\n  }\n\n}, 9);\nlet fetchAndCheckResponse, makeHeaders, getTimestampAndNonce;\nmodule.link(\"../../test/apiTestHelpers.test\", {\n  fetchAndCheckResponse(v) {\n    fetchAndCheckResponse = v;\n  },\n\n  makeHeaders(v) {\n    makeHeaders = v;\n  },\n\n  getTimestampAndNonce(v) {\n    getTimestampAndNonce = v;\n  }\n\n}, 10);\nlet user;\nlet promotionId;\nconst userToInvite = {\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  phoneNumber: '+41 22 566 01 10'\n};\nconst api = new RESTAPI();\napi.addEndpoint('/promotions/:promotionId/invite-customer', 'POST', inviteUserToPromotion);\n\nconst inviteUser = ({\n  userData,\n  expectedResponse,\n  status,\n  id,\n  shareSolvency = undefined\n}) => {\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  const body = {\n    user: userData,\n    shareSolvency\n  };\n  return fetchAndCheckResponse({\n    url: `/promotions/${id || promotionId}/invite-customer`,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId: user._id,\n        timestamp,\n        nonce,\n        body\n      }),\n      body: JSON.stringify(body)\n    },\n    expectedResponse,\n    status\n  });\n};\n\nconst setupPromotion = () => {\n  PromotionService.addProUser({\n    promotionId,\n    userId: user._id\n  });\n  PromotionService.setUserPermissions({\n    promotionId,\n    userId: user._id,\n    permissions: {\n      canInviteCustomers: true\n    }\n  });\n  PromotionService.update({\n    promotionId,\n    object: {\n      status: PROMOTION_STATUS.OPEN\n    }\n  });\n};\n\ndescribe('REST: inviteUserToPromotion', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    user = Factory.create('pro');\n    promotionId = Factory.create('promotion')._id;\n  });\n  it('invites a user to promotion', () => {\n    setupPromotion();\n    return inviteUser({\n      userData: userToInvite,\n      expectedResponse: {\n        message: `Successfully invited user \"${userToInvite.email}\" to promotion id \"${promotionId}\"`\n      },\n      status: HTTP_STATUS_CODES.OK\n    }).then(() => {\n      const invitedUser = UserService.fetchOne({\n        $filters: {\n          'emails.address': {\n            $in: [userToInvite.email]\n          }\n        },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: {\n          shareSolvency: 1\n        }\n      });\n      expect(invitedUser.loans[0].shareSolvency).to.equal(undefined);\n    });\n  });\n  it('invites a user to promotion with solvency sharing', () => {\n    setupPromotion();\n    return inviteUser({\n      userData: userToInvite,\n      shareSolvency: true,\n      expectedResponse: {\n        message: `Successfully invited user \"${userToInvite.email}\" to promotion id \"${promotionId}\"`\n      },\n      status: HTTP_STATUS_CODES.OK\n    }).then(() => {\n      const invitedUser = UserService.fetchOne({\n        $filters: {\n          'emails.address': {\n            $in: [userToInvite.email]\n          }\n        },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: {\n          shareSolvency: 1\n        }\n      });\n      expect(invitedUser.loans[0].shareSolvency).to.equal(true);\n    });\n  });\n  context('returns an error when', () => {\n    it('promotion does not exist', () => inviteUser({\n      userData: userToInvite,\n      expectedResponse: {\n        status: 400,\n        message: '[Could not find object with filters \"{\"_id\":\"12345\"}\" in collection \"promotions\"]'\n      },\n      id: '12345'\n    }));\n    it('user does not own the promotion', () => inviteUser({\n      userData: userToInvite,\n      expectedResponse: {\n        message: 'Vous ne pouvez pas inviter des clients à cette promotion [NOT_AUTHORIZED]',\n        status: 400\n      }\n    }));\n    it('user is not allowed to invite customers to the promotion', () => {\n      PromotionService.addProUser({\n        promotionId,\n        userId: user._id\n      });\n      PromotionService.setUserPermissions({\n        promotionId,\n        userId: user._id,\n        permissions: {\n          canInviteCustomers: false\n        }\n      });\n      return inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          status: 400,\n          message: 'Vous ne pouvez pas inviter des clients à cette promotion [NOT_AUTHORIZED]'\n        }\n      });\n    });\n    it('promotion is not open', () => {\n      PromotionService.addProUser({\n        promotionId,\n        userId: user._id\n      });\n      PromotionService.setUserPermissions({\n        promotionId,\n        userId: user._id,\n        permissions: {\n          canInviteCustomers: true\n        }\n      });\n      return inviteUser({\n        userData: userToInvite,\n        status: HTTP_STATUS_CODES.FORBIDDEN,\n        expectedResponse: {\n          status: 400,\n          message: 'Vous ne pouvez pas inviter des clients à cette promotion [NOT_AUTHORIZED]'\n        }\n      });\n    });\n    it('fails if the body is incorrect', () => {\n      PromotionService.addProUser({\n        promotionId,\n        userId: user._id\n      });\n      setupPromotion();\n      promotionId = undefined;\n      return inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          status: 400,\n          message: '[No promotionId provided]'\n        }\n      });\n    });\n    it('user is already invited to promotion', () => {\n      PromotionService.addProUser({\n        promotionId,\n        userId: user._id\n      });\n      setupPromotion();\n      return inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          message: `Successfully invited user \"${userToInvite.email}\" to promotion id \"${promotionId}\"`\n        }\n      }).then(() => inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          status: HTTP_STATUS_CODES.CONFLICT,\n          message: 'Cet utilisateur est déjà invité à cette promotion [409]'\n        }\n      }));\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/inviteUserToPromotion.test.js"],"names":["userToInvite","email","firstName","lastName","phoneNumber","api","inviteUser","shareSolvency","undefined","nonce","getTimestampAndNonce","body","user","fetchAndCheckResponse","url","id","promotionId","data","method","headers","makeHeaders","userId","JSON","status","setupPromotion","PromotionService","_id","permissions","canInviteCustomers","object","PROMOTION_STATUS","OPEN","describe","before","Meteor","after","beforeEach","resetDatabase","Factory","it","userData","expectedResponse","message","HTTP_STATUS_CODES","OK","invitedUser","$filters","$in","referredByUserLink","referredByOrganisationLink","loans","expect","context"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\nimport { expect } from 'chai';\n\nimport { PROMOTION_STATUS } from '../../../../constants';\nimport PromotionService from '../../../../promotions/server/PromotionService';\nimport UserService from '../../../../users/server/UserService';\nimport { HTTP_STATUS_CODES } from '../../restApiConstants';\nimport RESTAPI from '../../RESTAPI';\nimport inviteUserToPromotion from '../inviteUserToPromotion';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\n\nlet user;\nlet promotionId;\nconst userToInvite = {\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  phoneNumber: '+41 22 566 01 10',\n};\n\nconst api = new RESTAPI();\napi.addEndpoint(\n  '/promotions/:promotionId/invite-customer',\n  'POST',\n  inviteUserToPromotion,\n);\n\nconst inviteUser = ({\n  userData,\n  expectedResponse,\n  status,\n  id,\n  shareSolvency = undefined,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const body = { user: userData, shareSolvency };\n  return fetchAndCheckResponse({\n    url: `/promotions/${id || promotionId}/invite-customer`,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId: user._id,\n        timestamp,\n        nonce,\n        body,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n    status,\n  });\n};\n\nconst setupPromotion = () => {\n  PromotionService.addProUser({ promotionId, userId: user._id });\n  PromotionService.setUserPermissions({\n    promotionId,\n    userId: user._id,\n    permissions: { canInviteCustomers: true },\n  });\n  PromotionService.update({\n    promotionId,\n    object: { status: PROMOTION_STATUS.OPEN },\n  });\n};\n\ndescribe('REST: inviteUserToPromotion', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    user = Factory.create('pro');\n    promotionId = Factory.create('promotion')._id;\n  });\n\n  it('invites a user to promotion', () => {\n    setupPromotion();\n\n    return inviteUser({\n      userData: userToInvite,\n      expectedResponse: {\n        message: `Successfully invited user \"${\n          userToInvite.email\n        }\" to promotion id \"${promotionId}\"`,\n      },\n      status: HTTP_STATUS_CODES.OK,\n    }).then(() => {\n      const invitedUser = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [userToInvite.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n\n      expect(invitedUser.loans[0].shareSolvency).to.equal(undefined);\n    });\n  });\n\n  it('invites a user to promotion with solvency sharing', () => {\n    setupPromotion();\n\n    return inviteUser({\n      userData: userToInvite,\n      shareSolvency: true,\n      expectedResponse: {\n        message: `Successfully invited user \"${\n          userToInvite.email\n        }\" to promotion id \"${promotionId}\"`,\n      },\n      status: HTTP_STATUS_CODES.OK,\n    }).then(() => {\n      const invitedUser = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [userToInvite.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n\n      expect(invitedUser.loans[0].shareSolvency).to.equal(true);\n    });\n  });\n\n  context('returns an error when', () => {\n    it('promotion does not exist', () =>\n      inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          status: 400,\n          message:\n            '[Could not find object with filters \"{\"_id\":\"12345\"}\" in collection \"promotions\"]',\n        },\n        id: '12345',\n      }));\n\n    it('user does not own the promotion', () =>\n      inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          message:\n            'Vous ne pouvez pas inviter des clients à cette promotion [NOT_AUTHORIZED]',\n          status: 400,\n        },\n      }));\n\n    it('user is not allowed to invite customers to the promotion', () => {\n      PromotionService.addProUser({ promotionId, userId: user._id });\n      PromotionService.setUserPermissions({\n        promotionId,\n        userId: user._id,\n        permissions: { canInviteCustomers: false },\n      });\n\n      return inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          status: 400,\n          message:\n            'Vous ne pouvez pas inviter des clients à cette promotion [NOT_AUTHORIZED]',\n        },\n      });\n    });\n\n    it('promotion is not open', () => {\n      PromotionService.addProUser({ promotionId, userId: user._id });\n      PromotionService.setUserPermissions({\n        promotionId,\n        userId: user._id,\n        permissions: { canInviteCustomers: true },\n      });\n\n      return inviteUser({\n        userData: userToInvite,\n        status: HTTP_STATUS_CODES.FORBIDDEN,\n        expectedResponse: {\n          status: 400,\n          message:\n            'Vous ne pouvez pas inviter des clients à cette promotion [NOT_AUTHORIZED]',\n        },\n      });\n    });\n\n    it('fails if the body is incorrect', () => {\n      PromotionService.addProUser({ promotionId, userId: user._id });\n      setupPromotion();\n\n      promotionId = undefined;\n\n      return inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          status: 400,\n          message: '[No promotionId provided]',\n        },\n      });\n    });\n\n    it('user is already invited to promotion', () => {\n      PromotionService.addProUser({ promotionId, userId: user._id });\n      setupPromotion();\n\n      return inviteUser({\n        userData: userToInvite,\n        expectedResponse: {\n          message: `Successfully invited user \"${\n            userToInvite.email\n          }\" to promotion id \"${promotionId}\"`,\n        },\n      }).then(() =>\n        inviteUser({\n          userData: userToInvite,\n          expectedResponse: {\n            status: HTTP_STATUS_CODES.CONFLICT,\n            message: 'Cet utilisateur est déjà invité à cette promotion [409]',\n          },\n        }));\n    });\n  });\n});\n"]},"sourceType":"script","hash":"cf41c7b74c5ffe2c4d67bafaea4c4c046de38799"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/factories/factoriesHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/api/factories/factoriesHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/factories/factoriesHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/factories/factoriesHelpers.js"],"names":["Factory","Mongo","pick","omit","uniq","uniqBy","CollectionService","COLLECTIONS","NOTIFICATIONS_COLLECTION","ACTIVITIES_COLLECTION","getSingularFactoryName","collection","LOANS_COLLECTION","BORROWERS_COLLECTION","PROPERTIES_COLLECTION","USERS_COLLECTION","TASKS_COLLECTION","OFFERS_COLLECTION","PROMOTIONS_COLLECTION","PROMOTION_OPTIONS_COLLECTION","PROMOTION_LOTS_COLLECTION","LOTS_COLLECTION","MORTGAGE_NOTES_COLLECTION","ORGANISATIONS_COLLECTION","LENDERS_COLLECTION","CONTACTS_COLLECTION","Error","arrayify","maybeArray","Array","isArray","findCollectionNameByLinkName","linkName","Collection","get","__links","linkConfig","_name","findLinkKeys","linkNames","links","Object","keys","insertDoc","doc","useFactories","factory","docExists","_id","findOne","create","error","message","insert","generator","scenario","ids","docs","docsById","pushId","id","pushDoc","createNestedObject","linkKeys","docToInsert","insertedDoc","_factory","linksToInsert","forEach","linkCollection","linkedDocs","linkedDoc","linkId","parentId","collectionService","addLink","metadata","$metadata","docsInCollection"],"mappings":"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","sourcesContent":["import { Factory } from 'meteor/dburles:factory';\nimport { Mongo } from 'meteor/mongo';\nimport pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\n\nimport CollectionService from '../helpers/CollectionService';\nimport { COLLECTIONS } from '../constants';\nimport { NOTIFICATIONS_COLLECTION } from '../notifications/notificationConstants';\nimport { ACTIVITIES_COLLECTION } from '../activities/activityConstants';\n\nconst getSingularFactoryName = (collection) => {\n  switch (collection) {\n  case COLLECTIONS.LOANS_COLLECTION:\n    return 'loan';\n  case COLLECTIONS.BORROWERS_COLLECTION:\n    return 'borrower';\n  case COLLECTIONS.PROPERTIES_COLLECTION:\n    return 'property';\n  case COLLECTIONS.USERS_COLLECTION:\n    return 'user';\n  case COLLECTIONS.TASKS_COLLECTION:\n    return 'task';\n  case COLLECTIONS.OFFERS_COLLECTION:\n    return 'offer';\n  case COLLECTIONS.PROMOTIONS_COLLECTION:\n    return 'promotion';\n  case COLLECTIONS.PROMOTION_OPTIONS_COLLECTION:\n    return 'promotionOption';\n  case COLLECTIONS.PROMOTION_LOTS_COLLECTION:\n    return 'promotionLot';\n  case COLLECTIONS.LOTS_COLLECTION:\n    return 'lot';\n  case COLLECTIONS.MORTGAGE_NOTES_COLLECTION:\n    return 'mortgageNote';\n  case COLLECTIONS.ORGANISATIONS_COLLECTION:\n    return 'organisation';\n  case COLLECTIONS.LENDERS_COLLECTION:\n    return 'lender';\n  case COLLECTIONS.CONTACTS_COLLECTION:\n    return 'contact';\n  case NOTIFICATIONS_COLLECTION:\n    return 'notification';\n  case ACTIVITIES_COLLECTION:\n    return 'activity';\n  default:\n    throw new Error(`No singular factory name found for ${collection}, add it in the generator`);\n  }\n};\n\nconst arrayify = maybeArray =>\n  (Array.isArray(maybeArray) ? maybeArray : [maybeArray]);\n\nconst findCollectionNameByLinkName = ({ collection, linkName }) =>\n  Mongo.Collection.get(collection).__links[linkName].linkConfig.collection\n    ._name;\n\nconst findLinkKeys = ({ collection }) => {\n  const { __links: linkNames = {} } = Mongo.Collection.get(collection);\n  const links = Object.keys(linkNames);\n  return links;\n};\n\nconst insertDoc = ({ doc, collection, useFactories, factory }) => {\n  let docExists = false;\n\n  if (doc._id) {\n    docExists = !!Mongo.Collection.get(collection).findOne(doc._id);\n  }\n\n  if (docExists) {\n    return doc;\n  }\n\n  if (useFactories && factory !== null) {\n    if (factory) {\n      return Factory.create(factory, doc);\n    }\n\n    try {\n      return Factory.create(collection, doc);\n    } catch (error) {\n      if (\n        error.message\n        && error.message === `Factory: There is no factory named ${collection}`\n      ) {\n        return Factory.create(getSingularFactoryName(collection), doc);\n      }\n      throw error;\n    }\n  }\n\n  const _id = Mongo.Collection.get(collection).insert(doc);\n  return Mongo.Collection.get(collection).findOne(_id);\n};\n\nconst generator = (scenario, { useFactories = true } = {}) => {\n  const ids = {};\n  const docs = {};\n  const docsById = {};\n\n  const pushId = ({ id, collection }) => {\n    ids[collection] = ids[collection] ? [...ids[collection], id] : [id];\n    ids[collection] = uniq(ids[collection]);\n  };\n\n  const pushDoc = ({ doc, collection }) => {\n    docs[collection] = docs[collection] ? [...docs[collection], doc] : [doc];\n    docs[collection] = uniqBy(docs[collection], '_id');\n\n    docsById[collection] = docsById[collection]\n      ? { ...docsById[collection], [doc._id]: doc }\n      : { [doc._id]: doc };\n  };\n\n  const createNestedObject = ({ doc, collection }) => {\n    const linkKeys = findLinkKeys({ doc, collection });\n\n    const docToInsert = omit(doc, [...linkKeys, '_factory', '$metadata']);\n\n    const insertedDoc = insertDoc({\n      collection,\n      doc: docToInsert,\n      useFactories,\n      factory: doc._factory,\n    });\n    const { _id: id } = insertedDoc;\n    pushId({ id, collection });\n    pushDoc({ doc: insertedDoc, collection });\n\n    const linksToInsert = pick(doc, linkKeys);\n\n    Object.keys(linksToInsert).forEach((linkName) => {\n      const linkCollection = findCollectionNameByLinkName({\n        collection,\n        linkName,\n      });\n      const linkedDocs = arrayify(linksToInsert[linkName]);\n      linkedDocs.forEach((linkedDoc) => {\n        const linkId = createNestedObject({\n          doc: linkedDoc,\n          collection: linkCollection,\n          parentId: id,\n        });\n        const collectionService = new CollectionService(Mongo.Collection.get(collection));\n        collectionService.addLink({\n          id,\n          linkName,\n          linkId,\n          metadata: linkedDoc.$metadata,\n        });\n      });\n    });\n\n    return id;\n  };\n\n  Object.keys(scenario).forEach((collection) => {\n    const docsInCollection = arrayify(scenario[collection]);\n    docsInCollection.forEach(doc => createNestedObject({ doc, collection }));\n  });\n\n  return { ids, docs, docsById };\n};\n\nexport default generator;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/factories/factoriesHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/factories/factoriesHelpers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread3 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory: function (v) {\n    Factory = v;\n  }\n}, 0);\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 1);\nvar pick;\nmodule.link(\"lodash/pick\", {\n  \"default\": function (v) {\n    pick = v;\n  }\n}, 2);\nvar omit;\nmodule.link(\"lodash/omit\", {\n  \"default\": function (v) {\n    omit = v;\n  }\n}, 3);\nvar uniq;\nmodule.link(\"lodash/uniq\", {\n  \"default\": function (v) {\n    uniq = v;\n  }\n}, 4);\nvar uniqBy;\nmodule.link(\"lodash/uniqBy\", {\n  \"default\": function (v) {\n    uniqBy = v;\n  }\n}, 5);\nvar CollectionService;\nmodule.link(\"../helpers/CollectionService\", {\n  \"default\": function (v) {\n    CollectionService = v;\n  }\n}, 6);\nvar COLLECTIONS;\nmodule.link(\"../constants\", {\n  COLLECTIONS: function (v) {\n    COLLECTIONS = v;\n  }\n}, 7);\nvar NOTIFICATIONS_COLLECTION;\nmodule.link(\"../notifications/notificationConstants\", {\n  NOTIFICATIONS_COLLECTION: function (v) {\n    NOTIFICATIONS_COLLECTION = v;\n  }\n}, 8);\nvar ACTIVITIES_COLLECTION;\nmodule.link(\"../activities/activityConstants\", {\n  ACTIVITIES_COLLECTION: function (v) {\n    ACTIVITIES_COLLECTION = v;\n  }\n}, 9);\n\nvar getSingularFactoryName = function (collection) {\n  switch (collection) {\n    case COLLECTIONS.LOANS_COLLECTION:\n      return 'loan';\n\n    case COLLECTIONS.BORROWERS_COLLECTION:\n      return 'borrower';\n\n    case COLLECTIONS.PROPERTIES_COLLECTION:\n      return 'property';\n\n    case COLLECTIONS.USERS_COLLECTION:\n      return 'user';\n\n    case COLLECTIONS.TASKS_COLLECTION:\n      return 'task';\n\n    case COLLECTIONS.OFFERS_COLLECTION:\n      return 'offer';\n\n    case COLLECTIONS.PROMOTIONS_COLLECTION:\n      return 'promotion';\n\n    case COLLECTIONS.PROMOTION_OPTIONS_COLLECTION:\n      return 'promotionOption';\n\n    case COLLECTIONS.PROMOTION_LOTS_COLLECTION:\n      return 'promotionLot';\n\n    case COLLECTIONS.LOTS_COLLECTION:\n      return 'lot';\n\n    case COLLECTIONS.MORTGAGE_NOTES_COLLECTION:\n      return 'mortgageNote';\n\n    case COLLECTIONS.ORGANISATIONS_COLLECTION:\n      return 'organisation';\n\n    case COLLECTIONS.LENDERS_COLLECTION:\n      return 'lender';\n\n    case COLLECTIONS.CONTACTS_COLLECTION:\n      return 'contact';\n\n    case NOTIFICATIONS_COLLECTION:\n      return 'notification';\n\n    case ACTIVITIES_COLLECTION:\n      return 'activity';\n\n    default:\n      throw new Error(\"No singular factory name found for \" + collection + \", add it in the generator\");\n  }\n};\n\nvar arrayify = function (maybeArray) {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n};\n\nvar findCollectionNameByLinkName = function (_ref) {\n  var collection = _ref.collection,\n      linkName = _ref.linkName;\n  return Mongo.Collection.get(collection).__links[linkName].linkConfig.collection._name;\n};\n\nvar findLinkKeys = function (_ref2) {\n  var collection = _ref2.collection;\n\n  var _Mongo$Collection$get = Mongo.Collection.get(collection),\n      _Mongo$Collection$get2 = _Mongo$Collection$get.__links,\n      linkNames = _Mongo$Collection$get2 === void 0 ? {} : _Mongo$Collection$get2;\n\n  var links = Object.keys(linkNames);\n  return links;\n};\n\nvar insertDoc = function (_ref3) {\n  var doc = _ref3.doc,\n      collection = _ref3.collection,\n      useFactories = _ref3.useFactories,\n      factory = _ref3.factory;\n  var docExists = false;\n\n  if (doc._id) {\n    docExists = !!Mongo.Collection.get(collection).findOne(doc._id);\n  }\n\n  if (docExists) {\n    return doc;\n  }\n\n  if (useFactories && factory !== null) {\n    if (factory) {\n      return Factory.create(factory, doc);\n    }\n\n    try {\n      return Factory.create(collection, doc);\n    } catch (error) {\n      if (error.message && error.message === \"Factory: There is no factory named \" + collection) {\n        return Factory.create(getSingularFactoryName(collection), doc);\n      }\n\n      throw error;\n    }\n  }\n\n  var _id = Mongo.Collection.get(collection).insert(doc);\n\n  return Mongo.Collection.get(collection).findOne(_id);\n};\n\nvar generator = function (scenario) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$useFactories = _ref4.useFactories,\n      useFactories = _ref4$useFactories === void 0 ? true : _ref4$useFactories;\n\n  var ids = {};\n  var docs = {};\n  var docsById = {};\n\n  var pushId = function (_ref5) {\n    var id = _ref5.id,\n        collection = _ref5.collection;\n    ids[collection] = ids[collection] ? [].concat((0, _toConsumableArray2.default)(ids[collection]), [id]) : [id];\n    ids[collection] = uniq(ids[collection]);\n  };\n\n  var pushDoc = function (_ref6) {\n    var _objectSpread2, _ref7;\n\n    var doc = _ref6.doc,\n        collection = _ref6.collection;\n    docs[collection] = docs[collection] ? [].concat((0, _toConsumableArray2.default)(docs[collection]), [doc]) : [doc];\n    docs[collection] = uniqBy(docs[collection], '_id');\n    docsById[collection] = docsById[collection] ? (0, _objectSpread3.default)({}, docsById[collection], (_objectSpread2 = {}, _objectSpread2[doc._id] = doc, _objectSpread2)) : (_ref7 = {}, _ref7[doc._id] = doc, _ref7);\n  };\n\n  var createNestedObject = function (_ref8) {\n    var doc = _ref8.doc,\n        collection = _ref8.collection;\n    var linkKeys = findLinkKeys({\n      doc: doc,\n      collection: collection\n    });\n    var docToInsert = omit(doc, [].concat((0, _toConsumableArray2.default)(linkKeys), ['_factory', '$metadata']));\n    var insertedDoc = insertDoc({\n      collection: collection,\n      doc: docToInsert,\n      useFactories: useFactories,\n      factory: doc._factory\n    });\n    var id = insertedDoc._id;\n    pushId({\n      id: id,\n      collection: collection\n    });\n    pushDoc({\n      doc: insertedDoc,\n      collection: collection\n    });\n    var linksToInsert = pick(doc, linkKeys);\n    Object.keys(linksToInsert).forEach(function (linkName) {\n      var linkCollection = findCollectionNameByLinkName({\n        collection: collection,\n        linkName: linkName\n      });\n      var linkedDocs = arrayify(linksToInsert[linkName]);\n      linkedDocs.forEach(function (linkedDoc) {\n        var linkId = createNestedObject({\n          doc: linkedDoc,\n          collection: linkCollection,\n          parentId: id\n        });\n        var collectionService = new CollectionService(Mongo.Collection.get(collection));\n        collectionService.addLink({\n          id: id,\n          linkName: linkName,\n          linkId: linkId,\n          metadata: linkedDoc.$metadata\n        });\n      });\n    });\n    return id;\n  };\n\n  Object.keys(scenario).forEach(function (collection) {\n    var docsInCollection = arrayify(scenario[collection]);\n    docsInCollection.forEach(function (doc) {\n      return createNestedObject({\n        doc: doc,\n        collection: collection\n      });\n    });\n  });\n  return {\n    ids: ids,\n    docs: docs,\n    docsById: docsById\n  };\n};\n\nmodule.exportDefault(generator);","map":{"version":3,"sources":["imports/core/api/factories/factoriesHelpers.js"],"names":["getSingularFactoryName","collection","COLLECTIONS","arrayify","maybeArray","Array","findCollectionNameByLinkName","linkName","Mongo","findLinkKeys","__links","linkNames","links","Object","insertDoc","factory","docExists","doc","useFactories","Factory","error","_id","generator","ids","docs","docsById","pushId","uniq","pushDoc","uniqBy","createNestedObject","linkKeys","docToInsert","omit","insertedDoc","_factory","id","linksToInsert","pick","linkCollection","linkedDocs","linkedDoc","linkId","parentId","collectionService","metadata","$metadata","docsInCollection","scenario"],"mappings":"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","sourcesContent":["import { Factory } from 'meteor/dburles:factory';\nimport { Mongo } from 'meteor/mongo';\nimport pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\n\nimport CollectionService from '../helpers/CollectionService';\nimport { COLLECTIONS } from '../constants';\nimport { NOTIFICATIONS_COLLECTION } from '../notifications/notificationConstants';\nimport { ACTIVITIES_COLLECTION } from '../activities/activityConstants';\n\nconst getSingularFactoryName = (collection) => {\n  switch (collection) {\n  case COLLECTIONS.LOANS_COLLECTION:\n    return 'loan';\n  case COLLECTIONS.BORROWERS_COLLECTION:\n    return 'borrower';\n  case COLLECTIONS.PROPERTIES_COLLECTION:\n    return 'property';\n  case COLLECTIONS.USERS_COLLECTION:\n    return 'user';\n  case COLLECTIONS.TASKS_COLLECTION:\n    return 'task';\n  case COLLECTIONS.OFFERS_COLLECTION:\n    return 'offer';\n  case COLLECTIONS.PROMOTIONS_COLLECTION:\n    return 'promotion';\n  case COLLECTIONS.PROMOTION_OPTIONS_COLLECTION:\n    return 'promotionOption';\n  case COLLECTIONS.PROMOTION_LOTS_COLLECTION:\n    return 'promotionLot';\n  case COLLECTIONS.LOTS_COLLECTION:\n    return 'lot';\n  case COLLECTIONS.MORTGAGE_NOTES_COLLECTION:\n    return 'mortgageNote';\n  case COLLECTIONS.ORGANISATIONS_COLLECTION:\n    return 'organisation';\n  case COLLECTIONS.LENDERS_COLLECTION:\n    return 'lender';\n  case COLLECTIONS.CONTACTS_COLLECTION:\n    return 'contact';\n  case NOTIFICATIONS_COLLECTION:\n    return 'notification';\n  case ACTIVITIES_COLLECTION:\n    return 'activity';\n  default:\n    throw new Error(`No singular factory name found for ${collection}, add it in the generator`);\n  }\n};\n\nconst arrayify = maybeArray =>\n  (Array.isArray(maybeArray) ? maybeArray : [maybeArray]);\n\nconst findCollectionNameByLinkName = ({ collection, linkName }) =>\n  Mongo.Collection.get(collection).__links[linkName].linkConfig.collection\n    ._name;\n\nconst findLinkKeys = ({ collection }) => {\n  const { __links: linkNames = {} } = Mongo.Collection.get(collection);\n  const links = Object.keys(linkNames);\n  return links;\n};\n\nconst insertDoc = ({ doc, collection, useFactories, factory }) => {\n  let docExists = false;\n\n  if (doc._id) {\n    docExists = !!Mongo.Collection.get(collection).findOne(doc._id);\n  }\n\n  if (docExists) {\n    return doc;\n  }\n\n  if (useFactories && factory !== null) {\n    if (factory) {\n      return Factory.create(factory, doc);\n    }\n\n    try {\n      return Factory.create(collection, doc);\n    } catch (error) {\n      if (\n        error.message\n        && error.message === `Factory: There is no factory named ${collection}`\n      ) {\n        return Factory.create(getSingularFactoryName(collection), doc);\n      }\n      throw error;\n    }\n  }\n\n  const _id = Mongo.Collection.get(collection).insert(doc);\n  return Mongo.Collection.get(collection).findOne(_id);\n};\n\nconst generator = (scenario, { useFactories = true } = {}) => {\n  const ids = {};\n  const docs = {};\n  const docsById = {};\n\n  const pushId = ({ id, collection }) => {\n    ids[collection] = ids[collection] ? [...ids[collection], id] : [id];\n    ids[collection] = uniq(ids[collection]);\n  };\n\n  const pushDoc = ({ doc, collection }) => {\n    docs[collection] = docs[collection] ? [...docs[collection], doc] : [doc];\n    docs[collection] = uniqBy(docs[collection], '_id');\n\n    docsById[collection] = docsById[collection]\n      ? { ...docsById[collection], [doc._id]: doc }\n      : { [doc._id]: doc };\n  };\n\n  const createNestedObject = ({ doc, collection }) => {\n    const linkKeys = findLinkKeys({ doc, collection });\n\n    const docToInsert = omit(doc, [...linkKeys, '_factory', '$metadata']);\n\n    const insertedDoc = insertDoc({\n      collection,\n      doc: docToInsert,\n      useFactories,\n      factory: doc._factory,\n    });\n    const { _id: id } = insertedDoc;\n    pushId({ id, collection });\n    pushDoc({ doc: insertedDoc, collection });\n\n    const linksToInsert = pick(doc, linkKeys);\n\n    Object.keys(linksToInsert).forEach((linkName) => {\n      const linkCollection = findCollectionNameByLinkName({\n        collection,\n        linkName,\n      });\n      const linkedDocs = arrayify(linksToInsert[linkName]);\n      linkedDocs.forEach((linkedDoc) => {\n        const linkId = createNestedObject({\n          doc: linkedDoc,\n          collection: linkCollection,\n          parentId: id,\n        });\n        const collectionService = new CollectionService(Mongo.Collection.get(collection));\n        collectionService.addLink({\n          id,\n          linkName,\n          linkId,\n          metadata: linkedDoc.$metadata,\n        });\n      });\n    });\n\n    return id;\n  };\n\n  Object.keys(scenario).forEach((collection) => {\n    const docsInCollection = arrayify(scenario[collection]);\n    docsInCollection.forEach(doc => createNestedObject({ doc, collection }));\n  });\n\n  return { ids, docs, docsById };\n};\n\nexport default generator;\n"]},"sourceType":"script","hash":"c700cddf72ada895161addb0d3203d5801daf9be"}

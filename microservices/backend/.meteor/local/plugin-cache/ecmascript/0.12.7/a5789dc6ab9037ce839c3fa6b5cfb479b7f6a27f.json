{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/PropertyCalculator.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/Calculator/test/PropertyCalculator.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/PropertyCalculator.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/Calculator/test/PropertyCalculator.spec.js"],"names":["expect","Calculator","PROPERTY_DOCUMENTS","DOCUMENTS","STEPS","initialDocuments","describe","params","property","beforeEach","_id","additionalDocuments","loan","structure","borrowers","properties","step","SOLVENCY","it","propertyPercent","to","deep","equal","value","propertyType","address1","city","zipCode","canton","constructionYear","numberOfFloors","roomCount","minergie","copropertyPercentage","isCoproperty","residenceType","propertyWork","getPropAndWork","getPropertyFilesProgress","percent","count","documents","PROPERTY_PLANS","getMissingPropertyFields","getMissingPropertyDocuments","map","id","PROPERTY_PICTURES","filter","includes","hasDetailedPropertyValue","landValue","additionalMargin","constructionValue","promotionOption","promotionLots","structures","promotionOptionId","promotionOptions","structureId"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator from '..';\nimport { PROPERTY_DOCUMENTS, DOCUMENTS, STEPS } from '../../../api/constants';\nimport { initialDocuments } from '../../../api/properties/propertiesAdditionalDocuments';\n\ndescribe('PropertyCalculator', () => {\n  let params;\n  let property;\n\n  beforeEach(() => {\n    property = { _id: 'propertyId', additionalDocuments: initialDocuments };\n    params = {\n      loan: {\n        structure: { property },\n        borrowers: [{}],\n        properties: [property],\n        step: STEPS.SOLVENCY,\n      },\n    };\n  });\n\n  describe('propertyPercent', () => {\n    it('returns 0 for a new property', () => {\n      expect(Calculator.propertyPercent(params)).to.deep.equal(0);\n    });\n\n    it('returns 1 for a complete property', () => {\n      params.loan.structure.property = {\n        value: 1,\n        propertyType: '',\n        address1: 'yo',\n        city: 'GenÃ¨ve',\n        zipCode: 1000,\n        canton: 'GE',\n        constructionYear: 2000,\n        numberOfFloors: 3,\n        roomCount: 2,\n        minergie: '',\n        copropertyPercentage: 100,\n        isCoproperty: false,\n      };\n      params.loan.residenceType = ' ';\n      expect(Calculator.propertyPercent(params)).to.deep.equal(1);\n    });\n  });\n\n  describe('getPropAndWork', () => {\n    it('sums propertyWork and property value', () => {\n      params.loan.structure.property.value = 1;\n      params.loan.structure.propertyWork = 2;\n      expect(Calculator.getPropAndWork(params)).to.deep.equal(3);\n    });\n  });\n\n  describe('getPropertyFilesProgress', () => {\n    it('returns 0 if no documents are provided', () => {\n      property = {};\n      expect(Calculator.getPropertyFilesProgress(params)).to.deep.equal({\n        percent: 0,\n        count: 1,\n      });\n    });\n\n    it('returns 1/6 if one document is provided', () => {\n      params.loan.structure.property = {\n        documents: { [PROPERTY_DOCUMENTS.PROPERTY_PLANS]: [{}] },\n        _id: 'propertyId',\n      };\n      expect(Calculator.getPropertyFilesProgress(params)).to.deep.equal({\n        percent: 1 / 6,\n        count: 6,\n      });\n    });\n  });\n\n  describe('getMissingPropertyFields', () => {\n    it('returns the list of missing data from a property', () => {\n      expect(Calculator.getMissingPropertyFields(params)).to.deep.equal([\n        'value',\n        'propertyType',\n        'isCoproperty',\n        'copropertyPercentage',\n        'address1',\n        'zipCode',\n        'city',\n        'canton',\n        'numberOfFloors',\n        'constructionYear',\n        'roomCount',\n        'minergie',\n        'residenceType',\n      ]);\n    });\n  });\n\n  describe('getMissingPropertyDocuments', () => {\n    it('returns the list of missing documents from a property 1', () => {\n      expect(Calculator.getMissingPropertyDocuments(params)).to.deep.equal(initialDocuments.map(({ id }) => id));\n    });\n\n    it('returns the list of missing documents from a property 2', () => {\n      params.loan.structure.property.documents = {\n        [DOCUMENTS.PROPERTY_PLANS]: [{}],\n        [DOCUMENTS.PROPERTY_PICTURES]: [{}],\n      };\n      expect(Calculator.getMissingPropertyDocuments(params)).to.deep.equal(initialDocuments\n        .map(({ id }) => id)\n        .filter(id =>\n          ![DOCUMENTS.PROPERTY_PLANS, DOCUMENTS.PROPERTY_PICTURES].includes(id)));\n    });\n  });\n\n  describe('hasDetailedPropertyValue', () => {\n    it('returns false for a simple property', () => {\n      params = {\n        loan: { structure: { property: { value: 100 } } },\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(false);\n    });\n\n    it('returns true for a detailed property', () => {\n      params = {\n        loan: {\n          structure: {\n            property: {\n              landValue: 100,\n              additionalMargin: 100,\n              constructionValue: 200,\n            },\n          },\n        },\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n\n    it('returns true if both are provided', () => {\n      params = {\n        loan: {\n          structure: {\n            property: {\n              value: 5,\n              landValue: 100,\n              additionalMargin: 100,\n              constructionValue: 200,\n            },\n          },\n        },\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n\n    it('works for promotionOption structures', () => {\n      params = {\n        loan: {\n          structure: {\n            promotionOption: {\n              value: 50,\n              promotionLots: [\n                {\n                  properties: [\n                    {\n                      landValue: 100,\n                      additionalMargin: 100,\n                      constructionValue: 200,\n                    },\n                  ],\n                },\n              ],\n            },\n          },\n        },\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n\n    it('works for specific promotionOption structures', () => {\n      params = {\n        loan: {\n          structures: [{ id: 'yo', promotionOptionId: 'option1' }],\n          promotionOptions: [\n            {\n              value: 500,\n              _id: 'option1',\n              promotionLots: [\n                {\n                  properties: [\n                    {\n                      landValue: 100,\n                      additionalMargin: 100,\n                      constructionValue: 200,\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n        structureId: 'yo',\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/PropertyCalculator.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/Calculator/test/PropertyCalculator.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet Calculator;\nmodule.link(\"..\", {\n  default(v) {\n    Calculator = v;\n  }\n\n}, 1);\nlet PROPERTY_DOCUMENTS, DOCUMENTS, STEPS;\nmodule.link(\"../../../api/constants\", {\n  PROPERTY_DOCUMENTS(v) {\n    PROPERTY_DOCUMENTS = v;\n  },\n\n  DOCUMENTS(v) {\n    DOCUMENTS = v;\n  },\n\n  STEPS(v) {\n    STEPS = v;\n  }\n\n}, 2);\nlet initialDocuments;\nmodule.link(\"../../../api/properties/propertiesAdditionalDocuments\", {\n  initialDocuments(v) {\n    initialDocuments = v;\n  }\n\n}, 3);\ndescribe('PropertyCalculator', () => {\n  let params;\n  let property;\n  beforeEach(() => {\n    property = {\n      _id: 'propertyId',\n      additionalDocuments: initialDocuments\n    };\n    params = {\n      loan: {\n        structure: {\n          property\n        },\n        borrowers: [{}],\n        properties: [property],\n        step: STEPS.SOLVENCY\n      }\n    };\n  });\n  describe('propertyPercent', () => {\n    it('returns 0 for a new property', () => {\n      expect(Calculator.propertyPercent(params)).to.deep.equal(0);\n    });\n    it('returns 1 for a complete property', () => {\n      params.loan.structure.property = {\n        value: 1,\n        propertyType: '',\n        address1: 'yo',\n        city: 'GenÃ¨ve',\n        zipCode: 1000,\n        canton: 'GE',\n        constructionYear: 2000,\n        numberOfFloors: 3,\n        roomCount: 2,\n        minergie: '',\n        copropertyPercentage: 100,\n        isCoproperty: false\n      };\n      params.loan.residenceType = ' ';\n      expect(Calculator.propertyPercent(params)).to.deep.equal(1);\n    });\n  });\n  describe('getPropAndWork', () => {\n    it('sums propertyWork and property value', () => {\n      params.loan.structure.property.value = 1;\n      params.loan.structure.propertyWork = 2;\n      expect(Calculator.getPropAndWork(params)).to.deep.equal(3);\n    });\n  });\n  describe('getPropertyFilesProgress', () => {\n    it('returns 0 if no documents are provided', () => {\n      property = {};\n      expect(Calculator.getPropertyFilesProgress(params)).to.deep.equal({\n        percent: 0,\n        count: 1\n      });\n    });\n    it('returns 1/6 if one document is provided', () => {\n      params.loan.structure.property = {\n        documents: {\n          [PROPERTY_DOCUMENTS.PROPERTY_PLANS]: [{}]\n        },\n        _id: 'propertyId'\n      };\n      expect(Calculator.getPropertyFilesProgress(params)).to.deep.equal({\n        percent: 1 / 6,\n        count: 6\n      });\n    });\n  });\n  describe('getMissingPropertyFields', () => {\n    it('returns the list of missing data from a property', () => {\n      expect(Calculator.getMissingPropertyFields(params)).to.deep.equal(['value', 'propertyType', 'isCoproperty', 'copropertyPercentage', 'address1', 'zipCode', 'city', 'canton', 'numberOfFloors', 'constructionYear', 'roomCount', 'minergie', 'residenceType']);\n    });\n  });\n  describe('getMissingPropertyDocuments', () => {\n    it('returns the list of missing documents from a property 1', () => {\n      expect(Calculator.getMissingPropertyDocuments(params)).to.deep.equal(initialDocuments.map((_ref) => {\n        let {\n          id\n        } = _ref;\n        return id;\n      }));\n    });\n    it('returns the list of missing documents from a property 2', () => {\n      params.loan.structure.property.documents = {\n        [DOCUMENTS.PROPERTY_PLANS]: [{}],\n        [DOCUMENTS.PROPERTY_PICTURES]: [{}]\n      };\n      expect(Calculator.getMissingPropertyDocuments(params)).to.deep.equal(initialDocuments.map((_ref2) => {\n        let {\n          id\n        } = _ref2;\n        return id;\n      }).filter(id => ![DOCUMENTS.PROPERTY_PLANS, DOCUMENTS.PROPERTY_PICTURES].includes(id)));\n    });\n  });\n  describe('hasDetailedPropertyValue', () => {\n    it('returns false for a simple property', () => {\n      params = {\n        loan: {\n          structure: {\n            property: {\n              value: 100\n            }\n          }\n        }\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(false);\n    });\n    it('returns true for a detailed property', () => {\n      params = {\n        loan: {\n          structure: {\n            property: {\n              landValue: 100,\n              additionalMargin: 100,\n              constructionValue: 200\n            }\n          }\n        }\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n    it('returns true if both are provided', () => {\n      params = {\n        loan: {\n          structure: {\n            property: {\n              value: 5,\n              landValue: 100,\n              additionalMargin: 100,\n              constructionValue: 200\n            }\n          }\n        }\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n    it('works for promotionOption structures', () => {\n      params = {\n        loan: {\n          structure: {\n            promotionOption: {\n              value: 50,\n              promotionLots: [{\n                properties: [{\n                  landValue: 100,\n                  additionalMargin: 100,\n                  constructionValue: 200\n                }]\n              }]\n            }\n          }\n        }\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n    it('works for specific promotionOption structures', () => {\n      params = {\n        loan: {\n          structures: [{\n            id: 'yo',\n            promotionOptionId: 'option1'\n          }],\n          promotionOptions: [{\n            value: 500,\n            _id: 'option1',\n            promotionLots: [{\n              properties: [{\n                landValue: 100,\n                additionalMargin: 100,\n                constructionValue: 200\n              }]\n            }]\n          }]\n        },\n        structureId: 'yo'\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/Calculator/test/PropertyCalculator.spec.js"],"names":["describe","beforeEach","property","_id","additionalDocuments","initialDocuments","params","loan","structure","borrowers","properties","step","STEPS","SOLVENCY","it","expect","Calculator","value","propertyType","address1","city","zipCode","canton","constructionYear","numberOfFloors","roomCount","minergie","copropertyPercentage","isCoproperty","percent","count","documents","PROPERTY_DOCUMENTS","id","DOCUMENTS","landValue","additionalMargin","constructionValue","promotionOption","promotionLots","structures","promotionOptionId","promotionOptions","structureId"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator from '..';\nimport { PROPERTY_DOCUMENTS, DOCUMENTS, STEPS } from '../../../api/constants';\nimport { initialDocuments } from '../../../api/properties/propertiesAdditionalDocuments';\n\ndescribe('PropertyCalculator', () => {\n  let params;\n  let property;\n\n  beforeEach(() => {\n    property = { _id: 'propertyId', additionalDocuments: initialDocuments };\n    params = {\n      loan: {\n        structure: { property },\n        borrowers: [{}],\n        properties: [property],\n        step: STEPS.SOLVENCY,\n      },\n    };\n  });\n\n  describe('propertyPercent', () => {\n    it('returns 0 for a new property', () => {\n      expect(Calculator.propertyPercent(params)).to.deep.equal(0);\n    });\n\n    it('returns 1 for a complete property', () => {\n      params.loan.structure.property = {\n        value: 1,\n        propertyType: '',\n        address1: 'yo',\n        city: 'GenÃ¨ve',\n        zipCode: 1000,\n        canton: 'GE',\n        constructionYear: 2000,\n        numberOfFloors: 3,\n        roomCount: 2,\n        minergie: '',\n        copropertyPercentage: 100,\n        isCoproperty: false,\n      };\n      params.loan.residenceType = ' ';\n      expect(Calculator.propertyPercent(params)).to.deep.equal(1);\n    });\n  });\n\n  describe('getPropAndWork', () => {\n    it('sums propertyWork and property value', () => {\n      params.loan.structure.property.value = 1;\n      params.loan.structure.propertyWork = 2;\n      expect(Calculator.getPropAndWork(params)).to.deep.equal(3);\n    });\n  });\n\n  describe('getPropertyFilesProgress', () => {\n    it('returns 0 if no documents are provided', () => {\n      property = {};\n      expect(Calculator.getPropertyFilesProgress(params)).to.deep.equal({\n        percent: 0,\n        count: 1,\n      });\n    });\n\n    it('returns 1/6 if one document is provided', () => {\n      params.loan.structure.property = {\n        documents: { [PROPERTY_DOCUMENTS.PROPERTY_PLANS]: [{}] },\n        _id: 'propertyId',\n      };\n      expect(Calculator.getPropertyFilesProgress(params)).to.deep.equal({\n        percent: 1 / 6,\n        count: 6,\n      });\n    });\n  });\n\n  describe('getMissingPropertyFields', () => {\n    it('returns the list of missing data from a property', () => {\n      expect(Calculator.getMissingPropertyFields(params)).to.deep.equal([\n        'value',\n        'propertyType',\n        'isCoproperty',\n        'copropertyPercentage',\n        'address1',\n        'zipCode',\n        'city',\n        'canton',\n        'numberOfFloors',\n        'constructionYear',\n        'roomCount',\n        'minergie',\n        'residenceType',\n      ]);\n    });\n  });\n\n  describe('getMissingPropertyDocuments', () => {\n    it('returns the list of missing documents from a property 1', () => {\n      expect(Calculator.getMissingPropertyDocuments(params)).to.deep.equal(initialDocuments.map(({ id }) => id));\n    });\n\n    it('returns the list of missing documents from a property 2', () => {\n      params.loan.structure.property.documents = {\n        [DOCUMENTS.PROPERTY_PLANS]: [{}],\n        [DOCUMENTS.PROPERTY_PICTURES]: [{}],\n      };\n      expect(Calculator.getMissingPropertyDocuments(params)).to.deep.equal(initialDocuments\n        .map(({ id }) => id)\n        .filter(id =>\n          ![DOCUMENTS.PROPERTY_PLANS, DOCUMENTS.PROPERTY_PICTURES].includes(id)));\n    });\n  });\n\n  describe('hasDetailedPropertyValue', () => {\n    it('returns false for a simple property', () => {\n      params = {\n        loan: { structure: { property: { value: 100 } } },\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(false);\n    });\n\n    it('returns true for a detailed property', () => {\n      params = {\n        loan: {\n          structure: {\n            property: {\n              landValue: 100,\n              additionalMargin: 100,\n              constructionValue: 200,\n            },\n          },\n        },\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n\n    it('returns true if both are provided', () => {\n      params = {\n        loan: {\n          structure: {\n            property: {\n              value: 5,\n              landValue: 100,\n              additionalMargin: 100,\n              constructionValue: 200,\n            },\n          },\n        },\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n\n    it('works for promotionOption structures', () => {\n      params = {\n        loan: {\n          structure: {\n            promotionOption: {\n              value: 50,\n              promotionLots: [\n                {\n                  properties: [\n                    {\n                      landValue: 100,\n                      additionalMargin: 100,\n                      constructionValue: 200,\n                    },\n                  ],\n                },\n              ],\n            },\n          },\n        },\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n\n    it('works for specific promotionOption structures', () => {\n      params = {\n        loan: {\n          structures: [{ id: 'yo', promotionOptionId: 'option1' }],\n          promotionOptions: [\n            {\n              value: 500,\n              _id: 'option1',\n              promotionLots: [\n                {\n                  properties: [\n                    {\n                      landValue: 100,\n                      additionalMargin: 100,\n                      constructionValue: 200,\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n        structureId: 'yo',\n      };\n      expect(Calculator.hasDetailedPropertyValue(params)).to.equal(true);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"a5789dc6ab9037ce839c3fa6b5cfb479b7f6a27f"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/BorrowerCalculator.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/utils/Calculator/test/BorrowerCalculator.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/BorrowerCalculator.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/Calculator/test/BorrowerCalculator.spec.js"],"names":["expect","Calculator","CalculatorClass","STEPS","GENDER","EXPENSES","DOCUMENTS","initialDocuments","BONUS_ALGORITHMS","REAL_ESTATE_INCOME_ALGORITHMS","describe","it","getArrayValues","to","equal","borrowers","array","value","key","yo","item","getBonusIncome","bonusExists","bonus2018","bonus2015","bonus2017","bonus2016","calc","bonusConsideration","bonusHistoryToConsider","bonus2019","bonusAlgorithm","AVERAGE","WEAK_AVERAGE","getBonuses","deep","getBorrowerCompletion","loan","documents","_id","additionalDocuments","firstName","lastName","logic","be","within","IDENTITY","getBorrowerFilesProgress","percent","count","getExpenses","expenses","getFortune","bankFortune","getInsuranceFortune","insurance2","insurance3A","insurance3B","bank3A","undefined","getMissingBorrowerDocuments","step","SOLVENCY","map","id","getMissingBorrowerFields","result","hasOwnCompany","ownCompanies","include","result2","not","getOtherFortune","otherFortune","getRealEstateFortune","realEstate","getRealEstateValue","getRealEstateDebt","getRealEstateIncome","income","realEstateIncomeConsideration","getSalary","salary","getTotalFunds","getTotalIncome","otherIncome","description","LEASING","fortuneReturnsRatio","expensesSubtractFromIncome","OTHER","personalInfoPercent","adminValidation","birthDate","childrenCount","citizenship","civilStatus","createdAt","gender","isSwiss","isUSPerson","residencyPermit","sameAddress","updatedAt","userId","netSalary","sumValues","a","keys","b","getRetirement","age","M","getFortuneReturns","getRealEstateExpenses","getGroupedExpenses","c","PENSIONS","getFormattedExpenses","add","subtract","getBorrowerFormHash","borrower1","company","borrower2","context","beforeEach","realEstateIncomeAlgorithm","POSITIVE_NEGATIVE_SPLIT","structures","lenderRules","filter","and","incomeConsiderationType","var","shouldUseNetSalary"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator, { Calculator as CalculatorClass } from '..';\nimport { STEPS, GENDER, EXPENSES } from 'core/api/constants';\nimport { DOCUMENTS } from '../../../api/constants';\nimport { initialDocuments } from '../../../api/borrowers/borrowersAdditionalDocuments';\nimport {\n  BONUS_ALGORITHMS,\n  REAL_ESTATE_INCOME_ALGORITHMS,\n} from '../../../config/financeConstants';\n\ndescribe('BorrowerCalculator', () => {\n  describe('getArrayValues', () => {\n    it(\"returns 0 if the key doesn't exist\", () => {\n      expect(Calculator.getArrayValues({}, 'key')).to.equal(0);\n    });\n\n    it(\"returns the sum of all value keys in an object's array\", () => {\n      expect(Calculator.getArrayValues({\n        borrowers: {\n          array: [{ value: 1 }, { value: 2 }],\n        },\n        key: 'array',\n      })).to.equal(3);\n    });\n\n    it('works with arrays', () => {\n      expect(Calculator.getArrayValues({\n        borrowers: [\n          { array: [{ value: 1 }, { value: 2 }] },\n          { array: [{ value: 3 }, { value: 4 }] },\n        ],\n        key: 'array',\n      })).to.equal(10);\n    });\n\n    it('works with a provided mapFunc', () => {\n      expect(Calculator.getArrayValues(\n        {\n          borrowers: [\n            { array: [{ yo: 1 }, { value: 2 }] },\n            { array: [{ value: 3 }, { yo: 4 }] },\n          ],\n          key: 'array',\n        },\n\n        item => item.yo,\n      )).to.equal(5);\n    });\n  });\n\n  describe('getBonusIncome', () => {\n    it('returns half of 1 bonus', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: { bonusExists: true, bonus2018: 100 },\n      })).to.equal(50);\n    });\n\n    it('returns half of average 2 bonuses', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: { bonusExists: true, bonus2018: 100, bonus2015: 0 },\n      })).to.equal(50);\n    });\n\n    it('returns half of average 3 bonuses', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2018: 100,\n          bonus2017: 0,\n          bonus2016: 200,\n        },\n      })).to.equal(75);\n    });\n\n    it('returns 0 if bonusExists is false', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: {\n          bonusExists: false,\n          bonus2015: 50,\n          bonus2016: 150,\n          bonus2017: 40,\n          bonus2018: 100,\n        },\n      })).to.equal(0);\n    });\n\n    it('considers bonuses differently based on bonusConsideration', () => {\n      const calc = new CalculatorClass({ bonusConsideration: 1 });\n\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2015: 40,\n          bonus2016: 150,\n          bonus2017: 50,\n          bonus2018: 100,\n        },\n      })).to.equal(100);\n    });\n\n    it('considers fewer bonuses with bonusHistoryToConsider', () => {\n      const calc = new CalculatorClass({\n        bonusConsideration: 1,\n        bonusHistoryToConsider: 1,\n      });\n\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2015: 50,\n          bonus2016: 150,\n          bonus2017: 40,\n          bonus2019: 200,\n        },\n      })).to.equal(200);\n    });\n\n    it('works with 2 borrowers', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: [\n          {\n            bonusExists: true,\n            bonus2018: 100,\n            bonus2017: 0,\n            bonus2016: 200,\n          },\n          {\n            bonusExists: false,\n            bonus2018: 100,\n            bonus2017: 0,\n            bonus2016: 200,\n          },\n        ],\n      })).to.equal(75);\n    });\n\n    it('uses the AVERAGE algorithm', () => {\n      const calc = new CalculatorClass({\n        bonusConsideration: 1,\n        bonusHistoryToConsider: 2,\n        bonusAlgorithm: BONUS_ALGORITHMS.AVERAGE,\n      });\n\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2019: 200,\n        },\n      })).to.equal(100);\n    });\n\n    it('uses the WEAK_AVERAGE algorithm', () => {\n      const calc = new CalculatorClass({\n        bonusConsideration: 1,\n        bonusHistoryToConsider: 3,\n        bonusAlgorithm: BONUS_ALGORITHMS.WEAK_AVERAGE,\n      });\n\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2019: 200,\n          bonus2018: 200,\n          bonus2017: 0,\n        },\n      })).to.equal(200);\n    });\n  });\n\n  describe('getBonuses', () => {\n    it('returns the sum of bonuses for a given year', () => {\n      expect(Calculator.getBonuses({\n        borrowers: [\n          {\n            bonusExists: 10,\n            bonus2018: null,\n            bonus2016: 200,\n          },\n          {\n            bonusExists: true,\n            bonus2017: 5,\n            bonus2016: 200,\n            bonus2019: 5,\n          },\n        ],\n      })).to.deep.equal({ bonus2016: 400, bonus2017: 5, bonus2019: 5 });\n    });\n\n    it('omits borrowers with bonusExists false', () => {\n      expect(Calculator.getBonuses({\n        borrowers: [\n          {\n            bonusExists: 10,\n            bonus2018: null,\n            bonus2016: 200,\n          },\n          {\n            bonusExists: false,\n            bonus2017: 5,\n            bonus2016: 200,\n            bonus2019: 5,\n          },\n        ],\n      })).to.deep.equal({ bonus2016: 200 });\n    });\n  });\n\n  describe('getBorrowerCompletion', () => {\n    it('should be 0% for a new borrower', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [\n            {\n              documents: {},\n              _id: 'docId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.equal(0);\n    });\n\n    it('should not be 0% when adding data', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [\n            {\n              firstName: 'joe',\n              lastName: 'johnson',\n              documents: {},\n              logic: {},\n              _id: 'docId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.be.within(0.01, 0.1);\n    });\n\n    it('should not be 0% when adding a document', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [\n            {\n              documents: { [DOCUMENTS.IDENTITY]: [{}] },\n              logic: {},\n              _id: 'docId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.be.within(0.01, 0.1);\n    });\n\n    it('should count files and info', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [\n            {\n              firstName: 'joe',\n              lastName: 'johnson',\n              documents: { [DOCUMENTS.IDENTITY]: [{}] },\n              logic: {},\n              _id: 'borrowerId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.be.within(0.13, 0.14);\n    });\n  });\n\n  describe('getBorrowerFilesProgress', () => {\n    it('returns 0 when no file is present', () => {\n      expect(Calculator.getBorrowerFilesProgress({\n        loan: {\n          borrowers: [\n            {\n              documents: {},\n              _id: 'borrowerId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.deep.equal({ percent: 0, count: 6 });\n    });\n\n    it('returns 0 when no documents are present', () => {\n      expect(Calculator.getBorrowerFilesProgress({\n        loan: {\n          borrowers: [{}],\n        },\n      })).to.deep.equal({ percent: 0, count: 1 });\n    });\n\n    it('returns more than 0 when a file is present', () => {\n      expect(Calculator.getBorrowerFilesProgress({\n        loan: {\n          borrowers: [\n            {\n              documents: { [DOCUMENTS.IDENTITY]: [{}] },\n              _id: 'borrowerId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.deep.equal({ percent: 1 / 6, count: 6 });\n    });\n  });\n\n  describe('getExpenses', () => {\n    it('Should return 0 if given an empty object', () => {\n      expect(Calculator.getExpenses({})).to.equal(0);\n    });\n\n    it('sums expenses array', () => {\n      expect(Calculator.getExpenses({\n        borrowers: { expenses: [{ value: 2 }, { value: 3 }] },\n      })).to.equal(5);\n    });\n  });\n\n  describe('getFortune', () => {\n    it('Should return 0 if given an empty object', () => {\n      expect(Calculator.getFortune({})).to.equal(0);\n    });\n\n    it('sums bankFortunes if given multiple borrowers', () => {\n      expect(Calculator.getFortune({\n        borrowers: [{ bankFortune: 1 }, { bankFortune: 2 }],\n      })).to.equal(3);\n    });\n  });\n\n  describe('getInsuranceFortune', () => {\n    it('properly sums insurance2, insurance3A, insurance3B and bank3A', () => {\n      expect(Calculator.getInsuranceFortune({\n        borrowers: {\n          insurance2: [{ value: 2 }],\n          insurance3A: [{ value: 3 }],\n          insurance3B: [{ value: 4 }],\n          bank3A: [{ value: 5 }],\n        },\n      })).to.equal(14);\n\n      expect(Calculator.getInsuranceFortune({\n        borrowers: {\n          insurance3B: [{ value: 2 }],\n          bank3A: [{ value: undefined }],\n        },\n      })).to.equal(2);\n    });\n\n    it('works with multiple borrowers', () => {\n      expect(Calculator.getInsuranceFortune({\n        borrowers: [\n          {\n            insurance2: [{ value: 2 }],\n            insurance3A: [{ value: 3 }],\n          },\n          {\n            bank3A: [{ value: 4 }],\n            insurance3B: [{ value: 5 }],\n          },\n        ],\n      })).to.equal(14);\n    });\n  });\n\n  describe('getMissingBorrowerDocuments', () => {\n    it('returns all missing ids for an empty borrower', () => {\n      expect(Calculator.getMissingBorrowerDocuments({\n        loan: {\n          borrowers: [\n            { _id: 'borrowerId', additionalDocuments: initialDocuments },\n          ],\n          step: STEPS.SOLVENCY,\n        },\n      })).to.deep.equal(initialDocuments.map(({ id }) => id));\n    });\n  });\n\n  describe('getMissingBorrowerFields', () => {\n    it('returns all missing ids for an empty borrower', () => {\n      expect(Calculator.getMissingBorrowerFields({ borrowers: {} })).to.deep.equal([\n        'firstName',\n        'lastName',\n        'gender',\n        'address1',\n        'city',\n        'zipCode',\n        'canton',\n        'isSwiss',\n        'birthDate',\n        'citizenship',\n        'isUSPerson',\n        'civilStatus',\n        'childrenCount',\n        'salary',\n        'netSalary',\n        'bonusExists',\n        'hasOwnCompany',\n        'bankFortune',\n      ]);\n    });\n\n    it('returns all missing ids for an empty borrower', () => {\n      const result = Calculator.getMissingBorrowerFields({\n        borrowers: { hasOwnCompany: true, ownCompanies: [] },\n      });\n      expect(result).to.include('ownCompanies');\n      const result2 = Calculator.getMissingBorrowerFields({\n        borrowers: { hasOwnCompany: false, ownCompanies: [] },\n      });\n      expect(result2).to.not.include('ownCompanies');\n    });\n  });\n\n  describe('getOtherFortune', () => {\n    it('Should return 0 if given an empty object', () => {\n      expect(Calculator.getOtherFortune({})).to.equal(0);\n    });\n\n    it('sums otherFortune if given multiple borrowers', () => {\n      expect(Calculator.getOtherFortune({\n        borrowers: [\n          { otherFortune: [{ value: 3 }, { value: 4 }] },\n          { otherFortune: [{ value: 5 }, { value: 6 }] },\n        ],\n      })).to.equal(18);\n    });\n  });\n\n  describe('getRealEstateFortune', () => {\n    it('returns the difference between property values and loans', () => {\n      expect(Calculator.getRealEstateFortune({\n        borrowers: { realEstate: [{ value: 2, loan: 1 }] },\n      })).to.equal(1);\n    });\n  });\n\n  describe('getRealEstateValue', () => {\n    it('returns value of all realEstate', () => {\n      expect(Calculator.getRealEstateValue({\n        borrowers: { realEstate: [{ value: 2, loan: 1 }] },\n      })).to.equal(2);\n    });\n  });\n\n  describe('getRealEstateValue', () => {\n    it('returns loans of all realEstate', () => {\n      expect(Calculator.getRealEstateDebt({\n        borrowers: { realEstate: [{ value: 2, loan: 1 }] },\n      })).to.equal(1);\n    });\n  });\n\n  describe('getRealEstateIncome', () => {\n    it('returns realEstate income', () => {\n      expect(Calculator.getRealEstateIncome({\n        borrowers: { realEstate: [{ income: 10 }] },\n      })).to.equal(10);\n    });\n\n    it('changes with realEstateIncomeConsideration', () => {\n      const calc = new CalculatorClass({\n        realEstateIncomeConsideration: 0.5,\n      });\n      expect(calc.getRealEstateIncome({\n        borrowers: { realEstate: [{ income: 10 }, { income: 20 }] },\n      })).to.equal(15);\n    });\n  });\n\n  describe('getSalary', () => {\n    it('returns 0 for an empty object', () => {\n      expect(Calculator.getSalary({})).to.equal(0);\n    });\n\n    it(\"returns sum of borrowers' salary\", () => {\n      expect(Calculator.getSalary({ borrowers: { salary: 1 } })).to.equal(1);\n      expect(Calculator.getSalary({\n        borrowers: [{ salary: 1 }, { salary: 2 }],\n      })).to.equal(3);\n    });\n  });\n\n  describe('getTotalFunds', () => {\n    it('should return 0 for an empty object', () => {\n      expect(Calculator.getTotalFunds({})).to.equal(0);\n    });\n\n    it('should sum all fortune items in a borrower', () => {\n      expect(Calculator.getTotalFunds({\n        borrowers: {\n          bankFortune: 1,\n          insurance2: [{ value: 2 }],\n          insurance3A: [{ value: 3 }],\n        },\n      })).to.equal(6);\n    });\n  });\n\n  describe('getTotalIncome', () => {\n    it('should return 0 an empty borrower', () => {\n      expect(Calculator.getTotalIncome({})).to.equal(0);\n    });\n\n    it('should return sum of all incomes for a borrower, and subtract expenses', () => {\n      expect(Calculator.getTotalIncome({\n        borrowers: {\n          salary: 1,\n          bonusExists: true,\n          bonus2018: 2, // Adds 1\n          otherIncome: [{ value: 3 }],\n          expenses: [{ value: 5, description: EXPENSES.LEASING }], // Subtracts 5\n        },\n      })).to.equal(0);\n    });\n\n    it('adds fortuneReturns if they exist', () => {\n      const calc = new CalculatorClass({ fortuneReturnsRatio: 0.01 });\n      expect(calc.getTotalIncome({\n        borrowers: {\n          bankFortune: 100,\n          salary: 1,\n          bonusExists: true,\n          bonus2018: 2, // Adds 1\n          otherIncome: [{ value: 3 }],\n          expenses: [{ value: 5, description: EXPENSES.LEASING }], // Subtracts 5\n        },\n      })).to.equal(1);\n    });\n\n    it('should only subtract expenses that are meant to be subtracted', () => {\n      const calc = new CalculatorClass({\n        expensesSubtractFromIncome: [EXPENSES.LEASING],\n      });\n      expect(calc.getTotalIncome({\n        borrowers: {\n          salary: 1,\n          bonusExists: true,\n          bonus2018: 2, // Adds 1\n          otherIncome: [{ value: 3 }],\n          expenses: [\n            { value: 1, description: EXPENSES.LEASING },\n            { value: 5, description: EXPENSES.OTHER },\n          ],\n        },\n      })).to.equal(4);\n    });\n  });\n\n  describe('personalInfoPercent', () => {\n    it('works', () => {\n      expect(Calculator.personalInfoPercent({\n        borrowers: [{\n          _id: 'aBcNvYnq34rnb29nh',\n          adminValidation: {},\n          birthDate: '1992-04-14',\n          bonusExists: false,\n          childrenCount: 0,\n          citizenship: 'hello',\n          civilStatus: 'MARRIED',\n          createdAt: '2018-08-23T10:18:18.139Z',\n          expenses: [],\n          firstName: 'dfadf',\n          gender: 'M',\n          isSwiss: false,\n          isUSPerson: false,\n          lastName: 'asdfasd',\n          otherFortune: [],\n          otherIncome: [],\n          realEstate: [],\n          residencyPermit: 'b',\n          sameAddress: true,\n          updatedAt: '2018-08-23T10:20:22.234Z',\n          userId: 'fAksm7pJveZybme5F',\n          salary: 100,\n          netSalary: 80,\n          bankFortune: 1000,\n          hasOwnCompany: false,\n          ownCompanies: [],\n        }],\n      })).to.equal(1);\n    });\n  });\n\n  describe('sumValues', () => {\n    it('sums values with a single key', () => {\n      expect(Calculator.sumValues({\n        borrowers: [{ a: 1 }, { a: 2 }],\n        keys: 'a',\n      })).to.equal(3);\n    });\n\n    it('sums values with multiple keys', () => {\n      expect(Calculator.sumValues({\n        borrowers: [{ a: 1, b: 4 }, { a: 2, b: 3 }],\n        keys: ['a', 'b'],\n      })).to.equal(10);\n    });\n\n    it('omits keys if they are not provided', () => {\n      expect(Calculator.sumValues({ borrowers: [{ a: 1 }, {}], keys: 'a' })).to.equal(1);\n    });\n  });\n\n  describe('getYearsToRetirement', () => {\n    it('returns the proper difference for a male', () => {\n      expect(Calculator.getRetirement({\n        borrowers: [{ age: 25, gender: GENDER.M }],\n      })).to.equal(40);\n    });\n\n    it('returns 0 for a retired person', () => {\n      expect(Calculator.getRetirement({\n        borrowers: [{ age: 70, gender: GENDER.M }],\n      })).to.equal(0);\n    });\n  });\n\n  describe('getFortuneReturns', () => {\n    it('returns 0 if the ratio is not set', () => {\n      expect(Calculator.getFortuneReturns({\n        borrowers: [{ bankFortune: 100 }],\n      })).to.equal(0);\n    });\n\n    it('returns some revenue if the constant is set', () => {\n      const calc = new CalculatorClass({\n        fortuneReturnsRatio: 0.01,\n      });\n      expect(calc.getFortuneReturns({\n        borrowers: [{ bankFortune: 100 }],\n      })).to.equal(1);\n    });\n  });\n\n  describe('getRealEstateExpenses', () => {\n    it('adds up expenses for real estate', () => {\n      // 12k maintenance, 48k interests, 12k amort\n      expect(Calculator.getRealEstateExpenses({\n        borrowers: [{ realEstate: [{ value: 1200000, loan: 960000 }] }],\n      })).to.equal(6000);\n    });\n\n    it('counts no amortization if the loan is below amortizationGoal', () => {\n      // 12k maintenance, 39k interests, 0 amort\n      expect(Calculator.getRealEstateExpenses({\n        borrowers: [{ realEstate: [{ value: 1200000, loan: 780000 }] }],\n      })).to.equal(4250);\n    });\n  });\n\n  describe('getGroupedExpenses', () => {\n    it('groups expenses between borrowers', () => {\n      const borrowers = [\n        {\n          expenses: [\n            { description: 'a', value: 10 },\n            { description: 'c', value: 1 },\n          ],\n        },\n        {\n          expenses: [\n            { description: 'b', value: 5 },\n            { description: 'a', value: 5 },\n          ],\n        },\n      ];\n      expect(Calculator.getGroupedExpenses({ borrowers })).to.deep.equal({\n        a: 15,\n        b: 5,\n        c: 1,\n      });\n    });\n  });\n\n  describe('getFormattedExpenses', () => {\n    it('gets an object with expenses to add or subtract', () => {\n      const calc = new CalculatorClass({\n        expensesSubtractFromIncome: [EXPENSES.LEASING],\n      });\n      const borrowers = [\n        {\n          expenses: [\n            { description: EXPENSES.LEASING, value: 10 },\n            { description: EXPENSES.PENSIONS, value: 1 },\n          ],\n        },\n        {\n          expenses: [\n            { description: EXPENSES.LEASING, value: 5 },\n            { description: EXPENSES.OTHER, value: 1 },\n          ],\n        },\n      ];\n      expect(calc.getFormattedExpenses({ borrowers })).to.deep.equal({\n        add: 2,\n        subtract: 15,\n      });\n    });\n  });\n\n  describe('getBorrowerFormHash', () => {\n    it('returns a value for a borrower', () => {\n      const borrowers = [\n        {\n          expenses: [\n            { description: EXPENSES.LEASING, value: 10 },\n            { description: EXPENSES.PENSIONS, value: 1 },\n          ],\n        },\n      ];\n\n      expect(Calculator.getBorrowerFormHash({ borrowers })).to.equal(-559003621);\n    });\n\n    it('changes for non required form values as well', () => {\n      const borrower1 = { company: 'a' };\n      const borrower2 = { company: 'b' };\n\n      expect(Calculator.getBorrowerFormHash({ borrowers: borrower1 })).to.not.equal(Calculator.getBorrowerFormHash({ borrowers: borrower2 }));\n    });\n\n    it('returns a different value for multiple borrowers', () => {\n      const borrowers = [\n        {\n          expenses: [\n            { description: EXPENSES.LEASING, value: 10 },\n            { description: EXPENSES.PENSIONS, value: 1 },\n          ],\n        },\n        {\n          expenses: [\n            { description: EXPENSES.LEASING, value: 5 },\n            { description: EXPENSES.OTHER, value: 1 },\n          ],\n        },\n      ];\n\n      expect(Calculator.getBorrowerFormHash({ borrowers })).to.equal(1188420103);\n    });\n  });\n\n  describe('real estate income algorithm', () => {\n    it('adds income to - and subtract theoretical cost from - totalIncome for DEFAULT', () => {\n      const borrowers = [\n        { realEstate: [{ income: 72000, value: 1200000, loan: 960000 }] },\n        { realEstate: [{ income: 72000, value: 1200000, loan: 960000 }] },\n      ];\n\n      expect(Calculator.getRealEstateIncome({ borrowers })).to.equal(144000);\n      expect(Calculator.getTotalIncome({ borrowers })).to.equal(0);\n    });\n\n    context('with algoritm POSITIVE_NEGATIVE_SPLIT', () => {\n      let calc;\n\n      beforeEach(() => {\n        calc = new CalculatorClass({\n          realEstateIncomeAlgorithm:\n            REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT,\n        });\n      });\n\n      it('adds to income if delta is positive', () => {\n        const borrowers = [\n          { realEstate: [{ income: 50000, value: 1200000, loan: 960000 }] },\n          { realEstate: [{ income: 73000, value: 1200000, loan: 960000 }] },\n        ];\n\n        expect(calc.getTotalIncome({ borrowers })).to.equal(1000);\n      });\n\n      it('adds to income if delta is positive', () => {\n        const borrowers = [\n          { realEstate: [{ income: 100000, value: 1200000, loan: 960000 }] },\n        ];\n\n        expect(calc.getTotalIncome({ borrowers })).to.equal(28000);\n      });\n\n      it('adds to expenses if delta is negative', () => {\n        const borrowers = [\n          { realEstate: [{ income: 50000, value: 1200000, loan: 960000 }] },\n          { realEstate: [{ income: 100000, value: 1200000, loan: 960000 }] },\n        ];\n\n        expect(calc.getFormattedExpenses({ borrowers })).to.deep.equal({\n          subtract: -28000,\n          add: 22000,\n        });\n      });\n\n      it('considers income based on realEstateIncomeConsideration', () => {\n        calc = new CalculatorClass({\n          realEstateIncomeAlgorithm:\n            REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT,\n          realEstateIncomeConsideration: 0.8,\n        });\n        const borrowers = [\n          { realEstate: [{ income: 100000, value: 1200000, loan: 960000 }] },\n        ];\n\n        expect(calc.getTotalIncome({ borrowers })).to.equal(8000);\n      });\n    });\n  });\n\n  describe('shouldUseNetSalary', () => {\n    it('works when applying global rules', () => {\n      const loan = {\n        structures: [],\n        borrowers: [{ salary: 120000, netSalary: 10000 }],\n      };\n      const calc = new CalculatorClass({\n        loan,\n        lenderRules: [\n          { filter: { and: [true] }, incomeConsiderationType: 'NET' },\n          { filter: { and: [{ '>': [{ var: 'INCOME' }, 100000] }] },  },\n        ],\n      });\n      const result = calc.shouldUseNetSalary();\n      expect(result).to.equal(true);\n\n      const salary = calc.getSalary({ loan });\n      expect(salary).to.equal(10000);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/BorrowerCalculator.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/Calculator/test/BorrowerCalculator.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet Calculator, CalculatorClass;\nmodule.link(\"..\", {\n  default(v) {\n    Calculator = v;\n  },\n\n  Calculator(v) {\n    CalculatorClass = v;\n  }\n\n}, 1);\nlet STEPS, GENDER, EXPENSES;\nmodule.link(\"../../../api/constants\", {\n  STEPS(v) {\n    STEPS = v;\n  },\n\n  GENDER(v) {\n    GENDER = v;\n  },\n\n  EXPENSES(v) {\n    EXPENSES = v;\n  }\n\n}, 2);\nlet DOCUMENTS;\nmodule.link(\"../../../api/constants\", {\n  DOCUMENTS(v) {\n    DOCUMENTS = v;\n  }\n\n}, 3);\nlet initialDocuments;\nmodule.link(\"../../../api/borrowers/borrowersAdditionalDocuments\", {\n  initialDocuments(v) {\n    initialDocuments = v;\n  }\n\n}, 4);\nlet BONUS_ALGORITHMS, REAL_ESTATE_INCOME_ALGORITHMS;\nmodule.link(\"../../../config/financeConstants\", {\n  BONUS_ALGORITHMS(v) {\n    BONUS_ALGORITHMS = v;\n  },\n\n  REAL_ESTATE_INCOME_ALGORITHMS(v) {\n    REAL_ESTATE_INCOME_ALGORITHMS = v;\n  }\n\n}, 5);\ndescribe('BorrowerCalculator', () => {\n  describe('getArrayValues', () => {\n    it(\"returns 0 if the key doesn't exist\", () => {\n      expect(Calculator.getArrayValues({}, 'key')).to.equal(0);\n    });\n    it(\"returns the sum of all value keys in an object's array\", () => {\n      expect(Calculator.getArrayValues({\n        borrowers: {\n          array: [{\n            value: 1\n          }, {\n            value: 2\n          }]\n        },\n        key: 'array'\n      })).to.equal(3);\n    });\n    it('works with arrays', () => {\n      expect(Calculator.getArrayValues({\n        borrowers: [{\n          array: [{\n            value: 1\n          }, {\n            value: 2\n          }]\n        }, {\n          array: [{\n            value: 3\n          }, {\n            value: 4\n          }]\n        }],\n        key: 'array'\n      })).to.equal(10);\n    });\n    it('works with a provided mapFunc', () => {\n      expect(Calculator.getArrayValues({\n        borrowers: [{\n          array: [{\n            yo: 1\n          }, {\n            value: 2\n          }]\n        }, {\n          array: [{\n            value: 3\n          }, {\n            yo: 4\n          }]\n        }],\n        key: 'array'\n      }, item => item.yo)).to.equal(5);\n    });\n  });\n  describe('getBonusIncome', () => {\n    it('returns half of 1 bonus', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2018: 100\n        }\n      })).to.equal(50);\n    });\n    it('returns half of average 2 bonuses', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2018: 100,\n          bonus2015: 0\n        }\n      })).to.equal(50);\n    });\n    it('returns half of average 3 bonuses', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2018: 100,\n          bonus2017: 0,\n          bonus2016: 200\n        }\n      })).to.equal(75);\n    });\n    it('returns 0 if bonusExists is false', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: {\n          bonusExists: false,\n          bonus2015: 50,\n          bonus2016: 150,\n          bonus2017: 40,\n          bonus2018: 100\n        }\n      })).to.equal(0);\n    });\n    it('considers bonuses differently based on bonusConsideration', () => {\n      const calc = new CalculatorClass({\n        bonusConsideration: 1\n      });\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2015: 40,\n          bonus2016: 150,\n          bonus2017: 50,\n          bonus2018: 100\n        }\n      })).to.equal(100);\n    });\n    it('considers fewer bonuses with bonusHistoryToConsider', () => {\n      const calc = new CalculatorClass({\n        bonusConsideration: 1,\n        bonusHistoryToConsider: 1\n      });\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2015: 50,\n          bonus2016: 150,\n          bonus2017: 40,\n          bonus2019: 200\n        }\n      })).to.equal(200);\n    });\n    it('works with 2 borrowers', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: [{\n          bonusExists: true,\n          bonus2018: 100,\n          bonus2017: 0,\n          bonus2016: 200\n        }, {\n          bonusExists: false,\n          bonus2018: 100,\n          bonus2017: 0,\n          bonus2016: 200\n        }]\n      })).to.equal(75);\n    });\n    it('uses the AVERAGE algorithm', () => {\n      const calc = new CalculatorClass({\n        bonusConsideration: 1,\n        bonusHistoryToConsider: 2,\n        bonusAlgorithm: BONUS_ALGORITHMS.AVERAGE\n      });\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2019: 200\n        }\n      })).to.equal(100);\n    });\n    it('uses the WEAK_AVERAGE algorithm', () => {\n      const calc = new CalculatorClass({\n        bonusConsideration: 1,\n        bonusHistoryToConsider: 3,\n        bonusAlgorithm: BONUS_ALGORITHMS.WEAK_AVERAGE\n      });\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2019: 200,\n          bonus2018: 200,\n          bonus2017: 0\n        }\n      })).to.equal(200);\n    });\n  });\n  describe('getBonuses', () => {\n    it('returns the sum of bonuses for a given year', () => {\n      expect(Calculator.getBonuses({\n        borrowers: [{\n          bonusExists: 10,\n          bonus2018: null,\n          bonus2016: 200\n        }, {\n          bonusExists: true,\n          bonus2017: 5,\n          bonus2016: 200,\n          bonus2019: 5\n        }]\n      })).to.deep.equal({\n        bonus2016: 400,\n        bonus2017: 5,\n        bonus2019: 5\n      });\n    });\n    it('omits borrowers with bonusExists false', () => {\n      expect(Calculator.getBonuses({\n        borrowers: [{\n          bonusExists: 10,\n          bonus2018: null,\n          bonus2016: 200\n        }, {\n          bonusExists: false,\n          bonus2017: 5,\n          bonus2016: 200,\n          bonus2019: 5\n        }]\n      })).to.deep.equal({\n        bonus2016: 200\n      });\n    });\n  });\n  describe('getBorrowerCompletion', () => {\n    it('should be 0% for a new borrower', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [{\n            documents: {},\n            _id: 'docId',\n            additionalDocuments: initialDocuments\n          }]\n        }\n      })).to.equal(0);\n    });\n    it('should not be 0% when adding data', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [{\n            firstName: 'joe',\n            lastName: 'johnson',\n            documents: {},\n            logic: {},\n            _id: 'docId',\n            additionalDocuments: initialDocuments\n          }]\n        }\n      })).to.be.within(0.01, 0.1);\n    });\n    it('should not be 0% when adding a document', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [{\n            documents: {\n              [DOCUMENTS.IDENTITY]: [{}]\n            },\n            logic: {},\n            _id: 'docId',\n            additionalDocuments: initialDocuments\n          }]\n        }\n      })).to.be.within(0.01, 0.1);\n    });\n    it('should count files and info', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [{\n            firstName: 'joe',\n            lastName: 'johnson',\n            documents: {\n              [DOCUMENTS.IDENTITY]: [{}]\n            },\n            logic: {},\n            _id: 'borrowerId',\n            additionalDocuments: initialDocuments\n          }]\n        }\n      })).to.be.within(0.13, 0.14);\n    });\n  });\n  describe('getBorrowerFilesProgress', () => {\n    it('returns 0 when no file is present', () => {\n      expect(Calculator.getBorrowerFilesProgress({\n        loan: {\n          borrowers: [{\n            documents: {},\n            _id: 'borrowerId',\n            additionalDocuments: initialDocuments\n          }]\n        }\n      })).to.deep.equal({\n        percent: 0,\n        count: 6\n      });\n    });\n    it('returns 0 when no documents are present', () => {\n      expect(Calculator.getBorrowerFilesProgress({\n        loan: {\n          borrowers: [{}]\n        }\n      })).to.deep.equal({\n        percent: 0,\n        count: 1\n      });\n    });\n    it('returns more than 0 when a file is present', () => {\n      expect(Calculator.getBorrowerFilesProgress({\n        loan: {\n          borrowers: [{\n            documents: {\n              [DOCUMENTS.IDENTITY]: [{}]\n            },\n            _id: 'borrowerId',\n            additionalDocuments: initialDocuments\n          }]\n        }\n      })).to.deep.equal({\n        percent: 1 / 6,\n        count: 6\n      });\n    });\n  });\n  describe('getExpenses', () => {\n    it('Should return 0 if given an empty object', () => {\n      expect(Calculator.getExpenses({})).to.equal(0);\n    });\n    it('sums expenses array', () => {\n      expect(Calculator.getExpenses({\n        borrowers: {\n          expenses: [{\n            value: 2\n          }, {\n            value: 3\n          }]\n        }\n      })).to.equal(5);\n    });\n  });\n  describe('getFortune', () => {\n    it('Should return 0 if given an empty object', () => {\n      expect(Calculator.getFortune({})).to.equal(0);\n    });\n    it('sums bankFortunes if given multiple borrowers', () => {\n      expect(Calculator.getFortune({\n        borrowers: [{\n          bankFortune: 1\n        }, {\n          bankFortune: 2\n        }]\n      })).to.equal(3);\n    });\n  });\n  describe('getInsuranceFortune', () => {\n    it('properly sums insurance2, insurance3A, insurance3B and bank3A', () => {\n      expect(Calculator.getInsuranceFortune({\n        borrowers: {\n          insurance2: [{\n            value: 2\n          }],\n          insurance3A: [{\n            value: 3\n          }],\n          insurance3B: [{\n            value: 4\n          }],\n          bank3A: [{\n            value: 5\n          }]\n        }\n      })).to.equal(14);\n      expect(Calculator.getInsuranceFortune({\n        borrowers: {\n          insurance3B: [{\n            value: 2\n          }],\n          bank3A: [{\n            value: undefined\n          }]\n        }\n      })).to.equal(2);\n    });\n    it('works with multiple borrowers', () => {\n      expect(Calculator.getInsuranceFortune({\n        borrowers: [{\n          insurance2: [{\n            value: 2\n          }],\n          insurance3A: [{\n            value: 3\n          }]\n        }, {\n          bank3A: [{\n            value: 4\n          }],\n          insurance3B: [{\n            value: 5\n          }]\n        }]\n      })).to.equal(14);\n    });\n  });\n  describe('getMissingBorrowerDocuments', () => {\n    it('returns all missing ids for an empty borrower', () => {\n      expect(Calculator.getMissingBorrowerDocuments({\n        loan: {\n          borrowers: [{\n            _id: 'borrowerId',\n            additionalDocuments: initialDocuments\n          }],\n          step: STEPS.SOLVENCY\n        }\n      })).to.deep.equal(initialDocuments.map(({\n        id\n      }) => id));\n    });\n  });\n  describe('getMissingBorrowerFields', () => {\n    it('returns all missing ids for an empty borrower', () => {\n      expect(Calculator.getMissingBorrowerFields({\n        borrowers: {}\n      })).to.deep.equal(['firstName', 'lastName', 'gender', 'address1', 'city', 'zipCode', 'canton', 'isSwiss', 'birthDate', 'citizenship', 'isUSPerson', 'civilStatus', 'childrenCount', 'salary', 'netSalary', 'bonusExists', 'hasOwnCompany', 'bankFortune']);\n    });\n    it('returns all missing ids for an empty borrower', () => {\n      const result = Calculator.getMissingBorrowerFields({\n        borrowers: {\n          hasOwnCompany: true,\n          ownCompanies: []\n        }\n      });\n      expect(result).to.include('ownCompanies');\n      const result2 = Calculator.getMissingBorrowerFields({\n        borrowers: {\n          hasOwnCompany: false,\n          ownCompanies: []\n        }\n      });\n      expect(result2).to.not.include('ownCompanies');\n    });\n  });\n  describe('getOtherFortune', () => {\n    it('Should return 0 if given an empty object', () => {\n      expect(Calculator.getOtherFortune({})).to.equal(0);\n    });\n    it('sums otherFortune if given multiple borrowers', () => {\n      expect(Calculator.getOtherFortune({\n        borrowers: [{\n          otherFortune: [{\n            value: 3\n          }, {\n            value: 4\n          }]\n        }, {\n          otherFortune: [{\n            value: 5\n          }, {\n            value: 6\n          }]\n        }]\n      })).to.equal(18);\n    });\n  });\n  describe('getRealEstateFortune', () => {\n    it('returns the difference between property values and loans', () => {\n      expect(Calculator.getRealEstateFortune({\n        borrowers: {\n          realEstate: [{\n            value: 2,\n            loan: 1\n          }]\n        }\n      })).to.equal(1);\n    });\n  });\n  describe('getRealEstateValue', () => {\n    it('returns value of all realEstate', () => {\n      expect(Calculator.getRealEstateValue({\n        borrowers: {\n          realEstate: [{\n            value: 2,\n            loan: 1\n          }]\n        }\n      })).to.equal(2);\n    });\n  });\n  describe('getRealEstateValue', () => {\n    it('returns loans of all realEstate', () => {\n      expect(Calculator.getRealEstateDebt({\n        borrowers: {\n          realEstate: [{\n            value: 2,\n            loan: 1\n          }]\n        }\n      })).to.equal(1);\n    });\n  });\n  describe('getRealEstateIncome', () => {\n    it('returns realEstate income', () => {\n      expect(Calculator.getRealEstateIncome({\n        borrowers: {\n          realEstate: [{\n            income: 10\n          }]\n        }\n      })).to.equal(10);\n    });\n    it('changes with realEstateIncomeConsideration', () => {\n      const calc = new CalculatorClass({\n        realEstateIncomeConsideration: 0.5\n      });\n      expect(calc.getRealEstateIncome({\n        borrowers: {\n          realEstate: [{\n            income: 10\n          }, {\n            income: 20\n          }]\n        }\n      })).to.equal(15);\n    });\n  });\n  describe('getSalary', () => {\n    it('returns 0 for an empty object', () => {\n      expect(Calculator.getSalary({})).to.equal(0);\n    });\n    it(\"returns sum of borrowers' salary\", () => {\n      expect(Calculator.getSalary({\n        borrowers: {\n          salary: 1\n        }\n      })).to.equal(1);\n      expect(Calculator.getSalary({\n        borrowers: [{\n          salary: 1\n        }, {\n          salary: 2\n        }]\n      })).to.equal(3);\n    });\n  });\n  describe('getTotalFunds', () => {\n    it('should return 0 for an empty object', () => {\n      expect(Calculator.getTotalFunds({})).to.equal(0);\n    });\n    it('should sum all fortune items in a borrower', () => {\n      expect(Calculator.getTotalFunds({\n        borrowers: {\n          bankFortune: 1,\n          insurance2: [{\n            value: 2\n          }],\n          insurance3A: [{\n            value: 3\n          }]\n        }\n      })).to.equal(6);\n    });\n  });\n  describe('getTotalIncome', () => {\n    it('should return 0 an empty borrower', () => {\n      expect(Calculator.getTotalIncome({})).to.equal(0);\n    });\n    it('should return sum of all incomes for a borrower, and subtract expenses', () => {\n      expect(Calculator.getTotalIncome({\n        borrowers: {\n          salary: 1,\n          bonusExists: true,\n          bonus2018: 2,\n          // Adds 1\n          otherIncome: [{\n            value: 3\n          }],\n          expenses: [{\n            value: 5,\n            description: EXPENSES.LEASING\n          }] // Subtracts 5\n\n        }\n      })).to.equal(0);\n    });\n    it('adds fortuneReturns if they exist', () => {\n      const calc = new CalculatorClass({\n        fortuneReturnsRatio: 0.01\n      });\n      expect(calc.getTotalIncome({\n        borrowers: {\n          bankFortune: 100,\n          salary: 1,\n          bonusExists: true,\n          bonus2018: 2,\n          // Adds 1\n          otherIncome: [{\n            value: 3\n          }],\n          expenses: [{\n            value: 5,\n            description: EXPENSES.LEASING\n          }] // Subtracts 5\n\n        }\n      })).to.equal(1);\n    });\n    it('should only subtract expenses that are meant to be subtracted', () => {\n      const calc = new CalculatorClass({\n        expensesSubtractFromIncome: [EXPENSES.LEASING]\n      });\n      expect(calc.getTotalIncome({\n        borrowers: {\n          salary: 1,\n          bonusExists: true,\n          bonus2018: 2,\n          // Adds 1\n          otherIncome: [{\n            value: 3\n          }],\n          expenses: [{\n            value: 1,\n            description: EXPENSES.LEASING\n          }, {\n            value: 5,\n            description: EXPENSES.OTHER\n          }]\n        }\n      })).to.equal(4);\n    });\n  });\n  describe('personalInfoPercent', () => {\n    it('works', () => {\n      expect(Calculator.personalInfoPercent({\n        borrowers: [{\n          _id: 'aBcNvYnq34rnb29nh',\n          adminValidation: {},\n          birthDate: '1992-04-14',\n          bonusExists: false,\n          childrenCount: 0,\n          citizenship: 'hello',\n          civilStatus: 'MARRIED',\n          createdAt: '2018-08-23T10:18:18.139Z',\n          expenses: [],\n          firstName: 'dfadf',\n          gender: 'M',\n          isSwiss: false,\n          isUSPerson: false,\n          lastName: 'asdfasd',\n          otherFortune: [],\n          otherIncome: [],\n          realEstate: [],\n          residencyPermit: 'b',\n          sameAddress: true,\n          updatedAt: '2018-08-23T10:20:22.234Z',\n          userId: 'fAksm7pJveZybme5F',\n          salary: 100,\n          netSalary: 80,\n          bankFortune: 1000,\n          hasOwnCompany: false,\n          ownCompanies: []\n        }]\n      })).to.equal(1);\n    });\n  });\n  describe('sumValues', () => {\n    it('sums values with a single key', () => {\n      expect(Calculator.sumValues({\n        borrowers: [{\n          a: 1\n        }, {\n          a: 2\n        }],\n        keys: 'a'\n      })).to.equal(3);\n    });\n    it('sums values with multiple keys', () => {\n      expect(Calculator.sumValues({\n        borrowers: [{\n          a: 1,\n          b: 4\n        }, {\n          a: 2,\n          b: 3\n        }],\n        keys: ['a', 'b']\n      })).to.equal(10);\n    });\n    it('omits keys if they are not provided', () => {\n      expect(Calculator.sumValues({\n        borrowers: [{\n          a: 1\n        }, {}],\n        keys: 'a'\n      })).to.equal(1);\n    });\n  });\n  describe('getYearsToRetirement', () => {\n    it('returns the proper difference for a male', () => {\n      expect(Calculator.getRetirement({\n        borrowers: [{\n          age: 25,\n          gender: GENDER.M\n        }]\n      })).to.equal(40);\n    });\n    it('returns 0 for a retired person', () => {\n      expect(Calculator.getRetirement({\n        borrowers: [{\n          age: 70,\n          gender: GENDER.M\n        }]\n      })).to.equal(0);\n    });\n  });\n  describe('getFortuneReturns', () => {\n    it('returns 0 if the ratio is not set', () => {\n      expect(Calculator.getFortuneReturns({\n        borrowers: [{\n          bankFortune: 100\n        }]\n      })).to.equal(0);\n    });\n    it('returns some revenue if the constant is set', () => {\n      const calc = new CalculatorClass({\n        fortuneReturnsRatio: 0.01\n      });\n      expect(calc.getFortuneReturns({\n        borrowers: [{\n          bankFortune: 100\n        }]\n      })).to.equal(1);\n    });\n  });\n  describe('getRealEstateExpenses', () => {\n    it('adds up expenses for real estate', () => {\n      // 12k maintenance, 48k interests, 12k amort\n      expect(Calculator.getRealEstateExpenses({\n        borrowers: [{\n          realEstate: [{\n            value: 1200000,\n            loan: 960000\n          }]\n        }]\n      })).to.equal(6000);\n    });\n    it('counts no amortization if the loan is below amortizationGoal', () => {\n      // 12k maintenance, 39k interests, 0 amort\n      expect(Calculator.getRealEstateExpenses({\n        borrowers: [{\n          realEstate: [{\n            value: 1200000,\n            loan: 780000\n          }]\n        }]\n      })).to.equal(4250);\n    });\n  });\n  describe('getGroupedExpenses', () => {\n    it('groups expenses between borrowers', () => {\n      const borrowers = [{\n        expenses: [{\n          description: 'a',\n          value: 10\n        }, {\n          description: 'c',\n          value: 1\n        }]\n      }, {\n        expenses: [{\n          description: 'b',\n          value: 5\n        }, {\n          description: 'a',\n          value: 5\n        }]\n      }];\n      expect(Calculator.getGroupedExpenses({\n        borrowers\n      })).to.deep.equal({\n        a: 15,\n        b: 5,\n        c: 1\n      });\n    });\n  });\n  describe('getFormattedExpenses', () => {\n    it('gets an object with expenses to add or subtract', () => {\n      const calc = new CalculatorClass({\n        expensesSubtractFromIncome: [EXPENSES.LEASING]\n      });\n      const borrowers = [{\n        expenses: [{\n          description: EXPENSES.LEASING,\n          value: 10\n        }, {\n          description: EXPENSES.PENSIONS,\n          value: 1\n        }]\n      }, {\n        expenses: [{\n          description: EXPENSES.LEASING,\n          value: 5\n        }, {\n          description: EXPENSES.OTHER,\n          value: 1\n        }]\n      }];\n      expect(calc.getFormattedExpenses({\n        borrowers\n      })).to.deep.equal({\n        add: 2,\n        subtract: 15\n      });\n    });\n  });\n  describe('getBorrowerFormHash', () => {\n    it('returns a value for a borrower', () => {\n      const borrowers = [{\n        expenses: [{\n          description: EXPENSES.LEASING,\n          value: 10\n        }, {\n          description: EXPENSES.PENSIONS,\n          value: 1\n        }]\n      }];\n      expect(Calculator.getBorrowerFormHash({\n        borrowers\n      })).to.equal(-559003621);\n    });\n    it('changes for non required form values as well', () => {\n      const borrower1 = {\n        company: 'a'\n      };\n      const borrower2 = {\n        company: 'b'\n      };\n      expect(Calculator.getBorrowerFormHash({\n        borrowers: borrower1\n      })).to.not.equal(Calculator.getBorrowerFormHash({\n        borrowers: borrower2\n      }));\n    });\n    it('returns a different value for multiple borrowers', () => {\n      const borrowers = [{\n        expenses: [{\n          description: EXPENSES.LEASING,\n          value: 10\n        }, {\n          description: EXPENSES.PENSIONS,\n          value: 1\n        }]\n      }, {\n        expenses: [{\n          description: EXPENSES.LEASING,\n          value: 5\n        }, {\n          description: EXPENSES.OTHER,\n          value: 1\n        }]\n      }];\n      expect(Calculator.getBorrowerFormHash({\n        borrowers\n      })).to.equal(1188420103);\n    });\n  });\n  describe('real estate income algorithm', () => {\n    it('adds income to - and subtract theoretical cost from - totalIncome for DEFAULT', () => {\n      const borrowers = [{\n        realEstate: [{\n          income: 72000,\n          value: 1200000,\n          loan: 960000\n        }]\n      }, {\n        realEstate: [{\n          income: 72000,\n          value: 1200000,\n          loan: 960000\n        }]\n      }];\n      expect(Calculator.getRealEstateIncome({\n        borrowers\n      })).to.equal(144000);\n      expect(Calculator.getTotalIncome({\n        borrowers\n      })).to.equal(0);\n    });\n    context('with algoritm POSITIVE_NEGATIVE_SPLIT', () => {\n      let calc;\n      beforeEach(() => {\n        calc = new CalculatorClass({\n          realEstateIncomeAlgorithm: REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT\n        });\n      });\n      it('adds to income if delta is positive', () => {\n        const borrowers = [{\n          realEstate: [{\n            income: 50000,\n            value: 1200000,\n            loan: 960000\n          }]\n        }, {\n          realEstate: [{\n            income: 73000,\n            value: 1200000,\n            loan: 960000\n          }]\n        }];\n        expect(calc.getTotalIncome({\n          borrowers\n        })).to.equal(1000);\n      });\n      it('adds to income if delta is positive', () => {\n        const borrowers = [{\n          realEstate: [{\n            income: 100000,\n            value: 1200000,\n            loan: 960000\n          }]\n        }];\n        expect(calc.getTotalIncome({\n          borrowers\n        })).to.equal(28000);\n      });\n      it('adds to expenses if delta is negative', () => {\n        const borrowers = [{\n          realEstate: [{\n            income: 50000,\n            value: 1200000,\n            loan: 960000\n          }]\n        }, {\n          realEstate: [{\n            income: 100000,\n            value: 1200000,\n            loan: 960000\n          }]\n        }];\n        expect(calc.getFormattedExpenses({\n          borrowers\n        })).to.deep.equal({\n          subtract: -28000,\n          add: 22000\n        });\n      });\n      it('considers income based on realEstateIncomeConsideration', () => {\n        calc = new CalculatorClass({\n          realEstateIncomeAlgorithm: REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT,\n          realEstateIncomeConsideration: 0.8\n        });\n        const borrowers = [{\n          realEstate: [{\n            income: 100000,\n            value: 1200000,\n            loan: 960000\n          }]\n        }];\n        expect(calc.getTotalIncome({\n          borrowers\n        })).to.equal(8000);\n      });\n    });\n  });\n  describe('shouldUseNetSalary', () => {\n    it('works when applying global rules', () => {\n      const loan = {\n        structures: [],\n        borrowers: [{\n          salary: 120000,\n          netSalary: 10000\n        }]\n      };\n      const calc = new CalculatorClass({\n        loan,\n        lenderRules: [{\n          filter: {\n            and: [true]\n          },\n          incomeConsiderationType: 'NET'\n        }, {\n          filter: {\n            and: [{\n              '>': [{\n                var: 'INCOME'\n              }, 100000]\n            }]\n          }\n        }]\n      });\n      const result = calc.shouldUseNetSalary();\n      expect(result).to.equal(true);\n      const salary = calc.getSalary({\n        loan\n      });\n      expect(salary).to.equal(10000);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/Calculator/test/BorrowerCalculator.spec.js"],"names":["describe","it","expect","Calculator","borrowers","array","value","key","yo","item","bonusExists","bonus2018","bonus2015","bonus2017","bonus2016","calc","bonusConsideration","bonusHistoryToConsider","bonus2019","bonusAlgorithm","BONUS_ALGORITHMS","AVERAGE","WEAK_AVERAGE","loan","documents","_id","additionalDocuments","initialDocuments","firstName","lastName","logic","DOCUMENTS","percent","count","expenses","bankFortune","insurance2","insurance3A","insurance3B","bank3A","undefined","step","STEPS","SOLVENCY","id","result","hasOwnCompany","ownCompanies","result2","otherFortune","realEstate","income","realEstateIncomeConsideration","salary","otherIncome","description","EXPENSES","LEASING","fortuneReturnsRatio","expensesSubtractFromIncome","OTHER","adminValidation","birthDate","childrenCount","citizenship","civilStatus","createdAt","gender","isSwiss","isUSPerson","residencyPermit","sameAddress","updatedAt","userId","netSalary","a","keys","b","age","GENDER","M","c","add","subtract","borrower1","company","borrower2","context","beforeEach","realEstateIncomeAlgorithm","REAL_ESTATE_INCOME_ALGORITHMS","POSITIVE_NEGATIVE_SPLIT","structures","lenderRules","filter","and","incomeConsiderationType","var"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator, { Calculator as CalculatorClass } from '..';\nimport { STEPS, GENDER, EXPENSES } from 'core/api/constants';\nimport { DOCUMENTS } from '../../../api/constants';\nimport { initialDocuments } from '../../../api/borrowers/borrowersAdditionalDocuments';\nimport {\n  BONUS_ALGORITHMS,\n  REAL_ESTATE_INCOME_ALGORITHMS,\n} from '../../../config/financeConstants';\n\ndescribe('BorrowerCalculator', () => {\n  describe('getArrayValues', () => {\n    it(\"returns 0 if the key doesn't exist\", () => {\n      expect(Calculator.getArrayValues({}, 'key')).to.equal(0);\n    });\n\n    it(\"returns the sum of all value keys in an object's array\", () => {\n      expect(Calculator.getArrayValues({\n        borrowers: {\n          array: [{ value: 1 }, { value: 2 }],\n        },\n        key: 'array',\n      })).to.equal(3);\n    });\n\n    it('works with arrays', () => {\n      expect(Calculator.getArrayValues({\n        borrowers: [\n          { array: [{ value: 1 }, { value: 2 }] },\n          { array: [{ value: 3 }, { value: 4 }] },\n        ],\n        key: 'array',\n      })).to.equal(10);\n    });\n\n    it('works with a provided mapFunc', () => {\n      expect(Calculator.getArrayValues(\n        {\n          borrowers: [\n            { array: [{ yo: 1 }, { value: 2 }] },\n            { array: [{ value: 3 }, { yo: 4 }] },\n          ],\n          key: 'array',\n        },\n\n        item => item.yo,\n      )).to.equal(5);\n    });\n  });\n\n  describe('getBonusIncome', () => {\n    it('returns half of 1 bonus', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: { bonusExists: true, bonus2018: 100 },\n      })).to.equal(50);\n    });\n\n    it('returns half of average 2 bonuses', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: { bonusExists: true, bonus2018: 100, bonus2015: 0 },\n      })).to.equal(50);\n    });\n\n    it('returns half of average 3 bonuses', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2018: 100,\n          bonus2017: 0,\n          bonus2016: 200,\n        },\n      })).to.equal(75);\n    });\n\n    it('returns 0 if bonusExists is false', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: {\n          bonusExists: false,\n          bonus2015: 50,\n          bonus2016: 150,\n          bonus2017: 40,\n          bonus2018: 100,\n        },\n      })).to.equal(0);\n    });\n\n    it('considers bonuses differently based on bonusConsideration', () => {\n      const calc = new CalculatorClass({ bonusConsideration: 1 });\n\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2015: 40,\n          bonus2016: 150,\n          bonus2017: 50,\n          bonus2018: 100,\n        },\n      })).to.equal(100);\n    });\n\n    it('considers fewer bonuses with bonusHistoryToConsider', () => {\n      const calc = new CalculatorClass({\n        bonusConsideration: 1,\n        bonusHistoryToConsider: 1,\n      });\n\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2015: 50,\n          bonus2016: 150,\n          bonus2017: 40,\n          bonus2019: 200,\n        },\n      })).to.equal(200);\n    });\n\n    it('works with 2 borrowers', () => {\n      expect(Calculator.getBonusIncome({\n        borrowers: [\n          {\n            bonusExists: true,\n            bonus2018: 100,\n            bonus2017: 0,\n            bonus2016: 200,\n          },\n          {\n            bonusExists: false,\n            bonus2018: 100,\n            bonus2017: 0,\n            bonus2016: 200,\n          },\n        ],\n      })).to.equal(75);\n    });\n\n    it('uses the AVERAGE algorithm', () => {\n      const calc = new CalculatorClass({\n        bonusConsideration: 1,\n        bonusHistoryToConsider: 2,\n        bonusAlgorithm: BONUS_ALGORITHMS.AVERAGE,\n      });\n\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2019: 200,\n        },\n      })).to.equal(100);\n    });\n\n    it('uses the WEAK_AVERAGE algorithm', () => {\n      const calc = new CalculatorClass({\n        bonusConsideration: 1,\n        bonusHistoryToConsider: 3,\n        bonusAlgorithm: BONUS_ALGORITHMS.WEAK_AVERAGE,\n      });\n\n      expect(calc.getBonusIncome({\n        borrowers: {\n          bonusExists: true,\n          bonus2019: 200,\n          bonus2018: 200,\n          bonus2017: 0,\n        },\n      })).to.equal(200);\n    });\n  });\n\n  describe('getBonuses', () => {\n    it('returns the sum of bonuses for a given year', () => {\n      expect(Calculator.getBonuses({\n        borrowers: [\n          {\n            bonusExists: 10,\n            bonus2018: null,\n            bonus2016: 200,\n          },\n          {\n            bonusExists: true,\n            bonus2017: 5,\n            bonus2016: 200,\n            bonus2019: 5,\n          },\n        ],\n      })).to.deep.equal({ bonus2016: 400, bonus2017: 5, bonus2019: 5 });\n    });\n\n    it('omits borrowers with bonusExists false', () => {\n      expect(Calculator.getBonuses({\n        borrowers: [\n          {\n            bonusExists: 10,\n            bonus2018: null,\n            bonus2016: 200,\n          },\n          {\n            bonusExists: false,\n            bonus2017: 5,\n            bonus2016: 200,\n            bonus2019: 5,\n          },\n        ],\n      })).to.deep.equal({ bonus2016: 200 });\n    });\n  });\n\n  describe('getBorrowerCompletion', () => {\n    it('should be 0% for a new borrower', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [\n            {\n              documents: {},\n              _id: 'docId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.equal(0);\n    });\n\n    it('should not be 0% when adding data', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [\n            {\n              firstName: 'joe',\n              lastName: 'johnson',\n              documents: {},\n              logic: {},\n              _id: 'docId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.be.within(0.01, 0.1);\n    });\n\n    it('should not be 0% when adding a document', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [\n            {\n              documents: { [DOCUMENTS.IDENTITY]: [{}] },\n              logic: {},\n              _id: 'docId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.be.within(0.01, 0.1);\n    });\n\n    it('should count files and info', () => {\n      expect(Calculator.getBorrowerCompletion({\n        loan: {\n          borrowers: [\n            {\n              firstName: 'joe',\n              lastName: 'johnson',\n              documents: { [DOCUMENTS.IDENTITY]: [{}] },\n              logic: {},\n              _id: 'borrowerId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.be.within(0.13, 0.14);\n    });\n  });\n\n  describe('getBorrowerFilesProgress', () => {\n    it('returns 0 when no file is present', () => {\n      expect(Calculator.getBorrowerFilesProgress({\n        loan: {\n          borrowers: [\n            {\n              documents: {},\n              _id: 'borrowerId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.deep.equal({ percent: 0, count: 6 });\n    });\n\n    it('returns 0 when no documents are present', () => {\n      expect(Calculator.getBorrowerFilesProgress({\n        loan: {\n          borrowers: [{}],\n        },\n      })).to.deep.equal({ percent: 0, count: 1 });\n    });\n\n    it('returns more than 0 when a file is present', () => {\n      expect(Calculator.getBorrowerFilesProgress({\n        loan: {\n          borrowers: [\n            {\n              documents: { [DOCUMENTS.IDENTITY]: [{}] },\n              _id: 'borrowerId',\n              additionalDocuments: initialDocuments,\n            },\n          ],\n        },\n      })).to.deep.equal({ percent: 1 / 6, count: 6 });\n    });\n  });\n\n  describe('getExpenses', () => {\n    it('Should return 0 if given an empty object', () => {\n      expect(Calculator.getExpenses({})).to.equal(0);\n    });\n\n    it('sums expenses array', () => {\n      expect(Calculator.getExpenses({\n        borrowers: { expenses: [{ value: 2 }, { value: 3 }] },\n      })).to.equal(5);\n    });\n  });\n\n  describe('getFortune', () => {\n    it('Should return 0 if given an empty object', () => {\n      expect(Calculator.getFortune({})).to.equal(0);\n    });\n\n    it('sums bankFortunes if given multiple borrowers', () => {\n      expect(Calculator.getFortune({\n        borrowers: [{ bankFortune: 1 }, { bankFortune: 2 }],\n      })).to.equal(3);\n    });\n  });\n\n  describe('getInsuranceFortune', () => {\n    it('properly sums insurance2, insurance3A, insurance3B and bank3A', () => {\n      expect(Calculator.getInsuranceFortune({\n        borrowers: {\n          insurance2: [{ value: 2 }],\n          insurance3A: [{ value: 3 }],\n          insurance3B: [{ value: 4 }],\n          bank3A: [{ value: 5 }],\n        },\n      })).to.equal(14);\n\n      expect(Calculator.getInsuranceFortune({\n        borrowers: {\n          insurance3B: [{ value: 2 }],\n          bank3A: [{ value: undefined }],\n        },\n      })).to.equal(2);\n    });\n\n    it('works with multiple borrowers', () => {\n      expect(Calculator.getInsuranceFortune({\n        borrowers: [\n          {\n            insurance2: [{ value: 2 }],\n            insurance3A: [{ value: 3 }],\n          },\n          {\n            bank3A: [{ value: 4 }],\n            insurance3B: [{ value: 5 }],\n          },\n        ],\n      })).to.equal(14);\n    });\n  });\n\n  describe('getMissingBorrowerDocuments', () => {\n    it('returns all missing ids for an empty borrower', () => {\n      expect(Calculator.getMissingBorrowerDocuments({\n        loan: {\n          borrowers: [\n            { _id: 'borrowerId', additionalDocuments: initialDocuments },\n          ],\n          step: STEPS.SOLVENCY,\n        },\n      })).to.deep.equal(initialDocuments.map(({ id }) => id));\n    });\n  });\n\n  describe('getMissingBorrowerFields', () => {\n    it('returns all missing ids for an empty borrower', () => {\n      expect(Calculator.getMissingBorrowerFields({ borrowers: {} })).to.deep.equal([\n        'firstName',\n        'lastName',\n        'gender',\n        'address1',\n        'city',\n        'zipCode',\n        'canton',\n        'isSwiss',\n        'birthDate',\n        'citizenship',\n        'isUSPerson',\n        'civilStatus',\n        'childrenCount',\n        'salary',\n        'netSalary',\n        'bonusExists',\n        'hasOwnCompany',\n        'bankFortune',\n      ]);\n    });\n\n    it('returns all missing ids for an empty borrower', () => {\n      const result = Calculator.getMissingBorrowerFields({\n        borrowers: { hasOwnCompany: true, ownCompanies: [] },\n      });\n      expect(result).to.include('ownCompanies');\n      const result2 = Calculator.getMissingBorrowerFields({\n        borrowers: { hasOwnCompany: false, ownCompanies: [] },\n      });\n      expect(result2).to.not.include('ownCompanies');\n    });\n  });\n\n  describe('getOtherFortune', () => {\n    it('Should return 0 if given an empty object', () => {\n      expect(Calculator.getOtherFortune({})).to.equal(0);\n    });\n\n    it('sums otherFortune if given multiple borrowers', () => {\n      expect(Calculator.getOtherFortune({\n        borrowers: [\n          { otherFortune: [{ value: 3 }, { value: 4 }] },\n          { otherFortune: [{ value: 5 }, { value: 6 }] },\n        ],\n      })).to.equal(18);\n    });\n  });\n\n  describe('getRealEstateFortune', () => {\n    it('returns the difference between property values and loans', () => {\n      expect(Calculator.getRealEstateFortune({\n        borrowers: { realEstate: [{ value: 2, loan: 1 }] },\n      })).to.equal(1);\n    });\n  });\n\n  describe('getRealEstateValue', () => {\n    it('returns value of all realEstate', () => {\n      expect(Calculator.getRealEstateValue({\n        borrowers: { realEstate: [{ value: 2, loan: 1 }] },\n      })).to.equal(2);\n    });\n  });\n\n  describe('getRealEstateValue', () => {\n    it('returns loans of all realEstate', () => {\n      expect(Calculator.getRealEstateDebt({\n        borrowers: { realEstate: [{ value: 2, loan: 1 }] },\n      })).to.equal(1);\n    });\n  });\n\n  describe('getRealEstateIncome', () => {\n    it('returns realEstate income', () => {\n      expect(Calculator.getRealEstateIncome({\n        borrowers: { realEstate: [{ income: 10 }] },\n      })).to.equal(10);\n    });\n\n    it('changes with realEstateIncomeConsideration', () => {\n      const calc = new CalculatorClass({\n        realEstateIncomeConsideration: 0.5,\n      });\n      expect(calc.getRealEstateIncome({\n        borrowers: { realEstate: [{ income: 10 }, { income: 20 }] },\n      })).to.equal(15);\n    });\n  });\n\n  describe('getSalary', () => {\n    it('returns 0 for an empty object', () => {\n      expect(Calculator.getSalary({})).to.equal(0);\n    });\n\n    it(\"returns sum of borrowers' salary\", () => {\n      expect(Calculator.getSalary({ borrowers: { salary: 1 } })).to.equal(1);\n      expect(Calculator.getSalary({\n        borrowers: [{ salary: 1 }, { salary: 2 }],\n      })).to.equal(3);\n    });\n  });\n\n  describe('getTotalFunds', () => {\n    it('should return 0 for an empty object', () => {\n      expect(Calculator.getTotalFunds({})).to.equal(0);\n    });\n\n    it('should sum all fortune items in a borrower', () => {\n      expect(Calculator.getTotalFunds({\n        borrowers: {\n          bankFortune: 1,\n          insurance2: [{ value: 2 }],\n          insurance3A: [{ value: 3 }],\n        },\n      })).to.equal(6);\n    });\n  });\n\n  describe('getTotalIncome', () => {\n    it('should return 0 an empty borrower', () => {\n      expect(Calculator.getTotalIncome({})).to.equal(0);\n    });\n\n    it('should return sum of all incomes for a borrower, and subtract expenses', () => {\n      expect(Calculator.getTotalIncome({\n        borrowers: {\n          salary: 1,\n          bonusExists: true,\n          bonus2018: 2, // Adds 1\n          otherIncome: [{ value: 3 }],\n          expenses: [{ value: 5, description: EXPENSES.LEASING }], // Subtracts 5\n        },\n      })).to.equal(0);\n    });\n\n    it('adds fortuneReturns if they exist', () => {\n      const calc = new CalculatorClass({ fortuneReturnsRatio: 0.01 });\n      expect(calc.getTotalIncome({\n        borrowers: {\n          bankFortune: 100,\n          salary: 1,\n          bonusExists: true,\n          bonus2018: 2, // Adds 1\n          otherIncome: [{ value: 3 }],\n          expenses: [{ value: 5, description: EXPENSES.LEASING }], // Subtracts 5\n        },\n      })).to.equal(1);\n    });\n\n    it('should only subtract expenses that are meant to be subtracted', () => {\n      const calc = new CalculatorClass({\n        expensesSubtractFromIncome: [EXPENSES.LEASING],\n      });\n      expect(calc.getTotalIncome({\n        borrowers: {\n          salary: 1,\n          bonusExists: true,\n          bonus2018: 2, // Adds 1\n          otherIncome: [{ value: 3 }],\n          expenses: [\n            { value: 1, description: EXPENSES.LEASING },\n            { value: 5, description: EXPENSES.OTHER },\n          ],\n        },\n      })).to.equal(4);\n    });\n  });\n\n  describe('personalInfoPercent', () => {\n    it('works', () => {\n      expect(Calculator.personalInfoPercent({\n        borrowers: [{\n          _id: 'aBcNvYnq34rnb29nh',\n          adminValidation: {},\n          birthDate: '1992-04-14',\n          bonusExists: false,\n          childrenCount: 0,\n          citizenship: 'hello',\n          civilStatus: 'MARRIED',\n          createdAt: '2018-08-23T10:18:18.139Z',\n          expenses: [],\n          firstName: 'dfadf',\n          gender: 'M',\n          isSwiss: false,\n          isUSPerson: false,\n          lastName: 'asdfasd',\n          otherFortune: [],\n          otherIncome: [],\n          realEstate: [],\n          residencyPermit: 'b',\n          sameAddress: true,\n          updatedAt: '2018-08-23T10:20:22.234Z',\n          userId: 'fAksm7pJveZybme5F',\n          salary: 100,\n          netSalary: 80,\n          bankFortune: 1000,\n          hasOwnCompany: false,\n          ownCompanies: [],\n        }],\n      })).to.equal(1);\n    });\n  });\n\n  describe('sumValues', () => {\n    it('sums values with a single key', () => {\n      expect(Calculator.sumValues({\n        borrowers: [{ a: 1 }, { a: 2 }],\n        keys: 'a',\n      })).to.equal(3);\n    });\n\n    it('sums values with multiple keys', () => {\n      expect(Calculator.sumValues({\n        borrowers: [{ a: 1, b: 4 }, { a: 2, b: 3 }],\n        keys: ['a', 'b'],\n      })).to.equal(10);\n    });\n\n    it('omits keys if they are not provided', () => {\n      expect(Calculator.sumValues({ borrowers: [{ a: 1 }, {}], keys: 'a' })).to.equal(1);\n    });\n  });\n\n  describe('getYearsToRetirement', () => {\n    it('returns the proper difference for a male', () => {\n      expect(Calculator.getRetirement({\n        borrowers: [{ age: 25, gender: GENDER.M }],\n      })).to.equal(40);\n    });\n\n    it('returns 0 for a retired person', () => {\n      expect(Calculator.getRetirement({\n        borrowers: [{ age: 70, gender: GENDER.M }],\n      })).to.equal(0);\n    });\n  });\n\n  describe('getFortuneReturns', () => {\n    it('returns 0 if the ratio is not set', () => {\n      expect(Calculator.getFortuneReturns({\n        borrowers: [{ bankFortune: 100 }],\n      })).to.equal(0);\n    });\n\n    it('returns some revenue if the constant is set', () => {\n      const calc = new CalculatorClass({\n        fortuneReturnsRatio: 0.01,\n      });\n      expect(calc.getFortuneReturns({\n        borrowers: [{ bankFortune: 100 }],\n      })).to.equal(1);\n    });\n  });\n\n  describe('getRealEstateExpenses', () => {\n    it('adds up expenses for real estate', () => {\n      // 12k maintenance, 48k interests, 12k amort\n      expect(Calculator.getRealEstateExpenses({\n        borrowers: [{ realEstate: [{ value: 1200000, loan: 960000 }] }],\n      })).to.equal(6000);\n    });\n\n    it('counts no amortization if the loan is below amortizationGoal', () => {\n      // 12k maintenance, 39k interests, 0 amort\n      expect(Calculator.getRealEstateExpenses({\n        borrowers: [{ realEstate: [{ value: 1200000, loan: 780000 }] }],\n      })).to.equal(4250);\n    });\n  });\n\n  describe('getGroupedExpenses', () => {\n    it('groups expenses between borrowers', () => {\n      const borrowers = [\n        {\n          expenses: [\n            { description: 'a', value: 10 },\n            { description: 'c', value: 1 },\n          ],\n        },\n        {\n          expenses: [\n            { description: 'b', value: 5 },\n            { description: 'a', value: 5 },\n          ],\n        },\n      ];\n      expect(Calculator.getGroupedExpenses({ borrowers })).to.deep.equal({\n        a: 15,\n        b: 5,\n        c: 1,\n      });\n    });\n  });\n\n  describe('getFormattedExpenses', () => {\n    it('gets an object with expenses to add or subtract', () => {\n      const calc = new CalculatorClass({\n        expensesSubtractFromIncome: [EXPENSES.LEASING],\n      });\n      const borrowers = [\n        {\n          expenses: [\n            { description: EXPENSES.LEASING, value: 10 },\n            { description: EXPENSES.PENSIONS, value: 1 },\n          ],\n        },\n        {\n          expenses: [\n            { description: EXPENSES.LEASING, value: 5 },\n            { description: EXPENSES.OTHER, value: 1 },\n          ],\n        },\n      ];\n      expect(calc.getFormattedExpenses({ borrowers })).to.deep.equal({\n        add: 2,\n        subtract: 15,\n      });\n    });\n  });\n\n  describe('getBorrowerFormHash', () => {\n    it('returns a value for a borrower', () => {\n      const borrowers = [\n        {\n          expenses: [\n            { description: EXPENSES.LEASING, value: 10 },\n            { description: EXPENSES.PENSIONS, value: 1 },\n          ],\n        },\n      ];\n\n      expect(Calculator.getBorrowerFormHash({ borrowers })).to.equal(-559003621);\n    });\n\n    it('changes for non required form values as well', () => {\n      const borrower1 = { company: 'a' };\n      const borrower2 = { company: 'b' };\n\n      expect(Calculator.getBorrowerFormHash({ borrowers: borrower1 })).to.not.equal(Calculator.getBorrowerFormHash({ borrowers: borrower2 }));\n    });\n\n    it('returns a different value for multiple borrowers', () => {\n      const borrowers = [\n        {\n          expenses: [\n            { description: EXPENSES.LEASING, value: 10 },\n            { description: EXPENSES.PENSIONS, value: 1 },\n          ],\n        },\n        {\n          expenses: [\n            { description: EXPENSES.LEASING, value: 5 },\n            { description: EXPENSES.OTHER, value: 1 },\n          ],\n        },\n      ];\n\n      expect(Calculator.getBorrowerFormHash({ borrowers })).to.equal(1188420103);\n    });\n  });\n\n  describe('real estate income algorithm', () => {\n    it('adds income to - and subtract theoretical cost from - totalIncome for DEFAULT', () => {\n      const borrowers = [\n        { realEstate: [{ income: 72000, value: 1200000, loan: 960000 }] },\n        { realEstate: [{ income: 72000, value: 1200000, loan: 960000 }] },\n      ];\n\n      expect(Calculator.getRealEstateIncome({ borrowers })).to.equal(144000);\n      expect(Calculator.getTotalIncome({ borrowers })).to.equal(0);\n    });\n\n    context('with algoritm POSITIVE_NEGATIVE_SPLIT', () => {\n      let calc;\n\n      beforeEach(() => {\n        calc = new CalculatorClass({\n          realEstateIncomeAlgorithm:\n            REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT,\n        });\n      });\n\n      it('adds to income if delta is positive', () => {\n        const borrowers = [\n          { realEstate: [{ income: 50000, value: 1200000, loan: 960000 }] },\n          { realEstate: [{ income: 73000, value: 1200000, loan: 960000 }] },\n        ];\n\n        expect(calc.getTotalIncome({ borrowers })).to.equal(1000);\n      });\n\n      it('adds to income if delta is positive', () => {\n        const borrowers = [\n          { realEstate: [{ income: 100000, value: 1200000, loan: 960000 }] },\n        ];\n\n        expect(calc.getTotalIncome({ borrowers })).to.equal(28000);\n      });\n\n      it('adds to expenses if delta is negative', () => {\n        const borrowers = [\n          { realEstate: [{ income: 50000, value: 1200000, loan: 960000 }] },\n          { realEstate: [{ income: 100000, value: 1200000, loan: 960000 }] },\n        ];\n\n        expect(calc.getFormattedExpenses({ borrowers })).to.deep.equal({\n          subtract: -28000,\n          add: 22000,\n        });\n      });\n\n      it('considers income based on realEstateIncomeConsideration', () => {\n        calc = new CalculatorClass({\n          realEstateIncomeAlgorithm:\n            REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT,\n          realEstateIncomeConsideration: 0.8,\n        });\n        const borrowers = [\n          { realEstate: [{ income: 100000, value: 1200000, loan: 960000 }] },\n        ];\n\n        expect(calc.getTotalIncome({ borrowers })).to.equal(8000);\n      });\n    });\n  });\n\n  describe('shouldUseNetSalary', () => {\n    it('works when applying global rules', () => {\n      const loan = {\n        structures: [],\n        borrowers: [{ salary: 120000, netSalary: 10000 }],\n      };\n      const calc = new CalculatorClass({\n        loan,\n        lenderRules: [\n          { filter: { and: [true] }, incomeConsiderationType: 'NET' },\n          { filter: { and: [{ '>': [{ var: 'INCOME' }, 100000] }] },  },\n        ],\n      });\n      const result = calc.shouldUseNetSalary();\n      expect(result).to.equal(true);\n\n      const salary = calc.getSalary({ loan });\n      expect(salary).to.equal(10000);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"47b4a771b0aabcd820359ca0124c54ce8ec99eff"}

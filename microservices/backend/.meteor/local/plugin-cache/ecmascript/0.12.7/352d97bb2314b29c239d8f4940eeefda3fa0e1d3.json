{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  default: () => CollectionNode,\n  runFieldSanityChecks: () => runFieldSanityChecks\n});\nlet FieldNode;\nmodule.link(\"./fieldNode.js\", {\n  default(v) {\n    FieldNode = v;\n  }\n\n}, 0);\nlet ReducerNode;\nmodule.link(\"./reducerNode.js\", {\n  default(v) {\n    ReducerNode = v;\n  }\n\n}, 1);\nlet deepClone;\nmodule.link(\"lodash.clonedeep\", {\n  default(v) {\n    deepClone = v;\n  }\n\n}, 2);\nlet check, Match;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nlet expandField, isFieldInProjection;\nmodule.link(\"../lib/fieldInProjection\", {\n  expandField(v) {\n    expandField = v;\n  },\n\n  isFieldInProjection(v) {\n    isFieldInProjection = v;\n  }\n\n}, 4);\n\nclass CollectionNode {\n  constructor(collection, body = {}, linkName = null) {\n    if (collection && !_.isObject(body)) {\n      throw new Meteor.Error('invalid-body', `The field \"${linkName}\" is a collection link, and should have its body defined as an object.`);\n    }\n\n    this.body = deepClone(body);\n    this.linkName = linkName;\n    this.collection = collection;\n    this.nodes = [];\n    this.props = {};\n    this.parent = null;\n    this.linker = null;\n    this.linkStorageField = null;\n    this.scheduledForDeletion = false;\n    this.reducers = [];\n    this.results = [];\n    this.snapCaches = {}; // {cacheField: linkName}\n\n    this.snapCachesSingles = []; // [cacheField1, cacheField2]\n  }\n\n  get collectionNodes() {\n    return _.filter(this.nodes, n => n instanceof CollectionNode);\n  }\n\n  get fieldNodes() {\n    return _.filter(this.nodes, n => n instanceof FieldNode);\n  }\n\n  get reducerNodes() {\n    return _.filter(this.nodes, n => n instanceof ReducerNode);\n  }\n  /**\n   * Adds children to itself\n   *\n   * @param node\n   * @param linker\n   */\n\n\n  add(node, linker) {\n    node.parent = this;\n\n    if (node instanceof FieldNode) {\n      runFieldSanityChecks(node.name);\n    }\n\n    if (linker) {\n      node.linker = linker;\n      node.linkStorageField = linker.linkStorageField;\n      node.isMeta = linker.isMeta();\n      node.isVirtual = linker.isVirtual();\n      node.isOneResult = linker.isOneResult();\n      node.shouldCleanStorage = this._shouldCleanStorage(node);\n    }\n\n    this.nodes.push(node);\n  }\n  /**\n   * @param prop\n   * @param value\n   */\n\n\n  addProp(prop, value) {\n    if (prop === '$postFilter') {\n      check(value, Match.OneOf(Function, [Function]));\n    }\n\n    Object.assign(this.props, {\n      [prop]: value\n    });\n  }\n  /**\n   * @param _node\n   */\n\n\n  remove(_node) {\n    this.nodes = _.filter(this.nodes, node => _node !== node);\n  }\n  /**\n   * @param filters\n   * @param options\n   */\n\n\n  applyFields(filters, options) {\n    let hasAddedAnyField = false;\n\n    _.each(this.fieldNodes, n => {\n      /**\n       * $meta field should be added to the options.fields, but MongoDB does not exclude other fields.\n       * Therefore, we do not count this as a field addition.\n       * \n       * See: https://docs.mongodb.com/manual/reference/operator/projection/meta/\n       * The $meta expression specifies the inclusion of the field to the result set \n       * and does not specify the exclusion of the other fields.\n       */\n      if (n.projectionOperator !== '$meta') {\n        hasAddedAnyField = true;\n      }\n\n      n.applyFields(options.fields);\n    }); // it will only get here if it has collectionNodes children\n\n\n    _.each(this.collectionNodes, collectionNode => {\n      let linker = collectionNode.linker;\n\n      if (linker && !linker.isVirtual()) {\n        if (!isFieldInProjection(options.fields, linker.linkStorageField, true)) {\n          options.fields[linker.linkStorageField] = 1;\n          hasAddedAnyField = true;\n        }\n      }\n    }); // if he selected filters, we should automatically add those fields\n\n\n    _.each(filters, (value, field) => {\n      // special handling for the $meta filter, conditional operators and text search\n      if (!_.contains(['$or', '$nor', '$not', '$and', '$meta', '$text'], field)) {\n        // if the field or the parent of the field already exists, don't add it\n        if (!_.has(options.fields, field.split('.')[0])) {\n          hasAddedAnyField = true;\n          options.fields[field] = 1;\n        }\n      }\n    });\n\n    if (!hasAddedAnyField) {\n      options.fields = (0, _objectSpread2.default)({\n        _id: 1\n      }, options.fields);\n    }\n  }\n  /**\n   * @param fieldName\n   * @returns {boolean}\n   */\n\n\n  hasField(fieldName, checkNested = false) {\n    // for checkNested flag it expands profile.phone.verified into \n    // ['profile', 'profile.phone', 'profile.phone.verified']\n    // if any of these fields match it means that field exists\n    const options = checkNested ? expandField(fieldName) : [fieldName];\n    const result = !!_.find(this.fieldNodes, fieldNode => {\n      return _.contains(options, fieldNode.name);\n    });\n    return result;\n  }\n  /**\n   * @param fieldName\n   * @returns {FieldNode}\n   */\n\n\n  getField(fieldName) {\n    return _.find(this.fieldNodes, fieldNode => {\n      return fieldNode.name == fieldName;\n    });\n  }\n  /**\n   * @param name\n   * @returns {boolean}\n   */\n\n\n  hasCollectionNode(name) {\n    return !!_.find(this.collectionNodes, node => {\n      return node.linkName == name;\n    });\n  }\n  /**\n   * @param name\n   * @returns {boolean}\n   */\n\n\n  hasReducerNode(name) {\n    return !!_.find(this.reducerNodes, node => {\n      return node.name == name;\n    });\n  }\n  /**\n   * @param name\n   * @returns {ReducerNode}\n   */\n\n\n  getReducerNode(name) {\n    return _.find(this.reducerNodes, node => {\n      return node.name == name;\n    });\n  }\n  /**\n   * @param name\n   * @returns {CollectionNode}\n   */\n\n\n  getCollectionNode(name) {\n    return _.find(this.collectionNodes, node => {\n      return node.linkName == name;\n    });\n  }\n  /**\n   * @returns {*}\n   */\n\n\n  getName() {\n    return this.linkName ? this.linkName : this.collection ? this.collection._name : 'N/A';\n  }\n  /**\n   * This is used for caching links\n   *\n   * @param cacheField\n   * @param subLinkName\n   */\n\n\n  snapCache(cacheField, subLinkName) {\n    this.snapCaches[cacheField] = subLinkName;\n\n    if (this.collection.getLinker(subLinkName).isOneResult()) {\n      this.snapCachesSingles.push(cacheField);\n    }\n  }\n  /**\n   * This method verifies whether to remove the linkStorageField form the results\n   * unless you specify it in your query.\n   *\n   * @param node\n   * @returns {boolean}\n   * @private\n   */\n\n\n  _shouldCleanStorage(node) {\n    if (node.linkStorageField === '_id') {\n      return false;\n    } else {\n      if (node.isVirtual) {\n        return !node.hasField(node.linkStorageField, true);\n      } else {\n        return !this.hasField(node.linkStorageField, true);\n      }\n    }\n  }\n\n}\n\nfunction runFieldSanityChecks(fieldName) {\n  // Run sanity checks on the field\n  if (fieldName[0] === '$') {\n    throw new Error(`You are not allowed to use fields that start with $ inside a reducer's body: ${fieldName}`);\n  }\n\n  return true;\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js"],"names":["module","export","default","CollectionNode","runFieldSanityChecks","FieldNode","link","v","ReducerNode","deepClone","check","Match","expandField","isFieldInProjection","constructor","collection","body","linkName","_","isObject","Meteor","Error","nodes","props","parent","linker","linkStorageField","scheduledForDeletion","reducers","results","snapCaches","snapCachesSingles","collectionNodes","filter","n","fieldNodes","reducerNodes","add","node","name","isMeta","isVirtual","isOneResult","shouldCleanStorage","_shouldCleanStorage","push","addProp","prop","value","OneOf","Function","Object","assign","remove","_node","applyFields","filters","options","hasAddedAnyField","each","projectionOperator","fields","collectionNode","field","contains","has","split","_id","hasField","fieldName","checkNested","result","find","fieldNode","getField","hasCollectionNode","hasReducerNode","getReducerNode","getCollectionNode","getName","_name","snapCache","cacheField","subLinkName","getLinker"],"mappings":"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","sourcesContent":["import FieldNode from './fieldNode.js';\nimport ReducerNode from './reducerNode.js';\nimport deepClone from 'lodash.clonedeep';\nimport {check, Match} from 'meteor/check';\nimport {expandField, isFieldInProjection} from '../lib/fieldInProjection';\n\nexport default class CollectionNode {\n    constructor(collection, body = {}, linkName = null) {\n        if (collection && !_.isObject(body)) {\n            throw new Meteor.Error('invalid-body', `The field \"${linkName}\" is a collection link, and should have its body defined as an object.`);\n        }\n\n        this.body = deepClone(body);\n        this.linkName = linkName;\n        this.collection = collection;\n\n        this.nodes = [];\n        this.props = {};\n        this.parent = null;\n        this.linker = null;\n        this.linkStorageField = null;\n        this.scheduledForDeletion = false;\n        this.reducers = [];\n        this.results = [];\n        this.snapCaches = {}; // {cacheField: linkName}\n        this.snapCachesSingles = []; // [cacheField1, cacheField2]\n    }\n\n    get collectionNodes() {\n        return _.filter(this.nodes, n => n instanceof CollectionNode)\n    }\n\n    get fieldNodes() {\n        return _.filter(this.nodes, n => n instanceof FieldNode);\n    }\n\n    get reducerNodes() {\n        return _.filter(this.nodes, n => n instanceof ReducerNode);\n    }\n\n    /**\n     * Adds children to itself\n     *\n     * @param node\n     * @param linker\n     */\n    add(node, linker) {\n        node.parent = this;\n\n        if (node instanceof FieldNode) {\n            runFieldSanityChecks(node.name);\n        }\n        \n        if (linker) {\n            node.linker = linker;\n            node.linkStorageField = linker.linkStorageField;\n            node.isMeta = linker.isMeta();\n            node.isVirtual = linker.isVirtual();\n            node.isOneResult = linker.isOneResult();\n            node.shouldCleanStorage = this._shouldCleanStorage(node);\n        }\n\n        this.nodes.push(node);\n    }\n\n    /**\n     * @param prop\n     * @param value\n     */\n    addProp(prop, value) {\n        if (prop === '$postFilter') {\n            check(value, Match.OneOf(Function, [Function]))\n        }\n\n        Object.assign(this.props, {\n            [prop]: value\n        });\n    }\n\n    /**\n     * @param _node\n     */\n    remove(_node) {\n        this.nodes = _.filter(this.nodes, node => _node !== node);\n    }\n\n    /**\n     * @param filters\n     * @param options\n     */\n    applyFields(filters, options) {\n        let hasAddedAnyField = false;\n\n        _.each(this.fieldNodes, n => {\n            /**\n             * $meta field should be added to the options.fields, but MongoDB does not exclude other fields.\n             * Therefore, we do not count this as a field addition.\n             * \n             * See: https://docs.mongodb.com/manual/reference/operator/projection/meta/\n             * The $meta expression specifies the inclusion of the field to the result set \n             * and does not specify the exclusion of the other fields.\n             */\n            if (n.projectionOperator !== '$meta') {\n                hasAddedAnyField = true;\n            }\n            n.applyFields(options.fields)\n        });\n\n        // it will only get here if it has collectionNodes children\n        _.each(this.collectionNodes, (collectionNode) => {\n            let linker = collectionNode.linker;\n\n            if (linker && !linker.isVirtual()) {\n                if (!isFieldInProjection(options.fields, linker.linkStorageField, true)) {\n                    options.fields[linker.linkStorageField] = 1;\n                    hasAddedAnyField = true;\n                }\n            }\n        });\n\n        // if he selected filters, we should automatically add those fields\n        _.each(filters, (value, field) => {\n            // special handling for the $meta filter, conditional operators and text search\n            if (!_.contains(['$or', '$nor', '$not', '$and', '$meta', '$text'], field)) {\n                // if the field or the parent of the field already exists, don't add it\n                if (!_.has(options.fields, field.split('.')[0])){\n                    hasAddedAnyField = true;\n                    options.fields[field] = 1;\n                }\n            }\n        });\n\n        if (!hasAddedAnyField) {\n            options.fields = {\n                _id: 1,\n                // fields might contain $meta expression, so it should be added here,\n                ...options.fields,\n            };\n        }\n    }\n\n    /**\n     * @param fieldName\n     * @returns {boolean}\n     */\n    hasField(fieldName, checkNested = false) {\n        // for checkNested flag it expands profile.phone.verified into \n        // ['profile', 'profile.phone', 'profile.phone.verified']\n        // if any of these fields match it means that field exists\n\n        const options = checkNested ? expandField(fieldName) : [fieldName];\n\n        const result = !!_.find(this.fieldNodes, fieldNode => {\n            return _.contains(options, fieldNode.name);\n        });\n\n        return result;\n    }\n\n    /**\n     * @param fieldName\n     * @returns {FieldNode}\n     */\n    getField(fieldName) {\n        return _.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasCollectionNode(name) {\n        return !!_.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasReducerNode(name) {\n        return !!_.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {ReducerNode}\n     */\n    getReducerNode(name) {\n        return _.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {CollectionNode}\n     */\n    getCollectionNode(name) {\n        return _.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @returns {*}\n     */\n    getName() {\n        return this.linkName\n            ? this.linkName\n            : (this.collection ? this.collection._name : 'N/A');\n    }\n\n    /**\n     * This is used for caching links\n     *\n     * @param cacheField\n     * @param subLinkName\n     */\n    snapCache(cacheField, subLinkName) {\n        this.snapCaches[cacheField] = subLinkName;\n\n        if (this.collection.getLinker(subLinkName).isOneResult()) {\n            this.snapCachesSingles.push(cacheField);\n        }\n    }\n\n    /**\n     * This method verifies whether to remove the linkStorageField form the results\n     * unless you specify it in your query.\n     *\n     * @param node\n     * @returns {boolean}\n     * @private\n     */\n    _shouldCleanStorage(node) {\n        if (node.linkStorageField === '_id') {\n            return false;\n        } else {\n            if (node.isVirtual) {\n                return !node.hasField(node.linkStorageField, true);\n            } else {\n                return !this.hasField(node.linkStorageField, true);\n            }\n        }\n    }\n}\n\n/**\n * Make sure that the field is ok to be added\n * @param {*} fieldName \n */\nexport function runFieldSanityChecks(fieldName) {\n    // Run sanity checks on the field\n    if (fieldName[0] === '$') {\n        throw new Error(`You are not allowed to use fields that start with $ inside a reducer's body: ${fieldName}`);\n    }\n\n    return true;\n}\n"]},"sourceType":"script","hash":"352d97bb2314b29c239d8f4940eeefda3fa0e1d3"}

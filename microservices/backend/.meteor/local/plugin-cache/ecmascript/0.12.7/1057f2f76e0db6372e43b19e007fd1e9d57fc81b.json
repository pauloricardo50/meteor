{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/queries.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/api/users/queries.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/queries.js","inputSourceMap":{"version":3,"sources":["imports/core/api/users/queries.js"],"names":["createRegexQuery","generateMatchAnyWordRegexp","adminUser","appUser","appUserFragment","fullUser","proUser","proUserFragment","USER_QUERIES","Users","adminUsers","createQuery","ADMIN_USERS","APP_USER","scoped","currentUser","CURRENT_USER","proReferredByUsers","PRO_REFERRED_BY","PRO_USER","userEmails","USER_EMAILS","$filter","filters","params","_id","sentEmails","userSearch","USER_SEARCH","searchQuery","roles","formattedSearchQuery","$in","$or","$and","assignedEmployee","name","createdAt","email","loans","organisations","$options","limit"],"mappings":"AAAA,SACEA,gBADF,EAEEC,0BAFF;AAIA,SACEC,SADF,EAEEC,OAAO,IAAIC,eAFb,EAGEC,QAHF,EAIEC,OAAO,IAAIC,eAJb;AAOA,SAASC,YAAT;AACA,OAAOC,KAAP,MAAkB,GAAlB;AAEA,OAAO,MAAMC,UAAU,GAAGD,KAAK,CAACE,WAAN,CACxBH,YAAY,CAACI,WADW,EAExBV,SAAS,EAFe,CAAnB;AAKP,OAAO,MAAMC,OAAO,GAAGM,KAAK,CAACE,WAAN,CACrBH,YAAY,CAACK,QADQ,EAErBT,eAAe,EAFM,EAGrB;AAAEU,EAAAA,MAAM,EAAE;AAAV,CAHqB,CAAhB;AAMP,OAAO,MAAMC,WAAW,GAAGN,KAAK,CAACE,WAAN,CACzBH,YAAY,CAACQ,YADY,EAEzBX,QAAQ,EAFiB,EAGzB;AAAES,EAAAA,MAAM,EAAE;AAAV,CAHyB,CAApB;AAMP,OAAO,MAAMG,kBAAkB,GAAGR,KAAK,CAACE,WAAN,CAChCH,YAAY,CAACU,eADmB,EAEhC,MAAM,CAAE,CAFwB,CAA3B;AAKP,OAAO,MAAMZ,OAAO,GAAGG,KAAK,CAACE,WAAN,CACrBH,YAAY,CAACW,QADQ,EAErBZ,eAAe,EAFM,CAAhB;AAKP,OAAO,MAAMa,UAAU,GAAGX,KAAK,CAACE,WAAN,CAAkBH,YAAY,CAACa,WAA/B,EAA4C;AACpEC,EAAAA,OAAO,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAnB,GAAD,EAA+B;AACpCF,IAAAA,OAAO,CAACE,GAAR,GAAcA,GAAd;AACD,GAHmE;;AAIpEC,EAAAA,UAAU,EAAE;AAJwD,CAA5C,CAAnB;AAOP,OAAO,MAAMC,UAAU,GAAGlB,KAAK,CAACE,WAAN,CAAkBH,YAAY,CAACoB,WAA/B,EAA4C;AACpEN,EAAAA,OAAO,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAM,EAAE;AAAEK,MAAAA,WAAF;AAAeC,MAAAA;AAAf;AAAnB,GAAD,EAA8C;AACnD,UAAMC,oBAAoB,GAAG9B,0BAA0B,CAAC4B,WAAD,CAAvD;;AACA,QAAIC,KAAJ,EAAW;AACTP,MAAAA,OAAO,CAACO,KAAR,GAAgB;AAAEE,QAAAA,GAAG,EAAEF;AAAP,OAAhB;AACD;;AACDP,IAAAA,OAAO,CAACU,GAAR,GAAc,CACZjC,gBAAgB,CAAC,KAAD,EAAQ6B,WAAR,CADJ,EAEZ7B,gBAAgB,CAAC,kBAAD,EAAqB6B,WAArB,CAFJ,EAGZ7B,gBAAgB,CAAC,WAAD,EAAc6B,WAAd,CAHJ,EAIZ7B,gBAAgB,CAAC,UAAD,EAAa6B,WAAb,CAJJ,EAKZ;AACEK,MAAAA,IAAI,EAAE,CACJlC,gBAAgB,CAAC,WAAD,EAAc+B,oBAAd,CADZ,EAEJ/B,gBAAgB,CAAC,UAAD,EAAa+B,oBAAb,CAFZ;AADR,KALY,CAAd;AAYD,GAlBmE;;AAmBpEI,EAAAA,gBAAgB,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAnBkD;AAoBpEC,EAAAA,SAAS,EAAE,CApByD;AAqBpEC,EAAAA,KAAK,EAAE,CArB6D;AAsBpEC,EAAAA,KAAK,EAAE;AAAEH,IAAAA,IAAI,EAAE;AAAR,GAtB6D;AAuBpEA,EAAAA,IAAI,EAAE,CAvB8D;AAwBpEI,EAAAA,aAAa,EAAE;AAAEJ,IAAAA,IAAI,EAAE;AAAR,GAxBqD;AAyBpEN,EAAAA,KAAK,EAAE,CAzB6D;AA0BpEW,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT;AA1B0D,CAA5C,CAAnB","sourcesContent":["import {\n  createRegexQuery,\n  generateMatchAnyWordRegexp,\n} from '../helpers/mongoHelpers';\nimport {\n  adminUser,\n  appUser as appUserFragment,\n  fullUser,\n  proUser as proUserFragment,\n} from '../fragments';\n\nimport { USER_QUERIES } from './userConstants';\nimport Users from '.';\n\nexport const adminUsers = Users.createQuery(\n  USER_QUERIES.ADMIN_USERS,\n  adminUser(),\n);\n\nexport const appUser = Users.createQuery(\n  USER_QUERIES.APP_USER,\n  appUserFragment(),\n  { scoped: true },\n);\n\nexport const currentUser = Users.createQuery(\n  USER_QUERIES.CURRENT_USER,\n  fullUser(),\n  { scoped: true },\n);\n\nexport const proReferredByUsers = Users.createQuery(\n  USER_QUERIES.PRO_REFERRED_BY,\n  () => {},\n);\n\nexport const proUser = Users.createQuery(\n  USER_QUERIES.PRO_USER,\n  proUserFragment(),\n);\n\nexport const userEmails = Users.createQuery(USER_QUERIES.USER_EMAILS, {\n  $filter({ filters, params: { _id } }) {\n    filters._id = _id;\n  },\n  sentEmails: 1,\n});\n\nexport const userSearch = Users.createQuery(USER_QUERIES.USER_SEARCH, {\n  $filter({ filters, params: { searchQuery, roles } }) {\n    const formattedSearchQuery = generateMatchAnyWordRegexp(searchQuery);\n    if (roles) {\n      filters.roles = { $in: roles };\n    }\n    filters.$or = [\n      createRegexQuery('_id', searchQuery),\n      createRegexQuery('emails.0.address', searchQuery),\n      createRegexQuery('firstName', searchQuery),\n      createRegexQuery('lastName', searchQuery),\n      {\n        $and: [\n          createRegexQuery('firstName', formattedSearchQuery),\n          createRegexQuery('lastName', formattedSearchQuery),\n        ],\n      },\n    ];\n  },\n  assignedEmployee: { name: 1 },\n  createdAt: 1,\n  email: 1,\n  loans: { name: 1 },\n  name: 1,\n  organisations: { name: 1 },\n  roles: 1,\n  $options: { limit: 5 },\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/queries.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/users/queries.js"}},"code":"module.export({\n  adminUsers: () => adminUsers,\n  appUser: () => appUser,\n  currentUser: () => currentUser,\n  proReferredByUsers: () => proReferredByUsers,\n  proUser: () => proUser,\n  userEmails: () => userEmails,\n  userSearch: () => userSearch\n});\nlet createRegexQuery, generateMatchAnyWordRegexp;\nmodule.link(\"../helpers/mongoHelpers\", {\n  createRegexQuery(v) {\n    createRegexQuery = v;\n  },\n\n  generateMatchAnyWordRegexp(v) {\n    generateMatchAnyWordRegexp = v;\n  }\n\n}, 0);\nlet adminUser, appUserFragment, fullUser, proUserFragment;\nmodule.link(\"../fragments\", {\n  adminUser(v) {\n    adminUser = v;\n  },\n\n  appUser(v) {\n    appUserFragment = v;\n  },\n\n  fullUser(v) {\n    fullUser = v;\n  },\n\n  proUser(v) {\n    proUserFragment = v;\n  }\n\n}, 1);\nlet USER_QUERIES;\nmodule.link(\"./userConstants\", {\n  USER_QUERIES(v) {\n    USER_QUERIES = v;\n  }\n\n}, 2);\nlet Users;\nmodule.link(\".\", {\n  default(v) {\n    Users = v;\n  }\n\n}, 3);\nconst adminUsers = Users.createQuery(USER_QUERIES.ADMIN_USERS, adminUser());\nconst appUser = Users.createQuery(USER_QUERIES.APP_USER, appUserFragment(), {\n  scoped: true\n});\nconst currentUser = Users.createQuery(USER_QUERIES.CURRENT_USER, fullUser(), {\n  scoped: true\n});\nconst proReferredByUsers = Users.createQuery(USER_QUERIES.PRO_REFERRED_BY, () => {});\nconst proUser = Users.createQuery(USER_QUERIES.PRO_USER, proUserFragment());\nconst userEmails = Users.createQuery(USER_QUERIES.USER_EMAILS, {\n  $filter(_ref) {\n    let {\n      filters,\n      params: {\n        _id\n      }\n    } = _ref;\n    filters._id = _id;\n  },\n\n  sentEmails: 1\n});\nconst userSearch = Users.createQuery(USER_QUERIES.USER_SEARCH, {\n  $filter(_ref2) {\n    let {\n      filters,\n      params: {\n        searchQuery,\n        roles\n      }\n    } = _ref2;\n    const formattedSearchQuery = generateMatchAnyWordRegexp(searchQuery);\n\n    if (roles) {\n      filters.roles = {\n        $in: roles\n      };\n    }\n\n    filters.$or = [createRegexQuery('_id', searchQuery), createRegexQuery('emails.0.address', searchQuery), createRegexQuery('firstName', searchQuery), createRegexQuery('lastName', searchQuery), {\n      $and: [createRegexQuery('firstName', formattedSearchQuery), createRegexQuery('lastName', formattedSearchQuery)]\n    }];\n  },\n\n  assignedEmployee: {\n    name: 1\n  },\n  createdAt: 1,\n  email: 1,\n  loans: {\n    name: 1\n  },\n  name: 1,\n  organisations: {\n    name: 1\n  },\n  roles: 1,\n  $options: {\n    limit: 5\n  }\n});","map":{"version":3,"sources":["imports/core/api/users/queries.js"],"names":["createRegexQuery","generateMatchAnyWordRegexp","adminUsers","Users","USER_QUERIES","adminUser","appUser","appUserFragment","scoped","currentUser","fullUser","proReferredByUsers","proUser","proUserFragment","userEmails","$filter","params","_id","filters","sentEmails","userSearch","roles","formattedSearchQuery","$in","$and","assignedEmployee","name","createdAt","email","loans","organisations","$options","limit"],"mappings":"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","sourcesContent":["import {\n  createRegexQuery,\n  generateMatchAnyWordRegexp,\n} from '../helpers/mongoHelpers';\nimport {\n  adminUser,\n  appUser as appUserFragment,\n  fullUser,\n  proUser as proUserFragment,\n} from '../fragments';\n\nimport { USER_QUERIES } from './userConstants';\nimport Users from '.';\n\nexport const adminUsers = Users.createQuery(\n  USER_QUERIES.ADMIN_USERS,\n  adminUser(),\n);\n\nexport const appUser = Users.createQuery(\n  USER_QUERIES.APP_USER,\n  appUserFragment(),\n  { scoped: true },\n);\n\nexport const currentUser = Users.createQuery(\n  USER_QUERIES.CURRENT_USER,\n  fullUser(),\n  { scoped: true },\n);\n\nexport const proReferredByUsers = Users.createQuery(\n  USER_QUERIES.PRO_REFERRED_BY,\n  () => {},\n);\n\nexport const proUser = Users.createQuery(\n  USER_QUERIES.PRO_USER,\n  proUserFragment(),\n);\n\nexport const userEmails = Users.createQuery(USER_QUERIES.USER_EMAILS, {\n  $filter({ filters, params: { _id } }) {\n    filters._id = _id;\n  },\n  sentEmails: 1,\n});\n\nexport const userSearch = Users.createQuery(USER_QUERIES.USER_SEARCH, {\n  $filter({ filters, params: { searchQuery, roles } }) {\n    const formattedSearchQuery = generateMatchAnyWordRegexp(searchQuery);\n    if (roles) {\n      filters.roles = { $in: roles };\n    }\n    filters.$or = [\n      createRegexQuery('_id', searchQuery),\n      createRegexQuery('emails.0.address', searchQuery),\n      createRegexQuery('firstName', searchQuery),\n      createRegexQuery('lastName', searchQuery),\n      {\n        $and: [\n          createRegexQuery('firstName', formattedSearchQuery),\n          createRegexQuery('lastName', formattedSearchQuery),\n        ],\n      },\n    ];\n  },\n  assignedEmployee: { name: 1 },\n  createdAt: 1,\n  email: 1,\n  loans: { name: 1 },\n  name: 1,\n  organisations: { name: 1 },\n  roles: 1,\n  $options: { limit: 5 },\n});\n"]},"sourceType":"script","hash":"1057f2f76e0db6372e43b19e007fd1e9d57fc81b"}

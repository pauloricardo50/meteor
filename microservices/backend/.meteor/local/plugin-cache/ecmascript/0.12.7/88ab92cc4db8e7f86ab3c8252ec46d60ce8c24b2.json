{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/5.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/migrations/server/test/5.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/5.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/migrations/server/test/5.test.js"],"names":["expect","resetDatabase","generator","ORGANISATION_TYPES","ORGANISATION_FEATURES","Loans","up","down","describe","skip","beforeEach","organisations","name","type","BANK","features","LENDER","lenderRules","_factory","order","maxBorrowRatio","it","loanIds","loans","map","_id","borrowers","bankFortune","salary","insurance2","value","rawCollection","update","$set","maxSolvency","canton","date","Date","main","propertyValue","borrowRatio","second","then","loan1","findOne","loan2","maxPropertyValue","to","equal","undefined","not","deep","min","max"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport generator from '../../../factories';\nimport { ORGANISATION_TYPES, ORGANISATION_FEATURES } from '../../../constants';\nimport { Loans } from '../../..';\nimport { up, down } from '../5';\n\n// Tests are out of date with new max property calculation\ndescribe.skip('Migration 5', () => {\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      organisations: [\n        {\n          name: 'org',\n          type: ORGANISATION_TYPES.BANK,\n          features: [ORGANISATION_FEATURES.LENDER],\n          lenderRules: [\n            { _factory: 'lenderRulesAll', order: 0 },\n            { _factory: 'lenderRulesMain', maxBorrowRatio: 0.9, order: 1 },\n            { _factory: 'lenderRulesSecondary', maxBorrowRatio: 0.7, order: 2 },\n          ],\n        },\n        {\n          name: 'org2',\n          type: ORGANISATION_TYPES.BANK,\n          features: [ORGANISATION_FEATURES.LENDER],\n          lenderRules: [\n            { _factory: 'lenderRulesAll', order: 0 },\n            { _factory: 'lenderRulesMain', maxBorrowRatio: 0.7, order: 1 },\n            {\n              _factory: 'lenderRulesSecondary',\n              maxBorrowRatio: 0.65,\n              order: 2,\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  describe('up', () => {\n    it('adds range on maxPropertyValue', () => {\n      const loanIds = ['loanId1', 'loanId2'];\n      generator({\n        loans: loanIds.map(_id => ({\n          _id,\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{ value: 100000 }],\n          },\n        })),\n      });\n\n      return Loans.rawCollection()\n        .update(\n          { _id: 'loanId1' },\n          {\n            $set: {\n              maxSolvency: {\n                canton: 'GE',\n                date: new Date(),\n                main: { propertyValue: 1000000, borrowRatio: 0.8 },\n                second: { propertyValue: 900000, borrowRatio: 0.7 },\n              },\n            },\n          },\n        )\n        .then(up)\n        .then(() => {\n          const loan1 = Loans.findOne({ _id: 'loanId1' });\n          const loan2 = Loans.findOne({ _id: 'loanId2' });\n\n          expect(loan2.maxPropertyValue).to.equal(undefined);\n          expect(loan1.maxSolvency).to.equal(undefined);\n          expect(loan1.maxPropertyValue).to.not.equal(undefined);\n          expect(loan1.maxPropertyValue.main).to.not.equal(undefined);\n          expect(loan1.maxPropertyValue.main).to.deep.equal({\n            min: { borrowRatio: 0.7, propertyValue: 1707000 },\n            max: { borrowRatio: 0.8713, propertyValue: 3278000 },\n          });\n          expect(loan1.maxPropertyValue.second).to.not.equal(undefined);\n          expect(loan1.maxPropertyValue.second).to.deep.equal({\n            min: { borrowRatio: 0.65, propertyValue: 1244000 },\n            max: { borrowRatio: 0.7, propertyValue: 1420000 },\n          });\n        });\n    });\n  });\n\n  describe('down', () => {\n    it('removes range on maxPropertyValue', () => {\n      const loanIds = ['loanId1', 'loanId2'];\n      generator({\n        loans: loanIds.map(_id => ({\n          _id,\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{ value: 100000 }],\n          },\n        })),\n      });\n\n      return Loans.rawCollection()\n        .update(\n          { _id: 'loanId1' },\n          {\n            $set: {\n              maxPropertyValue: {\n                canton: 'GE',\n                date: new Date(),\n                main: {\n                  min: { borrowRatio: 0.7, propertyValue: 1707000 },\n                  max: { borrowRatio: 0.8713, propertyValue: 3278000 },\n                },\n                second: {\n                  min: { borrowRatio: 0.65, propertyValue: 1244000 },\n                  max: { borrowRatio: 0.7, propertyValue: 1420000 },\n                },\n              },\n            },\n          },\n        )\n        .then(down)\n        .then(() => {\n          const loan1 = Loans.findOne({ _id: 'loanId1' });\n          const loan2 = Loans.findOne({ _id: 'loanId2' });\n\n          expect(loan2.maxPropertyValue).to.equal(undefined);\n          expect(loan1.maxPropertyValue).to.equal(undefined);\n          expect(loan1.maxSolvency).to.not.equal(undefined);\n          expect(loan1.maxSolvency.main).to.not.equal(undefined);\n          expect(loan1.maxSolvency.main).to.deep.equal({\n            borrowRatio: 0.8713,\n            propertyValue: 3278000,\n          });\n          expect(loan1.maxSolvency.second).to.not.equal(undefined);\n          expect(loan1.maxSolvency.second).to.deep.equal({\n            borrowRatio: 0.7,\n            propertyValue: 1420000,\n          });\n        });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/5.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/migrations/server/test/5.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 2);\nlet ORGANISATION_TYPES, ORGANISATION_FEATURES;\nmodule.link(\"../../../constants\", {\n  ORGANISATION_TYPES(v) {\n    ORGANISATION_TYPES = v;\n  },\n\n  ORGANISATION_FEATURES(v) {\n    ORGANISATION_FEATURES = v;\n  }\n\n}, 3);\nlet Loans;\nmodule.link(\"../../..\", {\n  Loans(v) {\n    Loans = v;\n  }\n\n}, 4);\nlet up, down;\nmodule.link(\"../5\", {\n  up(v) {\n    up = v;\n  },\n\n  down(v) {\n    down = v;\n  }\n\n}, 5);\n// Tests are out of date with new max property calculation\ndescribe.skip('Migration 5', () => {\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      organisations: [{\n        name: 'org',\n        type: ORGANISATION_TYPES.BANK,\n        features: [ORGANISATION_FEATURES.LENDER],\n        lenderRules: [{\n          _factory: 'lenderRulesAll',\n          order: 0\n        }, {\n          _factory: 'lenderRulesMain',\n          maxBorrowRatio: 0.9,\n          order: 1\n        }, {\n          _factory: 'lenderRulesSecondary',\n          maxBorrowRatio: 0.7,\n          order: 2\n        }]\n      }, {\n        name: 'org2',\n        type: ORGANISATION_TYPES.BANK,\n        features: [ORGANISATION_FEATURES.LENDER],\n        lenderRules: [{\n          _factory: 'lenderRulesAll',\n          order: 0\n        }, {\n          _factory: 'lenderRulesMain',\n          maxBorrowRatio: 0.7,\n          order: 1\n        }, {\n          _factory: 'lenderRulesSecondary',\n          maxBorrowRatio: 0.65,\n          order: 2\n        }]\n      }]\n    });\n  });\n  describe('up', () => {\n    it('adds range on maxPropertyValue', () => {\n      const loanIds = ['loanId1', 'loanId2'];\n      generator({\n        loans: loanIds.map(_id => ({\n          _id,\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{\n              value: 100000\n            }]\n          }\n        }))\n      });\n      return Loans.rawCollection().update({\n        _id: 'loanId1'\n      }, {\n        $set: {\n          maxSolvency: {\n            canton: 'GE',\n            date: new Date(),\n            main: {\n              propertyValue: 1000000,\n              borrowRatio: 0.8\n            },\n            second: {\n              propertyValue: 900000,\n              borrowRatio: 0.7\n            }\n          }\n        }\n      }).then(up).then(() => {\n        const loan1 = Loans.findOne({\n          _id: 'loanId1'\n        });\n        const loan2 = Loans.findOne({\n          _id: 'loanId2'\n        });\n        expect(loan2.maxPropertyValue).to.equal(undefined);\n        expect(loan1.maxSolvency).to.equal(undefined);\n        expect(loan1.maxPropertyValue).to.not.equal(undefined);\n        expect(loan1.maxPropertyValue.main).to.not.equal(undefined);\n        expect(loan1.maxPropertyValue.main).to.deep.equal({\n          min: {\n            borrowRatio: 0.7,\n            propertyValue: 1707000\n          },\n          max: {\n            borrowRatio: 0.8713,\n            propertyValue: 3278000\n          }\n        });\n        expect(loan1.maxPropertyValue.second).to.not.equal(undefined);\n        expect(loan1.maxPropertyValue.second).to.deep.equal({\n          min: {\n            borrowRatio: 0.65,\n            propertyValue: 1244000\n          },\n          max: {\n            borrowRatio: 0.7,\n            propertyValue: 1420000\n          }\n        });\n      });\n    });\n  });\n  describe('down', () => {\n    it('removes range on maxPropertyValue', () => {\n      const loanIds = ['loanId1', 'loanId2'];\n      generator({\n        loans: loanIds.map(_id => ({\n          _id,\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{\n              value: 100000\n            }]\n          }\n        }))\n      });\n      return Loans.rawCollection().update({\n        _id: 'loanId1'\n      }, {\n        $set: {\n          maxPropertyValue: {\n            canton: 'GE',\n            date: new Date(),\n            main: {\n              min: {\n                borrowRatio: 0.7,\n                propertyValue: 1707000\n              },\n              max: {\n                borrowRatio: 0.8713,\n                propertyValue: 3278000\n              }\n            },\n            second: {\n              min: {\n                borrowRatio: 0.65,\n                propertyValue: 1244000\n              },\n              max: {\n                borrowRatio: 0.7,\n                propertyValue: 1420000\n              }\n            }\n          }\n        }\n      }).then(down).then(() => {\n        const loan1 = Loans.findOne({\n          _id: 'loanId1'\n        });\n        const loan2 = Loans.findOne({\n          _id: 'loanId2'\n        });\n        expect(loan2.maxPropertyValue).to.equal(undefined);\n        expect(loan1.maxPropertyValue).to.equal(undefined);\n        expect(loan1.maxSolvency).to.not.equal(undefined);\n        expect(loan1.maxSolvency.main).to.not.equal(undefined);\n        expect(loan1.maxSolvency.main).to.deep.equal({\n          borrowRatio: 0.8713,\n          propertyValue: 3278000\n        });\n        expect(loan1.maxSolvency.second).to.not.equal(undefined);\n        expect(loan1.maxSolvency.second).to.deep.equal({\n          borrowRatio: 0.7,\n          propertyValue: 1420000\n        });\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/migrations/server/test/5.test.js"],"names":["describe","beforeEach","resetDatabase","generator","organisations","name","type","ORGANISATION_TYPES","features","ORGANISATION_FEATURES","lenderRules","_factory","order","maxBorrowRatio","it","loanIds","loans","_id","borrowers","bankFortune","salary","insurance2","value","$set","maxSolvency","canton","date","main","propertyValue","borrowRatio","second","loan1","loan2","expect","min","max","maxPropertyValue"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport generator from '../../../factories';\nimport { ORGANISATION_TYPES, ORGANISATION_FEATURES } from '../../../constants';\nimport { Loans } from '../../..';\nimport { up, down } from '../5';\n\n// Tests are out of date with new max property calculation\ndescribe.skip('Migration 5', () => {\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      organisations: [\n        {\n          name: 'org',\n          type: ORGANISATION_TYPES.BANK,\n          features: [ORGANISATION_FEATURES.LENDER],\n          lenderRules: [\n            { _factory: 'lenderRulesAll', order: 0 },\n            { _factory: 'lenderRulesMain', maxBorrowRatio: 0.9, order: 1 },\n            { _factory: 'lenderRulesSecondary', maxBorrowRatio: 0.7, order: 2 },\n          ],\n        },\n        {\n          name: 'org2',\n          type: ORGANISATION_TYPES.BANK,\n          features: [ORGANISATION_FEATURES.LENDER],\n          lenderRules: [\n            { _factory: 'lenderRulesAll', order: 0 },\n            { _factory: 'lenderRulesMain', maxBorrowRatio: 0.7, order: 1 },\n            {\n              _factory: 'lenderRulesSecondary',\n              maxBorrowRatio: 0.65,\n              order: 2,\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  describe('up', () => {\n    it('adds range on maxPropertyValue', () => {\n      const loanIds = ['loanId1', 'loanId2'];\n      generator({\n        loans: loanIds.map(_id => ({\n          _id,\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{ value: 100000 }],\n          },\n        })),\n      });\n\n      return Loans.rawCollection()\n        .update(\n          { _id: 'loanId1' },\n          {\n            $set: {\n              maxSolvency: {\n                canton: 'GE',\n                date: new Date(),\n                main: { propertyValue: 1000000, borrowRatio: 0.8 },\n                second: { propertyValue: 900000, borrowRatio: 0.7 },\n              },\n            },\n          },\n        )\n        .then(up)\n        .then(() => {\n          const loan1 = Loans.findOne({ _id: 'loanId1' });\n          const loan2 = Loans.findOne({ _id: 'loanId2' });\n\n          expect(loan2.maxPropertyValue).to.equal(undefined);\n          expect(loan1.maxSolvency).to.equal(undefined);\n          expect(loan1.maxPropertyValue).to.not.equal(undefined);\n          expect(loan1.maxPropertyValue.main).to.not.equal(undefined);\n          expect(loan1.maxPropertyValue.main).to.deep.equal({\n            min: { borrowRatio: 0.7, propertyValue: 1707000 },\n            max: { borrowRatio: 0.8713, propertyValue: 3278000 },\n          });\n          expect(loan1.maxPropertyValue.second).to.not.equal(undefined);\n          expect(loan1.maxPropertyValue.second).to.deep.equal({\n            min: { borrowRatio: 0.65, propertyValue: 1244000 },\n            max: { borrowRatio: 0.7, propertyValue: 1420000 },\n          });\n        });\n    });\n  });\n\n  describe('down', () => {\n    it('removes range on maxPropertyValue', () => {\n      const loanIds = ['loanId1', 'loanId2'];\n      generator({\n        loans: loanIds.map(_id => ({\n          _id,\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{ value: 100000 }],\n          },\n        })),\n      });\n\n      return Loans.rawCollection()\n        .update(\n          { _id: 'loanId1' },\n          {\n            $set: {\n              maxPropertyValue: {\n                canton: 'GE',\n                date: new Date(),\n                main: {\n                  min: { borrowRatio: 0.7, propertyValue: 1707000 },\n                  max: { borrowRatio: 0.8713, propertyValue: 3278000 },\n                },\n                second: {\n                  min: { borrowRatio: 0.65, propertyValue: 1244000 },\n                  max: { borrowRatio: 0.7, propertyValue: 1420000 },\n                },\n              },\n            },\n          },\n        )\n        .then(down)\n        .then(() => {\n          const loan1 = Loans.findOne({ _id: 'loanId1' });\n          const loan2 = Loans.findOne({ _id: 'loanId2' });\n\n          expect(loan2.maxPropertyValue).to.equal(undefined);\n          expect(loan1.maxPropertyValue).to.equal(undefined);\n          expect(loan1.maxSolvency).to.not.equal(undefined);\n          expect(loan1.maxSolvency.main).to.not.equal(undefined);\n          expect(loan1.maxSolvency.main).to.deep.equal({\n            borrowRatio: 0.8713,\n            propertyValue: 3278000,\n          });\n          expect(loan1.maxSolvency.second).to.not.equal(undefined);\n          expect(loan1.maxSolvency.second).to.deep.equal({\n            borrowRatio: 0.7,\n            propertyValue: 1420000,\n          });\n        });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"88ab92cc4db8e7f86ab3c8252ec46d60ce8c24b2"}

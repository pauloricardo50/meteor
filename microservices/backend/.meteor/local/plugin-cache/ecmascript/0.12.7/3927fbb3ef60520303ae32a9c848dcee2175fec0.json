{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/queries/test/client/clientQueries.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/api/queries/test/client/clientQueries.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/queries/test/client/clientQueries.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/queries/test/client/clientQueries.test.js"],"names":["Meteor","expect","userLogin","resetDatabase","query1","query2","query3","query4","testCollectionInsert","console","log","insertTestData","n","promises","Array","map","_","index","run","_id","name","value","Promise","all","then","fetchQueries","queries","params","promise","forEach","query","items","resolve","reject","clone","fetch","err","queryItems","insertAndFetchTestData","fetchQuery1","fetchQuery2","fetchQuery3","fetchQuery4","filter","x","describe","beforeEach","it","named_query_TEST_QUERY_1","length","to","equal","named_query_TEST_QUERY_2","context","$body","undefined","$limit","$skip","$sort","Error","catch","error","message","contain","userId","named_query_TEST_QUERY_4","_userId"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\n\nimport { expect } from 'chai';\n\nimport { userLogin, resetDatabase } from 'core/utils/testHelpers/index';\nimport {\n  query1,\n  query2,\n  query3,\n  query4,\n  testCollectionInsert,\n} from '../collection.app-test';\n\nconsole.log('testCollectionInsert:', testCollectionInsert);\n\nconst insertTestData = (n) => {\n  const promises = [...Array(n)].map((_, index) =>\n    testCollectionInsert.run({\n      _id: `test${index}`,\n      name: `test${index % 4}`,\n      value: index,\n    }));\n  return Promise.all(promises).then(() => ({}));\n};\n\nconst fetchQueries = ({ queries = [], params, promise }) => {\n  queries.forEach((query) => {\n    promise = promise.then((items = {}) =>\n      new Promise((resolve, reject) => {\n        query\n          .clone(params)\n          .fetch((err, queryItems) =>\n            (err\n              ? reject(err)\n              : resolve({ ...items, [query.name]: queryItems })));\n      }));\n  });\n\n  return promise;\n};\n\nconst insertAndFetchTestData = (\n  n,\n  params = {},\n  {\n    fetchQuery1 = true,\n    fetchQuery2 = true,\n    fetchQuery3 = false,\n    fetchQuery4 = false,\n  } = {},\n) => {\n  const promise = insertTestData(n);\n  return fetchQueries({\n    queries: [\n      fetchQuery1 && query1,\n      fetchQuery2 && query2,\n      fetchQuery3 && query3,\n      fetchQuery4 && query4,\n    ].filter(x => x),\n    params,\n    promise,\n  });\n};\n\ndescribe('exposeQuery', () => {\n  beforeEach(() => resetDatabase());\n\n  it('returns expected data without using overrides', () =>\n    insertAndFetchTestData(100).then((items) => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n    }));\n\n  context('returns expected data when overriding', () => {\n    it('the body', () =>\n      insertAndFetchTestData(100, { $body: { value: 1 } }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_1[0].name).to.equal(undefined);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n        expect(items.named_query_TEST_QUERY_2[0].name).to.equal(undefined);\n      }));\n\n    it('the limit option', () =>\n      insertAndFetchTestData(100, { $limit: 5 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(5);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(5);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      }));\n\n    it('the limit option greather than the server value', () =>\n      insertAndFetchTestData(100, { $limit: 20 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      }));\n\n    it('the skip option', () =>\n      insertAndFetchTestData(100, { $skip: 7 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(38);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(28);\n      }));\n\n    it('the sort option', () =>\n      insertAndFetchTestData(100, { $sort: { value: -1 } }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(99);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(99);\n      }));\n\n    it('the sort option on multiple fields ', () =>\n      insertAndFetchTestData(50, { $sort: { name: -1, value: -1 } })\n        .then((items) => {\n          expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_1[0].value).to.equal(47);\n          expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_2[0].value).to.equal(47);\n        })\n        .then(() => resetDatabase())\n        .then(() =>\n          insertAndFetchTestData(50, { $sort: { name: -1, value: 1 } }))\n        .then((items) => {\n          expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n          expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n        }));\n  });\n\n  it('throws when client tries to filter by _id when it is not allowed', () =>\n    insertAndFetchTestData(100, { _id: 'test50' }, { fetchQuery2: false })\n      .then(() => {\n        throw new Meteor.Error('Test should throw');\n      })\n      .catch(error => expect(error.message).to.contain('Match failed')));\n\n  describe('returns expected data when using filters', () => {\n    it('on client only', () =>\n      insertAndFetchTestData(100, { name: 'test3' }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        items.named_query_TEST_QUERY_1.forEach(({ name }) =>\n          expect(name).to.equal('test3'));\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n        items.named_query_TEST_QUERY_2.forEach(({ name }) =>\n          expect(name).to.equal('test3'));\n      }));\n\n    it('on server only', () =>\n      insertAndFetchTestData(\n        100,\n        { _id: 'test50' },\n        { fetchQuery1: false },\n      ).then((items) => {\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(1);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(50);\n      }));\n\n    it('on client and server', () =>\n      insertAndFetchTestData(\n        30,\n        { name: 'test3', _id: 'test50' },\n        { fetchQuery1: false },\n      ).then((items) => {\n        // Name and _id filters apply in query2, resulting in an empty array of results\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(0);\n      }));\n  });\n\n  it('uses default firewall if not overriden', () =>\n    insertAndFetchTestData(\n      30,\n      {},\n      { fetchQuery1: false, fetchQuery2: false, fetchQuery3: true },\n    )\n      .then(() => {\n        throw new Meteor.Error('Test should throw');\n      })\n      .catch(error => expect(error.message).to.contain('NOT_AUTHORIZED')));\n\n  it('injects _userId in params', () =>\n    userLogin({})\n      .then(() =>\n        insertAndFetchTestData(\n          30,\n          { name: 'test3' },\n          { fetchQuery1: false, fetchQuery2: false, fetchQuery4: true },\n        ))\n      .then((items) => {\n        const userId = Meteor.userId();\n        items.named_query_TEST_QUERY_4.forEach(({ _userId, name }) => {\n          expect(_userId).to.equal(userId);\n          expect(name).to.equal('test3');\n        });\n      }));\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/queries/test/client/clientQueries.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/queries/test/client/clientQueries.test.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread3 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 1);\nvar userLogin, resetDatabase;\nmodule.link(\"../../../../utils/testHelpers\", {\n  userLogin: function (v) {\n    userLogin = v;\n  },\n  resetDatabase: function (v) {\n    resetDatabase = v;\n  }\n}, 2);\nvar query1, query2, query3, query4, testCollectionInsert;\nmodule.link(\"../collection.app-test\", {\n  query1: function (v) {\n    query1 = v;\n  },\n  query2: function (v) {\n    query2 = v;\n  },\n  query3: function (v) {\n    query3 = v;\n  },\n  query4: function (v) {\n    query4 = v;\n  },\n  testCollectionInsert: function (v) {\n    testCollectionInsert = v;\n  }\n}, 3);\nconsole.log('testCollectionInsert:', testCollectionInsert);\n\nvar insertTestData = function (n) {\n  var promises = (0, _toConsumableArray2.default)(Array(n)).map(function (_, index) {\n    return testCollectionInsert.run({\n      _id: \"test\" + index,\n      name: \"test\" + index % 4,\n      value: index\n    });\n  });\n  return Promise.all(promises).then(function () {\n    return {};\n  });\n};\n\nvar fetchQueries = function (_ref) {\n  var _ref$queries = _ref.queries,\n      queries = _ref$queries === void 0 ? [] : _ref$queries,\n      params = _ref.params,\n      promise = _ref.promise;\n  queries.forEach(function (query) {\n    promise = promise.then(function () {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Promise(function (resolve, reject) {\n        query.clone(params).fetch(function (err, queryItems) {\n          var _objectSpread2;\n\n          return err ? reject(err) : resolve((0, _objectSpread3.default)({}, items, (_objectSpread2 = {}, _objectSpread2[query.name] = queryItems, _objectSpread2)));\n        });\n      });\n    });\n  });\n  return promise;\n};\n\nvar insertAndFetchTestData = function (n) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$fetchQuery = _ref2.fetchQuery1,\n      fetchQuery1 = _ref2$fetchQuery === void 0 ? true : _ref2$fetchQuery,\n      _ref2$fetchQuery2 = _ref2.fetchQuery2,\n      fetchQuery2 = _ref2$fetchQuery2 === void 0 ? true : _ref2$fetchQuery2,\n      _ref2$fetchQuery3 = _ref2.fetchQuery3,\n      fetchQuery3 = _ref2$fetchQuery3 === void 0 ? false : _ref2$fetchQuery3,\n      _ref2$fetchQuery4 = _ref2.fetchQuery4,\n      fetchQuery4 = _ref2$fetchQuery4 === void 0 ? false : _ref2$fetchQuery4;\n\n  var promise = insertTestData(n);\n  return fetchQueries({\n    queries: [fetchQuery1 && query1, fetchQuery2 && query2, fetchQuery3 && query3, fetchQuery4 && query4].filter(function (x) {\n      return x;\n    }),\n    params: params,\n    promise: promise\n  });\n};\n\ndescribe('exposeQuery', function () {\n  beforeEach(function () {\n    return resetDatabase();\n  });\n  it('returns expected data without using overrides', function () {\n    return insertAndFetchTestData(100).then(function (items) {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n    });\n  });\n  context('returns expected data when overriding', function () {\n    it('the body', function () {\n      return insertAndFetchTestData(100, {\n        $body: {\n          value: 1\n        }\n      }).then(function (items) {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_1[0].name).to.equal(undefined);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n        expect(items.named_query_TEST_QUERY_2[0].name).to.equal(undefined);\n      });\n    });\n    it('the limit option', function () {\n      return insertAndFetchTestData(100, {\n        $limit: 5\n      }).then(function (items) {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(5);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(5);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      });\n    });\n    it('the limit option greather than the server value', function () {\n      return insertAndFetchTestData(100, {\n        $limit: 20\n      }).then(function (items) {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      });\n    });\n    it('the skip option', function () {\n      return insertAndFetchTestData(100, {\n        $skip: 7\n      }).then(function (items) {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(38);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(28);\n      });\n    });\n    it('the sort option', function () {\n      return insertAndFetchTestData(100, {\n        $sort: {\n          value: -1\n        }\n      }).then(function (items) {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(99);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(99);\n      });\n    });\n    it('the sort option on multiple fields ', function () {\n      return insertAndFetchTestData(50, {\n        $sort: {\n          name: -1,\n          value: -1\n        }\n      }).then(function (items) {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(47);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(47);\n      }).then(function () {\n        return resetDatabase();\n      }).then(function () {\n        return insertAndFetchTestData(50, {\n          $sort: {\n            name: -1,\n            value: 1\n          }\n        });\n      }).then(function (items) {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n      });\n    });\n  });\n  it('throws when client tries to filter by _id when it is not allowed', function () {\n    return insertAndFetchTestData(100, {\n      _id: 'test50'\n    }, {\n      fetchQuery2: false\n    }).then(function () {\n      throw new Meteor.Error('Test should throw');\n    }).catch(function (error) {\n      return expect(error.message).to.contain('Match failed');\n    });\n  });\n  describe('returns expected data when using filters', function () {\n    it('on client only', function () {\n      return insertAndFetchTestData(100, {\n        name: 'test3'\n      }).then(function (items) {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        items.named_query_TEST_QUERY_1.forEach(function (_ref3) {\n          var name = _ref3.name;\n          return expect(name).to.equal('test3');\n        });\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n        items.named_query_TEST_QUERY_2.forEach(function (_ref4) {\n          var name = _ref4.name;\n          return expect(name).to.equal('test3');\n        });\n      });\n    });\n    it('on server only', function () {\n      return insertAndFetchTestData(100, {\n        _id: 'test50'\n      }, {\n        fetchQuery1: false\n      }).then(function (items) {\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(1);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(50);\n      });\n    });\n    it('on client and server', function () {\n      return insertAndFetchTestData(30, {\n        name: 'test3',\n        _id: 'test50'\n      }, {\n        fetchQuery1: false\n      }).then(function (items) {\n        // Name and _id filters apply in query2, resulting in an empty array of results\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(0);\n      });\n    });\n  });\n  it('uses default firewall if not overriden', function () {\n    return insertAndFetchTestData(30, {}, {\n      fetchQuery1: false,\n      fetchQuery2: false,\n      fetchQuery3: true\n    }).then(function () {\n      throw new Meteor.Error('Test should throw');\n    }).catch(function (error) {\n      return expect(error.message).to.contain('NOT_AUTHORIZED');\n    });\n  });\n  it('injects _userId in params', function () {\n    return userLogin({}).then(function () {\n      return insertAndFetchTestData(30, {\n        name: 'test3'\n      }, {\n        fetchQuery1: false,\n        fetchQuery2: false,\n        fetchQuery4: true\n      });\n    }).then(function (items) {\n      var userId = Meteor.userId();\n      items.named_query_TEST_QUERY_4.forEach(function (_ref5) {\n        var _userId = _ref5._userId,\n            name = _ref5.name;\n        expect(_userId).to.equal(userId);\n        expect(name).to.equal('test3');\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/queries/test/client/clientQueries.test.js"],"names":["console","insertTestData","n","promises","Array","_id","name","index","value","Promise","fetchQueries","queries","promise","query","items","err","reject","resolve","queryItems","insertAndFetchTestData","params","fetchQuery1","fetchQuery2","fetchQuery3","fetchQuery4","x","describe","beforeEach","resetDatabase","it","expect","context","$body","$limit","$skip","$sort","Meteor","error","userId"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\n\nimport { expect } from 'chai';\n\nimport { userLogin, resetDatabase } from 'core/utils/testHelpers/index';\nimport {\n  query1,\n  query2,\n  query3,\n  query4,\n  testCollectionInsert,\n} from '../collection.app-test';\n\nconsole.log('testCollectionInsert:', testCollectionInsert);\n\nconst insertTestData = (n) => {\n  const promises = [...Array(n)].map((_, index) =>\n    testCollectionInsert.run({\n      _id: `test${index}`,\n      name: `test${index % 4}`,\n      value: index,\n    }));\n  return Promise.all(promises).then(() => ({}));\n};\n\nconst fetchQueries = ({ queries = [], params, promise }) => {\n  queries.forEach((query) => {\n    promise = promise.then((items = {}) =>\n      new Promise((resolve, reject) => {\n        query\n          .clone(params)\n          .fetch((err, queryItems) =>\n            (err\n              ? reject(err)\n              : resolve({ ...items, [query.name]: queryItems })));\n      }));\n  });\n\n  return promise;\n};\n\nconst insertAndFetchTestData = (\n  n,\n  params = {},\n  {\n    fetchQuery1 = true,\n    fetchQuery2 = true,\n    fetchQuery3 = false,\n    fetchQuery4 = false,\n  } = {},\n) => {\n  const promise = insertTestData(n);\n  return fetchQueries({\n    queries: [\n      fetchQuery1 && query1,\n      fetchQuery2 && query2,\n      fetchQuery3 && query3,\n      fetchQuery4 && query4,\n    ].filter(x => x),\n    params,\n    promise,\n  });\n};\n\ndescribe('exposeQuery', () => {\n  beforeEach(() => resetDatabase());\n\n  it('returns expected data without using overrides', () =>\n    insertAndFetchTestData(100).then((items) => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n    }));\n\n  context('returns expected data when overriding', () => {\n    it('the body', () =>\n      insertAndFetchTestData(100, { $body: { value: 1 } }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_1[0].name).to.equal(undefined);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n        expect(items.named_query_TEST_QUERY_2[0].name).to.equal(undefined);\n      }));\n\n    it('the limit option', () =>\n      insertAndFetchTestData(100, { $limit: 5 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(5);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(5);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      }));\n\n    it('the limit option greather than the server value', () =>\n      insertAndFetchTestData(100, { $limit: 20 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      }));\n\n    it('the skip option', () =>\n      insertAndFetchTestData(100, { $skip: 7 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(38);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(28);\n      }));\n\n    it('the sort option', () =>\n      insertAndFetchTestData(100, { $sort: { value: -1 } }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(99);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(99);\n      }));\n\n    it('the sort option on multiple fields ', () =>\n      insertAndFetchTestData(50, { $sort: { name: -1, value: -1 } })\n        .then((items) => {\n          expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_1[0].value).to.equal(47);\n          expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_2[0].value).to.equal(47);\n        })\n        .then(() => resetDatabase())\n        .then(() =>\n          insertAndFetchTestData(50, { $sort: { name: -1, value: 1 } }))\n        .then((items) => {\n          expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n          expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n        }));\n  });\n\n  it('throws when client tries to filter by _id when it is not allowed', () =>\n    insertAndFetchTestData(100, { _id: 'test50' }, { fetchQuery2: false })\n      .then(() => {\n        throw new Meteor.Error('Test should throw');\n      })\n      .catch(error => expect(error.message).to.contain('Match failed')));\n\n  describe('returns expected data when using filters', () => {\n    it('on client only', () =>\n      insertAndFetchTestData(100, { name: 'test3' }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        items.named_query_TEST_QUERY_1.forEach(({ name }) =>\n          expect(name).to.equal('test3'));\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n        items.named_query_TEST_QUERY_2.forEach(({ name }) =>\n          expect(name).to.equal('test3'));\n      }));\n\n    it('on server only', () =>\n      insertAndFetchTestData(\n        100,\n        { _id: 'test50' },\n        { fetchQuery1: false },\n      ).then((items) => {\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(1);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(50);\n      }));\n\n    it('on client and server', () =>\n      insertAndFetchTestData(\n        30,\n        { name: 'test3', _id: 'test50' },\n        { fetchQuery1: false },\n      ).then((items) => {\n        // Name and _id filters apply in query2, resulting in an empty array of results\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(0);\n      }));\n  });\n\n  it('uses default firewall if not overriden', () =>\n    insertAndFetchTestData(\n      30,\n      {},\n      { fetchQuery1: false, fetchQuery2: false, fetchQuery3: true },\n    )\n      .then(() => {\n        throw new Meteor.Error('Test should throw');\n      })\n      .catch(error => expect(error.message).to.contain('NOT_AUTHORIZED')));\n\n  it('injects _userId in params', () =>\n    userLogin({})\n      .then(() =>\n        insertAndFetchTestData(\n          30,\n          { name: 'test3' },\n          { fetchQuery1: false, fetchQuery2: false, fetchQuery4: true },\n        ))\n      .then((items) => {\n        const userId = Meteor.userId();\n        items.named_query_TEST_QUERY_4.forEach(({ _userId, name }) => {\n          expect(_userId).to.equal(userId);\n          expect(name).to.equal('test3');\n        });\n      }));\n});\n"]},"sourceType":"script","hash":"3927fbb3ef60520303ae32a9c848dcee2175fec0"}

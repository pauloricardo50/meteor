{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/formArrayHelpers.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/test/formArrayHelpers.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/formArrayHelpers.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/test/formArrayHelpers.spec.js"],"names":["expect","shouldCountField","getCountedArray","getMissingFieldIds","getFormValuesHash","describe","it","condition","to","equal","undefined","required","disabled","type","dummyArray","id","deep","id1","id2","idx","id3","trueValue","array","conditionalTrueValue","inputs","conditional","doc","beforeEach","test","value","doc2","not","a","stuff"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  shouldCountField,\n  getCountedArray,\n  getMissingFieldIds,\n  getFormValuesHash,\n} from '../formArrayHelpers';\n\ndescribe('formArrayHelpers', () => {\n  describe('shouldCountField', () => {\n    it('counts fields whose condition is true or undefined', () => {\n      expect(shouldCountField({ condition: true })).to.equal(true);\n      expect(shouldCountField({ condition: undefined })).to.equal(true);\n    });\n\n    it('should return true for an empty object', () => {\n      // Meaning, condition is undefined\n      expect(shouldCountField({})).to.equal(true);\n    });\n\n    it('should return false if required is explicitly set to false', () => {\n      expect(shouldCountField({ required: false })).to.equal(false);\n      expect(shouldCountField({ required: undefined })).to.equal(true);\n      expect(shouldCountField({ required: true })).to.equal(true);\n    });\n\n    it('should return false if disabled is set to true', () => {\n      expect(shouldCountField({ disabled: true })).to.equal(false);\n      expect(shouldCountField({ disabled: false })).to.equal(true);\n      expect(shouldCountField({ disabled: undefined })).to.equal(true);\n    });\n\n    it('should return false for h3 types', () => {\n      expect(shouldCountField({ type: 'h3' })).to.equal(false);\n    });\n  });\n\n  describe('getCountedArray', () => {\n    const dummyArray = [{ id: 'id1' }, { id: 'id2' }];\n    it('returns an empty array if it is given an empty formArray', () => {\n      expect(getCountedArray([], {})).to.deep.equal([]);\n    });\n\n    it('should return an array with 2 undefined values for a simple array and an empty object', () => {\n      expect(getCountedArray(dummyArray, {})).to.deep.equal([\n        undefined,\n        undefined,\n      ]);\n    });\n\n    it('should return an array with the values of the document', () => {\n      expect(getCountedArray(dummyArray, { id1: '1', id2: '2', idx: 'x' })).to.deep.equal(['1', '2']);\n    });\n\n    it('should work with nested id values', () => {\n      expect(getCountedArray([...dummyArray, { id: 'id3.id' }], {\n        id1: '1',\n        id2: '2',\n        id3: { id: '3' },\n        idx: 'x',\n      })).to.deep.equal(['1', '2', '3']);\n    });\n\n    it('should not count non required values', () => {\n      expect(getCountedArray([{ id: 'id', required: false }], {\n        id: 'yo',\n      })).to.deep.equal([]);\n    });\n\n    it('should count non required values if specified', () => {\n      expect(getCountedArray([{ id: 'id', required: false }], { id: 'yo' }, true)).to.deep.equal(['yo']);\n    });\n\n    describe('conditional values', () => {\n      const trueValue = 'something';\n      let array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test' }],\n        },\n      ];\n\n      it('should only count the conditional value if it is false', () => {\n        expect(getCountedArray(array, { conditional: 'anything' })).to.deep.equal(['anything']);\n      });\n\n      it('should count the conditional value and the following if it is true', () => {\n        expect(getCountedArray(array, { conditional: trueValue })).to.deep.equal([trueValue, undefined]);\n      });\n\n      it('should not count the additionalValue if its not required', () => {\n        array = [\n          {\n            type: 'conditionalInput',\n            id: 'id1',\n            conditionalTrueValue: trueValue,\n            inputs: [{ id: 'conditional', required: false }, { id: 'test' }],\n          },\n        ];\n        expect(getCountedArray(array, { conditional: trueValue })).to.deep.equal([undefined]);\n      });\n    });\n  });\n\n  describe('getMissingFieldIds', () => {\n    let array;\n    let doc;\n\n    beforeEach(() => {\n      array = [{ id: 'test' }];\n      doc = {};\n    });\n\n    it('returns the list of missing fields', () => {\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['test']);\n    });\n\n    it('returns an empty array if all fields are valid', () => {\n      doc.test = 'stuff';\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n\n    it('works with nested data', () => {\n      array = [{ id: 'test.value' }];\n      doc.test = { value: 'stuff' };\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n\n    it('properly counts conditional undefined values', () => {\n      const trueValue = 'something';\n      array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test' }],\n        },\n      ];\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['conditional']);\n    });\n\n    it('properly counts conditional false values', () => {\n      const trueValue = false;\n      array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test' }],\n        },\n      ];\n      doc.conditional = true;\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n\n    it('properly counts conditional true values', () => {\n      const trueValue = 'something';\n      array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test' }],\n        },\n      ];\n      doc.conditional = trueValue;\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['test']);\n    });\n\n    it('properly counts conditional true values and its children', () => {\n      const trueValue = 'something';\n      array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test' }],\n        },\n      ];\n      doc.conditional = trueValue;\n      doc.test = 'stuff';\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n\n    it('does not count non required fields', () => {\n      const trueValue = 'something';\n      array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test', required: false }],\n        },\n      ];\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['conditional']);\n    });\n\n    it('deals with custom fields', () => {\n      array = [{ id: 'test.value' }];\n      doc.test = { value: 'stuff' };\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n  });\n\n  describe('getFormValuesHash', () => {\n    let array;\n    let doc;\n\n    beforeEach(() => {\n      array = [{ id: 'test' }];\n      doc = { test: { value: 'stuff' } };\n    });\n\n    it('returns a hash for the data', () => {\n      array = [{ id: 'test.value' }];\n\n      expect(getFormValuesHash(array, doc)).to.equal(272289896);\n    });\n\n    it('changes if the data changes', () => {\n      array = [{ id: 'test.value' }];\n      const doc2 = { test: { value: 'stuff2' } };\n\n      expect(getFormValuesHash(array, doc)).to.not.equal(getFormValuesHash(array, doc2));\n    });\n\n    it('ignores irrelevant fields', () => {\n      array = [{ id: 'test.value' }];\n      const doc2 = { test: { value: 'stuff' }, a: 'b' };\n\n      expect(getFormValuesHash(array, doc)).to.equal(getFormValuesHash(array, doc2));\n    });\n\n    it('counts non required values', () => {\n      array = [{ id: 'test.value' }, { id: 'stuff', required: false }];\n      const doc2 = { test: { value: 'stuff' }, stuff: 'r' };\n\n      expect(getFormValuesHash(array, doc)).to.not.equal(getFormValuesHash(array, doc2));\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/formArrayHelpers.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/test/formArrayHelpers.spec.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar shouldCountField, getCountedArray, getMissingFieldIds, getFormValuesHash;\nmodule.link(\"../formArrayHelpers\", {\n  shouldCountField: function (v) {\n    shouldCountField = v;\n  },\n  getCountedArray: function (v) {\n    getCountedArray = v;\n  },\n  getMissingFieldIds: function (v) {\n    getMissingFieldIds = v;\n  },\n  getFormValuesHash: function (v) {\n    getFormValuesHash = v;\n  }\n}, 1);\ndescribe('formArrayHelpers', function () {\n  describe('shouldCountField', function () {\n    it('counts fields whose condition is true or undefined', function () {\n      expect(shouldCountField({\n        condition: true\n      })).to.equal(true);\n      expect(shouldCountField({\n        condition: undefined\n      })).to.equal(true);\n    });\n    it('should return true for an empty object', function () {\n      // Meaning, condition is undefined\n      expect(shouldCountField({})).to.equal(true);\n    });\n    it('should return false if required is explicitly set to false', function () {\n      expect(shouldCountField({\n        required: false\n      })).to.equal(false);\n      expect(shouldCountField({\n        required: undefined\n      })).to.equal(true);\n      expect(shouldCountField({\n        required: true\n      })).to.equal(true);\n    });\n    it('should return false if disabled is set to true', function () {\n      expect(shouldCountField({\n        disabled: true\n      })).to.equal(false);\n      expect(shouldCountField({\n        disabled: false\n      })).to.equal(true);\n      expect(shouldCountField({\n        disabled: undefined\n      })).to.equal(true);\n    });\n    it('should return false for h3 types', function () {\n      expect(shouldCountField({\n        type: 'h3'\n      })).to.equal(false);\n    });\n  });\n  describe('getCountedArray', function () {\n    var dummyArray = [{\n      id: 'id1'\n    }, {\n      id: 'id2'\n    }];\n    it('returns an empty array if it is given an empty formArray', function () {\n      expect(getCountedArray([], {})).to.deep.equal([]);\n    });\n    it('should return an array with 2 undefined values for a simple array and an empty object', function () {\n      expect(getCountedArray(dummyArray, {})).to.deep.equal([undefined, undefined]);\n    });\n    it('should return an array with the values of the document', function () {\n      expect(getCountedArray(dummyArray, {\n        id1: '1',\n        id2: '2',\n        idx: 'x'\n      })).to.deep.equal(['1', '2']);\n    });\n    it('should work with nested id values', function () {\n      expect(getCountedArray([].concat(dummyArray, [{\n        id: 'id3.id'\n      }]), {\n        id1: '1',\n        id2: '2',\n        id3: {\n          id: '3'\n        },\n        idx: 'x'\n      })).to.deep.equal(['1', '2', '3']);\n    });\n    it('should not count non required values', function () {\n      expect(getCountedArray([{\n        id: 'id',\n        required: false\n      }], {\n        id: 'yo'\n      })).to.deep.equal([]);\n    });\n    it('should count non required values if specified', function () {\n      expect(getCountedArray([{\n        id: 'id',\n        required: false\n      }], {\n        id: 'yo'\n      }, true)).to.deep.equal(['yo']);\n    });\n    describe('conditional values', function () {\n      var trueValue = 'something';\n      var array = [{\n        type: 'conditionalInput',\n        id: 'id1',\n        conditionalTrueValue: trueValue,\n        inputs: [{\n          id: 'conditional'\n        }, {\n          id: 'test'\n        }]\n      }];\n      it('should only count the conditional value if it is false', function () {\n        expect(getCountedArray(array, {\n          conditional: 'anything'\n        })).to.deep.equal(['anything']);\n      });\n      it('should count the conditional value and the following if it is true', function () {\n        expect(getCountedArray(array, {\n          conditional: trueValue\n        })).to.deep.equal([trueValue, undefined]);\n      });\n      it('should not count the additionalValue if its not required', function () {\n        array = [{\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{\n            id: 'conditional',\n            required: false\n          }, {\n            id: 'test'\n          }]\n        }];\n        expect(getCountedArray(array, {\n          conditional: trueValue\n        })).to.deep.equal([undefined]);\n      });\n    });\n  });\n  describe('getMissingFieldIds', function () {\n    var array;\n    var doc;\n    beforeEach(function () {\n      array = [{\n        id: 'test'\n      }];\n      doc = {};\n    });\n    it('returns the list of missing fields', function () {\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['test']);\n    });\n    it('returns an empty array if all fields are valid', function () {\n      doc.test = 'stuff';\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n    it('works with nested data', function () {\n      array = [{\n        id: 'test.value'\n      }];\n      doc.test = {\n        value: 'stuff'\n      };\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n    it('properly counts conditional undefined values', function () {\n      var trueValue = 'something';\n      array = [{\n        type: 'conditionalInput',\n        id: 'id1',\n        conditionalTrueValue: trueValue,\n        inputs: [{\n          id: 'conditional'\n        }, {\n          id: 'test'\n        }]\n      }];\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['conditional']);\n    });\n    it('properly counts conditional false values', function () {\n      var trueValue = false;\n      array = [{\n        type: 'conditionalInput',\n        id: 'id1',\n        conditionalTrueValue: trueValue,\n        inputs: [{\n          id: 'conditional'\n        }, {\n          id: 'test'\n        }]\n      }];\n      doc.conditional = true;\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n    it('properly counts conditional true values', function () {\n      var trueValue = 'something';\n      array = [{\n        type: 'conditionalInput',\n        id: 'id1',\n        conditionalTrueValue: trueValue,\n        inputs: [{\n          id: 'conditional'\n        }, {\n          id: 'test'\n        }]\n      }];\n      doc.conditional = trueValue;\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['test']);\n    });\n    it('properly counts conditional true values and its children', function () {\n      var trueValue = 'something';\n      array = [{\n        type: 'conditionalInput',\n        id: 'id1',\n        conditionalTrueValue: trueValue,\n        inputs: [{\n          id: 'conditional'\n        }, {\n          id: 'test'\n        }]\n      }];\n      doc.conditional = trueValue;\n      doc.test = 'stuff';\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n    it('does not count non required fields', function () {\n      var trueValue = 'something';\n      array = [{\n        type: 'conditionalInput',\n        id: 'id1',\n        conditionalTrueValue: trueValue,\n        inputs: [{\n          id: 'conditional'\n        }, {\n          id: 'test',\n          required: false\n        }]\n      }];\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['conditional']);\n    });\n    it('deals with custom fields', function () {\n      array = [{\n        id: 'test.value'\n      }];\n      doc.test = {\n        value: 'stuff'\n      };\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n  });\n  describe('getFormValuesHash', function () {\n    var array;\n    var doc;\n    beforeEach(function () {\n      array = [{\n        id: 'test'\n      }];\n      doc = {\n        test: {\n          value: 'stuff'\n        }\n      };\n    });\n    it('returns a hash for the data', function () {\n      array = [{\n        id: 'test.value'\n      }];\n      expect(getFormValuesHash(array, doc)).to.equal(272289896);\n    });\n    it('changes if the data changes', function () {\n      array = [{\n        id: 'test.value'\n      }];\n      var doc2 = {\n        test: {\n          value: 'stuff2'\n        }\n      };\n      expect(getFormValuesHash(array, doc)).to.not.equal(getFormValuesHash(array, doc2));\n    });\n    it('ignores irrelevant fields', function () {\n      array = [{\n        id: 'test.value'\n      }];\n      var doc2 = {\n        test: {\n          value: 'stuff'\n        },\n        a: 'b'\n      };\n      expect(getFormValuesHash(array, doc)).to.equal(getFormValuesHash(array, doc2));\n    });\n    it('counts non required values', function () {\n      array = [{\n        id: 'test.value'\n      }, {\n        id: 'stuff',\n        required: false\n      }];\n      var doc2 = {\n        test: {\n          value: 'stuff'\n        },\n        stuff: 'r'\n      };\n      expect(getFormValuesHash(array, doc)).to.not.equal(getFormValuesHash(array, doc2));\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/test/formArrayHelpers.spec.js"],"names":["describe","it","expect","shouldCountField","condition","undefined","required","disabled","type","dummyArray","id","getCountedArray","id1","id2","idx","id3","trueValue","array","conditionalTrueValue","inputs","conditional","beforeEach","doc","getMissingFieldIds","value","test","getFormValuesHash","doc2","a","stuff"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  shouldCountField,\n  getCountedArray,\n  getMissingFieldIds,\n  getFormValuesHash,\n} from '../formArrayHelpers';\n\ndescribe('formArrayHelpers', () => {\n  describe('shouldCountField', () => {\n    it('counts fields whose condition is true or undefined', () => {\n      expect(shouldCountField({ condition: true })).to.equal(true);\n      expect(shouldCountField({ condition: undefined })).to.equal(true);\n    });\n\n    it('should return true for an empty object', () => {\n      // Meaning, condition is undefined\n      expect(shouldCountField({})).to.equal(true);\n    });\n\n    it('should return false if required is explicitly set to false', () => {\n      expect(shouldCountField({ required: false })).to.equal(false);\n      expect(shouldCountField({ required: undefined })).to.equal(true);\n      expect(shouldCountField({ required: true })).to.equal(true);\n    });\n\n    it('should return false if disabled is set to true', () => {\n      expect(shouldCountField({ disabled: true })).to.equal(false);\n      expect(shouldCountField({ disabled: false })).to.equal(true);\n      expect(shouldCountField({ disabled: undefined })).to.equal(true);\n    });\n\n    it('should return false for h3 types', () => {\n      expect(shouldCountField({ type: 'h3' })).to.equal(false);\n    });\n  });\n\n  describe('getCountedArray', () => {\n    const dummyArray = [{ id: 'id1' }, { id: 'id2' }];\n    it('returns an empty array if it is given an empty formArray', () => {\n      expect(getCountedArray([], {})).to.deep.equal([]);\n    });\n\n    it('should return an array with 2 undefined values for a simple array and an empty object', () => {\n      expect(getCountedArray(dummyArray, {})).to.deep.equal([\n        undefined,\n        undefined,\n      ]);\n    });\n\n    it('should return an array with the values of the document', () => {\n      expect(getCountedArray(dummyArray, { id1: '1', id2: '2', idx: 'x' })).to.deep.equal(['1', '2']);\n    });\n\n    it('should work with nested id values', () => {\n      expect(getCountedArray([...dummyArray, { id: 'id3.id' }], {\n        id1: '1',\n        id2: '2',\n        id3: { id: '3' },\n        idx: 'x',\n      })).to.deep.equal(['1', '2', '3']);\n    });\n\n    it('should not count non required values', () => {\n      expect(getCountedArray([{ id: 'id', required: false }], {\n        id: 'yo',\n      })).to.deep.equal([]);\n    });\n\n    it('should count non required values if specified', () => {\n      expect(getCountedArray([{ id: 'id', required: false }], { id: 'yo' }, true)).to.deep.equal(['yo']);\n    });\n\n    describe('conditional values', () => {\n      const trueValue = 'something';\n      let array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test' }],\n        },\n      ];\n\n      it('should only count the conditional value if it is false', () => {\n        expect(getCountedArray(array, { conditional: 'anything' })).to.deep.equal(['anything']);\n      });\n\n      it('should count the conditional value and the following if it is true', () => {\n        expect(getCountedArray(array, { conditional: trueValue })).to.deep.equal([trueValue, undefined]);\n      });\n\n      it('should not count the additionalValue if its not required', () => {\n        array = [\n          {\n            type: 'conditionalInput',\n            id: 'id1',\n            conditionalTrueValue: trueValue,\n            inputs: [{ id: 'conditional', required: false }, { id: 'test' }],\n          },\n        ];\n        expect(getCountedArray(array, { conditional: trueValue })).to.deep.equal([undefined]);\n      });\n    });\n  });\n\n  describe('getMissingFieldIds', () => {\n    let array;\n    let doc;\n\n    beforeEach(() => {\n      array = [{ id: 'test' }];\n      doc = {};\n    });\n\n    it('returns the list of missing fields', () => {\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['test']);\n    });\n\n    it('returns an empty array if all fields are valid', () => {\n      doc.test = 'stuff';\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n\n    it('works with nested data', () => {\n      array = [{ id: 'test.value' }];\n      doc.test = { value: 'stuff' };\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n\n    it('properly counts conditional undefined values', () => {\n      const trueValue = 'something';\n      array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test' }],\n        },\n      ];\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['conditional']);\n    });\n\n    it('properly counts conditional false values', () => {\n      const trueValue = false;\n      array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test' }],\n        },\n      ];\n      doc.conditional = true;\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n\n    it('properly counts conditional true values', () => {\n      const trueValue = 'something';\n      array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test' }],\n        },\n      ];\n      doc.conditional = trueValue;\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['test']);\n    });\n\n    it('properly counts conditional true values and its children', () => {\n      const trueValue = 'something';\n      array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test' }],\n        },\n      ];\n      doc.conditional = trueValue;\n      doc.test = 'stuff';\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n\n    it('does not count non required fields', () => {\n      const trueValue = 'something';\n      array = [\n        {\n          type: 'conditionalInput',\n          id: 'id1',\n          conditionalTrueValue: trueValue,\n          inputs: [{ id: 'conditional' }, { id: 'test', required: false }],\n        },\n      ];\n      expect(getMissingFieldIds(array, doc)).to.deep.equal(['conditional']);\n    });\n\n    it('deals with custom fields', () => {\n      array = [{ id: 'test.value' }];\n      doc.test = { value: 'stuff' };\n      expect(getMissingFieldIds(array, doc)).to.deep.equal([]);\n    });\n  });\n\n  describe('getFormValuesHash', () => {\n    let array;\n    let doc;\n\n    beforeEach(() => {\n      array = [{ id: 'test' }];\n      doc = { test: { value: 'stuff' } };\n    });\n\n    it('returns a hash for the data', () => {\n      array = [{ id: 'test.value' }];\n\n      expect(getFormValuesHash(array, doc)).to.equal(272289896);\n    });\n\n    it('changes if the data changes', () => {\n      array = [{ id: 'test.value' }];\n      const doc2 = { test: { value: 'stuff2' } };\n\n      expect(getFormValuesHash(array, doc)).to.not.equal(getFormValuesHash(array, doc2));\n    });\n\n    it('ignores irrelevant fields', () => {\n      array = [{ id: 'test.value' }];\n      const doc2 = { test: { value: 'stuff' }, a: 'b' };\n\n      expect(getFormValuesHash(array, doc)).to.equal(getFormValuesHash(array, doc2));\n    });\n\n    it('counts non required values', () => {\n      array = [{ id: 'test.value' }, { id: 'stuff', required: false }];\n      const doc2 = { test: { value: 'stuff' }, stuff: 'r' };\n\n      expect(getFormValuesHash(array, doc)).to.not.equal(getFormValuesHash(array, doc2));\n    });\n  });\n});\n"]},"sourceType":"script","hash":"c774607b737671fd0ef316aad006f2afbe604c9c"}

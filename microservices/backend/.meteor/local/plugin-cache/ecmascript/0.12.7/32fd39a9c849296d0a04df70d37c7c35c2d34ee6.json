{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/testEndpoint.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/testEndpoint.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/testEndpoint.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/testEndpoint.test.js"],"names":["Meteor","resetDatabase","Factory","pick","UserService","HTTP_STATUS_CODES","RESTAPI","testEndpointAPI","fetchAndCheckResponse","makeHeaders","getTimestampAndNonce","user","api","addEndpoint","testEndpoint","id","body","query","expectedResponse","status","method","url","timestamp","nonce","data","headers","userId","JSON","stringify","describe","timeout","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","createdUser","create","_id","get","testQuery","param1","param2","testBody","testString","testNumber","testObject","testNumberArray","testBoolean","context","it","params","OK","forEach"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\nimport pick from 'lodash/pick';\n\nimport UserService from '../../../../users/server/UserService';\nimport { HTTP_STATUS_CODES } from '../../restApiConstants';\nimport RESTAPI from '../../RESTAPI';\nimport { testEndpointAPI } from '..';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\n\nlet user;\n\nconst api = new RESTAPI();\napi.addEndpoint('/test', 'POST', testEndpointAPI);\napi.addEndpoint('/test', 'GET', testEndpointAPI);\napi.addEndpoint('/test', 'PUT', testEndpointAPI);\napi.addEndpoint('/test', 'DELETE', testEndpointAPI);\napi.addEndpoint('/test/:id', 'POST', testEndpointAPI);\napi.addEndpoint('/test/:id', 'GET', testEndpointAPI);\napi.addEndpoint('/test/:id', 'PUT', testEndpointAPI);\napi.addEndpoint('/test/:id', 'DELETE', testEndpointAPI);\n\nconst testEndpoint = ({\n  id,\n  body,\n  query,\n  expectedResponse,\n  status,\n  method,\n}) => {\n  const url = id ? `/test/${id}` : '/test';\n  const { timestamp, nonce } = getTimestampAndNonce();\n  return fetchAndCheckResponse({\n    url,\n    query,\n    data: {\n      method,\n      headers: makeHeaders({\n        userId: 'pro',\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n    status,\n  });\n};\n\ndescribe('REST: testEndpoint', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    const createdUser = Factory.create('pro', {_id: 'pro'});\n    user = pick(UserService.get(createdUser._id), [\n      'emails',\n      'firstName',\n      'lastName',\n      'phoneNumbers',\n    ]);\n  });\n\n  const testQuery = {\n    param1: 'hello?this/is=cool',\n    param2: '?yay!this/is=so#cool',\n  };\n  const testBody = {\n    testString: 'hello',\n    testNumber: 12345,\n    testObject: {\n      testNumberArray: [123, 456, 789],\n      testBoolean: true,\n    },\n  };\n\n  describe('returns the expected response with method', () => {\n    context('GET', () => {\n      it('without query', () =>\n        testEndpoint({\n          method: 'GET',\n          expectedResponse: {\n            user,\n            body: {},\n            query: {},\n            params: {},\n          },\n          status: HTTP_STATUS_CODES.OK,\n        }));\n\n      it('with query', () =>\n        testEndpoint({\n          method: 'GET',\n          query: testQuery,\n          expectedResponse: {\n            user,\n            body: {},\n            query: testQuery,\n            params: {},\n          },\n          status: HTTP_STATUS_CODES.OK,\n        }));\n\n      it('with query and params', () =>\n        testEndpoint({\n          method: 'GET',\n          query: testQuery,\n          id: '123abc',\n          expectedResponse: {\n            user,\n            body: {},\n            query: testQuery,\n            params: { id: '123abc' },\n          },\n          status: HTTP_STATUS_CODES.OK,\n        }));\n    });\n\n    ['POST', 'PUT', 'DELETE'].forEach((method) => {\n      context(method, () => {\n        it('without query and body', () =>\n          testEndpoint({\n            method,\n            expectedResponse: {\n              user,\n              body: {},\n              query: {},\n              params: {},\n            },\n            status: HTTP_STATUS_CODES.OK,\n          }));\n\n        it('with query', () =>\n          testEndpoint({\n            method,\n            query: testQuery,\n            expectedResponse: {\n              user,\n              body: {},\n              query: testQuery,\n              params: {},\n            },\n            status: HTTP_STATUS_CODES.OK,\n          }));\n\n        it('with query and body', () =>\n          testEndpoint({\n            method,\n            query: testQuery,\n            body: testBody,\n            expectedResponse: {\n              user,\n              body: testBody,\n              query: testQuery,\n              params: {},\n            },\n            status: HTTP_STATUS_CODES.OK,\n          }));\n\n        it('with query, body and params', () =>\n          testEndpoint({\n            method,\n            query: testQuery,\n            body: testBody,\n            id: 'abc123',\n            expectedResponse: {\n              user,\n              body: testBody,\n              query: testQuery,\n              params: { id: 'abc123' },\n            },\n            status: HTTP_STATUS_CODES.OK,\n          }));\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/testEndpoint.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/testEndpoint.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet pick;\nmodule.link(\"lodash/pick\", {\n  default(v) {\n    pick = v;\n  }\n\n}, 3);\nlet UserService;\nmodule.link(\"../../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 4);\nlet HTTP_STATUS_CODES;\nmodule.link(\"../../restApiConstants\", {\n  HTTP_STATUS_CODES(v) {\n    HTTP_STATUS_CODES = v;\n  }\n\n}, 5);\nlet RESTAPI;\nmodule.link(\"../../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 6);\nlet testEndpointAPI;\nmodule.link(\"..\", {\n  testEndpointAPI(v) {\n    testEndpointAPI = v;\n  }\n\n}, 7);\nlet fetchAndCheckResponse, makeHeaders, getTimestampAndNonce;\nmodule.link(\"../../test/apiTestHelpers.test\", {\n  fetchAndCheckResponse(v) {\n    fetchAndCheckResponse = v;\n  },\n\n  makeHeaders(v) {\n    makeHeaders = v;\n  },\n\n  getTimestampAndNonce(v) {\n    getTimestampAndNonce = v;\n  }\n\n}, 8);\nlet user;\nconst api = new RESTAPI();\napi.addEndpoint('/test', 'POST', testEndpointAPI);\napi.addEndpoint('/test', 'GET', testEndpointAPI);\napi.addEndpoint('/test', 'PUT', testEndpointAPI);\napi.addEndpoint('/test', 'DELETE', testEndpointAPI);\napi.addEndpoint('/test/:id', 'POST', testEndpointAPI);\napi.addEndpoint('/test/:id', 'GET', testEndpointAPI);\napi.addEndpoint('/test/:id', 'PUT', testEndpointAPI);\napi.addEndpoint('/test/:id', 'DELETE', testEndpointAPI);\n\nconst testEndpoint = ({\n  id,\n  body,\n  query,\n  expectedResponse,\n  status,\n  method\n}) => {\n  const url = id ? `/test/${id}` : '/test';\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  return fetchAndCheckResponse({\n    url,\n    query,\n    data: {\n      method,\n      headers: makeHeaders({\n        userId: 'pro',\n        timestamp,\n        nonce,\n        body,\n        query\n      }),\n      body: JSON.stringify(body)\n    },\n    expectedResponse,\n    status\n  });\n};\n\ndescribe('REST: testEndpoint', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    const createdUser = Factory.create('pro', {\n      _id: 'pro'\n    });\n    user = pick(UserService.get(createdUser._id), ['emails', 'firstName', 'lastName', 'phoneNumbers']);\n  });\n  const testQuery = {\n    param1: 'hello?this/is=cool',\n    param2: '?yay!this/is=so#cool'\n  };\n  const testBody = {\n    testString: 'hello',\n    testNumber: 12345,\n    testObject: {\n      testNumberArray: [123, 456, 789],\n      testBoolean: true\n    }\n  };\n  describe('returns the expected response with method', () => {\n    context('GET', () => {\n      it('without query', () => testEndpoint({\n        method: 'GET',\n        expectedResponse: {\n          user,\n          body: {},\n          query: {},\n          params: {}\n        },\n        status: HTTP_STATUS_CODES.OK\n      }));\n      it('with query', () => testEndpoint({\n        method: 'GET',\n        query: testQuery,\n        expectedResponse: {\n          user,\n          body: {},\n          query: testQuery,\n          params: {}\n        },\n        status: HTTP_STATUS_CODES.OK\n      }));\n      it('with query and params', () => testEndpoint({\n        method: 'GET',\n        query: testQuery,\n        id: '123abc',\n        expectedResponse: {\n          user,\n          body: {},\n          query: testQuery,\n          params: {\n            id: '123abc'\n          }\n        },\n        status: HTTP_STATUS_CODES.OK\n      }));\n    });\n    ['POST', 'PUT', 'DELETE'].forEach(method => {\n      context(method, () => {\n        it('without query and body', () => testEndpoint({\n          method,\n          expectedResponse: {\n            user,\n            body: {},\n            query: {},\n            params: {}\n          },\n          status: HTTP_STATUS_CODES.OK\n        }));\n        it('with query', () => testEndpoint({\n          method,\n          query: testQuery,\n          expectedResponse: {\n            user,\n            body: {},\n            query: testQuery,\n            params: {}\n          },\n          status: HTTP_STATUS_CODES.OK\n        }));\n        it('with query and body', () => testEndpoint({\n          method,\n          query: testQuery,\n          body: testBody,\n          expectedResponse: {\n            user,\n            body: testBody,\n            query: testQuery,\n            params: {}\n          },\n          status: HTTP_STATUS_CODES.OK\n        }));\n        it('with query, body and params', () => testEndpoint({\n          method,\n          query: testQuery,\n          body: testBody,\n          id: 'abc123',\n          expectedResponse: {\n            user,\n            body: testBody,\n            query: testQuery,\n            params: {\n              id: 'abc123'\n            }\n          },\n          status: HTTP_STATUS_CODES.OK\n        }));\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/testEndpoint.test.js"],"names":["api","testEndpoint","method","url","id","nonce","getTimestampAndNonce","fetchAndCheckResponse","data","headers","makeHeaders","userId","query","body","JSON","status","describe","before","Meteor","after","beforeEach","resetDatabase","createdUser","_id","user","pick","UserService","testQuery","param1","param2","testBody","testString","testNumber","testObject","testNumberArray","testBoolean","context","it","expectedResponse","params","HTTP_STATUS_CODES","OK"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\nimport pick from 'lodash/pick';\n\nimport UserService from '../../../../users/server/UserService';\nimport { HTTP_STATUS_CODES } from '../../restApiConstants';\nimport RESTAPI from '../../RESTAPI';\nimport { testEndpointAPI } from '..';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\n\nlet user;\n\nconst api = new RESTAPI();\napi.addEndpoint('/test', 'POST', testEndpointAPI);\napi.addEndpoint('/test', 'GET', testEndpointAPI);\napi.addEndpoint('/test', 'PUT', testEndpointAPI);\napi.addEndpoint('/test', 'DELETE', testEndpointAPI);\napi.addEndpoint('/test/:id', 'POST', testEndpointAPI);\napi.addEndpoint('/test/:id', 'GET', testEndpointAPI);\napi.addEndpoint('/test/:id', 'PUT', testEndpointAPI);\napi.addEndpoint('/test/:id', 'DELETE', testEndpointAPI);\n\nconst testEndpoint = ({\n  id,\n  body,\n  query,\n  expectedResponse,\n  status,\n  method,\n}) => {\n  const url = id ? `/test/${id}` : '/test';\n  const { timestamp, nonce } = getTimestampAndNonce();\n  return fetchAndCheckResponse({\n    url,\n    query,\n    data: {\n      method,\n      headers: makeHeaders({\n        userId: 'pro',\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n    status,\n  });\n};\n\ndescribe('REST: testEndpoint', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    const createdUser = Factory.create('pro', {_id: 'pro'});\n    user = pick(UserService.get(createdUser._id), [\n      'emails',\n      'firstName',\n      'lastName',\n      'phoneNumbers',\n    ]);\n  });\n\n  const testQuery = {\n    param1: 'hello?this/is=cool',\n    param2: '?yay!this/is=so#cool',\n  };\n  const testBody = {\n    testString: 'hello',\n    testNumber: 12345,\n    testObject: {\n      testNumberArray: [123, 456, 789],\n      testBoolean: true,\n    },\n  };\n\n  describe('returns the expected response with method', () => {\n    context('GET', () => {\n      it('without query', () =>\n        testEndpoint({\n          method: 'GET',\n          expectedResponse: {\n            user,\n            body: {},\n            query: {},\n            params: {},\n          },\n          status: HTTP_STATUS_CODES.OK,\n        }));\n\n      it('with query', () =>\n        testEndpoint({\n          method: 'GET',\n          query: testQuery,\n          expectedResponse: {\n            user,\n            body: {},\n            query: testQuery,\n            params: {},\n          },\n          status: HTTP_STATUS_CODES.OK,\n        }));\n\n      it('with query and params', () =>\n        testEndpoint({\n          method: 'GET',\n          query: testQuery,\n          id: '123abc',\n          expectedResponse: {\n            user,\n            body: {},\n            query: testQuery,\n            params: { id: '123abc' },\n          },\n          status: HTTP_STATUS_CODES.OK,\n        }));\n    });\n\n    ['POST', 'PUT', 'DELETE'].forEach((method) => {\n      context(method, () => {\n        it('without query and body', () =>\n          testEndpoint({\n            method,\n            expectedResponse: {\n              user,\n              body: {},\n              query: {},\n              params: {},\n            },\n            status: HTTP_STATUS_CODES.OK,\n          }));\n\n        it('with query', () =>\n          testEndpoint({\n            method,\n            query: testQuery,\n            expectedResponse: {\n              user,\n              body: {},\n              query: testQuery,\n              params: {},\n            },\n            status: HTTP_STATUS_CODES.OK,\n          }));\n\n        it('with query and body', () =>\n          testEndpoint({\n            method,\n            query: testQuery,\n            body: testBody,\n            expectedResponse: {\n              user,\n              body: testBody,\n              query: testQuery,\n              params: {},\n            },\n            status: HTTP_STATUS_CODES.OK,\n          }));\n\n        it('with query, body and params', () =>\n          testEndpoint({\n            method,\n            query: testQuery,\n            body: testBody,\n            id: 'abc123',\n            expectedResponse: {\n              user,\n              body: testBody,\n              query: testQuery,\n              params: { id: 'abc123' },\n            },\n            status: HTTP_STATUS_CODES.OK,\n          }));\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"32fd39a9c849296d0a04df70d37c7c35c2d34ee6"}

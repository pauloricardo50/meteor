{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/events/EventService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/api/events/EventService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/events/EventService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/events/EventService.js"],"names":["Meteor","IS_LOGGING","isProduction","EventService","constructor","emmitter","listenerFunctions","addErrorListener","emit","eventName","args","logEmittedEvent","emitMethod","name","addListener","listenerFunction","logListener","listenersForEvent","addMethodListener","methods","Array","isArray","forEach","config","error","console","log","isTest","arg","getListenerFunctions","removeListener","listener","removeAllListeners"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nconst IS_LOGGING = !Meteor.isProduction;\n\nexport default class EventService {\n  constructor({ emmitter }) {\n    this.emmitter = emmitter;\n    // contains arrays of listener functions, grouped by event names\n    this.listenerFunctions = {};\n    this.addErrorListener();\n  }\n\n  emit(eventName, ...args) {\n    this.logEmittedEvent(eventName, ...args);\n    this.emmitter.emit(eventName, ...args);\n  }\n\n  emitMethod({ name }, ...args) {\n    this.emit(name, ...args);\n  }\n\n  addListener(eventName, listenerFunction) {\n    this.emmitter.addListener(eventName, (...args) => {\n      this.logListener(eventName, ...args);\n      listenerFunction(...args);\n    });\n\n    const listenersForEvent = this.listenerFunctions[eventName] || [];\n\n    this.listenerFunctions[eventName] = [\n      ...listenersForEvent,\n      listenerFunction,\n    ];\n  }\n\n  addMethodListener(methods, listenerFunction) {\n    if (Array.isArray(methods)) {\n      methods.forEach(({ config: { name } }) => {\n        this.addListener(name, listenerFunction);\n      });\n    } else {\n      const {\n        config: { name },\n      } = methods;\n      this.addListener(name, listenerFunction);\n    }\n  }\n\n  addErrorListener() {\n    this.addListener('error', (error) => {\n      console.log('An error occured in an event listener:');\n      console.log(error);\n      throw error;\n    });\n  }\n\n  logEmittedEvent(eventName, ...args) {\n    if (IS_LOGGING && !Meteor.isTest) {\n      // console.log(`Event \"${eventName}\" triggered with params:`);\n      // console.log(params);\n    }\n  }\n\n  logListener(eventName, ...args) {\n    if (IS_LOGGING && !Meteor.isTest) {\n      console.log(`Event \"${eventName}\" listened to with args:`);\n      args.forEach(arg => console.log(arg));\n    }\n  }\n\n  getListenerFunctions(eventName) {\n    return this.listenerFunctions[eventName] || [];\n  }\n\n  removeListener(eventName, listener) {\n    this.emmitter.removeListener(eventName, listener);\n  }\n\n  removeAllListeners(eventName) {\n    this.emmitter.removeAllListeners(eventName);\n  }\n}\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/events/EventService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/events/EventService.js"}},"code":"module.export({\n  default: () => EventService\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nconst IS_LOGGING = !Meteor.isProduction;\n\nclass EventService {\n  constructor(_ref) {\n    let {\n      emmitter\n    } = _ref;\n    this.emmitter = emmitter; // contains arrays of listener functions, grouped by event names\n\n    this.listenerFunctions = {};\n    this.addErrorListener();\n  }\n\n  emit(eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    this.logEmittedEvent(eventName, ...args);\n    this.emmitter.emit(eventName, ...args);\n  }\n\n  emitMethod(_ref2) {\n    let {\n      name\n    } = _ref2;\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    this.emit(name, ...args);\n  }\n\n  addListener(eventName, listenerFunction) {\n    var _this = this;\n\n    this.emmitter.addListener(eventName, function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      _this.logListener(eventName, ...args);\n\n      listenerFunction(...args);\n    });\n    const listenersForEvent = this.listenerFunctions[eventName] || [];\n    this.listenerFunctions[eventName] = [...listenersForEvent, listenerFunction];\n  }\n\n  addMethodListener(methods, listenerFunction) {\n    if (Array.isArray(methods)) {\n      methods.forEach((_ref3) => {\n        let {\n          config: {\n            name\n          }\n        } = _ref3;\n        this.addListener(name, listenerFunction);\n      });\n    } else {\n      const {\n        config: {\n          name\n        }\n      } = methods;\n      this.addListener(name, listenerFunction);\n    }\n  }\n\n  addErrorListener() {\n    this.addListener('error', error => {\n      console.log('An error occured in an event listener:');\n      console.log(error);\n      throw error;\n    });\n  }\n\n  logEmittedEvent(eventName) {\n    if (IS_LOGGING && !Meteor.isTest) {// console.log(`Event \"${eventName}\" triggered with params:`);\n      // console.log(params);\n    }\n  }\n\n  logListener(eventName) {\n    if (IS_LOGGING && !Meteor.isTest) {\n      console.log(\"Event \\\"\".concat(eventName, \"\\\" listened to with args:\"));\n\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      args.forEach(arg => console.log(arg));\n    }\n  }\n\n  getListenerFunctions(eventName) {\n    return this.listenerFunctions[eventName] || [];\n  }\n\n  removeListener(eventName, listener) {\n    this.emmitter.removeListener(eventName, listener);\n  }\n\n  removeAllListeners(eventName) {\n    this.emmitter.removeAllListeners(eventName);\n  }\n\n}","map":{"version":3,"sources":["imports/core/api/events/EventService.js"],"names":["Meteor","IS_LOGGING","constructor","emmitter","emit","emitMethod","name","addListener","listenerFunction","listenersForEvent","addMethodListener","Array","methods","config","addErrorListener","error","console","logEmittedEvent","logListener","args","arg","getListenerFunctions","removeListener","removeAllListeners"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nconst IS_LOGGING = !Meteor.isProduction;\n\nexport default class EventService {\n  constructor({ emmitter }) {\n    this.emmitter = emmitter;\n    // contains arrays of listener functions, grouped by event names\n    this.listenerFunctions = {};\n    this.addErrorListener();\n  }\n\n  emit(eventName, ...args) {\n    this.logEmittedEvent(eventName, ...args);\n    this.emmitter.emit(eventName, ...args);\n  }\n\n  emitMethod({ name }, ...args) {\n    this.emit(name, ...args);\n  }\n\n  addListener(eventName, listenerFunction) {\n    this.emmitter.addListener(eventName, (...args) => {\n      this.logListener(eventName, ...args);\n      listenerFunction(...args);\n    });\n\n    const listenersForEvent = this.listenerFunctions[eventName] || [];\n\n    this.listenerFunctions[eventName] = [\n      ...listenersForEvent,\n      listenerFunction,\n    ];\n  }\n\n  addMethodListener(methods, listenerFunction) {\n    if (Array.isArray(methods)) {\n      methods.forEach(({ config: { name } }) => {\n        this.addListener(name, listenerFunction);\n      });\n    } else {\n      const {\n        config: { name },\n      } = methods;\n      this.addListener(name, listenerFunction);\n    }\n  }\n\n  addErrorListener() {\n    this.addListener('error', (error) => {\n      console.log('An error occured in an event listener:');\n      console.log(error);\n      throw error;\n    });\n  }\n\n  logEmittedEvent(eventName, ...args) {\n    if (IS_LOGGING && !Meteor.isTest) {\n      // console.log(`Event \"${eventName}\" triggered with params:`);\n      // console.log(params);\n    }\n  }\n\n  logListener(eventName, ...args) {\n    if (IS_LOGGING && !Meteor.isTest) {\n      console.log(`Event \"${eventName}\" listened to with args:`);\n      args.forEach(arg => console.log(arg));\n    }\n  }\n\n  getListenerFunctions(eventName) {\n    return this.listenerFunctions[eventName] || [];\n  }\n\n  removeListener(eventName, listener) {\n    this.emmitter.removeListener(eventName, listener);\n  }\n\n  removeAllListeners(eventName) {\n    this.emmitter.removeAllListeners(eventName);\n  }\n}\n"]},"sourceType":"script","hash":"57428edb8bd682918f25fbe56ae5fa66fa2d0fd6"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/contacts/server/ContactService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/contacts/server/ContactService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/contacts/server/ContactService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/contacts/server/ContactService.js"],"names":["Contacts","CollectionService","contact","ContactService","constructor","get","contactId","fetchOne","$filters","_id","changeOrganisations","newOrganisations","organisations","oldOrganisations","forEach","organisationId","removeLink","id","linkName","linkId","metadata","addLink"],"mappings":"AAAA,OAAOA,QAAP;AACA,OAAOC,iBAAP;AACA,SAASC,OAAT;;AAEA,MAAMC,cAAN,SAA6BF,iBAA7B,CAA+C;AAC7CG,EAAAA,WAAW,GAAG;AACZ,UAAMJ,QAAN;AACD;;AAEDK,EAAAA,GAAG,CAACC,SAAD,EAAY;AACb,WAAO,KAAKC,QAAL,CAAc;AACnBC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEH;AAAP,OADS;AAEnB,SAAGJ,OAAO;AAFS,KAAd,CAAP;AAID;;AAEDQ,EAAAA,mBAAmB,CAAC;AAAEJ,IAAAA,SAAF;AAAaK,IAAAA,gBAAgB,GAAG;AAAhC,GAAD,EAAuC;AACxD,UAAM;AAAEC,MAAAA,aAAa,EAAEC,gBAAgB,GAAG;AAApC,QAA2C,KAAKR,GAAL,CAASC,SAAT,CAAjD;AAEAO,IAAAA,gBAAgB,CAACC,OAAjB,CAAyB,CAAC;AAAEL,MAAAA,GAAG,EAAEM;AAAP,KAAD,KACvB,KAAKC,UAAL,CAAgB;AACdC,MAAAA,EAAE,EAAEX,SADU;AAEdY,MAAAA,QAAQ,EAAE,eAFI;AAGdC,MAAAA,MAAM,EAAEJ;AAHM,KAAhB,CADF;AAOAJ,IAAAA,gBAAgB,CAACG,OAAjB,CAAyB,CAAC;AAAEL,MAAAA,GAAG,EAAEM,cAAP;AAAuBK,MAAAA;AAAvB,KAAD,KACvB,KAAKC,OAAL,CAAa;AACXJ,MAAAA,EAAE,EAAEX,SADO;AAEXY,MAAAA,QAAQ,EAAE,eAFC;AAGXC,MAAAA,MAAM,EAAEJ,cAHG;AAIXK,MAAAA;AAJW,KAAb,CADF;AAOD;;AA7B4C;;AAgC/C,eAAe,IAAIjB,cAAJ,EAAf","sourcesContent":["import Contacts from '../contacts';\nimport CollectionService from '../../helpers/CollectionService';\nimport { contact } from '../../fragments';\n\nclass ContactService extends CollectionService {\n  constructor() {\n    super(Contacts);\n  }\n\n  get(contactId) {\n    return this.fetchOne({\n      $filters: { _id: contactId },\n      ...contact(),\n    });\n  }\n\n  changeOrganisations({ contactId, newOrganisations = [] }) {\n    const { organisations: oldOrganisations = [] } = this.get(contactId);\n\n    oldOrganisations.forEach(({ _id: organisationId }) =>\n      this.removeLink({\n        id: contactId,\n        linkName: 'organisations',\n        linkId: organisationId,\n      }));\n\n    newOrganisations.forEach(({ _id: organisationId, metadata }) =>\n      this.addLink({\n        id: contactId,\n        linkName: 'organisations',\n        linkId: organisationId,\n        metadata,\n      }));\n  }\n}\n\nexport default new ContactService();\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/contacts/server/ContactService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/contacts/server/ContactService.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet Contacts;\nmodule.link(\"../contacts\", {\n  default(v) {\n    Contacts = v;\n  }\n\n}, 0);\nlet CollectionService;\nmodule.link(\"../../helpers/CollectionService\", {\n  default(v) {\n    CollectionService = v;\n  }\n\n}, 1);\nlet contact;\nmodule.link(\"../../fragments\", {\n  contact(v) {\n    contact = v;\n  }\n\n}, 2);\n\nclass ContactService extends CollectionService {\n  constructor() {\n    super(Contacts);\n  }\n\n  get(contactId) {\n    return this.fetchOne((0, _objectSpread2.default)({\n      $filters: {\n        _id: contactId\n      }\n    }, contact()));\n  }\n\n  changeOrganisations({\n    contactId,\n    newOrganisations = []\n  }) {\n    const {\n      organisations: oldOrganisations = []\n    } = this.get(contactId);\n    oldOrganisations.forEach(({\n      _id: organisationId\n    }) => this.removeLink({\n      id: contactId,\n      linkName: 'organisations',\n      linkId: organisationId\n    }));\n    newOrganisations.forEach(({\n      _id: organisationId,\n      metadata\n    }) => this.addLink({\n      id: contactId,\n      linkName: 'organisations',\n      linkId: organisationId,\n      metadata\n    }));\n  }\n\n}\n\nmodule.exportDefault(new ContactService());","map":{"version":3,"sources":["imports/core/api/contacts/server/ContactService.js"],"names":["Contacts","constructor","get","$filters","_id","contactId","contact","changeOrganisations","newOrganisations","organisations","oldOrganisations","organisationId","id","linkName","linkId","metadata"],"mappings":";;;;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,aAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,iBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iCAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAIA,MAAA,cAAA,SAAA,iBAAA,CAA+C;AAC7CC,EAAAA,WAAW,GAAG;AACZ,UAAA,QAAA;AACD;;AAEDC,EAAAA,GAAG,CAAA,SAAA,EAAY;AACb,WAAO,KAAA,QAAA;AACLC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEC;AAAP;AADL,OAEFC,OAAO,EAFL,EAAP;AAID;;AAEDC,EAAAA,mBAAmB,CAAC;AAAA,IAAA,SAAA;AAAaC,IAAAA,gBAAgB,GAAG;AAAhC,GAAD,EAAuC;AACxD,UAAM;AAAEC,MAAAA,aAAa,EAAEC,gBAAgB,GAAG;AAApC,QAA2C,KAAA,GAAA,CAAjD,SAAiD,CAAjD;AAEAA,IAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,CAAC;AAAEN,MAAAA,GAAG,EAAEO;AAAP,KAAD,KACvB,KAAA,UAAA,CAAgB;AACdC,MAAAA,EAAE,EADY,SAAA;AAEdC,MAAAA,QAAQ,EAFM,eAAA;AAGdC,MAAAA,MAAM,EAAEH;AAHM,KAAhB,CADFD;AAOAF,IAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,CAAC;AAAEJ,MAAAA,GAAG,EAAL,cAAA;AAAuBW,MAAAA;AAAvB,KAAD,KACvB,KAAA,OAAA,CAAa;AACXH,MAAAA,EAAE,EADS,SAAA;AAEXC,MAAAA,QAAQ,EAFG,eAAA;AAGXC,MAAAA,MAAM,EAHK,cAAA;AAIXC,MAAAA;AAJW,KAAb,CADFP;AAOD;;AA7B4C;;AAJ/C,MAAA,CAAOR,aAAP,CAoCe,IAAf,cAAe,EApCf","sourcesContent":["import Contacts from '../contacts';\nimport CollectionService from '../../helpers/CollectionService';\nimport { contact } from '../../fragments';\n\nclass ContactService extends CollectionService {\n  constructor() {\n    super(Contacts);\n  }\n\n  get(contactId) {\n    return this.fetchOne({\n      $filters: { _id: contactId },\n      ...contact(),\n    });\n  }\n\n  changeOrganisations({ contactId, newOrganisations = [] }) {\n    const { organisations: oldOrganisations = [] } = this.get(contactId);\n\n    oldOrganisations.forEach(({ _id: organisationId }) =>\n      this.removeLink({\n        id: contactId,\n        linkName: 'organisations',\n        linkId: organisationId,\n      }));\n\n    newOrganisations.forEach(({ _id: organisationId, metadata }) =>\n      this.addLink({\n        id: contactId,\n        linkName: 'organisations',\n        linkId: organisationId,\n        metadata,\n      }));\n  }\n}\n\nexport default new ContactService();\n"]},"sourceType":"script","hash":"471a7bead65b9c10b2eee699fbb158472193b4a6"}

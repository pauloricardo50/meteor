{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/methods/clientQueryManager.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/api/methods/clientQueryManager.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/methods/clientQueryManager.js","inputSourceMap":{"version":3,"sources":["imports/core/api/methods/clientQueryManager.js"],"names":["Meteor","ClientEventService","isActive","global","window","init","activeQueries","addQuery","queryName","type","config","name","addQueryToRefetch","Array","isArray","forEach","t","removeQueryToRefetch","Object","keys","filter","query","length","undefined","refetchQuery","emit","refetchQueries","methodName","all","isAppTest"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport ClientEventService from '../events/ClientEventService';\n\nconst isActive = () => !!global.window;\n\nconst init = () => {\n  if (isActive()) {\n    window.activeQueries = {};\n  }\n};\n\ninit();\n\nconst addQuery = (queryName, type) => {\n  // Add support for passing method config objects\n  if (typeof type === 'object') {\n    window.activeQueries[type.config.name] = [\n      ...(window.activeQueries[type.config.name] || []),\n      queryName,\n    ];\n  } else {\n    window.activeQueries[type] = [\n      ...(window.activeQueries[type] || []),\n      queryName,\n    ];\n  }\n};\n\nexport const addQueryToRefetch = (queryName, type) => {\n  if (isActive()) {\n    if (!type) {\n      return;\n    }\n\n    if (Array.isArray(type)) {\n      type.forEach((t) => {\n        addQuery(queryName, t);\n      });\n    } else {\n      addQuery(queryName, type);\n    }\n  }\n};\n\nexport const removeQueryToRefetch = (queryName) => {\n  if (isActive()) {\n    Object.keys(window.activeQueries).forEach((type) => {\n      if (Array.isArray(window.activeQueries[type])) {\n        window.activeQueries[type] = window.activeQueries[type].filter(query => query !== queryName);\n\n        // Clean up this particular refetch key if there is no query in it anymore\n        if (window.activeQueries[type].length === 0) {\n          window.activeQueries[type] = undefined;\n        }\n      }\n    });\n  }\n};\n\nexport const refetchQuery = query => ClientEventService.emit(query);\n\nexport const refetchQueries = (methodName) => {\n  if (isActive()) {\n    if (window.activeQueries.all) {\n      window.activeQueries.all.forEach(refetchQuery);\n    }\n\n    if (window.activeQueries[methodName]) {\n      window.activeQueries[methodName].forEach(refetchQuery);\n    }\n  }\n};\n\nif (Meteor.isAppTest && global.window) {\n  global.window.refetchQueries = refetchQueries;\n}\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/methods/clientQueryManager.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/methods/clientQueryManager.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nmodule.export({\n  addQueryToRefetch: function () {\n    return addQueryToRefetch;\n  },\n  removeQueryToRefetch: function () {\n    return removeQueryToRefetch;\n  },\n  refetchQuery: function () {\n    return refetchQuery;\n  },\n  refetchQueries: function () {\n    return refetchQueries;\n  }\n});\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar ClientEventService;\nmodule.link(\"../events/ClientEventService\", {\n  \"default\": function (v) {\n    ClientEventService = v;\n  }\n}, 1);\n\nvar isActive = function () {\n  return !!global.window;\n};\n\nvar init = function () {\n  if (isActive()) {\n    window.activeQueries = {};\n  }\n};\n\ninit();\n\nvar addQuery = function (queryName, type) {\n  // Add support for passing method config objects\n  if ((0, _typeof2.default)(type) === 'object') {\n    window.activeQueries[type.config.name] = [].concat((0, _toConsumableArray2.default)(window.activeQueries[type.config.name] || []), [queryName]);\n  } else {\n    window.activeQueries[type] = [].concat((0, _toConsumableArray2.default)(window.activeQueries[type] || []), [queryName]);\n  }\n};\n\nvar addQueryToRefetch = function (queryName, type) {\n  if (isActive()) {\n    if (!type) {\n      return;\n    }\n\n    if (Array.isArray(type)) {\n      type.forEach(function (t) {\n        addQuery(queryName, t);\n      });\n    } else {\n      addQuery(queryName, type);\n    }\n  }\n};\n\nvar removeQueryToRefetch = function (queryName) {\n  if (isActive()) {\n    Object.keys(window.activeQueries).forEach(function (type) {\n      if (Array.isArray(window.activeQueries[type])) {\n        window.activeQueries[type] = window.activeQueries[type].filter(function (query) {\n          return query !== queryName;\n        }); // Clean up this particular refetch key if there is no query in it anymore\n\n        if (window.activeQueries[type].length === 0) {\n          window.activeQueries[type] = undefined;\n        }\n      }\n    });\n  }\n};\n\nvar refetchQuery = function (query) {\n  return ClientEventService.emit(query);\n};\n\nvar refetchQueries = function (methodName) {\n  if (isActive()) {\n    if (window.activeQueries.all) {\n      window.activeQueries.all.forEach(refetchQuery);\n    }\n\n    if (window.activeQueries[methodName]) {\n      window.activeQueries[methodName].forEach(refetchQuery);\n    }\n  }\n};\n\nif (Meteor.isAppTest && global.window) {\n  global.window.refetchQueries = refetchQueries;\n}","map":{"version":3,"sources":["imports/core/api/methods/clientQueryManager.js"],"names":["Meteor","isActive","global","init","window","addQuery","type","addQueryToRefetch","Array","t","removeQueryToRefetch","queryName","Object","query","refetchQuery","ClientEventService","refetchQueries","methodName"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport ClientEventService from '../events/ClientEventService';\n\nconst isActive = () => !!global.window;\n\nconst init = () => {\n  if (isActive()) {\n    window.activeQueries = {};\n  }\n};\n\ninit();\n\nconst addQuery = (queryName, type) => {\n  // Add support for passing method config objects\n  if (typeof type === 'object') {\n    window.activeQueries[type.config.name] = [\n      ...(window.activeQueries[type.config.name] || []),\n      queryName,\n    ];\n  } else {\n    window.activeQueries[type] = [\n      ...(window.activeQueries[type] || []),\n      queryName,\n    ];\n  }\n};\n\nexport const addQueryToRefetch = (queryName, type) => {\n  if (isActive()) {\n    if (!type) {\n      return;\n    }\n\n    if (Array.isArray(type)) {\n      type.forEach((t) => {\n        addQuery(queryName, t);\n      });\n    } else {\n      addQuery(queryName, type);\n    }\n  }\n};\n\nexport const removeQueryToRefetch = (queryName) => {\n  if (isActive()) {\n    Object.keys(window.activeQueries).forEach((type) => {\n      if (Array.isArray(window.activeQueries[type])) {\n        window.activeQueries[type] = window.activeQueries[type].filter(query => query !== queryName);\n\n        // Clean up this particular refetch key if there is no query in it anymore\n        if (window.activeQueries[type].length === 0) {\n          window.activeQueries[type] = undefined;\n        }\n      }\n    });\n  }\n};\n\nexport const refetchQuery = query => ClientEventService.emit(query);\n\nexport const refetchQueries = (methodName) => {\n  if (isActive()) {\n    if (window.activeQueries.all) {\n      window.activeQueries.all.forEach(refetchQuery);\n    }\n\n    if (window.activeQueries[methodName]) {\n      window.activeQueries[methodName].forEach(refetchQuery);\n    }\n  }\n};\n\nif (Meteor.isAppTest && global.window) {\n  global.window.refetchQueries = refetchQueries;\n}\n"]},"sourceType":"script","hash":"6581ec29d475cad51cb5176a40d4c06853d047e7"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/6.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/migrations/server/test/6.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/6.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/migrations/server/test/6.test.js"],"names":["expect","resetDatabase","generator","Organisations","up","down","describe","beforeEach","organisations","_id","contacts","users","_factory","it","rawCollection","update","$set","contactIds","role","userLinks","then","findOne","length","to","equal","title","undefined"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport generator from '../../../factories';\nimport { Organisations } from '../../..';\n\nimport { up, down } from '../6';\n\ndescribe('Migration 6', () => {\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      organisations: { _id: 'org' },\n      contacts: { _id: 'contact' },\n      users: { _factory: 'pro', _id: 'user' },\n    });\n  });\n  describe('up', () => {\n    it('renames role into title', () =>\n      Organisations.rawCollection()\n        .update(\n          { _id: 'org' },\n          {\n            $set: {\n              contactIds: [{ _id: 'contact', role: 'test' }],\n              userLinks: [{ _id: 'user', role: 'test' }],\n            },\n          },\n        )\n        .then(up)\n        .then(() => {\n          const { contactIds = [], userLinks = [] } = Organisations.findOne({\n            _id: 'org',\n          });\n          expect(contactIds.length).to.equal(1);\n          expect(userLinks.length).to.equal(1);\n          expect(contactIds[0]._id).to.equal('contact');\n          expect(contactIds[0].title).to.equal('test');\n          expect(contactIds[0].role).to.equal(undefined);\n          expect(userLinks[0]._id).to.equal('user');\n          expect(userLinks[0].title).to.equal('test');\n          expect(userLinks[0].role).to.equal(undefined);\n        }));\n  });\n\n  describe('down', () => {\n    it('renames title into role', () =>\n      Organisations.rawCollection()\n        .update(\n          { _id: 'org' },\n          {\n            $set: {\n              contactIds: [{ _id: 'contact', title: 'test' }],\n              userLinks: [{ _id: 'user', title: 'test' }],\n            },\n          },\n        )\n        .then(down)\n        .then(() => {\n          const { contactIds = [], userLinks = [] } = Organisations.findOne({\n            _id: 'org',\n          });\n          expect(contactIds.length).to.equal(1);\n          expect(userLinks.length).to.equal(1);\n          expect(contactIds[0]._id).to.equal('contact');\n          expect(contactIds[0].role).to.equal('test');\n          expect(contactIds[0].title).to.equal(undefined);\n          expect(userLinks[0]._id).to.equal('user');\n          expect(userLinks[0].role).to.equal('test');\n          expect(userLinks[0].title).to.equal(undefined);\n        }));\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/6.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/migrations/server/test/6.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 2);\nlet Organisations;\nmodule.link(\"../../..\", {\n  Organisations(v) {\n    Organisations = v;\n  }\n\n}, 3);\nlet up, down;\nmodule.link(\"../6\", {\n  up(v) {\n    up = v;\n  },\n\n  down(v) {\n    down = v;\n  }\n\n}, 4);\ndescribe('Migration 6', () => {\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      organisations: {\n        _id: 'org'\n      },\n      contacts: {\n        _id: 'contact'\n      },\n      users: {\n        _factory: 'pro',\n        _id: 'user'\n      }\n    });\n  });\n  describe('up', () => {\n    it('renames role into title', () => Organisations.rawCollection().update({\n      _id: 'org'\n    }, {\n      $set: {\n        contactIds: [{\n          _id: 'contact',\n          role: 'test'\n        }],\n        userLinks: [{\n          _id: 'user',\n          role: 'test'\n        }]\n      }\n    }).then(up).then(() => {\n      const {\n        contactIds = [],\n        userLinks = []\n      } = Organisations.findOne({\n        _id: 'org'\n      });\n      expect(contactIds.length).to.equal(1);\n      expect(userLinks.length).to.equal(1);\n      expect(contactIds[0]._id).to.equal('contact');\n      expect(contactIds[0].title).to.equal('test');\n      expect(contactIds[0].role).to.equal(undefined);\n      expect(userLinks[0]._id).to.equal('user');\n      expect(userLinks[0].title).to.equal('test');\n      expect(userLinks[0].role).to.equal(undefined);\n    }));\n  });\n  describe('down', () => {\n    it('renames title into role', () => Organisations.rawCollection().update({\n      _id: 'org'\n    }, {\n      $set: {\n        contactIds: [{\n          _id: 'contact',\n          title: 'test'\n        }],\n        userLinks: [{\n          _id: 'user',\n          title: 'test'\n        }]\n      }\n    }).then(down).then(() => {\n      const {\n        contactIds = [],\n        userLinks = []\n      } = Organisations.findOne({\n        _id: 'org'\n      });\n      expect(contactIds.length).to.equal(1);\n      expect(userLinks.length).to.equal(1);\n      expect(contactIds[0]._id).to.equal('contact');\n      expect(contactIds[0].role).to.equal('test');\n      expect(contactIds[0].title).to.equal(undefined);\n      expect(userLinks[0]._id).to.equal('user');\n      expect(userLinks[0].role).to.equal('test');\n      expect(userLinks[0].title).to.equal(undefined);\n    }));\n  });\n});","map":{"version":3,"sources":["imports/core/api/migrations/server/test/6.test.js"],"names":["describe","beforeEach","resetDatabase","generator","organisations","_id","contacts","users","_factory","it","$set","contactIds","role","userLinks","expect","title"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport generator from '../../../factories';\nimport { Organisations } from '../../..';\n\nimport { up, down } from '../6';\n\ndescribe('Migration 6', () => {\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      organisations: { _id: 'org' },\n      contacts: { _id: 'contact' },\n      users: { _factory: 'pro', _id: 'user' },\n    });\n  });\n  describe('up', () => {\n    it('renames role into title', () =>\n      Organisations.rawCollection()\n        .update(\n          { _id: 'org' },\n          {\n            $set: {\n              contactIds: [{ _id: 'contact', role: 'test' }],\n              userLinks: [{ _id: 'user', role: 'test' }],\n            },\n          },\n        )\n        .then(up)\n        .then(() => {\n          const { contactIds = [], userLinks = [] } = Organisations.findOne({\n            _id: 'org',\n          });\n          expect(contactIds.length).to.equal(1);\n          expect(userLinks.length).to.equal(1);\n          expect(contactIds[0]._id).to.equal('contact');\n          expect(contactIds[0].title).to.equal('test');\n          expect(contactIds[0].role).to.equal(undefined);\n          expect(userLinks[0]._id).to.equal('user');\n          expect(userLinks[0].title).to.equal('test');\n          expect(userLinks[0].role).to.equal(undefined);\n        }));\n  });\n\n  describe('down', () => {\n    it('renames title into role', () =>\n      Organisations.rawCollection()\n        .update(\n          { _id: 'org' },\n          {\n            $set: {\n              contactIds: [{ _id: 'contact', title: 'test' }],\n              userLinks: [{ _id: 'user', title: 'test' }],\n            },\n          },\n        )\n        .then(down)\n        .then(() => {\n          const { contactIds = [], userLinks = [] } = Organisations.findOne({\n            _id: 'org',\n          });\n          expect(contactIds.length).to.equal(1);\n          expect(userLinks.length).to.equal(1);\n          expect(contactIds[0]._id).to.equal('contact');\n          expect(contactIds[0].role).to.equal('test');\n          expect(contactIds[0].title).to.equal(undefined);\n          expect(userLinks[0]._id).to.equal('user');\n          expect(userLinks[0].role).to.equal('test');\n          expect(userLinks[0].title).to.equal(undefined);\n        }));\n  });\n});\n"]},"sourceType":"script","hash":"6c27ff6e485218cdd44b0244aea7f40a9bfd1428"}

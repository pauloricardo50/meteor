{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/monitoring/server/test/monitoring.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/monitoring/server/test/monitoring.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/monitoring/server/test/monitoring.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/monitoring/server/test/monitoring.test.js"],"names":["resetDatabase","moment","expect","LoanService","REVENUE_STATUS","generator","LOAN_STATUS","loanMonitoring","describe","only","beforeEach","it","loans","status","LEAD","ONGOING","CLOSING","result","groupBy","value","to","deep","equal","_id","count","revenues","amount","CLOSED","expectedRevenues","paidRevenues","selectedStructure","structures","id","wantedLoan","loanValue","collection","rawCollection","insert","name","createdAt","toDate","month","year","expectedAt","paidAt"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport moment from 'moment';\nimport { expect } from 'chai';\n\nimport LoanService from 'core/api/loans/server/LoanService';\nimport { REVENUE_STATUS } from 'core/api/revenues/revenueConstants';\nimport generator from '../../../factories/factoriesHelpers';\nimport { LOAN_STATUS } from '../../../loans/loanConstants';\nimport { loanMonitoring } from '../resolvers';\n\ndescribe.only('monitoring', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('loanMonitoring', () => {\n    it('groups loans by status', async () => {\n      generator({\n        loans: [\n          { status: LOAN_STATUS.LEAD },\n          { status: LOAN_STATUS.LEAD },\n          { status: LOAN_STATUS.ONGOING },\n          { status: LOAN_STATUS.CLOSING },\n        ],\n      });\n\n      const result = await loanMonitoring({\n        groupBy: 'status',\n        value: 'count',\n      });\n\n      expect(result).to.deep.equal([\n        { _id: LOAN_STATUS.CLOSING, count: 1 },\n        { _id: LOAN_STATUS.ONGOING, count: 1 },\n        { _id: LOAN_STATUS.LEAD, count: 2 },\n      ]);\n    });\n\n    it('adds up revenues for each status', async () => {\n      generator({\n        loans: [\n          { status: LOAN_STATUS.LEAD, revenues: { amount: 100 } },\n          {\n            status: LOAN_STATUS.CLOSING,\n            revenues: [\n              { amount: 100, status: REVENUE_STATUS.CLOSED },\n              { amount: 100 },\n            ],\n          },\n        ],\n      });\n\n      const result = await loanMonitoring({\n        groupBy: 'status',\n        value: 'revenues',\n      });\n\n      expect(result).to.deep.equal([\n        {\n          _id: LOAN_STATUS.CLOSING,\n          revenues: 200,\n          expectedRevenues: 100,\n          paidRevenues: 100,\n        },\n        {\n          _id: LOAN_STATUS.LEAD,\n          revenues: 100,\n          expectedRevenues: 100,\n          paidRevenues: 0,\n        },\n      ]);\n    });\n\n    it('adds up wantedLoan values', async () => {\n      generator({\n        loans: [\n          {\n            selectedStructure: '2',\n            structures: [\n              { id: '1', wantedLoan: 5 },\n              { id: '2', wantedLoan: 3 },\n            ],\n          },\n          { selectedStructure: '1', structures: [{ id: '1', wantedLoan: 5 }] },\n          {\n            selectedStructure: '1',\n            structures: [{ id: '1', wantedLoan: 4 }],\n            status: LOAN_STATUS.CLOSING,\n          },\n        ],\n      });\n\n      const result = await loanMonitoring({\n        groupBy: 'status',\n        value: 'loanValue',\n      });\n\n      expect(result).to.deep.equal([\n        { _id: LOAN_STATUS.CLOSING, loanValue: 4 },\n        { _id: LOAN_STATUS.LEAD, loanValue: 8 },\n      ]);\n    });\n\n    it('groups loans by createdBy', async () => {\n      await LoanService.collection.rawCollection().insert({\n        name: 'a',\n        createdAt: moment('2018/01/02', 'YYYY/MM/DD').toDate(),\n      });\n      await LoanService.collection.rawCollection().insert({\n        name: 'b',\n        createdAt: moment('2018/01/05', 'YYYY/MM/DD').toDate(),\n      });\n      await LoanService.collection.rawCollection().insert({\n        name: 'c',\n        createdAt: moment('2018/03/02', 'YYYY/MM/DD').toDate(),\n      });\n\n      const result = await loanMonitoring({\n        groupBy: 'createdAt',\n        value: 'count',\n      });\n\n      expect(result).to.deep.equal([\n        { _id: { month: 3, year: 2018 }, count: 1 },\n        { _id: { month: 1, year: 2018 }, count: 2 },\n      ]);\n    });\n\n    it.only('groups revenues by date', async () => {\n      generator({\n        loans: [\n          {\n            revenues: {\n              amount: 100,\n              expectedAt: moment('2018/01/02', 'YYYY/MM/DD').toDate(),\n            },\n          },\n          {\n            revenues: [\n              {\n                amount: 200,\n                expectedAt: moment('2018/02/02', 'YYYY/MM/DD').toDate(),\n              },\n              {\n                amount: 300,\n                expectedAt: moment('2018/03/02', 'YYYY/MM/DD').toDate(),\n                paidAt: moment('2018/04/02', 'YYYY/MM/DD').toDate(),\n              },\n              { amount: 400 },\n              {\n                amount: 500,\n                expectedAt: moment('2018/05/02', 'YYYY/MM/DD').toDate(),\n                paidAt: moment('2018/01/02', 'YYYY/MM/DD').toDate(),\n                status: REVENUE_STATUS.CLOSED,\n              },\n              {\n                amount: 600,\n                expectedAt: moment('2019/01/02', 'YYYY/MM/DD').toDate(),\n                status: REVENUE_STATUS.CLOSED,\n              },\n            ],\n          },\n        ],\n      });\n\n      const result = await loanMonitoring({\n        groupBy: 'revenueDate',\n        value: 'revenues',\n      });\n\n      expect(result).to.deep.equal([\n        {\n          _id: { month: null, year: null },\n          revenues: 1000,\n          paidRevenues: 600,\n          expectedRevenues: 400,\n        },\n        {\n          _id: { month: 1, year: 2018 },\n          revenues: 600,\n          paidRevenues: 500,\n          expectedRevenues: 100,\n        },\n        {\n          _id: { month: 2, year: 2018 },\n          revenues: 200,\n          paidRevenues: 0,\n          expectedRevenues: 200,\n        },\n        {\n          _id: { month: 3, year: 2018 },\n          revenues: 300,\n          paidRevenues: 0,\n          expectedRevenues: 300,\n        },\n      ]);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/monitoring/server/test/monitoring.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/monitoring/server/test/monitoring.test.js"}},"code":"let resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 0);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet LoanService;\nmodule.link(\"../../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 3);\nlet REVENUE_STATUS;\nmodule.link(\"../../../revenues/revenueConstants\", {\n  REVENUE_STATUS(v) {\n    REVENUE_STATUS = v;\n  }\n\n}, 4);\nlet generator;\nmodule.link(\"../../../factories/factoriesHelpers\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 5);\nlet LOAN_STATUS;\nmodule.link(\"../../../loans/loanConstants\", {\n  LOAN_STATUS(v) {\n    LOAN_STATUS = v;\n  }\n\n}, 6);\nlet loanMonitoring;\nmodule.link(\"../resolvers\", {\n  loanMonitoring(v) {\n    loanMonitoring = v;\n  }\n\n}, 7);\ndescribe.only('monitoring', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('loanMonitoring', () => {\n    it('groups loans by status', () => Promise.asyncApply(() => {\n      generator({\n        loans: [{\n          status: LOAN_STATUS.LEAD\n        }, {\n          status: LOAN_STATUS.LEAD\n        }, {\n          status: LOAN_STATUS.ONGOING\n        }, {\n          status: LOAN_STATUS.CLOSING\n        }]\n      });\n      const result = Promise.await(loanMonitoring({\n        groupBy: 'status',\n        value: 'count'\n      }));\n      expect(result).to.deep.equal([{\n        _id: LOAN_STATUS.CLOSING,\n        count: 1\n      }, {\n        _id: LOAN_STATUS.ONGOING,\n        count: 1\n      }, {\n        _id: LOAN_STATUS.LEAD,\n        count: 2\n      }]);\n    }));\n    it('adds up revenues for each status', () => Promise.asyncApply(() => {\n      generator({\n        loans: [{\n          status: LOAN_STATUS.LEAD,\n          revenues: {\n            amount: 100\n          }\n        }, {\n          status: LOAN_STATUS.CLOSING,\n          revenues: [{\n            amount: 100,\n            status: REVENUE_STATUS.CLOSED\n          }, {\n            amount: 100\n          }]\n        }]\n      });\n      const result = Promise.await(loanMonitoring({\n        groupBy: 'status',\n        value: 'revenues'\n      }));\n      expect(result).to.deep.equal([{\n        _id: LOAN_STATUS.CLOSING,\n        revenues: 200,\n        expectedRevenues: 100,\n        paidRevenues: 100\n      }, {\n        _id: LOAN_STATUS.LEAD,\n        revenues: 100,\n        expectedRevenues: 100,\n        paidRevenues: 0\n      }]);\n    }));\n    it('adds up wantedLoan values', () => Promise.asyncApply(() => {\n      generator({\n        loans: [{\n          selectedStructure: '2',\n          structures: [{\n            id: '1',\n            wantedLoan: 5\n          }, {\n            id: '2',\n            wantedLoan: 3\n          }]\n        }, {\n          selectedStructure: '1',\n          structures: [{\n            id: '1',\n            wantedLoan: 5\n          }]\n        }, {\n          selectedStructure: '1',\n          structures: [{\n            id: '1',\n            wantedLoan: 4\n          }],\n          status: LOAN_STATUS.CLOSING\n        }]\n      });\n      const result = Promise.await(loanMonitoring({\n        groupBy: 'status',\n        value: 'loanValue'\n      }));\n      expect(result).to.deep.equal([{\n        _id: LOAN_STATUS.CLOSING,\n        loanValue: 4\n      }, {\n        _id: LOAN_STATUS.LEAD,\n        loanValue: 8\n      }]);\n    }));\n    it('groups loans by createdBy', () => Promise.asyncApply(() => {\n      Promise.await(LoanService.collection.rawCollection().insert({\n        name: 'a',\n        createdAt: moment('2018/01/02', 'YYYY/MM/DD').toDate()\n      }));\n      Promise.await(LoanService.collection.rawCollection().insert({\n        name: 'b',\n        createdAt: moment('2018/01/05', 'YYYY/MM/DD').toDate()\n      }));\n      Promise.await(LoanService.collection.rawCollection().insert({\n        name: 'c',\n        createdAt: moment('2018/03/02', 'YYYY/MM/DD').toDate()\n      }));\n      const result = Promise.await(loanMonitoring({\n        groupBy: 'createdAt',\n        value: 'count'\n      }));\n      expect(result).to.deep.equal([{\n        _id: {\n          month: 3,\n          year: 2018\n        },\n        count: 1\n      }, {\n        _id: {\n          month: 1,\n          year: 2018\n        },\n        count: 2\n      }]);\n    }));\n    it.only('groups revenues by date', () => Promise.asyncApply(() => {\n      generator({\n        loans: [{\n          revenues: {\n            amount: 100,\n            expectedAt: moment('2018/01/02', 'YYYY/MM/DD').toDate()\n          }\n        }, {\n          revenues: [{\n            amount: 200,\n            expectedAt: moment('2018/02/02', 'YYYY/MM/DD').toDate()\n          }, {\n            amount: 300,\n            expectedAt: moment('2018/03/02', 'YYYY/MM/DD').toDate(),\n            paidAt: moment('2018/04/02', 'YYYY/MM/DD').toDate()\n          }, {\n            amount: 400\n          }, {\n            amount: 500,\n            expectedAt: moment('2018/05/02', 'YYYY/MM/DD').toDate(),\n            paidAt: moment('2018/01/02', 'YYYY/MM/DD').toDate(),\n            status: REVENUE_STATUS.CLOSED\n          }, {\n            amount: 600,\n            expectedAt: moment('2019/01/02', 'YYYY/MM/DD').toDate(),\n            status: REVENUE_STATUS.CLOSED\n          }]\n        }]\n      });\n      const result = Promise.await(loanMonitoring({\n        groupBy: 'revenueDate',\n        value: 'revenues'\n      }));\n      expect(result).to.deep.equal([{\n        _id: {\n          month: null,\n          year: null\n        },\n        revenues: 1000,\n        paidRevenues: 600,\n        expectedRevenues: 400\n      }, {\n        _id: {\n          month: 1,\n          year: 2018\n        },\n        revenues: 600,\n        paidRevenues: 500,\n        expectedRevenues: 100\n      }, {\n        _id: {\n          month: 2,\n          year: 2018\n        },\n        revenues: 200,\n        paidRevenues: 0,\n        expectedRevenues: 200\n      }, {\n        _id: {\n          month: 3,\n          year: 2018\n        },\n        revenues: 300,\n        paidRevenues: 0,\n        expectedRevenues: 300\n      }]);\n    }));\n  });\n});","map":{"version":3,"sources":["imports/core/api/monitoring/server/test/monitoring.test.js"],"names":["describe","beforeEach","resetDatabase","it","generator","loans","status","LOAN_STATUS","LEAD","ONGOING","CLOSING","result","loanMonitoring","groupBy","value","expect","_id","count","revenues","amount","REVENUE_STATUS","CLOSED","expectedRevenues","paidRevenues","selectedStructure","structures","id","wantedLoan","loanValue","name","createdAt","moment","month","year","expectedAt","paidAt"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport moment from 'moment';\nimport { expect } from 'chai';\n\nimport LoanService from 'core/api/loans/server/LoanService';\nimport { REVENUE_STATUS } from 'core/api/revenues/revenueConstants';\nimport generator from '../../../factories/factoriesHelpers';\nimport { LOAN_STATUS } from '../../../loans/loanConstants';\nimport { loanMonitoring } from '../resolvers';\n\ndescribe.only('monitoring', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('loanMonitoring', () => {\n    it('groups loans by status', async () => {\n      generator({\n        loans: [\n          { status: LOAN_STATUS.LEAD },\n          { status: LOAN_STATUS.LEAD },\n          { status: LOAN_STATUS.ONGOING },\n          { status: LOAN_STATUS.CLOSING },\n        ],\n      });\n\n      const result = await loanMonitoring({\n        groupBy: 'status',\n        value: 'count',\n      });\n\n      expect(result).to.deep.equal([\n        { _id: LOAN_STATUS.CLOSING, count: 1 },\n        { _id: LOAN_STATUS.ONGOING, count: 1 },\n        { _id: LOAN_STATUS.LEAD, count: 2 },\n      ]);\n    });\n\n    it('adds up revenues for each status', async () => {\n      generator({\n        loans: [\n          { status: LOAN_STATUS.LEAD, revenues: { amount: 100 } },\n          {\n            status: LOAN_STATUS.CLOSING,\n            revenues: [\n              { amount: 100, status: REVENUE_STATUS.CLOSED },\n              { amount: 100 },\n            ],\n          },\n        ],\n      });\n\n      const result = await loanMonitoring({\n        groupBy: 'status',\n        value: 'revenues',\n      });\n\n      expect(result).to.deep.equal([\n        {\n          _id: LOAN_STATUS.CLOSING,\n          revenues: 200,\n          expectedRevenues: 100,\n          paidRevenues: 100,\n        },\n        {\n          _id: LOAN_STATUS.LEAD,\n          revenues: 100,\n          expectedRevenues: 100,\n          paidRevenues: 0,\n        },\n      ]);\n    });\n\n    it('adds up wantedLoan values', async () => {\n      generator({\n        loans: [\n          {\n            selectedStructure: '2',\n            structures: [\n              { id: '1', wantedLoan: 5 },\n              { id: '2', wantedLoan: 3 },\n            ],\n          },\n          { selectedStructure: '1', structures: [{ id: '1', wantedLoan: 5 }] },\n          {\n            selectedStructure: '1',\n            structures: [{ id: '1', wantedLoan: 4 }],\n            status: LOAN_STATUS.CLOSING,\n          },\n        ],\n      });\n\n      const result = await loanMonitoring({\n        groupBy: 'status',\n        value: 'loanValue',\n      });\n\n      expect(result).to.deep.equal([\n        { _id: LOAN_STATUS.CLOSING, loanValue: 4 },\n        { _id: LOAN_STATUS.LEAD, loanValue: 8 },\n      ]);\n    });\n\n    it('groups loans by createdBy', async () => {\n      await LoanService.collection.rawCollection().insert({\n        name: 'a',\n        createdAt: moment('2018/01/02', 'YYYY/MM/DD').toDate(),\n      });\n      await LoanService.collection.rawCollection().insert({\n        name: 'b',\n        createdAt: moment('2018/01/05', 'YYYY/MM/DD').toDate(),\n      });\n      await LoanService.collection.rawCollection().insert({\n        name: 'c',\n        createdAt: moment('2018/03/02', 'YYYY/MM/DD').toDate(),\n      });\n\n      const result = await loanMonitoring({\n        groupBy: 'createdAt',\n        value: 'count',\n      });\n\n      expect(result).to.deep.equal([\n        { _id: { month: 3, year: 2018 }, count: 1 },\n        { _id: { month: 1, year: 2018 }, count: 2 },\n      ]);\n    });\n\n    it.only('groups revenues by date', async () => {\n      generator({\n        loans: [\n          {\n            revenues: {\n              amount: 100,\n              expectedAt: moment('2018/01/02', 'YYYY/MM/DD').toDate(),\n            },\n          },\n          {\n            revenues: [\n              {\n                amount: 200,\n                expectedAt: moment('2018/02/02', 'YYYY/MM/DD').toDate(),\n              },\n              {\n                amount: 300,\n                expectedAt: moment('2018/03/02', 'YYYY/MM/DD').toDate(),\n                paidAt: moment('2018/04/02', 'YYYY/MM/DD').toDate(),\n              },\n              { amount: 400 },\n              {\n                amount: 500,\n                expectedAt: moment('2018/05/02', 'YYYY/MM/DD').toDate(),\n                paidAt: moment('2018/01/02', 'YYYY/MM/DD').toDate(),\n                status: REVENUE_STATUS.CLOSED,\n              },\n              {\n                amount: 600,\n                expectedAt: moment('2019/01/02', 'YYYY/MM/DD').toDate(),\n                status: REVENUE_STATUS.CLOSED,\n              },\n            ],\n          },\n        ],\n      });\n\n      const result = await loanMonitoring({\n        groupBy: 'revenueDate',\n        value: 'revenues',\n      });\n\n      expect(result).to.deep.equal([\n        {\n          _id: { month: null, year: null },\n          revenues: 1000,\n          paidRevenues: 600,\n          expectedRevenues: 400,\n        },\n        {\n          _id: { month: 1, year: 2018 },\n          revenues: 600,\n          paidRevenues: 500,\n          expectedRevenues: 100,\n        },\n        {\n          _id: { month: 2, year: 2018 },\n          revenues: 200,\n          paidRevenues: 0,\n          expectedRevenues: 200,\n        },\n        {\n          _id: { month: 3, year: 2018 },\n          revenues: 300,\n          paidRevenues: 0,\n          expectedRevenues: 300,\n        },\n      ]);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"bc54947b6217aaa68449a7813c0d60ab4b7daab1"}

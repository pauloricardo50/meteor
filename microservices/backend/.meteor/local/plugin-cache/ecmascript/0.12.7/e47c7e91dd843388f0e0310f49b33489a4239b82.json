{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/client/test/AutoForm.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/components/AutoForm2/client/test/AutoForm.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/client/test/AutoForm.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/AutoForm2/client/test/AutoForm.spec.jsx"],"names":["React","expect","SimpleSchema","Button","TextField","Loading","pollUntilReady","getMountedComponent","AutoForm","CustomSelectField","DateField","CUSTOM_AUTOFIELD_TYPES","PercentField","CustomAutoField","props","component","Component","setInput","name","value","find","simulate","target","describe","beforeEach","reset","schema","text","String","it","exists","to","equal","type","condition","stuff","model","length","omitFields","arr","Array","Object","hello","onSubmit","values","deep","allowedValues","customAllowedValues","Date","uniforms","DATE","Number","PERCENT","myText","label","autoFieldProps","labels","include","children","context","at","placeholder","prop","update","myText1","defaultValue","myText2","customAutoValue","percent","date","select","then"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport SimpleSchema from 'simpl-schema';\nimport Button from '@material-ui/core/Button';\nimport TextField from 'uniforms-material/TextField';\n\nimport Loading from '../../../Loading';\nimport pollUntilReady from '../../../../utils/pollUntilReady';\nimport getMountedComponent from '../../../../utils/testHelpers/getMountedComponent';\n\nimport AutoForm from '../../AutoForm';\nimport CustomSelectField from '../../CustomSelectField';\nimport DateField from '../../../DateField';\nimport { CUSTOM_AUTOFIELD_TYPES } from '../../constants';\nimport { PercentField } from '../../../PercentInput';\nimport { CustomAutoField } from '../../AutoFormComponents';\n\nlet props;\nconst component = () => getMountedComponent({ Component: AutoForm, props });\n\nconst setInput = (name, value) => {\n  component()\n    .find(`[name=\"${name}\"]`)\n    .find('input')\n    .simulate('change', { target: { value } });\n};\n\ndescribe('AutoForm', () => {\n  beforeEach(() => {\n    getMountedComponent.reset();\n    props = { schema: new SimpleSchema({ text: String }) };\n  });\n\n  it('renders a form with a field and submit button', () => {\n    expect(component()\n      .find('form')\n      .exists()).to.equal(true);\n    expect(component()\n      .find(TextField)\n      .exists()).to.equal(true);\n    expect(component()\n      .find(Button)\n      .exists()).to.equal(true);\n  });\n\n  it('does not render fields with a false condition', () => {\n    props = {\n      schema: new SimpleSchema({\n        text: { type: String, condition: () => false },\n      }),\n    };\n    expect(component()\n      .find('form')\n      .exists()).to.equal(true);\n    expect(component()\n      .find(TextField)\n      .exists()).to.equal(false);\n    expect(component()\n      .find(Button)\n      .exists()).to.equal(true);\n  });\n\n  it('does not render fields based on changes to the model', () => {\n    props = {\n      schema: new SimpleSchema({\n        text: {\n          type: String,\n          condition: ({ stuff }) => stuff !== 'dude',\n        },\n        stuff: String,\n      }),\n      model: {},\n    };\n\n    expect(component().find(TextField).length).to.equal(2);\n\n    setInput('stuff', 'dud');\n\n    expect(component().find(TextField).length).to.equal(2);\n\n    setInput('stuff', 'dude');\n\n    expect(component().find(TextField).length).to.equal(1);\n  });\n\n  it('skips fields that are omitted', () => {\n    props = {\n      schema: new SimpleSchema({ text: String, stuff: String }),\n      omitFields: ['text'],\n    };\n\n    expect(component().find(TextField).length).to.equal(1);\n  });\n\n  it('filters the model and only submits the form values', () => {\n    props = {\n      schema: new SimpleSchema({\n        stuff: String,\n        arr: Array,\n        'arr.$': Object,\n        'arr.$.text': String,\n      }),\n      model: { stuff: 'yo', arr: [{ text: 'dude' }], hello: 'dawg' },\n      onSubmit: (values) => {\n        expect(values).to.deep.equal({ stuff: 'yo', arr: [{ text: 'dude' }] });\n      },\n    };\n\n    component()\n      .find('form')\n      .simulate('submit');\n  });\n\n  describe('Custom components', () => {\n    it('renders a select field if allowedValues is passed', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: { type: String, allowedValues: ['yo'] },\n        }),\n      };\n\n      expect(component().find(CustomSelectField).length).to.equal(1);\n    });\n\n    it('renders a select field if customAllowedValues is passed', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: { type: String, customAllowedValues: () => ['yo'] },\n        }),\n      };\n\n      expect(component().find(CustomSelectField).length).to.equal(1);\n    });\n\n    it('renders a date field if uniforms type is Date', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: { type: Date, uniforms: { type: CUSTOM_AUTOFIELD_TYPES.DATE } },\n        }),\n      };\n\n      expect(component().find(DateField).length).to.equal(1);\n    });\n\n    it('renders a percent field if uniforms type is percent', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: Number,\n            uniforms: { type: CUSTOM_AUTOFIELD_TYPES.PERCENT },\n          },\n        }),\n      };\n\n      expect(component().find(PercentField).length).to.equal(1);\n    });\n  });\n\n  describe('labels', () => {\n    it('removes the label if null is used', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { label: 'Yo' } },\n        }),\n        autoFieldProps: { labels: { myText: null } },\n      };\n\n      expect(component().find('label').length).to.equal(0);\n    });\n\n    it('sets the label', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { label: 'Yo' } },\n        }),\n        autoFieldProps: { labels: { myText: 'Yo' } },\n      };\n\n      expect(component()\n        .find('label')\n        .text()).to.include('Yo');\n    });\n\n    it('overrides the label if provided on the children', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { label: 'Yo' } },\n        }),\n        autoFieldProps: { labels: { myText: 'Yo' } },\n        children: <CustomAutoField name=\"myText\" overrideLabel=\"Dude\" />,\n      };\n\n      expect(component()\n        .find('label')\n        .text()).to.include('Dude');\n    });\n\n    it('uses the label on the schema', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { label: 'mah dude' } },\n        }),\n      };\n\n      expect(component()\n        .find('label')\n        .text()).to.include('mah dude');\n    });\n\n    it('sets a default label with Translation', () => {\n      props = {\n        schema: new SimpleSchema({ myText: { type: String } }),\n      };\n\n      expect(component()\n        .find('label')\n        .text()).to.include('Forms.myText');\n    });\n\n    it('does not set the label if one of them is null', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { label: null } },\n        }),\n      };\n\n      expect(component().find('label').length).to.equal(0);\n    });\n\n    context('in nested fields', () => {\n      it('sets the right label on nested objects', () => {\n        props = {\n          schema: new SimpleSchema({\n            myText: Array,\n            'myText.$': Object,\n            'myText.$.stuff': String,\n          }),\n        };\n\n        component()\n          .find('button')\n          .at(0)\n          .simulate('click');\n\n        expect(component()\n          .find('label')\n          .text()).to.include('Forms.myText.stuff');\n      });\n    });\n  });\n\n  describe('placeholders', () => {\n    it('does not set a placeholder if placeholder is false on the autoform', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String },\n        }),\n        placeholder: false,\n      };\n\n      expect(component()\n        .find(AutoForm)\n        .prop('placeholder')).to.equal(false);\n\n      expect(component()\n        .find('input')\n        .prop('placeholder')).to.equal('');\n    });\n\n    it('sets the placeholder', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { placeholder: 'Howdy' } },\n        }),\n        placeholder: true,\n      };\n\n      expect(component()\n        .find('input')\n        .prop('placeholder')).to.equal('p.ex: Howdy');\n    });\n\n    it('does not set the placeholder if null is used', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { placeholder: null } },\n        }),\n        placeholder: true,\n      };\n\n      expect(component()\n        .find('input')\n        .prop('placeholder')).to.equal(null);\n    });\n\n    it('sets a default placeholder', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String },\n        }),\n        placeholder: true,\n      };\n\n      expect(component()\n        .find('input')\n        .prop('placeholder')).to.include('Forms.myText.placeholder');\n    });\n\n    context('in nested fields', () => {\n      it('sets a placeholder for a list item field', () => {\n        props = {\n          schema: new SimpleSchema({\n            myText: { type: String, allowedValues: ['yo', 'dude'] },\n          }),\n          placeholder: true,\n        };\n\n        component()\n          .find(CustomSelectField)\n          .at(0)\n          .simulate('click');\n\n        component().update();\n\n        expect(component()\n          .find(CustomSelectField)\n          .prop('placeholder')).to.equal('Forms.myText.placeholder');\n      });\n\n      it('does not set a placeholder for a list item field', () => {\n        props = {\n          schema: new SimpleSchema({\n            myText: [String],\n          }),\n          placeholder: false,\n        };\n\n        component()\n          .find('button')\n          .at(0)\n          .simulate('click');\n\n        expect(component()\n          .find('input')\n          .prop('placeholder')).to.equal('');\n      });\n\n      context('sets the right placeholder on nested objects', () => {\n        it('when parent label is not null', () => {\n          props = {\n            schema: new SimpleSchema({\n              myText: Array,\n              'myText.$': Object,\n              'myText.$.stuff': String,\n            }),\n            placeholder: true,\n          };\n\n          component()\n            .find('button')\n            .at(0)\n            .simulate('click');\n\n          expect(component()\n            .find('input')\n            .prop('placeholder')).to.include('Forms.myText.stuff.placeholder');\n        });\n\n        it('when parent label is null', () => {\n          props = {\n            schema: new SimpleSchema({\n              myText: Array,\n              'myText.$': { type: Object, uniforms: { label: null } },\n              'myText.$.stuff': {\n                type: String,\n                uniforms: { placeholder: 'myPlaceholder' },\n              },\n            }),\n            placeholder: true,\n          };\n\n          component()\n            .find('button')\n            .at(0)\n            .simulate('click');\n\n          expect(component()\n            .find('input')\n            .prop('placeholder')).to.include('myPlaceholder');\n        });\n      });\n\n      it('skips placeholders on nested objects', () => {\n        props = {\n          schema: new SimpleSchema({\n            myText: Array,\n            'myText.$': Object,\n            'myText.$.stuff': String,\n          }),\n          placeholder: false,\n        };\n\n        component()\n          .find('button')\n          .at(0)\n          .simulate('click');\n\n        expect(component()\n          .find('input')\n          .prop('placeholder')).to.equal('');\n      });\n    });\n  });\n\n  describe('children', () => {\n    it('have access to conditional rendering', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText1: { type: String, defaultValue: 'yo' },\n          myText2: {\n            type: String,\n            condition: ({ myText1 }) => myText1 === 'dude',\n          },\n        }),\n        children: (\n          <>\n            <CustomAutoField name=\"myText1\" />\n            <CustomAutoField name=\"myText2\" />\n          </>\n        ),\n      };\n\n      expect(component().find(TextField).length).to.equal(1);\n\n      setInput('myText1', 'dude');\n\n      expect(component().find(TextField).length).to.equal(2);\n    });\n\n    it('have access to custom auto values', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText1: { type: String, defaultValue: 'yo' },\n          myText2: {\n            type: String,\n            customAutoValue: ({ myText1 }) => `${myText1} dude`,\n          },\n        }),\n        children: (\n          <>\n            <CustomAutoField name=\"myText1\" />\n            <CustomAutoField name=\"myText2\" />\n          </>\n        ),\n      };\n\n      expect(component()\n        .find('[name=\"myText2\"]')\n        .find('input')\n        .prop('value')).to.equal('yo dude');\n\n      setInput('myText1', 'hello');\n\n      expect(component()\n        .find('[name=\"myText2\"]')\n        .find('input')\n        .prop('value')).to.equal('hello dude');\n    });\n\n    it('can render custom components', () => {\n      props = {\n        schema: new SimpleSchema({\n          percent: {\n            type: Number,\n            uniforms: { type: CUSTOM_AUTOFIELD_TYPES.PERCENT },\n          },\n          date: { type: Date, uniforms: { type: CUSTOM_AUTOFIELD_TYPES.DATE } },\n          select: { type: String, customAllowedValues: () => ['yo'] },\n        }),\n        children: (\n          <>\n            <CustomAutoField name=\"percent\" />\n            <CustomAutoField name=\"date\" />\n            <CustomAutoField name=\"select\" />\n          </>\n        ),\n      };\n\n      expect(component().find(PercentField).length).to.equal(1);\n      expect(component().find(DateField).length).to.equal(1);\n      expect(component().find(CustomSelectField).length).to.equal(1);\n    });\n  });\n\n  it('does not unmount components when updating the model, and loading only displays once', () => {\n    // Checking that the loading component only renders once is like\n    // checking that the component only mounted once, since loading only\n    // renders after mounting\n    props = {\n      schema: new SimpleSchema({\n        text: { type: String, uniforms: { label: 'Text' } },\n        select: {\n          type: String,\n          customAllowedValues: () => ['yo'],\n          uniforms: { label: 'Select' },\n        },\n      }),\n      placeholder: false,\n    };\n\n    expect(component().find(Loading).length).to.equal(1);\n\n    return pollUntilReady(() => {\n      component().update();\n      return component().find(Loading).length === 0;\n    }).then(() => {\n      // Loading only reappears when the component remounts\n      expect(component().find(Loading).length).to.equal(0);\n\n      setInput('text', 'some text');\n\n      expect(component().find(Loading).length).to.equal(0);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/client/test/AutoForm.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/AutoForm2/client/test/AutoForm.spec.jsx"}},"code":"var React;\nmodule.link(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 1);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 2);\nvar Button;\nmodule.link(\"@material-ui/core/Button\", {\n  \"default\": function (v) {\n    Button = v;\n  }\n}, 3);\nvar TextField;\nmodule.link(\"uniforms-material/TextField\", {\n  \"default\": function (v) {\n    TextField = v;\n  }\n}, 4);\nvar Loading;\nmodule.link(\"../../../Loading\", {\n  \"default\": function (v) {\n    Loading = v;\n  }\n}, 5);\nvar pollUntilReady;\nmodule.link(\"../../../../utils/pollUntilReady\", {\n  \"default\": function (v) {\n    pollUntilReady = v;\n  }\n}, 6);\nvar getMountedComponent;\nmodule.link(\"../../../../utils/testHelpers/getMountedComponent\", {\n  \"default\": function (v) {\n    getMountedComponent = v;\n  }\n}, 7);\nvar AutoForm;\nmodule.link(\"../../AutoForm\", {\n  \"default\": function (v) {\n    AutoForm = v;\n  }\n}, 8);\nvar CustomSelectField;\nmodule.link(\"../../CustomSelectField\", {\n  \"default\": function (v) {\n    CustomSelectField = v;\n  }\n}, 9);\nvar DateField;\nmodule.link(\"../../../DateField\", {\n  \"default\": function (v) {\n    DateField = v;\n  }\n}, 10);\nvar CUSTOM_AUTOFIELD_TYPES;\nmodule.link(\"../../constants\", {\n  CUSTOM_AUTOFIELD_TYPES: function (v) {\n    CUSTOM_AUTOFIELD_TYPES = v;\n  }\n}, 11);\nvar PercentField;\nmodule.link(\"../../../PercentInput\", {\n  PercentField: function (v) {\n    PercentField = v;\n  }\n}, 12);\nvar CustomAutoField;\nmodule.link(\"../../AutoFormComponents\", {\n  CustomAutoField: function (v) {\n    CustomAutoField = v;\n  }\n}, 13);\nvar props;\n\nvar component = function () {\n  return getMountedComponent({\n    Component: AutoForm,\n    props: props\n  });\n};\n\nvar setInput = function (name, value) {\n  component().find(\"[name=\\\"\" + name + \"\\\"]\").find('input').simulate('change', {\n    target: {\n      value: value\n    }\n  });\n};\n\ndescribe('AutoForm', function () {\n  beforeEach(function () {\n    getMountedComponent.reset();\n    props = {\n      schema: new SimpleSchema({\n        text: String\n      })\n    };\n  });\n  it('renders a form with a field and submit button', function () {\n    expect(component().find('form').exists()).to.equal(true);\n    expect(component().find(TextField).exists()).to.equal(true);\n    expect(component().find(Button).exists()).to.equal(true);\n  });\n  it('does not render fields with a false condition', function () {\n    props = {\n      schema: new SimpleSchema({\n        text: {\n          type: String,\n          condition: function () {\n            return false;\n          }\n        }\n      })\n    };\n    expect(component().find('form').exists()).to.equal(true);\n    expect(component().find(TextField).exists()).to.equal(false);\n    expect(component().find(Button).exists()).to.equal(true);\n  });\n  it('does not render fields based on changes to the model', function () {\n    props = {\n      schema: new SimpleSchema({\n        text: {\n          type: String,\n          condition: function (_ref) {\n            var stuff = _ref.stuff;\n            return stuff !== 'dude';\n          }\n        },\n        stuff: String\n      }),\n      model: {}\n    };\n    expect(component().find(TextField).length).to.equal(2);\n    setInput('stuff', 'dud');\n    expect(component().find(TextField).length).to.equal(2);\n    setInput('stuff', 'dude');\n    expect(component().find(TextField).length).to.equal(1);\n  });\n  it('skips fields that are omitted', function () {\n    props = {\n      schema: new SimpleSchema({\n        text: String,\n        stuff: String\n      }),\n      omitFields: ['text']\n    };\n    expect(component().find(TextField).length).to.equal(1);\n  });\n  it('filters the model and only submits the form values', function () {\n    props = {\n      schema: new SimpleSchema({\n        stuff: String,\n        arr: Array,\n        'arr.$': Object,\n        'arr.$.text': String\n      }),\n      model: {\n        stuff: 'yo',\n        arr: [{\n          text: 'dude'\n        }],\n        hello: 'dawg'\n      },\n      onSubmit: function (values) {\n        expect(values).to.deep.equal({\n          stuff: 'yo',\n          arr: [{\n            text: 'dude'\n          }]\n        });\n      }\n    };\n    component().find('form').simulate('submit');\n  });\n  describe('Custom components', function () {\n    it('renders a select field if allowedValues is passed', function () {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            allowedValues: ['yo']\n          }\n        })\n      };\n      expect(component().find(CustomSelectField).length).to.equal(1);\n    });\n    it('renders a select field if customAllowedValues is passed', function () {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: function () {\n              return ['yo'];\n            }\n          }\n        })\n      };\n      expect(component().find(CustomSelectField).length).to.equal(1);\n    });\n    it('renders a date field if uniforms type is Date', function () {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: Date,\n            uniforms: {\n              type: CUSTOM_AUTOFIELD_TYPES.DATE\n            }\n          }\n        })\n      };\n      expect(component().find(DateField).length).to.equal(1);\n    });\n    it('renders a percent field if uniforms type is percent', function () {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: Number,\n            uniforms: {\n              type: CUSTOM_AUTOFIELD_TYPES.PERCENT\n            }\n          }\n        })\n      };\n      expect(component().find(PercentField).length).to.equal(1);\n    });\n  });\n  describe('labels', function () {\n    it('removes the label if null is used', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText: {\n            type: String,\n            uniforms: {\n              label: 'Yo'\n            }\n          }\n        }),\n        autoFieldProps: {\n          labels: {\n            myText: null\n          }\n        }\n      };\n      expect(component().find('label').length).to.equal(0);\n    });\n    it('sets the label', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText: {\n            type: String,\n            uniforms: {\n              label: 'Yo'\n            }\n          }\n        }),\n        autoFieldProps: {\n          labels: {\n            myText: 'Yo'\n          }\n        }\n      };\n      expect(component().find('label').text()).to.include('Yo');\n    });\n    it('overrides the label if provided on the children', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText: {\n            type: String,\n            uniforms: {\n              label: 'Yo'\n            }\n          }\n        }),\n        autoFieldProps: {\n          labels: {\n            myText: 'Yo'\n          }\n        },\n        children: React.createElement(CustomAutoField, {\n          name: \"myText\",\n          overrideLabel: \"Dude\"\n        })\n      };\n      expect(component().find('label').text()).to.include('Dude');\n    });\n    it('uses the label on the schema', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText: {\n            type: String,\n            uniforms: {\n              label: 'mah dude'\n            }\n          }\n        })\n      };\n      expect(component().find('label').text()).to.include('mah dude');\n    });\n    it('sets a default label with Translation', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText: {\n            type: String\n          }\n        })\n      };\n      expect(component().find('label').text()).to.include('Forms.myText');\n    });\n    it('does not set the label if one of them is null', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText: {\n            type: String,\n            uniforms: {\n              label: null\n            }\n          }\n        })\n      };\n      expect(component().find('label').length).to.equal(0);\n    });\n    context('in nested fields', function () {\n      it('sets the right label on nested objects', function () {\n        props = {\n          schema: new SimpleSchema({\n            myText: Array,\n            'myText.$': Object,\n            'myText.$.stuff': String\n          })\n        };\n        component().find('button').at(0).simulate('click');\n        expect(component().find('label').text()).to.include('Forms.myText.stuff');\n      });\n    });\n  });\n  describe('placeholders', function () {\n    it('does not set a placeholder if placeholder is false on the autoform', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText: {\n            type: String\n          }\n        }),\n        placeholder: false\n      };\n      expect(component().find(AutoForm).prop('placeholder')).to.equal(false);\n      expect(component().find('input').prop('placeholder')).to.equal('');\n    });\n    it('sets the placeholder', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText: {\n            type: String,\n            uniforms: {\n              placeholder: 'Howdy'\n            }\n          }\n        }),\n        placeholder: true\n      };\n      expect(component().find('input').prop('placeholder')).to.equal('p.ex: Howdy');\n    });\n    it('does not set the placeholder if null is used', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText: {\n            type: String,\n            uniforms: {\n              placeholder: null\n            }\n          }\n        }),\n        placeholder: true\n      };\n      expect(component().find('input').prop('placeholder')).to.equal(null);\n    });\n    it('sets a default placeholder', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText: {\n            type: String\n          }\n        }),\n        placeholder: true\n      };\n      expect(component().find('input').prop('placeholder')).to.include('Forms.myText.placeholder');\n    });\n    context('in nested fields', function () {\n      it('sets a placeholder for a list item field', function () {\n        props = {\n          schema: new SimpleSchema({\n            myText: {\n              type: String,\n              allowedValues: ['yo', 'dude']\n            }\n          }),\n          placeholder: true\n        };\n        component().find(CustomSelectField).at(0).simulate('click');\n        component().update();\n        expect(component().find(CustomSelectField).prop('placeholder')).to.equal('Forms.myText.placeholder');\n      });\n      it('does not set a placeholder for a list item field', function () {\n        props = {\n          schema: new SimpleSchema({\n            myText: [String]\n          }),\n          placeholder: false\n        };\n        component().find('button').at(0).simulate('click');\n        expect(component().find('input').prop('placeholder')).to.equal('');\n      });\n      context('sets the right placeholder on nested objects', function () {\n        it('when parent label is not null', function () {\n          props = {\n            schema: new SimpleSchema({\n              myText: Array,\n              'myText.$': Object,\n              'myText.$.stuff': String\n            }),\n            placeholder: true\n          };\n          component().find('button').at(0).simulate('click');\n          expect(component().find('input').prop('placeholder')).to.include('Forms.myText.stuff.placeholder');\n        });\n        it('when parent label is null', function () {\n          props = {\n            schema: new SimpleSchema({\n              myText: Array,\n              'myText.$': {\n                type: Object,\n                uniforms: {\n                  label: null\n                }\n              },\n              'myText.$.stuff': {\n                type: String,\n                uniforms: {\n                  placeholder: 'myPlaceholder'\n                }\n              }\n            }),\n            placeholder: true\n          };\n          component().find('button').at(0).simulate('click');\n          expect(component().find('input').prop('placeholder')).to.include('myPlaceholder');\n        });\n      });\n      it('skips placeholders on nested objects', function () {\n        props = {\n          schema: new SimpleSchema({\n            myText: Array,\n            'myText.$': Object,\n            'myText.$.stuff': String\n          }),\n          placeholder: false\n        };\n        component().find('button').at(0).simulate('click');\n        expect(component().find('input').prop('placeholder')).to.equal('');\n      });\n    });\n  });\n  describe('children', function () {\n    it('have access to conditional rendering', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText1: {\n            type: String,\n            defaultValue: 'yo'\n          },\n          myText2: {\n            type: String,\n            condition: function (_ref2) {\n              var myText1 = _ref2.myText1;\n              return myText1 === 'dude';\n            }\n          }\n        }),\n        children: React.createElement(React.Fragment, null, React.createElement(CustomAutoField, {\n          name: \"myText1\"\n        }), React.createElement(CustomAutoField, {\n          name: \"myText2\"\n        }))\n      };\n      expect(component().find(TextField).length).to.equal(1);\n      setInput('myText1', 'dude');\n      expect(component().find(TextField).length).to.equal(2);\n    });\n    it('have access to custom auto values', function () {\n      props = {\n        schema: new SimpleSchema({\n          myText1: {\n            type: String,\n            defaultValue: 'yo'\n          },\n          myText2: {\n            type: String,\n            customAutoValue: function (_ref3) {\n              var myText1 = _ref3.myText1;\n              return myText1 + \" dude\";\n            }\n          }\n        }),\n        children: React.createElement(React.Fragment, null, React.createElement(CustomAutoField, {\n          name: \"myText1\"\n        }), React.createElement(CustomAutoField, {\n          name: \"myText2\"\n        }))\n      };\n      expect(component().find('[name=\"myText2\"]').find('input').prop('value')).to.equal('yo dude');\n      setInput('myText1', 'hello');\n      expect(component().find('[name=\"myText2\"]').find('input').prop('value')).to.equal('hello dude');\n    });\n    it('can render custom components', function () {\n      props = {\n        schema: new SimpleSchema({\n          percent: {\n            type: Number,\n            uniforms: {\n              type: CUSTOM_AUTOFIELD_TYPES.PERCENT\n            }\n          },\n          date: {\n            type: Date,\n            uniforms: {\n              type: CUSTOM_AUTOFIELD_TYPES.DATE\n            }\n          },\n          select: {\n            type: String,\n            customAllowedValues: function () {\n              return ['yo'];\n            }\n          }\n        }),\n        children: React.createElement(React.Fragment, null, React.createElement(CustomAutoField, {\n          name: \"percent\"\n        }), React.createElement(CustomAutoField, {\n          name: \"date\"\n        }), React.createElement(CustomAutoField, {\n          name: \"select\"\n        }))\n      };\n      expect(component().find(PercentField).length).to.equal(1);\n      expect(component().find(DateField).length).to.equal(1);\n      expect(component().find(CustomSelectField).length).to.equal(1);\n    });\n  });\n  it('does not unmount components when updating the model, and loading only displays once', function () {\n    // Checking that the loading component only renders once is like\n    // checking that the component only mounted once, since loading only\n    // renders after mounting\n    props = {\n      schema: new SimpleSchema({\n        text: {\n          type: String,\n          uniforms: {\n            label: 'Text'\n          }\n        },\n        select: {\n          type: String,\n          customAllowedValues: function () {\n            return ['yo'];\n          },\n          uniforms: {\n            label: 'Select'\n          }\n        }\n      }),\n      placeholder: false\n    };\n    expect(component().find(Loading).length).to.equal(1);\n    return pollUntilReady(function () {\n      component().update();\n      return component().find(Loading).length === 0;\n    }).then(function () {\n      // Loading only reappears when the component remounts\n      expect(component().find(Loading).length).to.equal(0);\n      setInput('text', 'some text');\n      expect(component().find(Loading).length).to.equal(0);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/components/AutoForm2/client/test/AutoForm.spec.jsx"],"names":["component","getMountedComponent","Component","props","setInput","target","value","describe","beforeEach","schema","text","String","it","expect","type","condition","stuff","model","omitFields","arr","hello","onSubmit","values","allowedValues","customAllowedValues","uniforms","CUSTOM_AUTOFIELD_TYPES","DATE","PERCENT","myText","label","autoFieldProps","labels","children","context","placeholder","myText1","defaultValue","myText2","customAutoValue","percent","date","select"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport SimpleSchema from 'simpl-schema';\nimport Button from '@material-ui/core/Button';\nimport TextField from 'uniforms-material/TextField';\n\nimport Loading from '../../../Loading';\nimport pollUntilReady from '../../../../utils/pollUntilReady';\nimport getMountedComponent from '../../../../utils/testHelpers/getMountedComponent';\n\nimport AutoForm from '../../AutoForm';\nimport CustomSelectField from '../../CustomSelectField';\nimport DateField from '../../../DateField';\nimport { CUSTOM_AUTOFIELD_TYPES } from '../../constants';\nimport { PercentField } from '../../../PercentInput';\nimport { CustomAutoField } from '../../AutoFormComponents';\n\nlet props;\nconst component = () => getMountedComponent({ Component: AutoForm, props });\n\nconst setInput = (name, value) => {\n  component()\n    .find(`[name=\"${name}\"]`)\n    .find('input')\n    .simulate('change', { target: { value } });\n};\n\ndescribe('AutoForm', () => {\n  beforeEach(() => {\n    getMountedComponent.reset();\n    props = { schema: new SimpleSchema({ text: String }) };\n  });\n\n  it('renders a form with a field and submit button', () => {\n    expect(component()\n      .find('form')\n      .exists()).to.equal(true);\n    expect(component()\n      .find(TextField)\n      .exists()).to.equal(true);\n    expect(component()\n      .find(Button)\n      .exists()).to.equal(true);\n  });\n\n  it('does not render fields with a false condition', () => {\n    props = {\n      schema: new SimpleSchema({\n        text: { type: String, condition: () => false },\n      }),\n    };\n    expect(component()\n      .find('form')\n      .exists()).to.equal(true);\n    expect(component()\n      .find(TextField)\n      .exists()).to.equal(false);\n    expect(component()\n      .find(Button)\n      .exists()).to.equal(true);\n  });\n\n  it('does not render fields based on changes to the model', () => {\n    props = {\n      schema: new SimpleSchema({\n        text: {\n          type: String,\n          condition: ({ stuff }) => stuff !== 'dude',\n        },\n        stuff: String,\n      }),\n      model: {},\n    };\n\n    expect(component().find(TextField).length).to.equal(2);\n\n    setInput('stuff', 'dud');\n\n    expect(component().find(TextField).length).to.equal(2);\n\n    setInput('stuff', 'dude');\n\n    expect(component().find(TextField).length).to.equal(1);\n  });\n\n  it('skips fields that are omitted', () => {\n    props = {\n      schema: new SimpleSchema({ text: String, stuff: String }),\n      omitFields: ['text'],\n    };\n\n    expect(component().find(TextField).length).to.equal(1);\n  });\n\n  it('filters the model and only submits the form values', () => {\n    props = {\n      schema: new SimpleSchema({\n        stuff: String,\n        arr: Array,\n        'arr.$': Object,\n        'arr.$.text': String,\n      }),\n      model: { stuff: 'yo', arr: [{ text: 'dude' }], hello: 'dawg' },\n      onSubmit: (values) => {\n        expect(values).to.deep.equal({ stuff: 'yo', arr: [{ text: 'dude' }] });\n      },\n    };\n\n    component()\n      .find('form')\n      .simulate('submit');\n  });\n\n  describe('Custom components', () => {\n    it('renders a select field if allowedValues is passed', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: { type: String, allowedValues: ['yo'] },\n        }),\n      };\n\n      expect(component().find(CustomSelectField).length).to.equal(1);\n    });\n\n    it('renders a select field if customAllowedValues is passed', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: { type: String, customAllowedValues: () => ['yo'] },\n        }),\n      };\n\n      expect(component().find(CustomSelectField).length).to.equal(1);\n    });\n\n    it('renders a date field if uniforms type is Date', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: { type: Date, uniforms: { type: CUSTOM_AUTOFIELD_TYPES.DATE } },\n        }),\n      };\n\n      expect(component().find(DateField).length).to.equal(1);\n    });\n\n    it('renders a percent field if uniforms type is percent', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: Number,\n            uniforms: { type: CUSTOM_AUTOFIELD_TYPES.PERCENT },\n          },\n        }),\n      };\n\n      expect(component().find(PercentField).length).to.equal(1);\n    });\n  });\n\n  describe('labels', () => {\n    it('removes the label if null is used', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { label: 'Yo' } },\n        }),\n        autoFieldProps: { labels: { myText: null } },\n      };\n\n      expect(component().find('label').length).to.equal(0);\n    });\n\n    it('sets the label', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { label: 'Yo' } },\n        }),\n        autoFieldProps: { labels: { myText: 'Yo' } },\n      };\n\n      expect(component()\n        .find('label')\n        .text()).to.include('Yo');\n    });\n\n    it('overrides the label if provided on the children', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { label: 'Yo' } },\n        }),\n        autoFieldProps: { labels: { myText: 'Yo' } },\n        children: <CustomAutoField name=\"myText\" overrideLabel=\"Dude\" />,\n      };\n\n      expect(component()\n        .find('label')\n        .text()).to.include('Dude');\n    });\n\n    it('uses the label on the schema', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { label: 'mah dude' } },\n        }),\n      };\n\n      expect(component()\n        .find('label')\n        .text()).to.include('mah dude');\n    });\n\n    it('sets a default label with Translation', () => {\n      props = {\n        schema: new SimpleSchema({ myText: { type: String } }),\n      };\n\n      expect(component()\n        .find('label')\n        .text()).to.include('Forms.myText');\n    });\n\n    it('does not set the label if one of them is null', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { label: null } },\n        }),\n      };\n\n      expect(component().find('label').length).to.equal(0);\n    });\n\n    context('in nested fields', () => {\n      it('sets the right label on nested objects', () => {\n        props = {\n          schema: new SimpleSchema({\n            myText: Array,\n            'myText.$': Object,\n            'myText.$.stuff': String,\n          }),\n        };\n\n        component()\n          .find('button')\n          .at(0)\n          .simulate('click');\n\n        expect(component()\n          .find('label')\n          .text()).to.include('Forms.myText.stuff');\n      });\n    });\n  });\n\n  describe('placeholders', () => {\n    it('does not set a placeholder if placeholder is false on the autoform', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String },\n        }),\n        placeholder: false,\n      };\n\n      expect(component()\n        .find(AutoForm)\n        .prop('placeholder')).to.equal(false);\n\n      expect(component()\n        .find('input')\n        .prop('placeholder')).to.equal('');\n    });\n\n    it('sets the placeholder', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { placeholder: 'Howdy' } },\n        }),\n        placeholder: true,\n      };\n\n      expect(component()\n        .find('input')\n        .prop('placeholder')).to.equal('p.ex: Howdy');\n    });\n\n    it('does not set the placeholder if null is used', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String, uniforms: { placeholder: null } },\n        }),\n        placeholder: true,\n      };\n\n      expect(component()\n        .find('input')\n        .prop('placeholder')).to.equal(null);\n    });\n\n    it('sets a default placeholder', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText: { type: String },\n        }),\n        placeholder: true,\n      };\n\n      expect(component()\n        .find('input')\n        .prop('placeholder')).to.include('Forms.myText.placeholder');\n    });\n\n    context('in nested fields', () => {\n      it('sets a placeholder for a list item field', () => {\n        props = {\n          schema: new SimpleSchema({\n            myText: { type: String, allowedValues: ['yo', 'dude'] },\n          }),\n          placeholder: true,\n        };\n\n        component()\n          .find(CustomSelectField)\n          .at(0)\n          .simulate('click');\n\n        component().update();\n\n        expect(component()\n          .find(CustomSelectField)\n          .prop('placeholder')).to.equal('Forms.myText.placeholder');\n      });\n\n      it('does not set a placeholder for a list item field', () => {\n        props = {\n          schema: new SimpleSchema({\n            myText: [String],\n          }),\n          placeholder: false,\n        };\n\n        component()\n          .find('button')\n          .at(0)\n          .simulate('click');\n\n        expect(component()\n          .find('input')\n          .prop('placeholder')).to.equal('');\n      });\n\n      context('sets the right placeholder on nested objects', () => {\n        it('when parent label is not null', () => {\n          props = {\n            schema: new SimpleSchema({\n              myText: Array,\n              'myText.$': Object,\n              'myText.$.stuff': String,\n            }),\n            placeholder: true,\n          };\n\n          component()\n            .find('button')\n            .at(0)\n            .simulate('click');\n\n          expect(component()\n            .find('input')\n            .prop('placeholder')).to.include('Forms.myText.stuff.placeholder');\n        });\n\n        it('when parent label is null', () => {\n          props = {\n            schema: new SimpleSchema({\n              myText: Array,\n              'myText.$': { type: Object, uniforms: { label: null } },\n              'myText.$.stuff': {\n                type: String,\n                uniforms: { placeholder: 'myPlaceholder' },\n              },\n            }),\n            placeholder: true,\n          };\n\n          component()\n            .find('button')\n            .at(0)\n            .simulate('click');\n\n          expect(component()\n            .find('input')\n            .prop('placeholder')).to.include('myPlaceholder');\n        });\n      });\n\n      it('skips placeholders on nested objects', () => {\n        props = {\n          schema: new SimpleSchema({\n            myText: Array,\n            'myText.$': Object,\n            'myText.$.stuff': String,\n          }),\n          placeholder: false,\n        };\n\n        component()\n          .find('button')\n          .at(0)\n          .simulate('click');\n\n        expect(component()\n          .find('input')\n          .prop('placeholder')).to.equal('');\n      });\n    });\n  });\n\n  describe('children', () => {\n    it('have access to conditional rendering', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText1: { type: String, defaultValue: 'yo' },\n          myText2: {\n            type: String,\n            condition: ({ myText1 }) => myText1 === 'dude',\n          },\n        }),\n        children: (\n          <>\n            <CustomAutoField name=\"myText1\" />\n            <CustomAutoField name=\"myText2\" />\n          </>\n        ),\n      };\n\n      expect(component().find(TextField).length).to.equal(1);\n\n      setInput('myText1', 'dude');\n\n      expect(component().find(TextField).length).to.equal(2);\n    });\n\n    it('have access to custom auto values', () => {\n      props = {\n        schema: new SimpleSchema({\n          myText1: { type: String, defaultValue: 'yo' },\n          myText2: {\n            type: String,\n            customAutoValue: ({ myText1 }) => `${myText1} dude`,\n          },\n        }),\n        children: (\n          <>\n            <CustomAutoField name=\"myText1\" />\n            <CustomAutoField name=\"myText2\" />\n          </>\n        ),\n      };\n\n      expect(component()\n        .find('[name=\"myText2\"]')\n        .find('input')\n        .prop('value')).to.equal('yo dude');\n\n      setInput('myText1', 'hello');\n\n      expect(component()\n        .find('[name=\"myText2\"]')\n        .find('input')\n        .prop('value')).to.equal('hello dude');\n    });\n\n    it('can render custom components', () => {\n      props = {\n        schema: new SimpleSchema({\n          percent: {\n            type: Number,\n            uniforms: { type: CUSTOM_AUTOFIELD_TYPES.PERCENT },\n          },\n          date: { type: Date, uniforms: { type: CUSTOM_AUTOFIELD_TYPES.DATE } },\n          select: { type: String, customAllowedValues: () => ['yo'] },\n        }),\n        children: (\n          <>\n            <CustomAutoField name=\"percent\" />\n            <CustomAutoField name=\"date\" />\n            <CustomAutoField name=\"select\" />\n          </>\n        ),\n      };\n\n      expect(component().find(PercentField).length).to.equal(1);\n      expect(component().find(DateField).length).to.equal(1);\n      expect(component().find(CustomSelectField).length).to.equal(1);\n    });\n  });\n\n  it('does not unmount components when updating the model, and loading only displays once', () => {\n    // Checking that the loading component only renders once is like\n    // checking that the component only mounted once, since loading only\n    // renders after mounting\n    props = {\n      schema: new SimpleSchema({\n        text: { type: String, uniforms: { label: 'Text' } },\n        select: {\n          type: String,\n          customAllowedValues: () => ['yo'],\n          uniforms: { label: 'Select' },\n        },\n      }),\n      placeholder: false,\n    };\n\n    expect(component().find(Loading).length).to.equal(1);\n\n    return pollUntilReady(() => {\n      component().update();\n      return component().find(Loading).length === 0;\n    }).then(() => {\n      // Loading only reappears when the component remounts\n      expect(component().find(Loading).length).to.equal(0);\n\n      setInput('text', 'some text');\n\n      expect(component().find(Loading).length).to.equal(0);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"e47c7e91dd843388f0e0310f49b33489a4239b82"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/clientSecurityHelpers/proPropertySecurityHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/security/clientSecurityHelpers/proPropertySecurityHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/clientSecurityHelpers/proPropertySecurityHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/security/clientSecurityHelpers/proPropertySecurityHelpers.js"],"names":["hasMinimumRole","ROLES","SecurityService","PROPERTY_STATUS","getCurrentUserPermissionsForProProperty","shouldAnonymize","checkProPropertyPermissions","property","userId","requiredPermissions","propertyStatus","length","includes","status","role","ADMIN","hasPermissionOnDoc","doc","error","isUserLinkedToProperty","userLinks","users","loans","userLoans","reduce","usersLoans","user","filter","x","find","_id","isAllowedToViewProProperty","currentUser","isAllowedToInviteCustomersToProProperty","canInviteCustomers","FOR_SALE","BOOKED","isAllowedToInviteProUsersToProProperty","canInviteProUsers","isAllowedToManageProPropertyPermissions","canManagePermissions","isAllowedToRemoveCustomerFromProProperty","customerOwnerType","propertyId","permissions","isAllowedToModifyProProperty","canModifyProperty","isAllowedToSeeProPropertyCustomers","userPermissions","$metadata","displayCustomerNames","isAllowedToBookProProperty","canBookLots","isAllowedToBookProPropertyToCustomer","isAllowedToSellProProperty","canSellLots","isAllowedToSellProPropertyToCustomer"],"mappings":"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","sourcesContent":["import { hasMinimumRole } from './generalSecurityHelpers';\nimport { ROLES } from '../../users/userConstants';\nimport SecurityService from '../Security';\nimport { PROPERTY_STATUS } from '../../properties/propertyConstants';\nimport {\n  getCurrentUserPermissionsForProProperty,\n  shouldAnonymize,\n} from '../../properties/propertyClientHelper';\n\nconst checkProPropertyPermissions = ({\n  property,\n  userId,\n  requiredPermissions,\n  propertyStatus = [],\n}) => {\n  if (propertyStatus.length && !propertyStatus.includes(property.status)) {\n    return false;\n  }\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  try {\n    SecurityService.hasPermissionOnDoc({\n      doc: property,\n      requiredPermissions,\n      userId,\n    });\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst isUserLinkedToProperty = ({ userId, property = {} }) => {\n  const { userLinks = [], users = [], loans = [] } = property;\n  const userLoans = loans\n    .reduce((usersLoans, { user }) => [...usersLoans, user], [])\n    .filter(x => x);\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId)\n    || userLoans.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToViewProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  return isUserLinkedToProperty({ userId, property });\n};\n\nexport const isAllowedToInviteCustomersToProProperty = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canInviteCustomers: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n    propertyStatus: [PROPERTY_STATUS.FOR_SALE, PROPERTY_STATUS.BOOKED],\n  });\n};\n\nexport const isAllowedToInviteProUsersToProProperty = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canInviteProUsers: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n  });\n};\n\nexport const isAllowedToManageProPropertyPermissions = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canManagePermissions: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n  });\n};\n\nexport const isAllowedToRemoveCustomerFromProProperty = ({\n  property,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: propertyId } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    currentUser,\n    propertyId,\n  });\n\n  return (\n    isAllowedToInviteCustomersToProProperty({ property, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToModifyProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canModifyProperty: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n    propertyStatus: [PROPERTY_STATUS.FOR_SALE],\n  });\n};\n\nexport const isAllowedToSeeProPropertyCustomers = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { userLinks = [], users = [] } = property;\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  const userPermissions = user.permissions || user.$metadata.permissions;\n\n  if (userPermissions.displayCustomerNames === false) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToBookProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canBookLots: true };\n\n  return checkProPropertyPermissions({ property, userId, requiredPermissions });\n};\n\nexport const isAllowedToBookProPropertyToCustomer = ({\n  property,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { _id: propertyId } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    propertyId,\n    currentUser,\n  });\n\n  return (\n    isAllowedToBookProProperty({ property, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToSellProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canSellLots: true,\n  };\n\n  return checkProPropertyPermissions({ property, userId, requiredPermissions });\n};\n\nexport const isAllowedToSellProPropertyToCustomer = ({\n  property,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { _id: propertyId } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    propertyId,\n    currentUser,\n  });\n\n  return (\n    isAllowedToSellProProperty({ property, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/clientSecurityHelpers/proPropertySecurityHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/security/clientSecurityHelpers/proPropertySecurityHelpers.js"}},"code":"module.export({\n  isAllowedToViewProProperty: () => isAllowedToViewProProperty,\n  isAllowedToInviteCustomersToProProperty: () => isAllowedToInviteCustomersToProProperty,\n  isAllowedToInviteProUsersToProProperty: () => isAllowedToInviteProUsersToProProperty,\n  isAllowedToManageProPropertyPermissions: () => isAllowedToManageProPropertyPermissions,\n  isAllowedToRemoveCustomerFromProProperty: () => isAllowedToRemoveCustomerFromProProperty,\n  isAllowedToModifyProProperty: () => isAllowedToModifyProProperty,\n  isAllowedToSeeProPropertyCustomers: () => isAllowedToSeeProPropertyCustomers,\n  isAllowedToBookProProperty: () => isAllowedToBookProProperty,\n  isAllowedToBookProPropertyToCustomer: () => isAllowedToBookProPropertyToCustomer,\n  isAllowedToSellProProperty: () => isAllowedToSellProProperty,\n  isAllowedToSellProPropertyToCustomer: () => isAllowedToSellProPropertyToCustomer\n});\nlet hasMinimumRole;\nmodule.link(\"./generalSecurityHelpers\", {\n  hasMinimumRole(v) {\n    hasMinimumRole = v;\n  }\n\n}, 0);\nlet ROLES;\nmodule.link(\"../../users/userConstants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 1);\nlet SecurityService;\nmodule.link(\"../Security\", {\n  default(v) {\n    SecurityService = v;\n  }\n\n}, 2);\nlet PROPERTY_STATUS;\nmodule.link(\"../../properties/propertyConstants\", {\n  PROPERTY_STATUS(v) {\n    PROPERTY_STATUS = v;\n  }\n\n}, 3);\nlet getCurrentUserPermissionsForProProperty, shouldAnonymize;\nmodule.link(\"../../properties/propertyClientHelper\", {\n  getCurrentUserPermissionsForProProperty(v) {\n    getCurrentUserPermissionsForProProperty = v;\n  },\n\n  shouldAnonymize(v) {\n    shouldAnonymize = v;\n  }\n\n}, 4);\n\nconst checkProPropertyPermissions = ({\n  property,\n  userId,\n  requiredPermissions,\n  propertyStatus = []\n}) => {\n  if (propertyStatus.length && !propertyStatus.includes(property.status)) {\n    return false;\n  }\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  try {\n    SecurityService.hasPermissionOnDoc({\n      doc: property,\n      requiredPermissions,\n      userId\n    });\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst isUserLinkedToProperty = ({\n  userId,\n  property = {}\n}) => {\n  const {\n    userLinks = [],\n    users = [],\n    loans = []\n  } = property;\n  const userLoans = loans.reduce((usersLoans, {\n    user\n  }) => [...usersLoans, user], []).filter(x => x);\n  const user = userLinks.find(({\n    _id\n  }) => _id === userId) || users.find(({\n    _id\n  }) => _id === userId) || userLoans.find(({\n    _id\n  }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isAllowedToViewProProperty = ({\n  property,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  return isUserLinkedToProperty({\n    userId,\n    property\n  });\n};\n\nconst isAllowedToInviteCustomersToProProperty = ({\n  property,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canInviteCustomers: true\n  };\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n    propertyStatus: [PROPERTY_STATUS.FOR_SALE, PROPERTY_STATUS.BOOKED]\n  });\n};\n\nconst isAllowedToInviteProUsersToProProperty = ({\n  property,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canInviteProUsers: true\n  };\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions\n  });\n};\n\nconst isAllowedToManageProPropertyPermissions = ({\n  property,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canManagePermissions: true\n  };\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions\n  });\n};\n\nconst isAllowedToRemoveCustomerFromProProperty = ({\n  property,\n  currentUser,\n  customerOwnerType\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  const {\n    _id: propertyId\n  } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    currentUser,\n    propertyId\n  });\n  return isAllowedToInviteCustomersToProProperty({\n    property,\n    currentUser\n  }) && !shouldAnonymize({\n    customerOwnerType,\n    permissions\n  });\n};\n\nconst isAllowedToModifyProProperty = ({\n  property,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canModifyProperty: true\n  };\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n    propertyStatus: [PROPERTY_STATUS.FOR_SALE]\n  });\n};\n\nconst isAllowedToSeeProPropertyCustomers = ({\n  property,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  const {\n    userLinks = [],\n    users = []\n  } = property;\n  const user = userLinks.find(({\n    _id\n  }) => _id === userId) || users.find(({\n    _id\n  }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  const userPermissions = user.permissions || user.$metadata.permissions;\n\n  if (userPermissions.displayCustomerNames === false) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isAllowedToBookProProperty = ({\n  property,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canBookLots: true\n  };\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions\n  });\n};\n\nconst isAllowedToBookProPropertyToCustomer = ({\n  property,\n  currentUser,\n  customerOwnerType\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  const {\n    _id: propertyId\n  } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    propertyId,\n    currentUser\n  });\n  return isAllowedToBookProProperty({\n    property,\n    currentUser\n  }) && !shouldAnonymize({\n    customerOwnerType,\n    permissions\n  });\n};\n\nconst isAllowedToSellProProperty = ({\n  property,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canSellLots: true\n  };\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions\n  });\n};\n\nconst isAllowedToSellProPropertyToCustomer = ({\n  property,\n  currentUser,\n  customerOwnerType\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  const {\n    _id: propertyId\n  } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    propertyId,\n    currentUser\n  });\n  return isAllowedToSellProProperty({\n    property,\n    currentUser\n  }) && !shouldAnonymize({\n    customerOwnerType,\n    permissions\n  });\n};","map":{"version":3,"sources":["imports/core/api/security/clientSecurityHelpers/proPropertySecurityHelpers.js"],"names":["hasMinimumRole","checkProPropertyPermissions","propertyStatus","property","role","ROLES","userId","SecurityService","doc","isUserLinkedToProperty","userLinks","users","loans","userLoans","user","x","_id","isAllowedToViewProProperty","currentUser","isAllowedToInviteCustomersToProProperty","requiredPermissions","canInviteCustomers","PROPERTY_STATUS","isAllowedToInviteProUsersToProProperty","canInviteProUsers","isAllowedToManageProPropertyPermissions","canManagePermissions","isAllowedToRemoveCustomerFromProProperty","customerOwnerType","propertyId","permissions","getCurrentUserPermissionsForProProperty","shouldAnonymize","isAllowedToModifyProProperty","canModifyProperty","isAllowedToSeeProPropertyCustomers","userPermissions","isAllowedToBookProProperty","canBookLots","isAllowedToBookProPropertyToCustomer","isAllowedToSellProProperty","canSellLots","isAllowedToSellProPropertyToCustomer"],"mappings":"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","sourcesContent":["import { hasMinimumRole } from './generalSecurityHelpers';\nimport { ROLES } from '../../users/userConstants';\nimport SecurityService from '../Security';\nimport { PROPERTY_STATUS } from '../../properties/propertyConstants';\nimport {\n  getCurrentUserPermissionsForProProperty,\n  shouldAnonymize,\n} from '../../properties/propertyClientHelper';\n\nconst checkProPropertyPermissions = ({\n  property,\n  userId,\n  requiredPermissions,\n  propertyStatus = [],\n}) => {\n  if (propertyStatus.length && !propertyStatus.includes(property.status)) {\n    return false;\n  }\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  try {\n    SecurityService.hasPermissionOnDoc({\n      doc: property,\n      requiredPermissions,\n      userId,\n    });\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst isUserLinkedToProperty = ({ userId, property = {} }) => {\n  const { userLinks = [], users = [], loans = [] } = property;\n  const userLoans = loans\n    .reduce((usersLoans, { user }) => [...usersLoans, user], [])\n    .filter(x => x);\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId)\n    || userLoans.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToViewProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  return isUserLinkedToProperty({ userId, property });\n};\n\nexport const isAllowedToInviteCustomersToProProperty = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canInviteCustomers: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n    propertyStatus: [PROPERTY_STATUS.FOR_SALE, PROPERTY_STATUS.BOOKED],\n  });\n};\n\nexport const isAllowedToInviteProUsersToProProperty = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canInviteProUsers: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n  });\n};\n\nexport const isAllowedToManageProPropertyPermissions = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canManagePermissions: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n  });\n};\n\nexport const isAllowedToRemoveCustomerFromProProperty = ({\n  property,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: propertyId } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    currentUser,\n    propertyId,\n  });\n\n  return (\n    isAllowedToInviteCustomersToProProperty({ property, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToModifyProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canModifyProperty: true };\n\n  return checkProPropertyPermissions({\n    property,\n    userId,\n    requiredPermissions,\n    propertyStatus: [PROPERTY_STATUS.FOR_SALE],\n  });\n};\n\nexport const isAllowedToSeeProPropertyCustomers = ({\n  property,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { userLinks = [], users = [] } = property;\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  const userPermissions = user.permissions || user.$metadata.permissions;\n\n  if (userPermissions.displayCustomerNames === false) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToBookProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canBookLots: true };\n\n  return checkProPropertyPermissions({ property, userId, requiredPermissions });\n};\n\nexport const isAllowedToBookProPropertyToCustomer = ({\n  property,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { _id: propertyId } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    propertyId,\n    currentUser,\n  });\n\n  return (\n    isAllowedToBookProProperty({ property, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToSellProProperty = ({ property, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canSellLots: true,\n  };\n\n  return checkProPropertyPermissions({ property, userId, requiredPermissions });\n};\n\nexport const isAllowedToSellProPropertyToCustomer = ({\n  property,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { _id: propertyId } = property;\n  const permissions = getCurrentUserPermissionsForProProperty({\n    propertyId,\n    currentUser,\n  });\n\n  return (\n    isAllowedToSellProProperty({ property, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n"]},"sourceType":"script","hash":"3e350ac7c53e1bcde51cd74d5e668695b7d4ebc7"}

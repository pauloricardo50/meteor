{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Select/SelectContainer.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/Select/SelectContainer.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Select/SelectContainer.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/Select/SelectContainer.jsx"],"names":["React","compose","mapProps","withStyles","ListItemIcon","ListItemText","MenuItem","Divider","Icon","styles","theme","mapOptions","options","menuItem","menuItemClass","menuItemRoot","listItemTextWithIcon","listItemtext","colorClass","array","forEach","option","isValidElement","id","label","icon","dividerTop","dividerBottom","secondary","otherProps","push","root","primary","SelectContainer","classes","onChange","rawOptions","e","target","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,WAAlC;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AAEA,OAAOC,QAAP;AACA,OAAOC,OAAP;AACA,OAAOC,IAAP;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK,CACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVuB,CAAL,CAApB;;AAaA,MAAMC,UAAU,GAAG,CACjBC,OADiB,EAEjB;AACEC,EAAAA,QAAQ,EAAEC,aADZ;AAEEC,EAAAA,YAFF;AAGEC,EAAAA,oBAHF;AAIEC,EAAAA,YAJF;AAKEC,EAAAA;AALF,CAFiB,KASd;AACH,QAAMC,KAAK,GAAG,EAAd;AACAP,EAAAA,OAAO,CAACQ,OAAR,CAAiBC,MAAD,IAAY;AAC1B,QAAIrB,KAAK,CAACsB,cAAN,CAAqBD,MAArB,CAAJ,EAAkC;AAChC,aAAOA,MAAP;AACD;;AACD,UAAM;AACJE,MAAAA,EADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,IAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,aALI;AAMJC,MAAAA,SANI;AAOJ,SAAGC;AAPC,QAQFR,MARJ;;AAUA,QAAIK,UAAJ,EAAgB;AACdP,MAAAA,KAAK,CAACW,IAAN,CAAW,CAAC,OAAD,CAAS,IAAI,CAAE,UAASP,EAAG,EAAd,CAAb,GAAX;AACD;;AAEDJ,IAAAA,KAAK,CAACW,IAAN,CAAW,CAAC,QAAD,CACT,MAAM,CAACP,EAAD,CADG,CAET,IAAI,CAACA,EAAD,CAFK,CAGT,UAAU,CAACT,aAAD,CAHD,CAIT,QAAQ,CAAC;AAAEiB,MAAAA,IAAI,EAAEhB;AAAR,KAAD,CAJC,CAKT,IAAIc,UAAJ,CALS;MAOT;QACE,CAACJ,IAAI,IACH,CAAC,YAAD,CAAc,UAAU,CAACP,UAAD,CAAxB;YACE,CAAC,IAAD,CAAM,KAAK,CAACO,IAAD,CAAX;UACF,EAAE,YAAF,CAHF;QAKA,CAAC,YAAD,CACE,QAAQ,CAAC;AACPO,UAAAA,OAAO,EAAEd,UADF;AAEPU,UAAAA,SAAS,EAAEV,UAFJ;AAGPa,UAAAA,IAAI,EAAEN,IAAI,GAAGT,oBAAH,GAA0BC;AAH7B,SAAD,CADV,CAME;AACA,gBAAQ,CAACO,KAAD,CAPV,CAQE,UAAU,CAACI,SAAD,CARZ;MAUF;IACF,EAAE,QAAF,CAxBA;;AA0BA,QAAID,aAAJ,EAAmB;AACjBR,MAAAA,KAAK,CAACW,IAAN,CAAW,CAAC,OAAD,CAAS,IAAI,CAAE,UAASP,EAAG,EAAd,CAAb,GAAX;AACD;AACF,GA/CD;AAiDA,SAAOJ,KAAP;AACD,CA7DD;;AA+DA,MAAMc,eAAe,GAAGhC,OAAO,CAC7BE,UAAU,CAACM,MAAD,CADmB,EAE7BP,QAAQ,CAAC,CAAC;AAAEU,EAAAA,OAAF;AAAWsB,EAAAA,OAAX;AAAoBC,EAAAA,QAApB;AAA8BZ,EAAAA,EAA9B;AAAkC,KAAGM;AAArC,CAAD,MAAwD;AAC/DO,EAAAA,UAAU,EAAExB,OADmD;AAE/DA,EAAAA,OAAO,EAAED,UAAU,CAACC,OAAD,EAAUsB,OAAV,CAF4C;AAG/DC,EAAAA,QAAQ,EAAEE,CAAC,IAAIF,QAAQ,CAACZ,EAAD,EAAKc,CAAC,CAACC,MAAF,CAASC,KAAd,CAHwC;AAI/DhB,EAAAA,EAJ+D;AAK/D,KAAGM;AAL4D,CAAxD,CAAD,CAFqB,CAA/B;AAWA,eAAeI,eAAf","sourcesContent":["import React from 'react';\nimport { compose, mapProps } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport MenuItem from '../Material/MenuItem';\nimport Divider from '../Material/Divider';\nimport Icon from '../Icon';\n\nconst styles = theme => ({\n  // menuItem: {\n  //   '&:hover': {\n  //     backgroundColor: theme.palette.primary.main,\n  //     '& $colorClass': { color: theme.palette.common.white },\n  //   },\n  // },\n  // menuItemRoot: { height: 'unset' },\n  // listItemTextWithIcon: { paddingLeft: 0 },\n  // listItemtext: { paddingLeft: 0, paddingRight: 0 },\n  // colorClass: {},\n});\n\nconst mapOptions = (\n  options,\n  {\n    menuItem: menuItemClass,\n    menuItemRoot,\n    listItemTextWithIcon,\n    listItemtext,\n    colorClass,\n  },\n) => {\n  const array = [];\n  options.forEach((option) => {\n    if (React.isValidElement(option)) {\n      return option;\n    }\n    const {\n      id,\n      label,\n      icon,\n      dividerTop,\n      dividerBottom,\n      secondary,\n      ...otherProps\n    } = option;\n\n    if (dividerTop) {\n      array.push(<Divider key={`divider${id}`} />);\n    }\n\n    array.push(<MenuItem\n      value={id}\n      key={id}\n      className={menuItemClass}\n      classes={{ root: menuItemRoot }}\n      {...otherProps}\n    >\n      <>\n        {icon && (\n          <ListItemIcon className={colorClass}>\n            <Icon type={icon} />\n          </ListItemIcon>\n        )}\n        <ListItemText\n          classes={{\n            primary: colorClass,\n            secondary: colorClass,\n            root: icon ? listItemTextWithIcon : listItemtext,\n          }}\n          // inset={!!icon}\n          primary={label}\n          secondary={secondary}\n        />\n      </>\n    </MenuItem>);\n\n    if (dividerBottom) {\n      array.push(<Divider key={`divider${id}`} />);\n    }\n  });\n\n  return array;\n};\n\nconst SelectContainer = compose(\n  withStyles(styles),\n  mapProps(({ options, classes, onChange, id, ...otherProps }) => ({\n    rawOptions: options,\n    options: mapOptions(options, classes),\n    onChange: e => onChange(id, e.target.value),\n    id,\n    ...otherProps,\n  })),\n);\n\nexport default SelectContainer;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Select/SelectContainer.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/Select/SelectContainer.jsx"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet compose, mapProps;\nmodule.link(\"recompose\", {\n  compose(v) {\n    compose = v;\n  },\n\n  mapProps(v) {\n    mapProps = v;\n  }\n\n}, 1);\nlet withStyles;\nmodule.link(\"@material-ui/core/styles/withStyles\", {\n  default(v) {\n    withStyles = v;\n  }\n\n}, 2);\nlet ListItemIcon;\nmodule.link(\"@material-ui/core/ListItemIcon\", {\n  default(v) {\n    ListItemIcon = v;\n  }\n\n}, 3);\nlet ListItemText;\nmodule.link(\"@material-ui/core/ListItemText\", {\n  default(v) {\n    ListItemText = v;\n  }\n\n}, 4);\nlet MenuItem;\nmodule.link(\"../Material/MenuItem\", {\n  default(v) {\n    MenuItem = v;\n  }\n\n}, 5);\nlet Divider;\nmodule.link(\"../Material/Divider\", {\n  default(v) {\n    Divider = v;\n  }\n\n}, 6);\nlet Icon;\nmodule.link(\"../Icon\", {\n  default(v) {\n    Icon = v;\n  }\n\n}, 7);\n\nconst styles = theme => ({// menuItem: {\n  //   '&:hover': {\n  //     backgroundColor: theme.palette.primary.main,\n  //     '& $colorClass': { color: theme.palette.common.white },\n  //   },\n  // },\n  // menuItemRoot: { height: 'unset' },\n  // listItemTextWithIcon: { paddingLeft: 0 },\n  // listItemtext: { paddingLeft: 0, paddingRight: 0 },\n  // colorClass: {},\n});\n\nconst mapOptions = (options, _ref) => {\n  let {\n    menuItem: menuItemClass,\n    menuItemRoot,\n    listItemTextWithIcon,\n    listItemtext,\n    colorClass\n  } = _ref;\n  const array = [];\n  options.forEach(option => {\n    if (React.isValidElement(option)) {\n      return option;\n    }\n\n    const {\n      id,\n      label,\n      icon,\n      dividerTop,\n      dividerBottom,\n      secondary\n    } = option,\n          otherProps = (0, _objectWithoutProperties2.default)(option, [\"id\", \"label\", \"icon\", \"dividerTop\", \"dividerBottom\", \"secondary\"]);\n\n    if (dividerTop) {\n      array.push(React.createElement(Divider, {\n        key: \"divider\".concat(id)\n      }));\n    }\n\n    array.push(React.createElement(MenuItem, (0, _extends2.default)({\n      value: id,\n      key: id,\n      className: menuItemClass,\n      classes: {\n        root: menuItemRoot\n      }\n    }, otherProps), React.createElement(React.Fragment, null, icon && React.createElement(ListItemIcon, {\n      className: colorClass\n    }, React.createElement(Icon, {\n      type: icon\n    })), React.createElement(ListItemText, {\n      classes: {\n        primary: colorClass,\n        secondary: colorClass,\n        root: icon ? listItemTextWithIcon : listItemtext\n      } // inset={!!icon}\n      ,\n      primary: label,\n      secondary: secondary\n    }))));\n\n    if (dividerBottom) {\n      array.push(React.createElement(Divider, {\n        key: \"divider\".concat(id)\n      }));\n    }\n  });\n  return array;\n};\n\nconst SelectContainer = compose(withStyles(styles), mapProps((_ref2) => {\n  let {\n    options,\n    classes,\n    onChange,\n    id\n  } = _ref2,\n      otherProps = (0, _objectWithoutProperties2.default)(_ref2, [\"options\", \"classes\", \"onChange\", \"id\"]);\n  return (0, _objectSpread2.default)({\n    rawOptions: options,\n    options: mapOptions(options, classes),\n    onChange: e => onChange(id, e.target.value),\n    id\n  }, otherProps);\n}));\nmodule.exportDefault(SelectContainer);","map":{"version":3,"sources":["imports/core/components/Select/SelectContainer.jsx"],"names":["React","styles","theme","mapOptions","menuItem","colorClass","array","options","option","otherProps","root","menuItemRoot","icon","primary","secondary","listItemtext","SelectContainer","compose","withStyles","mapProps","rawOptions","onChange","e"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { compose, mapProps } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport MenuItem from '../Material/MenuItem';\nimport Divider from '../Material/Divider';\nimport Icon from '../Icon';\n\nconst styles = theme => ({\n  // menuItem: {\n  //   '&:hover': {\n  //     backgroundColor: theme.palette.primary.main,\n  //     '& $colorClass': { color: theme.palette.common.white },\n  //   },\n  // },\n  // menuItemRoot: { height: 'unset' },\n  // listItemTextWithIcon: { paddingLeft: 0 },\n  // listItemtext: { paddingLeft: 0, paddingRight: 0 },\n  // colorClass: {},\n});\n\nconst mapOptions = (\n  options,\n  {\n    menuItem: menuItemClass,\n    menuItemRoot,\n    listItemTextWithIcon,\n    listItemtext,\n    colorClass,\n  },\n) => {\n  const array = [];\n  options.forEach((option) => {\n    if (React.isValidElement(option)) {\n      return option;\n    }\n    const {\n      id,\n      label,\n      icon,\n      dividerTop,\n      dividerBottom,\n      secondary,\n      ...otherProps\n    } = option;\n\n    if (dividerTop) {\n      array.push(<Divider key={`divider${id}`} />);\n    }\n\n    array.push(<MenuItem\n      value={id}\n      key={id}\n      className={menuItemClass}\n      classes={{ root: menuItemRoot }}\n      {...otherProps}\n    >\n      <>\n        {icon && (\n          <ListItemIcon className={colorClass}>\n            <Icon type={icon} />\n          </ListItemIcon>\n        )}\n        <ListItemText\n          classes={{\n            primary: colorClass,\n            secondary: colorClass,\n            root: icon ? listItemTextWithIcon : listItemtext,\n          }}\n          // inset={!!icon}\n          primary={label}\n          secondary={secondary}\n        />\n      </>\n    </MenuItem>);\n\n    if (dividerBottom) {\n      array.push(<Divider key={`divider${id}`} />);\n    }\n  });\n\n  return array;\n};\n\nconst SelectContainer = compose(\n  withStyles(styles),\n  mapProps(({ options, classes, onChange, id, ...otherProps }) => ({\n    rawOptions: options,\n    options: mapOptions(options, classes),\n    onChange: e => onChange(id, e.target.value),\n    id,\n    ...otherProps,\n  })),\n);\n\nexport default SelectContainer;\n"]},"sourceType":"script","hash":"0d4bc1bf1ae5ac094230666df15f80a865203449"}

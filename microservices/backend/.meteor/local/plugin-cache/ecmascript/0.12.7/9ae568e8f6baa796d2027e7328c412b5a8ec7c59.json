{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/autoFormHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/AutoForm2/autoFormHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/autoFormHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/components/AutoForm2/autoFormHelpers.js"],"names":["React","T","COMPONENT_TYPES","formatStringId","intlId","name","intlPrefix","parent","start","end","nameWithoutDots","replace","nameWithoutDot2","flowProps","arr","reduce","val","i","oneIsNull","some","getLabel","field","uniforms","overrideLabel","label","isListField","placeholdersAreEnabled","placeholder","getPlaceholder","fieldType","intl","formatMessage","type","placeholderPrefix","SELECT","Boolean","Date","Array","undefined","PERCENT","id"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport T from '../Translation';\nimport { COMPONENT_TYPES } from './constants';\n\nconst formatStringId = ({ intlId, name, intlPrefix, parent }) => {\n  const start = `${intlPrefix || 'Forms'}.`;\n  let end = name;\n\n  if (parent) {\n    const nameWithoutDots = name.replace(/\\.\\d+$/g, '');\n    const nameWithoutDot2 = nameWithoutDots.replace(/\\.\\d+\\./g, '.');\n    end = nameWithoutDot2;\n  }\n\n  if (intlId) {\n    end = intlId;\n  }\n\n  return start + end;\n};\n\nconst flowProps = arr =>\n  arr.reduce((val, i) => {\n    if (val === null) {\n      return null;\n    }\n    if (val) {\n      return val;\n    }\n\n    return i;\n  }, '');\n\nconst oneIsNull = arr => arr.some(i => i === null);\n\nexport const getLabel = ({\n  name,\n  field: { uniforms },\n  overrideLabel,\n  intlId,\n  intlPrefix,\n  label,\n  isListField,\n  parent,\n}) => {\n  if (label === null) {\n    return null;\n  }\n\n  if (isListField) {\n    return null;\n  }\n\n  return flowProps([\n    overrideLabel,\n    label,\n    uniforms && uniforms.label,\n    <T id={formatStringId({ intlPrefix, intlId, name, parent })} />,\n  ]);\n};\n\nconst placeholdersAreEnabled = ({ placeholder, parent }) => {\n  if (parent) {\n    return parent.placeholder !== '';\n  }\n\n  return placeholder !== '';\n};\n\nexport const getPlaceholder = ({\n  field: { uniforms },\n  fieldType,\n  intl: { formatMessage },\n  intlId,\n  intlPrefix,\n  name,\n  placeholder,\n  type,\n  parent,\n}) => {\n  let placeholderPrefix = 'p.ex: ';\n\n  // Doesn't make sense to add example prefix on select field\n  if (type === COMPONENT_TYPES.SELECT) {\n    placeholderPrefix = '';\n  }\n\n  if (fieldType === Boolean || fieldType === Date) {\n    return '';\n  }\n\n  if (fieldType === Array) {\n    return placeholder;\n  }\n\n  if (uniforms && uniforms.placeholder !== undefined) {\n    return uniforms.placeholder\n      ? `${placeholderPrefix}${uniforms.placeholder}`\n      : uniforms.placeholder;\n  }\n  // When you set placeholder to `false`, it sets the default placeholder to\n  // an empty string\n  if (!placeholdersAreEnabled({ placeholder, parent })) {\n    return '';\n  }\n\n  if (oneIsNull([placeholder, uniforms && uniforms.placeholder])) {\n    return '';\n  }\n\n  // Let select fields manage their own null states\n  if (type === COMPONENT_TYPES.PERCENT) {\n    return '';\n  }\n\n  return `${placeholderPrefix}${formatMessage({\n    id: `${formatStringId({\n      intlPrefix,\n      intlId,\n      name,\n      parent,\n    })}.placeholder`,\n  })}`;\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/autoFormHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/AutoForm2/autoFormHelpers.js"}},"code":"module.export({\n  getLabel: () => getLabel,\n  getPlaceholder: () => getPlaceholder\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet T;\nmodule.link(\"../Translation\", {\n  default(v) {\n    T = v;\n  }\n\n}, 1);\nlet COMPONENT_TYPES;\nmodule.link(\"./constants\", {\n  COMPONENT_TYPES(v) {\n    COMPONENT_TYPES = v;\n  }\n\n}, 2);\n\nconst formatStringId = (_ref) => {\n  let {\n    intlId,\n    name,\n    intlPrefix,\n    parent\n  } = _ref;\n  const start = \"\".concat(intlPrefix || 'Forms', \".\");\n  let end = name;\n\n  if (parent) {\n    const nameWithoutDots = name.replace(/\\.\\d+$/g, '');\n    const nameWithoutDot2 = nameWithoutDots.replace(/\\.\\d+\\./g, '.');\n    end = nameWithoutDot2;\n  }\n\n  if (intlId) {\n    end = intlId;\n  }\n\n  return start + end;\n};\n\nconst flowProps = arr => arr.reduce((val, i) => {\n  if (val === null) {\n    return null;\n  }\n\n  if (val) {\n    return val;\n  }\n\n  return i;\n}, '');\n\nconst oneIsNull = arr => arr.some(i => i === null);\n\nconst getLabel = (_ref2) => {\n  let {\n    name,\n    field: {\n      uniforms\n    },\n    overrideLabel,\n    intlId,\n    intlPrefix,\n    label,\n    isListField,\n    parent\n  } = _ref2;\n\n  if (label === null) {\n    return null;\n  }\n\n  if (isListField) {\n    return null;\n  }\n\n  return flowProps([overrideLabel, label, uniforms && uniforms.label, React.createElement(T, {\n    id: formatStringId({\n      intlPrefix,\n      intlId,\n      name,\n      parent\n    })\n  })]);\n};\n\nconst placeholdersAreEnabled = (_ref3) => {\n  let {\n    placeholder,\n    parent\n  } = _ref3;\n\n  if (parent) {\n    return parent.placeholder !== '';\n  }\n\n  return placeholder !== '';\n};\n\nconst getPlaceholder = (_ref4) => {\n  let {\n    field: {\n      uniforms\n    },\n    fieldType,\n    intl: {\n      formatMessage\n    },\n    intlId,\n    intlPrefix,\n    name,\n    placeholder,\n    type,\n    parent\n  } = _ref4;\n  let placeholderPrefix = 'p.ex: '; // Doesn't make sense to add example prefix on select field\n\n  if (type === COMPONENT_TYPES.SELECT) {\n    placeholderPrefix = '';\n  }\n\n  if (fieldType === Boolean || fieldType === Date) {\n    return '';\n  }\n\n  if (fieldType === Array) {\n    return placeholder;\n  }\n\n  if (uniforms && uniforms.placeholder !== undefined) {\n    return uniforms.placeholder ? \"\".concat(placeholderPrefix).concat(uniforms.placeholder) : uniforms.placeholder;\n  } // When you set placeholder to `false`, it sets the default placeholder to\n  // an empty string\n\n\n  if (!placeholdersAreEnabled({\n    placeholder,\n    parent\n  })) {\n    return '';\n  }\n\n  if (oneIsNull([placeholder, uniforms && uniforms.placeholder])) {\n    return '';\n  } // Let select fields manage their own null states\n\n\n  if (type === COMPONENT_TYPES.PERCENT) {\n    return '';\n  }\n\n  return \"\".concat(placeholderPrefix).concat(formatMessage({\n    id: \"\".concat(formatStringId({\n      intlPrefix,\n      intlId,\n      name,\n      parent\n    }), \".placeholder\")\n  }));\n};","map":{"version":3,"sources":["imports/core/components/AutoForm2/autoFormHelpers.js"],"names":["formatStringId","parent","start","intlPrefix","end","nameWithoutDots","name","nameWithoutDot2","flowProps","arr","val","oneIsNull","i","getLabel","field","uniforms","label","placeholdersAreEnabled","placeholder","getPlaceholder","intl","formatMessage","placeholderPrefix","type","COMPONENT_TYPES","fieldType","id"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport T from '../Translation';\nimport { COMPONENT_TYPES } from './constants';\n\nconst formatStringId = ({ intlId, name, intlPrefix, parent }) => {\n  const start = `${intlPrefix || 'Forms'}.`;\n  let end = name;\n\n  if (parent) {\n    const nameWithoutDots = name.replace(/\\.\\d+$/g, '');\n    const nameWithoutDot2 = nameWithoutDots.replace(/\\.\\d+\\./g, '.');\n    end = nameWithoutDot2;\n  }\n\n  if (intlId) {\n    end = intlId;\n  }\n\n  return start + end;\n};\n\nconst flowProps = arr =>\n  arr.reduce((val, i) => {\n    if (val === null) {\n      return null;\n    }\n    if (val) {\n      return val;\n    }\n\n    return i;\n  }, '');\n\nconst oneIsNull = arr => arr.some(i => i === null);\n\nexport const getLabel = ({\n  name,\n  field: { uniforms },\n  overrideLabel,\n  intlId,\n  intlPrefix,\n  label,\n  isListField,\n  parent,\n}) => {\n  if (label === null) {\n    return null;\n  }\n\n  if (isListField) {\n    return null;\n  }\n\n  return flowProps([\n    overrideLabel,\n    label,\n    uniforms && uniforms.label,\n    <T id={formatStringId({ intlPrefix, intlId, name, parent })} />,\n  ]);\n};\n\nconst placeholdersAreEnabled = ({ placeholder, parent }) => {\n  if (parent) {\n    return parent.placeholder !== '';\n  }\n\n  return placeholder !== '';\n};\n\nexport const getPlaceholder = ({\n  field: { uniforms },\n  fieldType,\n  intl: { formatMessage },\n  intlId,\n  intlPrefix,\n  name,\n  placeholder,\n  type,\n  parent,\n}) => {\n  let placeholderPrefix = 'p.ex: ';\n\n  // Doesn't make sense to add example prefix on select field\n  if (type === COMPONENT_TYPES.SELECT) {\n    placeholderPrefix = '';\n  }\n\n  if (fieldType === Boolean || fieldType === Date) {\n    return '';\n  }\n\n  if (fieldType === Array) {\n    return placeholder;\n  }\n\n  if (uniforms && uniforms.placeholder !== undefined) {\n    return uniforms.placeholder\n      ? `${placeholderPrefix}${uniforms.placeholder}`\n      : uniforms.placeholder;\n  }\n  // When you set placeholder to `false`, it sets the default placeholder to\n  // an empty string\n  if (!placeholdersAreEnabled({ placeholder, parent })) {\n    return '';\n  }\n\n  if (oneIsNull([placeholder, uniforms && uniforms.placeholder])) {\n    return '';\n  }\n\n  // Let select fields manage their own null states\n  if (type === COMPONENT_TYPES.PERCENT) {\n    return '';\n  }\n\n  return `${placeholderPrefix}${formatMessage({\n    id: `${formatStringId({\n      intlPrefix,\n      intlId,\n      name,\n      parent,\n    })}.placeholder`,\n  })}`;\n};\n"]},"sourceType":"script","hash":"9ae568e8f6baa796d2027e7328c412b5a8ec7c59"}

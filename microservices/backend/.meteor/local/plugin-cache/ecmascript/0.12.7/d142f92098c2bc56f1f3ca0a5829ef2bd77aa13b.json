{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/helpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/lenderRules/helpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/helpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/lenderRules/helpers.js"],"names":["jsonLogic","rulesToMerge","filterIsValid","filter","variables","apply","mergeRules","names","oldRules","newRules","mergedObject","Object","keys","forEach","newRuleName","newRule","includes","undefined","name","getMatchingRules","lenderRules","storeOrigin","reduce","validRules","rules","_id","isAllRule","and","parseFilter","ruleObject","value","operator","var","variable","find","o","formatFilter"],"mappings":"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","sourcesContent":["import jsonLogic from 'json-logic-js';\n\nconst rulesToMerge = ['pdfComments', 'adminComments'];\n\nconst filterIsValid = (filter, variables) => jsonLogic.apply(filter, variables);\n\nconst mergeRules = ({ names = [], ...oldRules }, newRules) => {\n  let mergedObject = { ...oldRules };\n\n  Object.keys(newRules).forEach((newRuleName) => {\n    const newRule = newRules[newRuleName];\n\n    if (rulesToMerge.includes(newRuleName) && mergedObject[newRuleName]) {\n      mergedObject = {\n        ...mergedObject,\n        [newRuleName]: [...mergedObject[newRuleName], ...newRule],\n      };\n    } else if (newRule !== undefined && newRule !== null) {\n      mergedObject = { ...mergedObject, [newRuleName]: newRule };\n    }\n  });\n\n  return {\n    ...mergedObject,\n    names: [...names, newRules.name],\n  };\n};\n\nexport const getMatchingRules = (\n  lenderRules,\n  variables,\n  storeOrigin = () => {},\n) =>\n  lenderRules.reduce((validRules, { filter, ...rules }) => {\n    if (filterIsValid(filter, variables)) {\n      storeOrigin(rules, rules._id);\n      return mergeRules(validRules, rules);\n    }\n\n    return validRules;\n  }, {});\n\nexport const isAllRule = ({ filter: { and } }) => and[0] === true;\n\nexport const parseFilter = (ruleObject) => {\n  if (ruleObject === true) {\n    // Handle exception for rules that are true, i.e. apply to all loans\n    return { value: true };\n  }\n\n  const [operator] = Object.keys(ruleObject);\n  const { var: variable } = ruleObject[operator].find(o => o && o.var);\n  const value = ruleObject[operator].find(o => !(o && o.var));\n\n  return { operator, variable, value };\n};\n\nexport const formatFilter = ({ variable, operator, value }) => ({\n  [operator]: [{ var: variable }, value],\n});\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/helpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/lenderRules/helpers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nmodule.export({\n  getMatchingRules: () => getMatchingRules,\n  isAllRule: () => isAllRule,\n  parseFilter: () => parseFilter,\n  formatFilter: () => formatFilter\n});\nlet jsonLogic;\nmodule.link(\"json-logic-js\", {\n  default(v) {\n    jsonLogic = v;\n  }\n\n}, 0);\nconst rulesToMerge = ['pdfComments', 'adminComments'];\n\nconst filterIsValid = (filter, variables) => jsonLogic.apply(filter, variables);\n\nconst mergeRules = (_ref, newRules) => {\n  let {\n    names = []\n  } = _ref,\n      oldRules = (0, _objectWithoutProperties2.default)(_ref, [\"names\"]);\n  let mergedObject = (0, _objectSpread2.default)({}, oldRules);\n  Object.keys(newRules).forEach(newRuleName => {\n    const newRule = newRules[newRuleName];\n\n    if (rulesToMerge.includes(newRuleName) && mergedObject[newRuleName]) {\n      mergedObject = (0, _objectSpread2.default)({}, mergedObject, {\n        [newRuleName]: [...mergedObject[newRuleName], ...newRule]\n      });\n    } else if (newRule !== undefined && newRule !== null) {\n      mergedObject = (0, _objectSpread2.default)({}, mergedObject, {\n        [newRuleName]: newRule\n      });\n    }\n  });\n  return (0, _objectSpread2.default)({}, mergedObject, {\n    names: [...names, newRules.name]\n  });\n};\n\nconst getMatchingRules = (lenderRules, variables, storeOrigin = () => {}) => lenderRules.reduce((validRules, _ref2) => {\n  let {\n    filter\n  } = _ref2,\n      rules = (0, _objectWithoutProperties2.default)(_ref2, [\"filter\"]);\n\n  if (filterIsValid(filter, variables)) {\n    storeOrigin(rules, rules._id);\n    return mergeRules(validRules, rules);\n  }\n\n  return validRules;\n}, {});\n\nconst isAllRule = ({\n  filter: {\n    and\n  }\n}) => and[0] === true;\n\nconst parseFilter = ruleObject => {\n  if (ruleObject === true) {\n    // Handle exception for rules that are true, i.e. apply to all loans\n    return {\n      value: true\n    };\n  }\n\n  const [operator] = Object.keys(ruleObject);\n  const {\n    var: variable\n  } = ruleObject[operator].find(o => o && o.var);\n  const value = ruleObject[operator].find(o => !(o && o.var));\n  return {\n    operator,\n    variable,\n    value\n  };\n};\n\nconst formatFilter = ({\n  variable,\n  operator,\n  value\n}) => ({\n  [operator]: [{\n    var: variable\n  }, value]\n});","map":{"version":3,"sources":["imports/core/api/lenderRules/helpers.js"],"names":["jsonLogic","rulesToMerge","filterIsValid","mergeRules","names","oldRules","mergedObject","Object","newRuleName","newRule","newRules","getMatchingRules","storeOrigin","rules","isAllRule","filter","and","parseFilter","ruleObject","value","var","variable","o","formatFilter"],"mappings":"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","sourcesContent":["import jsonLogic from 'json-logic-js';\n\nconst rulesToMerge = ['pdfComments', 'adminComments'];\n\nconst filterIsValid = (filter, variables) => jsonLogic.apply(filter, variables);\n\nconst mergeRules = ({ names = [], ...oldRules }, newRules) => {\n  let mergedObject = { ...oldRules };\n\n  Object.keys(newRules).forEach((newRuleName) => {\n    const newRule = newRules[newRuleName];\n\n    if (rulesToMerge.includes(newRuleName) && mergedObject[newRuleName]) {\n      mergedObject = {\n        ...mergedObject,\n        [newRuleName]: [...mergedObject[newRuleName], ...newRule],\n      };\n    } else if (newRule !== undefined && newRule !== null) {\n      mergedObject = { ...mergedObject, [newRuleName]: newRule };\n    }\n  });\n\n  return {\n    ...mergedObject,\n    names: [...names, newRules.name],\n  };\n};\n\nexport const getMatchingRules = (\n  lenderRules,\n  variables,\n  storeOrigin = () => {},\n) =>\n  lenderRules.reduce((validRules, { filter, ...rules }) => {\n    if (filterIsValid(filter, variables)) {\n      storeOrigin(rules, rules._id);\n      return mergeRules(validRules, rules);\n    }\n\n    return validRules;\n  }, {});\n\nexport const isAllRule = ({ filter: { and } }) => and[0] === true;\n\nexport const parseFilter = (ruleObject) => {\n  if (ruleObject === true) {\n    // Handle exception for rules that are true, i.e. apply to all loans\n    return { value: true };\n  }\n\n  const [operator] = Object.keys(ruleObject);\n  const { var: variable } = ruleObject[operator].find(o => o && o.var);\n  const value = ruleObject[operator].find(o => !(o && o.var));\n\n  return { operator, variable, value };\n};\n\nexport const formatFilter = ({ variable, operator, value }) => ({\n  [operator]: [{ var: variable }, value],\n});\n"]},"sourceType":"script","hash":"d142f92098c2bc56f1f3ca0a5829ef2bd77aa13b"}

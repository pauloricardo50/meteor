{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/aldeed:schema-index/server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/aldeed:schema-index/server.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/aldeed:schema-index/server.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/aldeed:schema-index/server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:schema-index/server.js"}},"code":"let Collection2;\nmodule.link(\"meteor/aldeed:collection2\", {\n  default(v) {\n    Collection2 = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nmodule.link(\"./common\");\nCollection2.on('schema.attached', (collection, ss) => {\n  function ensureIndex(index, name, unique, sparse) {\n    Meteor.startup(() => {\n      collection._collection._ensureIndex(index, {\n        background: true,\n        name,\n        unique,\n        sparse\n      });\n    });\n  }\n\n  function dropIndex(indexName) {\n    Meteor.startup(() => {\n      try {\n        collection._collection._dropIndex(indexName);\n      } catch (err) {// no index with that name, which is what we want\n      }\n    });\n  }\n\n  const propName = ss.version === 2 ? 'mergedSchema' : 'schema'; // Loop over fields definitions and ensure collection indexes (server side only)\n\n  const schema = ss[propName]();\n  Object.keys(schema).forEach(fieldName => {\n    const definition = schema[fieldName];\n\n    if ('index' in definition || definition.unique === true) {\n      const index = {}; // If they specified `unique: true` but not `index`,\n      // we assume `index: 1` to set up the unique index in mongo\n\n      let indexValue;\n\n      if ('index' in definition) {\n        indexValue = definition.index;\n        if (indexValue === true) indexValue = 1;\n      } else {\n        indexValue = 1;\n      }\n\n      const indexName = `c2_${fieldName}`; // In the index object, we want object array keys without the \".$\" piece\n\n      const idxFieldName = fieldName.replace(/\\.\\$\\./g, '.');\n      index[idxFieldName] = indexValue;\n      const unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n      let sparse = definition.sparse || false; // If unique and optional, force sparse to prevent errors\n\n      if (!sparse && unique && definition.optional) sparse = true;\n\n      if (indexValue === false) {\n        dropIndex(indexName);\n      } else {\n        ensureIndex(index, indexName, unique, sparse);\n      }\n    }\n  });\n});","map":{"version":3,"sources":["packages/aldeed:schema-index/server.js"],"names":["Collection2","module","link","default","v","Meteor","on","collection","ss","ensureIndex","index","name","unique","sparse","startup","_collection","_ensureIndex","background","dropIndex","indexName","_dropIndex","err","propName","version","schema","Object","keys","forEach","fieldName","definition","indexValue","idxFieldName","replace","optional"],"mappings":"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","sourcesContent":["import Collection2 from 'meteor/aldeed:collection2';\nimport { Meteor } from 'meteor/meteor';\n\nimport './common';\n\nCollection2.on('schema.attached', (collection, ss) => {\n  function ensureIndex(index, name, unique, sparse) {\n    Meteor.startup(() => {\n      collection._collection._ensureIndex(index, {\n        background: true,\n        name,\n        unique,\n        sparse,\n      });\n    });\n  }\n\n  function dropIndex(indexName) {\n    Meteor.startup(() => {\n      try {\n        collection._collection._dropIndex(indexName);\n      } catch (err) {\n        // no index with that name, which is what we want\n      }\n    });\n  }\n\n  const propName = ss.version === 2 ? 'mergedSchema' : 'schema';\n\n  // Loop over fields definitions and ensure collection indexes (server side only)\n  const schema = ss[propName]();\n  Object.keys(schema).forEach((fieldName) => {\n    const definition = schema[fieldName];\n    if ('index' in definition || definition.unique === true) {\n      const index = {};\n      // If they specified `unique: true` but not `index`,\n      // we assume `index: 1` to set up the unique index in mongo\n      let indexValue;\n      if ('index' in definition) {\n        indexValue = definition.index;\n        if (indexValue === true) indexValue = 1;\n      } else {\n        indexValue = 1;\n      }\n\n      const indexName = `c2_${fieldName}`;\n      // In the index object, we want object array keys without the \".$\" piece\n      const idxFieldName = fieldName.replace(/\\.\\$\\./g, '.');\n      index[idxFieldName] = indexValue;\n      const unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n      let sparse = definition.sparse || false;\n\n      // If unique and optional, force sparse to prevent errors\n      if (!sparse && unique && definition.optional) sparse = true;\n\n      if (indexValue === false) {\n        dropIndex(indexName);\n      } else {\n        ensureIndex(index, indexName, unique, sparse);\n      }\n    }\n  });\n});\n"]},"sourceType":"script","hash":"78f719f95265279d36e7a8d8d5dbf030947aee5c"}

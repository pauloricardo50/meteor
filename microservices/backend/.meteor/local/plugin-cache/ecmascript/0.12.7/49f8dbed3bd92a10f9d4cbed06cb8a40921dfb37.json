{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/IncomeAndExpenses.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/IncomeAndExpenses.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/IncomeAndExpenses.jsx","inputSourceMap":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/IncomeAndExpenses.jsx"],"names":["React","T","Money","toMoney","shouldRenderRow","BalanceSheetTable","IncomeAndExpensesProps","renderExpenses","expenses","Object","keys","map","expenseType","value","label","noPrefix","condition","money","getIncomeRows","loan","structureId","calculator","salary","getSalary","bonus","getBonusIncome","otherIncome","getOtherIncome","fortuneReturns","getFortuneReturns","realEstateIncome","getRealEstateIncomeTotal","getGroupedExpensesBySide","toSubtractFromIncome","useNetSalary","shouldUseNetSalary","filter","getExpenseRows","propertyCost","getTheoreticalPropertyCost","asObject","interests","amortization","maintenance","IncomeAndExpenses","getTheoreticalMonthly","getTotalIncome"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\n\nimport T, { Money } from '../../../../../../components/Translation';\nimport { toMoney } from '../../../../../../utils/conversionFunctions';\nimport { shouldRenderRow } from '../../PdfTable/PdfTable';\nimport BalanceSheetTable from '../../BalanceSheetTable';\n\ntype IncomeAndExpensesProps = {};\n\nconst renderExpenses = expenses =>\n  Object.keys(expenses).map((expenseType) => {\n    const value = expenses[expenseType];\n    return {\n      label: <T id={`Forms.expenses.${expenseType}`} />,\n      // When an expense is positive, it means it has to be substracted from\n      // the income\n      // When it is negative, it has to be added to it\n      value:\n        value < 0 ? (\n          <span>{toMoney(value, { noPrefix: true })}</span>\n        ) : (\n          <span>-{toMoney(value)}</span>\n        ),\n      condition: !!value,\n      money: false,\n    };\n  });\n\nconst getIncomeRows = ({ loan, structureId, calculator }) => {\n  const salary = calculator.getSalary({ loan, structureId });\n  const bonus = calculator.getBonusIncome({ loan, structureId });\n  const otherIncome = calculator.getOtherIncome({ loan, structureId });\n  const fortuneReturns = calculator.getFortuneReturns({ loan, structureId });\n  const realEstateIncome = calculator.getRealEstateIncomeTotal({\n    loan,\n    structureId,\n  });\n  const expenses = calculator.getGroupedExpensesBySide({\n    loan,\n    structureId,\n    toSubtractFromIncome: true,\n  });\n\n  const useNetSalary = calculator.shouldUseNetSalary();\n\n  return [\n    {\n      label: <T id={useNetSalary ? 'Forms.netSalary' : 'Forms.salary'} />,\n      value: salary,\n    },\n    {\n      label: <T id=\"Recap.consideredBonus\" />,\n      value: bonus,\n      condition: !!bonus,\n    },\n    {\n      label: <T id=\"Forms.otherIncome\" />,\n      value: otherIncome,\n      condition: !!otherIncome,\n    },\n    {\n      label: <T id=\"Forms.fortuneReturns\" />,\n      value: fortuneReturns,\n      condition: !!fortuneReturns,\n    },\n    {\n      label: <T id=\"Forms.realEstateIncome\" />,\n      value: realEstateIncome,\n      condition: !!realEstateIncome,\n    },\n    ...renderExpenses(expenses),\n  ].filter(({ condition }) => shouldRenderRow(condition));\n};\n\nconst getExpenseRows = ({ loan, structureId, calculator }) => {\n  const propertyCost = calculator.getTheoreticalPropertyCost({\n    loan,\n    structureId,\n    asObject: true,\n  });\n  const expenses = calculator.getGroupedExpensesBySide({\n    loan,\n    toSubtractFromIncome: false,\n  });\n\n  return [\n    {\n      label: <i>Taux d'intérêt théorique</i>,\n      value: <i>{toMoney(propertyCost.interests * 12)}</i>,\n      money: false,\n    },\n    {\n      label: <i>Amortissement théorique</i>,\n      value: <i>{toMoney(propertyCost.amortization * 12)}</i>,\n      money: false,\n    },\n    {\n      label: <i>Frais d'entretien théorique</i>,\n      value: <i>{toMoney(propertyCost.maintenance * 12)}</i>,\n      money: false,\n    },\n    ...Object.keys(expenses).map(expenseType => ({\n      label: <T id={`Forms.expenses.${expenseType}`} />,\n      value: expenses[expenseType],\n      condition: !!expenses[expenseType],\n    })),\n  ].filter(({ condition }) => shouldRenderRow(condition));\n};\n\nconst IncomeAndExpenses = ({\n  loan,\n  structureId,\n  calculator,\n}: IncomeAndExpensesProps) => (\n  <BalanceSheetTable\n    titles={['Charges', 'Revenus']}\n    leftRows={getExpenseRows({ loan, structureId, calculator })}\n    rightRows={getIncomeRows({ loan, structureId, calculator })}\n    bottomTitles={['Total', 'Total']}\n    bottomValues={[\n      <Money\n        currency={false}\n        value={calculator.getTheoreticalMonthly({ loan, structureId }) * 12}\n        key=\"0\"\n      />,\n      <Money\n        currency={false}\n        value={calculator.getTotalIncome({ loan, structureId })}\n        key=\"1\"\n      />,\n    ]}\n  />\n);\n\nexport default IncomeAndExpenses;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/IncomeAndExpenses.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/IncomeAndExpenses.jsx"}},"code":"let React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet T, Money;\nmodule.link(\"../../../../../../components/Translation\", {\n  default(v) {\n    T = v;\n  },\n\n  Money(v) {\n    Money = v;\n  }\n\n}, 1);\nlet toMoney;\nmodule.link(\"../../../../../../utils/conversionFunctions\", {\n  toMoney(v) {\n    toMoney = v;\n  }\n\n}, 2);\nlet shouldRenderRow;\nmodule.link(\"../../PdfTable/PdfTable\", {\n  shouldRenderRow(v) {\n    shouldRenderRow = v;\n  }\n\n}, 3);\nlet BalanceSheetTable;\nmodule.link(\"../../BalanceSheetTable\", {\n  default(v) {\n    BalanceSheetTable = v;\n  }\n\n}, 4);\n\nconst renderExpenses = expenses => Object.keys(expenses).map(expenseType => {\n  const value = expenses[expenseType];\n  return {\n    label: React.createElement(T, {\n      id: `Forms.expenses.${expenseType}`\n    }),\n    // When an expense is positive, it means it has to be substracted from\n    // the income\n    // When it is negative, it has to be added to it\n    value: value < 0 ? React.createElement(\"span\", null, toMoney(value, {\n      noPrefix: true\n    })) : React.createElement(\"span\", null, \"-\", toMoney(value)),\n    condition: !!value,\n    money: false\n  };\n});\n\nconst getIncomeRows = ({\n  loan,\n  structureId,\n  calculator\n}) => {\n  const salary = calculator.getSalary({\n    loan,\n    structureId\n  });\n  const bonus = calculator.getBonusIncome({\n    loan,\n    structureId\n  });\n  const otherIncome = calculator.getOtherIncome({\n    loan,\n    structureId\n  });\n  const fortuneReturns = calculator.getFortuneReturns({\n    loan,\n    structureId\n  });\n  const realEstateIncome = calculator.getRealEstateIncomeTotal({\n    loan,\n    structureId\n  });\n  const expenses = calculator.getGroupedExpensesBySide({\n    loan,\n    structureId,\n    toSubtractFromIncome: true\n  });\n  const useNetSalary = calculator.shouldUseNetSalary();\n  return [{\n    label: React.createElement(T, {\n      id: useNetSalary ? 'Forms.netSalary' : 'Forms.salary'\n    }),\n    value: salary\n  }, {\n    label: React.createElement(T, {\n      id: \"Recap.consideredBonus\"\n    }),\n    value: bonus,\n    condition: !!bonus\n  }, {\n    label: React.createElement(T, {\n      id: \"Forms.otherIncome\"\n    }),\n    value: otherIncome,\n    condition: !!otherIncome\n  }, {\n    label: React.createElement(T, {\n      id: \"Forms.fortuneReturns\"\n    }),\n    value: fortuneReturns,\n    condition: !!fortuneReturns\n  }, {\n    label: React.createElement(T, {\n      id: \"Forms.realEstateIncome\"\n    }),\n    value: realEstateIncome,\n    condition: !!realEstateIncome\n  }, ...renderExpenses(expenses)].filter(({\n    condition\n  }) => shouldRenderRow(condition));\n};\n\nconst getExpenseRows = ({\n  loan,\n  structureId,\n  calculator\n}) => {\n  const propertyCost = calculator.getTheoreticalPropertyCost({\n    loan,\n    structureId,\n    asObject: true\n  });\n  const expenses = calculator.getGroupedExpensesBySide({\n    loan,\n    toSubtractFromIncome: false\n  });\n  return [{\n    label: React.createElement(\"i\", null, \"Taux d'int\\xE9r\\xEAt th\\xE9orique\"),\n    value: React.createElement(\"i\", null, toMoney(propertyCost.interests * 12)),\n    money: false\n  }, {\n    label: React.createElement(\"i\", null, \"Amortissement th\\xE9orique\"),\n    value: React.createElement(\"i\", null, toMoney(propertyCost.amortization * 12)),\n    money: false\n  }, {\n    label: React.createElement(\"i\", null, \"Frais d'entretien th\\xE9orique\"),\n    value: React.createElement(\"i\", null, toMoney(propertyCost.maintenance * 12)),\n    money: false\n  }, ...Object.keys(expenses).map(expenseType => ({\n    label: React.createElement(T, {\n      id: `Forms.expenses.${expenseType}`\n    }),\n    value: expenses[expenseType],\n    condition: !!expenses[expenseType]\n  }))].filter(({\n    condition\n  }) => shouldRenderRow(condition));\n};\n\nconst IncomeAndExpenses = ({\n  loan,\n  structureId,\n  calculator\n}) => React.createElement(BalanceSheetTable, {\n  titles: ['Charges', 'Revenus'],\n  leftRows: getExpenseRows({\n    loan,\n    structureId,\n    calculator\n  }),\n  rightRows: getIncomeRows({\n    loan,\n    structureId,\n    calculator\n  }),\n  bottomTitles: ['Total', 'Total'],\n  bottomValues: [React.createElement(Money, {\n    currency: false,\n    value: calculator.getTheoreticalMonthly({\n      loan,\n      structureId\n    }) * 12,\n    key: \"0\"\n  }), React.createElement(Money, {\n    currency: false,\n    value: calculator.getTotalIncome({\n      loan,\n      structureId\n    }),\n    key: \"1\"\n  })]\n});\n\nmodule.exportDefault(IncomeAndExpenses);","map":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/IncomeAndExpenses.jsx"],"names":["renderExpenses","expenses","expenseType","value","label","toMoney","noPrefix","condition","money","getIncomeRows","calculator","salary","structureId","bonus","otherIncome","fortuneReturns","realEstateIncome","toSubtractFromIncome","useNetSalary","shouldRenderRow","getExpenseRows","propertyCost","asObject","IncomeAndExpenses"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\n\nimport T, { Money } from '../../../../../../components/Translation';\nimport { toMoney } from '../../../../../../utils/conversionFunctions';\nimport { shouldRenderRow } from '../../PdfTable/PdfTable';\nimport BalanceSheetTable from '../../BalanceSheetTable';\n\ntype IncomeAndExpensesProps = {};\n\nconst renderExpenses = expenses =>\n  Object.keys(expenses).map((expenseType) => {\n    const value = expenses[expenseType];\n    return {\n      label: <T id={`Forms.expenses.${expenseType}`} />,\n      // When an expense is positive, it means it has to be substracted from\n      // the income\n      // When it is negative, it has to be added to it\n      value:\n        value < 0 ? (\n          <span>{toMoney(value, { noPrefix: true })}</span>\n        ) : (\n          <span>-{toMoney(value)}</span>\n        ),\n      condition: !!value,\n      money: false,\n    };\n  });\n\nconst getIncomeRows = ({ loan, structureId, calculator }) => {\n  const salary = calculator.getSalary({ loan, structureId });\n  const bonus = calculator.getBonusIncome({ loan, structureId });\n  const otherIncome = calculator.getOtherIncome({ loan, structureId });\n  const fortuneReturns = calculator.getFortuneReturns({ loan, structureId });\n  const realEstateIncome = calculator.getRealEstateIncomeTotal({\n    loan,\n    structureId,\n  });\n  const expenses = calculator.getGroupedExpensesBySide({\n    loan,\n    structureId,\n    toSubtractFromIncome: true,\n  });\n\n  const useNetSalary = calculator.shouldUseNetSalary();\n\n  return [\n    {\n      label: <T id={useNetSalary ? 'Forms.netSalary' : 'Forms.salary'} />,\n      value: salary,\n    },\n    {\n      label: <T id=\"Recap.consideredBonus\" />,\n      value: bonus,\n      condition: !!bonus,\n    },\n    {\n      label: <T id=\"Forms.otherIncome\" />,\n      value: otherIncome,\n      condition: !!otherIncome,\n    },\n    {\n      label: <T id=\"Forms.fortuneReturns\" />,\n      value: fortuneReturns,\n      condition: !!fortuneReturns,\n    },\n    {\n      label: <T id=\"Forms.realEstateIncome\" />,\n      value: realEstateIncome,\n      condition: !!realEstateIncome,\n    },\n    ...renderExpenses(expenses),\n  ].filter(({ condition }) => shouldRenderRow(condition));\n};\n\nconst getExpenseRows = ({ loan, structureId, calculator }) => {\n  const propertyCost = calculator.getTheoreticalPropertyCost({\n    loan,\n    structureId,\n    asObject: true,\n  });\n  const expenses = calculator.getGroupedExpensesBySide({\n    loan,\n    toSubtractFromIncome: false,\n  });\n\n  return [\n    {\n      label: <i>Taux d'intérêt théorique</i>,\n      value: <i>{toMoney(propertyCost.interests * 12)}</i>,\n      money: false,\n    },\n    {\n      label: <i>Amortissement théorique</i>,\n      value: <i>{toMoney(propertyCost.amortization * 12)}</i>,\n      money: false,\n    },\n    {\n      label: <i>Frais d'entretien théorique</i>,\n      value: <i>{toMoney(propertyCost.maintenance * 12)}</i>,\n      money: false,\n    },\n    ...Object.keys(expenses).map(expenseType => ({\n      label: <T id={`Forms.expenses.${expenseType}`} />,\n      value: expenses[expenseType],\n      condition: !!expenses[expenseType],\n    })),\n  ].filter(({ condition }) => shouldRenderRow(condition));\n};\n\nconst IncomeAndExpenses = ({\n  loan,\n  structureId,\n  calculator,\n}: IncomeAndExpensesProps) => (\n  <BalanceSheetTable\n    titles={['Charges', 'Revenus']}\n    leftRows={getExpenseRows({ loan, structureId, calculator })}\n    rightRows={getIncomeRows({ loan, structureId, calculator })}\n    bottomTitles={['Total', 'Total']}\n    bottomValues={[\n      <Money\n        currency={false}\n        value={calculator.getTheoreticalMonthly({ loan, structureId }) * 12}\n        key=\"0\"\n      />,\n      <Money\n        currency={false}\n        value={calculator.getTotalIncome({ loan, structureId })}\n        key=\"1\"\n      />,\n    ]}\n  />\n);\n\nexport default IncomeAndExpenses;\n"]},"sourceType":"script","hash":"49f8dbed3bd92a10f9d4cbed06cb8a40921dfb37"}

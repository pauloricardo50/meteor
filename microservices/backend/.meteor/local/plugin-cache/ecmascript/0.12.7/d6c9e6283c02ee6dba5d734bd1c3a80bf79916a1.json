{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/resolvers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/loans/server/resolvers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/resolvers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/loans/server/resolvers.js"],"names":["uniqBy","PROPERTIES_COLLECTION","PROPERTY_CATEGORY","RESIDENCE_TYPE","PROPERTY_SOLVENCY","PROMOTIONS_COLLECTION","UserService","makeLoanAnonymizer","makePromotionLoanAnonymizer","proLoans","revenue","SecurityService","makeProPropertyLoanAnonymizer","OrganisationService","LoanService","proLoansFragment","isSolventForProProperty","isAdmin","property","maxPropertyValue","residenceType","shareSolvency","UNDETERMINED","NOT_SHARED","main","max","propertyValue","mainMaxValue","second","secondMaxValue","totalValue","MAIN_RESIDENCE","SOLVENT","INSOLVENT","SECOND_RESIDENCE","handleLoanSolvencySharing","loanObject","loan","propertiesWithSolvency","properties","map","solvent","anonymizePromotionLoans","loans","userId","promotions","promotionId","_id","promotionLoanAnonymizer","anonymizePropertyLoans","proPropertyIds","filter","category","PRO","propertyIds","anonymizeReferredByLoans","doesUserShareCustomers","$metadata","shareCustomers","proReferredByLoansResolver","calledByUserId","status","mainOrganisation","getUserMainOrganisation","mainOrganisationsUserIds","mainOrganisationId","users","mainOrganisationUsers","fetchOne","$filters","fetch","referredByUserLink","$in","reduce","allLoans","userLoans","checkUserIsAdmin","error","proPromotionLoansResolver","proPropertyLoansResolver","propertyId","shouldShowPromotionLoan","invitedBy","getRelatedProPropertiesOfUser","some","collection","promotionHasUser","getRelatedPromotionsOfUser","promotion","organisationLoans","organisationId","revenues","user","organisationLink","proLoansResolver","fetchOrganisationLoans","promotionLoans","relatedTo","propertyLoans","referredByLoans","getLoanIds","withReferredBy","params","loanIds","organisations","length","$or","referredByOrganisationLink","x","promotionLoanIds","propertyLoanIds"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,eAAnB;AAEA,SACEC,qBADF,EAEEC,iBAFF,EAGEC,cAHF,EAIEC,iBAJF;AAMA,SAASC,qBAAT;AACA,OAAOC,WAAP;AACA,SAASC,kBAAkB,IAAIC,2BAA/B;AACA,SAASC,QAAT,EAAmBC,OAAnB;AACA,OAAOC,eAAP;AACA,SAASC,6BAAT;AACA,OAAOC,mBAAP;AACA,OAAOC,WAAP;AAEA,MAAMC,gBAAgB,GAAGN,QAAQ,EAAjC;;AAEA,MAAMO,uBAAuB,GAAG,CAAC;AAC/BC,EAAAA,OAD+B;AAE/BC,EAAAA,QAF+B;AAG/BC,EAAAA,gBAH+B;AAI/BC,EAAAA,aAJ+B;AAK/BC,EAAAA;AAL+B,CAAD,KAM1B;AACJ,MAAI,CAACF,gBAAL,EAAuB;AACrB,WAAOf,iBAAiB,CAACkB,YAAzB;AACD;;AAED,MAAI,CAACD,aAAD,IAAkB,CAACJ,OAAvB,EAAgC;AAC9B,WAAOb,iBAAiB,CAACmB,UAAzB;AACD;;AAED,QAAM;AACJC,IAAAA,IAAI,EAAE;AACJC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,aAAa,EAAEC;AAAjB;AADD,KADF;AAIJC,IAAAA,MAAM,EAAE;AACNH,MAAAA,GAAG,EAAE;AAAEC,QAAAA,aAAa,EAAEG;AAAjB;AADC;AAJJ,MAOFV,gBAPJ;AAQA,QAAM;AAAEW,IAAAA;AAAF,MAAiBZ,QAAvB;;AAEA,UAAQE,aAAR;AACA,SAAKjB,cAAc,CAAC4B,cAApB;AAAoC;AAClC,eAAOD,UAAU,IAAIH,YAAd,GACHvB,iBAAiB,CAAC4B,OADf,GAEH5B,iBAAiB,CAAC6B,SAFtB;AAGD;;AACD,SAAK9B,cAAc,CAAC+B,gBAApB;AAAsC;AACpC,eAAOJ,UAAU,IAAID,cAAd,GACHzB,iBAAiB,CAAC4B,OADf,GAEH5B,iBAAiB,CAAC6B,SAFtB;AAGD;;AACD;AACE,aAAO,IAAP;AAZF;AAcD,CAvCD;;AAyCA,MAAME,yBAAyB,GAAG,CAAC;AAAElB,EAAAA,OAAO,GAAG;AAAZ,CAAD,KAA0BmB,UAAD,IAAgB;AACzE,QAAM;AAAEjB,IAAAA,gBAAF;AAAoBE,IAAAA,aAApB;AAAmC,OAAGgB;AAAtC,MAA+CD,UAArD;AAEA,QAAME,sBAAsB,GAAGD,IAAI,CAACE,UAAL,CAAgBC,GAAhB,CAAoBtB,QAAQ,KAAK,EAC9D,GAAGA,QAD2D;AAE9DuB,IAAAA,OAAO,EAAEzB,uBAAuB,CAAC;AAC/BC,MAAAA,OAD+B;AAE/BC,MAAAA,QAF+B;AAG/BC,MAAAA,gBAH+B;AAI/BC,MAAAA,aAAa,EAAEiB,IAAI,CAACjB,aAJW;AAK/BC,MAAAA;AAL+B,KAAD;AAF8B,GAAL,CAA5B,CAA/B;AAWA,SAAO,EACL,GAAGgB,IADE;AAELE,IAAAA,UAAU,EAAED;AAFP,GAAP;AAID,CAlBD;;AAoBA,MAAMI,uBAAuB,GAAG,CAAC;AAAEC,EAAAA,KAAK,GAAG,EAAV;AAAcC,EAAAA;AAAd,CAAD,KAC9BD,KAAK,CAACH,GAAN,CAAWH,IAAD,IAAU;AAClB,QAAM;AAAEQ,IAAAA;AAAF,MAAiBR,IAAvB;AACA,QAAMS,WAAW,GAAGD,UAAU,CAAC,CAAD,CAAV,CAAcE,GAAlC;AAEA,QAAMC,uBAAuB,GAAGxC,2BAA2B,CAAC;AAC1DoC,IAAAA,MAD0D;AAE1DE,IAAAA;AAF0D,GAAD,CAA3D;AAKA,SAAOE,uBAAuB,CAACX,IAAD,CAA9B;AACD,CAVD,CADF;;AAaA,MAAMY,sBAAsB,GAAG,CAAC;AAAEN,EAAAA,KAAK,GAAG,EAAV;AAAcC,EAAAA;AAAd,CAAD,KAC7BD,KAAK,CAACH,GAAN,CAAWH,IAAD,IAAU;AAClB,QAAM;AAAEE,IAAAA;AAAF,MAAiBF,IAAvB;AACA,QAAMa,cAAc,GAAGX,UAAU,CAC9BY,MADoB,CACb,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAkBA,QAAQ,KAAKlD,iBAAiB,CAACmD,GADpC,EAEpBb,GAFoB,CAEhB,CAAC;AAAEO,IAAAA;AAAF,GAAD,KAAaA,GAFG,CAAvB;AAGA,SAAOnC,6BAA6B,CAAC;AACnCgC,IAAAA,MADmC;AAEnCU,IAAAA,WAAW,EAAEJ;AAFsB,GAAD,CAA7B,CAGJb,IAHI,CAAP;AAID,CATD,CADF;;AAYA,MAAMkB,wBAAwB,GAAG,CAAC;AAAEZ,EAAAA,KAAK,GAAG,EAAV;AAAcC,EAAAA;AAAd,CAAD,KAA4B,CAC3D,GAAGD,KADwD,CAA7D;;AAeA,MAAMa,sBAAsB,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAE;AAAEC,IAAAA;AAAF;AAAb,CAAD,KAC7BA,cADF;;AAGA,OAAO,MAAMC,0BAA0B,GAAG,CAAC;AACzCf,EAAAA,MADyC;AAEzCgB,EAAAA,cAFyC;AAGzCC,EAAAA;AAHyC,CAAD,KAIpC;AACJ,QAAMC,gBAAgB,GAAGxD,WAAW,CAACyD,uBAAZ,CAAoCnB,MAApC,CAAzB;AACA,MAAIoB,wBAAwB,GAAG,EAA/B;;AAEA,MAAIF,gBAAJ,EAAsB;AACpB,UAAM;AAAEf,MAAAA,GAAG,EAAEkB;AAAP,QAA8BH,gBAApC;AAEA,UAAM;AAAEI,MAAAA,KAAK,EAAEC,qBAAqB,GAAG;AAAjC,QAAwCtD,mBAAmB,CAACuD,QAApB,CAA6B;AACzEC,MAAAA,QAAQ,EAAE;AAAEtB,QAAAA,GAAG,EAAEkB;AAAP,OAD+D;AAEzEC,MAAAA,KAAK,EAAE;AAAEnB,QAAAA,GAAG,EAAE;AAAP;AAFkE,KAA7B,CAA9C;AAIAiB,IAAAA,wBAAwB,GAAGG,qBAAqB,CAC7ChB,MADwB,CACjB,CAAC;AAAEJ,MAAAA;AAAF,KAAD,KAAaA,GAAG,KAAKH,MADJ,EAExBO,MAFwB,CAEjBK,sBAFiB,EAGxBhB,GAHwB,CAGpB,CAAC;AAAEO,MAAAA;AAAF,KAAD,KAAaA,GAHO,CAA3B;AAID;;AAED,QAAMmB,KAAK,GAAG5D,WAAW,CAACgE,KAAZ,CAAkB;AAC9BD,IAAAA,QAAQ,EAAE;AACRE,MAAAA,kBAAkB,EAAE;AAAEC,QAAAA,GAAG,EAAE,CAAC5B,MAAD,EAAS,GAAGoB,wBAAZ;AAAP;AADZ,KADoB;AAI9BrB,IAAAA,KAAK,EAAE,EAAE,GAAG5B,gBAAL;AAAuBsD,MAAAA,QAAQ,EAAER,MAAM,GAAG;AAAEA,QAAAA;AAAF,OAAH,GAAgB;AAAvD;AAJuB,GAAlB,CAAd;AAOA,QAAMlB,KAAK,GAAGuB,KAAK,CAACO,MAAN,CACZ,CAACC,QAAD,EAAW;AAAE/B,IAAAA,KAAK,EAAEgC,SAAS,GAAG;AAArB,GAAX,KAAyC,CAAC,GAAGD,QAAJ,EAAc,GAAGC,SAAjB,CAD7B,EAEZ,EAFY,CAAd;;AAKA,MAAI;AACFhE,IAAAA,eAAe,CAACiE,gBAAhB,CAAiChB,cAAjC;AACA,WAAOjB,KAAP;AACD,GAHD,CAGE,OAAOkC,KAAP,EAAc;AACd,WAAOtB,wBAAwB,CAAC;AAAEZ,MAAAA,KAAF;AAASC,MAAAA,MAAM,EAAEgB;AAAjB,KAAD,CAA/B;AACD;AACF,CAvCM;AAyCP,OAAO,MAAMkB,yBAAyB,GAAG,CAAC;AACxClB,EAAAA,cADwC;AAExCd,EAAAA,WAFwC;AAGxCe,EAAAA;AAHwC,CAAD,KAInC;AACJ,QAAMlB,KAAK,GAAG7B,WAAW,CAACwD,KAAZ,CAAkB;AAC9BD,IAAAA,QAAQ,EAAE;AAAE,4BAAsBvB,WAAxB;AAAqCe,MAAAA;AAArC,KADoB;AAE9B,OAAG9C;AAF2B,GAAlB,CAAd;;AAKA,MAAI;AACFJ,IAAAA,eAAe,CAACiE,gBAAhB,CAAiChB,cAAjC;AACA,WAAOjB,KAAP;AACD,GAHD,CAGE,OAAOkC,KAAP,EAAc;AACd,WAAOnC,uBAAuB,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,MAAM,EAAEgB;AAAjB,KAAD,CAA9B;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMmB,wBAAwB,GAAG,CAAC;AACvCnB,EAAAA,cADuC;AAEvCoB,EAAAA,UAFuC;AAGvCnB,EAAAA;AAHuC,CAAD,KAIlC;AACJ,QAAMlB,KAAK,GAAG7B,WAAW,CAACwD,KAAZ,CAAkB;AAC9BD,IAAAA,QAAQ,EAAE;AAAEf,MAAAA,WAAW,EAAE0B,UAAf;AAA2BnB,MAAAA;AAA3B,KADoB;AAE9B,OAAG9C;AAF2B,GAAlB,CAAd;;AAKA,MAAI;AACFJ,IAAAA,eAAe,CAACiE,gBAAhB,CAAiChB,cAAjC;AACA,WAAOjB,KAAK,CAACH,GAAN,CAAUL,yBAAyB,CAAC;AAAElB,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAnC,CAAP;AACD,GAHD,CAGE,OAAO4D,KAAP,EAAc;AACd,WAAO5B,sBAAsB,CAAC;AAC5BN,MAAAA,KAAK,EAAEA,KAAK,CAACH,GAAN,CAAUL,yBAAyB,CAAC;AAAElB,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAnC,CADqB;AAE5B2B,MAAAA,MAAM,EAAEgB;AAFoB,KAAD,CAA7B;AAID;AACF,CAnBM;;AAqBP,MAAMqB,uBAAuB,GAAG,CAAC;AAAErC,EAAAA;AAAF,CAAD,KAAiBP,IAAD,IAAU;AACxD,QAAM;AAAEQ,IAAAA,UAAU,GAAG;AAAf,MAAsBR,IAA5B;AACA,QAAM;AACJoB,IAAAA,SAAS,EAAE;AAAEyB,MAAAA;AAAF;AADP,MAEFrC,UAAU,CAAC,CAAD,CAFd;AAGA,SAAOqC,SAAS,KAAKtC,MAArB;AACD,CAND;;AAQA,MAAMuC,6BAA6B,GAAG,CAAC;AAAE9C,EAAAA,IAAF;AAAQO,EAAAA;AAAR,CAAD,KAAsB;AAC1D,QAAM;AAAEL,IAAAA,UAAU,GAAG;AAAf,MAAsBF,IAA5B;AACA,SAAOE,UAAU,CACdY,MADI,CACGjC,QAAQ,IAAIA,QAAQ,CAACkC,QAAT,KAAsBlD,iBAAiB,CAACmD,GADvD,EAEJF,MAFI,CAEG,CAAC;AAAEe,IAAAA,KAAK,GAAG;AAAV,GAAD,KAAoBA,KAAK,CAACkB,IAAN,CAAW,CAAC;AAAErC,IAAAA;AAAF,GAAD,KAAaA,GAAG,KAAKH,MAAhC,CAFvB,EAGJJ,GAHI,CAGAtB,QAAQ,KAAK,EAAE,GAAGA,QAAL;AAAemE,IAAAA,UAAU,EAAEpF;AAA3B,GAAL,CAHR,CAAP;AAID,CAND;;AAQA,MAAMqF,gBAAgB,GAAG1C,MAAM,IAAI,CAAC;AAAEsB,EAAAA,KAAK,GAAG;AAAV,CAAD,KACjCA,KAAK,CAACkB,IAAN,CAAW,CAAC;AAAErC,EAAAA;AAAF,CAAD,KAAaA,GAAG,KAAKH,MAAhC,CADF;;AAGA,MAAM2C,0BAA0B,GAAG,CAAC;AAAElD,EAAAA,IAAF;AAAQO,EAAAA;AAAR,CAAD,KAAsB;AACvD,QAAM;AAAEC,IAAAA,UAAU,GAAG;AAAf,MAAsBR,IAA5B;AACA,SAAOQ,UAAU,CACdM,MADI,CACGmC,gBAAgB,CAAC1C,MAAD,CADnB,EAEJJ,GAFI,CAEAgD,SAAS,KAAK,EAAE,GAAGA,SAAL;AAAgBH,IAAAA,UAAU,EAAEhF;AAA5B,GAAL,CAFT,CAAP;AAGD,CALD;;AAOA,MAAMoF,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,cAAF;AAAkB7B,EAAAA;AAAlB,CAAD,KACxB/C,WAAW,CAACwD,KAAZ,CAAkB;AAChBD,EAAAA,QAAQ,EAAE;AACR,4CAAwCqB,cADhC;AAER7B,IAAAA;AAFQ,GADM;AAKhB,KAAG9C,gBALa;AAMhB4E,EAAAA,QAAQ,EAAEjF,OAAO,EAND;AAOhBkF,EAAAA,IAAI,EAAE;AAAEC,IAAAA,gBAAgB,EAAE;AAApB;AAPU,CAAlB,CADF;;AAWA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAC/BlD,EAAAA,MAD+B;AAE/BgB,EAAAA,cAF+B;AAG/Bd,EAAAA,WAH+B;AAI/BkC,EAAAA,UAJ+B;AAK/Be,EAAAA,sBAL+B;AAM/BL,EAAAA,cAN+B;AAO/B7B,EAAAA;AAP+B,CAAD,KAQ1B;AACJ,MAAIlB,KAAK,GAAG,EAAZ;;AAEA,MAAIoD,sBAAJ,EAA4B;AAC1B,WAAON,iBAAiB,CAAC;AAAEC,MAAAA,cAAF;AAAkB7B,MAAAA;AAAlB,KAAD,CAAxB;AACD;;AAED,MAAIf,WAAJ,EAAiB;AACf,UAAMkD,cAAc,GAAGlB,yBAAyB,CAAC;AAC/ClB,MAAAA,cAD+C;AAE/Cd,MAAAA,WAF+C;AAG/Ce,MAAAA;AAH+C,KAAD,CAAzB,CAKpBV,MALoB,CAKb8B,uBAAuB,CAAC;AAAErC,MAAAA;AAAF,KAAD,CALV,EAMpBJ,GANoB,CAMhBH,IAAI,KAAK,EACZ,GAAGA,IADS;AAEZ4D,MAAAA,SAAS,EAAEV,0BAA0B,CAAC;AAAElD,QAAAA,IAAF;AAAQO,QAAAA;AAAR,OAAD;AAFzB,KAAL,CANY,CAAvB;AAUAD,IAAAA,KAAK,GAAGqD,cAAR;AACD;;AAED,MAAIhB,UAAJ,EAAgB;AACd,UAAMkB,aAAa,GAAGnB,wBAAwB,CAAC;AAC7CnB,MAAAA,cAD6C;AAE7CoB,MAAAA,UAF6C;AAG7CnB,MAAAA;AAH6C,KAAD,CAAxB,CAInBrB,GAJmB,CAIfH,IAAI,KAAK,EACd,GAAGA,IADW;AAEd4D,MAAAA,SAAS,EAAEd,6BAA6B,CAAC;AAAE9C,QAAAA,IAAF;AAAQO,QAAAA;AAAR,OAAD;AAF1B,KAAL,CAJW,CAAtB;AAQAD,IAAAA,KAAK,GAAG,CAAC,GAAGA,KAAJ,EAAW,GAAGuD,aAAd,CAAR;AACD;;AAED,QAAMC,eAAe,GAAGxC,0BAA0B,CAAC;AACjDf,IAAAA,MADiD;AAEjDgB,IAAAA,cAFiD;AAGjDC,IAAAA;AAHiD,GAAD,CAA1B,CAIrBrB,GAJqB,CAIjBH,IAAI,KAAK,EACd,GAAGA,IADW;AAEd4D,IAAAA,SAAS,EAAE,CACT,GAAGd,6BAA6B,CAAC;AAAE9C,MAAAA,IAAF;AAAQO,MAAAA;AAAR,KAAD,CADvB,EAET,GAAG2C,0BAA0B,CAAC;AAAElD,MAAAA,IAAF;AAAQO,MAAAA;AAAR,KAAD,CAFpB;AAFG,GAAL,CAJa,CAAxB;AAWAD,EAAAA,KAAK,GAAG,CAAC,GAAGA,KAAJ,EAAW,GAAGwD,eAAd,CAAR;AAEA,SAAOnG,MAAM,CAAC2C,KAAD,EAAQ,KAAR,CAAb;AACD,CAvDM;AAyDP,OAAO,MAAMyD,UAAU,GAAG,CAAC;AAAEC,EAAAA,cAAc,GAAG;AAAnB,IAA6B,EAA9B,KAAqC,CAACC,MAAM,GAAG,EAAV,KAAiB;AAC9E,QAAM;AAAExD,IAAAA,WAAF;AAAekC,IAAAA,UAAf;AAA2BpC,IAAAA,MAA3B;AAAmCiB,IAAAA;AAAnC,MAA8CyC,MAApD;AACA,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAIF,cAAJ,EAAoB;AAClB,UAAM;AAAEG,MAAAA,aAAa,GAAG;AAAlB,QAAyBlG,WAAW,CAACgE,KAAZ,CAAkB;AAC/CD,MAAAA,QAAQ,EAAE;AAAEtB,QAAAA,GAAG,EAAEH;AAAP,OADqC;AAE/C4D,MAAAA,aAAa,EAAE;AAAEzD,QAAAA,GAAG,EAAE;AAAP;AAFgC,KAAlB,CAA/B;AAKA,UAAM2C,cAAc,GAAG,CAAC,CAACc,aAAa,CAACC,MAAhB,IAA0BD,aAAa,CAAC,CAAD,CAAb,CAAiBzD,GAAlE;AAEA,UAAMmB,KAAK,GAAG5D,WAAW,CAACgE,KAAZ,CAAkB;AAC9BD,MAAAA,QAAQ,EAAE;AACRqC,QAAAA,GAAG,EAAE,CACH;AAAEnC,UAAAA,kBAAkB,EAAE3B;AAAtB,SADG,EAEH8C,cAAc,IAAI;AAAEiB,UAAAA,0BAA0B,EAAEjB;AAA9B,SAFf,EAGHvC,MAHG,CAGIyD,CAAC,IAAIA,CAHT;AADG,OADoB;AAO9BjE,MAAAA,KAAK,EAAE;AAAEI,QAAAA,GAAG,EAAE,CAAP;AAAUsB,QAAAA,QAAQ,EAAER,MAAM,GAAG;AAAEA,UAAAA;AAAF,SAAH,GAAgB;AAA1C;AAPuB,KAAlB,CAAd;AAUA0C,IAAAA,OAAO,GAAGrC,KAAK,CAACO,MAAN,CACR,CAACC,QAAD,EAAW;AAAE/B,MAAAA,KAAK,EAAEgC,SAAS,GAAG;AAArB,KAAX,KAAyC,CACvC,GAAGD,QADoC,EAEvC,GAAGC,SAAS,CAACnC,GAAV,CAAc,CAAC;AAAEO,MAAAA;AAAF,KAAD,KAAaA,GAA3B,CAFoC,CADjC,EAKR,EALQ,CAAV;AAOD;;AAED,MAAID,WAAJ,EAAiB;AACf,UAAM+D,gBAAgB,GAAG/F,WAAW,CAACwD,KAAZ,CAAkB;AACzCD,MAAAA,QAAQ,EAAE;AAAE,8BAAsBvB,WAAxB;AAAqCe,QAAAA;AAArC,OAD+B;AAEzCd,MAAAA,GAAG,EAAE;AAFoC,KAAlB,CAAzB;AAIAwD,IAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAa,GAAGM,gBAAgB,CAACrE,GAAjB,CAAqB,CAAC;AAAEO,MAAAA;AAAF,KAAD,KAAaA,GAAlC,CAAhB,CAAV;AACD;;AAED,MAAIiC,UAAJ,EAAgB;AACd,UAAM8B,eAAe,GAAGhG,WAAW,CAACwD,KAAZ,CAAkB;AACxCD,MAAAA,QAAQ,EAAE;AAAEf,QAAAA,WAAW,EAAE0B,UAAf;AAA2BnB,QAAAA;AAA3B,OAD8B;AAExCd,MAAAA,GAAG,EAAE;AAFmC,KAAlB,CAAxB;AAIAwD,IAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAa,GAAGO,eAAe,CAACtE,GAAhB,CAAoB,CAAC;AAAEO,MAAAA;AAAF,KAAD,KAAaA,GAAjC,CAAhB,CAAV;AACD;;AAED,SAAOwD,OAAP;AACD,CAhDM","sourcesContent":["// @flow\nimport uniqBy from 'lodash/uniqBy';\n\nimport {\n  PROPERTIES_COLLECTION,\n  PROPERTY_CATEGORY,\n  RESIDENCE_TYPE,\n  PROPERTY_SOLVENCY,\n} from '../../properties/propertyConstants';\nimport { PROMOTIONS_COLLECTION } from '../../promotions/promotionConstants';\nimport UserService from '../../users/server/UserService';\nimport { makeLoanAnonymizer as makePromotionLoanAnonymizer } from '../../promotions/server/promotionServerHelpers';\nimport { proLoans, revenue } from '../../fragments';\nimport SecurityService from '../../security';\nimport { makeProPropertyLoanAnonymizer } from '../../properties/server/propertyServerHelpers';\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport LoanService from './LoanService';\n\nconst proLoansFragment = proLoans();\n\nconst isSolventForProProperty = ({\n  isAdmin,\n  property,\n  maxPropertyValue,\n  residenceType,\n  shareSolvency,\n}) => {\n  if (!maxPropertyValue) {\n    return PROPERTY_SOLVENCY.UNDETERMINED;\n  }\n\n  if (!shareSolvency && !isAdmin) {\n    return PROPERTY_SOLVENCY.NOT_SHARED;\n  }\n\n  const {\n    main: {\n      max: { propertyValue: mainMaxValue },\n    },\n    second: {\n      max: { propertyValue: secondMaxValue },\n    },\n  } = maxPropertyValue;\n  const { totalValue } = property;\n\n  switch (residenceType) {\n  case RESIDENCE_TYPE.MAIN_RESIDENCE: {\n    return totalValue <= mainMaxValue\n      ? PROPERTY_SOLVENCY.SOLVENT\n      : PROPERTY_SOLVENCY.INSOLVENT;\n  }\n  case RESIDENCE_TYPE.SECOND_RESIDENCE: {\n    return totalValue <= secondMaxValue\n      ? PROPERTY_SOLVENCY.SOLVENT\n      : PROPERTY_SOLVENCY.INSOLVENT;\n  }\n  default:\n    return null;\n  }\n};\n\nconst handleLoanSolvencySharing = ({ isAdmin = false }) => (loanObject) => {\n  const { maxPropertyValue, shareSolvency, ...loan } = loanObject;\n\n  const propertiesWithSolvency = loan.properties.map(property => ({\n    ...property,\n    solvent: isSolventForProProperty({\n      isAdmin,\n      property,\n      maxPropertyValue,\n      residenceType: loan.residenceType,\n      shareSolvency,\n    }),\n  }));\n\n  return {\n    ...loan,\n    properties: propertiesWithSolvency,\n  };\n};\n\nconst anonymizePromotionLoans = ({ loans = [], userId }) =>\n  loans.map((loan) => {\n    const { promotions } = loan;\n    const promotionId = promotions[0]._id;\n\n    const promotionLoanAnonymizer = makePromotionLoanAnonymizer({\n      userId,\n      promotionId,\n    });\n\n    return promotionLoanAnonymizer(loan);\n  });\n\nconst anonymizePropertyLoans = ({ loans = [], userId }) =>\n  loans.map((loan) => {\n    const { properties } = loan;\n    const proPropertyIds = properties\n      .filter(({ category }) => category === PROPERTY_CATEGORY.PRO)\n      .map(({ _id }) => _id);\n    return makeProPropertyLoanAnonymizer({\n      userId,\n      propertyIds: proPropertyIds,\n    })(loan);\n  });\n\nconst anonymizeReferredByLoans = ({ loans = [], userId }) => [\n  ...loans,\n  // Don't anonymize referred loans\n  // ...anonymizePromotionLoans({\n  //   loans: loans.filter(({ hasPromotion }) => hasPromotion),\n  //   userId,\n  // }),\n\n  // ...anonymizePropertyLoans({\n  //   loans: loans.filter(({ hasProProperty }) => hasProProperty),\n  //   userId,\n  // }),\n  // ...loans.filter(({ hasPromotion, hasProProperty }) => !hasPromotion && !hasProProperty),\n];\n\nconst doesUserShareCustomers = ({ $metadata: { shareCustomers } }) =>\n  shareCustomers;\n\nexport const proReferredByLoansResolver = ({\n  userId,\n  calledByUserId,\n  status,\n}) => {\n  const mainOrganisation = UserService.getUserMainOrganisation(userId);\n  let mainOrganisationsUserIds = [];\n\n  if (mainOrganisation) {\n    const { _id: mainOrganisationId } = mainOrganisation;\n\n    const { users: mainOrganisationUsers = [] } = OrganisationService.fetchOne({\n      $filters: { _id: mainOrganisationId },\n      users: { _id: 1 },\n    });\n    mainOrganisationsUserIds = mainOrganisationUsers\n      .filter(({ _id }) => _id !== userId)\n      .filter(doesUserShareCustomers)\n      .map(({ _id }) => _id);\n  }\n\n  const users = UserService.fetch({\n    $filters: {\n      referredByUserLink: { $in: [userId, ...mainOrganisationsUserIds] },\n    },\n    loans: { ...proLoansFragment, $filters: status ? { status } : {} },\n  });\n\n  const loans = users.reduce(\n    (allLoans, { loans: userLoans = [] }) => [...allLoans, ...userLoans],\n    [],\n  );\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans;\n  } catch (error) {\n    return anonymizeReferredByLoans({ loans, userId: calledByUserId });\n  }\n};\n\nexport const proPromotionLoansResolver = ({\n  calledByUserId,\n  promotionId,\n  status,\n}) => {\n  const loans = LoanService.fetch({\n    $filters: { 'promotionLinks._id': promotionId, status },\n    ...proLoansFragment,\n  });\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans;\n  } catch (error) {\n    return anonymizePromotionLoans({ loans, userId: calledByUserId });\n  }\n};\n\nexport const proPropertyLoansResolver = ({\n  calledByUserId,\n  propertyId,\n  status,\n}) => {\n  const loans = LoanService.fetch({\n    $filters: { propertyIds: propertyId, status },\n    ...proLoansFragment,\n  });\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans.map(handleLoanSolvencySharing({ isAdmin: true }));\n  } catch (error) {\n    return anonymizePropertyLoans({\n      loans: loans.map(handleLoanSolvencySharing({ isAdmin: false })),\n      userId: calledByUserId,\n    });\n  }\n};\n\nconst shouldShowPromotionLoan = ({ userId }) => (loan) => {\n  const { promotions = [] } = loan;\n  const {\n    $metadata: { invitedBy },\n  } = promotions[0];\n  return invitedBy === userId;\n};\n\nconst getRelatedProPropertiesOfUser = ({ loan, userId }) => {\n  const { properties = [] } = loan;\n  return properties\n    .filter(property => property.category === PROPERTY_CATEGORY.PRO)\n    .filter(({ users = [] }) => users.some(({ _id }) => _id === userId))\n    .map(property => ({ ...property, collection: PROPERTIES_COLLECTION }));\n};\n\nconst promotionHasUser = userId => ({ users = [] }) =>\n  users.some(({ _id }) => _id === userId);\n\nconst getRelatedPromotionsOfUser = ({ loan, userId }) => {\n  const { promotions = [] } = loan;\n  return promotions\n    .filter(promotionHasUser(userId))\n    .map(promotion => ({ ...promotion, collection: PROMOTIONS_COLLECTION }));\n};\n\nconst organisationLoans = ({ organisationId, status }) =>\n  LoanService.fetch({\n    $filters: {\n      'userCache.referredByOrganisationLink': organisationId,\n      status,\n    },\n    ...proLoansFragment,\n    revenues: revenue(),\n    user: { organisationLink: 1 },\n  });\n\nexport const proLoansResolver = ({\n  userId,\n  calledByUserId,\n  promotionId,\n  propertyId,\n  fetchOrganisationLoans,\n  organisationId,\n  status,\n}) => {\n  let loans = [];\n\n  if (fetchOrganisationLoans) {\n    return organisationLoans({ organisationId, status });\n  }\n\n  if (promotionId) {\n    const promotionLoans = proPromotionLoansResolver({\n      calledByUserId,\n      promotionId,\n      status,\n    })\n      .filter(shouldShowPromotionLoan({ userId }))\n      .map(loan => ({\n        ...loan,\n        relatedTo: getRelatedPromotionsOfUser({ loan, userId }),\n      }));\n    loans = promotionLoans;\n  }\n\n  if (propertyId) {\n    const propertyLoans = proPropertyLoansResolver({\n      calledByUserId,\n      propertyId,\n      status,\n    }).map(loan => ({\n      ...loan,\n      relatedTo: getRelatedProPropertiesOfUser({ loan, userId }),\n    }));\n    loans = [...loans, ...propertyLoans];\n  }\n\n  const referredByLoans = proReferredByLoansResolver({\n    userId,\n    calledByUserId,\n    status,\n  }).map(loan => ({\n    ...loan,\n    relatedTo: [\n      ...getRelatedProPropertiesOfUser({ loan, userId }),\n      ...getRelatedPromotionsOfUser({ loan, userId }),\n    ],\n  }));\n  loans = [...loans, ...referredByLoans];\n\n  return uniqBy(loans, '_id');\n};\n\nexport const getLoanIds = ({ withReferredBy = false } = {}) => (params = {}) => {\n  const { promotionId, propertyId, userId, status } = params;\n  let loanIds = [];\n\n  if (withReferredBy) {\n    const { organisations = [] } = UserService.fetch({\n      $filters: { _id: userId },\n      organisations: { _id: 1 },\n    });\n\n    const organisationId = !!organisations.length && organisations[0]._id;\n\n    const users = UserService.fetch({\n      $filters: {\n        $or: [\n          { referredByUserLink: userId },\n          organisationId && { referredByOrganisationLink: organisationId },\n        ].filter(x => x),\n      },\n      loans: { _id: 1, $filters: status ? { status } : {} },\n    });\n\n    loanIds = users.reduce(\n      (allLoans, { loans: userLoans = [] }) => [\n        ...allLoans,\n        ...userLoans.map(({ _id }) => _id),\n      ],\n      [],\n    );\n  }\n\n  if (promotionId) {\n    const promotionLoanIds = LoanService.fetch({\n      $filters: { 'promotionLinks._id': promotionId, status },\n      _id: 1,\n    });\n    loanIds = [...loanIds, ...promotionLoanIds.map(({ _id }) => _id)];\n  }\n\n  if (propertyId) {\n    const propertyLoanIds = LoanService.fetch({\n      $filters: { propertyIds: propertyId, status },\n      _id: 1,\n    });\n    loanIds = [...loanIds, ...propertyLoanIds.map(({ _id }) => _id)];\n  }\n\n  return loanIds;\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/resolvers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/loans/server/resolvers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nmodule.export({\n  proReferredByLoansResolver: () => proReferredByLoansResolver,\n  proPromotionLoansResolver: () => proPromotionLoansResolver,\n  proPropertyLoansResolver: () => proPropertyLoansResolver,\n  proLoansResolver: () => proLoansResolver,\n  getLoanIds: () => getLoanIds\n});\nlet uniqBy;\nmodule.link(\"lodash/uniqBy\", {\n  default(v) {\n    uniqBy = v;\n  }\n\n}, 0);\nlet PROPERTIES_COLLECTION, PROPERTY_CATEGORY, RESIDENCE_TYPE, PROPERTY_SOLVENCY;\nmodule.link(\"../../properties/propertyConstants\", {\n  PROPERTIES_COLLECTION(v) {\n    PROPERTIES_COLLECTION = v;\n  },\n\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  },\n\n  RESIDENCE_TYPE(v) {\n    RESIDENCE_TYPE = v;\n  },\n\n  PROPERTY_SOLVENCY(v) {\n    PROPERTY_SOLVENCY = v;\n  }\n\n}, 1);\nlet PROMOTIONS_COLLECTION;\nmodule.link(\"../../promotions/promotionConstants\", {\n  PROMOTIONS_COLLECTION(v) {\n    PROMOTIONS_COLLECTION = v;\n  }\n\n}, 2);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 3);\nlet makePromotionLoanAnonymizer;\nmodule.link(\"../../promotions/server/promotionServerHelpers\", {\n  makeLoanAnonymizer(v) {\n    makePromotionLoanAnonymizer = v;\n  }\n\n}, 4);\nlet proLoans, revenue;\nmodule.link(\"../../fragments\", {\n  proLoans(v) {\n    proLoans = v;\n  },\n\n  revenue(v) {\n    revenue = v;\n  }\n\n}, 5);\nlet SecurityService;\nmodule.link(\"../../security\", {\n  default(v) {\n    SecurityService = v;\n  }\n\n}, 6);\nlet makeProPropertyLoanAnonymizer;\nmodule.link(\"../../properties/server/propertyServerHelpers\", {\n  makeProPropertyLoanAnonymizer(v) {\n    makeProPropertyLoanAnonymizer = v;\n  }\n\n}, 7);\nlet OrganisationService;\nmodule.link(\"../../organisations/server/OrganisationService\", {\n  default(v) {\n    OrganisationService = v;\n  }\n\n}, 8);\nlet LoanService;\nmodule.link(\"./LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 9);\nconst proLoansFragment = proLoans();\n\nconst isSolventForProProperty = ({\n  isAdmin,\n  property,\n  maxPropertyValue,\n  residenceType,\n  shareSolvency\n}) => {\n  if (!maxPropertyValue) {\n    return PROPERTY_SOLVENCY.UNDETERMINED;\n  }\n\n  if (!shareSolvency && !isAdmin) {\n    return PROPERTY_SOLVENCY.NOT_SHARED;\n  }\n\n  const {\n    main: {\n      max: {\n        propertyValue: mainMaxValue\n      }\n    },\n    second: {\n      max: {\n        propertyValue: secondMaxValue\n      }\n    }\n  } = maxPropertyValue;\n  const {\n    totalValue\n  } = property;\n\n  switch (residenceType) {\n    case RESIDENCE_TYPE.MAIN_RESIDENCE:\n      {\n        return totalValue <= mainMaxValue ? PROPERTY_SOLVENCY.SOLVENT : PROPERTY_SOLVENCY.INSOLVENT;\n      }\n\n    case RESIDENCE_TYPE.SECOND_RESIDENCE:\n      {\n        return totalValue <= secondMaxValue ? PROPERTY_SOLVENCY.SOLVENT : PROPERTY_SOLVENCY.INSOLVENT;\n      }\n\n    default:\n      return null;\n  }\n};\n\nconst handleLoanSolvencySharing = ({\n  isAdmin = false\n}) => loanObject => {\n  const {\n    maxPropertyValue,\n    shareSolvency\n  } = loanObject,\n        loan = (0, _objectWithoutProperties2.default)(loanObject, [\"maxPropertyValue\", \"shareSolvency\"]);\n  const propertiesWithSolvency = loan.properties.map(property => (0, _objectSpread2.default)({}, property, {\n    solvent: isSolventForProProperty({\n      isAdmin,\n      property,\n      maxPropertyValue,\n      residenceType: loan.residenceType,\n      shareSolvency\n    })\n  }));\n  return (0, _objectSpread2.default)({}, loan, {\n    properties: propertiesWithSolvency\n  });\n};\n\nconst anonymizePromotionLoans = ({\n  loans = [],\n  userId\n}) => loans.map(loan => {\n  const {\n    promotions\n  } = loan;\n  const promotionId = promotions[0]._id;\n  const promotionLoanAnonymizer = makePromotionLoanAnonymizer({\n    userId,\n    promotionId\n  });\n  return promotionLoanAnonymizer(loan);\n});\n\nconst anonymizePropertyLoans = ({\n  loans = [],\n  userId\n}) => loans.map(loan => {\n  const {\n    properties\n  } = loan;\n  const proPropertyIds = properties.filter(({\n    category\n  }) => category === PROPERTY_CATEGORY.PRO).map(({\n    _id\n  }) => _id);\n  return makeProPropertyLoanAnonymizer({\n    userId,\n    propertyIds: proPropertyIds\n  })(loan);\n});\n\nconst anonymizeReferredByLoans = ({\n  loans = [],\n  userId\n}) => [...loans];\n\nconst doesUserShareCustomers = ({\n  $metadata: {\n    shareCustomers\n  }\n}) => shareCustomers;\n\nconst proReferredByLoansResolver = ({\n  userId,\n  calledByUserId,\n  status\n}) => {\n  const mainOrganisation = UserService.getUserMainOrganisation(userId);\n  let mainOrganisationsUserIds = [];\n\n  if (mainOrganisation) {\n    const {\n      _id: mainOrganisationId\n    } = mainOrganisation;\n    const {\n      users: mainOrganisationUsers = []\n    } = OrganisationService.fetchOne({\n      $filters: {\n        _id: mainOrganisationId\n      },\n      users: {\n        _id: 1\n      }\n    });\n    mainOrganisationsUserIds = mainOrganisationUsers.filter(({\n      _id\n    }) => _id !== userId).filter(doesUserShareCustomers).map(({\n      _id\n    }) => _id);\n  }\n\n  const users = UserService.fetch({\n    $filters: {\n      referredByUserLink: {\n        $in: [userId, ...mainOrganisationsUserIds]\n      }\n    },\n    loans: (0, _objectSpread2.default)({}, proLoansFragment, {\n      $filters: status ? {\n        status\n      } : {}\n    })\n  });\n  const loans = users.reduce((allLoans, {\n    loans: userLoans = []\n  }) => [...allLoans, ...userLoans], []);\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans;\n  } catch (error) {\n    return anonymizeReferredByLoans({\n      loans,\n      userId: calledByUserId\n    });\n  }\n};\n\nconst proPromotionLoansResolver = ({\n  calledByUserId,\n  promotionId,\n  status\n}) => {\n  const loans = LoanService.fetch((0, _objectSpread2.default)({\n    $filters: {\n      'promotionLinks._id': promotionId,\n      status\n    }\n  }, proLoansFragment));\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans;\n  } catch (error) {\n    return anonymizePromotionLoans({\n      loans,\n      userId: calledByUserId\n    });\n  }\n};\n\nconst proPropertyLoansResolver = ({\n  calledByUserId,\n  propertyId,\n  status\n}) => {\n  const loans = LoanService.fetch((0, _objectSpread2.default)({\n    $filters: {\n      propertyIds: propertyId,\n      status\n    }\n  }, proLoansFragment));\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans.map(handleLoanSolvencySharing({\n      isAdmin: true\n    }));\n  } catch (error) {\n    return anonymizePropertyLoans({\n      loans: loans.map(handleLoanSolvencySharing({\n        isAdmin: false\n      })),\n      userId: calledByUserId\n    });\n  }\n};\n\nconst shouldShowPromotionLoan = ({\n  userId\n}) => loan => {\n  const {\n    promotions = []\n  } = loan;\n  const {\n    $metadata: {\n      invitedBy\n    }\n  } = promotions[0];\n  return invitedBy === userId;\n};\n\nconst getRelatedProPropertiesOfUser = ({\n  loan,\n  userId\n}) => {\n  const {\n    properties = []\n  } = loan;\n  return properties.filter(property => property.category === PROPERTY_CATEGORY.PRO).filter(({\n    users = []\n  }) => users.some(({\n    _id\n  }) => _id === userId)).map(property => (0, _objectSpread2.default)({}, property, {\n    collection: PROPERTIES_COLLECTION\n  }));\n};\n\nconst promotionHasUser = userId => ({\n  users = []\n}) => users.some(({\n  _id\n}) => _id === userId);\n\nconst getRelatedPromotionsOfUser = ({\n  loan,\n  userId\n}) => {\n  const {\n    promotions = []\n  } = loan;\n  return promotions.filter(promotionHasUser(userId)).map(promotion => (0, _objectSpread2.default)({}, promotion, {\n    collection: PROMOTIONS_COLLECTION\n  }));\n};\n\nconst organisationLoans = ({\n  organisationId,\n  status\n}) => LoanService.fetch((0, _objectSpread2.default)({\n  $filters: {\n    'userCache.referredByOrganisationLink': organisationId,\n    status\n  }\n}, proLoansFragment, {\n  revenues: revenue(),\n  user: {\n    organisationLink: 1\n  }\n}));\n\nconst proLoansResolver = ({\n  userId,\n  calledByUserId,\n  promotionId,\n  propertyId,\n  fetchOrganisationLoans,\n  organisationId,\n  status\n}) => {\n  let loans = [];\n\n  if (fetchOrganisationLoans) {\n    return organisationLoans({\n      organisationId,\n      status\n    });\n  }\n\n  if (promotionId) {\n    const promotionLoans = proPromotionLoansResolver({\n      calledByUserId,\n      promotionId,\n      status\n    }).filter(shouldShowPromotionLoan({\n      userId\n    })).map(loan => (0, _objectSpread2.default)({}, loan, {\n      relatedTo: getRelatedPromotionsOfUser({\n        loan,\n        userId\n      })\n    }));\n    loans = promotionLoans;\n  }\n\n  if (propertyId) {\n    const propertyLoans = proPropertyLoansResolver({\n      calledByUserId,\n      propertyId,\n      status\n    }).map(loan => (0, _objectSpread2.default)({}, loan, {\n      relatedTo: getRelatedProPropertiesOfUser({\n        loan,\n        userId\n      })\n    }));\n    loans = [...loans, ...propertyLoans];\n  }\n\n  const referredByLoans = proReferredByLoansResolver({\n    userId,\n    calledByUserId,\n    status\n  }).map(loan => (0, _objectSpread2.default)({}, loan, {\n    relatedTo: [...getRelatedProPropertiesOfUser({\n      loan,\n      userId\n    }), ...getRelatedPromotionsOfUser({\n      loan,\n      userId\n    })]\n  }));\n  loans = [...loans, ...referredByLoans];\n  return uniqBy(loans, '_id');\n};\n\nconst getLoanIds = ({\n  withReferredBy = false\n} = {}) => (params = {}) => {\n  const {\n    promotionId,\n    propertyId,\n    userId,\n    status\n  } = params;\n  let loanIds = [];\n\n  if (withReferredBy) {\n    const {\n      organisations = []\n    } = UserService.fetch({\n      $filters: {\n        _id: userId\n      },\n      organisations: {\n        _id: 1\n      }\n    });\n    const organisationId = !!organisations.length && organisations[0]._id;\n    const users = UserService.fetch({\n      $filters: {\n        $or: [{\n          referredByUserLink: userId\n        }, organisationId && {\n          referredByOrganisationLink: organisationId\n        }].filter(x => x)\n      },\n      loans: {\n        _id: 1,\n        $filters: status ? {\n          status\n        } : {}\n      }\n    });\n    loanIds = users.reduce((allLoans, {\n      loans: userLoans = []\n    }) => [...allLoans, ...userLoans.map(({\n      _id\n    }) => _id)], []);\n  }\n\n  if (promotionId) {\n    const promotionLoanIds = LoanService.fetch({\n      $filters: {\n        'promotionLinks._id': promotionId,\n        status\n      },\n      _id: 1\n    });\n    loanIds = [...loanIds, ...promotionLoanIds.map(({\n      _id\n    }) => _id)];\n  }\n\n  if (propertyId) {\n    const propertyLoanIds = LoanService.fetch({\n      $filters: {\n        propertyIds: propertyId,\n        status\n      },\n      _id: 1\n    });\n    loanIds = [...loanIds, ...propertyLoanIds.map(({\n      _id\n    }) => _id)];\n  }\n\n  return loanIds;\n};","map":{"version":3,"sources":["imports/core/api/loans/server/resolvers.js"],"names":["proLoansFragment","proLoans","isSolventForProProperty","shareSolvency","PROPERTY_SOLVENCY","main","max","propertyValue","mainMaxValue","second","secondMaxValue","totalValue","RESIDENCE_TYPE","handleLoanSolvencySharing","isAdmin","loanObject","loan","propertiesWithSolvency","property","solvent","residenceType","properties","anonymizePromotionLoans","loans","userId","promotions","promotionId","promotionLoanAnonymizer","makePromotionLoanAnonymizer","anonymizePropertyLoans","proPropertyIds","category","PROPERTY_CATEGORY","_id","propertyIds","anonymizeReferredByLoans","doesUserShareCustomers","$metadata","shareCustomers","proReferredByLoansResolver","status","mainOrganisation","UserService","mainOrganisationsUserIds","mainOrganisationId","users","mainOrganisationUsers","$filters","referredByUserLink","$in","userLoans","SecurityService","calledByUserId","proPromotionLoansResolver","proPropertyLoansResolver","shouldShowPromotionLoan","invitedBy","getRelatedProPropertiesOfUser","collection","PROPERTIES_COLLECTION","promotionHasUser","getRelatedPromotionsOfUser","promotion","PROMOTIONS_COLLECTION","organisationLoans","revenues","revenue","user","organisationLink","proLoansResolver","promotionLoans","relatedTo","propertyLoans","referredByLoans","uniqBy","getLoanIds","withReferredBy","params","loanIds","organisations","organisationId","$or","referredByOrganisationLink","x","promotionLoanIds","propertyLoanIds"],"mappings":"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","sourcesContent":["// @flow\nimport uniqBy from 'lodash/uniqBy';\n\nimport {\n  PROPERTIES_COLLECTION,\n  PROPERTY_CATEGORY,\n  RESIDENCE_TYPE,\n  PROPERTY_SOLVENCY,\n} from '../../properties/propertyConstants';\nimport { PROMOTIONS_COLLECTION } from '../../promotions/promotionConstants';\nimport UserService from '../../users/server/UserService';\nimport { makeLoanAnonymizer as makePromotionLoanAnonymizer } from '../../promotions/server/promotionServerHelpers';\nimport { proLoans, revenue } from '../../fragments';\nimport SecurityService from '../../security';\nimport { makeProPropertyLoanAnonymizer } from '../../properties/server/propertyServerHelpers';\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport LoanService from './LoanService';\n\nconst proLoansFragment = proLoans();\n\nconst isSolventForProProperty = ({\n  isAdmin,\n  property,\n  maxPropertyValue,\n  residenceType,\n  shareSolvency,\n}) => {\n  if (!maxPropertyValue) {\n    return PROPERTY_SOLVENCY.UNDETERMINED;\n  }\n\n  if (!shareSolvency && !isAdmin) {\n    return PROPERTY_SOLVENCY.NOT_SHARED;\n  }\n\n  const {\n    main: {\n      max: { propertyValue: mainMaxValue },\n    },\n    second: {\n      max: { propertyValue: secondMaxValue },\n    },\n  } = maxPropertyValue;\n  const { totalValue } = property;\n\n  switch (residenceType) {\n  case RESIDENCE_TYPE.MAIN_RESIDENCE: {\n    return totalValue <= mainMaxValue\n      ? PROPERTY_SOLVENCY.SOLVENT\n      : PROPERTY_SOLVENCY.INSOLVENT;\n  }\n  case RESIDENCE_TYPE.SECOND_RESIDENCE: {\n    return totalValue <= secondMaxValue\n      ? PROPERTY_SOLVENCY.SOLVENT\n      : PROPERTY_SOLVENCY.INSOLVENT;\n  }\n  default:\n    return null;\n  }\n};\n\nconst handleLoanSolvencySharing = ({ isAdmin = false }) => (loanObject) => {\n  const { maxPropertyValue, shareSolvency, ...loan } = loanObject;\n\n  const propertiesWithSolvency = loan.properties.map(property => ({\n    ...property,\n    solvent: isSolventForProProperty({\n      isAdmin,\n      property,\n      maxPropertyValue,\n      residenceType: loan.residenceType,\n      shareSolvency,\n    }),\n  }));\n\n  return {\n    ...loan,\n    properties: propertiesWithSolvency,\n  };\n};\n\nconst anonymizePromotionLoans = ({ loans = [], userId }) =>\n  loans.map((loan) => {\n    const { promotions } = loan;\n    const promotionId = promotions[0]._id;\n\n    const promotionLoanAnonymizer = makePromotionLoanAnonymizer({\n      userId,\n      promotionId,\n    });\n\n    return promotionLoanAnonymizer(loan);\n  });\n\nconst anonymizePropertyLoans = ({ loans = [], userId }) =>\n  loans.map((loan) => {\n    const { properties } = loan;\n    const proPropertyIds = properties\n      .filter(({ category }) => category === PROPERTY_CATEGORY.PRO)\n      .map(({ _id }) => _id);\n    return makeProPropertyLoanAnonymizer({\n      userId,\n      propertyIds: proPropertyIds,\n    })(loan);\n  });\n\nconst anonymizeReferredByLoans = ({ loans = [], userId }) => [\n  ...loans,\n  // Don't anonymize referred loans\n  // ...anonymizePromotionLoans({\n  //   loans: loans.filter(({ hasPromotion }) => hasPromotion),\n  //   userId,\n  // }),\n\n  // ...anonymizePropertyLoans({\n  //   loans: loans.filter(({ hasProProperty }) => hasProProperty),\n  //   userId,\n  // }),\n  // ...loans.filter(({ hasPromotion, hasProProperty }) => !hasPromotion && !hasProProperty),\n];\n\nconst doesUserShareCustomers = ({ $metadata: { shareCustomers } }) =>\n  shareCustomers;\n\nexport const proReferredByLoansResolver = ({\n  userId,\n  calledByUserId,\n  status,\n}) => {\n  const mainOrganisation = UserService.getUserMainOrganisation(userId);\n  let mainOrganisationsUserIds = [];\n\n  if (mainOrganisation) {\n    const { _id: mainOrganisationId } = mainOrganisation;\n\n    const { users: mainOrganisationUsers = [] } = OrganisationService.fetchOne({\n      $filters: { _id: mainOrganisationId },\n      users: { _id: 1 },\n    });\n    mainOrganisationsUserIds = mainOrganisationUsers\n      .filter(({ _id }) => _id !== userId)\n      .filter(doesUserShareCustomers)\n      .map(({ _id }) => _id);\n  }\n\n  const users = UserService.fetch({\n    $filters: {\n      referredByUserLink: { $in: [userId, ...mainOrganisationsUserIds] },\n    },\n    loans: { ...proLoansFragment, $filters: status ? { status } : {} },\n  });\n\n  const loans = users.reduce(\n    (allLoans, { loans: userLoans = [] }) => [...allLoans, ...userLoans],\n    [],\n  );\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans;\n  } catch (error) {\n    return anonymizeReferredByLoans({ loans, userId: calledByUserId });\n  }\n};\n\nexport const proPromotionLoansResolver = ({\n  calledByUserId,\n  promotionId,\n  status,\n}) => {\n  const loans = LoanService.fetch({\n    $filters: { 'promotionLinks._id': promotionId, status },\n    ...proLoansFragment,\n  });\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans;\n  } catch (error) {\n    return anonymizePromotionLoans({ loans, userId: calledByUserId });\n  }\n};\n\nexport const proPropertyLoansResolver = ({\n  calledByUserId,\n  propertyId,\n  status,\n}) => {\n  const loans = LoanService.fetch({\n    $filters: { propertyIds: propertyId, status },\n    ...proLoansFragment,\n  });\n\n  try {\n    SecurityService.checkUserIsAdmin(calledByUserId);\n    return loans.map(handleLoanSolvencySharing({ isAdmin: true }));\n  } catch (error) {\n    return anonymizePropertyLoans({\n      loans: loans.map(handleLoanSolvencySharing({ isAdmin: false })),\n      userId: calledByUserId,\n    });\n  }\n};\n\nconst shouldShowPromotionLoan = ({ userId }) => (loan) => {\n  const { promotions = [] } = loan;\n  const {\n    $metadata: { invitedBy },\n  } = promotions[0];\n  return invitedBy === userId;\n};\n\nconst getRelatedProPropertiesOfUser = ({ loan, userId }) => {\n  const { properties = [] } = loan;\n  return properties\n    .filter(property => property.category === PROPERTY_CATEGORY.PRO)\n    .filter(({ users = [] }) => users.some(({ _id }) => _id === userId))\n    .map(property => ({ ...property, collection: PROPERTIES_COLLECTION }));\n};\n\nconst promotionHasUser = userId => ({ users = [] }) =>\n  users.some(({ _id }) => _id === userId);\n\nconst getRelatedPromotionsOfUser = ({ loan, userId }) => {\n  const { promotions = [] } = loan;\n  return promotions\n    .filter(promotionHasUser(userId))\n    .map(promotion => ({ ...promotion, collection: PROMOTIONS_COLLECTION }));\n};\n\nconst organisationLoans = ({ organisationId, status }) =>\n  LoanService.fetch({\n    $filters: {\n      'userCache.referredByOrganisationLink': organisationId,\n      status,\n    },\n    ...proLoansFragment,\n    revenues: revenue(),\n    user: { organisationLink: 1 },\n  });\n\nexport const proLoansResolver = ({\n  userId,\n  calledByUserId,\n  promotionId,\n  propertyId,\n  fetchOrganisationLoans,\n  organisationId,\n  status,\n}) => {\n  let loans = [];\n\n  if (fetchOrganisationLoans) {\n    return organisationLoans({ organisationId, status });\n  }\n\n  if (promotionId) {\n    const promotionLoans = proPromotionLoansResolver({\n      calledByUserId,\n      promotionId,\n      status,\n    })\n      .filter(shouldShowPromotionLoan({ userId }))\n      .map(loan => ({\n        ...loan,\n        relatedTo: getRelatedPromotionsOfUser({ loan, userId }),\n      }));\n    loans = promotionLoans;\n  }\n\n  if (propertyId) {\n    const propertyLoans = proPropertyLoansResolver({\n      calledByUserId,\n      propertyId,\n      status,\n    }).map(loan => ({\n      ...loan,\n      relatedTo: getRelatedProPropertiesOfUser({ loan, userId }),\n    }));\n    loans = [...loans, ...propertyLoans];\n  }\n\n  const referredByLoans = proReferredByLoansResolver({\n    userId,\n    calledByUserId,\n    status,\n  }).map(loan => ({\n    ...loan,\n    relatedTo: [\n      ...getRelatedProPropertiesOfUser({ loan, userId }),\n      ...getRelatedPromotionsOfUser({ loan, userId }),\n    ],\n  }));\n  loans = [...loans, ...referredByLoans];\n\n  return uniqBy(loans, '_id');\n};\n\nexport const getLoanIds = ({ withReferredBy = false } = {}) => (params = {}) => {\n  const { promotionId, propertyId, userId, status } = params;\n  let loanIds = [];\n\n  if (withReferredBy) {\n    const { organisations = [] } = UserService.fetch({\n      $filters: { _id: userId },\n      organisations: { _id: 1 },\n    });\n\n    const organisationId = !!organisations.length && organisations[0]._id;\n\n    const users = UserService.fetch({\n      $filters: {\n        $or: [\n          { referredByUserLink: userId },\n          organisationId && { referredByOrganisationLink: organisationId },\n        ].filter(x => x),\n      },\n      loans: { _id: 1, $filters: status ? { status } : {} },\n    });\n\n    loanIds = users.reduce(\n      (allLoans, { loans: userLoans = [] }) => [\n        ...allLoans,\n        ...userLoans.map(({ _id }) => _id),\n      ],\n      [],\n    );\n  }\n\n  if (promotionId) {\n    const promotionLoanIds = LoanService.fetch({\n      $filters: { 'promotionLinks._id': promotionId, status },\n      _id: 1,\n    });\n    loanIds = [...loanIds, ...promotionLoanIds.map(({ _id }) => _id)];\n  }\n\n  if (propertyId) {\n    const propertyLoanIds = LoanService.fetch({\n      $filters: { propertyIds: propertyId, status },\n      _id: 1,\n    });\n    loanIds = [...loanIds, ...propertyLoanIds.map(({ _id }) => _id)];\n  }\n\n  return loanIds;\n};\n"]},"sourceType":"script","hash":"d6c9e6283c02ee6dba5d734bd1c3a80bf79916a1"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/slack/server/SlackService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/slack/server/SlackService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/slack/server/SlackService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/slack/server/SlackService.js"],"names":["Meteor","isArray","pick","fetch","colors","getAPIUser","UserService","ROLES","fullLoan","Calculator","getClientMicroservice","percentFormatters","LOGO_URL","shouldNotLog","isDevelopment","isAppTest","isTest","ERRORS_TO_IGNORE","SlackService","channel","username","text","rest","body","formatText","icon_url","mrkdwn","Promise","resolve","method","headers","JSON","stringify","catch","err","join","attachments","send","map","formatAttachment","mrkdwn_in","error","additionalData","userId","url","connection","console","log","includes","name","message","reason","user","get","title","pretext","color","footer","ts","Date","stack","toString","primary","length","push","data","index","sendAttachments","settings","public","environment","getNotificationOrigin","admin","email","split","currentUser","link","assignee","notifyAlways","isAdmin","roles","ADMIN","DEV","assignedEmployee","getChannelForAdmin","slackPayload","title_link","isStaging","isDevEnvironment","APIUser","undefined","mainOrg","getUserMainOrganisation","_id","fileName","docLabel","loanId","isUser","USER","loan","clone","fetchOne","loanNameEnd","subdomains","infoProgress","personalInfoPercent","propertyProgress","propertyPercent","documentsProgress","filesProgress","percent","progressParts","format","hasPromotion","promotions","pop","notifyAssignee","serverSide","isServer"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport isArray from 'lodash/isArray';\nimport pick from 'lodash/pick';\nimport fetch from 'node-fetch';\n\nimport colors from 'core/config/colors';\nimport { getAPIUser } from 'core/api/RESTAPI/server/helpers';\nimport UserService from '../../users/server/UserService';\nimport { ROLES } from '../../constants';\nimport { fullLoan } from '../../loans/queries';\nimport Calculator from '../../../utils/Calculator';\nimport { getClientMicroservice } from '../../../utils/server/getClientUrl';\nimport { percentFormatters } from '../../../utils/formHelpers';\n\nconst LOGO_URL = 'http://d2gb1cl8lbi69k.cloudfront.net/E-Potek_icon_signature.jpg';\nconst shouldNotLog = Meteor.isDevelopment || Meteor.isAppTest || Meteor.isTest;\nconst ERRORS_TO_IGNORE = ['INVALID_STATE_ERR'];\n\nexport class SlackService {\n  send = ({\n    channel = '#clients_general',\n    username = 'e-Potek Bot',\n    text,\n    ...rest\n  }) => {\n    const body = {\n      channel,\n      username,\n      text: this.formatText(text),\n      icon_url: LOGO_URL,\n      mrkdwn: true,\n      ...rest,\n    };\n\n    if (shouldNotLog) {\n      return Promise.resolve(body);\n    }\n\n    return fetch(\n      'https://hooks.slack.com/services/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',\n      {\n        method: 'POST',\n        headers: {},\n        body: JSON.stringify(body),\n      },\n    ).catch((err) => {\n      // Somehow, this error is catched somewhere if we don't do this\n      throw err;\n    });\n  };\n\n  formatText = text => (isArray(text) ? text.join('\\n') : text);\n\n  sendAttachments = ({ attachments, ...rest }) =>\n    this.send({\n      attachments: attachments.map(this.formatAttachment),\n      ...rest,\n    });\n\n  formatAttachment = ({ text, ...rest }) => ({\n    text: this.formatText(text),\n    mrkdwn_in: ['text', 'pretext'],\n    ...rest,\n  });\n\n  sendError = ({ error, additionalData = [], userId, url, connection }) => {\n    if (Meteor.isDevelopment && !Meteor.isTest) {\n      console.log('error', error);\n      console.log('additionalData', additionalData);\n      console.log('userId', userId);\n      console.log('url', url);\n    }\n\n    if (\n      (error && ERRORS_TO_IGNORE.includes(error.name))\n      || ERRORS_TO_IGNORE.includes(error.message || error.reason)\n    ) {\n      return false;\n    }\n\n    let user;\n\n    try {\n      // Can't use Meteor.user() outside of client or server-methods-body\n      user = Meteor.user();\n      // Can't access window on server\n    } catch (err) {\n      user = null;\n    }\n\n    if (!user && userId) {\n      user = UserService.get(userId);\n    }\n\n    const attachments = [\n      {\n        title: error && error.name,\n        pretext: `Une erreur est arrivée sur *e-Potek ${getClientMicroservice()}*`,\n        text: error && (error.message || error.reason),\n        color: colors.error,\n        footer: 'c la merde',\n        ts: new Date() / 1000,\n      },\n      {\n        title: 'Stack',\n        text: error && `\\`\\`\\`${error.stack && error.stack.toString()}\\`\\`\\``,\n        color: colors.error,\n      },\n      {\n        title: 'User',\n        text: `\\`\\`\\`${JSON.stringify(user, null, 2)}\\`\\`\\``,\n        color: colors.primary,\n      },\n      {\n        title: 'URL',\n        text: url,\n        color: colors.primary,\n      },\n    ];\n\n    if (additionalData.length > 0) {\n      attachments.push(...additionalData.map((data, index) => ({\n        title: `Additional data ${index + 1}`,\n        text: JSON.stringify(data),\n      })));\n    }\n\n    if (connection) {\n      attachments.push({\n        title: 'Connection',\n        text: `\\`\\`\\`${JSON.stringify(\n          pick(connection, ['clientAdress', 'httpHeaders']),\n          null,\n          2,\n        )}\\`\\`\\``,\n      });\n    }\n\n    return this.sendAttachments({\n      channel: `errors-${Meteor.settings.public.environment}`,\n      username: this.getNotificationOrigin(user),\n      attachments,\n    });\n  };\n\n  getChannelForAdmin = admin =>\n    (admin ? `#clients_${admin.email.split('@')[0]}` : '#clients_general');\n\n  notifyAssignee = ({\n    currentUser,\n    message,\n    title,\n    link,\n    assignee,\n    notifyAlways,\n  }) => {\n    const isAdmin = currentUser\n      && (currentUser.roles.includes(ROLES.ADMIN)\n        || currentUser.roles.includes(ROLES.DEV));\n\n    if (!notifyAlways && isAdmin) {\n      return false;\n    }\n\n    const admin = assignee || (currentUser && currentUser.assignedEmployee);\n    const channel = this.getChannelForAdmin(admin);\n\n    const slackPayload = {\n      channel,\n      attachments: [{ title, title_link: link, text: message }],\n      username: this.getNotificationOrigin(currentUser),\n    };\n\n    if (\n      (Meteor.isStaging || Meteor.isDevEnvironment || Meteor.isDevelopment)\n      && !Meteor.isTest\n    ) {\n      console.log('Slack dev/staging notification');\n      console.log('Payload:', slackPayload);\n      return slackPayload;\n    }\n\n    return this.sendAttachments(slackPayload);\n  };\n\n  getNotificationOrigin = (currentUser) => {\n    const APIUser = getAPIUser();\n    const username = currentUser ? currentUser.name : undefined;\n\n    if (APIUser) {\n      const mainOrg = UserService.getUserMainOrganisation(APIUser._id);\n      return [username, `(API ${mainOrg && mainOrg.name})`].join(' ');\n    }\n\n    return username;\n  };\n\n  notifyOfUpload = ({ currentUser, fileName, docLabel, loanId }) => {\n    const isUser = currentUser && currentUser.roles.includes(ROLES.USER);\n\n    if (!isUser) {\n      return false;\n    }\n\n    const loan = loanId && fullLoan.clone({ _id: loanId }).fetchOne();\n    const loanNameEnd = loan ? ` pour ${loan.name}.` : '.';\n    const title = `Upload: ${fileName} dans ${docLabel}${loanNameEnd}`;\n    let link = `${Meteor.settings.public.subdomains.admin}/users/${currentUser._id}`;\n    let message = '';\n\n    if (loan) {\n      const infoProgress = Calculator.personalInfoPercent({ loan });\n      const propertyProgress = Calculator.propertyPercent({ loan });\n      const documentsProgress = Calculator.filesProgress({\n        loan,\n      }).percent;\n\n      const progressParts = [\n        `Emprunteurs \\`${percentFormatters.format(infoProgress)}%\\``,\n        `Documents: \\`${percentFormatters.format(documentsProgress)}%\\``,\n        `Bien immo: \\`${percentFormatters.format(propertyProgress)}%\\``,\n      ];\n\n      if (loan.hasPromotion) {\n        message = `_Promotion: \\`${loan.promotions[0].name}\\`_ `;\n        progressParts.pop(); // Remove property progress in case of a promotion\n      }\n\n      message += `*Progrès:* ${progressParts.join(', ')}`;\n      link = `${Meteor.settings.public.subdomains.admin}/loans/${loan._id}`;\n    }\n\n    return this.notifyAssignee({ currentUser, message, title, link });\n  };\n}\n\nexport default new SlackService({ serverSide: Meteor.isServer });\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/slack/server/SlackService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/slack/server/SlackService.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nmodule.export({\n  SlackService: () => SlackService\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet isArray;\nmodule.link(\"lodash/isArray\", {\n  default(v) {\n    isArray = v;\n  }\n\n}, 1);\nlet pick;\nmodule.link(\"lodash/pick\", {\n  default(v) {\n    pick = v;\n  }\n\n}, 2);\nlet fetch;\nmodule.link(\"node-fetch\", {\n  default(v) {\n    fetch = v;\n  }\n\n}, 3);\nlet colors;\nmodule.link(\"../../../config/colors\", {\n  default(v) {\n    colors = v;\n  }\n\n}, 4);\nlet getAPIUser;\nmodule.link(\"../../RESTAPI/server/helpers\", {\n  getAPIUser(v) {\n    getAPIUser = v;\n  }\n\n}, 5);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 6);\nlet ROLES;\nmodule.link(\"../../constants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 7);\nlet fullLoan;\nmodule.link(\"../../loans/queries\", {\n  fullLoan(v) {\n    fullLoan = v;\n  }\n\n}, 8);\nlet Calculator;\nmodule.link(\"../../../utils/Calculator\", {\n  default(v) {\n    Calculator = v;\n  }\n\n}, 9);\nlet getClientMicroservice;\nmodule.link(\"../../../utils/server/getClientUrl\", {\n  getClientMicroservice(v) {\n    getClientMicroservice = v;\n  }\n\n}, 10);\nlet percentFormatters;\nmodule.link(\"../../../utils/formHelpers\", {\n  percentFormatters(v) {\n    percentFormatters = v;\n  }\n\n}, 11);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst LOGO_URL = 'http://d2gb1cl8lbi69k.cloudfront.net/E-Potek_icon_signature.jpg';\nconst shouldNotLog = Meteor.isDevelopment || Meteor.isAppTest || Meteor.isTest;\nconst ERRORS_TO_IGNORE = ['INVALID_STATE_ERR'];\n\nclass SlackService {\n  constructor() {\n    _defineProperty(this, \"send\", (_ref) => {\n      let {\n        channel = '#clients_general',\n        username = 'e-Potek Bot',\n        text\n      } = _ref,\n          rest = (0, _objectWithoutProperties2.default)(_ref, [\"channel\", \"username\", \"text\"]);\n      const body = (0, _objectSpread2.default)({\n        channel,\n        username,\n        text: this.formatText(text),\n        icon_url: LOGO_URL,\n        mrkdwn: true\n      }, rest);\n\n      if (shouldNotLog) {\n        return Promise.resolve(body);\n      }\n\n      return fetch('https://hooks.slack.com/services/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', {\n        method: 'POST',\n        headers: {},\n        body: JSON.stringify(body)\n      }).catch(err => {\n        // Somehow, this error is catched somewhere if we don't do this\n        throw err;\n      });\n    });\n\n    _defineProperty(this, \"formatText\", text => isArray(text) ? text.join('\\n') : text);\n\n    _defineProperty(this, \"sendAttachments\", (_ref2) => {\n      let {\n        attachments\n      } = _ref2,\n          rest = (0, _objectWithoutProperties2.default)(_ref2, [\"attachments\"]);\n      return this.send((0, _objectSpread2.default)({\n        attachments: attachments.map(this.formatAttachment)\n      }, rest));\n    });\n\n    _defineProperty(this, \"formatAttachment\", (_ref3) => {\n      let {\n        text\n      } = _ref3,\n          rest = (0, _objectWithoutProperties2.default)(_ref3, [\"text\"]);\n      return (0, _objectSpread2.default)({\n        text: this.formatText(text),\n        mrkdwn_in: ['text', 'pretext']\n      }, rest);\n    });\n\n    _defineProperty(this, \"sendError\", ({\n      error,\n      additionalData = [],\n      userId,\n      url,\n      connection\n    }) => {\n      if (Meteor.isDevelopment && !Meteor.isTest) {\n        console.log('error', error);\n        console.log('additionalData', additionalData);\n        console.log('userId', userId);\n        console.log('url', url);\n      }\n\n      if (error && ERRORS_TO_IGNORE.includes(error.name) || ERRORS_TO_IGNORE.includes(error.message || error.reason)) {\n        return false;\n      }\n\n      let user;\n\n      try {\n        // Can't use Meteor.user() outside of client or server-methods-body\n        user = Meteor.user(); // Can't access window on server\n      } catch (err) {\n        user = null;\n      }\n\n      if (!user && userId) {\n        user = UserService.get(userId);\n      }\n\n      const attachments = [{\n        title: error && error.name,\n        pretext: `Une erreur est arrivée sur *e-Potek ${getClientMicroservice()}*`,\n        text: error && (error.message || error.reason),\n        color: colors.error,\n        footer: 'c la merde',\n        ts: new Date() / 1000\n      }, {\n        title: 'Stack',\n        text: error && `\\`\\`\\`${error.stack && error.stack.toString()}\\`\\`\\``,\n        color: colors.error\n      }, {\n        title: 'User',\n        text: `\\`\\`\\`${JSON.stringify(user, null, 2)}\\`\\`\\``,\n        color: colors.primary\n      }, {\n        title: 'URL',\n        text: url,\n        color: colors.primary\n      }];\n\n      if (additionalData.length > 0) {\n        attachments.push(...additionalData.map((data, index) => ({\n          title: `Additional data ${index + 1}`,\n          text: JSON.stringify(data)\n        })));\n      }\n\n      if (connection) {\n        attachments.push({\n          title: 'Connection',\n          text: `\\`\\`\\`${JSON.stringify(pick(connection, ['clientAdress', 'httpHeaders']), null, 2)}\\`\\`\\``\n        });\n      }\n\n      return this.sendAttachments({\n        channel: `errors-${Meteor.settings.public.environment}`,\n        username: this.getNotificationOrigin(user),\n        attachments\n      });\n    });\n\n    _defineProperty(this, \"getChannelForAdmin\", admin => admin ? `#clients_${admin.email.split('@')[0]}` : '#clients_general');\n\n    _defineProperty(this, \"notifyAssignee\", ({\n      currentUser,\n      message,\n      title,\n      link,\n      assignee,\n      notifyAlways\n    }) => {\n      const isAdmin = currentUser && (currentUser.roles.includes(ROLES.ADMIN) || currentUser.roles.includes(ROLES.DEV));\n\n      if (!notifyAlways && isAdmin) {\n        return false;\n      }\n\n      const admin = assignee || currentUser && currentUser.assignedEmployee;\n      const channel = this.getChannelForAdmin(admin);\n      const slackPayload = {\n        channel,\n        attachments: [{\n          title,\n          title_link: link,\n          text: message\n        }],\n        username: this.getNotificationOrigin(currentUser)\n      };\n\n      if ((Meteor.isStaging || Meteor.isDevEnvironment || Meteor.isDevelopment) && !Meteor.isTest) {\n        console.log('Slack dev/staging notification');\n        console.log('Payload:', slackPayload);\n        return slackPayload;\n      }\n\n      return this.sendAttachments(slackPayload);\n    });\n\n    _defineProperty(this, \"getNotificationOrigin\", currentUser => {\n      const APIUser = getAPIUser();\n      const username = currentUser ? currentUser.name : undefined;\n\n      if (APIUser) {\n        const mainOrg = UserService.getUserMainOrganisation(APIUser._id);\n        return [username, `(API ${mainOrg && mainOrg.name})`].join(' ');\n      }\n\n      return username;\n    });\n\n    _defineProperty(this, \"notifyOfUpload\", ({\n      currentUser,\n      fileName,\n      docLabel,\n      loanId\n    }) => {\n      const isUser = currentUser && currentUser.roles.includes(ROLES.USER);\n\n      if (!isUser) {\n        return false;\n      }\n\n      const loan = loanId && fullLoan.clone({\n        _id: loanId\n      }).fetchOne();\n      const loanNameEnd = loan ? ` pour ${loan.name}.` : '.';\n      const title = `Upload: ${fileName} dans ${docLabel}${loanNameEnd}`;\n      let link = `${Meteor.settings.public.subdomains.admin}/users/${currentUser._id}`;\n      let message = '';\n\n      if (loan) {\n        const infoProgress = Calculator.personalInfoPercent({\n          loan\n        });\n        const propertyProgress = Calculator.propertyPercent({\n          loan\n        });\n        const documentsProgress = Calculator.filesProgress({\n          loan\n        }).percent;\n        const progressParts = [`Emprunteurs \\`${percentFormatters.format(infoProgress)}%\\``, `Documents: \\`${percentFormatters.format(documentsProgress)}%\\``, `Bien immo: \\`${percentFormatters.format(propertyProgress)}%\\``];\n\n        if (loan.hasPromotion) {\n          message = `_Promotion: \\`${loan.promotions[0].name}\\`_ `;\n          progressParts.pop(); // Remove property progress in case of a promotion\n        }\n\n        message += `*Progrès:* ${progressParts.join(', ')}`;\n        link = `${Meteor.settings.public.subdomains.admin}/loans/${loan._id}`;\n      }\n\n      return this.notifyAssignee({\n        currentUser,\n        message,\n        title,\n        link\n      });\n    });\n  }\n\n}\n\nmodule.exportDefault(new SlackService({\n  serverSide: Meteor.isServer\n}));","map":{"version":3,"sources":["imports/core/api/slack/server/SlackService.js"],"names":["LOGO_URL","shouldNotLog","Meteor","ERRORS_TO_IGNORE","channel","username","rest","body","text","icon_url","mrkdwn","Promise","method","headers","JSON","err","isArray","attachments","mrkdwn_in","additionalData","connection","console","error","user","UserService","title","pretext","getClientMicroservice","color","colors","footer","ts","primary","index","pick","environment","admin","notifyAlways","isAdmin","currentUser","ROLES","assignee","slackPayload","title_link","message","APIUser","getAPIUser","mainOrg","name","loanId","isUser","loan","_id","loanNameEnd","fileName","docLabel","link","infoProgress","propertyProgress","documentsProgress","progressParts","percentFormatters","serverSide","isServer"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport isArray from 'lodash/isArray';\nimport pick from 'lodash/pick';\nimport fetch from 'node-fetch';\n\nimport colors from 'core/config/colors';\nimport { getAPIUser } from 'core/api/RESTAPI/server/helpers';\nimport UserService from '../../users/server/UserService';\nimport { ROLES } from '../../constants';\nimport { fullLoan } from '../../loans/queries';\nimport Calculator from '../../../utils/Calculator';\nimport { getClientMicroservice } from '../../../utils/server/getClientUrl';\nimport { percentFormatters } from '../../../utils/formHelpers';\n\nconst LOGO_URL = 'http://d2gb1cl8lbi69k.cloudfront.net/E-Potek_icon_signature.jpg';\nconst shouldNotLog = Meteor.isDevelopment || Meteor.isAppTest || Meteor.isTest;\nconst ERRORS_TO_IGNORE = ['INVALID_STATE_ERR'];\n\nexport class SlackService {\n  send = ({\n    channel = '#clients_general',\n    username = 'e-Potek Bot',\n    text,\n    ...rest\n  }) => {\n    const body = {\n      channel,\n      username,\n      text: this.formatText(text),\n      icon_url: LOGO_URL,\n      mrkdwn: true,\n      ...rest,\n    };\n\n    if (shouldNotLog) {\n      return Promise.resolve(body);\n    }\n\n    return fetch(\n      'https://hooks.slack.com/services/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',\n      {\n        method: 'POST',\n        headers: {},\n        body: JSON.stringify(body),\n      },\n    ).catch((err) => {\n      // Somehow, this error is catched somewhere if we don't do this\n      throw err;\n    });\n  };\n\n  formatText = text => (isArray(text) ? text.join('\\n') : text);\n\n  sendAttachments = ({ attachments, ...rest }) =>\n    this.send({\n      attachments: attachments.map(this.formatAttachment),\n      ...rest,\n    });\n\n  formatAttachment = ({ text, ...rest }) => ({\n    text: this.formatText(text),\n    mrkdwn_in: ['text', 'pretext'],\n    ...rest,\n  });\n\n  sendError = ({ error, additionalData = [], userId, url, connection }) => {\n    if (Meteor.isDevelopment && !Meteor.isTest) {\n      console.log('error', error);\n      console.log('additionalData', additionalData);\n      console.log('userId', userId);\n      console.log('url', url);\n    }\n\n    if (\n      (error && ERRORS_TO_IGNORE.includes(error.name))\n      || ERRORS_TO_IGNORE.includes(error.message || error.reason)\n    ) {\n      return false;\n    }\n\n    let user;\n\n    try {\n      // Can't use Meteor.user() outside of client or server-methods-body\n      user = Meteor.user();\n      // Can't access window on server\n    } catch (err) {\n      user = null;\n    }\n\n    if (!user && userId) {\n      user = UserService.get(userId);\n    }\n\n    const attachments = [\n      {\n        title: error && error.name,\n        pretext: `Une erreur est arrivée sur *e-Potek ${getClientMicroservice()}*`,\n        text: error && (error.message || error.reason),\n        color: colors.error,\n        footer: 'c la merde',\n        ts: new Date() / 1000,\n      },\n      {\n        title: 'Stack',\n        text: error && `\\`\\`\\`${error.stack && error.stack.toString()}\\`\\`\\``,\n        color: colors.error,\n      },\n      {\n        title: 'User',\n        text: `\\`\\`\\`${JSON.stringify(user, null, 2)}\\`\\`\\``,\n        color: colors.primary,\n      },\n      {\n        title: 'URL',\n        text: url,\n        color: colors.primary,\n      },\n    ];\n\n    if (additionalData.length > 0) {\n      attachments.push(...additionalData.map((data, index) => ({\n        title: `Additional data ${index + 1}`,\n        text: JSON.stringify(data),\n      })));\n    }\n\n    if (connection) {\n      attachments.push({\n        title: 'Connection',\n        text: `\\`\\`\\`${JSON.stringify(\n          pick(connection, ['clientAdress', 'httpHeaders']),\n          null,\n          2,\n        )}\\`\\`\\``,\n      });\n    }\n\n    return this.sendAttachments({\n      channel: `errors-${Meteor.settings.public.environment}`,\n      username: this.getNotificationOrigin(user),\n      attachments,\n    });\n  };\n\n  getChannelForAdmin = admin =>\n    (admin ? `#clients_${admin.email.split('@')[0]}` : '#clients_general');\n\n  notifyAssignee = ({\n    currentUser,\n    message,\n    title,\n    link,\n    assignee,\n    notifyAlways,\n  }) => {\n    const isAdmin = currentUser\n      && (currentUser.roles.includes(ROLES.ADMIN)\n        || currentUser.roles.includes(ROLES.DEV));\n\n    if (!notifyAlways && isAdmin) {\n      return false;\n    }\n\n    const admin = assignee || (currentUser && currentUser.assignedEmployee);\n    const channel = this.getChannelForAdmin(admin);\n\n    const slackPayload = {\n      channel,\n      attachments: [{ title, title_link: link, text: message }],\n      username: this.getNotificationOrigin(currentUser),\n    };\n\n    if (\n      (Meteor.isStaging || Meteor.isDevEnvironment || Meteor.isDevelopment)\n      && !Meteor.isTest\n    ) {\n      console.log('Slack dev/staging notification');\n      console.log('Payload:', slackPayload);\n      return slackPayload;\n    }\n\n    return this.sendAttachments(slackPayload);\n  };\n\n  getNotificationOrigin = (currentUser) => {\n    const APIUser = getAPIUser();\n    const username = currentUser ? currentUser.name : undefined;\n\n    if (APIUser) {\n      const mainOrg = UserService.getUserMainOrganisation(APIUser._id);\n      return [username, `(API ${mainOrg && mainOrg.name})`].join(' ');\n    }\n\n    return username;\n  };\n\n  notifyOfUpload = ({ currentUser, fileName, docLabel, loanId }) => {\n    const isUser = currentUser && currentUser.roles.includes(ROLES.USER);\n\n    if (!isUser) {\n      return false;\n    }\n\n    const loan = loanId && fullLoan.clone({ _id: loanId }).fetchOne();\n    const loanNameEnd = loan ? ` pour ${loan.name}.` : '.';\n    const title = `Upload: ${fileName} dans ${docLabel}${loanNameEnd}`;\n    let link = `${Meteor.settings.public.subdomains.admin}/users/${currentUser._id}`;\n    let message = '';\n\n    if (loan) {\n      const infoProgress = Calculator.personalInfoPercent({ loan });\n      const propertyProgress = Calculator.propertyPercent({ loan });\n      const documentsProgress = Calculator.filesProgress({\n        loan,\n      }).percent;\n\n      const progressParts = [\n        `Emprunteurs \\`${percentFormatters.format(infoProgress)}%\\``,\n        `Documents: \\`${percentFormatters.format(documentsProgress)}%\\``,\n        `Bien immo: \\`${percentFormatters.format(propertyProgress)}%\\``,\n      ];\n\n      if (loan.hasPromotion) {\n        message = `_Promotion: \\`${loan.promotions[0].name}\\`_ `;\n        progressParts.pop(); // Remove property progress in case of a promotion\n      }\n\n      message += `*Progrès:* ${progressParts.join(', ')}`;\n      link = `${Meteor.settings.public.subdomains.admin}/loans/${loan._id}`;\n    }\n\n    return this.notifyAssignee({ currentUser, message, title, link });\n  };\n}\n\nexport default new SlackService({ serverSide: Meteor.isServer });\n"]},"sourceType":"script","hash":"81a1eac75c8633f1cc186e02192410c70e2e502e"}

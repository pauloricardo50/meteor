{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Financing/client/FinancingResult/test/FinancingResult.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/Financing/client/FinancingResult/test/FinancingResult.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Financing/client/FinancingResult/test/FinancingResult.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/Financing/client/FinancingResult/test/FinancingResult.spec.jsx"],"names":["React","expect","mount","IntlProvider","intlShape","ScrollSync","messages","OWN_FUNDS_USAGE_TYPES","FinancingResult","Provider","INTEREST_RATES","Calculator","expectResult","component","name","value","val","find","last","Number","isInteger","contains","replace","to","equal","describe","props","loan","intl","defaultLocale","getChildContext","context","childContextTypes","beforeEach","structures","borrowers","properties","structure","id","loanTranches","type","propertyId","propertyWork","wantedLoan","ownFunds","selectedStructure","_id","bankFortune","salary","insurance2","insurance3A","yearlyExpenses","currentInterestRates","YEARS_10","it","monthly","string","text","hasNonZeroNumber","test","interestsCost","offerId","notaryFees","borrowerId","usageType","PLEDGE","thirdPartyFortune","offers","interest2","interestLibor","amortizationGoal","amortizationYears","match","join","skip","exists"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { mount } from 'core/utils/testHelpers/enzyme';\nimport { IntlProvider, intlShape } from 'react-intl';\nimport { ScrollSync } from 'react-scroll-sync';\nimport messages from 'core/lang/fr.json';\n\nimport { OWN_FUNDS_USAGE_TYPES } from 'imports/core/api/constants';\nimport FinancingResult from '../FinancingResult';\nimport { Provider } from '../../containers/loan-context';\nimport { INTEREST_RATES } from '../../../../../api/interestRates/interestRatesConstants';\nimport Calculator from '../../../../../utils/Calculator';\n\nconst expectResult = (component, name, value) => {\n  const val = component()\n    .find(name)\n    .last();\n\n  if (!Number.isInteger(value)) {\n    // On our test browsers, the comma is represented either as a , or .\n    // due to the web's \"intl\" API\n    expect(val.contains(`${value}`) || val.contains(`${value}`.replace('.', ','))).to.equal(true);\n  } else {\n    expect(val.contains(`${value}`)).to.equal(true);\n  }\n};\n\ndescribe('FinancingResult', () => {\n  let props;\n  let loan;\n  const { intl } = new IntlProvider({\n    defaultLocale: 'fr',\n    messages,\n  }).getChildContext();\n  const component = () =>\n    mount(\n      <ScrollSync>\n        <Provider value={{ loan, Calculator }}>\n          <FinancingResult {...props} />\n        </Provider>\n      </ScrollSync>,\n      {\n        context: { intl },\n        childContextTypes: { intl: intlShape },\n      },\n    );\n\n  beforeEach(() => {\n    props = {};\n    loan = {\n      structures: [],\n      borrowers: [],\n      properties: [],\n    };\n  });\n\n  context('renders the correct results for a standard structure', () => {\n    beforeEach(() => {\n      const structure = {\n        id: 'a',\n        loanTranches: [{ type: 'interest10', value: 1 }],\n        propertyId: 'house',\n        propertyWork: 0,\n        wantedLoan: 800000,\n        ownFunds: [{ type: 'bankFortune', value: 250000 }],\n      };\n      loan = {\n        selectedStructure: 'a',\n        structure,\n        structures: [structure],\n        borrowers: [\n          {\n            _id: 'john',\n            bankFortune: 250000,\n            salary: 200000,\n            insurance2: [{ value: 50 }],\n            insurance3A: [{ value: 60 }],\n          },\n        ],\n        properties: [\n          {\n            _id: 'house',\n            value: 1000000,\n            yearlyExpenses: 1200,\n          },\n        ],\n        currentInterestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      };\n    });\n\n    it('monthly', () => {\n      const monthly = component().find('.financing-structures-result-chart .total');\n      const string = monthly.text();\n      const hasNonZeroNumber = /[1-9]/.test(string);\n      // Interests rates change constantly, can't pin a precise value\n      expect(hasNonZeroNumber).to.equal(true);\n    });\n\n    it('interestsCost', () => {\n      const interestsCost = component()\n        .find('.interestsCost')\n        .last();\n      const string = interestsCost.text();\n      const hasNonZeroNumber = /[1-9]/.test(string);\n\n      expect(hasNonZeroNumber).to.equal(true);\n    });\n\n    it('amortizationCost', () => {\n      expectResult(component, '.amortizationCost', 833);\n    });\n\n    it('propertyCost', () => {\n      expectResult(component, '.propertyCost', 100);\n    });\n\n    it('borrowRatio', () => {\n      expectResult(component, '.borrowRatio', 0.8);\n    });\n\n    it('incomeRatio', () => {\n      expectResult(component, '.incomeRatio', 0.3);\n    });\n\n    it('remainingCash', () => {\n      expectResult(component, '.remainingCash', 0);\n    });\n\n    it('remainingInsurance2', () => {\n      expectResult(component, '.remainingInsurance2', 50);\n    });\n\n    it('remainingInsurance3A', () => {\n      expectResult(component, '.remainingInsurance3A', 60);\n    });\n  });\n\n  context('structure with an offer', () => {\n    beforeEach(() => {\n      const structure = {\n        id: 'a',\n        loanTranches: [\n          { type: 'interest2', value: 0.8 },\n          { type: 'interestLibor', value: 0.2 },\n        ],\n        propertyId: 'house',\n        offerId: 'offer',\n        propertyWork: 200000,\n        wantedLoan: 1080000,\n        notaryFees: 50000,\n        ownFunds: [\n          { type: 'bankFortune', value: 150000, borrowerId: 'John' },\n          {\n            type: 'insurance2',\n            usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n            value: 120000,\n            borrowerId: 'John',\n          },\n          { type: 'thirdPartyFortune', value: 20000, borrowerId: 'Mary' },\n        ],\n      };\n      loan = {\n        selectedStructure: 'a',\n        structure,\n        structures: [structure],\n        borrowers: [\n          {\n            _id: 'John',\n            bankFortune: 250000,\n            salary: 200000,\n            insurance2: [{ value: 1000 }],\n            insurance3A: [{ value: 500 }],\n          },\n          {\n            _id: 'Mary',\n            salary: 200000,\n            thirdPartyFortune: 200000,\n            insurance2: [{ value: 2000 }],\n            insurance3A: [{ value: 0 }],\n          },\n        ],\n        properties: [\n          {\n            _id: 'house',\n            value: 1000000,\n            yearlyExpenses: 1200,\n          },\n        ],\n        offers: [\n          {\n            _id: 'offer',\n            interest2: 0.02,\n            interestLibor: 0.01,\n            amortizationGoal: 0.5,\n            amortizationYears: 5,\n          },\n        ],\n        currentInterestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      };\n    });\n\n    it('monthly', () => {\n      const monthly = component().find('.financing-structures-result-chart .total');\n      const string = monthly.text();\n      const value = string.match(/\\d/g).join('');\n      expect(value).to.equal('9720');\n    });\n\n    it('interestsCost', () => {\n      const interestsCost = component()\n        .find('.interestsCost')\n        .last();\n      const string = interestsCost.text();\n      const value = string.match(/\\d/g).join('');\n\n      // Average of 1.8% interests\n      expect(value).to.equal('1620');\n    });\n\n    it('amortizationCost', () => {\n      // 1080k in 5 years to 600k\n      expectResult(component, '.amortizationCost', '8 000');\n    });\n\n    it('propertyCost', () => {\n      expectResult(component, '.propertyCost', 100);\n    });\n\n    it('borrowRatio', () => {\n      expectResult(component, '.borrowRatio', 0.9);\n    });\n\n    it('incomeRatio', () => {\n      // 400k income\n      // 12k maintenance, 54k interests, 20k amortization\n      expectResult(component, '.incomeRatio', 0.215);\n    });\n\n    it('remainingCash', () => {\n      expectResult(component, '.remainingCash', '100 000');\n    });\n\n    it('remainingInsurance2', () => {\n      expectResult(component, '.remainingInsurance2', '3 000');\n    });\n\n    it('remainingInsurance3A', () => {\n      expectResult(component, '.remainingInsurance3A', 500);\n    });\n  });\n\n  it.skip('renders an error if an interest rate is not defined', () => {\n    // FIXME: Enzyme does not support componentDidCatch yet\n    // https://github.com/airbnb/enzyme/issues/1553\n    loan = {\n      structures: [\n        {\n          id: 'a',\n          loanTranches: [{ type: 'unknown_rate' }],\n        },\n      ],\n      borrowers: [{}],\n      properties: [{}],\n    };\n    expect(component()\n      .find('.error')\n      .exists()).to.equal(true);\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Financing/client/FinancingResult/test/FinancingResult.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/Financing/client/FinancingResult/test/FinancingResult.spec.jsx"}},"code":"let React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 1);\nlet mount;\nmodule.link(\"../../../../../utils/testHelpers/enzyme\", {\n  mount(v) {\n    mount = v;\n  }\n\n}, 2);\nlet IntlProvider, intlShape;\nmodule.link(\"react-intl\", {\n  IntlProvider(v) {\n    IntlProvider = v;\n  },\n\n  intlShape(v) {\n    intlShape = v;\n  }\n\n}, 3);\nlet ScrollSync;\nmodule.link(\"react-scroll-sync\", {\n  ScrollSync(v) {\n    ScrollSync = v;\n  }\n\n}, 4);\nlet messages;\nmodule.link(\"../../../../../lang/fr.json\", {\n  default(v) {\n    messages = v;\n  }\n\n}, 5);\nlet OWN_FUNDS_USAGE_TYPES;\nmodule.link(\"../../../../../api/constants\", {\n  OWN_FUNDS_USAGE_TYPES(v) {\n    OWN_FUNDS_USAGE_TYPES = v;\n  }\n\n}, 6);\nlet FinancingResult;\nmodule.link(\"../FinancingResult\", {\n  default(v) {\n    FinancingResult = v;\n  }\n\n}, 7);\nlet Provider;\nmodule.link(\"../../containers/loan-context\", {\n  Provider(v) {\n    Provider = v;\n  }\n\n}, 8);\nlet INTEREST_RATES;\nmodule.link(\"../../../../../api/interestRates/interestRatesConstants\", {\n  INTEREST_RATES(v) {\n    INTEREST_RATES = v;\n  }\n\n}, 9);\nlet Calculator;\nmodule.link(\"../../../../../utils/Calculator\", {\n  default(v) {\n    Calculator = v;\n  }\n\n}, 10);\n\nconst expectResult = (component, name, value) => {\n  const val = component().find(name).last();\n\n  if (!Number.isInteger(value)) {\n    // On our test browsers, the comma is represented either as a , or .\n    // due to the web's \"intl\" API\n    expect(val.contains(\"\".concat(value)) || val.contains(\"\".concat(value).replace('.', ','))).to.equal(true);\n  } else {\n    expect(val.contains(\"\".concat(value))).to.equal(true);\n  }\n};\n\ndescribe('FinancingResult', () => {\n  let props;\n  let loan;\n  const {\n    intl\n  } = new IntlProvider({\n    defaultLocale: 'fr',\n    messages\n  }).getChildContext();\n\n  const component = () => mount(React.createElement(ScrollSync, null, React.createElement(Provider, {\n    value: {\n      loan,\n      Calculator\n    }\n  }, React.createElement(FinancingResult, props))), {\n    context: {\n      intl\n    },\n    childContextTypes: {\n      intl: intlShape\n    }\n  });\n\n  beforeEach(() => {\n    props = {};\n    loan = {\n      structures: [],\n      borrowers: [],\n      properties: []\n    };\n  });\n  context('renders the correct results for a standard structure', () => {\n    beforeEach(() => {\n      const structure = {\n        id: 'a',\n        loanTranches: [{\n          type: 'interest10',\n          value: 1\n        }],\n        propertyId: 'house',\n        propertyWork: 0,\n        wantedLoan: 800000,\n        ownFunds: [{\n          type: 'bankFortune',\n          value: 250000\n        }]\n      };\n      loan = {\n        selectedStructure: 'a',\n        structure,\n        structures: [structure],\n        borrowers: [{\n          _id: 'john',\n          bankFortune: 250000,\n          salary: 200000,\n          insurance2: [{\n            value: 50\n          }],\n          insurance3A: [{\n            value: 60\n          }]\n        }],\n        properties: [{\n          _id: 'house',\n          value: 1000000,\n          yearlyExpenses: 1200\n        }],\n        currentInterestRates: {\n          [INTEREST_RATES.YEARS_10]: 0.01\n        }\n      };\n    });\n    it('monthly', () => {\n      const monthly = component().find('.financing-structures-result-chart .total');\n      const string = monthly.text();\n      const hasNonZeroNumber = /[1-9]/.test(string); // Interests rates change constantly, can't pin a precise value\n\n      expect(hasNonZeroNumber).to.equal(true);\n    });\n    it('interestsCost', () => {\n      const interestsCost = component().find('.interestsCost').last();\n      const string = interestsCost.text();\n      const hasNonZeroNumber = /[1-9]/.test(string);\n      expect(hasNonZeroNumber).to.equal(true);\n    });\n    it('amortizationCost', () => {\n      expectResult(component, '.amortizationCost', 833);\n    });\n    it('propertyCost', () => {\n      expectResult(component, '.propertyCost', 100);\n    });\n    it('borrowRatio', () => {\n      expectResult(component, '.borrowRatio', 0.8);\n    });\n    it('incomeRatio', () => {\n      expectResult(component, '.incomeRatio', 0.3);\n    });\n    it('remainingCash', () => {\n      expectResult(component, '.remainingCash', 0);\n    });\n    it('remainingInsurance2', () => {\n      expectResult(component, '.remainingInsurance2', 50);\n    });\n    it('remainingInsurance3A', () => {\n      expectResult(component, '.remainingInsurance3A', 60);\n    });\n  });\n  context('structure with an offer', () => {\n    beforeEach(() => {\n      const structure = {\n        id: 'a',\n        loanTranches: [{\n          type: 'interest2',\n          value: 0.8\n        }, {\n          type: 'interestLibor',\n          value: 0.2\n        }],\n        propertyId: 'house',\n        offerId: 'offer',\n        propertyWork: 200000,\n        wantedLoan: 1080000,\n        notaryFees: 50000,\n        ownFunds: [{\n          type: 'bankFortune',\n          value: 150000,\n          borrowerId: 'John'\n        }, {\n          type: 'insurance2',\n          usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n          value: 120000,\n          borrowerId: 'John'\n        }, {\n          type: 'thirdPartyFortune',\n          value: 20000,\n          borrowerId: 'Mary'\n        }]\n      };\n      loan = {\n        selectedStructure: 'a',\n        structure,\n        structures: [structure],\n        borrowers: [{\n          _id: 'John',\n          bankFortune: 250000,\n          salary: 200000,\n          insurance2: [{\n            value: 1000\n          }],\n          insurance3A: [{\n            value: 500\n          }]\n        }, {\n          _id: 'Mary',\n          salary: 200000,\n          thirdPartyFortune: 200000,\n          insurance2: [{\n            value: 2000\n          }],\n          insurance3A: [{\n            value: 0\n          }]\n        }],\n        properties: [{\n          _id: 'house',\n          value: 1000000,\n          yearlyExpenses: 1200\n        }],\n        offers: [{\n          _id: 'offer',\n          interest2: 0.02,\n          interestLibor: 0.01,\n          amortizationGoal: 0.5,\n          amortizationYears: 5\n        }],\n        currentInterestRates: {\n          [INTEREST_RATES.YEARS_10]: 0.01\n        }\n      };\n    });\n    it('monthly', () => {\n      const monthly = component().find('.financing-structures-result-chart .total');\n      const string = monthly.text();\n      const value = string.match(/\\d/g).join('');\n      expect(value).to.equal('9720');\n    });\n    it('interestsCost', () => {\n      const interestsCost = component().find('.interestsCost').last();\n      const string = interestsCost.text();\n      const value = string.match(/\\d/g).join(''); // Average of 1.8% interests\n\n      expect(value).to.equal('1620');\n    });\n    it('amortizationCost', () => {\n      // 1080k in 5 years to 600k\n      expectResult(component, '.amortizationCost', '8 000');\n    });\n    it('propertyCost', () => {\n      expectResult(component, '.propertyCost', 100);\n    });\n    it('borrowRatio', () => {\n      expectResult(component, '.borrowRatio', 0.9);\n    });\n    it('incomeRatio', () => {\n      // 400k income\n      // 12k maintenance, 54k interests, 20k amortization\n      expectResult(component, '.incomeRatio', 0.215);\n    });\n    it('remainingCash', () => {\n      expectResult(component, '.remainingCash', '100 000');\n    });\n    it('remainingInsurance2', () => {\n      expectResult(component, '.remainingInsurance2', '3 000');\n    });\n    it('remainingInsurance3A', () => {\n      expectResult(component, '.remainingInsurance3A', 500);\n    });\n  });\n  it.skip('renders an error if an interest rate is not defined', () => {\n    // FIXME: Enzyme does not support componentDidCatch yet\n    // https://github.com/airbnb/enzyme/issues/1553\n    loan = {\n      structures: [{\n        id: 'a',\n        loanTranches: [{\n          type: 'unknown_rate'\n        }]\n      }],\n      borrowers: [{}],\n      properties: [{}]\n    };\n    expect(component().find('.error').exists()).to.equal(true);\n  });\n});","map":{"version":3,"sources":["imports/core/components/Financing/client/FinancingResult/test/FinancingResult.spec.jsx"],"names":["expectResult","val","component","Number","expect","describe","intl","defaultLocale","messages","mount","Calculator","context","childContextTypes","intlShape","beforeEach","props","loan","structures","borrowers","properties","structure","id","loanTranches","type","value","propertyId","propertyWork","wantedLoan","ownFunds","selectedStructure","_id","bankFortune","salary","insurance2","insurance3A","yearlyExpenses","currentInterestRates","INTEREST_RATES","it","monthly","string","hasNonZeroNumber","interestsCost","offerId","notaryFees","borrowerId","usageType","OWN_FUNDS_USAGE_TYPES","thirdPartyFortune","offers","interest2","interestLibor","amortizationGoal","amortizationYears"],"mappings":"AAAA,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,yCAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,YAAA,EAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,YAAA,EAAA;AAAA,EAAA,YAAA,CAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,UAAA;AAAA,MAAA,CAAA,IAAA,CAAA,mBAAA,EAAA;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,6BAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,qBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,8BAAA,EAAA;AAAA,EAAA,qBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,qBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,eAAA;AAAA,MAAA,CAAA,IAAA,CAAA,oBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,+BAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,cAAA;AAAA,MAAA,CAAA,IAAA,CAAA,yDAAA,EAAA;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,UAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iCAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,EAAA;;AAeA,MAAMA,YAAY,GAAG,CAAA,SAAA,EAAA,IAAA,EAAA,KAAA,KAA4B;AAC/C,QAAMC,GAAG,GAAGC,SAAS,GAATA,IAAAA,CAAAA,IAAAA,EAAZ,IAAYA,EAAZ;;AAIA,MAAI,CAACC,MAAM,CAANA,SAAAA,CAAL,KAAKA,CAAL,EAA8B;AAC5B;AACA;AACAC,IAAAA,MAAM,CAACH,GAAG,CAAHA,QAAAA,WAAAA,KAAAA,MAA4BA,GAAG,CAAHA,QAAAA,CAAc,UAAD,KAAC,EAAD,OAAC,CAAD,GAAC,EAAjDG,GAAiD,CAAdH,CAA7B,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AAHF,GAAA,MAIO;AACLA,IAAAA,MAAM,CAACH,GAAG,CAAHA,QAAAA,WAAPG,KAAOH,EAAD,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AACD;AAXH,CAAA;;AAcAC,QAAQ,CAAA,iBAAA,EAAoB,MAAM;AAChC,MAAA,KAAA;AACA,MAAA,IAAA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,IAAA,YAAA,CAAiB;AAChCC,IAAAA,aAAa,EADmB,IAAA;AAEhCC,IAAAA;AAFgC,GAAjB,EAAjB,eAAiB,EAAjB;;AAIA,QAAMN,SAAS,GAAG,MAChBO,KAAK,CACH,oBAAA,UAAA,QACE,oBAAA,QAAA;AAAU,IAAA,KAAA,EAAO;AAAA,MAAA,IAAA;AAAQC,MAAAA;AAAR;AAAjB,KACE,oBAAA,eAAA,EAAA,KAAA,CADF,CADF,CADG,EAMH;AACEC,IAAAA,OAAO,EAAE;AAAEL,MAAAA;AAAF,KADX;AAEEM,IAAAA,iBAAiB,EAAE;AAAEN,MAAAA,IAAI,EAAEO;AAAR;AAFrB,GANG,CADP;;AAaAC,EAAAA,UAAU,CAAC,MAAM;AACfC,IAAAA,KAAK,GAALA,EAAAA;AACAC,IAAAA,IAAI,GAAG;AACLC,MAAAA,UAAU,EADL,EAAA;AAELC,MAAAA,SAAS,EAFJ,EAAA;AAGLC,MAAAA,UAAU,EAAE;AAHP,KAAPH;AAFFF,GAAU,CAAVA;AASAH,EAAAA,OAAO,CAAA,sDAAA,EAAyD,MAAM;AACpEG,IAAAA,UAAU,CAAC,MAAM;AACf,YAAMM,SAAS,GAAG;AAChBC,QAAAA,EAAE,EADc,GAAA;AAEhBC,QAAAA,YAAY,EAAE,CAAC;AAAEC,UAAAA,IAAI,EAAN,YAAA;AAAsBC,UAAAA,KAAK,EAAE;AAA7B,SAAD,CAFE;AAGhBC,QAAAA,UAAU,EAHM,OAAA;AAIhBC,QAAAA,YAAY,EAJI,CAAA;AAKhBC,QAAAA,UAAU,EALM,MAAA;AAMhBC,QAAAA,QAAQ,EAAE,CAAC;AAAEL,UAAAA,IAAI,EAAN,aAAA;AAAuBC,UAAAA,KAAK,EAAE;AAA9B,SAAD;AANM,OAAlB;AAQAR,MAAAA,IAAI,GAAG;AACLa,QAAAA,iBAAiB,EADZ,GAAA;AAAA,QAAA,SAAA;AAGLZ,QAAAA,UAAU,EAAE,CAHP,SAGO,CAHP;AAILC,QAAAA,SAAS,EAAE,CACT;AACEY,UAAAA,GAAG,EADL,MAAA;AAEEC,UAAAA,WAAW,EAFb,MAAA;AAGEC,UAAAA,MAAM,EAHR,MAAA;AAIEC,UAAAA,UAAU,EAAE,CAAC;AAAET,YAAAA,KAAK,EAAE;AAAT,WAAD,CAJd;AAKEU,UAAAA,WAAW,EAAE,CAAC;AAAEV,YAAAA,KAAK,EAAE;AAAT,WAAD;AALf,SADS,CAJN;AAaLL,QAAAA,UAAU,EAAE,CACV;AACEW,UAAAA,GAAG,EADL,OAAA;AAEEN,UAAAA,KAAK,EAFP,OAAA;AAGEW,UAAAA,cAAc,EAAE;AAHlB,SADU,CAbP;AAoBLC,QAAAA,oBAAoB,EAAE;AAAE,WAACC,cAAc,CAAf,QAAA,GAA2B;AAA7B;AApBjB,OAAPrB;AATFF,KAAU,CAAVA;AAiCAwB,IAAAA,EAAE,CAAA,SAAA,EAAY,MAAM;AAClB,YAAMC,OAAO,GAAGrC,SAAS,GAATA,IAAAA,CAAhB,2CAAgBA,CAAhB;AACA,YAAMsC,MAAM,GAAGD,OAAO,CAAtB,IAAeA,EAAf;AACA,YAAME,gBAAgB,GAAG,QAAA,IAAA,CAHP,MAGO,CAAzB,CAHkB,CAIlB;;AACArC,MAAAA,MAAM,CAANA,gBAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AALFkC,KAAE,CAAFA;AAQAA,IAAAA,EAAE,CAAA,eAAA,EAAkB,MAAM;AACxB,YAAMI,aAAa,GAAGxC,SAAS,GAATA,IAAAA,CAAAA,gBAAAA,EAAtB,IAAsBA,EAAtB;AAGA,YAAMsC,MAAM,GAAGE,aAAa,CAA5B,IAAeA,EAAf;AACA,YAAMD,gBAAgB,GAAG,QAAA,IAAA,CAAzB,MAAyB,CAAzB;AAEArC,MAAAA,MAAM,CAANA,gBAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AAPFkC,KAAE,CAAFA;AAUAA,IAAAA,EAAE,CAAA,kBAAA,EAAqB,MAAM;AAC3BtC,MAAAA,YAAY,CAAA,SAAA,EAAA,mBAAA,EAAZA,GAAY,CAAZA;AADFsC,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,cAAA,EAAiB,MAAM;AACvBtC,MAAAA,YAAY,CAAA,SAAA,EAAA,eAAA,EAAZA,GAAY,CAAZA;AADFsC,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,aAAA,EAAgB,MAAM;AACtBtC,MAAAA,YAAY,CAAA,SAAA,EAAA,cAAA,EAAZA,GAAY,CAAZA;AADFsC,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,aAAA,EAAgB,MAAM;AACtBtC,MAAAA,YAAY,CAAA,SAAA,EAAA,cAAA,EAAZA,GAAY,CAAZA;AADFsC,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,eAAA,EAAkB,MAAM;AACxBtC,MAAAA,YAAY,CAAA,SAAA,EAAA,gBAAA,EAAZA,CAAY,CAAZA;AADFsC,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,qBAAA,EAAwB,MAAM;AAC9BtC,MAAAA,YAAY,CAAA,SAAA,EAAA,sBAAA,EAAZA,EAAY,CAAZA;AADFsC,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,sBAAA,EAAyB,MAAM;AAC/BtC,MAAAA,YAAY,CAAA,SAAA,EAAA,uBAAA,EAAZA,EAAY,CAAZA;AADFsC,KAAE,CAAFA;AA5EF3B,GAAO,CAAPA;AAiFAA,EAAAA,OAAO,CAAA,yBAAA,EAA4B,MAAM;AACvCG,IAAAA,UAAU,CAAC,MAAM;AACf,YAAMM,SAAS,GAAG;AAChBC,QAAAA,EAAE,EADc,GAAA;AAEhBC,QAAAA,YAAY,EAAE,CACZ;AAAEC,UAAAA,IAAI,EAAN,WAAA;AAAqBC,UAAAA,KAAK,EAAE;AAA5B,SADY,EAEZ;AAAED,UAAAA,IAAI,EAAN,eAAA;AAAyBC,UAAAA,KAAK,EAAE;AAAhC,SAFY,CAFE;AAMhBC,QAAAA,UAAU,EANM,OAAA;AAOhBkB,QAAAA,OAAO,EAPS,OAAA;AAQhBjB,QAAAA,YAAY,EARI,MAAA;AAShBC,QAAAA,UAAU,EATM,OAAA;AAUhBiB,QAAAA,UAAU,EAVM,KAAA;AAWhBhB,QAAAA,QAAQ,EAAE,CACR;AAAEL,UAAAA,IAAI,EAAN,aAAA;AAAuBC,UAAAA,KAAK,EAA5B,MAAA;AAAsCqB,UAAAA,UAAU,EAAE;AAAlD,SADQ,EAER;AACEtB,UAAAA,IAAI,EADN,YAAA;AAEEuB,UAAAA,SAAS,EAAEC,qBAAqB,CAFlC,MAAA;AAGEvB,UAAAA,KAAK,EAHP,MAAA;AAIEqB,UAAAA,UAAU,EAAE;AAJd,SAFQ,EAQR;AAAEtB,UAAAA,IAAI,EAAN,mBAAA;AAA6BC,UAAAA,KAAK,EAAlC,KAAA;AAA2CqB,UAAAA,UAAU,EAAE;AAAvD,SARQ;AAXM,OAAlB;AAsBA7B,MAAAA,IAAI,GAAG;AACLa,QAAAA,iBAAiB,EADZ,GAAA;AAAA,QAAA,SAAA;AAGLZ,QAAAA,UAAU,EAAE,CAHP,SAGO,CAHP;AAILC,QAAAA,SAAS,EAAE,CACT;AACEY,UAAAA,GAAG,EADL,MAAA;AAEEC,UAAAA,WAAW,EAFb,MAAA;AAGEC,UAAAA,MAAM,EAHR,MAAA;AAIEC,UAAAA,UAAU,EAAE,CAAC;AAAET,YAAAA,KAAK,EAAE;AAAT,WAAD,CAJd;AAKEU,UAAAA,WAAW,EAAE,CAAC;AAAEV,YAAAA,KAAK,EAAE;AAAT,WAAD;AALf,SADS,EAQT;AACEM,UAAAA,GAAG,EADL,MAAA;AAEEE,UAAAA,MAAM,EAFR,MAAA;AAGEgB,UAAAA,iBAAiB,EAHnB,MAAA;AAIEf,UAAAA,UAAU,EAAE,CAAC;AAAET,YAAAA,KAAK,EAAE;AAAT,WAAD,CAJd;AAKEU,UAAAA,WAAW,EAAE,CAAC;AAAEV,YAAAA,KAAK,EAAE;AAAT,WAAD;AALf,SARS,CAJN;AAoBLL,QAAAA,UAAU,EAAE,CACV;AACEW,UAAAA,GAAG,EADL,OAAA;AAEEN,UAAAA,KAAK,EAFP,OAAA;AAGEW,UAAAA,cAAc,EAAE;AAHlB,SADU,CApBP;AA2BLc,QAAAA,MAAM,EAAE,CACN;AACEnB,UAAAA,GAAG,EADL,OAAA;AAEEoB,UAAAA,SAAS,EAFX,IAAA;AAGEC,UAAAA,aAAa,EAHf,IAAA;AAIEC,UAAAA,gBAAgB,EAJlB,GAAA;AAKEC,UAAAA,iBAAiB,EAAE;AALrB,SADM,CA3BH;AAoCLjB,QAAAA,oBAAoB,EAAE;AAAE,WAACC,cAAc,CAAf,QAAA,GAA2B;AAA7B;AApCjB,OAAPrB;AAvBFF,KAAU,CAAVA;AA+DAwB,IAAAA,EAAE,CAAA,SAAA,EAAY,MAAM;AAClB,YAAMC,OAAO,GAAGrC,SAAS,GAATA,IAAAA,CAAhB,2CAAgBA,CAAhB;AACA,YAAMsC,MAAM,GAAGD,OAAO,CAAtB,IAAeA,EAAf;AACA,YAAMf,KAAK,GAAGgB,MAAM,CAANA,KAAAA,CAAAA,KAAAA,EAAAA,IAAAA,CAAd,EAAcA,CAAd;AACApC,MAAAA,MAAM,CAANA,KAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,MAAAA;AAJFkC,KAAE,CAAFA;AAOAA,IAAAA,EAAE,CAAA,eAAA,EAAkB,MAAM;AACxB,YAAMI,aAAa,GAAGxC,SAAS,GAATA,IAAAA,CAAAA,gBAAAA,EAAtB,IAAsBA,EAAtB;AAGA,YAAMsC,MAAM,GAAGE,aAAa,CAA5B,IAAeA,EAAf;AACA,YAAMlB,KAAK,GAAGgB,MAAM,CAANA,KAAAA,CAAAA,KAAAA,EAAAA,IAAAA,CALU,EAKVA,CAAd,CALwB,CAOxB;;AACApC,MAAAA,MAAM,CAANA,KAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,MAAAA;AARFkC,KAAE,CAAFA;AAWAA,IAAAA,EAAE,CAAA,kBAAA,EAAqB,MAAM;AAC3B;AACAtC,MAAAA,YAAY,CAAA,SAAA,EAAA,mBAAA,EAAZA,OAAY,CAAZA;AAFFsC,KAAE,CAAFA;AAKAA,IAAAA,EAAE,CAAA,cAAA,EAAiB,MAAM;AACvBtC,MAAAA,YAAY,CAAA,SAAA,EAAA,eAAA,EAAZA,GAAY,CAAZA;AADFsC,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,aAAA,EAAgB,MAAM;AACtBtC,MAAAA,YAAY,CAAA,SAAA,EAAA,cAAA,EAAZA,GAAY,CAAZA;AADFsC,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,aAAA,EAAgB,MAAM;AACtB;AACA;AACAtC,MAAAA,YAAY,CAAA,SAAA,EAAA,cAAA,EAAZA,KAAY,CAAZA;AAHFsC,KAAE,CAAFA;AAMAA,IAAAA,EAAE,CAAA,eAAA,EAAkB,MAAM;AACxBtC,MAAAA,YAAY,CAAA,SAAA,EAAA,gBAAA,EAAZA,SAAY,CAAZA;AADFsC,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,qBAAA,EAAwB,MAAM;AAC9BtC,MAAAA,YAAY,CAAA,SAAA,EAAA,sBAAA,EAAZA,OAAY,CAAZA;AADFsC,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,sBAAA,EAAyB,MAAM;AAC/BtC,MAAAA,YAAY,CAAA,SAAA,EAAA,uBAAA,EAAZA,GAAY,CAAZA;AADFsC,KAAE,CAAFA;AA7GF3B,GAAO,CAAPA;AAkHA2B,EAAAA,EAAE,CAAFA,IAAAA,CAAAA,qDAAAA,EAA+D,MAAM;AACnE;AACA;AACAtB,IAAAA,IAAI,GAAG;AACLC,MAAAA,UAAU,EAAE,CACV;AACEI,QAAAA,EAAE,EADJ,GAAA;AAEEC,QAAAA,YAAY,EAAE,CAAC;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAD;AAFhB,OADU,CADP;AAOLL,MAAAA,SAAS,EAAE,CAPN,EAOM,CAPN;AAQLC,MAAAA,UAAU,EAAE,CAAA,EAAA;AARP,KAAPH;AAUAZ,IAAAA,MAAM,CAACF,SAAS,GAATA,IAAAA,CAAAA,QAAAA,EAAPE,MAAOF,EAAD,CAANE,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AAbFkC,GAAAA;AAhOFjC,CAAQ,CAARA","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { mount } from 'core/utils/testHelpers/enzyme';\nimport { IntlProvider, intlShape } from 'react-intl';\nimport { ScrollSync } from 'react-scroll-sync';\nimport messages from 'core/lang/fr.json';\n\nimport { OWN_FUNDS_USAGE_TYPES } from 'imports/core/api/constants';\nimport FinancingResult from '../FinancingResult';\nimport { Provider } from '../../containers/loan-context';\nimport { INTEREST_RATES } from '../../../../../api/interestRates/interestRatesConstants';\nimport Calculator from '../../../../../utils/Calculator';\n\nconst expectResult = (component, name, value) => {\n  const val = component()\n    .find(name)\n    .last();\n\n  if (!Number.isInteger(value)) {\n    // On our test browsers, the comma is represented either as a , or .\n    // due to the web's \"intl\" API\n    expect(val.contains(`${value}`) || val.contains(`${value}`.replace('.', ','))).to.equal(true);\n  } else {\n    expect(val.contains(`${value}`)).to.equal(true);\n  }\n};\n\ndescribe('FinancingResult', () => {\n  let props;\n  let loan;\n  const { intl } = new IntlProvider({\n    defaultLocale: 'fr',\n    messages,\n  }).getChildContext();\n  const component = () =>\n    mount(\n      <ScrollSync>\n        <Provider value={{ loan, Calculator }}>\n          <FinancingResult {...props} />\n        </Provider>\n      </ScrollSync>,\n      {\n        context: { intl },\n        childContextTypes: { intl: intlShape },\n      },\n    );\n\n  beforeEach(() => {\n    props = {};\n    loan = {\n      structures: [],\n      borrowers: [],\n      properties: [],\n    };\n  });\n\n  context('renders the correct results for a standard structure', () => {\n    beforeEach(() => {\n      const structure = {\n        id: 'a',\n        loanTranches: [{ type: 'interest10', value: 1 }],\n        propertyId: 'house',\n        propertyWork: 0,\n        wantedLoan: 800000,\n        ownFunds: [{ type: 'bankFortune', value: 250000 }],\n      };\n      loan = {\n        selectedStructure: 'a',\n        structure,\n        structures: [structure],\n        borrowers: [\n          {\n            _id: 'john',\n            bankFortune: 250000,\n            salary: 200000,\n            insurance2: [{ value: 50 }],\n            insurance3A: [{ value: 60 }],\n          },\n        ],\n        properties: [\n          {\n            _id: 'house',\n            value: 1000000,\n            yearlyExpenses: 1200,\n          },\n        ],\n        currentInterestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      };\n    });\n\n    it('monthly', () => {\n      const monthly = component().find('.financing-structures-result-chart .total');\n      const string = monthly.text();\n      const hasNonZeroNumber = /[1-9]/.test(string);\n      // Interests rates change constantly, can't pin a precise value\n      expect(hasNonZeroNumber).to.equal(true);\n    });\n\n    it('interestsCost', () => {\n      const interestsCost = component()\n        .find('.interestsCost')\n        .last();\n      const string = interestsCost.text();\n      const hasNonZeroNumber = /[1-9]/.test(string);\n\n      expect(hasNonZeroNumber).to.equal(true);\n    });\n\n    it('amortizationCost', () => {\n      expectResult(component, '.amortizationCost', 833);\n    });\n\n    it('propertyCost', () => {\n      expectResult(component, '.propertyCost', 100);\n    });\n\n    it('borrowRatio', () => {\n      expectResult(component, '.borrowRatio', 0.8);\n    });\n\n    it('incomeRatio', () => {\n      expectResult(component, '.incomeRatio', 0.3);\n    });\n\n    it('remainingCash', () => {\n      expectResult(component, '.remainingCash', 0);\n    });\n\n    it('remainingInsurance2', () => {\n      expectResult(component, '.remainingInsurance2', 50);\n    });\n\n    it('remainingInsurance3A', () => {\n      expectResult(component, '.remainingInsurance3A', 60);\n    });\n  });\n\n  context('structure with an offer', () => {\n    beforeEach(() => {\n      const structure = {\n        id: 'a',\n        loanTranches: [\n          { type: 'interest2', value: 0.8 },\n          { type: 'interestLibor', value: 0.2 },\n        ],\n        propertyId: 'house',\n        offerId: 'offer',\n        propertyWork: 200000,\n        wantedLoan: 1080000,\n        notaryFees: 50000,\n        ownFunds: [\n          { type: 'bankFortune', value: 150000, borrowerId: 'John' },\n          {\n            type: 'insurance2',\n            usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n            value: 120000,\n            borrowerId: 'John',\n          },\n          { type: 'thirdPartyFortune', value: 20000, borrowerId: 'Mary' },\n        ],\n      };\n      loan = {\n        selectedStructure: 'a',\n        structure,\n        structures: [structure],\n        borrowers: [\n          {\n            _id: 'John',\n            bankFortune: 250000,\n            salary: 200000,\n            insurance2: [{ value: 1000 }],\n            insurance3A: [{ value: 500 }],\n          },\n          {\n            _id: 'Mary',\n            salary: 200000,\n            thirdPartyFortune: 200000,\n            insurance2: [{ value: 2000 }],\n            insurance3A: [{ value: 0 }],\n          },\n        ],\n        properties: [\n          {\n            _id: 'house',\n            value: 1000000,\n            yearlyExpenses: 1200,\n          },\n        ],\n        offers: [\n          {\n            _id: 'offer',\n            interest2: 0.02,\n            interestLibor: 0.01,\n            amortizationGoal: 0.5,\n            amortizationYears: 5,\n          },\n        ],\n        currentInterestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      };\n    });\n\n    it('monthly', () => {\n      const monthly = component().find('.financing-structures-result-chart .total');\n      const string = monthly.text();\n      const value = string.match(/\\d/g).join('');\n      expect(value).to.equal('9720');\n    });\n\n    it('interestsCost', () => {\n      const interestsCost = component()\n        .find('.interestsCost')\n        .last();\n      const string = interestsCost.text();\n      const value = string.match(/\\d/g).join('');\n\n      // Average of 1.8% interests\n      expect(value).to.equal('1620');\n    });\n\n    it('amortizationCost', () => {\n      // 1080k in 5 years to 600k\n      expectResult(component, '.amortizationCost', '8 000');\n    });\n\n    it('propertyCost', () => {\n      expectResult(component, '.propertyCost', 100);\n    });\n\n    it('borrowRatio', () => {\n      expectResult(component, '.borrowRatio', 0.9);\n    });\n\n    it('incomeRatio', () => {\n      // 400k income\n      // 12k maintenance, 54k interests, 20k amortization\n      expectResult(component, '.incomeRatio', 0.215);\n    });\n\n    it('remainingCash', () => {\n      expectResult(component, '.remainingCash', '100 000');\n    });\n\n    it('remainingInsurance2', () => {\n      expectResult(component, '.remainingInsurance2', '3 000');\n    });\n\n    it('remainingInsurance3A', () => {\n      expectResult(component, '.remainingInsurance3A', 500);\n    });\n  });\n\n  it.skip('renders an error if an interest rate is not defined', () => {\n    // FIXME: Enzyme does not support componentDidCatch yet\n    // https://github.com/airbnb/enzyme/issues/1553\n    loan = {\n      structures: [\n        {\n          id: 'a',\n          loanTranches: [{ type: 'unknown_rate' }],\n        },\n      ],\n      borrowers: [{}],\n      properties: [{}],\n    };\n    expect(component()\n      .find('.error')\n      .exists()).to.equal(true);\n  });\n});\n"]},"sourceType":"script","hash":"dae8bc50b511290883f229bb00e761f8ad524779"}

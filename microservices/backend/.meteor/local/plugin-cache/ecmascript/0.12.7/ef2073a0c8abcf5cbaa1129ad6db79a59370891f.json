{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/containerToolkit/withSmartQuery.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/api/containerToolkit/withSmartQuery.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/containerToolkit/withSmartQuery.js","inputSourceMap":{"version":3,"sources":["imports/core/api/containerToolkit/withSmartQuery.js"],"names":["withQuery","mapProps","compose","branch","renderComponent","lifecycle","withLoading","MissingDoc","ClientEventService","addQueryToRefetch","removeQueryToRefetch","makeSkipContainer","makeRenderMissingDocIfNoData","render","single","renderFunc","props","isLoading","data","makeMapProps","dataName","error","rest","withQueryRefetcher","queryName","componentDidMount","refetch","addListener","componentWillUnmount","removeListener","withGlobalQueryManager","reactive","refetchOnMethodCall","shouldActivateGlobalRefetch","global","window","x","withSmartQueryArgs","query","params","Object","queryOptions","renderMissingDoc","Function","smallLoader","calculateParams","withSmartQuery","skip","completeQuery","clone","container","loadOnRefetch"],"mappings":"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","sourcesContent":["// @flow\nimport { withQuery } from 'meteor/cultofcoders:grapher-react';\nimport {\n  mapProps,\n  compose,\n  branch,\n  renderComponent,\n  lifecycle,\n} from 'recompose';\nimport { withLoading } from '../../components/Loading';\nimport MissingDoc from '../../components/MissingDoc';\nimport ClientEventService from '../events/ClientEventService';\nimport {\n  addQueryToRefetch,\n  removeQueryToRefetch,\n} from '../methods/clientQueryManager';\nimport makeSkipContainer from './skipContainer';\n\n// render the missing doc component only when we want to\nconst makeRenderMissingDocIfNoData = (render: boolean = false, { single }) => {\n  let renderFunc;\n  if (typeof render === 'function') {\n    renderFunc = props =>\n      render(props) && single && (!props.isLoading && !props.data);\n  } else {\n    renderFunc = ({ isLoading, data }) =>\n      render && single && (!isLoading && !data);\n  }\n\n  return branch(renderFunc, renderComponent(MissingDoc));\n};\n\n// Use proper name for data, and remove unnecessary props from children\n// error should be thrown and catched by our errorboundaries anyways\n// or displayed by an alert\nconst makeMapProps = dataName =>\n  mapProps(({ data, isLoading, error, ...rest }) => ({\n    [dataName]: data,\n    ...rest,\n  }));\n\nconst withQueryRefetcher = ({ queryName }) =>\n  lifecycle({\n    componentDidMount() {\n      const { refetch } = this.props;\n\n      if (refetch) {\n        ClientEventService.addListener(queryName, refetch);\n      }\n    },\n    componentWillUnmount() {\n      const { refetch } = this.props;\n      if (refetch) {\n        ClientEventService.removeListener(queryName, refetch);\n      }\n    },\n  });\n\n// This adds all non-reactive queries on the window object, and removes them\n// when the query disappears\n// These queries can then all be refreshed from `clientMethodsConfig`\n// every time a method is called\nconst withGlobalQueryManager = (\n  { queryName },\n  { reactive },\n  refetchOnMethodCall,\n) => {\n  const shouldActivateGlobalRefetch = refetchOnMethodCall && !reactive && global.window;\n\n  if (!shouldActivateGlobalRefetch) {\n    return x => x;\n  }\n\n  return lifecycle({\n    componentDidMount() {\n      addQueryToRefetch(queryName, refetchOnMethodCall);\n    },\n    componentWillUnmount() {\n      removeQueryToRefetch(queryName);\n    },\n  });\n};\n\ntype withSmartQueryArgs = {\n  query: () => mixed,\n  params: (props: Object) => Object,\n  queryOptions?: { single: boolean },\n  dataName?: string,\n  renderMissingDoc?: boolean | Function,\n  smallLoader?: boolean,\n};\n\nconst calculateParams = (params, props) => {\n  if (typeof params === 'function') {\n    return params(props);\n  }\n  return params;\n};\n\nconst withSmartQuery = ({\n  query,\n  params = {},\n  queryOptions = { single: false },\n  dataName = 'data',\n  // used to bypass the missing doc component\n  renderMissingDoc = true,\n  smallLoader = false,\n  refetchOnMethodCall = 'all',\n  skip,\n}: withSmartQueryArgs) => {\n  let completeQuery;\n\n  if (typeof query === 'function') {\n    completeQuery = props => query(props).clone(calculateParams(params, props));\n  } else {\n    completeQuery = props => query.clone(calculateParams(params, props));\n  }\n\n  const container = compose(\n    withGlobalQueryManager(query, queryOptions, refetchOnMethodCall),\n    withQuery(completeQuery, { loadOnRefetch: false, ...queryOptions }),\n    withLoading(smallLoader),\n    makeRenderMissingDocIfNoData(renderMissingDoc, queryOptions),\n    makeMapProps(dataName),\n    withQueryRefetcher(query),\n  );\n\n  if (skip) {\n    return makeSkipContainer(container, skip);\n  }\n\n  return container;\n};\n\nexport default withSmartQuery;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/containerToolkit/withSmartQuery.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/containerToolkit/withSmartQuery.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread3 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar withQuery;\nmodule.link(\"meteor/cultofcoders:grapher-react\", {\n  withQuery: function (v) {\n    withQuery = v;\n  }\n}, 0);\nvar mapProps, compose, branch, renderComponent, lifecycle;\nmodule.link(\"recompose\", {\n  mapProps: function (v) {\n    mapProps = v;\n  },\n  compose: function (v) {\n    compose = v;\n  },\n  branch: function (v) {\n    branch = v;\n  },\n  renderComponent: function (v) {\n    renderComponent = v;\n  },\n  lifecycle: function (v) {\n    lifecycle = v;\n  }\n}, 1);\nvar withLoading;\nmodule.link(\"../../components/Loading\", {\n  withLoading: function (v) {\n    withLoading = v;\n  }\n}, 2);\nvar MissingDoc;\nmodule.link(\"../../components/MissingDoc\", {\n  \"default\": function (v) {\n    MissingDoc = v;\n  }\n}, 3);\nvar ClientEventService;\nmodule.link(\"../events/ClientEventService\", {\n  \"default\": function (v) {\n    ClientEventService = v;\n  }\n}, 4);\nvar addQueryToRefetch, removeQueryToRefetch;\nmodule.link(\"../methods/clientQueryManager\", {\n  addQueryToRefetch: function (v) {\n    addQueryToRefetch = v;\n  },\n  removeQueryToRefetch: function (v) {\n    removeQueryToRefetch = v;\n  }\n}, 5);\nvar makeSkipContainer;\nmodule.link(\"./skipContainer\", {\n  \"default\": function (v) {\n    makeSkipContainer = v;\n  }\n}, 6);\n\n// render the missing doc component only when we want to\nvar makeRenderMissingDocIfNoData = function () {\n  var render = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      single = _ref.single;\n\n  var renderFunc;\n\n  if (typeof render === 'function') {\n    renderFunc = function (props) {\n      return render(props) && single && !props.isLoading && !props.data;\n    };\n  } else {\n    renderFunc = function (_ref2) {\n      var isLoading = _ref2.isLoading,\n          data = _ref2.data;\n      return render && single && !isLoading && !data;\n    };\n  }\n\n  return branch(renderFunc, renderComponent(MissingDoc));\n}; // Use proper name for data, and remove unnecessary props from children\n// error should be thrown and catched by our errorboundaries anyways\n// or displayed by an alert\n\n\nvar makeMapProps = function (dataName) {\n  return mapProps(function (_ref3) {\n    var _objectSpread2;\n\n    var data = _ref3.data,\n        isLoading = _ref3.isLoading,\n        error = _ref3.error,\n        rest = (0, _objectWithoutProperties2.default)(_ref3, [\"data\", \"isLoading\", \"error\"]);\n    return (0, _objectSpread3.default)((_objectSpread2 = {}, _objectSpread2[dataName] = data, _objectSpread2), rest);\n  });\n};\n\nvar withQueryRefetcher = function (_ref4) {\n  var queryName = _ref4.queryName;\n  return lifecycle({\n    componentDidMount: function () {\n      var refetch = this.props.refetch;\n\n      if (refetch) {\n        ClientEventService.addListener(queryName, refetch);\n      }\n    },\n    componentWillUnmount: function () {\n      var refetch = this.props.refetch;\n\n      if (refetch) {\n        ClientEventService.removeListener(queryName, refetch);\n      }\n    }\n  });\n}; // This adds all non-reactive queries on the window object, and removes them\n// when the query disappears\n// These queries can then all be refreshed from `clientMethodsConfig`\n// every time a method is called\n\n\nvar withGlobalQueryManager = function (_ref5, _ref6, refetchOnMethodCall) {\n  var queryName = _ref5.queryName;\n  var reactive = _ref6.reactive;\n  var shouldActivateGlobalRefetch = refetchOnMethodCall && !reactive && global.window;\n\n  if (!shouldActivateGlobalRefetch) {\n    return function (x) {\n      return x;\n    };\n  }\n\n  return lifecycle({\n    componentDidMount: function () {\n      addQueryToRefetch(queryName, refetchOnMethodCall);\n    },\n    componentWillUnmount: function () {\n      removeQueryToRefetch(queryName);\n    }\n  });\n};\n\nvar calculateParams = function (params, props) {\n  if (typeof params === 'function') {\n    return params(props);\n  }\n\n  return params;\n};\n\nvar withSmartQuery = function (_ref7) {\n  var query = _ref7.query,\n      _ref7$params = _ref7.params,\n      params = _ref7$params === void 0 ? {} : _ref7$params,\n      _ref7$queryOptions = _ref7.queryOptions,\n      queryOptions = _ref7$queryOptions === void 0 ? {\n    single: false\n  } : _ref7$queryOptions,\n      _ref7$dataName = _ref7.dataName,\n      dataName = _ref7$dataName === void 0 ? 'data' : _ref7$dataName,\n      _ref7$renderMissingDo = _ref7.renderMissingDoc,\n      renderMissingDoc = _ref7$renderMissingDo === void 0 ? true : _ref7$renderMissingDo,\n      _ref7$smallLoader = _ref7.smallLoader,\n      smallLoader = _ref7$smallLoader === void 0 ? false : _ref7$smallLoader,\n      _ref7$refetchOnMethod = _ref7.refetchOnMethodCall,\n      refetchOnMethodCall = _ref7$refetchOnMethod === void 0 ? 'all' : _ref7$refetchOnMethod,\n      skip = _ref7.skip;\n  var completeQuery;\n\n  if (typeof query === 'function') {\n    completeQuery = function (props) {\n      return query(props).clone(calculateParams(params, props));\n    };\n  } else {\n    completeQuery = function (props) {\n      return query.clone(calculateParams(params, props));\n    };\n  }\n\n  var container = compose(withGlobalQueryManager(query, queryOptions, refetchOnMethodCall), withQuery(completeQuery, (0, _objectSpread3.default)({\n    loadOnRefetch: false\n  }, queryOptions)), withLoading(smallLoader), makeRenderMissingDocIfNoData(renderMissingDoc, queryOptions), makeMapProps(dataName), withQueryRefetcher(query));\n\n  if (skip) {\n    return makeSkipContainer(container, skip);\n  }\n\n  return container;\n};\n\nmodule.exportDefault(withSmartQuery);","map":{"version":3,"sources":["imports/core/api/containerToolkit/withSmartQuery.js"],"names":["makeRenderMissingDocIfNoData","render","single","renderFunc","props","data","branch","renderComponent","makeMapProps","dataName","mapProps","rest","withQueryRefetcher","queryName","lifecycle","componentDidMount","refetch","ClientEventService","componentWillUnmount","withGlobalQueryManager","reactive","shouldActivateGlobalRefetch","refetchOnMethodCall","global","x","addQueryToRefetch","removeQueryToRefetch","calculateParams","params","withSmartQuery","queryOptions","renderMissingDoc","smallLoader","skip","completeQuery","query","container","compose","withQuery","loadOnRefetch","withLoading","makeSkipContainer"],"mappings":";;;;;;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,mCAAA,EAAA;AAAA,EAAA,SAAA,YAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAA,eAAA,EAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AAAA,EAAA,QAAA,YAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA,GAAA;AAAA,EAAA,OAAA,YAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,YAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA,GAAA;AAAA,EAAA,eAAA,YAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA,GAAA;AAAA,EAAA,SAAA,YAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,WAAA;AAAA,MAAA,CAAA,IAAA,CAAA,0BAAA,EAAA;AAAA,EAAA,WAAA,YAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,UAAA;AAAA,MAAA,CAAA,IAAA,CAAA,6BAAA,EAAA;AAAA,uBAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,kBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,8BAAA,EAAA;AAAA,uBAAA,CAAA,EAAA;AAAA,IAAA,kBAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,iBAAA,EAAA,oBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,+BAAA,EAAA;AAAA,EAAA,iBAAA,YAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA,GAAA;AAAA,EAAA,oBAAA,YAAA,CAAA,EAAA;AAAA,IAAA,oBAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,iBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iBAAA,EAAA;AAAA,uBAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;;AAkBA;AACA,IAAMA,4BAA4B,GAAG,YAAyC;AAAA,MAAxCC,MAAwC,uEAAzC,KAAyC;;AAAA;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAC5E,MAAA,UAAA;;AACA,MAAI,OAAA,MAAA,KAAJ,UAAA,EAAkC;AAChCC,IAAAA,UAAU,GAAGC,UAAAA,KAAK;AAAA,aAChBH,MAAM,CAANA,KAAM,CAANA,IAAAA,MAAAA,IAA4B,CAACG,KAAK,CAAN,SAA5BH,IAAgD,CAACG,KAAK,CADxDD,IAAkB;AAAA,KAAlBA;AADF,GAAA,MAGO;AACLA,IAAAA,UAAU,GAAG;AAAA,UAAC,SAAD,SAAC,SAAD;AAAA,UAAcE,IAAd,SAAcA,IAAd;AAAA,aACXJ,MAAM,IAANA,MAAAA,IAAqB,CAAA,SAArBA,IAAmC,CADrCE,IAAa;AAAA,KAAbA;AAED;;AAED,SAAOG,MAAM,CAAA,UAAA,EAAaC,eAAe,CAAzC,UAAyC,CAA5B,CAAb;AAVF,CAAA,C,CAaA;AACA;AACA;;;AACA,IAAMC,YAAY,GAAGC,UAAAA,QAAQ;AAAA,SAC3BC,QAAQ,CAAC;AAAA;;AAAA,QAAC,IAAD,SAAC,IAAD;AAAA,QAAC,SAAD,SAAC,SAAD;AAAA,QAAC,KAAD,SAAC,KAAD;AAAA,QAA8BC,IAA9B;AAAA,4EACP,QADO,IAA0C,IAA1C,mBAEJA,IAFI;AAAA,GAAD,CADmB;AAAA,CAA7B;;AAMA,IAAMC,kBAAkB,GAAG;AAAA,MAAGC,SAAH,SAAGA,SAAH;AAAA,SACzBC,SAAS,CAAC;AACRC,IAAAA,iBADQ,cACY;AAAA,UACVC,OADU,GACE,KAApB,KADkB,CACVA,OADU;;AAGlB,UAAA,OAAA,EAAa;AACXC,QAAAA,kBAAkB,CAAlBA,WAAAA,CAAAA,SAAAA,EAAAA,OAAAA;AACD;AANK,KAAA;AAQRC,IAAAA,oBARQ,cAQe;AAAA,UACbF,OADa,GACD,KAApB,KADqB,CACbA,OADa;;AAErB,UAAA,OAAA,EAAa;AACXC,QAAAA,kBAAkB,CAAlBA,cAAAA,CAAAA,SAAAA,EAAAA,OAAAA;AACD;AACF;AAbO,GAAD,CADgB;AAAA,CAA3B,C,CAiBA;AACA;AACA;AACA;;;AACA,IAAME,sBAAsB,GAAG,wBAAA,mBAAA,EAI1B;AAAA,MAHDN,SAGC,SAHDA,SAGC;AAAA,MAFDO,QAEC,SAFDA,QAEC;AACH,MAAMC,2BAA2B,GAAGC,mBAAmB,IAAI,CAAvBA,QAAAA,IAAoCC,MAAM,CAA9E,MAAA;;AAEA,MAAI,CAAJ,2BAAA,EAAkC;AAChC,WAAOC,UAAAA,CAAC;AAAA,aAAR,CAAQ;AAAA,KAAR;AACD;;AAED,SAAOV,SAAS,CAAC;AACfC,IAAAA,iBADe,cACK;AAClBU,MAAAA,iBAAiB,CAAA,SAAA,EAAjBA,mBAAiB,CAAjBA;AAFa,KAAA;AAIfP,IAAAA,oBAJe,cAIQ;AACrBQ,MAAAA,oBAAoB,CAApBA,SAAoB,CAApBA;AACD;AANc,GAAD,CAAhB;AAXF,CAAA;;AA8BA,IAAMC,eAAe,GAAG,UAAA,MAAA,EAAA,KAAA,EAAmB;AACzC,MAAI,OAAA,MAAA,KAAJ,UAAA,EAAkC;AAChC,WAAOC,MAAM,CAAb,KAAa,CAAb;AACD;;AACD,SAAA,MAAA;AAJF,CAAA;;AAOA,IAAMC,cAAc,GAAG,iBAUG;AAAA,MAVF,KAUE,SAVF,KAUE;AAAA,2BARxBD,MAQwB;AAAA,MARxBA,MAQwB,6BAVF,EAUE;AAAA,iCAPxBE,YAOwB;AAAA,MAPxBA,YAOwB,mCAPT;AAAE5B,IAAAA,MAAM,EAAE;AAAV,GAOS;AAAA,6BANxBO,QAMwB;AAAA,MANxBA,QAMwB,+BAVF,MAUE;AAAA,oCAJxBsB,gBAIwB;AAAA,MAJxBA,gBAIwB,sCAVF,IAUE;AAAA,gCAHxBC,WAGwB;AAAA,MAHxBA,WAGwB,kCAVF,KAUE;AAAA,oCAFxBV,mBAEwB;AAAA,MAFxBA,mBAEwB,sCAVF,KAUE;AAAA,MADxBW,IACwB,SADxBA,IACwB;AACxB,MAAA,aAAA;;AAEA,MAAI,OAAA,KAAA,KAAJ,UAAA,EAAiC;AAC/BC,IAAAA,aAAa,GAAG9B,UAAAA,KAAK;AAAA,aAAI+B,KAAK,CAALA,KAAK,CAALA,CAAAA,KAAAA,CAAmBR,eAAe,CAAA,MAAA,EAA3DO,KAA2D,CAAlCC,CAAJ;AAAA,KAArBD;AADF,GAAA,MAEO;AACLA,IAAAA,aAAa,GAAG9B,UAAAA,KAAK;AAAA,aAAI+B,KAAK,CAALA,KAAAA,CAAYR,eAAe,CAAA,MAAA,EAApDO,KAAoD,CAA3BC,CAAJ;AAAA,KAArBD;AACD;;AAED,MAAME,SAAS,GAAGC,OAAO,CACvBlB,sBAAsB,CAAA,KAAA,EAAA,YAAA,EADC,mBACD,CADC,EAEvBmB,SAAS,CAAA,aAAA;AAAkBC,IAAAA,aAAa,EAAf;AAAhB,KAA2CT,YAA3C,EAFc,EAGvBU,WAAW,CAHY,WAGZ,CAHY,EAIvBxC,4BAA4B,CAAA,gBAAA,EAJL,YAIK,CAJL,EAKvBQ,YAAY,CALW,QAKX,CALW,EAMvBI,kBAAkB,CANpB,KAMoB,CANK,CAAzB;;AASA,MAAA,IAAA,EAAU;AACR,WAAO6B,iBAAiB,CAAA,SAAA,EAAxB,IAAwB,CAAxB;AACD;;AAED,SAAA,SAAA;AAhCF,CAAA;;AAnGA,MAAA,CAAA,aAAA,CAsIA,cAtIA","sourcesContent":["// @flow\nimport { withQuery } from 'meteor/cultofcoders:grapher-react';\nimport {\n  mapProps,\n  compose,\n  branch,\n  renderComponent,\n  lifecycle,\n} from 'recompose';\nimport { withLoading } from '../../components/Loading';\nimport MissingDoc from '../../components/MissingDoc';\nimport ClientEventService from '../events/ClientEventService';\nimport {\n  addQueryToRefetch,\n  removeQueryToRefetch,\n} from '../methods/clientQueryManager';\nimport makeSkipContainer from './skipContainer';\n\n// render the missing doc component only when we want to\nconst makeRenderMissingDocIfNoData = (render: boolean = false, { single }) => {\n  let renderFunc;\n  if (typeof render === 'function') {\n    renderFunc = props =>\n      render(props) && single && (!props.isLoading && !props.data);\n  } else {\n    renderFunc = ({ isLoading, data }) =>\n      render && single && (!isLoading && !data);\n  }\n\n  return branch(renderFunc, renderComponent(MissingDoc));\n};\n\n// Use proper name for data, and remove unnecessary props from children\n// error should be thrown and catched by our errorboundaries anyways\n// or displayed by an alert\nconst makeMapProps = dataName =>\n  mapProps(({ data, isLoading, error, ...rest }) => ({\n    [dataName]: data,\n    ...rest,\n  }));\n\nconst withQueryRefetcher = ({ queryName }) =>\n  lifecycle({\n    componentDidMount() {\n      const { refetch } = this.props;\n\n      if (refetch) {\n        ClientEventService.addListener(queryName, refetch);\n      }\n    },\n    componentWillUnmount() {\n      const { refetch } = this.props;\n      if (refetch) {\n        ClientEventService.removeListener(queryName, refetch);\n      }\n    },\n  });\n\n// This adds all non-reactive queries on the window object, and removes them\n// when the query disappears\n// These queries can then all be refreshed from `clientMethodsConfig`\n// every time a method is called\nconst withGlobalQueryManager = (\n  { queryName },\n  { reactive },\n  refetchOnMethodCall,\n) => {\n  const shouldActivateGlobalRefetch = refetchOnMethodCall && !reactive && global.window;\n\n  if (!shouldActivateGlobalRefetch) {\n    return x => x;\n  }\n\n  return lifecycle({\n    componentDidMount() {\n      addQueryToRefetch(queryName, refetchOnMethodCall);\n    },\n    componentWillUnmount() {\n      removeQueryToRefetch(queryName);\n    },\n  });\n};\n\ntype withSmartQueryArgs = {\n  query: () => mixed,\n  params: (props: Object) => Object,\n  queryOptions?: { single: boolean },\n  dataName?: string,\n  renderMissingDoc?: boolean | Function,\n  smallLoader?: boolean,\n};\n\nconst calculateParams = (params, props) => {\n  if (typeof params === 'function') {\n    return params(props);\n  }\n  return params;\n};\n\nconst withSmartQuery = ({\n  query,\n  params = {},\n  queryOptions = { single: false },\n  dataName = 'data',\n  // used to bypass the missing doc component\n  renderMissingDoc = true,\n  smallLoader = false,\n  refetchOnMethodCall = 'all',\n  skip,\n}: withSmartQueryArgs) => {\n  let completeQuery;\n\n  if (typeof query === 'function') {\n    completeQuery = props => query(props).clone(calculateParams(params, props));\n  } else {\n    completeQuery = props => query.clone(calculateParams(params, props));\n  }\n\n  const container = compose(\n    withGlobalQueryManager(query, queryOptions, refetchOnMethodCall),\n    withQuery(completeQuery, { loadOnRefetch: false, ...queryOptions }),\n    withLoading(smallLoader),\n    makeRenderMissingDocIfNoData(renderMissingDoc, queryOptions),\n    makeMapProps(dataName),\n    withQueryRefetcher(query),\n  );\n\n  if (skip) {\n    return makeSkipContainer(container, skip);\n  }\n\n  return container;\n};\n\nexport default withSmartQuery;\n"]},"sourceType":"script","hash":"ef2073a0c8abcf5cbaa1129ad6db79a59370891f"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher-react/lib/withStaticQuery.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/cultofcoders:grapher-react/lib/withStaticQuery.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher-react/lib/withStaticQuery.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher-react/lib/withStaticQuery.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher-react/lib/withStaticQuery.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  default: () => withStaticQueryContainer\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet getDisplayName;\nmodule.link(\"./getDisplayName\", {\n  default(v) {\n    getDisplayName = v;\n  }\n\n}, 1);\n\nfunction withStaticQueryContainer(config) {\n  return function (WrappedComponent) {\n    /**\n     * We use it like this so we can have naming inside React Dev Tools\n     * This is a standard pattern in HOCs\n     */\n    class GrapherStaticQueryContainer extends React.Component {\n      constructor() {\n        super(...arguments);\n        this.state = {\n          isLoading: true,\n          error: null,\n          data: []\n        };\n\n        this.refetch = () => {\n          const {\n            loadOnRefetch = true\n          } = config;\n          const {\n            query\n          } = this.props;\n\n          if (loadOnRefetch) {\n            this.setState({\n              isLoading: true\n            }, () => {\n              this.fetch(query);\n            });\n          } else {\n            this.fetch(query);\n          }\n        };\n      }\n\n      componentWillReceiveProps(nextProps) {\n        const {\n          query\n        } = nextProps;\n\n        if (!config.shouldRefetch) {\n          this.fetch(query);\n        } else if (config.shouldRefetch(this.props, nextProps)) {\n          this.fetch(query);\n        }\n      }\n\n      componentDidMount() {\n        const {\n          query,\n          config\n        } = this.props;\n        this.fetch(query);\n\n        if (config.pollingMs) {\n          this.pollingInterval = setInterval(() => {\n            this.fetch(query);\n          }, config.pollingMs);\n        }\n      }\n\n      componentWillUnmount() {\n        this.pollingInterval && clearInterval(this.pollingInterval);\n      }\n\n      fetch(query) {\n        query.fetch((error, data) => {\n          if (error) {\n            this.setState({\n              error,\n              data: [],\n              isLoading: false\n            });\n          } else {\n            this.setState({\n              error: null,\n              data,\n              isLoading: false\n            });\n          }\n        });\n      }\n\n      render() {\n        const {\n          config,\n          props,\n          query\n        } = this.props;\n        return React.createElement(WrappedComponent, {\n          grapher: this.state,\n          config,\n          query,\n          props: (0, _objectSpread2.default)({}, props, {\n            refetch: this.refetch\n          })\n        });\n      }\n\n    }\n\n    GrapherStaticQueryContainer.displayName = \"StaticQuery(\".concat(getDisplayName(WrappedComponent), \")\");\n    return GrapherStaticQueryContainer;\n  };\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher-react/lib/withStaticQuery.js"],"names":["module","export","default","withStaticQueryContainer","React","link","v","getDisplayName","config","WrappedComponent","GrapherStaticQueryContainer","Component","state","isLoading","error","data","refetch","loadOnRefetch","query","props","setState","fetch","componentWillReceiveProps","nextProps","shouldRefetch","componentDidMount","pollingMs","pollingInterval","setInterval","componentWillUnmount","clearInterval","render","createElement","grapher","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport getDisplayName from './getDisplayName';\n\nexport default function withStaticQueryContainer(config) {\n    return function(WrappedComponent) {\n        /**\n         * We use it like this so we can have naming inside React Dev Tools\n         * This is a standard pattern in HOCs\n         */\n        class GrapherStaticQueryContainer extends React.Component {\n            state = {\n                isLoading: true,\n                error: null,\n                data: [],\n            };\n\n            componentWillReceiveProps(nextProps) {\n                const { query } = nextProps;\n                \n                if (!config.shouldRefetch) {\n                    this.fetch(query);\n                } else if (config.shouldRefetch(this.props, nextProps)) {\n                    this.fetch(query);\n                }\n            }\n\n            componentDidMount() {\n                const { query, config } = this.props;\n                this.fetch(query);\n\n                if (config.pollingMs) {\n                    this.pollingInterval = setInterval(() => {\n                        this.fetch(query);\n                    }, config.pollingMs);\n                }\n            }\n\n            componentWillUnmount() {\n                this.pollingInterval && clearInterval(this.pollingInterval);\n            }\n\n            fetch(query) {\n                query.fetch((error, data) => {\n                    if (error) {\n                        this.setState({\n                            error,\n                            data: [],\n                            isLoading: false,\n                        });\n                    } else {\n                        this.setState({\n                            error: null,\n                            data,\n                            isLoading: false,\n                        });\n                    }\n                });\n            }\n\n            refetch = () => {\n                const { loadOnRefetch = true } = config;\n                const { query } = this.props;\n\n                if (loadOnRefetch) {\n                    this.setState({ isLoading: true }, () => {\n                        this.fetch(query);\n                    });\n                } else {\n                    this.fetch(query);\n                }\n            };\n\n            render() {\n                const { config, props, query } = this.props;\n\n                return React.createElement(WrappedComponent, {\n                    grapher: this.state,\n                    config,\n                    query,\n                    props: { ...props, refetch: this.refetch },\n                });\n            }\n        }\n\n        GrapherStaticQueryContainer.displayName = `StaticQuery(${getDisplayName(\n            WrappedComponent,\n        )})`;\n\n        return GrapherStaticQueryContainer;\n    };\n}\n"]},"sourceType":"script","hash":"700cbbe9f8ff5e3820b12cc6da64f38a994feb6f"}

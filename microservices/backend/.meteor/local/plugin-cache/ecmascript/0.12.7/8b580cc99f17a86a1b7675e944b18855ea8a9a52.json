{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/memoizeOne/memoizeOne.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/memoizeOne/memoizeOne.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/memoizeOne/memoizeOne.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/memoizeOne/memoizeOne.js"],"names":["areInputsEqual","EqualityFn","newArgs","lastArgs","memoizeOne","resultFn","ResultFn","isEqual","lastThis","lastResult","calledOnce","result","apply"],"mappings":"AAAA;AACA,OAAOA,cAAP;AAEA,OAAO,KAAKC,UAAL,GAAkB,CAACC,OAAO,EAAE,OAAV,EAAmBC,QAAQ,EAAE,OAA7B,KAAyC,OAA3D,C,CAEP;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,SAAQ,CAAC,QAAQ,EAAE,IACnC,KADmC,KACzB,KADc,CAAR,CAEjBC,QAAQ,EAAEC,QAFO,EAGjBC,OAAoB,CAAZ,EAAEN,UAAU,GAAGD,cAHN,CAIlB,EAAEM,QAJgB,CAIP;AACV,MAAIE,QAAQ,EAAE,KAAd;AACA,MAAIL,QAAQ,EAAE,OAAO,GAAG,EAAxB;AACA,MAAIM,UAAU,EAAE,KAAhB;AACA,MAAIC,UAAU,EAAE,OAAO,GAAG,KAA1B,CAJU,CAMV;;AACA,QAAMC,MAAM,GAAG,UAAU,GAAGT,OAAO,EAAE,OAAtB,EAA+B;AAC5C,QAAIQ,UAAU,IAAIF,QAAQ,KAAK,IAA3B,IAAmCD,OAAO,CAACL,OAAD,EAAUC,QAAV,CAA9C,EAAmE;AACjE,aAAOM,UAAP;AACD,KAH2C,CAK5C;AACA;AACA;;;AACAA,IAAAA,UAAU,GAAGJ,QAAQ,CAACO,KAAT,CAAe,IAAf,EAAqBV,OAArB,CAAb;AACAQ,IAAAA,UAAU,GAAG,IAAb;AACAF,IAAAA,QAAQ,GAAG,IAAX;AACAL,IAAAA,QAAQ,GAAGD,OAAX;AACA,WAAOO,UAAP;AACD,GAbD;;AAeA,SAAQ,CAAAE,MAAM,EAAE,GAAF,CAAd;AACD,CA3BD;;AA6BA,eAAeP,UAAf","sourcesContent":["// @flow\nimport areInputsEqual from './areInputsEqual';\n\nexport type EqualityFn = (newArgs: mixed[], lastArgs: mixed[]) => boolean;\n\n// <ResultFn: (...any[]) => mixed>\n// The purpose of this typing is to ensure that the returned memoized\n// function has the same type as the provided function (`resultFn`).\n// ResultFn:        Generic type (which is the same as the resultFn).\n// (...any[]): Accepts any length of arguments - and they are not checked\n// mixed:           The result can be anything but needs to be checked before usage\nconst memoizeOne = function<ResultFn: (\n...any[]) => mixed>(\n  resultFn: ResultFn,\n  isEqual?: EqualityFn = areInputsEqual,\n): ResultFn {\n  let lastThis: mixed;\n  let lastArgs: mixed[] = [];\n  let lastResult: mixed;\n  let calledOnce: boolean = false;\n\n  // breaking cache when context (this) or arguments change\n  const result = function (...newArgs: mixed[]) {\n    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n      return lastResult;\n    }\n\n    // Throwing during an assignment aborts the assignment: https://codepen.io/alexreardon/pen/RYKoaz\n    // Doing the lastResult assignment first so that if it throws\n    // nothing will be overwritten\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n\n  return (result: any);\n};\n\nexport default memoizeOne;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/memoizeOne/memoizeOne.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/memoizeOne/memoizeOne.js"}},"code":"let areInputsEqual;\nmodule.link(\"./areInputsEqual\", {\n  default(v) {\n    areInputsEqual = v;\n  }\n\n}, 0);\n\n// <ResultFn: (...any[]) => mixed>\n// The purpose of this typing is to ensure that the returned memoized\n// function has the same type as the provided function (`resultFn`).\n// ResultFn:        Generic type (which is the same as the resultFn).\n// (...any[]): Accepts any length of arguments - and they are not checked\n// mixed:           The result can be anything but needs to be checked before usage\nconst memoizeOne = function (resultFn) {\n  let isEqual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : areInputsEqual;\n  let lastThis;\n  let lastArgs = [];\n  let lastResult;\n  let calledOnce = false; // breaking cache when context (this) or arguments change\n\n  const result = function () {\n    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n\n    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n      return lastResult;\n    } // Throwing during an assignment aborts the assignment: https://codepen.io/alexreardon/pen/RYKoaz\n    // Doing the lastResult assignment first so that if it throws\n    // nothing will be overwritten\n\n\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n\n  return result;\n};\n\nmodule.exportDefault(memoizeOne);","map":{"version":3,"sources":["imports/core/utils/memoizeOne/memoizeOne.js"],"names":["memoizeOne","isEqual","lastArgs","calledOnce","result","lastThis","lastResult","resultFn"],"mappings":"AAAA,IAAA,cAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAU,GAAG,UAAA,QAAA,EAIP;AAAA,MADVC,OACU,uEAJO,cAIP;AACV,MAAA,QAAA;AACA,MAAIC,QAAiB,GAArB,EAAA;AACA,MAAA,UAAA;AACA,MAAIC,UAAmB,GAJb,KAIV,CAJU,CAMV;;AACA,QAAMC,MAAM,GAAG,YAA+B;AAAA,sCAA/B,OAA+B;AAA/B,MAAA,OAA+B;AAAA;;AAC5C,QAAID,UAAU,IAAIE,QAAQ,KAAtBF,IAAAA,IAAmCF,OAAO,CAAA,OAAA,EAA9C,QAA8C,CAA9C,EAAmE;AACjE,aAAA,UAAA;AAF0C,KAAA,CAK5C;AACA;AACA;;;AACAK,IAAAA,UAAU,GAAGC,QAAQ,CAARA,KAAAA,CAAAA,IAAAA,EAAbD,OAAaC,CAAbD;AACAH,IAAAA,UAAU,GAAVA,IAAAA;AACAE,IAAAA,QAAQ,GAARA,IAAAA;AACAH,IAAAA,QAAQ,GAARA,OAAAA;AACA,WAAA,UAAA;AAZF,GAAA;;AAeA,SAAA,MAAA;AA1BF,CAAA;;AAXA,MAAA,CAAA,aAAA,CAwCA,UAxCA","sourcesContent":["// @flow\nimport areInputsEqual from './areInputsEqual';\n\nexport type EqualityFn = (newArgs: mixed[], lastArgs: mixed[]) => boolean;\n\n// <ResultFn: (...any[]) => mixed>\n// The purpose of this typing is to ensure that the returned memoized\n// function has the same type as the provided function (`resultFn`).\n// ResultFn:        Generic type (which is the same as the resultFn).\n// (...any[]): Accepts any length of arguments - and they are not checked\n// mixed:           The result can be anything but needs to be checked before usage\nconst memoizeOne = function<ResultFn: (\n...any[]) => mixed>(\n  resultFn: ResultFn,\n  isEqual?: EqualityFn = areInputsEqual,\n): ResultFn {\n  let lastThis: mixed;\n  let lastArgs: mixed[] = [];\n  let lastResult: mixed;\n  let calledOnce: boolean = false;\n\n  // breaking cache when context (this) or arguments change\n  const result = function (...newArgs: mixed[]) {\n    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n      return lastResult;\n    }\n\n    // Throwing during an assignment aborts the assignment: https://codepen.io/alexreardon/pen/RYKoaz\n    // Doing the lastResult assignment first so that if it throws\n    // nothing will be overwritten\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n\n  return (result: any);\n};\n\nexport default memoizeOne;\n"]},"sourceType":"script","hash":"8b580cc99f17a86a1b7675e944b18855ea8a9a52"}

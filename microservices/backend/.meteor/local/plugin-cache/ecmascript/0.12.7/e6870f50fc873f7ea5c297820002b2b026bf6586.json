{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lots/server/test/LotService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/lots/server/test/LotService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lots/server/test/LotService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/lots/server/test/LotService.test.js"],"names":["expect","resetDatabase","Factory","generator","PromotionLotService","PromotionService","LotService","describe","beforeEach","promotionLotId","lotId","lots","_id","properties","promotionLots","propertyLinks","it","update","object","name","lot","get","to","equal","lotLinks","length","id","newLotLinks","promotionId","create","promotion","collection","find","count","deep","remove"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport generator from '../../../factories';\nimport PromotionLotService from '../../../promotionLots/server/PromotionLotService';\nimport PromotionService from '../../../promotions/server/PromotionService';\nimport LotService from '../LotService';\n\ndescribe('LotService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('lotUpdate', () => {\n    let promotionLotId;\n    let lotId;\n\n    beforeEach(() => {\n      lotId = 'lotId';\n      promotionLotId = 'pLotId';\n      generator({\n        lots: { _id: lotId },\n        properties: { _id: 'propertyId' },\n        promotionLots: {\n          _id: promotionLotId,\n          propertyLinks: [{ _id: 'propertyId' }],\n          lots: { _id: lotId },\n        },\n      });\n    });\n\n    it('updates the name', () => {\n      LotService.update({ lotId, object: { name: 'testname' } });\n      const lot = LotService.get(lotId);\n      expect(lot.name).to.equal('testname');\n    });\n\n    it('removes the lot link when promotionLotId is null', () => {\n      LotService.update({ lotId, object: { promotionLotId: null } });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(0);\n    });\n\n    it('adds a new link', () => {\n      const id = 'promotionLotId2';\n      generator({\n        properties: { _id: 'propertyId2' },\n        promotionLots: { _id: id, propertyLinks: [{ _id: 'propertyId2' }] },\n      });\n      LotService.update({\n        lotId,\n        object: { promotionLotId: id },\n      });\n      const { lotLinks } = PromotionLotService.get(promotionLotId);\n      const { lotLinks: newLotLinks } = PromotionLotService.get(id);\n\n      expect(newLotLinks.length).to.equal(1);\n      expect(newLotLinks[0]._id).to.equal(lotId);\n      expect(lotLinks.length).to.equal(0);\n    });\n\n    it('does not remove the link if no new link is provided', () => {\n      LotService.update({ lotId, object: { name: 'testname' } });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(1);\n      expect(PromotionLotService.get(promotionLotId).lotLinks[0]._id).to.equal(lotId);\n    });\n\n    it('adds a new link when no current link is present', () => {\n      // Removes current link\n      LotService.update({\n        lotId,\n        object: { promotionLotId: null },\n      });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(0);\n\n      // Adds link again\n      LotService.update({\n        lotId,\n        object: { promotionLotId },\n      });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(1);\n      expect(PromotionLotService.get(promotionLotId).lotLinks[0]._id).to.equal(lotId);\n    });\n  });\n\n  describe('remove', () => {\n    let promotionId;\n    let lotId;\n\n    beforeEach(() => {\n      lotId = Factory.create('lot')._id;\n      promotionId = Factory.create('promotion', {\n        _id: 'promotion',\n        lotLinks: [{ _id: lotId }],\n      })._id;\n    });\n\n    it('removes the link from the promotion', () => {\n      let promotion = PromotionService.get(promotionId);\n\n      expect(LotService.collection.find({}).count()).to.equal(1);\n      expect(promotion.lotLinks).to.deep.equal([{ _id: lotId }]);\n\n      LotService.remove(lotId);\n\n      expect(LotService.collection.find({}).count()).to.equal(0);\n      promotion = PromotionService.get(promotionId);\n      expect(promotion.lotLinks).to.deep.equal([]);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lots/server/test/LotService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/lots/server/test/LotService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 3);\nlet PromotionLotService;\nmodule.link(\"../../../promotionLots/server/PromotionLotService\", {\n  default(v) {\n    PromotionLotService = v;\n  }\n\n}, 4);\nlet PromotionService;\nmodule.link(\"../../../promotions/server/PromotionService\", {\n  default(v) {\n    PromotionService = v;\n  }\n\n}, 5);\nlet LotService;\nmodule.link(\"../LotService\", {\n  default(v) {\n    LotService = v;\n  }\n\n}, 6);\ndescribe('LotService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('lotUpdate', () => {\n    let promotionLotId;\n    let lotId;\n    beforeEach(() => {\n      lotId = 'lotId';\n      promotionLotId = 'pLotId';\n      generator({\n        lots: {\n          _id: lotId\n        },\n        properties: {\n          _id: 'propertyId'\n        },\n        promotionLots: {\n          _id: promotionLotId,\n          propertyLinks: [{\n            _id: 'propertyId'\n          }],\n          lots: {\n            _id: lotId\n          }\n        }\n      });\n    });\n    it('updates the name', () => {\n      LotService.update({\n        lotId,\n        object: {\n          name: 'testname'\n        }\n      });\n      const lot = LotService.get(lotId);\n      expect(lot.name).to.equal('testname');\n    });\n    it('removes the lot link when promotionLotId is null', () => {\n      LotService.update({\n        lotId,\n        object: {\n          promotionLotId: null\n        }\n      });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(0);\n    });\n    it('adds a new link', () => {\n      const id = 'promotionLotId2';\n      generator({\n        properties: {\n          _id: 'propertyId2'\n        },\n        promotionLots: {\n          _id: id,\n          propertyLinks: [{\n            _id: 'propertyId2'\n          }]\n        }\n      });\n      LotService.update({\n        lotId,\n        object: {\n          promotionLotId: id\n        }\n      });\n      const {\n        lotLinks\n      } = PromotionLotService.get(promotionLotId);\n      const {\n        lotLinks: newLotLinks\n      } = PromotionLotService.get(id);\n      expect(newLotLinks.length).to.equal(1);\n      expect(newLotLinks[0]._id).to.equal(lotId);\n      expect(lotLinks.length).to.equal(0);\n    });\n    it('does not remove the link if no new link is provided', () => {\n      LotService.update({\n        lotId,\n        object: {\n          name: 'testname'\n        }\n      });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(1);\n      expect(PromotionLotService.get(promotionLotId).lotLinks[0]._id).to.equal(lotId);\n    });\n    it('adds a new link when no current link is present', () => {\n      // Removes current link\n      LotService.update({\n        lotId,\n        object: {\n          promotionLotId: null\n        }\n      });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(0); // Adds link again\n\n      LotService.update({\n        lotId,\n        object: {\n          promotionLotId\n        }\n      });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(1);\n      expect(PromotionLotService.get(promotionLotId).lotLinks[0]._id).to.equal(lotId);\n    });\n  });\n  describe('remove', () => {\n    let promotionId;\n    let lotId;\n    beforeEach(() => {\n      lotId = Factory.create('lot')._id;\n      promotionId = Factory.create('promotion', {\n        _id: 'promotion',\n        lotLinks: [{\n          _id: lotId\n        }]\n      })._id;\n    });\n    it('removes the link from the promotion', () => {\n      let promotion = PromotionService.get(promotionId);\n      expect(LotService.collection.find({}).count()).to.equal(1);\n      expect(promotion.lotLinks).to.deep.equal([{\n        _id: lotId\n      }]);\n      LotService.remove(lotId);\n      expect(LotService.collection.find({}).count()).to.equal(0);\n      promotion = PromotionService.get(promotionId);\n      expect(promotion.lotLinks).to.deep.equal([]);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/lots/server/test/LotService.test.js"],"names":["describe","beforeEach","resetDatabase","lotId","promotionLotId","generator","lots","_id","properties","promotionLots","propertyLinks","it","LotService","object","name","lot","expect","PromotionLotService","id","lotLinks","newLotLinks","Factory","promotionId","promotion","PromotionService"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport generator from '../../../factories';\nimport PromotionLotService from '../../../promotionLots/server/PromotionLotService';\nimport PromotionService from '../../../promotions/server/PromotionService';\nimport LotService from '../LotService';\n\ndescribe('LotService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('lotUpdate', () => {\n    let promotionLotId;\n    let lotId;\n\n    beforeEach(() => {\n      lotId = 'lotId';\n      promotionLotId = 'pLotId';\n      generator({\n        lots: { _id: lotId },\n        properties: { _id: 'propertyId' },\n        promotionLots: {\n          _id: promotionLotId,\n          propertyLinks: [{ _id: 'propertyId' }],\n          lots: { _id: lotId },\n        },\n      });\n    });\n\n    it('updates the name', () => {\n      LotService.update({ lotId, object: { name: 'testname' } });\n      const lot = LotService.get(lotId);\n      expect(lot.name).to.equal('testname');\n    });\n\n    it('removes the lot link when promotionLotId is null', () => {\n      LotService.update({ lotId, object: { promotionLotId: null } });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(0);\n    });\n\n    it('adds a new link', () => {\n      const id = 'promotionLotId2';\n      generator({\n        properties: { _id: 'propertyId2' },\n        promotionLots: { _id: id, propertyLinks: [{ _id: 'propertyId2' }] },\n      });\n      LotService.update({\n        lotId,\n        object: { promotionLotId: id },\n      });\n      const { lotLinks } = PromotionLotService.get(promotionLotId);\n      const { lotLinks: newLotLinks } = PromotionLotService.get(id);\n\n      expect(newLotLinks.length).to.equal(1);\n      expect(newLotLinks[0]._id).to.equal(lotId);\n      expect(lotLinks.length).to.equal(0);\n    });\n\n    it('does not remove the link if no new link is provided', () => {\n      LotService.update({ lotId, object: { name: 'testname' } });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(1);\n      expect(PromotionLotService.get(promotionLotId).lotLinks[0]._id).to.equal(lotId);\n    });\n\n    it('adds a new link when no current link is present', () => {\n      // Removes current link\n      LotService.update({\n        lotId,\n        object: { promotionLotId: null },\n      });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(0);\n\n      // Adds link again\n      LotService.update({\n        lotId,\n        object: { promotionLotId },\n      });\n      expect(PromotionLotService.get(promotionLotId).lotLinks.length).to.equal(1);\n      expect(PromotionLotService.get(promotionLotId).lotLinks[0]._id).to.equal(lotId);\n    });\n  });\n\n  describe('remove', () => {\n    let promotionId;\n    let lotId;\n\n    beforeEach(() => {\n      lotId = Factory.create('lot')._id;\n      promotionId = Factory.create('promotion', {\n        _id: 'promotion',\n        lotLinks: [{ _id: lotId }],\n      })._id;\n    });\n\n    it('removes the link from the promotion', () => {\n      let promotion = PromotionService.get(promotionId);\n\n      expect(LotService.collection.find({}).count()).to.equal(1);\n      expect(promotion.lotLinks).to.deep.equal([{ _id: lotId }]);\n\n      LotService.remove(lotId);\n\n      expect(LotService.collection.find({}).count()).to.equal(0);\n      promotion = PromotionService.get(promotionId);\n      expect(promotion.lotLinks).to.deep.equal([]);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"e6870f50fc873f7ea5c297820002b2b026bf6586"}

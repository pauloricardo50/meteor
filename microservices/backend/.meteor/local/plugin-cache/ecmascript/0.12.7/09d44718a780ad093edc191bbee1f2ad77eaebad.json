{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/notifications/server/test/NotificationService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/notifications/server/test/NotificationService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/notifications/server/test/NotificationService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/notifications/server/test/NotificationService.test.js"],"names":["expect","resetDatabase","TASK_STATUS","TaskService","ActivityService","ACTIVITY_TYPES","NotificationService","generator","describe","tomorrow","Date","setDate","getDate","yesterday","beforeEach","it","users","_id","tasks","_factory","status","ACTIVE","assigneeLink","COMPLETED","dueAt","addTaskNotifications","notifications","fetch","taskLink","length","to","equal","recipientLinks","$options","sort","createdAt","map","deep","update","taskId","object","activities","date","createdBy","title","type","OTHER","activityLink","_update","id"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { TASK_STATUS } from 'core/api/tasks/taskConstants';\nimport TaskService from 'core/api/tasks/server/TaskService';\nimport ActivityService from 'core/api/activities/server/ActivityService';\nimport { ACTIVITY_TYPES } from 'core/api/activities/activityConstants';\nimport NotificationService from '../NotificationService';\nimport generator from '../../../factories/index';\n\ndescribe('NotificationService', () => {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('addTaskNotifications', () => {\n    it('adds a notification for active tasks with dueAt in the past', () => {\n      generator({\n        users: { _id: 'userId' },\n        tasks: [\n          {\n            _factory: null,\n            status: TASK_STATUS.ACTIVE,\n            assigneeLink: { _id: 'userId' },\n          },\n          {\n            _factory: null,\n            status: TASK_STATUS.COMPLETED,\n            assigneeLink: { _id: 'userId' },\n          },\n          {\n            _factory: null,\n            status: TASK_STATUS.ACTIVE,\n            dueAt: tomorrow,\n            assigneeLink: { _id: 'userId' },\n          },\n          {\n            _factory: null,\n            _id: 'a',\n            status: TASK_STATUS.ACTIVE,\n            dueAt: yesterday,\n            assigneeLink: { _id: 'userId' },\n          },\n        ],\n      });\n\n      NotificationService.addTaskNotifications();\n      const notifications = NotificationService.fetch({ taskLink: 1 });\n\n      expect(notifications.length).to.equal(1);\n      expect(notifications[0].taskLink._id).to.equal('a');\n    });\n\n    it('does not add a notification if there is already one', () => {\n      generator({\n        users: { _id: 'userId' },\n        tasks: [\n          {\n            _factory: null,\n            status: TASK_STATUS.ACTIVE,\n            assigneeLink: { _id: 'userId' },\n            dueAt: yesterday,\n            _id: 'a',\n          },\n          {\n            _factory: null,\n            status: TASK_STATUS.ACTIVE,\n            assigneeLink: { _id: 'userId' },\n            dueAt: yesterday,\n            _id: 'b',\n          },\n        ],\n        notifications: {\n          _factory: null,\n          recipientLinks: [{ _id: 'userId' }],\n          taskLink: { _id: 'a' },\n          _id: 'old',\n        },\n      });\n\n      NotificationService.addTaskNotifications();\n      const notifications = NotificationService.fetch({\n        $options: { sort: { createdAt: 1 } },\n        taskLink: 1,\n      });\n\n      expect(notifications.length).to.equal(2);\n      expect(notifications[0]._id).to.equal('old');\n      expect(notifications[0].taskLink._id).to.equal('a');\n      expect(notifications[1].taskLink._id).to.equal('b');\n    });\n\n    it('adds all admins on a due task notification if no one is assigned to it', () => {\n      generator({\n        users: [\n          { _id: 'userId1', _factory: 'admin' },\n          { _id: 'userId2', _factory: 'admin' },\n          { _id: 'userId3', _factory: 'admin' },\n          { _id: 'userId4', _factory: 'user' },\n          { _id: 'userId5', _factory: 'pro' },\n          { _id: 'userId6', _factory: 'dev' },\n        ],\n        tasks: {\n          _factory: null,\n          status: TASK_STATUS.ACTIVE,\n          dueAt: yesterday,\n          _id: 'a',\n        },\n      });\n\n      NotificationService.addTaskNotifications();\n      const notifications = NotificationService.fetch({\n        taskLink: 1,\n        recipientLinks: 1,\n      });\n\n      expect(notifications.length).to.equal(1);\n      expect(notifications[0].recipientLinks.length).to.equal(3);\n      expect(notifications[0].recipientLinks.map(({ _id }) => _id)).to.deep.equal(['userId1', 'userId2', 'userId3']);\n    });\n  });\n\n  describe('notification retirement', () => {\n    it('removes an existing notification if a tasks due date is changed', () => {\n      generator({\n        users: { _id: 'userId' },\n        tasks: [\n          {\n            _factory: null,\n            status: TASK_STATUS.ACTIVE,\n            assigneeLink: { _id: 'userId' },\n            dueAt: yesterday,\n            _id: 'a',\n          },\n        ],\n        notifications: {\n          _factory: null,\n          recipientLinks: [{ _id: 'userId' }],\n          taskLink: { _id: 'a' },\n          _id: 'old',\n        },\n      });\n\n      TaskService.update({ taskId: 'a', object: { dueAt: new Date() } });\n      const notifications = NotificationService.fetch({});\n\n      expect(notifications.length).to.equal(0);\n    });\n\n    it(\"removes an existing notification if an activity's date is changed\", () => {\n      generator({\n        users: { _id: 'userId' },\n        activities: [\n          {\n            _factory: null,\n            date: yesterday,\n            _id: 'a',\n            createdBy: 'userId',\n            title: 'Hello',\n            type: ACTIVITY_TYPES.OTHER,\n          },\n        ],\n        notifications: {\n          _factory: null,\n          activityLink: { _id: 'a' },\n          _id: 'old',\n          recipientLinks: [{ _id: 'userId' }],\n        },\n      });\n\n      ActivityService._update({ id: 'a', object: { date: new Date() } });\n      const notifications = NotificationService.fetch({});\n\n      expect(notifications.length).to.equal(0);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/notifications/server/test/NotificationService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/notifications/server/test/NotificationService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet TASK_STATUS;\nmodule.link(\"../../../tasks/taskConstants\", {\n  TASK_STATUS(v) {\n    TASK_STATUS = v;\n  }\n\n}, 2);\nlet TaskService;\nmodule.link(\"../../../tasks/server/TaskService\", {\n  default(v) {\n    TaskService = v;\n  }\n\n}, 3);\nlet ActivityService;\nmodule.link(\"../../../activities/server/ActivityService\", {\n  default(v) {\n    ActivityService = v;\n  }\n\n}, 4);\nlet ACTIVITY_TYPES;\nmodule.link(\"../../../activities/activityConstants\", {\n  ACTIVITY_TYPES(v) {\n    ACTIVITY_TYPES = v;\n  }\n\n}, 5);\nlet NotificationService;\nmodule.link(\"../NotificationService\", {\n  default(v) {\n    NotificationService = v;\n  }\n\n}, 6);\nlet generator;\nmodule.link(\"../../../factories/index\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 7);\ndescribe('NotificationService', () => {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('addTaskNotifications', () => {\n    it('adds a notification for active tasks with dueAt in the past', () => {\n      generator({\n        users: {\n          _id: 'userId'\n        },\n        tasks: [{\n          _factory: null,\n          status: TASK_STATUS.ACTIVE,\n          assigneeLink: {\n            _id: 'userId'\n          }\n        }, {\n          _factory: null,\n          status: TASK_STATUS.COMPLETED,\n          assigneeLink: {\n            _id: 'userId'\n          }\n        }, {\n          _factory: null,\n          status: TASK_STATUS.ACTIVE,\n          dueAt: tomorrow,\n          assigneeLink: {\n            _id: 'userId'\n          }\n        }, {\n          _factory: null,\n          _id: 'a',\n          status: TASK_STATUS.ACTIVE,\n          dueAt: yesterday,\n          assigneeLink: {\n            _id: 'userId'\n          }\n        }]\n      });\n      NotificationService.addTaskNotifications();\n      const notifications = NotificationService.fetch({\n        taskLink: 1\n      });\n      expect(notifications.length).to.equal(1);\n      expect(notifications[0].taskLink._id).to.equal('a');\n    });\n    it('does not add a notification if there is already one', () => {\n      generator({\n        users: {\n          _id: 'userId'\n        },\n        tasks: [{\n          _factory: null,\n          status: TASK_STATUS.ACTIVE,\n          assigneeLink: {\n            _id: 'userId'\n          },\n          dueAt: yesterday,\n          _id: 'a'\n        }, {\n          _factory: null,\n          status: TASK_STATUS.ACTIVE,\n          assigneeLink: {\n            _id: 'userId'\n          },\n          dueAt: yesterday,\n          _id: 'b'\n        }],\n        notifications: {\n          _factory: null,\n          recipientLinks: [{\n            _id: 'userId'\n          }],\n          taskLink: {\n            _id: 'a'\n          },\n          _id: 'old'\n        }\n      });\n      NotificationService.addTaskNotifications();\n      const notifications = NotificationService.fetch({\n        $options: {\n          sort: {\n            createdAt: 1\n          }\n        },\n        taskLink: 1\n      });\n      expect(notifications.length).to.equal(2);\n      expect(notifications[0]._id).to.equal('old');\n      expect(notifications[0].taskLink._id).to.equal('a');\n      expect(notifications[1].taskLink._id).to.equal('b');\n    });\n    it('adds all admins on a due task notification if no one is assigned to it', () => {\n      generator({\n        users: [{\n          _id: 'userId1',\n          _factory: 'admin'\n        }, {\n          _id: 'userId2',\n          _factory: 'admin'\n        }, {\n          _id: 'userId3',\n          _factory: 'admin'\n        }, {\n          _id: 'userId4',\n          _factory: 'user'\n        }, {\n          _id: 'userId5',\n          _factory: 'pro'\n        }, {\n          _id: 'userId6',\n          _factory: 'dev'\n        }],\n        tasks: {\n          _factory: null,\n          status: TASK_STATUS.ACTIVE,\n          dueAt: yesterday,\n          _id: 'a'\n        }\n      });\n      NotificationService.addTaskNotifications();\n      const notifications = NotificationService.fetch({\n        taskLink: 1,\n        recipientLinks: 1\n      });\n      expect(notifications.length).to.equal(1);\n      expect(notifications[0].recipientLinks.length).to.equal(3);\n      expect(notifications[0].recipientLinks.map(({\n        _id\n      }) => _id)).to.deep.equal(['userId1', 'userId2', 'userId3']);\n    });\n  });\n  describe('notification retirement', () => {\n    it('removes an existing notification if a tasks due date is changed', () => {\n      generator({\n        users: {\n          _id: 'userId'\n        },\n        tasks: [{\n          _factory: null,\n          status: TASK_STATUS.ACTIVE,\n          assigneeLink: {\n            _id: 'userId'\n          },\n          dueAt: yesterday,\n          _id: 'a'\n        }],\n        notifications: {\n          _factory: null,\n          recipientLinks: [{\n            _id: 'userId'\n          }],\n          taskLink: {\n            _id: 'a'\n          },\n          _id: 'old'\n        }\n      });\n      TaskService.update({\n        taskId: 'a',\n        object: {\n          dueAt: new Date()\n        }\n      });\n      const notifications = NotificationService.fetch({});\n      expect(notifications.length).to.equal(0);\n    });\n    it(\"removes an existing notification if an activity's date is changed\", () => {\n      generator({\n        users: {\n          _id: 'userId'\n        },\n        activities: [{\n          _factory: null,\n          date: yesterday,\n          _id: 'a',\n          createdBy: 'userId',\n          title: 'Hello',\n          type: ACTIVITY_TYPES.OTHER\n        }],\n        notifications: {\n          _factory: null,\n          activityLink: {\n            _id: 'a'\n          },\n          _id: 'old',\n          recipientLinks: [{\n            _id: 'userId'\n          }]\n        }\n      });\n\n      ActivityService._update({\n        id: 'a',\n        object: {\n          date: new Date()\n        }\n      });\n\n      const notifications = NotificationService.fetch({});\n      expect(notifications.length).to.equal(0);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/notifications/server/test/NotificationService.test.js"],"names":["describe","tomorrow","yesterday","beforeEach","resetDatabase","it","generator","users","_id","tasks","_factory","status","TASK_STATUS","assigneeLink","dueAt","NotificationService","notifications","taskLink","expect","recipientLinks","$options","sort","createdAt","TaskService","taskId","object","activities","date","createdBy","title","type","ACTIVITY_TYPES","OTHER","activityLink","ActivityService","id"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { TASK_STATUS } from 'core/api/tasks/taskConstants';\nimport TaskService from 'core/api/tasks/server/TaskService';\nimport ActivityService from 'core/api/activities/server/ActivityService';\nimport { ACTIVITY_TYPES } from 'core/api/activities/activityConstants';\nimport NotificationService from '../NotificationService';\nimport generator from '../../../factories/index';\n\ndescribe('NotificationService', () => {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('addTaskNotifications', () => {\n    it('adds a notification for active tasks with dueAt in the past', () => {\n      generator({\n        users: { _id: 'userId' },\n        tasks: [\n          {\n            _factory: null,\n            status: TASK_STATUS.ACTIVE,\n            assigneeLink: { _id: 'userId' },\n          },\n          {\n            _factory: null,\n            status: TASK_STATUS.COMPLETED,\n            assigneeLink: { _id: 'userId' },\n          },\n          {\n            _factory: null,\n            status: TASK_STATUS.ACTIVE,\n            dueAt: tomorrow,\n            assigneeLink: { _id: 'userId' },\n          },\n          {\n            _factory: null,\n            _id: 'a',\n            status: TASK_STATUS.ACTIVE,\n            dueAt: yesterday,\n            assigneeLink: { _id: 'userId' },\n          },\n        ],\n      });\n\n      NotificationService.addTaskNotifications();\n      const notifications = NotificationService.fetch({ taskLink: 1 });\n\n      expect(notifications.length).to.equal(1);\n      expect(notifications[0].taskLink._id).to.equal('a');\n    });\n\n    it('does not add a notification if there is already one', () => {\n      generator({\n        users: { _id: 'userId' },\n        tasks: [\n          {\n            _factory: null,\n            status: TASK_STATUS.ACTIVE,\n            assigneeLink: { _id: 'userId' },\n            dueAt: yesterday,\n            _id: 'a',\n          },\n          {\n            _factory: null,\n            status: TASK_STATUS.ACTIVE,\n            assigneeLink: { _id: 'userId' },\n            dueAt: yesterday,\n            _id: 'b',\n          },\n        ],\n        notifications: {\n          _factory: null,\n          recipientLinks: [{ _id: 'userId' }],\n          taskLink: { _id: 'a' },\n          _id: 'old',\n        },\n      });\n\n      NotificationService.addTaskNotifications();\n      const notifications = NotificationService.fetch({\n        $options: { sort: { createdAt: 1 } },\n        taskLink: 1,\n      });\n\n      expect(notifications.length).to.equal(2);\n      expect(notifications[0]._id).to.equal('old');\n      expect(notifications[0].taskLink._id).to.equal('a');\n      expect(notifications[1].taskLink._id).to.equal('b');\n    });\n\n    it('adds all admins on a due task notification if no one is assigned to it', () => {\n      generator({\n        users: [\n          { _id: 'userId1', _factory: 'admin' },\n          { _id: 'userId2', _factory: 'admin' },\n          { _id: 'userId3', _factory: 'admin' },\n          { _id: 'userId4', _factory: 'user' },\n          { _id: 'userId5', _factory: 'pro' },\n          { _id: 'userId6', _factory: 'dev' },\n        ],\n        tasks: {\n          _factory: null,\n          status: TASK_STATUS.ACTIVE,\n          dueAt: yesterday,\n          _id: 'a',\n        },\n      });\n\n      NotificationService.addTaskNotifications();\n      const notifications = NotificationService.fetch({\n        taskLink: 1,\n        recipientLinks: 1,\n      });\n\n      expect(notifications.length).to.equal(1);\n      expect(notifications[0].recipientLinks.length).to.equal(3);\n      expect(notifications[0].recipientLinks.map(({ _id }) => _id)).to.deep.equal(['userId1', 'userId2', 'userId3']);\n    });\n  });\n\n  describe('notification retirement', () => {\n    it('removes an existing notification if a tasks due date is changed', () => {\n      generator({\n        users: { _id: 'userId' },\n        tasks: [\n          {\n            _factory: null,\n            status: TASK_STATUS.ACTIVE,\n            assigneeLink: { _id: 'userId' },\n            dueAt: yesterday,\n            _id: 'a',\n          },\n        ],\n        notifications: {\n          _factory: null,\n          recipientLinks: [{ _id: 'userId' }],\n          taskLink: { _id: 'a' },\n          _id: 'old',\n        },\n      });\n\n      TaskService.update({ taskId: 'a', object: { dueAt: new Date() } });\n      const notifications = NotificationService.fetch({});\n\n      expect(notifications.length).to.equal(0);\n    });\n\n    it(\"removes an existing notification if an activity's date is changed\", () => {\n      generator({\n        users: { _id: 'userId' },\n        activities: [\n          {\n            _factory: null,\n            date: yesterday,\n            _id: 'a',\n            createdBy: 'userId',\n            title: 'Hello',\n            type: ACTIVITY_TYPES.OTHER,\n          },\n        ],\n        notifications: {\n          _factory: null,\n          activityLink: { _id: 'a' },\n          _id: 'old',\n          recipientLinks: [{ _id: 'userId' }],\n        },\n      });\n\n      ActivityService._update({ id: 'a', object: { date: new Date() } });\n      const notifications = NotificationService.fetch({});\n\n      expect(notifications.length).to.equal(0);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"09d44718a780ad093edc191bbee1f2ad77eaebad"}

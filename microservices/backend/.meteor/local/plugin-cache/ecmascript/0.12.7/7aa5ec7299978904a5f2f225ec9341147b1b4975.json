{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/test/promotionClientHelpers.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/api/promotions/test/promotionClientHelpers.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/test/promotionClientHelpers.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/api/promotions/test/promotionClientHelpers.spec.js"],"names":["expect","shouldAnonymize","getPromotionCustomerOwnerType","PROMOTION_INVITED_BY_TYPE","PROMOTION_LOT_STATUS","describe","context","it","permissions","to","equal","displayCustomerNames","currentUser","_id","customerOwnerType","invitedBy","ANY","forLotStatus","AVAILABLE","promotionLotStatus","BOOKED","USER","isAttributed","SOLD","organisations","users","ORGANISATION"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  shouldAnonymize,\n  getPromotionCustomerOwnerType,\n} from '../promotionClientHelpers';\nimport { PROMOTION_INVITED_BY_TYPE } from '../promotionConstants';\nimport { PROMOTION_LOT_STATUS } from '../../promotionLots/promotionLotConstants';\n\ndescribe('promotionClientHelpers', () => {\n  context('shouldAnonymize', () => {\n    it('returns true if user cannot view the promotion', () => {\n      expect(shouldAnonymize({ permissions: {} })).to.equal(true);\n    });\n\n    it('returns true if user cannot see customers', () => {\n      expect(shouldAnonymize({\n        permissions: { displayCustomerNames: false },\n      })).to.equal(true);\n    });\n\n    it('returns true if customer is invited by nobody', () => {\n      const currentUser = { _id: 'bob' };\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {},\n      })).to.equal(true);\n    });\n\n    it('returns true if lot status is not in permissions', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'bob';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ANY,\n            forLotStatus: [PROMOTION_LOT_STATUS.AVAILABLE],\n          },\n        },\n        promotionLotStatus: PROMOTION_LOT_STATUS.BOOKED,\n      })).to.equal(true);\n    });\n\n    it('returns true if lot status is in permissions and belongs to owner, but not attributed', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'bob';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n            forLotStatus: [\n              PROMOTION_LOT_STATUS.AVAILABLE,\n              PROMOTION_LOT_STATUS.BOOKED,\n            ],\n          },\n        },\n        promotionLotStatus: PROMOTION_LOT_STATUS.BOOKED,\n        isAttributed: false,\n      })).to.equal(true);\n    });\n\n    it('returns false if lot status is in permissions and belongs to owner', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'bob';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n            forLotStatus: [\n              PROMOTION_LOT_STATUS.AVAILABLE,\n              PROMOTION_LOT_STATUS.BOOKED,\n            ],\n          },\n        },\n        promotionLotStatus: PROMOTION_LOT_STATUS.BOOKED,\n        isAttributed: true,\n      })).to.equal(false);\n    });\n\n    it('returns true if lot status is undefined', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'bob';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n            forLotStatus: [\n              PROMOTION_LOT_STATUS.BOOKED,\n              PROMOTION_LOT_STATUS.SOLD,\n            ],\n          },\n        },\n      })).to.equal(true);\n    });\n\n    it('returns true if customer is not invited by current user', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'john';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n          },\n        },\n      })).to.equal(true);\n    });\n\n    it('returns true if customer is not invited by current user organisation member', () => {\n      const currentUser = {\n        _id: 'bob',\n        organisations: [{ users: [{ _id: 'bob' }, { _id: 'dylan' }] }],\n      };\n      const invitedBy = 'john';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ORGANISATION,\n          },\n        },\n      })).to.equal(true);\n    });\n\n    it('returns false if customer is invited by current user organisation member', () => {\n      const currentUser = {\n        _id: 'bob',\n        organisations: [\n          { users: [{ _id: 'bob' }, { _id: 'dylan' }] },\n          { users: [{ _id: 'bob' }, { _id: 'john' }] },\n        ],\n      };\n      const invitedBy = 'john';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ORGANISATION,\n            forLotStatus: [PROMOTION_LOT_STATUS.AVAILABLE],\n          },\n        },\n      })).to.equal(false);\n    });\n\n    it('returns true if current user has no organisation', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'john';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ORGANISATION,\n          },\n        },\n      })).to.equal(true);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/test/promotionClientHelpers.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/promotions/test/promotionClientHelpers.spec.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar shouldAnonymize, getPromotionCustomerOwnerType;\nmodule.link(\"../promotionClientHelpers\", {\n  shouldAnonymize: function (v) {\n    shouldAnonymize = v;\n  },\n  getPromotionCustomerOwnerType: function (v) {\n    getPromotionCustomerOwnerType = v;\n  }\n}, 1);\nvar PROMOTION_INVITED_BY_TYPE;\nmodule.link(\"../promotionConstants\", {\n  PROMOTION_INVITED_BY_TYPE: function (v) {\n    PROMOTION_INVITED_BY_TYPE = v;\n  }\n}, 2);\nvar PROMOTION_LOT_STATUS;\nmodule.link(\"../../promotionLots/promotionLotConstants\", {\n  PROMOTION_LOT_STATUS: function (v) {\n    PROMOTION_LOT_STATUS = v;\n  }\n}, 3);\ndescribe('promotionClientHelpers', function () {\n  context('shouldAnonymize', function () {\n    it('returns true if user cannot view the promotion', function () {\n      expect(shouldAnonymize({\n        permissions: {}\n      })).to.equal(true);\n    });\n    it('returns true if user cannot see customers', function () {\n      expect(shouldAnonymize({\n        permissions: {\n          displayCustomerNames: false\n        }\n      })).to.equal(true);\n    });\n    it('returns true if customer is invited by nobody', function () {\n      var currentUser = {\n        _id: 'bob'\n      };\n      var customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser: currentUser\n      });\n      expect(shouldAnonymize({\n        customerOwnerType: customerOwnerType,\n        permissions: {}\n      })).to.equal(true);\n    });\n    it('returns true if lot status is not in permissions', function () {\n      var currentUser = {\n        _id: 'bob'\n      };\n      var invitedBy = 'bob';\n      var customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser: currentUser,\n        invitedBy: invitedBy\n      });\n      expect(shouldAnonymize({\n        customerOwnerType: customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ANY,\n            forLotStatus: [PROMOTION_LOT_STATUS.AVAILABLE]\n          }\n        },\n        promotionLotStatus: PROMOTION_LOT_STATUS.BOOKED\n      })).to.equal(true);\n    });\n    it('returns true if lot status is in permissions and belongs to owner, but not attributed', function () {\n      var currentUser = {\n        _id: 'bob'\n      };\n      var invitedBy = 'bob';\n      var customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser: currentUser,\n        invitedBy: invitedBy\n      });\n      expect(shouldAnonymize({\n        customerOwnerType: customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n            forLotStatus: [PROMOTION_LOT_STATUS.AVAILABLE, PROMOTION_LOT_STATUS.BOOKED]\n          }\n        },\n        promotionLotStatus: PROMOTION_LOT_STATUS.BOOKED,\n        isAttributed: false\n      })).to.equal(true);\n    });\n    it('returns false if lot status is in permissions and belongs to owner', function () {\n      var currentUser = {\n        _id: 'bob'\n      };\n      var invitedBy = 'bob';\n      var customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser: currentUser,\n        invitedBy: invitedBy\n      });\n      expect(shouldAnonymize({\n        customerOwnerType: customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n            forLotStatus: [PROMOTION_LOT_STATUS.AVAILABLE, PROMOTION_LOT_STATUS.BOOKED]\n          }\n        },\n        promotionLotStatus: PROMOTION_LOT_STATUS.BOOKED,\n        isAttributed: true\n      })).to.equal(false);\n    });\n    it('returns true if lot status is undefined', function () {\n      var currentUser = {\n        _id: 'bob'\n      };\n      var invitedBy = 'bob';\n      var customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser: currentUser,\n        invitedBy: invitedBy\n      });\n      expect(shouldAnonymize({\n        customerOwnerType: customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n            forLotStatus: [PROMOTION_LOT_STATUS.BOOKED, PROMOTION_LOT_STATUS.SOLD]\n          }\n        }\n      })).to.equal(true);\n    });\n    it('returns true if customer is not invited by current user', function () {\n      var currentUser = {\n        _id: 'bob'\n      };\n      var invitedBy = 'john';\n      var customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser: currentUser,\n        invitedBy: invitedBy\n      });\n      expect(shouldAnonymize({\n        customerOwnerType: customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER\n          }\n        }\n      })).to.equal(true);\n    });\n    it('returns true if customer is not invited by current user organisation member', function () {\n      var currentUser = {\n        _id: 'bob',\n        organisations: [{\n          users: [{\n            _id: 'bob'\n          }, {\n            _id: 'dylan'\n          }]\n        }]\n      };\n      var invitedBy = 'john';\n      var customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser: currentUser,\n        invitedBy: invitedBy\n      });\n      expect(shouldAnonymize({\n        customerOwnerType: customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ORGANISATION\n          }\n        }\n      })).to.equal(true);\n    });\n    it('returns false if customer is invited by current user organisation member', function () {\n      var currentUser = {\n        _id: 'bob',\n        organisations: [{\n          users: [{\n            _id: 'bob'\n          }, {\n            _id: 'dylan'\n          }]\n        }, {\n          users: [{\n            _id: 'bob'\n          }, {\n            _id: 'john'\n          }]\n        }]\n      };\n      var invitedBy = 'john';\n      var customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser: currentUser,\n        invitedBy: invitedBy\n      });\n      expect(shouldAnonymize({\n        customerOwnerType: customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ORGANISATION,\n            forLotStatus: [PROMOTION_LOT_STATUS.AVAILABLE]\n          }\n        }\n      })).to.equal(false);\n    });\n    it('returns true if current user has no organisation', function () {\n      var currentUser = {\n        _id: 'bob'\n      };\n      var invitedBy = 'john';\n      var customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser: currentUser,\n        invitedBy: invitedBy\n      });\n      expect(shouldAnonymize({\n        customerOwnerType: customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ORGANISATION\n          }\n        }\n      })).to.equal(true);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/promotions/test/promotionClientHelpers.spec.js"],"names":["describe","context","it","expect","shouldAnonymize","permissions","displayCustomerNames","currentUser","_id","customerOwnerType","getPromotionCustomerOwnerType","invitedBy","PROMOTION_INVITED_BY_TYPE","forLotStatus","PROMOTION_LOT_STATUS","promotionLotStatus","BOOKED","isAttributed","USER","organisations","users","ORGANISATION"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  shouldAnonymize,\n  getPromotionCustomerOwnerType,\n} from '../promotionClientHelpers';\nimport { PROMOTION_INVITED_BY_TYPE } from '../promotionConstants';\nimport { PROMOTION_LOT_STATUS } from '../../promotionLots/promotionLotConstants';\n\ndescribe('promotionClientHelpers', () => {\n  context('shouldAnonymize', () => {\n    it('returns true if user cannot view the promotion', () => {\n      expect(shouldAnonymize({ permissions: {} })).to.equal(true);\n    });\n\n    it('returns true if user cannot see customers', () => {\n      expect(shouldAnonymize({\n        permissions: { displayCustomerNames: false },\n      })).to.equal(true);\n    });\n\n    it('returns true if customer is invited by nobody', () => {\n      const currentUser = { _id: 'bob' };\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {},\n      })).to.equal(true);\n    });\n\n    it('returns true if lot status is not in permissions', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'bob';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ANY,\n            forLotStatus: [PROMOTION_LOT_STATUS.AVAILABLE],\n          },\n        },\n        promotionLotStatus: PROMOTION_LOT_STATUS.BOOKED,\n      })).to.equal(true);\n    });\n\n    it('returns true if lot status is in permissions and belongs to owner, but not attributed', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'bob';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n            forLotStatus: [\n              PROMOTION_LOT_STATUS.AVAILABLE,\n              PROMOTION_LOT_STATUS.BOOKED,\n            ],\n          },\n        },\n        promotionLotStatus: PROMOTION_LOT_STATUS.BOOKED,\n        isAttributed: false,\n      })).to.equal(true);\n    });\n\n    it('returns false if lot status is in permissions and belongs to owner', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'bob';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n            forLotStatus: [\n              PROMOTION_LOT_STATUS.AVAILABLE,\n              PROMOTION_LOT_STATUS.BOOKED,\n            ],\n          },\n        },\n        promotionLotStatus: PROMOTION_LOT_STATUS.BOOKED,\n        isAttributed: true,\n      })).to.equal(false);\n    });\n\n    it('returns true if lot status is undefined', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'bob';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n            forLotStatus: [\n              PROMOTION_LOT_STATUS.BOOKED,\n              PROMOTION_LOT_STATUS.SOLD,\n            ],\n          },\n        },\n      })).to.equal(true);\n    });\n\n    it('returns true if customer is not invited by current user', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'john';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.USER,\n          },\n        },\n      })).to.equal(true);\n    });\n\n    it('returns true if customer is not invited by current user organisation member', () => {\n      const currentUser = {\n        _id: 'bob',\n        organisations: [{ users: [{ _id: 'bob' }, { _id: 'dylan' }] }],\n      };\n      const invitedBy = 'john';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ORGANISATION,\n          },\n        },\n      })).to.equal(true);\n    });\n\n    it('returns false if customer is invited by current user organisation member', () => {\n      const currentUser = {\n        _id: 'bob',\n        organisations: [\n          { users: [{ _id: 'bob' }, { _id: 'dylan' }] },\n          { users: [{ _id: 'bob' }, { _id: 'john' }] },\n        ],\n      };\n      const invitedBy = 'john';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ORGANISATION,\n            forLotStatus: [PROMOTION_LOT_STATUS.AVAILABLE],\n          },\n        },\n      })).to.equal(false);\n    });\n\n    it('returns true if current user has no organisation', () => {\n      const currentUser = { _id: 'bob' };\n      const invitedBy = 'john';\n      const customerOwnerType = getPromotionCustomerOwnerType({\n        currentUser,\n        invitedBy,\n      });\n      expect(shouldAnonymize({\n        customerOwnerType,\n        permissions: {\n          displayCustomerNames: {\n            invitedBy: PROMOTION_INVITED_BY_TYPE.ORGANISATION,\n          },\n        },\n      })).to.equal(true);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"7aa5ec7299978904a5f2f225ec9341147b1b4975"}

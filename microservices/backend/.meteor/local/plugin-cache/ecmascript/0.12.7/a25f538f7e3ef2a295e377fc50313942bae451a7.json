{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/test/RESTAPI.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/test/RESTAPI.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/test/RESTAPI.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/test/RESTAPI.test.js"],"names":["Meteor","expect","resetDatabase","Factory","omit","appendFileSync","makeFileUploadDir","flushFileUploadDir","REST_API_ERRORS","HTTP_STATUS_CODES","FILE_UPLOAD_DIR","RESTAPI","withMeteorUserId","OBJECT_FORMATS","getMatchingPathOptions","isAPI","getAPIUser","fetchAndCheckResponse","makeHeaders","getTimestampAndNonce","signRequest","uploadFile","publicKey","privateKey","makeTestRoute","method","user","message","userId","_id","methods","apiTestMethod","Promise","resolve","setTimeout","describe","api","addEndpoint","Error","body","testBody","query","testQuery","params","id","reject","call","err","res","multipart","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","create","apiPublicKey","replace","context","it","timestamp","nonce","url","data","headers","expectedResponse","UNKNOWN_ENDPOINT","path","WRONG_CONTENT_TYPE","WRONG_AUTHORIZATION_TYPE","then","response","status","errorName","info","to","equal","FORBIDDEN","not","undefined","Math","round","Date","valueOf","toString","REPLAY_ATTACK_ATTEMPT","JSON","stringify","param1","param2","testString","testNumber","testObject","testArray","testBool","testEmptyObject","testEmptyArray","testEmptyString","signature","format","TO_STRING","TO_LITERRAL","filePath","include","options","POST","a","req","_parsedUrl","pathname","pathOptions","deep","b","req1","pathOptions1","req2","pathOptions2","done","result"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\nimport omit from 'lodash/omit';\nimport { appendFileSync } from 'fs';\n\nimport { makeFileUploadDir, flushFileUploadDir } from 'core/utils/filesUtils';\nimport {\n  REST_API_ERRORS,\n  HTTP_STATUS_CODES,\n  FILE_UPLOAD_DIR,\n} from '../restApiConstants';\nimport RESTAPI from '../RESTAPI';\nimport {\n  withMeteorUserId,\n  OBJECT_FORMATS,\n  getMatchingPathOptions,\n  isAPI,\n  getAPIUser,\n} from '../helpers';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n  signRequest,\n  uploadFile,\n} from './apiTestHelpers.test';\n\nconst publicKey = '-----BEGIN RSA PUBLIC KEY-----\\n'\n  + 'MEgCQQCGZse2vDomKwX42nV3ZwJsbw/RGzbtCoz00xnciiHvJOGn\\n'\n  + '79MDLQ93aXJVJb0YwqwYIqQHqJI/I1/2inD353lnAgMBAAE=\\n'\n  + '-----END RSA PUBLIC KEY-----';\n\nconst privateKey = '-----BEGIN RSA PRIVATE KEY-----\\n'\n  + 'MIIBOgIBAAJBAIZmx7a8OiYrBfjadXdnAmxvD9EbNu0KjPTTGdyKIe\\n'\n  + '8k4afv0wMtD3dpclUlvRjCrBgipAeokj8jX/aKcPfneWcCAwEAAQJA\\n'\n  + 'egy37A++Vo7XW4c3CPk4UDQDDwdBt7zPCDzzzTx7WGiqiQAX8aJiGS\\n'\n  + 'C0hxtSk6yKd+xvKuXJH/GUyauNeQ7s0QIhAPy4AYr5a5MFitDc0vwW\\n'\n  + 'um1e/tHm0/lhN2AiBS3pz8SrAiEAiCWB9yC93YpiggSoBRIbP5t5C9\\n'\n  + 'ThAKnYQsg1Sr5XRjUCIQDZNydMVnnaEqdwQn2uY7K1kzMfI3ILJT49\\n'\n  + 'iMA+6HrGpQIgMgJdB/Kt61eusYWWVi59ddLdFrx+XakFuBokgS0Dj9\\n'\n  + 'UCIHkPp3g9B6FVrUs3cC4QA5S2XP0YGhvAJ6FykArwjWYy\\n'\n  + '-----END RSA PRIVATE KEY-----';\n\nconst makeTestRoute = method => ({ user }) => ({\n  message: method,\n  userId: user && user._id,\n});\n\nMeteor.methods({\n  apiTestMethod() {\n    return new Promise(resolve => setTimeout(() => resolve(this.userId), 1500));\n  },\n  isAPI,\n});\n\ndescribe('RESTAPI', () => {\n  let user;\n\n  const api = new RESTAPI();\n  api.addEndpoint('/test', 'POST', makeTestRoute('POST'));\n  api.addEndpoint('/test', 'PUT', makeTestRoute('PUT'));\n  api.addEndpoint('/test', 'GET', () => {\n    throw new Error('secret error');\n  });\n  api.addEndpoint('/test', 'DELETE', () => {\n    throw new Meteor.Error('meteor error');\n  });\n  api.addEndpoint('/undefined', 'GET', () => {});\n  api.addEndpoint(\n    '/method/:id/test',\n    'POST',\n    ({\n      user: { _id: userId },\n      body: { testBody },\n      query: { testQuery },\n      params: { id },\n    }) =>\n      withMeteorUserId(\n        { userId },\n        () =>\n          new Promise((resolve, reject) =>\n            Meteor.call('apiTestMethod', (err, res) =>\n              (err\n                ? reject(err)\n                : resolve(`${res} ${testBody} ${testQuery} ${id}`)))),\n      ),\n  );\n  api.addEndpoint('/multipart', 'POST', makeTestRoute('POST'), {\n    multipart: true,\n  });\n\n  api.addEndpoint('/isAPI', 'GET', () => ({ isAPI: isAPI() }));\n  api.addEndpoint('/fiberAPIUser', 'GET', getAPIUser);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    user = Factory.create('user', {\n      apiPublicKey: { publicKey: publicKey.replace(/\\r?\\n|\\r/g, '') },\n    });\n  });\n\n  context('returns an error when', () => {\n    it('endpoint path is unknown', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      return fetchAndCheckResponse({\n        url: '/unknown_endpoint',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse: REST_API_ERRORS.UNKNOWN_ENDPOINT({\n          path: '/api/unknown_endpoint',\n          method: 'POST',\n        }),\n      });\n    });\n\n    it('endpoint method is unknown', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      return fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'PATCH',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse: REST_API_ERRORS.UNKNOWN_ENDPOINT({\n          path: '/api/test',\n          method: 'PATCH',\n        }),\n      });\n    });\n\n    it('content type is wrong', () =>\n      fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: { 'Content-Type': 'plain/text' },\n        },\n        expectedResponse: REST_API_ERRORS.WRONG_CONTENT_TYPE(\n          'plain/text',\n          'application/json',\n        ),\n      }));\n\n    it('authorization type is wrong', () =>\n      fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n        },\n        expectedResponse: REST_API_ERRORS.WRONG_AUTHORIZATION_TYPE,\n      }));\n\n    it('public key is wrong', () =>\n      fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({ publicKey: '12345' }),\n        },\n        // expectedResponse: REST_API_ERRORS.AUTHORIZATION_FAILED,\n      }).then((response) => {\n        const { status, errorName, message, info } = response;\n        expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n        expect(errorName).to.equal('AUTHORIZATION_FAILED');\n        expect(message).to.equal('Wrong public key or signature.');\n        expect(info).to.equal('No user found with this public key, or maybe it has a typo ?');\n      }));\n\n    it('signature is wrong', () =>\n      fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({ publicKey }),\n        },\n      }).then((response) => {\n        const { status, errorName, message, info } = response;\n        expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n        expect(errorName).to.equal('AUTHORIZATION_FAILED');\n        expect(message).to.equal('Wrong public key or signature.');\n        expect(info).to.not.equal(undefined);\n      }));\n\n    it('attempts a replay attack with same nonce', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n\n      return fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse: makeTestRoute('POST')({ user }),\n      }).then(() =>\n        fetchAndCheckResponse({\n          url: '/test',\n          data: {\n            method: 'POST',\n            headers: makeHeaders({\n              publicKey,\n              privateKey,\n              timestamp: Math.round(new Date().valueOf() / 1000).toString(),\n              nonce,\n            }),\n          },\n          expectedResponse: REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT,\n        }));\n    });\n\n    it('attempts a replay attack with old timestamp', () => {\n      const timestamp = (\n        Math.round(new Date().valueOf() / 1000) - 32\n      ).toString();\n      const nonce = '1hkfi57g';\n\n      return fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse: REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT,\n      });\n    });\n  });\n\n  it('can authenticate and get a response', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'POST',\n        headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n      },\n      expectedResponse: makeTestRoute('POST')({ user }),\n    });\n  });\n\n  it('removes old nonces', () =>\n    fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          timestamp: Math.round(new Date().valueOf() / 1000).toString(),\n          nonce: 'testNonce',\n        }),\n      },\n      expectedResponse: makeTestRoute('POST')({ user }),\n    }));\n\n  it('can authenticate and get a response from a different method for the same endpoint', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'PUT',\n        headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n      },\n      expectedResponse: makeTestRoute('PUT')({ user }),\n    });\n  });\n\n  it('returns an internal server error if the error is not a meteor.error', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'GET',\n        headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n      },\n      expectedResponse: { message: 'Internal server error', status: 500 },\n    });\n  });\n\n  it('displays the error if it is a meteor.error', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'DELETE',\n        headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n      },\n      expectedResponse: { message: '[meteor error]', status: 400 },\n    });\n  });\n\n  it('calls meteor methods with the right userId', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n    const body = { testBody: 'testBody' };\n    const query = { testQuery: 'testQuery' };\n    const id = 'testId';\n\n    return fetchAndCheckResponse({\n      url: `/method/${id}/test`,\n      query,\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          body,\n          timestamp,\n          nonce,\n          query,\n        }),\n        body: JSON.stringify(body),\n      },\n      expectedResponse: `${user._id} testBody testQuery testId`,\n    });\n  });\n\n  it('does not crash if undefined is returned by the endpoint', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/undefined',\n      data: {\n        method: 'GET',\n        headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n      },\n      expectedResponse: '',\n    });\n  });\n\n  it('does not match sub endpoints', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/test/subtest',\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          timestamp,\n          nonce,\n        }),\n      },\n      expectedResponse: REST_API_ERRORS.UNKNOWN_ENDPOINT({\n        path: '/api/test/subtest',\n        method: 'POST',\n      }),\n    });\n  });\n\n  context('can authenticate when signature is performed on', () => {\n    it('string only object', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      const query = {\n        param1: 'hello?this/is=a-test',\n        param2: '?yay!this/is/so#cool',\n        'param-3': 1200000,\n        'param-4': '1234',\n      };\n      const body = {\n        testString: 'hello',\n        testNumber: 12345,\n        testObject: {\n          testArray: ['test1', 'test2', null],\n        },\n        testBool: true,\n        testEmptyObject: {},\n        testEmptyArray: [],\n        testEmptyString: '',\n      };\n\n      return fetchAndCheckResponse({\n        url: '/test',\n        query,\n        data: {\n          method: 'POST',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce,\n            signature: signRequest({\n              body,\n              query,\n              timestamp,\n              nonce,\n              privateKey,\n              format: OBJECT_FORMATS.TO_STRING,\n            }),\n          }),\n          body: JSON.stringify(body),\n        },\n        expectedResponse: makeTestRoute('POST')({ user }),\n      });\n    });\n\n    it('literal only object', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      const query = {\n        param1: 'hello?this/is=a-test',\n        param2: '?yay!this/is/so#cool',\n        'param-3': 1200000,\n        'param-4': '1234',\n      };\n      const body = {\n        testString: 'hello',\n        testNumber: 12345,\n        testObject: {\n          testArray: ['test1', 'test2', null],\n        },\n        testBool: true,\n        testEmptyObject: {},\n        testEmptyArray: [],\n        testEmptyString: '',\n      };\n\n      return fetchAndCheckResponse({\n        url: '/test',\n        query,\n        data: {\n          method: 'POST',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce,\n            signature: signRequest({\n              body,\n              query,\n              timestamp,\n              nonce,\n              privateKey,\n              format: OBJECT_FORMATS.TO_LITERRAL,\n            }),\n          }),\n          body: JSON.stringify(body),\n        },\n        expectedResponse: makeTestRoute('POST')({ user }),\n      });\n    });\n  });\n\n  it('allows multipart/form-data requests on multipart endpoints', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: user._id,\n      url: '/multipart',\n    }).then((res) => {\n      const { userId } = res;\n      expect(userId).to.equal(user._id);\n    });\n  });\n\n  it('does not allow multipart/form-data requests on non multipart endpoints', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: user._id,\n      url: '/test',\n    }).then((res) => {\n      const { status, errorName, message } = res;\n      expect(status).to.equal(400);\n      expect(errorName).to.equal('WRONG_CONTENT_TYPE');\n      expect(message).to.include('multipart');\n    });\n  });\n\n  context('getMatchingPathOptions', () => {\n    it('returns the correct options for endpoint with no wildcard', () => {\n      const options = {\n        '/api/test': {\n          POST: { options: { a: 1 } },\n        },\n      };\n\n      const req = {\n        _parsedUrl: { pathname: '/api/test' },\n        method: 'POST',\n      };\n\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({ a: 1 });\n    });\n\n    it('returns the correct options for endpoint with wildcards', () => {\n      const options = {\n        '/api/test/:wildcard1/:wildcard2': {\n          POST: { options: { a: 1 } },\n        },\n      };\n\n      const req = {\n        _parsedUrl: { pathname: '/api/test/12345/abcdef' },\n        method: 'POST',\n      };\n\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({ a: 1 });\n    });\n\n    it('returns the correct options for request with queryString', () => {\n      const options = {\n        '/api/test': {\n          POST: { options: { a: 1 } },\n        },\n      };\n\n      const req = {\n        _parsedUrl: { pathname: '/api/test/?test=1' },\n        method: 'POST',\n      };\n\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({ a: 1 });\n    });\n\n    it('returns no options for wrong request method ', () => {\n      const options = {\n        '/api/test': {\n          POST: { options: { a: 1 } },\n        },\n      };\n\n      const req = {\n        _parsedUrl: { pathname: '/api/test' },\n        method: 'GET',\n      };\n\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({});\n    });\n\n    it('returns no options for wrong request endpoint ', () => {\n      const options = {\n        '/api/test': {\n          POST: { options: { a: 1 } },\n        },\n      };\n\n      const req = {\n        _parsedUrl: { pathname: '/api' },\n        method: 'POST',\n      };\n\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({});\n    });\n\n    it('returns correct options for endpoints with and without wildcard ', () => {\n      const options = {\n        '/api/test': {\n          POST: { options: { a: 1 } },\n        },\n        '/api/test/:wildcard1/:wildcard2': {\n          POST: { options: { b: 1 } },\n        },\n      };\n\n      const req1 = {\n        _parsedUrl: { pathname: '/api/test' },\n        method: 'POST',\n      };\n\n      const pathOptions1 = getMatchingPathOptions(req1, options);\n      expect(pathOptions1).to.deep.equal({ a: 1 });\n\n      const req2 = {\n        _parsedUrl: { pathname: '/api/test/12345/abcdef' },\n        method: 'POST',\n      };\n\n      const pathOptions2 = getMatchingPathOptions(req2, options);\n      expect(pathOptions2).to.deep.equal({ b: 1 });\n    });\n  });\n\n  describe('isAPI', () => {\n    it('returns true for a function ran inside an API', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      const expectedResponse = { isAPI: true };\n      return fetchAndCheckResponse({\n        url: '/isAPI',\n        data: {\n          method: 'GET',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse,\n      });\n    });\n\n    it('returns false when calling a method', (done) => {\n      Meteor.call('isAPI', (err, result) => {\n        if (err) {\n          done(err);\n        }\n\n        expect(result).to.equal(false);\n        done();\n      });\n    });\n  });\n\n  describe('APIUser', () => {\n    it('returns the logged in API user', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      const expectedResponse = omit(user, ['createdAt', 'updatedAt', 'roles']);\n\n      return fetchAndCheckResponse({\n        url: '/fiberAPIUser',\n        data: {\n          method: 'GET',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse,\n        include: true,\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/test/RESTAPI.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/test/RESTAPI.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 1);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 2);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 3);\nlet omit;\nmodule.link(\"lodash/omit\", {\n  default(v) {\n    omit = v;\n  }\n\n}, 4);\nlet appendFileSync;\nmodule.link(\"fs\", {\n  appendFileSync(v) {\n    appendFileSync = v;\n  }\n\n}, 5);\nlet makeFileUploadDir, flushFileUploadDir;\nmodule.link(\"../../../../utils/filesUtils\", {\n  makeFileUploadDir(v) {\n    makeFileUploadDir = v;\n  },\n\n  flushFileUploadDir(v) {\n    flushFileUploadDir = v;\n  }\n\n}, 6);\nlet REST_API_ERRORS, HTTP_STATUS_CODES, FILE_UPLOAD_DIR;\nmodule.link(\"../restApiConstants\", {\n  REST_API_ERRORS(v) {\n    REST_API_ERRORS = v;\n  },\n\n  HTTP_STATUS_CODES(v) {\n    HTTP_STATUS_CODES = v;\n  },\n\n  FILE_UPLOAD_DIR(v) {\n    FILE_UPLOAD_DIR = v;\n  }\n\n}, 7);\nlet RESTAPI;\nmodule.link(\"../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 8);\nlet withMeteorUserId, OBJECT_FORMATS, getMatchingPathOptions, isAPI, getAPIUser;\nmodule.link(\"../helpers\", {\n  withMeteorUserId(v) {\n    withMeteorUserId = v;\n  },\n\n  OBJECT_FORMATS(v) {\n    OBJECT_FORMATS = v;\n  },\n\n  getMatchingPathOptions(v) {\n    getMatchingPathOptions = v;\n  },\n\n  isAPI(v) {\n    isAPI = v;\n  },\n\n  getAPIUser(v) {\n    getAPIUser = v;\n  }\n\n}, 9);\nlet fetchAndCheckResponse, makeHeaders, getTimestampAndNonce, signRequest, uploadFile;\nmodule.link(\"./apiTestHelpers.test\", {\n  fetchAndCheckResponse(v) {\n    fetchAndCheckResponse = v;\n  },\n\n  makeHeaders(v) {\n    makeHeaders = v;\n  },\n\n  getTimestampAndNonce(v) {\n    getTimestampAndNonce = v;\n  },\n\n  signRequest(v) {\n    signRequest = v;\n  },\n\n  uploadFile(v) {\n    uploadFile = v;\n  }\n\n}, 10);\nconst publicKey = '-----BEGIN RSA PUBLIC KEY-----\\n' + 'MEgCQQCGZse2vDomKwX42nV3ZwJsbw/RGzbtCoz00xnciiHvJOGn\\n' + '79MDLQ93aXJVJb0YwqwYIqQHqJI/I1/2inD353lnAgMBAAE=\\n' + '-----END RSA PUBLIC KEY-----';\nconst privateKey = '-----BEGIN RSA PRIVATE KEY-----\\n' + 'MIIBOgIBAAJBAIZmx7a8OiYrBfjadXdnAmxvD9EbNu0KjPTTGdyKIe\\n' + '8k4afv0wMtD3dpclUlvRjCrBgipAeokj8jX/aKcPfneWcCAwEAAQJA\\n' + 'egy37A++Vo7XW4c3CPk4UDQDDwdBt7zPCDzzzTx7WGiqiQAX8aJiGS\\n' + 'C0hxtSk6yKd+xvKuXJH/GUyauNeQ7s0QIhAPy4AYr5a5MFitDc0vwW\\n' + 'um1e/tHm0/lhN2AiBS3pz8SrAiEAiCWB9yC93YpiggSoBRIbP5t5C9\\n' + 'ThAKnYQsg1Sr5XRjUCIQDZNydMVnnaEqdwQn2uY7K1kzMfI3ILJT49\\n' + 'iMA+6HrGpQIgMgJdB/Kt61eusYWWVi59ddLdFrx+XakFuBokgS0Dj9\\n' + 'UCIHkPp3g9B6FVrUs3cC4QA5S2XP0YGhvAJ6FykArwjWYy\\n' + '-----END RSA PRIVATE KEY-----';\n\nconst makeTestRoute = method => ({\n  user\n}) => ({\n  message: method,\n  userId: user && user._id\n});\n\nMeteor.methods({\n  apiTestMethod() {\n    return new Promise(resolve => setTimeout(() => resolve(this.userId), 1500));\n  },\n\n  isAPI\n});\ndescribe('RESTAPI', () => {\n  let user;\n  const api = new RESTAPI();\n  api.addEndpoint('/test', 'POST', makeTestRoute('POST'));\n  api.addEndpoint('/test', 'PUT', makeTestRoute('PUT'));\n  api.addEndpoint('/test', 'GET', () => {\n    throw new Error('secret error');\n  });\n  api.addEndpoint('/test', 'DELETE', () => {\n    throw new Meteor.Error('meteor error');\n  });\n  api.addEndpoint('/undefined', 'GET', () => {});\n  api.addEndpoint('/method/:id/test', 'POST', ({\n    user: {\n      _id: userId\n    },\n    body: {\n      testBody\n    },\n    query: {\n      testQuery\n    },\n    params: {\n      id\n    }\n  }) => withMeteorUserId({\n    userId\n  }, () => new Promise((resolve, reject) => Meteor.call('apiTestMethod', (err, res) => err ? reject(err) : resolve(`${res} ${testBody} ${testQuery} ${id}`)))));\n  api.addEndpoint('/multipart', 'POST', makeTestRoute('POST'), {\n    multipart: true\n  });\n  api.addEndpoint('/isAPI', 'GET', () => ({\n    isAPI: isAPI()\n  }));\n  api.addEndpoint('/fiberAPIUser', 'GET', getAPIUser);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    user = Factory.create('user', {\n      apiPublicKey: {\n        publicKey: publicKey.replace(/\\r?\\n|\\r/g, '')\n      }\n    });\n  });\n  context('returns an error when', () => {\n    it('endpoint path is unknown', () => {\n      const {\n        timestamp,\n        nonce\n      } = getTimestampAndNonce();\n      return fetchAndCheckResponse({\n        url: '/unknown_endpoint',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce\n          })\n        },\n        expectedResponse: REST_API_ERRORS.UNKNOWN_ENDPOINT({\n          path: '/api/unknown_endpoint',\n          method: 'POST'\n        })\n      });\n    });\n    it('endpoint method is unknown', () => {\n      const {\n        timestamp,\n        nonce\n      } = getTimestampAndNonce();\n      return fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'PATCH',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce\n          })\n        },\n        expectedResponse: REST_API_ERRORS.UNKNOWN_ENDPOINT({\n          path: '/api/test',\n          method: 'PATCH'\n        })\n      });\n    });\n    it('content type is wrong', () => fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'plain/text'\n        }\n      },\n      expectedResponse: REST_API_ERRORS.WRONG_CONTENT_TYPE('plain/text', 'application/json')\n    }));\n    it('authorization type is wrong', () => fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      },\n      expectedResponse: REST_API_ERRORS.WRONG_AUTHORIZATION_TYPE\n    }));\n    it('public key is wrong', () => fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey: '12345'\n        }) // expectedResponse: REST_API_ERRORS.AUTHORIZATION_FAILED,\n\n      }\n    }).then(response => {\n      const {\n        status,\n        errorName,\n        message,\n        info\n      } = response;\n      expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n      expect(errorName).to.equal('AUTHORIZATION_FAILED');\n      expect(message).to.equal('Wrong public key or signature.');\n      expect(info).to.equal('No user found with this public key, or maybe it has a typo ?');\n    }));\n    it('signature is wrong', () => fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey\n        })\n      }\n    }).then(response => {\n      const {\n        status,\n        errorName,\n        message,\n        info\n      } = response;\n      expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n      expect(errorName).to.equal('AUTHORIZATION_FAILED');\n      expect(message).to.equal('Wrong public key or signature.');\n      expect(info).to.not.equal(undefined);\n    }));\n    it('attempts a replay attack with same nonce', () => {\n      const {\n        timestamp,\n        nonce\n      } = getTimestampAndNonce();\n      return fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce\n          })\n        },\n        expectedResponse: makeTestRoute('POST')({\n          user\n        })\n      }).then(() => fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp: Math.round(new Date().valueOf() / 1000).toString(),\n            nonce\n          })\n        },\n        expectedResponse: REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT\n      }));\n    });\n    it('attempts a replay attack with old timestamp', () => {\n      const timestamp = (Math.round(new Date().valueOf() / 1000) - 32).toString();\n      const nonce = '1hkfi57g';\n      return fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce\n          })\n        },\n        expectedResponse: REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT\n      });\n    });\n  });\n  it('can authenticate and get a response', () => {\n    const {\n      timestamp,\n      nonce\n    } = getTimestampAndNonce();\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          timestamp,\n          nonce\n        })\n      },\n      expectedResponse: makeTestRoute('POST')({\n        user\n      })\n    });\n  });\n  it('removes old nonces', () => fetchAndCheckResponse({\n    url: '/test',\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        publicKey,\n        privateKey,\n        timestamp: Math.round(new Date().valueOf() / 1000).toString(),\n        nonce: 'testNonce'\n      })\n    },\n    expectedResponse: makeTestRoute('POST')({\n      user\n    })\n  }));\n  it('can authenticate and get a response from a different method for the same endpoint', () => {\n    const {\n      timestamp,\n      nonce\n    } = getTimestampAndNonce();\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'PUT',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          timestamp,\n          nonce\n        })\n      },\n      expectedResponse: makeTestRoute('PUT')({\n        user\n      })\n    });\n  });\n  it('returns an internal server error if the error is not a meteor.error', () => {\n    const {\n      timestamp,\n      nonce\n    } = getTimestampAndNonce();\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'GET',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          timestamp,\n          nonce\n        })\n      },\n      expectedResponse: {\n        message: 'Internal server error',\n        status: 500\n      }\n    });\n  });\n  it('displays the error if it is a meteor.error', () => {\n    const {\n      timestamp,\n      nonce\n    } = getTimestampAndNonce();\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'DELETE',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          timestamp,\n          nonce\n        })\n      },\n      expectedResponse: {\n        message: '[meteor error]',\n        status: 400\n      }\n    });\n  });\n  it('calls meteor methods with the right userId', () => {\n    const {\n      timestamp,\n      nonce\n    } = getTimestampAndNonce();\n    const body = {\n      testBody: 'testBody'\n    };\n    const query = {\n      testQuery: 'testQuery'\n    };\n    const id = 'testId';\n    return fetchAndCheckResponse({\n      url: `/method/${id}/test`,\n      query,\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          body,\n          timestamp,\n          nonce,\n          query\n        }),\n        body: JSON.stringify(body)\n      },\n      expectedResponse: `${user._id} testBody testQuery testId`\n    });\n  });\n  it('does not crash if undefined is returned by the endpoint', () => {\n    const {\n      timestamp,\n      nonce\n    } = getTimestampAndNonce();\n    return fetchAndCheckResponse({\n      url: '/undefined',\n      data: {\n        method: 'GET',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          timestamp,\n          nonce\n        })\n      },\n      expectedResponse: ''\n    });\n  });\n  it('does not match sub endpoints', () => {\n    const {\n      timestamp,\n      nonce\n    } = getTimestampAndNonce();\n    return fetchAndCheckResponse({\n      url: '/test/subtest',\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          timestamp,\n          nonce\n        })\n      },\n      expectedResponse: REST_API_ERRORS.UNKNOWN_ENDPOINT({\n        path: '/api/test/subtest',\n        method: 'POST'\n      })\n    });\n  });\n  context('can authenticate when signature is performed on', () => {\n    it('string only object', () => {\n      const {\n        timestamp,\n        nonce\n      } = getTimestampAndNonce();\n      const query = {\n        param1: 'hello?this/is=a-test',\n        param2: '?yay!this/is/so#cool',\n        'param-3': 1200000,\n        'param-4': '1234'\n      };\n      const body = {\n        testString: 'hello',\n        testNumber: 12345,\n        testObject: {\n          testArray: ['test1', 'test2', null]\n        },\n        testBool: true,\n        testEmptyObject: {},\n        testEmptyArray: [],\n        testEmptyString: ''\n      };\n      return fetchAndCheckResponse({\n        url: '/test',\n        query,\n        data: {\n          method: 'POST',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce,\n            signature: signRequest({\n              body,\n              query,\n              timestamp,\n              nonce,\n              privateKey,\n              format: OBJECT_FORMATS.TO_STRING\n            })\n          }),\n          body: JSON.stringify(body)\n        },\n        expectedResponse: makeTestRoute('POST')({\n          user\n        })\n      });\n    });\n    it('literal only object', () => {\n      const {\n        timestamp,\n        nonce\n      } = getTimestampAndNonce();\n      const query = {\n        param1: 'hello?this/is=a-test',\n        param2: '?yay!this/is/so#cool',\n        'param-3': 1200000,\n        'param-4': '1234'\n      };\n      const body = {\n        testString: 'hello',\n        testNumber: 12345,\n        testObject: {\n          testArray: ['test1', 'test2', null]\n        },\n        testBool: true,\n        testEmptyObject: {},\n        testEmptyArray: [],\n        testEmptyString: ''\n      };\n      return fetchAndCheckResponse({\n        url: '/test',\n        query,\n        data: {\n          method: 'POST',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce,\n            signature: signRequest({\n              body,\n              query,\n              timestamp,\n              nonce,\n              privateKey,\n              format: OBJECT_FORMATS.TO_LITERRAL\n            })\n          }),\n          body: JSON.stringify(body)\n        },\n        expectedResponse: makeTestRoute('POST')({\n          user\n        })\n      });\n    });\n  });\n  it('allows multipart/form-data requests on multipart endpoints', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: user._id,\n      url: '/multipart'\n    }).then(res => {\n      const {\n        userId\n      } = res;\n      expect(userId).to.equal(user._id);\n    });\n  });\n  it('does not allow multipart/form-data requests on non multipart endpoints', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: user._id,\n      url: '/test'\n    }).then(res => {\n      const {\n        status,\n        errorName,\n        message\n      } = res;\n      expect(status).to.equal(400);\n      expect(errorName).to.equal('WRONG_CONTENT_TYPE');\n      expect(message).to.include('multipart');\n    });\n  });\n  context('getMatchingPathOptions', () => {\n    it('returns the correct options for endpoint with no wildcard', () => {\n      const options = {\n        '/api/test': {\n          POST: {\n            options: {\n              a: 1\n            }\n          }\n        }\n      };\n      const req = {\n        _parsedUrl: {\n          pathname: '/api/test'\n        },\n        method: 'POST'\n      };\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({\n        a: 1\n      });\n    });\n    it('returns the correct options for endpoint with wildcards', () => {\n      const options = {\n        '/api/test/:wildcard1/:wildcard2': {\n          POST: {\n            options: {\n              a: 1\n            }\n          }\n        }\n      };\n      const req = {\n        _parsedUrl: {\n          pathname: '/api/test/12345/abcdef'\n        },\n        method: 'POST'\n      };\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({\n        a: 1\n      });\n    });\n    it('returns the correct options for request with queryString', () => {\n      const options = {\n        '/api/test': {\n          POST: {\n            options: {\n              a: 1\n            }\n          }\n        }\n      };\n      const req = {\n        _parsedUrl: {\n          pathname: '/api/test/?test=1'\n        },\n        method: 'POST'\n      };\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({\n        a: 1\n      });\n    });\n    it('returns no options for wrong request method ', () => {\n      const options = {\n        '/api/test': {\n          POST: {\n            options: {\n              a: 1\n            }\n          }\n        }\n      };\n      const req = {\n        _parsedUrl: {\n          pathname: '/api/test'\n        },\n        method: 'GET'\n      };\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({});\n    });\n    it('returns no options for wrong request endpoint ', () => {\n      const options = {\n        '/api/test': {\n          POST: {\n            options: {\n              a: 1\n            }\n          }\n        }\n      };\n      const req = {\n        _parsedUrl: {\n          pathname: '/api'\n        },\n        method: 'POST'\n      };\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({});\n    });\n    it('returns correct options for endpoints with and without wildcard ', () => {\n      const options = {\n        '/api/test': {\n          POST: {\n            options: {\n              a: 1\n            }\n          }\n        },\n        '/api/test/:wildcard1/:wildcard2': {\n          POST: {\n            options: {\n              b: 1\n            }\n          }\n        }\n      };\n      const req1 = {\n        _parsedUrl: {\n          pathname: '/api/test'\n        },\n        method: 'POST'\n      };\n      const pathOptions1 = getMatchingPathOptions(req1, options);\n      expect(pathOptions1).to.deep.equal({\n        a: 1\n      });\n      const req2 = {\n        _parsedUrl: {\n          pathname: '/api/test/12345/abcdef'\n        },\n        method: 'POST'\n      };\n      const pathOptions2 = getMatchingPathOptions(req2, options);\n      expect(pathOptions2).to.deep.equal({\n        b: 1\n      });\n    });\n  });\n  describe('isAPI', () => {\n    it('returns true for a function ran inside an API', () => {\n      const {\n        timestamp,\n        nonce\n      } = getTimestampAndNonce();\n      const expectedResponse = {\n        isAPI: true\n      };\n      return fetchAndCheckResponse({\n        url: '/isAPI',\n        data: {\n          method: 'GET',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce\n          })\n        },\n        expectedResponse\n      });\n    });\n    it('returns false when calling a method', done => {\n      Meteor.call('isAPI', (err, result) => {\n        if (err) {\n          done(err);\n        }\n\n        expect(result).to.equal(false);\n        done();\n      });\n    });\n  });\n  describe('APIUser', () => {\n    it('returns the logged in API user', () => {\n      const {\n        timestamp,\n        nonce\n      } = getTimestampAndNonce();\n      const expectedResponse = omit(user, ['createdAt', 'updatedAt', 'roles']);\n      return fetchAndCheckResponse({\n        url: '/fiberAPIUser',\n        data: {\n          method: 'GET',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce\n          })\n        },\n        expectedResponse,\n        include: true\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/test/RESTAPI.test.js"],"names":["publicKey","privateKey","makeTestRoute","method","user","message","userId","_id","Meteor","apiTestMethod","resolve","setTimeout","isAPI","describe","api","body","testBody","query","testQuery","params","id","withMeteorUserId","err","reject","res","multipart","before","makeFileUploadDir","flushFileUploadDir","after","beforeEach","resetDatabase","apiPublicKey","context","it","nonce","getTimestampAndNonce","fetchAndCheckResponse","url","data","headers","makeHeaders","expectedResponse","path","REST_API_ERRORS","WRONG_AUTHORIZATION_TYPE","response","info","expect","HTTP_STATUS_CODES","timestamp","Math","REPLAY_ATTACK_ATTEMPT","status","JSON","param1","param2","testString","testNumber","testObject","testArray","testBool","testEmptyObject","testEmptyArray","testEmptyString","signature","signRequest","format","OBJECT_FORMATS","TO_STRING","TO_LITERRAL","filePath","FILE_UPLOAD_DIR","appendFileSync","options","POST","a","req","_parsedUrl","pathname","pathOptions","getMatchingPathOptions","b","req1","pathOptions1","req2","pathOptions2","done","omit","include"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\nimport omit from 'lodash/omit';\nimport { appendFileSync } from 'fs';\n\nimport { makeFileUploadDir, flushFileUploadDir } from 'core/utils/filesUtils';\nimport {\n  REST_API_ERRORS,\n  HTTP_STATUS_CODES,\n  FILE_UPLOAD_DIR,\n} from '../restApiConstants';\nimport RESTAPI from '../RESTAPI';\nimport {\n  withMeteorUserId,\n  OBJECT_FORMATS,\n  getMatchingPathOptions,\n  isAPI,\n  getAPIUser,\n} from '../helpers';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n  signRequest,\n  uploadFile,\n} from './apiTestHelpers.test';\n\nconst publicKey = '-----BEGIN RSA PUBLIC KEY-----\\n'\n  + 'MEgCQQCGZse2vDomKwX42nV3ZwJsbw/RGzbtCoz00xnciiHvJOGn\\n'\n  + '79MDLQ93aXJVJb0YwqwYIqQHqJI/I1/2inD353lnAgMBAAE=\\n'\n  + '-----END RSA PUBLIC KEY-----';\n\nconst privateKey = '-----BEGIN RSA PRIVATE KEY-----\\n'\n  + 'MIIBOgIBAAJBAIZmx7a8OiYrBfjadXdnAmxvD9EbNu0KjPTTGdyKIe\\n'\n  + '8k4afv0wMtD3dpclUlvRjCrBgipAeokj8jX/aKcPfneWcCAwEAAQJA\\n'\n  + 'egy37A++Vo7XW4c3CPk4UDQDDwdBt7zPCDzzzTx7WGiqiQAX8aJiGS\\n'\n  + 'C0hxtSk6yKd+xvKuXJH/GUyauNeQ7s0QIhAPy4AYr5a5MFitDc0vwW\\n'\n  + 'um1e/tHm0/lhN2AiBS3pz8SrAiEAiCWB9yC93YpiggSoBRIbP5t5C9\\n'\n  + 'ThAKnYQsg1Sr5XRjUCIQDZNydMVnnaEqdwQn2uY7K1kzMfI3ILJT49\\n'\n  + 'iMA+6HrGpQIgMgJdB/Kt61eusYWWVi59ddLdFrx+XakFuBokgS0Dj9\\n'\n  + 'UCIHkPp3g9B6FVrUs3cC4QA5S2XP0YGhvAJ6FykArwjWYy\\n'\n  + '-----END RSA PRIVATE KEY-----';\n\nconst makeTestRoute = method => ({ user }) => ({\n  message: method,\n  userId: user && user._id,\n});\n\nMeteor.methods({\n  apiTestMethod() {\n    return new Promise(resolve => setTimeout(() => resolve(this.userId), 1500));\n  },\n  isAPI,\n});\n\ndescribe('RESTAPI', () => {\n  let user;\n\n  const api = new RESTAPI();\n  api.addEndpoint('/test', 'POST', makeTestRoute('POST'));\n  api.addEndpoint('/test', 'PUT', makeTestRoute('PUT'));\n  api.addEndpoint('/test', 'GET', () => {\n    throw new Error('secret error');\n  });\n  api.addEndpoint('/test', 'DELETE', () => {\n    throw new Meteor.Error('meteor error');\n  });\n  api.addEndpoint('/undefined', 'GET', () => {});\n  api.addEndpoint(\n    '/method/:id/test',\n    'POST',\n    ({\n      user: { _id: userId },\n      body: { testBody },\n      query: { testQuery },\n      params: { id },\n    }) =>\n      withMeteorUserId(\n        { userId },\n        () =>\n          new Promise((resolve, reject) =>\n            Meteor.call('apiTestMethod', (err, res) =>\n              (err\n                ? reject(err)\n                : resolve(`${res} ${testBody} ${testQuery} ${id}`)))),\n      ),\n  );\n  api.addEndpoint('/multipart', 'POST', makeTestRoute('POST'), {\n    multipart: true,\n  });\n\n  api.addEndpoint('/isAPI', 'GET', () => ({ isAPI: isAPI() }));\n  api.addEndpoint('/fiberAPIUser', 'GET', getAPIUser);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    user = Factory.create('user', {\n      apiPublicKey: { publicKey: publicKey.replace(/\\r?\\n|\\r/g, '') },\n    });\n  });\n\n  context('returns an error when', () => {\n    it('endpoint path is unknown', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      return fetchAndCheckResponse({\n        url: '/unknown_endpoint',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse: REST_API_ERRORS.UNKNOWN_ENDPOINT({\n          path: '/api/unknown_endpoint',\n          method: 'POST',\n        }),\n      });\n    });\n\n    it('endpoint method is unknown', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      return fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'PATCH',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse: REST_API_ERRORS.UNKNOWN_ENDPOINT({\n          path: '/api/test',\n          method: 'PATCH',\n        }),\n      });\n    });\n\n    it('content type is wrong', () =>\n      fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: { 'Content-Type': 'plain/text' },\n        },\n        expectedResponse: REST_API_ERRORS.WRONG_CONTENT_TYPE(\n          'plain/text',\n          'application/json',\n        ),\n      }));\n\n    it('authorization type is wrong', () =>\n      fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n        },\n        expectedResponse: REST_API_ERRORS.WRONG_AUTHORIZATION_TYPE,\n      }));\n\n    it('public key is wrong', () =>\n      fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({ publicKey: '12345' }),\n        },\n        // expectedResponse: REST_API_ERRORS.AUTHORIZATION_FAILED,\n      }).then((response) => {\n        const { status, errorName, message, info } = response;\n        expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n        expect(errorName).to.equal('AUTHORIZATION_FAILED');\n        expect(message).to.equal('Wrong public key or signature.');\n        expect(info).to.equal('No user found with this public key, or maybe it has a typo ?');\n      }));\n\n    it('signature is wrong', () =>\n      fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({ publicKey }),\n        },\n      }).then((response) => {\n        const { status, errorName, message, info } = response;\n        expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n        expect(errorName).to.equal('AUTHORIZATION_FAILED');\n        expect(message).to.equal('Wrong public key or signature.');\n        expect(info).to.not.equal(undefined);\n      }));\n\n    it('attempts a replay attack with same nonce', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n\n      return fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse: makeTestRoute('POST')({ user }),\n      }).then(() =>\n        fetchAndCheckResponse({\n          url: '/test',\n          data: {\n            method: 'POST',\n            headers: makeHeaders({\n              publicKey,\n              privateKey,\n              timestamp: Math.round(new Date().valueOf() / 1000).toString(),\n              nonce,\n            }),\n          },\n          expectedResponse: REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT,\n        }));\n    });\n\n    it('attempts a replay attack with old timestamp', () => {\n      const timestamp = (\n        Math.round(new Date().valueOf() / 1000) - 32\n      ).toString();\n      const nonce = '1hkfi57g';\n\n      return fetchAndCheckResponse({\n        url: '/test',\n        data: {\n          method: 'POST',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse: REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT,\n      });\n    });\n  });\n\n  it('can authenticate and get a response', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'POST',\n        headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n      },\n      expectedResponse: makeTestRoute('POST')({ user }),\n    });\n  });\n\n  it('removes old nonces', () =>\n    fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          timestamp: Math.round(new Date().valueOf() / 1000).toString(),\n          nonce: 'testNonce',\n        }),\n      },\n      expectedResponse: makeTestRoute('POST')({ user }),\n    }));\n\n  it('can authenticate and get a response from a different method for the same endpoint', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'PUT',\n        headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n      },\n      expectedResponse: makeTestRoute('PUT')({ user }),\n    });\n  });\n\n  it('returns an internal server error if the error is not a meteor.error', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'GET',\n        headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n      },\n      expectedResponse: { message: 'Internal server error', status: 500 },\n    });\n  });\n\n  it('displays the error if it is a meteor.error', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/test',\n      data: {\n        method: 'DELETE',\n        headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n      },\n      expectedResponse: { message: '[meteor error]', status: 400 },\n    });\n  });\n\n  it('calls meteor methods with the right userId', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n    const body = { testBody: 'testBody' };\n    const query = { testQuery: 'testQuery' };\n    const id = 'testId';\n\n    return fetchAndCheckResponse({\n      url: `/method/${id}/test`,\n      query,\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          body,\n          timestamp,\n          nonce,\n          query,\n        }),\n        body: JSON.stringify(body),\n      },\n      expectedResponse: `${user._id} testBody testQuery testId`,\n    });\n  });\n\n  it('does not crash if undefined is returned by the endpoint', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/undefined',\n      data: {\n        method: 'GET',\n        headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n      },\n      expectedResponse: '',\n    });\n  });\n\n  it('does not match sub endpoints', () => {\n    const { timestamp, nonce } = getTimestampAndNonce();\n\n    return fetchAndCheckResponse({\n      url: '/test/subtest',\n      data: {\n        method: 'POST',\n        headers: makeHeaders({\n          publicKey,\n          privateKey,\n          timestamp,\n          nonce,\n        }),\n      },\n      expectedResponse: REST_API_ERRORS.UNKNOWN_ENDPOINT({\n        path: '/api/test/subtest',\n        method: 'POST',\n      }),\n    });\n  });\n\n  context('can authenticate when signature is performed on', () => {\n    it('string only object', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      const query = {\n        param1: 'hello?this/is=a-test',\n        param2: '?yay!this/is/so#cool',\n        'param-3': 1200000,\n        'param-4': '1234',\n      };\n      const body = {\n        testString: 'hello',\n        testNumber: 12345,\n        testObject: {\n          testArray: ['test1', 'test2', null],\n        },\n        testBool: true,\n        testEmptyObject: {},\n        testEmptyArray: [],\n        testEmptyString: '',\n      };\n\n      return fetchAndCheckResponse({\n        url: '/test',\n        query,\n        data: {\n          method: 'POST',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce,\n            signature: signRequest({\n              body,\n              query,\n              timestamp,\n              nonce,\n              privateKey,\n              format: OBJECT_FORMATS.TO_STRING,\n            }),\n          }),\n          body: JSON.stringify(body),\n        },\n        expectedResponse: makeTestRoute('POST')({ user }),\n      });\n    });\n\n    it('literal only object', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      const query = {\n        param1: 'hello?this/is=a-test',\n        param2: '?yay!this/is/so#cool',\n        'param-3': 1200000,\n        'param-4': '1234',\n      };\n      const body = {\n        testString: 'hello',\n        testNumber: 12345,\n        testObject: {\n          testArray: ['test1', 'test2', null],\n        },\n        testBool: true,\n        testEmptyObject: {},\n        testEmptyArray: [],\n        testEmptyString: '',\n      };\n\n      return fetchAndCheckResponse({\n        url: '/test',\n        query,\n        data: {\n          method: 'POST',\n          headers: makeHeaders({\n            publicKey,\n            privateKey,\n            timestamp,\n            nonce,\n            signature: signRequest({\n              body,\n              query,\n              timestamp,\n              nonce,\n              privateKey,\n              format: OBJECT_FORMATS.TO_LITERRAL,\n            }),\n          }),\n          body: JSON.stringify(body),\n        },\n        expectedResponse: makeTestRoute('POST')({ user }),\n      });\n    });\n  });\n\n  it('allows multipart/form-data requests on multipart endpoints', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: user._id,\n      url: '/multipart',\n    }).then((res) => {\n      const { userId } = res;\n      expect(userId).to.equal(user._id);\n    });\n  });\n\n  it('does not allow multipart/form-data requests on non multipart endpoints', () => {\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: user._id,\n      url: '/test',\n    }).then((res) => {\n      const { status, errorName, message } = res;\n      expect(status).to.equal(400);\n      expect(errorName).to.equal('WRONG_CONTENT_TYPE');\n      expect(message).to.include('multipart');\n    });\n  });\n\n  context('getMatchingPathOptions', () => {\n    it('returns the correct options for endpoint with no wildcard', () => {\n      const options = {\n        '/api/test': {\n          POST: { options: { a: 1 } },\n        },\n      };\n\n      const req = {\n        _parsedUrl: { pathname: '/api/test' },\n        method: 'POST',\n      };\n\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({ a: 1 });\n    });\n\n    it('returns the correct options for endpoint with wildcards', () => {\n      const options = {\n        '/api/test/:wildcard1/:wildcard2': {\n          POST: { options: { a: 1 } },\n        },\n      };\n\n      const req = {\n        _parsedUrl: { pathname: '/api/test/12345/abcdef' },\n        method: 'POST',\n      };\n\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({ a: 1 });\n    });\n\n    it('returns the correct options for request with queryString', () => {\n      const options = {\n        '/api/test': {\n          POST: { options: { a: 1 } },\n        },\n      };\n\n      const req = {\n        _parsedUrl: { pathname: '/api/test/?test=1' },\n        method: 'POST',\n      };\n\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({ a: 1 });\n    });\n\n    it('returns no options for wrong request method ', () => {\n      const options = {\n        '/api/test': {\n          POST: { options: { a: 1 } },\n        },\n      };\n\n      const req = {\n        _parsedUrl: { pathname: '/api/test' },\n        method: 'GET',\n      };\n\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({});\n    });\n\n    it('returns no options for wrong request endpoint ', () => {\n      const options = {\n        '/api/test': {\n          POST: { options: { a: 1 } },\n        },\n      };\n\n      const req = {\n        _parsedUrl: { pathname: '/api' },\n        method: 'POST',\n      };\n\n      const pathOptions = getMatchingPathOptions(req, options);\n      expect(pathOptions).to.deep.equal({});\n    });\n\n    it('returns correct options for endpoints with and without wildcard ', () => {\n      const options = {\n        '/api/test': {\n          POST: { options: { a: 1 } },\n        },\n        '/api/test/:wildcard1/:wildcard2': {\n          POST: { options: { b: 1 } },\n        },\n      };\n\n      const req1 = {\n        _parsedUrl: { pathname: '/api/test' },\n        method: 'POST',\n      };\n\n      const pathOptions1 = getMatchingPathOptions(req1, options);\n      expect(pathOptions1).to.deep.equal({ a: 1 });\n\n      const req2 = {\n        _parsedUrl: { pathname: '/api/test/12345/abcdef' },\n        method: 'POST',\n      };\n\n      const pathOptions2 = getMatchingPathOptions(req2, options);\n      expect(pathOptions2).to.deep.equal({ b: 1 });\n    });\n  });\n\n  describe('isAPI', () => {\n    it('returns true for a function ran inside an API', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      const expectedResponse = { isAPI: true };\n      return fetchAndCheckResponse({\n        url: '/isAPI',\n        data: {\n          method: 'GET',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse,\n      });\n    });\n\n    it('returns false when calling a method', (done) => {\n      Meteor.call('isAPI', (err, result) => {\n        if (err) {\n          done(err);\n        }\n\n        expect(result).to.equal(false);\n        done();\n      });\n    });\n  });\n\n  describe('APIUser', () => {\n    it('returns the logged in API user', () => {\n      const { timestamp, nonce } = getTimestampAndNonce();\n      const expectedResponse = omit(user, ['createdAt', 'updatedAt', 'roles']);\n\n      return fetchAndCheckResponse({\n        url: '/fiberAPIUser',\n        data: {\n          method: 'GET',\n          headers: makeHeaders({ publicKey, privateKey, timestamp, nonce }),\n        },\n        expectedResponse,\n        include: true,\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"a25f538f7e3ef2a295e377fc50313942bae451a7"}

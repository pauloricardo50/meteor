{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/UploaderArray/Uploader/UploaderController.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/UploaderArray/Uploader/UploaderController.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/UploaderArray/Uploader/UploaderController.js","inputSourceMap":{"version":3,"sources":["imports/core/components/UploaderArray/Uploader/UploaderController.js"],"names":["Meteor","compose","withStateHandlers","withProps","lifecycle","injectIntl","uniqBy","FILE_STATUS","ALLOWED_FILE_TYPES","MAX_FILE_SIZE","ClientEventService","MODIFIED_FILES_EVENT","notifyOfUpload","withMatchParam","checkFile","file","currentValue","tempFiles","indexOf","type","size","some","name","filesExistAndAreValid","files","length","every","status","VALID","propHasChanged","oldProp","newProp","displayFullState","displayFull","microservice","showFull","hideFull","tempFileState","tempSuccessFiles","addTempSuccessFile","filter","addTempFiles","setTempSuccessFiles","props","deleteFile","intl","formatMessage","f","handleSuccess","fileMeta","id","label","loanId","docId","collection","handleAddFiles","fileArray","showError","forEach","isValid","push","then","default","notification","error","message","description","handleUploadComplete","url","emit","run","fileName","docLabel","handleRemove","key","Key","setTimeout","willReceiveProps","componentWillReceiveProps","nextValue","nonDuplicateFiles","find","withMergedSuccessfulFiles"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { compose, withStateHandlers, withProps, lifecycle } from 'recompose';\nimport { injectIntl } from 'react-intl';\nimport uniqBy from 'lodash/uniqBy';\n\nimport {\n  FILE_STATUS,\n  ALLOWED_FILE_TYPES,\n  MAX_FILE_SIZE,\n} from '../../../api/constants';\nimport ClientEventService, {\n  MODIFIED_FILES_EVENT,\n} from '../../../api/events/ClientEventService';\nimport { notifyOfUpload } from '../../../api/slack/methodDefinitions';\nimport withMatchParam from '../../../containers/withMatchParam';\n\nconst checkFile = (file, currentValue = [], tempFiles = []) => {\n  if (ALLOWED_FILE_TYPES.indexOf(file.type) < 0) {\n    return 'fileType';\n  }\n  if (file.size > MAX_FILE_SIZE) {\n    return 'fileSize';\n  }\n  if (\n    currentValue.some(({ name }) => name === file.name)\n    || tempFiles.some(({ name }) => name === file.name)\n  ) {\n    return 'sameName';\n  }\n  return true;\n};\n\nconst filesExistAndAreValid = files =>\n  files\n  && files.length > 0\n  && files.every(file => file.status === FILE_STATUS.VALID);\n\nexport const propHasChanged = (oldProp, newProp) =>\n  !!(\n    (!oldProp && newProp)\n    || (oldProp && !newProp)\n    || (oldProp && newProp && oldProp.length !== newProp.length)\n  );\n\nconst displayFullState = withStateHandlers(\n  ({ currentValue }) => ({\n    displayFull:\n      Meteor.microservice === 'admin' || !filesExistAndAreValid(currentValue),\n  }),\n  {\n    showFull: () => () => ({ displayFull: true }),\n    hideFull: () => () => ({ displayFull: false }),\n  },\n);\n\nconst tempFileState = withStateHandlers(\n  { tempFiles: [], tempSuccessFiles: [] },\n  {\n    addTempSuccessFile: ({ tempSuccessFiles, tempFiles }) => file => ({\n      tempSuccessFiles: [...tempSuccessFiles, file],\n      tempFiles: tempFiles.filter(({ name }) => name !== file.name),\n    }),\n    addTempFiles: ({ tempFiles }) => (files = []) => ({\n      tempFiles: [...tempFiles, ...files],\n    }),\n    setTempSuccessFiles: () => (files = []) => ({\n      tempSuccessFiles: files,\n    }),\n  },\n);\n\nconst props = withProps(({\n  deleteFile,\n  addTempFiles,\n  addTempSuccessFile,\n  intl: { formatMessage: f },\n  handleSuccess,\n  currentValue = [],\n  tempFiles,\n  tempSuccessFiles,\n  fileMeta: { id, label },\n  loanId,\n  setTempSuccessFiles,\n  docId,\n  collection,\n}) => ({\n  handleAddFiles: (files) => {\n    const fileArray = [];\n    let showError = false;\n\n    files.forEach((file) => {\n      const isValid = checkFile(\n        file,\n        [...currentValue, ...tempSuccessFiles],\n        tempFiles,\n      );\n      if (isValid === true) {\n        fileArray.push(file);\n      } else {\n        showError = isValid;\n      }\n    });\n\n    if (showError) {\n        import('../../../utils/notification').then(({ default: notification }) => {\n          notification.error({\n            message: f({ id: `errors.${showError}.title` }),\n            description: f({ id: `errors.${showError}.description` }),\n          });\n        });\n        return;\n    }\n\n    addTempFiles(files);\n  },\n  handleUploadComplete: (file, url) => {\n    addTempSuccessFile(file);\n    ClientEventService.emit(MODIFIED_FILES_EVENT);\n    notifyOfUpload.run({\n      fileName: file.name,\n      docLabel: label || f({ id: `files.${id}` }),\n      loanId,\n    });\n    if (handleSuccess) {\n      handleSuccess(file, url);\n    }\n  },\n  handleRemove: key =>\n    deleteFile(key).then(() => {\n      // Filter temp files if this is not a real file from the DB\n      setTempSuccessFiles(tempSuccessFiles.filter(({ Key }) => Key !== key));\n\n      // Wait for a sec before pinging the DB again\n      setTimeout(() => {\n        ClientEventService.emit(MODIFIED_FILES_EVENT);\n      }, 0);\n    }),\n}));\n\nconst willReceiveProps = lifecycle({\n  componentWillReceiveProps({ currentValue: nextValue = [] }) {\n    const {\n      currentValue = [],\n      tempSuccessFiles,\n      setTempSuccessFiles,\n    } = this.props;\n\n    if (\n      propHasChanged(currentValue, nextValue)\n      && tempSuccessFiles.length > 0\n    ) {\n      const nonDuplicateFiles = tempSuccessFiles.filter(({ name }) => !nextValue.find(file => file.name === name));\n      setTempSuccessFiles(nonDuplicateFiles);\n    }\n  },\n});\n\nconst withMergedSuccessfulFiles = withProps(({ currentValue = [], tempSuccessFiles }) => ({\n  currentValue: uniqBy([...currentValue, ...tempSuccessFiles], 'name'),\n}));\n\nexport default compose(\n  injectIntl,\n  displayFullState,\n  tempFileState,\n  withMatchParam('loanId'),\n  props,\n  willReceiveProps,\n  withMergedSuccessfulFiles,\n);\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/UploaderArray/Uploader/UploaderController.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/UploaderArray/Uploader/UploaderController.js"}},"code":"module.export({\n  propHasChanged: () => propHasChanged\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet compose, withStateHandlers, withProps, lifecycle;\nmodule.link(\"recompose\", {\n  compose(v) {\n    compose = v;\n  },\n\n  withStateHandlers(v) {\n    withStateHandlers = v;\n  },\n\n  withProps(v) {\n    withProps = v;\n  },\n\n  lifecycle(v) {\n    lifecycle = v;\n  }\n\n}, 1);\nlet injectIntl;\nmodule.link(\"react-intl\", {\n  injectIntl(v) {\n    injectIntl = v;\n  }\n\n}, 2);\nlet uniqBy;\nmodule.link(\"lodash/uniqBy\", {\n  default(v) {\n    uniqBy = v;\n  }\n\n}, 3);\nlet FILE_STATUS, ALLOWED_FILE_TYPES, MAX_FILE_SIZE;\nmodule.link(\"../../../api/constants\", {\n  FILE_STATUS(v) {\n    FILE_STATUS = v;\n  },\n\n  ALLOWED_FILE_TYPES(v) {\n    ALLOWED_FILE_TYPES = v;\n  },\n\n  MAX_FILE_SIZE(v) {\n    MAX_FILE_SIZE = v;\n  }\n\n}, 4);\nlet ClientEventService, MODIFIED_FILES_EVENT;\nmodule.link(\"../../../api/events/ClientEventService\", {\n  default(v) {\n    ClientEventService = v;\n  },\n\n  MODIFIED_FILES_EVENT(v) {\n    MODIFIED_FILES_EVENT = v;\n  }\n\n}, 5);\nlet notifyOfUpload;\nmodule.link(\"../../../api/slack/methodDefinitions\", {\n  notifyOfUpload(v) {\n    notifyOfUpload = v;\n  }\n\n}, 6);\nlet withMatchParam;\nmodule.link(\"../../../containers/withMatchParam\", {\n  default(v) {\n    withMatchParam = v;\n  }\n\n}, 7);\n\nconst checkFile = function (file) {\n  let currentValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let tempFiles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  if (ALLOWED_FILE_TYPES.indexOf(file.type) < 0) {\n    return 'fileType';\n  }\n\n  if (file.size > MAX_FILE_SIZE) {\n    return 'fileSize';\n  }\n\n  if (currentValue.some((_ref) => {\n    let {\n      name\n    } = _ref;\n    return name === file.name;\n  }) || tempFiles.some((_ref2) => {\n    let {\n      name\n    } = _ref2;\n    return name === file.name;\n  })) {\n    return 'sameName';\n  }\n\n  return true;\n};\n\nconst filesExistAndAreValid = files => files && files.length > 0 && files.every(file => file.status === FILE_STATUS.VALID);\n\nconst propHasChanged = (oldProp, newProp) => !!(!oldProp && newProp || oldProp && !newProp || oldProp && newProp && oldProp.length !== newProp.length);\n\nconst displayFullState = withStateHandlers((_ref3) => {\n  let {\n    currentValue\n  } = _ref3;\n  return {\n    displayFull: Meteor.microservice === 'admin' || !filesExistAndAreValid(currentValue)\n  };\n}, {\n  showFull: () => () => ({\n    displayFull: true\n  }),\n  hideFull: () => () => ({\n    displayFull: false\n  })\n});\nconst tempFileState = withStateHandlers({\n  tempFiles: [],\n  tempSuccessFiles: []\n}, {\n  addTempSuccessFile: (_ref4) => {\n    let {\n      tempSuccessFiles,\n      tempFiles\n    } = _ref4;\n    return file => ({\n      tempSuccessFiles: [...tempSuccessFiles, file],\n      tempFiles: tempFiles.filter((_ref5) => {\n        let {\n          name\n        } = _ref5;\n        return name !== file.name;\n      })\n    });\n  },\n  addTempFiles: (_ref6) => {\n    let {\n      tempFiles\n    } = _ref6;\n    return function () {\n      let files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      return {\n        tempFiles: [...tempFiles, ...files]\n      };\n    };\n  },\n  setTempSuccessFiles: () => function () {\n    let files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return {\n      tempSuccessFiles: files\n    };\n  }\n});\nconst props = withProps((_ref7) => {\n  let {\n    deleteFile,\n    addTempFiles,\n    addTempSuccessFile,\n    intl: {\n      formatMessage: f\n    },\n    handleSuccess,\n    currentValue = [],\n    tempFiles,\n    tempSuccessFiles,\n    fileMeta: {\n      id,\n      label\n    },\n    loanId,\n    setTempSuccessFiles,\n    docId,\n    collection\n  } = _ref7;\n  return {\n    handleAddFiles: files => {\n      const fileArray = [];\n      let showError = false;\n      files.forEach(file => {\n        const isValid = checkFile(file, [...currentValue, ...tempSuccessFiles], tempFiles);\n\n        if (isValid === true) {\n          fileArray.push(file);\n        } else {\n          showError = isValid;\n        }\n      });\n\n      if (showError) {\n        module.dynamicImport(\"../../../utils/notification\").then((_ref8) => {\n          let {\n            default: notification\n          } = _ref8;\n          notification.error({\n            message: f({\n              id: \"errors.\".concat(showError, \".title\")\n            }),\n            description: f({\n              id: \"errors.\".concat(showError, \".description\")\n            })\n          });\n        });\n        return;\n      }\n\n      addTempFiles(files);\n    },\n    handleUploadComplete: (file, url) => {\n      addTempSuccessFile(file);\n      ClientEventService.emit(MODIFIED_FILES_EVENT);\n      notifyOfUpload.run({\n        fileName: file.name,\n        docLabel: label || f({\n          id: \"files.\".concat(id)\n        }),\n        loanId\n      });\n\n      if (handleSuccess) {\n        handleSuccess(file, url);\n      }\n    },\n    handleRemove: key => deleteFile(key).then(() => {\n      // Filter temp files if this is not a real file from the DB\n      setTempSuccessFiles(tempSuccessFiles.filter((_ref9) => {\n        let {\n          Key\n        } = _ref9;\n        return Key !== key;\n      })); // Wait for a sec before pinging the DB again\n\n      setTimeout(() => {\n        ClientEventService.emit(MODIFIED_FILES_EVENT);\n      }, 0);\n    })\n  };\n});\nconst willReceiveProps = lifecycle({\n  componentWillReceiveProps(_ref10) {\n    let {\n      currentValue: nextValue = []\n    } = _ref10;\n    const {\n      currentValue = [],\n      tempSuccessFiles,\n      setTempSuccessFiles\n    } = this.props;\n\n    if (propHasChanged(currentValue, nextValue) && tempSuccessFiles.length > 0) {\n      const nonDuplicateFiles = tempSuccessFiles.filter((_ref11) => {\n        let {\n          name\n        } = _ref11;\n        return !nextValue.find(file => file.name === name);\n      });\n      setTempSuccessFiles(nonDuplicateFiles);\n    }\n  }\n\n});\nconst withMergedSuccessfulFiles = withProps((_ref12) => {\n  let {\n    currentValue = [],\n    tempSuccessFiles\n  } = _ref12;\n  return {\n    currentValue: uniqBy([...currentValue, ...tempSuccessFiles], 'name')\n  };\n});\nmodule.exportDefault(compose(injectIntl, displayFullState, tempFileState, withMatchParam('loanId'), props, willReceiveProps, withMergedSuccessfulFiles));","map":{"version":3,"sources":["imports/core/components/UploaderArray/Uploader/UploaderController.js"],"names":["Meteor","checkFile","currentValue","tempFiles","ALLOWED_FILE_TYPES","file","name","filesExistAndAreValid","files","FILE_STATUS","propHasChanged","oldProp","newProp","displayFullState","withStateHandlers","displayFull","showFull","hideFull","tempFileState","tempSuccessFiles","addTempSuccessFile","addTempFiles","setTempSuccessFiles","props","withProps","intl","formatMessage","f","fileMeta","label","collection","handleAddFiles","fileArray","showError","isValid","default","notification","message","id","description","handleUploadComplete","ClientEventService","notifyOfUpload","fileName","docLabel","loanId","handleSuccess","handleRemove","key","Key","setTimeout","willReceiveProps","lifecycle","componentWillReceiveProps","nextValue","nonDuplicateFiles","withMergedSuccessfulFiles","uniqBy","compose","withMatchParam"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { compose, withStateHandlers, withProps, lifecycle } from 'recompose';\nimport { injectIntl } from 'react-intl';\nimport uniqBy from 'lodash/uniqBy';\n\nimport {\n  FILE_STATUS,\n  ALLOWED_FILE_TYPES,\n  MAX_FILE_SIZE,\n} from '../../../api/constants';\nimport ClientEventService, {\n  MODIFIED_FILES_EVENT,\n} from '../../../api/events/ClientEventService';\nimport { notifyOfUpload } from '../../../api/slack/methodDefinitions';\nimport withMatchParam from '../../../containers/withMatchParam';\n\nconst checkFile = (file, currentValue = [], tempFiles = []) => {\n  if (ALLOWED_FILE_TYPES.indexOf(file.type) < 0) {\n    return 'fileType';\n  }\n  if (file.size > MAX_FILE_SIZE) {\n    return 'fileSize';\n  }\n  if (\n    currentValue.some(({ name }) => name === file.name)\n    || tempFiles.some(({ name }) => name === file.name)\n  ) {\n    return 'sameName';\n  }\n  return true;\n};\n\nconst filesExistAndAreValid = files =>\n  files\n  && files.length > 0\n  && files.every(file => file.status === FILE_STATUS.VALID);\n\nexport const propHasChanged = (oldProp, newProp) =>\n  !!(\n    (!oldProp && newProp)\n    || (oldProp && !newProp)\n    || (oldProp && newProp && oldProp.length !== newProp.length)\n  );\n\nconst displayFullState = withStateHandlers(\n  ({ currentValue }) => ({\n    displayFull:\n      Meteor.microservice === 'admin' || !filesExistAndAreValid(currentValue),\n  }),\n  {\n    showFull: () => () => ({ displayFull: true }),\n    hideFull: () => () => ({ displayFull: false }),\n  },\n);\n\nconst tempFileState = withStateHandlers(\n  { tempFiles: [], tempSuccessFiles: [] },\n  {\n    addTempSuccessFile: ({ tempSuccessFiles, tempFiles }) => file => ({\n      tempSuccessFiles: [...tempSuccessFiles, file],\n      tempFiles: tempFiles.filter(({ name }) => name !== file.name),\n    }),\n    addTempFiles: ({ tempFiles }) => (files = []) => ({\n      tempFiles: [...tempFiles, ...files],\n    }),\n    setTempSuccessFiles: () => (files = []) => ({\n      tempSuccessFiles: files,\n    }),\n  },\n);\n\nconst props = withProps(({\n  deleteFile,\n  addTempFiles,\n  addTempSuccessFile,\n  intl: { formatMessage: f },\n  handleSuccess,\n  currentValue = [],\n  tempFiles,\n  tempSuccessFiles,\n  fileMeta: { id, label },\n  loanId,\n  setTempSuccessFiles,\n  docId,\n  collection,\n}) => ({\n  handleAddFiles: (files) => {\n    const fileArray = [];\n    let showError = false;\n\n    files.forEach((file) => {\n      const isValid = checkFile(\n        file,\n        [...currentValue, ...tempSuccessFiles],\n        tempFiles,\n      );\n      if (isValid === true) {\n        fileArray.push(file);\n      } else {\n        showError = isValid;\n      }\n    });\n\n    if (showError) {\n        import('../../../utils/notification').then(({ default: notification }) => {\n          notification.error({\n            message: f({ id: `errors.${showError}.title` }),\n            description: f({ id: `errors.${showError}.description` }),\n          });\n        });\n        return;\n    }\n\n    addTempFiles(files);\n  },\n  handleUploadComplete: (file, url) => {\n    addTempSuccessFile(file);\n    ClientEventService.emit(MODIFIED_FILES_EVENT);\n    notifyOfUpload.run({\n      fileName: file.name,\n      docLabel: label || f({ id: `files.${id}` }),\n      loanId,\n    });\n    if (handleSuccess) {\n      handleSuccess(file, url);\n    }\n  },\n  handleRemove: key =>\n    deleteFile(key).then(() => {\n      // Filter temp files if this is not a real file from the DB\n      setTempSuccessFiles(tempSuccessFiles.filter(({ Key }) => Key !== key));\n\n      // Wait for a sec before pinging the DB again\n      setTimeout(() => {\n        ClientEventService.emit(MODIFIED_FILES_EVENT);\n      }, 0);\n    }),\n}));\n\nconst willReceiveProps = lifecycle({\n  componentWillReceiveProps({ currentValue: nextValue = [] }) {\n    const {\n      currentValue = [],\n      tempSuccessFiles,\n      setTempSuccessFiles,\n    } = this.props;\n\n    if (\n      propHasChanged(currentValue, nextValue)\n      && tempSuccessFiles.length > 0\n    ) {\n      const nonDuplicateFiles = tempSuccessFiles.filter(({ name }) => !nextValue.find(file => file.name === name));\n      setTempSuccessFiles(nonDuplicateFiles);\n    }\n  },\n});\n\nconst withMergedSuccessfulFiles = withProps(({ currentValue = [], tempSuccessFiles }) => ({\n  currentValue: uniqBy([...currentValue, ...tempSuccessFiles], 'name'),\n}));\n\nexport default compose(\n  injectIntl,\n  displayFullState,\n  tempFileState,\n  withMatchParam('loanId'),\n  props,\n  willReceiveProps,\n  withMergedSuccessfulFiles,\n);\n"]},"sourceType":"script","hash":"3c4b24dee8e58e96de8729b2930f4b7131a0563b"}

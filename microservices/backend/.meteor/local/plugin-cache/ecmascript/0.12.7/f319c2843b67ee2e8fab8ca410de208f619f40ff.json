{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/processors/actions/requery.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/cultofcoders:redis-oplog/lib/processors/actions/requery.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/processors/actions/requery.js","passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/processors/actions/requery.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:redis-oplog/lib/processors/actions/requery.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 1);\nlet Events;\nmodule.link(\"../../constants\", {\n  Events(v) {\n    Events = v;\n  }\n\n}, 2);\nlet MongoIDMap;\nmodule.link(\"../../cache/mongoIdMap\", {\n  MongoIDMap(v) {\n    MongoIDMap = v;\n  }\n\n}, 3);\nmodule.exportDefault(function (observableCollection, newCommer, event, modifiedFields) {\n  const {\n    store,\n    selector,\n    options\n  } = observableCollection;\n  const newStore = new MongoIDMap();\n  const freshIds = observableCollection.collection.find(selector, (0, _objectSpread2.default)({}, options, {\n    fields: {\n      _id: 1\n    }\n  })).fetch();\n  freshIds.forEach(doc => newStore.set(doc._id, doc));\n  let added = false;\n  store.compareWith(newStore, {\n    leftOnly(docId) {\n      observableCollection.remove(docId);\n    },\n\n    rightOnly(docId) {\n      if (newCommer && EJSON.equals(docId, newCommer._id)) {\n        added = true;\n        observableCollection.add(newCommer);\n      } else {\n        observableCollection.addById(docId);\n      }\n    }\n\n  }); // if we have an update, and we have a newcommer, that new commer may be inside the ids\n  // TODO: maybe refactor this in a separate action (?)\n\n  if (newCommer && Events.UPDATE === event && modifiedFields && !added && store.has(newCommer._id)) {\n    observableCollection.change(newCommer, modifiedFields);\n  }\n});","map":{"version":3,"sources":["packages/cultofcoders:redis-oplog/lib/processors/actions/requery.js"],"names":["_","module","link","v","EJSON","Events","MongoIDMap","exportDefault","observableCollection","newCommer","event","modifiedFields","store","selector","options","newStore","freshIds","collection","find","fields","_id","fetch","forEach","doc","set","added","compareWith","leftOnly","docId","remove","rightOnly","equals","add","addById","UPDATE","has","change"],"mappings":";;;;AAAA,IAAIA,CAAJ;;AAAMC,MAAM,CAACC,IAAP,CAAY,mBAAZ,EAAgC;AAACF,EAAAA,CAAC,CAACG,CAAD,EAAG;AAACH,IAAAA,CAAC,GAACG,CAAF;AAAI;;AAAV,CAAhC,EAA4C,CAA5C;AAA+C,IAAIC,KAAJ;AAAUH,MAAM,CAACC,IAAP,CAAY,cAAZ,EAA2B;AAACE,EAAAA,KAAK,CAACD,CAAD,EAAG;AAACC,IAAAA,KAAK,GAACD,CAAN;AAAQ;;AAAlB,CAA3B,EAA+C,CAA/C;AAAkD,IAAIE,MAAJ;AAAWJ,MAAM,CAACC,IAAP,CAAY,iBAAZ,EAA8B;AAACG,EAAAA,MAAM,CAACF,CAAD,EAAG;AAACE,IAAAA,MAAM,GAACF,CAAP;AAAS;;AAApB,CAA9B,EAAoD,CAApD;AAAuD,IAAIG,UAAJ;AAAeL,MAAM,CAACC,IAAP,CAAY,wBAAZ,EAAqC;AAACI,EAAAA,UAAU,CAACH,CAAD,EAAG;AAACG,IAAAA,UAAU,GAACH,CAAX;AAAa;;AAA5B,CAArC,EAAmE,CAAnE;AAAlMF,MAAM,CAACM,aAAP,CAWe,UAAUC,oBAAV,EAAgCC,SAAhC,EAA2CC,KAA3C,EAAkDC,cAAlD,EAAkE;AAC7E,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAA+BN,oBAArC;AAEA,QAAMO,QAAQ,GAAG,IAAIT,UAAJ,EAAjB;AACA,QAAMU,QAAQ,GAAGR,oBAAoB,CAACS,UAArB,CAAgCC,IAAhC,CACbL,QADa,kCACEC,OADF;AACWK,IAAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAE;AAAP;AADnB,MACiCC,KADjC,EAAjB;AAEAL,EAAAA,QAAQ,CAACM,OAAT,CAAiBC,GAAG,IAAIR,QAAQ,CAACS,GAAT,CAAaD,GAAG,CAACH,GAAjB,EAAsBG,GAAtB,CAAxB;AAEA,MAAIE,KAAK,GAAG,KAAZ;AACAb,EAAAA,KAAK,CAACc,WAAN,CAAkBX,QAAlB,EAA4B;AACxBY,IAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZpB,MAAAA,oBAAoB,CAACqB,MAArB,CAA4BD,KAA5B;AACH,KAHuB;;AAIxBE,IAAAA,SAAS,CAACF,KAAD,EAAQ;AACb,UAAInB,SAAS,IAAIL,KAAK,CAAC2B,MAAN,CAAaH,KAAb,EAAoBnB,SAAS,CAACW,GAA9B,CAAjB,EAAqD;AACjDK,QAAAA,KAAK,GAAG,IAAR;AACAjB,QAAAA,oBAAoB,CAACwB,GAArB,CAAyBvB,SAAzB;AACH,OAHD,MAGO;AACHD,QAAAA,oBAAoB,CAACyB,OAArB,CAA6BL,KAA7B;AACH;AACJ;;AAXuB,GAA5B,EAT6E,CAuB7E;AACA;;AACA,MAAInB,SAAS,IACNJ,MAAM,CAAC6B,MAAP,KAAkBxB,KADrB,IAEGC,cAFH,IAGG,CAACc,KAHJ,IAIGb,KAAK,CAACuB,GAAN,CAAU1B,SAAS,CAACW,GAApB,CAJP,EAIiC;AAC7BZ,IAAAA,oBAAoB,CAAC4B,MAArB,CAA4B3B,SAA5B,EAAuCE,cAAvC;AACH;AACJ,CA3CD","sourcesContent":["import { _ } from 'meteor/underscore';\nimport { EJSON } from 'meteor/ejson';\nimport { Events } from '../../constants';\nimport { MongoIDMap } from '../../cache/mongoIdMap';\n\n/**\n * @param observableCollection\n * @param newCommer\n * @param event\n * @param modifiedFields\n */\nexport default function (observableCollection, newCommer, event, modifiedFields) {\n    const { store, selector, options } = observableCollection;\n\n    const newStore = new MongoIDMap();\n    const freshIds = observableCollection.collection.find(\n        selector, { ...options, fields: { _id: 1 } }).fetch();\n    freshIds.forEach(doc => newStore.set(doc._id, doc));\n\n    let added = false;\n    store.compareWith(newStore, {\n        leftOnly(docId) {\n            observableCollection.remove(docId);\n        },\n        rightOnly(docId) {\n            if (newCommer && EJSON.equals(docId, newCommer._id)) {\n                added = true;\n                observableCollection.add(newCommer);\n            } else {\n                observableCollection.addById(docId);\n            }\n        }\n    });\n\n    // if we have an update, and we have a newcommer, that new commer may be inside the ids\n    // TODO: maybe refactor this in a separate action (?)\n    if (newCommer\n        && Events.UPDATE === event\n        && modifiedFields\n        && !added\n        && store.has(newCommer._id)) {\n        observableCollection.change(newCommer, modifiedFields);\n    }\n}\n"]},"sourceType":"script","hash":"f319c2843b67ee2e8fab8ca410de208f619f40ff"}

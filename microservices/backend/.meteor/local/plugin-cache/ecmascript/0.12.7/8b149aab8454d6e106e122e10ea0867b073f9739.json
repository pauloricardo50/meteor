{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/helpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/helpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/helpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/helpers.js"],"names":["Meteor","SimpleSchema","UserService","anyOrganisationMatches","userOrganisations","proOrganisations","some","userOrganisation","proOrganisation","_id","getImpersonateUserId","userId","impersonateUser","organisations","fetchOne","$filters","user","getByEmail","proId","Error","length","checkQuery","query","schema","cleanQuery","clean","validate","error","checkAccessToUser","users","referredByOrganisationLink","referredByUserLink","emails","address","impersonateSchema","type","String","optional"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport UserService from '../../../users/server/UserService';\n\nconst anyOrganisationMatches = ({\n  userOrganisations = [],\n  proOrganisations = [],\n}) =>\n  userOrganisations.some(userOrganisation =>\n    proOrganisations.some(proOrganisation => userOrganisation._id === proOrganisation._id));\n\nexport const getImpersonateUserId = ({ userId, impersonateUser }) => {\n  const { organisations: userOrganisations = [] } = UserService.fetchOne({\n    $filters: { _id: userId },\n    organisations: { _id: 1 },\n  });\n\n  const user = UserService.getByEmail(impersonateUser);\n  let proId;\n  let proOrganisations;\n\n  if (user) {\n    proId = user._id;\n    proOrganisations = UserService.fetchOne({\n      $filters: { _id: user._id },\n      organisations: { _id: 1 },\n    }).organisations || [];\n  }\n\n  if (!proId) {\n    throw new Meteor.Error(`No user found for email address \"${impersonateUser}\"`);\n  }\n\n  if (\n    userOrganisations.length === 0\n    || proOrganisations.length === 0\n    || !anyOrganisationMatches({ userOrganisations, proOrganisations })\n  ) {\n    throw new Meteor.Error(`User with email address \"${impersonateUser}\" is not part of your organisation`);\n  }\n\n  return proId;\n};\n\nexport const checkQuery = ({ query, schema }) => {\n  const cleanQuery = schema.clean(query);\n  try {\n    schema.validate(cleanQuery);\n  } catch (error) {\n    throw new Meteor.Error(error);\n  }\n\n  return cleanQuery;\n};\n\nexport const checkAccessToUser = ({ user, proId }) => {\n  const { organisations = [] } = UserService.fetchOne({\n    $filters: { _id: proId },\n    organisations: { users: { _id: 1 } },\n  });\n\n  if (\n    !organisations.some(({ _id }) => _id === user.referredByOrganisationLink)\n    && !organisations.some(({ users = [] }) =>\n      users.some(({ _id }) => _id === user.referredByUserLink))\n  ) {\n    throw new Meteor.Error(`User with email \"${user.emails[0].address}\" not found, or you don't have access to it.`);\n  }\n};\n\nexport const impersonateSchema = new SimpleSchema({\n  'impersonate-user': { type: String, optional: true },\n});\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/helpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/helpers.js"}},"code":"module.export({\n  getImpersonateUserId: () => getImpersonateUserId,\n  checkQuery: () => checkQuery,\n  checkAccessToUser: () => checkAccessToUser,\n  impersonateSchema: () => impersonateSchema\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet UserService;\nmodule.link(\"../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 2);\n\nconst anyOrganisationMatches = ({\n  userOrganisations = [],\n  proOrganisations = []\n}) => userOrganisations.some(userOrganisation => proOrganisations.some(proOrganisation => userOrganisation._id === proOrganisation._id));\n\nconst getImpersonateUserId = ({\n  userId,\n  impersonateUser\n}) => {\n  const {\n    organisations: userOrganisations = []\n  } = UserService.fetchOne({\n    $filters: {\n      _id: userId\n    },\n    organisations: {\n      _id: 1\n    }\n  });\n  const user = UserService.getByEmail(impersonateUser);\n  let proId;\n  let proOrganisations;\n\n  if (user) {\n    proId = user._id;\n    proOrganisations = UserService.fetchOne({\n      $filters: {\n        _id: user._id\n      },\n      organisations: {\n        _id: 1\n      }\n    }).organisations || [];\n  }\n\n  if (!proId) {\n    throw new Meteor.Error(`No user found for email address \"${impersonateUser}\"`);\n  }\n\n  if (userOrganisations.length === 0 || proOrganisations.length === 0 || !anyOrganisationMatches({\n    userOrganisations,\n    proOrganisations\n  })) {\n    throw new Meteor.Error(`User with email address \"${impersonateUser}\" is not part of your organisation`);\n  }\n\n  return proId;\n};\n\nconst checkQuery = ({\n  query,\n  schema\n}) => {\n  const cleanQuery = schema.clean(query);\n\n  try {\n    schema.validate(cleanQuery);\n  } catch (error) {\n    throw new Meteor.Error(error);\n  }\n\n  return cleanQuery;\n};\n\nconst checkAccessToUser = ({\n  user,\n  proId\n}) => {\n  const {\n    organisations = []\n  } = UserService.fetchOne({\n    $filters: {\n      _id: proId\n    },\n    organisations: {\n      users: {\n        _id: 1\n      }\n    }\n  });\n\n  if (!organisations.some(({\n    _id\n  }) => _id === user.referredByOrganisationLink) && !organisations.some(({\n    users = []\n  }) => users.some(({\n    _id\n  }) => _id === user.referredByUserLink))) {\n    throw new Meteor.Error(`User with email \"${user.emails[0].address}\" not found, or you don't have access to it.`);\n  }\n};\n\nconst impersonateSchema = new SimpleSchema({\n  'impersonate-user': {\n    type: String,\n    optional: true\n  }\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/helpers.js"],"names":["Meteor","anyOrganisationMatches","userOrganisations","proOrganisations","userOrganisation","proOrganisation","getImpersonateUserId","impersonateUser","organisations","$filters","_id","userId","user","UserService","proId","checkQuery","schema","cleanQuery","checkAccessToUser","users","address","impersonateSchema","type","optional"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport UserService from '../../../users/server/UserService';\n\nconst anyOrganisationMatches = ({\n  userOrganisations = [],\n  proOrganisations = [],\n}) =>\n  userOrganisations.some(userOrganisation =>\n    proOrganisations.some(proOrganisation => userOrganisation._id === proOrganisation._id));\n\nexport const getImpersonateUserId = ({ userId, impersonateUser }) => {\n  const { organisations: userOrganisations = [] } = UserService.fetchOne({\n    $filters: { _id: userId },\n    organisations: { _id: 1 },\n  });\n\n  const user = UserService.getByEmail(impersonateUser);\n  let proId;\n  let proOrganisations;\n\n  if (user) {\n    proId = user._id;\n    proOrganisations = UserService.fetchOne({\n      $filters: { _id: user._id },\n      organisations: { _id: 1 },\n    }).organisations || [];\n  }\n\n  if (!proId) {\n    throw new Meteor.Error(`No user found for email address \"${impersonateUser}\"`);\n  }\n\n  if (\n    userOrganisations.length === 0\n    || proOrganisations.length === 0\n    || !anyOrganisationMatches({ userOrganisations, proOrganisations })\n  ) {\n    throw new Meteor.Error(`User with email address \"${impersonateUser}\" is not part of your organisation`);\n  }\n\n  return proId;\n};\n\nexport const checkQuery = ({ query, schema }) => {\n  const cleanQuery = schema.clean(query);\n  try {\n    schema.validate(cleanQuery);\n  } catch (error) {\n    throw new Meteor.Error(error);\n  }\n\n  return cleanQuery;\n};\n\nexport const checkAccessToUser = ({ user, proId }) => {\n  const { organisations = [] } = UserService.fetchOne({\n    $filters: { _id: proId },\n    organisations: { users: { _id: 1 } },\n  });\n\n  if (\n    !organisations.some(({ _id }) => _id === user.referredByOrganisationLink)\n    && !organisations.some(({ users = [] }) =>\n      users.some(({ _id }) => _id === user.referredByUserLink))\n  ) {\n    throw new Meteor.Error(`User with email \"${user.emails[0].address}\" not found, or you don't have access to it.`);\n  }\n};\n\nexport const impersonateSchema = new SimpleSchema({\n  'impersonate-user': { type: String, optional: true },\n});\n"]},"sourceType":"script","hash":"8b149aab8454d6e106e122e10ea0867b073f9739"}

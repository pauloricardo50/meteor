{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/force-ssl-common/force_ssl_common.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/force-ssl-common/force_ssl_common.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/force-ssl-common/force_ssl_common.js","passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/force-ssl-common/force_ssl_common.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/force-ssl-common/force_ssl_common.js"}},"code":"module.export({\n  isLocalConnection: () => isLocalConnection,\n  isSslConnection: () => isSslConnection\n});\nlet forwarded;\nmodule.link(\"forwarded-http\", {\n  default(v) {\n    forwarded = v;\n  }\n\n}, 0);\n\n// Determine if the connection is only over localhost. Both we\n// received it on localhost, and all proxies involved received on\n// localhost (supports \"forwarded\" and \"x-forwarded-for\").\nconst isLocalConnection = req => {\n  const localhostRegexp = /^\\s*(.*127\\.0\\.0\\.1|\\[?::1\\]?)\\s*$/;\n  const request = Object.create(req);\n  request.connection = Object.assign({}, req.connection, {\n    remoteAddress: req.connection.remoteAddress || req.socket.remoteAddress\n  });\n  const forwardedParams = forwarded(request);\n  let isLocal = true;\n  Object.keys(forwardedParams.for).forEach(forKey => {\n    if (!localhostRegexp.test(forKey)) {\n      isLocal = false;\n    }\n  });\n  return isLocal;\n}; // Determine if the connection was over SSL at any point. Either we\n// received it as SSL, or a proxy did and translated it for us.\n\n\nconst isSslConnection = req => {\n  const forwardedParams = forwarded(req);\n  return req.connection.pair || forwardedParams.proto && forwardedParams.proto.indexOf('https') !== -1;\n};","map":{"version":3,"sources":["packages/force-ssl-common/force_ssl_common.js"],"names":["module","export","isLocalConnection","isSslConnection","forwarded","link","default","v","req","localhostRegexp","request","Object","create","connection","assign","remoteAddress","socket","forwardedParams","isLocal","keys","for","forEach","forKey","test","pair","proto","indexOf"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,iBAAiB,EAAC,MAAIA,iBAAvB;AAAyCC,EAAAA,eAAe,EAAC,MAAIA;AAA7D,CAAd;AAA6F,IAAIC,SAAJ;AAAcJ,MAAM,CAACK,IAAP,CAAY,gBAAZ,EAA6B;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACH,IAAAA,SAAS,GAACG,CAAV;AAAY;;AAAxB,CAA7B,EAAuD,CAAvD;;AAE3G;AACA;AACA;AACA,MAAML,iBAAiB,GAAIM,GAAD,IAAS;AACjC,QAAMC,eAAe,GAAG,oCAAxB;AACA,QAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcJ,GAAd,CAAhB;AACAE,EAAAA,OAAO,CAACG,UAAR,GAAqBF,MAAM,CAACG,MAAP,CACnB,EADmB,EAEnBN,GAAG,CAACK,UAFe,EAGnB;AAAEE,IAAAA,aAAa,EAAEP,GAAG,CAACK,UAAJ,CAAeE,aAAf,IAAgCP,GAAG,CAACQ,MAAJ,CAAWD;AAA5D,GAHmB,CAArB;AAKA,QAAME,eAAe,GAAGb,SAAS,CAACM,OAAD,CAAjC;AACA,MAAIQ,OAAO,GAAG,IAAd;AACAP,EAAAA,MAAM,CAACQ,IAAP,CAAYF,eAAe,CAACG,GAA5B,EAAiCC,OAAjC,CAA0CC,MAAD,IAAY;AACnD,QAAI,CAACb,eAAe,CAACc,IAAhB,CAAqBD,MAArB,CAAL,EAAmC;AACjCJ,MAAAA,OAAO,GAAG,KAAV;AACD;AACF,GAJD;AAKA,SAAOA,OAAP;AACD,CAhBD,C,CAkBA;AACA;;;AACA,MAAMf,eAAe,GAAIK,GAAD,IAAS;AAC/B,QAAMS,eAAe,GAAGb,SAAS,CAACI,GAAD,CAAjC;AACA,SAAOA,GAAG,CAACK,UAAJ,CAAeW,IAAf,IACAP,eAAe,CAACQ,KAAhB,IAAyBR,eAAe,CAACQ,KAAhB,CAAsBC,OAAtB,CAA8B,OAA9B,MAA2C,CAAC,CAD5E;AAED,CAJD","sourcesContent":["import forwarded from 'forwarded-http';\n\n// Determine if the connection is only over localhost. Both we\n// received it on localhost, and all proxies involved received on\n// localhost (supports \"forwarded\" and \"x-forwarded-for\").\nconst isLocalConnection = (req) => {\n  const localhostRegexp = /^\\s*(.*127\\.0\\.0\\.1|\\[?::1\\]?)\\s*$/;\n  const request = Object.create(req);\n  request.connection = Object.assign(\n    {},\n    req.connection,\n    { remoteAddress: req.connection.remoteAddress || req.socket.remoteAddress }\n  );\n  const forwardedParams = forwarded(request);\n  let isLocal = true;\n  Object.keys(forwardedParams.for).forEach((forKey) => {\n    if (!localhostRegexp.test(forKey)) {\n      isLocal = false;\n    }\n  });\n  return isLocal;\n};\n\n// Determine if the connection was over SSL at any point. Either we\n// received it as SSL, or a proxy did and translated it for us.\nconst isSslConnection = (req) => {\n  const forwardedParams = forwarded(req);\n  return req.connection.pair\n      || forwardedParams.proto && forwardedParams.proto.indexOf('https') !== -1;\n};\n\nexport { isLocalConnection, isSslConnection };\n"]},"sourceType":"script","hash":"e0985c5f28ea3f0ac58240f45b12b71f855ee0ca"}

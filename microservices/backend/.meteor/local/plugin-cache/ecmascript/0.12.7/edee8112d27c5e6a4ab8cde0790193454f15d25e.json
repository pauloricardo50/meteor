{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/TextInput/TextInput.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/components/TextInput/TextInput.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/TextInput/TextInput.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/TextInput/TextInput.jsx"],"names":["React","PropTypes","injectIntl","MaskedInput","moment","classnames","InputAdornment","FormHelperText","InputLabel","useInputLabelWidth","FormControl","Input","swissFrancMask","percentMask","toNumber","getDefaults","type","id","onChange","value","simpleOnChange","onChangeHandler","event","target","showMask","mask","placeholder","Math","round","parseFloat","toFixed","onDateChange","val","date","format","getFinalPlaceholder","noIntl","defaultPlaceholder","intl","finalPlaceholder","formatMessage","TextInput","props","classes","className","error","fullWidth","info","inputComponent","InputProps","inputProps","inputRef","label","labelStyle","style","inputType","inputLabelProps","otherProps","inputLabelRef","labelWidth","Object","values","join","fontSize","undefined","noValidate","pattern","propTypes","bool","string","node","func","object","oneOfType","element","number","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport MaskedInput from 'react-text-mask';\nimport moment from 'moment';\nimport classnames from 'classnames';\n\nimport InputAdornment from '../Material/InputAdornment';\nimport FormHelperText from '../Material/FormHelperText';\nimport InputLabel, { useInputLabelWidth } from '../Material/InputLabel';\nimport FormControl from '../Material/FormControl';\nimport Input from '../Material/Input';\nimport { swissFrancMask, percentMask } from '../../utils/textMasks';\nimport { toNumber } from '../../utils/conversionFunctions';\n\nconst getDefaults = ({ type, id, onChange, value, simpleOnChange }) => {\n  if (simpleOnChange) {\n    return { onChangeHandler: onChange, value };\n  }\n\n  switch (type) {\n  case 'money':\n    return {\n      onChangeHandler: event => onChange(id, toNumber(event.target.value)),\n      showMask: true,\n      mask: swissFrancMask,\n      placeholder: 0,\n      value,\n    };\n  case 'percent':\n    return {\n      onChangeHandler: event =>\n        onChange(\n          id,\n          Math.round(parseFloat(event.target.value) * 100) / 10000,\n        ),\n      showMask: true,\n      mask: percentMask,\n      placeholder: '%',\n      value: (value * 100).toFixed(2),\n    };\n  case 'number':\n    return {\n      onChangeHandler: event => onChange(id, toNumber(event.target.value)),\n      showMask: false,\n      value,\n    };\n  case 'date':\n    return {\n      onChangeHandler: event => onChange(id, event.target.value, event),\n      onDateChange: (val) => {\n        // This specific format should be used for the server to get the\n        // date in the right order\n        const date = moment(val).format('YYYY-MM-DD');\n        // Allow setting a date to null\n        onChange(id, val ? date : null, {});\n      },\n      showMask: false,\n      value: value ? moment(value) : null,\n    };\n  default:\n    return {\n      // Pass event as third argument, for some components which need it\n      // like react-autosuggest\n      onChangeHandler: event => onChange(id, event.target.value, event),\n      showMask: false,\n      value,\n    };\n  }\n};\n\nexport const getFinalPlaceholder = ({\n  noIntl,\n  placeholder,\n  defaultPlaceholder,\n  intl,\n  type,\n}) => {\n  let finalPlaceholder;\n  if (noIntl) {\n    finalPlaceholder = placeholder || defaultPlaceholder;\n  } else {\n    finalPlaceholder = placeholder && typeof placeholder === 'string'\n      ? `${intl.formatMessage({\n        id: 'Forms.textInput.placeholderPrefix',\n      })} ${intl.formatMessage({ id: placeholder })}`\n      : defaultPlaceholder;\n  }\n\n  // Ignore placeholder for money inputs, and just show the currency\n  // Showing an amount is confusing\n  if (type === 'money') {\n    finalPlaceholder = defaultPlaceholder;\n  }\n\n  return finalPlaceholder;\n};\nconst TextInput = (props) => {\n  const {\n    classes,\n    className,\n    error,\n    fullWidth,\n    id,\n    info,\n    inputComponent,\n    InputProps,\n    inputProps,\n    inputRef,\n    intl,\n    label,\n    labelStyle,\n    noIntl,\n    onChange,\n    placeholder,\n    simpleOnChange,\n    style,\n    type,\n    inputType,\n    inputLabelProps,\n    ...otherProps\n  } = props;\n\n  const {\n    onChangeHandler,\n    onDateChange,\n    showMask,\n    mask,\n    placeholder: defaultPlaceholder,\n    value,\n  } = getDefaults(props);\n  const { inputLabelRef, labelWidth } = useInputLabelWidth(!!label);\n\n  return (\n    <FormControl\n      error={error}\n      className={classnames('mui-text-input', className)}\n      style={style}\n      fullWidth={fullWidth}\n    >\n      {label && (\n        <InputLabel\n          ref={inputLabelRef}\n          htmlFor={id}\n          style={labelStyle}\n          {...inputLabelProps}\n        >\n          {label}\n        </InputLabel>\n      )}\n      <Input\n        {...otherProps}\n        labelWidth={labelWidth}\n        className={classes ? Object.values(classes).join(' ') : ''}\n        id={id}\n        onChange={onChangeHandler}\n        type={inputType || 'text'}\n        style={{ fontSize: 'inherit' }}\n        inputComponent={showMask ? MaskedInput : inputComponent || undefined}\n        inputProps={{\n          ...inputProps, // Backwards compatible\n          ...InputProps,\n          value,\n          placeholder: getFinalPlaceholder({\n            noIntl,\n            placeholder,\n            defaultPlaceholder,\n            intl,\n            type,\n          }),\n          noValidate: true,\n          mask: mask || undefined,\n          pattern: mask ? '[0-9]*' : undefined,\n          onDateChange: inputType === 'date' ? onDateChange : undefined,\n        }}\n        startAdornment={\n          props.type === 'money' ? (\n            <InputAdornment position=\"start\">CHF</InputAdornment>\n          ) : null\n        }\n      />\n      {info && <FormHelperText>{info}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nTextInput.propTypes = {\n  error: PropTypes.bool,\n  id: PropTypes.string,\n  info: PropTypes.node,\n  inputComponent: PropTypes.func,\n  inputProps: PropTypes.object,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  noIntl: PropTypes.bool,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.node,\n  simpleOnChange: PropTypes.bool, // Removes all onChange modifications\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nTextInput.defaultProps = {\n  error: false,\n  id: undefined,\n  info: undefined,\n  inputComponent: null,\n  inputProps: undefined,\n  label: '',\n  noIntl: false,\n  onChange: undefined,\n  placeholder: undefined,\n  simpleOnChange: false,\n  type: undefined,\n  value: undefined,\n};\n\nexport default injectIntl(TextInput);\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/TextInput/TextInput.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/TextInput/TextInput.jsx"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nmodule.export({\n  getFinalPlaceholder: function () {\n    return getFinalPlaceholder;\n  }\n});\nvar React;\nmodule.link(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes;\nmodule.link(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar injectIntl;\nmodule.link(\"react-intl\", {\n  injectIntl: function (v) {\n    injectIntl = v;\n  }\n}, 2);\nvar MaskedInput;\nmodule.link(\"react-text-mask\", {\n  \"default\": function (v) {\n    MaskedInput = v;\n  }\n}, 3);\nvar moment;\nmodule.link(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 4);\nvar classnames;\nmodule.link(\"classnames\", {\n  \"default\": function (v) {\n    classnames = v;\n  }\n}, 5);\nvar InputAdornment;\nmodule.link(\"../Material/InputAdornment\", {\n  \"default\": function (v) {\n    InputAdornment = v;\n  }\n}, 6);\nvar FormHelperText;\nmodule.link(\"../Material/FormHelperText\", {\n  \"default\": function (v) {\n    FormHelperText = v;\n  }\n}, 7);\nvar InputLabel, useInputLabelWidth;\nmodule.link(\"../Material/InputLabel\", {\n  \"default\": function (v) {\n    InputLabel = v;\n  },\n  useInputLabelWidth: function (v) {\n    useInputLabelWidth = v;\n  }\n}, 8);\nvar FormControl;\nmodule.link(\"../Material/FormControl\", {\n  \"default\": function (v) {\n    FormControl = v;\n  }\n}, 9);\nvar Input;\nmodule.link(\"../Material/Input\", {\n  \"default\": function (v) {\n    Input = v;\n  }\n}, 10);\nvar swissFrancMask, percentMask;\nmodule.link(\"../../utils/textMasks\", {\n  swissFrancMask: function (v) {\n    swissFrancMask = v;\n  },\n  percentMask: function (v) {\n    percentMask = v;\n  }\n}, 11);\nvar toNumber;\nmodule.link(\"../../utils/conversionFunctions\", {\n  toNumber: function (v) {\n    toNumber = v;\n  }\n}, 12);\n\nvar getDefaults = function (_ref) {\n  var type = _ref.type,\n      id = _ref.id,\n      onChange = _ref.onChange,\n      value = _ref.value,\n      simpleOnChange = _ref.simpleOnChange;\n\n  if (simpleOnChange) {\n    return {\n      onChangeHandler: onChange,\n      value: value\n    };\n  }\n\n  switch (type) {\n    case 'money':\n      return {\n        onChangeHandler: function (event) {\n          return onChange(id, toNumber(event.target.value));\n        },\n        showMask: true,\n        mask: swissFrancMask,\n        placeholder: 0,\n        value: value\n      };\n\n    case 'percent':\n      return {\n        onChangeHandler: function (event) {\n          return onChange(id, Math.round(parseFloat(event.target.value) * 100) / 10000);\n        },\n        showMask: true,\n        mask: percentMask,\n        placeholder: '%',\n        value: (value * 100).toFixed(2)\n      };\n\n    case 'number':\n      return {\n        onChangeHandler: function (event) {\n          return onChange(id, toNumber(event.target.value));\n        },\n        showMask: false,\n        value: value\n      };\n\n    case 'date':\n      return {\n        onChangeHandler: function (event) {\n          return onChange(id, event.target.value, event);\n        },\n        onDateChange: function (val) {\n          // This specific format should be used for the server to get the\n          // date in the right order\n          var date = moment(val).format('YYYY-MM-DD'); // Allow setting a date to null\n\n          onChange(id, val ? date : null, {});\n        },\n        showMask: false,\n        value: value ? moment(value) : null\n      };\n\n    default:\n      return {\n        // Pass event as third argument, for some components which need it\n        // like react-autosuggest\n        onChangeHandler: function (event) {\n          return onChange(id, event.target.value, event);\n        },\n        showMask: false,\n        value: value\n      };\n  }\n};\n\nvar getFinalPlaceholder = function (_ref2) {\n  var noIntl = _ref2.noIntl,\n      placeholder = _ref2.placeholder,\n      defaultPlaceholder = _ref2.defaultPlaceholder,\n      intl = _ref2.intl,\n      type = _ref2.type;\n  var finalPlaceholder;\n\n  if (noIntl) {\n    finalPlaceholder = placeholder || defaultPlaceholder;\n  } else {\n    finalPlaceholder = placeholder && typeof placeholder === 'string' ? intl.formatMessage({\n      id: 'Forms.textInput.placeholderPrefix'\n    }) + \" \" + intl.formatMessage({\n      id: placeholder\n    }) : defaultPlaceholder;\n  } // Ignore placeholder for money inputs, and just show the currency\n  // Showing an amount is confusing\n\n\n  if (type === 'money') {\n    finalPlaceholder = defaultPlaceholder;\n  }\n\n  return finalPlaceholder;\n};\n\nvar TextInput = function (props) {\n  var classes = props.classes,\n      className = props.className,\n      error = props.error,\n      fullWidth = props.fullWidth,\n      id = props.id,\n      info = props.info,\n      inputComponent = props.inputComponent,\n      InputProps = props.InputProps,\n      inputProps = props.inputProps,\n      inputRef = props.inputRef,\n      intl = props.intl,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      noIntl = props.noIntl,\n      onChange = props.onChange,\n      placeholder = props.placeholder,\n      simpleOnChange = props.simpleOnChange,\n      style = props.style,\n      type = props.type,\n      inputType = props.inputType,\n      inputLabelProps = props.inputLabelProps,\n      otherProps = (0, _objectWithoutProperties2.default)(props, [\"classes\", \"className\", \"error\", \"fullWidth\", \"id\", \"info\", \"inputComponent\", \"InputProps\", \"inputProps\", \"inputRef\", \"intl\", \"label\", \"labelStyle\", \"noIntl\", \"onChange\", \"placeholder\", \"simpleOnChange\", \"style\", \"type\", \"inputType\", \"inputLabelProps\"]);\n\n  var _getDefaults = getDefaults(props),\n      onChangeHandler = _getDefaults.onChangeHandler,\n      onDateChange = _getDefaults.onDateChange,\n      showMask = _getDefaults.showMask,\n      mask = _getDefaults.mask,\n      defaultPlaceholder = _getDefaults.placeholder,\n      value = _getDefaults.value;\n\n  var _useInputLabelWidth = useInputLabelWidth(!!label),\n      inputLabelRef = _useInputLabelWidth.inputLabelRef,\n      labelWidth = _useInputLabelWidth.labelWidth;\n\n  return React.createElement(FormControl, {\n    error: error,\n    className: classnames('mui-text-input', className),\n    style: style,\n    fullWidth: fullWidth\n  }, label && React.createElement(InputLabel, (0, _extends2.default)({\n    ref: inputLabelRef,\n    htmlFor: id,\n    style: labelStyle\n  }, inputLabelProps), label), React.createElement(Input, (0, _extends2.default)({}, otherProps, {\n    labelWidth: labelWidth,\n    className: classes ? Object.values(classes).join(' ') : '',\n    id: id,\n    onChange: onChangeHandler,\n    type: inputType || 'text',\n    style: {\n      fontSize: 'inherit'\n    },\n    inputComponent: showMask ? MaskedInput : inputComponent || undefined,\n    inputProps: (0, _objectSpread2.default)({}, inputProps, InputProps, {\n      value: value,\n      placeholder: getFinalPlaceholder({\n        noIntl: noIntl,\n        placeholder: placeholder,\n        defaultPlaceholder: defaultPlaceholder,\n        intl: intl,\n        type: type\n      }),\n      noValidate: true,\n      mask: mask || undefined,\n      pattern: mask ? '[0-9]*' : undefined,\n      onDateChange: inputType === 'date' ? onDateChange : undefined\n    }),\n    startAdornment: props.type === 'money' ? React.createElement(InputAdornment, {\n      position: \"start\"\n    }, \"CHF\") : null\n  })), info && React.createElement(FormHelperText, null, info));\n};\n\nTextInput.propTypes = {\n  error: PropTypes.bool,\n  id: PropTypes.string,\n  info: PropTypes.node,\n  inputComponent: PropTypes.func,\n  inputProps: PropTypes.object,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  noIntl: PropTypes.bool,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.node,\n  simpleOnChange: PropTypes.bool,\n  // Removes all onChange modifications\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nTextInput.defaultProps = {\n  error: false,\n  id: undefined,\n  info: undefined,\n  inputComponent: null,\n  inputProps: undefined,\n  label: '',\n  noIntl: false,\n  onChange: undefined,\n  placeholder: undefined,\n  simpleOnChange: false,\n  type: undefined,\n  value: undefined\n};\nmodule.exportDefault(injectIntl(TextInput));","map":{"version":3,"sources":["imports/core/components/TextInput/TextInput.jsx"],"names":["getDefaults","simpleOnChange","onChangeHandler","value","event","onChange","toNumber","showMask","mask","placeholder","Math","parseFloat","onDateChange","val","date","moment","getFinalPlaceholder","type","finalPlaceholder","id","TextInput","props","otherProps","labelWidth","useInputLabelWidth","classnames","label","classes","Object","inputType","fontSize","inputComponent","noIntl","defaultPlaceholder","intl","noValidate","pattern","undefined","info","error","PropTypes","inputProps","injectIntl"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport MaskedInput from 'react-text-mask';\nimport moment from 'moment';\nimport classnames from 'classnames';\n\nimport InputAdornment from '../Material/InputAdornment';\nimport FormHelperText from '../Material/FormHelperText';\nimport InputLabel, { useInputLabelWidth } from '../Material/InputLabel';\nimport FormControl from '../Material/FormControl';\nimport Input from '../Material/Input';\nimport { swissFrancMask, percentMask } from '../../utils/textMasks';\nimport { toNumber } from '../../utils/conversionFunctions';\n\nconst getDefaults = ({ type, id, onChange, value, simpleOnChange }) => {\n  if (simpleOnChange) {\n    return { onChangeHandler: onChange, value };\n  }\n\n  switch (type) {\n  case 'money':\n    return {\n      onChangeHandler: event => onChange(id, toNumber(event.target.value)),\n      showMask: true,\n      mask: swissFrancMask,\n      placeholder: 0,\n      value,\n    };\n  case 'percent':\n    return {\n      onChangeHandler: event =>\n        onChange(\n          id,\n          Math.round(parseFloat(event.target.value) * 100) / 10000,\n        ),\n      showMask: true,\n      mask: percentMask,\n      placeholder: '%',\n      value: (value * 100).toFixed(2),\n    };\n  case 'number':\n    return {\n      onChangeHandler: event => onChange(id, toNumber(event.target.value)),\n      showMask: false,\n      value,\n    };\n  case 'date':\n    return {\n      onChangeHandler: event => onChange(id, event.target.value, event),\n      onDateChange: (val) => {\n        // This specific format should be used for the server to get the\n        // date in the right order\n        const date = moment(val).format('YYYY-MM-DD');\n        // Allow setting a date to null\n        onChange(id, val ? date : null, {});\n      },\n      showMask: false,\n      value: value ? moment(value) : null,\n    };\n  default:\n    return {\n      // Pass event as third argument, for some components which need it\n      // like react-autosuggest\n      onChangeHandler: event => onChange(id, event.target.value, event),\n      showMask: false,\n      value,\n    };\n  }\n};\n\nexport const getFinalPlaceholder = ({\n  noIntl,\n  placeholder,\n  defaultPlaceholder,\n  intl,\n  type,\n}) => {\n  let finalPlaceholder;\n  if (noIntl) {\n    finalPlaceholder = placeholder || defaultPlaceholder;\n  } else {\n    finalPlaceholder = placeholder && typeof placeholder === 'string'\n      ? `${intl.formatMessage({\n        id: 'Forms.textInput.placeholderPrefix',\n      })} ${intl.formatMessage({ id: placeholder })}`\n      : defaultPlaceholder;\n  }\n\n  // Ignore placeholder for money inputs, and just show the currency\n  // Showing an amount is confusing\n  if (type === 'money') {\n    finalPlaceholder = defaultPlaceholder;\n  }\n\n  return finalPlaceholder;\n};\nconst TextInput = (props) => {\n  const {\n    classes,\n    className,\n    error,\n    fullWidth,\n    id,\n    info,\n    inputComponent,\n    InputProps,\n    inputProps,\n    inputRef,\n    intl,\n    label,\n    labelStyle,\n    noIntl,\n    onChange,\n    placeholder,\n    simpleOnChange,\n    style,\n    type,\n    inputType,\n    inputLabelProps,\n    ...otherProps\n  } = props;\n\n  const {\n    onChangeHandler,\n    onDateChange,\n    showMask,\n    mask,\n    placeholder: defaultPlaceholder,\n    value,\n  } = getDefaults(props);\n  const { inputLabelRef, labelWidth } = useInputLabelWidth(!!label);\n\n  return (\n    <FormControl\n      error={error}\n      className={classnames('mui-text-input', className)}\n      style={style}\n      fullWidth={fullWidth}\n    >\n      {label && (\n        <InputLabel\n          ref={inputLabelRef}\n          htmlFor={id}\n          style={labelStyle}\n          {...inputLabelProps}\n        >\n          {label}\n        </InputLabel>\n      )}\n      <Input\n        {...otherProps}\n        labelWidth={labelWidth}\n        className={classes ? Object.values(classes).join(' ') : ''}\n        id={id}\n        onChange={onChangeHandler}\n        type={inputType || 'text'}\n        style={{ fontSize: 'inherit' }}\n        inputComponent={showMask ? MaskedInput : inputComponent || undefined}\n        inputProps={{\n          ...inputProps, // Backwards compatible\n          ...InputProps,\n          value,\n          placeholder: getFinalPlaceholder({\n            noIntl,\n            placeholder,\n            defaultPlaceholder,\n            intl,\n            type,\n          }),\n          noValidate: true,\n          mask: mask || undefined,\n          pattern: mask ? '[0-9]*' : undefined,\n          onDateChange: inputType === 'date' ? onDateChange : undefined,\n        }}\n        startAdornment={\n          props.type === 'money' ? (\n            <InputAdornment position=\"start\">CHF</InputAdornment>\n          ) : null\n        }\n      />\n      {info && <FormHelperText>{info}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nTextInput.propTypes = {\n  error: PropTypes.bool,\n  id: PropTypes.string,\n  info: PropTypes.node,\n  inputComponent: PropTypes.func,\n  inputProps: PropTypes.object,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  noIntl: PropTypes.bool,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.node,\n  simpleOnChange: PropTypes.bool, // Removes all onChange modifications\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nTextInput.defaultProps = {\n  error: false,\n  id: undefined,\n  info: undefined,\n  inputComponent: null,\n  inputProps: undefined,\n  label: '',\n  noIntl: false,\n  onChange: undefined,\n  placeholder: undefined,\n  simpleOnChange: false,\n  type: undefined,\n  value: undefined,\n};\n\nexport default injectIntl(TextInput);\n"]},"sourceType":"script","hash":"edee8112d27c5e6a4ab8cde0790193454f15d25e"}

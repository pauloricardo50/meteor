{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/updateWatchers/server/UpdateWatcherService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/updateWatchers/server/UpdateWatcherService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/updateWatchers/server/UpdateWatcherService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/updateWatchers/server/UpdateWatcherService.js"],"names":["Mongo","intersection","difference","moment","LOANS_COLLECTION","LoanService","Intl","toMoney","percentFormatters","BORROWERS_COLLECTION","PROPERTIES_COLLECTION","updateWatcherNotification","UserService","CollectionService","UpdateWatchers","UpdateWatcherService","constructor","addUpdateWatching","collection","fields","shouldWatch","that","hookHandle","after","update","userId","doc","fieldNames","collectionName","_name","changedFields","getChangedFields","length","updateWatcher","previousDoc","previous","existingUpdateWatcher","findOne","docId","_id","insertWatcher","currentWatcher","insert","updatedFields","createFieldDiffs","current","map","fieldName","previousValue","currentValue","filter","x","getUpdatedFieldDiffs","updatedField","newValue","undefined","previouslyUpdatedFields","newFields","updatedDiffs","newDiffs","baseUpdate","$set","getOldUpdateWatchers","secondsFromNow","date","Date","setSeconds","getSeconds","foundWatchers","find","updatedAt","$lt","fetch","processUpdateWatcher","updateWatcherId","user","fetchOne","$filters","assignedEmployee","email","name","roles","remove","title","getNotificationTitle","message","formatUpdatedFields","Collection","get","firstName","lastName","address1","promotions","hasPromotion","text","suffix","field","formatField","join","previousValueIsNonEmpty","Array","isArray","formatArrayDiff","formatMessage","id","formatValue","stringifiedPrevious","JSON","stringify","stringifiedCurrent","differentValues","val","i","_currIndex","_atIndex","indexOf","diff","prefix","prev","formatObjectDiff","removedValues","item","parentName","updated","Object","keys","key","value","parentKey","skipPrefix","format","manageUpdateWatchers","forEach"],"mappings":"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","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nimport intersection from 'lodash/intersection';\nimport difference from 'lodash/difference';\nimport moment from 'moment';\n\nimport { LOANS_COLLECTION } from 'core/api/loans/loanConstants';\nimport LoanService from 'core/api/loans/server/LoanService';\nimport Intl from '../../../utils/server/intl';\nimport { toMoney } from '../../../utils/conversionFunctions';\nimport { percentFormatters } from '../../../utils/formHelpers';\nimport { BORROWERS_COLLECTION, PROPERTIES_COLLECTION } from '../../constants';\nimport { updateWatcherNotification } from '../../slack/server/slackNotifications';\nimport UserService from '../../users/server/UserService';\nimport CollectionService from '../../helpers/CollectionService';\nimport UpdateWatchers from './updateWatchers';\n\nclass UpdateWatcherService extends CollectionService {\n  constructor() {\n    super(UpdateWatchers);\n  }\n\n  addUpdateWatching({ collection, fields, shouldWatch = () => true }) {\n    const that = this;\n    const hookHandle = collection.after.update(function (\n      userId,\n      doc,\n      fieldNames,\n    ) {\n      const collectionName = collection._name;\n      const changedFields = that.getChangedFields({ fieldNames, fields });\n\n      if (!changedFields || changedFields.length === 0) {\n        return;\n      }\n\n      if (shouldWatch({ userId, fieldNames })) {\n        that.updateWatcher({\n          userId,\n          collectionName,\n          doc,\n          changedFields,\n          previousDoc: this.previous,\n        });\n      }\n    });\n\n    return hookHandle;\n  }\n\n  getChangedFields({ fieldNames, fields }) {\n    return intersection(fieldNames, fields);\n  }\n\n  updateWatcher({ collectionName, doc, changedFields, previousDoc, userId }) {\n    const existingUpdateWatcher = this.findOne({\n      collection: collectionName,\n      docId: doc._id,\n    });\n\n    if (!existingUpdateWatcher) {\n      this.insertWatcher({\n        userId,\n        doc,\n        previousDoc,\n        collection: collectionName,\n        changedFields,\n      });\n    } else {\n      this.update({\n        currentWatcher: existingUpdateWatcher,\n        doc,\n        previousDoc,\n        changedFields,\n      });\n    }\n  }\n\n  insertWatcher({ doc, previousDoc, collection, changedFields, userId }) {\n    return this.insert({\n      userId,\n      docId: doc._id,\n      collection,\n      updatedFields: this.createFieldDiffs({\n        previous: previousDoc,\n        current: doc,\n        fieldNames: changedFields,\n      }),\n    });\n  }\n\n  createFieldDiffs({ previous, current, fieldNames }) {\n    return fieldNames\n      .map((fieldName) => {\n        if (previous[fieldName] === current[fieldName]) {\n          return null;\n        }\n\n        return {\n          fieldName,\n          previousValue: previous[fieldName],\n          currentValue: current[fieldName],\n        };\n      })\n      .filter(x => x);\n  }\n\n  getUpdatedFieldDiffs({ updatedFields, doc }) {\n    return updatedFields\n      .map((updatedField) => {\n        const newValue = doc[updatedField.fieldName];\n\n        // If a value is changed back to its old value, remove it\n        if (newValue === updatedField.previousValue) {\n          return null;\n        }\n\n        if (newValue !== undefined) {\n          return { ...updatedField, currentValue: newValue };\n        }\n\n        return updatedField;\n      })\n      .filter(x => x);\n  }\n\n  update({ currentWatcher, doc, previousDoc, changedFields }) {\n    const previouslyUpdatedFields = currentWatcher.updatedFields.map(({ fieldName }) => fieldName);\n    const newFields = difference(changedFields, previouslyUpdatedFields);\n\n    const updatedDiffs = this.getUpdatedFieldDiffs({\n      updatedFields: currentWatcher.updatedFields,\n      doc,\n    });\n\n    const newDiffs = this.createFieldDiffs({\n      current: doc,\n      previous: previousDoc,\n      fieldNames: newFields,\n    });\n\n    return this.baseUpdate(\n      { _id: currentWatcher._id },\n      { $set: { updatedFields: [...updatedDiffs, ...newDiffs] } },\n    );\n  }\n\n  getOldUpdateWatchers({ secondsFromNow }) {\n    const date = new Date();\n    date.setSeconds(date.getSeconds() - secondsFromNow);\n    const foundWatchers = this.find({ updatedAt: { $lt: date } }).fetch();\n\n    return foundWatchers;\n  }\n\n  processUpdateWatcher({\n    _id: updateWatcherId,\n    userId,\n    docId,\n    collection,\n    updatedFields,\n  }) {\n    const user = UserService.fetchOne({\n      $filters: { _id: userId },\n      assignedEmployee: { email: 1 },\n      name: 1,\n      roles: 1,\n    });\n\n    if (!user) {\n      return this.remove(updateWatcherId);\n    }\n\n    const title = this.getNotificationTitle({ docId, collection });\n    const message = this.formatUpdatedFields(updatedFields);\n\n    updateWatcherNotification({\n      user,\n      title,\n      collection,\n      docId,\n      message,\n    });\n\n    this.remove(updateWatcherId);\n  }\n\n  getNotificationTitle({ docId, collection }) {\n    const doc = Mongo.Collection.get(collection).findOne({ _id: docId });\n\n    // Document has been deleted\n    if (!doc) {\n      return;\n    }\n\n    switch (collection) {\n    case BORROWERS_COLLECTION: {\n      const { firstName, lastName } = doc;\n      return `Modifications pour l'emprunteur \"${firstName\n          || ''} ${lastName || ''}\"`;\n    }\n\n    case PROPERTIES_COLLECTION: {\n      const { address1 } = doc;\n      return `Modifications pour le bien immo \"${address1}\"`;\n    }\n\n    case LOANS_COLLECTION: {\n      const { name, promotions, hasPromotion } = LoanService.fetchOne({\n        $filters: { _id: docId },\n        name: 1,\n        promotions: { name: 1 },\n        hasPromotion: 1,\n      });\n      const text = `Modifications dans le dossier ${name}`;\n      const suffix = hasPromotion ? ` (${promotions[0].name})` : '';\n      return text + suffix;\n    }\n\n    default:\n      return `Modifications dans ${collection}`;\n    }\n  }\n\n  formatUpdatedFields(updatedFields) {\n    return updatedFields.map(field => this.formatField(field)).join('\\n');\n  }\n\n  formatField({ fieldName, previousValue, currentValue }) {\n    const previousValueIsNonEmpty = previousValue\n      || (Array.isArray(previousValue) && previousValue.length > 0);\n\n    if (previousValueIsNonEmpty) {\n      if (Array.isArray(currentValue)) {\n        return this.formatArrayDiff(fieldName, previousValue, currentValue);\n      }\n\n      return `*${Intl.formatMessage({\n        id: `Forms.${fieldName}`,\n      })}*: ${this.formatValue(previousValue, fieldName)} -> ${this.formatValue(\n        currentValue,\n        fieldName,\n      )}`;\n    }\n\n    return `*${Intl.formatMessage({\n      id: `Forms.${fieldName}`,\n    })}*: ${this.formatValue(currentValue, fieldName)}`;\n  }\n\n  formatArrayDiff(fieldName, previousValue, currentValue) {\n    const stringifiedPrevious = previousValue.map(JSON.stringify);\n    const stringifiedCurrent = currentValue.map(JSON.stringify);\n    const differentValues = currentValue\n      .map((val, i) => ({\n        val,\n        _currIndex: i,\n        _atIndex: stringifiedPrevious.indexOf(stringifiedCurrent[i]),\n      }))\n      .filter(({ _atIndex }) => _atIndex < 0);\n\n    const diff = differentValues\n      .map(({ _currIndex, val }) => {\n        const prefix = `\\`${_currIndex + 1}\\`\\n`;\n        const prev = previousValue && previousValue[_currIndex];\n\n        if (val && typeof val === 'object') {\n          return `${prefix}${this.formatObjectDiff(fieldName, prev, val)}`;\n        }\n\n        if (prev) {\n          const previous = this.formatValue(prev, fieldName);\n          const current = this.formatValue(val, fieldName, true);\n\n          return `${prefix}${previous} -> ${current}`;\n        }\n\n        return `${prefix}${this.formatValue(val, fieldName)}`;\n      })\n      .join('\\n');\n\n    const removedValues = previousValue.length > currentValue.length\n      ? previousValue\n        .map((item, i) => {\n          if (i >= currentValue.length) {\n            const prefix = `\\`${i + 1}\\`\\n`;\n\n            return `${prefix}${this.formatValue(\n              item,\n              fieldName,\n            )} -> _supprimé_`;\n          }\n          return null;\n        })\n        .filter(x => x)\n        .join('\\n')\n      : '';\n\n    return `*${Intl.formatMessage({\n      id: `Forms.${fieldName}`,\n    })}*:\\n${diff}${removedValues}`;\n  }\n\n  formatObjectDiff(parentName, previousValue, currentValue) {\n    const updated = Object.keys(currentValue)\n      .map((key) => {\n        const value = currentValue[key];\n        const previous = previousValue && previousValue[key];\n\n        if (value === previous) {\n          return null;\n        }\n\n        if (previous !== undefined) {\n          return `*${Intl.formatMessage({\n            id: `Forms.${parentName}.${key}`,\n          })}*: ${previous} -> ${value}`;\n        }\n\n        return `*${Intl.formatMessage({\n          id: `Forms.${parentName}.${key}`,\n        })}*: ${value}`;\n      })\n      .filter(x => x)\n      .join('\\n');\n\n    return updated;\n  }\n\n  formatValue(value, parentKey, skipPrefix) {\n    if (typeof value === 'boolean') {\n      return value ? 'Oui' : 'Non';\n    }\n\n    if (typeof value === 'number') {\n      return value === 0\n        ? '0'\n        : value > 1\n          ? toMoney(value)\n          : `${percentFormatters.format(value)}%`;\n    }\n\n    if (!value) {\n      return '-';\n    }\n\n    if (value instanceof Date) {\n      return moment(value).format('D/M/YYYY');\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(item => this.formatValue(item, parentKey)).join('\\n');\n    }\n\n    if (typeof value === 'object') {\n      return Object.keys(value)\n        .map((key) => {\n          const val = value[key];\n\n          if (skipPrefix) {\n            return this.formatValue(val, `${parentKey}.${key}`);\n          }\n\n          return `*${Intl.formatMessage({\n            id: `Forms.${parentKey}.${key}`,\n          })}*: ${this.formatValue(val, `${parentKey}.${key}`)}`;\n        })\n        .join(', ');\n    }\n\n    return value;\n  }\n\n  manageUpdateWatchers({ secondsFromNow }) {\n    this.getOldUpdateWatchers({ secondsFromNow }).forEach(updateWatcher =>\n      this.processUpdateWatcher(updateWatcher));\n  }\n}\n\nexport default new UpdateWatcherService();\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/updateWatchers/server/UpdateWatcherService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/updateWatchers/server/UpdateWatcherService.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet intersection;\nmodule.link(\"lodash/intersection\", {\n  default(v) {\n    intersection = v;\n  }\n\n}, 1);\nlet difference;\nmodule.link(\"lodash/difference\", {\n  default(v) {\n    difference = v;\n  }\n\n}, 2);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 3);\nlet LOANS_COLLECTION;\nmodule.link(\"../../loans/loanConstants\", {\n  LOANS_COLLECTION(v) {\n    LOANS_COLLECTION = v;\n  }\n\n}, 4);\nlet LoanService;\nmodule.link(\"../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 5);\nlet Intl;\nmodule.link(\"../../../utils/server/intl\", {\n  default(v) {\n    Intl = v;\n  }\n\n}, 6);\nlet toMoney;\nmodule.link(\"../../../utils/conversionFunctions\", {\n  toMoney(v) {\n    toMoney = v;\n  }\n\n}, 7);\nlet percentFormatters;\nmodule.link(\"../../../utils/formHelpers\", {\n  percentFormatters(v) {\n    percentFormatters = v;\n  }\n\n}, 8);\nlet BORROWERS_COLLECTION, PROPERTIES_COLLECTION;\nmodule.link(\"../../constants\", {\n  BORROWERS_COLLECTION(v) {\n    BORROWERS_COLLECTION = v;\n  },\n\n  PROPERTIES_COLLECTION(v) {\n    PROPERTIES_COLLECTION = v;\n  }\n\n}, 9);\nlet updateWatcherNotification;\nmodule.link(\"../../slack/server/slackNotifications\", {\n  updateWatcherNotification(v) {\n    updateWatcherNotification = v;\n  }\n\n}, 10);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 11);\nlet CollectionService;\nmodule.link(\"../../helpers/CollectionService\", {\n  default(v) {\n    CollectionService = v;\n  }\n\n}, 12);\nlet UpdateWatchers;\nmodule.link(\"./updateWatchers\", {\n  default(v) {\n    UpdateWatchers = v;\n  }\n\n}, 13);\n\nclass UpdateWatcherService extends CollectionService {\n  constructor() {\n    super(UpdateWatchers);\n  }\n\n  addUpdateWatching({\n    collection,\n    fields,\n    shouldWatch = () => true\n  }) {\n    const that = this;\n    const hookHandle = collection.after.update(function (userId, doc, fieldNames) {\n      const collectionName = collection._name;\n      const changedFields = that.getChangedFields({\n        fieldNames,\n        fields\n      });\n\n      if (!changedFields || changedFields.length === 0) {\n        return;\n      }\n\n      if (shouldWatch({\n        userId,\n        fieldNames\n      })) {\n        that.updateWatcher({\n          userId,\n          collectionName,\n          doc,\n          changedFields,\n          previousDoc: this.previous\n        });\n      }\n    });\n    return hookHandle;\n  }\n\n  getChangedFields({\n    fieldNames,\n    fields\n  }) {\n    return intersection(fieldNames, fields);\n  }\n\n  updateWatcher({\n    collectionName,\n    doc,\n    changedFields,\n    previousDoc,\n    userId\n  }) {\n    const existingUpdateWatcher = this.findOne({\n      collection: collectionName,\n      docId: doc._id\n    });\n\n    if (!existingUpdateWatcher) {\n      this.insertWatcher({\n        userId,\n        doc,\n        previousDoc,\n        collection: collectionName,\n        changedFields\n      });\n    } else {\n      this.update({\n        currentWatcher: existingUpdateWatcher,\n        doc,\n        previousDoc,\n        changedFields\n      });\n    }\n  }\n\n  insertWatcher({\n    doc,\n    previousDoc,\n    collection,\n    changedFields,\n    userId\n  }) {\n    return this.insert({\n      userId,\n      docId: doc._id,\n      collection,\n      updatedFields: this.createFieldDiffs({\n        previous: previousDoc,\n        current: doc,\n        fieldNames: changedFields\n      })\n    });\n  }\n\n  createFieldDiffs({\n    previous,\n    current,\n    fieldNames\n  }) {\n    return fieldNames.map(fieldName => {\n      if (previous[fieldName] === current[fieldName]) {\n        return null;\n      }\n\n      return {\n        fieldName,\n        previousValue: previous[fieldName],\n        currentValue: current[fieldName]\n      };\n    }).filter(x => x);\n  }\n\n  getUpdatedFieldDiffs({\n    updatedFields,\n    doc\n  }) {\n    return updatedFields.map(updatedField => {\n      const newValue = doc[updatedField.fieldName]; // If a value is changed back to its old value, remove it\n\n      if (newValue === updatedField.previousValue) {\n        return null;\n      }\n\n      if (newValue !== undefined) {\n        return (0, _objectSpread2.default)({}, updatedField, {\n          currentValue: newValue\n        });\n      }\n\n      return updatedField;\n    }).filter(x => x);\n  }\n\n  update({\n    currentWatcher,\n    doc,\n    previousDoc,\n    changedFields\n  }) {\n    const previouslyUpdatedFields = currentWatcher.updatedFields.map(({\n      fieldName\n    }) => fieldName);\n    const newFields = difference(changedFields, previouslyUpdatedFields);\n    const updatedDiffs = this.getUpdatedFieldDiffs({\n      updatedFields: currentWatcher.updatedFields,\n      doc\n    });\n    const newDiffs = this.createFieldDiffs({\n      current: doc,\n      previous: previousDoc,\n      fieldNames: newFields\n    });\n    return this.baseUpdate({\n      _id: currentWatcher._id\n    }, {\n      $set: {\n        updatedFields: [...updatedDiffs, ...newDiffs]\n      }\n    });\n  }\n\n  getOldUpdateWatchers({\n    secondsFromNow\n  }) {\n    const date = new Date();\n    date.setSeconds(date.getSeconds() - secondsFromNow);\n    const foundWatchers = this.find({\n      updatedAt: {\n        $lt: date\n      }\n    }).fetch();\n    return foundWatchers;\n  }\n\n  processUpdateWatcher({\n    _id: updateWatcherId,\n    userId,\n    docId,\n    collection,\n    updatedFields\n  }) {\n    const user = UserService.fetchOne({\n      $filters: {\n        _id: userId\n      },\n      assignedEmployee: {\n        email: 1\n      },\n      name: 1,\n      roles: 1\n    });\n\n    if (!user) {\n      return this.remove(updateWatcherId);\n    }\n\n    const title = this.getNotificationTitle({\n      docId,\n      collection\n    });\n    const message = this.formatUpdatedFields(updatedFields);\n    updateWatcherNotification({\n      user,\n      title,\n      collection,\n      docId,\n      message\n    });\n    this.remove(updateWatcherId);\n  }\n\n  getNotificationTitle({\n    docId,\n    collection\n  }) {\n    const doc = Mongo.Collection.get(collection).findOne({\n      _id: docId\n    }); // Document has been deleted\n\n    if (!doc) {\n      return;\n    }\n\n    switch (collection) {\n      case BORROWERS_COLLECTION:\n        {\n          const {\n            firstName,\n            lastName\n          } = doc;\n          return `Modifications pour l'emprunteur \"${firstName || ''} ${lastName || ''}\"`;\n        }\n\n      case PROPERTIES_COLLECTION:\n        {\n          const {\n            address1\n          } = doc;\n          return `Modifications pour le bien immo \"${address1}\"`;\n        }\n\n      case LOANS_COLLECTION:\n        {\n          const {\n            name,\n            promotions,\n            hasPromotion\n          } = LoanService.fetchOne({\n            $filters: {\n              _id: docId\n            },\n            name: 1,\n            promotions: {\n              name: 1\n            },\n            hasPromotion: 1\n          });\n          const text = `Modifications dans le dossier ${name}`;\n          const suffix = hasPromotion ? ` (${promotions[0].name})` : '';\n          return text + suffix;\n        }\n\n      default:\n        return `Modifications dans ${collection}`;\n    }\n  }\n\n  formatUpdatedFields(updatedFields) {\n    return updatedFields.map(field => this.formatField(field)).join('\\n');\n  }\n\n  formatField({\n    fieldName,\n    previousValue,\n    currentValue\n  }) {\n    const previousValueIsNonEmpty = previousValue || Array.isArray(previousValue) && previousValue.length > 0;\n\n    if (previousValueIsNonEmpty) {\n      if (Array.isArray(currentValue)) {\n        return this.formatArrayDiff(fieldName, previousValue, currentValue);\n      }\n\n      return `*${Intl.formatMessage({\n        id: `Forms.${fieldName}`\n      })}*: ${this.formatValue(previousValue, fieldName)} -> ${this.formatValue(currentValue, fieldName)}`;\n    }\n\n    return `*${Intl.formatMessage({\n      id: `Forms.${fieldName}`\n    })}*: ${this.formatValue(currentValue, fieldName)}`;\n  }\n\n  formatArrayDiff(fieldName, previousValue, currentValue) {\n    const stringifiedPrevious = previousValue.map(JSON.stringify);\n    const stringifiedCurrent = currentValue.map(JSON.stringify);\n    const differentValues = currentValue.map((val, i) => ({\n      val,\n      _currIndex: i,\n      _atIndex: stringifiedPrevious.indexOf(stringifiedCurrent[i])\n    })).filter(({\n      _atIndex\n    }) => _atIndex < 0);\n    const diff = differentValues.map(({\n      _currIndex,\n      val\n    }) => {\n      const prefix = `\\`${_currIndex + 1}\\`\\n`;\n      const prev = previousValue && previousValue[_currIndex];\n\n      if (val && typeof val === 'object') {\n        return `${prefix}${this.formatObjectDiff(fieldName, prev, val)}`;\n      }\n\n      if (prev) {\n        const previous = this.formatValue(prev, fieldName);\n        const current = this.formatValue(val, fieldName, true);\n        return `${prefix}${previous} -> ${current}`;\n      }\n\n      return `${prefix}${this.formatValue(val, fieldName)}`;\n    }).join('\\n');\n    const removedValues = previousValue.length > currentValue.length ? previousValue.map((item, i) => {\n      if (i >= currentValue.length) {\n        const prefix = `\\`${i + 1}\\`\\n`;\n        return `${prefix}${this.formatValue(item, fieldName)} -> _supprimé_`;\n      }\n\n      return null;\n    }).filter(x => x).join('\\n') : '';\n    return `*${Intl.formatMessage({\n      id: `Forms.${fieldName}`\n    })}*:\\n${diff}${removedValues}`;\n  }\n\n  formatObjectDiff(parentName, previousValue, currentValue) {\n    const updated = Object.keys(currentValue).map(key => {\n      const value = currentValue[key];\n      const previous = previousValue && previousValue[key];\n\n      if (value === previous) {\n        return null;\n      }\n\n      if (previous !== undefined) {\n        return `*${Intl.formatMessage({\n          id: `Forms.${parentName}.${key}`\n        })}*: ${previous} -> ${value}`;\n      }\n\n      return `*${Intl.formatMessage({\n        id: `Forms.${parentName}.${key}`\n      })}*: ${value}`;\n    }).filter(x => x).join('\\n');\n    return updated;\n  }\n\n  formatValue(value, parentKey, skipPrefix) {\n    if (typeof value === 'boolean') {\n      return value ? 'Oui' : 'Non';\n    }\n\n    if (typeof value === 'number') {\n      return value === 0 ? '0' : value > 1 ? toMoney(value) : `${percentFormatters.format(value)}%`;\n    }\n\n    if (!value) {\n      return '-';\n    }\n\n    if (value instanceof Date) {\n      return moment(value).format('D/M/YYYY');\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(item => this.formatValue(item, parentKey)).join('\\n');\n    }\n\n    if (typeof value === 'object') {\n      return Object.keys(value).map(key => {\n        const val = value[key];\n\n        if (skipPrefix) {\n          return this.formatValue(val, `${parentKey}.${key}`);\n        }\n\n        return `*${Intl.formatMessage({\n          id: `Forms.${parentKey}.${key}`\n        })}*: ${this.formatValue(val, `${parentKey}.${key}`)}`;\n      }).join(', ');\n    }\n\n    return value;\n  }\n\n  manageUpdateWatchers({\n    secondsFromNow\n  }) {\n    this.getOldUpdateWatchers({\n      secondsFromNow\n    }).forEach(updateWatcher => this.processUpdateWatcher(updateWatcher));\n  }\n\n}\n\nmodule.exportDefault(new UpdateWatcherService());","map":{"version":3,"sources":["imports/core/api/updateWatchers/server/UpdateWatcherService.js"],"names":["constructor","addUpdateWatching","shouldWatch","that","hookHandle","collectionName","collection","changedFields","fields","fieldNames","previousDoc","previous","getChangedFields","intersection","updateWatcher","userId","existingUpdateWatcher","docId","doc","_id","currentWatcher","insertWatcher","updatedFields","current","createFieldDiffs","fieldName","previousValue","currentValue","x","getUpdatedFieldDiffs","updatedField","newValue","update","previouslyUpdatedFields","newFields","difference","updatedDiffs","newDiffs","$set","getOldUpdateWatchers","secondsFromNow","date","foundWatchers","updatedAt","$lt","processUpdateWatcher","user","$filters","assignedEmployee","email","name","roles","title","message","updateWatcherNotification","getNotificationTitle","lastName","firstName","address1","hasPromotion","promotions","text","suffix","formatUpdatedFields","field","formatField","previousValueIsNonEmpty","Array","id","formatArrayDiff","stringifiedPrevious","JSON","stringifiedCurrent","differentValues","_currIndex","_atIndex","diff","val","prefix","prev","removedValues","i","formatObjectDiff","updated","key","value","parentName","formatValue","toMoney","percentFormatters","moment","item","parentKey","manageUpdateWatchers"],"mappings":"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","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nimport intersection from 'lodash/intersection';\nimport difference from 'lodash/difference';\nimport moment from 'moment';\n\nimport { LOANS_COLLECTION } from 'core/api/loans/loanConstants';\nimport LoanService from 'core/api/loans/server/LoanService';\nimport Intl from '../../../utils/server/intl';\nimport { toMoney } from '../../../utils/conversionFunctions';\nimport { percentFormatters } from '../../../utils/formHelpers';\nimport { BORROWERS_COLLECTION, PROPERTIES_COLLECTION } from '../../constants';\nimport { updateWatcherNotification } from '../../slack/server/slackNotifications';\nimport UserService from '../../users/server/UserService';\nimport CollectionService from '../../helpers/CollectionService';\nimport UpdateWatchers from './updateWatchers';\n\nclass UpdateWatcherService extends CollectionService {\n  constructor() {\n    super(UpdateWatchers);\n  }\n\n  addUpdateWatching({ collection, fields, shouldWatch = () => true }) {\n    const that = this;\n    const hookHandle = collection.after.update(function (\n      userId,\n      doc,\n      fieldNames,\n    ) {\n      const collectionName = collection._name;\n      const changedFields = that.getChangedFields({ fieldNames, fields });\n\n      if (!changedFields || changedFields.length === 0) {\n        return;\n      }\n\n      if (shouldWatch({ userId, fieldNames })) {\n        that.updateWatcher({\n          userId,\n          collectionName,\n          doc,\n          changedFields,\n          previousDoc: this.previous,\n        });\n      }\n    });\n\n    return hookHandle;\n  }\n\n  getChangedFields({ fieldNames, fields }) {\n    return intersection(fieldNames, fields);\n  }\n\n  updateWatcher({ collectionName, doc, changedFields, previousDoc, userId }) {\n    const existingUpdateWatcher = this.findOne({\n      collection: collectionName,\n      docId: doc._id,\n    });\n\n    if (!existingUpdateWatcher) {\n      this.insertWatcher({\n        userId,\n        doc,\n        previousDoc,\n        collection: collectionName,\n        changedFields,\n      });\n    } else {\n      this.update({\n        currentWatcher: existingUpdateWatcher,\n        doc,\n        previousDoc,\n        changedFields,\n      });\n    }\n  }\n\n  insertWatcher({ doc, previousDoc, collection, changedFields, userId }) {\n    return this.insert({\n      userId,\n      docId: doc._id,\n      collection,\n      updatedFields: this.createFieldDiffs({\n        previous: previousDoc,\n        current: doc,\n        fieldNames: changedFields,\n      }),\n    });\n  }\n\n  createFieldDiffs({ previous, current, fieldNames }) {\n    return fieldNames\n      .map((fieldName) => {\n        if (previous[fieldName] === current[fieldName]) {\n          return null;\n        }\n\n        return {\n          fieldName,\n          previousValue: previous[fieldName],\n          currentValue: current[fieldName],\n        };\n      })\n      .filter(x => x);\n  }\n\n  getUpdatedFieldDiffs({ updatedFields, doc }) {\n    return updatedFields\n      .map((updatedField) => {\n        const newValue = doc[updatedField.fieldName];\n\n        // If a value is changed back to its old value, remove it\n        if (newValue === updatedField.previousValue) {\n          return null;\n        }\n\n        if (newValue !== undefined) {\n          return { ...updatedField, currentValue: newValue };\n        }\n\n        return updatedField;\n      })\n      .filter(x => x);\n  }\n\n  update({ currentWatcher, doc, previousDoc, changedFields }) {\n    const previouslyUpdatedFields = currentWatcher.updatedFields.map(({ fieldName }) => fieldName);\n    const newFields = difference(changedFields, previouslyUpdatedFields);\n\n    const updatedDiffs = this.getUpdatedFieldDiffs({\n      updatedFields: currentWatcher.updatedFields,\n      doc,\n    });\n\n    const newDiffs = this.createFieldDiffs({\n      current: doc,\n      previous: previousDoc,\n      fieldNames: newFields,\n    });\n\n    return this.baseUpdate(\n      { _id: currentWatcher._id },\n      { $set: { updatedFields: [...updatedDiffs, ...newDiffs] } },\n    );\n  }\n\n  getOldUpdateWatchers({ secondsFromNow }) {\n    const date = new Date();\n    date.setSeconds(date.getSeconds() - secondsFromNow);\n    const foundWatchers = this.find({ updatedAt: { $lt: date } }).fetch();\n\n    return foundWatchers;\n  }\n\n  processUpdateWatcher({\n    _id: updateWatcherId,\n    userId,\n    docId,\n    collection,\n    updatedFields,\n  }) {\n    const user = UserService.fetchOne({\n      $filters: { _id: userId },\n      assignedEmployee: { email: 1 },\n      name: 1,\n      roles: 1,\n    });\n\n    if (!user) {\n      return this.remove(updateWatcherId);\n    }\n\n    const title = this.getNotificationTitle({ docId, collection });\n    const message = this.formatUpdatedFields(updatedFields);\n\n    updateWatcherNotification({\n      user,\n      title,\n      collection,\n      docId,\n      message,\n    });\n\n    this.remove(updateWatcherId);\n  }\n\n  getNotificationTitle({ docId, collection }) {\n    const doc = Mongo.Collection.get(collection).findOne({ _id: docId });\n\n    // Document has been deleted\n    if (!doc) {\n      return;\n    }\n\n    switch (collection) {\n    case BORROWERS_COLLECTION: {\n      const { firstName, lastName } = doc;\n      return `Modifications pour l'emprunteur \"${firstName\n          || ''} ${lastName || ''}\"`;\n    }\n\n    case PROPERTIES_COLLECTION: {\n      const { address1 } = doc;\n      return `Modifications pour le bien immo \"${address1}\"`;\n    }\n\n    case LOANS_COLLECTION: {\n      const { name, promotions, hasPromotion } = LoanService.fetchOne({\n        $filters: { _id: docId },\n        name: 1,\n        promotions: { name: 1 },\n        hasPromotion: 1,\n      });\n      const text = `Modifications dans le dossier ${name}`;\n      const suffix = hasPromotion ? ` (${promotions[0].name})` : '';\n      return text + suffix;\n    }\n\n    default:\n      return `Modifications dans ${collection}`;\n    }\n  }\n\n  formatUpdatedFields(updatedFields) {\n    return updatedFields.map(field => this.formatField(field)).join('\\n');\n  }\n\n  formatField({ fieldName, previousValue, currentValue }) {\n    const previousValueIsNonEmpty = previousValue\n      || (Array.isArray(previousValue) && previousValue.length > 0);\n\n    if (previousValueIsNonEmpty) {\n      if (Array.isArray(currentValue)) {\n        return this.formatArrayDiff(fieldName, previousValue, currentValue);\n      }\n\n      return `*${Intl.formatMessage({\n        id: `Forms.${fieldName}`,\n      })}*: ${this.formatValue(previousValue, fieldName)} -> ${this.formatValue(\n        currentValue,\n        fieldName,\n      )}`;\n    }\n\n    return `*${Intl.formatMessage({\n      id: `Forms.${fieldName}`,\n    })}*: ${this.formatValue(currentValue, fieldName)}`;\n  }\n\n  formatArrayDiff(fieldName, previousValue, currentValue) {\n    const stringifiedPrevious = previousValue.map(JSON.stringify);\n    const stringifiedCurrent = currentValue.map(JSON.stringify);\n    const differentValues = currentValue\n      .map((val, i) => ({\n        val,\n        _currIndex: i,\n        _atIndex: stringifiedPrevious.indexOf(stringifiedCurrent[i]),\n      }))\n      .filter(({ _atIndex }) => _atIndex < 0);\n\n    const diff = differentValues\n      .map(({ _currIndex, val }) => {\n        const prefix = `\\`${_currIndex + 1}\\`\\n`;\n        const prev = previousValue && previousValue[_currIndex];\n\n        if (val && typeof val === 'object') {\n          return `${prefix}${this.formatObjectDiff(fieldName, prev, val)}`;\n        }\n\n        if (prev) {\n          const previous = this.formatValue(prev, fieldName);\n          const current = this.formatValue(val, fieldName, true);\n\n          return `${prefix}${previous} -> ${current}`;\n        }\n\n        return `${prefix}${this.formatValue(val, fieldName)}`;\n      })\n      .join('\\n');\n\n    const removedValues = previousValue.length > currentValue.length\n      ? previousValue\n        .map((item, i) => {\n          if (i >= currentValue.length) {\n            const prefix = `\\`${i + 1}\\`\\n`;\n\n            return `${prefix}${this.formatValue(\n              item,\n              fieldName,\n            )} -> _supprimé_`;\n          }\n          return null;\n        })\n        .filter(x => x)\n        .join('\\n')\n      : '';\n\n    return `*${Intl.formatMessage({\n      id: `Forms.${fieldName}`,\n    })}*:\\n${diff}${removedValues}`;\n  }\n\n  formatObjectDiff(parentName, previousValue, currentValue) {\n    const updated = Object.keys(currentValue)\n      .map((key) => {\n        const value = currentValue[key];\n        const previous = previousValue && previousValue[key];\n\n        if (value === previous) {\n          return null;\n        }\n\n        if (previous !== undefined) {\n          return `*${Intl.formatMessage({\n            id: `Forms.${parentName}.${key}`,\n          })}*: ${previous} -> ${value}`;\n        }\n\n        return `*${Intl.formatMessage({\n          id: `Forms.${parentName}.${key}`,\n        })}*: ${value}`;\n      })\n      .filter(x => x)\n      .join('\\n');\n\n    return updated;\n  }\n\n  formatValue(value, parentKey, skipPrefix) {\n    if (typeof value === 'boolean') {\n      return value ? 'Oui' : 'Non';\n    }\n\n    if (typeof value === 'number') {\n      return value === 0\n        ? '0'\n        : value > 1\n          ? toMoney(value)\n          : `${percentFormatters.format(value)}%`;\n    }\n\n    if (!value) {\n      return '-';\n    }\n\n    if (value instanceof Date) {\n      return moment(value).format('D/M/YYYY');\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(item => this.formatValue(item, parentKey)).join('\\n');\n    }\n\n    if (typeof value === 'object') {\n      return Object.keys(value)\n        .map((key) => {\n          const val = value[key];\n\n          if (skipPrefix) {\n            return this.formatValue(val, `${parentKey}.${key}`);\n          }\n\n          return `*${Intl.formatMessage({\n            id: `Forms.${parentKey}.${key}`,\n          })}*: ${this.formatValue(val, `${parentKey}.${key}`)}`;\n        })\n        .join(', ');\n    }\n\n    return value;\n  }\n\n  manageUpdateWatchers({ secondsFromNow }) {\n    this.getOldUpdateWatchers({ secondsFromNow }).forEach(updateWatcher =>\n      this.processUpdateWatcher(updateWatcher));\n  }\n}\n\nexport default new UpdateWatcherService();\n"]},"sourceType":"script","hash":"dfa60be0064cc271390f5bec02969a389e26d709"}

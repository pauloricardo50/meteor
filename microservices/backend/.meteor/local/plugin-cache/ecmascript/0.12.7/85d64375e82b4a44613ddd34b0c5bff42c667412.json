{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/queries/test/client/clientQueries.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/api/queries/test/client/clientQueries.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/queries/test/client/clientQueries.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/queries/test/client/clientQueries.test.js"],"names":["Meteor","expect","userLogin","resetDatabase","query1","query2","query3","query4","testCollectionInsert","console","log","insertTestData","n","promises","Array","map","_","index","run","_id","name","value","Promise","all","then","fetchQueries","queries","params","promise","forEach","query","items","resolve","reject","clone","fetch","err","queryItems","insertAndFetchTestData","fetchQuery1","fetchQuery2","fetchQuery3","fetchQuery4","filter","x","describe","beforeEach","it","named_query_TEST_QUERY_1","length","to","equal","named_query_TEST_QUERY_2","context","$body","undefined","$limit","$skip","$sort","Error","catch","error","message","contain","userId","named_query_TEST_QUERY_4","_userId"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\n\nimport { expect } from 'chai';\n\nimport { userLogin, resetDatabase } from 'core/utils/testHelpers/index';\nimport {\n  query1,\n  query2,\n  query3,\n  query4,\n  testCollectionInsert,\n} from '../collection.app-test';\n\nconsole.log('testCollectionInsert:', testCollectionInsert);\n\nconst insertTestData = (n) => {\n  const promises = [...Array(n)].map((_, index) =>\n    testCollectionInsert.run({\n      _id: `test${index}`,\n      name: `test${index % 4}`,\n      value: index,\n    }));\n  return Promise.all(promises).then(() => ({}));\n};\n\nconst fetchQueries = ({ queries = [], params, promise }) => {\n  queries.forEach((query) => {\n    promise = promise.then((items = {}) =>\n      new Promise((resolve, reject) => {\n        query\n          .clone(params)\n          .fetch((err, queryItems) =>\n            (err\n              ? reject(err)\n              : resolve({ ...items, [query.name]: queryItems })));\n      }));\n  });\n\n  return promise;\n};\n\nconst insertAndFetchTestData = (\n  n,\n  params = {},\n  {\n    fetchQuery1 = true,\n    fetchQuery2 = true,\n    fetchQuery3 = false,\n    fetchQuery4 = false,\n  } = {},\n) => {\n  const promise = insertTestData(n);\n  return fetchQueries({\n    queries: [\n      fetchQuery1 && query1,\n      fetchQuery2 && query2,\n      fetchQuery3 && query3,\n      fetchQuery4 && query4,\n    ].filter(x => x),\n    params,\n    promise,\n  });\n};\n\ndescribe('exposeQuery', () => {\n  beforeEach(() => resetDatabase());\n\n  it('returns expected data without using overrides', () =>\n    insertAndFetchTestData(100).then((items) => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n    }));\n\n  context('returns expected data when overriding', () => {\n    it('the body', () =>\n      insertAndFetchTestData(100, { $body: { value: 1 } }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_1[0].name).to.equal(undefined);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n        expect(items.named_query_TEST_QUERY_2[0].name).to.equal(undefined);\n      }));\n\n    it('the limit option', () =>\n      insertAndFetchTestData(100, { $limit: 5 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(5);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(5);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      }));\n\n    it('the limit option greather than the server value', () =>\n      insertAndFetchTestData(100, { $limit: 20 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      }));\n\n    it('the skip option', () =>\n      insertAndFetchTestData(100, { $skip: 7 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(38);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(28);\n      }));\n\n    it('the sort option', () =>\n      insertAndFetchTestData(100, { $sort: { value: -1 } }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(99);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(99);\n      }));\n\n    it('the sort option on multiple fields ', () =>\n      insertAndFetchTestData(50, { $sort: { name: -1, value: -1 } })\n        .then((items) => {\n          expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_1[0].value).to.equal(47);\n          expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_2[0].value).to.equal(47);\n        })\n        .then(() => resetDatabase())\n        .then(() =>\n          insertAndFetchTestData(50, { $sort: { name: -1, value: 1 } }))\n        .then((items) => {\n          expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n          expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n        }));\n  });\n\n  it('throws when client tries to filter by _id when it is not allowed', () =>\n    insertAndFetchTestData(100, { _id: 'test50' }, { fetchQuery2: false })\n      .then(() => {\n        throw new Meteor.Error('Test should throw');\n      })\n      .catch(error => expect(error.message).to.contain('Match failed')));\n\n  describe('returns expected data when using filters', () => {\n    it('on client only', () =>\n      insertAndFetchTestData(100, { name: 'test3' }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        items.named_query_TEST_QUERY_1.forEach(({ name }) =>\n          expect(name).to.equal('test3'));\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n        items.named_query_TEST_QUERY_2.forEach(({ name }) =>\n          expect(name).to.equal('test3'));\n      }));\n\n    it('on server only', () =>\n      insertAndFetchTestData(\n        100,\n        { _id: 'test50' },\n        { fetchQuery1: false },\n      ).then((items) => {\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(1);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(50);\n      }));\n\n    it('on client and server', () =>\n      insertAndFetchTestData(\n        30,\n        { name: 'test3', _id: 'test50' },\n        { fetchQuery1: false },\n      ).then((items) => {\n        // Name and _id filters apply in query2, resulting in an empty array of results\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(0);\n      }));\n  });\n\n  it('uses default firewall if not overriden', () =>\n    insertAndFetchTestData(\n      30,\n      {},\n      { fetchQuery1: false, fetchQuery2: false, fetchQuery3: true },\n    )\n      .then(() => {\n        throw new Meteor.Error('Test should throw');\n      })\n      .catch(error => expect(error.message).to.contain('NOT_AUTHORIZED')));\n\n  it('injects _userId in params', () =>\n    userLogin({})\n      .then(() =>\n        insertAndFetchTestData(\n          30,\n          { name: 'test3' },\n          { fetchQuery1: false, fetchQuery2: false, fetchQuery4: true },\n        ))\n      .then((items) => {\n        const userId = Meteor.userId();\n        items.named_query_TEST_QUERY_4.forEach(({ _userId, name }) => {\n          expect(_userId).to.equal(userId);\n          expect(name).to.equal('test3');\n        });\n      }));\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/queries/test/client/clientQueries.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/queries/test/client/clientQueries.test.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 1);\nlet userLogin, resetDatabase;\nmodule.link(\"../../../../utils/testHelpers\", {\n  userLogin(v) {\n    userLogin = v;\n  },\n\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 2);\nlet query1, query2, query3, query4, testCollectionInsert;\nmodule.link(\"../collection.app-test\", {\n  query1(v) {\n    query1 = v;\n  },\n\n  query2(v) {\n    query2 = v;\n  },\n\n  query3(v) {\n    query3 = v;\n  },\n\n  query4(v) {\n    query4 = v;\n  },\n\n  testCollectionInsert(v) {\n    testCollectionInsert = v;\n  }\n\n}, 3);\nconsole.log('testCollectionInsert:', testCollectionInsert);\n\nconst insertTestData = n => {\n  const promises = [...Array(n)].map((_, index) => testCollectionInsert.run({\n    _id: \"test\".concat(index),\n    name: \"test\".concat(index % 4),\n    value: index\n  }));\n  return Promise.all(promises).then(() => ({}));\n};\n\nconst fetchQueries = (_ref) => {\n  let {\n    queries = [],\n    params,\n    promise\n  } = _ref;\n  queries.forEach(query => {\n    promise = promise.then(function () {\n      let items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Promise((resolve, reject) => {\n        query.clone(params).fetch((err, queryItems) => err ? reject(err) : resolve((0, _objectSpread2.default)({}, items, {\n          [query.name]: queryItems\n        })));\n      });\n    });\n  });\n  return promise;\n};\n\nconst insertAndFetchTestData = function (n) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let {\n    fetchQuery1 = true,\n    fetchQuery2 = true,\n    fetchQuery3 = false,\n    fetchQuery4 = false\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const promise = insertTestData(n);\n  return fetchQueries({\n    queries: [fetchQuery1 && query1, fetchQuery2 && query2, fetchQuery3 && query3, fetchQuery4 && query4].filter(x => x),\n    params,\n    promise\n  });\n};\n\ndescribe('exposeQuery', () => {\n  beforeEach(() => resetDatabase());\n  it('returns expected data without using overrides', () => insertAndFetchTestData(100).then(items => {\n    expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n    expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n    expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n    expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n  }));\n  context('returns expected data when overriding', () => {\n    it('the body', () => insertAndFetchTestData(100, {\n      $body: {\n        value: 1\n      }\n    }).then(items => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n      expect(items.named_query_TEST_QUERY_1[0].name).to.equal(undefined);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      expect(items.named_query_TEST_QUERY_2[0].name).to.equal(undefined);\n    }));\n    it('the limit option', () => insertAndFetchTestData(100, {\n      $limit: 5\n    }).then(items => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(5);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(5);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n    }));\n    it('the limit option greather than the server value', () => insertAndFetchTestData(100, {\n      $limit: 20\n    }).then(items => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n    }));\n    it('the skip option', () => insertAndFetchTestData(100, {\n      $skip: 7\n    }).then(items => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(38);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(28);\n    }));\n    it('the sort option', () => insertAndFetchTestData(100, {\n      $sort: {\n        value: -1\n      }\n    }).then(items => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(99);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(99);\n    }));\n    it('the sort option on multiple fields ', () => insertAndFetchTestData(50, {\n      $sort: {\n        name: -1,\n        value: -1\n      }\n    }).then(items => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(47);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(47);\n    }).then(() => resetDatabase()).then(() => insertAndFetchTestData(50, {\n      $sort: {\n        name: -1,\n        value: 1\n      }\n    })).then(items => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n    }));\n  });\n  it('throws when client tries to filter by _id when it is not allowed', () => insertAndFetchTestData(100, {\n    _id: 'test50'\n  }, {\n    fetchQuery2: false\n  }).then(() => {\n    throw new Meteor.Error('Test should throw');\n  }).catch(error => expect(error.message).to.contain('Match failed')));\n  describe('returns expected data when using filters', () => {\n    it('on client only', () => insertAndFetchTestData(100, {\n      name: 'test3'\n    }).then(items => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n      items.named_query_TEST_QUERY_1.forEach((_ref2) => {\n        let {\n          name\n        } = _ref2;\n        return expect(name).to.equal('test3');\n      });\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n      items.named_query_TEST_QUERY_2.forEach((_ref3) => {\n        let {\n          name\n        } = _ref3;\n        return expect(name).to.equal('test3');\n      });\n    }));\n    it('on server only', () => insertAndFetchTestData(100, {\n      _id: 'test50'\n    }, {\n      fetchQuery1: false\n    }).then(items => {\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(1);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(50);\n    }));\n    it('on client and server', () => insertAndFetchTestData(30, {\n      name: 'test3',\n      _id: 'test50'\n    }, {\n      fetchQuery1: false\n    }).then(items => {\n      // Name and _id filters apply in query2, resulting in an empty array of results\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(0);\n    }));\n  });\n  it('uses default firewall if not overriden', () => insertAndFetchTestData(30, {}, {\n    fetchQuery1: false,\n    fetchQuery2: false,\n    fetchQuery3: true\n  }).then(() => {\n    throw new Meteor.Error('Test should throw');\n  }).catch(error => expect(error.message).to.contain('NOT_AUTHORIZED')));\n  it('injects _userId in params', () => userLogin({}).then(() => insertAndFetchTestData(30, {\n    name: 'test3'\n  }, {\n    fetchQuery1: false,\n    fetchQuery2: false,\n    fetchQuery4: true\n  })).then(items => {\n    const userId = Meteor.userId();\n    items.named_query_TEST_QUERY_4.forEach((_ref4) => {\n      let {\n        _userId,\n        name\n      } = _ref4;\n      expect(_userId).to.equal(userId);\n      expect(name).to.equal('test3');\n    });\n  }));\n});","map":{"version":3,"sources":["imports/core/api/queries/test/client/clientQueries.test.js"],"names":["console","insertTestData","n","promises","Array","_id","name","index","value","Promise","fetchQueries","queries","promise","query","items","err","reject","resolve","queryItems","insertAndFetchTestData","params","fetchQuery1","fetchQuery2","fetchQuery3","fetchQuery4","x","describe","beforeEach","resetDatabase","it","expect","context","$body","$limit","$skip","$sort","Meteor","error","userId"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\n\nimport { expect } from 'chai';\n\nimport { userLogin, resetDatabase } from 'core/utils/testHelpers/index';\nimport {\n  query1,\n  query2,\n  query3,\n  query4,\n  testCollectionInsert,\n} from '../collection.app-test';\n\nconsole.log('testCollectionInsert:', testCollectionInsert);\n\nconst insertTestData = (n) => {\n  const promises = [...Array(n)].map((_, index) =>\n    testCollectionInsert.run({\n      _id: `test${index}`,\n      name: `test${index % 4}`,\n      value: index,\n    }));\n  return Promise.all(promises).then(() => ({}));\n};\n\nconst fetchQueries = ({ queries = [], params, promise }) => {\n  queries.forEach((query) => {\n    promise = promise.then((items = {}) =>\n      new Promise((resolve, reject) => {\n        query\n          .clone(params)\n          .fetch((err, queryItems) =>\n            (err\n              ? reject(err)\n              : resolve({ ...items, [query.name]: queryItems })));\n      }));\n  });\n\n  return promise;\n};\n\nconst insertAndFetchTestData = (\n  n,\n  params = {},\n  {\n    fetchQuery1 = true,\n    fetchQuery2 = true,\n    fetchQuery3 = false,\n    fetchQuery4 = false,\n  } = {},\n) => {\n  const promise = insertTestData(n);\n  return fetchQueries({\n    queries: [\n      fetchQuery1 && query1,\n      fetchQuery2 && query2,\n      fetchQuery3 && query3,\n      fetchQuery4 && query4,\n    ].filter(x => x),\n    params,\n    promise,\n  });\n};\n\ndescribe('exposeQuery', () => {\n  beforeEach(() => resetDatabase());\n\n  it('returns expected data without using overrides', () =>\n    insertAndFetchTestData(100).then((items) => {\n      expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n      expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n      expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n    }));\n\n  context('returns expected data when overriding', () => {\n    it('the body', () =>\n      insertAndFetchTestData(100, { $body: { value: 1 } }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_1[0].name).to.equal(undefined);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n        expect(items.named_query_TEST_QUERY_2[0].name).to.equal(undefined);\n      }));\n\n    it('the limit option', () =>\n      insertAndFetchTestData(100, { $limit: 5 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(5);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(5);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      }));\n\n    it('the limit option greather than the server value', () =>\n      insertAndFetchTestData(100, { $limit: 20 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(21);\n      }));\n\n    it('the skip option', () =>\n      insertAndFetchTestData(100, { $skip: 7 }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(38);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(28);\n      }));\n\n    it('the sort option', () =>\n      insertAndFetchTestData(100, { $sort: { value: -1 } }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(99);\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(99);\n      }));\n\n    it('the sort option on multiple fields ', () =>\n      insertAndFetchTestData(50, { $sort: { name: -1, value: -1 } })\n        .then((items) => {\n          expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_1[0].value).to.equal(47);\n          expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_2[0].value).to.equal(47);\n        })\n        .then(() => resetDatabase())\n        .then(() =>\n          insertAndFetchTestData(50, { $sort: { name: -1, value: 1 } }))\n        .then((items) => {\n          expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n          expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n          expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n        }));\n  });\n\n  it('throws when client tries to filter by _id when it is not allowed', () =>\n    insertAndFetchTestData(100, { _id: 'test50' }, { fetchQuery2: false })\n      .then(() => {\n        throw new Meteor.Error('Test should throw');\n      })\n      .catch(error => expect(error.message).to.contain('Match failed')));\n\n  describe('returns expected data when using filters', () => {\n    it('on client only', () =>\n      insertAndFetchTestData(100, { name: 'test3' }).then((items) => {\n        expect(items.named_query_TEST_QUERY_1.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_1[0].value).to.equal(31);\n        items.named_query_TEST_QUERY_1.forEach(({ name }) =>\n          expect(name).to.equal('test3'));\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(10);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(23);\n        items.named_query_TEST_QUERY_2.forEach(({ name }) =>\n          expect(name).to.equal('test3'));\n      }));\n\n    it('on server only', () =>\n      insertAndFetchTestData(\n        100,\n        { _id: 'test50' },\n        { fetchQuery1: false },\n      ).then((items) => {\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(1);\n        expect(items.named_query_TEST_QUERY_2[0].value).to.equal(50);\n      }));\n\n    it('on client and server', () =>\n      insertAndFetchTestData(\n        30,\n        { name: 'test3', _id: 'test50' },\n        { fetchQuery1: false },\n      ).then((items) => {\n        // Name and _id filters apply in query2, resulting in an empty array of results\n        expect(items.named_query_TEST_QUERY_2.length).to.equal(0);\n      }));\n  });\n\n  it('uses default firewall if not overriden', () =>\n    insertAndFetchTestData(\n      30,\n      {},\n      { fetchQuery1: false, fetchQuery2: false, fetchQuery3: true },\n    )\n      .then(() => {\n        throw new Meteor.Error('Test should throw');\n      })\n      .catch(error => expect(error.message).to.contain('NOT_AUTHORIZED')));\n\n  it('injects _userId in params', () =>\n    userLogin({})\n      .then(() =>\n        insertAndFetchTestData(\n          30,\n          { name: 'test3' },\n          { fetchQuery1: false, fetchQuery2: false, fetchQuery4: true },\n        ))\n      .then((items) => {\n        const userId = Meteor.userId();\n        items.named_query_TEST_QUERY_4.forEach(({ _userId, name }) => {\n          expect(_userId).to.equal(userId);\n          expect(name).to.equal('test3');\n        });\n      }));\n});\n"]},"sourceType":"script","hash":"85d64375e82b4a44613ddd34b0c5bff42c667412"}

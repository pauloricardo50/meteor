{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/SolvencyCalculator.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/Calculator/test/SolvencyCalculator.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/SolvencyCalculator.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/Calculator/test/SolvencyCalculator.spec.js"],"names":["expect","Calculator","CalculatorClass","OWN_FUNDS_USAGE_TYPES","OWN_FUNDS_TYPES","RESIDENCE_TYPE","DEFAULT_SECONDARY_RESIDENCE_RULES","INCOME_CONSIDERATION_TYPES","describe","loan","borrower","beforeEach","_id","borrowers","it","bankFortune","suggestStructure","propertyValue","to","deep","equal","type","BANK_FORTUNE","value","borrowerId","canton","insurance3B","INSURANCE_3B","usageType","WITHDRAW","insurance2","residenceType","MAIN_RESIDENCE","INSURANCE_2","loanValue","structure","wantedLoan","property","totalValue","propertyWork","required","getRequiredOwnFunds","ownFunds","notaryFees","total","reduce","t","Math","round","getMaxPropertyValue","salary","suggestStructureForLoan","structures","id","structureId","borrowRatio","getMaxPropertyValueWithoutBorrowRatio","lenderRules","order","maxBorrowRatio","bonusConsideration","expensesSubtractFromIncome","theoreticalInterestRate","theoreticalMaintenanceRate","maxIncomeRatio","filter","and","incomeConsiderationType","NET","amortizationGoal","amortizationYears","netSalary","bonusExists","bonus2015","bonus2016","bonus2017","bonus2018","loanObject","createLoanObject","SECOND_RESIDENCE","calc","results"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator, { Calculator as CalculatorClass } from '..';\nimport { OWN_FUNDS_USAGE_TYPES } from 'core/api/constants';\nimport {\n  OWN_FUNDS_TYPES,\n  RESIDENCE_TYPE,\n  DEFAULT_SECONDARY_RESIDENCE_RULES,\n  INCOME_CONSIDERATION_TYPES,\n} from '../../../api/constants';\n\ndescribe('SolvencyCalculator', () => {\n  describe('suggestStructure', () => {\n    let loan;\n    let borrower;\n\n    beforeEach(() => {\n      borrower = { _id: 'borrowerId' };\n      loan = { borrowers: [borrower] };\n    });\n\n    it('suggests a structure with all bankFortune if possible', () => {\n      borrower.bankFortune = 500000;\n      expect(Calculator.suggestStructure({ loan, propertyValue: 1000000 })).to.deep.equal([\n        {\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 250000,\n          borrowerId: 'borrowerId',\n        },\n      ]);\n    });\n\n    it('calculates exact notary fees if the canton is set', () => {\n      borrower.bankFortune = 500000;\n      expect(Calculator.suggestStructure({\n        loan,\n        propertyValue: 1000008,\n        canton: 'GE',\n      })).to.deep.equal([\n        {\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 255162,\n          borrowerId: 'borrowerId',\n        },\n      ]);\n    });\n\n    it('suggests a structure with multiple ownFunds', () => {\n      borrower.bankFortune = 200000;\n      borrower.insurance3B = [{ value: 100000 }];\n      expect(Calculator.suggestStructure({ loan, propertyValue: 1000000 })).to.deep.equal([\n        {\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 200000,\n          borrowerId: 'borrowerId',\n        },\n        {\n          type: OWN_FUNDS_TYPES.INSURANCE_3B,\n          value: 50000,\n          borrowerId: 'borrowerId',\n          usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n        },\n      ]);\n    });\n\n    it('does not use 2nd pillar if not a main residence', () => {\n      borrower.bankFortune = 200000;\n      borrower.insurance2 = [{ value: 100000 }];\n      expect(Calculator.suggestStructure({ loan, propertyValue: 1000000 })).to.deep.equal([\n        {\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 200000,\n          borrowerId: 'borrowerId',\n        },\n      ]);\n    });\n\n    it('uses 2nd pillar if not a main residence', () => {\n      borrower.bankFortune = 200000;\n      borrower.insurance2 = [{ value: 100000 }];\n      expect(Calculator.suggestStructure({\n        loan,\n        propertyValue: 1000000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      })).to.deep.equal([\n        {\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 200000,\n          borrowerId: 'borrowerId',\n        },\n        {\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          value: 50000,\n          borrowerId: 'borrowerId',\n          usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n        },\n      ]);\n    });\n\n    it('always gets up to the exact value', () => {\n      const loanValue = 800000;\n      loan.structure = {\n        wantedLoan: loanValue,\n        property: { totalValue: 1000000, canton: 'GE' },\n        propertyWork: 100000,\n      };\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      const required = Calculator.getRequiredOwnFunds({ loan });\n      borrower.bankFortune = 200000;\n      borrower.insurance2 = [{ value: 150000 }];\n      const ownFunds = Calculator.suggestStructure({\n        loan,\n        propertyValue: 1100000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        loanValue,\n        canton: 'GE',\n        notaryFees: 31944.1,\n      });\n      const total = ownFunds.reduce((t, { value }) => t + value, 0);\n\n      expect(total).to.equal(Math.round(required));\n    });\n  });\n\n  describe('getMaxPropertyValue', () => {\n    it('recommends a standard value with unlimited income', () => {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{ bankFortune: 500000, salary: 1000000 }],\n      })).to.equal(2000000);\n    });\n\n    it('recommends a standard value with unlimited income', () => {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{ bankFortune: 455000, salary: 1000000 }],\n      })).to.equal(1820000);\n    });\n\n    it('returns 0 with no income', () => {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{ bankFortune: 500000, salary: 0 }],\n      })).to.equal(0);\n    });\n\n    it('returns 0 with no fortune', () => {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{ bankFortune: 0, salary: 1000000 }],\n      })).to.equal(0);\n    });\n\n    it('recommends a standard value with unlimited own Funds', () => {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{ bankFortune: 500000, salary: 180000 }],\n      })).to.equal(1000000);\n    });\n  });\n\n  describe('suggestStructureForLoan', () => {\n    it('suggests a structure including for property work', () => {\n      expect(Calculator.suggestStructureForLoan({\n        loan: {\n          borrowers: [\n            { bankFortune: 500000, salary: 180000, _id: 'borrower1' },\n          ],\n          structures: [\n            { id: 'struct1', propertyValue: 900000, propertyWork: 100000 },\n          ],\n        },\n        structureId: 'struct1',\n      })).to.deep.equal([\n        { type: 'bankFortune', value: 245000, borrowerId: 'borrower1' },\n      ]);\n    });\n  });\n\n  describe('getMaxPropertyValueWithoutBorrowRatio', () => {\n    it('finds the ideal borrowRatio', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{ bankFortune: 500000, salary: 1000000 }],\n      });\n      expect(borrowRatio).to.equal(0.8);\n      expect(propertyValue).to.equal(2000000);\n    });\n\n    it('finds the ideal borrowRatio', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{ bankFortune: 250000, salary: 100000 }],\n      });\n      expect(borrowRatio).to.equal(0.6938);\n      expect(propertyValue).to.equal(700000);\n    });\n\n    it('finds the ideal borrowRatio', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{ bankFortune: 250000, salary: 50000 }],\n      });\n      expect(borrowRatio).to.equal(0.515);\n      expect(propertyValue).to.equal(466000);\n    });\n\n    it('finds the ideal borrowRatio', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{ bankFortune: 200000, salary: 83000 }],\n      });\n      expect(borrowRatio).to.equal(0.7);\n      expect(propertyValue).to.equal(571000);\n    });\n\n    it('finds the ideal borrowRatio for main residence type with insurance2', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [\n          {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{ value: 100000 }],\n          },\n        ],\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      });\n      expect(borrowRatio).to.equal(0.8);\n      expect(propertyValue).to.equal(2400000);\n    });\n\n    it('finds the ideal borrowRatio for second residence type with insurance2', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [\n          {\n            bankFortune: 230000,\n            salary: 120000,\n          },\n        ],\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        canton: 'GE',\n      });\n      expect(borrowRatio).to.equal(0.7313);\n      expect(propertyValue).to.equal(769000);\n    });\n\n    it('should not exceed max borrow ratio of a lender', () => {\n      const lenderRules = [\n        {\n          order: 0,\n          maxBorrowRatio: 0.9,\n          bonusConsideration: 0.7,\n          expensesSubtractFromIncome: [],\n          theoreticalInterestRate: 0.045,\n          theoreticalMaintenanceRate: 0.007,\n          maxIncomeRatio: 0.38,\n          filter: { and: [true] },\n          incomeConsiderationType: INCOME_CONSIDERATION_TYPES.NET,\n        },\n        {\n          order: 1,\n          maxBorrowRatio: 0.7,\n          filter: { and: DEFAULT_SECONDARY_RESIDENCE_RULES },\n          amortizationGoal: 0.5,\n          amortizationYears: 12,\n        },\n      ];\n\n      const borrowers = [\n        {\n          bankFortune: 130000,\n          insurance2: [{ value: 100000 }],\n          netSalary: 125000,\n          salary: 182000,\n          bonusExists: true,\n          bonus2015: 50000,\n          bonus2016: 50000,\n          bonus2017: 50000,\n          bonus2018: 50000,\n        },\n      ];\n      const loanObject = Calculator.createLoanObject({\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n        borrowers,\n        canton: 'GE',\n      });\n\n      const calc = new CalculatorClass({ lenderRules, loan: loanObject });\n      const results = calc.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers,\n        canton: 'GE',\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n      });\n\n      expect(results.borrowRatio).to.equal(0.7);\n      expect(results.propertyValue).to.equal(362000);\n    });\n\n    it('should work with a very small borrowRatio', () => {\n      const lenderRules = [\n        {\n          order: 0,\n          maxBorrowRatio: 0.5,\n          bonusConsideration: 0.7,\n          expensesSubtractFromIncome: [],\n          theoreticalInterestRate: 0.045,\n          theoreticalMaintenanceRate: 0.007,\n          maxIncomeRatio: 0.38,\n          filter: { and: [true] },\n          incomeConsiderationType: INCOME_CONSIDERATION_TYPES.NET,\n        },\n      ];\n\n      const borrowers = [\n        {\n          bankFortune: 130000,\n          insurance2: [{ value: 100000 }],\n          netSalary: 125000,\n          salary: 182000,\n          bonusExists: true,\n          bonus2015: 50000,\n          bonus2016: 50000,\n          bonus2017: 50000,\n          bonus2018: 50000,\n        },\n      ];\n      const loanObject = Calculator.createLoanObject({\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n        borrowers,\n        canton: 'GE',\n      });\n\n      const calc = new CalculatorClass({ lenderRules, loan: loanObject });\n      const results = calc.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers,\n        canton: 'GE',\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n      });\n\n      expect(results.borrowRatio).to.equal(0.5);\n      expect(results.propertyValue).to.equal(232000);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/SolvencyCalculator.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/Calculator/test/SolvencyCalculator.spec.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar Calculator, CalculatorClass;\nmodule.link(\"..\", {\n  \"default\": function (v) {\n    Calculator = v;\n  },\n  Calculator: function (v) {\n    CalculatorClass = v;\n  }\n}, 1);\nvar OWN_FUNDS_USAGE_TYPES;\nmodule.link(\"../../../api/constants\", {\n  OWN_FUNDS_USAGE_TYPES: function (v) {\n    OWN_FUNDS_USAGE_TYPES = v;\n  }\n}, 2);\nvar OWN_FUNDS_TYPES, RESIDENCE_TYPE, DEFAULT_SECONDARY_RESIDENCE_RULES, INCOME_CONSIDERATION_TYPES;\nmodule.link(\"../../../api/constants\", {\n  OWN_FUNDS_TYPES: function (v) {\n    OWN_FUNDS_TYPES = v;\n  },\n  RESIDENCE_TYPE: function (v) {\n    RESIDENCE_TYPE = v;\n  },\n  DEFAULT_SECONDARY_RESIDENCE_RULES: function (v) {\n    DEFAULT_SECONDARY_RESIDENCE_RULES = v;\n  },\n  INCOME_CONSIDERATION_TYPES: function (v) {\n    INCOME_CONSIDERATION_TYPES = v;\n  }\n}, 3);\ndescribe('SolvencyCalculator', function () {\n  describe('suggestStructure', function () {\n    var loan;\n    var borrower;\n    beforeEach(function () {\n      borrower = {\n        _id: 'borrowerId'\n      };\n      loan = {\n        borrowers: [borrower]\n      };\n    });\n    it('suggests a structure with all bankFortune if possible', function () {\n      borrower.bankFortune = 500000;\n      expect(Calculator.suggestStructure({\n        loan: loan,\n        propertyValue: 1000000\n      })).to.deep.equal([{\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        value: 250000,\n        borrowerId: 'borrowerId'\n      }]);\n    });\n    it('calculates exact notary fees if the canton is set', function () {\n      borrower.bankFortune = 500000;\n      expect(Calculator.suggestStructure({\n        loan: loan,\n        propertyValue: 1000008,\n        canton: 'GE'\n      })).to.deep.equal([{\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        value: 255162,\n        borrowerId: 'borrowerId'\n      }]);\n    });\n    it('suggests a structure with multiple ownFunds', function () {\n      borrower.bankFortune = 200000;\n      borrower.insurance3B = [{\n        value: 100000\n      }];\n      expect(Calculator.suggestStructure({\n        loan: loan,\n        propertyValue: 1000000\n      })).to.deep.equal([{\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        value: 200000,\n        borrowerId: 'borrowerId'\n      }, {\n        type: OWN_FUNDS_TYPES.INSURANCE_3B,\n        value: 50000,\n        borrowerId: 'borrowerId',\n        usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW\n      }]);\n    });\n    it('does not use 2nd pillar if not a main residence', function () {\n      borrower.bankFortune = 200000;\n      borrower.insurance2 = [{\n        value: 100000\n      }];\n      expect(Calculator.suggestStructure({\n        loan: loan,\n        propertyValue: 1000000\n      })).to.deep.equal([{\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        value: 200000,\n        borrowerId: 'borrowerId'\n      }]);\n    });\n    it('uses 2nd pillar if not a main residence', function () {\n      borrower.bankFortune = 200000;\n      borrower.insurance2 = [{\n        value: 100000\n      }];\n      expect(Calculator.suggestStructure({\n        loan: loan,\n        propertyValue: 1000000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE\n      })).to.deep.equal([{\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        value: 200000,\n        borrowerId: 'borrowerId'\n      }, {\n        type: OWN_FUNDS_TYPES.INSURANCE_2,\n        value: 50000,\n        borrowerId: 'borrowerId',\n        usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW\n      }]);\n    });\n    it('always gets up to the exact value', function () {\n      var loanValue = 800000;\n      loan.structure = {\n        wantedLoan: loanValue,\n        property: {\n          totalValue: 1000000,\n          canton: 'GE'\n        },\n        propertyWork: 100000\n      };\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      var required = Calculator.getRequiredOwnFunds({\n        loan: loan\n      });\n      borrower.bankFortune = 200000;\n      borrower.insurance2 = [{\n        value: 150000\n      }];\n      var ownFunds = Calculator.suggestStructure({\n        loan: loan,\n        propertyValue: 1100000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        loanValue: loanValue,\n        canton: 'GE',\n        notaryFees: 31944.1\n      });\n      var total = ownFunds.reduce(function (t, _ref) {\n        var value = _ref.value;\n        return t + value;\n      }, 0);\n      expect(total).to.equal(Math.round(required));\n    });\n  });\n  describe('getMaxPropertyValue', function () {\n    it('recommends a standard value with unlimited income', function () {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{\n          bankFortune: 500000,\n          salary: 1000000\n        }]\n      })).to.equal(2000000);\n    });\n    it('recommends a standard value with unlimited income', function () {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{\n          bankFortune: 455000,\n          salary: 1000000\n        }]\n      })).to.equal(1820000);\n    });\n    it('returns 0 with no income', function () {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{\n          bankFortune: 500000,\n          salary: 0\n        }]\n      })).to.equal(0);\n    });\n    it('returns 0 with no fortune', function () {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{\n          bankFortune: 0,\n          salary: 1000000\n        }]\n      })).to.equal(0);\n    });\n    it('recommends a standard value with unlimited own Funds', function () {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{\n          bankFortune: 500000,\n          salary: 180000\n        }]\n      })).to.equal(1000000);\n    });\n  });\n  describe('suggestStructureForLoan', function () {\n    it('suggests a structure including for property work', function () {\n      expect(Calculator.suggestStructureForLoan({\n        loan: {\n          borrowers: [{\n            bankFortune: 500000,\n            salary: 180000,\n            _id: 'borrower1'\n          }],\n          structures: [{\n            id: 'struct1',\n            propertyValue: 900000,\n            propertyWork: 100000\n          }]\n        },\n        structureId: 'struct1'\n      })).to.deep.equal([{\n        type: 'bankFortune',\n        value: 245000,\n        borrowerId: 'borrower1'\n      }]);\n    });\n  });\n  describe('getMaxPropertyValueWithoutBorrowRatio', function () {\n    it('finds the ideal borrowRatio', function () {\n      var _Calculator$getMaxPro = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{\n          bankFortune: 500000,\n          salary: 1000000\n        }]\n      }),\n          borrowRatio = _Calculator$getMaxPro.borrowRatio,\n          propertyValue = _Calculator$getMaxPro.propertyValue;\n\n      expect(borrowRatio).to.equal(0.8);\n      expect(propertyValue).to.equal(2000000);\n    });\n    it('finds the ideal borrowRatio', function () {\n      var _Calculator$getMaxPro2 = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{\n          bankFortune: 250000,\n          salary: 100000\n        }]\n      }),\n          borrowRatio = _Calculator$getMaxPro2.borrowRatio,\n          propertyValue = _Calculator$getMaxPro2.propertyValue;\n\n      expect(borrowRatio).to.equal(0.6938);\n      expect(propertyValue).to.equal(700000);\n    });\n    it('finds the ideal borrowRatio', function () {\n      var _Calculator$getMaxPro3 = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{\n          bankFortune: 250000,\n          salary: 50000\n        }]\n      }),\n          borrowRatio = _Calculator$getMaxPro3.borrowRatio,\n          propertyValue = _Calculator$getMaxPro3.propertyValue;\n\n      expect(borrowRatio).to.equal(0.515);\n      expect(propertyValue).to.equal(466000);\n    });\n    it('finds the ideal borrowRatio', function () {\n      var _Calculator$getMaxPro4 = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{\n          bankFortune: 200000,\n          salary: 83000\n        }]\n      }),\n          borrowRatio = _Calculator$getMaxPro4.borrowRatio,\n          propertyValue = _Calculator$getMaxPro4.propertyValue;\n\n      expect(borrowRatio).to.equal(0.7);\n      expect(propertyValue).to.equal(571000);\n    });\n    it('finds the ideal borrowRatio for main residence type with insurance2', function () {\n      var _Calculator$getMaxPro5 = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{\n          bankFortune: 500000,\n          salary: 1000000,\n          insurance2: [{\n            value: 100000\n          }]\n        }],\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE\n      }),\n          borrowRatio = _Calculator$getMaxPro5.borrowRatio,\n          propertyValue = _Calculator$getMaxPro5.propertyValue;\n\n      expect(borrowRatio).to.equal(0.8);\n      expect(propertyValue).to.equal(2400000);\n    });\n    it('finds the ideal borrowRatio for second residence type with insurance2', function () {\n      var _Calculator$getMaxPro6 = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{\n          bankFortune: 230000,\n          salary: 120000\n        }],\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        canton: 'GE'\n      }),\n          borrowRatio = _Calculator$getMaxPro6.borrowRatio,\n          propertyValue = _Calculator$getMaxPro6.propertyValue;\n\n      expect(borrowRatio).to.equal(0.7313);\n      expect(propertyValue).to.equal(769000);\n    });\n    it('should not exceed max borrow ratio of a lender', function () {\n      var lenderRules = [{\n        order: 0,\n        maxBorrowRatio: 0.9,\n        bonusConsideration: 0.7,\n        expensesSubtractFromIncome: [],\n        theoreticalInterestRate: 0.045,\n        theoreticalMaintenanceRate: 0.007,\n        maxIncomeRatio: 0.38,\n        filter: {\n          and: [true]\n        },\n        incomeConsiderationType: INCOME_CONSIDERATION_TYPES.NET\n      }, {\n        order: 1,\n        maxBorrowRatio: 0.7,\n        filter: {\n          and: DEFAULT_SECONDARY_RESIDENCE_RULES\n        },\n        amortizationGoal: 0.5,\n        amortizationYears: 12\n      }];\n      var borrowers = [{\n        bankFortune: 130000,\n        insurance2: [{\n          value: 100000\n        }],\n        netSalary: 125000,\n        salary: 182000,\n        bonusExists: true,\n        bonus2015: 50000,\n        bonus2016: 50000,\n        bonus2017: 50000,\n        bonus2018: 50000\n      }];\n      var loanObject = Calculator.createLoanObject({\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n        borrowers: borrowers,\n        canton: 'GE'\n      });\n      var calc = new CalculatorClass({\n        lenderRules: lenderRules,\n        loan: loanObject\n      });\n      var results = calc.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: borrowers,\n        canton: 'GE',\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE\n      });\n      expect(results.borrowRatio).to.equal(0.7);\n      expect(results.propertyValue).to.equal(362000);\n    });\n    it('should work with a very small borrowRatio', function () {\n      var lenderRules = [{\n        order: 0,\n        maxBorrowRatio: 0.5,\n        bonusConsideration: 0.7,\n        expensesSubtractFromIncome: [],\n        theoreticalInterestRate: 0.045,\n        theoreticalMaintenanceRate: 0.007,\n        maxIncomeRatio: 0.38,\n        filter: {\n          and: [true]\n        },\n        incomeConsiderationType: INCOME_CONSIDERATION_TYPES.NET\n      }];\n      var borrowers = [{\n        bankFortune: 130000,\n        insurance2: [{\n          value: 100000\n        }],\n        netSalary: 125000,\n        salary: 182000,\n        bonusExists: true,\n        bonus2015: 50000,\n        bonus2016: 50000,\n        bonus2017: 50000,\n        bonus2018: 50000\n      }];\n      var loanObject = Calculator.createLoanObject({\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n        borrowers: borrowers,\n        canton: 'GE'\n      });\n      var calc = new CalculatorClass({\n        lenderRules: lenderRules,\n        loan: loanObject\n      });\n      var results = calc.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: borrowers,\n        canton: 'GE',\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE\n      });\n      expect(results.borrowRatio).to.equal(0.5);\n      expect(results.propertyValue).to.equal(232000);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/Calculator/test/SolvencyCalculator.spec.js"],"names":["describe","beforeEach","borrower","_id","loan","borrowers","it","expect","propertyValue","type","OWN_FUNDS_TYPES","value","borrowerId","canton","usageType","OWN_FUNDS_USAGE_TYPES","WITHDRAW","residenceType","RESIDENCE_TYPE","MAIN_RESIDENCE","loanValue","wantedLoan","property","totalValue","propertyWork","required","ownFunds","notaryFees","total","t","Math","bankFortune","salary","structures","id","structureId","insurance2","lenderRules","order","maxBorrowRatio","bonusConsideration","expensesSubtractFromIncome","theoreticalInterestRate","theoreticalMaintenanceRate","maxIncomeRatio","filter","and","incomeConsiderationType","INCOME_CONSIDERATION_TYPES","NET","DEFAULT_SECONDARY_RESIDENCE_RULES","amortizationGoal","amortizationYears","netSalary","bonusExists","bonus2015","bonus2016","bonus2017","bonus2018","loanObject","calc","results","SECOND_RESIDENCE"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator, { Calculator as CalculatorClass } from '..';\nimport { OWN_FUNDS_USAGE_TYPES } from 'core/api/constants';\nimport {\n  OWN_FUNDS_TYPES,\n  RESIDENCE_TYPE,\n  DEFAULT_SECONDARY_RESIDENCE_RULES,\n  INCOME_CONSIDERATION_TYPES,\n} from '../../../api/constants';\n\ndescribe('SolvencyCalculator', () => {\n  describe('suggestStructure', () => {\n    let loan;\n    let borrower;\n\n    beforeEach(() => {\n      borrower = { _id: 'borrowerId' };\n      loan = { borrowers: [borrower] };\n    });\n\n    it('suggests a structure with all bankFortune if possible', () => {\n      borrower.bankFortune = 500000;\n      expect(Calculator.suggestStructure({ loan, propertyValue: 1000000 })).to.deep.equal([\n        {\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 250000,\n          borrowerId: 'borrowerId',\n        },\n      ]);\n    });\n\n    it('calculates exact notary fees if the canton is set', () => {\n      borrower.bankFortune = 500000;\n      expect(Calculator.suggestStructure({\n        loan,\n        propertyValue: 1000008,\n        canton: 'GE',\n      })).to.deep.equal([\n        {\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 255162,\n          borrowerId: 'borrowerId',\n        },\n      ]);\n    });\n\n    it('suggests a structure with multiple ownFunds', () => {\n      borrower.bankFortune = 200000;\n      borrower.insurance3B = [{ value: 100000 }];\n      expect(Calculator.suggestStructure({ loan, propertyValue: 1000000 })).to.deep.equal([\n        {\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 200000,\n          borrowerId: 'borrowerId',\n        },\n        {\n          type: OWN_FUNDS_TYPES.INSURANCE_3B,\n          value: 50000,\n          borrowerId: 'borrowerId',\n          usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n        },\n      ]);\n    });\n\n    it('does not use 2nd pillar if not a main residence', () => {\n      borrower.bankFortune = 200000;\n      borrower.insurance2 = [{ value: 100000 }];\n      expect(Calculator.suggestStructure({ loan, propertyValue: 1000000 })).to.deep.equal([\n        {\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 200000,\n          borrowerId: 'borrowerId',\n        },\n      ]);\n    });\n\n    it('uses 2nd pillar if not a main residence', () => {\n      borrower.bankFortune = 200000;\n      borrower.insurance2 = [{ value: 100000 }];\n      expect(Calculator.suggestStructure({\n        loan,\n        propertyValue: 1000000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      })).to.deep.equal([\n        {\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 200000,\n          borrowerId: 'borrowerId',\n        },\n        {\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          value: 50000,\n          borrowerId: 'borrowerId',\n          usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW,\n        },\n      ]);\n    });\n\n    it('always gets up to the exact value', () => {\n      const loanValue = 800000;\n      loan.structure = {\n        wantedLoan: loanValue,\n        property: { totalValue: 1000000, canton: 'GE' },\n        propertyWork: 100000,\n      };\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      const required = Calculator.getRequiredOwnFunds({ loan });\n      borrower.bankFortune = 200000;\n      borrower.insurance2 = [{ value: 150000 }];\n      const ownFunds = Calculator.suggestStructure({\n        loan,\n        propertyValue: 1100000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        loanValue,\n        canton: 'GE',\n        notaryFees: 31944.1,\n      });\n      const total = ownFunds.reduce((t, { value }) => t + value, 0);\n\n      expect(total).to.equal(Math.round(required));\n    });\n  });\n\n  describe('getMaxPropertyValue', () => {\n    it('recommends a standard value with unlimited income', () => {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{ bankFortune: 500000, salary: 1000000 }],\n      })).to.equal(2000000);\n    });\n\n    it('recommends a standard value with unlimited income', () => {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{ bankFortune: 455000, salary: 1000000 }],\n      })).to.equal(1820000);\n    });\n\n    it('returns 0 with no income', () => {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{ bankFortune: 500000, salary: 0 }],\n      })).to.equal(0);\n    });\n\n    it('returns 0 with no fortune', () => {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{ bankFortune: 0, salary: 1000000 }],\n      })).to.equal(0);\n    });\n\n    it('recommends a standard value with unlimited own Funds', () => {\n      expect(Calculator.getMaxPropertyValue({\n        borrowers: [{ bankFortune: 500000, salary: 180000 }],\n      })).to.equal(1000000);\n    });\n  });\n\n  describe('suggestStructureForLoan', () => {\n    it('suggests a structure including for property work', () => {\n      expect(Calculator.suggestStructureForLoan({\n        loan: {\n          borrowers: [\n            { bankFortune: 500000, salary: 180000, _id: 'borrower1' },\n          ],\n          structures: [\n            { id: 'struct1', propertyValue: 900000, propertyWork: 100000 },\n          ],\n        },\n        structureId: 'struct1',\n      })).to.deep.equal([\n        { type: 'bankFortune', value: 245000, borrowerId: 'borrower1' },\n      ]);\n    });\n  });\n\n  describe('getMaxPropertyValueWithoutBorrowRatio', () => {\n    it('finds the ideal borrowRatio', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{ bankFortune: 500000, salary: 1000000 }],\n      });\n      expect(borrowRatio).to.equal(0.8);\n      expect(propertyValue).to.equal(2000000);\n    });\n\n    it('finds the ideal borrowRatio', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{ bankFortune: 250000, salary: 100000 }],\n      });\n      expect(borrowRatio).to.equal(0.6938);\n      expect(propertyValue).to.equal(700000);\n    });\n\n    it('finds the ideal borrowRatio', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{ bankFortune: 250000, salary: 50000 }],\n      });\n      expect(borrowRatio).to.equal(0.515);\n      expect(propertyValue).to.equal(466000);\n    });\n\n    it('finds the ideal borrowRatio', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [{ bankFortune: 200000, salary: 83000 }],\n      });\n      expect(borrowRatio).to.equal(0.7);\n      expect(propertyValue).to.equal(571000);\n    });\n\n    it('finds the ideal borrowRatio for main residence type with insurance2', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [\n          {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{ value: 100000 }],\n          },\n        ],\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      });\n      expect(borrowRatio).to.equal(0.8);\n      expect(propertyValue).to.equal(2400000);\n    });\n\n    it('finds the ideal borrowRatio for second residence type with insurance2', () => {\n      const {\n        borrowRatio,\n        propertyValue,\n      } = Calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers: [\n          {\n            bankFortune: 230000,\n            salary: 120000,\n          },\n        ],\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        canton: 'GE',\n      });\n      expect(borrowRatio).to.equal(0.7313);\n      expect(propertyValue).to.equal(769000);\n    });\n\n    it('should not exceed max borrow ratio of a lender', () => {\n      const lenderRules = [\n        {\n          order: 0,\n          maxBorrowRatio: 0.9,\n          bonusConsideration: 0.7,\n          expensesSubtractFromIncome: [],\n          theoreticalInterestRate: 0.045,\n          theoreticalMaintenanceRate: 0.007,\n          maxIncomeRatio: 0.38,\n          filter: { and: [true] },\n          incomeConsiderationType: INCOME_CONSIDERATION_TYPES.NET,\n        },\n        {\n          order: 1,\n          maxBorrowRatio: 0.7,\n          filter: { and: DEFAULT_SECONDARY_RESIDENCE_RULES },\n          amortizationGoal: 0.5,\n          amortizationYears: 12,\n        },\n      ];\n\n      const borrowers = [\n        {\n          bankFortune: 130000,\n          insurance2: [{ value: 100000 }],\n          netSalary: 125000,\n          salary: 182000,\n          bonusExists: true,\n          bonus2015: 50000,\n          bonus2016: 50000,\n          bonus2017: 50000,\n          bonus2018: 50000,\n        },\n      ];\n      const loanObject = Calculator.createLoanObject({\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n        borrowers,\n        canton: 'GE',\n      });\n\n      const calc = new CalculatorClass({ lenderRules, loan: loanObject });\n      const results = calc.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers,\n        canton: 'GE',\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n      });\n\n      expect(results.borrowRatio).to.equal(0.7);\n      expect(results.propertyValue).to.equal(362000);\n    });\n\n    it('should work with a very small borrowRatio', () => {\n      const lenderRules = [\n        {\n          order: 0,\n          maxBorrowRatio: 0.5,\n          bonusConsideration: 0.7,\n          expensesSubtractFromIncome: [],\n          theoreticalInterestRate: 0.045,\n          theoreticalMaintenanceRate: 0.007,\n          maxIncomeRatio: 0.38,\n          filter: { and: [true] },\n          incomeConsiderationType: INCOME_CONSIDERATION_TYPES.NET,\n        },\n      ];\n\n      const borrowers = [\n        {\n          bankFortune: 130000,\n          insurance2: [{ value: 100000 }],\n          netSalary: 125000,\n          salary: 182000,\n          bonusExists: true,\n          bonus2015: 50000,\n          bonus2016: 50000,\n          bonus2017: 50000,\n          bonus2018: 50000,\n        },\n      ];\n      const loanObject = Calculator.createLoanObject({\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n        borrowers,\n        canton: 'GE',\n      });\n\n      const calc = new CalculatorClass({ lenderRules, loan: loanObject });\n      const results = calc.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers,\n        canton: 'GE',\n        residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n      });\n\n      expect(results.borrowRatio).to.equal(0.5);\n      expect(results.propertyValue).to.equal(232000);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"dd8e18429d2c50585ace80c2400a0d46d41a41c1"}

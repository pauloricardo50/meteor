{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/tooltips/test/TooltipSynonyms.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/tooltips/test/TooltipSynonyms.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/tooltips/test/TooltipSynonyms.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/tooltips/test/TooltipSynonyms.spec.jsx"],"names":["React","expect","shallow","TooltipSynonyms","describe","props","component","beforeEach","tooltips","it","getElement","to","equal","tooltipId","match","match1","id","contains","match2","match3"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\n\nimport { shallow } from '../../../utils/testHelpers/enzyme';\nimport { TooltipSynonyms } from '../TooltipSynonyms';\n\ndescribe('TooltipSynonyms', () => {\n  let props;\n  const component = () => shallow(<TooltipSynonyms {...props} />);\n\n  beforeEach(() => {\n    props = { tooltips: {} };\n  });\n\n  it('renders null if no tooltipId is passed', () => {\n    expect(component().getElement()).to.equal(null);\n  });\n\n  it('renders null if no tooltipId is passed', () => {\n    expect(component().getElement()).to.equal(null);\n  });\n\n  it('does not render a synonym if none other exists', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'match1',\n      tooltips: { match1: { id: 'test' } },\n    };\n\n    expect(component().getElement()).to.equal(null);\n    expect(component().contains('match1')).to.equal(false);\n  });\n\n  it('renders a synonym if 2 exist, but not the match', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'match2',\n      tooltips: { match1: { id: 'test' }, match2: { id: 'test' } },\n    };\n\n    expect(component().contains('match2, match1')).to.equal(false);\n    expect(component().contains('match1')).to.equal(true);\n  });\n\n  it('renders 2 synonyms if 3 exist, but not the match', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'match2',\n      tooltips: {\n        match1: { id: 'test' },\n        match2: { id: 'test' },\n        match3: { id: 'test' },\n      },\n    };\n\n    expect(component().contains('match1, match3')).to.equal(true);\n  });\n\n  it('ignores case', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'Match2',\n      tooltips: { match1: { id: 'test' }, match2: { id: 'test' } },\n    };\n\n    expect(component().contains('match2, match1')).to.equal(false);\n    expect(component().contains('match1')).to.equal(true);\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/tooltips/test/TooltipSynonyms.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/tooltips/test/TooltipSynonyms.spec.jsx"}},"code":"let React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 1);\nlet shallow;\nmodule.link(\"../../../utils/testHelpers/enzyme\", {\n  shallow(v) {\n    shallow = v;\n  }\n\n}, 2);\nlet TooltipSynonyms;\nmodule.link(\"../TooltipSynonyms\", {\n  TooltipSynonyms(v) {\n    TooltipSynonyms = v;\n  }\n\n}, 3);\ndescribe('TooltipSynonyms', () => {\n  let props;\n\n  const component = () => shallow(React.createElement(TooltipSynonyms, props));\n\n  beforeEach(() => {\n    props = {\n      tooltips: {}\n    };\n  });\n  it('renders null if no tooltipId is passed', () => {\n    expect(component().getElement()).to.equal(null);\n  });\n  it('renders null if no tooltipId is passed', () => {\n    expect(component().getElement()).to.equal(null);\n  });\n  it('does not render a synonym if none other exists', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'match1',\n      tooltips: {\n        match1: {\n          id: 'test'\n        }\n      }\n    };\n    expect(component().getElement()).to.equal(null);\n    expect(component().contains('match1')).to.equal(false);\n  });\n  it('renders a synonym if 2 exist, but not the match', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'match2',\n      tooltips: {\n        match1: {\n          id: 'test'\n        },\n        match2: {\n          id: 'test'\n        }\n      }\n    };\n    expect(component().contains('match2, match1')).to.equal(false);\n    expect(component().contains('match1')).to.equal(true);\n  });\n  it('renders 2 synonyms if 3 exist, but not the match', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'match2',\n      tooltips: {\n        match1: {\n          id: 'test'\n        },\n        match2: {\n          id: 'test'\n        },\n        match3: {\n          id: 'test'\n        }\n      }\n    };\n    expect(component().contains('match1, match3')).to.equal(true);\n  });\n  it('ignores case', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'Match2',\n      tooltips: {\n        match1: {\n          id: 'test'\n        },\n        match2: {\n          id: 'test'\n        }\n      }\n    };\n    expect(component().contains('match2, match1')).to.equal(false);\n    expect(component().contains('match1')).to.equal(true);\n  });\n});","map":{"version":3,"sources":["imports/core/components/tooltips/test/TooltipSynonyms.spec.jsx"],"names":["describe","component","shallow","beforeEach","props","tooltips","it","expect","tooltipId","match","match1","id","match2","match3"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\n\nimport { shallow } from '../../../utils/testHelpers/enzyme';\nimport { TooltipSynonyms } from '../TooltipSynonyms';\n\ndescribe('TooltipSynonyms', () => {\n  let props;\n  const component = () => shallow(<TooltipSynonyms {...props} />);\n\n  beforeEach(() => {\n    props = { tooltips: {} };\n  });\n\n  it('renders null if no tooltipId is passed', () => {\n    expect(component().getElement()).to.equal(null);\n  });\n\n  it('renders null if no tooltipId is passed', () => {\n    expect(component().getElement()).to.equal(null);\n  });\n\n  it('does not render a synonym if none other exists', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'match1',\n      tooltips: { match1: { id: 'test' } },\n    };\n\n    expect(component().getElement()).to.equal(null);\n    expect(component().contains('match1')).to.equal(false);\n  });\n\n  it('renders a synonym if 2 exist, but not the match', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'match2',\n      tooltips: { match1: { id: 'test' }, match2: { id: 'test' } },\n    };\n\n    expect(component().contains('match2, match1')).to.equal(false);\n    expect(component().contains('match1')).to.equal(true);\n  });\n\n  it('renders 2 synonyms if 3 exist, but not the match', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'match2',\n      tooltips: {\n        match1: { id: 'test' },\n        match2: { id: 'test' },\n        match3: { id: 'test' },\n      },\n    };\n\n    expect(component().contains('match1, match3')).to.equal(true);\n  });\n\n  it('ignores case', () => {\n    props = {\n      tooltipId: 'test',\n      match: 'Match2',\n      tooltips: { match1: { id: 'test' }, match2: { id: 'test' } },\n    };\n\n    expect(component().contains('match2, match1')).to.equal(false);\n    expect(component().contains('match1')).to.equal(true);\n  });\n});\n"]},"sourceType":"script","hash":"43e05bb9a331766d75e9174b6e3bdd018ef6a23a"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/force-ssl/force_ssl_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/force-ssl/force_ssl_server.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/force-ssl/force_ssl_server.js","passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/force-ssl/force_ssl_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/force-ssl/force_ssl_server.js"}},"code":"let isLocalConnection, isSslConnection;\nmodule.link(\"meteor/force-ssl-common\", {\n  isLocalConnection(v) {\n    isLocalConnection = v;\n  },\n\n  isSslConnection(v) {\n    isSslConnection = v;\n  }\n\n}, 0);\n\nvar url = Npm.require(\"url\");\n\n// Unfortunately we can't use a connect middleware here since\n// sockjs installs itself prior to all existing listeners\n// (meaning prior to any connect middlewares) so we need to take\n// an approach similar to overshadowListeners in\n// https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\nvar httpServer = WebApp.httpServer;\nvar oldHttpServerListeners = httpServer.listeners('request').slice(0);\nhttpServer.removeAllListeners('request');\nhttpServer.addListener('request', function (req, res) {\n  // allow connections if they have been handled w/ ssl already\n  // (either by us or by a proxy) OR the connection is entirely over\n  // localhost (development mode).\n  //\n  // Note: someone could trick us into serving over non-ssl by setting\n  // x-forwarded-for, x-forwarded-proto, forwarded, etc. Not much we can do\n  // there if we still want to operate behind proxies.\n  if (!isLocalConnection(req) && !isSslConnection(req)) {\n    // connection is not cool. send a 302 redirect!\n    var host = url.parse(Meteor.absoluteUrl()).hostname; // strip off the port number. If we went to a URL with a custom\n    // port, we don't know what the custom SSL port is anyway.\n\n    host = host.replace(/:\\d+$/, '');\n    res.writeHead(302, {\n      'Location': 'https://' + host + req.url,\n      'Access-Control-Allow-Origin': '*'\n    });\n    res.end();\n    return;\n  } // connection is OK. Proceed normally.\n\n\n  var args = arguments;\n  oldHttpServerListeners.forEach(oldListener => {\n    oldListener.apply(httpServer, args);\n  });\n}); // NOTE: this doesn't handle websockets!\n//\n// Websockets come in via the 'upgrade' request. We can override this,\n// however the problem is we're not sure if the websocket is actually\n// encrypted. We don't get x-forwarded-for, x-forwarded-proto, forwarded, etc.\n// on websockets. It's possible the 'sec-websocket-origin' header does\n// what we want, but that's not clear.\n//\n// For now, this package allows raw unencrypted DDP connections over\n// websockets.","map":{"version":3,"sources":["packages/force-ssl/force_ssl_server.js"],"names":["isLocalConnection","isSslConnection","module","link","v","url","Npm","require","httpServer","WebApp","oldHttpServerListeners","listeners","slice","removeAllListeners","addListener","req","res","host","parse","Meteor","absoluteUrl","hostname","replace","writeHead","end","args","arguments","forEach","oldListener","apply"],"mappings":"AAAA,IAAIA,iBAAJ,EAAsBC,eAAtB;AAAsCC,MAAM,CAACC,IAAP,CAAY,yBAAZ,EAAsC;AAACH,EAAAA,iBAAiB,CAACI,CAAD,EAAG;AAACJ,IAAAA,iBAAiB,GAACI,CAAlB;AAAoB,GAA1C;;AAA2CH,EAAAA,eAAe,CAACG,CAAD,EAAG;AAACH,IAAAA,eAAe,GAACG,CAAhB;AAAkB;;AAAhF,CAAtC,EAAwH,CAAxH;;AAAtC,IAAIC,GAAG,GAAGC,GAAG,CAACC,OAAJ,CAAY,KAAZ,CAAV;;AAGA;AACA;AACA;AACA;AACA;AAEA,IAAIC,UAAU,GAAGC,MAAM,CAACD,UAAxB;AACA,IAAIE,sBAAsB,GAAGF,UAAU,CAACG,SAAX,CAAqB,SAArB,EAAgCC,KAAhC,CAAsC,CAAtC,CAA7B;AACAJ,UAAU,CAACK,kBAAX,CAA8B,SAA9B;AACAL,UAAU,CAACM,WAAX,CAAuB,SAAvB,EAAkC,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAI,CAAChB,iBAAiB,CAACe,GAAD,CAAlB,IAA2B,CAACd,eAAe,CAACc,GAAD,CAA/C,EAAsD;AACpD;AAEA,QAAIE,IAAI,GAAGZ,GAAG,CAACa,KAAJ,CAAUC,MAAM,CAACC,WAAP,EAAV,EAAgCC,QAA3C,CAHoD,CAKpD;AACA;;AACAJ,IAAAA,IAAI,GAAGA,IAAI,CAACK,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAP;AAEAN,IAAAA,GAAG,CAACO,SAAJ,CAAc,GAAd,EAAmB;AACjB,kBAAY,aAAaN,IAAb,GAAoBF,GAAG,CAACV,GADnB;AAEjB,qCAA+B;AAFd,KAAnB;AAIAW,IAAAA,GAAG,CAACQ,GAAJ;AACA;AACD,GAzBmD,CA2BpD;;;AACA,MAAIC,IAAI,GAAGC,SAAX;AACAhB,EAAAA,sBAAsB,CAACiB,OAAvB,CAAgCC,WAAD,IAAiB;AAC9CA,IAAAA,WAAW,CAACC,KAAZ,CAAkBrB,UAAlB,EAA8BiB,IAA9B;AACD,GAFD;AAGD,CAhCD,E,CAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["var url = Npm.require(\"url\");\nimport { isLocalConnection, isSslConnection } from 'meteor/force-ssl-common';\n\n// Unfortunately we can't use a connect middleware here since\n// sockjs installs itself prior to all existing listeners\n// (meaning prior to any connect middlewares) so we need to take\n// an approach similar to overshadowListeners in\n// https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n\nvar httpServer = WebApp.httpServer;\nvar oldHttpServerListeners = httpServer.listeners('request').slice(0);\nhttpServer.removeAllListeners('request');\nhttpServer.addListener('request', function (req, res) {\n\n  // allow connections if they have been handled w/ ssl already\n  // (either by us or by a proxy) OR the connection is entirely over\n  // localhost (development mode).\n  //\n  // Note: someone could trick us into serving over non-ssl by setting\n  // x-forwarded-for, x-forwarded-proto, forwarded, etc. Not much we can do\n  // there if we still want to operate behind proxies.\n\n  if (!isLocalConnection(req) && !isSslConnection(req)) {\n    // connection is not cool. send a 302 redirect!\n\n    var host = url.parse(Meteor.absoluteUrl()).hostname;\n\n    // strip off the port number. If we went to a URL with a custom\n    // port, we don't know what the custom SSL port is anyway.\n    host = host.replace(/:\\d+$/, '');\n\n    res.writeHead(302, {\n      'Location': 'https://' + host + req.url,\n      'Access-Control-Allow-Origin': '*'\n    });\n    res.end();\n    return;\n  }\n\n  // connection is OK. Proceed normally.\n  var args = arguments;\n  oldHttpServerListeners.forEach((oldListener) => {\n    oldListener.apply(httpServer, args);\n  });\n});\n\n\n// NOTE: this doesn't handle websockets!\n//\n// Websockets come in via the 'upgrade' request. We can override this,\n// however the problem is we're not sure if the websocket is actually\n// encrypted. We don't get x-forwarded-for, x-forwarded-proto, forwarded, etc.\n// on websockets. It's possible the 'sec-websocket-origin' header does\n// what we want, but that's not clear.\n//\n// For now, this package allows raw unencrypted DDP connections over\n// websockets.\n"]},"sourceType":"script","hash":"08a39eec6a744fb202217d2a49b10271f27d0c51"}

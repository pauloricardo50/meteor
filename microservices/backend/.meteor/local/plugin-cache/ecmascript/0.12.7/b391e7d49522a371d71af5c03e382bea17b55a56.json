{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/factories/test/server/factoriesHelpers.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/factories/test/server/factoriesHelpers.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/factories/test/server/factoriesHelpers.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/factories/test/server/factoriesHelpers.test.js"],"names":["Mongo","Factory","expect","resetDatabase","generator","PostCollection","Collection","CategoryCollection","CommentCollection","addLinks","comments","type","collection","field","index","metaComments","metadata","category","metaCategory","post","inversedBy","metaPost","posts","metaPosts","define","description","describe","beforeEach","it","ids","docs","docsById","_id","length","to","equal","Object","keys","result","$metadata","test","findOne","commentIds","categoryLinks","deep","_factory","useFactories"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Mongo } from 'meteor/mongo';\nimport { Factory } from 'meteor/dburles:factory';\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport generator from '../../factoriesHelpers';\n\nconst PostCollection = new Mongo.Collection('posts');\nconst CategoryCollection = new Mongo.Collection('categories');\nconst CommentCollection = new Mongo.Collection('comments');\n\nPostCollection.addLinks({\n  comments: {\n    type: '*',\n    collection: CommentCollection,\n    field: 'commentIds',\n    index: true,\n  },\n  metaComments: {\n    type: '*',\n    collection: CommentCollection,\n    metadata: true,\n  },\n  category: {\n    collection: CategoryCollection,\n    type: '1',\n  },\n  metaCategory: {\n    metadata: true,\n    collection: CategoryCollection,\n    field: 'categoryLinks',\n    type: '1',\n  },\n});\n\nCommentCollection.addLinks({\n  post: {\n    collection: PostCollection,\n    inversedBy: 'comments',\n  },\n  metaPost: {\n    collection: PostCollection,\n    inversedBy: 'metaComments',\n  },\n});\n\nCategoryCollection.addLinks({\n  posts: {\n    collection: PostCollection,\n    inversedBy: 'category',\n  },\n  metaPosts: {\n    collection: PostCollection,\n    inversedBy: 'metaCategory',\n  },\n});\n\nFactory.define('posts', PostCollection, { description: 'post' });\nFactory.define('comments', CommentCollection, { description: 'comment' });\nFactory.define('specialComment', CommentCollection, {\n  description: 'specialComment',\n});\nFactory.define('categories', CategoryCollection, { description: 'category' });\n\ndescribe('factoriesHelpers', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('generator', () => {\n    it('inserts a tree of objects', () => {\n      const { ids, docs, docsById } = generator({\n        posts: [\n          {\n            _id: 'post1',\n            metaComments: [{}, { _id: 'comment2' }],\n            comments: [{}],\n          },\n        ],\n      });\n\n      expect(ids.posts.length).to.equal(1);\n      expect(ids.comments.length).to.equal(3);\n      expect(docs.posts.length).to.equal(1);\n      expect(docs.comments.length).to.equal(3);\n      expect(Object.keys(docsById.posts).length).to.equal(1);\n      expect(Object.keys(docsById.comments).length).to.equal(3);\n    });\n\n    it('adds linked collections', () => {\n      const result = generator({\n        posts: [\n          {\n            _id: 'post1',\n            metaComments: [{ _id: 'comment1' }, {}],\n            comments: [{}],\n            metaCategory: [{ _id: 'category1', $metadata: { test: 'abc' } }],\n          },\n        ],\n      });\n\n      const post = PostCollection.findOne('post1');\n\n      expect(post.commentIds.length).to.equal(1);\n      expect(post.categoryLinks).to.deep.equal({\n        _id: 'category1',\n        test: 'abc',\n      });\n    });\n\n    it('reuses a docId if provided twice', () => {\n      const { ids } = generator({\n        comments: [{ post: { _id: 'post1' } }, { post: { _id: 'post1' } }],\n      });\n\n      expect(ids.posts.length).to.equal(1);\n      expect(ids.comments.length).to.equal(2);\n\n      const post = PostCollection.findOne('post1');\n\n      expect(post.commentIds.length).to.equal(2);\n    });\n\n    it('allows using arrays or objects', () => {\n      const { ids } = generator({\n        comments: [{}, {}],\n        posts: { _id: 'post1' },\n      });\n\n      expect(ids.posts.length).to.equal(1);\n      expect(ids.comments.length).to.equal(2);\n    });\n\n    it('uses factory overrides', () => {\n      const { docs } = generator({\n        posts: [\n          {\n            comments: [\n              { _id: 'comment1' },\n              { _id: 'comment2', _factory: 'specialComment' },\n            ],\n          },\n        ],\n      });\n\n      expect(docs.comments).to.deep.equal([\n        { _id: 'comment1', description: 'comment' },\n        { _id: 'comment2', description: 'specialComment' },\n      ]);\n    });\n\n    it('does not use factories', () => {\n      const { docs } = generator(\n        {\n          posts: [\n            {\n              comments: [{ _id: 'comment1' }, { _id: 'comment2' }],\n            },\n          ],\n        },\n        { useFactories: false },\n      );\n\n      expect(docs.comments).to.deep.equal([\n        { _id: 'comment1' },\n        { _id: 'comment2' },\n      ]);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/factories/test/server/factoriesHelpers.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/factories/test/server/factoriesHelpers.test.js"}},"code":"let Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 3);\nlet generator;\nmodule.link(\"../../factoriesHelpers\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 4);\nconst PostCollection = new Mongo.Collection('posts');\nconst CategoryCollection = new Mongo.Collection('categories');\nconst CommentCollection = new Mongo.Collection('comments');\nPostCollection.addLinks({\n  comments: {\n    type: '*',\n    collection: CommentCollection,\n    field: 'commentIds',\n    index: true\n  },\n  metaComments: {\n    type: '*',\n    collection: CommentCollection,\n    metadata: true\n  },\n  category: {\n    collection: CategoryCollection,\n    type: '1'\n  },\n  metaCategory: {\n    metadata: true,\n    collection: CategoryCollection,\n    field: 'categoryLinks',\n    type: '1'\n  }\n});\nCommentCollection.addLinks({\n  post: {\n    collection: PostCollection,\n    inversedBy: 'comments'\n  },\n  metaPost: {\n    collection: PostCollection,\n    inversedBy: 'metaComments'\n  }\n});\nCategoryCollection.addLinks({\n  posts: {\n    collection: PostCollection,\n    inversedBy: 'category'\n  },\n  metaPosts: {\n    collection: PostCollection,\n    inversedBy: 'metaCategory'\n  }\n});\nFactory.define('posts', PostCollection, {\n  description: 'post'\n});\nFactory.define('comments', CommentCollection, {\n  description: 'comment'\n});\nFactory.define('specialComment', CommentCollection, {\n  description: 'specialComment'\n});\nFactory.define('categories', CategoryCollection, {\n  description: 'category'\n});\ndescribe('factoriesHelpers', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('generator', () => {\n    it('inserts a tree of objects', () => {\n      const {\n        ids,\n        docs,\n        docsById\n      } = generator({\n        posts: [{\n          _id: 'post1',\n          metaComments: [{}, {\n            _id: 'comment2'\n          }],\n          comments: [{}]\n        }]\n      });\n      expect(ids.posts.length).to.equal(1);\n      expect(ids.comments.length).to.equal(3);\n      expect(docs.posts.length).to.equal(1);\n      expect(docs.comments.length).to.equal(3);\n      expect(Object.keys(docsById.posts).length).to.equal(1);\n      expect(Object.keys(docsById.comments).length).to.equal(3);\n    });\n    it('adds linked collections', () => {\n      const result = generator({\n        posts: [{\n          _id: 'post1',\n          metaComments: [{\n            _id: 'comment1'\n          }, {}],\n          comments: [{}],\n          metaCategory: [{\n            _id: 'category1',\n            $metadata: {\n              test: 'abc'\n            }\n          }]\n        }]\n      });\n      const post = PostCollection.findOne('post1');\n      expect(post.commentIds.length).to.equal(1);\n      expect(post.categoryLinks).to.deep.equal({\n        _id: 'category1',\n        test: 'abc'\n      });\n    });\n    it('reuses a docId if provided twice', () => {\n      const {\n        ids\n      } = generator({\n        comments: [{\n          post: {\n            _id: 'post1'\n          }\n        }, {\n          post: {\n            _id: 'post1'\n          }\n        }]\n      });\n      expect(ids.posts.length).to.equal(1);\n      expect(ids.comments.length).to.equal(2);\n      const post = PostCollection.findOne('post1');\n      expect(post.commentIds.length).to.equal(2);\n    });\n    it('allows using arrays or objects', () => {\n      const {\n        ids\n      } = generator({\n        comments: [{}, {}],\n        posts: {\n          _id: 'post1'\n        }\n      });\n      expect(ids.posts.length).to.equal(1);\n      expect(ids.comments.length).to.equal(2);\n    });\n    it('uses factory overrides', () => {\n      const {\n        docs\n      } = generator({\n        posts: [{\n          comments: [{\n            _id: 'comment1'\n          }, {\n            _id: 'comment2',\n            _factory: 'specialComment'\n          }]\n        }]\n      });\n      expect(docs.comments).to.deep.equal([{\n        _id: 'comment1',\n        description: 'comment'\n      }, {\n        _id: 'comment2',\n        description: 'specialComment'\n      }]);\n    });\n    it('does not use factories', () => {\n      const {\n        docs\n      } = generator({\n        posts: [{\n          comments: [{\n            _id: 'comment1'\n          }, {\n            _id: 'comment2'\n          }]\n        }]\n      }, {\n        useFactories: false\n      });\n      expect(docs.comments).to.deep.equal([{\n        _id: 'comment1'\n      }, {\n        _id: 'comment2'\n      }]);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/factories/test/server/factoriesHelpers.test.js"],"names":["PostCollection","Mongo","CategoryCollection","CommentCollection","comments","type","collection","field","index","metaComments","metadata","category","metaCategory","post","inversedBy","metaPost","posts","metaPosts","Factory","description","describe","beforeEach","resetDatabase","it","docsById","generator","_id","expect","ids","docs","Object","result","$metadata","test","_factory","useFactories"],"mappings":"AAAA,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,cAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,uBAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAQA,MAAMA,cAAc,GAAG,IAAIC,KAAK,CAAT,UAAA,CAAvB,OAAuB,CAAvB;AACA,MAAMC,kBAAkB,GAAG,IAAID,KAAK,CAAT,UAAA,CAA3B,YAA2B,CAA3B;AACA,MAAME,iBAAiB,GAAG,IAAIF,KAAK,CAAT,UAAA,CAA1B,UAA0B,CAA1B;AAEAD,cAAc,CAAdA,QAAAA,CAAwB;AACtBI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EADI,GAAA;AAERC,IAAAA,UAAU,EAFF,iBAAA;AAGRC,IAAAA,KAAK,EAHG,YAAA;AAIRC,IAAAA,KAAK,EAAE;AAJC,GADY;AAOtBC,EAAAA,YAAY,EAAE;AACZJ,IAAAA,IAAI,EADQ,GAAA;AAEZC,IAAAA,UAAU,EAFE,iBAAA;AAGZI,IAAAA,QAAQ,EAAE;AAHE,GAPQ;AAYtBC,EAAAA,QAAQ,EAAE;AACRL,IAAAA,UAAU,EADF,kBAAA;AAERD,IAAAA,IAAI,EAAE;AAFE,GAZY;AAgBtBO,EAAAA,YAAY,EAAE;AACZF,IAAAA,QAAQ,EADI,IAAA;AAEZJ,IAAAA,UAAU,EAFE,kBAAA;AAGZC,IAAAA,KAAK,EAHO,eAAA;AAIZF,IAAAA,IAAI,EAAE;AAJM;AAhBQ,CAAxBL;AAwBAG,iBAAiB,CAAjBA,QAAAA,CAA2B;AACzBU,EAAAA,IAAI,EAAE;AACJP,IAAAA,UAAU,EADN,cAAA;AAEJQ,IAAAA,UAAU,EAAE;AAFR,GADmB;AAKzBC,EAAAA,QAAQ,EAAE;AACRT,IAAAA,UAAU,EADF,cAAA;AAERQ,IAAAA,UAAU,EAAE;AAFJ;AALe,CAA3BX;AAWAD,kBAAkB,CAAlBA,QAAAA,CAA4B;AAC1Bc,EAAAA,KAAK,EAAE;AACLV,IAAAA,UAAU,EADL,cAAA;AAELQ,IAAAA,UAAU,EAAE;AAFP,GADmB;AAK1BG,EAAAA,SAAS,EAAE;AACTX,IAAAA,UAAU,EADD,cAAA;AAETQ,IAAAA,UAAU,EAAE;AAFH;AALe,CAA5BZ;AAWAgB,OAAO,CAAPA,MAAAA,CAAAA,OAAAA,EAAAA,cAAAA,EAAwC;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAAxCD;AACAA,OAAO,CAAPA,MAAAA,CAAAA,UAAAA,EAAAA,iBAAAA,EAA8C;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAA9CD;AACAA,OAAO,CAAPA,MAAAA,CAAAA,gBAAAA,EAAAA,iBAAAA,EAAoD;AAClDC,EAAAA,WAAW,EAAE;AADqC,CAApDD;AAGAA,OAAO,CAAPA,MAAAA,CAAAA,YAAAA,EAAAA,kBAAAA,EAAiD;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAAjDD;AAEAE,QAAQ,CAAA,kBAAA,EAAqB,MAAM;AACjCC,EAAAA,UAAU,CAAC,MAAM;AACfC,IAAAA,aAAa;AADfD,GAAU,CAAVA;AAIAD,EAAAA,QAAQ,CAAA,WAAA,EAAc,MAAM;AAC1BG,IAAAA,EAAE,CAAA,2BAAA,EAA8B,MAAM;AACpC,YAAM;AAAA,QAAA,GAAA;AAAA,QAAA,IAAA;AAAaC,QAAAA;AAAb,UAA0BC,SAAS,CAAC;AACxCT,QAAAA,KAAK,EAAE,CACL;AACEU,UAAAA,GAAG,EADL,OAAA;AAEEjB,UAAAA,YAAY,EAAE,CAAA,EAAA,EAAK;AAAEiB,YAAAA,GAAG,EAAE;AAAP,WAAL,CAFhB;AAGEtB,UAAAA,QAAQ,EAAE,CAAA,EAAA;AAHZ,SADK;AADiC,OAAD,CAAzC;AAUAuB,MAAAA,MAAM,CAACC,GAAG,CAAHA,KAAAA,CAAPD,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACC,GAAG,CAAHA,QAAAA,CAAPD,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACE,IAAI,CAAJA,KAAAA,CAAPF,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACE,IAAI,CAAJA,QAAAA,CAAPF,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACG,MAAM,CAANA,IAAAA,CAAYN,QAAQ,CAApBM,KAAAA,EAAPH,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACG,MAAM,CAANA,IAAAA,CAAYN,QAAQ,CAApBM,QAAAA,EAAPH,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAhBFJ,KAAE,CAAFA;AAmBAA,IAAAA,EAAE,CAAA,yBAAA,EAA4B,MAAM;AAClC,YAAMQ,MAAM,GAAGN,SAAS,CAAC;AACvBT,QAAAA,KAAK,EAAE,CACL;AACEU,UAAAA,GAAG,EADL,OAAA;AAEEjB,UAAAA,YAAY,EAAE,CAAC;AAAEiB,YAAAA,GAAG,EAAE;AAAP,WAAD,EAFhB,EAEgB,CAFhB;AAGEtB,UAAAA,QAAQ,EAAE,CAHZ,EAGY,CAHZ;AAIEQ,UAAAA,YAAY,EAAE,CAAC;AAAEc,YAAAA,GAAG,EAAL,WAAA;AAAoBM,YAAAA,SAAS,EAAE;AAAEC,cAAAA,IAAI,EAAE;AAAR;AAA/B,WAAD;AAJhB,SADK;AADgB,OAAD,CAAxB;AAWA,YAAMpB,IAAI,GAAGb,cAAc,CAAdA,OAAAA,CAAb,OAAaA,CAAb;AAEA2B,MAAAA,MAAM,CAACd,IAAI,CAAJA,UAAAA,CAAPc,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACd,IAAI,CAAXc,aAAM,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAyC;AACvCD,QAAAA,GAAG,EADoC,WAAA;AAEvCO,QAAAA,IAAI,EAAE;AAFiC,OAAzCN;AAfFJ,KAAE,CAAFA;AAqBAA,IAAAA,EAAE,CAAA,kCAAA,EAAqC,MAAM;AAC3C,YAAM;AAAEK,QAAAA;AAAF,UAAUH,SAAS,CAAC;AACxBrB,QAAAA,QAAQ,EAAE,CAAC;AAAES,UAAAA,IAAI,EAAE;AAAEa,YAAAA,GAAG,EAAE;AAAP;AAAR,SAAD,EAA6B;AAAEb,UAAAA,IAAI,EAAE;AAAEa,YAAAA,GAAG,EAAE;AAAP;AAAR,SAA7B;AADc,OAAD,CAAzB;AAIAC,MAAAA,MAAM,CAACC,GAAG,CAAHA,KAAAA,CAAPD,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACC,GAAG,CAAHA,QAAAA,CAAPD,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAEA,YAAMd,IAAI,GAAGb,cAAc,CAAdA,OAAAA,CAAb,OAAaA,CAAb;AAEA2B,MAAAA,MAAM,CAACd,IAAI,CAAJA,UAAAA,CAAPc,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAVFJ,KAAE,CAAFA;AAaAA,IAAAA,EAAE,CAAA,gCAAA,EAAmC,MAAM;AACzC,YAAM;AAAEK,QAAAA;AAAF,UAAUH,SAAS,CAAC;AACxBrB,QAAAA,QAAQ,EAAE,CAAA,EAAA,EADc,EACd,CADc;AAExBY,QAAAA,KAAK,EAAE;AAAEU,UAAAA,GAAG,EAAE;AAAP;AAFiB,OAAD,CAAzB;AAKAC,MAAAA,MAAM,CAACC,GAAG,CAAHA,KAAAA,CAAPD,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,MAAAA,MAAM,CAACC,GAAG,CAAHA,QAAAA,CAAPD,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAPFJ,KAAE,CAAFA;AAUAA,IAAAA,EAAE,CAAA,wBAAA,EAA2B,MAAM;AACjC,YAAM;AAAEM,QAAAA;AAAF,UAAWJ,SAAS,CAAC;AACzBT,QAAAA,KAAK,EAAE,CACL;AACEZ,UAAAA,QAAQ,EAAE,CACR;AAAEsB,YAAAA,GAAG,EAAE;AAAP,WADQ,EAER;AAAEA,YAAAA,GAAG,EAAL,UAAA;AAAmBQ,YAAAA,QAAQ,EAAE;AAA7B,WAFQ;AADZ,SADK;AADkB,OAAD,CAA1B;AAWAP,MAAAA,MAAM,CAACE,IAAI,CAAXF,QAAM,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAoC,CAClC;AAAED,QAAAA,GAAG,EAAL,UAAA;AAAmBP,QAAAA,WAAW,EAAE;AAAhC,OADkC,EAElC;AAAEO,QAAAA,GAAG,EAAL,UAAA;AAAmBP,QAAAA,WAAW,EAAE;AAAhC,OAFkC,CAApCQ;AAZFJ,KAAE,CAAFA;AAkBAA,IAAAA,EAAE,CAAA,wBAAA,EAA2B,MAAM;AACjC,YAAM;AAAEM,QAAAA;AAAF,UAAWJ,SAAS,CACxB;AACET,QAAAA,KAAK,EAAE,CACL;AACEZ,UAAAA,QAAQ,EAAE,CAAC;AAAEsB,YAAAA,GAAG,EAAE;AAAP,WAAD,EAAsB;AAAEA,YAAAA,GAAG,EAAE;AAAP,WAAtB;AADZ,SADK;AADT,OADwB,EAQxB;AAAES,QAAAA,YAAY,EAAE;AAAhB,OARwB,CAA1B;AAWAR,MAAAA,MAAM,CAACE,IAAI,CAAXF,QAAM,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAoC,CAClC;AAAED,QAAAA,GAAG,EAAE;AAAP,OADkC,EAElC;AAAEA,QAAAA,GAAG,EAAE;AAAP,OAFkC,CAApCC;AAZFJ,KAAE,CAAFA;AAlFFH,GAAQ,CAARA;AALFA,CAAQ,CAARA","sourcesContent":["/* eslint-env mocha */\nimport { Mongo } from 'meteor/mongo';\nimport { Factory } from 'meteor/dburles:factory';\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport generator from '../../factoriesHelpers';\n\nconst PostCollection = new Mongo.Collection('posts');\nconst CategoryCollection = new Mongo.Collection('categories');\nconst CommentCollection = new Mongo.Collection('comments');\n\nPostCollection.addLinks({\n  comments: {\n    type: '*',\n    collection: CommentCollection,\n    field: 'commentIds',\n    index: true,\n  },\n  metaComments: {\n    type: '*',\n    collection: CommentCollection,\n    metadata: true,\n  },\n  category: {\n    collection: CategoryCollection,\n    type: '1',\n  },\n  metaCategory: {\n    metadata: true,\n    collection: CategoryCollection,\n    field: 'categoryLinks',\n    type: '1',\n  },\n});\n\nCommentCollection.addLinks({\n  post: {\n    collection: PostCollection,\n    inversedBy: 'comments',\n  },\n  metaPost: {\n    collection: PostCollection,\n    inversedBy: 'metaComments',\n  },\n});\n\nCategoryCollection.addLinks({\n  posts: {\n    collection: PostCollection,\n    inversedBy: 'category',\n  },\n  metaPosts: {\n    collection: PostCollection,\n    inversedBy: 'metaCategory',\n  },\n});\n\nFactory.define('posts', PostCollection, { description: 'post' });\nFactory.define('comments', CommentCollection, { description: 'comment' });\nFactory.define('specialComment', CommentCollection, {\n  description: 'specialComment',\n});\nFactory.define('categories', CategoryCollection, { description: 'category' });\n\ndescribe('factoriesHelpers', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('generator', () => {\n    it('inserts a tree of objects', () => {\n      const { ids, docs, docsById } = generator({\n        posts: [\n          {\n            _id: 'post1',\n            metaComments: [{}, { _id: 'comment2' }],\n            comments: [{}],\n          },\n        ],\n      });\n\n      expect(ids.posts.length).to.equal(1);\n      expect(ids.comments.length).to.equal(3);\n      expect(docs.posts.length).to.equal(1);\n      expect(docs.comments.length).to.equal(3);\n      expect(Object.keys(docsById.posts).length).to.equal(1);\n      expect(Object.keys(docsById.comments).length).to.equal(3);\n    });\n\n    it('adds linked collections', () => {\n      const result = generator({\n        posts: [\n          {\n            _id: 'post1',\n            metaComments: [{ _id: 'comment1' }, {}],\n            comments: [{}],\n            metaCategory: [{ _id: 'category1', $metadata: { test: 'abc' } }],\n          },\n        ],\n      });\n\n      const post = PostCollection.findOne('post1');\n\n      expect(post.commentIds.length).to.equal(1);\n      expect(post.categoryLinks).to.deep.equal({\n        _id: 'category1',\n        test: 'abc',\n      });\n    });\n\n    it('reuses a docId if provided twice', () => {\n      const { ids } = generator({\n        comments: [{ post: { _id: 'post1' } }, { post: { _id: 'post1' } }],\n      });\n\n      expect(ids.posts.length).to.equal(1);\n      expect(ids.comments.length).to.equal(2);\n\n      const post = PostCollection.findOne('post1');\n\n      expect(post.commentIds.length).to.equal(2);\n    });\n\n    it('allows using arrays or objects', () => {\n      const { ids } = generator({\n        comments: [{}, {}],\n        posts: { _id: 'post1' },\n      });\n\n      expect(ids.posts.length).to.equal(1);\n      expect(ids.comments.length).to.equal(2);\n    });\n\n    it('uses factory overrides', () => {\n      const { docs } = generator({\n        posts: [\n          {\n            comments: [\n              { _id: 'comment1' },\n              { _id: 'comment2', _factory: 'specialComment' },\n            ],\n          },\n        ],\n      });\n\n      expect(docs.comments).to.deep.equal([\n        { _id: 'comment1', description: 'comment' },\n        { _id: 'comment2', description: 'specialComment' },\n      ]);\n    });\n\n    it('does not use factories', () => {\n      const { docs } = generator(\n        {\n          posts: [\n            {\n              comments: [{ _id: 'comment1' }, { _id: 'comment2' }],\n            },\n          ],\n        },\n        { useFactories: false },\n      );\n\n      expect(docs.comments).to.deep.equal([\n        { _id: 'comment1' },\n        { _id: 'comment2' },\n      ]);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"b391e7d49522a371d71af5c03e382bea17b55a56"}

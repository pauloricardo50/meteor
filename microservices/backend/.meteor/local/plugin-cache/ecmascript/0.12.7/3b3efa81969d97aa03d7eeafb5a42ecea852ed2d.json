{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/phoneFormatting/index.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/phoneFormatting/index.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/phoneFormatting/index.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/phoneFormatting/index.js"],"names":["parsePhoneNumberFromString","formatPhoneNumber","string","phoneNumber","intl","formatInternational","modifyDoc","doc","fieldName","currentValue","customFunc","Array","isArray","map","formatNumbersHook","collection","before","update","userId","fieldNames","modifier","includes","updatedValue","$set","insert","insertedValue"],"mappings":"AAAA,SAASA,0BAAT,QAA2C,uBAA3C;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAY;AAC3C,QAAMC,WAAW,GAAGH,0BAA0B,CAACE,MAAD,EAAS,IAAT,CAA9C;;AAEA,MAAI,CAACC,WAAL,EAAkB;AAChB;AACA,WAAOD,MAAP;AACD;;AAED,QAAME,IAAI,GAAGD,WAAW,CAACE,mBAAZ,EAAb;AAEA,SAAOD,IAAP;AACD,CAXM;;AAaP,MAAME,SAAS,GAAG,CAACC,GAAD,EAAMC,SAAN,EAAiBC,YAAjB,EAA+BC,UAA/B,KAA8C;AAC9D,MAAIA,UAAJ,EAAgB;AACdH,IAAAA,GAAG,CAACC,SAAD,CAAH,GAAiBE,UAAU,CAACD,YAAD,CAA3B;AACD,GAFD,MAEO,IAAIE,KAAK,CAACC,OAAN,CAAcH,YAAd,CAAJ,EAAiC;AACtCF,IAAAA,GAAG,CAACC,SAAD,CAAH,GAAiBC,YAAY,CAACI,GAAb,CAAiBZ,iBAAjB,CAAjB;AACD,GAFM,MAEA;AACLM,IAAAA,GAAG,CAACC,SAAD,CAAH,GAAiBP,iBAAiB,CAACQ,YAAD,CAAlC;AACD;AACF,CARD;;AAUA,MAAMK,iBAAiB,GAAG,CAACC,UAAD,EAAaP,SAAb,EAAwBE,UAAxB,KAAuC;AAC/DK,EAAAA,UAAU,CAACC,MAAX,CAAkBC,MAAlB,CAAyB,CAACC,MAAD,EAASX,GAAT,EAAcY,UAAd,EAA0BC,QAA1B,KAAuC;AAC9D,QAAID,UAAU,CAACE,QAAX,CAAoBb,SAApB,CAAJ,EAAoC;AAClC,YAAMc,YAAY,GAAGF,QAAQ,CAACG,IAAT,CAAcf,SAAd,CAArB;AACAF,MAAAA,SAAS,CAACc,QAAQ,CAACG,IAAV,EAAgBf,SAAhB,EAA2Bc,YAA3B,EAAyCZ,UAAzC,CAAT;AACD;AACF,GALD;AAOAK,EAAAA,UAAU,CAACC,MAAX,CAAkBQ,MAAlB,CAAyB,CAACN,MAAD,EAASX,GAAT,KAAiB;AACxC,UAAMkB,aAAa,GAAGlB,GAAG,CAACC,SAAD,CAAzB;;AACA,QAAIiB,aAAJ,EAAmB;AACjBnB,MAAAA,SAAS,CAACC,GAAD,EAAMC,SAAN,EAAiBiB,aAAjB,EAAgCf,UAAhC,CAAT;AACD;AACF,GALD;AAMD,CAdD;;AAgBA,eAAeI,iBAAf","sourcesContent":["import { parsePhoneNumberFromString } from 'libphonenumber-js/max';\n\nexport const formatPhoneNumber = (string) => {\n  const phoneNumber = parsePhoneNumberFromString(string, 'CH');\n\n  if (!phoneNumber) {\n    // Couldn't parse a phone number from the string\n    return string;\n  }\n\n  const intl = phoneNumber.formatInternational();\n\n  return intl;\n};\n\nconst modifyDoc = (doc, fieldName, currentValue, customFunc) => {\n  if (customFunc) {\n    doc[fieldName] = customFunc(currentValue);\n  } else if (Array.isArray(currentValue)) {\n    doc[fieldName] = currentValue.map(formatPhoneNumber);\n  } else {\n    doc[fieldName] = formatPhoneNumber(currentValue);\n  }\n};\n\nconst formatNumbersHook = (collection, fieldName, customFunc) => {\n  collection.before.update((userId, doc, fieldNames, modifier) => {\n    if (fieldNames.includes(fieldName)) {\n      const updatedValue = modifier.$set[fieldName];\n      modifyDoc(modifier.$set, fieldName, updatedValue, customFunc);\n    }\n  });\n\n  collection.before.insert((userId, doc) => {\n    const insertedValue = doc[fieldName];\n    if (insertedValue) {\n      modifyDoc(doc, fieldName, insertedValue, customFunc);\n    }\n  });\n};\n\nexport default formatNumbersHook;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/phoneFormatting/index.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/phoneFormatting/index.js"}},"code":"module.export({\n  formatPhoneNumber: () => formatPhoneNumber\n});\nlet parsePhoneNumberFromString;\nmodule.link(\"libphonenumber-js/max\", {\n  parsePhoneNumberFromString(v) {\n    parsePhoneNumberFromString = v;\n  }\n\n}, 0);\n\nconst formatPhoneNumber = string => {\n  const phoneNumber = parsePhoneNumberFromString(string, 'CH');\n\n  if (!phoneNumber) {\n    // Couldn't parse a phone number from the string\n    return string;\n  }\n\n  const intl = phoneNumber.formatInternational();\n  return intl;\n};\n\nconst modifyDoc = (doc, fieldName, currentValue, customFunc) => {\n  if (customFunc) {\n    doc[fieldName] = customFunc(currentValue);\n  } else if (Array.isArray(currentValue)) {\n    doc[fieldName] = currentValue.map(formatPhoneNumber);\n  } else {\n    doc[fieldName] = formatPhoneNumber(currentValue);\n  }\n};\n\nconst formatNumbersHook = (collection, fieldName, customFunc) => {\n  collection.before.update((userId, doc, fieldNames, modifier) => {\n    if (fieldNames.includes(fieldName)) {\n      const updatedValue = modifier.$set[fieldName];\n      modifyDoc(modifier.$set, fieldName, updatedValue, customFunc);\n    }\n  });\n  collection.before.insert((userId, doc) => {\n    const insertedValue = doc[fieldName];\n\n    if (insertedValue) {\n      modifyDoc(doc, fieldName, insertedValue, customFunc);\n    }\n  });\n};\n\nmodule.exportDefault(formatNumbersHook);","map":{"version":3,"sources":["imports/core/utils/phoneFormatting/index.js"],"names":["parsePhoneNumberFromString","formatPhoneNumber","string","phoneNumber","intl","modifyDoc","doc","customFunc","Array","currentValue","formatNumbersHook","collection","fieldNames","updatedValue","modifier","insertedValue"],"mappings":"AAAA,MAAA,CAAA,MAAA,CAASA;AAAAA,EAAAA,iBAAAA,EAAT,MAAA;AAASA,CAAT;AAA2C,IAA3C,0BAA2C;AAA3C,MAAA,CAAA,IAAA,CAAA,uBAAA,EAAA;AAAA,EAAA,0BAAA,CAAA,CAAA,EAAA;AAAA,IAAA,0BAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAEO,MAAMC,iBAAiB,GAAIC,MAAD,IAAY;AAC3C,QAAMC,WAAW,GAAGH,0BAA0B,CAAA,MAAA,EAA9C,IAA8C,CAA9C;;AAEA,MAAI,CAAJ,WAAA,EAAkB;AAChB;AACA,WAAA,MAAA;AACD;;AAED,QAAMI,IAAI,GAAGD,WAAW,CAAxB,mBAAaA,EAAb;AAEA,SAAA,IAAA;AAVK,CAAA;;AAaP,MAAME,SAAS,GAAG,CAAA,GAAA,EAAA,SAAA,EAAA,YAAA,EAAA,UAAA,KAA8C;AAC9D,MAAA,UAAA,EAAgB;AACdC,IAAAA,GAAG,CAAHA,SAAG,CAAHA,GAAiBC,UAAU,CAA3BD,YAA2B,CAA3BA;AADF,GAAA,MAEO,IAAIE,KAAK,CAALA,OAAAA,CAAJ,YAAIA,CAAJ,EAAiC;AACtCF,IAAAA,GAAG,CAAHA,SAAG,CAAHA,GAAiBG,YAAY,CAAZA,GAAAA,CAAjBH,iBAAiBG,CAAjBH;AADK,GAAA,MAEA;AACLA,IAAAA,GAAG,CAAHA,SAAG,CAAHA,GAAiBL,iBAAiB,CAAlCK,YAAkC,CAAlCA;AACD;AAPH,CAAA;;AAUA,MAAMI,iBAAiB,GAAG,CAAA,UAAA,EAAA,SAAA,EAAA,UAAA,KAAuC;AAC/DC,EAAAA,UAAU,CAAVA,MAAAA,CAAAA,MAAAA,CAAyB,CAAA,MAAA,EAAA,GAAA,EAAA,UAAA,EAAA,QAAA,KAAuC;AAC9D,QAAIC,UAAU,CAAVA,QAAAA,CAAJ,SAAIA,CAAJ,EAAoC;AAClC,YAAMC,YAAY,GAAGC,QAAQ,CAARA,IAAAA,CAArB,SAAqBA,CAArB;AACAT,MAAAA,SAAS,CAACS,QAAQ,CAAT,IAAA,EAAA,SAAA,EAAA,YAAA,EAATT,UAAS,CAATA;AACD;AAJHM,GAAAA;AAOAA,EAAAA,UAAU,CAAVA,MAAAA,CAAAA,MAAAA,CAAyB,CAAA,MAAA,EAAA,GAAA,KAAiB;AACxC,UAAMI,aAAa,GAAGT,GAAG,CAAzB,SAAyB,CAAzB;;AACA,QAAA,aAAA,EAAmB;AACjBD,MAAAA,SAAS,CAAA,GAAA,EAAA,SAAA,EAAA,aAAA,EAATA,UAAS,CAATA;AACD;AAJHM,GAAAA;AARF,CAAA;;AAzBA,MAAA,CAAA,aAAA,CAyCA,iBAzCA","sourcesContent":["import { parsePhoneNumberFromString } from 'libphonenumber-js/max';\n\nexport const formatPhoneNumber = (string) => {\n  const phoneNumber = parsePhoneNumberFromString(string, 'CH');\n\n  if (!phoneNumber) {\n    // Couldn't parse a phone number from the string\n    return string;\n  }\n\n  const intl = phoneNumber.formatInternational();\n\n  return intl;\n};\n\nconst modifyDoc = (doc, fieldName, currentValue, customFunc) => {\n  if (customFunc) {\n    doc[fieldName] = customFunc(currentValue);\n  } else if (Array.isArray(currentValue)) {\n    doc[fieldName] = currentValue.map(formatPhoneNumber);\n  } else {\n    doc[fieldName] = formatPhoneNumber(currentValue);\n  }\n};\n\nconst formatNumbersHook = (collection, fieldName, customFunc) => {\n  collection.before.update((userId, doc, fieldNames, modifier) => {\n    if (fieldNames.includes(fieldName)) {\n      const updatedValue = modifier.$set[fieldName];\n      modifyDoc(modifier.$set, fieldName, updatedValue, customFunc);\n    }\n  });\n\n  collection.before.insert((userId, doc) => {\n    const insertedValue = doc[fieldName];\n    if (insertedValue) {\n      modifyDoc(doc, fieldName, insertedValue, customFunc);\n    }\n  });\n};\n\nexport default formatNumbersHook;\n"]},"sourceType":"script","hash":"3b3efa81969d97aa03d7eeafb5a42ecea852ed2d"}

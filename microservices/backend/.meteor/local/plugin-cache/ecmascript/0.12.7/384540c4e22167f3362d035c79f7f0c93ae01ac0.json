{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/server/getClientUrl.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/utils/server/getClientUrl.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/server/getClientUrl.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/server/getClientUrl.js"],"names":["Meteor","getFromFiber","storeOnFiber","MICROSERVICE","CLIENT_URL","HOST","getMicroserviceFromHost","host","subdomains","settings","public","result","Object","keys","some","microservice","microserviceUrl","includes","getClientHost","getClientMicroservice","getClientUrl","setClientUrl","href","currentHost","currentUrl","currentMicroservice","setClientMicroservice"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AAEA,SAASC,YAAT,EAAuBC,YAAvB;AAEA,MAAMC,YAAY,GAAG,qBAArB;AACA,MAAMC,UAAU,GAAG,cAAnB;AACA,MAAMC,IAAI,GAAG,eAAb;;AAEA,MAAMC,uBAAuB,GAAIC,IAAD,IAAU;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAiBR,MAAM,CAACS,QAAP,CAAgBC,MAAvC,CADwC,CAExC;;AACA,MAAIC,MAAM,GAAG,KAAb;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYL,UAAZ,EAAwBM,IAAxB,CAA8BC,YAAD,IAAkB;AAC7C,UAAMC,eAAe,GAAGR,UAAU,CAACO,YAAD,CAAlC;;AAEA,QAAIC,eAAe,CAACC,QAAhB,CAAyBV,IAAzB,CAAJ,EAAoC;AAClCI,MAAAA,MAAM,GAAGI,YAAT;AACA,aAAO,IAAP;AACD;AACF,GAPD;AASA,SAAOJ,MAAP;AACD,CAfD;;AAiBA,OAAO,MAAMO,aAAa,GAAG,MAAMjB,YAAY,CAACI,IAAD,CAAxC;AACP,OAAO,MAAMc,qBAAqB,GAAG,MAAMlB,YAAY,CAACE,YAAD,CAAhD;AACP,OAAO,MAAMiB,YAAY,GAAG,MAAMnB,YAAY,CAACG,UAAD,CAAvC;AAEP,OAAO,MAAMiB,YAAY,GAAG,CAAC;AAAEd,EAAAA,IAAF;AAAQe,EAAAA;AAAR,CAAD,KAAoB;AAC9C,QAAMC,WAAW,GAAGL,aAAa,EAAjC;AACA,QAAMM,UAAU,GAAGJ,YAAY,EAA/B;AACA,QAAMK,mBAAmB,GAAGN,qBAAqB,EAAjD;;AAEA,MAAI,CAACI,WAAL,EAAkB;AAChBrB,IAAAA,YAAY,CAACG,IAAD,EAAOE,IAAP,CAAZ;AACD;;AAED,MAAI,CAACiB,UAAL,EAAiB;AACftB,IAAAA,YAAY,CAACE,UAAD,EAAakB,IAAb,CAAZ;AACD;;AAED,MAAI,CAACG,mBAAL,EAA0B;AACxB,UAAMV,YAAY,GAAGT,uBAAuB,CAACC,IAAD,CAA5C;AACAL,IAAAA,YAAY,CAACC,YAAD,EAAeY,YAAf,CAAZ;AACD;AACF,CAjBM;AAmBP,OAAO,MAAMW,qBAAqB,GAAIX,YAAD,IAAkB;AACrD,QAAMU,mBAAmB,GAAGN,qBAAqB,EAAjD;;AACA,MAAI,CAACM,mBAAL,EAA0B;AACxBvB,IAAAA,YAAY,CAACC,YAAD,EAAeY,YAAf,CAAZ;AACD;AACF,CALM","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { getFromFiber, storeOnFiber } from './fiberStorage';\n\nconst MICROSERVICE = '__MICROSERVICE_NAME';\nconst CLIENT_URL = '__CLIENT_URL';\nconst HOST = '__CLIENT_HOST';\n\nconst getMicroserviceFromHost = (host) => {\n  const { subdomains } = Meteor.settings.public;\n  // In case the subdomain is missing, assume it is e-potek.ch, i.e. www\n  let result = 'www';\n\n  Object.keys(subdomains).some((microservice) => {\n    const microserviceUrl = subdomains[microservice];\n\n    if (microserviceUrl.includes(host)) {\n      result = microservice;\n      return true;\n    }\n  });\n\n  return result;\n};\n\nexport const getClientHost = () => getFromFiber(HOST);\nexport const getClientMicroservice = () => getFromFiber(MICROSERVICE);\nexport const getClientUrl = () => getFromFiber(CLIENT_URL);\n\nexport const setClientUrl = ({ host, href }) => {\n  const currentHost = getClientHost();\n  const currentUrl = getClientUrl();\n  const currentMicroservice = getClientMicroservice();\n\n  if (!currentHost) {\n    storeOnFiber(HOST, host);\n  }\n\n  if (!currentUrl) {\n    storeOnFiber(CLIENT_URL, href);\n  }\n\n  if (!currentMicroservice) {\n    const microservice = getMicroserviceFromHost(host);\n    storeOnFiber(MICROSERVICE, microservice);\n  }\n};\n\nexport const setClientMicroservice = (microservice) => {\n  const currentMicroservice = getClientMicroservice();\n  if (!currentMicroservice) {\n    storeOnFiber(MICROSERVICE, microservice);\n  }\n};\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/server/getClientUrl.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/server/getClientUrl.js"}},"code":"module.export({\n  getClientHost: () => getClientHost,\n  getClientMicroservice: () => getClientMicroservice,\n  getClientUrl: () => getClientUrl,\n  setClientUrl: () => setClientUrl,\n  setClientMicroservice: () => setClientMicroservice\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet getFromFiber, storeOnFiber;\nmodule.link(\"./fiberStorage\", {\n  getFromFiber(v) {\n    getFromFiber = v;\n  },\n\n  storeOnFiber(v) {\n    storeOnFiber = v;\n  }\n\n}, 1);\nconst MICROSERVICE = '__MICROSERVICE_NAME';\nconst CLIENT_URL = '__CLIENT_URL';\nconst HOST = '__CLIENT_HOST';\n\nconst getMicroserviceFromHost = host => {\n  const {\n    subdomains\n  } = Meteor.settings.public; // In case the subdomain is missing, assume it is e-potek.ch, i.e. www\n\n  let result = 'www';\n  Object.keys(subdomains).some(microservice => {\n    const microserviceUrl = subdomains[microservice];\n\n    if (microserviceUrl.includes(host)) {\n      result = microservice;\n      return true;\n    }\n  });\n  return result;\n};\n\nconst getClientHost = () => getFromFiber(HOST);\n\nconst getClientMicroservice = () => getFromFiber(MICROSERVICE);\n\nconst getClientUrl = () => getFromFiber(CLIENT_URL);\n\nconst setClientUrl = ({\n  host,\n  href\n}) => {\n  const currentHost = getClientHost();\n  const currentUrl = getClientUrl();\n  const currentMicroservice = getClientMicroservice();\n\n  if (!currentHost) {\n    storeOnFiber(HOST, host);\n  }\n\n  if (!currentUrl) {\n    storeOnFiber(CLIENT_URL, href);\n  }\n\n  if (!currentMicroservice) {\n    const microservice = getMicroserviceFromHost(host);\n    storeOnFiber(MICROSERVICE, microservice);\n  }\n};\n\nconst setClientMicroservice = microservice => {\n  const currentMicroservice = getClientMicroservice();\n\n  if (!currentMicroservice) {\n    storeOnFiber(MICROSERVICE, microservice);\n  }\n};","map":{"version":3,"sources":["imports/core/utils/server/getClientUrl.js"],"names":["Meteor","MICROSERVICE","CLIENT_URL","HOST","getMicroserviceFromHost","host","subdomains","result","Object","microservice","microserviceUrl","getClientHost","getFromFiber","getClientMicroservice","getClientUrl","setClientUrl","href","currentHost","currentUrl","currentMicroservice","storeOnFiber","setClientMicroservice"],"mappings":"AAAA,MAAA,CAAA,MAAA,CAASA;AAAT,EAAA,aAAuB,EAAA,MAAvB,aAASA;AAAT,EAAA,qBAAA,EAAA,MAAA,qBAASA;AAAT,EAAA,YAAA,EAAA,MAAA,YAASA;AAAT,EAAA,YAAA,EAAA,MAAA,YAASA;AAAT,EAAA,qBAAA,EAAA,MAAA;AAASA,CAAT;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,YAAA,EAAA,YAAA;AAAA,MAAA,CAAA,IAAA,CAAA,gBAAA,EAAA;AAAA,EAAA,YAAA,CAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,YAAA,CAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAIA,MAAMC,YAAY,GAAlB,qBAAA;AACA,MAAMC,UAAU,GAAhB,cAAA;AACA,MAAMC,IAAI,GAAV,eAAA;;AAEA,MAAMC,uBAAuB,GAAIC,IAAD,IAAU;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAiBN,MAAM,CAANA,QAAAA,CADiB,MACxC,CADwC,CAExC;;AACA,MAAIO,MAAM,GAAV,KAAA;AAEAC,EAAAA,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAAA,IAAAA,CAA8BC,YAAD,IAAkB;AAC7C,UAAMC,eAAe,GAAGJ,UAAU,CAAlC,YAAkC,CAAlC;;AAEA,QAAII,eAAe,CAAfA,QAAAA,CAAJ,IAAIA,CAAJ,EAAoC;AAClCH,MAAAA,MAAM,GAANA,YAAAA;AACA,aAAA,IAAA;AACD;AANHC,GAAAA;AASA,SAAA,MAAA;AAdF,CAAA;;AAiBO,MAAMG,aAAa,GAAG,MAAMC,YAAY,CAAxC,IAAwC,CAAxC;;AACA,MAAMC,qBAAqB,GAAG,MAAMD,YAAY,CAAhD,YAAgD,CAAhD;;AACA,MAAME,YAAY,GAAG,MAAMF,YAAY,CAAvC,UAAuC,CAAvC;;AAEA,MAAMG,YAAY,GAAG,CAAC;AAAA,EAAA,IAAA;AAAQC,EAAAA;AAAR,CAAD,KAAoB;AAC9C,QAAMC,WAAW,GAAGN,aAApB,EAAA;AACA,QAAMO,UAAU,GAAGJ,YAAnB,EAAA;AACA,QAAMK,mBAAmB,GAAGN,qBAA5B,EAAA;;AAEA,MAAI,CAAJ,WAAA,EAAkB;AAChBO,IAAAA,YAAY,CAAA,IAAA,EAAZA,IAAY,CAAZA;AACD;;AAED,MAAI,CAAJ,UAAA,EAAiB;AACfA,IAAAA,YAAY,CAAA,UAAA,EAAZA,IAAY,CAAZA;AACD;;AAED,MAAI,CAAJ,mBAAA,EAA0B;AACxB,UAAMX,YAAY,GAAGL,uBAAuB,CAA5C,IAA4C,CAA5C;AACAgB,IAAAA,YAAY,CAAA,YAAA,EAAZA,YAAY,CAAZA;AACD;AAhBI,CAAA;;AAmBA,MAAMC,qBAAqB,GAAIZ,YAAD,IAAkB;AACrD,QAAMU,mBAAmB,GAAGN,qBAA5B,EAAA;;AACA,MAAI,CAAJ,mBAAA,EAA0B;AACxBO,IAAAA,YAAY,CAAA,YAAA,EAAZA,YAAY,CAAZA;AACD;AAJI,CAAA","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { getFromFiber, storeOnFiber } from './fiberStorage';\n\nconst MICROSERVICE = '__MICROSERVICE_NAME';\nconst CLIENT_URL = '__CLIENT_URL';\nconst HOST = '__CLIENT_HOST';\n\nconst getMicroserviceFromHost = (host) => {\n  const { subdomains } = Meteor.settings.public;\n  // In case the subdomain is missing, assume it is e-potek.ch, i.e. www\n  let result = 'www';\n\n  Object.keys(subdomains).some((microservice) => {\n    const microserviceUrl = subdomains[microservice];\n\n    if (microserviceUrl.includes(host)) {\n      result = microservice;\n      return true;\n    }\n  });\n\n  return result;\n};\n\nexport const getClientHost = () => getFromFiber(HOST);\nexport const getClientMicroservice = () => getFromFiber(MICROSERVICE);\nexport const getClientUrl = () => getFromFiber(CLIENT_URL);\n\nexport const setClientUrl = ({ host, href }) => {\n  const currentHost = getClientHost();\n  const currentUrl = getClientUrl();\n  const currentMicroservice = getClientMicroservice();\n\n  if (!currentHost) {\n    storeOnFiber(HOST, host);\n  }\n\n  if (!currentUrl) {\n    storeOnFiber(CLIENT_URL, href);\n  }\n\n  if (!currentMicroservice) {\n    const microservice = getMicroserviceFromHost(host);\n    storeOnFiber(MICROSERVICE, microservice);\n  }\n};\n\nexport const setClientMicroservice = (microservice) => {\n  const currentMicroservice = getClientMicroservice();\n  if (!currentMicroservice) {\n    storeOnFiber(MICROSERVICE, microservice);\n  }\n};\n"]},"sourceType":"script","hash":"384540c4e22167f3362d035c79f7f0c93ae01ac0"}

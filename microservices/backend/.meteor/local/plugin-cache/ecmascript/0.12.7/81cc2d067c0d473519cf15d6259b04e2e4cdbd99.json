{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/getProperty.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/getProperty.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/getProperty.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/getProperty.test.js"],"names":["Meteor","resetDatabase","expect","appendFileSync","Random","PROPERTY_DOCUMENTS","OBJECT_STORAGE_PATH","makeFileUploadDir","flushFileUploadDir","PropertyService","generator","RESTAPI","getPropertyAPI","uploadFileAPI","fetchAndCheckResponse","makeHeaders","getTimestampAndNonce","uploadFile","PROPERTY_CATEGORY","PROPERTY_PERMISSIONS_FULL_ACCESS","HTTP_STATUS_CODES","FILE_UPLOAD_DIR","api","addEndpoint","multipart","propertyId","getProperty","id","userId","impersonateUser","timestamp","nonce","query","url","data","method","headers","describe","timeout","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","users","_factory","_id","organisations","emails","address","verified","proProperties","externalId","category","PRO","it","setProUserPermissions","permissions","then","property","to","equal","filePath","PROPERTY_PICTURES","res","files","length","documents","Object","keys","message","include"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\nimport { appendFileSync } from 'fs';\nimport { Random } from 'meteor/random';\n\nimport {\n  PROPERTY_DOCUMENTS,\n  OBJECT_STORAGE_PATH,\n} from 'core/api/files/fileConstants';\nimport { makeFileUploadDir, flushFileUploadDir } from 'core/utils/filesUtils';\nimport PropertyService from '../../../../properties/server/PropertyService';\nimport generator from '../../../../factories/index';\nimport RESTAPI from '../../RESTAPI';\nimport { getPropertyAPI, uploadFileAPI } from '..';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n  uploadFile,\n} from '../../test/apiTestHelpers.test';\nimport {\n  PROPERTY_CATEGORY,\n  PROPERTY_PERMISSIONS_FULL_ACCESS,\n} from '../../../../constants';\nimport { HTTP_STATUS_CODES, FILE_UPLOAD_DIR } from '../../restApiConstants';\n\nconst api = new RESTAPI();\n\napi.addEndpoint('/properties/:propertyId', 'GET', getPropertyAPI);\napi.addEndpoint('/upload', 'POST', uploadFileAPI, { multipart: true });\n\nlet propertyId = '';\n\nconst getProperty = ({ id, userId, impersonateUser }) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const query = impersonateUser && { 'impersonate-user': impersonateUser };\n  return fetchAndCheckResponse({\n    url: `/properties/${id || propertyId}`,\n    query,\n    data: {\n      method: 'GET',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        query,\n      }),\n    },\n  });\n};\n\ndescribe('REST: getProperty', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    propertyId = Random.id();\n    generator({\n      users: [\n        {\n          _factory: 'pro',\n          _id: 'pro',\n          organisations: [{ _id: 'org' }],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro2',\n          organisations: [{ _id: 'org' }],\n          emails: [{ address: 'pro2@org.com', verified: true }],\n          proProperties: [\n            {\n              _id: propertyId,\n              externalId: 'extId',\n              category: PROPERTY_CATEGORY.PRO,\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  it('returns property', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro2',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    return getProperty({\n      userId: 'pro',\n      impersonateUser: 'pro2@org.com',\n    }).then(({ property }) => {\n      expect(property._id).to.equal(propertyId);\n    });\n  });\n\n  it('returns property with files', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro2',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      query: { 'impersonate-user': 'pro2@org.com' },\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(1);\n        expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n      })\n      .then(() =>\n        getProperty({\n          userId: 'pro',\n          impersonateUser: 'pro2@org.com',\n        }))\n      .then(({ property }) => {\n        const { _id, documents = {} } = property;\n        expect(_id).to.equal(propertyId);\n        expect(Object.keys(documents).length).to.equal(1);\n      });\n  });\n\n  it('returns an error if user has no access to property', () => getProperty({\n    userId: 'pro',\n  }).then(({ message }) => {\n    expect(message).to.include(\"Vous n'avez pas accès\");\n  }));\n\n  it('fails when property does not exist', () => getProperty({\n    userId: 'pro',\n    id: '12345'\n  }).then(({ message }) => {\n    expect(message).to.include(\"No property found\");\n  }));\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/getProperty.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/getProperty.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet appendFileSync;\nmodule.link(\"fs\", {\n  appendFileSync(v) {\n    appendFileSync = v;\n  }\n\n}, 3);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 4);\nlet PROPERTY_DOCUMENTS, OBJECT_STORAGE_PATH;\nmodule.link(\"../../../../files/fileConstants\", {\n  PROPERTY_DOCUMENTS(v) {\n    PROPERTY_DOCUMENTS = v;\n  },\n\n  OBJECT_STORAGE_PATH(v) {\n    OBJECT_STORAGE_PATH = v;\n  }\n\n}, 5);\nlet makeFileUploadDir, flushFileUploadDir;\nmodule.link(\"../../../../../utils/filesUtils\", {\n  makeFileUploadDir(v) {\n    makeFileUploadDir = v;\n  },\n\n  flushFileUploadDir(v) {\n    flushFileUploadDir = v;\n  }\n\n}, 6);\nlet PropertyService;\nmodule.link(\"../../../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 7);\nlet generator;\nmodule.link(\"../../../../factories/index\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 8);\nlet RESTAPI;\nmodule.link(\"../../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 9);\nlet getPropertyAPI, uploadFileAPI;\nmodule.link(\"..\", {\n  getPropertyAPI(v) {\n    getPropertyAPI = v;\n  },\n\n  uploadFileAPI(v) {\n    uploadFileAPI = v;\n  }\n\n}, 10);\nlet fetchAndCheckResponse, makeHeaders, getTimestampAndNonce, uploadFile;\nmodule.link(\"../../test/apiTestHelpers.test\", {\n  fetchAndCheckResponse(v) {\n    fetchAndCheckResponse = v;\n  },\n\n  makeHeaders(v) {\n    makeHeaders = v;\n  },\n\n  getTimestampAndNonce(v) {\n    getTimestampAndNonce = v;\n  },\n\n  uploadFile(v) {\n    uploadFile = v;\n  }\n\n}, 11);\nlet PROPERTY_CATEGORY, PROPERTY_PERMISSIONS_FULL_ACCESS;\nmodule.link(\"../../../../constants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  },\n\n  PROPERTY_PERMISSIONS_FULL_ACCESS(v) {\n    PROPERTY_PERMISSIONS_FULL_ACCESS = v;\n  }\n\n}, 12);\nlet HTTP_STATUS_CODES, FILE_UPLOAD_DIR;\nmodule.link(\"../../restApiConstants\", {\n  HTTP_STATUS_CODES(v) {\n    HTTP_STATUS_CODES = v;\n  },\n\n  FILE_UPLOAD_DIR(v) {\n    FILE_UPLOAD_DIR = v;\n  }\n\n}, 13);\nconst api = new RESTAPI();\napi.addEndpoint('/properties/:propertyId', 'GET', getPropertyAPI);\napi.addEndpoint('/upload', 'POST', uploadFileAPI, {\n  multipart: true\n});\nlet propertyId = '';\n\nconst getProperty = ({\n  id,\n  userId,\n  impersonateUser\n}) => {\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  const query = impersonateUser && {\n    'impersonate-user': impersonateUser\n  };\n  return fetchAndCheckResponse({\n    url: `/properties/${id || propertyId}`,\n    query,\n    data: {\n      method: 'GET',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        query\n      })\n    }\n  });\n};\n\ndescribe('REST: getProperty', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    propertyId = Random.id();\n    generator({\n      users: [{\n        _factory: 'pro',\n        _id: 'pro',\n        organisations: [{\n          _id: 'org'\n        }]\n      }, {\n        _factory: 'pro',\n        _id: 'pro2',\n        organisations: [{\n          _id: 'org'\n        }],\n        emails: [{\n          address: 'pro2@org.com',\n          verified: true\n        }],\n        proProperties: [{\n          _id: propertyId,\n          externalId: 'extId',\n          category: PROPERTY_CATEGORY.PRO\n        }]\n      }]\n    });\n  });\n  it('returns property', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro2',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    return getProperty({\n      userId: 'pro',\n      impersonateUser: 'pro2@org.com'\n    }).then(({\n      property\n    }) => {\n      expect(property._id).to.equal(propertyId);\n    });\n  });\n  it('returns property with files', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro2',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      query: {\n        'impersonate-user': 'pro2@org.com'\n      },\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        files\n      } = res;\n      expect(files.length).to.equal(1);\n      expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n    }).then(() => getProperty({\n      userId: 'pro',\n      impersonateUser: 'pro2@org.com'\n    })).then(({\n      property\n    }) => {\n      const {\n        _id,\n        documents = {}\n      } = property;\n      expect(_id).to.equal(propertyId);\n      expect(Object.keys(documents).length).to.equal(1);\n    });\n  });\n  it('returns an error if user has no access to property', () => getProperty({\n    userId: 'pro'\n  }).then(({\n    message\n  }) => {\n    expect(message).to.include(\"Vous n'avez pas accès\");\n  }));\n  it('fails when property does not exist', () => getProperty({\n    userId: 'pro',\n    id: '12345'\n  }).then(({\n    message\n  }) => {\n    expect(message).to.include(\"No property found\");\n  }));\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/getProperty.test.js"],"names":["api","multipart","propertyId","getProperty","impersonateUser","nonce","getTimestampAndNonce","query","fetchAndCheckResponse","url","id","data","method","headers","makeHeaders","describe","before","Meteor","makeFileUploadDir","flushFileUploadDir","after","beforeEach","resetDatabase","Random","generator","users","_factory","_id","organisations","emails","address","verified","proProperties","externalId","category","PROPERTY_CATEGORY","PRO","it","PropertyService","userId","permissions","PROPERTY_PERMISSIONS_FULL_ACCESS","property","expect","filePath","FILE_UPLOAD_DIR","appendFileSync","PROPERTY_DOCUMENTS","PROPERTY_PICTURES","res","files","OBJECT_STORAGE_PATH","documents","Object","message"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\nimport { appendFileSync } from 'fs';\nimport { Random } from 'meteor/random';\n\nimport {\n  PROPERTY_DOCUMENTS,\n  OBJECT_STORAGE_PATH,\n} from 'core/api/files/fileConstants';\nimport { makeFileUploadDir, flushFileUploadDir } from 'core/utils/filesUtils';\nimport PropertyService from '../../../../properties/server/PropertyService';\nimport generator from '../../../../factories/index';\nimport RESTAPI from '../../RESTAPI';\nimport { getPropertyAPI, uploadFileAPI } from '..';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n  uploadFile,\n} from '../../test/apiTestHelpers.test';\nimport {\n  PROPERTY_CATEGORY,\n  PROPERTY_PERMISSIONS_FULL_ACCESS,\n} from '../../../../constants';\nimport { HTTP_STATUS_CODES, FILE_UPLOAD_DIR } from '../../restApiConstants';\n\nconst api = new RESTAPI();\n\napi.addEndpoint('/properties/:propertyId', 'GET', getPropertyAPI);\napi.addEndpoint('/upload', 'POST', uploadFileAPI, { multipart: true });\n\nlet propertyId = '';\n\nconst getProperty = ({ id, userId, impersonateUser }) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const query = impersonateUser && { 'impersonate-user': impersonateUser };\n  return fetchAndCheckResponse({\n    url: `/properties/${id || propertyId}`,\n    query,\n    data: {\n      method: 'GET',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        query,\n      }),\n    },\n  });\n};\n\ndescribe('REST: getProperty', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    propertyId = Random.id();\n    generator({\n      users: [\n        {\n          _factory: 'pro',\n          _id: 'pro',\n          organisations: [{ _id: 'org' }],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro2',\n          organisations: [{ _id: 'org' }],\n          emails: [{ address: 'pro2@org.com', verified: true }],\n          proProperties: [\n            {\n              _id: propertyId,\n              externalId: 'extId',\n              category: PROPERTY_CATEGORY.PRO,\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  it('returns property', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro2',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    return getProperty({\n      userId: 'pro',\n      impersonateUser: 'pro2@org.com',\n    }).then(({ property }) => {\n      expect(property._id).to.equal(propertyId);\n    });\n  });\n\n  it('returns property with files', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro2',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      query: { 'impersonate-user': 'pro2@org.com' },\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(1);\n        expect(files[0].url).to.equal(`${OBJECT_STORAGE_PATH}/${propertyId}/${PROPERTY_DOCUMENTS.PROPERTY_PICTURES}/myFile.txt`);\n      })\n      .then(() =>\n        getProperty({\n          userId: 'pro',\n          impersonateUser: 'pro2@org.com',\n        }))\n      .then(({ property }) => {\n        const { _id, documents = {} } = property;\n        expect(_id).to.equal(propertyId);\n        expect(Object.keys(documents).length).to.equal(1);\n      });\n  });\n\n  it('returns an error if user has no access to property', () => getProperty({\n    userId: 'pro',\n  }).then(({ message }) => {\n    expect(message).to.include(\"Vous n'avez pas accès\");\n  }));\n\n  it('fails when property does not exist', () => getProperty({\n    userId: 'pro',\n    id: '12345'\n  }).then(({ message }) => {\n    expect(message).to.include(\"No property found\");\n  }));\n});\n"]},"sourceType":"script","hash":"81cc2d067c0d473519cf15d6259b04e2e4cdbd99"}

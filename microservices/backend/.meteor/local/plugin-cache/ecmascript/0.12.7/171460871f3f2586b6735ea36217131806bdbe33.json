{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/promotionServerHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/promotions/server/promotionServerHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/promotionServerHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/promotions/server/promotionServerHelpers.js"],"names":["UserService","PromotionLotService","shouldAnonymize","clientShouldAnonymize","getPromotionCustomerOwnerType","getCustomerOwnerType","clientGetBestPromotionLotStatus","LoanService","ANONYMIZED_STRING","ANONYMIZED_USER","name","phoneNumbers","email","getUserPromotionPermissions","userId","promotionId","promotions","fetchOne","$filters","_id","promotion","find","$metadata","permissions","getCustomerInvitedBy","customerId","loans","reduce","loan","loanPromotions","invitedBy","getPromotionLotStatus","promotionLotId","status","attributedToLink","attributedTo","getBestPromotionLotStatus","loanId","promotionOptions","promotionLots","organisations","users","currentUser","customerOwnerType","promotionLotStatus","isAttributed","makeLoanAnonymizer","anonymize","undefined","attr","user","rest","anonymizeUser","isAnonymized","makePromotionLotAnonymizer","promotionLot","filter","x","map","makePromotionOptionAnonymizer","promotionOption","custom"],"mappings":"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","sourcesContent":["import UserService from '../../users/server/UserService';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport {\n  shouldAnonymize as clientShouldAnonymize,\n  getPromotionCustomerOwnerType as getCustomerOwnerType,\n  clientGetBestPromotionLotStatus,\n} from '../promotionClientHelpers';\nimport LoanService from '../../loans/server/LoanService';\n\nconst ANONYMIZED_STRING = 'XXX';\nconst ANONYMIZED_USER = {\n  name: ANONYMIZED_STRING,\n  phoneNumbers: [ANONYMIZED_STRING],\n  email: ANONYMIZED_STRING,\n};\n\nconst getUserPromotionPermissions = ({ userId, promotionId }) => {\n  const { promotions = [] } = UserService.fetchOne({\n    $filters: { _id: userId },\n    promotions: { _id: 1 },\n  });\n\n  const promotion = promotions.find(({ _id }) => _id === promotionId);\n\n  if (!promotion) {\n    return {};\n  }\n\n  const {\n    $metadata: { permissions = {} },\n  } = promotion;\n\n  return permissions;\n};\n\nconst getCustomerInvitedBy = ({ customerId, promotionId }) => {\n  const { loans = [] } = UserService.fetchOne({\n    $filters: { _id: customerId },\n    loans: { promotions: { _id: 1 } },\n  }) || {};\n\n  const { $metadata } = loans\n    .reduce((promotions, loan) => {\n      const { promotions: loanPromotions = [] } = loan;\n      return [...promotions, ...loanPromotions];\n    }, [])\n    .find(({ _id }) => _id === promotionId) || {};\n\n  return $metadata && $metadata.invitedBy;\n};\n\nconst getPromotionLotStatus = ({ promotionLotId }) => {\n  if (!promotionLotId) {\n    return {};\n  }\n\n  const { status, attributedToLink = {} } = PromotionLotService.fetchOne({\n    $filters: { _id: promotionLotId },\n    status: 1,\n    attributedToLink: 1,\n  }) || {};\n\n  return { status, attributedTo: attributedToLink._id };\n};\n\n/**\n * Out of all promotionLots attributed to this user, which one has\n * the most permissive status?\n *\n * @param {String} { loanId }\n * @returns {String} PROMOTION_LOT_STATUS\n */\nexport const getBestPromotionLotStatus = ({ loanId }) => {\n  const { promotionOptions = [] } = LoanService.fetchOne({\n    $filters: { _id: loanId },\n    userId: 1,\n    promotionOptions: {\n      promotionLots: { status: 1, attributedToLink: 1 },\n    },\n  });\n\n  return clientGetBestPromotionLotStatus(promotionOptions, loanId);\n};\n\nexport const getPromotionCustomerOwnerType = ({\n  customerId,\n  promotionId,\n  userId,\n}) => {\n  const invitedBy = getCustomerInvitedBy({ customerId, promotionId });\n  const { organisations = [] } = UserService.fetchOne({\n    $filters: { _id: userId },\n    organisations: { users: { _id: 1 } },\n  });\n\n  return getCustomerOwnerType({\n    invitedBy,\n    currentUser: { _id: userId, organisations },\n  });\n};\n\nconst shouldAnonymize = ({\n  customerId,\n  userId,\n  promotionId,\n  promotionLotId,\n  loanId,\n}) => {\n  const customerOwnerType = getPromotionCustomerOwnerType({\n    customerId,\n    userId,\n    promotionId,\n  });\n  const permissions = getUserPromotionPermissions({ userId, promotionId });\n\n  const { status: promotionLotStatus, attributedTo } = getPromotionLotStatus({\n    promotionLotId,\n  });\n\n  return clientShouldAnonymize({\n    customerOwnerType,\n    permissions,\n    promotionLotStatus,\n    isAttributed: attributedTo === loanId,\n  });\n};\n\nexport const makeLoanAnonymizer = ({\n  userId,\n  promotionId,\n  promotionLotId,\n  anonymize,\n}) => {\n  let permissions;\n  let promotionLotStatus;\n  let attributedTo;\n\n  if (anonymize === undefined) {\n    permissions = getUserPromotionPermissions({ userId, promotionId });\n    const { status, attributedTo: attr } = getPromotionLotStatus({\n      promotionLotId,\n      promotionId,\n    });\n    promotionLotStatus = status;\n    attributedTo = attr;\n  }\n\n  return (loan) => {\n    const { _id: loanId, user = {}, ...rest } = loan;\n    const { _id: customerId } = user;\n\n    let isAttributed = loanId === attributedTo;\n\n    if (!promotionLotId) {\n      // If no promotionLot is passed here, we get the best one from the loan\n      // For statuses BOOKED and SOLD, we check that it is attributed to\n      // this loan\n      promotionLotStatus = getBestPromotionLotStatus({ loanId });\n      isAttributed = true;\n    }\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId,\n      promotionId,\n      userId,\n    });\n\n    const anonymizeUser = anonymize === undefined\n      ? clientShouldAnonymize({\n        customerOwnerType,\n        permissions,\n        promotionLotStatus,\n        isAttributed,\n      })\n      : anonymize;\n\n    return {\n      user: anonymizeUser ? { _id: user._id, ...ANONYMIZED_USER } : user,\n      _id: loanId,\n      isAnonymized: !!anonymizeUser,\n      ...rest,\n    };\n  };\n};\n\nexport const makePromotionLotAnonymizer = ({ userId }) => (promotionLot) => {\n  const { attributedTo, ...rest } = promotionLot;\n  const {\n    _id: promotionLotId,\n    promotion: { _id: promotionId },\n  } = promotionLot;\n\n  const [loan] = [attributedTo]\n    .filter(x => x)\n    .map(makeLoanAnonymizer({ userId, promotionId, promotionLotId }));\n\n  return { attributedTo: loan, ...rest };\n};\n\nexport const makePromotionOptionAnonymizer = ({\n  userId,\n}) => (promotionOption) => {\n  const { loan, custom, ...rest } = promotionOption;\n  const {\n    promotionLots,\n    promotion: { _id: promotionId },\n  } = promotionOption;\n  const { _id: promotionLotId } = promotionLots[0];\n\n  const anonymize = shouldAnonymize({\n    customerId: loan.user._id,\n    userId,\n    promotionId,\n    promotionLotId,\n    loanId: loan._id,\n  });\n\n  return {\n    loan: makeLoanAnonymizer({\n      userId,\n      promotionId,\n      promotionLotId,\n      anonymize,\n    })(loan),\n    custom: anonymize ? ANONYMIZED_STRING : custom,\n    isAnonymized: !!anonymize,\n    ...rest,\n  };\n};\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/promotionServerHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/promotions/server/promotionServerHelpers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nmodule.export({\n  getBestPromotionLotStatus: () => getBestPromotionLotStatus,\n  getPromotionCustomerOwnerType: () => getPromotionCustomerOwnerType,\n  makeLoanAnonymizer: () => makeLoanAnonymizer,\n  makePromotionLotAnonymizer: () => makePromotionLotAnonymizer,\n  makePromotionOptionAnonymizer: () => makePromotionOptionAnonymizer\n});\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 0);\nlet PromotionLotService;\nmodule.link(\"../../promotionLots/server/PromotionLotService\", {\n  default(v) {\n    PromotionLotService = v;\n  }\n\n}, 1);\nlet clientShouldAnonymize, getCustomerOwnerType, clientGetBestPromotionLotStatus;\nmodule.link(\"../promotionClientHelpers\", {\n  shouldAnonymize(v) {\n    clientShouldAnonymize = v;\n  },\n\n  getPromotionCustomerOwnerType(v) {\n    getCustomerOwnerType = v;\n  },\n\n  clientGetBestPromotionLotStatus(v) {\n    clientGetBestPromotionLotStatus = v;\n  }\n\n}, 2);\nlet LoanService;\nmodule.link(\"../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 3);\nconst ANONYMIZED_STRING = 'XXX';\nconst ANONYMIZED_USER = {\n  name: ANONYMIZED_STRING,\n  phoneNumbers: [ANONYMIZED_STRING],\n  email: ANONYMIZED_STRING\n};\n\nconst getUserPromotionPermissions = ({\n  userId,\n  promotionId\n}) => {\n  const {\n    promotions = []\n  } = UserService.fetchOne({\n    $filters: {\n      _id: userId\n    },\n    promotions: {\n      _id: 1\n    }\n  });\n  const promotion = promotions.find(({\n    _id\n  }) => _id === promotionId);\n\n  if (!promotion) {\n    return {};\n  }\n\n  const {\n    $metadata: {\n      permissions = {}\n    }\n  } = promotion;\n  return permissions;\n};\n\nconst getCustomerInvitedBy = ({\n  customerId,\n  promotionId\n}) => {\n  const {\n    loans = []\n  } = UserService.fetchOne({\n    $filters: {\n      _id: customerId\n    },\n    loans: {\n      promotions: {\n        _id: 1\n      }\n    }\n  }) || {};\n  const {\n    $metadata\n  } = loans.reduce((promotions, loan) => {\n    const {\n      promotions: loanPromotions = []\n    } = loan;\n    return [...promotions, ...loanPromotions];\n  }, []).find(({\n    _id\n  }) => _id === promotionId) || {};\n  return $metadata && $metadata.invitedBy;\n};\n\nconst getPromotionLotStatus = ({\n  promotionLotId\n}) => {\n  if (!promotionLotId) {\n    return {};\n  }\n\n  const {\n    status,\n    attributedToLink = {}\n  } = PromotionLotService.fetchOne({\n    $filters: {\n      _id: promotionLotId\n    },\n    status: 1,\n    attributedToLink: 1\n  }) || {};\n  return {\n    status,\n    attributedTo: attributedToLink._id\n  };\n};\n/**\n * Out of all promotionLots attributed to this user, which one has\n * the most permissive status?\n *\n * @param {String} { loanId }\n * @returns {String} PROMOTION_LOT_STATUS\n */\n\n\nconst getBestPromotionLotStatus = ({\n  loanId\n}) => {\n  const {\n    promotionOptions = []\n  } = LoanService.fetchOne({\n    $filters: {\n      _id: loanId\n    },\n    userId: 1,\n    promotionOptions: {\n      promotionLots: {\n        status: 1,\n        attributedToLink: 1\n      }\n    }\n  });\n  return clientGetBestPromotionLotStatus(promotionOptions, loanId);\n};\n\nconst getPromotionCustomerOwnerType = ({\n  customerId,\n  promotionId,\n  userId\n}) => {\n  const invitedBy = getCustomerInvitedBy({\n    customerId,\n    promotionId\n  });\n  const {\n    organisations = []\n  } = UserService.fetchOne({\n    $filters: {\n      _id: userId\n    },\n    organisations: {\n      users: {\n        _id: 1\n      }\n    }\n  });\n  return getCustomerOwnerType({\n    invitedBy,\n    currentUser: {\n      _id: userId,\n      organisations\n    }\n  });\n};\n\nconst shouldAnonymize = ({\n  customerId,\n  userId,\n  promotionId,\n  promotionLotId,\n  loanId\n}) => {\n  const customerOwnerType = getPromotionCustomerOwnerType({\n    customerId,\n    userId,\n    promotionId\n  });\n  const permissions = getUserPromotionPermissions({\n    userId,\n    promotionId\n  });\n  const {\n    status: promotionLotStatus,\n    attributedTo\n  } = getPromotionLotStatus({\n    promotionLotId\n  });\n  return clientShouldAnonymize({\n    customerOwnerType,\n    permissions,\n    promotionLotStatus,\n    isAttributed: attributedTo === loanId\n  });\n};\n\nconst makeLoanAnonymizer = ({\n  userId,\n  promotionId,\n  promotionLotId,\n  anonymize\n}) => {\n  let permissions;\n  let promotionLotStatus;\n  let attributedTo;\n\n  if (anonymize === undefined) {\n    permissions = getUserPromotionPermissions({\n      userId,\n      promotionId\n    });\n    const {\n      status,\n      attributedTo: attr\n    } = getPromotionLotStatus({\n      promotionLotId,\n      promotionId\n    });\n    promotionLotStatus = status;\n    attributedTo = attr;\n  }\n\n  return loan => {\n    const {\n      _id: loanId,\n      user = {}\n    } = loan,\n          rest = (0, _objectWithoutProperties2.default)(loan, [\"_id\", \"user\"]);\n    const {\n      _id: customerId\n    } = user;\n    let isAttributed = loanId === attributedTo;\n\n    if (!promotionLotId) {\n      // If no promotionLot is passed here, we get the best one from the loan\n      // For statuses BOOKED and SOLD, we check that it is attributed to\n      // this loan\n      promotionLotStatus = getBestPromotionLotStatus({\n        loanId\n      });\n      isAttributed = true;\n    }\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId,\n      promotionId,\n      userId\n    });\n    const anonymizeUser = anonymize === undefined ? clientShouldAnonymize({\n      customerOwnerType,\n      permissions,\n      promotionLotStatus,\n      isAttributed\n    }) : anonymize;\n    return (0, _objectSpread2.default)({\n      user: anonymizeUser ? (0, _objectSpread2.default)({\n        _id: user._id\n      }, ANONYMIZED_USER) : user,\n      _id: loanId,\n      isAnonymized: !!anonymizeUser\n    }, rest);\n  };\n};\n\nconst makePromotionLotAnonymizer = ({\n  userId\n}) => promotionLot => {\n  const {\n    attributedTo\n  } = promotionLot,\n        rest = (0, _objectWithoutProperties2.default)(promotionLot, [\"attributedTo\"]);\n  const {\n    _id: promotionLotId,\n    promotion: {\n      _id: promotionId\n    }\n  } = promotionLot;\n  const [loan] = [attributedTo].filter(x => x).map(makeLoanAnonymizer({\n    userId,\n    promotionId,\n    promotionLotId\n  }));\n  return (0, _objectSpread2.default)({\n    attributedTo: loan\n  }, rest);\n};\n\nconst makePromotionOptionAnonymizer = ({\n  userId\n}) => promotionOption => {\n  const {\n    loan,\n    custom\n  } = promotionOption,\n        rest = (0, _objectWithoutProperties2.default)(promotionOption, [\"loan\", \"custom\"]);\n  const {\n    promotionLots,\n    promotion: {\n      _id: promotionId\n    }\n  } = promotionOption;\n  const {\n    _id: promotionLotId\n  } = promotionLots[0];\n  const anonymize = shouldAnonymize({\n    customerId: loan.user._id,\n    userId,\n    promotionId,\n    promotionLotId,\n    loanId: loan._id\n  });\n  return (0, _objectSpread2.default)({\n    loan: makeLoanAnonymizer({\n      userId,\n      promotionId,\n      promotionLotId,\n      anonymize\n    })(loan),\n    custom: anonymize ? ANONYMIZED_STRING : custom,\n    isAnonymized: !!anonymize\n  }, rest);\n};","map":{"version":3,"sources":["imports/core/api/promotions/server/promotionServerHelpers.js"],"names":["UserService","ANONYMIZED_STRING","ANONYMIZED_USER","name","phoneNumbers","email","getUserPromotionPermissions","promotionId","promotions","$filters","_id","userId","promotion","$metadata","permissions","getCustomerInvitedBy","loans","customerId","loanPromotions","getPromotionLotStatus","promotionLotId","attributedToLink","status","attributedTo","getBestPromotionLotStatus","loanId","promotionOptions","promotionLots","clientGetBestPromotionLotStatus","getPromotionCustomerOwnerType","invitedBy","organisations","users","getCustomerOwnerType","currentUser","shouldAnonymize","customerOwnerType","clientShouldAnonymize","isAttributed","makeLoanAnonymizer","anonymize","attr","promotionLotStatus","loan","user","rest","anonymizeUser","isAnonymized","makePromotionLotAnonymizer","promotionLot","x","makePromotionOptionAnonymizer","promotionOption","custom"],"mappings":"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","sourcesContent":["import UserService from '../../users/server/UserService';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport {\n  shouldAnonymize as clientShouldAnonymize,\n  getPromotionCustomerOwnerType as getCustomerOwnerType,\n  clientGetBestPromotionLotStatus,\n} from '../promotionClientHelpers';\nimport LoanService from '../../loans/server/LoanService';\n\nconst ANONYMIZED_STRING = 'XXX';\nconst ANONYMIZED_USER = {\n  name: ANONYMIZED_STRING,\n  phoneNumbers: [ANONYMIZED_STRING],\n  email: ANONYMIZED_STRING,\n};\n\nconst getUserPromotionPermissions = ({ userId, promotionId }) => {\n  const { promotions = [] } = UserService.fetchOne({\n    $filters: { _id: userId },\n    promotions: { _id: 1 },\n  });\n\n  const promotion = promotions.find(({ _id }) => _id === promotionId);\n\n  if (!promotion) {\n    return {};\n  }\n\n  const {\n    $metadata: { permissions = {} },\n  } = promotion;\n\n  return permissions;\n};\n\nconst getCustomerInvitedBy = ({ customerId, promotionId }) => {\n  const { loans = [] } = UserService.fetchOne({\n    $filters: { _id: customerId },\n    loans: { promotions: { _id: 1 } },\n  }) || {};\n\n  const { $metadata } = loans\n    .reduce((promotions, loan) => {\n      const { promotions: loanPromotions = [] } = loan;\n      return [...promotions, ...loanPromotions];\n    }, [])\n    .find(({ _id }) => _id === promotionId) || {};\n\n  return $metadata && $metadata.invitedBy;\n};\n\nconst getPromotionLotStatus = ({ promotionLotId }) => {\n  if (!promotionLotId) {\n    return {};\n  }\n\n  const { status, attributedToLink = {} } = PromotionLotService.fetchOne({\n    $filters: { _id: promotionLotId },\n    status: 1,\n    attributedToLink: 1,\n  }) || {};\n\n  return { status, attributedTo: attributedToLink._id };\n};\n\n/**\n * Out of all promotionLots attributed to this user, which one has\n * the most permissive status?\n *\n * @param {String} { loanId }\n * @returns {String} PROMOTION_LOT_STATUS\n */\nexport const getBestPromotionLotStatus = ({ loanId }) => {\n  const { promotionOptions = [] } = LoanService.fetchOne({\n    $filters: { _id: loanId },\n    userId: 1,\n    promotionOptions: {\n      promotionLots: { status: 1, attributedToLink: 1 },\n    },\n  });\n\n  return clientGetBestPromotionLotStatus(promotionOptions, loanId);\n};\n\nexport const getPromotionCustomerOwnerType = ({\n  customerId,\n  promotionId,\n  userId,\n}) => {\n  const invitedBy = getCustomerInvitedBy({ customerId, promotionId });\n  const { organisations = [] } = UserService.fetchOne({\n    $filters: { _id: userId },\n    organisations: { users: { _id: 1 } },\n  });\n\n  return getCustomerOwnerType({\n    invitedBy,\n    currentUser: { _id: userId, organisations },\n  });\n};\n\nconst shouldAnonymize = ({\n  customerId,\n  userId,\n  promotionId,\n  promotionLotId,\n  loanId,\n}) => {\n  const customerOwnerType = getPromotionCustomerOwnerType({\n    customerId,\n    userId,\n    promotionId,\n  });\n  const permissions = getUserPromotionPermissions({ userId, promotionId });\n\n  const { status: promotionLotStatus, attributedTo } = getPromotionLotStatus({\n    promotionLotId,\n  });\n\n  return clientShouldAnonymize({\n    customerOwnerType,\n    permissions,\n    promotionLotStatus,\n    isAttributed: attributedTo === loanId,\n  });\n};\n\nexport const makeLoanAnonymizer = ({\n  userId,\n  promotionId,\n  promotionLotId,\n  anonymize,\n}) => {\n  let permissions;\n  let promotionLotStatus;\n  let attributedTo;\n\n  if (anonymize === undefined) {\n    permissions = getUserPromotionPermissions({ userId, promotionId });\n    const { status, attributedTo: attr } = getPromotionLotStatus({\n      promotionLotId,\n      promotionId,\n    });\n    promotionLotStatus = status;\n    attributedTo = attr;\n  }\n\n  return (loan) => {\n    const { _id: loanId, user = {}, ...rest } = loan;\n    const { _id: customerId } = user;\n\n    let isAttributed = loanId === attributedTo;\n\n    if (!promotionLotId) {\n      // If no promotionLot is passed here, we get the best one from the loan\n      // For statuses BOOKED and SOLD, we check that it is attributed to\n      // this loan\n      promotionLotStatus = getBestPromotionLotStatus({ loanId });\n      isAttributed = true;\n    }\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId,\n      promotionId,\n      userId,\n    });\n\n    const anonymizeUser = anonymize === undefined\n      ? clientShouldAnonymize({\n        customerOwnerType,\n        permissions,\n        promotionLotStatus,\n        isAttributed,\n      })\n      : anonymize;\n\n    return {\n      user: anonymizeUser ? { _id: user._id, ...ANONYMIZED_USER } : user,\n      _id: loanId,\n      isAnonymized: !!anonymizeUser,\n      ...rest,\n    };\n  };\n};\n\nexport const makePromotionLotAnonymizer = ({ userId }) => (promotionLot) => {\n  const { attributedTo, ...rest } = promotionLot;\n  const {\n    _id: promotionLotId,\n    promotion: { _id: promotionId },\n  } = promotionLot;\n\n  const [loan] = [attributedTo]\n    .filter(x => x)\n    .map(makeLoanAnonymizer({ userId, promotionId, promotionLotId }));\n\n  return { attributedTo: loan, ...rest };\n};\n\nexport const makePromotionOptionAnonymizer = ({\n  userId,\n}) => (promotionOption) => {\n  const { loan, custom, ...rest } = promotionOption;\n  const {\n    promotionLots,\n    promotion: { _id: promotionId },\n  } = promotionOption;\n  const { _id: promotionLotId } = promotionLots[0];\n\n  const anonymize = shouldAnonymize({\n    customerId: loan.user._id,\n    userId,\n    promotionId,\n    promotionLotId,\n    loanId: loan._id,\n  });\n\n  return {\n    loan: makeLoanAnonymizer({\n      userId,\n      promotionId,\n      promotionLotId,\n      anonymize,\n    })(loan),\n    custom: anonymize ? ANONYMIZED_STRING : custom,\n    isAnonymized: !!anonymize,\n    ...rest,\n  };\n};\n"]},"sourceType":"script","hash":"171460871f3f2586b6735ea36217131806bdbe33"}

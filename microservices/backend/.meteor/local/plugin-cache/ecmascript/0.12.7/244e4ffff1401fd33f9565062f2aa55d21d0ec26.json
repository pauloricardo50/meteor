{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/properties/server/exposures.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/properties/server/exposures.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/properties/server/exposures.js","inputSourceMap":{"version":3,"sources":["imports/core/api/properties/server/exposures.js"],"names":["Match","UserService","exposeQuery","createSearchFilters","Security","adminProperties","anonymousProperty","proProperties","userProperty","proPropertyUsers","propertySearch","query","options","allowFilterById","overrides","firewall","userId","_id","properties","checkPropertyIsPublic","propertyId","params","checkUserIsAdmin","checkUserIsPro","hasAccessToProperty","embody","body","embodyParams","$filter","filters","fetchOrganisationProperties","organisations","fetchOne","$filters","users","otherOrganisationUsers","length","map","orgUserId","filter","id","$in","$postFilter","userLinks","some","userLinkId","validateParams","Maybe","String","Boolean","isAllowedToView","property","searchQuery","Object","assign"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\n\nimport UserService from '../../users/server/UserService';\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { createSearchFilters } from '../../helpers/mongoHelpers';\nimport Security from '../../security';\nimport {\n  adminProperties,\n  anonymousProperty,\n  proProperties,\n  userProperty,\n  proPropertyUsers,\n  propertySearch,\n} from '../queries';\n\nexposeQuery({ query: adminProperties, options: { allowFilterById: true } });\nexposeQuery({\n  query: anonymousProperty,\n  overrides: {\n    firewall(userId, { _id }) {\n      Security.properties.checkPropertyIsPublic({ propertyId: _id });\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: proProperties,\n  overrides: {\n    firewall(userId, params) {\n      if (params.userId) {\n        // When visiting a pro user's page from admin\n        Security.checkUserIsAdmin(userId);\n      } else {\n        Security.checkUserIsPro(userId);\n        params.userId = userId;\n      }\n\n      if (params._id) {\n        Security.properties.hasAccessToProperty({\n          propertyId: params._id,\n          userId,\n        });\n      }\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params }) => {\n        const { _id: propertyId, userId, fetchOrganisationProperties } = params;\n        if (propertyId) {\n          filters._id = propertyId;\n        }\n\n        if (userId) {\n          filters['userLinks._id'] = userId;\n        }\n\n        if (fetchOrganisationProperties) {\n          const { organisations = [] } = UserService.fetchOne({\n            $filters: { _id: userId },\n            organisations: { users: { _id: 1 } },\n          });\n\n          const otherOrganisationUsers = organisations.length\n            ? organisations[0].users\n              .map(({ _id: orgUserId }) => orgUserId)\n              .filter(id => id !== userId)\n            : [];\n\n          filters['userLinks._id'] = { $in: otherOrganisationUsers };\n        }\n      };\n\n      body.$postFilter = (properties, params) => {\n        const { fetchOrganisationProperties, userId } = params;\n\n        if (fetchOrganisationProperties) {\n          return properties.filter(({ userLinks }) =>\n            !userLinks.some(({ _id: userLinkId }) => userLinkId === userId));\n        }\n\n        return properties;\n      };\n    },\n    validateParams: {\n      userId: Match.Maybe(String),\n      fetchOrganisationProperties: Match.Maybe(Boolean),\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: userProperty,\n  overrides: {\n    firewall(userId, { _id: propertyId }) {\n      Security.properties.hasAccessToProperty({ propertyId, userId });\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: proPropertyUsers,\n  overrides: {\n    firewall(userId, params) {\n      const { propertyId } = params;\n      params.userId = userId;\n\n      Security.properties.isAllowedToView({ propertyId, userId });\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params: { propertyId } }) => {\n        filters._id = propertyId;\n      };\n\n      body.$postFilter = (properties = [], params) => {\n        const property = !!properties.length && properties[0];\n\n        if (!property) {\n          return [];\n        }\n\n        const { users = [] } = property;\n        return users;\n      };\n    },\n    validateParams: {\n      propertyId: String,\n      userId: String,\n    },\n  },\n});\n\nexposeQuery({\n  query: propertySearch,\n  overrides: {\n    validateParams: { searchQuery: Match.Maybe(String) },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { searchQuery } }) => {\n        Object.assign(\n          filters,\n          createSearchFilters(['address1', 'city', '_id'], searchQuery),\n        );\n      };\n    },\n  },\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/properties/server/exposures.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/properties/server/exposures.js"}},"code":"let Match;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 1);\nlet exposeQuery;\nmodule.link(\"../../queries/queryHelpers\", {\n  exposeQuery(v) {\n    exposeQuery = v;\n  }\n\n}, 2);\nlet createSearchFilters;\nmodule.link(\"../../helpers/mongoHelpers\", {\n  createSearchFilters(v) {\n    createSearchFilters = v;\n  }\n\n}, 3);\nlet Security;\nmodule.link(\"../../security\", {\n  default(v) {\n    Security = v;\n  }\n\n}, 4);\nlet adminProperties, anonymousProperty, proProperties, userProperty, proPropertyUsers, propertySearch;\nmodule.link(\"../queries\", {\n  adminProperties(v) {\n    adminProperties = v;\n  },\n\n  anonymousProperty(v) {\n    anonymousProperty = v;\n  },\n\n  proProperties(v) {\n    proProperties = v;\n  },\n\n  userProperty(v) {\n    userProperty = v;\n  },\n\n  proPropertyUsers(v) {\n    proPropertyUsers = v;\n  },\n\n  propertySearch(v) {\n    propertySearch = v;\n  }\n\n}, 5);\nexposeQuery({\n  query: adminProperties,\n  options: {\n    allowFilterById: true\n  }\n});\nexposeQuery({\n  query: anonymousProperty,\n  overrides: {\n    firewall(userId, {\n      _id\n    }) {\n      Security.properties.checkPropertyIsPublic({\n        propertyId: _id\n      });\n    }\n\n  },\n  options: {\n    allowFilterById: true\n  }\n});\nexposeQuery({\n  query: proProperties,\n  overrides: {\n    firewall(userId, params) {\n      if (params.userId) {\n        // When visiting a pro user's page from admin\n        Security.checkUserIsAdmin(userId);\n      } else {\n        Security.checkUserIsPro(userId);\n        params.userId = userId;\n      }\n\n      if (params._id) {\n        Security.properties.hasAccessToProperty({\n          propertyId: params._id,\n          userId\n        });\n      }\n    },\n\n    embody: (body, embodyParams) => {\n      body.$filter = ({\n        filters,\n        params\n      }) => {\n        const {\n          _id: propertyId,\n          userId,\n          fetchOrganisationProperties\n        } = params;\n\n        if (propertyId) {\n          filters._id = propertyId;\n        }\n\n        if (userId) {\n          filters['userLinks._id'] = userId;\n        }\n\n        if (fetchOrganisationProperties) {\n          const {\n            organisations = []\n          } = UserService.fetchOne({\n            $filters: {\n              _id: userId\n            },\n            organisations: {\n              users: {\n                _id: 1\n              }\n            }\n          });\n          const otherOrganisationUsers = organisations.length ? organisations[0].users.map(({\n            _id: orgUserId\n          }) => orgUserId).filter(id => id !== userId) : [];\n          filters['userLinks._id'] = {\n            $in: otherOrganisationUsers\n          };\n        }\n      };\n\n      body.$postFilter = (properties, params) => {\n        const {\n          fetchOrganisationProperties,\n          userId\n        } = params;\n\n        if (fetchOrganisationProperties) {\n          return properties.filter(({\n            userLinks\n          }) => !userLinks.some(({\n            _id: userLinkId\n          }) => userLinkId === userId));\n        }\n\n        return properties;\n      };\n    },\n    validateParams: {\n      userId: Match.Maybe(String),\n      fetchOrganisationProperties: Match.Maybe(Boolean)\n    }\n  },\n  options: {\n    allowFilterById: true\n  }\n});\nexposeQuery({\n  query: userProperty,\n  overrides: {\n    firewall(userId, {\n      _id: propertyId\n    }) {\n      Security.properties.hasAccessToProperty({\n        propertyId,\n        userId\n      });\n    }\n\n  },\n  options: {\n    allowFilterById: true\n  }\n});\nexposeQuery({\n  query: proPropertyUsers,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        propertyId\n      } = params;\n      params.userId = userId;\n      Security.properties.isAllowedToView({\n        propertyId,\n        userId\n      });\n    },\n\n    embody: (body, embodyParams) => {\n      body.$filter = ({\n        filters,\n        params: {\n          propertyId\n        }\n      }) => {\n        filters._id = propertyId;\n      };\n\n      body.$postFilter = (properties = [], params) => {\n        const property = !!properties.length && properties[0];\n\n        if (!property) {\n          return [];\n        }\n\n        const {\n          users = []\n        } = property;\n        return users;\n      };\n    },\n    validateParams: {\n      propertyId: String,\n      userId: String\n    }\n  }\n});\nexposeQuery({\n  query: propertySearch,\n  overrides: {\n    validateParams: {\n      searchQuery: Match.Maybe(String)\n    },\n    embody: body => {\n      body.$filter = ({\n        filters,\n        params: {\n          searchQuery\n        }\n      }) => {\n        Object.assign(filters, createSearchFilters(['address1', 'city', '_id'], searchQuery));\n      };\n    }\n  }\n});","map":{"version":3,"sources":["imports/core/api/properties/server/exposures.js"],"names":["exposeQuery","query","options","allowFilterById","overrides","firewall","_id","Security","propertyId","params","userId","embody","body","fetchOrganisationProperties","filters","organisations","$filters","users","otherOrganisationUsers","orgUserId","id","$in","properties","userLinks","userLinkId","validateParams","Match","property","String","searchQuery","Object","createSearchFilters"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\n\nimport UserService from '../../users/server/UserService';\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { createSearchFilters } from '../../helpers/mongoHelpers';\nimport Security from '../../security';\nimport {\n  adminProperties,\n  anonymousProperty,\n  proProperties,\n  userProperty,\n  proPropertyUsers,\n  propertySearch,\n} from '../queries';\n\nexposeQuery({ query: adminProperties, options: { allowFilterById: true } });\nexposeQuery({\n  query: anonymousProperty,\n  overrides: {\n    firewall(userId, { _id }) {\n      Security.properties.checkPropertyIsPublic({ propertyId: _id });\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: proProperties,\n  overrides: {\n    firewall(userId, params) {\n      if (params.userId) {\n        // When visiting a pro user's page from admin\n        Security.checkUserIsAdmin(userId);\n      } else {\n        Security.checkUserIsPro(userId);\n        params.userId = userId;\n      }\n\n      if (params._id) {\n        Security.properties.hasAccessToProperty({\n          propertyId: params._id,\n          userId,\n        });\n      }\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params }) => {\n        const { _id: propertyId, userId, fetchOrganisationProperties } = params;\n        if (propertyId) {\n          filters._id = propertyId;\n        }\n\n        if (userId) {\n          filters['userLinks._id'] = userId;\n        }\n\n        if (fetchOrganisationProperties) {\n          const { organisations = [] } = UserService.fetchOne({\n            $filters: { _id: userId },\n            organisations: { users: { _id: 1 } },\n          });\n\n          const otherOrganisationUsers = organisations.length\n            ? organisations[0].users\n              .map(({ _id: orgUserId }) => orgUserId)\n              .filter(id => id !== userId)\n            : [];\n\n          filters['userLinks._id'] = { $in: otherOrganisationUsers };\n        }\n      };\n\n      body.$postFilter = (properties, params) => {\n        const { fetchOrganisationProperties, userId } = params;\n\n        if (fetchOrganisationProperties) {\n          return properties.filter(({ userLinks }) =>\n            !userLinks.some(({ _id: userLinkId }) => userLinkId === userId));\n        }\n\n        return properties;\n      };\n    },\n    validateParams: {\n      userId: Match.Maybe(String),\n      fetchOrganisationProperties: Match.Maybe(Boolean),\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: userProperty,\n  overrides: {\n    firewall(userId, { _id: propertyId }) {\n      Security.properties.hasAccessToProperty({ propertyId, userId });\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: proPropertyUsers,\n  overrides: {\n    firewall(userId, params) {\n      const { propertyId } = params;\n      params.userId = userId;\n\n      Security.properties.isAllowedToView({ propertyId, userId });\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params: { propertyId } }) => {\n        filters._id = propertyId;\n      };\n\n      body.$postFilter = (properties = [], params) => {\n        const property = !!properties.length && properties[0];\n\n        if (!property) {\n          return [];\n        }\n\n        const { users = [] } = property;\n        return users;\n      };\n    },\n    validateParams: {\n      propertyId: String,\n      userId: String,\n    },\n  },\n});\n\nexposeQuery({\n  query: propertySearch,\n  overrides: {\n    validateParams: { searchQuery: Match.Maybe(String) },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { searchQuery } }) => {\n        Object.assign(\n          filters,\n          createSearchFilters(['address1', 'city', '_id'], searchQuery),\n        );\n      };\n    },\n  },\n});\n"]},"sourceType":"script","hash":"244e4ffff1401fd33f9565062f2aa55d21d0ec26"}

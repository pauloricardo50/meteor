{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/email/server/test/EmailService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/email/server/test/EmailService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/email/server/test/EmailService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/email/server/test/EmailService.test.js"],"names":["expect","resetDatabase","checkEmails","EMAIL_IDS","EMAIL_TEMPLATES","EmailService","isEmailTestEnv","setupMandrill","describe","timeout","beforeEach","it","to","equal","emailId","ENROLL_ACCOUNT","template","getAccountsTemplate","user","roles","url","renderTemplate","not","throw","address","sendEmail","CONTACT_US","params","name","then","emails","length","deep","include","template_name","NOTIFICATION","mandrillId","response","status"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,SAASC,WAAT;AACA,SAASC,SAAT,EAAoBC,eAApB;AACA,OAAOC,YAAP,IAAuBC,cAAvB;AACA,SAASC,aAAT;AAEAA,aAAa;AAEbC,QAAQ,CAAC,cAAD,EAAiB,YAAY;AACnC,OAAKC,OAAL,CAAa,KAAb;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfT,IAAAA,aAAa;AACd,GAFS,CAAV;AAIAU,EAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACtCX,IAAAA,MAAM,CAACM,cAAD,CAAN,CAAuBM,EAAvB,CAA0BC,KAA1B,CAAgC,IAAhC;AACD,GAFC,CAAF;AAIAL,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BG,IAAAA,EAAE,CAAC,kBAAD,EAAqB,MAAM;AAC3B,YAAMG,OAAO,GAAGX,SAAS,CAACY,cAA1B;AACA,YAAMC,QAAQ,GAAGX,YAAY,CAACY,mBAAb,CAAiCH,OAAjC,EAA0C;AACzDI,QAAAA,IAAI,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SADmD;AAEzDC,QAAAA,GAAG,EAAE;AAFoD,OAA1C,CAAjB;AAIApB,MAAAA,MAAM,CAAC,MACLK,YAAY,CAACgB,cAAb,CAA4BL,QAA5B,EAAsCF,OAAtC,CADI,CAAN,CACkDF,EADlD,CACqDU,GADrD,CACyDC,KADzD;AAED,KARC,CAAF;AASD,GAVO,CAAR;AAYAf,EAAAA,QAAQ,CAAC,WAAD,EAAc,MAAM;AAC1BG,IAAAA,EAAE,CAAC,wEAAD,EAA2E,MAAM;AACjF,YAAMa,OAAO,GAAG,oBAAhB;AAEA,aAAOnB,YAAY,CAACoB,SAAb,CAAuB;AAC5BX,QAAAA,OAAO,EAAEX,SAAS,CAACuB,UADS;AAE5BF,QAAAA,OAF4B;AAG5BG,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AAHoB,OAAvB,EAIJC,IAJI,CAIC,MACN3B,WAAW,GAAG2B,IAAd,CAAoBC,MAAD,IAAY;AAC7B9B,QAAAA,MAAM,CAAC8B,MAAM,CAACC,MAAR,CAAN,CAAsBnB,EAAtB,CAAyBC,KAAzB,CAA+B,CAA/B;AACAb,QAAAA,MAAM,CAAC8B,MAAM,CAAC,CAAD,CAAP,CAAN,CAAkBlB,EAAlB,CAAqBoB,IAArB,CAA0BC,OAA1B,CAAkC;AAChCnB,UAAAA,OAAO,EAAEX,SAAS,CAACuB,UADa;AAEhCF,UAAAA;AAFgC,SAAlC;AAIAxB,QAAAA,MAAM,CAAC8B,MAAM,CAAC,CAAD,CAAN,CAAUd,QAAV,CAAmBkB,aAApB,CAAN,CAAyCtB,EAAzC,CAA4CC,KAA5C,CAAkDT,eAAe,CAAC+B,YAAhB,CAA6BC,UAA/E;AACApC,QAAAA,MAAM,CAAC8B,MAAM,CAAC,CAAD,CAAN,CAAUO,QAAV,CAAmBC,MAApB,CAAN,CAAkC1B,EAAlC,CAAqCC,KAArC,CAA2C,MAA3C;AACD,OARD,CALK,CAAP;AAcD,KAjBC,CAAF;AAkBD,GAnBO,CAAR;AAoBD,CA3CO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { checkEmails } from '../../../../utils/testHelpers';\nimport { EMAIL_IDS, EMAIL_TEMPLATES } from '../../emailConstants';\nimport EmailService, { isEmailTestEnv } from '../EmailService';\nimport { setupMandrill } from '../mandrill';\n\nsetupMandrill();\n\ndescribe('EmailService', function () {\n  this.timeout(10000);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  it('emailTestEnv should be true', () => {\n    expect(isEmailTestEnv).to.equal(true);\n  });\n\n  describe('renderTemplate', () => {\n    it('should not throw', () => {\n      const emailId = EMAIL_IDS.ENROLL_ACCOUNT;\n      const template = EmailService.getAccountsTemplate(emailId, {\n        user: { roles: 'user' },\n        url: 'stuff/enroll-account/hello',\n      });\n      expect(() =>\n        EmailService.renderTemplate(template, emailId)).to.not.throw();\n    });\n  });\n\n  describe('sendEmail', () => {\n    it('should add emails in the test database and send them with the test key', () => {\n      const address = 'florian@e-potek.ch';\n\n      return EmailService.sendEmail({\n        emailId: EMAIL_IDS.CONTACT_US,\n        address,\n        params: { name: 'Florian Bienefelt' },\n      }).then(() =>\n        checkEmails().then((emails) => {\n          expect(emails.length).to.equal(1);\n          expect(emails[0]).to.deep.include({\n            emailId: EMAIL_IDS.CONTACT_US,\n            address,\n          });\n          expect(emails[0].template.template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION.mandrillId);\n          expect(emails[0].response.status).to.equal('sent');\n        }));\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/email/server/test/EmailService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/email/server/test/EmailService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet checkEmails;\nmodule.link(\"../../../../utils/testHelpers\", {\n  checkEmails(v) {\n    checkEmails = v;\n  }\n\n}, 2);\nlet EMAIL_IDS, EMAIL_TEMPLATES;\nmodule.link(\"../../emailConstants\", {\n  EMAIL_IDS(v) {\n    EMAIL_IDS = v;\n  },\n\n  EMAIL_TEMPLATES(v) {\n    EMAIL_TEMPLATES = v;\n  }\n\n}, 3);\nlet EmailService, isEmailTestEnv;\nmodule.link(\"../EmailService\", {\n  default(v) {\n    EmailService = v;\n  },\n\n  isEmailTestEnv(v) {\n    isEmailTestEnv = v;\n  }\n\n}, 4);\nlet setupMandrill;\nmodule.link(\"../mandrill\", {\n  setupMandrill(v) {\n    setupMandrill = v;\n  }\n\n}, 5);\nsetupMandrill();\ndescribe('EmailService', function () {\n  this.timeout(10000);\n  beforeEach(() => {\n    resetDatabase();\n  });\n  it('emailTestEnv should be true', () => {\n    expect(isEmailTestEnv).to.equal(true);\n  });\n  describe('renderTemplate', () => {\n    it('should not throw', () => {\n      const emailId = EMAIL_IDS.ENROLL_ACCOUNT;\n      const template = EmailService.getAccountsTemplate(emailId, {\n        user: {\n          roles: 'user'\n        },\n        url: 'stuff/enroll-account/hello'\n      });\n      expect(() => EmailService.renderTemplate(template, emailId)).to.not.throw();\n    });\n  });\n  describe('sendEmail', () => {\n    it('should add emails in the test database and send them with the test key', () => {\n      const address = 'florian@e-potek.ch';\n      return EmailService.sendEmail({\n        emailId: EMAIL_IDS.CONTACT_US,\n        address,\n        params: {\n          name: 'Florian Bienefelt'\n        }\n      }).then(() => checkEmails().then(emails => {\n        expect(emails.length).to.equal(1);\n        expect(emails[0]).to.deep.include({\n          emailId: EMAIL_IDS.CONTACT_US,\n          address\n        });\n        expect(emails[0].template.template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION.mandrillId);\n        expect(emails[0].response.status).to.equal('sent');\n      }));\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/email/server/test/EmailService.test.js"],"names":["setupMandrill","describe","beforeEach","resetDatabase","it","expect","emailId","EMAIL_IDS","template","user","roles","url","EmailService","address","params","name","emails","EMAIL_TEMPLATES"],"mappings":"AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,uBAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,WAAA;AAAA,MAAA,CAAA,IAAA,CAAA,+BAAA,EAAA;AAAA,EAAA,WAAA,CAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,SAAA,EAAA,eAAA;AAAA,MAAA,CAAA,IAAA,CAAA,sBAAA,EAAA;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,eAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,aAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AASAA,aAAa;AAEbC,QAAQ,CAAA,cAAA,EAAiB,YAAY;AACnC,OAAA,OAAA,CAAA,KAAA;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfC,IAAAA,aAAa;AADfD,GAAU,CAAVA;AAIAE,EAAAA,EAAE,CAAA,6BAAA,EAAgC,MAAM;AACtCC,IAAAA,MAAM,CAANA,cAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AADFD,GAAE,CAAFA;AAIAH,EAAAA,QAAQ,CAAA,gBAAA,EAAmB,MAAM;AAC/BG,IAAAA,EAAE,CAAA,kBAAA,EAAqB,MAAM;AAC3B,YAAME,OAAO,GAAGC,SAAS,CAAzB,cAAA;AACA,YAAMC,QAAQ,GAAG,YAAY,CAAZ,mBAAA,CAAA,OAAA,EAA0C;AACzDC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SADmD;AAEzDC,QAAAA,GAAG,EAAE;AAFoD,OAA1C,CAAjB;AAIAN,MAAAA,MAAM,CAAC,MACLO,YAAY,CAAZA,cAAAA,CAAAA,QAAAA,EADFP,OACEO,CADI,CAANP,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,KAAAA;AANFD,KAAE,CAAFA;AADFH,GAAQ,CAARA;AAYAA,EAAAA,QAAQ,CAAA,WAAA,EAAc,MAAM;AAC1BG,IAAAA,EAAE,CAAA,wEAAA,EAA2E,MAAM;AACjF,YAAMS,OAAO,GAAb,oBAAA;AAEA,aAAO,YAAY,CAAZ,SAAA,CAAuB;AAC5BP,QAAAA,OAAO,EAAEC,SAAS,CADU,UAAA;AAAA,QAAA,OAAA;AAG5BO,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AAHoB,OAAvB,EAAA,IAAA,CAIC,MACN,WAAW,GAAX,IAAA,CAAoBC,MAAD,IAAY;AAC7BX,QAAAA,MAAM,CAACW,MAAM,CAAbX,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,QAAAA,MAAM,CAACW,MAAM,CAAbX,CAAa,CAAP,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CAAkC;AAChCC,UAAAA,OAAO,EAAEC,SAAS,CADc,UAAA;AAEhCM,UAAAA;AAFgC,SAAlCR;AAIAA,QAAAA,MAAM,CAACW,MAAM,CAANA,CAAM,CAANA,CAAAA,QAAAA,CAAPX,aAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAkDY,eAAe,CAAfA,YAAAA,CAAlDZ,UAAAA;AACAA,QAAAA,MAAM,CAACW,MAAM,CAANA,CAAM,CAANA,CAAAA,QAAAA,CAAPX,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,MAAAA;AAZJ,OAKE,CALK,CAAP;AAHFD,KAAE,CAAFA;AADFH,GAAQ,CAARA;AAvBFA,CAAQ,CAARA","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { checkEmails } from '../../../../utils/testHelpers';\nimport { EMAIL_IDS, EMAIL_TEMPLATES } from '../../emailConstants';\nimport EmailService, { isEmailTestEnv } from '../EmailService';\nimport { setupMandrill } from '../mandrill';\n\nsetupMandrill();\n\ndescribe('EmailService', function () {\n  this.timeout(10000);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  it('emailTestEnv should be true', () => {\n    expect(isEmailTestEnv).to.equal(true);\n  });\n\n  describe('renderTemplate', () => {\n    it('should not throw', () => {\n      const emailId = EMAIL_IDS.ENROLL_ACCOUNT;\n      const template = EmailService.getAccountsTemplate(emailId, {\n        user: { roles: 'user' },\n        url: 'stuff/enroll-account/hello',\n      });\n      expect(() =>\n        EmailService.renderTemplate(template, emailId)).to.not.throw();\n    });\n  });\n\n  describe('sendEmail', () => {\n    it('should add emails in the test database and send them with the test key', () => {\n      const address = 'florian@e-potek.ch';\n\n      return EmailService.sendEmail({\n        emailId: EMAIL_IDS.CONTACT_US,\n        address,\n        params: { name: 'Florian Bienefelt' },\n      }).then(() =>\n        checkEmails().then((emails) => {\n          expect(emails.length).to.equal(1);\n          expect(emails[0]).to.deep.include({\n            emailId: EMAIL_IDS.CONTACT_US,\n            address,\n          });\n          expect(emails[0].template.template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION.mandrillId);\n          expect(emails[0].response.status).to.equal('sent');\n        }));\n    });\n  });\n});\n"]},"sourceType":"script","hash":"accf2793aa87205860462c2aabf376316c7668f5"}

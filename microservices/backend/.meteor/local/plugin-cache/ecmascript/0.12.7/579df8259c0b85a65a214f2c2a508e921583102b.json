{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/9.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/migrations/server/test/9.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/9.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/migrations/server/test/9.test.js"],"names":["expect","resetDatabase","STEPS","Loans","up","down","describe","beforeEach","it","rawCollection","insert","_id","name","step","then","find","forEach","expectedStep","SOLVENCY","REQUEST","OFFERS","CLOSING","to","equal"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { STEPS } from 'core/api/loans/loanConstants';\nimport { Loans } from '../../..';\nimport { up, down } from '../9';\n\ndescribe('Migration 9', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('up', () => {\n    it('rename loan step', () =>\n      Loans.rawCollection()\n        .insert({ _id: 'test', name: '18-0001', step: 'PREPARATION' })\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test2',\n            name: '18-0002',\n            step: 'FIND_LENDER',\n          }))\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test3',\n            name: '18-0003',\n            step: 'GET_CONTRACT',\n          }))\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test4',\n            name: '18-0004',\n            step: 'CLOSING',\n          }))\n        .then(up)\n        .then(() => {\n          Loans.find({}).forEach(({ step, _id }) => {\n            let expectedStep;\n            switch (_id) {\n            case 'test':\n              expectedStep = STEPS.SOLVENCY;\n              break;\n            case 'test2':\n              expectedStep = STEPS.REQUEST;\n              break;\n            case 'test3':\n              expectedStep = STEPS.OFFERS;\n              break;\n            case 'test4':\n              expectedStep = STEPS.CLOSING;\n              break;\n            default:\n              break;\n            }\n            expect(step).to.equal(expectedStep);\n          });\n        }));\n  });\n\n  describe('down', () => {\n    it('removes applicationType', () =>\n      Loans.rawCollection()\n        .insert({ _id: 'test', name: '18-0001', step: STEPS.SOLVENCY })\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test2',\n            name: '18-0002',\n            step: STEPS.REQUEST,\n          }))\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test3',\n            name: '18-0003',\n            step: STEPS.OFFERS,\n          }))\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test4',\n            name: '18-0004',\n            step: STEPS.CLOSING,\n          }))\n        .then(down)\n        .then(() => {\n          Loans.find({}).forEach(({ step, _id }) => {\n            let expectedStep;\n            switch (_id) {\n            case 'test':\n              expectedStep = 'PREPARATION';\n              break;\n            case 'test2':\n              expectedStep = 'FIND_LENDER';\n              break;\n            case 'test3':\n              expectedStep = 'GET_CONTRACT';\n              break;\n            case 'test4':\n              expectedStep = 'CLOSING';\n              break;\n            default:\n              break;\n            }\n            expect(step).to.equal(expectedStep);\n          });\n        }));\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/9.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/migrations/server/test/9.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet STEPS;\nmodule.link(\"../../../loans/loanConstants\", {\n  STEPS(v) {\n    STEPS = v;\n  }\n\n}, 2);\nlet Loans;\nmodule.link(\"../../..\", {\n  Loans(v) {\n    Loans = v;\n  }\n\n}, 3);\nlet up, down;\nmodule.link(\"../9\", {\n  up(v) {\n    up = v;\n  },\n\n  down(v) {\n    down = v;\n  }\n\n}, 4);\ndescribe('Migration 9', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('up', () => {\n    it('rename loan step', () => Loans.rawCollection().insert({\n      _id: 'test',\n      name: '18-0001',\n      step: 'PREPARATION'\n    }).then(() => Loans.rawCollection().insert({\n      _id: 'test2',\n      name: '18-0002',\n      step: 'FIND_LENDER'\n    })).then(() => Loans.rawCollection().insert({\n      _id: 'test3',\n      name: '18-0003',\n      step: 'GET_CONTRACT'\n    })).then(() => Loans.rawCollection().insert({\n      _id: 'test4',\n      name: '18-0004',\n      step: 'CLOSING'\n    })).then(up).then(() => {\n      Loans.find({}).forEach(({\n        step,\n        _id\n      }) => {\n        let expectedStep;\n\n        switch (_id) {\n          case 'test':\n            expectedStep = STEPS.SOLVENCY;\n            break;\n\n          case 'test2':\n            expectedStep = STEPS.REQUEST;\n            break;\n\n          case 'test3':\n            expectedStep = STEPS.OFFERS;\n            break;\n\n          case 'test4':\n            expectedStep = STEPS.CLOSING;\n            break;\n\n          default:\n            break;\n        }\n\n        expect(step).to.equal(expectedStep);\n      });\n    }));\n  });\n  describe('down', () => {\n    it('removes applicationType', () => Loans.rawCollection().insert({\n      _id: 'test',\n      name: '18-0001',\n      step: STEPS.SOLVENCY\n    }).then(() => Loans.rawCollection().insert({\n      _id: 'test2',\n      name: '18-0002',\n      step: STEPS.REQUEST\n    })).then(() => Loans.rawCollection().insert({\n      _id: 'test3',\n      name: '18-0003',\n      step: STEPS.OFFERS\n    })).then(() => Loans.rawCollection().insert({\n      _id: 'test4',\n      name: '18-0004',\n      step: STEPS.CLOSING\n    })).then(down).then(() => {\n      Loans.find({}).forEach(({\n        step,\n        _id\n      }) => {\n        let expectedStep;\n\n        switch (_id) {\n          case 'test':\n            expectedStep = 'PREPARATION';\n            break;\n\n          case 'test2':\n            expectedStep = 'FIND_LENDER';\n            break;\n\n          case 'test3':\n            expectedStep = 'GET_CONTRACT';\n            break;\n\n          case 'test4':\n            expectedStep = 'CLOSING';\n            break;\n\n          default:\n            break;\n        }\n\n        expect(step).to.equal(expectedStep);\n      });\n    }));\n  });\n});","map":{"version":3,"sources":["imports/core/api/migrations/server/test/9.test.js"],"names":["describe","beforeEach","resetDatabase","it","_id","name","step","Loans","expectedStep","STEPS","expect","SOLVENCY","REQUEST","OFFERS","CLOSING"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { STEPS } from 'core/api/loans/loanConstants';\nimport { Loans } from '../../..';\nimport { up, down } from '../9';\n\ndescribe('Migration 9', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('up', () => {\n    it('rename loan step', () =>\n      Loans.rawCollection()\n        .insert({ _id: 'test', name: '18-0001', step: 'PREPARATION' })\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test2',\n            name: '18-0002',\n            step: 'FIND_LENDER',\n          }))\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test3',\n            name: '18-0003',\n            step: 'GET_CONTRACT',\n          }))\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test4',\n            name: '18-0004',\n            step: 'CLOSING',\n          }))\n        .then(up)\n        .then(() => {\n          Loans.find({}).forEach(({ step, _id }) => {\n            let expectedStep;\n            switch (_id) {\n            case 'test':\n              expectedStep = STEPS.SOLVENCY;\n              break;\n            case 'test2':\n              expectedStep = STEPS.REQUEST;\n              break;\n            case 'test3':\n              expectedStep = STEPS.OFFERS;\n              break;\n            case 'test4':\n              expectedStep = STEPS.CLOSING;\n              break;\n            default:\n              break;\n            }\n            expect(step).to.equal(expectedStep);\n          });\n        }));\n  });\n\n  describe('down', () => {\n    it('removes applicationType', () =>\n      Loans.rawCollection()\n        .insert({ _id: 'test', name: '18-0001', step: STEPS.SOLVENCY })\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test2',\n            name: '18-0002',\n            step: STEPS.REQUEST,\n          }))\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test3',\n            name: '18-0003',\n            step: STEPS.OFFERS,\n          }))\n        .then(() =>\n          Loans.rawCollection().insert({\n            _id: 'test4',\n            name: '18-0004',\n            step: STEPS.CLOSING,\n          }))\n        .then(down)\n        .then(() => {\n          Loans.find({}).forEach(({ step, _id }) => {\n            let expectedStep;\n            switch (_id) {\n            case 'test':\n              expectedStep = 'PREPARATION';\n              break;\n            case 'test2':\n              expectedStep = 'FIND_LENDER';\n              break;\n            case 'test3':\n              expectedStep = 'GET_CONTRACT';\n              break;\n            case 'test4':\n              expectedStep = 'CLOSING';\n              break;\n            default:\n              break;\n            }\n            expect(step).to.equal(expectedStep);\n          });\n        }));\n  });\n});\n"]},"sourceType":"script","hash":"579df8259c0b85a65a214f2c2a508e921583102b"}

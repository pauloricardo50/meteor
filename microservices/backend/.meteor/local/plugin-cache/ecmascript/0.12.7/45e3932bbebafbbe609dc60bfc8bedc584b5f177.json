{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/lmieulet:meteor-coverage/server/report/report-http.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/lmieulet:meteor-coverage/server/report/report-http.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/lmieulet:meteor-coverage/server/report/report-http.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/lmieulet:meteor-coverage/server/report/report-http.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/lmieulet:meteor-coverage/server/report/report-http.js"}},"code":"let CoverageData;\nmodule.link(\"../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 0);\nlet Conf;\nmodule.link(\"../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 1);\nlet Core;\nmodule.link(\"../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 2);\n\n// If we change Npm.require('istanbul-reports') into import a from 'istanbul-reports'\n// the __dirname change and the  istanbul dependency fails\n// See istanbul-reports\n// With Npm.require : /Users/Leo/Webstorm/meteor-container/packages/meteor-coverage/.npm/package/node_modules/istanbul-reports/lib/json\nconst Report = Npm.require('istanbul-lib-report'),\n      ReportImpl = Npm.require('istanbul-reports');\n\nmodule.exportDefault(class {\n  constructor(res, options) {\n    this.res = res;\n    this.filepath = '';\n    this.options = options;\n    this.options.prefix = '/coverage/';\n    this.opts = this.createOpts();\n  }\n\n  createOpts() {\n    const prefix = this.options.prefix;\n    return {\n      verbose: Conf.IS_COVERAGE_VERBOSE,\n      linkMapper: {\n        getPath: function (node) {\n          /* istanbul ignore else */\n          if (typeof node === 'string') {\n            return node;\n          }\n\n          return node.getQualifiedName();\n        },\n        relativePath: function (source, target) {\n          return prefix + 'show?p=' + this.getPath(target);\n        },\n        assetPath: function (node, name) {\n          return prefix + 'asset/' + name;\n        }\n      }\n    };\n  }\n\n  generate() {\n    var coverage = Core.getCoverageObject();\n    /* istanbul ignore else */\n\n    if (!(coverage && Object.keys(coverage).length > 0)) {\n      this.res.setHeader('Content-type', 'text/plain');\n      return this.res.end('No coverage information has been collected');\n    }\n\n    this.res.setHeader('Content-type', 'text/html');\n    this.alterFS(this.res);\n    var context = this.getContext(this.res);\n    var report = ReportImpl.create('html', this.opts);\n\n    if (this.options.filepath) {\n      var child = CoverageData.getFileReport(coverage, this.options.filepath);\n      report.onDetail(child, context);\n    } else {\n      var root = CoverageData.getTreeReport(coverage);\n      report.onSummary(root, context);\n    }\n  }\n\n  getContext(res) {\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writerForDir: {\n          writeFile: function () {\n            return res;\n          }\n        },\n        writeFile: function () {\n          return res;\n        }\n      }\n    });\n    return context;\n  } // istanbul-reports expect to save HTML report to the file system and not over network\n\n\n  alterFS(res) {\n    res.close = function () {\n      this.end();\n    };\n  }\n\n});","map":{"version":3,"sources":["packages/lmieulet:meteor-coverage/server/report/report-http.js"],"names":["CoverageData","module","link","default","v","Conf","Core","Report","Npm","require","ReportImpl","exportDefault","constructor","res","options","filepath","prefix","opts","createOpts","verbose","IS_COVERAGE_VERBOSE","linkMapper","getPath","node","getQualifiedName","relativePath","source","target","assetPath","name","generate","coverage","getCoverageObject","Object","keys","length","setHeader","end","alterFS","context","getContext","report","create","child","getFileReport","onDetail","root","getTreeReport","onSummary","createContext","defineProperty","value","writerForDir","writeFile","close"],"mappings":"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","sourcesContent":["import CoverageData from '../services/coverage-data';\nimport Conf from '../context/conf';\nimport Core from '../services/core';\n// If we change Npm.require('istanbul-reports') into import a from 'istanbul-reports'\n// the __dirname change and the  istanbul dependency fails\n// See istanbul-reports\n// With Npm.require : /Users/Leo/Webstorm/meteor-container/packages/meteor-coverage/.npm/package/node_modules/istanbul-reports/lib/json\n\nconst Report = Npm.require('istanbul-lib-report'),\n  ReportImpl = Npm.require('istanbul-reports');\nexport default class {\n  constructor(res, options) {\n    this.res = res;\n    this.filepath = '';\n    this.options = options;\n    this.options.prefix = '/coverage/';\n    this.opts = this.createOpts();\n  }\n\n  createOpts() {\n    const prefix = this.options.prefix;\n    return {\n      verbose: Conf.IS_COVERAGE_VERBOSE,\n      linkMapper: {\n        getPath: function (node) {\n          /* istanbul ignore else */\n          if (typeof node === 'string') {\n            return node;\n          }\n          return node.getQualifiedName();\n        },\n        relativePath: function (source, target) {\n          return prefix + 'show?p=' + this.getPath(target);\n        },\n        assetPath: function (node, name) {\n          return prefix + 'asset/' + name;\n        }\n      }\n    };\n  }\n\n  generate() {\n    var coverage = Core.getCoverageObject();\n    /* istanbul ignore else */\n    if (!(coverage && Object.keys(coverage).length > 0)) {\n      this.res.setHeader('Content-type', 'text/plain');\n      return this.res.end('No coverage information has been collected');\n    }\n    this.res.setHeader('Content-type', 'text/html');\n    this.alterFS(this.res);\n    var context = this.getContext(this.res);\n    var report = ReportImpl.create('html', this.opts);\n    if (this.options.filepath) {\n      var child = CoverageData.getFileReport(coverage, this.options.filepath);\n      report.onDetail(child, context);\n    } else {\n      var root = CoverageData.getTreeReport(coverage);\n      report.onSummary(root, context);\n    }\n  }\n\n  getContext(res) {\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writerForDir: {\n          writeFile: function () {\n            return res;\n          }\n        },\n        writeFile: function () {\n          return res;\n        }\n      }\n    });\n    return context;\n  }\n\n  // istanbul-reports expect to save HTML report to the file system and not over network\n  alterFS(res) {\n    res.close = function () {\n      this.end();\n    };\n  }\n\n}\n"]},"sourceType":"script","hash":"45e3932bbebafbbe609dc60bfc8bedc584b5f177"}

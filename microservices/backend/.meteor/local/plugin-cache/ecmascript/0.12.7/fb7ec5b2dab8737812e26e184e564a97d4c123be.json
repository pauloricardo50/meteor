{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/helpers/server/test/CollectionService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/helpers/server/test/CollectionService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/helpers/server/test/CollectionService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/helpers/server/test/CollectionService.test.js"],"names":["expect","resetDatabase","Mongo","SimpleSchema","CollectionService","CollectionA","Collection","CollectionB","attachSchema","data","String","oneLink","type","optional","oneMetaLink","Object","manyLink","Array","manyMetaLink","addLinks","one","collection","field","metadata","oneMeta","many","manyMeta","oneA","inversedBy","oneMetaA","manyA","manyMetaA","CollectionAService","constructor","CollectionBService","AService","BService","describe","ADocId","BDocId","AQuery","docId","$filters","_id","meta","BQuery","beforeEach","insert","it","addLink","id","linkName","linkId","createQuery","fetchOne","to","deep","include","$metadata","skip"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nimport CollectionService from '../../CollectionService';\n\nconst CollectionA = new Mongo.Collection('collectionA');\nconst CollectionB = new Mongo.Collection('collectionB');\n\nCollectionA.attachSchema(new SimpleSchema({\n  data: String,\n  oneLink: { type: String, optional: true },\n  oneMetaLink: { type: Object, optional: true },\n  'oneMetaLink._id': { type: String, optional: true },\n  'oneMetaLink.meta': { type: String, optional: true },\n  manyLink: { type: Array, optional: true },\n  'manyLink.$': { type: String, optional: true },\n  'manyLink.$._id': { type: String, optional: true },\n  manyMetaLink: { type: Array, optional: true },\n  'manyMetaLink.$': { type: Object, optional: true },\n  'manyMetaLink.$._id': { type: String, optional: true },\n  'manyMetaLink.$.meta': { type: String, optional: true },\n}));\n\nCollectionB.attachSchema(new SimpleSchema({ data: String }));\n\nCollectionA.addLinks({\n  one: {\n    collection: CollectionB,\n    field: 'oneLink',\n    type: 'one',\n    metadata: false,\n  },\n  oneMeta: {\n    collection: CollectionB,\n    field: 'oneMetaLink',\n    type: 'one',\n    metadata: true,\n  },\n  many: {\n    collection: CollectionB,\n    field: 'manyLink',\n    type: 'many',\n    metadata: false,\n  },\n  manyMeta: {\n    collection: CollectionB,\n    field: 'manyMetaLink',\n    type: 'many',\n    metadata: true,\n  },\n});\n\nCollectionB.addLinks({\n  oneA: {\n    collection: CollectionA,\n    inversedBy: 'one',\n  },\n  oneMetaA: {\n    collection: CollectionA,\n    inversedBy: 'oneMeta',\n  },\n  manyA: {\n    collection: CollectionA,\n    inversedBy: 'many',\n  },\n  manyMetaA: {\n    collection: CollectionA,\n    inversedBy: 'manyMeta',\n  },\n});\n\nclass CollectionAService extends CollectionService {\n  constructor() {\n    super(CollectionA);\n  }\n}\n\nclass CollectionBService extends CollectionService {\n  constructor() {\n    super(CollectionB);\n  }\n}\n\nconst AService = new CollectionAService();\nconst BService = new CollectionBService();\n\ndescribe('CollectionService', () => {\n  let ADocId;\n  let BDocId;\n\n  const AQuery = docId => ({\n    $filters: { _id: docId },\n    one: { _id: 1 },\n    oneMeta: { _id: 1, metadata: { meta: 1 } },\n    many: { _id: 1 },\n    manyMeta: { _id: 1, metadata: { meta: 1 } },\n  });\n\n  const BQuery = docId => ({\n    $filters: { _id: docId },\n    oneA: { _id: 1 },\n    oneMetaA: { _id: 1, metadata: { meta: 1 } },\n    manyA: { _id: 1 },\n    manyMetaA: { _id: 1, metadata: { meta: 1 } },\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    ADocId = AService.insert({ data: 'AData' });\n    BDocId = BService.insert({ data: 'BData' });\n  });\n\n  describe('addLink', () => {\n    describe('should add link documents when link strategy is', () => {\n      it('one with direct link', () => {\n        AService.addLink({ id: ADocId, linkName: 'one', linkId: BDocId });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          one: { _id: BDocId },\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneA: [{ _id: ADocId }],\n        });\n      });\n      it('one with inverse link', () => {\n        BService.addLink({ id: BDocId, linkName: 'oneA', linkId: ADocId });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          one: { _id: BDocId },\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneA: [{ _id: ADocId }],\n        });\n      });\n      it('one-meta with direct link', () => {\n        const metadata = { meta: 'someData' };\n        AService.addLink({\n          id: ADocId,\n          linkName: 'oneMeta',\n          linkId: BDocId,\n          metadata: { ...metadata },\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          oneMeta: { _id: BDocId, $metadata: metadata },\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneMetaA: [{ _id: ADocId, $metadata: metadata }],\n        });\n      });\n      // https://github.com/cult-of-coders/grapher/issues/335\n      it.skip('one-meta with inverse link', () => {\n        const metadata = { meta: 'someData' };\n        BService.addLink({\n          id: BDocId,\n          linkName: 'oneMetaA',\n          linkId: ADocId,\n          metadata: { ...metadata },\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          oneMeta: { _id: BDocId, $metadata: metadata },\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneMetaA: [{ _id: ADocId, $metadata: metadata }],\n        });\n      });\n      it('many with direct link', () => {\n        AService.addLink({\n          id: ADocId,\n          linkName: 'many',\n          linkId: BDocId,\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          many: [{ _id: BDocId }],\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyA: [{ _id: ADocId }],\n        });\n      });\n      it('many with inverse link', () => {\n        BService.addLink({\n          id: BDocId,\n          linkName: 'manyA',\n          linkId: ADocId,\n        });\n\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          many: [{ _id: BDocId }],\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyA: [{ _id: ADocId }],\n        });\n      });\n      it('many-meta with direct link', () => {\n        const metadata = { meta: 'someData' };\n        AService.addLink({\n          id: ADocId,\n          linkName: 'manyMeta',\n          linkId: BDocId,\n          metadata: { ...metadata },\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          manyMeta: [{ _id: BDocId, $metadata: metadata }],\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyMetaA: [{ _id: ADocId, $metadata: metadata }],\n        });\n      });\n\n      it('many-meta with inverse link', () => {\n        const metadata = { meta: 'someData' };\n        BService.addLink({\n          id: BDocId,\n          linkName: 'manyMetaA',\n          linkId: ADocId,\n          metadata: { ...metadata },\n        });\n\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          manyMeta: [{ _id: BDocId, $metadata: metadata }],\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyMetaA: [{ _id: ADocId, $metadata: metadata }],\n        });\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/helpers/server/test/CollectionService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/helpers/server/test/CollectionService.test.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 3);\nlet CollectionService;\nmodule.link(\"../../CollectionService\", {\n  default(v) {\n    CollectionService = v;\n  }\n\n}, 4);\nconst CollectionA = new Mongo.Collection('collectionA');\nconst CollectionB = new Mongo.Collection('collectionB');\nCollectionA.attachSchema(new SimpleSchema({\n  data: String,\n  oneLink: {\n    type: String,\n    optional: true\n  },\n  oneMetaLink: {\n    type: Object,\n    optional: true\n  },\n  'oneMetaLink._id': {\n    type: String,\n    optional: true\n  },\n  'oneMetaLink.meta': {\n    type: String,\n    optional: true\n  },\n  manyLink: {\n    type: Array,\n    optional: true\n  },\n  'manyLink.$': {\n    type: String,\n    optional: true\n  },\n  'manyLink.$._id': {\n    type: String,\n    optional: true\n  },\n  manyMetaLink: {\n    type: Array,\n    optional: true\n  },\n  'manyMetaLink.$': {\n    type: Object,\n    optional: true\n  },\n  'manyMetaLink.$._id': {\n    type: String,\n    optional: true\n  },\n  'manyMetaLink.$.meta': {\n    type: String,\n    optional: true\n  }\n}));\nCollectionB.attachSchema(new SimpleSchema({\n  data: String\n}));\nCollectionA.addLinks({\n  one: {\n    collection: CollectionB,\n    field: 'oneLink',\n    type: 'one',\n    metadata: false\n  },\n  oneMeta: {\n    collection: CollectionB,\n    field: 'oneMetaLink',\n    type: 'one',\n    metadata: true\n  },\n  many: {\n    collection: CollectionB,\n    field: 'manyLink',\n    type: 'many',\n    metadata: false\n  },\n  manyMeta: {\n    collection: CollectionB,\n    field: 'manyMetaLink',\n    type: 'many',\n    metadata: true\n  }\n});\nCollectionB.addLinks({\n  oneA: {\n    collection: CollectionA,\n    inversedBy: 'one'\n  },\n  oneMetaA: {\n    collection: CollectionA,\n    inversedBy: 'oneMeta'\n  },\n  manyA: {\n    collection: CollectionA,\n    inversedBy: 'many'\n  },\n  manyMetaA: {\n    collection: CollectionA,\n    inversedBy: 'manyMeta'\n  }\n});\n\nclass CollectionAService extends CollectionService {\n  constructor() {\n    super(CollectionA);\n  }\n\n}\n\nclass CollectionBService extends CollectionService {\n  constructor() {\n    super(CollectionB);\n  }\n\n}\n\nconst AService = new CollectionAService();\nconst BService = new CollectionBService();\ndescribe('CollectionService', () => {\n  let ADocId;\n  let BDocId;\n\n  const AQuery = docId => ({\n    $filters: {\n      _id: docId\n    },\n    one: {\n      _id: 1\n    },\n    oneMeta: {\n      _id: 1,\n      metadata: {\n        meta: 1\n      }\n    },\n    many: {\n      _id: 1\n    },\n    manyMeta: {\n      _id: 1,\n      metadata: {\n        meta: 1\n      }\n    }\n  });\n\n  const BQuery = docId => ({\n    $filters: {\n      _id: docId\n    },\n    oneA: {\n      _id: 1\n    },\n    oneMetaA: {\n      _id: 1,\n      metadata: {\n        meta: 1\n      }\n    },\n    manyA: {\n      _id: 1\n    },\n    manyMetaA: {\n      _id: 1,\n      metadata: {\n        meta: 1\n      }\n    }\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    ADocId = AService.insert({\n      data: 'AData'\n    });\n    BDocId = BService.insert({\n      data: 'BData'\n    });\n  });\n  describe('addLink', () => {\n    describe('should add link documents when link strategy is', () => {\n      it('one with direct link', () => {\n        AService.addLink({\n          id: ADocId,\n          linkName: 'one',\n          linkId: BDocId\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          one: {\n            _id: BDocId\n          }\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneA: [{\n            _id: ADocId\n          }]\n        });\n      });\n      it('one with inverse link', () => {\n        BService.addLink({\n          id: BDocId,\n          linkName: 'oneA',\n          linkId: ADocId\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          one: {\n            _id: BDocId\n          }\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneA: [{\n            _id: ADocId\n          }]\n        });\n      });\n      it('one-meta with direct link', () => {\n        const metadata = {\n          meta: 'someData'\n        };\n        AService.addLink({\n          id: ADocId,\n          linkName: 'oneMeta',\n          linkId: BDocId,\n          metadata: (0, _objectSpread2.default)({}, metadata)\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          oneMeta: {\n            _id: BDocId,\n            $metadata: metadata\n          }\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneMetaA: [{\n            _id: ADocId,\n            $metadata: metadata\n          }]\n        });\n      }); // https://github.com/cult-of-coders/grapher/issues/335\n\n      it.skip('one-meta with inverse link', () => {\n        const metadata = {\n          meta: 'someData'\n        };\n        BService.addLink({\n          id: BDocId,\n          linkName: 'oneMetaA',\n          linkId: ADocId,\n          metadata: (0, _objectSpread2.default)({}, metadata)\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          oneMeta: {\n            _id: BDocId,\n            $metadata: metadata\n          }\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneMetaA: [{\n            _id: ADocId,\n            $metadata: metadata\n          }]\n        });\n      });\n      it('many with direct link', () => {\n        AService.addLink({\n          id: ADocId,\n          linkName: 'many',\n          linkId: BDocId\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          many: [{\n            _id: BDocId\n          }]\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyA: [{\n            _id: ADocId\n          }]\n        });\n      });\n      it('many with inverse link', () => {\n        BService.addLink({\n          id: BDocId,\n          linkName: 'manyA',\n          linkId: ADocId\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          many: [{\n            _id: BDocId\n          }]\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyA: [{\n            _id: ADocId\n          }]\n        });\n      });\n      it('many-meta with direct link', () => {\n        const metadata = {\n          meta: 'someData'\n        };\n        AService.addLink({\n          id: ADocId,\n          linkName: 'manyMeta',\n          linkId: BDocId,\n          metadata: (0, _objectSpread2.default)({}, metadata)\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          manyMeta: [{\n            _id: BDocId,\n            $metadata: metadata\n          }]\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyMetaA: [{\n            _id: ADocId,\n            $metadata: metadata\n          }]\n        });\n      });\n      it('many-meta with inverse link', () => {\n        const metadata = {\n          meta: 'someData'\n        };\n        BService.addLink({\n          id: BDocId,\n          linkName: 'manyMetaA',\n          linkId: ADocId,\n          metadata: (0, _objectSpread2.default)({}, metadata)\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          manyMeta: [{\n            _id: BDocId,\n            $metadata: metadata\n          }]\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyMetaA: [{\n            _id: ADocId,\n            $metadata: metadata\n          }]\n        });\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/helpers/server/test/CollectionService.test.js"],"names":["CollectionA","Mongo","CollectionB","data","oneLink","type","optional","oneMetaLink","manyLink","manyMetaLink","String","one","collection","field","metadata","oneMeta","many","manyMeta","oneA","inversedBy","oneMetaA","manyA","manyMetaA","constructor","AService","BService","describe","AQuery","docId","$filters","_id","meta","BQuery","beforeEach","resetDatabase","ADocId","BDocId","it","id","linkName","linkId","expect","$metadata"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nimport CollectionService from '../../CollectionService';\n\nconst CollectionA = new Mongo.Collection('collectionA');\nconst CollectionB = new Mongo.Collection('collectionB');\n\nCollectionA.attachSchema(new SimpleSchema({\n  data: String,\n  oneLink: { type: String, optional: true },\n  oneMetaLink: { type: Object, optional: true },\n  'oneMetaLink._id': { type: String, optional: true },\n  'oneMetaLink.meta': { type: String, optional: true },\n  manyLink: { type: Array, optional: true },\n  'manyLink.$': { type: String, optional: true },\n  'manyLink.$._id': { type: String, optional: true },\n  manyMetaLink: { type: Array, optional: true },\n  'manyMetaLink.$': { type: Object, optional: true },\n  'manyMetaLink.$._id': { type: String, optional: true },\n  'manyMetaLink.$.meta': { type: String, optional: true },\n}));\n\nCollectionB.attachSchema(new SimpleSchema({ data: String }));\n\nCollectionA.addLinks({\n  one: {\n    collection: CollectionB,\n    field: 'oneLink',\n    type: 'one',\n    metadata: false,\n  },\n  oneMeta: {\n    collection: CollectionB,\n    field: 'oneMetaLink',\n    type: 'one',\n    metadata: true,\n  },\n  many: {\n    collection: CollectionB,\n    field: 'manyLink',\n    type: 'many',\n    metadata: false,\n  },\n  manyMeta: {\n    collection: CollectionB,\n    field: 'manyMetaLink',\n    type: 'many',\n    metadata: true,\n  },\n});\n\nCollectionB.addLinks({\n  oneA: {\n    collection: CollectionA,\n    inversedBy: 'one',\n  },\n  oneMetaA: {\n    collection: CollectionA,\n    inversedBy: 'oneMeta',\n  },\n  manyA: {\n    collection: CollectionA,\n    inversedBy: 'many',\n  },\n  manyMetaA: {\n    collection: CollectionA,\n    inversedBy: 'manyMeta',\n  },\n});\n\nclass CollectionAService extends CollectionService {\n  constructor() {\n    super(CollectionA);\n  }\n}\n\nclass CollectionBService extends CollectionService {\n  constructor() {\n    super(CollectionB);\n  }\n}\n\nconst AService = new CollectionAService();\nconst BService = new CollectionBService();\n\ndescribe('CollectionService', () => {\n  let ADocId;\n  let BDocId;\n\n  const AQuery = docId => ({\n    $filters: { _id: docId },\n    one: { _id: 1 },\n    oneMeta: { _id: 1, metadata: { meta: 1 } },\n    many: { _id: 1 },\n    manyMeta: { _id: 1, metadata: { meta: 1 } },\n  });\n\n  const BQuery = docId => ({\n    $filters: { _id: docId },\n    oneA: { _id: 1 },\n    oneMetaA: { _id: 1, metadata: { meta: 1 } },\n    manyA: { _id: 1 },\n    manyMetaA: { _id: 1, metadata: { meta: 1 } },\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    ADocId = AService.insert({ data: 'AData' });\n    BDocId = BService.insert({ data: 'BData' });\n  });\n\n  describe('addLink', () => {\n    describe('should add link documents when link strategy is', () => {\n      it('one with direct link', () => {\n        AService.addLink({ id: ADocId, linkName: 'one', linkId: BDocId });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          one: { _id: BDocId },\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneA: [{ _id: ADocId }],\n        });\n      });\n      it('one with inverse link', () => {\n        BService.addLink({ id: BDocId, linkName: 'oneA', linkId: ADocId });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          one: { _id: BDocId },\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneA: [{ _id: ADocId }],\n        });\n      });\n      it('one-meta with direct link', () => {\n        const metadata = { meta: 'someData' };\n        AService.addLink({\n          id: ADocId,\n          linkName: 'oneMeta',\n          linkId: BDocId,\n          metadata: { ...metadata },\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          oneMeta: { _id: BDocId, $metadata: metadata },\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneMetaA: [{ _id: ADocId, $metadata: metadata }],\n        });\n      });\n      // https://github.com/cult-of-coders/grapher/issues/335\n      it.skip('one-meta with inverse link', () => {\n        const metadata = { meta: 'someData' };\n        BService.addLink({\n          id: BDocId,\n          linkName: 'oneMetaA',\n          linkId: ADocId,\n          metadata: { ...metadata },\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          oneMeta: { _id: BDocId, $metadata: metadata },\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          oneMetaA: [{ _id: ADocId, $metadata: metadata }],\n        });\n      });\n      it('many with direct link', () => {\n        AService.addLink({\n          id: ADocId,\n          linkName: 'many',\n          linkId: BDocId,\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          many: [{ _id: BDocId }],\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyA: [{ _id: ADocId }],\n        });\n      });\n      it('many with inverse link', () => {\n        BService.addLink({\n          id: BDocId,\n          linkName: 'manyA',\n          linkId: ADocId,\n        });\n\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          many: [{ _id: BDocId }],\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyA: [{ _id: ADocId }],\n        });\n      });\n      it('many-meta with direct link', () => {\n        const metadata = { meta: 'someData' };\n        AService.addLink({\n          id: ADocId,\n          linkName: 'manyMeta',\n          linkId: BDocId,\n          metadata: { ...metadata },\n        });\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          manyMeta: [{ _id: BDocId, $metadata: metadata }],\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyMetaA: [{ _id: ADocId, $metadata: metadata }],\n        });\n      });\n\n      it('many-meta with inverse link', () => {\n        const metadata = { meta: 'someData' };\n        BService.addLink({\n          id: BDocId,\n          linkName: 'manyMetaA',\n          linkId: ADocId,\n          metadata: { ...metadata },\n        });\n\n        expect(AService.createQuery(AQuery(ADocId)).fetchOne()).to.deep.include({\n          manyMeta: [{ _id: BDocId, $metadata: metadata }],\n        });\n        expect(BService.createQuery(BQuery(BDocId)).fetchOne()).to.deep.include({\n          manyMetaA: [{ _id: ADocId, $metadata: metadata }],\n        });\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"fb7ec5b2dab8737812e26e184e564a97d4c123be"}

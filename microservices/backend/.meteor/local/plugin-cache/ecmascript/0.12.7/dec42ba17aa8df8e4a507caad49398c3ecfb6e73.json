{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/test/FileService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/files/server/test/FileService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/test/FileService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/files/server/test/FileService.test.js"],"names":["Meteor","expect","FileService","S3Service","clearBucket","FILE_STATUS","docId","json","hello","binaryData","Buffer","from","JSON","stringify","fileName","key1","key2","key3","setupBucket","putObject","then","describe","timeout","before","settings","public","microservice","parent","pending","skip","beforeEach","it","expected","Key","listFilesForDoc","results","length","to","equal","forEach","result","index","deep","include","subdocument","nextStatus","setFileStatus","getObject","Metadata","status","error","setFileError","message","ERROR","newError","setFileValid","VALID","deleteAllFilesForDoc","files","groupFilesByCategory","category1","category2"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { expect } from 'chai';\n\nimport FileService from '../FileService';\nimport S3Service from '../S3Service';\nimport { clearBucket } from './S3Service.test';\nimport { FILE_STATUS } from '../../fileConstants';\n\nconst docId = 'someDocId';\nconst json = { hello: 'world' };\nconst binaryData = Buffer.from(JSON.stringify(json), 'utf-8');\nconst fileName = 'hello.json';\n\nconst key1 = `${docId}/a/first-${fileName}`;\nconst key2 = `${docId}/a/second-${fileName}`;\nconst key3 = `${docId}/b/third-${fileName}`;\n\nconst setupBucket = () =>\n  S3Service.putObject(binaryData, key1)\n    .then(() => S3Service.putObject(binaryData, key2))\n    .then(() => S3Service.putObject(binaryData, key3));\n\ndescribe('FileService', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'admin') {\n      // When running these tests in parallel, it breaks tests\n      this.parent.pending = true;\n      this.skip();\n    }\n  });\n\n  beforeEach(() => clearBucket().then(setupBucket));\n\n  describe('getFilesForDoc', () => {\n    it('lists all files uploaded to a doc', () => {\n      const expected = [{ Key: key1 }, { Key: key2 }, { Key: key3 }];\n      return FileService.listFilesForDoc(docId).then((results) => {\n        expect(results.length).to.equal(expected.length);\n        results.forEach((result, index) =>\n          expect(result).to.deep.include(expected[index]));\n      });\n    });\n\n    it('lists all files uploaded to a doc at a subdocument', () => {\n      const expected = [{ Key: key1 }, { Key: key2 }];\n      const subdocument = 'a';\n      return FileService.listFilesForDoc(docId, subdocument).then((results) => {\n        expect(results.length).to.equal(expected.length);\n        results.forEach((result, index) =>\n          expect(result).to.deep.include(expected[index]));\n      });\n    });\n  });\n\n  describe('setFileStatus', () => {\n    it('changes the status of a file', () => {\n      const nextStatus = 'VALID';\n      return FileService.setFileStatus(key1, nextStatus)\n        .then(() => S3Service.getObject(key1))\n        .then(({ Metadata: { status } }) =>\n          expect(status).to.equal(nextStatus));\n    });\n  });\n\n  describe('setFileError', () => {\n    it('Sets an error and status on a file', () => {\n      const error = 'Not good my bro.';\n      return FileService.setFileError(key1, error)\n        .then(() => S3Service.getObject(key1))\n        .then(({ Metadata: { message, status } }) => {\n          expect(status).to.equal(FILE_STATUS.ERROR);\n          expect(message).to.equal(error);\n        });\n    });\n  });\n\n  describe('setFileValid', () => {\n    it('Removes error from file and sets status to valid ', () => {\n      const newError = 'not good';\n      return FileService.setFileError(key1, newError)\n        .then(() => FileService.setFileValid(key1))\n        .then(() => S3Service.getObject(key1))\n        .then(({ Metadata: { message, status } }) => {\n          expect(status).to.equal(FILE_STATUS.VALID);\n          expect(message).to.equal('');\n        });\n    });\n  });\n\n  describe('deleteAllFilesForDoc', () => {\n    it('deletes all files at a subdocument', () => {\n      const subdocument = 'a';\n      const expected = [{ Key: key3 }];\n      return FileService.deleteAllFilesForDoc(docId, subdocument)\n        .then(() => FileService.listFilesForDoc(docId))\n        .then((results) => {\n          expect(results.length).to.equal(expected.length);\n          results.forEach((result, index) =>\n            expect(result).to.deep.include(expected[index]));\n        });\n    });\n\n    it('deletes all files for a mongoDB document', () =>\n      FileService.deleteAllFilesForDoc(docId)\n        .then(() => FileService.listFilesForDoc(docId))\n        .then(results => expect(results.length).to.equal(0)));\n  });\n\n  describe('groupFilesByCategory', () => {\n    it('groups 2 files in the same category', () => {\n      const files = [\n        { Key: 'asdf/category1/whatever.pdf' },\n        { Key: 'asdf/category1/dude.pdf' },\n      ];\n      expect(FileService.groupFilesByCategory(files)).to.deep.equal({\n        category1: files,\n      });\n    });\n\n    it('groups multiple files in multiple categories', () => {\n      const files = [\n        { Key: 'asdf/category1/whatever.pdf' },\n        { Key: 'asdf/category2/dude.pdf' },\n      ];\n      expect(FileService.groupFilesByCategory(files)).to.deep.equal({\n        category1: [files[0]],\n        category2: [files[1]],\n      });\n    });\n  });\n}).timeout(10000);\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/test/FileService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/files/server/test/FileService.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 1);\nlet FileService;\nmodule.link(\"../FileService\", {\n  default(v) {\n    FileService = v;\n  }\n\n}, 2);\nlet S3Service;\nmodule.link(\"../S3Service\", {\n  default(v) {\n    S3Service = v;\n  }\n\n}, 3);\nlet clearBucket;\nmodule.link(\"./S3Service.test\", {\n  clearBucket(v) {\n    clearBucket = v;\n  }\n\n}, 4);\nlet FILE_STATUS;\nmodule.link(\"../../fileConstants\", {\n  FILE_STATUS(v) {\n    FILE_STATUS = v;\n  }\n\n}, 5);\nconst docId = 'someDocId';\nconst json = {\n  hello: 'world'\n};\nconst binaryData = Buffer.from(JSON.stringify(json), 'utf-8');\nconst fileName = 'hello.json';\nconst key1 = `${docId}/a/first-${fileName}`;\nconst key2 = `${docId}/a/second-${fileName}`;\nconst key3 = `${docId}/b/third-${fileName}`;\n\nconst setupBucket = () => S3Service.putObject(binaryData, key1).then(() => S3Service.putObject(binaryData, key2)).then(() => S3Service.putObject(binaryData, key3));\n\ndescribe('FileService', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'admin') {\n      // When running these tests in parallel, it breaks tests\n      this.parent.pending = true;\n      this.skip();\n    }\n  });\n  beforeEach(() => clearBucket().then(setupBucket));\n  describe('getFilesForDoc', () => {\n    it('lists all files uploaded to a doc', () => {\n      const expected = [{\n        Key: key1\n      }, {\n        Key: key2\n      }, {\n        Key: key3\n      }];\n      return FileService.listFilesForDoc(docId).then(results => {\n        expect(results.length).to.equal(expected.length);\n        results.forEach((result, index) => expect(result).to.deep.include(expected[index]));\n      });\n    });\n    it('lists all files uploaded to a doc at a subdocument', () => {\n      const expected = [{\n        Key: key1\n      }, {\n        Key: key2\n      }];\n      const subdocument = 'a';\n      return FileService.listFilesForDoc(docId, subdocument).then(results => {\n        expect(results.length).to.equal(expected.length);\n        results.forEach((result, index) => expect(result).to.deep.include(expected[index]));\n      });\n    });\n  });\n  describe('setFileStatus', () => {\n    it('changes the status of a file', () => {\n      const nextStatus = 'VALID';\n      return FileService.setFileStatus(key1, nextStatus).then(() => S3Service.getObject(key1)).then(({\n        Metadata: {\n          status\n        }\n      }) => expect(status).to.equal(nextStatus));\n    });\n  });\n  describe('setFileError', () => {\n    it('Sets an error and status on a file', () => {\n      const error = 'Not good my bro.';\n      return FileService.setFileError(key1, error).then(() => S3Service.getObject(key1)).then(({\n        Metadata: {\n          message,\n          status\n        }\n      }) => {\n        expect(status).to.equal(FILE_STATUS.ERROR);\n        expect(message).to.equal(error);\n      });\n    });\n  });\n  describe('setFileValid', () => {\n    it('Removes error from file and sets status to valid ', () => {\n      const newError = 'not good';\n      return FileService.setFileError(key1, newError).then(() => FileService.setFileValid(key1)).then(() => S3Service.getObject(key1)).then(({\n        Metadata: {\n          message,\n          status\n        }\n      }) => {\n        expect(status).to.equal(FILE_STATUS.VALID);\n        expect(message).to.equal('');\n      });\n    });\n  });\n  describe('deleteAllFilesForDoc', () => {\n    it('deletes all files at a subdocument', () => {\n      const subdocument = 'a';\n      const expected = [{\n        Key: key3\n      }];\n      return FileService.deleteAllFilesForDoc(docId, subdocument).then(() => FileService.listFilesForDoc(docId)).then(results => {\n        expect(results.length).to.equal(expected.length);\n        results.forEach((result, index) => expect(result).to.deep.include(expected[index]));\n      });\n    });\n    it('deletes all files for a mongoDB document', () => FileService.deleteAllFilesForDoc(docId).then(() => FileService.listFilesForDoc(docId)).then(results => expect(results.length).to.equal(0)));\n  });\n  describe('groupFilesByCategory', () => {\n    it('groups 2 files in the same category', () => {\n      const files = [{\n        Key: 'asdf/category1/whatever.pdf'\n      }, {\n        Key: 'asdf/category1/dude.pdf'\n      }];\n      expect(FileService.groupFilesByCategory(files)).to.deep.equal({\n        category1: files\n      });\n    });\n    it('groups multiple files in multiple categories', () => {\n      const files = [{\n        Key: 'asdf/category1/whatever.pdf'\n      }, {\n        Key: 'asdf/category2/dude.pdf'\n      }];\n      expect(FileService.groupFilesByCategory(files)).to.deep.equal({\n        category1: [files[0]],\n        category2: [files[1]]\n      });\n    });\n  });\n}).timeout(10000);","map":{"version":3,"sources":["imports/core/api/files/server/test/FileService.test.js"],"names":["docId","json","hello","binaryData","Buffer","JSON","fileName","key1","key2","key3","setupBucket","S3Service","describe","before","Meteor","beforeEach","clearBucket","it","expected","Key","results","expect","subdocument","nextStatus","FileService","Metadata","status","error","FILE_STATUS","newError","files","category1","category2"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { expect } from 'chai';\n\nimport FileService from '../FileService';\nimport S3Service from '../S3Service';\nimport { clearBucket } from './S3Service.test';\nimport { FILE_STATUS } from '../../fileConstants';\n\nconst docId = 'someDocId';\nconst json = { hello: 'world' };\nconst binaryData = Buffer.from(JSON.stringify(json), 'utf-8');\nconst fileName = 'hello.json';\n\nconst key1 = `${docId}/a/first-${fileName}`;\nconst key2 = `${docId}/a/second-${fileName}`;\nconst key3 = `${docId}/b/third-${fileName}`;\n\nconst setupBucket = () =>\n  S3Service.putObject(binaryData, key1)\n    .then(() => S3Service.putObject(binaryData, key2))\n    .then(() => S3Service.putObject(binaryData, key3));\n\ndescribe('FileService', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'admin') {\n      // When running these tests in parallel, it breaks tests\n      this.parent.pending = true;\n      this.skip();\n    }\n  });\n\n  beforeEach(() => clearBucket().then(setupBucket));\n\n  describe('getFilesForDoc', () => {\n    it('lists all files uploaded to a doc', () => {\n      const expected = [{ Key: key1 }, { Key: key2 }, { Key: key3 }];\n      return FileService.listFilesForDoc(docId).then((results) => {\n        expect(results.length).to.equal(expected.length);\n        results.forEach((result, index) =>\n          expect(result).to.deep.include(expected[index]));\n      });\n    });\n\n    it('lists all files uploaded to a doc at a subdocument', () => {\n      const expected = [{ Key: key1 }, { Key: key2 }];\n      const subdocument = 'a';\n      return FileService.listFilesForDoc(docId, subdocument).then((results) => {\n        expect(results.length).to.equal(expected.length);\n        results.forEach((result, index) =>\n          expect(result).to.deep.include(expected[index]));\n      });\n    });\n  });\n\n  describe('setFileStatus', () => {\n    it('changes the status of a file', () => {\n      const nextStatus = 'VALID';\n      return FileService.setFileStatus(key1, nextStatus)\n        .then(() => S3Service.getObject(key1))\n        .then(({ Metadata: { status } }) =>\n          expect(status).to.equal(nextStatus));\n    });\n  });\n\n  describe('setFileError', () => {\n    it('Sets an error and status on a file', () => {\n      const error = 'Not good my bro.';\n      return FileService.setFileError(key1, error)\n        .then(() => S3Service.getObject(key1))\n        .then(({ Metadata: { message, status } }) => {\n          expect(status).to.equal(FILE_STATUS.ERROR);\n          expect(message).to.equal(error);\n        });\n    });\n  });\n\n  describe('setFileValid', () => {\n    it('Removes error from file and sets status to valid ', () => {\n      const newError = 'not good';\n      return FileService.setFileError(key1, newError)\n        .then(() => FileService.setFileValid(key1))\n        .then(() => S3Service.getObject(key1))\n        .then(({ Metadata: { message, status } }) => {\n          expect(status).to.equal(FILE_STATUS.VALID);\n          expect(message).to.equal('');\n        });\n    });\n  });\n\n  describe('deleteAllFilesForDoc', () => {\n    it('deletes all files at a subdocument', () => {\n      const subdocument = 'a';\n      const expected = [{ Key: key3 }];\n      return FileService.deleteAllFilesForDoc(docId, subdocument)\n        .then(() => FileService.listFilesForDoc(docId))\n        .then((results) => {\n          expect(results.length).to.equal(expected.length);\n          results.forEach((result, index) =>\n            expect(result).to.deep.include(expected[index]));\n        });\n    });\n\n    it('deletes all files for a mongoDB document', () =>\n      FileService.deleteAllFilesForDoc(docId)\n        .then(() => FileService.listFilesForDoc(docId))\n        .then(results => expect(results.length).to.equal(0)));\n  });\n\n  describe('groupFilesByCategory', () => {\n    it('groups 2 files in the same category', () => {\n      const files = [\n        { Key: 'asdf/category1/whatever.pdf' },\n        { Key: 'asdf/category1/dude.pdf' },\n      ];\n      expect(FileService.groupFilesByCategory(files)).to.deep.equal({\n        category1: files,\n      });\n    });\n\n    it('groups multiple files in multiple categories', () => {\n      const files = [\n        { Key: 'asdf/category1/whatever.pdf' },\n        { Key: 'asdf/category2/dude.pdf' },\n      ];\n      expect(FileService.groupFilesByCategory(files)).to.deep.equal({\n        category1: [files[0]],\n        category2: [files[1]],\n      });\n    });\n  });\n}).timeout(10000);\n"]},"sourceType":"script","hash":"dec42ba17aa8df8e4a507caad49398c3ecfb6e73"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/monitoring/server/resolvers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/monitoring/server/resolvers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/monitoring/server/resolvers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/monitoring/server/resolvers.js"],"names":["Meteor","REVENUE_STATUS","LoanService","getPredicate","filters","$match","getProjection","$project","status","revenueLinks","selectedStructure","createdYear","$year","date","createdMonth","$month","structure","$arrayElemAt","$filter","input","as","cond","$eq","getRevenues","value","console","log","$lookup","from","localField","foreignField","$unwind","$addFields","revenueDate","$cond","if","EXPECTED","then","else","revenueYear","revenueMonth","getGroupBy","groupBy","month","year","Error","getGrouping","fields","count","$sum","revenues","paidRevenues","CLOSED","expectedRevenues","loanValue","$group","_id","getSort","$sort","buildPipeline","reduce","arr","val","Array","isArray","filter","x","loanMonitoring","args","pipeline","agg","aggregate","toArray"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AAEA,SAASC,cAAT;AACA,OAAOC,WAAP;;AAEA,MAAMC,YAAY,GAAG,CAACC,OAAO,GAAG,EAAX,MAAmB;AAAEC,EAAAA,MAAM,EAAED;AAAV,CAAnB,CAArB;;AAEA,MAAME,aAAa,GAAG,OAAO;AAC3BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,CADA;AAERC,IAAAA,YAAY,EAAE,CAFN;AAGRC,IAAAA,iBAAiB,EAAE,CAHX;AAIRC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAT,KAJL;AAKRC,IAAAA,YAAY,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAEF,QAAAA,IAAI,EAAE;AAAR;AAAV,KALN;AAMRG,IAAAA,SAAS,EAAE;AACTC,MAAAA,YAAY,EAAE,CACZ;AACEC,QAAAA,OAAO,EAAE;AACPC,UAAAA,KAAK,EAAE,aADA;AAEPC,UAAAA,EAAE,EAAE,MAFG;AAGPC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,GAAG,EAAE,CAAC,WAAD,EAAc,oBAAd;AAAP;AAHC;AADX,OADY,EAQZ,CARY;AADL;AANH;AADiB,CAAP,CAAtB;;AAsBA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACA,MAAIF,KAAK,KAAK,UAAd,EAA0B;AACxB,WAAO,CACL;AACEG,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,UADC;AAEPC,QAAAA,UAAU,EAAE,cAFL;AAGPC,QAAAA,YAAY,EAAE,KAHP;AAIPV,QAAAA,EAAE,EAAE;AAJG;AADX,KADK,EASL;AAAEW,MAAAA,OAAO,EAAE;AAAX,KATK,EAUL;AACEC,MAAAA,UAAU,EAAE;AACVC,QAAAA,WAAW,EAAE;AACXC,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAE;AAAEb,cAAAA,GAAG,EAAE,CAAC,kBAAD,EAAqBrB,cAAc,CAACmC,QAApC;AAAP,aADC;AAELC,YAAAA,IAAI,EAAE,sBAFD;AAGLC,YAAAA,IAAI,EAAE;AAHD;AADI;AADH;AADd,KAVK,EAqBL;AACEN,MAAAA,UAAU,EAAE;AACVO,QAAAA,WAAW,EAAE;AAAE3B,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR;AAAT,SADH;AAEV2B,QAAAA,YAAY,EAAE;AAAEzB,UAAAA,MAAM,EAAE;AAAEF,YAAAA,IAAI,EAAE;AAAR;AAAV;AAFJ;AADd,KArBK,CAAP;AA4BD;AACF,CAhCD;;AAkCA,MAAM4B,UAAU,GAAIC,OAAD,IAAa;AAC9BjB,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BgB,OAA3B;;AACA,UAAQA,OAAR;AACA,SAAK,QAAL;AACE,aAAO,SAAP;;AACF,SAAK,aAAL;AACE,aAAO;AAAEC,QAAAA,KAAK,EAAE,eAAT;AAA0BC,QAAAA,IAAI,EAAE;AAAhC,OAAP;;AACF,SAAK,WAAL;AACE,aAAO;AAAED,QAAAA,KAAK,EAAE,eAAT;AAA0BC,QAAAA,IAAI,EAAE;AAAhC,OAAP;;AAEF;AACE,YAAM,IAAI5C,MAAM,CAAC6C,KAAX,CAAkB,qBAAoBH,OAAQ,GAA9C,CAAN;AATF;AAWD,CAbD;;AAeA,MAAMI,WAAW,GAAG,CAAC;AAAEJ,EAAAA,OAAF;AAAWlB,EAAAA;AAAX,CAAD,KAAwB;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAMqB,MAAM,GAAG,EAAf;;AACA,UAAQvB,KAAR;AACA,SAAK,OAAL;AACEuB,MAAAA,MAAM,CAACC,KAAP,GAAe;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAf;AACA;;AACF,SAAK,UAAL;AACEF,MAAAA,MAAM,CAACG,QAAP,GAAkB;AAAED,QAAAA,IAAI,EAAE;AAAR,OAAlB;AACAF,MAAAA,MAAM,CAACI,YAAP,GAAsB;AACpBF,QAAAA,IAAI,EAAE;AACJf,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAE;AAAEb,cAAAA,GAAG,EAAE,CAAC,kBAAD,EAAqBrB,cAAc,CAACmD,MAApC;AAAP,aADC;AAELf,YAAAA,IAAI,EAAE,kBAFD;AAGLC,YAAAA,IAAI,EAAE;AAHD;AADH;AADc,OAAtB;AASAS,MAAAA,MAAM,CAACM,gBAAP,GAA0B;AACxBJ,QAAAA,IAAI,EAAE;AACJf,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAE;AAAEb,cAAAA,GAAG,EAAE,CAAC,kBAAD,EAAqBrB,cAAc,CAACmC,QAApC;AAAP,aADC;AAELC,YAAAA,IAAI,EAAE,kBAFD;AAGLC,YAAAA,IAAI,EAAE;AAHD;AADH;AADkB,OAA1B;AASA;;AACF,SAAK,WAAL;AACES,MAAAA,MAAM,CAACO,SAAP,GAAmB;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAnB;AACA;;AACF;AACE,YAAM,IAAIjD,MAAM,CAAC6C,KAAX,CAAiB,wBAAjB,CAAN;AA7BF;;AAgCA,SAAO;AAAEU,IAAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAEf,UAAU,CAACC,OAAD,CAAjB;AAA4B,SAAGK;AAA/B;AAAV,GAAP;AACD,CApCD;;AAqCAtB,OAAO,CAACC,GAAR,CAAY,cAAZ;;AAEA,MAAM+B,OAAO,GAAG,CAAC;AAAEf,EAAAA;AAAF,CAAD,KAAiB;AAC/BjB,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,MAAIgB,OAAO,KAAK,aAAZ,IAA6BA,OAAO,KAAK,WAA7C,EAA0D;AACxD,WAAO;AAAEgB,MAAAA,KAAK,EAAE;AAAE,oBAAY,CAAd;AAAiB,qBAAa;AAA9B;AAAT,KAAP;AACD;AACF,CALD;;AAOA,MAAMC,aAAa,GAAG,CAAC;AAAEvD,EAAAA,OAAF;AAAWsC,EAAAA,OAAX;AAAoBlB,EAAAA;AAApB,CAAD,KACpB,CACErB,YAAY,CAACC,OAAD,CADd,EAEEE,aAAa,EAFf,EAGEiB,WAAW,CAAC;AAAEC,EAAAA;AAAF,CAAD,CAHb,EAIEsB,WAAW,CAAC;AAAEJ,EAAAA,OAAF;AAAWlB,EAAAA;AAAX,CAAD,CAJb,EAKEiC,OAAO,CAAC;AAAEf,EAAAA;AAAF,CAAD,CALT,EAOGkB,MAPH,CAOU,CAACC,GAAD,EAAMC,GAAN,KAAc,CAAC,GAAGD,GAAJ,EAAS,IAAIE,KAAK,CAACC,OAAN,CAAcF,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAA/B,CAAT,CAPxB,EAOyE,EAPzE,EAQGG,MARH,CAQUC,CAAC,IAAIA,CARf,CADF;;AAWA,OAAO,MAAMC,cAAc,GAAG,MAAOC,IAAP,IAAgB;AAC5C3C,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB0C,IAArB;AACA,QAAMC,QAAQ,GAAGV,aAAa,CAACS,IAAD,CAA9B;AACA3C,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB2C,QAAzB;AACA,QAAMC,GAAG,GAAG,MAAMpE,WAAW,CAACqE,SAAZ,CAAsBF,QAAtB,EAAgCG,OAAhC,EAAlB;AACA,SAAOF,GAAP;AACD,CANM","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { REVENUE_STATUS } from 'core/api/revenues/revenueConstants';\nimport LoanService from '../../loans/server/LoanService';\n\nconst getPredicate = (filters = {}) => ({ $match: filters });\n\nconst getProjection = () => ({\n  $project: {\n    status: 1,\n    revenueLinks: 1,\n    selectedStructure: 1,\n    createdYear: { $year: { date: '$createdAt' } },\n    createdMonth: { $month: { date: '$createdAt' } },\n    structure: {\n      $arrayElemAt: [\n        {\n          $filter: {\n            input: '$structures',\n            as: 'item',\n            cond: { $eq: ['$$item.id', '$selectedStructure'] },\n          },\n        },\n        0,\n      ],\n    },\n  },\n});\n\nconst getRevenues = ({ value }) => {\n  console.log('getRevenues:');\n  if (value === 'revenues') {\n    return [\n      {\n        $lookup: {\n          from: 'revenues',\n          localField: 'revenueLinks',\n          foreignField: '_id',\n          as: 'revenues',\n        },\n      },\n      { $unwind: '$revenues' },\n      {\n        $addFields: {\n          revenueDate: {\n            $cond: {\n              if: { $eq: ['$revenues.status', REVENUE_STATUS.EXPECTED] },\n              then: '$revenues.expectedAt',\n              else: '$revenues.paidAt',\n            },\n          },\n        },\n      },\n      {\n        $addFields: {\n          revenueYear: { $year: { date: '$revenueDate' } },\n          revenueMonth: { $month: { date: '$revenueDate' } },\n        },\n      },\n    ];\n  }\n};\n\nconst getGroupBy = (groupBy) => {\n  console.log('getGroupBy:', groupBy);\n  switch (groupBy) {\n  case 'status':\n    return '$status';\n  case 'revenueDate':\n    return { month: '$revenueMonth', year: '$revenueYear' };\n  case 'createdAt':\n    return { month: '$createdMonth', year: '$createdYear' };\n\n  default:\n    throw new Meteor.Error(`Invalid groupBy: \"${groupBy}\"`);\n  }\n};\n\nconst getGrouping = ({ groupBy, value }) => {\n  console.log('getGrouping:');\n  const fields = {};\n  switch (value) {\n  case 'count':\n    fields.count = { $sum: 1 };\n    break;\n  case 'revenues':\n    fields.revenues = { $sum: '$revenues.amount' };\n    fields.paidRevenues = {\n      $sum: {\n        $cond: {\n          if: { $eq: ['$revenues.status', REVENUE_STATUS.CLOSED] },\n          then: '$revenues.amount',\n          else: 0,\n        },\n      },\n    };\n    fields.expectedRevenues = {\n      $sum: {\n        $cond: {\n          if: { $eq: ['$revenues.status', REVENUE_STATUS.EXPECTED] },\n          then: '$revenues.amount',\n          else: 0,\n        },\n      },\n    };\n    break;\n  case 'loanValue':\n    fields.loanValue = { $sum: '$structure.wantedLoan' };\n    break;\n  default:\n    throw new Meteor.Error('Invalid grouping value');\n  }\n\n  return { $group: { _id: getGroupBy(groupBy), ...fields } };\n};\nconsole.log('getGrouping2');\n\nconst getSort = ({ groupBy }) => {\n  console.log('getSort:');\n  if (groupBy === 'revenueDate' || groupBy === 'createdAt') {\n    return { $sort: { '_id.year': 1, '_id.month': 1 } };\n  }\n};\n\nconst buildPipeline = ({ filters, groupBy, value }) =>\n  [\n    getPredicate(filters),\n    getProjection(),\n    getRevenues({ value }),\n    getGrouping({ groupBy, value }),\n    getSort({ groupBy }),\n  ]\n    .reduce((arr, val) => [...arr, ...(Array.isArray(val) ? val : [val])], [])\n    .filter(x => x);\n\nexport const loanMonitoring = async (args) => {\n  console.log('args:', args);\n  const pipeline = buildPipeline(args);\n  console.log('pipeline:', pipeline);\n  const agg = await LoanService.aggregate(pipeline).toArray();\n  return agg;\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/monitoring/server/resolvers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/monitoring/server/resolvers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  loanMonitoring: () => loanMonitoring\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet REVENUE_STATUS;\nmodule.link(\"../../revenues/revenueConstants\", {\n  REVENUE_STATUS(v) {\n    REVENUE_STATUS = v;\n  }\n\n}, 1);\nlet LoanService;\nmodule.link(\"../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 2);\n\nconst getPredicate = (filters = {}) => ({\n  $match: filters\n});\n\nconst getProjection = () => ({\n  $project: {\n    status: 1,\n    revenueLinks: 1,\n    selectedStructure: 1,\n    createdYear: {\n      $year: {\n        date: '$createdAt'\n      }\n    },\n    createdMonth: {\n      $month: {\n        date: '$createdAt'\n      }\n    },\n    structure: {\n      $arrayElemAt: [{\n        $filter: {\n          input: '$structures',\n          as: 'item',\n          cond: {\n            $eq: ['$$item.id', '$selectedStructure']\n          }\n        }\n      }, 0]\n    }\n  }\n});\n\nconst getRevenues = ({\n  value\n}) => {\n  console.log('getRevenues:');\n\n  if (value === 'revenues') {\n    return [{\n      $lookup: {\n        from: 'revenues',\n        localField: 'revenueLinks',\n        foreignField: '_id',\n        as: 'revenues'\n      }\n    }, {\n      $unwind: '$revenues'\n    }, {\n      $addFields: {\n        revenueDate: {\n          $cond: {\n            if: {\n              $eq: ['$revenues.status', REVENUE_STATUS.EXPECTED]\n            },\n            then: '$revenues.expectedAt',\n            else: '$revenues.paidAt'\n          }\n        }\n      }\n    }, {\n      $addFields: {\n        revenueYear: {\n          $year: {\n            date: '$revenueDate'\n          }\n        },\n        revenueMonth: {\n          $month: {\n            date: '$revenueDate'\n          }\n        }\n      }\n    }];\n  }\n};\n\nconst getGroupBy = groupBy => {\n  console.log('getGroupBy:', groupBy);\n\n  switch (groupBy) {\n    case 'status':\n      return '$status';\n\n    case 'revenueDate':\n      return {\n        month: '$revenueMonth',\n        year: '$revenueYear'\n      };\n\n    case 'createdAt':\n      return {\n        month: '$createdMonth',\n        year: '$createdYear'\n      };\n\n    default:\n      throw new Meteor.Error(`Invalid groupBy: \"${groupBy}\"`);\n  }\n};\n\nconst getGrouping = ({\n  groupBy,\n  value\n}) => {\n  console.log('getGrouping:');\n  const fields = {};\n\n  switch (value) {\n    case 'count':\n      fields.count = {\n        $sum: 1\n      };\n      break;\n\n    case 'revenues':\n      fields.revenues = {\n        $sum: '$revenues.amount'\n      };\n      fields.paidRevenues = {\n        $sum: {\n          $cond: {\n            if: {\n              $eq: ['$revenues.status', REVENUE_STATUS.CLOSED]\n            },\n            then: '$revenues.amount',\n            else: 0\n          }\n        }\n      };\n      fields.expectedRevenues = {\n        $sum: {\n          $cond: {\n            if: {\n              $eq: ['$revenues.status', REVENUE_STATUS.EXPECTED]\n            },\n            then: '$revenues.amount',\n            else: 0\n          }\n        }\n      };\n      break;\n\n    case 'loanValue':\n      fields.loanValue = {\n        $sum: '$structure.wantedLoan'\n      };\n      break;\n\n    default:\n      throw new Meteor.Error('Invalid grouping value');\n  }\n\n  return {\n    $group: (0, _objectSpread2.default)({\n      _id: getGroupBy(groupBy)\n    }, fields)\n  };\n};\n\nconsole.log('getGrouping2');\n\nconst getSort = ({\n  groupBy\n}) => {\n  console.log('getSort:');\n\n  if (groupBy === 'revenueDate' || groupBy === 'createdAt') {\n    return {\n      $sort: {\n        '_id.year': 1,\n        '_id.month': 1\n      }\n    };\n  }\n};\n\nconst buildPipeline = ({\n  filters,\n  groupBy,\n  value\n}) => [getPredicate(filters), getProjection(), getRevenues({\n  value\n}), getGrouping({\n  groupBy,\n  value\n}), getSort({\n  groupBy\n})].reduce((arr, val) => [...arr, ...(Array.isArray(val) ? val : [val])], []).filter(x => x);\n\nconst loanMonitoring = args => Promise.asyncApply(() => {\n  console.log('args:', args);\n  const pipeline = buildPipeline(args);\n  console.log('pipeline:', pipeline);\n  const agg = Promise.await(LoanService.aggregate(pipeline).toArray());\n  return agg;\n});","map":{"version":3,"sources":["imports/core/api/monitoring/server/resolvers.js"],"names":["Meteor","getPredicate","filters","$match","getProjection","$project","status","revenueLinks","selectedStructure","createdYear","$year","date","createdMonth","$month","structure","$arrayElemAt","$filter","input","as","cond","$eq","getRevenues","value","console","$lookup","from","localField","foreignField","$unwind","$addFields","revenueDate","$cond","if","REVENUE_STATUS","then","else","revenueYear","revenueMonth","getGroupBy","groupBy","month","year","getGrouping","fields","$sum","$group","_id","getSort","$sort","buildPipeline","Array","x","loanMonitoring","pipeline","agg","LoanService"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { REVENUE_STATUS } from 'core/api/revenues/revenueConstants';\nimport LoanService from '../../loans/server/LoanService';\n\nconst getPredicate = (filters = {}) => ({ $match: filters });\n\nconst getProjection = () => ({\n  $project: {\n    status: 1,\n    revenueLinks: 1,\n    selectedStructure: 1,\n    createdYear: { $year: { date: '$createdAt' } },\n    createdMonth: { $month: { date: '$createdAt' } },\n    structure: {\n      $arrayElemAt: [\n        {\n          $filter: {\n            input: '$structures',\n            as: 'item',\n            cond: { $eq: ['$$item.id', '$selectedStructure'] },\n          },\n        },\n        0,\n      ],\n    },\n  },\n});\n\nconst getRevenues = ({ value }) => {\n  console.log('getRevenues:');\n  if (value === 'revenues') {\n    return [\n      {\n        $lookup: {\n          from: 'revenues',\n          localField: 'revenueLinks',\n          foreignField: '_id',\n          as: 'revenues',\n        },\n      },\n      { $unwind: '$revenues' },\n      {\n        $addFields: {\n          revenueDate: {\n            $cond: {\n              if: { $eq: ['$revenues.status', REVENUE_STATUS.EXPECTED] },\n              then: '$revenues.expectedAt',\n              else: '$revenues.paidAt',\n            },\n          },\n        },\n      },\n      {\n        $addFields: {\n          revenueYear: { $year: { date: '$revenueDate' } },\n          revenueMonth: { $month: { date: '$revenueDate' } },\n        },\n      },\n    ];\n  }\n};\n\nconst getGroupBy = (groupBy) => {\n  console.log('getGroupBy:', groupBy);\n  switch (groupBy) {\n  case 'status':\n    return '$status';\n  case 'revenueDate':\n    return { month: '$revenueMonth', year: '$revenueYear' };\n  case 'createdAt':\n    return { month: '$createdMonth', year: '$createdYear' };\n\n  default:\n    throw new Meteor.Error(`Invalid groupBy: \"${groupBy}\"`);\n  }\n};\n\nconst getGrouping = ({ groupBy, value }) => {\n  console.log('getGrouping:');\n  const fields = {};\n  switch (value) {\n  case 'count':\n    fields.count = { $sum: 1 };\n    break;\n  case 'revenues':\n    fields.revenues = { $sum: '$revenues.amount' };\n    fields.paidRevenues = {\n      $sum: {\n        $cond: {\n          if: { $eq: ['$revenues.status', REVENUE_STATUS.CLOSED] },\n          then: '$revenues.amount',\n          else: 0,\n        },\n      },\n    };\n    fields.expectedRevenues = {\n      $sum: {\n        $cond: {\n          if: { $eq: ['$revenues.status', REVENUE_STATUS.EXPECTED] },\n          then: '$revenues.amount',\n          else: 0,\n        },\n      },\n    };\n    break;\n  case 'loanValue':\n    fields.loanValue = { $sum: '$structure.wantedLoan' };\n    break;\n  default:\n    throw new Meteor.Error('Invalid grouping value');\n  }\n\n  return { $group: { _id: getGroupBy(groupBy), ...fields } };\n};\nconsole.log('getGrouping2');\n\nconst getSort = ({ groupBy }) => {\n  console.log('getSort:');\n  if (groupBy === 'revenueDate' || groupBy === 'createdAt') {\n    return { $sort: { '_id.year': 1, '_id.month': 1 } };\n  }\n};\n\nconst buildPipeline = ({ filters, groupBy, value }) =>\n  [\n    getPredicate(filters),\n    getProjection(),\n    getRevenues({ value }),\n    getGrouping({ groupBy, value }),\n    getSort({ groupBy }),\n  ]\n    .reduce((arr, val) => [...arr, ...(Array.isArray(val) ? val : [val])], [])\n    .filter(x => x);\n\nexport const loanMonitoring = async (args) => {\n  console.log('args:', args);\n  const pipeline = buildPipeline(args);\n  console.log('pipeline:', pipeline);\n  const agg = await LoanService.aggregate(pipeline).toArray();\n  return agg;\n};\n"]},"sourceType":"script","hash":"7731b64fc543080598d96ad329f773853d131fe5"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/middlewares.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/middlewares.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/middlewares.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/middlewares.js"],"names":["bodyParser","moment","multipart","SlackService","REST_API_ERRORS","BODY_SIZE_LIMIT","FILE_UPLOAD_DIR","UserService","getRequestPath","getHeader","getRequestMethod","getErrorObject","getPublicKey","verifySignature","getSignature","logRequest","trackRequest","getMatchingPathOptions","nonceExists","addNonce","NONCE_TTL","bodyParserJsonMiddleware","json","limit","bodyParserUrlEncodedMiddleware","urlencoded","extended","replayHandlerMiddleware","options","req","res","next","isMultipart","timestamp","nonce","REPLAY_ATTACK_ATTEMPT","now","unix","filterMiddleware","endpointOptions","supportedContentType","contentType","includes","WRONG_CONTENT_TYPE","split","authMiddleware","publicKey","signature","WRONG_AUTHORIZATION_TYPE","user","fetchOne","$filters","emails","firstName","lastName","phoneNumbers","AUTHORIZATION_FAILED","verifiedSignature","verified","expectedObjectToSign","toVerify","errorMiddleware","error","info","status","errorName","message","body","params","query","headers","sendError","additionalData","Object","keys","length","filter","x","userId","_id","url","result","JSON","stringify","writeHead","write","end","unknownEndpointMiddleware","UNKNOWN_ENDPOINT","path","method","multipartMiddleware","middleware","uploadDir","preMiddlewares","postMiddlewares"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,OAAOC,YAAP;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,eAHF;AAKA,OAAOC,WAAP;AACA,SACEC,cADF,EAEEC,SAFF,EAGEC,gBAHF,EAIEC,cAJF,EAKEC,YALF,EAMEC,eANF,EAOEC,YAPF,EAQEC,UARF,EASEC,YATF,EAUEC,sBAVF;AAYA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC;;AAEA,MAAMC,wBAAwB,GAAG,MAC/BrB,UAAU,CAACsB,IAAX,CAAgB;AAAEC,EAAAA,KAAK,EAAElB;AAAT,CAAhB,CADF;;AAGA,MAAMmB,8BAA8B,GAAG,MACrCxB,UAAU,CAACyB,UAAX,CAAsB;AACpBC,EAAAA,QAAQ,EAAE,KADU;AAEpBH,EAAAA,KAAK,EAAElB;AAFa,CAAtB,CADF,C,CAMA;;;AACA,MAAMsB,uBAAuB,GAAGC,OAAO,IAAI,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC7D,MAAIF,GAAG,CAACG,WAAR,EAAqB;AACnB,WAAOD,IAAI,EAAX;AACD;;AACD,QAAME,SAAS,GAAGxB,SAAS,CAACoB,GAAD,EAAM,oBAAN,CAA3B;AACA,QAAMK,KAAK,GAAGzB,SAAS,CAACoB,GAAD,EAAM,gBAAN,CAAvB;;AAEA,MAAI,CAACI,SAAD,IAAc,CAACC,KAAnB,EAA0B;AACxB,WAAOH,IAAI,CAAC3B,eAAe,CAAC+B,qBAAjB,CAAX;AACD;;AAED,QAAMC,GAAG,GAAGnC,MAAM,GAAGoC,IAAT,EAAZ,CAX6D,CAa7D;;AACA,MAAIJ,SAAS,GAAGG,GAAG,GAAGhB,SAAtB,EAAiC;AAC/B,WAAOW,IAAI,CAAC3B,eAAe,CAAC+B,qBAAjB,CAAX;AACD;;AACD,MAAIjB,WAAW,CAACgB,KAAD,CAAf,EAAwB;AACtB,WAAOH,IAAI,CAAC3B,eAAe,CAAC+B,qBAAjB,CAAX;AACD;;AAEDhB,EAAAA,QAAQ,CAACe,KAAD,CAAR;AAEAH,EAAAA,IAAI;AACL,CAxBD,C,CA0BA;;;AACA,MAAMO,gBAAgB,GAAGV,OAAO,IAAI,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACtD,QAAMQ,eAAe,GAAGtB,sBAAsB,CAACY,GAAD,EAAMD,OAAN,CAA9C;AAEA,QAAMY,oBAAoB,GAAGD,eAAe,CAACrC,SAAhB,GACzB,qBADyB,GAEzB,kBAFJ;AAGA,QAAMuC,WAAW,GAAGhC,SAAS,CAACoB,GAAD,EAAM,cAAN,CAA7B;AACA,QAAMG,WAAW,GAAGS,WAAW,CAACC,QAAZ,CAAqB,qBAArB,CAApB;;AAEA,MAAI,CAACD,WAAD,IAAgB,CAACA,WAAW,CAACC,QAAZ,CAAqBF,oBAArB,CAArB,EAAiE;AAC/D,WAAOT,IAAI,CAAC3B,eAAe,CAACuC,kBAAhB,CACVF,WAAW,CAACG,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CADU,EAEVJ,oBAFU,CAAD,CAAX;AAID;;AAED,MAAIR,WAAJ,EAAiB;AACfH,IAAAA,GAAG,CAACG,WAAJ,GAAkB,IAAlB;AACD;;AAEDD,EAAAA,IAAI;AACL,CArBD,C,CAuBA;;;AACA,MAAMc,cAAc,GAAGjB,OAAO,IAAI,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACpD,QAAMe,SAAS,GAAGlC,YAAY,CAACiB,GAAD,CAA9B;AACA,QAAMkB,SAAS,GAAGjC,YAAY,CAACe,GAAD,CAA9B;;AAEA,MAAI,CAACiB,SAAD,IAAc,CAACC,SAAnB,EAA8B;AAC5B,WAAOhB,IAAI,CAAC3B,eAAe,CAAC4C,wBAAjB,CAAX;AACD;;AAED,QAAMC,IAAI,GAAG1C,WAAW,CAAC2C,QAAZ,CAAqB;AAChCC,IAAAA,QAAQ,EAAE;AACR,gCAA0BL;AADlB,KADsB;AAIhCM,IAAAA,MAAM,EAAE,CAJwB;AAKhCC,IAAAA,SAAS,EAAE,CALqB;AAMhCC,IAAAA,QAAQ,EAAE,CANsB;AAOhCC,IAAAA,YAAY,EAAE;AAPkB,GAArB,CAAb;;AAUA,MAAI,CAACN,IAAL,EAAW;AACT,WAAOlB,IAAI,CAAC3B,eAAe,CAACoD,oBAAhB,CAAqC,8DAArC,CAAD,CAAX;AACD;;AAED3B,EAAAA,GAAG,CAACiB,SAAJ,GAAgBA,SAAhB;AACAjB,EAAAA,GAAG,CAACkB,SAAJ,GAAgBA,SAAhB;AAEA,QAAMU,iBAAiB,GAAG5C,eAAe,CAACgB,GAAD,CAAzC;;AAEA,MAAI,CAAC4B,iBAAiB,CAACC,QAAvB,EAAiC;AAC/B,WAAO3B,IAAI,CAAC3B,eAAe,CAACoD,oBAAhB,CAAqC;AAC/CG,MAAAA,oBAAoB,EAAEF,iBAAiB,CAACG;AADO,KAArC,CAAD,CAAX;AAGD;;AAED/B,EAAAA,GAAG,CAACoB,IAAJ,GAAWA,IAAX;AAEAlB,EAAAA,IAAI;AACL,CApCD,C,CAsCA;;;AACA,MAAM8B,eAAe,GAAGjC,OAAO,IAAI,CAACkC,KAAD,EAAQjC,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,KAA2B;AAC5D,QAAM;AAAEgC,IAAAA;AAAF,MAAWD,KAAjB;AACA,QAAM;AAAEE,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA;AAArB,MAAiCvD,cAAc,CAACmD,KAAD,EAAQhC,GAAR,CAArD;AACA,QAAM;AAAEmB,IAAAA,IAAI,GAAG,EAAT;AAAakB,IAAAA,IAAI,GAAG,EAApB;AAAwBC,IAAAA,MAAM,GAAG,EAAjC;AAAqCC,IAAAA,KAAK,GAAG,EAA7C;AAAiDC,IAAAA,OAAO,GAAG;AAA3D,MAAkEzC,GAAxE;AAEA1B,EAAAA,YAAY,CAACoE,SAAb,CAAuB;AACrBT,IAAAA,KADqB;AAErBU,IAAAA,cAAc,EAAE,CACdC,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkBQ,MAAlB,GAA2B,CAA3B,IAAgC;AAAER,MAAAA;AAAF,KADlB,EAEdM,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,MAApB,GAA6B,CAA7B,IAAkC;AAAEP,MAAAA;AAAF,KAFpB,EAGdK,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,MAAnB,GAA4B,CAA5B,IAAiC;AAAEN,MAAAA;AAAF,KAHnB,EAIdI,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,MAArB,GAA8B,CAA9B,IAAmC;AAAEL,MAAAA;AAAF,KAJrB,EAKdM,MALc,CAKPC,CAAC,IAAIA,CALE,CAFK;AAQrBC,IAAAA,MAAM,EAAE7B,IAAI,CAAC8B,GARQ;AASrBC,IAAAA,GAAG,EAAExE,cAAc,CAACqB,GAAD;AATE,GAAvB;AAYAd,EAAAA,UAAU,CAAC;AAAEc,IAAAA,GAAF;AAAOoD,IAAAA,MAAM,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEnB,MAAAA,MAAF;AAAUC,MAAAA,SAAV;AAAqBC,MAAAA;AAArB,KAAf;AAAf,GAAD,CAAV;;AACA,MAAIO,MAAM,CAACC,IAAP,CAAYzB,IAAZ,IAAoB,CAAxB,EAA2B;AACzBjC,IAAAA,YAAY,CAAC;AACXa,MAAAA,GADW;AAEXoD,MAAAA,MAAM,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEnB,QAAAA,MAAF;AAAUC,QAAAA,SAAV;AAAqBC,QAAAA;AAArB,OAAf;AAFG,KAAD,CAAZ;AAID;;AAEDpC,EAAAA,GAAG,CAACsD,SAAJ,CAAcpB,MAAd;AACAlC,EAAAA,GAAG,CAACuD,KAAJ,CAAUH,IAAI,CAACC,SAAL,CAAe;AAAEnB,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,OAArB;AAA8BH,IAAAA;AAA9B,GAAf,CAAV;AACAjC,EAAAA,GAAG,CAACwD,GAAJ;AACD,CA5BD,C,CA8BA;;;AACA,MAAMC,yBAAyB,GAAG3D,OAAO,IAAI,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC/DA,EAAAA,IAAI,CAAC3B,eAAe,CAACoF,gBAAhB,CAAiC;AACpCC,IAAAA,IAAI,EAAEjF,cAAc,CAACqB,GAAD,CADgB;AAEpC6D,IAAAA,MAAM,EAAEhF,gBAAgB,CAACmB,GAAD;AAFY,GAAjC,CAAD,CAAJ;AAID,CALD;;AAOA,MAAM8D,mBAAmB,GAAG/D,OAAO,IAAI,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACzD,QAAM6D,UAAU,GAAG1F,SAAS,CAAC;AAAE2F,IAAAA,SAAS,EAAEvF;AAAb,GAAD,CAA5B;AACA,QAAM;AAAE0B,IAAAA;AAAF,MAAkBH,GAAxB;AAEA,SAAOG,WAAW,GAAG4D,UAAU,CAAC/D,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAAb,GAAgCA,IAAI,EAAtD;AACD,CALD;;AAOA,OAAO,MAAM+D,cAAc,GAAG,CAC5BxD,gBAD4B,EAE5BqD,mBAF4B,EAG5BtE,wBAH4B,EAI5BG,8BAJ4B,EAK5BqB,cAL4B,EAM5BlB,uBAN4B,CAAvB;AAQP,OAAO,MAAMoE,eAAe,GAAG,CAACR,yBAAD,EAA4B1B,eAA5B,CAAxB","sourcesContent":["import bodyParser from 'body-parser';\nimport moment from 'moment';\nimport multipart from 'connect-multiparty';\n\nimport SlackService from '../../slack/server/SlackService';\nimport {\n  REST_API_ERRORS,\n  BODY_SIZE_LIMIT,\n  FILE_UPLOAD_DIR,\n} from './restApiConstants';\nimport UserService from '../../users/server/UserService';\nimport {\n  getRequestPath,\n  getHeader,\n  getRequestMethod,\n  getErrorObject,\n  getPublicKey,\n  verifySignature,\n  getSignature,\n  logRequest,\n  trackRequest,\n  getMatchingPathOptions,\n} from './helpers';\nimport { nonceExists, addNonce, NONCE_TTL } from './noncesHandler';\n\nconst bodyParserJsonMiddleware = () =>\n  bodyParser.json({ limit: BODY_SIZE_LIMIT });\n\nconst bodyParserUrlEncodedMiddleware = () =>\n  bodyParser.urlencoded({\n    extended: false,\n    limit: BODY_SIZE_LIMIT,\n  });\n\n// Handles replay attacks\nconst replayHandlerMiddleware = options => (req, res, next) => {\n  if (req.isMultipart) {\n    return next();\n  }\n  const timestamp = getHeader(req, 'x-epotek-timestamp');\n  const nonce = getHeader(req, 'x-epotek-nonce');\n\n  if (!timestamp || !nonce) {\n    return next(REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT);\n  }\n\n  const now = moment().unix();\n\n  // This is an old request\n  if (timestamp < now - NONCE_TTL) {\n    return next(REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT);\n  }\n  if (nonceExists(nonce)) {\n    return next(REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT);\n  }\n\n  addNonce(nonce);\n\n  next();\n};\n\n// Filters out badly formatted requests, or ones missing basic headers\nconst filterMiddleware = options => (req, res, next) => {\n  const endpointOptions = getMatchingPathOptions(req, options);\n\n  const supportedContentType = endpointOptions.multipart\n    ? 'multipart/form-data'\n    : 'application/json';\n  const contentType = getHeader(req, 'content-type');\n  const isMultipart = contentType.includes('multipart/form-data');\n\n  if (!contentType || !contentType.includes(supportedContentType)) {\n    return next(REST_API_ERRORS.WRONG_CONTENT_TYPE(\n      contentType.split(';')[0],\n      supportedContentType,\n    ));\n  }\n\n  if (isMultipart) {\n    req.isMultipart = true;\n  }\n\n  next();\n};\n\n// Gets the public key from the request, fetches the user and adds it to the request\nconst authMiddleware = options => (req, res, next) => {\n  const publicKey = getPublicKey(req);\n  const signature = getSignature(req);\n\n  if (!publicKey || !signature) {\n    return next(REST_API_ERRORS.WRONG_AUTHORIZATION_TYPE);\n  }\n\n  const user = UserService.fetchOne({\n    $filters: {\n      'apiPublicKey.publicKey': publicKey,\n    },\n    emails: 1,\n    firstName: 1,\n    lastName: 1,\n    phoneNumbers: 1,\n  });\n\n  if (!user) {\n    return next(REST_API_ERRORS.AUTHORIZATION_FAILED('No user found with this public key, or maybe it has a typo ?'));\n  }\n\n  req.publicKey = publicKey;\n  req.signature = signature;\n\n  const verifiedSignature = verifySignature(req);\n\n  if (!verifiedSignature.verified) {\n    return next(REST_API_ERRORS.AUTHORIZATION_FAILED({\n      expectedObjectToSign: verifiedSignature.toVerify,\n    }));\n  }\n\n  req.user = user;\n\n  next();\n};\n\n// Handles all errors, should be added as the very last middleware\nconst errorMiddleware = options => (error, req, res, next) => {\n  const { info } = error;\n  const { status, errorName, message } = getErrorObject(error, res);\n  const { user = {}, body = {}, params = {}, query = {}, headers = {} } = req;\n\n  SlackService.sendError({\n    error,\n    additionalData: [\n      Object.keys(body).length > 0 && { body },\n      Object.keys(params).length > 0 && { params },\n      Object.keys(query).length > 0 && { query },\n      Object.keys(headers).length > 0 && { headers },\n    ].filter(x => x),\n    userId: user._id,\n    url: getRequestPath(req),\n  });\n\n  logRequest({ req, result: JSON.stringify({ status, errorName, message }) });\n  if (Object.keys(user) > 0) {\n    trackRequest({\n      req,\n      result: JSON.stringify({ status, errorName, message }),\n    });\n  }\n\n  res.writeHead(status);\n  res.write(JSON.stringify({ status, errorName, message, info }));\n  res.end();\n};\n\n// If no endpoint has sent a response, this should send back a 404\nconst unknownEndpointMiddleware = options => (req, res, next) => {\n  next(REST_API_ERRORS.UNKNOWN_ENDPOINT({\n    path: getRequestPath(req),\n    method: getRequestMethod(req),\n  }));\n};\n\nconst multipartMiddleware = options => (req, res, next) => {\n  const middleware = multipart({ uploadDir: FILE_UPLOAD_DIR });\n  const { isMultipart } = req;\n\n  return isMultipart ? middleware(req, res, next) : next();\n};\n\nexport const preMiddlewares = [\n  filterMiddleware,\n  multipartMiddleware,\n  bodyParserJsonMiddleware,\n  bodyParserUrlEncodedMiddleware,\n  authMiddleware,\n  replayHandlerMiddleware,\n];\nexport const postMiddlewares = [unknownEndpointMiddleware, errorMiddleware];\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/middlewares.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/middlewares.js"}},"code":"module.export({\n  preMiddlewares: () => preMiddlewares,\n  postMiddlewares: () => postMiddlewares\n});\nlet bodyParser;\nmodule.link(\"body-parser\", {\n  default(v) {\n    bodyParser = v;\n  }\n\n}, 0);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 1);\nlet multipart;\nmodule.link(\"connect-multiparty\", {\n  default(v) {\n    multipart = v;\n  }\n\n}, 2);\nlet SlackService;\nmodule.link(\"../../slack/server/SlackService\", {\n  default(v) {\n    SlackService = v;\n  }\n\n}, 3);\nlet REST_API_ERRORS, BODY_SIZE_LIMIT, FILE_UPLOAD_DIR;\nmodule.link(\"./restApiConstants\", {\n  REST_API_ERRORS(v) {\n    REST_API_ERRORS = v;\n  },\n\n  BODY_SIZE_LIMIT(v) {\n    BODY_SIZE_LIMIT = v;\n  },\n\n  FILE_UPLOAD_DIR(v) {\n    FILE_UPLOAD_DIR = v;\n  }\n\n}, 4);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 5);\nlet getRequestPath, getHeader, getRequestMethod, getErrorObject, getPublicKey, verifySignature, getSignature, logRequest, trackRequest, getMatchingPathOptions;\nmodule.link(\"./helpers\", {\n  getRequestPath(v) {\n    getRequestPath = v;\n  },\n\n  getHeader(v) {\n    getHeader = v;\n  },\n\n  getRequestMethod(v) {\n    getRequestMethod = v;\n  },\n\n  getErrorObject(v) {\n    getErrorObject = v;\n  },\n\n  getPublicKey(v) {\n    getPublicKey = v;\n  },\n\n  verifySignature(v) {\n    verifySignature = v;\n  },\n\n  getSignature(v) {\n    getSignature = v;\n  },\n\n  logRequest(v) {\n    logRequest = v;\n  },\n\n  trackRequest(v) {\n    trackRequest = v;\n  },\n\n  getMatchingPathOptions(v) {\n    getMatchingPathOptions = v;\n  }\n\n}, 6);\nlet nonceExists, addNonce, NONCE_TTL;\nmodule.link(\"./noncesHandler\", {\n  nonceExists(v) {\n    nonceExists = v;\n  },\n\n  addNonce(v) {\n    addNonce = v;\n  },\n\n  NONCE_TTL(v) {\n    NONCE_TTL = v;\n  }\n\n}, 7);\n\nconst bodyParserJsonMiddleware = () => bodyParser.json({\n  limit: BODY_SIZE_LIMIT\n});\n\nconst bodyParserUrlEncodedMiddleware = () => bodyParser.urlencoded({\n  extended: false,\n  limit: BODY_SIZE_LIMIT\n}); // Handles replay attacks\n\n\nconst replayHandlerMiddleware = options => (req, res, next) => {\n  if (req.isMultipart) {\n    return next();\n  }\n\n  const timestamp = getHeader(req, 'x-epotek-timestamp');\n  const nonce = getHeader(req, 'x-epotek-nonce');\n\n  if (!timestamp || !nonce) {\n    return next(REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT);\n  }\n\n  const now = moment().unix(); // This is an old request\n\n  if (timestamp < now - NONCE_TTL) {\n    return next(REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT);\n  }\n\n  if (nonceExists(nonce)) {\n    return next(REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT);\n  }\n\n  addNonce(nonce);\n  next();\n}; // Filters out badly formatted requests, or ones missing basic headers\n\n\nconst filterMiddleware = options => (req, res, next) => {\n  const endpointOptions = getMatchingPathOptions(req, options);\n  const supportedContentType = endpointOptions.multipart ? 'multipart/form-data' : 'application/json';\n  const contentType = getHeader(req, 'content-type');\n  const isMultipart = contentType.includes('multipart/form-data');\n\n  if (!contentType || !contentType.includes(supportedContentType)) {\n    return next(REST_API_ERRORS.WRONG_CONTENT_TYPE(contentType.split(';')[0], supportedContentType));\n  }\n\n  if (isMultipart) {\n    req.isMultipart = true;\n  }\n\n  next();\n}; // Gets the public key from the request, fetches the user and adds it to the request\n\n\nconst authMiddleware = options => (req, res, next) => {\n  const publicKey = getPublicKey(req);\n  const signature = getSignature(req);\n\n  if (!publicKey || !signature) {\n    return next(REST_API_ERRORS.WRONG_AUTHORIZATION_TYPE);\n  }\n\n  const user = UserService.fetchOne({\n    $filters: {\n      'apiPublicKey.publicKey': publicKey\n    },\n    emails: 1,\n    firstName: 1,\n    lastName: 1,\n    phoneNumbers: 1\n  });\n\n  if (!user) {\n    return next(REST_API_ERRORS.AUTHORIZATION_FAILED('No user found with this public key, or maybe it has a typo ?'));\n  }\n\n  req.publicKey = publicKey;\n  req.signature = signature;\n  const verifiedSignature = verifySignature(req);\n\n  if (!verifiedSignature.verified) {\n    return next(REST_API_ERRORS.AUTHORIZATION_FAILED({\n      expectedObjectToSign: verifiedSignature.toVerify\n    }));\n  }\n\n  req.user = user;\n  next();\n}; // Handles all errors, should be added as the very last middleware\n\n\nconst errorMiddleware = options => (error, req, res, next) => {\n  const {\n    info\n  } = error;\n  const {\n    status,\n    errorName,\n    message\n  } = getErrorObject(error, res);\n  const {\n    user = {},\n    body = {},\n    params = {},\n    query = {},\n    headers = {}\n  } = req;\n  SlackService.sendError({\n    error,\n    additionalData: [Object.keys(body).length > 0 && {\n      body\n    }, Object.keys(params).length > 0 && {\n      params\n    }, Object.keys(query).length > 0 && {\n      query\n    }, Object.keys(headers).length > 0 && {\n      headers\n    }].filter(x => x),\n    userId: user._id,\n    url: getRequestPath(req)\n  });\n  logRequest({\n    req,\n    result: JSON.stringify({\n      status,\n      errorName,\n      message\n    })\n  });\n\n  if (Object.keys(user) > 0) {\n    trackRequest({\n      req,\n      result: JSON.stringify({\n        status,\n        errorName,\n        message\n      })\n    });\n  }\n\n  res.writeHead(status);\n  res.write(JSON.stringify({\n    status,\n    errorName,\n    message,\n    info\n  }));\n  res.end();\n}; // If no endpoint has sent a response, this should send back a 404\n\n\nconst unknownEndpointMiddleware = options => (req, res, next) => {\n  next(REST_API_ERRORS.UNKNOWN_ENDPOINT({\n    path: getRequestPath(req),\n    method: getRequestMethod(req)\n  }));\n};\n\nconst multipartMiddleware = options => (req, res, next) => {\n  const middleware = multipart({\n    uploadDir: FILE_UPLOAD_DIR\n  });\n  const {\n    isMultipart\n  } = req;\n  return isMultipart ? middleware(req, res, next) : next();\n};\n\nconst preMiddlewares = [filterMiddleware, multipartMiddleware, bodyParserJsonMiddleware, bodyParserUrlEncodedMiddleware, authMiddleware, replayHandlerMiddleware];\nconst postMiddlewares = [unknownEndpointMiddleware, errorMiddleware];","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/middlewares.js"],"names":["bodyParser","bodyParserJsonMiddleware","limit","BODY_SIZE_LIMIT","bodyParserUrlEncodedMiddleware","extended","replayHandlerMiddleware","options","req","next","timestamp","getHeader","nonce","REST_API_ERRORS","now","moment","nonceExists","addNonce","filterMiddleware","endpointOptions","getMatchingPathOptions","supportedContentType","contentType","isMultipart","authMiddleware","publicKey","getPublicKey","signature","getSignature","user","$filters","emails","firstName","lastName","phoneNumbers","verifiedSignature","verifySignature","expectedObjectToSign","toVerify","errorMiddleware","info","message","getErrorObject","body","params","query","headers","SlackService","additionalData","Object","x","userId","url","getRequestPath","logRequest","result","trackRequest","res","unknownEndpointMiddleware","path","method","getRequestMethod","multipartMiddleware","middleware","multipart","uploadDir","FILE_UPLOAD_DIR","preMiddlewares","postMiddlewares"],"mappings":"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","sourcesContent":["import bodyParser from 'body-parser';\nimport moment from 'moment';\nimport multipart from 'connect-multiparty';\n\nimport SlackService from '../../slack/server/SlackService';\nimport {\n  REST_API_ERRORS,\n  BODY_SIZE_LIMIT,\n  FILE_UPLOAD_DIR,\n} from './restApiConstants';\nimport UserService from '../../users/server/UserService';\nimport {\n  getRequestPath,\n  getHeader,\n  getRequestMethod,\n  getErrorObject,\n  getPublicKey,\n  verifySignature,\n  getSignature,\n  logRequest,\n  trackRequest,\n  getMatchingPathOptions,\n} from './helpers';\nimport { nonceExists, addNonce, NONCE_TTL } from './noncesHandler';\n\nconst bodyParserJsonMiddleware = () =>\n  bodyParser.json({ limit: BODY_SIZE_LIMIT });\n\nconst bodyParserUrlEncodedMiddleware = () =>\n  bodyParser.urlencoded({\n    extended: false,\n    limit: BODY_SIZE_LIMIT,\n  });\n\n// Handles replay attacks\nconst replayHandlerMiddleware = options => (req, res, next) => {\n  if (req.isMultipart) {\n    return next();\n  }\n  const timestamp = getHeader(req, 'x-epotek-timestamp');\n  const nonce = getHeader(req, 'x-epotek-nonce');\n\n  if (!timestamp || !nonce) {\n    return next(REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT);\n  }\n\n  const now = moment().unix();\n\n  // This is an old request\n  if (timestamp < now - NONCE_TTL) {\n    return next(REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT);\n  }\n  if (nonceExists(nonce)) {\n    return next(REST_API_ERRORS.REPLAY_ATTACK_ATTEMPT);\n  }\n\n  addNonce(nonce);\n\n  next();\n};\n\n// Filters out badly formatted requests, or ones missing basic headers\nconst filterMiddleware = options => (req, res, next) => {\n  const endpointOptions = getMatchingPathOptions(req, options);\n\n  const supportedContentType = endpointOptions.multipart\n    ? 'multipart/form-data'\n    : 'application/json';\n  const contentType = getHeader(req, 'content-type');\n  const isMultipart = contentType.includes('multipart/form-data');\n\n  if (!contentType || !contentType.includes(supportedContentType)) {\n    return next(REST_API_ERRORS.WRONG_CONTENT_TYPE(\n      contentType.split(';')[0],\n      supportedContentType,\n    ));\n  }\n\n  if (isMultipart) {\n    req.isMultipart = true;\n  }\n\n  next();\n};\n\n// Gets the public key from the request, fetches the user and adds it to the request\nconst authMiddleware = options => (req, res, next) => {\n  const publicKey = getPublicKey(req);\n  const signature = getSignature(req);\n\n  if (!publicKey || !signature) {\n    return next(REST_API_ERRORS.WRONG_AUTHORIZATION_TYPE);\n  }\n\n  const user = UserService.fetchOne({\n    $filters: {\n      'apiPublicKey.publicKey': publicKey,\n    },\n    emails: 1,\n    firstName: 1,\n    lastName: 1,\n    phoneNumbers: 1,\n  });\n\n  if (!user) {\n    return next(REST_API_ERRORS.AUTHORIZATION_FAILED('No user found with this public key, or maybe it has a typo ?'));\n  }\n\n  req.publicKey = publicKey;\n  req.signature = signature;\n\n  const verifiedSignature = verifySignature(req);\n\n  if (!verifiedSignature.verified) {\n    return next(REST_API_ERRORS.AUTHORIZATION_FAILED({\n      expectedObjectToSign: verifiedSignature.toVerify,\n    }));\n  }\n\n  req.user = user;\n\n  next();\n};\n\n// Handles all errors, should be added as the very last middleware\nconst errorMiddleware = options => (error, req, res, next) => {\n  const { info } = error;\n  const { status, errorName, message } = getErrorObject(error, res);\n  const { user = {}, body = {}, params = {}, query = {}, headers = {} } = req;\n\n  SlackService.sendError({\n    error,\n    additionalData: [\n      Object.keys(body).length > 0 && { body },\n      Object.keys(params).length > 0 && { params },\n      Object.keys(query).length > 0 && { query },\n      Object.keys(headers).length > 0 && { headers },\n    ].filter(x => x),\n    userId: user._id,\n    url: getRequestPath(req),\n  });\n\n  logRequest({ req, result: JSON.stringify({ status, errorName, message }) });\n  if (Object.keys(user) > 0) {\n    trackRequest({\n      req,\n      result: JSON.stringify({ status, errorName, message }),\n    });\n  }\n\n  res.writeHead(status);\n  res.write(JSON.stringify({ status, errorName, message, info }));\n  res.end();\n};\n\n// If no endpoint has sent a response, this should send back a 404\nconst unknownEndpointMiddleware = options => (req, res, next) => {\n  next(REST_API_ERRORS.UNKNOWN_ENDPOINT({\n    path: getRequestPath(req),\n    method: getRequestMethod(req),\n  }));\n};\n\nconst multipartMiddleware = options => (req, res, next) => {\n  const middleware = multipart({ uploadDir: FILE_UPLOAD_DIR });\n  const { isMultipart } = req;\n\n  return isMultipart ? middleware(req, res, next) : next();\n};\n\nexport const preMiddlewares = [\n  filterMiddleware,\n  multipartMiddleware,\n  bodyParserJsonMiddleware,\n  bodyParserUrlEncodedMiddleware,\n  authMiddleware,\n  replayHandlerMiddleware,\n];\nexport const postMiddlewares = [unknownEndpointMiddleware, errorMiddleware];\n"]},"sourceType":"script","hash":"191794dabbd0e93543317f14a2506500f18d7a6d"}

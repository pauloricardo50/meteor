{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/deleteFile.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/deleteFile.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/deleteFile.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/deleteFile.test.js"],"names":["Meteor","resetDatabase","expect","appendFileSync","Random","PROPERTY_DOCUMENTS","makeFileUploadDir","flushFileUploadDir","PropertyService","generator","PROPERTY_CATEGORY","PROPERTY_PERMISSIONS_FULL_ACCESS","uploadFile","fetchAndCheckResponse","makeHeaders","getTimestampAndNonce","RESTAPI","uploadFileAPI","deleteFileAPI","FILE_UPLOAD_DIR","HTTP_STATUS_CODES","api","propertyId","addEndpoint","multipart","deleteFile","key","propId","impersonateUser","userId","timestamp","nonce","body","query","undefined","url","data","method","headers","JSON","stringify","describe","timeout","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","id","users","_id","_factory","organisations","emails","address","verified","proProperties","category","PRO","externalId","it","setProUserPermissions","permissions","filePath","PROPERTY_PICTURES","then","res","files","length","to","equal","Key","deletedFiles","canModifyProperty","status","message","FORBIDDEN","include","NOT_FOUND","BAD_REQUEST"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\nimport { appendFileSync } from 'fs';\nimport { Random } from 'meteor/random';\n\nimport {\n  PROPERTY_DOCUMENTS,\n} from 'core/api/files/fileConstants';\nimport { makeFileUploadDir, flushFileUploadDir } from 'core/utils/filesUtils';\n\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport generator from '../../../../factories';\nimport {\n  PROPERTY_CATEGORY,\n  PROPERTY_PERMISSIONS_FULL_ACCESS,\n} from '../../../../properties/propertyConstants';\nimport {\n  uploadFile,\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\nimport RESTAPI from '../../RESTAPI';\nimport { uploadFileAPI, deleteFileAPI } from '..';\nimport { FILE_UPLOAD_DIR, HTTP_STATUS_CODES } from '../../restApiConstants';\n\nconst api = new RESTAPI();\nlet propertyId = '';\napi.addEndpoint('/upload', 'POST', uploadFileAPI, { multipart: true });\napi.addEndpoint('/deleteFile', 'POST', deleteFileAPI);\n\nconst deleteFile = ({ key, propertyId: propId, impersonateUser, userId }) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n\n  const body = { key, propertyId: propId };\n  const query = impersonateUser\n    ? { 'impersonate-user': impersonateUser }\n    : undefined;\n\n  return fetchAndCheckResponse({\n    url: '/deleteFile',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n  });\n};\n\ndescribe('REST: deleteFile', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    propertyId = Random.id();\n    generator({\n      users: [\n        {\n          _id: 'pro',\n          _factory: 'pro',\n          organisations: { _id: 'org1' },\n          emails: [{ address: 'pro@org.com', verified: true }],\n          proProperties: {\n            _id: propertyId,\n            category: PROPERTY_CATEGORY.PRO,\n            externalId: 'extId',\n          },\n        },\n        {\n          _id: 'pro2',\n          _factory: 'pro',\n          organisations: { _id: 'org1' },\n          emails: [{ address: 'pro2@org.com', verified: true }],\n        },\n      ],\n    });\n  });\n\n  it('deletes a file', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(1);\n        return files[0].Key;\n      })\n      .then(key =>\n        deleteFile({ key, propertyId, userId: 'pro' }).then((res) => {\n          const { deletedFiles = [] } = res;\n          expect(deletedFiles.length).to.equal(1);\n          expect(deletedFiles[0].Key).to.equal(key);\n        }));\n  });\n\n  it('does not allow to delete file when user does not have permissions', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(1);\n        return files[0].Key;\n      })\n      .then((key) => {\n        PropertyService.setProUserPermissions({\n          propertyId,\n          userId: 'pro',\n          permissions: { canModifyProperty: false },\n        });\n\n        return deleteFile({ key, propertyId, userId: 'pro' }).then((res) => {\n          const { status, message } = res;\n          expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n          expect(message).to.include('[NOT_AUTHORIZED]');\n        });\n      });\n  });\n\n  it('works when impersonating', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(1);\n        return files[0].Key;\n      })\n      .then(key =>\n        deleteFile({\n          key,\n          propertyId,\n          userId: 'pro2',\n          impersonateUser: 'pro@org.com',\n        }).then((res) => {\n          const { deletedFiles = [] } = res;\n          expect(deletedFiles.length).to.equal(1);\n          expect(deletedFiles[0].Key).to.equal(key);\n        }));\n  });\n\n  it('fails with a wrong propertyId', () =>\n    deleteFile({\n      key: 'wathever',\n      propertyId: '12345',\n      userId: 'pro',\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.NOT_FOUND);\n      expect(message).to.include('No property found');\n    }));\n\n  it('fails with a wrong key', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n\n    return deleteFile({\n      key: 'wathever',\n      propertyId,\n      userId: 'pro',\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.NOT_FOUND);\n      expect(message).to.include('not found');\n    });\n  });\n\n  it('fails when no propertyId is given', () =>\n    deleteFile({\n      key: 'wathever',\n      userId: 'pro',\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.BAD_REQUEST);\n      expect(message).to.include('Property ID is required');\n    }));\n\n  it('works with an external id', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(1);\n        return files[0].Key;\n      })\n      .then(key =>\n        deleteFile({ key, propertyId: 'extId', userId: 'pro' }).then((res) => {\n          const { deletedFiles = [] } = res;\n          expect(deletedFiles.length).to.equal(1);\n          expect(deletedFiles[0].Key).to.equal(key);\n        }));\n  });\n\n  \n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/deleteFile.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/deleteFile.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet appendFileSync;\nmodule.link(\"fs\", {\n  appendFileSync(v) {\n    appendFileSync = v;\n  }\n\n}, 3);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 4);\nlet PROPERTY_DOCUMENTS;\nmodule.link(\"../../../../files/fileConstants\", {\n  PROPERTY_DOCUMENTS(v) {\n    PROPERTY_DOCUMENTS = v;\n  }\n\n}, 5);\nlet makeFileUploadDir, flushFileUploadDir;\nmodule.link(\"../../../../../utils/filesUtils\", {\n  makeFileUploadDir(v) {\n    makeFileUploadDir = v;\n  },\n\n  flushFileUploadDir(v) {\n    flushFileUploadDir = v;\n  }\n\n}, 6);\nlet PropertyService;\nmodule.link(\"../../../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 7);\nlet generator;\nmodule.link(\"../../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 8);\nlet PROPERTY_CATEGORY, PROPERTY_PERMISSIONS_FULL_ACCESS;\nmodule.link(\"../../../../properties/propertyConstants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  },\n\n  PROPERTY_PERMISSIONS_FULL_ACCESS(v) {\n    PROPERTY_PERMISSIONS_FULL_ACCESS = v;\n  }\n\n}, 9);\nlet uploadFile, fetchAndCheckResponse, makeHeaders, getTimestampAndNonce;\nmodule.link(\"../../test/apiTestHelpers.test\", {\n  uploadFile(v) {\n    uploadFile = v;\n  },\n\n  fetchAndCheckResponse(v) {\n    fetchAndCheckResponse = v;\n  },\n\n  makeHeaders(v) {\n    makeHeaders = v;\n  },\n\n  getTimestampAndNonce(v) {\n    getTimestampAndNonce = v;\n  }\n\n}, 10);\nlet RESTAPI;\nmodule.link(\"../../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 11);\nlet uploadFileAPI, deleteFileAPI;\nmodule.link(\"..\", {\n  uploadFileAPI(v) {\n    uploadFileAPI = v;\n  },\n\n  deleteFileAPI(v) {\n    deleteFileAPI = v;\n  }\n\n}, 12);\nlet FILE_UPLOAD_DIR, HTTP_STATUS_CODES;\nmodule.link(\"../../restApiConstants\", {\n  FILE_UPLOAD_DIR(v) {\n    FILE_UPLOAD_DIR = v;\n  },\n\n  HTTP_STATUS_CODES(v) {\n    HTTP_STATUS_CODES = v;\n  }\n\n}, 13);\nconst api = new RESTAPI();\nlet propertyId = '';\napi.addEndpoint('/upload', 'POST', uploadFileAPI, {\n  multipart: true\n});\napi.addEndpoint('/deleteFile', 'POST', deleteFileAPI);\n\nconst deleteFile = ({\n  key,\n  propertyId: propId,\n  impersonateUser,\n  userId\n}) => {\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  const body = {\n    key,\n    propertyId: propId\n  };\n  const query = impersonateUser ? {\n    'impersonate-user': impersonateUser\n  } : undefined;\n  return fetchAndCheckResponse({\n    url: '/deleteFile',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        body,\n        query\n      }),\n      body: JSON.stringify(body)\n    }\n  });\n};\n\ndescribe('REST: deleteFile', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    propertyId = Random.id();\n    generator({\n      users: [{\n        _id: 'pro',\n        _factory: 'pro',\n        organisations: {\n          _id: 'org1'\n        },\n        emails: [{\n          address: 'pro@org.com',\n          verified: true\n        }],\n        proProperties: {\n          _id: propertyId,\n          category: PROPERTY_CATEGORY.PRO,\n          externalId: 'extId'\n        }\n      }, {\n        _id: 'pro2',\n        _factory: 'pro',\n        organisations: {\n          _id: 'org1'\n        },\n        emails: [{\n          address: 'pro2@org.com',\n          verified: true\n        }]\n      }]\n    });\n  });\n  it('deletes a file', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        files\n      } = res;\n      expect(files.length).to.equal(1);\n      return files[0].Key;\n    }).then(key => deleteFile({\n      key,\n      propertyId,\n      userId: 'pro'\n    }).then(res => {\n      const {\n        deletedFiles = []\n      } = res;\n      expect(deletedFiles.length).to.equal(1);\n      expect(deletedFiles[0].Key).to.equal(key);\n    }));\n  });\n  it('does not allow to delete file when user does not have permissions', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        files\n      } = res;\n      expect(files.length).to.equal(1);\n      return files[0].Key;\n    }).then(key => {\n      PropertyService.setProUserPermissions({\n        propertyId,\n        userId: 'pro',\n        permissions: {\n          canModifyProperty: false\n        }\n      });\n      return deleteFile({\n        key,\n        propertyId,\n        userId: 'pro'\n      }).then(res => {\n        const {\n          status,\n          message\n        } = res;\n        expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n        expect(message).to.include('[NOT_AUTHORIZED]');\n      });\n    });\n  });\n  it('works when impersonating', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        files\n      } = res;\n      expect(files.length).to.equal(1);\n      return files[0].Key;\n    }).then(key => deleteFile({\n      key,\n      propertyId,\n      userId: 'pro2',\n      impersonateUser: 'pro@org.com'\n    }).then(res => {\n      const {\n        deletedFiles = []\n      } = res;\n      expect(deletedFiles.length).to.equal(1);\n      expect(deletedFiles[0].Key).to.equal(key);\n    }));\n  });\n  it('fails with a wrong propertyId', () => deleteFile({\n    key: 'wathever',\n    propertyId: '12345',\n    userId: 'pro'\n  }).then(res => {\n    const {\n      status,\n      message\n    } = res;\n    expect(status).to.equal(HTTP_STATUS_CODES.NOT_FOUND);\n    expect(message).to.include('No property found');\n  }));\n  it('fails with a wrong key', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    return deleteFile({\n      key: 'wathever',\n      propertyId,\n      userId: 'pro'\n    }).then(res => {\n      const {\n        status,\n        message\n      } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.NOT_FOUND);\n      expect(message).to.include('not found');\n    });\n  });\n  it('fails when no propertyId is given', () => deleteFile({\n    key: 'wathever',\n    userId: 'pro'\n  }).then(res => {\n    const {\n      status,\n      message\n    } = res;\n    expect(status).to.equal(HTTP_STATUS_CODES.BAD_REQUEST);\n    expect(message).to.include('Property ID is required');\n  }));\n  it('works with an external id', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES\n    }).then(res => {\n      const {\n        files\n      } = res;\n      expect(files.length).to.equal(1);\n      return files[0].Key;\n    }).then(key => deleteFile({\n      key,\n      propertyId: 'extId',\n      userId: 'pro'\n    }).then(res => {\n      const {\n        deletedFiles = []\n      } = res;\n      expect(deletedFiles.length).to.equal(1);\n      expect(deletedFiles[0].Key).to.equal(key);\n    }));\n  });\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/deleteFile.test.js"],"names":["api","propertyId","multipart","deleteFile","userId","nonce","getTimestampAndNonce","body","propId","query","impersonateUser","fetchAndCheckResponse","url","data","method","headers","makeHeaders","JSON","describe","before","Meteor","makeFileUploadDir","flushFileUploadDir","after","beforeEach","resetDatabase","Random","generator","users","_id","_factory","organisations","emails","address","verified","proProperties","category","PROPERTY_CATEGORY","externalId","it","PropertyService","permissions","PROPERTY_PERMISSIONS_FULL_ACCESS","filePath","FILE_UPLOAD_DIR","appendFileSync","PROPERTY_DOCUMENTS","PROPERTY_PICTURES","res","files","expect","key","deletedFiles","canModifyProperty","message","HTTP_STATUS_CODES"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\nimport { appendFileSync } from 'fs';\nimport { Random } from 'meteor/random';\n\nimport {\n  PROPERTY_DOCUMENTS,\n} from 'core/api/files/fileConstants';\nimport { makeFileUploadDir, flushFileUploadDir } from 'core/utils/filesUtils';\n\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport generator from '../../../../factories';\nimport {\n  PROPERTY_CATEGORY,\n  PROPERTY_PERMISSIONS_FULL_ACCESS,\n} from '../../../../properties/propertyConstants';\nimport {\n  uploadFile,\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\nimport RESTAPI from '../../RESTAPI';\nimport { uploadFileAPI, deleteFileAPI } from '..';\nimport { FILE_UPLOAD_DIR, HTTP_STATUS_CODES } from '../../restApiConstants';\n\nconst api = new RESTAPI();\nlet propertyId = '';\napi.addEndpoint('/upload', 'POST', uploadFileAPI, { multipart: true });\napi.addEndpoint('/deleteFile', 'POST', deleteFileAPI);\n\nconst deleteFile = ({ key, propertyId: propId, impersonateUser, userId }) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n\n  const body = { key, propertyId: propId };\n  const query = impersonateUser\n    ? { 'impersonate-user': impersonateUser }\n    : undefined;\n\n  return fetchAndCheckResponse({\n    url: '/deleteFile',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n  });\n};\n\ndescribe('REST: deleteFile', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      makeFileUploadDir();\n      flushFileUploadDir();\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    propertyId = Random.id();\n    generator({\n      users: [\n        {\n          _id: 'pro',\n          _factory: 'pro',\n          organisations: { _id: 'org1' },\n          emails: [{ address: 'pro@org.com', verified: true }],\n          proProperties: {\n            _id: propertyId,\n            category: PROPERTY_CATEGORY.PRO,\n            externalId: 'extId',\n          },\n        },\n        {\n          _id: 'pro2',\n          _factory: 'pro',\n          organisations: { _id: 'org1' },\n          emails: [{ address: 'pro2@org.com', verified: true }],\n        },\n      ],\n    });\n  });\n\n  it('deletes a file', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(1);\n        return files[0].Key;\n      })\n      .then(key =>\n        deleteFile({ key, propertyId, userId: 'pro' }).then((res) => {\n          const { deletedFiles = [] } = res;\n          expect(deletedFiles.length).to.equal(1);\n          expect(deletedFiles[0].Key).to.equal(key);\n        }));\n  });\n\n  it('does not allow to delete file when user does not have permissions', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(1);\n        return files[0].Key;\n      })\n      .then((key) => {\n        PropertyService.setProUserPermissions({\n          propertyId,\n          userId: 'pro',\n          permissions: { canModifyProperty: false },\n        });\n\n        return deleteFile({ key, propertyId, userId: 'pro' }).then((res) => {\n          const { status, message } = res;\n          expect(status).to.equal(HTTP_STATUS_CODES.FORBIDDEN);\n          expect(message).to.include('[NOT_AUTHORIZED]');\n        });\n      });\n  });\n\n  it('works when impersonating', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(1);\n        return files[0].Key;\n      })\n      .then(key =>\n        deleteFile({\n          key,\n          propertyId,\n          userId: 'pro2',\n          impersonateUser: 'pro@org.com',\n        }).then((res) => {\n          const { deletedFiles = [] } = res;\n          expect(deletedFiles.length).to.equal(1);\n          expect(deletedFiles[0].Key).to.equal(key);\n        }));\n  });\n\n  it('fails with a wrong propertyId', () =>\n    deleteFile({\n      key: 'wathever',\n      propertyId: '12345',\n      userId: 'pro',\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.NOT_FOUND);\n      expect(message).to.include('No property found');\n    }));\n\n  it('fails with a wrong key', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n\n    return deleteFile({\n      key: 'wathever',\n      propertyId,\n      userId: 'pro',\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.NOT_FOUND);\n      expect(message).to.include('not found');\n    });\n  });\n\n  it('fails when no propertyId is given', () =>\n    deleteFile({\n      key: 'wathever',\n      userId: 'pro',\n    }).then((res) => {\n      const { status, message } = res;\n      expect(status).to.equal(HTTP_STATUS_CODES.BAD_REQUEST);\n      expect(message).to.include('Property ID is required');\n    }));\n\n  it('works with an external id', () => {\n    PropertyService.setProUserPermissions({\n      propertyId,\n      userId: 'pro',\n      permissions: PROPERTY_PERMISSIONS_FULL_ACCESS,\n    });\n    const filePath = `${FILE_UPLOAD_DIR}/myFile.txt`;\n    appendFileSync(filePath, 'Hello');\n    return uploadFile({\n      filePath,\n      userId: 'pro',\n      url: '/upload',\n      propertyId,\n      category: PROPERTY_DOCUMENTS.PROPERTY_PICTURES,\n    })\n      .then((res) => {\n        const { files } = res;\n        expect(files.length).to.equal(1);\n        return files[0].Key;\n      })\n      .then(key =>\n        deleteFile({ key, propertyId: 'extId', userId: 'pro' }).then((res) => {\n          const { deletedFiles = [] } = res;\n          expect(deletedFiles.length).to.equal(1);\n          expect(deletedFiles[0].Key).to.equal(key);\n        }));\n  });\n\n  \n});\n"]},"sourceType":"script","hash":"4dd5b63e0436f6d6dfc202578bf333984dfb6cf8"}
